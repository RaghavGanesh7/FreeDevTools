{
  "category": "cloud-platforms",
  "categoryDisplay": "Cloud Platforms",
  "description": "Cloud platform service integration. Enables management and interaction with cloud infrastructure and services.",
  "totalRepositories": 27,
  "repositories": {
    "4everland--4everland-hosting-mcp": {
      "owner": "4everland",
      "name": "4everland-hosting-mcp",
      "url": "https://github.com/4everland/4everland-hosting-mcp",
      "imageUrl": "",
      "description": "An MCP server implementation for 4EVERLAND Hosting enabling instant deployment of AI-generated code to decentralized storage networks like Greenfield, IPFS, and Arweave.",
      "stars": 1,
      "forks": 3,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-06T14:18:37Z",
      "readme_content": "# 4EVERLAND Hosting MCP Server\n\n[![Version](https://img.shields.io/ repository\ngit clone https://github.com/4everland/4everland-hosting-mcp.git\ncd 4everland-hosting-mcp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Run the server locally\nnpm run serve\n```\n\n## License\n\nThis project is licensed under the MIT License.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cloud",
        "platform",
        "platforms",
        "cloud platforms",
        "cloud platform",
        "platforms cloud"
      ],
      "category": "cloud-platforms"
    },
    "Nebula-Block-Data--nebulablock-mcp-server": {
      "owner": "Nebula-Block-Data",
      "name": "nebulablock-mcp-server",
      "url": "https://github.com/Nebula-Block-Data/nebulablock-mcp-server",
      "imageUrl": "",
      "description": "integrates with the fastmcp library to expose the full range of NebulaBlock API functionalities as accessible tools",
      "stars": 1,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-07-25T07:01:11Z",
      "readme_content": "# NebulaBlock API MCP\n\nThis repository hosts the official NebulaBlock API Model Context Protocol (MCP) server. This server integrates with the `fastmcp` library to expose the full range of NebulaBlock API functionalities as accessible tools, enabling seamless and efficient interaction within any MCP-compatible environment.\n\n## Project Structure\n\n```\n.\n├── src/\n│   ├── __init__.py\n│   ├── config.py\n│   ├── main.py\n│   ├── tools.py\n│   └── mcp_project.egg-info/\n├── tests/\n│   ├── __init__.py\n│   └── test_main.py\n├── scripts/\n├── docs/\n├── .env.example\n├── .gitignore\n├── pyproject.toml\n├── README.md\n└── uv.lock\n```\n\n*   `src/`: Contains the main application source code, including configuration and tool definitions.\n*   `tests/`: Contains unit and integration tests.\n*   `scripts/`: Reserved for utility scripts (e.g., setup, data generation).\n*   `docs/`: Reserved for supplementary documentation.\n*   `.env.example`: Example file for environment variables.\n*   `.gitignore`: Specifies intentionally untracked files to ignore.\n*   `pyproject.toml`: Project metadata and build system configuration, including dependencies and project information.\n*   `README.md`: This documentation file.\n*   `uv.lock`: Lock file for `uv` dependency management.\n\n## Installation and Setup\n\nTo set up and run this project, follow these steps:\n\n1.  **Clone the repository (if applicable):**\n    ```bash\n    git clone https://github.com/Nebula-Block-Data/api-mcp\n    cd mcp-project\n    ```\n\n2.  **Create a virtual environment:**\n    It's highly recommended to use a virtual environment to manage project dependencies.\n    ```bash\n    python3 -m venv .venv\n    ```\n\n3.  **Activate the virtual environment:**\n    *   **macOS/Linux:**\n```bash\nsource .venv/bin/activate\n```\n\n4.  **Install dependencies:**\n    This project uses `pyproject.toml` for dependency management. Install `setuptools` and then the project in editable mode.\n    ```bash\n    uv pip install -e .\n    ```\n    This will install `fastmcp` and any other dependencies specified in `pyproject.toml`.\n\n## Running the NebulaBlock API MCP Server\n\nTo start the NebulaBlock API MCP server:\n\n```bash\nuv run -m src.main\n```\n\nYou should see output similar to: `[05/29/25 17:32:58] INFO     Starting MCP server 'FastMCP' with transport 'stdio'`\n\n### Configuring API Key\n\nThe NebulaBlock API key can be configured in two ways:\n\n1.  **Using the `--api-key` command-line argument:**\n    You can provide the API key directly when running the application:\n    ```bash\n    python -m src.main --api-key your_nebula_block_api_key\n    ```\n    This method will override any API key set in the `.env` file.\n\n2.  **Using a `.env` file:**\n    Create a file named `.env` in the root directory of the project and add your API key to it:\n    ```\n    NEBULA_BLOCK_API_KEY=your_nebula_block_api_key\n    ```\n    The application will automatically load the API key from this file if the `--api-key` argument is not provided.\n\n## Running Tests\n\nTo run the unit tests, ensure your virtual environment is activated and `pytest` is installed (it will be installed with `pip install -e .`):\n\n```bash\npytest\n```\n\nYou should see output indicating that the tests passed.\n\n## Integrating with an MCP Client\n\nTo utilize the NebulaBlock API MCP server, you need to configure your MCP client (e.g., VS Code with an MCP extension) to connect to this server. Below is an example configuration for a `settings.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"nebula\": {\n      \"command\": \"~/path/to/uv\",\n      \"args\": [\n        \"--directory\",\n        \"~/path/to/nebulablock_mcp\",\n        \"run\",\n        \"-m\",\n        \"src.main\",\n        \"--api-key=YOUR_API_KEY\"\n      ]\n    }\n  }\n}\n```\n\n*   Replace `~/path/to/uv` with the actual path to your `uv` executable.\n*   Replace `~/path/to/nebulablock_mcp` with the actual path to your project directory.\n*   Replace `YOUR_API_KEY` with your actual NebulaBlock API key.\n\n## License\n\nThis project is licensed under the MIT License. See the `LICENSE` file (if created) for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "nebulablock",
        "nebula",
        "cloud",
        "nebulablock api",
        "services nebula",
        "data nebulablock"
      ],
      "category": "cloud-platforms"
    },
    "StacklokLabs--mkp": {
      "owner": "StacklokLabs",
      "name": "mkp",
      "url": "https://github.com/StacklokLabs/mkp",
      "imageUrl": "",
      "description": "MKP is a Model Context Protocol (MCP) server for Kubernetes that allows LLM-powered applications to interact with Kubernetes clusters. It provides tools for listing and applying Kubernetes resources through the MCP protocol.",
      "stars": 52,
      "forks": 5,
      "license": "Apache License 2.0",
      "language": "Go",
      "updated_at": "2025-10-03T23:35:15Z",
      "readme_content": "# MKP - Model Kontext Protocol Server for Kubernetes\n\n<p align=\"center\">\n  <img src=\"docs/assets/mkp-logo.png\" width=\"400\" alt=\"MKP Logo\">\n</p>\n\nMKP is a Model Context Protocol (MCP) server for Kubernetes that allows\nLLM-powered applications to interact with Kubernetes clusters. It provides tools\nfor listing and applying Kubernetes resources through the MCP protocol.\n\n## Features\n\n- List resources supported by the Kubernetes API server\n- List clustered resources\n- List namespaced resources\n- Get resources and their subresources (including status, scale, logs, etc.)\n- Apply (create or update) clustered resources\n- Apply (create or update) namespaced resources\n- Execute commands in pods with timeout control\n- Generic and pluggable implementation using API Machinery's unstructured client\n- Built-in rate limiting for protection against excessive API calls\n\n## Why MKP?\n\nMKP offers several key advantages as a Model Context Protocol server for\nKubernetes:\n\n### Native Go Implementation\n\n- Built with the same language as Kubernetes itself\n- Excellent performance characteristics for server applications\n- Strong type safety and concurrency support\n- Seamless integration with Kubernetes libraries\n\n### Direct API Integration\n\n- Uses Kubernetes API machinery directly without external dependencies\n- No reliance on kubectl, helm, or other CLI tools\n- Communicates directly with the Kubernetes API server\n- Reduced overhead and improved reliability\n\n### Universal Resource Support\n\n- Works with any Kubernetes resource type through the unstructured client\n- No hardcoded resource schemas or specialized handlers needed\n- Automatically supports Custom Resource Definitions (CRDs)\n- Future-proof for new Kubernetes resources\n\n### Minimalist Design\n\n- Focused on core Kubernetes resource operations\n- Clean, maintainable codebase with clear separation of concerns\n- Lightweight with minimal dependencies\n- Easy to understand, extend, and contribute to\n\n### Production-Ready Architecture\n\n- Designed for reliability and performance in production environments\n- Proper error handling and resource management\n- Built-in rate limiting to protect against excessive API calls\n- Testable design with comprehensive unit tests\n- Follows Kubernetes development best practices\n\n## Prerequisites\n\n- Go 1.24 or later\n- Kubernetes cluster and kubeconfig\n- [Task](https://taskfile.dev/) for running tasks\n\n## Installation\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/StacklokLabs/mkp.git\n   cd mkp\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   task install\n   ```\n\n3. Build the server:\n\n   ```bash\n   task build\n   ```\n\n## Usage\n\n### Running the server\n\nTo run the server with the default kubeconfig:\n\n```bash\ntask run\n```\n\nTo run the server with a specific kubeconfig:\n\n```bash\nKUBECONFIG=/path/to/kubeconfig task run-with-kubeconfig\n```\n\nTo run the server on a specific port:\n\n```bash\nMCP_PORT=9091 task run\n```\n\n### MCP Tools\n\nThe MKP server provides the following MCP tools:\n\n#### get_resource\n\nGet a Kubernetes resource or its subresource.\n\nParameters:\n\n- `resource_type` (required): Type of resource to get (clustered or namespaced)\n- `group`: API group (e.g., apps, networking.k8s.io)\n- `version` (required): API version (e.g., v1, v1beta1)\n- `resource` (required): Resource name (e.g., deployments, services)\n- `namespace`: Namespace (required for namespaced resources)\n- `name` (required): Name of the resource to get\n- `subresource`: Subresource to get (e.g., status, scale, logs)\n- `parameters`: Optional parameters for the request (see examples below)\n\nExample:\n\n```json\n{\n  \"name\": \"get_resource\",\n  \"arguments\": {\n    \"resource_type\": \"namespaced\",\n    \"group\": \"apps\",\n    \"version\": \"v1\",\n    \"resource\": \"deployments\",\n    \"namespace\": \"default\",\n    \"name\": \"nginx-deployment\",\n    \"subresource\": \"status\"\n  }\n}\n```\n\nExample of getting logs from a specific container with parameters:\n\n```json\n{\n  \"name\": \"get_resource\",\n  \"arguments\": {\n    \"resource_type\": \"namespaced\",\n    \"group\": \"\",\n    \"version\": \"v1\",\n    \"resource\": \"pods\",\n    \"namespace\": \"default\",\n    \"name\": \"my-pod\",\n    \"subresource\": \"logs\",\n    \"parameters\": {\n      \"container\": \"my-container\",\n      \"sinceSeconds\": \"3600\",\n      \"timestamps\": \"true\",\n      \"limitBytes\": \"102400\"\n    }\n  }\n}\n```\n\nAvailable parameters for pod logs:\n\n- `container`: Specify which container to get logs from\n- `previous`: Get logs from previous container instance (true/false)\n- `sinceSeconds`: Only return logs newer than a relative duration in seconds\n- `sinceTime`: Only return logs after a specific time (RFC3339 format)\n- `timestamps`: Include timestamps on each line (true/false)\n- `limitBytes`: Maximum number of bytes to return\n- `tailLines`: Number of lines to return from the end of the logs\n\nBy default, pod logs are limited to the last 100 lines and 32KB to avoid\noverwhelming the LLM's context window. These defaults can be overridden using\nthe parameters above.\n\nAvailable parameters for regular resources:\n\n- `resourceVersion`: When specified, shows the resource at that particular\n  version\n\n#### list_resources\n\nLists Kubernetes resources of a specific type.\n\nParameters:\n\n- `resource_type` (required): Type of resource to list (clustered or namespaced)\n- `group`: API group (e.g., apps, networking.k8s.io)\n- `version` (required): API version (e.g., v1, v1beta1)\n- `resource` (required): Resource name (e.g., deployments, services)\n- `namespace`: Namespace (required for namespaced resources)\n- `label_selector`: Kubernetes label selector for filtering resources (optional)\n- `include_annotations`: Whether to include annotations in the output (default: true)\n- `exclude_annotation_keys`: List of annotation keys to exclude from output (supports wildcards with *)\n- `include_annotation_keys`: List of annotation keys to include in output (if specified, only these are included)\n\n##### Annotation Filtering\n\nThe `list_resources` tool provides powerful annotation filtering capabilities to control metadata output size and prevent truncation issues with large annotations (such as GPU node annotations).\n\n**Basic Usage:**\n\n```json\n{\n  \"name\": \"list_resources\",\n  \"arguments\": {\n    \"resource_type\": \"namespaced\",\n    \"group\": \"apps\",\n    \"version\": \"v1\",\n    \"resource\": \"deployments\",\n    \"namespace\": \"default\"\n  }\n}\n```\n\n**Exclude specific annotations (useful for GPU nodes):**\n\n```json\n{\n  \"name\": \"list_resources\",\n  \"arguments\": {\n    \"resource_type\": \"clustered\",\n    \"group\": \"\",\n    \"version\": \"v1\",\n    \"resource\": \"nodes\",\n    \"exclude_annotation_keys\": [\n      \"nvidia.com/*\",\n      \"kubectl.kubernetes.io/last-applied-configuration\"\n    ]\n  }\n}\n```\n\n**Include only specific annotations:**\n\n```json\n{\n  \"name\": \"list_resources\",\n  \"arguments\": {\n    \"resource_type\": \"namespaced\",\n    \"group\": \"\",\n    \"version\": \"v1\",\n    \"resource\": \"pods\",\n    \"namespace\": \"default\",\n    \"include_annotation_keys\": [\"app\", \"version\", \"prometheus.io/scrape\"]\n  }\n}\n```\n\n**Disable annotations completely for maximum performance:**\n\n```json\n{\n  \"name\": \"list_resources\",\n  \"arguments\": {\n    \"resource_type\": \"namespaced\",\n    \"group\": \"\",\n    \"version\": \"v1\",\n    \"resource\": \"pods\",\n    \"namespace\": \"default\",\n    \"include_annotations\": false\n  }\n}\n```\n\n**Annotation Filtering Rules:**\n\n- By default, `kubectl.kubernetes.io/last-applied-configuration` is excluded to prevent large configuration data\n- `exclude_annotation_keys` supports wildcard patterns using `*` (e.g., `nvidia.com/*` excludes all NVIDIA annotations)\n- When `include_annotation_keys` is specified, it takes precedence and only those annotations are included\n- Setting `include_annotations: false` completely removes all annotations from the output\n- Wildcard patterns only support `*` at the end of the key (e.g., `nvidia.com/*`)\n\n#### apply_resource\n\nApplies (creates or updates) a Kubernetes resource.\n\nParameters:\n\n- `resource_type` (required): Type of resource to apply (clustered or\n  namespaced)\n- `group`: API group (e.g., apps, networking.k8s.io)\n- `version` (required): API version (e.g., v1, v1beta1)\n- `resource` (required): Resource name (e.g., deployments, services)\n- `namespace`: Namespace (required for namespaced resources)\n- `manifest` (required): Resource manifest\n\nExample:\n\n```json\n{\n  \"name\": \"apply_resource\",\n  \"arguments\": {\n    \"resource_type\": \"namespaced\",\n    \"group\": \"apps\",\n    \"version\": \"v1\",\n    \"resource\": \"deployments\",\n    \"namespace\": \"default\",\n    \"manifest\": {\n      \"apiVersion\": \"apps/v1\",\n      \"kind\": \"Deployment\",\n      \"metadata\": {\n        \"name\": \"nginx-deployment\",\n        \"namespace\": \"default\"\n      },\n      \"spec\": {\n        \"replicas\": 3,\n        \"selector\": {\n          \"matchLabels\": {\n            \"app\": \"nginx\"\n          }\n        },\n        \"template\": {\n          \"metadata\": {\n            \"labels\": {\n              \"app\": \"nginx\"\n            }\n          },\n          \"spec\": {\n            \"containers\": [\n              {\n                \"name\": \"nginx\",\n                \"image\": \"nginx:latest\",\n                \"ports\": [\n                  {\n                    \"containerPort\": 80\n                  }\n                ]\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n#### post_resource\n\nPosts to a Kubernetes resource or its subresource, particularly useful for\nexecuting commands in pods.\n\nParameters:\n\n- `resource_type` (required): Type of resource to post to (clustered or\n  namespaced)\n- `group`: API group (e.g., apps, networking.k8s.io)\n- `version` (required): API version (e.g., v1, v1beta1)\n- `resource` (required): Resource name (e.g., deployments, services)\n- `namespace`: Namespace (required for namespaced resources)\n- `name` (required): Name of the resource to post to\n- `subresource`: Subresource to post to (e.g., exec)\n- `body` (required): Body to post to the resource\n- `parameters`: Optional parameters for the request\n\nExample of executing a command in a pod:\n\n```json\n{\n  \"name\": \"post_resource\",\n  \"arguments\": {\n    \"resource_type\": \"namespaced\",\n    \"group\": \"\",\n    \"version\": \"v1\",\n    \"resource\": \"pods\",\n    \"namespace\": \"default\",\n    \"name\": \"my-pod\",\n    \"subresource\": \"exec\",\n    \"body\": {\n      \"command\": [\"ls\", \"-la\", \"/\"],\n      \"container\": \"my-container\",\n      \"timeout\": 30\n    }\n  }\n}\n```\n\nThe `body` for pod exec supports the following fields:\n\n- `command` (required): Command to execute, either as a string or an array of\n  strings\n- `container` (optional): Container name to execute the command in (defaults to\n  the first container)\n- `timeout` (optional): Timeout in seconds (defaults to 15 seconds, maximum 60\n  seconds)\n\nNote on timeouts:\n\n- Default timeout: 15 seconds if not specified\n- Maximum timeout: 60 seconds (any larger value will be capped)\n- Commands that exceed the timeout will be terminated and return a timeout error\n\nThe response includes stdout, stderr, and any error message:\n\n```json\n{\n  \"apiVersion\": \"v1\",\n  \"kind\": \"Pod\",\n  \"metadata\": {\n    \"name\": \"my-pod\",\n    \"namespace\": \"default\"\n  },\n  \"spec\": {\n    \"command\": [\"ls\", \"-la\", \"/\"]\n  },\n  \"status\": {\n    \"stdout\": \"total 48\\ndrwxr-xr-x   1 root root 4096 May  5 14:30 .\\ndrwxr-xr-x   1 root root 4096 May  5 14:30 ..\\n...\",\n    \"stderr\": \"\",\n    \"error\": \"\"\n  }\n}\n```\n\n### MCP Resources\n\nThe MKP server provides access to Kubernetes resources through MCP resources.\nThe resource URIs follow these formats:\n\n- Clustered resources: `k8s://clustered/{group}/{version}/{resource}/{name}`\n- Namespaced resources:\n  `k8s://namespaced/{namespace}/{group}/{version}/{resource}/{name}`\n\n### Configuration\n\n#### Transport Protocol\n\nMKP supports two transport protocols for the MCP server:\n\n- **SSE (Server-Sent Events)**: The default transport protocol, suitable for most use cases\n- **Streamable HTTP**: A streaming HTTP transport that supports both direct HTTP responses and SSE streams, useful for environments like ToolHive that require HTTP-based communication\n\nYou can configure the transport protocol using either a CLI flag or an environment variable:\n\n```bash\n# Using CLI flag\n./build/mkp-server --transport=streamable-http\n\n# Using environment variable\nMCP_TRANSPORT=streamable-http ./build/mkp-server\n\n# Default (SSE)\n./build/mkp-server\n```\n\nThe `MCP_TRANSPORT` environment variable is automatically set by ToolHive when running MKP in that environment.\n\n#### Controlling Resource Discovery\n\nBy default, MKP serves all Kubernetes resources as MCP resources, which provides\nuseful context for LLMs. However, in large clusters with many resources, this\ncan consume significant context space in the LLM.\n\nYou can disable this behavior by using the `--serve-resources` flag:\n\n```bash\n# Run without serving cluster resources\n./build/mkp-server --serve-resources=false\n\n# Run with a specific kubeconfig without serving cluster resources\n./build/mkp-server --kubeconfig=/path/to/kubeconfig --serve-resources=false\n```\n\nEven with resource discovery disabled, the MCP tools (`get_resource`,\n`list_resources`, `apply_resource`, `delete_resource`, and `post_resource`)\nremain fully functional, allowing you to interact with your Kubernetes cluster.\n\n#### Enabling Write Operations\n\nBy default, MKP operates in read-only mode, meaning it does not allow write\noperations on the cluster, i.e. the `apply_resource`, `delete_resource`, and\n`post_resource` tools will not be available. You can enable write operations by\nusing the `--read-write` flag:\n\n```bash\n# Run with write operations enabled\n./build/mkp-server --read-write=true\n\n# Run with a specific kubeconfig and write operations enabled\n./build/mkp-server --kubeconfig=/path/to/kubeconfig --read-write=true\n```\n\n### Rate Limiting\n\nMKP includes a built-in rate limiting mechanism to protect the server from\nexcessive API calls, which is particularly important when used with AI agents.\nThe rate limiter uses a token bucket algorithm and applies different limits\nbased on the operation type:\n\n- Read operations (list_resources, get_resource): 120 requests per minute\n- Write operations (apply_resource, delete_resource): 30 requests per minute\n- Default for other operations: 60 requests per minute\n\nRate limits are applied per client session, ensuring fair resource allocation\nacross multiple clients. The rate limiting feature can be enabled or disabled\nvia the command line flag:\n\n```bash\n# Run with rate limiting enabled (default)\n./build/mkp-server\n\n# Run with rate limiting disabled\n./build/mkp-server --enable-rate-limiting=false\n```\n\n## Development\n\n### Running tests\n\n```bash\ntask test\n```\n\n### Formatting code\n\n```bash\ntask fmt\n```\n\n### Linting code\n\n```bash\ntask lint\n```\n\n### Updating dependencies\n\n```bash\ntask deps\n```\n\n## Running as an MCP Server with ToolHive\n\nMKP can be run as a Model Context Protocol (MCP) server using\n[ToolHive](https://github.com/stacklok/toolhive), which simplifies the\ndeployment and management of MCP servers.\n\n### Prerequisites\n\n1. Install ToolHive by following the\n   [installation instructions](https://docs.stacklok.com/toolhive/guides-cli/install).\n2. Ensure you have Docker or Podman installed on your system.\n3. Configure your Kubernetes credentials (kubeconfig) for the cluster you want\n   to interact with.\n\n### Running MKP with ToolHive (Recommended)\n\nThe easiest way to run MKP is using the packaged version available in ToolHive's\nregistry:\n\n```bash\n# Register a supported client so ToolHive can auto-configure your environment\nthv client setup\n\n# Run the MKP server (packaged as 'k8s' in ToolHive)\n# Mount your kubeconfig so the server can access your Kubernetes cluster\nthv run --volume $HOME/.kube:/home/nonroot/.kube:ro k8s\n\n# List running servers\nthv list\n\n# Get detailed information about the server\nthv registry info k8s\n```\n\nThis will mount your Kubernetes credentials and make the server available to\nyour MCP-compatible clients.\n\n### Advanced Usage with Custom Configuration\n\nFor advanced users who need custom configuration, you can also run MKP using the\ncontainer image directly:\n\n```bash\n# Run the MKP server using the published container image\nthv run --name mkp --transport sse --target-port 8080 --volume $HOME/.kube:/home/nonroot/.kube:ro ghcr.io/stackloklabs/mkp/server:latest\n```\n\nThis command:\n\n- Names the server instance \"mkp\"\n- Uses the SSE transport protocol\n- Mounts your local kubeconfig into the container (read-only)\n- Uses the latest published MKP image from GitHub Container Registry\n\nTo use a specific version instead of the latest:\n\n```bash\nthv run --name mkp --transport sse --target-port 8080 --volume $HOME/.kube:/home/nonroot/.kube:ro ghcr.io/stackloklabs/mkp/server:v0.0.1\n```\n\n### Managing the MKP Server\n\nTo verify that the MKP server is running:\n\n```bash\nthv list\n```\n\nThis will show all running MCP servers managed by ToolHive, including the MKP\nserver.\n\nTo stop the MKP server:\n\n```bash\n# For packaged version\nthv stop k8s\n\n# For custom named version\nthv stop mkp\n```\n\nTo remove the server instance completely:\n\n```bash\n# For packaged version\nthv rm k8s\n\n# For custom named version\nthv rm mkp\n```\n\n## Contributing\n\nWe welcome contributions to this MCP server! If you'd like to contribute, please\nreview the [CONTRIBUTING guide](./CONTRIBUTING.md) for details on how to get\nstarted.\n\nIf you run into a bug or have a feature request, please\n[open an issue](https://github.com/StacklokLabs/mkp/issues) in the repository or\njoin us in the `#mcp-servers` channel on our\n[community Discord server](https://discord.gg/stacklok).\n\n## License\n\nThis project is licensed under the Apache v2 License - see the LICENSE file for\ndetails.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mkp",
        "kubernetes",
        "mcp",
        "stackloklabs mkp",
        "mkp mkp",
        "mkp model"
      ],
      "category": "cloud-platforms"
    },
    "StacklokLabs--ocireg-mcp": {
      "owner": "StacklokLabs",
      "name": "ocireg-mcp",
      "url": "https://github.com/StacklokLabs/ocireg-mcp",
      "imageUrl": "",
      "description": "An SSE-based MCP server that allows LLM-powered applications to interact with OCI registries. It provides tools for retrieving information about container images, listing tags, and more.",
      "stars": 10,
      "forks": 2,
      "license": "Apache License 2.0",
      "language": "Go",
      "updated_at": "2025-09-28T06:14:55Z",
      "readme_content": "# OCI Registry MCP Server\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/StacklokLabs/ocireg-mcp)](https://archestra.ai/mcp-catalog/stackloklabs__ocireg-mcp)\nAn MCP (Model Context Protocol) server that provides tools for querying OCI\nregistries and image references.\n\n## Overview\n\nThis project implements an SSE-based MCP server that allows LLM-powered\napplications to interact with OCI registries. It provides tools for retrieving\ninformation about container images, listing tags, and more.\n\n## Features\n\n- Get information about OCI images\n- List tags for repositories\n- Get image manifests\n- Get image configs\n\n## MCP Tools\n\nThe server provides the following MCP tools:\n\n### get_image_info\n\nGet information about an OCI image.\n\n**Input:**\n\n- `image_ref`: The image reference (e.g., docker.io/library/alpine:latest)\n\n**Output:**\n\n- Image information including digest, size, architecture, OS, creation date, and\n  number of layers\n\n### list_tags\n\nList tags for a repository.\n\n**Input:**\n\n- `repository`: The repository name (e.g., docker.io/library/alpine)\n\n**Output:**\n\n- List of tags for the repository\n\n### get_image_manifest\n\nGet the manifest for an OCI image.\n\n**Input:**\n\n- `image_ref`: The image reference (e.g., docker.io/library/alpine:latest)\n\n**Output:**\n\n- The image manifest\n\n### get_image_config\n\nGet the config for an OCI image.\n\n**Input:**\n\n- `image_ref`: The image reference (e.g., docker.io/library/alpine:latest)\n\n**Output:**\n\n- The image config\n\n## Usage\n\n### Running with ToolHive (Recommended)\n\nThe easiest way to run the OCI Registry MCP server is using\n[ToolHive](https://github.com/stacklok/toolhive), which provides secure,\ncontainerized deployment of MCP servers:\n\n```bash\n# Install ToolHive (if not already installed)\n# See: https://docs.stacklok.com/toolhive/guides-cli/install\n\n# Register a supported client so ToolHive can auto-configure your environment\nthv client setup\n# Run the OCI Registry MCP server (packaged as 'oci-registry' in ToolHive)\nthv run oci-registry\n\n# List running servers\nthv list\n\n# Get detailed information about the server\nthv registry info oci-registry\n```\n\nThe server will be available to your MCP-compatible clients and can query OCI\nregistries for image information.\n\n#### Authentication with ToolHive\n\nIf you need to access private registries, you can provide authentication\ncredentials using ToolHive's secret management:\n\n```bash\n# For bearer token authentication\nthv secret set oci-token\n# Enter your bearer token when prompted\n\nthv run --secret oci-token,target=OCI_TOKEN oci-registry\n\n# For username/password authentication\nthv secret set oci-username\nthv secret set oci-password\n# Enter your credentials when prompted\n\nthv run --secret oci-username,target=OCI_USERNAME --secret oci-password,target=OCI_PASSWORD oci-registry\n```\n\n## Development\n\n### Prerequisites\n\n- Go 1.21 or later\n- Access to OCI registries\n\n### Authentication\n\nThe server supports the following authentication methods for accessing private\nOCI registries:\n\n1. **Bearer Token**: Set the following environment variable:\n\n   - `OCI_TOKEN`: Bearer token for registry authentication\n\n2. **Username and Password**: Set the following environment variables:\n\n   - `OCI_USERNAME`: Username for registry authentication\n   - `OCI_PASSWORD`: Password for registry authentication\n\n3. **Docker Config**: If no token or username/password is provided, the server\n   will use the default Docker keychain, which reads credentials from\n   `~/.docker/config.json`.\n\nExamples:\n\n```bash\n# Bearer token authentication\nexport OCI_TOKEN=mytoken\n\n# Username/password authentication\nexport OCI_USERNAME=myuser\nexport OCI_PASSWORD=mypassword\n```\n\n### Port Configuration\n\nThe server can be configured to listen on a specific port using either:\n\n1. **Environment Variable**:\n\n   - `MCP_PORT`: The port number to listen on (must be between 0 and 65535)\n   - If not set or invalid, defaults to port 8080\n\n2. **Command-line Flag**:\n   - `-port`: Overrides the environment variable setting (must be between 0\n     and 65535)\n   - If invalid port provided it defaults to port 8080\n   - Example: `./ocireg-mcp -port 9090`\n\n### Testing\n\n```bash\ngo test ./...\n```\n\n### Linting\n\n```bash\ngolangci-lint run\n```\n\n## Contributing\n\nWe welcome contributions to this MCP server! If you'd like to contribute, please\nreview the [CONTRIBUTING guide](./CONTRIBUTING.md) for details on how to get\nstarted.\n\nIf you run into a bug or have a feature request, please\n[open an issue](https://github.com/StacklokLabs/ocireg-mcp/issues) in the\nrepository or join us in the `#mcp-servers` channel on our\n[community Discord server](https://discord.gg/stacklok).\n\n## License\n\nThis project is licensed under the Apache v2 License - see the LICENSE file for\ndetails.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cloud",
        "platform",
        "platforms",
        "cloud platforms",
        "platforms cloud",
        "cloud platform"
      ],
      "category": "cloud-platforms"
    },
    "aashari--mcp-server-aws-sso": {
      "owner": "aashari",
      "name": "mcp-server-aws-sso",
      "url": "https://github.com/aashari/mcp-server-aws-sso",
      "imageUrl": "",
      "description": "AWS Single Sign-On (SSO) integration enabling AI systems to securely interact with AWS resources by initiating SSO login, listing accounts/roles, and executing AWS CLI commands using temporary credentials.",
      "stars": 6,
      "forks": 8,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T10:59:59Z",
      "readme_content": "# Connect AI to Your AWS Resources\n\nTransform how you manage and access your AWS infrastructure by connecting Claude, Cursor AI, and other AI assistants directly to your AWS accounts through Single Sign-On. Get instant access to your cloud resources, execute commands, and manage EC2 instances using natural language.\n\n[![NPM Version](https://img.shields.io/npm/v/@aashari/mcp-server-aws-sso)](https://www.npmjs.com/package/@aashari/mcp-server-aws-sso)\n\n## What You Can Do\n\n✅ **Ask AI about your AWS accounts**: *\"Show me all my AWS accounts and available roles\"*  \n✅ **Execute AWS commands**: *\"List all S3 buckets in my production account\"*  \n✅ **Manage EC2 instances**: *\"Check the disk usage on server i-123456789\"*  \n✅ **Access multi-account setups**: *\"Switch to the staging account and describe the VPCs\"*  \n✅ **Monitor resources**: *\"Get the status of all running EC2 instances\"*  \n✅ **Run shell commands**: *\"Execute 'df -h' on my web server via SSM\"*\n\n## Perfect For\n\n- **DevOps Engineers** managing multi-account AWS environments and infrastructure automation\n- **Cloud Architects** needing quick access to resource information across AWS accounts  \n- **Developers** who want to check deployments and run AWS CLI commands through AI\n- **SRE Teams** monitoring and troubleshooting AWS resources using natural language\n- **IT Administrators** managing EC2 instances and executing remote commands securely\n- **Anyone** who wants to interact with AWS using conversational AI\n\n## Quick Start\n\nGet up and running in 2 minutes:\n\n### 1. Get Your AWS SSO Setup\n\nSet up AWS IAM Identity Center:\n1. **Enable AWS IAM Identity Center** in your AWS account\n2. **Configure your identity source** (AWS directory, Active Directory, or external IdP)  \n3. **Set up permission sets** and assign users to AWS accounts\n4. **Note your AWS SSO Start URL** (e.g., `https://your-company.awsapps.com/start`)\n\n### 2. Try It Instantly\n\n```bash\n# Set your AWS SSO configuration\nexport AWS_SSO_START_URL=\"https://your-company.awsapps.com/start\"\nexport AWS_REGION=\"us-east-1\"\n\n# Start the authentication flow\nnpx -y @aashari/mcp-server-aws-sso login\n\n# List your accessible accounts and roles\nnpx -y @aashari/mcp-server-aws-sso ls-accounts\n\n# Execute an AWS command\nnpx -y @aashari/mcp-server-aws-sso exec-command \\\n  --account-id 123456789012 \\\n  --role-name ReadOnly \\\n  --command \"aws s3 ls\"\n```\n\n## Connect to AI Assistants\n\n### For Claude Desktop Users\n\nAdd this to your Claude configuration file (`~/.claude/claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"aws-sso\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@aashari/mcp-server-aws-sso\"],\n      \"env\": {\n        \"AWS_SSO_START_URL\": \"https://your-company.awsapps.com/start\",\n        \"AWS_REGION\": \"us-east-1\"\n      }\n    }\n  }\n}\n```\n\nRestart Claude Desktop, and you'll see \"🔗 aws-sso\" in the status bar.\n\n### For Other AI Assistants\n\nMost AI assistants support MCP. Install the server globally:\n\n```bash\nnpm install -g @aashari/mcp-server-aws-sso\n```\n\nThen configure your AI assistant to use the MCP server with STDIO transport.\n\n### Alternative: Configuration File\n\nCreate `~/.mcp/configs.json` for system-wide configuration:\n\n```json\n{\n  \"aws-sso\": {\n    \"environments\": {\n      \"AWS_SSO_START_URL\": \"https://your-company.awsapps.com/start\",\n      \"AWS_REGION\": \"us-east-1\",\n      \"DEBUG\": \"false\"\n    }\n  }\n}\n```\n\n**Alternative config keys:** The system also accepts `\"@aashari/mcp-server-aws-sso\"` or `\"mcp-server-aws-sso\"` instead of `\"aws-sso\"`.\n\n## Real-World Examples\n\n### 🔐 Authenticate and Explore\n\nAsk your AI assistant:\n- *\"Log into AWS SSO and show me my authentication status\"*\n- *\"List all my AWS accounts and the roles I can assume\"*\n- *\"Check if I'm still authenticated to AWS\"*\n- *\"Show me which AWS accounts I have access to\"*\n\n### 🛠️ Execute AWS Commands\n\nAsk your AI assistant:\n- *\"List all S3 buckets in my production account using the ReadOnly role\"*\n- *\"Show me all running EC2 instances in the us-west-2 region\"*\n- *\"Describe the VPCs in my staging AWS account\"*\n- *\"Get the status of my RDS databases in account 123456789012\"*\n\n### 🖥️ Manage EC2 Instances\n\nAsk your AI assistant:\n- *\"Check the disk usage on EC2 instance i-1234567890abcdef0\"*\n- *\"Run 'uptime' on my web server via Systems Manager\"*\n- *\"Execute 'systemctl status nginx' on instance i-abc123 in production\"*\n- *\"Get memory usage from all my application servers\"*\n\n### 🔍 Infrastructure Monitoring\n\nAsk your AI assistant:\n- *\"List all Lambda functions in my development account\"*\n- *\"Show me the CloudFormation stacks in us-east-1\"*\n- *\"Check the health of my load balancers\"*\n- *\"Get the latest CloudWatch alarms that are in ALARM state\"*\n\n### 🔄 Multi-Account Operations\n\nAsk your AI assistant:\n- *\"Switch to account 987654321098 with AdminRole and list all security groups\"*\n- *\"Compare the running instances between staging and production accounts\"*\n- *\"Check backup policies across all my AWS accounts\"*\n- *\"Audit IAM users in the security account\"*\n\n<details>\n<summary><b>MCP Tool Examples (Click to expand)</b></summary>\n\n### `aws_sso_login`\n\n**Basic Login:**\n```json\n{}\n```\n\n**Custom Login Options:**\n```json\n{\n  \"launchBrowser\": false\n}\n```\n\n### `aws_sso_status`\n\n**Check Authentication Status:**\n```json\n{}\n```\n\n### `aws_sso_ls_accounts`\n\n**List All Accounts and Roles:**\n```json\n{}\n```\n\n### `aws_sso_exec_command`\n\n**List S3 Buckets:**\n```json\n{\n  \"accountId\": \"123456789012\", \n  \"roleName\": \"ReadOnly\",\n  \"command\": \"aws s3 ls\"\n}\n```\n\n**Describe EC2 Instances in a Specific Region:**\n```json\n{\n  \"accountId\": \"123456789012\",\n  \"roleName\": \"AdminRole\",\n  \"command\": \"aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId,State.Name,InstanceType]' --output table\",\n  \"region\": \"us-west-2\"\n}\n```\n\n### `aws_sso_ec2_exec_command`\n\n**Check System Resources:**\n```json\n{\n  \"instanceId\": \"i-0a69e80761897dcce\",\n  \"accountId\": \"123456789012\",\n  \"roleName\": \"InfraOps\",\n  \"command\": \"uptime && df -h && free -m\"\n}\n```\n\n</details>\n\n## Transport Modes\n\nThis server supports two transport modes for different integration scenarios:\n\n### STDIO Transport (Default for MCP Clients)\n- Traditional subprocess communication via stdin/stdout\n- Ideal for local AI assistant integrations (Claude Desktop, Cursor AI)\n- Uses pipe-based communication for direct MCP protocol exchange\n\n```bash\n# Run with STDIO transport (default for AI assistants)\nTRANSPORT_MODE=stdio npx @aashari/mcp-server-aws-sso\n\n# Using npm scripts (after installation)\nnpm run mcp:stdio\n```\n\n### HTTP Transport (Default for Server Mode)\n- Modern HTTP-based transport with Server-Sent Events (SSE)\n- Supports multiple concurrent connections\n- Better for web-based integrations and development\n- Runs on port 3000 by default (configurable via PORT env var)\n- Endpoint: http://localhost:3000/mcp\n- Health check: http://localhost:3000/\n\n```bash\n# Run with HTTP transport (default when no CLI args)\nTRANSPORT_MODE=http npx @aashari/mcp-server-aws-sso\n\n# Using npm scripts (after installation)\nnpm run mcp:http\n\n# Test with MCP Inspector\nnpm run mcp:inspect\n```\n\n### Environment Variables\n\n**Transport Configuration:**\n- `TRANSPORT_MODE`: Set to `stdio` or `http` (default: `http` for server mode, `stdio` for MCP clients)\n- `PORT`: HTTP server port (default: 3000)\n- `DEBUG`: Enable debug logging (default: false)\n\n**Authentication:**\n- `AWS_SSO_START_URL`: Your AWS SSO start URL\n- `AWS_SSO_REGION`: Your AWS SSO region\n- `AWS_PROFILE`: Your AWS profile name (optional)\n- `AWS_REGION`: Your AWS region (optional)\n\n## CLI Commands\n\nCLI commands use `kebab-case`. Run `--help` for details (e.g., `mcp-aws-sso login --help`).\n\n- **login**: Authenticates via AWS SSO (`--no-launch-browser`). Ex: `mcp-aws-sso login`.\n- **status**: Checks authentication status (no options). Ex: `mcp-aws-sso status`.\n- **ls-accounts**: Lists accounts/roles (no options). Ex: `mcp-aws-sso ls-accounts`.\n- **exec-command**: Runs AWS CLI command (`--account-id`, `--role-name`, `--command`, `--region`). Ex: `mcp-aws-sso exec-command --account-id 123456789012 --role-name ReadOnly --command \"aws s3 ls\"`.\n- **ec2-exec-command**: Runs shell command on EC2 (`--instance-id`, `--account-id`, `--role-name`, `--command`, `--region`). Ex: `mcp-aws-sso ec2-exec-command --instance-id i-0a69e80761897dcce --account-id 123456789012 --role-name InfraOps --command \"uptime\"`.\n\n<details>\n<summary><b>CLI Command Examples (Click to expand)</b></summary>\n\n### Login\n\n**Standard Login (launches browser and polls automatically):**\n```bash\nmcp-aws-sso login\n```\n\n**Login without Browser Launch:**\n```bash\nmcp-aws-sso login --no-launch-browser\n```\n\n### Execute AWS Commands\n\n**List S3 Buckets:**\n```bash\nmcp-aws-sso exec-command \\\n  --account-id 123456789012 \\\n  --role-name ReadOnly \\\n  --command \"aws s3 ls\"\n```\n\n**List EC2 Instances with Specific Region:**\n```bash\nmcp-aws-sso exec-command \\\n  --account-id 123456789012 \\\n  --role-name AdminRole \\\n  --region us-west-2 \\\n  --command \"aws ec2 describe-instances --output table\"\n```\n\n### Execute EC2 Commands\n\n**Check System Resources:**\n```bash\nmcp-aws-sso ec2-exec-command \\\n  --instance-id i-0a69e80761897dcce \\\n  --account-id 123456789012 \\\n  --role-name InfraOps \\\n  --command \"uptime && df -h && free -m\"\n```\n\n</details>\n\n## Troubleshooting\n\n### \"Authentication failed\" or \"Token expired\"\n\n1. **Re-authenticate with AWS SSO**:\n   ```bash\n   # Test your SSO configuration\n   npx -y @aashari/mcp-server-aws-sso login\n   ```\n\n2. **Check your AWS SSO configuration**:\n   - Verify your `AWS_SSO_START_URL` is correct (should be your organization's SSO portal)\n   - Ensure your `AWS_REGION` matches your SSO region configuration\n\n3. **Verify your SSO setup**:\n   - Make sure you can access the SSO portal in your browser\n   - Check that your AWS account assignments are active\n\n### \"Account not found\" or \"Role not found\"\n\n1. **Check available accounts and roles**:\n   ```bash\n   # List all accessible accounts\n   npx -y @aashari/mcp-server-aws-sso ls-accounts\n   ```\n\n2. **Verify account ID format**:\n   - Account ID should be exactly 12 digits\n   - Use the exact account ID from the `ls-accounts` output\n\n3. **Check role permissions**:\n   - Make sure you have permission to assume the specified role\n   - Use the exact role name from your permission sets\n\n### \"AWS CLI not found\" or Command execution errors\n\n1. **Install AWS CLI v2**:\n   - Download from [AWS CLI Installation Guide](https://aws.amazon.com/cli/)\n   - Ensure `aws` command is in your system PATH\n\n2. **Test AWS CLI independently**:\n   ```bash\n   aws --version\n   aws sts get-caller-identity\n   ```\n\n### \"EC2 command failed\" or \"SSM connection issues\"\n\n1. **Verify EC2 instance setup**:\n   - Instance must have SSM Agent installed and running\n   - Instance needs an IAM role with `AmazonSSMManagedInstanceCore` policy\n\n2. **Check your role permissions**:\n   - Your assumed role needs `ssm:SendCommand` and `ssm:GetCommandInvocation` permissions\n   - Verify the instance is in a running state\n\n3. **Test SSM connectivity**:\n   ```bash\n   # Test if instance is reachable via SSM\n   npx -y @aashari/mcp-server-aws-sso exec-command \\\n     --account-id YOUR_ACCOUNT \\\n     --role-name YOUR_ROLE \\\n     --command \"aws ssm describe-instance-information\"\n   ```\n\n### Claude Desktop Integration Issues\n\n1. **Restart Claude Desktop** after updating the config file\n2. **Check the status bar** for the \"🔗 aws-sso\" indicator\n3. **Verify config file location**:\n   - macOS: `~/.claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n### Getting Help\n\nIf you're still having issues:\n1. Run a simple test command to verify everything works\n2. Check the [GitHub Issues](https://github.com/aashari/mcp-server-aws-sso/issues) for similar problems\n3. Create a new issue with your error message and setup details\n\n## Frequently Asked Questions\n\n### What permissions do I need?\n\n**For AWS SSO Setup:**\n- You need an AWS SSO account with access to IAM Identity Center\n- Permission sets configured by your AWS administrator\n- Access to the specific AWS accounts you want to manage\n\n**For EC2 Commands via SSM:**\n- Your assumed role needs `ssm:SendCommand` and `ssm:GetCommandInvocation` permissions\n- EC2 instances need an IAM role with `AmazonSSMManagedInstanceCore` policy\n- SSM Agent must be installed and running on target instances\n\n### Can I use this with multiple AWS organizations?\n\nCurrently, each installation supports one AWS SSO start URL. For multiple organizations, you'd need separate configurations or manually switch the `AWS_SSO_START_URL` environment variable.\n\n### How long do the SSO credentials last?\n\nAWS SSO tokens typically last 8-12 hours. Temporary credentials for specific accounts/roles last about 1 hour. The tool automatically handles token refresh and credential caching for you.\n\n### What AI assistants does this work with?\n\nAny AI assistant that supports the Model Context Protocol (MCP):\n- Claude Desktop (most popular)\n- Cursor AI  \n- Continue.dev\n- Many others\n\n### Is my data secure?\n\nYes! This tool:\n- Runs entirely on your local machine\n- Uses your own AWS SSO credentials\n- Never sends your data to third parties\n- Only accesses what you give it permission to access\n- Uses temporary credentials that automatically expire\n\n### Do I need AWS CLI installed?\n\nYes, AWS CLI v2 is required for the `aws_sso_exec_command` tool. However, the authentication and account listing features work without it.\n\n### Can I use this with AWS CLI profiles?\n\nThis tool uses AWS SSO directly and doesn't rely on AWS CLI profiles. It manages its own credential cache independently of the AWS CLI configuration.\n\n<details>\n<summary><b>Response Format Examples (Click to expand)</b></summary>\n\n### MCP Tool Response Example (`aws_sso_exec_command`)\n\n```markdown\n# AWS SSO: Command Result\n\n**Account/Role:** 123456789012/ReadOnly\n**Region:** us-east-1 (Default: ap-southeast-1)\n\n## Command\n\n\taws s3 ls\n\n## Output\n\n\t2023-01-15 08:42:53 my-bucket-1\n\t2023-05-22 14:18:19 my-bucket-2\n\t2024-02-10 11:05:37 my-logs-bucket\n\n*Executed: 2025-05-19 06:21:49 UTC*\n```\n\n### Error Response Example\n\n```markdown\n# ❌ AWS SSO: Command Error\n\n**Account/Role:** 123456789012/ReadOnly\n**Region:** us-east-1 (Default: ap-southeast-1)\n\n## Command\n\t\n\taws s3api get-object --bucket restricted-bucket --key secret.txt output.txt\n\n## Error: Permission Denied\nThe role `ReadOnly` does not have permission to execute this command.\n\n## Error Details\n\n\tAn error occurred (AccessDenied) when calling the GetObject operation: Access Denied\n\n### Troubleshooting\n\n#### Available Roles\n- AdminAccess\n- PowerUserAccess\n- S3FullAccess\n\nTry executing the command again using one of the roles listed above that has appropriate permissions.\n\n*Executed: 2025-05-19 06:17:49 UTC*\n```\n\n</details>\n\n## Development\n\n```bash\n# Clone repository\ngit clone https://github.com/aashari/mcp-server-aws-sso.git\ncd mcp-server-aws-sso\n\n# Install dependencies\nnpm install\n\n# Run in development mode\nnpm run dev:server\n\n# Run tests\nnpm test\n```\n\n## Support\n\nNeed help? Here's how to get assistance:\n\n1. **Check the troubleshooting section above** - most common issues are covered there\n2. **Visit our GitHub repository** for documentation and examples: [github.com/aashari/mcp-server-aws-sso](https://github.com/aashari/mcp-server-aws-sso)\n3. **Report issues** at [GitHub Issues](https://github.com/aashari/mcp-server-aws-sso/issues)\n4. **Start a discussion** for feature requests or general questions\n\n---\n\n*Made with ❤️ for DevOps teams who want to bring AI into their AWS workflow.*\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cloud",
        "sso",
        "aws",
        "aws sso",
        "sso aws",
        "cloud platforms"
      ],
      "category": "cloud-platforms"
    },
    "alexei-led--aws-mcp-server": {
      "owner": "alexei-led",
      "name": "aws-mcp-server",
      "url": "https://github.com/alexei-led/aws-mcp-server",
      "imageUrl": "",
      "description": "A lightweight but powerful server that enables AI assistants to execute AWS CLI commands, use Unix pipes, and apply prompt templates for common AWS tasks in a safe Docker environment with multi-architecture support",
      "stars": 165,
      "forks": 27,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T23:00:13Z",
      "readme_content": "# AWS Model Context Protocol (MCP) Server\n\n[![CI](https://github.com/alexei-led/aws-mcp-server/actions/workflows/ci.yml/badge.svg)](https://github.com/alexei-led/aws-mcp-server/actions/workflows/ci.yml)\n[![Code Coverage](https://codecov.io/gh/alexei-led/aws-mcp-server/branch/main/graph/badge.svg?token=K8vdP3zyuy)](https://codecov.io/gh/alexei-led/aws-mcp-server)\n[![Linter: Ruff](https://img.shields.io/badge/Linter-Ruff-brightgreen?style=flat-square)](https://github.com/alexei-led/aws-mcp-server)\n[![Image Tags](https://ghcr-badge.egpl.dev/alexei-led/aws-mcp-server/tags?color=%2344cc11&ignore=latest&n=4&label=image+tags&trim=)](https://github.com/alexei-led/aws-mcp-server/pkgs/container/aws-mcp-server/versions)\n[![Image Size](https://ghcr-badge.egpl.dev/alexei-led/aws-mcp-server/size?color=%2344cc11&tag=latest&label=image+size&trim=)](https://github.com/alexei-led/aws-mcp-server/pkgs/container/aws-mcp-server)\n\nA lightweight service that enables AI assistants to execute AWS CLI commands through the Model Context Protocol (MCP).\n\n## Overview\n\nThe AWS MCP Server provides a bridge between MCP-aware AI assistants (like Claude Desktop, Cursor, Windsurf) and the AWS CLI. It enables these assistants to:\n\n1. **Retrieve AWS CLI documentation** (`aws_cli_help`) - Get detailed help on AWS services and commands\n2. **Execute AWS CLI commands** (`aws_cli_pipeline`) - Run commands with Unix pipes and receive formatted results optimized for AI consumption\n\n```mermaid\nflowchart LR\n    AI[AI Assistant] <-->|MCP Protocol| Server[AWS MCP Server]\n    Server <-->|Subprocess| AWS[AWS CLI]\n    AWS <-->|API| Cloud[AWS Cloud]\n```\n\n## Demo\n\n[Demo](https://private-user-images.githubusercontent.com/1898375/424996801-b51ddc8e-5df5-40c4-8509-84c1a7800d62.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDI0NzY5OTUsIm5iZiI6MTc0MjQ3NjY5NSwicGF0aCI6Ii8xODk4Mzc1LzQyNDk5NjgwMS1iNTFkZGM4ZS01ZGY1LTQwYzQtODUwOS04NGMxYTc4MDBkNjIubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDMyMCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAzMjBUMTMxODE1WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NjgwNTM4MDVjN2U4YjQzN2Y2N2Y5MGVkMThiZTgxYWEyNzBhZTlhMTRjZDY3ZDJmMzJkNmViM2U4M2U4MTEzNSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.tIb7uSkDpSaspIluzCliHS8ATmlzkvEnF3CiClD-UGQ)\n\nThe video demonstrates using Claude Desktop with AWS MCP Server to create a new AWS EC2 instance with AWS SSM agent installed.\n\n## Features\n\n- **Command Documentation** - Detailed help information for AWS CLI commands\n- **Command Execution** - Execute AWS CLI commands and return human-readable results\n- **Unix Pipe Support** - Filter and transform AWS CLI output using standard Unix pipes and utilities\n- **AWS Resources Context** - Access to AWS profiles, regions, account information, and environment details via MCP Resources\n- **Prompt Templates** - Pre-defined prompt templates for common AWS tasks following best practices\n- **Docker Integration** - Simple deployment through containerization with multi-architecture support (AMD64/x86_64 and ARM64)\n- **AWS Authentication** - Leverages existing AWS credentials on the host machine\n\n## Requirements\n\n- Docker (default) or Python 3.13+ (and AWS CLI installed locally)\n- AWS credentials configured\n\n## Getting Started\n\n**Note:** For security and reliability, running the server inside a Docker container is the **strongly recommended** method. Please review the [Security Considerations](#security-considerations) section for important considerations.\n\n### Run Server Option 1: Using Docker (Recommended)\n\n```bash\n# Clone repository\ngit clone https://github.com/alexei-led/aws-mcp-server.git\ncd aws-mcp-server\n\n# Build and run Docker container\ndocker compose -f deploy/docker/docker-compose.yml up -d\n```\n\nThe Docker image supports both AMD64/x86_64 (Intel/AMD) and ARM64 (Apple Silicon M1-M4, AWS Graviton) architectures.\n\n> **Note**: The official image from GitHub Packages is multi-architecture and will automatically use the appropriate version for your system.\n>\n> ```bash\n> # Use the latest stable version\n> docker pull ghcr.io/alexei-led/aws-mcp-server:latest\n> \n> # Or pin to a specific version (recommended for production)\n> docker pull ghcr.io/alexei-led/aws-mcp-server:1.0.0\n> ```\n>\n> **Docker Image Tags**:\n>\n> - `latest`: Latest stable release\n> - `x.y.z` (e.g., `1.0.0`): Specific version\n> - `sha-<commit-sha>`: Development builds, tagged with Git commit SHA (e.g., `sha-gb697684`)\n\n### Run Server Option 2: Using Python\n\n**Use with Caution:** Running natively requires careful environment setup and carries higher security risks compared to the recommended Docker deployment. Ensure you understand the implications outlined in the [Security Considerations](#security-considerations) section.\n\n```bash\n# Clone repository\ngit clone https://github.com/alexei-led/aws-mcp-server.git\ncd aws-mcp-server\n\n# Set up virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install in development mode\npip install -e .\n\n# Run the server\npython -m aws_mcp_server\n```\n\n## Configuration\n\nThe AWS MCP Server can be configured using environment variables:\n\n| Environment Variable      | Description                                  | Default   |\n|--------------------------|----------------------------------------------|-----------|\n| `AWS_MCP_TIMEOUT`        | Command execution timeout in seconds         | 300       |\n| `AWS_MCP_MAX_OUTPUT`     | Maximum output size in characters            | 100000    |\n| `AWS_MCP_TRANSPORT`      | Transport protocol to use (\"stdio\" or \"sse\") | stdio     |\n| `AWS_PROFILE`            | AWS profile to use                           | default   |\n| `AWS_REGION`             | AWS region to use                            | us-east-1 |\n| `AWS_MCP_SECURITY_MODE`  | Security mode (\"strict\" or \"permissive\")     | strict    |\n| `AWS_MCP_SECURITY_CONFIG`| Path to custom security configuration file   | \"\"        |\n\n**Important:** Securely manage the AWS credentials provided to the server, whether via mounted `~/.aws` files or environment variables. Ensure the credentials follow the principle of least privilege as detailed in the [Security Considerations](#security-considerations) section. When running via Docker, ensure these variables are passed correctly to the container environment (e.g., using `docker run -e VAR=value ...`).\n\n## Security Considerations\n\nSecurity is paramount when executing commands against your AWS environment. While AWS MCP Server provides functionality, **you are responsible** for configuring and running it securely. Please adhere strictly to the following:\n\n**1. Recommended Deployment: Docker Container**\n\n*   **Isolation:** Running the server inside a Docker container is the **strongly recommended and default** deployment method. Containerization provides crucial filesystem and process isolation. Potentially destructive Unix commands (like `rm`, `mv`) executed via pipes, even if misused, will be contained within the ephemeral Docker environment and will **not** affect your host machine's filesystem. The container can be easily stopped and recreated.\n*   **Controlled Environment:** Docker ensures a consistent environment with necessary dependencies, reducing unexpected behavior.\n\n**2. AWS Credentials and IAM Least Privilege (Critical)**\n\n*   **User Responsibility:** You provide the AWS credentials to the server (via mounted `~/.aws` or environment variables).\n*   **Least Privilege is Essential:** The server executes AWS CLI commands *using the credentials you provide*. It is **absolutely critical** that these credentials belong to an IAM principal (User or Role) configured with the **minimum necessary permissions** (least privilege) for *only* the AWS actions you intend to perform through this tool.\n    *   **Do Not Use Root Credentials:** Never use AWS account root user credentials.\n    *   **Regularly Review Permissions:** Periodically audit the IAM permissions associated with the credentials.\n*   **Impact Limitation:** Properly configured IAM permissions are the **primary mechanism** for limiting the potential impact of *any* command executed via the server, whether intended or unintended. Even if a command were manipulated, it could only perform actions allowed by the specific IAM policy.\n\n**3. Trusted User Model**\n\n*   The server assumes the end-user interacting with the MCP client (e.g., Claude Desktop, Cursor) is the **same trusted individual** who configured the server and provided the least-privilege AWS credentials. Do not expose the server or connected client to untrusted users.\n\n**4. Understanding Execution Risks (Current Implementation)**\n\n*   **Command Execution:** The current implementation uses shell features (`shell=True` in subprocess calls) to execute AWS commands and handle Unix pipes. While convenient, this approach carries inherent risks if the input command string were manipulated (command injection).\n*   **Mitigation via Operational Controls:** In the context of the **trusted user model** and **Docker deployment**, these risks are mitigated operationally:\n    *   The trusted user is assumed not to provide intentionally malicious commands against their own environment.\n    *   Docker contains filesystem side-effects.\n    *   **Crucially, IAM least privilege limits the scope of *any* AWS action that could be executed.**\n*   **Credential Exfiltration Risk:** Despite containerization and IAM, a sophisticated command injection could potentially attempt to read the mounted credentials (`~/.aws`) or environment variables within the container and exfiltrate them (e.g., via `curl`). **Strict IAM policies remain the most vital defense** to limit the value of potentially exfiltrated credentials.\n\n**5. Network Exposure (SSE Transport)**\n\n*   If using the `sse` transport (which implies a network listener), ensure you bind the server only to trusted network interfaces (e.g., `localhost`) or implement appropriate network security controls (firewalls, authentication proxies) if exposing it more broadly. The default `stdio` transport does not open network ports.\n\n**6. Shared Responsibility Summary**\n\n*   **AWS MCP Server provides the tool.**\n*   **You, the user, are responsible for:**\n    *   Running it within the recommended secure Docker environment.\n    *   Providing and securely managing **least-privilege** AWS credentials.\n    *   Ensuring only trusted users interact with the server/client.\n    *   Securing the network environment if applicable.\n\nBy strictly adhering to Docker deployment and meticulous IAM least-privilege configuration, you establish the necessary operational controls for using the AWS MCP Server securely with its current implementation.\n\n## Integrating with Claude Desktop\n\n### Configuration\n\nTo manually integrate AWS MCP Server with Claude Desktop:\n\n1. **Locate the Claude Desktop configuration file**:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. **Edit the configuration file** to include the AWS MCP Server:\n   ```json\n   {\n     \"mcpServers\": {\n       \"aws-mcp-server\": {\n         \"command\": \"docker\",\n         \"args\": [\n           \"run\",\n           \"-i\",\n           \"--rm\",\n           \"-v\",\n           \"/Users/YOUR_USER_NAME/.aws:/home/appuser/.aws:ro\",\n           \"ghcr.io/alexei-led/aws-mcp-server:latest\"\n         ]\n       }\n     }\n   }\n   ```\n   \n3. **Restart Claude Desktop** to apply the changes\n   - After restarting, you should see a hammer 🔨 icon in the bottom right corner of the input box\n   - This indicates that the AWS MCP Server is available for use\n\n```mermaid\nflowchart TD\n    subgraph \"User Device\"\n        config[Edit claude_desktop_config.json]\n        claude[Claude Desktop]\n        docker[Docker Container]\n        aws_creds[AWS Credentials]\n    end\n    \n    subgraph \"AWS Cloud\"\n        services[AWS Services]\n    end\n    \n    subgraph \"MCP Server Components\"\n        tools[AWS CLI Tools]\n        resources[AWS Resources]\n        templates[Prompt Templates]\n    end\n    \n    config -->|Add MCP Server Config| claude\n    claude -->|Docker Run Command| docker\n    docker --- tools\n    docker --- resources\n    docker --- templates\n    aws_creds -->|Mount Read-only| docker\n    resources -.->|Read| aws_creds\n    tools -->|API Calls| services\n```\n\n### Example Interactions\n\n**Getting AWS CLI Documentation**:\n```\nUser: What are the available options for the AWS S3 cp command?\n\nClaude: Let me get that information for you.\n\nThe AWS S3 cp command has the following options:\n\nNAME\n    cp - Copies a local file or S3 object to another location locally or in S3.\n\nSYNOPSIS\n    cp <LocalPath> <S3Uri> or <S3Uri> <LocalPath> or <S3Uri> <S3Uri> [--acl <value>] [--cache-control <value>] ...\n```\n\n**Executing AWS CLI Commands**:\n```\nUser: List my S3 buckets\n\nClaude: I'll list your S3 buckets for you.\n\n2023-10-15 14:30:45 my-bucket-1\n2023-11-20 09:15:32 my-bucket-2\n2024-01-05 11:22:18 my-backup-bucket\n```\n\n**Using Command Pipes**:\n```\nUser: List my S3 buckets that have \"backup\" in their name and show them in alphabetical order\n\nClaude: Let me find that for you.\n\n2024-01-05 11:22:18 my-backup-bucket\n2024-03-01 09:44:12 weekly-backup-bucket\n2024-03-15 13:10:57 database-backup-bucket\n```\n\n**Accessing AWS Resources**:\n```\nUser: What AWS regions are available for me to use?\n\nClaude: Let me check what AWS regions are available for you.\n\nAvailable regions:\n- us-east-1 (US East, N. Virginia) - Currently selected\n- us-east-2 (US East, Ohio)\n- us-west-1 (US West, N. California)\n- us-west-2 (US West, Oregon)\n- eu-west-1 (EU West, Ireland)\n- eu-central-1 (EU Central, Frankfurt)\n- ap-northeast-1 (Asia Pacific, Tokyo)\n- ap-southeast-1 (Asia Pacific, Singapore)\n- ap-southeast-2 (Asia Pacific, Sydney)\n\nYou're currently using the us-east-1 region.\n```\n\n**Using Prompt Templates**:\n```\nUser: I need to perform a security audit of my S3 buckets\n\nClaude: I'll help you audit the security of your S3 buckets.\n\nHere are AWS CLI commands to perform a comprehensive security audit:\n\n# List all buckets with public access settings\naws s3api list-buckets --query 'Buckets[*].Name' --output text | xargs -I {} aws s3api get-public-access-block --bucket {}\n\n# Check bucket policies for public access\naws s3api list-buckets --query 'Buckets[*].Name' --output text | xargs -I {} aws s3api get-bucket-policy --bucket {} 2>/dev/null\n\n# Identify buckets without encryption\naws s3api list-buckets --query 'Buckets[*].Name' --output text | xargs -I {} aws s3api get-bucket-encryption --bucket {} 2>/dev/null\n\n# Check for buckets without logging enabled\naws s3api list-buckets --query 'Buckets[*].Name' --output text | xargs -I {} aws s3api get-bucket-logging --bucket {} 2>/dev/null\n\n# Verify bucket versioning status\naws s3api list-buckets --query 'Buckets[*].Name' --output text | xargs -I {} aws s3api get-bucket-versioning --bucket {}\n```\n\n## Available Prompt Templates\n\nThe AWS MCP Server includes the following pre-defined prompt templates:\n\n### Core Operations\n\n| Prompt                 | Description                                                   | Parameters                                          |\n|------------------------|---------------------------------------------------------------|-----------------------------------------------------|\n| `create_resource`      | Generate commands to create AWS resources with best practices | `resource_type`, `resource_name`                    |\n| `resource_inventory`   | Create comprehensive inventory of resources                   | `service`, `region` (optional)                      |\n| `troubleshoot_service` | Generate commands to troubleshoot service issues              | `service`, `resource_id`                            |\n| `resource_cleanup`     | Identify and safely clean up resources                        | `service`, `criteria` (optional)                    |\n\n### Security & Compliance\n\n| Prompt                     | Description                                                | Parameters                                          |\n|----------------------------|------------------------------------------------------------|-----------------------------------------------------|\n| `security_audit`           | Audit security settings for a specific AWS service         | `service`                                           |\n| `security_posture_assessment` | Comprehensive security assessment across your AWS environment | None                                          |\n| `iam_policy_generator`     | Create least-privilege IAM policies                        | `service`, `actions`, `resource_pattern` (optional) |\n| `compliance_check`         | Check compliance with standards                            | `compliance_standard`, `service` (optional)         |\n\n### Cost & Performance\n\n| Prompt               | Description                                             | Parameters                                         |\n|----------------------|---------------------------------------------------------|----------------------------------------------------|\n| `cost_optimization`  | Find cost optimization opportunities for a service      | `service`                                          |\n| `performance_tuning` | Optimize and tune performance of AWS resources          | `service`, `resource_id`                           |\n\n### Infrastructure & Architecture\n\n| Prompt                      | Description                                              | Parameters                                           |\n|-----------------------------|----------------------------------------------------------|------------------------------------------------------|\n| `serverless_deployment`     | Deploy serverless applications with best practices       | `application_name`, `runtime` (optional)             |\n| `container_orchestration`   | Set up container environments (ECS/EKS)                  | `cluster_name`, `service_type` (optional)            |\n| `vpc_network_design`        | Design and implement secure VPC networking               | `vpc_name`, `cidr_block` (optional)                  |\n| `infrastructure_automation` | Automate infrastructure management                       | `resource_type`, `automation_scope` (optional)       |\n| `multi_account_governance`  | Implement secure multi-account strategies                | `account_type` (optional)                            |\n\n### Reliability & Monitoring\n\n| Prompt               | Description                                           | Parameters                                          |\n|----------------------|-------------------------------------------------------|-----------------------------------------------------|\n| `service_monitoring` | Set up comprehensive monitoring                       | `service`, `metric_type` (optional)                 |\n| `disaster_recovery`  | Implement enterprise-grade DR solutions               | `service`, `recovery_point_objective` (optional)    |\n\n## Security\n\nThe AWS MCP Server implements a comprehensive multi-layered approach to command validation and security:\n\n### Command Validation System\n\nThe server validates all AWS CLI commands through a three-layer system:\n\n1. **Basic Command Structure**: \n   - Verifies commands start with 'aws' prefix and contain a valid service\n   - Ensures proper command syntax\n\n2. **Security-Focused Command Filtering**:\n   - **Dangerous Commands**: Blocks commands that could compromise security\n   - **Safe Patterns**: Explicitly allows read-only operations needed for normal use\n   - **Regex Pattern Matching**: Prevents complex security risks with pattern matching\n\n3. **Pipe Command Security**:\n   - Validates Unix commands used in pipes\n   - Restricts commands to a safe allowlist\n   - Prevents filesystem manipulation and arbitrary command execution\n\n### Default Security Configuration\n\nThe default security configuration focuses on preventing the following attack vectors:\n\n#### 1. Identity and Access Management (IAM) Risks\n\n| Blocked Command | Security Risk |\n|-----------------|---------------|\n| `aws iam create-user` | Creates potential backdoor accounts with persistent access |\n| `aws iam create-access-key` | Creates long-term credentials that can be stolen or misused |\n| `aws iam attach-*-policy` | Potential privilege escalation via policy attachments |\n| `aws iam put-user-policy` | Inline policies can grant excessive permissions |\n| `aws iam create-policy` | Creating new policies with potentially dangerous permissions |\n| `aws iam create-login-profile` | Creates console passwords for existing users |\n| `aws iam deactivate-mfa-device` | Disables multi-factor authentication, weakening security |\n| `aws iam update-assume-role-policy` | Modifies trust relationships, enabling privilege escalation |\n\n#### 2. Audit and Logging Tampering\n\n| Blocked Command | Security Risk |\n|-----------------|---------------|\n| `aws cloudtrail delete-trail` | Removes audit trail of AWS activity |\n| `aws cloudtrail stop-logging` | Stops collecting activity logs, creating blind spots |\n| `aws cloudtrail update-trail` | Can redirect or modify logging configuration |\n| `aws config delete-configuration-recorder` | Disables AWS Config recording of resource changes |\n| `aws guardduty delete-detector` | Disables threat detection capabilities |\n\n#### 3. Sensitive Data Access and Protection\n\n| Blocked Command | Security Risk |\n|-----------------|---------------|\n| `aws secretsmanager put-secret-value` | Modifies sensitive credentials |\n| `aws secretsmanager delete-secret` | Removes sensitive credentials |\n| `aws kms schedule-key-deletion` | Schedules deletion of encryption keys, risking data loss |\n| `aws kms disable-key` | Disables encryption keys, potentially exposing data |\n| `aws s3api put-bucket-policy` | Can create public S3 buckets, exposing data |\n| `aws s3api delete-bucket-policy` | Removes protective policies from buckets |\n\n#### 4. Network Security Risks\n\n| Blocked Command | Security Risk |\n|-----------------|---------------|\n| `aws ec2 authorize-security-group-ingress` | Opens inbound network access, potential exposure |\n| `aws ec2 authorize-security-group-egress` | Opens outbound network access, potential data exfiltration |\n| `aws ec2 modify-instance-attribute` | Can alter security properties of instances |\n\nMany read-only operations that match these patterns are explicitly allowed via safe patterns:\n\n- All `get-`, `list-`, and `describe-` commands\n- All help commands (`--help`, `help`)\n- Simulation and testing commands (e.g., `aws iam simulate-custom-policy`)\n\n### Configuration Options\n\n- **Security Modes**:\n  - `strict` (default): Enforces all security validations\n  - `permissive`: Logs warnings but allows execution (use with caution)\n\n- **Custom Configuration**:\n  - Override default security rules via YAML configuration file\n  - Configure service-specific dangerous commands\n  - Define custom safe patterns and regex rules\n  - Environment variable: `AWS_MCP_SECURITY_CONFIG`\n\n- **Execution Controls**:\n  - Timeouts prevent long-running commands (default: 300 seconds)\n  - Output size limits prevent memory issues\n  - Environment variables: `AWS_MCP_TIMEOUT`, `AWS_MCP_MAX_OUTPUT`\n\n### Custom Security Rules Example\n\nYou can create custom security rules by defining a YAML configuration file:\n\n```yaml\n# Example custom security configuration\n# Save to a file and set AWS_MCP_SECURITY_CONFIG environment variable\n\n# Dangerous commands to block\ndangerous_commands:\n  iam:\n    # Only block specific IAM operations for your environment\n    - \"aws iam create-user\"\n    - \"aws iam attach-user-policy\"\n  \n  # Custom service restrictions for your organization\n  lambda:\n    - \"aws lambda delete-function\"\n    - \"aws lambda remove-permission\"\n  \n  # Prevent accidental DynamoDB table deletion\n  dynamodb:\n    - \"aws dynamodb delete-table\"\n\n# Safe patterns to explicitly allow\nsafe_patterns:\n  # Global safe patterns\n  general:\n    - \"--help\"\n    - \"--dry-run\"\n  \n  # Allow read operations on IAM\n  iam:\n    - \"aws iam get-\"\n    - \"aws iam list-\"\n  \n  # Allow specific Lambda operations\n  lambda:\n    - \"aws lambda list-functions\"\n    - \"aws lambda get-function\"\n\n# Complex regex rules for security validation\nregex_rules:\n  general:\n    # Prevent use of root credentials\n    - pattern: \"aws .* --profile\\\\s+root\"\n      description: \"Prevent use of root profile\"\n      error_message: \"Using the root profile is not allowed for security reasons\"\n  \n  iam:\n    # Block creation of admin users\n    - pattern: \"aws iam create-user.*--user-name\\\\s+.*admin.*\"\n      description: \"Prevent creation of admin users\"\n      error_message: \"Creating users with 'admin' in the name is restricted\"\n    \n    # Prevent wildcards in IAM policies\n    - pattern: \"aws iam create-policy.*\\\"Effect\\\":\\\\s*\\\"Allow\\\".*\\\"Action\\\":\\\\s*\\\"\\\\*\\\".*\\\"Resource\\\":\\\\s*\\\"\\\\*\\\"\"\n      description: \"Prevent wildcards in policies\"\n      error_message: \"Creating policies with '*' wildcards for both Action and Resource is not allowed\"\n  \n  s3:\n    # Prevent public bucket policies\n    - pattern: \"aws s3api put-bucket-policy.*\\\"Effect\\\":\\\\s*\\\"Allow\\\".*\\\"Principal\\\":\\\\s*\\\"\\\\*\\\"\"\n      description: \"Prevent public bucket policies\"\n      error_message: \"Creating bucket policies with public access is restricted\"\n```\n\n### Security Examples\n\nThe system follows IAM best practices, focusing on preventing escalation of privilege:\n\n```bash\n# This command would be blocked (creates user)\naws iam create-user --user-name new-user\n> Error: This command (aws iam create-user) is restricted for security reasons.\n\n# This command would be blocked (attaches admin policy)\naws iam attach-user-policy --user-name any-user --policy-arn arn:aws:iam::aws:policy/AdministratorAccess\n> Error: Attaching Administrator policies is restricted for security reasons.\n\n# This command would be blocked (opens SSH port globally)\naws ec2 authorize-security-group-ingress --group-id sg-12345 --protocol tcp --port 22 --cidr 0.0.0.0/0\n> Error: Opening non-web ports to the entire internet (0.0.0.0/0) is restricted.\n\n# These commands are allowed (read-only operations)\naws iam list-users\naws s3 ls\naws ec2 describe-instances\n```\n\n### Security Best Practices\n\n- Always use the default `strict` security mode in production\n- Follow the deployment recommendations in [Security Considerations](#security-considerations)\n- Run with least-privilege AWS credentials\n- For custom configurations, focus on your security requirements\n\n## Development\n\n### Setting Up the Development Environment\n\n```bash\n# Install only runtime dependencies using pip\npip install -e .\n\n# Install all development dependencies using pip\npip install -e \".[dev]\"\n\n# Or use uv for faster dependency management\nmake uv-install       # Install runtime dependencies\nmake uv-dev-install   # Install development dependencies\n```\n\n### Makefile Commands\n\nThe project includes a Makefile with various targets for common tasks:\n\n```bash\n# Test commands\nmake test             # Run tests excluding integration tests\nmake test-unit        # Run unit tests only (all tests except integration tests)\nmake test-integration # Run integration tests only (requires AWS credentials)\nmake test-all         # Run all tests including integration tests\n\n# Test coverage commands\nmake test-coverage    # Run tests with coverage report (excluding integration tests)\nmake test-coverage-all # Run all tests with coverage report (including integration tests)\n\n# Linting and formatting\nmake lint             # Run linters (ruff check and format --check)\nmake lint-fix         # Run linters and auto-fix issues where possible\nmake format           # Format code with ruff\n```\n\nFor a complete list of available commands, run `make help`.\n\n### Code Coverage\n\nThe project includes configuration for [Codecov](https://codecov.io) to track code coverage metrics. The configuration is in the `codecov.yml` file, which:\n\n- Sets a target coverage threshold of 80%\n- Excludes test files, setup files, and documentation from coverage reports\n- Configures PR comments and status checks\n\nCoverage reports are automatically generated during CI/CD runs and uploaded to Codecov.\n\n### Integration Testing\n\nIntegration tests verify AWS MCP Server works correctly with actual AWS resources. To run them:\n\n1. **Set up AWS resources**:\n   - Create an S3 bucket for testing\n   - Set the environment variable: `export AWS_TEST_BUCKET=your-test-bucket-name`\n   - Ensure your AWS credentials are configured\n\n2. **Run integration tests**:\n   ```bash\n   # Run all tests including integration tests\n   make test-all\n   \n   # Run only integration tests\n   make test-integration\n   ```\n\nOr you can run the pytest commands directly:\n```bash\n# Run all tests including integration tests\npytest --run-integration\n\n# Run only integration tests\npytest --run-integration -m integration\n```\n\n## Troubleshooting\n\n- **Authentication Issues**: Ensure your AWS credentials are properly configured\n- **Connection Errors**: Verify the server is running and AI assistant connection settings are correct\n- **Permission Errors**: Check that your AWS credentials have the necessary permissions\n- **Timeout Errors**: For long-running commands, increase the `AWS_MCP_TIMEOUT` environment variable\n\n## Why Deploy with Docker\n\nDeploying AWS MCP Server via Docker is the recommended approach, offering significant security and reliability advantages that form the core of the tool's secure usage pattern:\n\n### Security Benefits\n\n- **Isolation (Primary Mitigation):** The Docker container provides essential filesystem and process isolation. AWS CLI commands and piped Unix utilities run in a contained environment. Accidental or misused commands affecting the filesystem are limited to the container, **protecting your host machine**.\n- **Controlled Credential Access:** When mounting credentials, using the `:ro` (read-only) flag limits the container's ability to modify your AWS configuration files.\n- **No Local Installation:** Avoids installing the AWS CLI and its dependencies directly on your host system.\n- **Clean Environment:** Each container run starts with a known, clean state.\n\n### Reliability Advantages\n\n- **Consistent Configuration**: All required tools (AWS CLI, SSM plugin, jq) are pre-installed and properly configured\n- **Dependency Management**: Avoid version conflicts between tools and dependencies\n- **Cross-Platform Consistency**: Works the same way across different operating systems\n- **Complete Environment**: Includes all necessary tools for command pipes, filtering, and formatting\n\n### Other Benefits\n\n- **Multi-Architecture Support**: Runs on both Intel/AMD (x86_64) and ARM (Apple Silicon, AWS Graviton) processors\n- **Simple Updates**: Update to new versions with a single pull command\n- **No Python Environment Conflicts**: Avoids potential conflicts with other Python applications on your system\n- **Version Pinning**: Easily pin to specific versions for stability in production environments\n\n## Versioning\n\nThis project uses [setuptools_scm](https://github.com/pypa/setuptools_scm) to automatically determine versions based on Git tags:\n\n- **Release versions**: When a Git tag exists (e.g., `1.2.3`), the version will be exactly that tag\n- **Development versions**: For commits without tags, a development version is generated in the format: \n  `<last-tag>.post<commits-since-tag>+g<commit-hash>.d<date>` (e.g., `1.2.3.post10+gb697684.d20250406`)\n\nThe version is automatically included in:\n- Package version information\n- Docker image labels\n- Continuous integration builds\n\n### Creating Releases\n\nTo create a new release version:\n\n```bash\n# Create and push a new tag\ngit tag -a 1.2.3 -m \"Release version 1.2.3\"\ngit push origin 1.2.3\n```\n\nThe CI/CD pipeline will automatically build and publish Docker images with appropriate version tags.\n\nFor more detailed information about the version management system, see [VERSION.md](docs/VERSION.md).\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cloud",
        "aws",
        "docker",
        "cloud platforms",
        "cloud platform",
        "platforms cloud"
      ],
      "category": "cloud-platforms"
    },
    "alexei-led--k8s-mcp-server": {
      "owner": "alexei-led",
      "name": "k8s-mcp-server",
      "url": "https://github.com/alexei-led/k8s-mcp-server",
      "imageUrl": "",
      "description": "A lightweight yet robust server that empowers AI assistants to securely execute Kubernetes CLI commands (`kubectl`, `helm`, `istioctl`, and `argocd`) using Unix pipes in a safe Docker environment with multi-architecture support.",
      "stars": 168,
      "forks": 32,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T17:13:18Z",
      "readme_content": "# K8s MCP Server\n\n[![CI Status](https://github.com/alexei-led/k8s-mcp-server/actions/workflows/ci.yml/badge.svg)](https://github.com/alexei-led/k8s-mcp-server/actions/workflows/ci.yml)\n[![Release Status](https://github.com/alexei-led/k8s-mcp-server/actions/workflows/release.yml/badge.svg)](https://github.com/alexei-led/k8s-mcp-server/actions/workflows/release.yml)\n[![codecov](https://codecov.io/gh/alexei-led/k8s-mcp-server/graph/badge.svg?token=eCaXPJ0olS)](https://codecov.io/gh/alexei-led/k8s-mcp-server)\n[![Image Tags](https://ghcr-badge.egpl.dev/alexei-led/k8s-mcp-server/tags?color=%2344cc11&ignore=latest&n=4&label=image+tags&trim=)](https://github.com/alexei-led/k8s-mcp-server/pkgs/container/k8s-mcp-server/versions)\n[![Image Size](https://ghcr-badge.egpl.dev/alexei-led/k8s-mcp-server/size?color=%2344cc11&tag=latest&label=image+size&trim=)](https://github.com/alexei-led/k8s-mcp-server/pkgs/container/k8s-mcp-server)\n[![Python Version](https://img.shields.io/badge/python-3.13+-blue.svg)](https://www.python.org/downloads/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nK8s MCP Server is a Docker-based server implementing [Anthropic's Model Context Protocol (MCP)](https://www.anthropic.com/news/introducing-mcp) that enables Claude to run Kubernetes CLI tools (`kubectl`, `istioctl`, `helm`, `argocd`) in a secure, containerized environment.\n\n## Demo: Deploy and Troubleshoot WordPress\n\n**Session 1:** Using k8s-mcp-server and Helm CLI to deploy a WordPress application in the claude-demo namespace, then intentionally breaking it by scaling the MariaDB StatefulSet to zero.\n\n**Session 2:** Troubleshooting session where we use k8s-mcp-server to diagnose the broken WordPress site through kubectl commands, identify the missing database issue, and fix it by scaling up the StatefulSet and configuring ingress access..\n\n[Demo](https://private-user-images.githubusercontent.com/1898375/428398164-5ddce5bc-ec92-459b-a506-5d4442618a81.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDMzNDE0OTEsIm5iZiI6MTc0MzM0MTE5MSwicGF0aCI6Ii8xODk4Mzc1LzQyODM5ODE2NC01ZGRjZTViYy1lYzkyLTQ1OWItYTUwNi01ZDQ0NDI2MThhODEubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDMzMCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAzMzBUMTMyNjMxWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9YmUyNDExMGUzOGRlN2QxNWViMzhhOTE4Y2U1ZmRjMTQxYTI0OGNlNTFjNTRlMjFjNmQ3NTNhNGFmODNkODIzMSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.hwKERwuQRXxHEYJ9d_fQ__XL1gj8l76nO6Yy6M4Uov8)\n\n## How It Works\n\n```mermaid\nflowchart LR\n    A[User] --> |Asks K8s question| B[Claude]\n    B --> |Sends command via MCP| C[K8s MCP Server]\n    C --> |Executes kubectl, helm, etc.| D[Kubernetes Cluster]\n    D --> |Returns results| C\n    C --> |Returns formatted results| B\n    B --> |Analyzes & explains| A\n```\n\nClaude can help users by:\n- Explaining complex Kubernetes concepts\n- Running commands against your cluster\n- Troubleshooting issues\n- Suggesting optimizations\n- Crafting Kubernetes manifests\n\n## Quick Start with Claude Desktop\n\nGet Claude helping with your Kubernetes clusters in under 2 minutes:\n\n1. **Create or update your Claude Desktop configuration file**:\n   - **macOS**: Edit `$HOME/Library/Application Support/Claude/claude_desktop_config.json`\n   - **Windows**: Edit `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - **Linux**: Edit `$HOME/.config/Claude/claude_desktop_config.json`\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"kubernetes\": {\n         \"command\": \"docker\",\n         \"args\": [\n           \"run\",\n           \"-i\",\n           \"--rm\",\n           \"-v\",\n           \"/Users/YOUR_USER_NAME/.kube:/home/appuser/.kube:ro\",\n           \"ghcr.io/alexei-led/k8s-mcp-server:latest\"\n         ]\n       }\n     }\n   }\n   ```\n\n2. **Restart Claude Desktop**\n   - After restart, you'll see the Tools icon (🔨) in the bottom right of your input field\n   - This indicates Claude can now access K8s tools via the MCP server\n\n3. **Start using K8s tools directly in Claude Desktop**:\n   - \"What Kubernetes contexts do I have available?\"\n   - \"Show me all pods in the default namespace\"\n   - \"Create a deployment with 3 replicas of nginx:1.21\"\n   - \"Explain what's wrong with my StatefulSet 'database' in namespace 'prod'\"\n   - \"Deploy the bitnami/wordpress chart with Helm and set service type to LoadBalancer\"\n\n> **Note**: Claude Desktop will automatically route K8s commands through the MCP server, allowing natural conversation about your clusters without leaving the Claude interface.\n\n> **Cloud Providers**: For AWS EKS, GKE, or Azure AKS, you'll need additional configuration. See the [Cloud Provider Support](./docs/cloud-providers.md) guide.\n\n## Features\n\n- **Multiple Kubernetes Tools**: `kubectl`, `helm`, `istioctl`, and `argocd` in one container\n- **Cloud Providers**: Native support for AWS EKS, Google GKE, and Azure AKS\n- **Security**: Runs as non-root user with strict command validation\n- **Command Piping**: Support for common Unix tools like `jq`, `grep`, and `sed`\n- **Easy Configuration**: Simple environment variables for customization\n\n## Documentation\n\n- [Getting Started Guide](./docs/getting-started.md) - Detailed setup instructions\n- [Cloud Provider Support](./docs/cloud-providers.md) - EKS, GKE, and AKS configuration\n- [Supported Tools](./docs/supported-tools.md) - Complete list of all included CLI tools\n- [Environment Variables](./docs/environment-variables.md) - Configuration options\n- [Security Features](./docs/security.md) - Security modes and custom rules\n- [Claude Integration](./docs/claude-integration.md) - Detailed Claude Desktop setup\n- [Architecture](./docs/architecture.md) - System architecture and components\n- [Detailed Specification](./docs/spec.md) - Complete technical specification\n\n## Usage Examples\n\nOnce connected, you can ask Claude to help with Kubernetes tasks using natural language:\n\n```mermaid\nflowchart TB\n    subgraph \"Basic Commands\"\n        A1[\"Show me all pods in the default namespace\"]\n        A2[\"Get all services across all namespaces\"]\n        A3[\"Display the logs for the nginx pod\"]\n    end\n    \n    subgraph \"Troubleshooting\"\n        B1[\"Why is my deployment not starting?\"]\n        B2[\"Describe the failing pod and explain the error\"]\n        B3[\"Check if my service is properly connected to the pods\"]\n    end\n    \n    subgraph \"Deployments & Configuration\"\n        C1[\"Deploy the Nginx Helm chart\"]\n        C2[\"Create a deployment with 3 replicas of nginx:latest\"]\n        C3[\"Set up an ingress for my service\"]\n    end\n    \n    subgraph \"Advanced Operations\"\n        D1[\"Check the status of my Istio service mesh\"]\n        D2[\"Set up a canary deployment with 20% traffic to v2\"]\n        D3[\"Create an ArgoCD application for my repo\"]\n    end\n```\n\nClaude can understand your intent and run the appropriate kubectl, helm, istioctl, or argocd commands based on your request. It can then explain the output in simple terms or help you troubleshoot issues.\n\n## Advanced Claude Desktop Configuration\n\nConfigure Claude Desktop to optimize your Kubernetes workflow:\n\n### Target Specific Clusters and Namespaces\n\n```json\n{\n  \"mcpServers\": {\n    \"kubernetes\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"-i\", \"--rm\",\n        \"-v\", \"/Users/YOUR_USER_NAME/.kube:/home/appuser/.kube:ro\",\n        \"-e\", \"K8S_CONTEXT=production-cluster\",\n        \"-e\", \"K8S_NAMESPACE=my-application\",\n        \"-e\", \"K8S_MCP_TIMEOUT=600\",\n        \"ghcr.io/alexei-led/k8s-mcp-server:latest\"\n      ]\n    }\n  }\n}\n```\n\n### Connect to AWS EKS Clusters\n\n```json\n{\n  \"mcpServers\": {\n    \"kubernetes\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"-i\", \"--rm\",\n        \"-v\", \"/Users/YOUR_USER_NAME/.kube:/home/appuser/.kube:ro\",\n        \"-v\", \"/Users/YOUR_USER_NAME/.aws:/home/appuser/.aws:ro\",\n        \"-e\", \"AWS_PROFILE=production\",\n        \"-e\", \"AWS_REGION=us-west-2\",\n        \"ghcr.io/alexei-led/k8s-mcp-server:latest\"\n      ]\n    }\n  }\n}\n```\n\n### Connect to Google GKE Clusters\n\n```json\n{\n  \"mcpServers\": {\n    \"kubernetes\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"-i\", \"--rm\",\n        \"-v\", \"/Users/YOUR_USER_NAME/.kube:/home/appuser/.kube:ro\",\n        \"-v\", \"/Users/YOUR_USER_NAME/.config/gcloud:/home/appuser/.config/gcloud:ro\",\n        \"-e\", \"CLOUDSDK_CORE_PROJECT=my-gcp-project\",\n        \"-e\", \"CLOUDSDK_COMPUTE_REGION=us-central1\",\n        \"ghcr.io/alexei-led/k8s-mcp-server:latest\"\n      ]\n    }\n  }\n}\n```\n\n### Connect to Azure AKS Clusters\n\n```json\n{\n  \"mcpServers\": {\n    \"kubernetes\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"-i\", \"--rm\",\n        \"-v\", \"/Users/YOUR_USER_NAME/.kube:/home/appuser/.kube:ro\",\n        \"-v\", \"/Users/YOUR_USER_NAME/.azure:/home/appuser/.azure:ro\",\n        \"-e\", \"AZURE_SUBSCRIPTION=my-subscription-id\",\n        \"ghcr.io/alexei-led/k8s-mcp-server:latest\"\n      ]\n    }\n  }\n}\n```\n\n### Permissive Security Mode\n\n```json\n{\n  \"mcpServers\": {\n    \"kubernetes\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"-i\", \"--rm\",\n        \"-v\", \"/Users/YOUR_USER_NAME/.kube:/home/appuser/.kube:ro\",\n        \"-e\", \"K8S_MCP_SECURITY_MODE=permissive\",\n        \"ghcr.io/alexei-led/k8s-mcp-server:latest\"\n      ]\n    }\n  }\n}\n```\n\n> For detailed security configuration options, see [Security Documentation](./docs/security.md).\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kubernetes",
        "cloud",
        "docker",
        "cloud platforms",
        "cloud platform",
        "platforms cloud"
      ],
      "category": "cloud-platforms"
    },
    "awslabs--mcp": {
      "owner": "awslabs",
      "name": "mcp",
      "url": "https://github.com/awslabs/mcp",
      "imageUrl": "",
      "description": "AWS MCP servers for seamless integration with AWS services and resources.",
      "stars": 6585,
      "forks": 942,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-04T06:19:32Z",
      "readme_content": "# AWS MCP Servers\n\nA suite of specialized MCP servers that help you get the most out of AWS, wherever you use MCP.\n\n[![GitHub](https://img.shields.io/badge/github-awslabs/mcp-blue.svg?style=flat&logo=github)](https://github.com/awslabs/mcp)\n[![License](https://img.shields.io/badge/license-Apache--2.0-brightgreen)](LICENSE)\n[![Codecov](https://img.shields.io/codecov/c/github/awslabs/mcp)](https://app.codecov.io/gh/awslabs/mcp)\n[![OSSF-Scorecard Score](https://img.shields.io/ossf-scorecard/github.com/awslabs/mcp)](https://scorecard.dev/viewer/?uri=github.com/awslabs/mcp)\n\n## Table of Contents\n\n- [AWS MCP Servers](#aws-mcp-servers)\n  - [Table of Contents](#table-of-contents)\n  - [What is the Model Context Protocol (MCP) and how does it work with AWS MCP Servers?](#what-is-the-model-context-protocol-mcp-and-how-does-it-work-with-aws-mcp-servers)\n  - [Server Sent Events Support Removal](#server-sent-events-support-removal)\n  - [Why AWS MCP Servers?](#why-aws-mcp-servers)\n  - [Available MCP Servers: Quick Installation](#available-mcp-servers-quick-installation)\n    - [🚀Getting Started with AWS](#-getting-started-with-aws)\n    - [Browse by What You're Building](#browse-by-what-youre-building)\n      - [📚 Real-time access to official AWS documentation](#-real-time-access-to-official-aws-documentation)\n      - [🏗️ Infrastructure \\& Deployment](#️-infrastructure--deployment)\n        - [Infrastructure as Code](#infrastructure-as-code)\n        - [Container Platforms](#container-platforms)\n        - [Serverless \\& Functions](#serverless--functions)\n        - [Support](#support)\n      - [🤖 AI \\& Machine Learning](#-ai--machine-learning)\n      - [📊 Data \\& Analytics](#-data--analytics)\n        - [SQL \\& NoSQL Databases](#sql--nosql-databases)\n        - [Search \\& Analytics](#search--analytics)\n        - [Caching \\& Performance](#caching--performance)\n      - [🛠️ Developer Tools \\& Support](#️-developer-tools--support)\n      - [📡 Integration \\& Messaging](#-integration--messaging)\n      - [💰 Cost \\& Operations](#-cost--operations)\n      - [🧬 Healthcare \\& Lifesciences](#-healthcare--lifesciences)\n    - [Browse by How You're Working](#browse-by-how-youre-working)\n      - [👨‍💻 Vibe Coding \\& Development](#-vibe-coding--development)\n        - [Core Development Workflow](#core-development-workflow)\n        - [Infrastructure as Code](#infrastructure-as-code-1)\n        - [Application Development](#application-development)\n        - [Container \\& Serverless Development](#container--serverless-development)\n        - [Testing \\& Data](#testing--data)\n        - [Lifesciences Workflow Development](#lifesciences-workflow-development)\n      - [💬 Conversational Assistants](#-conversational-assistants)\n        - [Knowledge \\& Search](#knowledge--search)\n        - [Content Processing \\& Generation](#content-processing--generation)\n        - [Business Services](#business-services)\n      - [🤖 Autonomous Background Agents](#-autonomous-background-agents)\n        - [Data Operations \\& ETL](#data-operations--etl)\n        - [Caching \\& Performance](#caching--performance-1)\n        - [Workflow \\& Integration](#workflow--integration)\n        - [Operations \\& Monitoring](#operations--monitoring)\n  - [MCP AWS Lambda Handler Module](#mcp-aws-lambda-handler-module)\n  - [When to use Local vs Remote MCP Servers?](#when-to-use-local-vs-remote-mcp-servers)\n    - [Local MCP Servers](#local-mcp-servers)\n    - [Remote MCP Servers](#remote-mcp-servers)\n  - [Use Cases for the Servers](#use-cases-for-the-servers)\n  - [Installation and Setup](#installation-and-setup)\n    - [Running MCP servers in containers](#running-mcp-servers-in-containers)\n    - [Getting Started with Amazon Q Developer CLI](#getting-started-with-amazon-q-developer-cli)\n      - [`~/.aws/amazonq/mcp.json`](#awsamazonqmcpjson)\n    - [Getting Started with Kiro](#getting-started-with-kiro)\n      - [`kiro_mcp_settings.json`](#kiro_mcp_settingsjson)\n    - [Getting Started with Cline and Amazon Bedrock](#getting-started-with-cline-and-amazon-bedrock)\n      - [`cline_mcp_settings.json`](#cline_mcp_settingsjson)\n    - [Getting Started with Cursor](#getting-started-with-cursor)\n      - [`.cursor/mcp.json`](#cursormcpjson)\n    - [Getting Started with Windsurf](#getting-started-with-windsurf)\n      - [`~/.codeium/windsurf/mcp_config.json`](#codeiumwindsurfmcp_configjson)\n    - [Getting Started with VS Code](#getting-started-with-vs-code)\n      - [`.vscode/mcp.json`](#vscodemcpjson)\n    - [Getting Started with Claude Code](#getting-started-with-claude-code)\n      - [`.mcp.json`](#mcpjson)\n  - [Samples](#samples)\n  - [Vibe coding](#vibe-coding)\n  - [Additional Resources](#additional-resources)\n  - [Security](#security)\n  - [Contributing](#contributing)\n  - [Developer guide](#developer-guide)\n  - [License](#license)\n  - [Disclaimer](#disclaimer)\n\n## What is the Model Context Protocol (MCP) and how does it work with AWS MCP Servers?\n\n> The Model Context Protocol (MCP) is an open protocol that enables seamless integration between LLM applications and external data sources and tools. Whether you're building an AI-powered IDE, enhancing a chat interface, or creating custom AI workflows, MCP provides a standardized way to connect LLMs with the context they need.\n>\n> &mdash; [Model Context Protocol README](https://github.com/modelcontextprotocol#:~:text=The%20Model%20Context,context%20they%20need.)\n\nAn MCP Server is a lightweight program that exposes specific capabilities through the standardized Model Context Protocol. Host applications (such as chatbots, IDEs, and other AI tools) have MCP clients that maintain 1:1 connections with MCP servers. Common MCP clients include agentic AI coding assistants (like Q Developer, Cline, Cursor, Windsurf) as well as chatbot applications like Claude Desktop, with more clients coming soon. MCP servers can access local data sources and remote services to provide additional context that improves the generated outputs from the models.\n\nAWS MCP Servers use this protocol to provide AI applications access to AWS documentation, contextual guidance, and best practices. Through the standardized MCP client-server architecture, AWS capabilities become an intelligent extension of your development environment or AI application.\n\nAWS MCP servers enable enhanced cloud-native development, infrastructure management, and development workflows—making AI-assisted cloud computing more accessible and efficient.\n\nThe Model Context Protocol is an open source project run by Anthropic, PBC. and open to contributions from the entire community. For more information on MCP, you can find further documentation [here](https://modelcontextprotocol.io/introduction)\n\n## Server Sent Events Support Removal\n\n**Important Notice:** On May 26th, 2025, Server Sent Events (SSE) support was removed from all MCP servers in their latest major versions. This change aligns with the Model Context Protocol specification's [backwards compatibility guidelines](https://modelcontextprotocol.io/specification/2025-03-26/basic/transports#backwards-compatibility).\n\nWe are actively working towards supporting [Streamable HTTP](https://modelcontextprotocol.io/specification/draft/basic/transports#streamable-http), which will provide improved transport capabilities for future versions.\n\nFor applications still requiring SSE support, please use the previous major version of the respective MCP server until you can migrate to alternative transport methods.\n\n### Why AWS MCP Servers?\n\nMCP servers enhance the capabilities of foundation models (FMs) in several key ways:\n\n- **Improved Output Quality**: By providing relevant information directly in the model's context, MCP servers significantly improve model responses for specialized domains like AWS services. This approach reduces hallucinations, provides more accurate technical details, enables more precise code generation, and ensures recommendations align with current AWS best practices and service capabilities.\n\n- **Access to Latest Documentation**: FMs may not have knowledge of recent releases, APIs, or SDKs. MCP servers bridge this gap by pulling in up-to-date documentation, ensuring your AI assistant always works with the latest AWS capabilities.\n\n- **Workflow Automation**: MCP servers convert common workflows into tools that foundation models can use directly. Whether it's CDK, Terraform, or other AWS-specific workflows, these tools enable AI assistants to perform complex tasks with greater accuracy and efficiency.\n\n- **Specialized Domain Knowledge**: MCP servers provide deep, contextual knowledge about AWS services that might not be fully represented in foundation models' training data, enabling more accurate and helpful responses for cloud development tasks.\n\n## Available MCP Servers: Quick Installation\n\nGet started quickly with one-click installation buttons for popular MCP clients. Click the buttons below to install servers directly in Cursor or VS Code:\n\n### 🚀 Getting Started with AWS\n\nFor general AWS interactions and comprehensive API support, we recommend starting with:\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [AWS API MCP Server](src/aws-api-mcp-server) | Start here for general AWS interactions! Comprehensive AWS API support with command validation, security controls, and access to all AWS services. Perfect for managing infrastructure, exploring resources, and executing AWS operations through natural language. | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-api-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWFwaS1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D)<br/>[![Install VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20API%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-api-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_REGION%22%3A%22us-east-1%22%7D%2C%22type%22%3A%22stdio%22%7D) |\n| [AWS Knowledge MCP Server](src/aws-knowledge-mcp-server) | A remote, fully-managed MCP server hosted by AWS that provides access to the latest AWS docs, API references, What's New Posts, Getting Started information, Builder Center, Blog posts, Architectural references, and Well-Architected guidance. | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-knowledge-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWtub3dsZWRnZS1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBV1NfUFJPRklMRSI6InlvdXItYXdzLXByb2ZpbGUiLCJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIiwiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D)<br/>[![Install VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Knowledge%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-knowledge-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n### Browse by What You're Building\n\n#### 📚 Real-time access to official AWS documentation\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [AWS Knowledge MCP Server](src/aws-knowledge-mcp-server) | A remote, fully-managed MCP server hosted by AWS that provides access to the latest AWS docs, API references, What's New Posts, Getting Started information, Builder Center, Blog posts, Architectural references, and Well-Architected guidance. | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-knowledge-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWtub3dsZWRnZS1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBV1NfUFJPRklMRSI6InlvdXItYXdzLXByb2ZpbGUiLCJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIiwiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D)<br/>[![Install VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Knowledge%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-knowledge-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS Documentation MCP Server](src/aws-documentation-mcp-server) | Get latest AWS docs and API references | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-documentation-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWRvY3VtZW50YXRpb24tbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiIsIkFXU19ET0NVTUVOVEFUSU9OX1BBUlRJVElPTiI6ImF3cyJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Documentation%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-documentation-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%2C%22AWS_DOCUMENTATION_PARTITION%22%3A%22aws%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n\n### 🏗️ Infrastructure & Deployment\n\nBuild, deploy, and manage cloud infrastructure with Infrastructure as Code best practices.\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [AWS Cloud Control API MCP Server](src/ccapi-mcp-server) | Direct AWS resource management with security scanning and best practices | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.ccapi-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuY2NhcGktbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJ5b3VyLWF3cy1wcm9maWxlIiwiQVdTX1JFR0lPTiI6InVzLWVhc3QtMSIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Cloud%20Control%20API%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.ccapi-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS CDK MCP Server](src/cdk-mcp-server) | AWS CDK development with security compliance and best practices | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.cdk-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuY2RrLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=CDK%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.cdk-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS Terraform MCP Server](src/terraform-mcp-server) | Terraform workflows with integrated security scanning | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.terraform-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMudGVycmFmb3JtLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Terraform%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.terraform-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS CloudFormation MCP Server](src/cfn-mcp-server) | Direct CloudFormation resource management via Cloud Control API | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.cfn-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuY2ZuLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1uYW1lZC1wcm9maWxlIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=CloudFormation%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.cfn-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-named-profile%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n#### Container Platforms\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [Amazon EKS MCP Server](src/eks-mcp-server) | Kubernetes cluster management and application deployment | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.eks-mcp-server&config=eyJhdXRvQXBwcm92ZSI6W10sImRpc2FibGVkIjpmYWxzZSwiY29tbWFuZCI6InV2eCBhd3NsYWJzLmVrcy1tY3Atc2VydmVyQGxhdGVzdCAtLWFsbG93LXdyaXRlIC0tYWxsb3ctc2Vuc2l0aXZlLWRhdGEtYWNjZXNzIiwiZW52Ijp7IkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwidHJhbnNwb3J0VHlwZSI6InN0ZGlvIn0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=EKS%20MCP%20Server&config=%7B%22autoApprove%22%3A%5B%5D%2C%22disabled%22%3Afalse%2C%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.eks-mcp-server%40latest%22%2C%22--allow-write%22%2C%22--allow-sensitive-data-access%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22transportType%22%3A%22stdio%22%7D) |\n| [Amazon ECS MCP Server](src/ecs-mcp-server) | Container orchestration and ECS application deployment | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.ecs-mcp-server&config=eyJjb21tYW5kIjoidXZ4IC0tZnJvbSBhd3NsYWJzLWVjcy1tY3Atc2VydmVyIGVjcy1tY3Atc2VydmVyIiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1hd3MtcHJvZmlsZSIsIkFXU19SRUdJT04iOiJ5b3VyLWF3cy1yZWdpb24iLCJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIiwiRkFTVE1DUF9MT0dfRklMRSI6Ii9wYXRoL3RvL2Vjcy1tY3Atc2VydmVyLmxvZyIsIkFMTE9XX1dSSVRFIjoiZmFsc2UiLCJBTExPV19TRU5TSVRJVkVfREFUQSI6ImZhbHNlIn19) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=ECS%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22--from%22%2C%22awslabs-ecs-mcp-server%22%2C%22ecs-mcp-server%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22your-aws-region%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%2C%22FASTMCP_LOG_FILE%22%3A%22%2Fpath%2Fto%2Fecs-mcp-server.log%22%2C%22ALLOW_WRITE%22%3A%22false%22%2C%22ALLOW_SENSITIVE_DATA%22%3A%22false%22%7D%7D) |\n| [Finch MCP Server](src/finch-mcp-server) | Local container building with ECR integration | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.finch-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuZmluY2gtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJkZWZhdWx0IiwiQVdTX1JFR0lPTiI6InVzLXdlc3QtMiIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiSU5GTyJ9LCJ0cmFuc3BvcnRUeXBlIjoic3RkaW8iLCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Finch%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.finch-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22default%22%2C%22AWS_REGION%22%3A%22us-west-2%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22INFO%22%7D%2C%22transportType%22%3A%22stdio%22%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n\n\n#### Serverless & Functions\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [AWS Serverless MCP Server](src/aws-serverless-mcp-server) | Complete serverless application lifecycle with SAM CLI | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-serverless-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLXNlcnZlcmxlc3MtbWNwLXNlcnZlckBsYXRlc3QgLS1hbGxvdy13cml0ZSAtLWFsbG93LXNlbnNpdGl2ZS1kYXRhLWFjY2VzcyIsImVudiI6eyJBV1NfUFJPRklMRSI6InlvdXItYXdzLXByb2ZpbGUiLCJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Serverless%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-serverless-mcp-server%40latest%22%2C%22--allow-write%22%2C%22--allow-sensitive-data-access%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS Lambda Tool MCP Server](src/lambda-tool-mcp-server) | Execute Lambda functions as AI tools for private resource access | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.lambda-tool-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMubGFtYmRhLXRvb2wtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJ5b3VyLWF3cy1wcm9maWxlIiwiQVdTX1JFR0lPTiI6InVzLWVhc3QtMSIsIkZVTkNUSU9OX1BSRUZJWCI6InlvdXItZnVuY3Rpb24tcHJlZml4IiwiRlVOQ1RJT05fTElTVCI6InlvdXItZmlyc3QtZnVuY3Rpb24sIHlvdXItc2Vjb25kLWZ1bmN0aW9uIiwiRlVOQ1RJT05fVEFHX0tFWSI6InlvdXItdGFnLWtleSIsIkZVTkNUSU9OX1RBR19WQUxVRSI6InlvdXItdGFnLXZhbHVlIiwiRlVOQ1RJT05fSU5QVVRfU0NIRU1BX0FSTl9UQUdfS0VZIjoieW91ci1mdW5jdGlvbi10YWctZm9yLWlucHV0LXNjaGVtYSJ9fQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Lambda%20Tool%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.lambda-tool-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FUNCTION_PREFIX%22%3A%22your-function-prefix%22%2C%22FUNCTION_LIST%22%3A%22your-first-function%2C%20your-second-function%22%2C%22FUNCTION_TAG_KEY%22%3A%22your-tag-key%22%2C%22FUNCTION_TAG_VALUE%22%3A%22your-tag-value%22%2C%22FUNCTION_INPUT_SCHEMA_ARN_TAG_KEY%22%3A%22your-function-tag-for-input-schema%22%7D%7D) |\n\n\n#### Support\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [AWS Support MCP Server](src/aws-support-mcp-server) | Help users create and manage AWS Support cases | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs_support_mcp_server&config=eyJjb21tYW5kIjoidXZ4IC1tIGF3c2xhYnMuYXdzLXN1cHBvcnQtbWNwLXNlcnZlckBsYXRlc3QgLS1kZWJ1ZyAtLWxvZy1maWxlIC4vbG9ncy9tY3Bfc3VwcG9ydF9zZXJ2ZXIubG9nIiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1hd3MtcHJvZmlsZSJ9fQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Support%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22-m%22%2C%22awslabs.aws-support-mcp-server%40latest%22%2C%22--debug%22%2C%22--log-file%22%2C%22.%2Flogs%2Fmcp_support_server.log%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%7D%7D) |\n\n### 🤖 AI & Machine Learning\nEnhance AI applications with knowledge retrieval, content generation, and ML capabilities\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [Amazon Bedrock Knowledge Bases Retrieval MCP Server ](src/bedrock-kb-retrieval-mcp-server) | Query enterprise knowledge bases with citation support | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.bedrock-kb-retrieval-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYmVkcm9jay1rYi1yZXRyaWV2YWwtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJ5b3VyLXByb2ZpbGUtbmFtZSIsIkFXU19SRUdJT04iOiJ1cy1lYXN0LTEiLCJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIiwiS0JfSU5DTFVTSU9OX1RBR19LRVkiOiJvcHRpb25hbC10YWcta2V5LXRvLWZpbHRlci1rYnMiLCJCRURST0NLX0tCX1JFUkFOS0lOR19FTkFCTEVEIjoiZmFsc2UifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Bedrock%20KB%20Retrieval%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.bedrock-kb-retrieval-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-profile-name%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%2C%22KB_INCLUSION_TAG_KEY%22%3A%22optional-tag-key-to-filter-kbs%22%2C%22BEDROCK_KB_RERANKING_ENABLED%22%3A%22false%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Kendra Index MCP Server](src/amazon-kendra-index-mcp-server) | Enterprise search and RAG enhancement | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.amazon-kendra-index-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYW1hem9uLWtlbmRyYS1pbmRleC1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIiwiS0VORF9JTkRFWF9JRCI6InlvdXIta2VuZHJhLWluZGV4LWlkIiwiS0VORF9ST0xFX0FSTiI6InlvdXIta2VuZHJhLXJvbGUtYXJuIiwiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Amazon%20Kendra%20Index%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.amazon-kendra-index-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_REGION%22%3A%22us-east-1%22%2C%22KEND_INDEX_ID%22%3A%22your-kendra-index-id%22%2C%22KEND_ROLE_ARN%22%3A%22your-kendra-role-arn%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Q Business MCP Server](src/amazon-qbusiness-anonymous-mcp-server) | AI assistant for your ingested content with anonymous access | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.amazon-qbusiness-anonymous-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYW1hem9uLXFidXNpbmVzcy1hbm9ueW1vdXMtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiUUJVU0lORVNTX0FQUF9JRCI6InlvdXItcWJ1c2luZXNzLWFwcC1pZCIsIlFCVVNJTkVTU19VU0VSX0lEIjoieW91ci11c2VyLWlkIiwiQVdTX1BST0ZJTEUiOiJ5b3VyLWF3cy1wcm9maWxlIiwiQVdTX1JFR0lPTiI6InVzLWVhc3QtMSIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Amazon%20Q%20Business%20Anonymous%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.amazon-qbusiness-anonymous-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22QBUSINESS_APP_ID%22%3A%22your-qbusiness-app-id%22%2C%22QBUSINESS_USER_ID%22%3A%22your-user-id%22%2C%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Q Index MCP Server](src/amazon-qindex-mcp-server) | Data accessors to search through enterprise's Q index | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.amazon-qindex-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYW1hem9uLXFpbmRleC1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIiwiUUlOREVYX0lEIjoieW91ci1xaW5kZXgtaWQiLCJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Amazon%20Q%20Index%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.amazon-qindex-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_REGION%22%3A%22us-east-1%22%2C%22QINDEX_ID%22%3A%22your-qindex-id%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Nova Canvas MCP Server](src/nova-canvas-mcp-server) | AI image generation using Amazon Nova Canvas | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.nova-canvas-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMubm92YS1jYW52YXMtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJ5b3VyLWF3cy1wcm9maWxlIiwiQVdTX1JFR0lPTiI6InVzLWVhc3QtMSIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Nova%20Canvas%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.nova-canvas-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Rekognition MCP Server (deprecated)](src/amazon-rekognition-mcp-server) | Analyze images using computer vision capabilities | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.amazon-rekognition-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYW1hem9uLXJla29nbml0aW9uLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1hd3MtcHJvZmlsZSIsIkFXU19SRUdJT04iOiJ1cy1lYXN0LTEiLCJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Amazon%20Rekognition%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.amazon-rekognition-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS Bedrock Data Automation MCP Server](src/aws-bedrock-data-automation-mcp-server) | Analyze documents, images, videos, and audio files | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=bedrock-data-automation-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWJlZHJvY2stZGF0YS1hdXRvbWF0aW9uLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1hd3MtcHJvZmlsZSIsIkFXU19SRUdJT04iOiJ1cy1lYXN0LTEiLCJBV1NfQlVDS0VUX05BTUUiOiJ5b3VyLXMzLWJ1Y2tldC1uYW1lIiwiQkFTRV9ESVIiOiIvcGF0aC90by9iYXNlL2RpcmVjdG9yeSIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Bedrock%20Data%20Automation%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-bedrock-data-automation-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22AWS_BUCKET_NAME%22%3A%22your-s3-bucket-name%22%2C%22BASE_DIR%22%3A%22%2Fpath%2Fto%2Fbase%2Fdirectory%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS Bedrock Custom Model Import MCP Server](src/aws-bedrock-custom-model-import-mcp-server) | Manage custom models in Bedrock for on-demand inference | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=aws-bedrock-custom-model-import-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWJlZHJvY2stY3VzdG9tLW1vZGVsLWltcG9ydC1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBV1NfUFJPRklMRSI6InlvdXItYXdzLXByb2ZpbGUiLCJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIiwiQkVEUk9DS19NT0RFTF9JTVBPUlRfUzNfQlVDS0VUIjoieW91ci1zMy1idWNrZXQtbmFtZSIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Bedrock%20Custom%20Model%20Import%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-bedrock-custom-model-import-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22BEDROCK_MODEL_IMPORT_S3_BUCKET%22%3A%22your-s3-bucket-name%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS Bedrock AgentCore MCP Server](src/amazon-bedrock-agentcore-mcp-server) | Provides comprehensive documentation access on AgentCore platform services, APIs, and best practices | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.amazon-bedrock-agentcore-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYW1hem9uLWJlZHJvY2stYWdlbnRjb3JlLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Bedrock%20AgentCore%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.amazon-bedrock-agentcore-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n### 📊 Data & Analytics\n\nWork with databases, caching systems, and data processing workflows.\n\n#### SQL & NoSQL Databases\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [Amazon DynamoDB MCP Server](src/dynamodb-mcp-server) | Complete DynamoDB operations and table management | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.dynamodb-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuZHluYW1vZGItbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiRERCLU1DUC1SRUFET05MWSI6InRydWUiLCJBV1NfUFJPRklMRSI6ImRlZmF1bHQiLCJBV1NfUkVHSU9OIjoidXMtd2VzdC0yIiwiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=DynamoDB%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.dynamodb-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22DDB-MCP-READONLY%22%3A%22true%22%2C%22AWS_PROFILE%22%3A%22default%22%2C%22AWS_REGION%22%3A%22us-west-2%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Aurora PostgreSQL MCP Server](src/postgres-mcp-server) | PostgreSQL database operations via RDS Data API | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.postgres-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMucG9zdGdyZXMtbWNwLXNlcnZlckBsYXRlc3QgLS1jb25uZWN0aW9uLXN0cmluZyBwb3N0Z3Jlc3FsOi8vW3VzZXJuYW1lXTpbcGFzc3dvcmRdQFtob3N0XTpbcG9ydF0vW2RhdGFiYXNlXSIsImVudiI6eyJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdLCJ0cmFuc3BvcnRUeXBlIjoic3RkaW8iLCJhdXRvU3RhcnQiOnRydWV9) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=PostgreSQL%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.postgres-mcp-server%40latest%22%2C%22--connection-string%22%2C%22postgresql%3A%2F%2F%5Busername%5D%3A%5Bpassword%5D%40%5Bhost%5D%3A%5Bport%5D%2F%5Bdatabase%5D%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%2C%22transportType%22%3A%22stdio%22%2C%22autoStart%22%3Atrue%7D) |\n| [Amazon Aurora MySQL MCP Server](src/mysql-mcp-server) | MySQL database operations via RDS Data API | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.mysql-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMubXlzcWwtbWNwLXNlcnZlckBsYXRlc3QgLS1yZXNvdXJjZV9hcm4gW3lvdXIgZGF0YV0gLS1zZWNyZXRfYXJuIFt5b3VyIGRhdGFdIC0tZGF0YWJhc2UgW3lvdXIgZGF0YV0gLS1yZWdpb24gW3lvdXIgZGF0YV0gLS1yZWFkb25seSBUcnVlIiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1hd3MtcHJvZmlsZSIsIkFXU19SRUdJT04iOiJ1cy1lYXN0LTEiLCJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=MySQL%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.mysql-mcp-server%40latest%22%2C%22--resource_arn%22%2C%22%5Byour%20data%5D%22%2C%22--secret_arn%22%2C%22%5Byour%20data%5D%22%2C%22--database%22%2C%22%5Byour%20data%5D%22%2C%22--region%22%2C%22%5Byour%20data%5D%22%2C%22--readonly%22%2C%22True%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Aurora DSQL MCP Server](src/aurora-dsql-mcp-server) | Distributed SQL with PostgreSQL compatibility | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aurora-dsql-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXVyb3JhLWRzcWwtbWNwLXNlcnZlckBsYXRlc3QgLS1jbHVzdGVyX2VuZHBvaW50IFt5b3VyIGRzcWwgY2x1c3RlciBlbmRwb2ludF0gLS1yZWdpb24gW3lvdXIgZHNxbCBjbHVzdGVyIHJlZ2lvbiwgZS5nLiB1cy1lYXN0LTFdIC0tZGF0YWJhc2VfdXNlciBbeW91ciBkc3FsIHVzZXJuYW1lXSAtLXByb2ZpbGUgZGVmYXVsdCIsImVudiI6eyJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Aurora%20DSQL%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aurora-dsql-mcp-server%40latest%22%2C%22--cluster_endpoint%22%2C%22%5Byour%20dsql%20cluster%20endpoint%5D%22%2C%22--region%22%2C%22%5Byour%20dsql%20cluster%20region%2C%20e.g.%20us-east-1%5D%22%2C%22--database_user%22%2C%22%5Byour%20dsql%20username%5D%22%2C%22--profile%22%2C%22default%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon DocumentDB MCP Server](src/documentdb-mcp-server) | MongoDB-compatible document database operations | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.documentdb-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuZG9jdW1lbnRkYi1tY3Atc2VydmVAbGF0ZXN0IiwiZW52Ijp7IkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IiLCJBV1NfUFJPRklMRSI6InlvdXItYXdzLXByb2ZpbGUifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=DocumentDB%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.documentdb-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%2C%22AWS_PROFILE%22%3A%22your-aws-profile%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Neptune MCP Server](src/amazon-neptune-mcp-server) | Graph database queries with openCypher and Gremlin | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.amazon-neptune-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYW1hem9uLW5lcHR1bmUtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiTkVQVFVORV9FTkRQT0lOVCI6Imh0dHBzOi8veW91ci1uZXB0dW5lLWNsdXN0ZXItaWQucmVnaW9uLm5lcHR1bmUuYW1hem9uYXdzLmNvbTo4MTgyIiwiQVdTX1BST0ZJTEUiOiJ5b3VyLWF3cy1wcm9maWxlIiwiQVdTX1JFR0lPTiI6InVzLWVhc3QtMSIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Amazon%20Neptune%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.amazon-neptune-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22NEPTUNE_ENDPOINT%22%3A%22https%3A%2F%2Fyour-neptune-cluster-id.region.neptune.amazonaws.com%3A8182%22%2C%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Keyspaces MCP Server](src/amazon-keyspaces-mcp-server) | Apache Cassandra-compatible operations | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.amazon-keyspaces-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYW1hem9uLWtleXNwYWNlcy1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBV1NfUFJPRklMRSI6InlvdXItYXdzLXByb2ZpbGUiLCJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIiwiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Amazon%20Keyspaces%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.amazon-keyspaces-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Timestream for InfluxDB MCP Server](src/timestream-for-influxdb-mcp-server) | Time-series database operations and InfluxDB compatibility | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.timestream-for-influxdb-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMudGltZXN0cmVhbS1mb3ItaW5mbHV4ZGItbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJ5b3VyLWF3cy1wcm9maWxlIiwiQVdTX1JFR0lPTiI6InVzLWVhc3QtMSIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Timestream%20for%20InfluxDB%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.timestream-for-influxdb-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon MSK MCP Server](src/aws-msk-mcp-server) | Managed Kafka cluster operations and streaming | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-msk-mcp-server&config=JTdCJTIyY29tbWFuZCUyMiUzQSUyMnV2eCUyMGF3c2xhYnMuYXdzLW1zay1tY3Atc2VydmVyJTQwbGF0ZXN0JTIwLS1hbGxvdy13cml0ZXMlMjIlMkMlMjJlbnYlMjIlM0ElN0IlMjJGQVNUTUNQX0xPR19MRVZFTCUyMiUzQSUyMkVSUk9SJTIyJTdEJTJDJTIyZGlzYWJsZWQlMjIlM0FmYWxzZSUyQyUyMmF1dG9BcHByb3ZlJTIyJTNBJTVCJTVEJTdE) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20MSK%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-msk-mcp-server%40latest%22%2C%22--allow-writes%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS S3 Tables MCP Server](src/s3-tables-mcp-server) | Manage S3 Tables for optimized analytics | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.s3-tables-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuczMtdGFibGVzLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1hd3MtcHJvZmlsZSIsIkFXU19SRUdJT04iOiJ1cy1lYXN0LTEifX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=S3%20Tables%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.s3-tables-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%7D%7D) |\n| [Amazon Redshift MCP Server](src/redshift-mcp-server) | Data warehouse operations and analytics queries | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.redshift-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMucmVkc2hpZnQtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJkZWZhdWx0IiwiQVdTX1JFR0lPTiI6InVzLWVhc3QtMSIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiSU5GTyJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Redshift%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.redshift-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22default%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22INFO%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS IoT SiteWise MCP Server](src/aws-iot-sitewise-mcp-server) | Industrial IoT asset management, data ingestion, and analytics | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-iot-sitewise-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWlvdC1zaXRld2lzZS1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBV1NfUFJPRklMRSI6InlvdXItYXdzLXByb2ZpbGUiLCJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIiwiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20IoT%20SiteWise%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-iot-sitewise-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n##### Search & Analytics\n\n- **[Amazon OpenSearch MCP Server](https://github.com/opensearch-project/opensearch-mcp-server-py)** - OpenSearch powered search, Analytics, and Observability\n\n#### Backend API Providers\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [AWS AppSync MCP Server](src/aws-appsync-mcp-server) | Manage and Interact with application backends powered by AWS AppSync | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-appsync-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWFwcHN5bmMtbWNwLXNlcnZlckBsYXRlc3QgLS1hbGxvdy13cml0ZSIsImVudiI6eyJBV1NfUFJPRklMRSI6ImRlZmF1bHQiLCJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIiwiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0=) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20AppSync%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-appsync-mcp-server%40latest%22%2C%20%22--allow-write%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22default%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n#### Caching & Performance\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [Amazon ElastiCache MCP Server](src/elasticache-mcp-server) | Complete ElastiCache control plane operations | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.elasticache-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuZWxhc3RpY2FjaGUtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJkZWZhdWx0IiwiQVdTX1JFR0lPTiI6InVzLXdlc3QtMiIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=ElastiCache%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.elasticache-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22default%22%2C%22AWS_REGION%22%3A%22us-west-2%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon ElastiCache / MemoryDB for Valkey MCP Server](src/valkey-mcp-server) | Advanced data structures and caching with Valkey | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.valkey-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMudmFsa2V5LW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IlZBTEtFWV9IT1NUIjoiMTI3LjAuMC4xIiwiVkFMS0VZX1BPUlQiOiI2Mzc5IiwiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiJ9LCJhdXRvQXBwcm92ZSI6W10sImRpc2FibGVkIjpmYWxzZX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Valkey%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.valkey-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22VALKEY_HOST%22%3A%22127.0.0.1%22%2C%22VALKEY_PORT%22%3A%226379%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22autoApprove%22%3A%5B%5D%2C%22disabled%22%3Afalse%7D) |\n| [Amazon ElastiCache for Memcached MCP Server](src/memcached-mcp-server) | High-speed caching with Memcached protocol | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.memcached-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMubWVtY2FjaGVkLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IiLCJNRU1DQUNIRURfSE9TVCI6InlvdXItbWVtY2FjaGVkLWhvc3QiLCJNRU1DQUNIRURfUE9SVCI6IjExMjExIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Memcached%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.memcached-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%2C%22MEMCACHED_HOST%22%3A%22your-memcached-host%22%2C%22MEMCACHED_PORT%22%3A%2211211%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n\n### 🛠️ Developer Tools & Support\nAccelerate development with code analysis, documentation, and testing utilities.\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [AWS IAM MCP Server](src/iam-mcp-server) | Comprehensive IAM user, role, group, and policy management with security best practices | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.iam-mcp-server&config=eyJjb21tYW5kIjoidXZ4IiwiYXJncyI6WyJhd3NsYWJzLmlhbS1tY3Atc2VydmVyQGxhdGVzdCJdLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJ5b3VyLWF3cy1wcm9maWxlIiwiQVdTX1JFR0lPTiI6InVzLWVhc3QtMSIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20IAM%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.iam-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%7D) |\n| [Git Repo Research MCP Server](src/git-repo-research-mcp-server) | Semantic code search and repository analysis | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.git-repo-research-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuZ2l0LXJlcG8tcmVzZWFyY2gtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJ5b3VyLXByb2ZpbGUtbmFtZSIsIkFXU19SRUdJT04iOiJ1cy13ZXN0LTIiLCJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIiwiR0lUSFVCX1RPS0VOIjoieW91ci1naXRodWItdG9rZW4ifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Git%20Repo%20Research%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.git-repo-research-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-profile-name%22%2C%22AWS_REGION%22%3A%22us-west-2%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%2C%22GITHUB_TOKEN%22%3A%22your-github-token%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Code Documentation Generator MCP Server](src/code-doc-gen-mcp-server) | Automated documentation from code analysis | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.code-doc-gen-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuY29kZS1kb2MtZ2VuLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Code%20Documentation%20Generator%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.code-doc-gen-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS Diagram MCP Server](src/aws-diagram-mcp-server) | Generate architecture diagrams and technical illustrations | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-diagram-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWRpYWdyYW0tbWNwLXNlcnZlciIsImVudiI6eyJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImF1dG9BcHByb3ZlIjpbXSwiZGlzYWJsZWQiOmZhbHNlfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Diagram%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-diagram-mcp-server%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22autoApprove%22%3A%5B%5D%2C%22disabled%22%3Afalse%7D) |\n| [Frontend MCP Server](src/frontend-mcp-server) | React and modern web development guidance | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.frontend-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuZnJvbnRlbmQtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Frontend%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.frontend-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Synthetic Data MCP Server](src/syntheticdata-mcp-server) | Generate realistic test data for development and ML | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.syntheticdata-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuc3ludGhldGljZGF0YS1tY3Atc2VydmVyIiwiZW52Ijp7IkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IiLCJBV1NfUFJPRklMRSI6InlvdXItYXdzLXByb2ZpbGUiLCJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIn0sImF1dG9BcHByb3ZlIjpbXSwiZGlzYWJsZWQiOmZhbHNlfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Synthetic%20Data%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.syntheticdata-mcp-server%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%2C%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%7D%2C%22autoApprove%22%3A%5B%5D%2C%22disabled%22%3Afalse%7D) |\n| [OpenAPI MCP Server](src/openapi-mcp-server) | Dynamic API integration through OpenAPI specifications | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.openapi-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMub3BlbmFwaS1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBUElfTkFNRSI6InlvdXItYXBpLW5hbWUiLCJBUElfQkFTRV9VUkwiOiJodHRwczovL2FwaS5leGFtcGxlLmNvbSIsIkFQSV9TUEVDX1VSTCI6Imh0dHBzOi8vYXBpLmV4YW1wbGUuY29tL29wZW5hcGkuanNvbiIsIkxPR19MRVZFTCI6IkVSUk9SIiwiRU5BQkxFX1BST01FVEhFVVMiOiJmYWxzZSIsIkVOQUJMRV9PUEVSQVRJT05fUFJPTVBUUyI6InRydWUiLCJVVklDT1JOX1RJTUVPVVRfR1JBQ0VGVUxfU0hVVERPV04iOiI1LjAiLCJVVklDT1JOX0dSQUNFRlVMX1NIVVRET1dOIjoidHJ1ZSJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=OpenAPI%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.openapi-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22API_NAME%22%3A%22your-api-name%22%2C%22API_BASE_URL%22%3A%22https%3A%2F%2Fapi.example.com%22%2C%22API_SPEC_URL%22%3A%22https%3A%2F%2Fapi.example.com%2Fopenapi.json%22%2C%22LOG_LEVEL%22%3A%22ERROR%22%2C%22ENABLE_PROMETHEUS%22%3A%22false%22%2C%22ENABLE_OPERATION_PROMPTS%22%3A%22true%22%2C%22UVICORN_TIMEOUT_GRACEFUL_SHUTDOWN%22%3A%225.0%22%2C%22UVICORN_GRACEFUL_SHUTDOWN%22%3A%22true%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n\n### 📡 Integration & Messaging\n\nConnect systems with messaging, workflows, and location services.\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [Amazon SNS / SQS MCP Server](src/amazon-sns-sqs-mcp-server) | Event-driven messaging and queue management | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.amazon-sns-sqs-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYW1hem9uLXNucy1zcXMtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJ5b3VyLWF3cy1wcm9maWxlIiwiQVdTX1JFR0lPTiI6InVzLWVhc3QtMSJ9fQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Amazon%20SNS%2FSQS%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.amazon-sns-sqs-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%7D%7D) |\n| [Amazon MQ MCP Server](src/amazon-mq-mcp-server) | Message broker management for RabbitMQ and ActiveMQ | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.amazon-mq-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYW1hem9uLW1xLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1hd3MtcHJvZmlsZSIsIkFXU19SRUdJT04iOiJ1cy1lYXN0LTEiLCJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Amazon%20MQ%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.amazon-mq-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS MSK MCP Server](src/aws-msk-mcp-server) | Managed Kafka cluster operations and streaming | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-msk-mcp-server&config=JTdCJTIyY29tbWFuZCUyMiUzQSUyMnV2eCUyMGF3c2xhYnMuYXdzLW1zay1tY3Atc2VydmVyJTQwbGF0ZXN0JTIwLS1hbGxvdy13cml0ZXMlMjIlMkMlMjJlbnYlMjIlM0ElN0IlMjJGQVNUTUNQX0xPR19MRVZFTCUyMiUzQSUyMkVSUk9SJTIyJTdEJTJDJTIyZGlzYWJsZWQlMjIlM0FmYWxzZSUyQyUyMmF1dG9BcHByb3ZlJTIyJTNBJTVCJTVEJTdE) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20MSK%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-msk-mcp-server%40latest%22%2C%22--allow-writes%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS Step Functions Tool MCP Server](src/stepfunctions-tool-mcp-server) | Execute complex workflows and business processes | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.stepfunctions-tool-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuc3RlcGZ1bmN0aW9ucy10b29sLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1hd3MtcHJvZmlsZSIsIkFXU19SRUdJT04iOiJ1cy1lYXN0LTEiLCJTVEFURV9NQUNISU5FX1BSRUZJWCI6InlvdXItc3RhdGUtbWFjaGluZS1wcmVmaXgiLCJTVEFURV9NQUNISU5FX0xJU1QiOiJ5b3VyLWZpcnN0LXN0YXRlLW1hY2hpbmUsIHlvdXItc2Vjb25kLXN0YXRlLW1hY2hpbmUiLCJTVEFURV9NQUNISU5FX1RBR19LRVkiOiJ5b3VyLXRhZy1rZXkiLCJTVEFURV9NQUNISU5FX1RBR19WQUxVRSI6InlvdXItdGFnLXZhbHVlIiwiU1RBVEVfTUFDSElORV9JTlBVVF9TQ0hFTUFfQVJOX1RBR19LRVkiOiJ5b3VyLXN0YXRlLW1hY2hpbmUtdGFnLWZvci1pbnB1dC1zY2hlbWEifX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Step%20Functions%20Tool%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.stepfunctions-tool-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22STATE_MACHINE_PREFIX%22%3A%22your-state-machine-prefix%22%2C%22STATE_MACHINE_LIST%22%3A%22your-first-state-machine%2C%20your-second-state-machine%22%2C%22STATE_MACHINE_TAG_KEY%22%3A%22your-tag-key%22%2C%22STATE_MACHINE_TAG_VALUE%22%3A%22your-tag-value%22%2C%22STATE_MACHINE_INPUT_SCHEMA_ARN_TAG_KEY%22%3A%22your-state-machine-tag-for-input-schema%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Location Service MCP Server](src/aws-location-mcp-server) | Place search, geocoding, and route optimization | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-location-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWxvY2F0aW9uLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1hd3MtcHJvZmlsZSIsIkFXU19SRUdJT04iOiJ1cy1lYXN0LTEiLCJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Location%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-location-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [OpenAPI MCP Server](src/openapi-mcp-server) | Dynamic API integration through OpenAPI specifications | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.openapi-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMub3BlbmFwaS1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBUElfTkFNRSI6InlvdXItYXBpLW5hbWUiLCJBUElfQkFTRV9VUkwiOiJodHRwczovL2FwaS5leGFtcGxlLmNvbSIsIkFQSV9TUEVDX1VSTCI6Imh0dHBzOi8vYXBpLmV4YW1wbGUuY29tL29wZW5hcGkuanNvbiIsIkxPR19MRVZFTCI6IkVSUk9SIiwiRU5BQkxFX1BST01FVEhFVVMiOiJmYWxzZSIsIkVOQUJMRV9PUEVSQVRJT05fUFJPTVBUUyI6InRydWUiLCJVVklDT1JOX1RJTUVPVVRfR1JBQ0VGVUxfU0hVVERPV04iOiI1LjAiLCJVVklDT1JOX0dSQUNFRlVMX1NIVVRET1dOIjoidHJ1ZSJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=OpenAPI%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.openapi-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22API_NAME%22%3A%22your-api-name%22%2C%22API_BASE_URL%22%3A%22https%3A%2F%2Fapi.example.com%22%2C%22API_SPEC_URL%22%3A%22https%3A%2F%2Fapi.example.com%2Fopenapi.json%22%2C%22LOG_LEVEL%22%3A%22ERROR%22%2C%22ENABLE_PROMETHEUS%22%3A%22false%22%2C%22ENABLE_OPERATION_PROMPTS%22%3A%22true%22%2C%22UVICORN_TIMEOUT_GRACEFUL_SHUTDOWN%22%3A%225.0%22%2C%22UVICORN_GRACEFUL_SHUTDOWN%22%3A%22true%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n### 💰 Cost & Operations\n\nMonitor, optimize, and manage your AWS infrastructure and costs.\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [AWS Pricing MCP Server](src/aws-pricing-mcp-server) | AWS service pricing and cost estimates | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-pricing-mcp-server&config=ewogICAgImNvbW1hbmQiOiAidXZ4IGF3c2xhYnMuYXdzLXByaWNpbmctbWNwLXNlcnZlckBsYXRlc3QiLAogICAgImVudiI6IHsKICAgICAgIkZBU1RNQ1BfTE9HX0xFVkVMIjogIkVSUk9SIiwKICAgICAgIkFXU19QUk9GSUxFIjogInlvdXItYXdzLXByb2ZpbGUiLAogICAgICAiQVdTX1JFR0lPTiI6ICJ1cy1lYXN0LTEiCiAgICB9LAogICAgImRpc2FibGVkIjogZmFsc2UsCiAgICAiYXV0b0FwcHJvdmUiOiBbXQogIH0K) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Pricing%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-pricing-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%2C%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS Cost Explorer MCP Server](src/cost-explorer-mcp-server) | Detailed cost analysis and reporting | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.cost-explorer-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuY29zdC1leHBsb3Jlci1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBV1NfUFJPRklMRSI6InlvdXItYXdzLXByb2ZpbGUiLCJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIiwiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Cost%20Explorer%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.cost-explorer-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon CloudWatch MCP Server](src/cloudwatch-mcp-server) | Metrics, Alarms, and Logs analysis and operational troubleshooting | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.cloudwatch-mcp-server&config=ewogICAgImF1dG9BcHByb3ZlIjogW10sCiAgICAiZGlzYWJsZWQiOiBmYWxzZSwKICAgICJjb21tYW5kIjogInV2eCBhd3NsYWJzLmNsb3Vkd2F0Y2gtbWNwLXNlcnZlckBsYXRlc3QiLAogICAgImVudiI6IHsKICAgICAgIkFXU19QUk9GSUxFIjogIltUaGUgQVdTIFByb2ZpbGUgTmFtZSB0byB1c2UgZm9yIEFXUyBhY2Nlc3NdIiwKICAgICAgIkZBU1RNQ1BfTE9HX0xFVkVMIjogIkVSUk9SIgogICAgfSwKICAgICJ0cmFuc3BvcnRUeXBlIjogInN0ZGlvIgp9) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=CloudWatch%20MCP%20Server&config=%7B%22autoApprove%22%3A%5B%5D%2C%22disabled%22%3Afalse%2C%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.cloudwatch-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22%5BThe%20AWS%20Profile%20Name%20to%20use%20for%20AWS%20access%5D%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22transportType%22%3A%22stdio%22%7D) |\n| [Amazon CloudWatch Logs MCP Server (deprecated)](src/cloudwatch-logs-mcp-server) | CloudWatch Logs analysis and monitoring | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.cloudwatch-logs-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuY2xvdWR3YXRjaC1sb2dzLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1hd3MtcHJvZmlsZSIsIkFXU19SRUdJT04iOiJ1cy1lYXN0LTEiLCJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Amazon%20CloudWatch%20Logs%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.cloudwatch-logs-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS Managed Prometheus MCP Server](src/prometheus-mcp-server) | Prometheus-compatible operations | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.prometheus-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMucHJvbWV0aGV1cy1tY3Atc2VydmVyQGxhdGVzdCAtLXVybCBodHRwczovL2Fwcy13b3Jrc3BhY2VzLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tL3dvcmtzcGFjZXMvd3MtPFdvcmtzcGFjZSBJRD4gLS1yZWdpb24gPFlvdXIgQVdTIFJlZ2lvbj4gLS1wcm9maWxlIDxZb3VyIENMSSBQcm9maWxlIFtkZWZhdWx0XSBpZiBubyBwcm9maWxlIGlzIHVzZWQ%2BIiwiZW52Ijp7IkZBU1RNQ1BfTE9HX0xFVkVMIjoiREVCVUciLCJBV1NfUFJPRklMRSI6IjxZb3VyIENMSSBQcm9maWxlIFtkZWZhdWx0XSBpZiBubyBwcm9maWxlIGlzIHVzZWQ%2BIn19) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Prometheus%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.prometheus-mcp-server%40latest%22%2C%22--url%22%2C%22https%3A%2F%2Faps-workspaces.us-east-1.amazonaws.com%2Fworkspaces%2Fws-%3CWorkspace%20ID%3E%22%2C%22--region%22%2C%22%3CYour%20AWS%20Region%3E%22%2C%22--profile%22%2C%22%3CYour%20CLI%20Profile%20%5Bdefault%5D%20if%20no%20profile%20is%20used%3E%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22DEBUG%22%2C%22AWS_PROFILE%22%3A%22%3CYour%20CLI%20Profile%20%5Bdefault%5D%20if%20no%20profile%20is%20used%3E%22%7D%7D) |\n| [AWS Billing and Cost Management MCP Server](src/billing-cost-management-mcp-server/) | Billing and cost management | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.billing-cost-management-mcp-server&config=ewogICAgImNvbW1hbmQiOiAidXZ4IGF3c2xhYnMuYmlsbGluZy1jb3N0LW1hbmFnZW1lbnQtbWNwLXNlcnZlckBsYXRlc3QiLAogICAgImVudiI6IHsKICAgICAgIkZBU1RNQ1BfTE9HX0xFVkVMIjogIkVSUk9SIiwKICAgICAgIkFXU19QUk9GSUxFIjogInlvdXItYXdzLXByb2ZpbGUiLAogICAgICAiQVdTX1JFR0lPTiI6ICJ1cy1lYXN0LTEiCiAgICB9LAogICAgImRpc2FibGVkIjogZmFsc2UsCiAgICAiYXV0b0FwcHJvdmUiOiBbXQogIH0K) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Billing%20and%20Cost%20Management%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.billing-cost-management-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%2C%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n### 🧬 Healthcare & Lifesciences\nInteract with AWS HealthAI services.\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [AWS HealthOmics MCP Server](src/aws-healthomics-mcp-server) | Generate, run, debug and optimize lifescience workflows | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-healthomics-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWhlYWx0aG9taWNzLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkFXU19SRUdJT04iOiJ1cy1lYXN0LTEiLCJBV1NfUFJPRklMRSI6InlvdXItcHJvZmlsZSIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiV0FSTklORyJ9fQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20HealthOmics%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-healthomics-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_REGION%22%3A%22us-east-1%22%2C%22AWS_PROFILE%22%3A%22your-profile%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22WARNING%22%7D%7D) |\n| [AWS HealthLake MCP Server](src/healthlake-mcp-server) | Create, manage, search, and optimize FHIR healthcare data workflows with comprehensive AWS HealthLake integration, featuring automated resource discovery, advanced search capabilities, patient record management, and seamless import/export operations. | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.healthlake-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuaGVhbHRobGFrZS1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIiwiQVdTX1BST0ZJTEUiOiJ5b3VyLXByb2ZpbGUiLCJGQVNUTUNQX0xPR19MRVZFTCI6IldBUk5JTkcifX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=HealthLake%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.healthlake-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_REGION%22%3A%22us-east-1%22%2C%22AWS_PROFILE%22%3A%22your-profile%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22WARNING%22%7D%7D) |\n\n---\n---\n\n### Browse by How You're Working\n\n#### 👨‍💻 Vibe Coding & Development\n\n*AI coding assistants like Amazon Q Developer CLI, Cline, Cursor, and Claude Code helping you build faster*\n\n##### Core Development Workflow\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [AWS API MCP Server](src/aws-api-mcp-server) | Start here for general AWS interactions! Comprehensive AWS API support with command validation, security controls, and access to all AWS services. Perfect for managing infrastructure, exploring resources, and executing AWS operations through natural language. | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-api-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWFwaS1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D)<br/>[![Install VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20API%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-api-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_REGION%22%3A%22us-east-1%22%7D%2C%22type%22%3A%22stdio%22%7D) |\n| [Core MCP Server](src/core-mcp-server) | Start here: intelligent planning and MCP server orchestration | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.core-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuY29yZS1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImF1dG9BcHByb3ZlIjpbXSwiZGlzYWJsZWQiOmZhbHNlfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Core%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.core-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22autoApprove%22%3A%5B%5D%2C%22disabled%22%3Afalse%7D) |\n| [AWS Knowledge MCP Server](src/aws-knowledge-mcp-server) | A remote, fully-managed MCP server hosted by AWS that provides access to the latest AWS docs, API references, What's New Posts, Getting Started information, Builder Center, Blog posts, Architectural references, and Well-Architected guidance. | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-knowledge-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWtub3dsZWRnZS1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBV1NfUFJPRklMRSI6InlvdXItYXdzLXByb2ZpbGUiLCJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIiwiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D)<br/>[![Install VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Knowledge%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-knowledge-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS Documentation MCP Server](src/aws-documentation-mcp-server) | Get latest AWS docs and API references | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-documentation-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWRvY3VtZW50YXRpb24tbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiIsIkFXU19ET0NVTUVOVEFUSU9OX1BBUlRJVElPTiI6ImF3cyJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Documentation%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-documentation-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%2C%22AWS_DOCUMENTATION_PARTITION%22%3A%22aws%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Git Repo Research MCP Server](src/git-repo-research-mcp-server) | Semantic search through codebases and repositories | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.git-repo-research-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuZ2l0LXJlcG8tcmVzZWFyY2gtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJ5b3VyLXByb2ZpbGUtbmFtZSIsIkFXU19SRUdJT04iOiJ1cy13ZXN0LTIiLCJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIiwiR0lUSFVCX1RPS0VOIjoieW91ci1naXRodWItdG9rZW4ifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Git%20Repo%20Research%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.git-repo-research-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-profile-name%22%2C%22AWS_REGION%22%3A%22us-west-2%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%2C%22GITHUB_TOKEN%22%3A%22your-github-token%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n##### Infrastructure as Code\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [AWS CDK MCP Server](src/cdk-mcp-server) | CDK development with security best practices and compliance | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.cdk-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuY2RrLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=CDK%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.cdk-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS Terraform MCP Server](src/terraform-mcp-server) | Terraform with integrated security scanning and best practices | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.terraform-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMudGVycmFmb3JtLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Terraform%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.terraform-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS CloudFormation MCP Server](src/cfn-mcp-server) | Direct AWS resource management through Cloud Control API | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.cfn-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuY2ZuLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1uYW1lZC1wcm9maWxlIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=CloudFormation%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.cfn-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-named-profile%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS Cloud Control API MCP Server](src/ccapi-mcp-server) | Direct AWS resource management with security scanning and best practices | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.ccapi-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuY2NhcGktbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJ5b3VyLWF3cy1wcm9maWxlIiwiQVdTX1JFR0lPTiI6InVzLWVhc3QtMSIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Cloud%20Control%20API%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.ccapi-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n##### Application Development\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [Frontend MCP Server](src/frontend-mcp-server) | React and modern web development patterns with AWS integration | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.frontend-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuZnJvbnRlbmQtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Frontend%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.frontend-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS Diagram MCP Server](src/aws-diagram-mcp-server) | Generate architecture diagrams as you design | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-diagram-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWRpYWdyYW0tbWNwLXNlcnZlciIsImVudiI6eyJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImF1dG9BcHByb3ZlIjpbXSwiZGlzYWJsZWQiOmZhbHNlfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Diagram%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-diagram-mcp-server%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22autoApprove%22%3A%5B%5D%2C%22disabled%22%3Afalse%7D) |\n| [Code Documentation Generation MCP Server](src/code-doc-gen-mcp-server) | Auto-generate docs from your codebase | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.code-doc-gen-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuY29kZS1kb2MtZ2VuLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Code%20Documentation%20Generator%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.code-doc-gen-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [OpenAPI MCP Server](src/openapi-mcp-server) | Dynamic API integration through OpenAPI specifications | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.openapi-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMub3BlbmFwaS1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBUElfTkFNRSI6InlvdXItYXBpLW5hbWUiLCJBUElfQkFTRV9VUkwiOiJodHRwczovL2FwaS5leGFtcGxlLmNvbSIsIkFQSV9TUEVDX1VSTCI6Imh0dHBzOi8vYXBpLmV4YW1wbGUuY29tL29wZW5hcGkuanNvbiIsIkxPR19MRVZFTCI6IkVSUk9SIiwiRU5BQkxFX1BST01FVEhFVVMiOiJmYWxzZSIsIkVOQUJMRV9PUEVSQVRJT05fUFJPTVBUUyI6InRydWUiLCJVVklDT1JOX1RJTUVPVVRfR1JBQ0VGVUxfU0hVVERPV04iOiI1LjAiLCJVVklDT1JOX0dSQUNFRlVMX1NIVVRET1dOIjoidHJ1ZSJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=OpenAPI%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.openapi-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22API_NAME%22%3A%22your-api-name%22%2C%22API_BASE_URL%22%3A%22https%3A%2F%2Fapi.example.com%22%2C%22API_SPEC_URL%22%3A%22https%3A%2F%2Fapi.example.com%2Fopenapi.json%22%2C%22LOG_LEVEL%22%3A%22ERROR%22%2C%22ENABLE_PROMETHEUS%22%3A%22false%22%2C%22ENABLE_OPERATION_PROMPTS%22%3A%22true%22%2C%22UVICORN_TIMEOUT_GRACEFUL_SHUTDOWN%22%3A%225.0%22%2C%22UVICORN_GRACEFUL_SHUTDOWN%22%3A%22true%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n##### Container & Serverless Development\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [Amazon EKS MCP Server](src/eks-mcp-server) | Kubernetes cluster management and app deployment | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.eks-mcp-server&config=eyJhdXRvQXBwcm92ZSI6W10sImRpc2FibGVkIjpmYWxzZSwiY29tbWFuZCI6InV2eCBhd3NsYWJzLmVrcy1tY3Atc2VydmVyQGxhdGVzdCAtLWFsbG93LXdyaXRlIC0tYWxsb3ctc2Vuc2l0aXZlLWRhdGEtYWNjZXNzIiwiZW52Ijp7IkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwidHJhbnNwb3J0VHlwZSI6InN0ZGlvIn0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=EKS%20MCP%20Server&config=%7B%22autoApprove%22%3A%5B%5D%2C%22disabled%22%3Afalse%2C%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.eks-mcp-server%40latest%22%2C%22--allow-write%22%2C%22--allow-sensitive-data-access%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22transportType%22%3A%22stdio%22%7D) |\n| [Amazon ECS MCP Server](src/ecs-mcp-server) | Containerize and deploy applications to ECS | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.ecs-mcp-server&config=eyJjb21tYW5kIjoidXZ4IC0tZnJvbSBhd3NsYWJzLWVjcy1tY3Atc2VydmVyIGVjcy1tY3Atc2VydmVyIiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1hd3MtcHJvZmlsZSIsIkFXU19SRUdJT04iOiJ5b3VyLWF3cy1yZWdpb24iLCJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIiwiRkFTVE1DUF9MT0dfRklMRSI6Ii9wYXRoL3RvL2Vjcy1tY3Atc2VydmVyLmxvZyIsIkFMTE9XX1dSSVRFIjoiZmFsc2UiLCJBTExPV19TRU5TSVRJVkVfREFUQSI6ImZhbHNlIn19) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=ECS%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22--from%22%2C%22awslabs-ecs-mcp-server%22%2C%22ecs-mcp-server%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22your-aws-region%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%2C%22FASTMCP_LOG_FILE%22%3A%22%2Fpath%2Fto%2Fecs-mcp-server.log%22%2C%22ALLOW_WRITE%22%3A%22false%22%2C%22ALLOW_SENSITIVE_DATA%22%3A%22false%22%7D%7D) |\n| [Finch MCP Server](src/finch-mcp-server) | Local container building with ECR push | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.finch-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuZmluY2gtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJkZWZhdWx0IiwiQVdTX1JFR0lPTiI6InVzLXdlc3QtMiIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiSU5GTyJ9LCJ0cmFuc3BvcnRUeXBlIjoic3RkaW8iLCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Finch%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.finch-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22default%22%2C%22AWS_REGION%22%3A%22us-west-2%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22INFO%22%7D%2C%22transportType%22%3A%22stdio%22%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS Serverless MCP Server](src/aws-serverless-mcp-server) | Full serverless app lifecycle with SAM CLI | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-serverless-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLXNlcnZlcmxlc3MtbWNwLXNlcnZlckBsYXRlc3QgLS1hbGxvdy13cml0ZSAtLWFsbG93LXNlbnNpdGl2ZS1kYXRhLWFjY2VzcyIsImVudiI6eyJBV1NfUFJPRklMRSI6InlvdXItYXdzLXByb2ZpbGUiLCJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Serverless%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-serverless-mcp-server%40latest%22%2C%22--allow-write%22%2C%22--allow-sensitive-data-access%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n\n##### Testing & Data\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [Synthetic Data MCP Server](src/syntheticdata-mcp-server) | Generate realistic test data for development and ML | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.syntheticdata-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuc3ludGhldGljZGF0YS1tY3Atc2VydmVyIiwiZW52Ijp7IkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IiLCJBV1NfUFJPRklMRSI6InlvdXItYXdzLXByb2ZpbGUiLCJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIn0sImF1dG9BcHByb3ZlIjpbXSwiZGlzYWJsZWQiOmZhbHNlfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Synthetic%20Data%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.syntheticdata-mcp-server%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%2C%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%7D%2C%22autoApprove%22%3A%5B%5D%2C%22disabled%22%3Afalse%7D) |\n\n##### Lifesciences Workflow Development\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [AWS HealthOmics MCP Server](src/aws-healthomics-mcp-server) | Generate, run, debug and optimize lifescience workflows | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-healthomics-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWhlYWx0aG9taWNzLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkFXU19SRUdJT04iOiJ1cy1lYXN0LTEiLCJBV1NfUFJPRklMRSI6InlvdXItcHJvZmlsZSIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiV0FSTklORyJ9fQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20HealthOmics%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-healthomics-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_REGION%22%3A%22us-east-1%22%2C%22AWS_PROFILE%22%3A%22your-profile%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22WARNING%22%7D%7D) |\n\n##### Healthcare Data Management\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [AWS HealthLake MCP Server](src/healthlake-mcp-server) | Create, manage, search, and optimize FHIR healthcare data workflows with comprehensive AWS HealthLake integration, featuring automated resource discovery, advanced search capabilities, patient record management, and seamless import/export operations. | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.healthlake-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuaGVhbHRobGFrZS1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIiwiQVdTX1BST0ZJTEUiOiJ5b3VyLXByb2ZpbGUiLCJGQVNUTUNQX0xPR19MRVZFTCI6IldBUk5JTkcifX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=HealthLake%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.healthlake-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_REGION%22%3A%22us-east-1%22%2C%22AWS_PROFILE%22%3A%22your-profile%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22WARNING%22%7D%7D) |\n\n\n#### 💬 Conversational Assistants\n\n*Customer-facing chatbots, business agents, and interactive Q&A systems*\n\n##### Knowledge & Search\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [Amazon Bedrock Knowledge Bases Retrieval MCP Server](src/bedrock-kb-retrieval-mcp-server) | Query enterprise knowledge bases with citation support | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.bedrock-kb-retrieval-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYmVkcm9jay1rYi1yZXRyaWV2YWwtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJ5b3VyLXByb2ZpbGUtbmFtZSIsIkFXU19SRUdJT04iOiJ1cy1lYXN0LTEiLCJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIiwiS0JfSU5DTFVTSU9OX1RBR19LRVkiOiJvcHRpb25hbC10YWcta2V5LXRvLWZpbHRlci1rYnMiLCJCRURST0NLX0tCX1JFUkFOS0lOR19FTkFCTEVEIjoiZmFsc2UifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Bedrock%20KB%20Retrieval%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.bedrock-kb-retrieval-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-profile-name%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%2C%22KB_INCLUSION_TAG_KEY%22%3A%22optional-tag-key-to-filter-kbs%22%2C%22BEDROCK_KB_RERANKING_ENABLED%22%3A%22false%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Kendra Index MCP Server](src/amazon-kendra-index-mcp-server) | Enterprise search and RAG enhancement | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.amazon-kendra-index-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYW1hem9uLWtlbmRyYS1pbmRleC1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIiwiS0VORF9JTkRFWF9JRCI6InlvdXIta2VuZHJhLWluZGV4LWlkIiwiS0VORF9ST0xFX0FSTiI6InlvdXIta2VuZHJhLXJvbGUtYXJuIiwiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Amazon%20Kendra%20Index%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.amazon-kendra-index-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_REGION%22%3A%22us-east-1%22%2C%22KEND_INDEX_ID%22%3A%22your-kendra-index-id%22%2C%22KEND_ROLE_ARN%22%3A%22your-kendra-role-arn%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Q Business MCP Server](src/amazon-qbusiness-anonymous-mcp-server) | AI assistant for your ingested content with anonymous access | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.amazon-qbusiness-anonymous-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYW1hem9uLXFidXNpbmVzcy1hbm9ueW1vdXMtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiUUJVU0lORVNTX0FQUF9JRCI6InlvdXItcWJ1c2luZXNzLWFwcC1pZCIsIlFCVVNJTkVTU19VU0VSX0lEIjoieW91ci11c2VyLWlkIiwiQVdTX1BST0ZJTEUiOiJ5b3VyLWF3cy1wcm9maWxlIiwiQVdTX1JFR0lPTiI6InVzLWVhc3QtMSIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Amazon%20Q%20Business%20Anonymous%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.amazon-qbusiness-anonymous-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22QBUSINESS_APP_ID%22%3A%22your-qbusiness-app-id%22%2C%22QBUSINESS_USER_ID%22%3A%22your-user-id%22%2C%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Q Index MCP Server](src/amazon-qindex-mcp-server) | Data accessors to search through enterprise's Q index | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.amazon-qindex-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYW1hem9uLXFpbmRleC1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIiwiUUlOREVYX0lEIjoieW91ci1xaW5kZXgtaWQiLCJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Amazon%20Q%20Index%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.amazon-qindex-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_REGION%22%3A%22us-east-1%22%2C%22QINDEX_ID%22%3A%22your-qindex-id%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS Documentation MCP Server](src/aws-documentation-mcp-server) | Get latest AWS docs and API references | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-documentation-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWRvY3VtZW50YXRpb24tbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiIsIkFXU19ET0NVTUVOVEFUSU9OX1BBUlRJVElPTiI6ImF3cyJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Documentation%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-documentation-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%2C%22AWS_DOCUMENTATION_PARTITION%22%3A%22aws%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n##### Content Processing & Generation\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [Amazon Nova Canvas MCP Server](src/nova-canvas-mcp-server) | Generate images from text descriptions and color palettes | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.nova-canvas-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMubm92YS1jYW52YXMtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJ5b3VyLWF3cy1wcm9maWxlIiwiQVdTX1JFR0lPTiI6InVzLWVhc3QtMSIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Nova%20Canvas%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.nova-canvas-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Rekognition MCP Server (deprecated)](src/amazon-rekognition-mcp-server) | Analyze images using computer vision capabilities | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.amazon-rekognition-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYW1hem9uLXJla29nbml0aW9uLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1hd3MtcHJvZmlsZSIsIkFXU19SRUdJT04iOiJ1cy1lYXN0LTEiLCJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Amazon%20Rekognition%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.amazon-rekognition-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Bedrock Data Automation MCP Server](src/aws-bedrock-data-automation-mcp-server) | Analyze uploaded documents, images, and media | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=bedrock-data-automation-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWJlZHJvY2stZGF0YS1hdXRvbWF0aW9uLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1hd3MtcHJvZmlsZSIsIkFXU19SRUdJT04iOiJ1cy1lYXN0LTEiLCJBV1NfQlVDS0VUX05BTUUiOiJ5b3VyLXMzLWJ1Y2tldC1uYW1lIiwiQkFTRV9ESVIiOiIvcGF0aC90by9iYXNlL2RpcmVjdG9yeSIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Bedrock%20Data%20Automation%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-bedrock-data-automation-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22AWS_BUCKET_NAME%22%3A%22your-s3-bucket-name%22%2C%22BASE_DIR%22%3A%22%2Fpath%2Fto%2Fbase%2Fdirectory%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n##### Business Services\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [Amazon Location Service MCP Server](src/aws-location-mcp-server) | Location search, geocoding, and business hours | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-location-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWxvY2F0aW9uLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1hd3MtcHJvZmlsZSIsIkFXU19SRUdJT04iOiJ1cy1lYXN0LTEiLCJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Location%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-location-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS Pricing MCP Server](src/aws-pricing-mcp-server) | AWS service pricing and cost estimates | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-pricing-mcp-server&config=ewogICAgImNvbW1hbmQiOiAidXZ4IGF3c2xhYnMuYXdzLXByaWNpbmctbWNwLXNlcnZlckBsYXRlc3QiLAogICAgImVudiI6IHsKICAgICAgIkZBU1RNQ1BfTE9HX0xFVkVMIjogIkVSUk9SIiwKICAgICAgIkFXU19QUk9GSUxFIjogInlvdXItYXdzLXByb2ZpbGUiLAogICAgICAiQVdTX1JFR0lPTiI6ICJ1cy1lYXN0LTEiCiAgICB9LAogICAgImRpc2FibGVkIjogZmFsc2UsCiAgICAiYXV0b0FwcHJvdmUiOiBbXQogIH0K) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Pricing%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-pricing-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%2C%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS Cost Explorer MCP Server](src/cost-explorer-mcp-server) | Detailed cost analysis and spend reports | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.cost-explorer-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuY29zdC1leHBsb3Jlci1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBV1NfUFJPRklMRSI6InlvdXItYXdzLXByb2ZpbGUiLCJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIiwiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Cost%20Explorer%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.cost-explorer-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n#### 🤖 Autonomous Background Agents\n\n*Headless automation, ETL pipelines, and operational systems*\n\n##### Data Operations & ETL\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [AWS Data Processing MCP Server](src/aws-dataprocessing-mcp-server) | Comprehensive data processing tools and real-time pipeline visibility across AWS Glue and Amazon EMR-EC2 | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-dataprocessing-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXdzLWRhdGFwcm9jZXNzaW5nLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1hd3MtcHJvZmlsZSIsIkFXU19SRUdJT04iOiJ1cy1lYXN0LTEiLCJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Data%20Processing%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-dataprocessing-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon DynamoDB MCP Server](src/dynamodb-mcp-server) | Complete DynamoDB operations and table management | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.dynamodb-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuZHluYW1vZGItbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiRERCLU1DUC1SRUFET05MWSI6InRydWUiLCJBV1NfUFJPRklMRSI6ImRlZmF1bHQiLCJBV1NfUkVHSU9OIjoidXMtd2VzdC0yIiwiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=DynamoDB%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.dynamodb-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22DDB-MCP-READONLY%22%3A%22true%22%2C%22AWS_PROFILE%22%3A%22default%22%2C%22AWS_REGION%22%3A%22us-west-2%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Aurora PostgreSQL MCP Server](src/postgres-mcp-server) | PostgreSQL database operations via RDS Data API | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.postgres-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMucG9zdGdyZXMtbWNwLXNlcnZlckBsYXRlc3QgLS1jb25uZWN0aW9uLXN0cmluZyBwb3N0Z3Jlc3FsOi8vW3VzZXJuYW1lXTpbcGFzc3dvcmRdQFtob3N0XTpbcG9ydF0vW2RhdGFiYXNlXSIsImVudiI6eyJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdLCJ0cmFuc3BvcnRUeXBlIjoic3RkaW8iLCJhdXRvU3RhcnQiOnRydWV9) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=PostgreSQL%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.postgres-mcp-server%40latest%22%2C%22--connection-string%22%2C%22postgresql%3A%2F%2F%5Busername%5D%3A%5Bpassword%5D%40%5Bhost%5D%3A%5Bport%5D%2F%5Bdatabase%5D%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%2C%22transportType%22%3A%22stdio%22%2C%22autoStart%22%3Atrue%7D) |\n| [Amazon Aurora MySQL MCP Server](src/mysql-mcp-server) | MySQL database operations via RDS Data API | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.mysql-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMubXlzcWwtbWNwLXNlcnZlckBsYXRlc3QgLS1yZXNvdXJjZV9hcm4gW3lvdXIgZGF0YV0gLS1zZWNyZXRfYXJuIFt5b3VyIGRhdGFdIC0tZGF0YWJhc2UgW3lvdXIgZGF0YV0gLS1yZWdpb24gW3lvdXIgZGF0YV0gLS1yZWFkb25seSBUcnVlIiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1hd3MtcHJvZmlsZSIsIkFXU19SRUdJT04iOiJ1cy1lYXN0LTEiLCJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=MySQL%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.mysql-mcp-server%40latest%22%2C%22--resource_arn%22%2C%22%5Byour%20data%5D%22%2C%22--secret_arn%22%2C%22%5Byour%20data%5D%22%2C%22--database%22%2C%22%5Byour%20data%5D%22%2C%22--region%22%2C%22%5Byour%20data%5D%22%2C%22--readonly%22%2C%22True%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Aurora DSQL MCP Server](src/aurora-dsql-mcp-server) | Distributed SQL with PostgreSQL compatibility | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aurora-dsql-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYXVyb3JhLWRzcWwtbWNwLXNlcnZlckBsYXRlc3QgLS1jbHVzdGVyX2VuZHBvaW50IFt5b3VyIGRzcWwgY2x1c3RlciBlbmRwb2ludF0gLS1yZWdpb24gW3lvdXIgZHNxbCBjbHVzdGVyIHJlZ2lvbiwgZS5nLiB1cy1lYXN0LTFdIC0tZGF0YWJhc2VfdXNlciBbeW91ciBkc3FsIHVzZXJuYW1lXSAtLXByb2ZpbGUgZGVmYXVsdCIsImVudiI6eyJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Aurora%20DSQL%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aurora-dsql-mcp-server%40latest%22%2C%22--cluster_endpoint%22%2C%22%5Byour%20dsql%20cluster%20endpoint%5D%22%2C%22--region%22%2C%22%5Byour%20dsql%20cluster%20region%2C%20e.g.%20us-east-1%5D%22%2C%22--database_user%22%2C%22%5Byour%20dsql%20username%5D%22%2C%22--profile%22%2C%22default%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon DocumentDB MCP Server](src/documentdb-mcp-server) | MongoDB-compatible document database operations | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.documentdb-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuZG9jdW1lbnRkYi1tY3Atc2VydmVAbGF0ZXN0IiwiZW52Ijp7IkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IiLCJBV1NfUFJPRklMRSI6InlvdXItYXdzLXByb2ZpbGUifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=DocumentDB%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.documentdb-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%2C%22AWS_PROFILE%22%3A%22your-aws-profile%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Neptune MCP Server](src/amazon-neptune-mcp-server) | Graph database queries with openCypher and Gremlin | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.amazon-neptune-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYW1hem9uLW5lcHR1bmUtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiTkVQVFVORV9FTkRQT0lOVCI6Imh0dHBzOi8veW91ci1uZXB0dW5lLWNsdXN0ZXItaWQucmVnaW9uLm5lcHR1bmUuYW1hem9uYXdzLmNvbTo4MTgyIiwiQVdTX1BST0ZJTEUiOiJ5b3VyLWF3cy1wcm9maWxlIiwiQVdTX1JFR0lPTiI6InVzLWVhc3QtMSIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Amazon%20Neptune%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.amazon-neptune-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22NEPTUNE_ENDPOINT%22%3A%22https%3A%2F%2Fyour-neptune-cluster-id.region.neptune.amazonaws.com%3A8182%22%2C%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Keyspaces MCP Server](src/amazon-keyspaces-mcp-server) | Apache Cassandra-compatible operations | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.amazon-keyspaces-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYW1hem9uLWtleXNwYWNlcy1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBV1NfUFJPRklMRSI6InlvdXItYXdzLXByb2ZpbGUiLCJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIiwiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Amazon%20Keyspaces%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.amazon-keyspaces-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon Timestream for InfluxDB MCP Server](src/timestream-for-influxdb-mcp-server) | Time-series database operations and InfluxDB compatibility | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.timestream-for-influxdb-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMudGltZXN0cmVhbS1mb3ItaW5mbHV4ZGItbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJ5b3VyLWF3cy1wcm9maWxlIiwiQVdTX1JFR0lPTiI6InVzLWVhc3QtMSIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwiZGlzYWJsZWQiOmZhbHNlLCJhdXRvQXBwcm92ZSI6W119) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Timestream%20for%20InfluxDB%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.timestream-for-influxdb-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon MSK MCP Server](src/aws-msk-mcp-server) | Managed Kafka cluster operations and streaming | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-msk-mcp-server&config=JTdCJTIyY29tbWFuZCUyMiUzQSUyMnV2eCUyMGF3c2xhYnMuYXdzLW1zay1tY3Atc2VydmVyJTQwbGF0ZXN0JTIwLS1hbGxvdy13cml0ZXMlMjIlMkMlMjJlbnYlMjIlM0ElN0IlMjJGQVNUTUNQX0xPR19MRVZFTCUyMiUzQSUyMkVSUk9SJTIyJTdEJTJDJTIyZGlzYWJsZWQlMjIlM0FmYWxzZSUyQyUyMmF1dG9BcHByb3ZlJTIyJTNBJTVCJTVEJTdE) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20MSK%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-msk-mcp-server%40latest%22%2C%22--allow-writes%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n##### Caching & Performance\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [Amazon ElastiCache / MemoryDB for Valkey MCP Server](src/valkey-mcp-server) | Advanced data structures and caching with Valkey | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.valkey-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMudmFsa2V5LW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IlZBTEtFWV9IT1NUIjoiMTI3LjAuMC4xIiwiVkFMS0VZX1BPUlQiOiI2Mzc5IiwiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiJ9LCJhdXRvQXBwcm92ZSI6W10sImRpc2FibGVkIjpmYWxzZX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Valkey%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.valkey-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22VALKEY_HOST%22%3A%22127.0.0.1%22%2C%22VALKEY_PORT%22%3A%226379%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22autoApprove%22%3A%5B%5D%2C%22disabled%22%3Afalse%7D) |\n| [Amazon ElastiCache for Memcached MCP Server ](src/memcached-mcp-server) | High-speed caching with Memcached protocol | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.memcached-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMubWVtY2FjaGVkLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IiLCJNRU1DQUNIRURfSE9TVCI6InlvdXItbWVtY2FjaGVkLWhvc3QiLCJNRU1DQUNIRURfUE9SVCI6IjExMjExIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Memcached%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.memcached-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%2C%22MEMCACHED_HOST%22%3A%22your-memcached-host%22%2C%22MEMCACHED_PORT%22%3A%2211211%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n##### Workflow & Integration\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [AWS Lambda Tool MCP Server](src/lambda-tool-mcp-server) | Execute Lambda functions as AI tools for private resource access | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.lambda-tool-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMubGFtYmRhLXRvb2wtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJ5b3VyLWF3cy1wcm9maWxlIiwiQVdTX1JFR0lPTiI6InVzLWVhc3QtMSIsIkZVTkNUSU9OX1BSRUZJWCI6InlvdXItZnVuY3Rpb24tcHJlZml4IiwiRlVOQ1RJT05fTElTVCI6InlvdXItZmlyc3QtZnVuY3Rpb24sIHlvdXItc2Vjb25kLWZ1bmN0aW9uIiwiRlVOQ1RJT05fVEFHX0tFWSI6InlvdXItdGFnLWtleSIsIkZVTkNUSU9OX1RBR19WQUxVRSI6InlvdXItdGFnLXZhbHVlIiwiRlVOQ1RJT05fSU5QVVRfU0NIRU1BX0FSTl9UQUdfS0VZIjoieW91ci1mdW5jdGlvbi10YWctZm9yLWlucHV0LXNjaGVtYSJ9fQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Lambda%20Tool%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.lambda-tool-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FUNCTION_PREFIX%22%3A%22your-function-prefix%22%2C%22FUNCTION_LIST%22%3A%22your-first-function%2C%20your-second-function%22%2C%22FUNCTION_TAG_KEY%22%3A%22your-tag-key%22%2C%22FUNCTION_TAG_VALUE%22%3A%22your-tag-value%22%2C%22FUNCTION_INPUT_SCHEMA_ARN_TAG_KEY%22%3A%22your-function-tag-for-input-schema%22%7D%7D) |\n| [AWS Step Functions Tool MCP Server](src/stepfunctions-tool-mcp-server) | Execute complex workflows and business processes | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.stepfunctions-tool-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuc3RlcGZ1bmN0aW9ucy10b29sLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1hd3MtcHJvZmlsZSIsIkFXU19SRUdJT04iOiJ1cy1lYXN0LTEiLCJTVEFURV9NQUNISU5FX1BSRUZJWCI6InlvdXItc3RhdGUtbWFjaGluZS1wcmVmaXgiLCJTVEFURV9NQUNISU5FX0xJU1QiOiJ5b3VyLWZpcnN0LXN0YXRlLW1hY2hpbmUsIHlvdXItc2Vjb25kLXN0YXRlLW1hY2hpbmUiLCJTVEFURV9NQUNISU5FX1RBR19LRVkiOiJ5b3VyLXRhZy1rZXkiLCJTVEFURV9NQUNISU5FX1RBR19WQUxVRSI6InlvdXItdGFnLXZhbHVlIiwiU1RBVEVfTUFDSElORV9JTlBVVF9TQ0hFTUFfQVJOX1RBR19LRVkiOiJ5b3VyLXN0YXRlLW1hY2hpbmUtdGFnLWZvci1pbnB1dC1zY2hlbWEifX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Step%20Functions%20Tool%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.stepfunctions-tool-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22STATE_MACHINE_PREFIX%22%3A%22your-state-machine-prefix%22%2C%22STATE_MACHINE_LIST%22%3A%22your-first-state-machine%2C%20your-second-state-machine%22%2C%22STATE_MACHINE_TAG_KEY%22%3A%22your-tag-key%22%2C%22STATE_MACHINE_TAG_VALUE%22%3A%22your-tag-value%22%2C%22STATE_MACHINE_INPUT_SCHEMA_ARN_TAG_KEY%22%3A%22your-state-machine-tag-for-input-schema%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon SNS/SQS MCP Server](src/amazon-sns-sqs-mcp-server) | Event-driven messaging and queue management | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.amazon-sns-sqs-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYW1hem9uLXNucy1zcXMtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJ5b3VyLWF3cy1wcm9maWxlIiwiQVdTX1JFR0lPTiI6InVzLWVhc3QtMSJ9fQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Amazon%20SNS%2FSQS%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.amazon-sns-sqs-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%7D%7D) |\n| [Amazon MQ MCP Server](src/amazon-mq-mcp-server) | Message broker management for RabbitMQ and ActiveMQ | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.amazon-mq-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuYW1hem9uLW1xLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1hd3MtcHJvZmlsZSIsIkFXU19SRUdJT04iOiJ1cy1lYXN0LTEiLCJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Amazon%20MQ%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.amazon-mq-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS MSK MCP Server](src/aws-msk-mcp-server) | Managed Kafka cluster operations and streaming | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.aws-msk-mcp-server&config=JTdCJTIyY29tbWFuZCUyMiUzQSUyMnV2eCUyMGF3c2xhYnMuYXdzLW1zay1tY3Atc2VydmVyJTQwbGF0ZXN0JTIwLS1hbGxvdy13cml0ZXMlMjIlMkMlMjJlbnYlMjIlM0ElN0IlMjJGQVNUTUNQX0xPR19MRVZFTCUyMiUzQSUyMkVSUk9SJTIyJTdEJTJDJTIyZGlzYWJsZWQlMjIlM0FmYWxzZSUyQyUyMmF1dG9BcHByb3ZlJTIyJTNBJTVCJTVEJTdE) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20MSK%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.aws-msk-mcp-server%40latest%22%2C%22--allow-writes%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n\n##### Operations & Monitoring\n\n| Server Name | Description | Install |\n|-------------|-------------|---------|\n| [Amazon CloudWatch MCP Server](src/cloudwatch-mcp-server) | Metrics, Alarms, and Logs analysis and operational troubleshooting | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.cloudwatch-mcp-server&config=ewogICAgImF1dG9BcHByb3ZlIjogW10sCiAgICAiZGlzYWJsZWQiOiBmYWxzZSwKICAgICJjb21tYW5kIjogInV2eCBhd3NsYWJzLmNsb3Vkd2F0Y2gtbWNwLXNlcnZlckBsYXRlc3QiLAogICAgImVudiI6IHsKICAgICAgIkFXU19QUk9GSUxFIjogIltUaGUgQVdTIFByb2ZpbGUgTmFtZSB0byB1c2UgZm9yIEFXUyBhY2Nlc3NdIiwKICAgICAgIkZBU1RNQ1BfTE9HX0xFVkVMIjogIkVSUk9SIgogICAgfSwKICAgICJ0cmFuc3BvcnRUeXBlIjogInN0ZGlvIgp9) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=CloudWatch%20MCP%20Server&config=%7B%22autoApprove%22%3A%5B%5D%2C%22disabled%22%3Afalse%2C%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.cloudwatch-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22%5BThe%20AWS%20Profile%20Name%20to%20use%20for%20AWS%20access%5D%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22transportType%22%3A%22stdio%22%7D) |\n| [Amazon CloudWatch Logs MCP Server (deprecated)](src/cloudwatch-logs-mcp-server) | CloudWatch Logs analysis and monitoring | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.cloudwatch-logs-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuY2xvdWR3YXRjaC1sb2dzLW1jcC1zZXJ2ZXJAbGF0ZXN0IiwiZW52Ijp7IkFXU19QUk9GSUxFIjoieW91ci1hd3MtcHJvZmlsZSIsIkFXU19SRUdJT04iOiJ1cy1lYXN0LTEiLCJGQVNUTUNQX0xPR19MRVZFTCI6IkVSUk9SIn0sImRpc2FibGVkIjpmYWxzZSwiYXV0b0FwcHJvdmUiOltdfQ%3D%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Amazon%20CloudWatch%20Logs%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.cloudwatch-logs-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [Amazon CloudWatch Application Signals MCP Server](src/cloudwatch-appsignals-mcp-server) | Application monitoring and performance insights | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.cloudwatch-appsignals-mcp-server&config=eyJhdXRvQXBwcm92ZSI6W10sImRpc2FibGVkIjpmYWxzZSwidGltZW91dCI6NjAsImNvbW1hbmQiOiJ1dnggYXdzbGFicy5jbG91ZHdhdGNoLWFwcHNpZ25hbHMtbWNwLXNlcnZlckBsYXRlc3QiLCJlbnYiOnsiQVdTX1BST0ZJTEUiOiJbVGhlIEFXUyBQcm9maWxlIE5hbWUgdG8gdXNlIGZvciBBV1MgYWNjZXNzXSIsIkFXU19SRUdJT04iOiJbVGhlIEFXUyByZWdpb24gdG8gcnVuIGluXSIsIkZBU1RNQ1BfTE9HX0xFVkVMIjoiRVJST1IifSwidHJhbnNwb3J0VHlwZSI6InN0ZGlvIn0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=CloudWatch%20Application%20Signals%20MCP%20Server&config=%7B%22autoApprove%22%3A%5B%5D%2C%22disabled%22%3Afalse%2C%22timeout%22%3A60%2C%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.cloudwatch-appsignals-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22%5BThe%20AWS%20Profile%20Name%20to%20use%20for%20AWS%20access%5D%22%2C%22AWS_REGION%22%3A%22%5BThe%20AWS%20region%20to%20run%20in%5D%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22transportType%22%3A%22stdio%22%7D) |\n| [AWS Cost Explorer MCP Server](src/cost-explorer-mcp-server) | Detailed cost analysis and reporting | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.cost-explorer-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMuY29zdC1leHBsb3Jlci1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBV1NfUFJPRklMRSI6InlvdXItYXdzLXByb2ZpbGUiLCJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIiwiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0%3D) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Cost%20Explorer%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.cost-explorer-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS Managed Prometheus MCP Server](src/prometheus-mcp-server) | Prometheus-compatible operations and monitoring | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.prometheus-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMucHJvbWV0aGV1cy1tY3Atc2VydmVyQGxhdGVzdCAtLXVybCBodHRwczovL2Fwcy13b3Jrc3BhY2VzLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tL3dvcmtzcGFjZXMvd3MtPFdvcmtzcGFjZSBJRD4gLS1yZWdpb24gPFlvdXIgQVdTIFJlZ2lvbj4gLS1wcm9maWxlIDxZb3VyIENMSSBQcm9maWxlIFtkZWZhdWx0XSBpZiBubyBwcm9maWxlIGlzIHVzZWQ%2BIiwiZW52Ijp7IkZBU1RNQ1BfTE9HX0xFVkVMIjoiREVCVUciLCJBV1NfUFJPRklMRSI6IjxZb3VyIENMSSBQcm9maWxlIFtkZWZhdWx0XSBpZiBubyBwcm9maWxlIGlzIHVzZWQ%2BIn19) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=Prometheus%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.prometheus-mcp-server%40latest%22%2C%22--url%22%2C%22https%3A%2F%2Faps-workspaces.us-east-1.amazonaws.com%2Fworkspaces%2Fws-%3CWorkspace%20ID%3E%22%2C%22--region%22%2C%22%3CYour%20AWS%20Region%3E%22%2C%22--profile%22%2C%22%3CYour%20CLI%20Profile%20%5Bdefault%5D%20if%20no%20profile%20is%20used%3E%22%5D%2C%22env%22%3A%7B%22FASTMCP_LOG_LEVEL%22%3A%22DEBUG%22%2C%22AWS_PROFILE%22%3A%22%3CYour%20CLI%20Profile%20%5Bdefault%5D%20if%20no%20profile%20is%20used%3E%22%7D%7D) |\n| [AWS Well-Architected Security Assessment Tool MCP Server](src/well-architected-security-mcp-server) | Assess AWS environments against the Well-Architected Framework Security Pillar | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://cursor.com/en/install-mcp?name=awslabs.well-architected-security-mcp-server&config=eyJjb21tYW5kIjoidXZ4IGF3c2xhYnMud2VsbC1hcmNoaXRlY3RlZC1zZWN1cml0eS1tY3Atc2VydmVyQGxhdGVzdCIsImVudiI6eyJBV1NfUFJPRklMRSI6InlvdXItYXdzLXByb2ZpbGUiLCJBV1NfUkVHSU9OIjoidXMtZWFzdC0xIiwiRkFTVE1DUF9MT0dfTEVWRUwiOiJFUlJPUiJ9LCJkaXNhYmxlZCI6ZmFsc2UsImF1dG9BcHByb3ZlIjpbXX0K) <br/>[![Install on VS Code](https://img.shields.io/badge/Install-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=AWS%20Well-Architected%20Security%20Assessment%20Tool%20MCP%20Server&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.well-architected-security-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22your-aws-profile%22%2C%22AWS_REGION%22%3A%22us-east-1%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22disabled%22%3Afalse%2C%22autoApprove%22%3A%5B%5D%7D) |\n| [AWS CloudTrail MCP Server](src/cloudtrail-mcp-server/) | CloudTrail events querying and analysis | [![Install](https://img.shields.io/badge/Install-Cursor-blue?style=flat-square&logo=cursor)](https://www.cursor.com/install-mcp?name=awslabs.cloudtrail-mcp-server&config=ewogICAgICAgICJjb21tYW5kIjogImRvY2tlciIsCiAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAicnVuIiwKICAgICAgICAgICItLXJtIiwKICAgICAgICAgICItLWludGVyYWN0aXZlIiwKICAgICAgICAgICItZSBBV1NfUFJPRklMRT1bVGhlIEFXUyBQcm9maWxlIE5hbWVdIiwKICAgICAgICAgICJhd3NsYWJzL2Nsb3VkdHJhaWwtbWNwLXNlcnZlcjpsYXRlc3QiCiAgICAgICAgXSwKICAgICAgICAiZW52Ijoge30sCiAgICAgICAgImRpc2FibGVkIjogZmFsc2UsCiAgICAgICAgImF1dG9BcHByb3ZlIjogW10KfQ==) <br/>[![Install on VS Code](https://img.shields.io/badge/Install_on-VS_Code-FF9900?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=CloudTrail%20MCP%20Server&config=%7B%22autoApprove%22%3A%5B%5D%2C%22disabled%22%3Afalse%2C%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22awslabs.cloudtrail-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22AWS_PROFILE%22%3A%22%5BThe%20AWS%20Profile%20Name%20to%20use%20for%20AWS%20access%5D%22%2C%22FASTMCP_LOG_LEVEL%22%3A%22ERROR%22%7D%2C%22transportType%22%3A%22stdio%22%7D) |\n\n## MCP AWS Lambda Handler Module\n\nA Python library for creating serverless HTTP handlers for the Model Context Protocol (MCP) using AWS Lambda. This module provides a flexible framework for building MCP HTTP endpoints with pluggable session management, including built-in DynamoDB support.\n\n**Features:**\n\n- Easy serverless MCP HTTP handler creation using AWS Lambda\n- Pluggable session management system\n- Built-in DynamoDB session backend support\n- Customizable authentication and authorization\n- Example implementations and tests\n\nSee [`src/mcp-lambda-handler/README.md`](src/mcp-lambda-handler/README.md) for full usage, installation, and development instructions.\n\n## When to use Local vs Remote MCP Servers?\n\nAWS MCP servers can be run either locally on your development machine or remotely on the cloud. Here's when to use each approach:\n\n### Local MCP Servers\n- **Development & Testing**: Perfect for local development, testing, and debugging\n- **Offline Work**: Continue working when internet connectivity is limited\n- **Data Privacy**: Keep sensitive data and credentials on your local machine\n- **Low Latency**: Minimal network overhead for faster response times\n- **Resource Control**: Direct control over server resources and configuration\n\n### Remote MCP Servers\n- **Team Collaboration**: Share consistent server configurations across your team\n- **Resource Intensive Tasks**: Offload heavy processing to dedicated cloud resources\n- **Always Available**: Access your MCP servers from anywhere, any device\n- **Automatic Updates**: Get the latest features and security patches automatically\n- **Scalability**: Easily handle varying workloads without local resource constraints\n\n> **Note**: Some MCP servers, like AWS Knowledge MCP, are provided as fully managed services by AWS. These AWS-managed remote servers require no setup or infrastructure management on your part - just connect and start using them.\n\n## Use Cases for the Servers\n\nFor example, you can use the **AWS Documentation MCP Server** to help your AI assistant research and generate up-to-date code for any AWS service, like Amazon Bedrock Inline agents. Alternatively, you could use the **CDK MCP Server** or the **Terraform MCP Server** to have your AI assistant create infrastructure-as-code implementations that use the latest APIs and follow AWS best practices. With the **AWS Pricing MCP Server**, you could ask \"What would be the estimated monthly cost for this CDK project before I deploy it?\" or \"Can you help me understand the potential AWS service expenses for this infrastructure design?\" and receive detailed cost estimations and budget planning insights. The **Valkey MCP Server** enables natural language interaction with Valkey data stores, allowing AI assistants to efficiently manage data operations through a simple conversational interface.\n\n## Installation and Setup\n\nEach server has specific installation instructions with one-click installs for Cursor and VSCode. Generally, you can:\n\n1. Install `uv` from [Astral](https://docs.astral.sh/uv/getting-started/installation/)\n2. Install Python using `uv python install 3.10`\n3. Configure AWS credentials with access to required services\n4. Add the server to your MCP client configuration\n\nExample configuration for Amazon Q CLI MCP (`~/.aws/amazonq/mcp.json`):\n\n### For macOS/Linux\n\n```json\n{\n  \"mcpServers\": {\n    \"awslabs.core-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"awslabs.core-mcp-server@latest\"\n      ],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      }\n    }\n  }\n}\n```\n\nSee individual server READMEs for specific requirements and configuration options.\n\n### For Windows\n\nWhen configuring MCP servers on Windows, you'll need to use a slightly different configuration format:\n\n```json\n{\n  \"mcpServers\": {\n    \"awslabs.core-mcp-server\": {\n      \"disabled\": false,\n      \"timeout\": 60,\n      \"type\": \"stdio\",\n      \"command\": \"uv\",\n      \"args\": [\n        \"tool\",\n        \"run\",\n        \"--from\",\n        \"awslabs.core-mcp-server@latest\",\n        \"awslabs.core-mcp-server.exe\"\n      ],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      }\n    }\n  }\n}\n```\n\nIf you have problems with MCP configuration or want to check if the appropriate parameters are in place, you can try the following:\n\n```shell\n# Run MCP server manually with timeout 15s\n$ timeout 15s uv tool run <MCP Name> <args> 2>&1 || echo \"Command completed or timed out\"\n\n# Example (Aurora MySQL MCP Server)\n$ timeout 15s uv tool run awslabs.mysql-mcp-server --resource_arn <Your Resource ARN> --secret_arn <Your Secret ARN> ... 2>&1 || echo \"Command completed or timed out\"\n\n# If the arguments are not set appropriately, you may see the following message:\nusage: awslabs.mysql-mcp-server [-h] --resource_arn RESOURCE_ARN --secret_arn SECRET_ARN --database DATABASE\n                                --region REGION --readonly READONLY\nawslabs.mysql-mcp-server: error: the following arguments are required: --resource_arn, --secret_arn, --database, --region, --readonly\n```\n\n**Note about performance when using `uvx` *\"@latest\"* suffix:**\n\nUsing the *\"@latest\"* suffix checks and downloads the latest MCP server package from pypi every time you start your MCP clients, but it comes with a cost of increased initial load times. If you want to minimize the initial load time, remove *\"@latest\"* and manage your uv cache yourself using one of these approaches:\n\n- `uv cache clean <tool>`: where {tool} is the mcp server you want to delete from cache and install again (e.g.: \"awslabs.lambda-tool-mcp-server\") (remember to remove the '<>').\n- `uvx <tool>@latest`: this will refresh the tool with the latest version and add it to the uv cache.\n\n### Running MCP servers in containers\n\nDocker images for each MCP server are published to the [public AWS ECR registry](https://gallery.ecr.aws/awslabs-mcp).\n\n*This example uses docker with the \"awslabs.nova-canvas-mcp-server and can be repeated for each MCP server*\n\n- Optionally save sensitive environmental variables in a file:\n\n  ```.env\n  # contents of a .env file with fictitious AWS temporary credentials\n  AWS_ACCESS_KEY_ID=ASIAIOSFODNN7EXAMPLE\n  AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n  AWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPy...truncated...zrkuWJOgQs8IZZaIv2BXIa2R4Olgk\n  ```\n\n- Use the docker options: `--env`, `--env-file`, and `--volume` as needed because the `\"env\": {}` are not available within the container.\n\n  ```json\n  {\n    \"mcpServers\": {\n      \"awslabs.nova-canvas-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env\",\n          \"FASTMCP_LOG_LEVEL=ERROR\",\n          \"--env\",\n          \"AWS_REGION=us-east-1\",\n          \"--env-file\",\n          \"/full/path/to/.env\",\n          \"--volume\",\n          \"/full/path/to/.aws:/app/.aws\",\n          \"public.ecr.aws/awslabs-mcp/awslabs/nova-canvas-mcp-server:latest\"\n        ],\n        \"env\": {}\n      }\n    }\n  }\n  ```\n\n- For testing local changes you can build and tag the image. You have to update the MCP configuration to use this tag instead of the ECR image.\n\n  ```base\n  cd src/nova-canvas-mcp-server\n  docker build -t awslabs/nova-canvas-mcp-server .\n  ```\n\n### Getting Started with Amazon Q Developer CLI\n\n<details>\n<summary>Install in Amazon Q Developer CLI</summary>\n\nSee [Amazon Q Developer CLI documentation](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-mcp-config-CLI.html) for details.\n\n\n1. **Access MCP Settings**\n   - Open the Q Developer panel and open the **Chat** panel.\n   - Choose the tools icon to access to MCP configuration.\n\n2. **Add MCP Servers**\n   - Choose the plus (+) symbol.\n   - Select the scope: global or local.\n    If you select global scope, the MCP server configuration is stored in ~/.aws/amazonq/mcp.json and available across all your projects. If you select local scope, the configuration is stored in .amazonq/mcp.json within your current project.\n   - Fill in values as applicable.\n\n3. **Manual Configuration**\n   - You can also manually edit the MCP configuration file located at `~/.aws/amazonq/mcp.json` globally or `.amazonq/mcp.json` locally.\n\n#### `~/.aws/amazonq/mcp.json`\n\nFor macOS/Linux:\n\n```json\n{\n  \"mcpServers\": {\n    \"awslabs.core-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.core-mcp-server@latest\"],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      }\n    }\n  }\n}\n```\n\nFor Windows:\n\n```json\n{\n  \"mcpServers\": {\n    \"awslabs.core-mcp-server\": {\n      \"disabled\": false,\n      \"timeout\": 60,\n      \"type\": \"stdio\",\n      \"command\": \"uv\",\n      \"args\": [\n        \"tool\",\n        \"run\",\n        \"--from\",\n        \"awslabs.core-mcp-server@latest\",\n        \"awslabs.core-mcp-server.exe\"\n      ],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      }\n    }\n  }\n}\n```\n</details>\n\n\n### Getting Started with Kiro\n\n<details>\n<summary>Install in Kiro</summary>\n\nSee [Kiro Model Context Protocol Documentation](https://kiro.dev/docs/mcp/configuration/) for details.\n\n1. Navigate `Kiro` > `MCP Servers`\n2. Add a new MCP server by clicking the `+ Add` button.\n3. Paste the configuration given below:\n\n#### `kiro_mcp_settings.json`\n\nFor macOS/Linux:\n\n```json\n{\n  \"mcpServers\": {\n    \"awslabs.core-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.core-mcp-server@latest\"],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      }\n    }\n  }\n}\n```\n\nFor Windows:\n\n```json\n{\n  \"mcpServers\": {\n    \"awslabs.core-mcp-server\": {\n      \"disabled\": false,\n      \"timeout\": 60,\n      \"type\": \"stdio\",\n      \"command\": \"uv\",\n      \"args\": [\n        \"tool\",\n        \"run\",\n        \"--from\",\n        \"awslabs.core-mcp-server@latest\",\n        \"awslabs.core-mcp-server.exe\"\n      ],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      }\n    }\n  }\n}\n```\n\n</details>\n\n### Getting Started with Cline and Amazon Bedrock\n\n<details>\n<summary>Getting Started with Cline and Amazon Bedrock</summary>\n\n**IMPORTANT:** Following these instructions may incur costs and are subject to the [Amazon Bedrock Pricing](https://aws.amazon.com/bedrock/pricing/). You are responsible for any associated costs. In addition to selecting the desired model in the Cline settings, ensure you have your selected model (e.g. `anthropic.claude-3-7-sonnet`) also enabled in Amazon Bedrock. For more information on this, see [these AWS docs](https://docs.aws.amazon.com/bedrock/latest/userguide/model-access-modify.html) on enabling model access to Amazon Bedrock Foundation Models (FMs).\n\n1. Follow the steps above in the **Installation and Setup** section to install `uv` from [Astral](https://docs.astral.sh/uv/getting-started/installation/), install Python, and configure AWS credentials with the required services.\n\n2. If using Visual Studio Code, install the [Cline VS Code Extension](https://marketplace.visualstudio.com/items?itemName=saoudrizwan.claude-dev) (or equivalent extension for your preferred IDE). Once installed, click the extension to open it. When prompted, select the tier that you wish. In this case, we will be using Amazon Bedrock, so the free tier of Cline is fine as we will be sending requests using the Amazon Bedrock API instead of the Cline API.\n\n<p align=\"center\">\n  <img src=\"./docs/images/root-readme/install-cline-extension.png\" width=\"800\" height=\"400\"  />\n<p>\n\n3. Select the **MCP Servers** button.\n\n<p align=\"center\">\n  <img src=\"./docs/images/root-readme/select-mcp-servers.png\" width=\"500\" height=\"800\"  />\n<p>\n\n4. Select the **Installed** tab, then click **Configure MCP Servers** to open the `cline_mcp_settings.json` file.\n\n <p align=\"center\">\n   <img src=\"./docs/images/root-readme/configure-mcp-servers.png\" width=\"500\" height=\"800\"  />\n <p>\n\n 5. In the `cline_mcp_settings.json` file, add your desired MCP servers in the `mcpServers` object. See the following example that will use some of the current AWS MCP servers that are available in this repository. Ensure you save the file to install the MCP servers.\n\n#### `cline_mcp_settings.json`\n\nFor macOS/Linux:\n\n ```json\n {\n   \"mcpServers\": {\n     \"awslabs.core-mcp-server\": {\n       \"command\": \"uvx\",\n       \"args\": [\"awslabs.core-mcp-server@latest\"],\n       \"env\": {\n         \"FASTMCP_LOG_LEVEL\": \"ERROR\",\n         \"MCP_SETTINGS_PATH\": \"path to your mcp settings file\"\n       }\n     }\n    }\n  }\n ```\n\nFor Windows:\n\n```json\n{\n  \"mcpServers\": {\n    \"awslabs.core-mcp-server\": {\n      \"disabled\": false,\n      \"timeout\": 60,\n      \"type\": \"stdio\",\n      \"command\": \"uv\",\n      \"args\": [\n        \"tool\",\n        \"run\",\n        \"--from\",\n        \"awslabs.core-mcp-server@latest\",\n        \"awslabs.core-mcp-server.exe\"\n      ],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\",\n        \"MCP_SETTINGS_PATH\": \"path to your mcp settings file\"\n      }\n    }\n  }\n}\n```\n\n6. Once installed, you should see a list of your MCP Servers under the MCP Server Installed tab, and they should have a green slider to show that they are enabled. See the following for an example with two of the possible AWS MCP Servers. Click **Done** when finished. You should now see the Cline chat interface.\n\n<p align=\"center\">\n  <img src=\"./docs/images/root-readme/mcp-servers-installed.png\" width=\"500\" height=\"800\"  />\n<p>\n\n<p align=\"center\">\n  <img src=\"./docs/images/root-readme/cline-chat-interface.png\" width=\"500\" height=\"800\"  />\n<p>\n\n7. By default, Cline will be set as the API provider, which has limits for the free tier. Next, let's update the API provider to be AWS Bedrock, so we can use the LLMs through Bedrock, which would have billing go through your connected AWS account.\n\n8. Click the settings gear to open up the Cline settings. Then under **API Provider**, switch this from `Cline` to `AWS Bedrock` and select `AWS Profile` for the authentication type. As a note, the `AWS Credentials` option works as well, however it uses a static credentials (Access Key ID and Secret Access Key) instead of temporary credentials that are automatically redistributed when the token expires, so the temporary credentials with an AWS Profile is the more secure and recommended method.\n\n<p align=\"center\">\n  <img src=\"./docs/images/root-readme/cline-select-bedrock.png\" width=\"500\" height=\"800\"  />\n<p>\n\n9. Fill out the configuration based on the existing AWS Profile you wish to use, select the desired AWS Region, and enable cross-region inference.\n\n<p align=\"center\">\n  <img src=\"./docs/images/root-readme/cline-select-aws-profile.png\" width=\"500\" height=\"800\"  />\n<p>\n\n<p align=\"center\">\n  <img src=\"./docs/images/root-readme/cline-api-provider-filled.png\" width=\"500\" height=\"800\"  />\n<p>\n\n10. Next, scroll down on the settings page until you reach the text box that says Custom Instructions. Paste in the following snippet to ensure the `mcp-core` server is used as the starting point for every prompt:\n\n```\nFor every new project, always look at your MCP servers and use mcp-core as the starting point every time. Also after a task completion include the list of MCP servers used in the operation.\n```\n\n<p align=\"center\">\n  <img src=\"./docs/images/root-readme/cline-custom-instructions.png\" width=\"500\" height=\"800\"  />\n<p>\n\n11. Once the custom prompt is pasted in, click **Done** to return to the chat interface.\n\n12. Now you can begin asking questions and testing out the functionality of your installed AWS MCP Servers. The default option in the chat interface is is `Plan` which will provide the output for you to take manual action on (e.g. providing you a sample configuration that you copy and paste into a file). However, you can optionally toggle this to `Act` which will allow Cline to act on your behalf (e.g. searching for content using a web browser, cloning a repository, executing code, etc). You can optionally toggle on the \"Auto-approve\" section to avoid having to click to approve the suggestions, however we recommend leaving this off during testing, especially if you have the Act toggle selected.\n\n**Note:** For the best results, please prompt Cline to use the desired AWS MCP Server you wish to use. For example, `Using the Terraform MCP Server, do...`\n</details>\n\n### Getting Started with Cursor\n\n<details>\n<summary>Getting Started with Cursor</summary>\n\n1. Follow the steps above in the **Installation and Setup** section to install `uv` from [Astral](https://docs.astral.sh/uv/getting-started/installation/), install Python, and configure AWS credentials with the required services.\n\n2. You can place MCP configuration in two locations, depending on your use case:\n\n  A. **Project Configuration**\n    - For tools specific to a project, create a `.cursor/mcp.json` file in your project directory.\n    - This allows you to define MCP servers that are only available within that specific project.\n\n  B. **Global Configuration**\n    - For tools that you want to use across all projects, create a `~/.cursor/mcp.json` file in your home directory.\n    - This makes MCP servers available in all your Cursor workspaces.\n\n#### `.cursor/mcp.json`\n\nFor macOS/Linux:\n\n```json\n {\n  \"mcpServers\": {\n    \"awslabs.core-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.core-mcp-server@latest\"],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      }\n    }\n  }\n}\n```\n\nFor Windows:\n\n```json\n{\n  \"mcpServers\": {\n    \"awslabs.core-mcp-server\": {\n      \"disabled\": false,\n      \"timeout\": 60,\n      \"type\": \"stdio\",\n      \"command\": \"uv\",\n      \"args\": [\n        \"tool\",\n        \"run\",\n        \"--from\",\n        \"awslabs.core-mcp-server@latest\",\n        \"awslabs.core-mcp-server.exe\"\n      ],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      }\n    }\n  }\n}\n```\n\n3. **Using MCP in Chat** The Composer Agent will automatically use any MCP tools that are listed under Available Tools on the MCP settings page if it determines them to be relevant. To prompt tool usage intentionally, please prompt Cursor to use the desired AWS MCP Server you wish to use. For example, `Using the Terraform MCP Server, do...`\n\n4. **Tool Approval** By default, when Agent wants to use an MCP tool, it will display a message asking for your approval. You can use the arrow next to the tool name to expand the message and see what arguments the Agent is calling the tool with.\n\n</details>\n\n### Getting Started with Windsurf\n\n<details>\n<summary>Getting Started with Windsurf</summary>\n\n1. Follow the steps above in the **Installation and Setup** section to install `uv` from [Astral](https://docs.astral.sh/uv/getting-started/installation/), install Python, and configure AWS credentials with the required services.\n\n2. **Access MCP Settings**\n   - Navigate to Windsurf - Settings > Advanced Settings or use the Command Palette > Open Windsurf Settings Page\n   - Look for the \"Model Context Protocol (MCP) Servers\" section\n\n3. **Add MCP Servers**\n   - Click \"Add Server\" to add a new MCP server\n   - You can choose from available templates like GitHub, Puppeteer, PostgreSQL, etc.\n   - Alternatively, click \"Add custom server\" to configure your own server\n\n4. **Manual Configuration**\n   - You can also manually edit the MCP configuration file located at `~/.codeium/windsurf/mcp_config.json`\n\n#### `~/.codeium/windsurf/mcp_config.json`\n\nFor macOS/Linux:\n\n ```json\n {\n   \"mcpServers\": {\n     \"awslabs.core-mcp-server\": {\n       \"command\": \"uvx\",\n       \"args\": [\"awslabs.core-mcp-server@latest\"],\n       \"env\": {\n         \"FASTMCP_LOG_LEVEL\": \"ERROR\",\n         \"MCP_SETTINGS_PATH\": \"path to your mcp settings file\"\n       }\n     }\n    }\n  }\n ```\n\nFor Windows:\n\n```json\n{\n  \"mcpServers\": {\n    \"awslabs.core-mcp-server\": {\n      \"disabled\": false,\n      \"timeout\": 60,\n      \"type\": \"stdio\",\n      \"command\": \"uv\",\n      \"args\": [\n        \"tool\",\n        \"run\",\n        \"--from\",\n        \"awslabs.core-mcp-server@latest\",\n        \"awslabs.core-mcp-server.exe\"\n      ],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\",\n        \"MCP_SETTINGS_PATH\": \"path to your mcp settings file\"\n      }\n    }\n  }\n}\n```\n\n</details>\n\n### Getting Started with VS Code\n\n<details>\n<summary>Install in VS Code</summary>\n\nConfigure MCP servers in VS Code settings or in `.vscode/mcp.json` (see [VS Code MCP docs](https://code.visualstudio.com/docs/copilot/chat/mcp-servers) for more info.):\n\n#### `.vscode/mcp.json`\n\nFor macOS/Linux:\n\n```json\n{\n  \"mcpServers\": {\n    \"awslabs.core-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.core-mcp-server@latest\"],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      }\n    }\n  }\n}\n```\n\nFor Windows:\n\n```json\n{\n  \"mcpServers\": {\n    \"awslabs.core-mcp-server\": {\n      \"disabled\": false,\n      \"timeout\": 60,\n      \"type\": \"stdio\",\n      \"command\": \"uv\",\n      \"args\": [\n        \"tool\",\n        \"run\",\n        \"--from\",\n        \"awslabs.core-mcp-server@latest\",\n        \"awslabs.core-mcp-server.exe\"\n      ],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      }\n    }\n  }\n}\n```\n</details>\n\n### Getting Started with Claude Code\n\n<details>\n<summary>Install in Claude Code</summary>\n\nConfigure MCP servers in Claude Code through the CLI or in `.mcp.json`\n\n1. Follow the steps above in the **Installation and Setup** section to install `uv` from [Astral](https://docs.astral.sh/uv/getting-started/installation/), install Python, and configure AWS credentials with the required services.\n\n2. **Using Claude Code CLI Commands**\n\n   Claude Code CLI commands to add MCP servers:\n\n   ```bash\n   # Add core AWS services\n   claude mcp add aws-api uvx awslabs.aws-api-mcp-server@latest\n   claude mcp add aws-cdk uvx awslabs.cdk-mcp-server@latest\n   claude mcp add aws-docs uvx awslabs.aws-documentation-mcp-server@latest\n   claude mcp add aws-support uvx awslabs.aws-support-mcp-server@latest\n   claude mcp add aws-pricing uvx awslabs.aws-pricing-mcp-server@latest\n\n   # Add AI/ML and Bedrock services\n   claude mcp add bedrock-kb uvx awslabs.bedrock-kb-retrieval-mcp-server@latest\n   claude mcp add nova-canvas uvx awslabs.nova-canvas-mcp-server@latest\n   claude mcp add synthetic-data uvx awslabs.syntheticdata-mcp-server@latest\n\n   # Add data and analytics services\n   claude mcp add aws-dataprocessing uvx awslabs.aws-dataprocessing-mcp-server@latest\n   claude mcp add aurora-dsql uvx awslabs.aurora-dsql-mcp-server@latest\n   claude mcp add valkey uvx awslabs.valkey-mcp-server@latest\n\n   # List installed servers\n   claude mcp list\n   ```\n\n3. **Manual Configuration (Alternative)**\n\n   You can also manually configure MCP servers by creating a `.mcp.json` file in your project root:\n\n#### `.mcp.json`\n\nFor macOS/Linux:\n\n```json\n{\n  \"mcpServers\": {\n    \"awslabs.cdk-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.cdk-mcp-server@latest\"],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      }\n    },\n    \"awslabs.aws-documentation-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.aws-documentation-mcp-server@latest\"],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\",\n        \"AWS_DOCUMENTATION_PARTITION\": \"aws\"\n      }\n    }\n  }\n}\n```\n</details>\n\n## Samples\n\nReady-to-use examples of AWS MCP Servers in action are available in the [samples](samples/) directory. These samples provide working code and step-by-step guides to help you get started with each MCP server.\n\n## Vibe coding\n\nYou can use these MCP servers with your AI coding assistant to [vibe code](https://en.wikipedia.org/wiki/Vibe_coding). For tips and tricks on how to improve your vibe coding experience, please refer to our [guide](./VIBE_CODING_TIPS_TRICKS.md).\n\n## Additional Resources\n\n- [Introducing AWS MCP Servers for code assistants](https://aws.amazon.com/blogs/machine-learning/introducing-aws-mcp-servers-for-code-assistants-part-1/)\n- [Vibe coding with AWS MCP Servers | AWS Show & Tell](https://www.youtube.com/watch?v=qXGQQRMrcz0)\n- [Supercharging AWS database development with AWS MCP servers](https://aws.amazon.com/blogs/database/supercharging-aws-database-development-with-aws-mcp-servers/)\n- [AWS costs estimation using Amazon Q CLI and AWS Pricing MCP Server](https://aws.amazon.com/blogs/machine-learning/aws-costs-estimation-using-amazon-q-cli-and-aws-cost-analysis-mcp/)\n- [Introducing AWS Serverless MCP Server: AI-powered development for modern applications](https://aws.amazon.com/blogs/compute/introducing-aws-serverless-mcp-server-ai-powered-development-for-modern-applications/)\n- [Announcing new Model Context Protocol (MCP) Servers for AWS Serverless and Containers](https://aws.amazon.com/about-aws/whats-new/2025/05/new-model-context-protocol-servers-aws-serverless-containers/)\n- [Accelerating application development with the Amazon EKS MCP server](https://aws.amazon.com/blogs/containers/accelerating-application-development-with-the-amazon-eks-model-context-protocol-server/)\n- [Amazon Neptune announces MCP (Model Context Protocol) Server](https://aws.amazon.com/about-aws/whats-new/2025/05/amazon-neptune-mcp-server/)\n- [Terraform MCP Server Vibe Coding](https://youtu.be/i2nBD65md0Y)\n- [How to Generate AWS Architecture Diagrams Using Amazon Q CLI and MCP](https://community.aws/content/2vPiiPiBSdRalaEax2rVDtshpf3/how-to-generate-aws-architecture-diagrams-using-amazon-q-cli-and-mcp)\n- [Harness the power of MCP servers with Amazon Bedrock Agents](https://aws.amazon.com/blogs/machine-learning/harness-the-power-of-mcp-servers-with-amazon-bedrock-agents/)\n- [Unlocking the power of Model Context Protocol (MCP) on AWS](https://aws.amazon.com/blogs/machine-learning/unlocking-the-power-of-model-context-protocol-mcp-on-aws/)\n- [AWS Price List Gets a Natural Language Upgrade: Introducing the AWS Pricing MCP Server](https://aws.amazon.com/blogs/aws-cloud-financial-management/aws-price-list-gets-a-natural-language-upgrade-introducing-the-aws-pricing-mcp-server/)\n- [AWS SheBuilds: AWS Team's Journey from Internal Tools to Open Source AI Infrastructure](https://www.youtube.com/watch?v=DZFgufNCvAo)\n\n## Security\n\nSee [CONTRIBUTING](CONTRIBUTING.md#security-issue-notifications) for more information.\n\n## Contributing\n\nBig shout out to our awesome contributors! Thank you for making this project better!\n\n[![contributors](https://contrib.rocks/image?repo=awslabs/mcp&max=2000)](https://github.com/awslabs/mcp/graphs/contributors)\n\nContributions of all kinds are welcome! Check out our [contributor guide](CONTRIBUTING.md) for more information.\n\n## Developer guide\n\nIf you want to add a new MCP Server to the library, check out our [development guide](DEVELOPER_GUIDE.md) and be sure to follow our [design guidelines](DESIGN_GUIDELINES.md).\n\n## License\n\nThis project is licensed under the Apache-2.0 License.\n\n## Disclaimer\n\nBefore using an MCP Server, you should consider conducting your own independent assessment to ensure that your use would comply with your own specific security and quality control practices and standards, as well as the laws, rules, and regulations that govern you and your content.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cloud",
        "aws",
        "awslabs",
        "cloud platforms",
        "cloud platform",
        "platforms cloud"
      ],
      "category": "cloud-platforms"
    },
    "cyclops-ui--mcp-cyclops": {
      "owner": "cyclops-ui",
      "name": "mcp-cyclops",
      "url": "https://github.com/cyclops-ui/mcp-cyclops",
      "imageUrl": "",
      "description": "An MCP server that allows AI agents to manage Kubernetes resources through Cyclops abstraction",
      "stars": 29,
      "forks": 3,
      "license": "No License",
      "language": "Go",
      "updated_at": "2025-08-21T07:53:35Z",
      "readme_content": "<p align=\"center\" width=\"100%\">\n    <img width=\"75%\" src=\"https://raw.githubusercontent.com/cyclops-ui/cyclops/main/web/static/img/cyclops-simplistic.png\">\n<p/>\n\n# Cyclops MCP (Model Context Protocol)\n\nCyclops MCP allows your favorite AI agent to manage your Kubernetes applications. Cyclops MCP servers provide tools for agents to create and update existing applications safely.\n\nhttps://github.com/user-attachments/assets/0c675c33-1e36-4fdb-bf8c-2fd7fb491e6b\n\nThis means it can check all of your existing templates and the schema of those templates to create accurate and production-ready applications. Your agent now has much less room to make a misconfiguration since it creates high-level resources (Cyclops Modules) instead of touching every line of your Kubernetes resources (Deployments, Services, and Ingresses).\n\nIt allows you to move fast and ensure no uncaught misconfigurations are hitting your production.\n\n**With Cyclops and our MCP, you can now abstract Kubernetes complexity from your developers AND your AI agents**\n\n## Install via UI\n\nThe easiest way to install the Cyclops MCP server is through the Cyclops UI. Below are instructions on how to install it via binary and kubectl, but the recommended way of installing it is via the UI.\n\n> ⚠️ To install Cyclops MCP through the UI, you should run Cyclops on a version `v0.20.1` or greater\n\n1. Install the Cyclops MCP by going to sidebar `“Addon”` > `\"MCP server\"`. You can now click `\"Install Cyclops MCP server\"` and your Cyclops MCP server will be up and running in a few seconds.\n\n<img width=\"762\" alt=\"addon-install\" src=\"https://github.com/user-attachments/assets/57dfd8f9-9b58-4797-a348-d2788a6fba9b\" />\n\n2. Now that your MCP server is up running, all thats left is exposing it outside of your cluster and connecting your AI agent to it.\n\n   To expose the MCP server on localhost you can simply port-forward it with the following command:\n\n    ```bash\n    kubectl port-forward -n cyclops svc/cyclops-mcp 8000:8000\n    ```\n\n   Your server is now available on `localhost:8000`.\n\n3. To connect it to an AI agent you will just have to provide the Cyclops MCP server in its configuration. For example, to add it to Cursor, you can simply add it with the following JSON:\n\n    ```bash\n    {\n      \"mcpServers\": {\n        \"cyclops-kubernetes\": {\n          \"url\": \"http://localhost:8000/sse\"\n        }\n      }\n    }\n    ```\n\nYou can now start a fresh conversation with your AI companion. Above is an example of how we used it with Cursor.\n\n<details>\n\n<summary>Install stdin binary</summary>\n\n### 1. Make sure Cyclops is installed in your Kubernetes cluster\n\nCheck our docs on how it install it with a single command - https://cyclops-ui.com/docs/installation/install/manifest\n\n### 2. Download MCP server\n\nYou can download the Cyclops MCP server binary with the following command:\n\n```yaml\nGOBIN=\"$HOME/go/bin\" go install github.com/cyclops-ui/mcp-cyclops/cmd/mcp-cyclops@latest\n```\n\n### 3. Add server configuration\n\n> ⚠️ By default, Cyclops MCP will use the `.kube/config` file to connect to your cluster\n\nConfigure your MCP Cyclops server:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-cyclops\": {\n      \"command\": \"mcp-cyclops\"\n    }\n  }\n}\n```\n\n## Configuration\n\nYou can configure Cyclops MCP server via env variables. Below is an example of adding the configuration for specifying the kubeconfig file the Cyclops MCP server should use when managing your Cyclops applications.\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-cyclops\": {\n      \"command\": \"mcp-cyclops\",\n      \"env\": {\n        \"KUBECONFIG\": \"/path/to/your/kubeconfig\"\n      }\n    }\n  }\n}\n\n```\n\n### Environment variables\n\nBelow is the list of environment variables used for configuring your Cyclops MCP server:\n\n| Env var                           | Description                                                                             |\n|-----------------------------------|-----------------------------------------------------------------------------------------|\n| `KUBECONFIG`                      | Path to kubeconfig file (optional, defaults to in-cluster config or $HOME/.kube/config) |\n| `CYCLOPS_KUBE_CONTEXT`            | Kubernetes context to use (optional)                                                    |\n| `CYCLOPS_MODULE_NAMESPACE`        | Namespace where modules are stored                                                      |\n| `CYCLOPS_HELM_RELEASE_NAMESPACE`  | Namespace for Helm releases                                                             |\n| `CYCLOPS_MODULE_TARGET_NAMESPACE` | Target namespace for modules                                                            |\n\n---\n\n</details>\n\n<details>\n\n<summary>\nInstall to a Kubernetes cluster manually\n</summary>\n\n---\n\nInstead of having each developer install `mcp-cyclops` binary, you can install the Cyclops MCP server with SSE as transport type to your Kubernetes cluster and allow all of your developers to connect to the same server.\n\n1. Before installing, make sure Cyclops and all its CRDs are installed in your cluster:\n    1. Check Cyclops pods are running:\n\n        ```shell\n        kubectl get pods -n cyclops\n        ```\n\n       Should write:\n\n        ```\n        NAME                            READY   STATUS    RESTARTS   AGE\n        cyclops-ctrl-676b5d9789-ntcls   1/1     Running   0          94s\n        cyclops-ui-7798655f97-xdg29     1/1     Running   0          94s\n        ```\n\n    2. Check if CRDs are installed\n\n        ```shell\n        kubectl get crds | grep cyclops-ui\n        ```\n\n       Should write:\n\n        ```\n        modules.cyclops-ui.com             2025-04-26T15:28:18Z\n        templateauthrules.cyclops-ui.com   2025-04-26T15:28:18Z\n        templatestores.cyclops-ui.com      2025-04-26T15:28:18Z\n        ```\n\n2. Install Cyclops MCP server with the following command:\n\n    ```shell\n    kubectl apply -f https://raw.githubusercontent.com/cyclops-ui/mcp-cyclops/refs/heads/main/install/mcp-server.yaml\n    ```\n\n3. You can now expose the `cyclops-mcp` service. To test your MCP server, you can port-forward it:\n\n    ```shell\n    kubectl port-forward svc/cyclops-mcp -n cyclops 8000:8000\n    ```\n\n4. Add your Cyclops MCP server host, or in case you are testing it, the [localhost](http://localhost) address where you port-forwarded the MCP service:\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"mcp-cyclops\": {\n          \"url\": \"http://localhost:8000/sse\"\n        }\n      }\n    }\n    ```\n---\n\n</details>\n\n## Tools\n\n| Tool                  | Description                                                                                                                        |\n|-----------------------|------------------------------------------------------------------------------------------------------------------------------------|\n| `create_module`       | Create new Module. Before calling this tool, make sure to call `get_template_schema` to validate values for the given template     |\n| `get_module`          | Fetch Module by name                                                                                                               |\n| `list_modules`        | List all Cyclops Modules                                                                                                           |\n| `update_module`       | Update Module by Name. Before calling this tool, make sure to call `get_template_schema` to validate values for the given template |\n| `get_template_schema` | Returns JSON schema for the given template. Needs to be checked before calling `create_module` tool                                |\n| `get_template_store`  | Fetch Template Store by Name                                                                                                       |\n| `list_template_store` | List Template Stores from cluster                                                                                                  |\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kubernetes",
        "cloud",
        "cyclops",
        "cloud platform",
        "services cyclops",
        "platforms cloud"
      ],
      "category": "cloud-platforms"
    },
    "elementfm--mcp": {
      "owner": "elementfm",
      "name": "mcp",
      "url": "https://gitlab.com/elementfm/mcp",
      "imageUrl": "",
      "description": "Open source podcast hosting platform",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cloud",
        "platform",
        "podcast",
        "platforms cloud",
        "cloud platforms",
        "cloud platform"
      ],
      "category": "cloud-platforms"
    },
    "espressif--esp-rainmaker-mcp": {
      "owner": "espressif",
      "name": "esp-rainmaker-mcp",
      "url": "https://github.com/espressif/esp-rainmaker-mcp",
      "imageUrl": "",
      "description": "Official Espressif MCP Server to manage and control ESP RainMaker Devices.",
      "stars": 9,
      "forks": 5,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-19T10:37:22Z",
      "readme_content": "# ESP RainMaker MCP Server\n\nThis project provides a [Model Context Protocol (MCP)](https://modelcontextprotocol.io/) server wrapper around the [`esp-rainmaker-cli`](https://github.com/espressif/esp-rainmaker-cli) Python library.\nIt allows MCP-compatible clients (like LLMs or applications such as Cursor, Claude Desktop, and Windsurf) to interact with your [ESP RainMaker](https://rainmaker.espressif.com/) devices using the official CLI.\n\n## Introduction to Model Context Protocol (MCP)\n\nThe **Model Context Protocol (MCP)** is a standardized framework that enables AI systems to interact with external tools, data sources, and services in a unified manner. Introduced by Anthropic and adopted by major AI organizations, MCP acts as a universal interface, much like USB-C for hardware, allowing seamless integration across different platforms.\n\n### Key Benefits of MCP in ESP RainMaker\n\n- **Unified Interaction**: MCP allows AI models to access and control IoT devices using natural language prompts, making interactions more intuitive and accessible.\n- **Real-time Control**: With MCP, users can execute actions such as turning devices on/off, adjusting settings, and managing schedules directly through AI interfaces.\n- **Local Server, Cloud-Backed Control**: The ESP RainMaker MCP server runs locally and stores credentials on your machine. However, device management actions are performed via the official ESP RainMaker cloud APIs through the esp-rainmaker-cli.\n\nBy integrating MCP, the ESP RainMaker platform enhances its capabilities, allowing tools like Claude, Cursor, Windsurf, and Gemini CLI to manage IoT devices efficiently and securely.\n\n## Prerequisites\n\n*   **Python:** Version 3.10 or higher\n*   **uv:** The `uv` Python package manager. Install from [Astral's uv documentation](https://docs.astral.sh/uv/getting-started/installation/).\n*   **ESP RainMaker CLI Login:** You *must* have successfully logged into ESP RainMaker using the standard `esp-rainmaker-cli login` command in your terminal at least once. This server relies on the credentials saved by that process.\n*   **RainMaker Nodes** added into your account since onboarding isn't supported by the MCP server.\n\n## Installation & Setup\n\n1.  **Clone the Repository:**\n    ```bash\n    git clone https://github.com/espressif/esp-rainmaker-mcp.git\n    cd esp-rainmaker-mcp\n    ```\n\n2.  **Install Dependencies using uv:**\n    This command installs `esp-rainmaker-cli`, `mcp[cli]`, and any other dependencies listed in `pyproject.toml` into a virtual environment managed by `uv`.\n\n    ```bash\n    uv sync\n    ```\n    *(This assumes `uv` is installed)*\n\n3. **Login to ESP Rainmaker using `esp-rainmaker-cli`**\n    ```bash\n    uv run esp-rainmaker-cli login\n    ```\n\n> [!NOTE]\n> Direct login via username/password within MCP is not supported for security reasons. Please use the standard CLI login flow first.\n\n\n## Client Configuration\n\nTo add this project as an MCP server in supported MCP clients (Cursor, Claude Desktop, Windsurf, and Gemini CLI), you'll need to add the same JSON configuration to each client's config file. The configuration is identical across all clients:\n\n### MCP Server Configuration (All Clients)\n\nUse the following JSON configuration for all MCP clients:\n\n```json\n{\n   \"mcpServers\": {\n      \"ESP-RainMaker-MCP\": {\n         \"command\": \"uv\",\n         \"args\": [\n            \"run\",\n            \"--with\",\n            \"esp-rainmaker-cli\",\n            \"--with\",\n            \"mcp[cli]\",\n            \"mcp\",\n            \"run\",\n            \"<absolute_path_to_repo>/server.py\"\n         ]\n      }\n   }\n}\n```\n\n> [!IMPORTANT]\n> Replace `<absolute_path_to_repo>/server.py` with the actual **absolute path** to the `server.py` file within the cloned `esp-rainmaker-mcp` directory on your system.\n\n### Cursor MCP Server Setup\n\n1. Open Cursor and click on the settings (gear icon) at the top right.\n\n2. Navigate to \"Tools & Integrations\" from the settings menu.\n\n3. Click on \"MCP Tools\" in the integrations section.\n\n4. Click on \"New MCP Server\" to add a new server.\n\n5. This will open the mcp.json file. Add the JSON configuration shown above.\n\n### Claude Desktop MCP Server Setup\n\n1. Open Claude Desktop and go to Settings -> Developer -> Edit Config.\n\n2. This will open the configuration file (claude_desktop_config.json). Add the JSON configuration shown above.\n\n3. Save the changes and restart Claude Desktop to apply the new settings.\n\n### Windsurf MCP Server Setup\n\n1. Open Windsurf and look for the hammer-type icon under the chat text input area.\n\n2. Click on the hammer icon and select \"Configure\" from the options. This will open the plugins window.\n\n3. Click on \"View raw config\" which will show you the `~/.codium/windsurf/mcp_config.json` file.\n\n4. Add the JSON configuration shown above to the file.\n\n5. Save the changes and click on \"Refresh\" under the chat text window to load the ESP RainMaker MCP tools.\n\n### Gemini CLI MCP Server Setup\n\n1. Locate your Gemini CLI settings file. On macOS, this is typically at `~/.gemini/settings.json`.\n2. Open the `settings.json` file in your preferred text editor.\n3. Add the JSON configuration shown above to the `mcpServers` section of the file. If the section does not exist, create it as shown in the example.\n4. Save the file and restart Gemini CLI if it is running.\n\n> [!NOTE]\n> The configuration for all four applications (Cursor, Claude Desktop, Windsurf, and Gemini CLI) is the same, so you can use the same JSON structure for all of them.\n\n> [!NOTE]\n> The `--with` arguments ensure `uv` includes the necessary dependencies when running the `mcp run` command.\n\n## How it Works\n\nThis server acts as a bridge. It uses the `mcp` library to handle the Model Context Protocol communication. When a tool is called:\n\n1.  It uses functions from the installed `esp-rainmaker-cli` library.\n2.  The library functions read locally stored authentication tokens.\n3.  It makes the necessary API calls to the ESP RainMaker cloud.\n4.  It returns the results (or errors) back through the MCP protocol.\n\n\n## Available Tools\n\nThis MCP server exposes the following tools for interacting with ESP RainMaker:\n\n### Authentication & Configuration\n\n*   `login_instructions()`:\n    *   Provides instructions (formatted with Markdown) on how to log in using the standard `esp-rainmaker-cli login` command in your terminal.\n        This server relies on the external CLI's browser-based login flow to securely store credentials.\n        Rendering as Markdown depends on the MCP client's capabilities.\n*   `check_login_status()`:\n    *   Checks if a valid login session exists based on credentials stored locally by `esp-rainmaker-cli`.\n        Confirms if the server can communicate with the ESP RainMaker backend.\n\n### Node Management\n\n*   `get_nodes()`:\n    *   Lists all node IDs associated with the logged-in user.\n*   `get_node_details(node_id: str = None, fields: str = None, name: str = None, type_: str = None)`:\n    *   Get detailed information for nodes including config, status, and params.\n    *   Supports filtering and field selection:\n        - `fields`: comma-separated list of fields to include (e.g. \"node_id,name,type,config,params,status.connectivity,fw_version,mapping_timestamp\")\n        - `name`: substring match (user-visible name from params)\n        - `type_`: substring match (device type)\n        - `node_id`: single node ID (for one node) or None (for all)\n    *   Returns a dict (single node) or list of dicts (all nodes).\n    *   Example:\n        ```python\n        get_node_details(ctx, fields=\"node_id,name,type\")\n        ```\n*   `get_node_status(node_id: str)`:\n    *   Get the online/offline connectivity status for a specific node ID.\n*   `get_params(node_id: str)`:\n    *   Get current parameter values for a device.\n*   `set_params(node_id: str, params_dict: dict)`:\n    *   Set parameters for one or more devices.\n    *   `node_id`: Single ID or comma-separated list (e.g., \"light1,light2\")\n    *   `params_dict`: Parameters to set, e.g., `{\"Light\": {\"Power\": true}}`\n\n### Schedule Management\n\n*   `get_schedules(node_id: str)`:\n    *   Get schedules for a device.\n*   `set_schedule(node_id: str, operation: str, ...)`:\n    *   Manage device schedules.\n    *   `operation`: \"add\", \"edit\", \"remove\", \"enable\", or \"disable\"\n    *   For add/edit: Provide `name`, `trigger`, and `action`\n    *   Common triggers:\n        *   Daily 8 AM: `{\"m\": 480, \"d\": 127}`\n        *   Weekdays 6:30 PM: `{\"m\": 1110, \"d\": 31}`\n    *   Example action: `{\"Light\": {\"Power\": true}}`\n\n### Group Management (Home/Room Hierarchy)\n\n*   `create_group(name: str, group_type: str = None, ...)`:\n    *   Create a home or room.\n    *   Required: `name`, `group_type` (\"home\" or \"room\")\n    *   For rooms: `parent_group_id` required\n    *   Example: `create_group(\"Living Room\", \"room\", parent_group_id=\"home_id\")`\n\n*   `get_group_details(group_id: str = None, include_nodes: bool = False)`:\n    *   Get group information. For all groups, use `group_id=None`.\n    *   Set `include_nodes=True` to include device details.\n    *   Returns: Group hierarchy, members, and metadata.\n\n*   `update_group(group_id: str, ...)`:\n    *   Update group properties or manage devices.\n    *   Optional: `name`, `description`, `add_nodes`, `remove_nodes`\n    *   Examples:\n        *   Rename: `update_group(\"group_id\", name=\"New Name\")`\n        *   Add devices: `update_group(\"group_id\", add_nodes=\"light1,light2\")`\n\n*   `add_device_to_room(device_node_id: str, room_group_id: str)`:\n    *   Add device to room (handles parent group automatically).\n    *   Example: `add_device_to_room(\"light1\", \"kitchen_id\")`\n\n## License\n\nThis project is licensed under the terms specified in the [LICENSE](LICENSE) file.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cloud",
        "espressif",
        "platform",
        "cloud platform",
        "cloud platforms",
        "platforms cloud"
      ],
      "category": "cloud-platforms"
    },
    "flux159--mcp-server-kubernetes": {
      "owner": "flux159",
      "name": "mcp-server-kubernetes",
      "url": "https://github.com/Flux159/mcp-server-kubernetes",
      "imageUrl": "",
      "description": "Typescript implementation of Kubernetes cluster operations for pods, deployments, services.",
      "stars": 1108,
      "forks": 180,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T08:36:38Z",
      "readme_content": "# MCP Server Kubernetes\n\n[![CI](https://github.com/Flux159/mcp-server-kubernetes/actions/workflows/ci.yml/badge.svg)](https://github.com/yourusername/mcp-server-kubernetes/actions/workflows/ci.yml)\n[![Language](https://img.shields.io/github/languages/top/Flux159/mcp-server-kubernetes)](https://github.com/yourusername/mcp-server-kubernetes)\n[![Bun](https://img.shields.io/badge/runtime-bun-orange)](https://bun.sh)\n[![Kubernetes](https://img.shields.io/badge/kubernetes-%23326ce5.svg?style=flat&logo=kubernetes&logoColor=white)](https://kubernetes.io/)\n[![Docker](https://img.shields.io/badge/docker-%230db7ed.svg?style=flat&logo=docker&logoColor=white)](https://www.docker.com/)\n[![Stars](https://img.shields.io/github/stars/Flux159/mcp-server-kubernetes)](https://github.com/Flux159/mcp-server-kubernetes/stargazers)\n[![Issues](https://img.shields.io/github/issues/Flux159/mcp-server-kubernetes)](https://github.com/Flux159/mcp-server-kubernetes/issues)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/Flux159/mcp-server-kubernetes/pulls)\n[![Last Commit](https://img.shields.io/github/last-commit/Flux159/mcp-server-kubernetes)](https://github.com/Flux159/mcp-server-kubernetes/commits/main)\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/Flux159/mcp-server-kubernetes)](https://archestra.ai/mcp-catalog/flux159__mcp-server-kubernetes)\n[![Ask DeepWiki](https://deepwiki.com/badge.svg)](https://deepwiki.com/Flux159/mcp-server-kubernetes)\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/Flux159/mcp-server-kubernetes/refs/heads/main/icon.png\" width=\"200\">\n</p>\n\nMCP Server that can connect to a Kubernetes cluster and manage it. Supports loading kubeconfig from multiple sources in priority order.\n\nhttps://github.com/user-attachments/assets/f25f8f4e-4d04-479b-9ae0-5dac452dd2ed\n\n<a href=\"https://glama.ai/mcp/servers/w71ieamqrt\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/w71ieamqrt/badge\" /></a>\n\n## Installation & Usage\n\n### Prerequisites\n\nBefore using this MCP server with any tool, make sure you have:\n\n1. kubectl installed and in your PATH\n2. A valid kubeconfig file with contexts configured\n3. Access to a Kubernetes cluster configured for kubectl (e.g. minikube, Rancher Desktop, GKE, etc.)\n4. Helm v3 installed and in your PATH (no Tiller required). Optional if you don't plan to use Helm.\n\nYou can verify your connection by running `kubectl get pods` in a terminal to ensure you can connect to your cluster without credential issues.\n\nBy default, the server loads kubeconfig from `~/.kube/config`. For additional authentication options (environment variables, custom paths, etc.), see [ADVANCED_README.md](ADVANCED_README.md).\n\n### Claude Code\n\nAdd the MCP server to Claude Code using the built-in command:\n\n```bash\nclaude mcp add kubernetes -- npx mcp-server-kubernetes\n```\n\nThis will automatically configure the server in your Claude Code MCP settings.\n\n### Claude Desktop\n\nAdd the following configuration to your Claude Desktop config file:\n\n```json\n{\n  \"mcpServers\": {\n    \"kubernetes\": {\n      \"command\": \"npx\",\n      \"args\": [\"mcp-server-kubernetes\"]\n    }\n  }\n}\n```\n\n### Claude Desktop Connector via mcpb\n\nMCP Server Kubernetes is also available as a [mcpb](https://github.com/anthropics/mcpb) (formerly dxt) extension. In Claude Desktop, go to Settings (`Cmd+,` on Mac) -> Extensions -> Browse Extensions and scroll to find mcp-server-kubernetes in the modal. Install it & it will install & utilize kubectl via command line & your kubeconfig.\n\nTo manually install, you can also get the .mcpb by going to the latest [Release](https://github.com/Flux159/mcp-server-kubernetes/releases) and downloading it.\n\n### VS Code\n\n[![Install Kubernetes MCP in VS Code](https://img.shields.io/badge/Install%20Kubernetes%20MCP%20in%20VS%20Code-blue?logo=visualstudiocode)](vscode:mcp/install?%7B%22name%22%3A%20%22kubernetes%22%2C%20%22type%22%3A%20%22stdio%22%2C%20%22command%22%3A%20%22npx%22%2C%20%22args%22%3A%20%5B%22mcp-server-kubernetes%22%5D%7D)\n\nFor VS Code integration, you can use the MCP server with extensions that support the Model Context Protocol:\n\n1. Install a compatible MCP extension (such as Claude Dev or similar MCP clients)\n2. Configure the extension to use this server:\n\n```json\n{\n  \"mcpServers\": {\n    \"kubernetes\": {\n      \"command\": \"npx\",\n      \"args\": [\"mcp-server-kubernetes\"],\n      \"description\": \"Kubernetes cluster management and operations\"\n    }\n  }\n}\n```\n\n### Cursor\n\nCursor supports MCP servers through its AI integration. Add the server to your Cursor MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"kubernetes\": {\n      \"command\": \"npx\",\n      \"args\": [\"mcp-server-kubernetes\"]\n    }\n  }\n}\n```\n\nThe server will automatically connect to your current kubectl context. You can verify the connection by asking the AI assistant to list your pods or create a test deployment.\n\n## Usage with mcp-chat\n\n[mcp-chat](https://github.com/Flux159/mcp-chat) is a CLI chat client for MCP servers. You can use it to interact with the Kubernetes server.\n\n```shell\nnpx mcp-chat --server \"npx mcp-server-kubernetes\"\n```\n\nAlternatively, pass it your existing Claude Desktop configuration file from above (Linux should pass the correct path to config):\n\nMac:\n\n```shell\nnpx mcp-chat --config \"~/Library/Application Support/Claude/claude_desktop_config.json\"\n```\n\nWindows:\n\n```shell\nnpx mcp-chat --config \"%APPDATA%\\Claude\\claude_desktop_config.json\"\n```\n\n## Features\n\n- [x] Connect to a Kubernetes cluster\n- [x] Unified kubectl API for managing resources\n  - Get or list resources with `kubectl_get`\n  - Describe resources with `kubectl_describe`\n  - List resources with `kubectl_get`\n  - Create resources with `kubectl_create`\n  - Apply YAML manifests with `kubectl_apply`\n  - Delete resources with `kubectl_delete`\n  - Get logs with `kubectl_logs`\n  - Manage kubectl contexts with `kubectl_context`\n  - Explain Kubernetes resources with `explain_resource`\n  - List API resources with `list_api_resources`\n  - Scale resources with `kubectl_scale`\n  - Update field(s) of a resource with `kubectl_patch`\n  - Manage deployment rollouts with `kubectl_rollout`\n  - Execute any kubectl command with `kubectl_generic`\n  - Verify connection with `ping`\n- [x] Advanced operations\n  - Scale deployments with `kubectl_scale` (replaces legacy `scale_deployment`)\n  - Port forward to pods and services with `port_forward`\n  - Run Helm operations\n    - Install, upgrade, and uninstall charts\n    - Support for custom values, repositories, and versions\n    - Template-based installation (`helm_template_apply`) to bypass authentication issues\n    - Template-based uninstallation (`helm_template_uninstall`) to bypass authentication issues\n  - Pod cleanup operations\n    - Clean up problematic pods (`cleanup_pods`) in states: Evicted, ContainerStatusUnknown, Completed, Error, ImagePullBackOff, CrashLoopBackOff\n  - Node management operations\n    - Cordoning, draining, and uncordoning nodes (`node_management`) for maintenance and scaling operations\n- [x] Troubleshooting Prompt (`k8s-diagnose`)\n  - Guides through a systematic Kubernetes troubleshooting flow for pods based on a keyword and optional namespace.\n- [x] Non-destructive mode for read and create/update-only access to clusters\n- [x] Secrets masking for security (masks sensitive data in `kubectl get secrets` commands, does not affect logs)\n\n## Prompts\n\nThe MCP Kubernetes server includes specialized prompts to assist with common diagnostic operations.\n\n### /k8s-diagnose Prompt\n\nThis prompt provides a systematic troubleshooting flow for Kubernetes pods. It accepts a `keyword` to identify relevant pods and an optional `namespace` to narrow the search.\nThe prompt's output will guide you through an autonomous troubleshooting flow, providing instructions for identifying issues, collecting evidence, and suggesting remediation steps.\n\n## Local Development\n\nMake sure that you have [bun installed](https://bun.sh/docs/installation). Clone the repo & install dependencies:\n\n```bash\ngit clone https://github.com/Flux159/mcp-server-kubernetes.git\ncd mcp-server-kubernetes\nbun install\n```\n\n### Development Workflow\n\n1. Start the server in development mode (watches for file changes):\n\n```bash\nbun run dev\n```\n\n2. Run unit tests:\n\n```bash\nbun run test\n```\n\n3. Build the project:\n\n```bash\nbun run build\n```\n\n4. Local Testing with [Inspector](https://github.com/modelcontextprotocol/inspector)\n\n```bash\nnpx @modelcontextprotocol/inspector node dist/index.js\n# Follow further instructions on terminal for Inspector link\n```\n\n5. Local testing with Claude Desktop\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-kubernetes\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/your/mcp-server-kubernetes/dist/index.js\"]\n    }\n  }\n}\n```\n\n6. Local testing with [mcp-chat](https://github.com/Flux159/mcp-chat)\n\n```bash\nbun run chat\n```\n\n## Contributing\n\nSee the [CONTRIBUTING.md](CONTRIBUTING.md) file for details.\n\n## Advanced\n\n### Non-Destructive Mode\n\nYou can run the server in a non-destructive mode that disables all destructive operations (delete pods, delete deployments, delete namespaces, etc.):\n\n```shell\nALLOW_ONLY_NON_DESTRUCTIVE_TOOLS=true npx mcp-server-kubernetes\n```\n\nFor Claude Desktop configuration with non-destructive mode:\n\n```json\n{\n  \"mcpServers\": {\n    \"kubernetes-readonly\": {\n      \"command\": \"npx\",\n      \"args\": [\"mcp-server-kubernetes\"],\n      \"env\": {\n        \"ALLOW_ONLY_NON_DESTRUCTIVE_TOOLS\": \"true\"\n      }\n    }\n  }\n}\n```\n\n### Commands Available in Non-Destructive Mode\n\nAll read-only and resource creation/update operations remain available:\n\n- Resource Information: `kubectl_get`, `kubectl_describe`, `kubectl_logs`, `explain_resource`, `list_api_resources`\n- Resource Creation/Modification: `kubectl_apply`, `kubectl_create`, `kubectl_scale`, `kubectl_patch`, `kubectl_rollout`\n- Helm Operations: `install_helm_chart`, `upgrade_helm_chart`, `helm_template_apply`, `helm_template_uninstall`\n- Connectivity: `port_forward`, `stop_port_forward`\n- Context Management: `kubectl_context`\n\n### Commands Disabled in Non-Destructive Mode\n\nThe following destructive operations are disabled:\n\n- `kubectl_delete`: Deleting any Kubernetes resources\n- `uninstall_helm_chart`: Uninstalling Helm charts\n- `cleanup`: Cleanup of managed resources\n- `cleanup_pods`: Cleaning up problematic pods\n- `node_management`: Node management operations (can drain nodes)\n- `kubectl_generic`: General kubectl command access (may include destructive operations)\n\nFor additional advanced features, see the [ADVANCED_README.md](ADVANCED_README.md) and also the [docs](https://github.com/Flux159/mcp-server-kubernetes/tree/main/docs) folder for specific information on `helm_install`, `helm_template_apply`, node management & pod cleanup.\n\n## Architecture\n\nSee this [DeepWiki link](https://deepwiki.com/Flux159/mcp-server-kubernetes) for a more indepth architecture overview created by Devin.\n\nThis section describes the high-level architecture of the MCP Kubernetes server.\n\n### Request Flow\n\nThe sequence diagram below illustrates how requests flow through the system:\n\n```mermaid\nsequenceDiagram\n    participant Client\n    participant Transport as Transport Layer\n    participant Server as MCP Server\n    participant Filter as Tool Filter\n    participant Handler as Request Handler\n    participant K8sManager as KubernetesManager\n    participant K8s as Kubernetes API\n\n    Note over Transport: StdioTransport or<br>SSE Transport\n\n    Client->>Transport: Send Request\n    Transport->>Server: Forward Request\n\n    alt Tools Request\n        Server->>Filter: Filter available tools\n        Note over Filter: Remove destructive tools<br>if in non-destructive mode\n        Filter->>Handler: Route to tools handler\n\n        alt kubectl operations\n            Handler->>K8sManager: Execute kubectl operation\n            K8sManager->>K8s: Make API call\n        else Helm operations\n            Handler->>K8sManager: Execute Helm operation\n            K8sManager->>K8s: Make API call\n        else Port Forward operations\n            Handler->>K8sManager: Set up port forwarding\n            K8sManager->>K8s: Make API call\n        end\n\n        K8s-->>K8sManager: Return result\n        K8sManager-->>Handler: Process response\n        Handler-->>Server: Return tool result\n    else Resource Request\n        Server->>Handler: Route to resource handler\n        Handler->>K8sManager: Get resource data\n        K8sManager->>K8s: Query API\n        K8s-->>K8sManager: Return data\n        K8sManager-->>Handler: Format response\n        Handler-->>Server: Return resource data\n    end\n\n    Server-->>Transport: Send Response\n    Transport-->>Client: Return Final Response\n```\n\nSee this [DeepWiki link](https://deepwiki.com/Flux159/mcp-server-kubernetes) for a more indepth architecture overview created by Devin.\n\n## Publishing new release\n\nGo to the [releases page](https://github.com/Flux159/mcp-server-kubernetes/releases), click on \"Draft New Release\", click \"Choose a tag\" and create a new tag by typing out a new version number using \"v{major}.{minor}.{patch}\" semver format. Then, write a release title \"Release v{major}.{minor}.{patch}\" and description / changelog if necessary and click \"Publish Release\".\n\nThis will create a new tag which will trigger a new release build via the cd.yml workflow. Once successful, the new release will be published to [npm](https://www.npmjs.com/package/mcp-server-kubernetes). Note that there is no need to update the package.json version manually, as the workflow will automatically update the version number in the package.json file & push a commit to main.\n\n## Not planned\n\nAdding clusters to kubectx.\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=Flux159/mcp-server-kubernetes&type=Date)](https://www.star-history.com/#Flux159/mcp-server-kubernetes&Date)\n\n## 🖊️ Cite\n\nIf you find this repo useful, please cite:\n\n```\n@software{Patel_MCP_Server_Kubernetes_2024,\nauthor = {Patel, Paras and Sonwalkar, Suyog},\nmonth = jul,\ntitle = {{MCP Server Kubernetes}},\nurl = {https://github.com/Flux159/mcp-server-kubernetes},\nversion = {2.5.0},\nyear = {2024}\n}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kubernetes",
        "cloud",
        "pods",
        "platforms cloud",
        "cloud platforms",
        "kubernetes cluster"
      ],
      "category": "cloud-platforms"
    },
    "jdubois--azure-cli-mcp": {
      "owner": "jdubois",
      "name": "azure-cli-mcp",
      "url": "https://github.com/jdubois/azure-cli-mcp",
      "imageUrl": "",
      "description": "A wrapper around the Azure CLI command line that allows you to talk directly to Azure",
      "stars": 81,
      "forks": 17,
      "license": "MIT License",
      "language": "Java",
      "updated_at": "2025-09-19T00:58:31Z",
      "readme_content": "# Azure CLI MCP Server\n\nThe Azure CLI MCP Server is an [MCP Server](https://modelcontextprotocol.io) that wraps the [Azure CLI](https://learn.microsoft.com/en-us/cli/azure/), adds a nice prompt to improve how it works, and exposes it.\n\n> [!IMPORTANT]\n> The @Azure organization offers an official Azure MCP server, which uses the code from this Azure CLI MCP server. As it's an official server, maintained by Microsoft, we recommend to use it unless you have specific resource contraints (the Azure CLI MCP Server uses less resources as it does less, and as it can be packaged with GraalVM), or if you're a Java developer and want to tweak the prompts. You can find more details at its [Getting started documentation](https://learn.microsoft.com/en-us/azure/developer/azure-mcp-server/get-started) or at the [Azure MCP Server repository](https://github.com/Azure/azure-mcp).\n\n## Demos\n\n### Short 2-minute demo with Claude Desktop\n\n[![Short Demo](https://img.youtube.com/vi/y_OexCcfhW0/0.jpg)](https://www.youtube.com/watch?v=y_OexCcfhW0)\n\n### Complete 18-minute demo with VS Code\n\n[![Complete Demo](https://img.youtube.com/vi/NZxTr32A9lY/0.jpg)](https://www.youtube.com/watch?v=NZxTr32A9lY)\n\n## What can it do?\n\nIt has access to the full Azure CLI, so it can do anything the Azure CLI can do. Here are a few scenarios:\n\n- Listing your resources and checking their configuration. For example, you can get the rate limits of a model deployed\n  to Azure OpenAI.\n- Fixing some configuration or security issues. For example, you can ask it to secure a Blob Storage account.\n- Creating resources. For example, you can ask it to create an Azure Container Apps instance, an Azure Container Registry, and connect them using managed identity.\n\n## Is it safe to use?\n\nAs the MCP server is driven by an LLM, we would recommend to be careful and validate the commands it generates. Then, if\nyou're using a good LLM like Claude 4 or GPT-4o, which has\nexcellent training data on Azure, our experience has been very good.\n\nPlease read our [License](LICENSE) which states that \"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND\",\nso you use this MCP server at your own risk.\n\n## Is it secured, and should I run this on a remote server?\n\nShort answer: **NO**.\n\nThis MCP server runs `az` commands for you, and could be hacked by an attacker to run any other command. It's supposed\nto run locally on your machine,\nusing your Azure CLI credentials, as you would do by yourself.\n\nThis server uses the `http` transport, and an Azure token authentication, so that it could be used remotely by different\npersons. It's probably not a good idea to do this, as it would expose your Azure resources to the internet.\n\n## How do I install it?\n\n_This server can run inside a Docker container or as a Java executable JAR file._\n\nBy default, the server runs on port `8085`, and this can be configured using the usual Spring Boot configuration options\nfor configuring the server port (for example, using the `SERVER_PORT=8085` environment variable).\n\n### Install and configure the server with Docker\n\nCreate an Azure Service Principal and set the `AZURE_CREDENTIALS` environment variable. You can do this by running the\nfollowing command in your terminal:\n\n```bash\naz ad sp create-for-rbac --name \"azure-cli-mcp\" --role contributor --scopes /subscriptions/<your-subscription-id>/resourceGroups/<your-resource-group> --json-auth\n```\n\nThis will create a new Service Principal with the specified name and role, and output the credentials in JSON format.\n\nYou can then run the server using Docker with the following command. To authenticate, set the `AZURE_CREDENTIALS` with\nthe output of the previous command.\n\n```bash\ndocker run --rm -p 8085:8085 -e AZURE_CREDENTIALS=\"{\"clientId\":\"....\",\"clientSecret\":\"....\",...}\" -it ghcr.io/jdubois/azure-cli-mcp:latest\n```\n\n### Install and configure the server with Java\n\nThis configuration is running the server locally. It's easier to set up than with Docker,\nbut it's less secured as it uses directly your credentials using the Azure CLI configured on your machine.\n\n- Install the Azure CLI: you can do this by following the\n  instructions [here](https://learn.microsoft.com/en-us/cli/azure/install-azure-cli).\n- Authenticate to your Azure account. You can do this by running `az login` in your terminal.\n- Make sure you have Java 17 or higher installed. You can check this by running `java -version` in your terminal.\n\nBinaries are available on the [GitHub Release page](https://github.com/jdubois/azure-cli-mcp/releases), here's how you\ncan download the latest one with the GitHub CLI:\n\n- Download the latest release: `gh release download --repo jdubois/azure-cli-mcp --pattern='azure-cli-mcp.jar'`\n\nThis MCP server is a Spring Boot application, which can be run using the classical Spring Boot commands, for example\nwith Maven:\n\n```bash\nmvn spring-boot:run\n```\n\n## Using the MCP Server from VS Code\n\nTo use the server from VS Code:\n\n- Install GitHub Copilot\n- Install this MCP Server using the command palette: `MCP: Add Server...`\n    - The configuration connects to the server using the `http` transport\n    - You need to have the server running as described above.\n- Configure GitHub Copilot to run in `Agent` mode, by clicking on the arrow at the bottom of the the chat window\n- On top of the chat window, you should see the `azure-cli-mcp` server configured as a tool\n\nHere is a configuration example:\n\n```json\n{\n  \"servers\": {\n    \"azure-cli-http\": {\n      \"url\": \"http://localhost:8085/mcp\",\n      \"type\": \"http\"\n    }\n  },\n  \"inputs\": []\n}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "azure",
        "cloud",
        "platform",
        "azure cli",
        "jdubois azure",
        "cloud platforms"
      ],
      "category": "cloud-platforms"
    },
    "johnneerdael--netskope-mcp": {
      "owner": "johnneerdael",
      "name": "netskope-mcp",
      "url": "https://github.com/johnneerdael/netskope-mcp",
      "imageUrl": "",
      "description": "An MCP to give access to all Netskope Private Access components within a Netskope Private Access environments including detailed setup information and LLM examples on usage.",
      "stars": 3,
      "forks": 5,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-03T22:13:17Z",
      "readme_content": "# Netskope NPA MCP Server\n\nA comprehensive Model Context Protocol (MCP) server for managing Netskope Private Access (NPA) infrastructure through AI-powered automation.\n\n## 📚 Complete Documentation\n\nThis project includes extensive documentation organized for easy navigation:\n\n**👉 [Start with the Complete Documentation](./docs/README.md)** - Overview and navigation guide\n\n### Quick Access Links\n\n| Category | Description | Link |\n|----------|-------------|------|\n| **🏗️ Architecture** | Server design and patterns | [Server Architecture](./docs/architecture/server-architecture.md) |\n| **🛠️ Tools Reference** | Complete tool documentation | [Publisher Tools](./docs/tools/publisher-tools.md), [Private App Tools](./docs/tools/private-app-tools.md), [Policy Tools](./docs/tools/policy-tools.md) |\n| **🔄 Workflows** | Common automation patterns | [Common Workflows](./docs/workflows/common-workflows.md) |\n| **💼 Real Examples** | Complete use cases | [Real-World Examples](./docs/examples/real-world-examples.md) |\n\n## Tool Overview\n\nThe MCP server provides **84 specialized tools** across 10 categories:\n\n| Category | Tools | Primary Use Cases |\n|----------|-------|------------------|\n| **Publishers** | 9 tools | Infrastructure deployment and management |\n| **Private Apps** | 15 tools | Application lifecycle and configuration |\n| **Local Brokers** | 7 tools | Network connectivity and routing |\n| **Policy Management** | 6 tools | Access control and security rules |\n| **SCIM Integration** | 5 tools | Identity and user management |\n| **Upgrade Profiles** | 7 tools | Automated maintenance scheduling |\n| **Steering** | 3 tools | Traffic routing and associations |\n| **Alerts** | 2 tools | Event monitoring and notifications |\n| **Search** | 2 tools | Resource discovery and querying |\n| **Validation** | 2 tools | Configuration compliance |\n\n## Real-World Usage Examples\n\n### 🏢 \"Set up complete NPA infrastructure for our new London office\"\n**AI Response**: Executes comprehensive deployment workflow\n- ✅ Creates publisher with auto-upgrade profile\n- ✅ Configures local broker for internal routing  \n- ✅ Sets up core business applications (CRM, ERP, File Server)\n- ✅ Creates access policies with SCIM group validation\n- ✅ Enables monitoring and discovery for office network\n- ✅ Generates registration token for field deployment\n\n### 🚨 \"URGENT: Security incident - lock down HR/Finance apps immediately\"\n**AI Response**: Emergency security response workflow\n- ✅ Identifies all HR/Finance applications automatically\n- ✅ Creates emergency policy group with highest priority\n- ✅ Blocks access for all users except incident response team\n- ✅ Enhances monitoring for security events\n- ✅ Tags applications for incident tracking\n\n### 📊 \"Perform comprehensive compliance audit of our NPA environment\"\n**AI Response**: Automated compliance assessment\n- ✅ Audits all publishers for version compliance\n- ✅ Identifies applications without access policies\n- ✅ Validates SCIM group references in policies\n- ✅ Generates compliance score and remediation plan\n- ✅ Creates detailed findings report with priorities\n\n## Quick Start\n\n1. **Environment Setup**\n   ```bash\n   export NETSKOPE_BASE_URL=\"https://your-tenant.goskope.com\"\n   export NETSKOPE_TOKEN=\"your-api-token\"\n   ```\n\n2. **Install and Run**\n   ```bash\n   npm install\n   npm run build\n   npm start\n   ```\n\n3. **Connect via MCP Client**\n   ```json\n   {\n     \"mcpServers\": {\n       \"netskope-npa\": {\n         \"command\": \"node\",\n         \"args\": [\"/path/to/ns-private-access-mcp/build/index.js\"],\n         \"env\": {\n           \"NETSKOPE_BASE_URL\": \"https://your-tenant.goskope.com\",\n           \"NETSKOPE_TOKEN\": \"your-api-token\"\n         }\n       }\n     }\n   }\n   ```\n\n## Key Features\n\n### 🤖 AI-Native Design\n- Tools designed for LLM interaction with clear descriptions\n- Automatic parameter validation and transformation\n- Rich error context for troubleshooting\n\n### 🔄 Workflow Orchestration\n- Tools automatically coordinate with each other\n- Built-in retry logic and error recovery\n- Transactional operations where possible\n\n### 🛡️ Production Ready\n- Comprehensive input validation using Zod schemas\n- Rate limiting and API quota management\n- Detailed logging and monitoring\n\n### 🔗 Integration Patterns\n- SCIM integration for identity resolution\n- Search tools for resource discovery\n- Validation tools for compliance checking\n\n## Installation Options\n\n### NPM Package\n```bash\nnpm install @johnneerdael/ns-private-access-mcp\n```\n\n### Local Development\n```bash\ngit clone https://github.com/johnneerdael/ns-private-access-mcp.git\ncd ns-private-access-mcp\nnpm install\nnpm run build\n```\n\n## Architecture Highlights\n\n### Tool Composition\nTools are designed to work together through well-defined interfaces:\n\n```typescript\n// Example: Creating a private app with validation and tagging\n1. validateName() -> Check app name compliance\n2. searchPublishers() -> Find target publisher\n3. createPrivateApp() -> Create the application  \n4. createPrivateAppTags() -> Add organizational tags\n5. updatePublisherAssociation() -> Associate with publishers\n```\n\n### Schema-Driven Validation\nEvery tool uses Zod schemas for type safety and validation:\n\n```typescript\nconst createAppSchema = z.object({\n  app_name: z.string().min(1).max(64),\n  host: z.string().url(),\n  protocols: z.array(protocolSchema),\n  clientless_access: z.boolean()\n});\n```\n\n### Error Resilience\nBuilt-in patterns for handling common issues:\n- Automatic parameter extraction from MCP objects\n- Retry logic with exponential backoff\n- Graceful degradation for partial failures\n\n## Credits\n\n- **John Neerdael** (Netskope Private Access Product Manager)  \n- **Mitchell Pompe** (Chief Netskope Solutions Engineer for NL)\n\n## Getting Help\n\n- **Documentation Issues**: Open an issue on GitHub\n- **Feature Requests**: Create a feature request issue\n- **Bug Reports**: Use the bug report template\n- **Security Issues**: See [SECURITY.md](./docs/SECURITY.md)\n\n---\n\n*This MCP server transforms complex Netskope NPA management into simple, AI-driven conversations.*\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "netskope",
        "cloud",
        "platform",
        "platforms cloud",
        "cloud platforms",
        "cloud platform"
      ],
      "category": "cloud-platforms"
    },
    "kestra-io--mcp-server-python": {
      "owner": "kestra-io",
      "name": "mcp-server-python",
      "url": "https://github.com/kestra-io/mcp-server-python",
      "imageUrl": "",
      "description": "Implementation of MCP server for [Kestra](https://kestra.io) workflow orchestration platform.",
      "stars": 13,
      "forks": 1,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-02T22:59:38Z",
      "readme_content": "## Kestra Python MCP Server\n\nYou can run the MCP Server in a Docker container. This is useful if you want to avoid managing Python environments or dependencies on your local machine.\n\n### Using Kestra AI Agent\n\nSee [kestra_mcp_docker](docs/flows/kestra_mcp_docker.yaml).\n\n### Minimal configuration for OSS users\n\nPaste the following configuration into your MCP settings (e.g., Cursor, Claude, or VS Code):\n\n```json\n{\n  \"mcpServers\": {\n    \"kestra\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"--pull\",\n        \"always\",\n        \"-e\",\n        \"KESTRA_BASE_URL\",\n        \"-e\",\n        \"KESTRA_TENANT_ID\",\n        \"-e\",\n        \"KESTRA_MCP_DISABLED_TOOLS\",\n        \"-e\",\n        \"KESTRA_MCP_LOG_LEVEL\",\n        \"-e\",\n        \"KESTRA_USERNAME\",\n        \"-e\",\n        \"KESTRA_PASSWORD\",\n        \"ghcr.io/kestra-io/mcp-server-python:latest\"\n      ],\n      \"env\": {\n        \"KESTRA_BASE_URL\": \"http://host.docker.internal:8080/api/v1\",\n        \"KESTRA_TENANT_ID\": \"main\",\n        \"KESTRA_MCP_DISABLED_TOOLS\": \"ee\",\n        \"KESTRA_MCP_LOG_LEVEL\": \"ERROR\",\n        \"KESTRA_USERNAME\": \"admin@kestra.io\",\n        \"KESTRA_PASSWORD\": \"your_password\"\n      }\n    }\n  }\n}\n```\n\n### Minimal configuration for EE users\n\n```json\n{\n  \"mcpServers\": {\n    \"kestra\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"--pull\",\n        \"always\",\n        \"-e\", \"KESTRA_BASE_URL\",\n        \"-e\", \"KESTRA_API_TOKEN\",\n        \"-e\", \"KESTRA_TENANT_ID\",\n        \"-e\", \"KESTRA_MCP_LOG_LEVEL\",\n        \"ghcr.io/kestra-io/mcp-server-python:latest\"\n      ],\n      \"env\": {\n        \"KESTRA_BASE_URL\": \"http://host.docker.internal:8080/api/v1\",\n        \"KESTRA_API_TOKEN\": \"<your_kestra_api_token>\",\n        \"KESTRA_TENANT_ID\": \"main\",\n        \"KESTRA_MCP_LOG_LEVEL\": \"ERROR\"\n      }\n    }\n  }\n}\n```\n\n### Detailed Configuration using Docker\n\n```json\n{\n  \"mcpServers\": {\n    \"kestra\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"--pull\",\n        \"always\",\n        \"-e\", \"KESTRA_BASE_URL\",\n        \"-e\", \"KESTRA_API_TOKEN\",\n        \"-e\", \"KESTRA_TENANT_ID\",\n        \"-e\", \"KESTRA_USERNAME\",\n        \"-e\", \"KESTRA_PASSWORD\",\n        \"-e\", \"KESTRA_MCP_DISABLED_TOOLS\",\n        \"-e\", \"KESTRA_MCP_LOG_LEVEL\",\n        \"ghcr.io/kestra-io/mcp-server-python:latest\"\n      ],\n      \"env\": {\n        \"KESTRA_BASE_URL\": \"http://host.docker.internal:8080/api/v1\",\n        \"KESTRA_API_TOKEN\": \"<your_kestra_api_token>\",\n        \"KESTRA_TENANT_ID\": \"main\",\n        \"KESTRA_USERNAME\": \"admin\",\n        \"KESTRA_PASSWORD\": \"admin\",\n        \"KESTRA_MCP_DISABLED_TOOLS\": \"ee\",\n        \"KESTRA_MCP_LOG_LEVEL\": \"ERROR\"\n      }\n    }\n  }\n}\n```\n\n**Notes:**\n- Replace `<your_kestra_api_token>`, `<your_google_api_key>`, and `<your_helicone_api_key>` with your actual credentials.\n- For OSS installations, you can use `KESTRA_USERNAME` and `KESTRA_PASSWORD` instead of `KESTRA_API_TOKEN`.\n- To disable Enterprise Edition tools in OSS, set `KESTRA_MCP_DISABLED_TOOLS=ee`.\n- The `host.docker.internal` hostname allows the Docker container to access services running on your host machine (such as the Kestra API server on port 8080). This works on macOS and Windows. On Linux, you may need to use the host network mode or set up a custom bridge.\n- The `-e` flags pass environment variables from your MCP configuration into the Docker container. \n\n---\n\n### Available Tools\n\n- 🔄 backfill\n- ⚙️ ee (Enterprise Edition tools)\n- ▶️ execution\n- 📁 files\n- 🔀 flow\n- 🗝️ kv\n- 🌐 namespace\n- 🔁 replay\n- ♻️ restart\n- ⏸️ resume\n\n**Note:** The `ee` tool group contains Enterprise Edition specific functionality and is only available in EE/Cloud editions. For OSS users, you can disable EE tools by adding `KESTRA_MCP_DISABLED_TOOLS=ee` to your `.env` file.\n\nOptionally, you can include `KESTRA_MCP_DISABLED_TOOLS` in your `.env` file listing the tools that you prefer to disable. For example, if you want to disable Namespace Files tools, add this to your `.env` file:\n\n```dotenv\nKESTRA_MCP_DISABLED_TOOLS=files\n```\n\nTo disable multiple tools, separate them with comma:\n\n```dotenv\nKESTRA_MCP_DISABLED_TOOLS=ee\n```\n\n### Logging Configuration\n\nBy default, the MCP server only logs ERROR level messages to minimize noise. You can control the logging level using the `KESTRA_MCP_LOG_LEVEL` environment variable:\n\n```dotenv\n# Only show ERROR messages (default)\nKESTRA_MCP_LOG_LEVEL=ERROR\n\n# Show WARNING and ERROR messages\nKESTRA_MCP_LOG_LEVEL=WARNING\n\n# Show INFO, WARNING, and ERROR messages\nKESTRA_MCP_LOG_LEVEL=INFO\n\n# Show all messages including DEBUG\nKESTRA_MCP_LOG_LEVEL=DEBUG\n```\n\nWhen using Docker, add the environment variable to your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"kestra\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"--pull\",\n        \"always\",\n        \"-e\", \"KESTRA_BASE_URL\",\n        \"-e\", \"KESTRA_MCP_LOG_LEVEL\",\n        \"ghcr.io/kestra-io/mcp-server-python:latest\"\n      ],\n      \"env\": {\n        \"KESTRA_BASE_URL\": \"http://host.docker.internal:8080/api/v1\",\n        \"KESTRA_MCP_LOG_LEVEL\": \"ERROR\"\n      }\n    }\n  }\n}\n```\n\n---\n\n### Local development\n\nTo run the MCP Server for Kestra locally (e.g. if you want to extend it with new tools), make sure to create a virtual environment first:\n\n```bash\nuv venv --python 3.13\nuv pip install -r requirements.txt\n```\n\nCreate an `.env` file in the root directory of the project similar to the [.env_example](.env_example) file. For OSS installations, you can use basic authentication with `KESTRA_USERNAME` and `KESTRA_PASSWORD`. For EE/Cloud installations, use `KESTRA_API_TOKEN`. To disable Enterprise Edition tools in OSS, add `KESTRA_MCP_DISABLED_TOOLS=ee` to your `.env` file.\n\nThen, follow the instructions below explaining how to test your local server in Cursor, Windsurf, VS Code or Claude Desktop.\n\n---\n\n### Usage in Cursor, Windsurf, VS Code or Claude Desktop\n\nTo use the Python MCP Server with Claude or modern IDEs, first check what is the path to uv on your machine:\n\n```bash\nwhich uv\n```\n\nCopy the path returned by `which uv` and paste it into the `command` section.\nThen, replace the `--directory` by the path where you cloned the Kestra MCP Server repository. For example:\n\n```json\n{\n  \"mcpServers\": {\n    \"kestra\": {\n      \"command\": \"/Users/annageller/.local/bin/uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/annageller/gh/mcp-server-python/src\",\n        \"run\",\n        \"server.py\"\n      ]\n    }\n  }\n}\n```\n\nYou can paste that in the Cursor MCP settings or Claud Developer settings.\n\n### VS Code setup\n\nIn your VS Code project directory, add a folder `.vscode` and within that folder, create a file called `mcp.json`. Paste your MCP configuration into that file (note that in VS Code, the key is `servers` instead of `mcpServers`):\n\n```json\n{\n  \"servers\": {\n    \"kestra\": {\n      \"command\": \"/Users/annageller/.local/bin/uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/annageller/gh/mcp-server-python/src\",\n        \"run\",\n        \"server.py\"\n      ]\n    }\n  }\n}\n```\n\nA small `Start` button should show up, click on it to start the server.\n\n![img.png](docs/images/vscode1.png)\n\nIf you now navigate to the GitHub Copilot tab and switch to the Agent mode, you will be able to directly interact with the Kestra MCP Server tools. For example, try typing the prompt: \"List all flows in the tutorial namespace\".\n\n![img_1.png](docs/images/vscode2.png)\n\nIf you click on continue, you will see the result of the command in the output window.\n\n![img_2.png](docs/images/vscode3.png)\n\n### FAQ\n\n**Question: Do I have to manually start the server as an always-on process?**\n\nNo, you don't have to run the server manually, as when using the `stdio` transport, the AI IDEs/chat-interfaces (Cursor, Windsurf, VS Code or Claude Desktop) launch the MCP server as a subprocess. This subprocess communicates with AI IDEs via JSON-RPC messages over standard input and output streams. The server receives messages through stdin and sends responses through stdout.\n\n**Question: Do I have to manually activate the virtual environment for the MCP Server?**\n\nNo, because we use `uv`. Unlike traditional Python package managers, where virtual environment activation modifies shell variables like `PATH`, `uv` directly uses the Python interpreter and packages from the `.venv` directory without requiring environment variables to be set first. Just make sure you have created a uv virtual environment with `uv venv` and installed the required packages with `uv pip install` as described in the previous section.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cloud",
        "platform",
        "platforms",
        "cloud platforms",
        "cloud platform",
        "platforms cloud"
      ],
      "category": "cloud-platforms"
    },
    "manusa--Kubernetes-MCP-Server": {
      "owner": "manusa",
      "name": "Kubernetes-MCP-Server",
      "url": "https://github.com/manusa/kubernetes-mcp-server",
      "imageUrl": "",
      "description": "powerful Kubernetes MCP server with additional support for OpenShift. Besides providing CRUD operations for **any** Kubernetes resource, this server provides specialized tools to interact with your cluster.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kubernetes",
        "cloud",
        "platforms",
        "cloud platforms",
        "cloud platform",
        "platforms cloud"
      ],
      "category": "cloud-platforms"
    },
    "openstack-kr--python-openstackmcp-server": {
      "owner": "openstack-kr",
      "name": "python-openstackmcp-server",
      "url": "https://github.com/openstack-kr/python-openstackmcp-server",
      "imageUrl": "",
      "description": "OpenStack MCP server for cloud infrastructure management based on openstacksdk.",
      "stars": 14,
      "forks": 6,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-02T22:59:42Z",
      "readme_content": "# python-openstackmcp-server\n\nOpenstack mcp server is a [Model Context Protocol (MCP)](https://modelcontextprotocol.io/docs/getting-started/intro) server that provides an interface for AI assistants to interact with OpenStack services.\n\n```mermaid\nflowchart LR\n    AI[AI Assistant] <-->|MCP Protocol| Server[OpenStack MCP Server]\n    Server <-->|OpenStack SDK| SDK[OpenStack SDK]\n    SDK <-->|REST API| Cloud[OpenStack Cloud]\n```\n\n# Table of Contents\n- [Table of Contents](#table-of-contents)\n- [Features](#features)\n- [Quick Start with Claude Desktop](#quick-start-with-claude-desktop)\n  - [Requirements](#requirements)\n  - [Using python](#using-python)\n  - [Using uvx](#using-uvx)\n  - [Contributing](#contributing)\n  - [License](#license)\n\n# Features\n- **MCP Protocol Support**: Implements the Model Context Protocol for AI assistants.\n- **Compute Tools**: Manage OpenStack compute resources (servers, flavors).\n- **Image Tools**: Manage OpenStack images.\n- **Identity Tools**: Handle OpenStack identity and authentication.\n- **Network Tools**: Manage OpenStack networking resources.\n- **Block Storage Tools**: Manage OpenStack block storage resources.\n\n# Quick Start with Claude Desktop\n\nGet started quickly with the OpenStack MCP server using Claude Desktop\n\n## Requirements\n- Python 3.10 or higher\n- OpenStack credentials configured in `clouds.yaml` file\n- Claude Desktop installed\n\n1. **Create or update your `clouds.yaml` file with your OpenStack credentials.**\n   \n   Example `clouds.yaml`:\n   ```yaml\n   clouds:\n     openstack:\n       auth:\n         auth_url: https://your-openstack-auth-url.com\n         username: your-username\n         password: your-password\n         project_name: your-project-name\n         user_domain_name: Default\n         project_domain_name: Default\n       region_name: your-region\n       interface: public\n       identity_api_version: 3\n   ```\n\n2. **Create or update your Claude Desktop configuration file**:\n   - **macOS**: Edit `$HOME/Library/Application Support/Claude/claude_desktop_config.json`\n   - **Windows**: Edit `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - **Linux**: Edit `$HOME/.config/Claude/claude_desktop_config.json`\n   \n### Using python\n \n   ```json\n   {\n     \"mcpServers\": {\n       \"openstack-mcp-server\": {\n         \"command\": \"/path/to/your/python\",\n         \"args\": [\n           \"python-openstackmcp-server\"\n         ],\n         \"env\" : {\n           \"OS_CLIENT_CONFIG_FILE\": \"/path/to/your/clouds.yaml\"\n         }\n       }\n     }\n   }\n   ```\n\n### Using uvx\n  \n   ```json\n   {\n     \"mcpServers\": {\n       \"openstack-mcp-server\": {\n         \"command\": \"uvx\",\n         \"args\": [\n           \"python-openstackmcp-server\"\n         ],\n         \"env\" : {\n           \"OS_CLIENT_CONFIG_FILE\": \"/path/to/your/clouds.yaml\"\n         }\n       }\n     }\n   }\n   ```\n\n# Contributing\nContributions are welcome! Please see the [CONTRIBUTING](CONTRIBUTING.rst) file for details on how to contribute to this project.\n\n# License\nThis project is licensed under the Apache License 2.0. See the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "openstackmcp",
        "openstack",
        "cloud",
        "cloud platforms",
        "cloud platform",
        "platforms cloud"
      ],
      "category": "cloud-platforms"
    },
    "pibblokto--cert-manager-mcp-server": {
      "owner": "pibblokto",
      "name": "cert-manager-mcp-server",
      "url": "https://github.com/pibblokto/cert-manager-mcp-server",
      "imageUrl": "",
      "description": "mcp server for [cert-manager](https://github.com/cert-manager/cert-manager) management and troubleshooting",
      "stars": 16,
      "forks": 1,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-02T22:59:46Z",
      "readme_content": "# cert-manager-mcp-server\nMCP server for management and troubleshooting of certificates and other resources managed by [cert-manager](https://github.com/cert-manager/cert-manager). \n\n\nClaude Desktop config:\n```json\n{\n  \"mcpServers\": {\n    \"cert-manager-mcp-server\": {\n      \"command\": \"sh\",\n      \"args\": [\n        \"-c\",\n        \"docker run -i --rm -v ~/.kube:/home/app/.kube:ro -v ~/.config/gcloud:/home/app/.config/gcloud piblokto/cert-manager-mcp-server:v0.0.5\"\n      ]\n    }\n  }\n}\n```\n\nClaude Desktop config for GKE clusters:\n```json\n{\n  \"mcpServers\": {\n    \"cert-manager-mcp-server\": {\n      \"command\": \"sh\",\n      \"args\": [\n        \"-c\",\n        \"docker run -i --rm -v ~/.kube:/home/app/.kube:ro -v ~/.config/gcloud:/home/app/.config/gcloud -e CLOUDSDK_CORE_PROJECT=<DEFAULT_PROJECT_ID> -e CLOUDSDK_COMPUTE_REGION=<DEFAULT_COMPUTE_REGION> piblokto/cert-manager-mcp-server:v0.0.5\"\n      ]\n    }\n  }\n}\n```\n\n# Tools\n\nThis MCP server provides the following tools for interacting with cert-manager and Kubernetes resources:\n\n## Certificate Management\n- **list_certificates** - List certificates within a namespace or across all namespaces, with options for filtering expired certificates and pagination. You can also include domains for listed certificates with include_domains argument (defaults to False to make responses more compact)\n- **get_certificate** - Get detailed information about a specific certificate\n- **renew_certificate** - Force renewal of a certificate\n\n## Issuer Management\n- **list_issuers** - List issuers or cluster issuers with their statuses and configuration. Unlike **list_certificates** there are no pagination or filtering except for cluster/namespaced issuers and namespaces for Issuers.\n\n## Kubernetes Context Management\n- **list_namespaces** - List all namespaces in the cluster\n- **list_contexts** - List all available kubeconfig contexts\n- **get_current_context** - Get the currently active kubeconfig context\n- **switch_context** - Switch to a different kubeconfig context. Updates in-memory config\n\n## Available Tools\n\n| Tool Name | Description | Read-Only | Parameters |\n|-----------|-------------|-----------|------------|\n| `list_certificates` | List certificates within a namespace or all namespaces, with filtering and pagination options | ✅ | `namespace_name`, `all_namespaces`, `include_domains`, `list_expired`, `cursor`, `page_size` |\n| `get_certificate` | Get detailed information about a specific certificate | ✅ | `namespace_name`, `certificate_name` |\n| `renew_certificate` | Force renewal of a certificate in a given namespace | ❌ | `namespace_name`, `certificate_name` |\n| `list_issuers` | List issuers or cluster issuers with their statuses and configuration | ✅ | `list_cluster_issuers`, `all_namespaces`, `namespace_name` |\n| `list_namespaces` | List all namespaces in the cluster | ✅ | None |\n| `list_contexts` | List all available kubeconfig contexts | ✅ | None |\n| `get_current_context` | Get the currently active kubeconfig context | ✅ | None |\n| `switch_context` | Switch to a different kubeconfig context | ✅ | `ctx` |\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cert",
        "cloud",
        "pibblokto",
        "cert manager",
        "cloud platforms",
        "cloud platform"
      ],
      "category": "cloud-platforms"
    },
    "portainer--portainer-mcp": {
      "owner": "portainer",
      "name": "portainer-mcp",
      "url": "https://github.com/portainer/portainer-mcp",
      "imageUrl": "",
      "description": "A powerful MCP server that enables AI assistants to seamlessly interact with Portainer instances, providing natural language access to container management, deployment operations, and infrastructure monitoring capabilities.",
      "stars": 68,
      "forks": 15,
      "license": "zlib License",
      "language": "Go",
      "updated_at": "2025-10-04T02:42:28Z",
      "readme_content": "# Portainer MCP\n[![Go Report Card](https://goreportcard.com/badge/github.com/portainer/portainer-mcp)](https://goreportcard.com/report/github.com/portainer/portainer-mcp)\n![coverage](https://raw.githubusercontent.com/portainer/portainer-mcp/badges/.badges/main/coverage.svg)\n\nEver wished you could just ask Portainer what's going on?\n\nNow you can! Portainer MCP connects your AI assistant directly to your Portainer environments. Manage Portainer resources such as users and environments, or dive deeper by executing any Docker or Kubernetes command directly through the AI.\n\n![portainer-mcp-demo](https://downloads.portainer.io/mcp-demo5.gif)\n\n## Overview\n\nPortainer MCP is a work in progress implementation of the [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) for Portainer environments. This project aims to provide a standardized way to connect Portainer's container management capabilities with AI models and other services.\n\nMCP (Model Context Protocol) is an open protocol that standardizes how applications provide context to LLMs (Large Language Models). Similar to how USB-C provides a standardized way to connect devices to peripherals, MCP provides a standardized way to connect AI models to different data sources and tools.\n\nThis implementation focuses on exposing Portainer environment data through the MCP protocol, allowing AI assistants and other tools to interact with your containerized infrastructure in a secure and standardized way.\n\n> [!NOTE]\n> This tool is designed to work with specific Portainer versions. If your Portainer version doesn't match the supported version, you can use the `--disable-version-check` flag to attempt connection anyway. See [Portainer Version Support](#portainer-version-support) for compatible versions and [Disable Version Check](#disable-version-check) for bypass instructions.\n\nSee the [Supported Capabilities](#supported-capabilities) sections for more details on compatibility and available features.\n\n*Note: This project is currently under development.*\n\nIt is currently designed to work with a Portainer administrator API token.\n\n## Installation\n\nYou can download pre-built binaries for Linux (amd64, arm64) and macOS (arm64) from the [**Latest Release Page**](https://github.com/portainer/portainer-mcp/releases/latest). Find the appropriate archive for your operating system and architecture under the \"Assets\" section.\n\n**Download the archive:**\nYou can usually download this directly from the release page. Alternatively, you can use `curl`. Here's an example for macOS (ARM64) version `v0.2.0`:\n\n```bash\n# Example for macOS (ARM64) - adjust version and architecture as needed\ncurl -Lo portainer-mcp-v0.2.0-darwin-arm64.tar.gz https://github.com/portainer/portainer-mcp/releases/download/v0.2.0/portainer-mcp-v0.2.0-darwin-arm64.tar.gz\n```\n\n(Linux AMD64 binaries are also available on the release page.)\n\n**(Optional but recommended) Verify the checksum:**\nFirst, download the corresponding `.md5` checksum file from the release page.\nExample for macOS (ARM64) `v0.2.0`:\n\n```bash\n# Download the checksum file (adjust version/arch)\ncurl -Lo portainer-mcp-v0.2.0-darwin-arm64.tar.gz.md5 https://github.com/portainer/portainer-mcp/releases/download/v0.2.0/portainer-mcp-v0.2.0-darwin-arm64.tar.gz.md5\n# Now verify (output should match the content of the .md5 file)\nif [ \"$(md5 -q portainer-mcp-v0.2.0-darwin-arm64.tar.gz)\" = \"$(cat portainer-mcp-v0.2.0-darwin-arm64.tar.gz.md5)\" ]; then echo \"OK\"; else echo \"FAILED\"; fi\n```\n\n(For Linux, you can use `md5sum -c <checksum_file_name>.md5`)\nIf the verification command outputs \"OK\", the file is intact.\n\n**Extract the archive:**\n\n```bash\n# Adjust the filename based on the downloaded version/OS/architecture\ntar -xzf portainer-mcp-v0.2.0-darwin-arm64.tar.gz\n```\n\nThis will extract the `portainer-mcp` executable.\n\n**Move the executable:**\nMove the executable to a location in your `$PATH` (e.g., `/usr/local/bin`) or note its location for the configuration step below.\n\n# Usage\n\nWith Claude Desktop, configure it like so:\n\n```\n{\n    \"mcpServers\": {\n        \"portainer\": {\n            \"command\": \"/path/to/portainer-mcp\",\n            \"args\": [\n                \"-server\",\n                \"[IP]:[PORT]\",\n                \"-token\",\n                \"[TOKEN]\",\n                \"-tools\",\n                \"/tmp/tools.yaml\"\n            ]\n        }\n    }\n}\n```\n\nReplace `[IP]`, `[PORT]` and `[TOKEN]` with the IP, port and API access token associated with your Portainer instance.\n\n> [!NOTE]\n> By default, the tool looks for \"tools.yaml\" in the same directory as the binary. If the file does not exist, it will be created there with the default tool definitions. You may need to modify this path as described above, particularly when using AI assistants like Claude that have restricted write permissions to the working directory.\n\n## Disable Version Check\n\nBy default, the application validates that your Portainer server version matches the supported version and will fail to start if there's a mismatch. If you have a Portainer server version that doesn't have a corresponding Portainer MCP version available, you can disable this version check to attempt connection anyway.\n\nTo disable the version check, add the `-disable-version-check` flag to your command arguments:\n\n```\n{\n    \"mcpServers\": {\n        \"portainer\": {\n            \"command\": \"/path/to/portainer-mcp\",\n            \"args\": [\n                \"-server\",\n                \"[IP]:[PORT]\",\n                \"-token\",\n                \"[TOKEN]\",\n                \"-disable-version-check\"\n            ]\n        }\n    }\n}\n```\n\n> [!WARNING]\n> Disabling the version check may result in unexpected behavior or API incompatibilities if your Portainer server version differs significantly from the supported version. The tool may work partially or not at all with unsupported versions.\n\nWhen using this flag:\n- The application will skip Portainer server version validation at startup\n- Some features may not work correctly due to API differences between versions\n- Newer Portainer versions may have API changes that cause errors\n- Older Portainer versions may be missing APIs that the tool expects\n\nThis flag is useful when:\n- You're running a newer Portainer version that doesn't have MCP support yet\n- You're running an older Portainer version and want to try the tool anyway\n\n## Tool Customization\n\nBy default, the tool definitions are embedded in the binary. The application will create a tools file at the default location if one doesn't already exist.\n\nYou can customize the tool definitions by specifying a custom tools file path using the `-tools` flag:\n\n```\n{\n    \"mcpServers\": {\n        \"portainer\": {\n            \"command\": \"/path/to/portainer-mcp\",\n            \"args\": [\n                \"-server\",\n                \"[IP]:[PORT]\",\n                \"-token\",\n                \"[TOKEN]\",\n                \"-tools\",\n                \"/path/to/custom/tools.yaml\"\n            ]\n        }\n    }\n}\n```\n\nThe default tools file is available for reference at `internal/tooldef/tools.yaml` in the source code. You can modify the descriptions of the tools and their parameters to alter how AI models interpret and decide to use them. You can even decide to remove some tools if you don't wish to use them.\n\n> [!WARNING]\n> Do not change the tool names or parameter definitions (other than descriptions), as this will prevent the tools from being properly registered and functioning correctly.\n\n## Read-Only Mode\n\nFor security-conscious users, the application can be run in read-only mode. This mode ensures that only read operations are available, completely preventing any modifications to your Portainer resources.\n\nTo enable read-only mode, add the `-read-only` flag to your command arguments:\n\n```\n{\n    \"mcpServers\": {\n        \"portainer\": {\n            \"command\": \"/path/to/portainer-mcp\",\n            \"args\": [\n                \"-server\",\n                \"[IP]:[PORT]\",\n                \"-token\",\n                \"[TOKEN]\",\n                \"-read-only\"\n            ]\n        }\n    }\n}\n```\n\nWhen using read-only mode:\n- Only read tools (list, get) will be available to the AI model\n- All write tools (create, update, delete) are not loaded\n- The Docker proxy requests tool is not loaded\n- The Kubernetes proxy requests tool is not loaded\n\n# Portainer Version Support\n\nThis tool is pinned to support a specific version of Portainer. The application will validate the Portainer server version at startup and fail if it doesn't match the required version.\n\n| Portainer MCP Version  | Supported Portainer Version |\n|--------------|----------------------------|\n| 0.1.0 | 2.28.1 |\n| 0.2.0 | 2.28.1 |\n| 0.3.0 | 2.28.1 |\n| 0.4.0 | 2.29.2 |\n| 0.4.1 | 2.29.2 |\n| 0.5.0 | 2.30.0 |\n| 0.6.0 | 2.31.2 |\n\n> [!NOTE]\n> If you need to connect to an unsupported Portainer version, you can use the `-disable-version-check` flag to bypass version validation. See the [Disable Version Check](#disable-version-check) section for more details and important warnings about using this feature.\n\n# Supported Capabilities\n\nThe following table lists the currently (latest version) supported operations through MCP tools:\n\n| Resource | Operation | Description | Supported In Version |\n|----------|-----------|-------------|----------------------|\n| **Environments** | | | |\n| | ListEnvironments | List all available environments | 0.1.0 |\n| | UpdateEnvironmentTags | Update tags associated with an environment | 0.1.0 |\n| | UpdateEnvironmentUserAccesses | Update user access policies for an environment | 0.1.0 |\n| | UpdateEnvironmentTeamAccesses | Update team access policies for an environment | 0.1.0 |\n| **Environment Groups (Edge Groups)** | | | |\n| | ListEnvironmentGroups | List all available environment groups | 0.1.0 |\n| | CreateEnvironmentGroup | Create a new environment group | 0.1.0 |\n| | UpdateEnvironmentGroupName | Update the name of an environment group | 0.1.0 |\n| | UpdateEnvironmentGroupEnvironments | Update environments associated with a group | 0.1.0 |\n| | UpdateEnvironmentGroupTags | Update tags associated with a group | 0.1.0 |\n| **Access Groups (Endpoint Groups)** | | | |\n| | ListAccessGroups | List all available access groups | 0.1.0 |\n| | CreateAccessGroup | Create a new access group | 0.1.0 |\n| | UpdateAccessGroupName | Update the name of an access group | 0.1.0 |\n| | UpdateAccessGroupUserAccesses | Update user accesses for an access group | 0.1.0 |\n| | UpdateAccessGroupTeamAccesses | Update team accesses for an access group | 0.1.0 |\n| | AddEnvironmentToAccessGroup | Add an environment to an access group | 0.1.0 |\n| | RemoveEnvironmentFromAccessGroup | Remove an environment from an access group | 0.1.0 |\n| **Stacks (Edge Stacks)** | | | |\n| | ListStacks | List all available stacks | 0.1.0 |\n| | GetStackFile | Get the compose file for a specific stack | 0.1.0 |\n| | CreateStack | Create a new Docker stack | 0.1.0 |\n| | UpdateStack | Update an existing Docker stack | 0.1.0 |\n| **Tags** | | | |\n| | ListEnvironmentTags | List all available environment tags | 0.1.0 |\n| | CreateEnvironmentTag | Create a new environment tag | 0.1.0 |\n| **Teams** | | | |\n| | ListTeams | List all available teams | 0.1.0 |\n| | CreateTeam | Create a new team | 0.1.0 |\n| | UpdateTeamName | Update the name of a team | 0.1.0 |\n| | UpdateTeamMembers | Update the members of a team | 0.1.0 |\n| **Users** | | | |\n| | ListUsers | List all available users | 0.1.0 |\n| | UpdateUser | Update an existing user | 0.1.0 |\n| | GetSettings | Get the settings of the Portainer instance | 0.1.0 |\n| **Docker** | | | |\n| | DockerProxy | Proxy ANY Docker API requests | 0.2.0 |\n| **Kubernetes** | | | |\n| | KubernetesProxy | Proxy ANY Kubernetes API requests | 0.3.0 |\n| | getKubernetesResourceStripped | Proxy GET Kubernetes API requests and automatically strip verbose metadata fields | 0.6.0 |\n\n# Development\n\n## Code Statistics\n\nThe repository includes a helper script `cloc.sh` to calculate lines of code and other metrics for the Go source files using the `cloc` tool. You might need to install `cloc` first (e.g., `sudo apt install cloc` or `brew install cloc`).\n\nRun the script from the repository root to see the default summary output:\n\n```bash\n./cloc.sh\n```\n\nRefer to the comment header within the `cloc.sh` script for details on available flags to retrieve specific metrics.\n\n## Token Counting\n\nTo get an estimate of how many tokens your current tool definitions consume in prompts, you can use the provided Go program and shell script to query the Anthropic API's token counting endpoint.\n\n**1. Generate the Tools JSON:**\n\nFirst, use the `token-count` Go program to convert your YAML tool definitions into the JSON format required by the Anthropic API. Run this from the repository root:\n\n```bash\n# Replace internal/tooldef/tools.yaml with your YAML file if different\n# Replace .tmp/tools.json with your desired output path\ngo run ./cmd/token-count -input internal/tooldef/tools.yaml -output .tmp/tools.json\n```\n\nThis command reads the tool definitions from the specified input YAML file and writes a JSON array of tools (containing `name`, `description`, and `input_schema`) to the specified output file.\n\n**2. Query the Anthropic API:**\n\nNext, use the `token.sh` script to send these tool definitions along with a sample message to the Anthropic API. You will need an Anthropic API key for this step.\n\n```bash\n# Ensure you have jq installed\n# Replace sk-ant-xxxxxxxx with your actual Anthropic API key\n# Replace .tmp/tools.json with the path to the file generated in step 1\n./token.sh -k sk-ant-xxxxxxxx -i .tmp/tools.json\n```\n\nThe script will output the JSON response from the Anthropic API, which includes the estimated token count for the provided tools and sample message under the `usage.input_tokens` field.\n\nThis process helps in understanding the token cost associated with the toolset provided to the language model.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "portainer",
        "cloud",
        "platform",
        "cloud platforms",
        "cloud platform",
        "platforms cloud"
      ],
      "category": "cloud-platforms"
    },
    "pulumi--mcp-server": {
      "owner": "pulumi",
      "name": "mcp-server",
      "url": "https://github.com/pulumi/mcp-server",
      "imageUrl": "",
      "description": "MCP server for interacting with Pulumi using the Pulumi Automation API and Pulumi Cloud API. Enables MCP clients to perform Pulumi operations like retrieving package information, previewing changes, deploying updates, and retrieving stack outputs programmatically.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cloud",
        "pulumi",
        "mcp",
        "pulumi cloud",
        "cloud platforms",
        "cloud platform"
      ],
      "category": "cloud-platforms"
    },
    "pythonanywhere--pythonanywhere-mcp-server": {
      "owner": "pythonanywhere",
      "name": "pythonanywhere-mcp-server",
      "url": "https://github.com/pythonanywhere/pythonanywhere-mcp-server",
      "imageUrl": "",
      "description": "MCP server implementation for PythonAnywhere cloud platform.",
      "stars": 8,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-15T07:33:30Z",
      "readme_content": "# PythonAnywhere Model Context Protocol Server\n\nA [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction)\nserver acts as a bridge between AI-powered tools and your\n[PythonAnywhere](https://www.pythonanywhere.com/) account, enabling secure,\nprogrammatic management of files, websites, webapps, and scheduled tasks. By\nexposing a standardized interface, it allows language models and automation\nclients to perform operations—such as editing files, deploying web apps, or\nscheduling jobs -- on your behalf, all while maintaining fine-grained control\nand auditability.\n\n## Features\n- **File management**: Read, upload, delete files and list directory trees.\n  _(also enables debugging with direct access to log files, which are just\n  files on PythonAnywhere)_\n- **ASGI Web app management**: Create, delete, reload, and list.\n  _(as described in the [PythonAnywhere ASGI\n  documentation](https://help.pythonanywhere.com/pages/ASGICommandLine))_\n- **WSGI Web app management**: Reload only _(at the moment)_.\n- **Scheduled task management**: List, create, update, and delete.\n  _(Note that this enables LLMs to execute arbitrary commands if a task is\n  scheduled too soon after creation and deleted after execution. For that we\n  would suggest running it with [mcp-server-time](https://pypi.org/project/mcp-server-time/)\n  as models easily get confused about time.)_\n\n## Installation\nThe MCP protocol is well-defined and supported by various clients, but\ninstallation is different depending on the client you are using. We will\ncover cases that we tried and tested.\n\nIn all cases, you need to have `uv` installed and available in your `PATH`.\n\nHave your PythonAnywhere API token and username ready. You can find (or\ngenerate) your API token in the [API section of your PythonAnywhere\naccount](https://www.pythonanywhere.com/account/#api_token).\n\n### Desktop Extension - works with Claude Desktop\nProbably the most straightforward way to install the MCP server is to use\nthe [desktop extension](https://github.com/anthropics/dxt/) for Claude Desktop.\n\n1. Open Claude Desktop.\n2. **[Download the latest .dxt file](https://github.com/pythonanywhere/pythonanywhere-mcp-server/releases/latest/download/pythonanywhere-mcp-server.dxt)**.\n3. Double-click on the downloaded .dxt file or drag the file into the window.\n4. Configure your PythonAnywhere API token and username.\n5. Restart Claude Desktop.\n\n### Claude Code\nRun:\n   ```bash\n   claude mcp add pythonanywhere-mcp-server \\\n   -e API_TOKEN=yourpythonanywhereapitoken \\\n   -e LOGNAME=yourpythonanywhereusername \\\n   -- uvx pythonanywhere-mcp-server\n   ```\n\n### GitHub Copilot in PyCharm:\nAdd it to your `mcp.json`.\n\n```json\n{\n  \"servers\": {\n    \"pythonanywhere-mcp-server\": {\n      \"type\": \"stdio\",\n      \"command\": \"uvx\",\n      \"args\": [\"pythonanywhere-mcp-server\"],\n      \"env\": {\n        \"API_TOKEN\": \"yourpythonanywhereapitoken\",\n        \"LOGNAME\": \"yourpythonanywhereusername\"\n      }\n    }\n  }\n}\n```\n\n### Claude Desktop (manual setup) and Cursor:\nAdd it to `claude_desktop_config.json` (for Claude Desktop) or (`mcp.json`\nfor Cursor).\n\n```json\n{\n  \"mcpServers\": {\n    \"pythonanywhere-mcp-server\": {\n      \"type\": \"stdio\",\n      \"command\": \"uvx\",\n      \"args\": [\"pythonanywhere-mcp-server\"],\n      \"env\": {\n        \"API_TOKEN\": \"yourpythonanywhereapitoken\",\n        \"LOGNAME\": \"yourpythonanywhereusername\"\n      }\n    }\n  }\n}\n```\n\n## Caveats\n\nDirect integration of an LLM with your PythonAnywhere account offers\nsignificant capabilities, but also introduces risks. We strongly advise\nmaintaining human oversight, especially for sensitive actions such as\nmodifying or deleting files.\n\nIf you are running multiple MCP servers simultaneously, be\ncautious -- particularly if any server can access external resources you do not\ncontrol, such as GitHub issues. These can become attack vectors. For more\ndetails, see [this story](https://simonwillison.net/2025/Jul/6/supabase-mcp-lethal-trifecta/).\n\n## Implementation\n\nThe server uses the [python mcp sdk](https://github.com/modelcontextprotocol/python-sdk)\nin connection with the [pythonanywhere-core](https://github.com/pythonanywhere/pythonanywhere-core)\npackage ([docs](https://core.pythonanywhere.com/)), which wraps a subset of the [PythonAnywhere\nAPI](https://help.pythonanywhere.com/pages/API/) and may be expanded in\nthe future as needed.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cloud",
        "pythonanywhere",
        "platform",
        "pythonanywhere cloud",
        "cloud platform",
        "cloud platforms"
      ],
      "category": "cloud-platforms"
    },
    "reza-gholizade--k8s-mcp-server": {
      "owner": "reza-gholizade",
      "name": "k8s-mcp-server",
      "url": "https://github.com/reza-gholizade/k8s-mcp-server",
      "imageUrl": "",
      "description": "A Kubernetes Model Context Protocol (MCP) server that provides tools for interacting with Kubernetes clusters through a standardized interface, including API resource discovery, resource management, pod logs, metrics, and events.",
      "stars": 97,
      "forks": 19,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-10-03T09:48:50Z",
      "readme_content": "# Kubernetes MCP Server\n\nA Kubernetes Model Context Protocol (MCP) server that provides tools for interacting with Kubernetes clusters through a standardized interface.\n\n## Features\n\n- **API Resource Discovery**: Get all available API resources in your Kubernetes cluster.\n- **Resource Listing**: List resources of any type with optional namespace and label filtering.\n- **Resource Details**: Get detailed information about specific Kubernetes resources.\n- **Resource Description**: Get comprehensive descriptions of Kubernetes resources, similar to `kubectl describe`.\n- **Pod Logs**: Retrieve logs from specific pods (optionally from a specific container, or all containers if unspecified).\n- **Node Metrics**: Get resource usage metrics for specific nodes.\n- **Pod Metrics**: Get CPU and Memory metrics for specific pods.\n- **Event Listing**: List events within a namespace or for a specific resource.\n- **Resource Creation/Updating**: Create new Kubernetes resources or update existing ones from a YAML or JSON manifest.\n- **Resource Deletion**: It deletes a resource in the Kubernetes cluster based on the provided namespace and kind.\n- **Standardized Interface**: Uses the MCP protocol for consistent tool interaction.\n- **Flexible Configuration**: Supports different Kubernetes contexts and resource scopes.\n- **Multiple Modes**: Run in `stdio` mode for CLI tools, `sse` mode, or `streamable-http` mode for web applications, and `--readonly` for no change in the cluster.\n- **Security**: Runs as non-root user in Docker containers for enhanced security.\n\n## Prerequisites\n\n- Go 1.23 or later\n- Access to a Kubernetes cluster\n- `kubectl` configured with appropriate cluster access\n\n## Installation\n\n1.  **Clone the repository:**\n    ```bash\n    git clone https://github.com/reza-gholizade/k8s-mcp-server.git\n    cd k8s-mcp-server\n    ```\n\n2.  **Install dependencies:**\n    ```bash\n    go mod download\n    ```\n\n3.  **Build the server:**\n    ```bash\n    go build -o k8s-mcp-server main.go\n    ```\n\n## Usage\n\n### Starting the Server\n\nThe server can run in three modes, configurable via command-line flags or environment variables.\n\n#### Stdio Mode (for CLI integrations)\nThis mode uses standard input/output for communication.\n\n```bash\n./k8s-mcp-server --mode stdio\n```\nOr using environment variables:\n```bash\nSERVER_MODE=stdio ./k8s-mcp-server\n```\n\n#### SSE Mode (for web applications)\nThis mode starts an HTTP server with Server-Sent Events support.\n\nDefault (port 8080):\n```bash\n./k8s-mcp-server --mode sse\n```\nSpecify a port:\n```bash\n./k8s-mcp-server --mode sse --port 9090\n```\nOr using environment variables:\n```bash\nSERVER_MODE=sse SERVER_PORT=9090 ./k8s-mcp-server\n```\n#### Streamable-HTTP Mode (for web applications)\nThis mode starts an HTTP server with streamable-http transport support, following the MCP specification.\n\nDefault (port 8080):\n```bash\n./k8s-mcp-server --mode streamable-http\n```\nSpecify a port:\n```bash\n./k8s-mcp-server --mode streamable-http --port 9090\n```\nOr using environment variables:\n```bash\nSERVER_MODE=streamable-http SERVER_PORT=9090 ./k8s-mcp-server\n```\n\nThe server will be available at `http://localhost:8080/mcp` (or your specified port).\n\nIf no mode is specified, it defaults to SSE on port 8080.\n\n#### Read-Only Mode\n\nThe server supports a read-only mode that disables all write operations, providing a safer way to explore and monitor your Kubernetes cluster without the risk of making changes.\n\nEnable read-only mode with the `--read-only` flag:\n\n```bash\n./k8s-mcp-server --read-only\n```\n\nYou can combine read-only mode with any server mode:\n\n```bash\n# Read-only with stdio mode\n./k8s-mcp-server --mode stdio --read-only\n\n# Read-only with SSE mode\n./k8s-mcp-server --mode sse --read-only\n\n# Read-only with streamable-http mode\n./k8s-mcp-server --mode streamable-http --read-only\n```\n\nWhen read-only mode is enabled, the following tools are disabled:\n- `createResource` (Kubernetes resource creation/updates)\n- `helmInstall` (Helm chart installations)\n- `helmUpgrade` (Helm chart upgrades)\n- `helmUninstall` (Helm chart uninstallations)\n- `helmRollback` (Helm release rollbacks)\n- `helmRepoAdd` (Helm repository additions)\n\nAll other read-only operations remain available, including listing resources, getting logs, viewing metrics, and inspecting Helm releases.\n\n#### Tool Category Flags\nYou can selectively disable entire categories of tools using these flags:\n\n**Disable Kubernetes Tools:**\n```bash\n./k8s-mcp-server --no-k8s\n```\n\n**Disable Helm Tools:**\n```bash\n./k8s-mcp-server --no-helm\n```\n\n**Combine with other flags:**\n```bash\n# Read-only mode with only Kubernetes tools (no Helm)\n./k8s-mcp-server --read-only --no-helm\n\n# Read-only mode with only Helm tools (no Kubernetes)\n./k8s-mcp-server --read-only --no-k8s\n\n# SSE mode with only Kubernetes tools\n./k8s-mcp-server --mode sse --no-helm\n\n```\n\n**Note:** You cannot use both `--no-k8s` and `--no-helm` together, as this would result in no available tools. The server will exit with an error if both flags are provided.\n\nWhen `--no-k8s` is enabled, all Kubernetes tools are disabled:\n- `getAPIResources`, `listResources`, `getResource`, `describeResource`\n- `getPodsLogs`, `getNodeMetrics`, `getPodMetrics`, `getEvents`\n- `createResource` (if not in read-only mode)\n\nWhen `--no-helm` is enabled, all Helm tools are disabled:\n- `helmList`, `helmGet`, `helmHistory`, `helmRepoList`\n- `helmInstall`, `helmUpgrade`, `helmUninstall`, `helmRollback`, `helmRepoAdd` (if not in read-only mode)\n\n### Using the Docker Image\n\nYou can also run the server using the pre-built Docker image from Docker Hub.\n\n1.  **Pull the image:**\n    ```bash\n    docker pull ginnux/k8s-mcp-server:latest\n    ```\n    You can replace `latest` with a specific version tag (e.g., `1.0.0`).\n\n2.  **Run the container:**\n\n    *   **SSE Mode (default behavior of the image):**\n        ```bash\n        docker run -p 8080:8080 -v ~/.kube/config:/home/appuser/.kube/config:ro ginnux/k8s-mcp-server:latest\n        ```\n        This maps port 8080 of the container to port 8080 on your host and mounts your Kubernetes config read-only to the non-root user's home directory. The server will be available at `http://localhost:8080`. The image defaults to `sse` mode on port `8080`.\n\n    *   **Streamable-HTTP Mode:**\n        ```bash\n        docker run -p 8080:8080 -v ~/.kube/config:/home/appuser/.kube/config:ro ginnux/k8s-mcp-server:latest --mode streamable-http\n        ```\n        This runs the server in streamable-http mode. The server will be available at `http://localhost:8080/mcp`.\n\n    *   **Stdio Mode:**\n        ```bash\n        docker run -i --rm -v ~/.kube/config:/home/appuser/.kube/config:ro ginnux/k8s-mcp-server:latest --mode stdio\n        ```\n        The `-i` flag is important for interactive stdio communication. `--rm` cleans up the container after exit.\n\n    *   **Custom Port for SSE Mode:**\n        ```bash\n        docker run -p 9090:9090 -v ~/.kube/config:/home/appuser/.kube/config:ro ginnux/k8s-mcp-server:latest --mode sse --port 9090\n        ```\n\n    *   **Custom Port for Streamable-HTTP Mode:**\n        ```bash\n        docker run -p 9090:9090 -v ~/.kube/config:/home/appuser/.kube/config:ro ginnux/k8s-mcp-server:latest --mode streamable-http --port 9090\n        ```\n\n    *   **Alternative: Mount entire .kube directory:**\n        ```bash\n        docker run -p 8080:8080 -v ~/.kube:/home/appuser/.kube:ro ginnux/k8s-mcp-server:latest\n        ```\n\n#### Using with Docker Compose\n\nCreate a `docker-compose.yml` file:\n```yaml\nversion: '3.8'\nservices:\n  k8s-mcp-server:\n    image: ginnux/k8s-mcp-server:latest # Or a specific version\n    container_name: k8s-mcp-server\n    ports:\n      - \"8080:8080\" # Host:Container, adjust if using a different SERVER_PORT\n    volumes:\n      - ~/.kube:/home/appuser/.kube:ro # Mount kubeconfig read-only to non-root user home\n    environment:\n      - KUBECONFIG=/home/appuser/.kube/config\n      - SERVER_MODE=sse # Can be 'stdio', 'sse', or 'streamable-http'\n      - SERVER_PORT=8080 # Port for SSE/streamable-http modes\n    # command: [\"--read-only\"] # Uncomment this line to enable read-only mode\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 10s\n    # To run in stdio mode with docker-compose, you might need to adjust 'ports',\n    # add 'stdin_open: true' and 'tty: true', and potentially override the command.\n    # For example, to force stdio mode:\n    # command: [\"--mode\", \"stdio\"]\n    # stdin_open: true\n    # tty: true\n    # For streamable-http mode, simply change SERVER_MODE to 'streamable-http'\n```\nTo enable read-only mode, use the `command` override as shown above.\n\nThen start with:\n```bash\ndocker compose up -d\n```\nTo see logs: `docker compose logs -f k8s-mcp-server`.\n\n#### Security Considerations\n\nThe Docker image runs as a non-root user (`appuser` with UID 1001) for enhanced security:\n- The application binary is located at `/usr/local/bin/k8s-mcp-server`\n- The kubeconfig should be mounted to `/home/appuser/.kube/config`\n- Health checks are enabled to monitor container status\n- The container includes minimal dependencies (ca-certificates and curl only)\n\n#### Making API Calls (SSE/Streamable-HTTP Mode)\nOnce the server is running in SSE or streamable-http mode, you can make JSON-RPC calls to its HTTP endpoint:\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"getAPIResources\",\n    \"arguments\": {\n      \"includeNamespaceScoped\": true,\n      \"includeClusterScoped\": true\n    }\n  }\n}' http://localhost:8080/\n```\n\nYou can also check the health status:\n```bash\ncurl -f http://localhost:8080/\n```\n\n### Available Tools\n\n#### 1. `getAPIResources`\n\nRetrieves all available API resources in the Kubernetes cluster.\n\n**Parameters:**\n- `includeNamespaceScoped` (boolean, optional): Whether to include namespace-scoped resources (defaults to true).\n- `includeClusterScoped` (boolean, optional): Whether to include cluster-scoped resources (defaults to true).\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"getAPIResources\",\n    \"arguments\": {\n      \"includeNamespaceScoped\": true,\n      \"includeClusterScoped\": true\n    }\n  }\n}\n```\n\n#### 2. `listResources`\n\nLists all instances of a specific resource type.\n\n**Parameters:**\n- `Kind` (string, required): The kind of resource to list (e.g., \"Pod\", \"Deployment\").\n- `namespace` (string, optional): The namespace to list resources from. If omitted, lists across all namespaces for namespaced resources (subject to RBAC).\n- `labelSelector` (string, optional): Filter resources by label selector (e.g., \"app=nginx,env=prod\").\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"listResources\",\n    \"arguments\": {\n      \"Kind\": \"Pod\",\n      \"namespace\": \"default\",\n      \"labelSelector\": \"app=nginx\"\n    }\n  }\n}\n```\n\n#### 3. `getResource`\n\nRetrieves detailed information about a specific resource.\n\n**Parameters:**\n- `kind` (string, required): The kind of resource to get (e.g., \"Pod\", \"Deployment\").\n- `name` (string, required): The name of the resource to get.\n- `namespace` (string, optional): The namespace of the resource (required for namespaced resources).\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"getResource\",\n    \"arguments\": {\n      \"kind\": \"Pod\",\n      \"name\": \"nginx-pod\",\n      \"namespace\": \"default\"\n    }\n  }\n}\n```\n\n#### 4. `describeResource`\n\nDescribes a resource in the Kubernetes cluster, similar to `kubectl describe`.\n\n**Parameters:**\n- `Kind` (string, required): The kind of resource to describe (e.g., \"Pod\", \"Deployment\").\n- `name` (string, required): The name of the resource to describe.\n- `namespace` (string, optional): The namespace of the resource (required for namespaced resources).\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"describeResource\",\n    \"arguments\": {\n      \"Kind\": \"Pod\",\n      \"name\": \"nginx-pod\",\n      \"namespace\": \"default\"\n    }\n  }\n}\n```\n\n#### 5. `getPodsLogs`\n\nRetrieves the logs of a specific pod.\n\n**Parameters:**\n- `Name` (string, required): The name of the pod.\n- `namespace` (string, required): The namespace of the pod.\n- `containerName` (string, optional): The specific container name within the pod. If omitted:\n    - If the pod has one container, its logs are fetched.\n    - If the pod has multiple containers, logs from all containers are fetched and concatenated.\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"getPodsLogs\",\n    \"arguments\": {\n      \"Name\": \"my-app-pod-12345\",\n      \"namespace\": \"production\",\n      \"containerName\": \"main-container\"\n    }\n  }\n}\n```\n\n#### 6. `getNodeMetrics`\n\nRetrieves resource usage metrics for a specific node.\n\n**Parameters:**\n- `Name` (string, required): The name of the node.\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"getNodeMetrics\",\n    \"arguments\": {\n      \"Name\": \"worker-node-1\"\n    }\n  }\n}\n```\n\n#### 7. `getPodMetrics`\n\nRetrieves CPU and Memory metrics for a specific pod.\n\n**Parameters:**\n- `namespace` (string, required): The namespace of the pod.\n- `podName` (string, required): The name of the pod.\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"getPodMetrics\",\n    \"arguments\": {\n      \"namespace\": \"default\",\n      \"podName\": \"my-app-pod-67890\"\n    }\n  }\n}\n```\n\n#### 8. `getEvents`\n\nRetrieves events for a specific namespace or resource.\n\n**Parameters:**\n- `namespace` (string, optional): The namespace to get events from. If omitted, events from all namespaces are considered (subject to RBAC).\n- `resourceName` (string, optional): The name of a specific resource (e.g., a Pod name) to filter events for.\n- `resourceKind` (string, optional): The kind of the specific resource (e.g., \"Pod\") if `resourceName` is provided.\n\n**Example (Namespace Events):**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"getEvents\",\n    \"arguments\": {\n      \"namespace\": \"default\"\n    }\n  }\n}\n```\n\n**Example (Resource Events):**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"getEvents\",\n    \"arguments\": {\n      \"namespace\": \"production\",\n      \"resourceName\": \"my-app-pod-12345\",\n      \"resourceKind\": \"Pod\"\n    }\n  }\n}\n```\n\n#### 9. `createOrUpdateResource`\n\nCreates a new resource or updates an existing one from a JSON manifest.\n\n**Parameters:**\n- `manifest` (string, required): The JSON manifest of the resource.\n- `namespace` (string, optional): The namespace in which to create/update the resource. If the manifest contains a namespace, this parameter can be used to override it. If not provided and the manifest doesn't specify one, \"default\" might be assumed or it might be an error depending on the resource type.\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"createResource\",\n    \"arguments\": {\n      \"kind\": \"Deployment\",\n      \"namespace\": \"default\",\n      \"manifest\": \"{\\\"apiVersion\\\":\\\"apps/v1\\\",\\\"kind\\\":\\\"Deployment\\\",\\\"metadata\\\":{\\\"name\\\":\\\"nginx-deployment\\\"},\\\"spec\\\":{\\\"replicas\\\":1,\\\"selector\\\":{\\\"matchLabels\\\":{\\\"app\\\":\\\"nginx\\\"}},\\\"template\\\":{\\\"metadata\\\":{\\\"labels\\\":{\\\"app\\\":\\\"nginx\\\"}},\\\"spec\\\":{\\\"containers\\\":[{\\\"name\\\":\\\"nginx\\\",\\\"image\\\":\\\"nginx:latest\\\"}]}}}}\"\n    }\n  }\n}\n```\n\n#### 10. `createOrUpdateResourceYAML`\n\nCreates a new resource or updates an existing one from a YAML manifest. This tool is specifically optimized for YAML input and provides better error handling for YAML parsing issues.\n\n**Parameters:**\n- `manifest` (string, required): The YAML manifest of the resource.\n- `namespace` (string, optional): The namespace in which to create/update the resource. If the manifest contains a namespace, this parameter can be used to override it. If not provided and the manifest doesn't specify one, \"default\" might be assumed or it might be an error depending on the resource type.\n- `kind` (string, optional): The kind of the resource. If not provided, the kind will be inferred from the YAML manifest.\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"createOrUpdateResourceYAML\",\n    \"arguments\": {\n      \"namespace\": \"default\",\n      \"manifest\": \"apiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: my-new-pod\\nspec:\\n  containers:\\n  - name: nginx\\n    image: nginx:latest\"\n    }\n  }\n}\n```\n\n#### 11. `rolloutRestart`\n\nTriggers a rolling restart of a Kubernetes resource that supports spec.template.metadata.annotations. This includes Deployment, DaemonSet, StatefulSet, Job, and similar resources.\n\n**Parameters:**\n- `kind` (string, required): The kind of resource (e.g., \"Deployment\", \"StatefulSet\").\n- `name`: (string, required): The name of the resource to restart.\n- `namespace` (string, required for namespaced resources): The namespace of the resource.\n\n**Example (StatefulSet):**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"rolloutRestart\",\n    \"arguments\": {\n      \"kind\": \"StatefulSet\",\n      \"name\": \"redis-cluster-01\",\n      \"namespace\": \"default\"\n    }\n  }\n}\n```\n**Example (Deployment):**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"rolloutRestart\",\n    \"arguments\": {\n      \"kind\": \"Deployment\",\n      \"name\": \"my-app-deployment\",\n      \"namespace\": \"default\"\n    }\n  }\n}\n```\n\n#### 12. `deleteResource`\n\nDeletes a specific resource from the Kubernetes cluster.\n\n**Parameters:**\n- `kind` (string, required): The type of resource to delete.\n- `name` (string, required): The name of the resource to delete.\n- `namespace` (string, optional): The namespace of the resource (required for namespaced resources).\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"deleteResource\",\n    \"arguments\": {\n      \"kind\": \"Pod\",\n      \"name\": \"my-pod\",\n      \"namespace\": \"default\"\n    }\n  }\n}\n```\n\n#### 13. `getIngresses`\n\nRetrieves ingress resources from the Kubernetes cluster.\nYou can filter ingresses by host. If no host is provided, all ingresses are returned.\n\n**Parameters:**\n- `host` (string, optional): The host to filter ingresses by. If omitted, all ingresses are included.\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"getIngresses\",\n    \"arguments\": {\n      \"host\": \"example.com\"\n    }\n  }\n}\n```\n\n### Helm Operations\n\n#### 14. `helmInstall`\n\nInstall a Helm chart to the Kubernetes cluster.\n\n**Parameters:**\n- `releaseName` (string, required): Name of the Helm release\n- `chartName` (string, required): Name or path of the Helm chart\n- `namespace` (string, optional): Kubernetes namespace for the release (defaults to \"default\")\n- `repoURL` (string, optional): Helm repository URL\n- `values` (object, optional): Values to override in the chart\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"helmInstall\",\n    \"arguments\": {\n      \"releaseName\": \"my-nginx\",\n      \"chartName\": \"bitnami/nginx\",\n      \"namespace\": \"web\",\n      \"repoURL\": \"https://charts.bitnami.com/bitnami\",\n      \"values\": {\n        \"replicaCount\": 3,\n        \"service\": {\n          \"type\": \"LoadBalancer\"\n        }\n      }\n    }\n  }\n}\n```\n\n#### 15. `helmUpgrade`\n\nUpgrade an existing Helm release.\n\n**Parameters:**\n- `releaseName` (string, required): Name of the Helm release\n- `chartName` (string, required): Name or path of the Helm chart\n- `namespace` (string, required): Kubernetes namespace for the release (defaults to \"default\")\n- `repoURL` (string, required): Helm repository URL\n- `values` (object, required): Values to override in the chart\n  **Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"helmUpgrade\",\n    \"arguments\": {\n      \"releaseName\": \"my-nginx\",\n      \"chartName\": \"nginx\",\n      \"namespace\": \"web\",\n      \"repoURL\": \"https://charts.bitnami.com/bitnami\",\n      \"values\": {\n        \"replicaCount\": 2,\n        \"service\": {\n          \"type\": \"NodePort\"\n        }\n      }\n    }\n  }\n}\n```\n\n#### 16. `helmList`\n\nList all Helm releases in the cluster or a specific namespace.\n\n#### 17. `helmGet`\n\nGet details of a specific Helm release.\n\n#### 18. `helmHistory`\n\nGet the history of a Helm release.\n\n#### 19. `helmRollback`\n\nRollback a Helm release to a previous revision.\n\n#### 20. `helmUninstall`\n\nUninstall a Helm release from the Kubernetes cluster.\n\n### Adding New Tools\n\n1.  **Define the Tool**: In `tools/tools.go`, define a function that returns an `mcp.Tool` structure. This includes the tool's name, description, and input/output schemas.\n2.  **Implement the Handler**: In `handlers/handlers.go`, create a handler function. This function takes `*k8s.Client` as an argument and returns a function with the signature `func(context.Context, mcp.ToolInput) (mcp.ToolOutput, error)`. This inner function will contain the logic for your tool.\n3.  **Register the Tool**: In `main.go`, add your new tool to the MCP server instance using `s.AddTool(tools.YourToolDefinitionFunction(), handlers.YourToolHandlerFunction(client))`.\n\n## Contributing\n\nContributions are welcome! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for details on how to contribute to this project.\n\n## License\ngholizade.net@gmail.com\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n<a href=\"https://glama.ai/mcp/servers/@reza-gholizade/k8s-mcp-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@reza-gholizade/k8s-mcp-server/badge\" />\n</a>\n\n## VS Code Integration\n\n### Quick Setup\n\n#### Automatic Installation (Recommended)\n\n**macOS/Linux:**\n```bash\ncurl -sSL https://raw.githubusercontent.com/reza-gholizade/k8s-mcp-server/main/scripts/install-vscode-config.sh | bash\n```\n\n**Windows (PowerShell):**\n```powershell\niex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/reza-gholizade/k8s-mcp-server/main/scripts/install-vscode-config.ps1'))\n```\n\n#### Manual Installation\n\n1. **Install the MCP extension in VS Code:**\n   ```bash\n   code --install-extension modelcontextprotocol.mcp\n   ```\n\n2. **Add to your VS Code settings.json:**\n\n   Open VS Code settings (Cmd/Ctrl + ,) → Open Settings JSON → Add:\n\n   **macOS/Linux:**\n   ```json\n   {\n     \"mcp.mcpServers\": {\n       \"k8s-mcp-server\": {\n         \"command\": \"k8s-mcp-server\",\n         \"args\": [\"--mode\", \"stdio\"],\n         \"env\": {\n           \"KUBECONFIG\": \"${env:HOME}/.kube/config\"\n         }\n       }\n     }\n   }\n   ```\n\n   **Read-Only Mode (recommended for safety):**\n   ```json\n   {\n     \"mcp.mcpServers\": {\n       \"k8s-mcp-server\": {\n         \"command\": \"k8s-mcp-server\",\n         \"args\": [\"--mode\", \"stdio\", \"--read-only\"],\n         \"env\": {\n           \"KUBECONFIG\": \"${env:HOME}/.kube/config\"\n         }\n       }\n     }\n   }\n   ```\n\n   **Kubernetes Tools Only:**\n   ```json\n   {\n     \"mcp.mcpServers\": {\n       \"k8s-mcp-server\": {\n         \"command\": \"k8s-mcp-server\",\n         \"args\": [\"--mode\", \"stdio\", \"--no-helm\"],\n         \"env\": {\n           \"KUBECONFIG\": \"${env:HOME}/.kube/config\"\n         }\n       }\n     }\n   }\n   ```\n\n   **Helm Tools Only:**\n   ```json\n   {\n     \"mcp.mcpServers\": {\n       \"k8s-mcp-server\": {\n         \"command\": \"k8s-mcp-server\",\n         \"args\": [\"--mode\", \"stdio\", \"--no-k8s\"],\n         \"env\": {\n           \"KUBECONFIG\": \"${env:HOME}/.kube/config\"\n         }\n       }\n     }\n   }\n   ```\n\n   **Read-Only with Kubernetes Tools Only:**\n   ```json\n   {\n     \"mcp.mcpServers\": {\n       \"k8s-mcp-server\": {\n         \"command\": \"k8s-mcp-server\",\n         \"args\": [\"--mode\", \"stdio\", \"--read-only\", \"--no-helm\"],\n         \"env\": {\n           \"KUBECONFIG\": \"${env:HOME}/.kube/config\"\n         }\n       }\n     }\n   }\n   ```\n\n   **Windows:**\n   ```json\n   {\n     \"mcp.mcpServers\": {\n       \"k8s-mcp-server\": {\n         \"command\": \"k8s-mcp-server.exe\",\n         \"args\": [\"--mode\", \"stdio\"],\n         \"env\": {\n           \"KUBECONFIG\": \"${env:USERPROFILE}/.kube/config\"\n         }\n       }\n     }\n   }\n   ```\n\n3. **Ensure the binary is in your PATH:**\n\n   Download the appropriate binary from the [releases page](https://github.com/reza-gholizade/k8s-mcp-server/releases) and add it to your system PATH.\n\n4. **Restart VS Code**\n\n### Usage in VS Code\n\nOnce configured, you can use the Kubernetes MCP server in VS Code with Claude or other MCP-compatible tools:\n\n1. Open VS Code\n2. Access Claude (or other MCP-enabled AI assistant)\n3. Use natural language to interact with your Kubernetes cluster:\n   - \"List all pods in the default namespace\"\n   - \"Show me the logs for pod nginx-123\"\n   - \"Get the CPU usage for worker-node-1\"\n   - \"Describe the deployment called my-app\"\n\n### Configuration Options\n\nYou can customize the configuration by modifying the settings:\n\n```json\n{\n  \"mcp.mcpServers\": {\n    \"k8s-mcp-server\": {\n      \"command\": \"k8s-mcp-server\",\n      \"args\": [\"--mode\", \"stdio\"],\n      \"env\": {\n        \"KUBECONFIG\": \"/path/to/your/kubeconfig\",\n        \"KUBERNETES_CONTEXT\": \"your-context-name\"\n      }\n    }\n  }\n}\n```\n\n### Troubleshooting\n\n- **Binary not found**: Ensure `k8s-mcp-server` is in your PATH\n- **Kubernetes connection issues**: Verify your `KUBECONFIG` path is correct\n- **Permission errors**: Ensure your kubeconfig has the necessary RBAC permissions\n- **Extension not loading**: Restart VS Code after configuration changes\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kubernetes",
        "cloud",
        "pod",
        "cloud platform",
        "cloud platforms",
        "server kubernetes"
      ],
      "category": "cloud-platforms"
    },
    "rohitg00--kubectl-mcp-server": {
      "owner": "rohitg00",
      "name": "kubectl-mcp-server",
      "url": "https://github.com/rohitg00/kubectl-mcp-server",
      "imageUrl": "",
      "description": "A Model Context Protocol (MCP) server for Kubernetes that enables AI assistants like Claude, Cursor, and others to interact with Kubernetes clusters through natural language.",
      "stars": 726,
      "forks": 133,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T16:43:16Z",
      "readme_content": "# Kubectl MCP Server\n\nA Model Context Protocol (MCP) server for Kubernetes that enables AI assistants like Claude, Cursor, and others to interact with Kubernetes clusters through natural language.\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Python](https://img.shields.io/badge/python-3.9+-blue.svg)](https://www.python.org/)\n[![Kubernetes](https://img.shields.io/badge/kubernetes-%23326ce5.svg?style=flat&logo=kubernetes&logoColor=white)](https://kubernetes.io/)\n[![MCP](https://img.shields.io/badge/MCP-compatible-green.svg)](https://github.com/modelcontextprotocol/modelcontextprotocol)\n[![PyPI version](https://badge.fury.io/py/kubectl-mcp-tool.svg)](https://pypi.org/project/kubectl-mcp-tool/)\n\n## 🎥 Live Demo - Watch `kubectl-mcp-tool` in Action with Claude!\n![Claude MCP](./docs/claude/claude-mcp.gif)\n\n## 🎥 Live Demo - Watch `kubectl-mcp-tool` in Action with Cursor!\n![Cursor MCP](./docs/cursor/cursor-mcp.gif)\n\n## 🎥 Live Demo - Watch `kubectl-mcp-tool` in Action with Windsurf!\n![Windsurf MCP](./docs/windsurf/windsurf-mcp.gif)\n\n\n## Features\n\n### Core Kubernetes Operations\n- [x] Connect to a Kubernetes cluster\n- [x] List and manage pods, services, deployments, and nodes\n- [x] Create, delete, and describe pods and other resources\n- [x] Get pod logs and Kubernetes events\n- [x] Support for Helm v3 operations (installation, upgrades, uninstallation)\n- [x] kubectl explain and api-resources support\n- [x] Choose namespace for next commands (memory persistence)\n- [x] Port forward to pods\n- [x] Scale deployments and statefulsets\n- [x] Execute commands in containers\n- [x] Manage ConfigMaps and Secrets\n- [x] Rollback deployments to previous versions\n- [x] Ingress and NetworkPolicy management\n- [x] Context switching between clusters\n\n### Natural Language Processing\n- [x] Process natural language queries for kubectl operations\n- [x] Context-aware commands with memory of previous operations\n- [x] Human-friendly explanations of Kubernetes concepts\n- [x] Intelligent command construction from intent\n- [x] Fallback to kubectl when specialized tools aren't available\n- [x] Mock data support for offline/testing scenarios\n- [x] Namespace-aware query handling\n\n### Monitoring\n- [x] Cluster health monitoring\n- [x] Resource utilization tracking\n- [x] Pod status and health checks\n- [x] Event monitoring and alerting\n- [x] Node capacity and allocation analysis\n- [x] Historical performance tracking\n- [x] Resource usage statistics via kubectl top\n- [x] Container readiness and liveness tracking\n\n### Security\n- [x] RBAC validation and verification\n- [x] Security context auditing\n- [x] Secure connections to Kubernetes API\n- [x] Credentials management\n- [x] Network policy assessment\n- [x] Container security scanning\n- [x] Security best practices enforcement\n- [x] Role and ClusterRole management\n- [x] ServiceAccount creation and binding\n- [x] PodSecurityPolicy analysis\n- [x] RBAC permissions auditing\n- [x] Security context validation\n\n### Diagnostics\n- [x] Cluster diagnostics and troubleshooting\n- [x] Configuration validation\n- [x] Error analysis and recovery suggestions\n- [x] Connection status monitoring\n- [x] Log analysis and pattern detection\n- [x] Resource constraint identification\n- [x] Pod health check diagnostics\n- [x] Common error pattern identification\n- [x] Resource validation for misconfigurations\n- [x] Detailed liveness and readiness probe validation\n\n### Advanced Features\n- [x] Multiple transport protocols support (stdio, SSE)\n- [x] Integration with multiple AI assistants\n- [x] Extensible tool framework\n- [x] Custom resource definition support\n- [x] Cross-namespace operations\n- [x] Batch operations on multiple resources\n- [x] Intelligent resource relationship mapping\n- [x] Error explanation with recovery suggestions\n- [x] Volume management and identification\n\n## Architecture\n\n### Model Context Protocol (MCP) Integration\n\nThe Kubectl MCP Tool implements the [Model Context Protocol (MCP)](https://github.com/modelcontextprotocol/spec), enabling AI assistants to interact with Kubernetes clusters through a standardized interface. The architecture consists of:\n\n1. **MCP Server**: A compliant server that handles requests from MCP clients (AI assistants)\n2. **Tools Registry**: Registers Kubernetes operations as MCP tools with schemas\n3. **Transport Layer**: Supports stdio, SSE, and HTTP transport methods\n4. **Core Operations**: Translates tool calls to Kubernetes API operations\n5. **Response Formatter**: Converts Kubernetes responses to MCP-compliant responses\n\n### Request Flow\n\n![Request Flow](./image.png)\n\n### Dual Mode Operation\n\nThe tool operates in two modes:\n\n1. **CLI Mode**: Direct command-line interface for executing Kubernetes operations\n2. **Server Mode**: Running as an MCP server to handle requests from AI assistants\n\n## Installation\n\nFor detailed installation instructions, please see the [Installation Guide](./docs/INSTALLATION.md).\n\nYou can install kubectl-mcp-tool directly from PyPI:\n\n```bash\npip install kubectl-mcp-tool\n```\n\nFor a specific version:\n\n```bash\npip install kubectl-mcp-tool==1.1.1\n```\n\nThe package is available on PyPI: [https://pypi.org/project/kubectl-mcp-tool/1.1.1/](https://pypi.org/project/kubectl-mcp-tool/1.1.1/)\n\n### Prerequisites\n\n- Python 3.9+\n- kubectl CLI installed and configured\n- Access to a Kubernetes cluster\n- pip (Python package manager)\n\n### Global Installation\n\n```bash\n# Install latest version from PyPI\npip install kubectl-mcp-tool\n\n# Or install development version from GitHub\npip install git+https://github.com/rohitg00/kubectl-mcp-server.git\n```\n\n### Local Development Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/rohitg00/kubectl-mcp-server.git\ncd kubectl-mcp-server\n\n# Install in development mode\npip install -e .\n```\n\n### Verifying Installation\n\nAfter installation, verify the tool is working correctly:\n\n```bash\nkubectl-mcp --help\n```\n\nNote: This tool is designed to work as an MCP server that AI assistants connect to, not as a direct kubectl replacement. The primary command available is `kubectl-mcp serve` which starts the MCP server.\n\n## Docker Image\n\nIf you prefer using Docker, a pre-built image is available on Docker Hub:\n\n```bash\n# Pull the latest image\ndocker pull rohitghumare64/kubectl-mcp-server:latest\n```\n\n### Running the image\n\nThe server inside the container listens on port **8000**. Bind any free host port to 8000 and mount your kubeconfig:\n\n```bash\n# Replace 8081 with any free port on your host\n# Mount your local ~/.kube directory for cluster credentials\n\ndocker run -p 8081:8000 \\\n           -v $HOME/.kube:/root/.kube \\\n           rohitghumare64/kubectl-mcp-server:latest\n```\n\n* `-p 8081:8000` maps host port 8081 → container port 8000.\n* `-v $HOME/.kube:/root/.kube` mounts your kubeconfig so the server can reach the cluster.\n\n### Building a multi-architecture image (AMD64 & ARM64)\n\nIf you want to build and push a multi-arch image (so it runs on both x86_64 and Apple Silicon), use Docker Buildx:\n\n```bash\n# Ensure Buildx and QEMU are installed once per machine\n# docker buildx create --name multiarch --use\n# docker buildx inspect --bootstrap\n\n# Build and push for linux/amd64 and linux/arm64\n# (replace <your_username> if you're publishing to your own registry)\n\ndocker buildx build \\\n  --platform linux/amd64,linux/arm64 \\\n  -t rohitghumare64/kubectl-mcp-server:latest \\\n  --push .\n```\n\nThe published image will contain a manifest list with both architectures, and Docker will automatically pull the correct variant on each machine.\n\n### Configuration\n\nThe MCP server is allowed to access these paths to read your Kubernetes configuration:\n\n```yaml\nrun:\n  volumes:\n    - '{{kubectl-mcp-server.kubeconfig}}:/root/.kube'\nconfig:\n  description: The MCP server is allowed to access this path\n  parameters:\n    type: object\n    properties:\n      kubeconfig:\n        type: string\n        default:\n          $HOME/.kube\n    required:\n      - kubeconfig\n```\n\nThis configuration allows users to add their kubeconfig directory to the container, enabling the MCP server to authenticate with their Kubernetes cluster.\n\n## Usage with AI Assistants\n\n### Using the MCP Server\n\nThe MCP Server (`kubectl_mcp_tool.mcp_server`) is a robust implementation built on the FastMCP SDK that provides enhanced compatibility across different AI assistants:\n\n> **Note**: If you encounter any errors with the MCP Server implementation, you can fall back to using the minimal wrapper by replacing `kubectl_mcp_tool.mcp_server` with `kubectl_mcp_tool.minimal_wrapper` in your configuration. The minimal wrapper provides basic capabilities with simpler implementation.\n\n1. **Direct Configuration**\n   ```json\n   {\n     \"mcpServers\": {\n       \"kubernetes\": {\n         \"command\": \"python\",\n         \"args\": [\"-m\", \"kubectl_mcp_tool.mcp_server\"],\n         \"env\": {\n           \"KUBECONFIG\": \"/path/to/your/.kube/config\",\n           \"PATH\": \"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\",\n           \"MCP_LOG_FILE\": \"/path/to/logs/debug.log\",\n           \"MCP_DEBUG\": \"1\"\n         }\n       }\n     }\n   }\n   ```\n\n2. **Key Environment Variables**\n   - `MCP_LOG_FILE`: Path to log file (recommended to avoid stdout pollution)\n   - `MCP_DEBUG`: Set to \"1\" for verbose logging\n   - `MCP_TEST_MOCK_MODE`: Set to \"1\" to use mock data instead of real cluster\n   - `KUBECONFIG`: Path to your Kubernetes config file\n   - `KUBECTL_MCP_LOG_LEVEL`: Set to \"DEBUG\", \"INFO\", \"WARNING\", or \"ERROR\"\n\n3. **Testing the MCP Server**\n   You can test if the server is working correctly with:\n   ```bash\n   python -m kubectl_mcp_tool.simple_ping\n   ```\n   This will attempt to connect to the server and execute a ping command.\n\n   Alternatively, you can directly run the server with:\n   ```bash\n   python -m kubectl_mcp_tool\n   ```\n\n### Claude Desktop\n\nAdd the following to your Claude Desktop configuration at `~/Library/Application\\ Support/Claude/claude_desktop_config.json` (Windows: `%APPDATA%\\Claude\\mcp.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"kubernetes\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"kubectl_mcp_tool.mcp_server\"], \n      \"env\": {\n        \"KUBECONFIG\": \"$HOME/.kube/config\" // or whatever your path is for the config file\n      }\n    }\n  }\n}\n```\n\n### Cursor AI\n\nAdd the following to your Cursor AI settings under MCP by adding a new global MCP server:\n\n```json\n{\n  \"mcpServers\": {\n    \"kubernetes\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"kubectl_mcp_tool.mcp_server\"],\n      \"env\": {\n        \"KUBECONFIG\": \"/path/to/your/.kube/config\",\n        \"PATH\": \"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin\"\n      }\n    }\n  }\n}\n```\n\nSave this configuration to `~/.cursor/mcp.json` for global settings.\n\n> **Note**: Replace `/path/to/your/.kube/config` with the actual path to your kubeconfig file. On most systems, this is `~/.kube/config`.\n\n### Windsurf\n\nAdd the following to your Windsurf configuration at `~/.config/windsurf/mcp.json` (Windows: `%APPDATA%\\WindSurf\\mcp.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"kubernetes\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"kubectl_mcp_tool.mcp_server\"],\n      \"env\": {\n        \"KUBECONFIG\": \"/path/to/your/.kube/config\"\n      }\n    }\n  }\n}\n```\n\n### Automatic Configuration\n\nFor automatic configuration of all supported AI assistants, run the provided installation script:\n\n```bash\nbash install.sh\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kubernetes",
        "kubectl",
        "cloud",
        "cloud platforms",
        "cloud platform",
        "platform service"
      ],
      "category": "cloud-platforms"
    },
    "silenceper--mcp-k8s": {
      "owner": "silenceper",
      "name": "mcp-k8s",
      "url": "https://github.com/silenceper/mcp-k8s",
      "imageUrl": "",
      "description": "MCP-K8S is an AI-driven Kubernetes resource management tool that allows users to operate any resources in Kubernetes clusters through natural language interaction, including native resources (like Deployment, Service) and custom resources (CRD). No need to memorize complex commands - just describe your needs, and AI will accurately execute the corresponding cluster operations, greatly enhancing the usability of Kubernetes.",
      "stars": 126,
      "forks": 24,
      "license": "Apache License 2.0",
      "language": "Go",
      "updated_at": "2025-09-30T05:55:48Z",
      "readme_content": "# mcp-k8s\n\n[![Go Version](https://img.shields.io/github/go-mod/go-version/silenceper/mcp-k8s)](https://github.com/silenceper/mcp-k8s/blob/main/go.mod)\n[![License](https://img.shields.io/github/license/silenceper/mcp-k8s)](https://github.com/silenceper/mcp-k8s/blob/main/LICENSE)\n[![Latest Release](https://img.shields.io/github/v/release/silenceper/mcp-k8s)](https://github.com/silenceper/mcp-k8s/releases)\n[![Go Report Card](https://goreportcard.com/badge/github.com/silenceper/mcp-k8s)](https://goreportcard.com/report/github.com/silenceper/mcp-k8s)\n[![Go CI](https://github.com/silenceper/mcp-k8s/actions/workflows/go-ci.yml/badge.svg)](https://github.com/silenceper/mcp-k8s/actions/workflows/go-ci.yml)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/silenceper/mcp-k8s/pulls)\n\nA Kubernetes MCP (Model Control Protocol) server that enables interaction with Kubernetes clusters through MCP tools.\n\n## Features\n\n- Query supported Kubernetes resource types (built-in resources and CRDs)\n- Kubernetes resource operations with fine-grained control\n  - Read operations: get resource details, list resources by type with filtering options\n  - Write operations: create, update, and delete resources (each can be independently enabled/disabled)\n  - Support for all Kubernetes resource types, including custom resources\n- Connects to Kubernetes cluster using kubeconfig\n- Helm support with fine-grained control\n  - Helm releases management (list, get, install, upgrade, uninstall)\n  - Helm repositories management (list, add, remove)\n  - Each operation can be independently enabled/disabled\n\n## Preview\n> Interaction through cursor\n\n![](./docs/create-deployment.png)\n\n## Use Cases\n\n### 1. Kubernetes Resource Management via LLM\n\n- **Interactive Resource Management**: Manage Kubernetes resources through natural language interaction with LLM, eliminating the need to memorize complex kubectl commands\n- **Batch Operations**: Describe complex batch operation requirements in natural language, letting LLM translate them into specific resource operations\n- **Resource Status Queries**: Query cluster resource status using natural language and receive easy-to-understand responses\n\n### 2. Automated Operations Scenarios\n\n- **Intelligent Operations Assistant**: Serve as an intelligent assistant for operators in daily cluster management tasks\n- **Problem Diagnosis**: Assist in cluster problem diagnosis through natural language problem descriptions\n- **Configuration Review**: Leverage LLM's understanding capabilities to help review and optimize Kubernetes resource configurations\n\n### 3. Development and Testing Support\n\n- **Quick Prototype Validation**: Developers can quickly create and validate resource configurations through natural language\n- **Environment Management**: Simplify test environment resource management, quickly create, modify, and clean up test resources\n- **Configuration Generation**: Automatically generate resource configurations that follow best practices based on requirement descriptions\n\n### 4. Education and Training Scenarios\n\n- **Interactive Learning**: Newcomers can learn Kubernetes concepts and operations through natural language interaction\n- **Best Practice Guidance**: LLM provides best practice suggestions during resource operations\n- **Error Explanation**: Provide easy-to-understand error explanations and correction suggestions when operations fail\n\n## Architecture\n\n### 1. Project Overview\n\nAn stdio-based MCP server that connects to Kubernetes clusters and provides the following capabilities:\n- Query Kubernetes resource types (including built-in resources and CRDs)\n- CRUD operations on Kubernetes resources (with configurable write operations)\n- Helm operations for release and repository management\n\n### 2. Technical Stack\n\n- Go\n- [mcp-go](https://github.com/mark3labs/mcp-go) SDK\n- Kubernetes client-go library\n- Helm v3 client library\n- Stdio for communication\n\n### 3. Core Components\n\n1. **MCP Server**: Uses mcp-go's `mcp-k8s` package to create an stdio-based MCP server\n2. **K8s Client**: Uses client-go to connect to Kubernetes clusters\n3. **Helm Client**: Uses Helm v3 library for Helm operations\n4. **Tool Implementations**: Implements various MCP tools for different Kubernetes operations\n\n### 4. Available Tools\n\n#### Resource Type Query Tools\n- `get_api_resources`: Get all supported API resource types in the cluster\n\n#### Resource Operation Tools\n- `get_resource`: Get detailed information about a specific resource\n- `list_resources`: List all instances of a resource type\n- `create_resource`: Create new resources (can be disabled)\n- `update_resource`: Update existing resources (can be disabled)\n- `delete_resource`: Delete resources (can be disabled)\n\n#### Helm Operation Tools\n- `list_helm_releases`: List all Helm releases in the cluster\n- `get_helm_release`: Get detailed information about a specific Helm release\n- `install_helm_chart`: Install a Helm chart (can be disabled)\n- `upgrade_helm_chart`: Upgrade a Helm release (can be disabled)\n- `uninstall_helm_chart`: Uninstall a Helm release (can be disabled)\n- `list_helm_repositories`: List configured Helm repositories\n- `add_helm_repository`: Add a new Helm repository (can be disabled)\n- `remove_helm_repository`: Remove a Helm repository (can be disabled)\n\n## Usage\n\nmcp-k8s supports two communication modes:\n\n### 1. Stdio Mode (Default)\n\nIn stdio mode, mcp-k8s communicates with the client through standard input/output streams. This is the default mode and is suitable for most use cases.\n\n```bash\n# Run in stdio mode (default)\n{\n    \"mcpServers\":\n    {\n        \"mcp-k8s\":\n        {\n            \"command\": \"/path/to/mcp-k8s\",\n            \"args\":\n            [\n                \"-kubeconfig\",\n                \"/path/to/kubeconfig\",\n                \"-enable-create\",\n                \"-enable-delete\",\n                \"-enable-update\",\n                \"-enable-list\",\n                \"-enable-helm-install\",\n                \"-enable-helm-upgrade\"\n            ]\n        }\n    }\n}\n```\n\n### 2. SSE Mode\n\nIn SSE (Server-Sent Events) mode, mcp-k8s exposes an HTTP endpoint to mcp client.\nYou can deploy the service on a remote server (but you need to pay attention to security)\n\n```bash\n# Run in SSE mode\n./bin/mcp-k8s -kubeconfig=/path/to/kubeconfig -transport=sse -port=8080 -host=localhost -enable-create -enable-delete -enable-list -enable-update -enable-helm-install\n# This command will open all operations\n```\n\nmcp config\n```json\n{\n  \"mcpServers\": {\n    \"mcp-k8s\": {\n      \"url\": \"http://localhost:8080/sse\",\n      \"args\": []\n    }\n  }\n}\n```\n\nSSE mode configuration:\n- `-transport`: Set to \"sse\" to enable SSE mode\n- `-port`: HTTP server port (default: 8080)\n- `--host`: HTTP server host (default: \"localhost\")\n\n### 3. Docker environment\n#### SSE Mode\n\n1. Complete Example\nAssuming your image name is mcp-k8s and you need to map ports and set environment parameters, you can run:\n```bash\ndocker run --rm -p 8080:8080 -i -v ~/.kube/config:/root/.kube/config ghcr.io/silenceper/mcp-k8s:latest -transport=sse\n```\n#### stdio Mode\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-k8s\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"-v\",\n        \"~/.kube/config:/root/.kube/config\",\n        \"--rm\",\n        \"ghcr.io/silenceper/mcp-k8s:latest\"\n      ]\n    }\n  }\n}\n```\n\n\n## Getting Started\n\n### Direct Usage\nYou can directly download the binary for your platform from the [releases page](https://github.com/silenceper/mcp-k8s/releases) and use it immediately.\n\n### Go Install\n\n```bash\ngo install github.com/silenceper/mcp-k8s/cmd/mcp-k8s@latest\n```\n\n### Build\n\n```bash\ngit clone https://github.com/silenceper/mcp-k8s.git\ncd mcp-k8s\ngo build -o bin/mcp-k8s cmd/mcp-k8s/main.go\n```\n\n### Command Line Arguments\n\n#### Kubernetes Resource Operations\n- `-kubeconfig`: Path to Kubernetes configuration file (uses default config if not specified)\n- `-enable-create`: Enable resource creation operations (default: false)\n- `-enable-update`: Enable resource update operations (default: false)\n- `-enable-delete`: Enable resource deletion operations (default: false)\n- `-enable-list`: Enable resource list operations (default: true)\n\n#### Helm Operations\n- `-enable-helm-release-list`: Enable Helm release list operations (default: true)\n- `-enable-helm-release-get`: Enable Helm release get operations (default: true)\n- `-enable-helm-install`: Enable Helm chart installation (default: false)\n- `-enable-helm-upgrade`: Enable Helm chart upgrade (default: false)\n- `-enable-helm-uninstall`: Enable Helm chart uninstallation (default: false)\n- `-enable-helm-repo-list`: Enable Helm repository list operations (default: true)\n- `-enable-helm-repo-add`: Enable Helm repository add operations (default: false)\n- `-enable-helm-repo-remove`: Enable Helm repository remove operations (default: false)\n\n#### Transport Configuration\n- `-transport`: Transport type (stdio or sse) (default: \"stdio\")\n- `-host`: Host for SSE transport (default \"localhost\")\n- `-port`: TCP port for SSE transport (default 8080)\n\n### Integration with MCP Clients\n\nmcp-k8s is an stdio-based MCP server that can be integrated with any MCP-compatible LLM client. Refer to your MCP client's documentation for integration instructions.\n\n## Security Considerations\n\n- Write operations are strictly controlled through independent configuration switches\n- Uses RBAC to ensure K8s client has only necessary permissions\n- Validates all user inputs to prevent injection attacks\n- Helm operations follow the same security principles with read operations enabled by default and write operations disabled by default\n\n## Follow WeChat Official Account\n![AI技术小林](./docs/qrcode.png)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kubernetes",
        "silenceper",
        "cloud",
        "services silenceper",
        "kubernetes resource",
        "silenceper mcp"
      ],
      "category": "cloud-platforms"
    },
    "strowk--mcp-k8s-go": {
      "owner": "strowk",
      "name": "mcp-k8s-go",
      "url": "https://github.com/strowk/mcp-k8s-go",
      "imageUrl": "",
      "description": "Kubernetes cluster operations through MCP",
      "stars": 348,
      "forks": 49,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-10-03T16:13:05Z",
      "readme_content": "<h4 align=\"center\">Golang-based MCP server connecting to Kubernetes</h4>\r\n\r\n<h1 align=\"center\">\r\n   <img src=\"docs/images/logo.png\" width=\"180\"/>\r\n   <br/>\r\n   MCP K8S Go\r\n</h1>\r\n\r\n<p align=\"center\">\r\n  <a href=\"#features\">Features</a> ⚙\r\n  <a href=\"#browse-with-inspector\">Browse With Inspector</a> ⚙\r\n  <a href=\"#use-with-claude\">Use With Claude</a> ⚙\r\n  <a href=\"https://github.com/strowk/mcp-k8s-go/blob/main/CONTRIBUTING.md\">Contributing ↗</a> ⚙\r\n  <a href=\"https://modelcontextprotocol.io\">About MCP ↗</a>\r\n</p>\r\n\r\n<p align=\"center\">\r\n    <a href=\"https://github.com/strowk/mcp-k8s-go/actions/workflows/dependabot/dependabot-updates\"><img src=\"https://github.com/strowk/mcp-k8s-go/actions/workflows/dependabot/dependabot-updates/badge.svg\"></a>\r\n    <a href=\"https://github.com/strowk/mcp-k8s-go/actions/workflows/test.yaml\"><img src=\"https://github.com/strowk/mcp-k8s-go/actions/workflows/test.yaml/badge.svg\"></a>\r\n\t  <a href=\"https://github.com/strowk/mcp-k8s-go/actions/workflows/golangci-lint.yaml\"><img src=\"https://github.com/strowk/mcp-k8s-go/actions/workflows/golangci-lint.yaml/badge.svg\"/></a>\r\n    <br/>\r\n    <a href=\"https://github.com/strowk/mcp-k8s-go/releases/latest\"><img src=\"https://img.shields.io/github/v/release/strowk/mcp-k8s-go?logo=github&color=22ff22\" alt=\"latest release badge\"></a>\r\n    <a href=\"https://goreportcard.com/report/github.com/strowk/mcp-k8s-go\"><img src=\"https://goreportcard.com/badge/github.com/strowk/mcp-k8s-go\" alt=\"Go Reference\"></a>\r\n    <a href=\"https://github.com/strowk/mcp-k8s-go/blob/main/LICENSE\"><img src=\"https://img.shields.io/github/license/strowk/mcp-k8s-go\" alt=\"license badge\"></a>\r\n</p>\r\n\r\n## Features\r\n\r\nMCP 💬 prompt 🗂️ resource 🤖 tool \r\n\r\n- 🗂️🤖 List Kubernetes contexts\r\n- 💬🤖 List Kubernetes namespaces\r\n- 🤖 List, get, create and modify any Kubernetes resources\r\n  - includes custom mappings for resources like pods, services, deployments\r\n- 🤖 List Kubernetes nodes\r\n- 💬 List Kubernetes pods\r\n- 🤖 Get Kubernetes events\r\n- 🤖 Get Kubernetes pod logs\r\n- 🤖 Run command in Kubernetes pod\r\n\r\n## Browse With Inspector\r\n\r\nTo use latest published version with Inspector you can run this:\r\n\r\n```bash\r\nnpx @modelcontextprotocol/inspector npx @strowk/mcp-k8s\r\n```\r\n\r\n## Use With Claude\r\n\r\n<details><summary><b>\r\nDemo Usage\r\n</b></summary>\r\n\r\nFollowing chat with Claude Desktop demonstrates how it looks when selected particular context as a resource and then asked to check pod logs for errors in kube-system namespace:\r\n\r\n![Claude Desktop](docs/images/claude-desktop-logs.png)\r\n\r\n</details>\r\n\r\nTo use this MCP server with Claude Desktop (or any other client) you might need to choose which way of installation to use.\r\n\r\nYou have multiple options:\r\n\r\n|              | <a href=\"#using-smithery\">Smithery</a> | <a href=\"#using-mcp-get\">mcp-get</a> | <a href=\"#prebuilt-from-npm\">Pre-built NPM</a> | <a href=\"#from-github-releases\">Pre-built in Github</a> | <a href=\"#building-from-source\">From sources</a> | <a href=\"#using-docker\">Using Docker</a> |\r\n| ------------ | -------------------------------------- | ------------------------------------ | ---------------------------------------------- | ------------------------------------------------------- | ------------------------------------------------ | ---------------------------------------- |\r\n| Claude Setup | Auto                                   | Auto                                 | Manual                                         | Manual                                                  | Manual                                           | Manual                                   |\r\n| Prerequisite | Node.js                                | Node.js                              | Node.js                                        | None                                                    | Golang                                           | Docker                                   |\r\n\r\n### Using Smithery\r\n\r\nTo install MCP K8S Go for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@strowk/mcp-k8s):\r\n\r\n```bash\r\nnpx -y @smithery/cli install @strowk/mcp-k8s --client claude\r\n```\r\n\r\n### Using mcp-get\r\n\r\nTo install MCP K8S Go for Claude Desktop automatically via [mcp-get](https://mcp-get.com/packages/%40strowk%2Fmcp-k8s):\r\n\r\n```bash\r\nnpx @michaellatman/mcp-get@latest install @strowk/mcp-k8s\r\n```\r\n\r\n### Manually with prebuilt binaries\r\n\r\n#### Prebuilt from npm\r\n\r\nUse this if you have npm installed and want to use pre-built binaries:\r\n\r\n```bash\r\nnpm install -g @strowk/mcp-k8s\r\n```\r\n\r\nThen check version by running `mcp-k8s --version` and if this printed installed version, you can proceed to add configuration to `claude_desktop_config.json` file:\r\n\r\n```json\r\n{\r\n  \"mcpServers\": {\r\n    \"mcp_k8s\": {\r\n      \"command\": \"mcp-k8s\",\r\n      \"args\": []\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n, or using `npx` with any client:\r\n\r\n```bash\r\nnpx @strowk/mcp-k8s\r\n```\r\n\r\nFor example for Claude:\r\n\r\n```json\r\n{\r\n  \"mcpServers\": {\r\n    \"mcp_k8s\": {\r\n      \"command\": \"npx\",\r\n      \"args\": [\r\n        \"@strowk/mcp-k8s\"\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### From GitHub releases\r\n\r\nHead to [GitHub releases](https://github.com/strowk/mcp-k8s-go/releases) and download the latest release for your platform.\r\n\r\nUnpack the archive, which would contain binary named `mcp-k8s-go`, put that binary somewhere in your PATH and then add the following configuration to the `claude_desktop_config.json` file:\r\n\r\n```json\r\n{\r\n  \"mcpServers\": {\r\n    \"mcp_k8s\": {\r\n      \"command\": \"mcp-k8s-go\",\r\n      \"args\": []\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Building from source\r\n\r\nYou would need Golang installed to build this project:\r\n\r\n```bash\r\ngo get github.com/strowk/mcp-k8s-go\r\ngo install github.com/strowk/mcp-k8s-go\r\n```\r\n\r\n, and then add the following configuration to the `claude_desktop_config.json` file:\r\n\r\n```json\r\n{\r\n  \"mcpServers\": {\r\n    \"mcp_k8s_go\": {\r\n      \"command\": \"mcp-k8s-go\",\r\n      \"args\": []\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Using Docker\r\n\r\nThis server is built and published to Docker Hub since 0.3.1-beta.2 release with multi-arch images available for linux/amd64 and linux/arm64 architectures.\r\n\r\nYou can use latest tag f.e like this:\r\n\r\n```bash\r\ndocker run -i -v ~/.kube/config:/home/nonroot/.kube/config --rm mcpk8s/server:latest\r\n```\r\n\r\nWindows users might need to replace `~/.kube/config` with `//c/Users/<username>/.kube/config` at least in Git Bash.\r\n\r\nFor Claude:\r\n\r\n```json\r\n{\r\n  \"mcpServers\": {\r\n    \"mcp_k8s_go\": {\r\n      \"command\": \"docker\",\r\n      \"args\": [\r\n        \"run\",\r\n        \"-i\",\r\n        \"-v\",\r\n        \"~/.kube/config:/home/nonroot/.kube/config\",\r\n        \"--rm\",\r\n        \"mcpk8s/server:latest\"\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Environment Variables and Command-line Options\r\n\r\nThe following environment variables are used by the MCP server:\r\n\r\n- `KUBECONFIG`: Path to your Kubernetes configuration file (optional, defaults to ~/.kube/config)\r\n\r\nThe following command-line options are supported:\r\n\r\n- `--allowed-contexts=<ctx1,ctx2,...>`: Comma-separated list of allowed Kubernetes contexts that users can access. If not specified, all contexts are allowed.\r\n- `--readonly`: Disables any tool which can write changes to the cluster\r\n- `--help`: Display help information\r\n- `--version`: Display version information\r\n\r\nFor example if you are configuring Claude Desktop, you can add the following configuration to `claude_desktop_config.json` file:\r\n\r\n```json\r\n{\r\n    \"mcpServers\": {\r\n        \"mcp_k8s\": {\r\n            \"command\": \"mcp-k8s\",\r\n            \"args\": [\r\n                \"--allowed-contexts=dev,prod\",\r\n                \"--readonly\"\r\n            ]\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n, which would allow only `dev` and `prod` contexts to be used and would disable any tool which can write changes to the cluster.\r\n\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kubernetes",
        "cloud",
        "cluster",
        "cloud platforms",
        "cloud platform",
        "platforms cloud"
      ],
      "category": "cloud-platforms"
    },
    "weibaohui--k8m": {
      "owner": "weibaohui",
      "name": "k8m",
      "url": "https://github.com/weibaohui/k8m",
      "imageUrl": "",
      "description": "Provides MCP multi-cluster Kubernetes management and operations, featuring a management interface, logging, and nearly 50 built-in tools covering common DevOps and development scenarios. Supports both standard and CRD resources.",
      "stars": 672,
      "forks": 108,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-10-02T02:02:09Z",
      "readme_content": "<div align=\"center\">\n<h1>K8M</h1>\n</div>\n\n\n[English](README_en.md) | [中文](README.md)\n\n[![k8m](https://img.shields.io/badge/License-MIT-blue?style=flat-square)](https://github.com/weibaohui/k8m/blob/master/LICENSE)\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/weibaohui/k8m)](https://archestra.ai/mcp-catalog/weibaohui__k8m)\n\n![Alt](https://repobeats.axiom.co/api/embed/9fde094e5c9a1d4c530e875864ee7919b17d0690.svg \"Repobeats analytics image\")\n\n**k8m** 是一款AI驱动的 Mini Kubernetes AI Dashboard 轻量级控制台工具，专为简化集群管理设计。它基于 AMIS 构建，并通过  [\n`kom`](https://github.com/weibaohui/kom)  作为 Kubernetes API 客户端，**k8m** 内置了\nQwen2.5-Coder-7B，支持deepseek-ai/DeepSeek-R1-Distill-Qwen-7B模型\n模型交互能力，同时支持接入您自己的私有化大模型（包括ollama）。\n\n### 演示DEMO\n\n[DEMO](http://107.150.119.151:3618)\n[DEMO-InCluster模式](http://107.150.119.151:31999)\n用户名密码 demo/demo\n\n### 文档\n\n- 详细的配置和使用说明请参考[文档](docs/README.md)。\n- 更新日志请参考[更新日志](CHANGELOG.md)。\n- 如需自定义大模型参数、配置私有化大模型，请参考[自托管/自定义大模型支持](docs/use-self-hosted-ai.md)\n  和 [Ollama配置](docs/ollama.md)。\n- 详细的配置选项说明请参考[配置选项说明](docs/config.md)。\n- 数据库配置请参考[数据库配置说明](docs/database.md)。\n- DeepWiki 文档：[开发设计文档](https://deepwiki.com/weibaohui/k8m)\n\n### 主要特点\n\n- **迷你化设计**：所有功能整合在一个单一的可执行文件中，部署便捷，使用简单。\n- **简便易用**：友好的用户界面和直观的操作流程，让 Kubernetes 管理更加轻松。支持标准k8s、aws eks、k3s、kind、k0s等集群类型。\n- **高效性能**：后端采用 Golang 构建，前端基于百度 AMIS，保证资源利用率高、响应速度快。\n- **AI驱动融合**\n  ：基于ChatGPT实现划词解释、资源指南、YAML属性自动翻译、Describe信息解读、日志AI问诊、运行命令推荐,并集成了[k8s-gpt](https://github.com/k8sgpt-ai/k8sgpt)\n  功能，实现中文展现，为管理k8s提供智能化支持。\n- **MCP集成**:可视化管理MCP，实现大模型调用Tools，内置k8s多集群MCP工具49种，可组合实现超百种集群操作，可作为MCP Server\n  供其他大模型软件使用。轻松实现大模型管理k8s。可详细记录每一次MCP调用。支持mcp.so主流服务。\n- **MCP权限打通**:多集群管理权限与MCP大模型调用权限打通，一句话概述：谁使用大模型，就用谁的权限执行MCP。安全使用，无后顾之忧，避免操作越权。\n- **多集群管理**：自动识别集群内部使用InCluster模式，配置kubeconfig路径后自动扫描同级目录下的配置文件，同时注册管理多个集群。\n- **多集群权限管理**：支持对用户、用户组进行授权，可按集群授权，包括集群只读、Exec命令、集群管理员三种权限。对用户组授权后，组内用户均获得相应授权。支持设置命名空间黑白名单。\n- **支持k8s最新特性**:支持APIGateway、OpenKruise等功能特性。\n- **Pod 文件管理**：支持 Pod 内文件的浏览、编辑、上传、下载、删除，简化日常操作。\n- **Pod 运行管理**：支持实时查看 Pod 日志，下载日志，并在 Pod 内直接执行 Shell 命令。支持grep -A -B高亮搜索\n- **API开放**:支持创建API KEY，从第三方外部访问，提供swagger接口管理页面。\n- **集群巡检支持**：支持定时巡检、自定义巡检规则，支持lua脚本规则。支持发送到钉钉群、微信群、飞书群。\n- **CRD 管理**：可自动发现并管理 CRD 资源，提高工作效率。\n- **Helm 市场**：支持Helm自由添加仓库，一键安装、卸载、升级 Helm 应用，支持自动更新。\n- **跨平台支持**：兼容 Linux、macOS 和 Windows，并支持 x86、ARM 等多种架构，确保多平台无缝运行。\n- **多数据库支持**：支持SQLite、MySql、PostgreSql等多种数据库。\n- **完全开源**：开放所有源码，无任何限制，可自由定制和扩展，可商业使用。\n\n**k8m** 的设计理念是“AI驱动，轻便高效，化繁为简”，它帮助开发者和运维人员快速上手，轻松管理 Kubernetes 集群。\n\n![](https://github.com/user-attachments/assets/0951d6c1-389c-49cb-b247-84de15b6ec0e)\n\n## **运行**\n\n1. **下载**：从 [GitHub release](https://github.com/weibaohui/k8m/releases) 下载最新版本。\n2. **运行**：使用 `./k8m` 命令启动,访问[http://127.0.0.1:3618](http://127.0.0.1:3618)。\n3. **登录用户名密码**：\n    - 用户名：`k8m`\n    - 密码：`k8m`\n    - 请注意上线后修改用户名密码、启用两步验证。\n4. **参数**：\n\n```shell\nUsage of ./k8m:\n      --enable-temp-admin                是否启用临时管理员账户配置，默认关闭\n      --admin-password string            管理员密码，启用临时管理员账户配置后生效 \n      --admin-username string            管理员用户名，启用临时管理员账户配置后生效\n      --print-config                     是否打印配置信息 (default false)\n      --connect-cluster                  启动集群是是否自动连接现有集群，默认关闭\n  -d, --debug                            调试模式\n      --in-cluster                       是否自动注册纳管宿主集群，默认启用\n      --jwt-token-secret string          登录后生成JWT token 使用的Secret (default \"your-secret-key\")\n  -c, --kubeconfig string                kubeconfig文件路径 (default \"/root/.kube/config\")\n      --kubectl-shell-image string       Kubectl Shell 镜像。默认为 bitnami/kubectl:latest，必须包含kubectl命令 (default \"bitnami/kubectl:latest\")\n      --log-v int                        klog的日志级别klog.V(2) (default 2)\n      --login-type string                登录方式，password, oauth, token等,default is password (default \"password\")\n      --image-pull-timeout               Node Shell、Kubectl Shell 镜像拉取超时时间。默认为 30 秒\n      --node-shell-image string          NodeShell 镜像。 默认为 alpine:latest，必须包含`nsenter`命令 (default \"alpine:latest\")\n  -p, --port int                         监听端口 (default 3618)\n  -v, --v Level                          klog的日志级别 (default 2)\n```\n\n也可以直接通过docker-compose(推荐)启动：\n\n```yaml\nservices:\n  k8m:\n    container_name: k8m\n    image: registry.cn-hangzhou.aliyuncs.com/minik8m/k8m\n    restart: always\n    ports:\n      - \"3618:3618\"\n    environment:\n      TZ: Asia/Shanghai\n    volumes:\n      - ./data:/app/data\n```\n\n启动之后，访问`3618`端口，默认用户：`k8m`，默认密码`k8m`。\n如果你想通过在线环境快速拉起体验，可以访问：[k8m](https://cnb.cool/znb/qifei/-/tree/main/letsfly/justforfun/k8m)\n\n## **ChatGPT 配置指南**\n\n### 内置GPT\n\n从v0.0.8版本开始，将内置GPT，无需配置。\n如果您需要使用自己的GPT，请参考以下文档。\n\n- [自托管/自定义大模型支持](use-self-hosted-ai.md) - 如何使用自托管的\n- [Ollama配置](ollama.md) - 如何配置使用Ollama大模型。\n\n### **ChatGPT 状态调试**\n\n如果设置参数后，依然没有效果，请尝试使用`./k8m -v 6`获取更多的调试信息。\n会输出以下信息，通过查看日志，确认是否启用ChatGPT。\n\n```go\nChatGPT 开启状态:true\nChatGPT 启用 key:sk-hl**********************************************, url:https: // api.siliconflow.cn/v1\nChatGPT 使用环境变量中设置的模型:Qwen/Qwen2.5-7B-Instruc\n```\n\n### **ChatGPT 账户**\n\n本项目集成了[github.com/sashabaranov/go-openai](https://github.com/sashabaranov/go-openai)SDK。\n国内访问推荐使用[硅基流动](https://cloud.siliconflow.cn/)的服务。\n登录后，在[https://cloud.siliconflow.cn/account/ak](https://cloud.siliconflow.cn/account/ak)创建API_KEY\n\n## **k8m 支持环境变量设置**\n\nk8m 支持通过环境变量和命令行参数灵活配置，主要参数如下：\n\n| 环境变量              | 默认值                   | 说明                                                           |\n| --------------------- | ------------------------ | -------------------------------------------------------------- |\n| `PORT`                | `3618`                   | 监听的端口号                                                   |\n| `KUBECONFIG`          | `~/.kube/config`         | `kubeconfig` 文件路径，会自动扫描识别同级目录下所有的配置文件  |\n| `ANY_SELECT`          | `\"true\"`                 | 是否开启任意选择划词解释，默认开启 (default true)              |\n| `LOGIN_TYPE`          | `\"password\"`             | 登录方式（如 `password`, `oauth`, `token`）                    |\n| `ENABLE_TEMP_ADMIN`   | `\"false\"`                | 是否启用临时管理员账户配置，默认关闭。初次登录、忘记密码时使用 |\n| `ADMIN_USERNAME`      |                          | 管理员用户名，启用临时管理员账户配置后生效                     |\n| `ADMIN_PASSWORD`      |                          | 管理员密码，启用临时管理员账户配置后生效                       |\n| `DEBUG`               | `\"false\"`                | 是否开启 `debug` 模式                                          |\n| `LOG_V`               | `\"2\"`                    | log输出日志，同klog用法                                        |\n| `JWT_TOKEN_SECRET`    | `\"your-secret-key\"`      | 用于 JWT Token 生成的密钥                                      |\n| `KUBECTL_SHELL_IMAGE` | `bitnami/kubectl:latest` | kubectl shell 镜像地址                                         |\n| `NODE_SHELL_IMAGE`    | `alpine:latest`          | Node shell 镜像地址                                            |\n| `IMAGE_PULL_TIMEOUT`  | `30`                     | Node shell、kubectl shell 镜像拉取超时时间（秒）               |\n| `CONNECT_CLUSTER`     | `\"false\"`                | 启动程序后，是否自动连接发现的集群，默认关闭                   |\n| `PRINT_CONFIG`        | `\"false\"`                | 是否打印配置信息                                               |\n\n详细参数说明和更多配置方式请参考 [docs/readme.md](docs/README.md)。\n\n这些环境变量可以通过在运行应用程序时设置，例如：\n\n```sh\nexport PORT=8080\nexport GIN_MODE=\"release\"\n./k8m\n```\n\n其他参数请参考 [docs/readme.md](docs/README.md)。\n\n## 容器化k8s集群方式运行\n\n使用[KinD](https://kind.sigs.k8s.io/docs/user/quick-start/)、[MiniKube](https://minikube.sigs.k8s.io/docs/start/)\n安装一个小型k8s集群\n\n## KinD方式\n\n* 创建 KinD Kubernetes 集群\n\n```\nbrew install kind\n```\n\n* 创建新的 Kubernetes 集群：\n\n```\nkind create cluster --name k8sgpt-demo\n```\n\n## 将k8m部署到集群中体验\n\n### 安装脚本\n\n```docker\nkubectl apply -f https://raw.githubusercontent.com/weibaohui/k8m/refs/heads/main/deploy/k8m.yaml\n```\n\n* 访问：\n  默认使用了nodePort开放，请访问31999端口。或自行配置Ingress\n  http://NodePortIP:31999\n\n### 修改配置\n\n首选建议通过修改环境变量方式进行修改。 例如增加deploy.yaml中的env参数\n\n## 开发调试\n\n如果你想在本地开发调试，请先执行一次本地前端构建，自动生成dist目录。因为本项目采用了二进制嵌入，没有dist前端会报错。\n\n#### 第一步编译前端\n\n```bash \ncd ui\npnpm run build\n```\n\n#### 编译调试后端\n\n```bash\n#下载依赖\ngo mod tidy\n#运行\nair\n#或者\ngo run main.go \n# 监听localhost:3618端口\n```\n\n#### 前端热加载\n\n```bash\ncd ui\npnpm run dev\n#Vite服务会监听在localhost:3000端口\n#Vite转发后端访问到3618端口\n```\n\n访问http://localhost:3000\n\n### HELP & SUPPORT\n\n如果你有任何进一步的问题或需要额外的帮助，请随时与我联系！\n\n### 特别鸣谢\n\n[zhaomingcheng01](https://github.com/zhaomingcheng01)：提出了诸多非常高质量的建议，为k8m的易用好用做出了卓越贡献~\n\n[La0jin](https://github.com/La0jin):提供在线资源及维护，极大提升了k8m的展示效果\n\n[eryajf](https://github.com/eryajf):为我们提供了非常好用的github actions，为k8m增加了自动化的发版、构建、发布等功能\n\n## 联系我\n\n微信（大罗马的太阳） 搜索ID：daluomadetaiyang,备注k8m。\n<br><img width=\"214\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/166db141-42c5-42c4-9964-8e25cf12d04c\" />\n\n## 微信群\n![输入图片说明](https://foruda.gitee.com/images/1759234568793520473/ccfc8a18_77493.png \"屏幕截图\")\n## QQ群\n![输入图片说明](https://foruda.gitee.com/images/1753099785542398999/184a765a_77493.png \"屏幕截图\")\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kubernetes",
        "cloud",
        "k8m",
        "kubernetes management",
        "cloud platform",
        "cluster kubernetes"
      ],
      "category": "cloud-platforms"
    },
    "weibaohui--kom": {
      "owner": "weibaohui",
      "name": "kom",
      "url": "https://github.com/weibaohui/kom",
      "imageUrl": "",
      "description": "Provides MCP multi-cluster Kubernetes management and operations. It can be integrated as an SDK into your own project and includes nearly 50 built-in tools covering common DevOps and development scenarios. Supports both standard and CRD resources.",
      "stars": 126,
      "forks": 28,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-09-29T02:24:56Z",
      "readme_content": "# Kom - Kubernetes Operations Manager\n\n[English](README_en.md) | [中文](README.md)\n[![kom](https://img.shields.io/badge/License-MIT-blue?style=flat-square)](https://github.com/weibaohui/kom/blob/master/LICENSE)\n\n\n## 简介\n\n`kom` 是一个用于 Kubernetes 操作的工具，相当于SDK级的kubectl、client-go的使用封装。\n它提供了一系列功能来管理 Kubernetes 资源，包括创建、更新、删除和获取资源。这个项目支持多种 Kubernetes 资源类型的操作，并能够处理自定义资源定义（CRD）。\n通过使用 `kom`，你可以轻松地进行资源的增删改查和日志获取以及操作POD内文件等动作，甚至可以使用SQL语句来查询、管理k8s资源。\n\n## **特点**\n1. 简单易用：kom 提供了丰富的功能，包括创建、更新、删除、获取、列表等，包括对内置资源以及CRD资源的操作。\n2. 多集群支持：通过RegisterCluster，你可以轻松地管理多个 Kubernetes 集群，支持AWS EKS集群。\n3. MCP支持：支持多集群的MCP管理,同时支持stdio、sse两种模式，内置58种工具，支持SSE模式，支持私有化部署，多人共享。支持超过百种组合操作。\n4. 支持跨命名空间：通过kom.Namespace(\"default\",\"kube-system\").List(&items) 跨命名空间查询资源。\n5. 链式调用：kom 提供了链式调用，使得操作资源更加简单和直观。\n6. 支持自定义资源定义（CRD）：kom 支持自定义资源定义（CRD），你可以轻松地定义和操作自定义资源。\n7. 支持回调机制，轻松拓展业务逻辑，而不必跟k8s操作强耦合。\n8. 支持POD内文件操作，轻松上传、下载、删除文件。\n9. 支持高频操作封装，如deployment的restart重启、scale扩缩容、启停等20余项操作功能。\n10. 支持SQL查询k8s资源。select * from pod where metadata.namespace='kube-system' or metadata.namespace='default' order by  metadata.creationTimestamp desc \n11. 支持查询缓存，在高频、批量查询场景下，可设置缓存过期时间，提升查询性能。列表过滤条件不受缓存影响。\n\n\n\n## 示例程序\n**k8m** 是一个轻量级的 Kubernetes 管理工具，它基于kom、amis实现，单文件，支持多平台架构。\n1. **下载**：从 [https://github.com/weibaohui/k8m](https://github.com/weibaohui/k8m) 下载最新版本。\n2. **运行**：使用 `./k8m` 命令启动,访问[http://127.0.0.1:3618](http://127.0.0.1:3618)。\n\n\n\n\n## 安装\n\n```bash\nimport (\n    \"github.com/weibaohui/kom\"\n    \"github.com/weibaohui/kom/callbacks\"\n)\nfunc main() {\n    // 注册回调，务必先注册\n    callbacks.RegisterInit()\n    // 注册集群\n\tdefaultKubeConfig := os.Getenv(\"KUBECONFIG\")\n\tif defaultKubeConfig == \"\" {\n\t\tdefaultKubeConfig = filepath.Join(homedir.HomeDir(), \".kube\", \"config\")\n\t}\n\t_, _ = kom.Clusters().RegisterInCluster()\n\t_, _ = kom.Clusters().RegisterByPathWithID(defaultKubeConfig, \"default\")\n\tkom.Clusters().Show()\n\t// 其他逻辑\n}\n```\n\n## 使用示例\n\n### 0. 多集群 k8s MCP 支持\n同时支持stdio、sse两种模式\n支持多个tools 支持。包括对任意资源的查询列表删除描述操作，以及POD日志读取操作。\n#### 1.集成到代码中\n```go\n// 一行代码启动MCP Server\nmcp.RunMCPServer(\"kom mcp server\", \"0.0.1\", 9096)\n\n\n\n```\n#### 2. 编译\n```shell\n# 源码启动\ngo build main.go \n//编译为kom\n```\n#### 3. 启动\n启动后支持两种模式，一种为stdio，一种sse。\n管理k8s默认使用KUBECONFIG env环境变量。\n```shell\n# 设置KUBECONFIG环境变量\nexport KUBECONFIG = /Users/xxx/.kube/config\n```\n```shell\n# 运行\n./kom \n# MCP Server 访问地址\nhttp://IP:9096/sse\n```\n此时，编译得到的二进制文件，可当做stdio 模式使用。\nhttp://IP:9096/sse 模式，可以当做sse 模式使用。\n\n\n#### 4. 集成到MCP工具中\n支持stdio\\sse 两种方式集成。\n适合MCP工具集成，如Cursor、Claude Desktop(仅支持stdio模式)、Windsurf等，此外也可以使用这些软件的UI操作界面进行添加。\n```json\n{\n  \"mcpServers\": {\n    \"kom\": {\n      \"type\": \"sse\",\n      \"url\": \"http://IP:9096/sse\"\n    }\n  }\n}\n```\n```json\n{\n    \"mcpServers\": {\n        \"k8m\": {\n            \"command\": \"path/to/kom\",\n            \"args\": []\n        }\n    }\n}\n```\n\n####  MCP工具列表（59种）\n\n| 类别                       | 方法                                 | 描述                                                  |\n| -------------------------- | ------------------------------------ | ----------------------------------------------------- |\n| **集群管理（1）**          | `list_k8s_clusters`                  | 列出所有已注册的Kubernetes集群                        |\n| **DaemonSet管理（1）**     | `restart_k8s_daemonset`              | 通过集群、命名空间和名称,重启DaemonSet                |\n| **部署管理（12）**         | `scale_k8s_deployment`               | 通过集群、命名空间、名称 扩缩容Deployment，设置副本数 |\n|                            | `restart_k8s_deployment`             | 通过集群、命名空间和名称,重启Deployment               |\n|                            | `stop_k8s_deployment`                | 停止Deployment                                        |\n|                            | `restore_k8s_deployment`             | 恢复Deployment副本数                                  |\n|                            | `update_k8s_deployment_image_tag`    | 更新Deployment中容器的镜像Tag                         |\n|                            | `get_k8s_deployment_rollout_history` | 查询升级历史                                          |\n|                            | `undo_k8s_deployment_rollout`        | 回滚                                                  |\n|                            | `pause_k8s_deployment_rollout`       | 暂停升级                                              |\n|                            | `resume_k8s_deployment_rollout`      | 恢复升级                                              |\n|                            | `get_k8s_deployment_rollout_status`  | 查询升级状态                                          |\n|                            | `get_k8s_deployment_hpa_list`        | 查询Deployment的HPA列表                               |\n|                            | `list_k8s_deploy_event`              | 列出Deployment相关的事件                              |\n| **动态资源管理(含CRD，8)** | `get_k8s_resource`                   | 通过集群、命名空间和名称获取Kubernetes资源详情        |\n|                            | `describe_k8s_resource`              | 通过集群、命名空间和名称获取Kubernetes资源详情        |\n|                            | `delete_k8s_resource`                | 通过集群、命名空间和名称删除Kubernetes资源            |\n|                            | `list_k8s_resource`                  | 按集群和资源类型列出Kubernetes资源                    |\n|                            | `annotate_k8s_resource`              | 为Kubernetes资源添加或删除注解                        |\n|                            | `label_k8s_resource`                 | 为Kubernetes资源添加或删除标签                        |\n|                            | `patch_k8s_resource`                 | 通过集群、命名空间和名称更新Kubernetes资源            |\n|                            | `GetDynamicResource`                 | 获取动态资源                                          |\n| **节点管理（11）**         | `taint_k8s_node`                     | 为节点添加污点                                        |\n|                            | `untaint_k8s_node`                   | 为节点移除污点                                        |\n|                            | `cordon_k8s_node`                    | 设置节点为不可调度状态                                |\n|                            | `uncordon_k8s_node`                  | 设置节点为可调度状态                                  |\n|                            | `drain_k8s_node`                     | 清空节点上的Pod并防止新的Pod调度                      |\n|                            | `get_k8s_node_ip_usage`              | 查询节点IP资源使用情况                                |\n|                            | `list_k8s_node`                      | 获取Node列表                                          |\n|                            | `get_k8s_top_node`                   | 获取Node节点CPU和内存资源用量排名列表                 |\n|                            | `get_k8s_pod_count_running_on_node`  | 查询某个节点上运行的Pod数量统计                       |\n|                            | `get_k8s_node_resource_usage`        | 查询节点资源使用情况统计                              |\n|                            | `TaintNodeTool`                      | 为节点添加污点                                        |\n| **事件管理（1）**          | `list_k8s_event`                     | 按集群和命名空间列出Kubernetes事件                    |\n| **Ingress管理（1）**       | `set_default_k8s_ingressclass`       | 设置IngressClass为默认                                |\n| **Pod 管理（18）**         | `run_command_in_k8s_pod`             | 在Pod内执行命令                                       |\n|                            | `list_k8s_pod_event`                 | 列出Pod相关的事件                                     |\n|                            | `list_files_in_k8s_pod`              | 获取Pod中指定路径下的文件列表                         |\n|                            | `list_pod_all_files`                 | 获取Pod中指定路径下的所有文件列表，包含子目录         |\n|                            | `delete_k8s_pod`                     | 删除Pod                                               |\n|                            | `delete_pod_file`                    | 删除Pod中的指定文件                                   |\n|                            | `get_k8s_pod_linked_env`             | 获取Pod运行时的环境变量信息                           |\n|                            | `get_pod_linked_env_from_yaml`       | 通过Pod yaml 定义 获取Pod定义中的环境变量信息         |\n|                            | `get_k8s_pod_linked_services`        | 获取与Pod关联的Service                                |\n|                            | `get_pod_linked_ingresses`           | 获取与Pod关联的Ingress                                |\n|                            | `get_pod_linked_endpoints`           | 获取与Pod关联的Endpoints                              |\n|                            | `list_k8s_pod`                       | 获取Pod列表                                           |\n|                            | `get_k8s_top_pod`                    | 获取Pod CPU 内存 资源用量排名 列表                    |\n|                            | `ListPodFilesTool`                   | 列出Pod文件                                           |\n|                            | `ListAllPodFilesTool`                | 列出Pod所有文件                                       |\n|                            | `DeletePodFileTool`                  | 删除Pod文件                                           |\n|                            | `UploadPodFileTool`                  | 上传Pod文件                                           |\n|                            | `GetPodLogsTool`                     | 获取Pod日志                                           |\n|                            | `describe_k8s_pod`                   | 描述Pod容器组                                         |\n| **存储管理（3）**          | `set_k8s_default_storageclass`       | 设置StorageClass为默认                                |\n|                            | `get_k8s_storageclass_pvc_count`     | 获取StorageClass下的PVC数量                           |\n|                            | `get_k8s_storageclass_pv_count`      | 获取StorageClass下的PV数量                            |\n| **YAML管理（2）**          | `apply_k8s_yaml`                     | 通过YAML创建或更新Kubernetes资源                      |\n|                            | `delete_k8s_yaml`                    | 通过YAML删除Kubernetes资源                            |\n\n#### 启动命令\n```go\nmcp.RunMCPServer(\"kom mcp server\", \"0.0.1\", 3619)\n```\n \n#### AI工具集成\n\n##### Claude Desktop\n1. 打开Claude Desktop设置面板\n2. 在API配置区域添加MCP Server地址\n3. 启用SSE事件监听功能\n4. 验证连接状态\n```json\n{\n  \"mcpServers\": {\n    \"k8m\": {\n      \"command\": \"path/to/kom\",\n      \"args\": []\n    }\n  }\n}\n```\n\n##### Cursor\n1. 进入Cursor设置界面\n2. 找到扩展服务配置选项\n3. 支持sse、stdio两种方式。sse 方式填写http://localhost:9096/sse,stdio方式填写kom的文件位置。\n\n##### Windsurf\n1. 访问配置中心\n2. 设置API服务器地址\n3. 支持sse、stdio两种方式。sse 方式填写http://localhost:9096/sse,stdio方式填写kom的文件位置。\n\n#### cherry studio\n1. 点击左下角设置\n2. 点击MCP 服务器\n3. 点击添加服务器\n4. 支持sse、stdio两种方式。sse 方式填写http://localhost:9096/sse,stdio方式填写kom的文件位置。\n\n\n### 1. 多集群管理\n#### 注册多集群\n```go\n// 注册InCluster集群，名称为InCluster\nkom.Clusters().RegisterInCluster()\n// 注册两个带名称的集群,分别名为orb和docker-desktop\nkom.Clusters().RegisterByPathWithID(\"/Users/kom/.kube/orb\", \"orb\")\nkom.Clusters().RegisterByPathWithID(\"/Users/kom/.kube/config\", \"docker-desktop\")\n// 注册一个名为default的集群，那么kom.DefaultCluster()则会返回该集群。\nkom.Clusters().RegisterByPathWithID(\"/Users/kom/.kube/config\", \"default\")\n```\n#### 注册AWS EKS集群\n```go\n// 配置 EKS 集群信息\nconfig := aws.EKSAuthConfig{\n    AccessKey:       \"XXX\",        // AWS Access Key ID\n    SecretAccessKey: \"yyy\",        // AWS Secret Access Key\n    Region:          \"us-east-1\",  // AWS 区域\n    ClusterName:     \"k8m\",        // EKS 集群名称\n}\n\n// 注册 AWS EKS 集群\n_, err := kom.Clusters().RegisterAWSCluster(config)\nif err != nil {\n    fmt.Printf(\"注册 EKS 集群失败: %v\", err)\n    return\n}\n\n// 使用注册的 EKS 集群\nvar pods []corev1.Pod\nclusterID := fmt.Sprintf(\"%s-%s\", config.Region, config.ClusterName) // 集群ID格式: {Region}-{ClusterName}\nerr = kom.Cluster(clusterID).Resource(&corev1.Pod{}).Namespace(\"kube-system\").List(&pods).Error\n```\n\n**AWS EKS 集群注册说明：**\n- `AccessKey`: AWS 访问密钥 ID\n- `SecretAccessKey`: AWS 秘密访问密钥  \n- `Region`: AWS 区域，如 `us-east-1`、`ap-southeast-1` 等\n- `ClusterName`: EKS 集群名称\n- `RoleARN`: (可选) 要承担的 IAM 角色 ARN，用于跨账户访问\n- 集群注册后会自动生成 ID，格式为 `{Region}-{ClusterName}`\n- 支持 IAM 角色承担机制实现跨账户集群访问\n- AWS 凭证信息仅在内存中使用，程序重启后自动清理\n#### 显示已注册集群\n```go\nkom.Clusters().Show()\n```\n#### 选择默认集群\n```go\n// 使用默认集群,查询集群内kube-system命名空间下的pod\n// 首先尝试返回 ID 为 \"InCluster\" 的实例，如果不存在，\n// 则尝试返回 ID 为 \"default\" 的实例。\n// 如果上述两个名称的实例都不存在，则返回 clusters 列表中的任意一个实例。\nvar pods []corev1.Pod\nerr = kom.DefaultCluster().Resource(&corev1.Pod{}).Namespace(\"kube-system\").List(&pods).Error\n```\n#### 选择指定集群\n```go\n// 选择orb集群,查询集群内kube-system命名空间下的pod\nvar pods []corev1.Pod\nerr = kom.Cluster(\"orb\").Resource(&corev1.Pod{}).Namespace(\"kube-system\").List(&pods).Error\n```\n\n### 2. 内置资源对象的增删改查以及Watch示例\n定义一个 Deployment 对象，并通过 kom 进行资源操作。\n```go\nvar item v1.Deployment\nvar items []v1.Deployment\n```\n#### 创建某个资源\n```go\nitem = v1.Deployment{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"nginx\",\n\t\t\tNamespace: \"default\",\n\t\t},\n\t\tSpec: v1.DeploymentSpec{\n\t\t\tTemplate: corev1.PodTemplateSpec{\n\t\t\t\tSpec: corev1.PodSpec{\n\t\t\t\t\tContainers: []corev1.Container{\n\t\t\t\t\t\t{Name: \"test\", Image: \"nginx:1.14.2\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\nerr := kom.DefaultCluster().Resource(&item).Create(&item).Error\n```\n#### Get查询某个资源\n```go\n// 查询 default 命名空间下名为 nginx 的 Deployment\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").Name(\"nginx\").Get(&item).Error\n// 查询 default 命名空间下名为 nginx 的 Deployment，并使用缓存 5 秒\n// 5秒内，不会再次查询，批量操作、高频操作下，建议启用缓存\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").Name(\"nginx\").WithCache(5 * time.Second).Get(&item).Error\n```\n#### List查询资源列表\n```go\n// 查询 default 命名空间下的 Deployment 列表\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").List(&items).Error\n// 查询 default、kube-system 命名空间下的 Deployment 列表\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\",\"kube-system\").List(&items).Error\n// 查询 所有 命名空间下的 Deployment 列表\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"*\").List(&items).Error\nerr := kom.DefaultCluster().Resource(&item).AllNamespace().List(&items).Error\n// 设置5秒缓存，对列表生效\nerr := kom.DefaultCluster().Resource(&item).WithCache(5 * time.Second).List(&nodeList).Error\n```\n#### 通过Label查询资源列表\n```go\n// 查询 default 命名空间下 标签为 app:nginx 的 Deployment 列表\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").WithLabelSelector(\"app=nginx\").List(&items).Error\n```\n#### 通过多个Label查询资源列表\n```go\n// 查询 default 命名空间下 标签为 app:nginx m:n 的 Deployment 列表\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").WithLabelSelector(\"app=nginx\").WithLabelSelector(\"m=n\").List(&items).Error\n```\n#### 通过Field查询资源列表\n```go\n// 查询 default 命名空间下 标签为 metadata.name=test-deploy 的 Deployment 列表\n// filedSelector 一般支持原生的字段定义。如metadata.name,metadata.namespace,metadata.labels,metadata.annotations,metadata.creationTimestamp,spec.nodeName,spec.serviceAccountName,spec.schedulerName,status.phase,status.hostIP,status.podIP,status.qosClass,spec.containers.name等字段\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").WithFieldSelector(\"metadata.name=test-deploy\").List(&items).Error\n```\n#### 分页查询资源\n```go\nvar list []corev1.Pod\nvar total int64\nsql := \"select * from pod where metadata.namespace=? or metadata.namespace=?     order by  metadata.creationTimestamp desc \"\nerr := kom.DefaultCluster().Sql(sql, \"kube-system\", \"default\").\n\t\tFillTotalCount(&total).\n\t\tLimit(5).\n\t\tOffset(10).\n\t\tList(&list).Error\nfmt.Printf(\"total %d\\n\", total)  //返回总数 480\nfmt.Printf(\"Count %d\\n\", len(list)) //返回条目数=limit=5\n```\n#### 更新资源内容\n```go\n// 更新名为nginx 的 Deployment，增加一个注解\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").Name(\"nginx\").Get(&item).Error\nif item.Spec.Template.Annotations == nil {\n\titem.Spec.Template.Annotations = map[string]string{}\n}\nitem.Spec.Template.Annotations[\"kom.kubernetes.io/restartedAt\"] = time.Now().Format(time.RFC3339)\nerr = kom.DefaultCluster().Resource(&item).Update(&item).Error\n```\n#### PATCH 更新资源\n```go\n// 使用 Patch 更新资源,为名为 nginx 的 Deployment 增加一个标签，并设置副本数为5\npatchData := `{\n    \"spec\": {\n        \"replicas\": 5\n    },\n    \"metadata\": {\n        \"labels\": {\n            \"new-label\": \"new-value\"\n        }\n    }\n}`\nerr := kom.DefaultCluster().Resource(&item).Patch(&item, types.StrategicMergePatchType, patchData).Error\n```\n#### 删除资源\n```go\n// 删除名为 nginx 的 Deployment\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").Name(\"nginx\").Delete().Error\n```\n#### 强制删除资源\n```go\n// 删除名为 nginx 的 Deployment\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").Name(\"nginx\").ForceDelete().Error\n```\n#### 通用类型资源的获取（适用于k8s内置类型以及CRD）\n```go\n// 指定GVK获取资源\nvar list []corev1.Event\nerr := kom.DefaultCluster().GVK(\"events.k8s.io\", \"v1\", \"Event\").Namespace(\"default\").List(&list).Error\n```\n#### Watch资源变更\n```go\n// watch default 命名空间下 Pod资源 的变更\nvar watcher watch.Interface\nvar pod corev1.Pod\nerr := kom.DefaultCluster().Resource(&pod).Namespace(\"default\").Watch(&watcher).Error\nif err != nil {\n\tfmt.Printf(\"Create Watcher Error %v\", err)\n\treturn err\n}\ngo func() {\n\tdefer watcher.Stop()\n\n\tfor event := range watcher.ResultChan() {\n\t\terr := kom.DefaultCluster().Tools().ConvertRuntimeObjectToTypedObject(event.Object, &pod)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"无法将对象转换为 *v1.Pod 类型: %v\", err)\n\t\t\treturn\n\t\t}\n\t\t// 处理事件\n\t\tswitch event.Type {\n\t\tcase watch.Added:\n\t\t\tfmt.Printf(\"Added Pod [ %s/%s ]\\n\", pod.Namespace, pod.Name)\n\t\tcase watch.Modified:\n\t\t\tfmt.Printf(\"Modified Pod [ %s/%s ]\\n\", pod.Namespace, pod.Name)\n\t\tcase watch.Deleted:\n\t\t\tfmt.Printf(\"Deleted Pod [ %s/%s ]\\n\", pod.Namespace, pod.Name)\n\t\t}\n\t}\n}()\n```\n#### Describe查询某个资源\n```go\n// Describe default 命名空间下名为 nginx 的 Deployment\nvar describeResult []byte\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").Name(\"nginx\").Describe(&item).Error\nfmt.Printf(\"describeResult: %s\", describeResult)\n```\n\n### 3. YAML 创建、更新、删除\n```go\nyaml := `apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: example-config\n  namespace: default\ndata:\n  key: value\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: example-deployment\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: example\n  template:\n    metadata:\n      labels:\n        app: example\n    spec:\n      containers:\n        - name: example-container\n          image: nginx\n`\n// 第一次执行Apply为创建，返回每一条资源的执行结果 \nresults := kom.DefaultCluster().Applier().Apply(yaml)\n// 第二次执行Apply为更新，返回每一条资源的执行结果\nresults = kom.DefaultCluster().Applier().Apply(yaml)\n// 删除，返回每一条资源的执行结果\nresults = kom.DefaultCluster().Applier().Delete(yaml)\n```\n\n### 4. Pod 操作\n#### 获取日志\n```go\n// 获取Pod日志\nvar stream io.ReadCloser\nerr := kom.DefaultCluster().Namespace(\"default\").Name(\"random-char-pod\").Ctl().Pod().ContainerName(\"container\").GetLogs(&stream, &corev1.PodLogOptions{}).Error\nreader := bufio.NewReader(stream)\nline, _ := reader.ReadString('\\n')\nfmt.Println(line)\n```\n#### 执行命令\n在Pod内执行命令，需要指定容器名称，并且会触发Exec()类型的callbacks。\n```go\n// 在Pod内执行ps -ef命令\nvar execResult string\nerr := kom.DefaultCluster().Namespace(\"default\").Name(\"random-char-pod\").Ctl().Pod().ContainerName(\"container\").Command(\"ps\", \"-ef\").ExecuteCommand(&execResult).Error\nfmt.Printf(\"execResult: %s\", execResult)\n```\n#### 端口转发\n```go\nerr := kom.DefaultCluster().Resource(&v1.Pod{}).\n\t\tNamespace(\"default\").\n\t\tName(\"nginx-deployment-f576985cc-7czqr\").\n    Ctl().Pod().\n\t\tContainerName(\"nginx\").\n\t\tPortForward(\"20088\", \"80\", stopCh).Error\n// 监听0.0.0.0上的20088端口，转发到Pod的80端口\n```\n#### 流式执行命令\n在Pod内执行命令，并且会触发StreamExec()类型的callbacks。适合执行ping 等命令\n```go\ncb := func(data []byte) error {\n\t\tfmt.Printf(\"Data %s\\n\", string(data))\n\t\treturn nil\n\t}\nerr := kom.DefaultCluster().Namespace(\"kube-system\").Name(\"traefik-d7c9c5778-p9nf4\").Ctl().Pod().ContainerName(\"traefik\").Command(\"ping\", \"127.0.0.1\").StreamExecute(cb, cb).Error\n//输出：\n//Data PING 127.0.0.1 (127.0.0.1): 56 data bytes\n//Data 64 bytes from 127.0.0.1: seq=0 ttl=42 time=0.023 ms\n//Data 64 bytes from 127.0.0.1: seq=1 ttl=42 time=0.011 ms\n//Data 64 bytes from 127.0.0.1: seq=2 ttl=42 time=0.012 ms\n//Data 64 bytes from 127.0.0.1: seq=3 ttl=42 time=0.016 ms\n```\n\n#### 文件列表\n```go\n// 获取Pod内/etc文件夹列表\nkom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().ContainerName(\"nginx\").ListFiles(\"/etc\")\n```\n#### 所有文件列表，包括隐藏文件\n```go\n// 获取Pod内/etc文件夹列表\nkom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().ContainerName(\"nginx\").ListAllFiles(\"/etc\")\n```\n#### 文件下载\n```go\n// 下载Pod内/etc/hosts文件\nkom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().ContainerName(\"nginx\").DownloadFile(\"/etc/hosts\")\n```\n#### 文件下载(Tar压缩)\n```go\n// 下载Pod内/etc/hosts文件，以tar方式进行打包后，获取，下载\nkom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().ContainerName(\"nginx\").DownloadTarFile(\"/etc/hosts\")\n```\n#### 文件上传\n```go\n// 上传文件内容到Pod内/etc/demo.txt文件\nkom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().ContainerName(\"nginx\").SaveFile(\"/etc/demo.txt\", \"txt-context\")\n// os.File 类型文件直接上传到Pod内/etc/目录下\nfile, _ := os.Open(tempFilePath)\nkom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().ContainerName(\"nginx\").UploadFile(\"/etc/\", file)\n```\n#### 文件删除\n```go\n// 删除Pod内/etc/xyz文件\nkom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().ContainerName(\"nginx\").DeleteFile(\"/etc/xyz\")\n```\n#### 获取关联资源-Service\n```go\n// 获取Pod关联的Service\nsvcs, err := kom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().LinkedService()\nfor _, svc := range svcs {\n\tfmt.Printf(\"service name %v\\n\", svc.Name)\n}\n```\n#### 获取关联资源-Ingress\n```go\n// 获取Pod关联的Ingress\ningresses, err := kom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().LinkedIngress()\nfor _, ingress := range ingresses {\n\tfmt.Printf(\"ingress name %v\\n\", ingress.Name)\n}\n```\n#### 获取关联资源-PVC\n```go\n// 获取Pod关联的PVC\npvcs, err := kom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().LinkedPVC()\nfor _, pvc := range pvcs {\n\tfmt.Printf(\"pvc name %v\\n\", pvc.Name)\n}\n``` \n#### 获取关联资源-PV\n```go\n// 获取Pod关联的PVC\npvs, err := kom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().LinkedPV()\nfor _, pv := range pvs {\n\tfmt.Printf(\"pv name %v\\n\", pv.Name)\n}\n``` \n#### 获取关联资源-Endpoints\n```go\n// 获取Pod关联的Endpoints\nendpoints, err := kom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().LinkedEndpoints()\nfor _, endpoint := range endpoints {\n\tfmt.Printf(\"endpoint name %v\\n\", endpoint.Name)\n}\n```\n#### 获取关联资源-运行时Env\n从Pod内执行env命令获得ENV配置信息\n```go\nenvs, err := kom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().LinkedEnv()\nfor _, env := range envs {\n\t\tfmt.Printf(\"env %s %s=%s\\n\", env.ContainerName, env.EnvName, env.EnvValue)\n\t}\n```\n#### 获取关联资源-定义Env\n从pod定义上提取ENV配置信息\n```go\nenvs, err := kom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().LinkedEnvFromPod()\nfor _, env := range envs {\n\t\tfmt.Printf(\"env %s %s=%s\\n\", env.ContainerName, env.EnvName, env.EnvValue)\n\t}\n```\n#### 获取关联资源-节点\n根据Pod 定义中声明的NodeSelector、NodeAffinity、污点容忍度、NodeName等配置信息，返回可用节点列表。暂未考虑Pod亲和性、CPU内存等运行时调度因素。\n```go\nnodes, err := kom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().LinkedNode()\nfor _, node := range nodes {\n    fmt.Printf(\"reason:%s\\t node name %s\\n\", node.Reason, node.Name)\n}\n```\n\n### 5. 自定义资源定义（CRD）增删改查及Watch操作\n在没有CR定义的情况下，如何进行增删改查操作。操作方式同k8s内置资源。\n将对象定义为unstructured.Unstructured，并且需要指定Group、Version、Kind。\n因此可以通过kom.DefaultCluster().GVK(group, version, kind)来替代kom.DefaultCluster().Resource(interface{})\n为方便记忆及使用，kom提供了kom.DefaultCluster().CRD(group, version, kind)来简化操作。\n下面给出操作CRD的示例：\n首先定义一个通用的处理对象，用来接收CRD的返回结果。\n```go\nvar item unstructured.Unstructured\n```\n#### 创建CRD\n```go\nyaml := `apiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: crontabs.stable.example.com\nspec:\n  group: stable.example.com\n  versions:\n    - name: v1\n      served: true\n      storage: true\n      schema:\n        openAPIV3Schema:\n          type: object\n          properties:\n            spec:\n              type: object\n              properties:\n                cronSpec:\n                  type: string\n                image:\n                  type: string\n                replicas:\n                  type: integer\n  scope: Namespaced\n  names:\n    plural: crontabs\n    singular: crontab\n    kind: CronTab\n    shortNames:\n    - ct`\nresult := kom.DefaultCluster().Applier().Apply(yaml)\n```\n#### 创建CRD的CR对象\n```go\nitem = unstructured.Unstructured{\n\t\tObject: map[string]interface{}{\n\t\t\t\"apiVersion\": \"stable.example.com/v1\",\n\t\t\t\"kind\":       \"CronTab\",\n\t\t\t\"metadata\": map[string]interface{}{\n\t\t\t\t\"name\":      \"test-crontab\",\n\t\t\t\t\"namespace\": \"default\",\n\t\t\t},\n\t\t\t\"spec\": map[string]interface{}{\n\t\t\t\t\"cronSpec\": \"* * * * */8\",\n\t\t\t\t\"image\":    \"test-crontab-image\",\n\t\t\t},\n\t\t},\n\t}\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").Namespace(item.GetNamespace()).Name(item.GetName()).Create(&item).Error\n```\n#### Get获取单个CR对象\n```go\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").Name(item.GetName()).Namespace(item.GetNamespace()).Get(&item).Error\n```\n#### List获取CR对象的列表\n```go\nvar crontabList []unstructured.Unstructured\n// 查询default命名空间下的CronTab\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").Namespace(crontab.GetNamespace()).List(&crontabList).Error\n// 查询所有命名空间下的CronTab\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").AllNamespace().List(&crontabList).Error\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").Namespace(\"*\").List(&crontabList).Error\n```\n#### 更新CR对象\n```go\npatchData := `{\n    \"spec\": {\n        \"image\": \"patch-image\"\n    },\n    \"metadata\": {\n        \"labels\": {\n            \"new-label\": \"new-value\"\n        }\n    }\n}`\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").Name(crontab.GetName()).Namespace(crontab.GetNamespace()).Patch(&crontab, types.StrategicMergePatchType, patchData).Error\n```\n#### 删除CR对象\n```go\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").Name(crontab.GetName()).Namespace(crontab.GetNamespace()).Delete().Error\n```\n#### 强制删除CR对象\n```go\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").Name(crontab.GetName()).Namespace(crontab.GetNamespace()).ForceDelete().Error\n```\n#### Watch CR对象\n```go\nvar watcher watch.Interface\n\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").Namespace(\"default\").Watch(&watcher).Error\nif err != nil {\n    fmt.Printf(\"Create Watcher Error %v\", err)\n}\ngo func() {\n    defer watcher.Stop()\n    \n    for event := range watcher.ResultChan() {\n    var item *unstructured.Unstructured\n    \n    item, err := kom.DefaultCluster().Tools().ConvertRuntimeObjectToUnstructuredObject(event.Object)\n    if err != nil {\n        fmt.Printf(\"无法将对象转换为 Unstructured 类型: %v\", err)\n        return\n    }\n    // 处理事件\n    switch event.Type {\n        case watch.Added:\n            fmt.Printf(\"Added Unstructured [ %s/%s ]\\n\", item.GetNamespace(), item.GetName())\n        case watch.Modified:\n            fmt.Printf(\"Modified Unstructured [ %s/%s ]\\n\", item.GetNamespace(), item.GetName())\n        case watch.Deleted:\n            fmt.Printf(\"Deleted Unstructured [ %s/%s ]\\n\", item.GetNamespace(), item.GetName())\n        }\n    }\n}()\n```\n#### Describe查询某个CRD资源\n```go\n// Describe default 命名空间下名为 nginx 的 Deployment\nvar describeResult []byte\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").Namespace(\"default\").Name(item.GetName()).Describe(&item).Error\nfmt.Printf(\"describeResult: %s\", describeResult)\n```\n#### 获取CRD下的Pod资源\n```go\npods, err := kom.DefaultCluster().CRD(\"apps.kruise.io\", \"v1beta1\", \"StatefulSet\").\nNamespace(\"default\").Name(\"sample\").Ctl().CRD().ManagedPods()\n\tfor _, pod := range pods {\n\t\tfmt.Printf(\"Get pods: %v\", pod.GetName())\n\t}\n```\n\n### 6. 集群参数信息\n```go\n// 集群文档\nkom.DefaultCluster().Status().Docs()\n// 集群资源信息\nkom.DefaultCluster().Status().APIResources()\n// 集群已注册CRD列表\nkom.DefaultCluster().Status().CRDList()\n// 集群版本信息\nkom.DefaultCluster().Status().ServerVersion()\n// 获取集群内各资源种类数量\nkom.DefaultCluster().Status().GetResourceCountSummary(10)\n```\n\n### 7. callback机制\n* 内置了callback机制，可以自定义回调函数，当执行完某项操作后，会调用对应的回调函数。\n* 如果回调函数返回true，则继续执行后续操作，否则终止后续操作。\n* 当前支持的callback有：get,list,create,update,patch,delete,exec,stream-exec,logs,watch,doc.\n* 内置的callback名称有：\"kom:get\",\"kom:list\",\"kom:create\",\"kom:update\",\"kom:patch\",\"kom:watch\",\"kom:delete\",\"kom:pod:exec\",\"kom:pod:stream:exec\",\"kom:pod:logs\",\"kom:pod:port:forward\",\"kom:doc\"\n* 支持回调函数排序，默认按注册顺序执行，可以通过kom.DefaultCluster().Callback().After(\"kom:get\")或者.Before(\"kom:get\")设置顺序。\n* 支持删除回调函数，通过kom.DefaultCluster().Callback().Delete(\"kom:get\")\n* 支持替换回调函数，通过kom.DefaultCluster().Callback().Replace(\"kom:get\",cb)\n```go\n// 为Get获取资源注册回调函数\nkom.DefaultCluster().Callback().Get().Register(\"get\", cb)\n// 为List获取资源注册回调函数\nkom.DefaultCluster().Callback().List().Register(\"list\", cb)\n// 为Create创建资源注册回调函数\nkom.DefaultCluster().Callback().Create().Register(\"create\", cb)\n// 为Update更新资源注册回调函数\nkom.DefaultCluster().Callback().Update().Register(\"update\", cb)\n// 为Patch更新资源注册回调函数\nkom.DefaultCluster().Callback().Patch().Register(\"patch\", cb)\n// 为Delete删除资源注册回调函数\nkom.DefaultCluster().Callback().Delete().Register(\"delete\", cb)\n// 为Watch资源注册回调函数\nkom.DefaultCluster().Callback().Watch().Register(\"watch\",cb)\n// 为Exec Pod内执行命令注册回调函数\nkom.DefaultCluster().Callback().Exec().Register(\"exec\", cb)\n// 为Logs获取日志注册回调函数\nkom.DefaultCluster().Callback().Logs().Register(\"logs\", cb)\n// 删除回调函数\nkom.DefaultCluster().Callback().Get().Delete(\"get\")\n// 替换回调函数\nkom.DefaultCluster().Callback().Get().Replace(\"get\", cb)\n// 指定回调函数执行顺序，在内置的回调函数执行完之后再执行\nkom.DefaultCluster().Callback().After(\"kom:get\").Register(\"get\", cb)\n// 指定回调函数执行顺序，在内置的回调函数执行之前先执行\n// 案例1.在Create创建资源前，进行权限检查，没有权限则返回error，后续创建动作将不再执行\n// 案例2.在List获取资源列表后，进行特定的资源筛选，从列表(Statement.Dest)中删除不符合要求的资源，然后返回给用户\nkom.DefaultCluster().Callback().Before(\"kom:create\").Register(\"create\", cb)\n\n// 自定义回调函数\nfunc cb(k *kom.Kubectl) error {\n    stmt := k.Statement\n    gvr := stmt.GVR\n    ns := stmt.Namespace\n    name := stmt.Name\n    // 打印信息\n    fmt.Printf(\"Get %s/%s(%s)\\n\", ns, name, gvr)\n    fmt.Printf(\"Command %s/%s(%s %s)\\n\", ns, name, stmt.Command, stmt.Args)\n    return nil\n\t// return fmt.Errorf(\"error\") 返回error将阻止后续cb的执行\n}\n```\n\n### 8. SQL查询k8s资源\n* 通过SQL()方法查询k8s资源，简单高效。\n* Table 名称支持集群内注册的所有资源的全称及简写，包括CRD资源。只要是注册到集群上了，就可以查。\n* 典型的Table 名称有：pod,deployment,service,ingress,pvc,pv,node,namespace,secret,configmap,serviceaccount,role,rolebinding,clusterrole,clusterrolebinding,crd,cr,hpa,daemonset,statefulset,job,cronjob,limitrange,horizontalpodautoscaler,poddisruptionbudget,networkpolicy,endpoints,ingressclass,mutatingwebhookconfiguration,validatingwebhookconfiguration,customresourcedefinition,storageclass,persistentvolumeclaim,persistentvolume,horizontalpodautoscaler,podsecurity。统统都可以查。\n* 查询字段目前仅支持*。也就是select *\n* 查询条件目前支持 =，!=,>=,<=,<>,like,in,not in,and,or,between\n* 排序字段目前支持对单一字段进行排序。默认按创建时间倒序排列\n* \n#### 查询k8s内置资源\n```go\n    sql := \"select * from deploy where metadata.namespace='kube-system' or metadata.namespace='default' order by  metadata.creationTimestamp asc   \"\n\n\tvar list []v1.Deployment\n\terr := kom.DefaultCluster().Sql(sql).List(&list).Error\n\tfor _, d := range list {\n\t\tfmt.Printf(\"List Items foreach %s,%s at %s \\n\", d.GetNamespace(), d.GetName(), d.GetCreationTimestamp())\n\t}\n```\n#### 查询CRD资源\n```go\n    // vm 为kubevirt 的CRD\n    sql := \"select * from vm where (metadata.namespace='kube-system' or metadata.namespace='default' )  \"\n\tvar list []unstructured.Unstructured\n\terr := kom.DefaultCluster().Sql(sql).List(&list).Error\n\tfor _, d := range list {\n\t\tfmt.Printf(\"List Items foreach %s,%s\\n\", d.GetNamespace(), d.GetName())\n\t}\n```\n#### 链式调研查询SQL\n```go\n// 查询pod 列表\nerr := kom.DefaultCluster().From(\"pod\").\n\t\tWhere(\"metadata.namespace = ?  or metadata.namespace= ? \", \"kube-system\", \"default\").\n\t\tOrder(\"metadata.creationTimestamp desc\").\n\t\tList(&list).Error\n```\n#### k8s资源嵌套列表属性支持\n```go\n// spec.containers为列表，其下的ports也为列表，我们查询ports的name\nsql := \"select * from pod where spec.containers.ports.name like '%k8m%'  \"\nvar list []v1.Pod\nerr := kom.DefaultCluster().Sql(sql).List(&list).Error\nfor _, d := range list {\n\tt.Logf(\"List Items foreach %s,%s\\n\", d.GetNamespace(), d.GetName())\n}\n```\n\n### 9. 其他操作\n#### Deployment重启\n```go\nerr = kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Rollout().Restart()\n```\n#### Deployment扩缩容\n```go\n// 将名称为nginx的deployment的副本数设置为3\nerr = kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Scaler().Scale(3)\n```\n#### Deployment 停止\n```go\n// 将名称为nginx的deployment的副本数设置为0\n// 当前运行副本数量记录到注解中\nerr = kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Scaler().Stop()\n```\n#### Deployment 恢复\n```go\n// 将名称为nginx的deployment的副本数从注解中恢复，如果没有注解，默认恢复到1\nerr = kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Scaler().Restore()\n```\n#### Deployment更新Tag\n```go\n// 将名称为nginx的deployment的中的容器镜像tag升级为alpine\nerr = kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Deployment().ReplaceImageTag(\"main\",\"20241124\")\n```\n#### Deployment Rollout History\n```go\n// 查询名称为nginx的deployment的升级历史\nresult, err := kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Rollout().History()\n```\n#### Deployment Rollout Undo\n```go\n// 将名称为nginx的deployment进行回滚\nresult, err := kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Rollout().Undo()\n// 将名称为nginx的deployment进行回滚到指定版本(history 查询)\nresult, err := kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Rollout().Undo(\"6\")\n```\n#### Deployment Rollout Pause\n```go\n// 暂停升级过程\nerr := kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Rollout().Pause()\n```\n#### Deployment Rollout Resume \n```go\n// 恢复升级过程\nerr := kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Rollout().Resume()\n```\n#### Deployment Rollout Status \n```go\n// 将名称为nginx的deployment的中的容器镜像tag升级为alpine\nresult, err := kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Rollout().Status()\n```\n#### Deployment HPA\n```go\n// 显示deployment的hpa \nlist, err := kom.DefaultCluster().Resource(&v1.Deployment{}).Namespace(\"default\").Name(\"nginx-web\").Ctl().Deployment().HPAList()\nfor _, item := range list {\n    t.Logf(\"HPA %s\\n\", item.Name)\n}\n```\n#### 节点打污点\n```go\nerr = kom.DefaultCluster().Resource(&Node{}).Name(\"kind-control-plane\").Ctl().Node().Taint(\"dedicated=special-user:NoSchedule\")\n```\n#### 节点去除污点\n```go\nerr = kom.DefaultCluster().Resource(&Node{}).Name(\"kind-control-plane\").Ctl().Node().UnTaint(\"dedicated=special-user:NoSchedule\")\n```\n#### 节点Cordon\n```go\nerr = kom.DefaultCluster().Resource(&Node{}).Name(\"kind-control-plane\").Ctl().Node().Cordon()\n```\n#### 节点UnCordon\n```go\nerr = kom.DefaultCluster().Resource(&Node{}).Name(\"kind-control-plane\").Ctl().Node().UnCordon()\n```\n#### 节点Drain\n```go\nerr = kom.DefaultCluster().Resource(&Node{}).Name(\"kind-control-plane\").Ctl().Node().Drain()\n```\n#### 查询节点IP资源情况\n支持设置缓存时间，避免频繁查询k8s API\n```go\nnodeName := \"lima-rancher-desktop\"\ntotal, used, available := kom.DefaultCluster().Resource(&corev1.Node{}).WithCache(5 * time.Second).Name(nodeName).Ctl().Node().IPUsage()\nfmt.Printf(\"Total %d, Used %d, Available %d\\n\", total, used, available)\n//Total 256, Used 6, Available 250\n```\n#### 节点IP资源使用情况统计\n支持设置缓存时间，避免频繁查询k8s API\n```go\nnodeName := \"lima-rancher-desktop\"\ntotal, used, available := kom.DefaultCluster().Resource(&corev1.Node{}).WithCache(5 * time.Second).Name(nodeName).Ctl().Node().PodCount()\nfmt.Printf(\"Total %d, Used %d, Available %d\\n\", total, used, available)\n//Total 110, Used 9, Available 101\n```\n#### 节点资源用量情况统计\n支持设置缓存时间，避免频繁查询k8s API\n```go\nnodeName := \"lima-rancher-desktop\"\nusage := kom.DefaultCluster().Resource(&corev1.Node{}).WithCache(5 * time.Second).Name(nodeName).Ctl().Node().ResourceUsage()\nfmt.Printf(\"Node Usage %s\\n\", utils.ToJSON(usage))\n```\n包括当前的请求值、限制值、可分配值、使用比例\n```json\n{\n  \"requests\": {\n    \"cpu\": \"200m\",\n    \"memory\": \"140Mi\"\n  },\n  \"limits\": {\n    \"memory\": \"170Mi\"\n  },\n  \"allocatable\": {\n    \"cpu\": \"4\",\n    \"ephemeral-storage\": \"99833802265\",\n    \"hugepages-1Gi\": \"0\",\n    \"hugepages-2Mi\": \"0\",\n    \"hugepages-32Mi\": \"0\",\n    \"hugepages-64Ki\": \"0\",\n    \"memory\": \"8127096Ki\",\n    \"pods\": \"110\"\n  },\n  \"usageFractions\": {\n    \"cpu\": {\n      \"requestFraction\": 5,\n      \"limitFraction\": 0\n    },\n    \"ephemeral-storage\": {\n      \"requestFraction\": 0,\n      \"limitFraction\": 0\n    },\n    \"memory\": {\n      \"requestFraction\": 1.76397571777176,\n      \"limitFraction\": 2.1419705144371375\n    }\n  }\n}\n```\n#### 给资源增加标签\n```go\nerr = kom.DefaultCluster().Resource(&Node{}).Name(\"kind-control-plane\").Ctl().Label(\"name=zhangsan\")\n```\n#### 给资源删除标签\n```go\nerr = kom.DefaultCluster().Resource(&Node{}).Name(\"kind-control-plane\").Ctl().Label(\"name-\")\n```\n#### 给资源增加注解\n```go\nerr = kom.DefaultCluster().Resource(&Node{}).Name(\"kind-control-plane\").Ctl().Annotate(\"name=zhangsan\")\n```\n#### 给资源删除注解\n```go\nerr = kom.DefaultCluster().Resource(&Node{}).Name(\"kind-control-plane\").Ctl().Annotate(\"name-\")\n```\n#### 创建NodeSell\n```go\nns, pod, container, err  := kom.DefaultCluster().Resource(&v1.Node{}).Name(\"kind-control-plane\").Ctl().Node().CreateNodeShell()\nfmt.Printf(\"Node Shell ns=%s podName=%s containerName=%s\", ns, pod, container)\n```\n#### 创建kubectl Shell\n```go\nns, pod, container, err := kom.DefaultCluster().Resource(&v1.Node{}).Name(name).Ctl().Node().CreateKubectlShell(kubeconfig)\nfmt.Printf(\"Kubectl Shell ns=%s podName=%s containerName=%s\", ns, pod, container)\n\n```\n#### 统计StorageClass下的PVC数量\n```go\ncount, err := kom.DefaultCluster().Resource(&v1.StorageClass{}).Name(\"hostpath\").Ctl().StorageClass().PVCCount()\nfmt.Printf(\"pvc count %d\\n\", count)\n```\n#### 统计StorageClass下的PV数量\n```go\ncount, err := kom.DefaultCluster().Resource(&v1.StorageClass{}).Name(\"hostpath\").Ctl().StorageClass().PVCount()\nfmt.Printf(\"pv count %d\\n\", count)\n```\n#### 设置StorageClass为默认\n```go\nerr := kom.DefaultCluster().Resource(&v1.StorageClass{}).Name(\"hostpath\").Ctl().StorageClass().SetDefault()\n```\n#### 设置IngressClass为默认\n```go\nerr := kom.DefaultCluster().Resource(&v1.IngressClass{}).Name(\"nginx\").Ctl().IngressClass().SetDefault()\n```\n#### 统计Deployment/StatefulSet/DaemonSet下的Pod列表\n```go\nlist, err := kom.DefaultCluster().Namespace(\"default\").Name(\"managed-pods\").Ctl().Deployment().ManagedPods()\nfor _, pod := range list {\n\tfmt.Printf(\"ManagedPod: %v\", pod.Name)\n}\n```\n#### 获取所有节点的标签集合\n```go\n// labels 类型为map[string]string\nlabels, err := kom.DefaultCluster().Resource(&v1.Node{}).Ctl().Node().AllNodeLabels()\nfmt.Printf(\"%s\", utils.ToJSON(labels))\n```\n```json\n{\n          \"beta.kubernetes.io/arch\": \"arm64\",\n          \"beta.kubernetes.io/os\": \"linux\",\n          \"kubernetes.io/arch\": \"arm64\",\n          \"kubernetes.io/hostname\": \"kind-control-plane\",\n          \"kubernetes.io/os\": \"linux\",\n          \"kubernetes.io/role\": \"agent\",\n          \"node-role.kubernetes.io/agent\": \"\",\n          \"node-role.kubernetes.io/control-plane\": \"\",\n          \"type\": \"kwok\",\n          \"uat\": \"test\",\n          \"x\": \"x\"\n}\n```\n#### 查看Pod资源占用率\n```go\npodName := \"coredns-ccb96694c-jprpf\"\nns := \"kube-system\"\nusage := kom.DefaultCluster().Resource(&corev1.Pod{}).Name(podName).Namespace(ns).Ctl().Pod().ResourceUsage()\nfmt.Printf(\"Pod Usage %s\\n\", utils.ToJSON(usage))\n```\n包括当前的请求值、限制值、可分配值、使用比例\n```json\n{\n  \"requests\": {\n    \"cpu\": \"100m\",\n    \"memory\": \"70Mi\"\n  },\n  \"limits\": {\n    \"memory\": \"170Mi\"\n  },\n  \"allocatable\": {\n    \"cpu\": \"4\",\n    \"ephemeral-storage\": \"99833802265\",\n    \"hugepages-1Gi\": \"0\",\n    \"hugepages-2Mi\": \"0\",\n    \"hugepages-32Mi\": \"0\",\n    \"hugepages-64Ki\": \"0\",\n    \"memory\": \"8127096Ki\",\n    \"pods\": \"110\"\n  },\n  \"usageFractions\": {\n    \"cpu\": {\n      \"requestFraction\": 2.5,\n      \"limitFraction\": 0\n    },\n    \"memory\": {\n      \"requestFraction\": 0.88198785888588,\n      \"limitFraction\": 2.1419705144371375\n    }\n  }\n}\n```\n#### 获取字段文档解释\n```go\nvar docResult []byte\n\titem := v1.Deployment{}\n\tfield := \"spec.replicas\"\n\tfield = \"spec.template.spec.containers.name\"\n\tfield = \"spec.template.spec.containers.imagePullPolicy\"\n\tfield = \"spec.template.spec.containers.livenessProbe.successThreshold\"\n\terr := kom.DefaultCluster().\n\t\tResource(&item).DocField(field).Doc(&docResult).Error\n\tfmt.Printf(\"Get Deployment Doc [%s] :%s\", field, string(docResult))\n```\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kubernetes",
        "cloud",
        "kom",
        "cloud platform",
        "cloud platforms",
        "platforms cloud"
      ],
      "category": "cloud-platforms"
    }
  }
}