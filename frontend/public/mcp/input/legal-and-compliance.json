{
  "category": "legal-and-compliance",
  "categoryDisplay": "Legal and Compliance",
  "description": "",
  "totalRepositories": 4,
  "repositories": {
    "protomated--legal-context": {
      "owner": "protomated",
      "name": "legal-context",
      "url": "https://github.com/protomated/legal-context",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Connects a law firm's Clio document management system with Claude Desktop for efficient retrieval and analysis of legal documents while ensuring security and confidentiality. Enables local processing and vector search capabilities to enhance legal research.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "documents",
        "document",
        "law",
        "legal documents",
        "legal compliance",
        "document management"
      ],
      "category": "legal-and-compliance"
    },
    "pylegifrance--mcp-server-legifrance": {
      "owner": "pylegifrance",
      "name": "mcp-server-legifrance",
      "url": "https://github.com/pylegifrance/mcp-server-legifrance",
      "imageUrl": "/freedevtools/mcp/pfp/pylegifrance.webp",
      "description": "Access French legal databases, including laws, codes, and judicial jurisprudence, through an integrated interface for advanced legal research and analysis using real-time data from Legifrance.",
      "stars": 27,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-28T09:20:02Z",
      "readme_content": "# mcp-server-legifrance\n\nServeur MCP [Model Context Protocol](https://modelcontextprotocol.io/introduction) expérimental permettant d'interroger les bases juridiques françaises via l'API Legifrance dans des LLMs compatibles comme Claude.\n\n## Description\n\nCe projet implémente un serveur MCP qui permet d'accéder aux ressources juridiques françaises (textes légaux, codes, jurisprudence) directement depuis un Large Language Model. Il facilite les recherches juridiques en rendant les données de Legifrance accessibles via des outils interactifs.\n\nIl faut suite à la création du package [pylegifrance](https://github.com/rdassignies/pylegifrance). \n\n### Qu'est-ce que le MCP ?\n\nLe Model Context Protocol (MCP) est un protocole standardisé développé par Anthropic qui permet aux modèles de langage comme Claude d'interagir de manière structurée avec des outils et services externes. Il s'agit d'une avancée intéressante dans l'interopérabilité des LLMs car il établit un cadre commun pour l'échange de données et l'exécution de fonctions entre les modèles et les API tierces. Jusqu'à maintenant, il fallait développer, pour chaque service, des appels de fonctions spécifiques. \n\n### L'interopérabilité via MCP\n\nL'importance du MCP réside dans sa capacité à créer une interface standardisée entre les LLMs et les systèmes externes. Cette standardisation présente plusieurs avantages :\n\n1. **Architecture modulaire** : Les développeurs peuvent créer des outils spécialisés qui sont facilement intégrables à différents LLMs compatibles avec le protocole.\n\n2. **Sécurité accrue** : Le MCP limite l'accès des modèles aux seules fonctionnalités explicitement définies, réduisant ainsi les risques de sécurité.\n\n3. **Maintenance simplifiée** : Les mises à jour des outils externes peuvent être faites indépendamment du modèle, facilitant l'évolution des systèmes.\n\n4. **Extension des capacités** : Les LLMs peuvent accéder à des données en temps réel et exécuter des opérations complexes qu'ils ne pourraient pas réaliser seuls.\n\n### mcp-server-legifrance ? \n\nL’idée est d’exploiter la puissance des modèles de langage comme Claude pour effectuer des traitements sur des contenus juridiques officiels via Légifrance, et à terme, d’autres bases de données publiques comme le RNE, le BODACC, etc. Les premiers résultats sont très prometteurs et permettent de pallier certaines limites de la recherche statistique classique proposée par Légifrance. Le service est en amélioration continue, mais vous pouvez déjà consulter quelques exemples de recherches ci-dessous.\n\nLe serveur prend en charge les fonctionnalités suivantes:\n- Recherche dans les textes légaux (lois, ordonnances, décrets, arrêtés)\n- Consultation des articles de codes juridiques français\n- Recherche dans la jurisprudence judiciaire\n\nLes autres fonds Legifrance seront bientôt implémentés. \n\nSi vous souhaitez accéder directement à l'API Legifrance pour connecter votre propre serveur MCP, \nc'est par ici : [https://lab.dassignies.law](https://lab.dassignies.law/api/docs) ou [linkedin](https://fr.linkedin.com/in/dassignies)\n\n## Prérequis\n\n- Python 3.9+\n- Clé API pour Legifrance (à obtenir auprès de [lab.dassignies.law](https://lab.dassignies.fr/))\n- Un modèle compatible avec le protocole MCP (comme Claude desktop)\n\n## Installation\n\n3. Créez un environnement virtuel et activez-le:\n```bash\npython -m venv venv \nsource venv/bin/activate  # Sur Windows: venv\\Scripts\\activate\n```\n```bash\nuv venv .venv \nsource .venv/bin/activate  # Sur Windows: venv\\Scripts\\activate\n```\n2. Installer via pip:\n```bash\npip install git+https://github.com/rdassignies/mcp-server-legifrance.git\n```\n\n3. Installer via uv\n```bash\nuv pip install git+https://github.com/rdassignies/mcp-server-legifrance.git\n```\n\n\n4. Créez un fichier `.env` à la racine du projet avec vos identifiants:\n```\nDASSIGNIES_API_KEY=votre_clé_api\nDASSIGNIES_API_URL=https://lab.dassignies.law/api/ # ou l'URL correspondante\n```\n\nPour obtenir vos clés API de test, merci de me contacter via  [LinkedIn](https://www.linkedin.com/in/dassignies/) \n\n## Utilisation\n\n\n### Intégration avec Claude\n\nC'est l'intégration la plus \"simple\". \n\n\n1. Utilisez le fichier de configuration suivant pour intégrer le serveur MCP dans Claude Desktop. \nPour trouver ce fichier, il faut aller dans paramètres>Développeur>modifier la configuration (renvoie vers le fichier de configuration au format .json). \n\nIl existe également une procédure à la ligne de commande via uv qui sera documentée ultérieurement. \n\nVoici un exemple d'utilisation:\n\n```python\n{\n  \"mcpServers\": {\n    \"legifrance\": {\n      \"command\": \"<CHEMIN_VERS_VOTRE_REP>/mcp-server-legifrance/venv/bin/python\",\n            \"args\": [\n                \"<CHEMIN_VERS_VOTRE_REP>/mcp-server-legifrance/src/server.py\"\n\t\t]\n\n    }\n  }\n}\n```\n2. Démarrer Claude desktop, vous devez voir apparaître des icônes outils : \n![alt text](image.png)\n\n## Outils disponibles\n\n### 1. rechercher_dans_texte_legal\n\nRecherche des articles dans les textes légaux (lois, ordonnances, décrets, arrêtés).\n\n**Paramètres:**\n- **text_id**: Identifiant du texte (ex: \"78-17\" pour la loi informatique et libertés)\n- **search**: Mots-clés ou numéro d'article\n- **champ**: Zone de recherche (\"ALL\", \"TITLE\", \"TABLE\", \"NUM_ARTICLE\", \"ARTICLE\")\n- **type_recherche**: Mode de recherche (\"TOUS_LES_MOTS_DANS_UN_CHAMP\", \"EXPRESSION_EXACTE\", \"AU_MOINS_UN_MOT\")\n- **page_size**: Nombre de résultats (max 100)\n\nPour les détails, cf [https://lab.dassignies.law/api/docs](https://lab.dassignies.law/api/docs)\n\n**Exemple:**\nPour rechercher l'article 7 de la loi 78-17:\n```\n{\n  \"text_id\": \"78-17\",\n  \"search\": \"7\",\n  \"champ\": \"NUM_ARTICLE\"\n}\n```\n\n### 2. rechercher_code\n\nRecherche des articles dans les codes juridiques français.\n\nPar ex. \"Rédige moi une synthèse sur le régime juridique du PACS\"\n\n<img width=\"793\" alt=\"image\" src=\"https://github.com/user-attachments/assets/9af3dd26-cef1-4859-b4b4-55bcfaeb0d4f\" />\n\n\n**Paramètres:**\n- **search**: Termes de recherche\n- **code_name**: Nom du code (ex: \"Code civil\", \"Code du travail\")\n- **champ**: Zone de recherche\n- **sort**: Tri des résultats\n- **type_recherche**: Mode de recherche\n- **page_size**: Nombre de résultats\n- **fetch_all**: Si tous les résultats doivent être récupérés\n\n**Exemple:**\nPour rechercher des informations sur le PACS dans le Code civil, le modèle de langage va envoyer la requête suivante : \n```\n{\n  \"search\": \"pacte civil de solidarité\",\n  \"code_name\": \"Code civil\"\n}\n```\nPour les détails, cf [https://lab.dassignies.law/api/docs](https://lab.dassignies.law/api/docs)\n\n### 3. rechercher_jurisprudence_judiciaire\n\nRecherche dans la base de jurisprudence judiciaire. On peut utiliser la puissance des modèles de langage pour faire des recherches de jurisprudences directement dans Legifrance. \n\n**Exemple 1** Panorama des dernières jp sur un thème particulier (ex. \"Trouve moi les dernières jp sur la rupture brutale des relations commerciales établies et rédige moi un tableau de synthèse\" ). \n\n<img width=\"1456\" alt=\"image\" src=\"https://github.com/user-attachments/assets/e5d77948-7ddf-434c-be31-24feacbfbb22\" />\n\n**Exemple 2** A partir d'une décision particulière connu (numéro de pourvoi 23-23.382), on peut faire des analyses par étapes : \n1. On trouve l'arrêt et Claude génère la fiche d'arrêt\n2. On lui demande d'extraire les articles visés et de les trouver dans Legifrance\n3. On lui demande de trouver des jp similaires\n4. etc ...\n\n\n![image](https://github.com/user-attachments/assets/306724b7-5a42-41c2-9b96-ac591d8880b9)\n\n\n**Paramètres:**\n- **search**: Termes ou numéro d'affaire\n- **publication_bulletin**: Si publiée au bulletin [\"T\"] ou non [\"F\"]\n- **sort**: Tri des résultats\n- **champ**: Zone de recherche\n- **type_recherche**: Mode de recherche\n- **page_size**: Nombre de résultats\n- **fetch_all**: Si tous les résultats doivent être récupérés\n- **juri_keys**: Champs de réponse à extraire \n- **juridiction_judiciaire**: Liste des juridictions\n\nPour les détails, cf [https://lab.dassignies.law/api/docs](https://lab.dassignies.law/api/docs)\n\n## Prompts prédéfinis\n\nLe serveur peut inclure des prompts prédéfinis pour faciliter l'utilisation. \nPour le moment, seul un prompt a été implémenté à titre d'exemple. Il est possible de mettre en place des prompts beaucoup plus \ndétaillés notamment pour effectuer des opérations de type *deepsearch* ou des extractions dans plusieurs documents ... \n\n### agent_juridique_expert\n\nCrée un agent juridique expert qui:\n- Cite systématiquement ses sources\n- Utilise les outils pertinents pour rechercher des informations\n- Fournit des analyses étape par étape\n- Inclut les liens officiels vers les textes juridiques\n\n**Usage:**\n```python\n# Exemple d'utilisation du prompt prédéfini\nresponse = client.messages.create(\n    model=\"claude-3-opus-20240229\",\n    max_tokens=1000,\n    tools=tools,\n    messages=[\n        {\n            \"role\": \"user\", \n            \"content\": [\n                {\n                    \"type\": \"tool_use\",\n                    \"id\": \"prompt_use_1\",\n                    \"name\": \"legifrance.get_prompt\",\n                    \"input\": {\n                        \"prompt_name\": \"agent_juridique_expert\",\n                        \"inputs\": {\n                            \"question\": \"Quelles sont les conditions de validité d'un contrat de mariage?\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n)\n```\n\n## Limitations\n\n- Les requêtes sont limitées à 10 par seconde pour respecter les limites de l'API\n- Une connexion internet est nécessaire pour accéder aux bases juridiques\n- Le serveur ne met pas en cache les résultats, chaque requête interroge l'API\n\n## Contribution\n\nLes contributions sont les bienvenues! Veuillez ouvrir une issue ou soumettre une pull request pour toute amélioration ou correction.\n\n## Licence\n\n[MIT License](LICENSE)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "jurisprudence",
        "judicial",
        "compliance",
        "legal databases",
        "legal compliance",
        "legifrance access"
      ],
      "category": "legal-and-compliance"
    },
    "self-tech-labs--entscheidsuche-MCP-server": {
      "owner": "self-tech-labs",
      "name": "entscheidsuche-MCP-server",
      "url": "https://github.com/self-tech-labs/entscheidsuche-MCP-server",
      "imageUrl": "/freedevtools/mcp/pfp/self-tech-labs.webp",
      "description": "Standardized access to Swiss court decisions for legal research, enabling search, retrieval, and analysis of legal documents from the entscheidsuche.ch database. Provides tools and templates to enhance legal workflows and streamline document handling.",
      "stars": 1,
      "forks": 3,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-21T20:28:57Z",
      "readme_content": "# Entscheidsuche MCP Server\n\nA Model Context Protocol (MCP) server for searching and accessing Swiss legal case law through the Entscheidsuche API. This server enables legal professionals to efficiently research court decisions from Swiss federal and cantonal courts.\n\n## Features\n\n### Tools\n- **Search Case Law** (`search_case_law`): Search through Swiss court decisions using natural language queries\n- **Get Document** (`get_document`): Retrieve full document content in JSON, HTML, or PDF format\n- **List Courts** (`list_courts`): Get information about available courts and their document counts\n\n### Resources\n- **Court Status** (`entscheidsuche://courts/status`): Real-time information about court document collections\n\n### Prompts\n- **Legal Research** (`legal_research`): Template for conducting comprehensive legal research\n- **Case Analysis** (`case_analysis`): Template for analyzing specific legal cases\n\n## Installation\n\n1. Clone or download this project\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n\n## Usage\n\n### With Claude Desktop\n\nAdd the following to your Claude Desktop configuration file:\n\n**macOS/Linux**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n**Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"entscheidsuche\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/entscheidsuche-mcp/build/index.js\"]\n    }\n  }\n}\n```\n\n### With MCP Inspector\n\nTest the server using the MCP Inspector:\n\n```bash\nnpx @modelcontextprotocol/inspector node build/index.js\n```\n\n## Example Searches\n\n### Basic Legal Research\nUse the search tool to find cases on specific topics:\n- \"Datenschutz DSGVO\" (Data protection)\n- \"Arbeitsrecht Kündigung\" (Employment law termination)\n- \"Mietrecht Mietzinserhöhung\" (Rental law rent increases)\n\n### Advanced Queries\nThe search supports Elasticsearch query syntax:\n- `\"exact phrase\"` for exact matches\n- `field:value` for field-specific searches\n- `term1 AND term2` for boolean operations\n\n### Document Retrieval\nOnce you find a relevant case, use the signature and spider name to retrieve the full document:\n- Signature: e.g., \"CH_BGer_2023_1C_123_2023\"\n- Spider: e.g., \"CH_BGer\" (Swiss Federal Court)\n\n## API Endpoints Used\n\nThis server interfaces with:\n- `https://entscheidsuche.ch/_search.php` - Elasticsearch search endpoint\n- `https://entscheidsuche.ch/docs/` - Document repository\n- `https://entscheidsuche.ch/status` - Court status information\n\n## Legal Information\n\nThis tool provides access to publicly available Swiss court decisions through the Entscheidsuche service. Please note:\n\n- Always verify legal information through official sources\n- This tool is for research purposes only\n- Consult qualified legal professionals for legal advice\n- Respect the terms of service of entscheidsuche.ch\n\n## Development\n\n### Scripts\n- `npm run build` - Build the TypeScript project\n- `npm run dev` - Build and run the server\n- `npm run watch` - Watch for changes and rebuild\n\n### Project Structure\n```\nsrc/\n  index.ts          # Main server implementation\nbuild/              # Compiled JavaScript output\npackage.json        # Project dependencies and scripts\ntsconfig.json       # TypeScript configuration\n```\n\n## Contributing\n\nFeel free to submit issues and enhancement requests. When contributing:\n\n1. Follow the existing code style\n2. Add appropriate error handling\n3. Update documentation as needed\n4. Test your changes with the MCP Inspector\n\n## License\n\nMIT License - see LICENSE file for details.\n\n## Acknowledgments\n\n- [Entscheidsuche.ch](https://entscheidsuche.ch) for providing the open API\n- [Model Context Protocol](https://modelcontextprotocol.io) for the MCP framework\n- Swiss courts for making decisions publicly available",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "entscheidsuche",
        "court",
        "documents",
        "documents entscheidsuche",
        "legal compliance",
        "entscheidsuche ch"
      ],
      "category": "legal-and-compliance"
    },
    "u3588064--AutoGuarantee": {
      "owner": "u3588064",
      "name": "AutoGuarantee",
      "url": "https://github.com/u3588064/AutoGuarantee",
      "imageUrl": "/freedevtools/mcp/pfp/u3588064.webp",
      "description": "自动提取保函文本中的要素和条款，提供法律和金融专业人士分析所需的信息。输出结果为 JSON 格式，支持提取担保人的 SWIFT 标识代码、开立日期和保函种类等要素。",
      "stars": 2,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-02-28T14:20:52Z",
      "readme_content": "# 保函业务自动化项目\n\n## 项目概述\n\n本项目旨在从保函文本中抽取要素、切分条款、提示要点、录制系统，以便于法律和金融专业人士进行分析和处理。项目使用自然语言处理技术，从保函文本中提取特定要素，并以JSON格式输出结果。\n\n## 项目结构\n\n```\n保函要素抽取项目/\n│\n├── data/\n│   ├── sample_guarantee.txt       # 示例保函文本\n│   └── ...                       # 其他保函文本\n│\n├── src/\n│   ├── extractor.py              # 要素抽取脚本\n│   ├── clause_splitter.py        # 条款分割脚本\n│   ├── key_points.py             # 要点提示脚本\n│   ├── format.py                 # 格式处理脚本\n│   └── ...                       # 其他源代码文件\n│\n├── tests/\n│   ├── test_extractor.py         # 要素抽取单元测试\n│   ├── test_clause_splitter.py   # 条款分割单元测试\n│   └── ...                       # 其他测试文件\n│\n├── README.md                     # 项目说明文档\n├── requirements.txt               # 项目依赖\n└── ...                           # 其他配置文件\n```\n\n## 要素列表\n\n项目目前支持抽取以下要素：\n\n1. 担保人的SWIFT标识代码\n2. 开立日期\n3. 保函种类\n4. 保函编号\n5. 担保人的名称\n6. 保函开立地址\n7. 申请人的名称\n8. 申请人的地址\n9. 受益人的名称\n10. 受益人的地址\n11. 基础合同名称\n12. 基础合同编号\n13. 基础合同货物描述\n14. 保函的金额\n15. 保函的币种\n\n## 条款分割\n\n项目支持按以下类别切分条款：\n\n1. 需提交的支持索赔的单据\n2. 需提交单据的语言\n3. 交单形式\n4. 交单地点\n5. 生效条款\n6. 失效条款\n7. 费用的承担方\n8. 担保人的承诺\n9. 索赔的提交要求\n10. 索赔的时间和地点要求\n11. 适用规则\n12. 适用法律\n13. 司法管辖地\n\n\n## 使用方法\n\n#在线版体验\n\n完成度80%，域名申请中\n\n#本地部署\n\n1. 克隆项目仓库：\n    ```bash\n    git clone https://github.com/u3588064/AutoGuarantee.git\n    cd 保函要素抽取项目\n    ```\n\n2. 安装项目依赖：\n    ```bash\n    pip install -r requirements.txt\n    ```\n\n3. 运行要素抽取脚本：\n    ```bash\n    python src/extractor.py data/sample_guarantee.txt\n    ```\n\n4. 查看输出结果：\n    脚本会在终端输出抽取的要素，以JSON格式展示。\n\n## 示例\n输入文本：\n```\nPerformance Guarantee\n\nIssue date: December 7, 2023\nNo.: XX1234567\n\nTo:Machine Shopping Department (hereinafter called 'the Beneficiary')\nAdd:Q.X.TOY 101 HUAYUAN, Korea\n\n…… (SEE Full Text in the repository)\n\nThis performance guarantee shall be valid from its issuance and remian valid until August 35, 2025 (expiry date). Any demand in respect of this guarantee should reach us at our counter not later than the close of our Business hours on the above expiry date.\n\nThis performance guarantee is only personnel to you and is not assignable or transferable.\n\nThis guaranttee is subject to the Uniform Rules for Demand Guarantees, ICC Publication No.758.\n\n```\n\n要素抽取结果：\n```json\n{\n  \"担保人的SWIFT标识代码\": \"\",\n  \"开立日期\": \"December 7, 2023\",\n  \"保函种类\": [\"Performance Guarantee\",\"Advance Payment Guarantee\"],\n  \"保函编号\": \"XX1234567\",\n  \"担保人的名称\": \"Bank of China Ltd, ABC Branch\",\n  \"保函开立地址\": \"No.1 N Road, Xi Province, P. R. China\",\n  \"申请人的名称\": \"GUANGDONG GX GROUP MACHINE CO., LTD\",\n  \"申请人的地址\": \"NO.18 E ROAD, CHINA\",\n  \"受益人的名称\": \"Machine Shopping Department\",\n  \"受益人的地址\": \"Q.X.TOY 101 HUAYUAN, Korea\",\n  \"基础合同名称\": \"Supply Contract\",\n  \"基础合同编号\": \"AK/123/2023/09\",\n  \"基础合同货物描述\": \"Supply of Toy bags\",\n  \"保函的金额\": 1,123.00,\n  \"保函的币种\": \"USD\"\n}\n{\n \"保函种类\": [\"Performance Guarantee\",\"Advance Payment Guarantee\"]\n}\n```\n\n条款切分结果：\n```\n{\n  \"需提交的支持索赔的单据\": null,\n  \"需提交单据的语言\": null,\n  \"交单形式\": \"any such demand in original should be presented to us through your Banker confirmation that the signatures thereon are authentic and legally binding upon you.\",\n  \"交单地点\": \"our counter\",\n  \"生效条款\": \"This performance guarantee shall be valid from its issuance\",\n  \"失效条款\": \"This performance guarantee shall ... remain valid until August 35, 2025 (expiry date).\",\n  \"费用的承担方\": null,\n  \"担保人的承诺\": \"we undertake to pay you unconditionally and independently, upon our receipt of your first written demand in original paper form declaring the seller fails to perform its obligations under the Contract and specifying in which respect the seller is in failure.\",\n  \"索赔的提交要求\": \"your first written demand in original paper form declaring the seller fails to perform its obligations under the Contract and specifying in which respect the seller is in failure.\",\n  \"索赔的时间和地点要求\": \"Any demand in respect of this guarantee should reach us at our counter not later than the close of our Business hours on the above expiry date.\",\n  \"适用规则\": \"This guaranttee is subject to the Uniform Rules for Demand Guarantees, ICC Publication No.758.\",\n  \"适用法律\": null,\n  \"司法管辖地\": null\n}\n```\n\n## 贡献\n\n欢迎对本项目进行贡献。如果您有任何建议或发现任何问题，请提交Issue或Pull Request。\n\n## 许可证\n\n本项目采用MIT许可证，详见LICENSE文件。\n\n## 联系方式\n\n如果您有任何问题或需要进一步的信息，请联系项目维护者：[u3588064@connect.hku.hk](mailto:u3588064@connect.hku.hk)。\n\n![qrcode_for_gh_643efb7db5bc_344(1)](https://github.com/u3588064/LLMemory/assets/53069671/8bb26c0f-4cab-438b-9f8c-16b1c26b3587)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "自动提取保函文本中的要素和条款",
        "compliance",
        "autoguarantee",
        "autoguarantee 自动提取保函文本中的要素和条款",
        "legal compliance",
        "自动提取保函文本中的要素和条款 提供法律和金融专业人士分析所需的信息"
      ],
      "category": "legal-and-compliance"
    }
  }
}