{
  "category": "browser-automation",
  "categoryDisplay": "Browser Automation",
  "description": "Web content access and automation capabilities. Enables searching, scraping, and processing web content in AI-friendly formats.",
  "totalRepositories": 121,
  "repositories": {
    "1050202387--mcp-server-browserbase": {
      "owner": "1050202387",
      "name": "mcp-server-browserbase",
      "url": "https://github.com/1050202387/mcp-server-browserbase",
      "imageUrl": "/freedevtools/mcp/pfp/1050202387.webp",
      "description": "The Browserbase MCP Server automates web browsing tasks in the cloud, allowing AI applications to navigate websites, capture screenshots, and run JavaScript code. This makes it easier to gather data from the web and integrate it into various AI solutions.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-02T03:52:47Z",
      "readme_content": "# Browserbase MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@1050202387/mcp-server-browserbase)](https://smithery.ai/server/@1050202387/mcp-server-browserbase)\n\n\n[The Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) is an open protocol that enables seamless integration between LLM applications and external data sources and tools. Whether you‚Äôre building an AI-powered IDE, enhancing a chat interface, or creating custom AI workflows, MCP provides a standardized way to connect LLMs with the context they need.\n\nThis server provides cloud browser automation capabilities using [Browserbase](https://www.browserbase.com/), [Puppeteer](https://pptr.dev/), and [Stagehand](https://github.com/browserbase/stagehand). This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a cloud browser environment.\n\nTo learn to get started with Browserbase, check out [Browserbase MCP](./browserbase/README.md) or [Stagehand MCP](./stagehand/README.md).\n\n## Getting Started with available MCPs\n\nüåê **Browserbase MCP** - Located in [`browserbase/`](./browserbase/)\n\n| Feature            | Description                               |\n| ------------------ | ----------------------------------------- |\n| Browser Automation | Control and orchestrate cloud browsers    |\n| Data Extraction    | Extract structured data from any webpage  |\n| Console Monitoring | Track and analyze browser console logs    |\n| Screenshots        | Capture full-page and element screenshots |\n| JavaScript         | Execute custom JS in the browser context  |\n| Web Interaction    | Navigate, click, and fill forms with ease |\n\nü§ò **Stagehand MCP** - Located in [`stagehand/`](./stagehand/)\n\n| Feature             | Description                                                                                                                                                    |\n| ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Atomic Instructions | Execute precise actions like `act(\"click the login button\")` or `extract(\"find the red shoes\")`                                                                |\n| Model Flexibility   | Supports multiple models, including OpenAI's GPT-4 and Anthropic's Claude-3.7 Sonnet                                                                           |\n| Modular Design      | Easily integrate new models with minimal changes                                                                                                               |\n| Vision Support      | Use annotated screenshots for complex DOMs                                                                                                                     |\n| Open Source         | Contribute to the project and join the [Slack community](https://join.slack.com/t/stagehand-dev/shared_invite/zt-2uvuobu50-~wVSx2Si75CPa3332hwVEw) for support |\n\n### Installing via Smithery\n\nTo install Browserbase MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@1050202387/mcp-server-browserbase):\n\n```bash\nnpx -y @smithery/cli install @1050202387/mcp-server-browserbase --client claude\n```\n\n### Alternative Installation Methods\n\n[Smithery](https://smithery.ai/server/@browserbasehq/mcp-browserbase)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "browserbase",
        "automation",
        "browser",
        "browser automation",
        "browserbase mcp",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "302ai--302_browser_use_mcp": {
      "owner": "302ai",
      "name": "302_browser_use_mcp",
      "url": "https://github.com/302ai/302_browser_use_mcp",
      "imageUrl": "/freedevtools/mcp/pfp/302ai.webp",
      "description": "The 302AI Browser Automation Server allows users to control web browsers using natural language commands. It helps automate online tasks and conduct web research efficiently without the need for complex coding.",
      "stars": 8,
      "forks": 7,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-28T15:13:51Z",
      "readme_content": "# <p align=\"center\">ü§ñ 302AI BrowserUse MCP ServerüöÄ‚ú®</p>\n\n<p align=\"center\">An AI-powered browser automation server implementing Model Context Protocol (MCP) for natural language browser control and web research.</p>\n\n<a href=\"https://glama.ai/mcp/servers/@302ai/302_browser_use_mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@302ai/302_browser_use_mcp/badge\" alt=\"302AI BrowserUse Server MCP server\" />\n</a>\n\n<p align=\"center\"><a href=\"https://www.npmjs.com/package/@302ai/browser-use-mcp\" target=\"blank\"><img alt=\"72a57c4263944b73bf521830878ae39a\" src=\"https://file.302.ai/gpt/imgs/github/20250102/72a57c4263944b73bf521830878ae39a.png\" /></a></p >\n\n<p align=\"center\"><a href=\"README_zh.md\">‰∏≠Êñá</a> | <a href=\"README.md\">English</a> | <a href=\"README_ja.md\">Êó•Êú¨Ë™û</a></p>\n\n \n\n## Previews\n\nHere are some usage examples\n      \n\nHere is the list of supported tools\n\n\n\n## ‚ú® Features ‚ú®\n\n- üîß Dynamic Loading - Automatically update tool list from remote server.\n- üåê Multi modes supported, you can use `stdin` mode locally, or host it as a remote HTTP server\n\n## üöÄ Tool List\n- [Create Browser Automation Task](https://302ai-en.apifox.cn/api-282235063)\n- [Query Browser Task Status](https://302ai-en.apifox.cn/api-282235713)\n\n\n## Development\n\nInstall dependencies:\n\n```bash\nnpm install\n```\n\nBuild the server:\n\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`    \nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"302ai-browser-use-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@302ai/browser-use-mcp\"],\n      \"env\": {\n        \"302AI_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\nTo use with Cherry Studio, add the server config:\n\n```json\n{\n  \"mcpServers\": {\n    \"Li2ZXXJkvhAALyKOFeO4N\": {\n      \"name\": \"302ai-browser-use-mcp\",\n      \"description\": \"\",\n      \"isActive\": true,\n      \"registryUrl\": \"\",\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@302ai/browser-use-mcp\"\n      ],\n      \"env\": {\n        \"302AI_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\nTo use with ChatWise, copy the following content to clipboard\n```json\n{\n  \"mcpServers\": {\n    \"302ai-sandbox-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@302ai/browser-use-mcp\"],\n      \"env\": {\n        \"302AI_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\nGo to Settings -> Tools -> Add button -> Select Import from Clipboard\n\n\n### Find Your 302AI_API_KEY [here](https://dash.302.ai/apis/list)\n[Using Tutorials](https://help.302.ai/en/docs/API-guan-li)\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## ‚ú® About 302.AI ‚ú®\n[302.AI](https://302.ai/en/) is an enterprise-oriented AI application platform that offers pay-as-you-go services, ready-to-use solutions, and an open-source ecosystem.‚ú®\n1. üß† Integrates the latest and most comprehensive AI capabilities and brands, including but not limited to language models, image models, voice models, and video models.\n2. üöÄ Develops deep applications based on foundation models - we develop real AI products, not just simple chatbots\n3. üí∞ Zero monthly fee, all features are pay-per-use, fully open, achieving truly low barriers with high potential.\n4. üõ† Powerful management backend for teams and SMEs - one person manages, many people use.\n5. üîó All AI capabilities provide API access, all tools are open source and customizable (in progress).\n6. üí° Strong development team, launching 2-3 new applications weekly, products updated daily. Developers interested in joining are welcome to contact us.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "302_browser_use_mcp",
        "302ai",
        "browser",
        "302ai browser",
        "browser automation",
        "302_browser_use_mcp 302ai"
      ],
      "category": "browser-automation"
    },
    "AB498--computer-control-mcp": {
      "owner": "AB498",
      "name": "computer-control-mcp",
      "url": "https://github.com/AB498/computer-control-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/AB498.webp",
      "description": "Control computer functions programmatically using mouse and keyboard interactions, screen capture, and OCR capabilities. Integrate automation for clicking, typing, window management, and text extraction from screenshots to enhance workflows.",
      "stars": 47,
      "forks": 9,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-01T18:00:05Z",
      "readme_content": "# Computer Control MCP\n\n### MCP server that provides computer control capabilities, like mouse, keyboard, OCR, etc. using PyAutoGUI, RapidOCR, ONNXRuntime. Similar to 'computer-use' by Anthropic. With Zero External Dependencies.\n\n<div align=\"center\" style=\"text-align:center;font-family: monospace; display: flex; align-items: center; justify-content: center; width: 100%; gap: 10px\">\n    <a href=\"https://nextjs-boilerplate-ashy-nine-64.vercel.app/demo-computer-control\"><img alt=\"username_AB498_label_DEMO_style_for_the_badge_color_CC0000\"\n            src=\"https://komarev.com/ghpvc/?username=AB498&label=DEMO&style=for-the-badge&color=CC0000\" /></a>\n    <a href=\"https://discord.gg/ZeeqSBpjU2\"><img\n            src=\"https://img.shields.io/discord/1095854826786668545?style=for-the-badge&color=0000CC\" alt=\"Discord\"></a>\n    <a href=\"https://img.shields.io/badge/License-MIT-yellow.svg\"><img\n            src=\"https://img.shields.io/badge/License-MIT-yellow.svg?style=for-the-badge&color=00CC00\" alt=\"License: MIT\"></a>\n    <a href=\"https://pypi.org/project/computer-control-mcp\"><img\n            src=\"https://img.shields.io/pypi/v/computer-control-mcp?style=for-the-badge\" alt=\"PyPi\"></a>\n</div>\n\n---\n\n![MCP Computer Control Demo](https://github.com/AB498/computer-control-mcp/blob/main/demonstration.gif?raw=true)\n\n## Quick Usage (MCP Setup Using `uvx`)\n\n***Note:** Running `uvx computer-control-mcp@latest` for the first time will download python dependencies (around 70MB) which may take some time. Recommended to run this in a terminal before using it as MCP. Subsequent runs will be instant.* \n\n```json\n{\n  \"mcpServers\": {\n    \"computer-control-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\"computer-control-mcp@latest\"]\n    }\n  }\n}\n```\n\nOR install globally with `pip`:\n```bash\npip install computer-control-mcp\n```\nThen run the server with:\n```bash\ncomputer-control-mcp # instead of uvx computer-control-mcp, so you can use the latest version, also you can `uv cache clean` to clear the cache and `uvx` again to use latest version.\n```\n\n## Features\n\n- Control mouse movements and clicks\n- Type text at the current cursor position\n- Take screenshots of the entire screen or specific windows with optional saving to downloads directory\n- Extract text from screenshots using OCR (Optical Character Recognition)\n- List and activate windows\n- Press keyboard keys\n- Drag and drop operations\n\n## Available Tools\n\n### Mouse Control\n- `click_screen(x: int, y: int)`: Click at specified screen coordinates\n- `move_mouse(x: int, y: int)`: Move mouse cursor to specified coordinates\n- `drag_mouse(from_x: int, from_y: int, to_x: int, to_y: int, duration: float = 0.5)`: Drag mouse from one position to another\n- `mouse_down(button: str = \"left\")`: Hold down a mouse button ('left', 'right', 'middle')\n- `mouse_up(button: str = \"left\")`: Release a mouse button ('left', 'right', 'middle')\n\n### Keyboard Control\n- `type_text(text: str)`: Type the specified text at current cursor position\n- `press_key(key: str)`: Press a specified keyboard key\n- `key_down(key: str)`: Hold down a specific keyboard key until released\n- `key_up(key: str)`: Release a specific keyboard key\n- `press_keys(keys: Union[str, List[Union[str, List[str]]]])`: Press keyboard keys (supports single keys, sequences, and combinations)\n\n### Screen and Window Management\n- `take_screenshot(title_pattern: str = None, use_regex: bool = False, threshold: int = 60, scale_percent_for_ocr: int = None, save_to_downloads: bool = False)`: Capture screen or window\n- `take_screenshot_with_ocr(title_pattern: str = None, use_regex: bool = False, threshold: int = 10, scale_percent_for_ocr: int = None, save_to_downloads: bool = False)`: Extract adn return text with coordinates using OCR from screen or window\n- `get_screen_size()`: Get current screen resolution\n- `list_windows()`: List all open windows\n- `activate_window(title_pattern: str, use_regex: bool = False, threshold: int = 60)`: Bring specified window to foreground\n\n## Development\n\n### Setting up the Development Environment\n\n```bash\n# Clone the repository\ngit clone https://github.com/AB498/computer-control-mcp.git\ncd computer-control-mcp\n\n# Install in development mode\npip install -e .\n\n# Start server\npython -m computer_control_mcp.core\n\n# -- OR --\n\n# Build\nhatch build\n\n# Non-windows\npip install dist/*.whl --upgrade\n\n# Windows\n$latest = Get-ChildItem .\\dist\\*.whl | Sort-Object LastWriteTime -Descending | Select-Object -First 1\npip install $latest.FullName --upgrade \n\n# Run\ncomputer-control-mcp\n```\n\n### Running Tests\n\n```bash\npython -m pytest\n```\n\n## API Reference\n\nSee the [API Reference](docs/api.md) for detailed information about the available functions and classes.\n\n## License\n\nMIT\n\n## For more information or help\n\n- [Email (abcd49800@gmail.com)](mailto:abcd49800@gmail.com)\n- [Discord (CodePlayground)](https://discord.gg/ZeeqSBpjU2)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "browser",
        "scraping",
        "browser automation",
        "automation web",
        "automation capabilities"
      ],
      "category": "browser-automation"
    },
    "AgentDeskAI--browser-tools-mcp": {
      "owner": "AgentDeskAI",
      "name": "browser-tools-mcp",
      "url": "https://github.com/AgentDeskAI/browser-tools-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/AgentDeskAI.webp",
      "description": "Monitors browser logs and analyzes browser data through a Chrome extension, enabling AI applications to enhance their interaction capabilities within a browsing context.",
      "stars": 6656,
      "forks": 496,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-03T09:44:37Z",
      "readme_content": "# BrowserTools MCP\n\n> Make your AI tools 10x more aware and capable of interacting with your browser\n\nThis application is a powerful browser monitoring and interaction tool that enables AI-powered applications via Anthropic's Model Context Protocol (MCP) to capture and analyze browser data through a Chrome extension.\n\nRead our [docs](https://browsertools.agentdesk.ai/) for the full installation, quickstart and contribution guides.\n\n## Roadmap\n\nCheck out our project roadmap here: [Github Roadmap / Project Board](https://github.com/orgs/AgentDeskAI/projects/1/views/1)\n\n## Updates\n\nv1.2.0 is out! Here's a quick breakdown of the update:\n- You can now enable \"Allow Auto-Paste into Cursor\" within the DevTools panel. Screenshots will be automatically pasted into Cursor (just make sure to focus/click into the Agent input field in Cursor, otherwise it won't work!)\n- Integrated a suite of SEO, performance, accessibility, and best practice analysis tools via Lighthouse\n- Implemented a NextJS specific prompt used to improve SEO for a NextJS application\n- Added Debugger Mode as a tool which executes all debugging tools in a particular sequence, along with a prompt to improve reasoning\n- Added Audit Mode as a tool to execute all auditing tools in a particular sequence\n- Resolved Windows connectivity issues\n- Improved networking between BrowserTools server, extension and MCP server with host/port auto-discovery, auto-reconnect, and graceful shutdown mechanisms\n- Added ability to more easily exit out of the Browser Tools server with Ctrl+C\n\n## Quickstart Guide\n\nThere are three components to run this MCP tool:\n\n1. Install our chrome extension from here: [v1.2.0 BrowserToolsMCP Chrome Extension](https://github.com/AgentDeskAI/browser-tools-mcp/releases/download/v1.2.0/BrowserTools-1.2.0-extension.zip)\n2. Install the MCP server from this command within your IDE: `npx @agentdeskai/browser-tools-mcp@latest`\n3. Open a new terminal and run this command: `npx @agentdeskai/browser-tools-server@latest`\n\n* Different IDEs have different configs but this command is generally a good starting point; please reference your IDEs docs for the proper config setup\n\nIMPORTANT TIP - there are two servers you need to install. There's...\n- browser-tools-server (local nodejs server that's a middleware for gathering logs)\nand\n- browser-tools-mcp (MCP server that you install into your IDE that communicates w/ the extension + browser-tools-server)\n\n`npx @agentdeskai/browser-tools-mcp@latest` is what you put into your IDE\n`npx @agentdeskai/browser-tools-server@latest` is what you run in a new terminal window\n\nAfter those three steps, open up your chrome dev tools and then the BrowserToolsMCP panel.\n\nIf you're still having issues try these steps:\n- Quit / close down your browser. Not just the window but all of Chrome itself. \n- Restart the local node server (browser-tools-server)\n- Make sure you only have ONE instance of chrome dev tools panel open\n\nAfter that, it should work but if it doesn't let me know and I can share some more steps to gather logs/info about the issue!\n\nIf you have any questions or issues, feel free to open an issue ticket! And if you have any ideas to make this better, feel free to reach out or open an issue ticket with an enhancement tag or reach out to me at [@tedx_ai on x](https://x.com/tedx_ai)\n\n## Full Update Notes:\n\nCoding agents like Cursor can run these audits against the current page seamlessly. By leveraging Puppeteer and the Lighthouse npm library, BrowserTools MCP can now:\n\n- Evaluate pages for WCAG compliance\n- Identify performance bottlenecks\n- Flag on-page SEO issues\n- Check adherence to web development best practices\n- Review NextJS specific issues with SEO\n\n...all without leaving your IDE üéâ\n\n---\n\n## üîë Key Additions\n\n| Audit Type         | Description                                                                                                                              |\n| ------------------ | ---------------------------------------------------------------------------------------------------------------------------------------- |\n| **Accessibility**  | WCAG-compliant checks for color contrast, missing alt text, keyboard navigation traps, ARIA attributes, and more.                        |\n| **Performance**    | Lighthouse-driven analysis of render-blocking resources, excessive DOM size, unoptimized images, and other factors affecting page speed. |\n| **SEO**            | Evaluates on-page SEO factors (like metadata, headings, and link structure) and suggests improvements for better search visibility.      |\n| **Best Practices** | Checks for general best practices in web development.                                                                                    |\n| **NextJS Audit**   | Injects a prompt used to perform a NextJS audit.                                                                                         |\n| **Audit Mode**     | Runs all auditing tools in a sequence.                                                                                                   |\n| **Debugger Mode**  | Runs all debugging tools in a sequence.                                                                                                  |\n\n---\n\n## üõ†Ô∏è Using Audit Tools\n\n### ‚úÖ **Before You Start**\n\nEnsure you have:\n\n- An **active tab** in your browser\n- The **BrowserTools extension enabled**\n\n### ‚ñ∂Ô∏è **Running Audits**\n\n**Headless Browser Automation**:  \n Puppeteer automates a headless Chrome instance to load the page and collect audit data, ensuring accurate results even for SPAs or content loaded via JavaScript.\n\nThe headless browser instance remains active for **60 seconds** after the last audit call to efficiently handle consecutive audit requests.\n\n**Structured Results**:  \n Each audit returns results in a structured JSON format, including overall scores and detailed issue lists. This makes it easy for MCP-compatible clients to interpret the findings and present actionable insights.\n\nThe MCP server provides tools to run audits on the current page. Here are example queries you can use to trigger them:\n\n#### Accessibility Audit (`runAccessibilityAudit`)\n\nEnsures the page meets accessibility standards like WCAG.\n\n> **Example Queries:**\n>\n> - \"Are there any accessibility issues on this page?\"\n> - \"Run an accessibility audit.\"\n> - \"Check if this page meets WCAG standards.\"\n\n#### Performance Audit (`runPerformanceAudit`)\n\nIdentifies performance bottlenecks and loading issues.\n\n> **Example Queries:**\n>\n> - \"Why is this page loading so slowly?\"\n> - \"Check the performance of this page.\"\n> - \"Run a performance audit.\"\n\n#### SEO Audit (`runSEOAudit`)\n\nEvaluates how well the page is optimized for search engines.\n\n> **Example Queries:**\n>\n> - \"How can I improve SEO for this page?\"\n> - \"Run an SEO audit.\"\n> - \"Check SEO on this page.\"\n\n#### Best Practices Audit (`runBestPracticesAudit`)\n\nChecks for general best practices in web development.\n\n> **Example Queries:**\n>\n> - \"Run a best practices audit.\"\n> - \"Check best practices on this page.\"\n> - \"Are there any best practices issues on this page?\"\n\n#### Audit Mode (`runAuditMode`)\n\nRuns all audits in a particular sequence. Will run a NextJS audit if the framework is detected.\n\n> **Example Queries:**\n>\n> - \"Run audit mode.\"\n> - \"Enter audit mode.\"\n\n#### NextJS Audits (`runNextJSAudit`)\n\nChecks for best practices and SEO improvements for NextJS applications\n\n> **Example Queries:**\n>\n> - \"Run a NextJS audit.\"\n> - \"Run a NextJS audit, I'm using app router.\"\n> - \"Run a NextJS audit, I'm using page router.\"\n\n#### Debugger Mode (`runDebuggerMode`)\n\nRuns all debugging tools in a particular sequence\n\n> **Example Queries:**\n>\n> - \"Enter debugger mode.\"\n\n## Architecture\n\nThere are three core components all used to capture and analyze browser data:\n\n1. **Chrome Extension**: A browser extension that captures screenshots, console logs, network activity and DOM elements.\n2. **Node Server**: An intermediary server that facilitates communication between the Chrome extension and any instance of an MCP server.\n3. **MCP Server**: A Model Context Protocol server that provides standardized tools for AI clients to interact with the browser.\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  MCP Client ‚îÇ ‚îÄ‚îÄ‚ñ∫ ‚îÇ  MCP Server  ‚îÇ ‚îÄ‚îÄ‚ñ∫ ‚îÇ  Node Server  ‚îÇ ‚îÄ‚îÄ‚ñ∫ ‚îÇ   Chrome    ‚îÇ\n‚îÇ  (e.g.      ‚îÇ ‚óÑ‚îÄ‚îÄ ‚îÇ  (Protocol   ‚îÇ ‚óÑ‚îÄ‚îÄ ‚îÇ (Middleware)  ‚îÇ ‚óÑ‚îÄ‚îÄ ‚îÇ  Extension  ‚îÇ\n‚îÇ   Cursor)   ‚îÇ     ‚îÇ   Handler)   ‚îÇ     ‚îÇ               ‚îÇ     ‚îÇ             ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\nModel Context Protocol (MCP) is a capability supported by Anthropic AI models that\nallow you to create custom tools for any compatible client. MCP clients like Claude\nDesktop, Cursor, Cline or Zed can run an MCP server which \"teaches\" these clients\nabout a new tool that they can use.\n\nThese tools can call out to external APIs but in our case, **all logs are stored locally** on your machine and NEVER sent out to any third-party service or API. BrowserTools MCP runs a local instance of a NodeJS API server which communicates with the BrowserTools Chrome Extension.\n\nAll consumers of the BrowserTools MCP Server interface with the same NodeJS API and Chrome extension.\n\n#### Chrome Extension\n\n- Monitors XHR requests/responses and console logs\n- Tracks selected DOM elements\n- Sends all logs and current element to the BrowserTools Connector\n- Connects to Websocket server to capture/send screenshots\n- Allows user to configure token/truncation limits + screenshot folder path\n\n#### Node Server\n\n- Acts as middleware between the Chrome extension and MCP server\n- Receives logs and currently selected element from Chrome extension\n- Processes requests from MCP server to capture logs, screenshot or current element\n- Sends Websocket command to the Chrome extension for capturing a screenshot\n- Intelligently truncates strings and # of duplicate objects in logs to avoid token limits\n- Removes cookies and sensitive headers to avoid sending to LLMs in MCP clients\n\n#### MCP Server\n\n- Implements the Model Context Protocol\n- Provides standardized tools for AI clients\n- Compatible with various MCP clients (Cursor, Cline, Zed, Claude Desktop, etc.)\n\n## Installation\n\nInstallation steps can be found in our documentation:\n\n- [BrowserTools MCP Docs](https://browsertools.agentdesk.ai/)\n\n## Usage\n\nOnce installed and configured, the system allows any compatible MCP client to:\n\n- Monitor browser console output\n- Capture network traffic\n- Take screenshots\n- Analyze selected elements\n- Wipe logs stored in our MCP server\n- Run accessibility, performance, SEO, and best practices audits\n\n## Compatibility\n\n- Works with any MCP-compatible client\n- Primarily designed for Cursor IDE integration\n- Supports other AI editors and MCP clients\n",
      "npm_url": "https://www.npmjs.com/package/browser-tools-mcp",
      "npm_downloads": 3555,
      "keywords": [
        "browser",
        "automation",
        "scraping",
        "browser automation",
        "agentdeskai browser",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "Ashish-Bansal--playwright-mcp": {
      "owner": "Ashish-Bansal",
      "name": "playwright-mcp",
      "url": "https://github.com/Ashish-Bansal/playwright-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Ashish-Bansal.webp",
      "description": "Connects AI assistants to your web application's DOM, enabling the generation of accurate Playwright tests based on real elements instead of textual descriptions. This integration helps to reduce flaky tests and debugging issues related to AI-generated scripts.",
      "stars": 26,
      "forks": 5,
      "license": "Other",
      "language": "TypeScript",
      "updated_at": "2025-09-16T03:46:07Z",
      "readme_content": "# How to Use playwright-mcp?\n\n[![npm version](https://img.shields.io/npm/v/playwright-mcp)](https://www.npmjs.com/package/playwright-mcp) [![Docs](https://img.shields.io/badge/docs-playwright--mcp-blue)](https://ashish-bansal.github.io/playwright-mcp/)\n\n## Introduction\n\nEver tried using Cursor or Claude to write Playwright tests? Yeah, it's kind of a mess.\n\nWhy? Because your AI assistant has no clue what's on your web page. It's like trying to describe a painting to someone who's blindfolded. The result?\n\n- **Flaky tests** ‚Üí The AI is guessing selectors, and it gets them wrong.\n- **Broken scripts** ‚Üí You spend more time fixing tests than writing them.\n- **Debugging nightmares** ‚Üí The AI can't \"see\" what's happening, so you end up doing all the heavy lifting.\n\nWouldn't it be nice if your AI could actually understand your web page instead of just making educated guesses?\n\n### Enter playwright-mcp !\n\n`playwright-mcp` gives your AI assistant superpowers by making the browser fully visible to it. Instead of working in the dark, your AI assistant now has real-time access to the page DOM, elements, and interactions.\n\n### How playwright-mcp Works (AKA How We Fix This Mess)\n\nOnce installed, playwright-mcp spins up a Playwright-controlled browser and gives your AI assistant full access to it. This unlocks:\n\n1. **Recording interactions** ‚Üí Click, type, scroll‚Äîlet playwright-mcp turn your actions into fully functional Playwright test cases.\n2. **Taking screenshots** ‚Üí Capture elements or full pages so your AI gets actual visual context (no more guessing).\n3. **Extracting the DOM** ‚Üí Grab the entire HTML structure so the AI can generate rock-solid selectors.\n4. **Executing JavaScript** ‚Üí Run custom JS inside the browser for debugging, automation, or just for fun.\n\n### Why You'll Love playwright-mcp\n\nüöÄ **AI-generated tests that actually work** ‚Üí No more flaky selectors, broken tests, or guesswork.\n\n‚è≥ **Massive time savings** ‚Üí Write and debug Playwright tests 5x faster.\n\nüõ†Ô∏è **Fewer headaches** ‚Üí Your AI assistant gets live page context, so it can generate real test cases.\n\nüîå **Works out of the box** ‚Üí Plug it into Cursor, Claude, WindSurf, or whatever you use‚Äîit just works.\n\n#### **Give Your AI the Context It Deserves**\n\nTired of fixing AI-generated tests? Stop debugging AI's bad guesses‚Äîstart writing flawless Playwright tests. Use the guide below to install playwright-mcp and let your AI assistant actually help you for once. \n\n---\n\n### Installation: Get Up and Running in No Time\n\n### Prerequisites (a.k.a. What You Need Before You Start)\n\nBefore you install `playwright-mcp`, make sure you have:\n\n‚úÖ Node.js installed on your system (because, well‚Ä¶ it's an npm package)\n\n‚úÖ Playwright and its Chromium browser installed\n\n‚úÖ An IDE that supports MCP, like Cursor\n\n‚úÖ A brain that's ready to automate Playwright tests like a pro\n\n### Setting Up playwright-mcp (It's Easy, I Promise)\n\n#### Connect It to Your IDE (Cursor Setup)\n\nIf you're using Cursor, follow these steps to connect `playwright-mcp` like a boss:\n\n1. Open Cursor IDE\n2. Navigate to Settings (‚öôÔ∏è)\n3. Select Cursor Settings ‚Üí Go to the MCP tab\n4. Click \"Add new MCP server\"\n5. Fill in the following details:\n    \n    ![Connect playwright-mcp to cursor](https://github.com/Ashish-Bansal/playwright-mcp/blob/docs/static/img/cursor-add-mcp.png?raw=true)\n\n\n    - Name ‚Üí `playwright-mcp`\n    - Command ‚Üí `npx -y playwright-mcp`\n6. Click \"Add\", and boom‚Äîyou're connected! üöÄ\n\nNote: If clicking on \"Add new MCP server\", opens a file(.cursor/mcp.json), Paste the following code and save:\n\n```jsx\n{\n  \"mcpServers\": {\n    \"playwright-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"playwright-mcp\"\n      ]\n    }\n  }\n}\n```\n\nNow Cursor actually understands your web pages. No more random test suggestions based on zero context! Head to the [Claude tutorial](https://ashish-bansal.github.io/playwright-mcp/tutorials/claude-desktop-tutorial) or [Cursor tutorial](https://ashish-bansal.github.io/playwright-mcp/tutorials/cursor-tutorial) to understand it in details. \n\n---\n\n### **Connect It to Claude desktop**\n\nWait‚Ä¶ Does It Work with Other AI Assistants? Yes! While `playwright-mcp` is a match made in heaven for IDEs, you can use it with Claude desktop to write tests as well. \n\n1. Install `playwright-mcp` (The Easy Part)\n    1. First things first, fire up your terminal and run:\n    2. `npm install -g playwright-mcp`\n2. Hook It Up to Claude Desktop\n    1. Find the Configuration File\n    2. On windows \n        1. `%APPDATA%\\Claude\\claude_desktop_config.json`\n    3. On macOS: \n        1. `~/Library/Application Support/Claude/claude_desktop_config.json`\n    4. Update the config file\n    \n    ```jsx\n    {\n      \"mcpServers\": {\n        \"playwright\": {\n          \"command\": \"npx\",\n          \"args\": [\"-y\", \"playwright-mcp\"]\n        }\n      }\n    }\n    ```\n    \n3. Restart Claude Desktop (Because It's a New Day)\n    1. Close and reopen Claude Desktop to apply the changes.\n4. Verify That It's Working \n    1. Once everything is set up, let's test if Claude can actually talk to Playwright now.\n    2. Open Claude and ask: \"List all available MCP tools.\"\n    3. If `playwright-mcp` is installed correctly, it should list tools like:\n        1. `get-context`\n        2. `get-full-dom`\n        3. `get-screenshot`\n        4. `execute-code`\n        5. `init-browser`\n        6. `validate-selectors`\n    4. Ask Claude to init browser and a browser should open up after your approval! \n\nNow that the Calude has access to the web pages. You can ask it write highly contextual tests! Head to the [Claude tutorial](https://ashish-bansal.github.io/playwright-mcp/tutorials/claude-desktop-tutorial) or [Cursor tutorial](https://ashish-bansal.github.io/playwright-mcp/tutorials/cursor-tutorial) to understand it in details. \n\n\n[üìñ **View Documentation**](https://ashish-bansal.github.io/playwright-mcp/)\n",
      "npm_url": "https://www.npmjs.com/package/playwright-mcp",
      "npm_downloads": 88803,
      "keywords": [
        "automation",
        "scripts",
        "scraping",
        "browser automation",
        "automation web",
        "content ai"
      ],
      "category": "browser-automation"
    },
    "BrowserMCP--mcp": {
      "owner": "BrowserMCP",
      "name": "mcp",
      "url": "https://github.com/BrowserMCP/mcp",
      "imageUrl": "/freedevtools/mcp/pfp/BrowserMCP.webp",
      "description": "Automate web interactions by leveraging existing browser profiles to maintain logged-in sessions and navigate through web pages without managing separate instances of the browser. This server facilitates local automation, ensuring that browser activity remains private and efficient.",
      "stars": 4500,
      "forks": 329,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-03T08:55:27Z",
      "readme_content": "<a href=\"https://browsermcp.io\">\n  \n</a>\n\n<h3 align=\"center\">Browser MCP</h3>\n\n<p align=\"center\">\n  Automate your browser with AI.\n  <br />\n  <a href=\"https://browsermcp.io\"><strong>Website</strong></a> \n  ‚Ä¢\n  <a href=\"https://docs.browsermcp.io\"><strong>Docs</strong></a>\n</p>\n\n## About\n\nBrowser MCP is an MCP server + Chrome extension that allows you to automate your browser using AI applications like VS Code, Claude, Cursor, and Windsurf.\n\n## Features\n\n- ‚ö° Fast: Automation happens locally on your machine, resulting in better performance without network latency.\n- üîí Private: Since automation happens locally, your browser activity stays on your device and isn't sent to remote servers.\n- üë§ Logged In: Uses your existing browser profile, keeping you logged into all your services.\n- ü•∑üèº Stealth: Avoids basic bot detection and CAPTCHAs by using your real browser fingerprint.\n\n## Contributing\n\nThis repo contains all the core MCP code for Browser MCP, but currently cannot yet be built on its own due to dependencies on utils and types from the monorepo where it's developed.\n\n## Credits\n\nBrowser MCP was adapted from the [Playwright MCP server](https://github.com/microsoft/playwright-mcp) in order to automate the user's browser rather than creating new browser instances. This allows using the user's existing browser profile to use logged-in sessions and avoid bot detection mechanisms that commonly block automated browser use.",
      "npm_url": "https://www.npmjs.com/package/mcp",
      "npm_downloads": 17624,
      "keywords": [
        "browsermcp",
        "automation",
        "browser",
        "browser automation",
        "automation web",
        "automate web"
      ],
      "category": "browser-automation"
    },
    "Cooooper--KKJSBridge": {
      "owner": "Cooooper",
      "name": "KKJSBridge",
      "url": "https://github.com/Cooooper/KKJSBridge",
      "imageUrl": "/freedevtools/mcp/pfp/Cooooper.webp",
      "description": "KKJSBridge enhances the WKWebView experience by providing offline packages, enabling Ajax requests, and synchronizing cookies. It supports modular JSAPI management and allows control over Ajax hooks from both native and HTML5 frameworks.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2024-07-30T05:50:01Z",
      "readme_content": "# KKJSBridge\n\n‰∏ÄÁ´ôÂºèËß£ÂÜ≥ WKWebView ÊîØÊåÅÁ¶ªÁ∫øÂåÖÔºåAjax ËØ∑Ê±ÇÂíå Cookie ÂêåÊ≠•ÁöÑÈóÆÈ¢ò (Âü∫‰∫é Ajax Hook Âíå Cookie Hook)\n\n[Êõ¥ËØ¶ÁªÜÁöÑ‰ªãÁªç](http://karosli.com/2019/08/30/%E4%B8%80%E7%AB%99%E5%BC%8F%E8%A7%A3%E5%86%B3WKWebView%E5%90%84%E7%B1%BB%E9%97%AE%E9%A2%98/)\n\n## KKJSBridge ÊîØÊåÅÁöÑÂäüËÉΩ\n\n- Âü∫‰∫é MessageHandler Êê≠Âª∫ÈÄö‰ø°Â±Ç\n\n- ÊîØÊåÅÊ®°ÂùóÂåñÁöÑÁÆ°ÁêÜ JSAPI\n\n- ÊîØÊåÅÊ®°ÂùóÂÖ±‰∫´‰∏ä‰∏ãÊñá‰ø°ÊÅØ\n\n- ÊîØÊåÅÊ®°ÂùóÊ∂àÊÅØËΩ¨Âèë\n\n- ÊîØÊåÅÁ¶ªÁ∫øËµÑÊ∫ê\n\n- ÊîØÊåÅ ajax hook ÈÅøÂÖç body ‰∏¢Â§±\n\n- Native Âíå H5 ‰æßÈÉΩÂèØ‰ª•ÊéßÂà∂ ajax hook ÂºÄÂÖ≥\n\n- Cookie Áªü‰∏ÄÁÆ°ÁêÜ\n\n- WKWebView Â§çÁî®\n\n- ÂÖºÂÆπ WebViewJavascriptBridge\n\n\n\n## Demo\n\nÊ®°ÂùóÂåñË∞ÉÁî® JSAPI\n\n![Ê®°ÂùóÂåñË∞ÉÁî® JSAPI](https://github.com/karosLi/KKJSBridge/blob/master/Demo1.gif)\n\n\n\najax hook ÊºîÁ§∫\n\n![ajax hook ÊºîÁ§∫](https://github.com/karosLi/KKJSBridge/blob/master/Demo2.gif)\n\n\n\nÊ∑òÂÆù ajax hook ÊºîÁ§∫\n\n![Ê∑òÂÆù ajax hook ÊºîÁ§∫](https://github.com/karosLi/KKJSBridge/blob/master/Demo3.gif)\n\n\n\n\n\n## Áî®Ê≥ï\n\n‰ªéÂ§çÁî®Ê±†ÂèñÂá∫ÁºìÂ≠òÁöÑ WKWebViewÔºåÂπ∂ÂºÄÂêØ ajax hook\n\n```objectivec\n+ (void)load {\n    __block id observer = [[NSNotificationCenter defaultCenter] addObserverForName:UIApplicationDidFinishLaunchingNotification object:nil queue:nil usingBlock:^(NSNotification * _Nonnull note) {\n        [self prepareWebView];\n        [[NSNotificationCenter defaultCenter] removeObserver:observer];\n    }];\n}\n\n+ (void)prepareWebView {\n    // È¢ÑÂÖàÁºìÂ≠ò‰∏Ä‰∏™ webView\n    [KKWebView configCustomUAWithType:KKWebViewConfigUATypeAppend UAString:@\"KKJSBridge/1.0.0\"];\n    [[KKWebViewPool sharedInstance] enqueueWebViewWithClass:KKWebView.class];\n}\n\n- (void)dealloc {\n    // ÂõûÊî∂Âà∞Â§çÁî®Ê±†\n    [[KKWebViewPool sharedInstance] enqueueWebView:self.webView];\n}\n\n- (void)commonInit {\n    _webView = [[KKWebViewPool sharedInstance] dequeueWebViewWithClass:KKWebView.class webViewHolder:self];\n    _webView.configuration.allowsInlineMediaPlayback = YES;\n    _webView.configuration.preferences.minimumFontSize = 12;\n    _webView.hybirdDelegate = self;\n    _jsBridgeEngine = [KKJSBridgeEngine bridgeForWebView:self.webView];\n    _jsBridgeEngine.config.enableAjaxHook = YES;\n\n    [self registerModule];\n}\n```\n\nÊ≥®ÂÜåÊ®°Âùó\n\n```objectivec\n- (void)registerModule {\n ModuleContext *context = [ModuleContext new];\n context.vc = self;\n context.scrollView = self.webView.scrollView;\n context.name = @\"‰∏ä‰∏ãÊñá\";\n // Ê≥®ÂÜå ÈªòËÆ§Ê®°Âùó\n [self.jsBridgeEngine.moduleRegister registerModuleClass:ModuleDefault.class];\n // Ê≥®ÂÜå Ê®°ÂùóA\n [self.jsBridgeEngine.moduleRegister registerModuleClass:ModuleA.class];\n // Ê≥®ÂÜå Ê®°ÂùóB Âπ∂Â∏¶ÂÖ•‰∏ä‰∏ãÊñá\n [self.jsBridgeEngine.moduleRegister registerModuleClass:ModuleB.class withContext:context];\n // Ê≥®ÂÜå Ê®°ÂùóC\n [self.jsBridgeEngine.moduleRegister registerModuleClass:ModuleC.class];\n}\n```\n\nÊ®°ÂùóÂÆö‰πâ\n\n```objectivec\n@interface ModuleB()<KKJSBridgeModule>\n\n@property (nonatomic, weak) ModuleContext *context;\n\n@end\n\n@implementation ModuleB\n\n// Ê®°ÂùóÂêçÁß∞\n+ (nonnull NSString *)moduleName {\n    return @\"b\";\n}\n\n// Âçï‰æãÊ®°Âùó\n+ (BOOL)isSingleton {\n    return YES;\n}\n\n// Ê®°ÂùóÂàùÂßãÂåñÊñπÊ≥ïÔºåÊîØÊåÅ‰∏ä‰∏ãÊñáÂ∏¶ÂÖ•\n- (instancetype)initWithEngine:(KKJSBridgeEngine *)engine context:(id)context {\n    if (self = [super init]) {\n        _context = context;\n        NSLog(@\"ModuleB ÂàùÂßãÂåñÂπ∂Â∏¶‰∏ä %@\", self.context.name);\n    }\n\n    return self;\n}\n\n// Ê®°ÂùóÊèê‰æõÁöÑÊñπÊ≥ï\n- (void)callToGetVCTitle:(KKJSBridgeEngine *)engine params:(NSDictionary *)params responseCallback:(void (^)(NSDictionary *responseData))responseCallback {\n    responseCallback ? responseCallback(@{@\"title\": self.context.vc.navigationItem.title ? self.context.vc.navigationItem.title : @\"\"}) : nil;\n}\n```\n\nJS ‰æßË∞ÉÁî®ÊñπÂºè\n\n```javascript\nwindow.KKJSBridge.call('b', 'callToGetVCTitle', {}, function(res) {\n    console.log('receive vc titleÔºö', res.title);\n});\n```\n\n## TODO\n\n- [ ] Fetch hook„ÄÇ ËôΩÁÑ∂Áé∞Âú®Â§ßÂ§öÊï∞ H5 È°µÈù¢ÁöÑÂºÇÊ≠•ËØ∑Ê±ÇÈÉΩÊòØÂü∫‰∫é ajax ÂÆûÁé∞ÁöÑÔºåÈöèÁùÄ Fetch ÁöÑÊÖ¢ÊÖ¢ÊôÆÂèäÔºåÂêéÈù¢‰πü‰ºöÂ§öËµ∑Êù•„ÄÇ\n\n## ÂèÇËÄÉ\n\n- [Ajax-hook](https://github.com/wendux/Ajax-hook)\n\n- [HybridPageKit](https://github.com/dequan1331/HybridPageKit)\n\n- [kerkee_ios](https://github.com/kercer/kerkee_ios)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "wkwebview",
        "kkjsbridge",
        "browser",
        "browser automation",
        "automation web",
        "wkwebview experience"
      ],
      "category": "browser-automation"
    },
    "Dbillionaer--browser-tools-mcp": {
      "owner": "Dbillionaer",
      "name": "browser-tools-mcp",
      "url": "https://github.com/Dbillionaer/browser-tools-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Dbillionaer.webp",
      "description": "Enable AI applications to capture and analyze browser data through a Chrome extension, facilitating browser monitoring and interaction. Conduct audits for accessibility, performance, SEO, and best practices directly from the development environment.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-04-11T03:48:36Z",
      "readme_content": "# BrowserTools MCP\n\n> Make your AI tools 10x more aware and capable of interacting with your browser\n\nThis application is a powerful browser monitoring and interaction tool that enables AI-powered applications via Anthropic's Model Context Protocol (MCP) to capture and analyze browser data through a Chrome extension.\n\nRead our [docs](https://browsertools.agentdesk.ai/) for the full installation, quickstart and contribution guides.\n\n## Roadmap\n\nCheck out our project roadmap here: [Github Roadmap / Project Board](https://github.com/orgs/AgentDeskAI/projects/1/views/1)\n\n## Updates\n\nv1.2.0 is out! Here's a quick breakdown of the update:\n- You can now enable \"Allow Auto-Paste into Cursor\" within the DevTools panel. Screenshots will be automatically pasted into Cursor (just make sure to focus/click into the Agent input field in Cursor, otherwise it won't work!)\n- Integrated a suite of SEO, performance, accessibility, and best practice analysis tools via Lighthouse\n- Implemented a NextJS specific prompt used to improve SEO for a NextJS application\n- Added Debugger Mode as a tool which executes all debugging tools in a particular sequence, along with a prompt to improve reasoning\n- Added Audit Mode as a tool to execute all auditing tools in a particular sequence\n- Resolved Windows connectivity issues\n- Improved networking between BrowserTools server, extension and MCP server with host/port auto-discovery, auto-reconnect, and graceful shutdown mechanisms\n- Added ability to more easily exit out of the Browser Tools server with Ctrl+C\n\n## Quickstart Guide\n\nThere are three components to run this MCP tool:\n\n1. Install our chrome extension from here: [v1.2.0 BrowserToolsMCP Chrome Extension](https://github.com/AgentDeskAI/browser-tools-mcp/releases/download/v1.2.0/BrowserTools-1.2.0-extension.zip)\n2. Install the MCP server from this command within your IDE: `npx @agentdeskai/browser-tools-mcp@latest`\n3. Open a new terminal and run this command: `npx @agentdeskai/browser-tools-server@latest`\n\n* Different IDEs have different configs but this command is generally a good starting point; please reference your IDEs docs for the proper config setup\n\nIMPORTANT TIP - there are two servers you need to install. There's...\n- browser-tools-server (local nodejs server that's a middleware for gathering logs)\nand\n- browser-tools-mcp (MCP server that you install into your IDE that communicates w/ the extension + browser-tools-server)\n\n`npx @agentdeskai/browser-tools-mcp@latest` is what you put into your IDE\n`npx @agentdeskai/browser-tools-server@latest` is what you run in a new terminal window\n\nAfter those three steps, open up your chrome dev tools and then the BrowserToolsMCP panel.\n\nIf you're still having issues try these steps:\n- Quit / close down your browser. Not just the window but all of Chrome itself. \n- Restart the local node server (browser-tools-server)\n- Make sure you only have ONE instance of chrome dev tools panel open\n\nAfter that, it should work but if it doesn't let me know and I can share some more steps to gather logs/info about the issue!\n\nIf you have any questions or issues, feel free to open an issue ticket! And if you have any ideas to make this better, feel free to reach out or open an issue ticket with an enhancement tag or reach out to me at [@tedx_ai on x](https://x.com/tedx_ai)\n\n## Full Update Notes:\n\nCoding agents like Cursor can run these audits against the current page seamlessly. By leveraging Puppeteer and the Lighthouse npm library, BrowserTools MCP can now:\n\n- Evaluate pages for WCAG compliance\n- Identify performance bottlenecks\n- Flag on-page SEO issues\n- Check adherence to web development best practices\n- Review NextJS specific issues with SEO\n\n...all without leaving your IDE üéâ\n\n---\n\n## üîë Key Additions\n\n| Audit Type         | Description                                                                                                                              |\n| ------------------ | ---------------------------------------------------------------------------------------------------------------------------------------- |\n| **Accessibility**  | WCAG-compliant checks for color contrast, missing alt text, keyboard navigation traps, ARIA attributes, and more.                        |\n| **Performance**    | Lighthouse-driven analysis of render-blocking resources, excessive DOM size, unoptimized images, and other factors affecting page speed. |\n| **SEO**            | Evaluates on-page SEO factors (like metadata, headings, and link structure) and suggests improvements for better search visibility.      |\n| **Best Practices** | Checks for general best practices in web development.                                                                                    |\n| **NextJS Audit**   | Injects a prompt used to perform a NextJS audit.                                                                                         |\n| **Audit Mode**     | Runs all auditing tools in a sequence.                                                                                                   |\n| **Debugger Mode**  | Runs all debugging tools in a sequence.                                                                                                  |\n\n---\n\n## üõ†Ô∏è Using Audit Tools\n\n### ‚úÖ **Before You Start**\n\nEnsure you have:\n\n- An **active tab** in your browser\n- The **BrowserTools extension enabled**\n\n### ‚ñ∂Ô∏è **Running Audits**\n\n**Headless Browser Automation**:  \n Puppeteer automates a headless Chrome instance to load the page and collect audit data, ensuring accurate results even for SPAs or content loaded via JavaScript.\n\nThe headless browser instance remains active for **60 seconds** after the last audit call to efficiently handle consecutive audit requests.\n\n**Structured Results**:  \n Each audit returns results in a structured JSON format, including overall scores and detailed issue lists. This makes it easy for MCP-compatible clients to interpret the findings and present actionable insights.\n\nThe MCP server provides tools to run audits on the current page. Here are example queries you can use to trigger them:\n\n#### Accessibility Audit (`runAccessibilityAudit`)\n\nEnsures the page meets accessibility standards like WCAG.\n\n> **Example Queries:**\n>\n> - \"Are there any accessibility issues on this page?\"\n> - \"Run an accessibility audit.\"\n> - \"Check if this page meets WCAG standards.\"\n\n#### Performance Audit (`runPerformanceAudit`)\n\nIdentifies performance bottlenecks and loading issues.\n\n> **Example Queries:**\n>\n> - \"Why is this page loading so slowly?\"\n> - \"Check the performance of this page.\"\n> - \"Run a performance audit.\"\n\n#### SEO Audit (`runSEOAudit`)\n\nEvaluates how well the page is optimized for search engines.\n\n> **Example Queries:**\n>\n> - \"How can I improve SEO for this page?\"\n> - \"Run an SEO audit.\"\n> - \"Check SEO on this page.\"\n\n#### Best Practices Audit (`runBestPracticesAudit`)\n\nChecks for general best practices in web development.\n\n> **Example Queries:**\n>\n> - \"Run a best practices audit.\"\n> - \"Check best practices on this page.\"\n> - \"Are there any best practices issues on this page?\"\n\n#### Audit Mode (`runAuditMode`)\n\nRuns all audits in a particular sequence. Will run a NextJS audit if the framework is detected.\n\n> **Example Queries:**\n>\n> - \"Run audit mode.\"\n> - \"Enter audit mode.\"\n\n#### NextJS Audits (`runNextJSAudit`)\n\nChecks for best practices and SEO improvements for NextJS applications\n\n> **Example Queries:**\n>\n> - \"Run a NextJS audit.\"\n> - \"Run a NextJS audit, I'm using app router.\"\n> - \"Run a NextJS audit, I'm using page router.\"\n\n#### Debugger Mode (`runDebuggerMode`)\n\nRuns all debugging tools in a particular sequence\n\n> **Example Queries:**\n>\n> - \"Enter debugger mode.\"\n\n## Architecture\n\nThere are three core components all used to capture and analyze browser data:\n\n1. **Chrome Extension**: A browser extension that captures screenshots, console logs, network activity and DOM elements.\n2. **Node Server**: An intermediary server that facilitates communication between the Chrome extension and any instance of an MCP server.\n3. **MCP Server**: A Model Context Protocol server that provides standardized tools for AI clients to interact with the browser.\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  MCP Client ‚îÇ ‚îÄ‚îÄ‚ñ∫ ‚îÇ  MCP Server  ‚îÇ ‚îÄ‚îÄ‚ñ∫ ‚îÇ  Node Server  ‚îÇ ‚îÄ‚îÄ‚ñ∫ ‚îÇ   Chrome    ‚îÇ\n‚îÇ  (e.g.      ‚îÇ ‚óÑ‚îÄ‚îÄ ‚îÇ  (Protocol   ‚îÇ ‚óÑ‚îÄ‚îÄ ‚îÇ (Middleware)  ‚îÇ ‚óÑ‚îÄ‚îÄ ‚îÇ  Extension  ‚îÇ\n‚îÇ   Cursor)   ‚îÇ     ‚îÇ   Handler)   ‚îÇ     ‚îÇ               ‚îÇ     ‚îÇ             ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\nModel Context Protocol (MCP) is a capability supported by Anthropic AI models that\nallow you to create custom tools for any compatible client. MCP clients like Claude\nDesktop, Cursor, Cline or Zed can run an MCP server which \"teaches\" these clients\nabout a new tool that they can use.\n\nThese tools can call out to external APIs but in our case, **all logs are stored locally** on your machine and NEVER sent out to any third-party service or API. BrowserTools MCP runs a local instance of a NodeJS API server which communicates with the BrowserTools Chrome Extension.\n\nAll consumers of the BrowserTools MCP Server interface with the same NodeJS API and Chrome extension.\n\n#### Chrome Extension\n\n- Monitors XHR requests/responses and console logs\n- Tracks selected DOM elements\n- Sends all logs and current element to the BrowserTools Connector\n- Connects to Websocket server to capture/send screenshots\n- Allows user to configure token/truncation limits + screenshot folder path\n\n#### Node Server\n\n- Acts as middleware between the Chrome extension and MCP server\n- Receives logs and currently selected element from Chrome extension\n- Processes requests from MCP server to capture logs, screenshot or current element\n- Sends Websocket command to the Chrome extension for capturing a screenshot\n- Intelligently truncates strings and # of duplicate objects in logs to avoid token limits\n- Removes cookies and sensitive headers to avoid sending to LLMs in MCP clients\n\n#### MCP Server\n\n- Implements the Model Context Protocol\n- Provides standardized tools for AI clients\n- Compatible with various MCP clients (Cursor, Cline, Zed, Claude Desktop, etc.)\n\n## Installation\n\nInstallation steps can be found in our documentation:\n\n- [BrowserTools MCP Docs](https://browsertools.agentdesk.ai/)\n\n## Usage\n\nOnce installed and configured, the system allows any compatible MCP client to:\n\n- Monitor browser console output\n- Capture network traffic\n- Take screenshots\n- Analyze selected elements\n- Wipe logs stored in our MCP server\n- Run accessibility, performance, SEO, and best practices audits\n\n## Compatibility\n\n- Works with any MCP-compatible client\n- Primarily designed for Cursor IDE integration\n- Supports other AI editors and MCP clients\n",
      "npm_url": "https://www.npmjs.com/package/browser-tools-mcp",
      "npm_downloads": 3555,
      "keywords": [
        "automation",
        "browser",
        "scraping",
        "browser automation",
        "automation web",
        "browser tools"
      ],
      "category": "browser-automation"
    },
    "JigsawStack--jigsawstack-mcp-server": {
      "owner": "JigsawStack",
      "name": "jigsawstack-mcp-server",
      "url": "https://github.com/JigsawStack/jigsawstack-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/JigsawStack.webp",
      "description": "Scrape any website to obtain consistent, structured data quickly without the need for writing CSS selector code. Supports API integration for data extraction through a straightforward interface.",
      "stars": 23,
      "forks": 5,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-08-22T15:15:38Z",
      "readme_content": "# JigsawStack MCP Server\n\n## Introduction\nJigsawStack MCP (Model Context Protocol) Server is a versatile platform designed to facilitate the integration and management of various tools. Each directory within the server represents a distinct tool that can be utilized for different purposes by an LLM. The server is built using Node.js and Express.js, and each tool is encapsulated within its own directory, making it easy to add, remove, or update tools without affecting the overall system.\n\nStart by obtaining your JIGSAWSTACK_API_KEY from the our website. You will need this key to access the JigsawStack services. You can get your API key by signing up for a free account at [JigsawStack](https://jigsawstack.com/dashboard).\n\nYou can also install our MCPs via [Smithery AI](https://smithery.ai/?q=jigsawstack)\n\n## Installation\n\n### Prerequisites\n- Ensure you have `git` installed on your system.\n- Ensure you have `node.js` and `npm` installed.\n- Alternatively, you can use `yarn` instead of `npm`. as a package manager.\n\n### Steps to Setup the repository:\n1. Clone the repository:\n    ```sh\n    git clone https://github.com/yourusername/jigsawstack-mcp-server.git\n    ```\n2. Navigate to the project directory:\n    ```sh\n    cd jigsawstack-mcp-server\n    ```\n3. Install the necessary dependencies:\n    ```sh\n    npm install or yarn install\n    ```\n\n## What is MCP?\nMCP stands for Model Context Protocol. It is a framework that allows users to integrate LLMs and manage various tools and components exposing external data in a modular fashion. Here each tool is encapsulated within its own directory, making it easy to add, remove, or update tools without affecting the overall system.\n\n## Using JigsawStack MCP Server\nThere are four tools available in the MCP Server. Each tool is contained within its own directory and has its own set of instructions for use.\n\n### Running a tool\nTo run a tool,\n1. cd into the tool directory and follow the instructions.\n2. Export the JIGSAWSTACK_API_KEY environment variable with your JIGSAWSTACK API key.\n    ```sh\n    export JIGSAWSTACK_API_KEY=your_api_key\n    ```\n3. Start the server:\n    ```sh\n    npm start\n    ```\n4. Access the server through your web browser at `http://localhost:3000`.\n\n### Directory Structure\n- `/ai-web-scraper`: Let AI scrape the internet for you!\n- `/ai-web-search`: Search powered by AI capable of handling complex queries.\n- `/image-generation`: Generate images using prompts, to receive a base64 string of the image.\n\n## Contact\nFor any questions or issues, please contact us at hello@jigsawstack.com.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "scraping",
        "jigsawstack",
        "scrape",
        "browser automation",
        "automation web",
        "formats jigsawstack"
      ],
      "category": "browser-automation"
    },
    "JustasMonkev--mcp-accessibility-scanner": {
      "owner": "JustasMonkev",
      "name": "mcp-accessibility-scanner",
      "url": "https://github.com/JustasMonkev/mcp-accessibility-scanner",
      "imageUrl": "/freedevtools/mcp/pfp/JustasMonkev.webp",
      "description": "Automated web accessibility scanning using Playwright and Axe-core, enabling WCAG compliance checks and annotated screenshot capture. Generates detailed accessibility reports and interacts with web pages through browser automation.",
      "stars": 17,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-01T15:40:11Z",
      "readme_content": "\n# MCP Accessibility Scanner üîç\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/justasmonkev-mcp-accessibility-scanner-badge.png)](https://mseep.ai/app/justasmonkev-mcp-accessibility-scanner)\n\nA Model Context Protocol (MCP) server that provides automated web accessibility scanning using Playwright and Axe-core. This server enables LLMs to perform WCAG compliance checks, capture annotated screenshots, and generate detailed accessibility reports.\nA powerful Model Context Protocol (MCP) server that provides automated web accessibility scanning and browser automation using Playwright and Axe-core. This server enables LLMs to perform WCAG compliance checks, interact with web pages, manage persistent browser sessions, and generate detailed accessibility reports with visual annotations.\n\n## Features\n\n### Accessibility Scanning\n‚úÖ Full WCAG 2.0/2.1/2.2 compliance checking (A, AA, AAA levels)  \nüñºÔ∏è Automatic screenshot capture with violation highlighting  \nüìÑ Detailed JSON reports with remediation guidance  \nüéØ Support for specific violation categories (color contrast, ARIA, forms, keyboard navigation, etc.)  \n\n### Browser Automation\nüñ±Ô∏è Click, hover, and drag elements using accessibility snapshots  \n‚å®Ô∏è Type text and handle keyboard inputs  \nüîç Capture page snapshots to discover all interactive elements  \nüì∏ Take screenshots and save PDFs  \nüéØ Support for both element-based and coordinate-based interactions  \n\n### Advanced Features\nüìë Tab management for multi-page workflows  \nüåê Monitor console messages and network requests  \n‚è±Ô∏è Wait for dynamic content to load  \nüìÅ Handle file uploads and browser dialogs  \nüîÑ Navigate through browser history\n\n## Installation\n\nYou can install the package using any of these methods:\n\nUsing npm:\n```bash\nnpm install -g mcp-accessibility-scanner\n```\n\n### Installation in VS Code\n\nInstall the Accessibility Scanner in VS Code using the VS Code CLI:\n\nFor VS Code:\n```bash\ncode --add-mcp '{\"name\":\"accessibility-scanner\",\"command\":\"npx\",\"args\":[\"mcp-accessibility-scanner\"]}'\n```\n\nFor VS Code Insiders:\n```bash\ncode-insiders --add-mcp '{\"name\":\"accessibility-scanner\",\"command\":\"npx\",\"args\":[\"mcp-accessibility-scanner\"]}'\n```\n\n## Configuration\n\nHere's the Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"accessibility-scanner\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-accessibility-scanner\"]\n    }\n  }\n}\n```\n\n### Advanced Configuration\n\nYou can pass a configuration file to customize Playwright behavior:\n\n```json\n{\n  \"mcpServers\": {\n    \"accessibility-scanner\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-accessibility-scanner\", \"--config\", \"/path/to/config.json\"]\n    }\n  }\n}\n```\n\n#### Configuration Options\n\nCreate a `config.json` file with the following options:\n\n```json\n{\n  \"browser\": {\n    \"browserName\": \"chromium\",\n    \"launchOptions\": {\n      \"headless\": true,\n      \"channel\": \"chrome\"\n    }\n  },\n  \"timeouts\": {\n    \"navigationTimeout\": 60000,\n    \"defaultTimeout\": 5000\n  },\n  \"network\": {\n    \"allowedOrigins\": [\"example.com\", \"trusted-site.com\"],\n    \"blockedOrigins\": [\"ads.example.com\"]\n  }\n}\n```\n\n**Available Options:**\n\n- `browser.browserName`: Browser to use (`chromium`, `firefox`, `webkit`)\n- `browser.launchOptions.headless`: Run browser in headless mode (default: `true` on Linux without display, `false` otherwise)\n- `browser.launchOptions.channel`: Browser channel (`chrome`, `chrome-beta`, `msedge`, etc.)\n- `timeouts.navigationTimeout`: Maximum time for page navigation in milliseconds (default: `60000`)\n- `timeouts.defaultTimeout`: Default timeout for Playwright operations in milliseconds (default: `5000`)\n- `network.allowedOrigins`: List of origins to allow (blocks all others if specified)\n- `network.blockedOrigins`: List of origins to block\n\n## Available Tools\n\nThe MCP server provides comprehensive browser automation and accessibility scanning tools:\n\n### Core Accessibility Tool\n\n#### `scan_page`\nPerforms a comprehensive accessibility scan on the current page using Axe-core.\n\n**Parameters:**\n- `violationsTag`: Array of WCAG/violation tags to check\n\n**Supported Violation Tags:**\n- WCAG standards: `wcag2a`, `wcag2aa`, `wcag2aaa`, `wcag21a`, `wcag21aa`, `wcag21aaa`, `wcag22a`, `wcag22aa`, `wcag22aaa`\n- Section 508: `section508`\n- Categories: `cat.aria`, `cat.color`, `cat.forms`, `cat.keyboard`, `cat.language`, `cat.name-role-value`, `cat.parsing`, `cat.semantics`, `cat.sensory-and-visual-cues`, `cat.structure`, `cat.tables`, `cat.text-alternatives`, `cat.time-and-media`\n\n### Navigation Tools\n\n#### `browser_navigate`\nNavigate to a URL.\n- Parameters: `url` (string)\n\n#### `browser_navigate_back`\nGo back to the previous page.\n\n#### `browser_navigate_forward`\nGo forward to the next page.\n\n### Page Interaction Tools\n\n#### `browser_snapshot`\nCapture accessibility snapshot of the current page (better than screenshot for analysis).\n\n#### `browser_click`\nPerform click on a web page element.\n- Parameters: `element` (description), `ref` (element reference), `doubleClick` (optional)\n\n#### `browser_type`\nType text into editable element.\n- Parameters: `element`, `ref`, `text`, `submit` (optional), `slowly` (optional)\n\n#### `browser_hover`\nHover over element on page.\n- Parameters: `element`, `ref`\n\n#### `browser_drag`\nPerform drag and drop between two elements.\n- Parameters: `startElement`, `startRef`, `endElement`, `endRef`\n\n#### `browser_select_option`\nSelect an option in a dropdown.\n- Parameters: `element`, `ref`, `values` (array)\n\n#### `browser_press_key`\nPress a key on the keyboard.\n- Parameters: `key` (e.g., 'ArrowLeft' or 'a')\n\n### Screenshot & Visual Tools\n\n#### `browser_take_screenshot`\nTake a screenshot of the current page.\n- Parameters: `raw` (optional), `filename` (optional), `element` (optional), `ref` (optional)\n\n#### `browser_pdf_save`\nSave page as PDF.\n- Parameters: `filename` (optional, defaults to `page-{timestamp}.pdf`)\n\n### Browser Management\n\n#### `browser_close`\nClose the page.\n\n#### `browser_resize`\nResize the browser window.\n- Parameters: `width`, `height`\n\n### Tab Management\n\n#### `browser_tab_list`\nList all open browser tabs.\n\n#### `browser_tab_new`\nOpen a new tab.\n- Parameters: `url` (optional)\n\n#### `browser_tab_select`\nSelect a tab by index.\n- Parameters: `index`\n\n#### `browser_tab_close`\nClose a tab.\n- Parameters: `index` (optional, closes current tab if not provided)\n\n### Information & Monitoring Tools\n\n#### `browser_console_messages`\nReturns all console messages from the page.\n\n#### `browser_network_requests`\nReturns all network requests since loading the page.\n\n### Utility Tools\n\n#### `browser_wait_for`\nWait for text to appear/disappear or time to pass.\n- Parameters: `time` (optional), `text` (optional), `textGone` (optional)\n\n#### `browser_handle_dialog`\nHandle browser dialogs (alerts, confirms, prompts).\n- Parameters: `accept` (boolean), `promptText` (optional)\n\n#### `browser_file_upload`\nUpload files to the page.\n- Parameters: `paths` (array of absolute file paths)\n\n### Vision Mode Tools (Coordinate-based Interaction)\n\n#### `browser_screen_capture`\nTake a screenshot for coordinate-based interaction.\n\n#### `browser_screen_move_mouse`\nMove mouse to specific coordinates.\n- Parameters: `element`, `x`, `y`\n\n#### `browser_screen_click`\nClick at specific coordinates.\n- Parameters: `element`, `x`, `y`\n\n#### `browser_screen_drag`\nDrag from one coordinate to another.\n- Parameters: `element`, `startX`, `startY`, `endX`, `endY`\n\n#### `browser_screen_type`\nType text (coordinate-independent).\n- Parameters: `text`, `submit` (optional)\n\n## Usage Examples\n\n### Basic Accessibility Scan\n```\n1. Navigate to example.com using browser_navigate\n2. Run scan_page with violationsTag: [\"wcag21aa\"]\n```\n\n### Color Contrast Check\n```\n1. Use browser_navigate to go to example.com\n2. Run scan_page with violationsTag: [\"cat.color\"]\n```\n\n### Multi-step Workflow\n```\n1. Navigate to example.com with browser_navigate\n2. Take a browser_snapshot to see available elements\n3. Click the \"Sign In\" button using browser_click\n4. Type \"user@example.com\" using browser_type\n5. Run scan_page on the login page\n6. Take a browser_take_screenshot to capture the final state\n```\n\n### Page Analysis\n```\n1. Navigate to example.com\n2. Use browser_snapshot to capture all interactive elements\n3. Review console messages with browser_console_messages\n4. Check network activity with browser_network_requests\n```\n\n### Tab Management\n```\n1. Open a new tab with browser_tab_new\n2. Navigate to different pages in each tab\n3. Switch between tabs using browser_tab_select\n4. List all tabs with browser_tab_list\n```\n\n### Waiting for Dynamic Content\n```\n1. Navigate to a page\n2. Use browser_wait_for to wait for specific text to appear\n3. Interact with the dynamically loaded content\n```\n\n**Note:** Most interaction tools require element references from browser_snapshot. Always capture a snapshot before attempting to interact with page elements.\n\n## Development\n\nClone and set up the project:\n```bash\ngit clone https://github.com/JustasMonkev/mcp-accessibility-scanner.git\ncd mcp-accessibility-scanner\nnpm install\n```\n\n## License\n\nMIT\n\n",
      "npm_url": "https://www.npmjs.com/package/mcp-accessibility-scanner",
      "npm_downloads": 1851,
      "keywords": [
        "accessibility",
        "automation",
        "scraping",
        "web accessibility",
        "browser automation",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "Muzzera--web-ui": {
      "owner": "Muzzera",
      "name": "web-ui",
      "url": "https://github.com/Muzzera/web-ui",
      "imageUrl": "/freedevtools/mcp/pfp/Muzzera.webp",
      "description": "Interact seamlessly with AI agents via a user-friendly interface, enabling the use of various Large Language Models while maintaining persistent browser sessions for productive tasks. The server supports high-definition screen recording and custom browser functionality without requiring re-authentication.",
      "stars": 1,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-03-29T00:52:09Z",
      "readme_content": "<br/>\n\n[![GitHub stars](https://img.shields.io/github/stars/browser-use/web-ui?style=social)](https://github.com/browser-use/web-ui/stargazers)\n[![Discord](https://img.shields.io/discord/1303749220842340412?color=7289DA&label=Discord&logo=discord&logoColor=white)](https://link.browser-use.com/discord)\n[![Documentation](https://img.shields.io/badge/Documentation-üìï-blue)](https://docs.browser-use.com)\n[![WarmShao](https://img.shields.io/twitter/follow/warmshao?style=social)](https://x.com/warmshao)\n\nThis project builds upon the foundation of the [browser-use](https://github.com/browser-use/browser-use), which is designed to make websites accessible for AI agents.\n\nWe would like to officially thank [WarmShao](https://github.com/warmshao) for his contribution to this project.\n\n**WebUI:** is built on Gradio and supports a most of `browser-use` functionalities. This UI is designed to be user-friendly and enables easy interaction with the browser agent.\n\n**Expanded LLM Support:** We've integrated support for various Large Language Models (LLMs), including: Gemini, OpenAI, Azure OpenAI, Anthropic, DeepSeek, Ollama etc. And we plan to add support for even more models in the future.\n\n**Custom Browser Support:** You can use your own browser with our tool, eliminating the need to re-login to sites or deal with other authentication challenges. This feature also supports high-definition screen recording.\n\n**Persistent Browser Sessions:** You can choose to keep the browser window open between AI tasks, allowing you to see the complete history and state of AI interactions.\n\n<video src=\"https://github.com/user-attachments/assets/56bc7080-f2e3-4367-af22-6bf2245ff6cb\" controls=\"controls\">Your browser does not support playing this video!</video>\n\n## Installation Options\n\n### Option 1: Local Installation\n\nRead the [quickstart guide](https://docs.browser-use.com/quickstart#prepare-the-environment) or follow the steps below to get started.\n\n> Python 3.11 or higher is required.\n\nFirst, we recommend using [uv](https://docs.astral.sh/uv/) to setup the Python environment.\n\n```bash\nuv venv --python 3.11\n```\n\nand activate it with:\n\n```bash\nsource .venv/bin/activate\n```\n\nInstall the dependencies:\n\n```bash\nuv pip install -r requirements.txt\n```\n\nThen install playwright:\n\n```bash\nplaywright install\n```\n\n### Option 2: Docker Installation\n\n1. **Prerequisites:**\n   - Docker and Docker Compose installed on your system\n   - Git to clone the repository\n\n2. **Setup:**\n   ```bash\n   # Clone the repository\n   git clone https://github.com/browser-use/web-ui.git\n   cd web-ui\n\n   # Copy and configure environment variables\n   cp .env.example .env\n   # Edit .env with your preferred text editor and add your API keys\n   ```\n\n3. **Run with Docker:**\n   ```bash\n   # Build and start the container with default settings (browser closes after AI tasks)\n   docker compose up --build\n\n   # Or run with persistent browser (browser stays open between AI tasks)\n   CHROME_PERSISTENT_SESSION=true docker compose up --build\n   ```\n\n4. **Access the Application:**\n   - WebUI: `http://localhost:7788`\n   - VNC Viewer (to see browser interactions): `http://localhost:6080/vnc.html`\n   \n   Default VNC password is \"vncpassword\". You can change it by setting the `VNC_PASSWORD` environment variable in your `.env` file.\n\n\n## Usage\n\n### Local Setup\n1.  Copy `.env.example` to `.env` and set your environment variables, including API keys for the LLM. `cp .env.example .env`\n2.  **Run the WebUI:**\n    ```bash\n    python webui.py --ip 127.0.0.1 --port 7788\n    ```\n4. WebUI options:\n   - `--ip`: The IP address to bind the WebUI to. Default is `127.0.0.1`.\n   - `--port`: The port to bind the WebUI to. Default is `7788`.\n   - `--theme`: The theme for the user interface. Default is `Ocean`.\n     - **Default**: The standard theme with a balanced design.\n     - **Soft**: A gentle, muted color scheme for a relaxed viewing experience.\n     - **Monochrome**: A grayscale theme with minimal color for simplicity and focus.\n     - **Glass**: A sleek, semi-transparent design for a modern appearance.\n     - **Origin**: A classic, retro-inspired theme for a nostalgic feel.\n     - **Citrus**: A vibrant, citrus-inspired palette with bright and fresh colors.\n     - **Ocean** (default): A blue, ocean-inspired theme providing a calming effect.\n   - `--dark-mode`: Enables dark mode for the user interface.\n3.  **Access the WebUI:** Open your web browser and navigate to `http://127.0.0.1:7788`.\n4.  **Using Your Own Browser(Optional):**\n    - Set `CHROME_PATH` to the executable path of your browser and `CHROME_USER_DATA` to the user data directory of your browser. Leave `CHROME_USER_DATA` empty if you want to use local user data.\n      - Windows\n        ```env\n         CHROME_PATH=\"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\"\n         CHROME_USER_DATA=\"C:\\Users\\YourUsername\\AppData\\Local\\Google\\Chrome\\User Data\"\n        ```\n        > Note: Replace `YourUsername` with your actual Windows username for Windows systems.\n      - Mac\n        ```env\n         CHROME_PATH=\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"\n         CHROME_USER_DATA=\"/Users/YourUsername/Library/Application Support/Google/Chrome\"\n        ```\n    - Close all Chrome windows\n    - Open the WebUI in a non-Chrome browser, such as Firefox or Edge. This is important because the persistent browser context will use the Chrome data when running the agent.\n    - Check the \"Use Own Browser\" option within the Browser Settings.\n5. **Keep Browser Open(Optional):**\n    - Set `CHROME_PERSISTENT_SESSION=true` in the `.env` file.\n\n### Docker Setup\n1. **Environment Variables:**\n   - All configuration is done through the `.env` file\n   - Available environment variables:\n     ```\n     # LLM API Keys\n     OPENAI_API_KEY=your_key_here\n     ANTHROPIC_API_KEY=your_key_here\n     GOOGLE_API_KEY=your_key_here\n\n     # Browser Settings\n     CHROME_PERSISTENT_SESSION=true   # Set to true to keep browser open between AI tasks\n     RESOLUTION=1920x1080x24         # Custom resolution format: WIDTHxHEIGHTxDEPTH\n     RESOLUTION_WIDTH=1920           # Custom width in pixels\n     RESOLUTION_HEIGHT=1080          # Custom height in pixels\n\n     # VNC Settings\n     VNC_PASSWORD=your_vnc_password  # Optional, defaults to \"vncpassword\"\n     ```\n\n2. **Browser Persistence Modes:**\n   - **Default Mode (CHROME_PERSISTENT_SESSION=false):**\n     - Browser opens and closes with each AI task\n     - Clean state for each interaction\n     - Lower resource usage\n\n   - **Persistent Mode (CHROME_PERSISTENT_SESSION=true):**\n     - Browser stays open between AI tasks\n     - Maintains history and state\n     - Allows viewing previous AI interactions\n     - Set in `.env` file or via environment variable when starting container\n\n3. **Viewing Browser Interactions:**\n   - Access the noVNC viewer at `http://localhost:6080/vnc.html`\n   - Enter the VNC password (default: \"vncpassword\" or what you set in VNC_PASSWORD)\n   - You can now see all browser interactions in real-time\n\n4. **Container Management:**\n   ```bash\n   # Start with persistent browser\n   CHROME_PERSISTENT_SESSION=true docker compose up -d\n\n   # Start with default mode (browser closes after tasks)\n   docker compose up -d\n\n   # View logs\n   docker compose logs -f\n\n   # Stop the container\n   docker compose down\n   ```\n\n## Changelog\n- [x] **2025/01/26:** Thanks to @vvincent1234. Now browser-use-webui can combine with DeepSeek-r1 to engage in deep thinking!\n- [x] **2025/01/10:** Thanks to @casistack. Now we have Docker Setup option and also Support keep browser open between tasks.[Video tutorial demo](https://github.com/browser-use/web-ui/issues/1#issuecomment-2582511750).\n- [x] **2025/01/06:** Thanks to @richard-devbot. A New and Well-Designed WebUI is released. [Video tutorial demo](https://github.com/warmshao/browser-use-webui/issues/1#issuecomment-2573393113).",
      "npm_url": "https://www.npmjs.com/package/web-ui",
      "npm_downloads": 6569,
      "keywords": [
        "browser",
        "automation",
        "muzzera",
        "browser automation",
        "muzzera web",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "NON906--omniparser-autogui-mcp": {
      "owner": "NON906",
      "name": "omniparser-autogui-mcp",
      "url": "https://github.com/NON906/omniparser-autogui-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/NON906.webp",
      "description": "Analyzes the screen using OmniParser to automatically operate graphical user interfaces. It provides capabilities for interpreting visual content and executing GUI actions based on analysis.",
      "stars": 55,
      "forks": 10,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T00:52:32Z",
      "readme_content": "# omniparser-autogui-mcp\n\nÔºà[Êó•Êú¨Ë™ûÁâà„ÅØ„Åì„Å°„Çâ](README_ja.md)Ôºâ\n\nThis is an [MCP server](https://modelcontextprotocol.io/introduction) that analyzes the screen with [OmniParser](https://github.com/microsoft/OmniParser) and automatically operates the GUI.  \nConfirmed on Windows.\n\n## License notes\n\nThis is MIT license, but Excluding submodules and sub packages.  \nOmniParser's repository is CC-BY-4.0.  \nEach OmniParser model has a different license ([reference](https://github.com/microsoft/OmniParser?tab=readme-ov-file#model-weights-license)).\n\n## Installation\n\n1. Please do the following:\n\n```\ngit clone --recursive https://github.com/NON906/omniparser-autogui-mcp.git\ncd omniparser-autogui-mcp\nuv sync\nset OCR_LANG=en\nuv run download_models.py\n```\n\n(Other than Windows, use ``export`` instead of ``set``.)  \n(If you want ``langchain_example.py`` to work, ``uv sync --extra langchain`` instead.)\n\n2. Add this to your ``claude_desktop_config.json``:\n\n```claude_desktop_config.json\n{\n  \"mcpServers\": {\n    \"omniparser_autogui_mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"D:\\\\CLONED_PATH\\\\omniparser-autogui-mcp\",\n        \"run\",\n        \"omniparser-autogui-mcp\"\n      ],\n      \"env\": {\n        \"PYTHONIOENCODING\": \"utf-8\",\n        \"OCR_LANG\": \"en\"\n      }\n    }\n  }\n}\n```\n\n(Replace ``D:\\\\CLONED_PATH\\\\omniparser-autogui-mcp`` with the directory you cloned.)\n\n``env`` allows for the following additional configurations:\n\n- ``OMNI_PARSER_BACKEND_LOAD``  \nIf it does not work with other clients (such as [LibreChat](https://github.com/danny-avila/LibreChat)), specify ``1``.\n\n- ``TARGET_WINDOW_NAME``  \nIf you want to specify the window to operate, please specify the window name.  \nIf not specified, operates on the entire screen.\n\n- ``OMNI_PARSER_SERVER``  \nIf you want OmniParser processing to be done on another device, specify the server's address and port, such as ``127.0.0.1:8000``.  \nThe server can be started with ``uv run omniparserserver``.\n\n- ``SSE_HOST``, ``SSE_PORT``  \nIf specified, communication will be done via SSE instead of stdio.\n\n- ``SOM_MODEL_PATH``, ``CAPTION_MODEL_NAME``, ``CAPTION_MODEL_PATH``, ``OMNI_PARSER_DEVICE``, ``BOX_TRESHOLD``  \nThese are for OmniParser configuration.  \nUsually, they are not necessary.\n\n## Usage Examples\n\n- Search for \"MCP server\" in the on-screen browser.\n\netc.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "omniparser",
        "browser",
        "browser automation",
        "automation web",
        "omniparser autogui"
      ],
      "category": "browser-automation"
    },
    "Operative-Sh--web-eval-agent": {
      "owner": "Operative-Sh",
      "name": "web-eval-agent",
      "url": "https://github.com/Operative-Sh/web-eval-agent",
      "imageUrl": "/freedevtools/mcp/pfp/Operative-Sh.webp",
      "description": "An MCP server designed for debugging web applications by autonomously executing tasks and providing insights directly in the code editor, capturing network traffic and console errors for improved development efficiency.",
      "stars": 1191,
      "forks": 97,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-02T13:33:42Z",
      "readme_content": "# üöÄ operative.sh web-eval-agent MCP Server\n\n> *Let the coding agent debug itself, you've got better things to do.*\n\n\n\n\n\n## üî• Supercharge Your Debugging\n\n[operative.sh](https://www.operative.sh/mcp)'s MCP Server launches a browser-use powered agent to autonomously execute and debug web apps directly in your code editor.\n\n## ‚ö° Features\n\n- üåê **Navigate your webapp** using BrowserUse (2x faster with operative backend)\n- üìä **Capture network traffic** - requests are intelligently filtered and returned into the context window\n- üö® **Collect console errors** - captures logs & errors\n- ü§ñ **Autonomous debugging** - the Cursor agent calls the web QA agent mcp server to test if the code it wrote works as epected end-to-end.\n\n## üß∞ MCP Tool Reference\n\n| Tool | Purpose |\n|------|---------|\n| `web_eval_agent` | ü§ñ Automated UX evaluator that drives the browser, captures screenshots, console & network logs, and returns a rich UX report. |\n| `setup_browser_state` | üîí Opens an interactive (non-headless) browser so you can sign in once; the saved cookies/local-storage are reused by subsequent `web_eval_agent` runs. |\n\n**Key arguments**\n\n* `web_eval_agent`\n  * `url` **(required)** ‚Äì address of the running app (e.g. `http://localhost:3000`)\n  * `task` **(required)** ‚Äì natural-language description of what to test (\"run through the signup flow and note any UX issues\")\n  * `headless_browser` *(optional, default `false`)* ‚Äì set to `true` to hide the browser window\n\n* `setup_browser_state`\n  * `url` *(optional)* ‚Äì page to open first (handy to land directly on a login screen)\n\nYou can trigger these tools straight from your IDE chat, for example:\n\n```bash\nEvaluate my app at http://localhost:3000 ‚Äì run web_eval_agent with the task \"Try the full signup flow and report UX issues\".\n```\n\n## üèÅ Quick Start\n\n### Easy Setup with One-Click Integration\n1. [Get your API key (free)](https://www.operative.sh/mcp) - when you create your API key, you'll see:\n   - **\"Add to Cursor\"** button with a deeplink for instant Cursor installation\n   - **Prefilled Claude Code command** with your API key automatically included\n\n### Manual Setup (macOS/Linux)\n\n1. Pre-requisites (typically not needed):\n - brew: `/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"`\n - npm: (`brew install npm`)\n - jq: `brew install jq` \n2. Run the installer after [getting an api key (free)](https://www.operative.sh/mcp)\n   - Installs [playwright](https://github.com/microsoft/playwright) \n   - [Installs uv](https://astral.sh/)\n   - Inserts JSON into your code editor (Cursor/Cline/Windsurf) for you! \n```bash\ncurl -LSf https://operative.sh/install.sh -o install.sh && bash install.sh && rm install.sh\n```\n3. Visit your favorite IDE and restart to apply the changes\n4. Send a prompt in chat mode to call the web eval agent tool! e.g. \n```bash\nTest my app on http://localhost:3000. Use web-eval-agent.\n```\n\n## üõ†Ô∏è Manual Installation\n1. Get your API key at operative.sh/mcp\n2. [Install uv](https://docs.astral.sh/uv/#highlights)\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n3. Source environment variables after installing UV\n\nMac\n```\nsource ~/.zshrc\n```\n\nLinux \n```\nsource ~/.bashrc \n```\n4. Install playwright:\n\n```bash\nnpm install -g chromium playwright && uvx --with playwright playwright install --with-deps\n```\n5. Add below JSON to your relevant code editor with api key \n6. Restart your code editor\n   \n## üîÉ Updating \n- `uv cache clean`\n- refresh MCP server \n\n```json \n    \"web-eval-agent\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--refresh-package\",\n        \"webEvalAgent\",\n        \"--from\",\n        \"git+https://github.com/Operative-Sh/web-eval-agent.git\",\n        \"webEvalAgent\"\n      ],\n      \"env\": {\n        \"OPERATIVE_API_KEY\": \"<YOUR_KEY>\"\n      }\n    }\n```\n## [Operative Discord Server](https://discord.gg/ryjCnf9myb)\n\n## üõ†Ô∏è Manual Installation (Mac + Cursor/Cline/Windsurf) \n1. Get your API key at operative.sh/mcp\n2. [Install uv](https://docs.astral.sh/uv/#highlights)\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh)\n```\n3. Install playwright:\n```bash\nnpm install -g chromium playwright && uvx --with playwright playwright install --with-deps\n```\n4. Add below JSON to your relevant code editor with api key \n5. Restart your code editor\n\n## Manual Installation (Windows + Cursor/Cline/Windsurf)  \n\nWe're refining this, please open an issue if you have any issues! \n1. Do all this in your code editor terminal \n2. `curl -LSf https://operative.sh/install.sh -o install.sh && bash install.sh && rm install.sh`\n3. Get your API key at operative.sh/mcp\n4. Install uv `(curl -LsSf https://astral.sh/uv/install.sh | sh)`\n5. `uvx --from git+https://github.com/Operative-Sh/web-eval-agent.git playwright install`\n6. Restart code editor \n\n\n## üö® Issues \n- Updates aren't being received in code editors, update or reinstall for latest version: Run `uv cache clean` for latest \n- Any issues feel free to open an Issue on this repo or in the discord!\n- 5/5 - static apps without changes weren't screencasting, fixed! `uv clean` + restart to get fix\n\n## Changelog \n- 4/29 - Agent overlay update - pause/play/stop agent run in the browser\n\n## üìã Example MCP Server Output Report\n\n```text\nüìä Web Evaluation Report for http://localhost:5173 complete!\nüìù Task: Test the API-key deletion flow by navigating to the API Keys section, deleting a key, and judging the UX.\n\nüîç Agent Steps\n  üìç 1. Navigate ‚Üí http://localhost:5173\n  üìç 2. Click     \"Login\"        (button index 2)\n  üìç 3. Click     \"API Keys\"     (button index 4)\n  üìç 4. Click     \"Create Key\"   (button index 9)\n  üìç 5. Type      \"Test API Key\" (input index 2)\n  üìç 6. Click     \"Done\"         (button index 3)\n  üìç 7. Click     \"Delete\"       (button index 10)\n  üìç 8. Click     \"Delete\"       (confirm index 3)\nüèÅ Flow tested successfully ‚Äì UX felt smooth and intuitive.\n\nüñ•Ô∏è Console Logs (10)\n  1. [debug] [vite] connecting‚Ä¶\n  2. [debug] [vite] connected.\n  3. [info]  Download the React DevTools ‚Ä¶\n     ‚Ä¶\n\nüåê Network Requests (10)\n  1. GET /src/pages/SleepingMasks.tsx                   304\n  2. GET /src/pages/MCPRegistryRegistry.tsx             304\n     ‚Ä¶\n\n‚è±Ô∏è Chronological Timeline\n  01:16:23.293 üñ•Ô∏è Console [debug] [vite] connecting‚Ä¶\n  01:16:23.303 üñ•Ô∏è Console [debug] [vite] connected.\n  01:16:23.312 ‚û°Ô∏è GET /src/pages/SleepingMasks.tsx\n  01:16:23.318 ‚¨ÖÔ∏è 304 /src/pages/SleepingMasks.tsx\n     ‚Ä¶\n  01:17:45.038 ü§ñ üèÅ Flow finished ‚Äì deletion verified\n  01:17:47.038 ü§ñ üìã Conclusion repeated above\nüëÅÔ∏è  See the \"Operative Control Center\" dashboard for live logs.\n```\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=Operative-Sh/web-eval-agent&type=Date)](https://www.star-history.com/#Operative-Sh/web-eval-agent&Date)\n\n\n---\n\nBuilt with <3 @ [operative.sh](https://www.operative.sh)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "scraping",
        "agent",
        "automation web",
        "browser automation",
        "web eval"
      ],
      "category": "browser-automation"
    },
    "PhamQuangVinh22022648--playwright-mcp": {
      "owner": "PhamQuangVinh22022648",
      "name": "playwright-mcp",
      "url": "https://github.com/PhamQuangVinh22022648/playwright-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/PhamQuangVinh22022648.webp",
      "description": "Enables interaction with web pages through structured accessibility snapshots for browser automation. Facilitates web navigation, form-filling, data extraction, and automated testing, all without relying on visual models.",
      "stars": 0,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "",
      "updated_at": "2025-05-06T21:45:34Z",
      "readme_content": "## Playwright MCP\n\nA Model Context Protocol (MCP) server that provides browser automation capabilities using [Playwright](https://playwright.dev). This server enables LLMs to interact with web pages through structured accessibility snapshots, bypassing the need for screenshots or visually-tuned models.\n\n### Key Features\n\n- **Fast and lightweight**: Uses Playwright's accessibility tree, not pixel-based input.\n- **LLM-friendly**: No vision models needed, operates purely on structured data.\n- **Deterministic tool application**: Avoids ambiguity common with screenshot-based approaches.\n\n### Use Cases\n\n- Web navigation and form-filling\n- Data extraction from structured content\n- Automated testing driven by LLMs\n- General-purpose browser interaction for agents\n\n<!--\n// Generate using:\nnode utils/generate-links.js\n-->\n\n[<img src=\"https://img.shields.io/badge/VS_Code-VS_Code?style=flat-square&label=Install%20Server&color=0098FF\" alt=\"Install in VS Code\">](https://insiders.vscode.dev/redirect?url=vscode%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522%2540playwright%252Fmcp%2540latest%2522%255D%257D) [<img alt=\"Install in VS Code Insiders\" src=\"https://img.shields.io/badge/VS_Code_Insiders-VS_Code_Insiders?style=flat-square&label=Install%20Server&color=24bfa5\">](https://insiders.vscode.dev/redirect?url=vscode-insiders%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522%2540playwright%252Fmcp%2540latest%2522%255D%257D)\n\n### Example config\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/mcp@latest\"\n      ]\n    }\n  }\n}\n```\n\n### Table of Contents\n\n- [Installation in VS Code](#installation-in-vs-code)\n- [Command line](#command-line)\n- [User profile](#user-profile)\n- [Configuration file](#configuration-file)\n- [Running on Linux](#running-on-linux)\n- [Docker](#docker)\n- [Programmatic usage](#programmatic-usage)\n- [Tool modes](#tool-modes)\n\n### Installation in VS Code\n\nYou can install the Playwright MCP server using the VS Code CLI:\n\n```bash\n# For VS Code\ncode --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@playwright/mcp@latest\"]}'\n```\n\nAfter installation, the Playwright MCP server will be available for use with your GitHub Copilot agent in VS Code.\n\n### Command line\n\nThe Playwright MCP server supports the following command-line options:\n\n- `--browser <browser>`: Browser or chrome channel to use. Possible values:\n  - `chrome`, `firefox`, `webkit`, `msedge`\n  - Chrome channels: `chrome-beta`, `chrome-canary`, `chrome-dev`\n  - Edge channels: `msedge-beta`, `msedge-canary`, `msedge-dev`\n  - Default: `chrome`\n- `--caps <caps>`: Comma-separated list of capabilities to enable, possible values: tabs, pdf, history, wait, files, install. Default is all.\n- `--cdp-endpoint <endpoint>`: CDP endpoint to connect to\n- `--executable-path <path>`: Path to the browser executable\n- `--headless`: Run browser in headless mode (headed by default)\n- `--device`: Emulate mobile device\n- `--user-data-dir <path>`: Path to the user data directory\n- `--port <port>`: Port to listen on for SSE transport\n- `--host <host>`: Host to bind server to. Default is localhost. Use 0.0.0.0 to bind to all interfaces.\n- `--allowed-origins <origins>`: Semicolon-separated list of origins to allow the browser to request. Default is to allow all. Origins matching both `--allowed-origins` and `--blocked-origins` will be blocked.\n- `--blocked-origins <origins>`: Semicolon-separated list of origins to block the browser to request. Origins matching both `--allowed-origins` and `--blocked-origins` will be blocked.\n- `--vision`: Run server that uses screenshots (Aria snapshots are used by default)\n- `--output-dir`: Directory for output files\n- `--config <path>`: Path to the configuration file\n\n### User profile\n\nPlaywright MCP will launch the browser with the new profile, located at\n\n```\n- `%USERPROFILE%\\AppData\\Local\\ms-playwright\\mcp-{channel}-profile` on Windows\n- `~/Library/Caches/ms-playwright/mcp-{channel}-profile` on macOS\n- `~/.cache/ms-playwright/mcp-{channel}-profile` on Linux\n```\n\nAll the logged in information will be stored in that profile, you can delete it between sessions if you'd like to clear the offline state.\n\n### Configuration file\n\nThe Playwright MCP server can be configured using a JSON configuration file. Here's the complete configuration format:\n\n```typescript\n{\n  // Browser configuration\n  browser?: {\n    // Browser type to use (chromium, firefox, or webkit)\n    browserName?: 'chromium' | 'firefox' | 'webkit';\n\n    // Path to user data directory for browser profile persistence\n    userDataDir?: string;\n\n    // Browser launch options (see Playwright docs)\n    // @see https://playwright.dev/docs/api/class-browsertype#browser-type-launch\n    launchOptions?: {\n      channel?: string;        // Browser channel (e.g. 'chrome')\n      headless?: boolean;      // Run in headless mode\n      executablePath?: string; // Path to browser executable\n      // ... other Playwright launch options\n    };\n\n    // Browser context options\n    // @see https://playwright.dev/docs/api/class-browser#browser-new-context\n    contextOptions?: {\n      viewport?: { width: number, height: number };\n      // ... other Playwright context options\n    };\n\n    // CDP endpoint for connecting to existing browser\n    cdpEndpoint?: string;\n\n    // Remote Playwright server endpoint\n    remoteEndpoint?: string;\n  },\n\n  // Server configuration\n  server?: {\n    port?: number;  // Port to listen on\n    host?: string;  // Host to bind to (default: localhost)\n  },\n\n  // List of enabled capabilities\n  capabilities?: Array<\n    'core' |    // Core browser automation\n    'tabs' |    // Tab management\n    'pdf' |     // PDF generation\n    'history' | // Browser history\n    'wait' |    // Wait utilities\n    'files' |   // File handling\n    'install' | // Browser installation\n    'testing'   // Testing\n  >;\n\n  // Enable vision mode (screenshots instead of accessibility snapshots)\n  vision?: boolean;\n\n  // Directory for output files\n  outputDir?: string;\n\n  // Network configuration\n  network?: {\n    // List of origins to allow the browser to request. Default is to allow all. Origins matching both `allowedOrigins` and `blockedOrigins` will be blocked.\n    allowedOrigins?: string[];\n\n    // List of origins to block the browser to request. Origins matching both `allowedOrigins` and `blockedOrigins` will be blocked.\n    blockedOrigins?: string[];\n  };\n \n  /**\n   * Do not send image responses to the client.\n   */\n  noImageResponses?: boolean;\n}\n```\n\nYou can specify the configuration file using the `--config` command line option:\n\n```bash\nnpx @playwright/mcp@latest --config path/to/config.json\n```\n\n### Running on Linux\n\nWhen running headed browser on system w/o display or from worker processes of the IDEs,\nrun the MCP server from environment with the DISPLAY and pass the `--port` flag to enable SSE transport.\n\n```bash\nnpx @playwright/mcp@latest --port 8931\n```\n\nAnd then in MCP client config, set the `url` to the SSE endpoint:\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"url\": \"http://localhost:8931/sse\"\n    }\n  }\n}\n```\n\n### Docker\n\n**NOTE:** The Docker implementation only supports headless chromium at the moment.\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"--init\", \"mcp/playwright\"]\n    }\n  }\n}\n```\n\nYou can build the Docker image yourself.\n\n```\ndocker build -t mcp/playwright .\n```\n\n### Programmatic usage\n\n```js\nimport http from 'http';\n\nimport { createServer } from '@playwright/mcp';\nimport { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';\n\nhttp.createServer(async (req, res) => {\n  // ...\n\n  // Creates a headless Playwright MCP server with SSE transport\n  const connection = await createConnection({ headless: true });\n  const transport = new SSEServerTransport('/messages', res);\n  await connection.connect(transport);\n\n  // ...\n});\n```\n\n### Tool modes\n\nThe tools are available in two modes:\n\n1. **Snapshot Mode** (default): Uses accessibility snapshots for better performance and reliability\n2. **Vision Mode**: Uses screenshots for visual-based interactions\n\nTo use Vision Mode, add the `--vision` flag when starting the server:\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/mcp@latest\",\n        \"--vision\"\n      ]\n    }\n  }\n}\n```\n\nVision Mode works best with the computer use models that are able to interact with elements using\nX Y coordinate space, based on the provided screenshot.\n\n\n<!--- Generated by update-readme.js -->\n\n### Snapshot-based Interactions\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_snapshot**\n  - Title: Page snapshot\n  - Description: Capture accessibility snapshot of the current page, this is better than screenshot\n  - Parameters: None\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_click**\n  - Title: Click\n  - Description: Perform click on a web page\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_drag**\n  - Title: Drag mouse\n  - Description: Perform drag and drop between two elements\n  - Parameters:\n    - `startElement` (string): Human-readable source element description used to obtain the permission to interact with the element\n    - `startRef` (string): Exact source element reference from the page snapshot\n    - `endElement` (string): Human-readable target element description used to obtain the permission to interact with the element\n    - `endRef` (string): Exact target element reference from the page snapshot\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_hover**\n  - Title: Hover mouse\n  - Description: Hover over element on page\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_type**\n  - Title: Type text\n  - Description: Type text into editable element\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n    - `text` (string): Text to type into the element\n    - `submit` (boolean, optional): Whether to submit entered text (press Enter after)\n    - `slowly` (boolean, optional): Whether to type one character at a time. Useful for triggering key handlers in the page. By default entire text is filled in at once.\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_select_option**\n  - Title: Select option\n  - Description: Select an option in a dropdown\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n    - `values` (array): Array of values to select in the dropdown. This can be a single value or multiple values.\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_take_screenshot**\n  - Title: Take a screenshot\n  - Description: Take a screenshot of the current page. You can't perform actions based on the screenshot, use browser_snapshot for actions.\n  - Parameters:\n    - `raw` (boolean, optional): Whether to return without compression (in PNG format). Default is false, which returns a JPEG image.\n    - `element` (string, optional): Human-readable element description used to obtain permission to screenshot the element. If not provided, the screenshot will be taken of viewport. If element is provided, ref must be provided too.\n    - `ref` (string, optional): Exact target element reference from the page snapshot. If not provided, the screenshot will be taken of viewport. If ref is provided, element must be provided too.\n  - Read-only: **true**\n\n### Vision-based Interactions\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_capture**\n  - Title: Take a screenshot\n  - Description: Take a screenshot of the current page\n  - Parameters: None\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_move_mouse**\n  - Title: Move mouse\n  - Description: Move mouse to a given position\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `x` (number): X coordinate\n    - `y` (number): Y coordinate\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_click**\n  - Title: Click\n  - Description: Click left mouse button\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `x` (number): X coordinate\n    - `y` (number): Y coordinate\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_drag**\n  - Title: Drag mouse\n  - Description: Drag left mouse button\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `startX` (number): Start X coordinate\n    - `startY` (number): Start Y coordinate\n    - `endX` (number): End X coordinate\n    - `endY` (number): End Y coordinate\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_type**\n  - Title: Type text\n  - Description: Type text\n  - Parameters:\n    - `text` (string): Text to type into the element\n    - `submit` (boolean, optional): Whether to submit entered text (press Enter after)\n  - Read-only: **false**\n\n### Tab Management\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_tab_list**\n  - Title: List tabs\n  - Description: List browser tabs\n  - Parameters: None\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_tab_new**\n  - Title: Open a new tab\n  - Description: Open a new tab\n  - Parameters:\n    - `url` (string, optional): The URL to navigate to in the new tab. If not provided, the new tab will be blank.\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_tab_select**\n  - Title: Select a tab\n  - Description: Select a tab by index\n  - Parameters:\n    - `index` (number): The index of the tab to select\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_tab_close**\n  - Title: Close a tab\n  - Description: Close a tab\n  - Parameters:\n    - `index` (number, optional): The index of the tab to close. Closes current tab if not provided.\n  - Read-only: **false**\n\n### Navigation\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_navigate**\n  - Title: Navigate to a URL\n  - Description: Navigate to a URL\n  - Parameters:\n    - `url` (string): The URL to navigate to\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_navigate_back**\n  - Title: Go back\n  - Description: Go back to the previous page\n  - Parameters: None\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_navigate_forward**\n  - Title: Go forward\n  - Description: Go forward to the next page\n  - Parameters: None\n  - Read-only: **true**\n\n### Keyboard\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_press_key**\n  - Title: Press a key\n  - Description: Press a key on the keyboard\n  - Parameters:\n    - `key` (string): Name of the key to press or a character to generate, such as `ArrowLeft` or `a`\n  - Read-only: **false**\n\n### Console\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_console_messages**\n  - Title: Get console messages\n  - Description: Returns all console messages\n  - Parameters: None\n  - Read-only: **true**\n\n### Files and Media\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_file_upload**\n  - Title: Upload files\n  - Description: Upload one or multiple files\n  - Parameters:\n    - `paths` (array): The absolute paths to the files to upload. Can be a single file or multiple files.\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_pdf_save**\n  - Title: Save as PDF\n  - Description: Save page as PDF\n  - Parameters: None\n  - Read-only: **true**\n\n### Utilities\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_close**\n  - Title: Close browser\n  - Description: Close the page\n  - Parameters: None\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_wait**\n  - Title: Wait\n  - Description: Wait for a specified time in seconds\n  - Parameters:\n    - `time` (number): The time to wait in seconds\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_resize**\n  - Title: Resize browser window\n  - Description: Resize the browser window\n  - Parameters:\n    - `width` (number): Width of the browser window\n    - `height` (number): Height of the browser window\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_install**\n  - Title: Install the browser specified in the config\n  - Description: Install the browser specified in the config. Call this if you get an error about the browser not being installed.\n  - Parameters: None\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_handle_dialog**\n  - Title: Handle a dialog\n  - Description: Handle a dialog\n  - Parameters:\n    - `accept` (boolean): Whether to accept the dialog.\n    - `promptText` (string, optional): The text of the prompt in case of a prompt dialog.\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_network_requests**\n  - Title: List network requests\n  - Description: Returns all network requests since loading the page\n  - Parameters: None\n  - Read-only: **true**\n\n### Testing\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_generate_playwright_test**\n  - Title: Generate a Playwright test\n  - Description: Generate a Playwright test for given scenario\n  - Parameters:\n    - `name` (string): The name of the test\n    - `description` (string): The description of the test\n    - `steps` (array): The steps of the test\n  - Read-only: **true**\n\n<!--- End of generated section -->\n",
      "npm_url": "https://www.npmjs.com/package/playwright-mcp",
      "npm_downloads": 88803,
      "keywords": [
        "automation",
        "browser",
        "scraping",
        "browser automation",
        "automation web",
        "facilitates web"
      ],
      "category": "browser-automation"
    },
    "PhialsBasement--MCP-Puppeteer-Linux": {
      "owner": "PhialsBasement",
      "name": "MCP-Puppeteer-Linux",
      "url": "https://github.com/PhialsBasement/MCP-Puppeteer-Linux",
      "imageUrl": "/freedevtools/mcp/pfp/PhialsBasement.webp",
      "description": "Provides browser automation capabilities using Puppeteer with support for Linux display servers, enabling interaction with web pages, taking screenshots, and executing JavaScript in a browser environment.",
      "stars": 7,
      "forks": 6,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-11T14:11:06Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/phialsbasement-mcp-puppeteer-linux-badge.png)](https://mseep.ai/app/phialsbasement-mcp-puppeteer-linux)\n\n# MCP-Puppeteer-Linux\n[![smithery badge](https://smithery.ai/badge/@PhialsBasement/mcp-puppeteer-linux)](https://smithery.ai/server/@PhialsBasement/mcp-puppeteer-linux)\nA Model Context Protocol server that provides browser automation capabilities using Puppeteer, with full support for Linux display servers (X11 and Wayland). This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment.\n\n## Display Server Support\nThis fork adds automatic detection and configuration for Linux display servers:\n- Automatic X11/Wayland detection\n- Dynamic environment variable configuration\n- Support for various desktop environments (GNOME, KDE, etc.)\n- Fallback mechanisms and robust error handling\n- XWayland compatibility\n\n## Components\n### Tools\n- **puppeteer_navigate**\n  - Navigate to any URL in the browser\n  - Input: `url` (string)\n- **puppeteer_screenshot**\n  - Capture screenshots of the entire page or specific elements\n  - Inputs:\n    - `name` (string, required): Name for the screenshot\n    - `selector` (string, optional): CSS selector for element to screenshot\n    - `width` (number, optional, default: 800): Screenshot width\n    - `height` (number, optional, default: 600): Screenshot height\n- **puppeteer_click**\n  - Click elements on the page\n  - Input: `selector` (string): CSS selector for element to click\n- **puppeteer_hover**\n  - Hover elements on the page\n  - Input: `selector` (string): CSS selector for element to hover\n- **puppeteer_fill**\n  - Fill out input fields\n  - Inputs:\n    - `selector` (string): CSS selector for input field\n    - `value` (string): Value to fill\n- **puppeteer_select**\n  - Select an element with SELECT tag\n  - Inputs:\n    - `selector` (string): CSS selector for element to select\n    - `value` (string): Value to select\n- **puppeteer_evaluate**\n  - Execute JavaScript in the browser console\n  - Input: `script` (string): JavaScript code to execute\n\n### Resources\nThe server provides access to two types of resources:\n1. **Console Logs** (`console://logs`)\n   - Browser console output in text format\n   - Includes all console messages from the browser\n2. **Screenshots** (`screenshot://<name>`)\n   - PNG images of captured screenshots\n   - Accessible via the screenshot name specified during capture\n\n## Key Features\n- Browser automation with Linux display server support\n- Automatic X11/Wayland detection and configuration\n- Console log monitoring\n- Screenshot capabilities\n- JavaScript execution\n- Basic web interaction (navigation, clicking, form filling)\n\n## Configuration\n### Claude Desktop Configuration\n```json\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"npx\",\n      \"args\": [\"ts-node\", \"/path/to/index.ts\"]\n    }\n  }\n}\n```\n\n## Installation\n\n### Installing via Smithery\n\nTo install Puppeteer Linux for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@PhialsBasement/mcp-puppeteer-linux):\n\n```bash\nnpx -y @smithery/cli install @PhialsBasement/mcp-puppeteer-linux --client claude\n```\n\n### Manual Installation\n1. Clone the repository:\n```bash\ngit clone https://github.com/PhialsBasement/MCP-Puppeteer-Linux.git\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Start the server:\n```bash\nts-node index.ts\n```\n\n## Display Server Details\nThe server automatically detects and configures the appropriate display environment:\n\n### Wayland Support\n- Detects Wayland sessions via `WAYLAND_DISPLAY`\n- Configures necessary environment variables:\n  - `WAYLAND_DISPLAY`\n  - `QT_QPA_PLATFORM`\n  - `GDK_BACKEND`\n  - `MOZ_ENABLE_WAYLAND`\n  - `XDG_SESSION_TYPE`\n\n### X11 Support\n- Fallback for traditional X11 sessions\n- Handles X11-specific variables:\n  - `DISPLAY`\n  - `XAUTHORITY`\n- Supports various desktop environments and window managers\n\n## License\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "https://www.npmjs.com/package/mcp-puppeteer-linux",
      "npm_downloads": 108,
      "keywords": [
        "puppeteer",
        "automation",
        "browser",
        "using puppeteer",
        "browser automation",
        "puppeteer linux"
      ],
      "category": "browser-automation"
    },
    "Qinjianbo--mcp-rquest": {
      "owner": "Qinjianbo",
      "name": "mcp-rquest",
      "url": "https://github.com/Qinjianbo/mcp-rquest",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Enables advanced HTTP requests with browser emulation to interact with websites and bypass anti-bot measures. Converts HTML and PDF documents to Markdown for easier language model processing.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "scraping",
        "html",
        "browser automation",
        "automation web",
        "processing web"
      ],
      "category": "browser-automation"
    },
    "Raghu6798--Browser_scrape_mcp": {
      "owner": "Raghu6798",
      "name": "Browser_scrape_mcp",
      "url": "https://github.com/Raghu6798/Browser_scrape_mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Raghu6798.webp",
      "description": "Automates web browsing and scraping tasks, leveraging AI to intelligently search and extract content from various online sources such as Google, GitHub, and Stack Overflow. Offers capabilities like saving screenshots and processing text for efficient data collection.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-06-22T14:53:40Z",
      "readme_content": "# ü§ñ Browser Automation Agent\r\n\r\nA powerful browser automation tool built with MCP (Model Controlled Program) that combines web scraping capabilities with LLM-powered intelligence. This agent can search Google, navigate to webpages, and intelligently scrape content from various websites including GitHub, Stack Overflow, and documentation sites.\r\n\r\n## üöÄ Features\r\n\r\n- **üîç Google Search Integration**: Finds and retrieves top search results for any query\r\n- **üï∏Ô∏è Intelligent Web Scraping**: Tailored scraping strategies for different website types:\r\n  - üìÇ GitHub repositories\r\n  - üí¨ Stack Overflow questions and answers\r\n  - üìö Documentation pages\r\n  - üåê Generic websites\r\n- **üß† AI-Powered Processing**: Uses Mistral AI for understanding and processing scraped content\r\n- **ü•∑ Stealth Mode**: Implements browser fingerprint protection to avoid detection\r\n- **üíæ Content Saving**: Automatically saves both screenshots and text content from scraped pages\r\n\r\n## üèóÔ∏è Architecture\r\n\r\nThis project uses a client-server architecture powered by MCP:\r\n\r\n- **üñ•Ô∏è Server**: Handles browser automation and web scraping tasks\r\n- **üë§ Client**: Provides the AI interface using Mistral AI and LangGraph\r\n- **üì° Communication**: Uses stdio for client-server communication\r\n\r\n## ‚öôÔ∏è Requirements\r\n\r\n- üêç Python 3.8+\r\n- üé≠ Playwright\r\n- üß© MCP (Model Controlled Program)\r\n- üîë Mistral AI API key\r\n\r\n## üì• Installation\r\n\r\n1. Clone the repository:\r\n\r\n```bash\r\ngit clone https://github.com/yourusername/browser-automation-agent.git\r\ncd browser-automation-agent\r\n```\r\n\r\n2. Install dependencies:\r\n\r\n```bash\r\npip install -r requirements.txt\r\n```\r\n\r\n3. Install Playwright browsers:\r\n\r\n```bash\r\nplaywright install\r\n```\r\n\r\n4. Create a `.env` file in the project root and add your Mistral AI API key:\r\n\r\n```\r\nMISTRAL_API_KEY=your_api_key_here\r\n```\r\n\r\n## üìã Usage\r\n\r\n### Running the Server\r\n\r\n```bash\r\npython main.py\r\n```\r\n\r\n### Running the Client\r\n\r\n```bash\r\npython client.py\r\n```\r\n\r\n### Sample Interaction\r\n\r\nOnce both the server and client are running:\r\n\r\n1. Enter your query when prompted\r\n2. The agent will:\r\n   - üîç Search Google for relevant results\r\n   - üß≠ Navigate to the top result\r\n   - üìä Scrape content based on the website type\r\n   - üì∏ Save screenshots and content to files\r\n   - üì§ Return processed information\r\n\r\n## üõ†Ô∏è Tool Functions\r\n\r\n### `get_top_google_url`\r\nüîç Searches Google and returns the top result URL for a given query.\r\n\r\n### `browse_and_scrape`\r\nüåê Navigates to a URL and scrapes content based on the website type.\r\n\r\n### `scrape_github`\r\nüìÇ Specializes in extracting README content and code blocks from GitHub repositories.\r\n\r\n### `scrape_stackoverflow`\r\nüí¨ Extracts questions, answers, comments, and code blocks from Stack Overflow pages.\r\n\r\n### `scrape_documentation`\r\nüìö Optimized for extracting documentation content and code examples.\r\n\r\n### `scrape_generic`\r\nüåê Extracts paragraph text and code blocks from generic websites.\r\n\r\n## üìÅ File Structure\r\n\r\n```\r\nbrowser-automation-agent/\r\n‚îú‚îÄ‚îÄ main.py            # MCP server implementation\r\n‚îú‚îÄ‚îÄ client.py          # Mistral AI client implementation\r\n‚îú‚îÄ‚îÄ requirements.txt   # Project dependencies\r\n‚îú‚îÄ‚îÄ .env               # Environment variables (API keys)\r\n‚îî‚îÄ‚îÄ README.md          # Project documentation\r\n```\r\n\r\n## üì§ Output Files\r\n\r\nThe agent generates two types of output files with timestamps:\r\n\r\n- üì∏ `final_page_YYYYMMDD_HHMMSS.png`: Screenshot of the final page state\r\n- üìÑ `scraped_content_YYYYMMDD_HHMMSS.txt`: Extracted text content from the page\r\n\r\n## ‚öôÔ∏è Customization\r\n\r\nYou can modify the following parameters in the code:\r\n\r\n- üñ•Ô∏è Browser window size: Adjust `width` and `height` in `browse_and_scrape`\r\n- üëª Headless mode: Set `headless=True` for invisible browser operation\r\n- üî¢ Number of Google results: Change `num_results` in `get_top_google_url`\r\n\r\n## ‚ùì Troubleshooting\r\n\r\n- **üîå Connection Issues**: Ensure both server and client are running in separate terminals\r\n- **üé≠ Playwright Errors**: Make sure browsers are installed with `playwright install`\r\n- **üîë API Key Errors**: Verify your Mistral API key is correctly set in the `.env` file\r\n- **üõ£Ô∏è Path Errors**: Update the path to `main.py` in `client.py` if needed\r\n\r\n## üìú License\r\n\r\n[MIT License](LICENSE)\r\n\r\n## ü§ù Contributing\r\n\r\nContributions are welcome! Please feel free to submit a Pull Request.\r\n\r\n---\r\n\r\nBuilt with üß© MCP, üé≠ Playwright, and üß† Mistral AI\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "browser_scrape_mcp",
        "scraping",
        "automation",
        "browser automation",
        "browser_scrape_mcp automates",
        "browsing scraping"
      ],
      "category": "browser-automation"
    },
    "Rahulec08--appium-mcp": {
      "owner": "Rahulec08",
      "name": "appium-mcp",
      "url": "https://github.com/Rahulec08/appium-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Rahulec08.webp",
      "description": "Integrate Appium capabilities for mobile app automation to perform element interactions, manage applications, control devices, and execute advanced gestures through standardized MCP calls. Streamline mobile testing workflows with comprehensive device support.",
      "stars": 35,
      "forks": 1,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-09-29T06:29:47Z",
      "readme_content": "![Build](https://github.com/Rahulec08/appium-mcp/actions/workflows/ci.yml/badge.svg)\n[![NPM Version](https://img.shields.io/npm/v/mcp-appium-visual.svg)](https://www.npmjs.com/package/mcp-appium-visual)\n[![License](https://img.shields.io/github/license/Rahulec08/appium-mcp.svg)](LICENSE)\n[![Issues](https://img.shields.io/github/issues/Rahulec08/appium-mcp.svg)](https://github.com/Rahulec08/appium-mcp/issues)\n[![Last Commit](https://img.shields.io/github/last-commit/Rahulec08/appium-mcp.svg)](https://github.com/Rahulec08/appium-mcp/commits/main)\n\n`mcp-appium-visual` is an AI-powered mobile automation platform with Model Context Protocol (MCP) integration. It enables seamless control of Android and iOS devices through Appium, featuring intelligent visual element detection and recovery.\n\n## Features\n\n- Integration with Appium for device control\n- Visual element detection and recovery (AI-based)\n- MCP support for advanced agent-driven testing workflows\n- Supports Android and iOS platforms\n- Designed for use with AI agents for intelligent automation\n\n## Prerequisites\n\n1. Node.js (v14 or higher)\n2. Java Development Kit (JDK)\n3. Android SDK (for Android testing)\n4. Xcode (for iOS testing, macOS only)\n5. Appium Server\n6. Android device or emulator / iOS device or simulator\n\n## Environment Setup\n\nBefore executing any commands, ensure your environment variables are properly set up:\n\n1. Make sure your `.bash_profile`, `.zshrc` or other shell configuration file contains the necessary environment variables:\n\n```bash\n# Example environment variables in ~/.bash_profile\nexport JAVA_HOME=/path/to/your/java\nexport ANDROID_HOME=/path/to/your/android/sdk\nexport PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools\n```\n\n2. Source your environment file before running MCP-Appium:\n\n```bash\nsource ~/.bash_profile  # For bash\n# OR\nsource ~/.zshrc         # For zsh\n```\n\n> **Note**: The system will attempt to source your `.bash_profile` automatically when initializing the driver, but it's recommended to ensure proper environment setup manually before running tests in a new terminal session.\n\n### Xcode Command Line Tools Configuration\n\nFor iOS testing, proper Xcode command line tools configuration is essential:\n\n1. Install Xcode command line tools if not already installed:\n\n```bash\nxcode-select --install\n```\n\n2. Verify the installation and check the current Xcode path:\n\n```bash\nxcode-select -p\n```\n\n3. If needed, set the correct Xcode path (especially if you have multiple Xcode versions):\n\n```bash\nsudo xcode-select -s /Applications/Xcode.app/Contents/Developer\n```\n\n4. Accept Xcode license agreements:\n\n```bash\nsudo xcodebuild -license accept\n```\n\n5. For iOS real device testing, ensure your Apple Developer account is properly configured in Xcode:\n\n   - Open Xcode\n   - Go to Preferences > Accounts\n   - Add your Apple ID if not already added\n   - Download the necessary provisioning profiles\n\n6. Set up environment variables for iOS development:\n\n```bash\n# Add these to your ~/.bash_profile or ~/.zshrc\nexport DEVELOPER_DIR=\"/Applications/Xcode.app/Contents/Developer\"\nexport PATH=\"$DEVELOPER_DIR/usr/bin:$PATH\"\n```\n\n7. Source your updated configuration:\n\n```bash\nsource ~/.bash_profile  # For bash\n# OR\nsource ~/.zshrc         # For zsh\n```\n\n## Setup\n\n1. Install dependencies:\n\n```bash\nnpm install\n```\n\n2. Install and start Appium server:\n\n```bash\nnpm install -g appium\nappium\n```\n\n3. Set up Android device/emulator:\n\n   - Enable Developer Options on your Android device\n   - Enable USB Debugging\n   - Connect device via USB or start an emulator\n   - Verify device is connected using `adb devices`\n\n4. For iOS testing (macOS only):\n   - Ensure Xcode command line tools are installed: `xcode-select --install`\n   - Set up iOS simulator or connect a real device\n   - Trust the development computer on the iOS device if using a real device\n\n## Running Tests\n\n1. Build the project:\n\n```bash\nnpm run build\n```\n\n2. Start the MCP server:\n\n```bash\nnpm run dev\n```\n\n3. In a new terminal, run the test:\n\n```bash\nnpm test\n```\n\n## Test Configuration\n\n### Android Configuration\n\nThe example test uses the Android Settings app as a demo. To test your own app:\n\n1. Edit `examples/appium-test.ts`:\n\n   - Update `deviceName` to match your device\n   - Set `app` path to your APK file, or\n   - Update `appPackage` and `appActivity` for an installed app\n\n2. Common capabilities configuration:\n\n```typescript\nconst capabilities: AppiumCapabilities = {\n  platformName: \"Android\",\n  deviceName: \"YOUR_DEVICE_NAME\",\n  automationName: \"UiAutomator2\",\n  // For installing and testing an APK:\n  app: \"./path/to/your/app.apk\",\n  // OR for testing an installed app:\n  appPackage: \"your.app.package\",\n  appActivity: \".MainActivity\",\n  noReset: true,\n};\n```\n\n### iOS Configuration\n\nFor iOS testing using the new Xcode command line support:\n\n1. Example configuration in `examples/xcode-appium-example.ts`:\n\n```typescript\nconst capabilities: AppiumCapabilities = {\n  platformName: \"iOS\",\n  deviceName: \"iPhone 13\", // Your simulator or device name\n  automationName: \"XCUITest\",\n  udid: \"DEVICE_UDID\", // Get this from XcodeCommands.getIosSimulators()\n  // For installing and testing an app:\n  app: \"./path/to/your/app.app\",\n  // OR for testing an installed app:\n  bundleId: \"com.your.app\",\n  noReset: true,\n};\n```\n\n## Available Actions\n\nThe MCP server supports various Appium actions:\n\n1. Element Interactions:\n\n   - Find elements\n   - Tap/click elements with W3C Actions API (See \"W3C Standard Gestures\" section)\n   - Type text\n   - Scroll to element with W3C Actions API\n   - Long press\n\n2. App Management:\n\n   - Launch/close app\n   - Reset app\n   - Get current package/activity\n\n3. Device Controls:\n\n   - Screen orientation\n   - Keyboard handling\n   - Device lock/unlock\n   - Screenshots\n   - Battery info\n\n4. Advanced Features:\n\n   - Context switching (Native/WebView)\n   - File operations\n   - Notifications\n   - Custom gestures\n\n5. Xcode Command Line Tools (iOS only):\n   - Manage iOS simulators (boot, shutdown)\n   - Install/uninstall apps on simulators\n   - Launch/terminate apps\n   - Take screenshots\n   - Record videos\n   - Create/delete simulators\n   - Get device types and runtimes\n\n## W3C Standard Gestures\n\nThe MCP-Appium library now implements the W3C WebDriver Actions API for touch gestures, which is the modern standard for mobile automation.\n\n### W3C Actions for Tap Elements\n\nThe `tapElement` method now uses the W3C Actions API with intelligent fallbacks:\n\n```typescript\n// The method will try in this order:\n// 1. Standard WebdriverIO click()\n// 2. W3C Actions API\n// 3. Legacy TouchAction API (fallback for backward compatibility)\nawait appium.tapElement(\"//android.widget.Button[@text='OK']\");\n// or using the click alias\nawait appium.click(\"//android.widget.Button[@text='OK']\");\n```\n\n### W3C Actions for Scrolling\n\nThe `scrollToElement` method now uses W3C Actions API:\n\n```typescript\n// Uses W3C Actions API for more reliable scrolling\nawait appium.scrollToElement(\n  \"//android.widget.TextView[@text='About phone']\", // selector\n  \"down\", // direction: \"up\", \"down\", \"left\", \"right\"\n  \"xpath\", // strategy\n  10 // maxScrolls\n);\n```\n\n### Custom W3C Gestures\n\nYou can create your own custom W3C gestures using the `executeMobileCommand` method:\n\n```typescript\n// Create custom W3C Actions API gesture\nconst w3cActions = {\n  actions: [\n    {\n      type: \"pointer\",\n      id: \"finger1\",\n      parameters: { pointerType: \"touch\" },\n      actions: [\n        // Move to start position\n        { type: \"pointerMove\", duration: 0, x: startX, y: startY },\n        // Press down\n        { type: \"pointerDown\", button: 0 },\n        // Move to end position over duration milliseconds\n        {\n          type: \"pointerMove\",\n          duration: duration,\n          origin: \"viewport\",\n          x: endX,\n          y: endY,\n        },\n        // Release\n        { type: \"pointerUp\", button: 0 },\n      ],\n    },\n  ],\n};\n\n// Execute the W3C Actions using executeScript\nawait appium.executeMobileCommand(\"performActions\", [w3cActions.actions]);\n```\n\nSee `examples/w3c-actions-swipe-demo.ts` for more examples of W3C standard gesture implementations.\n\n## Using Xcode Command Line Tools\n\nThe new `XcodeCommands` class provides powerful tools for iOS testing:\n\n```typescript\nimport { XcodeCommands } from \"../src/lib/xcode/xcodeCommands.js\";\n\n// Check if Xcode CLI tools are installed\nconst isInstalled = await XcodeCommands.isXcodeCliInstalled();\n\n// Get available simulators\nconst simulators = await XcodeCommands.getIosSimulators();\n\n// Boot a simulator\nawait XcodeCommands.bootSimulator(\"SIMULATOR_UDID\");\n\n// Install an app\nawait XcodeCommands.installApp(\"SIMULATOR_UDID\", \"/path/to/app.app\");\n\n// Launch an app\nawait XcodeCommands.launchApp(\"SIMULATOR_UDID\", \"com.example.app\");\n\n// Take a screenshot\nawait XcodeCommands.takeScreenshot(\"SIMULATOR_UDID\", \"/path/to/output.png\");\n\n// Shutdown a simulator\nawait XcodeCommands.shutdownSimulator(\"SIMULATOR_UDID\");\n```\n\n## Using the Click Function\n\nThe `click()` method provides a more intuitive alternative to `tapElement()`:\n\n```typescript\n// Using the click method\nawait appium.click(\"//android.widget.Button[@text='OK']\");\n\n// This is equivalent to:\nawait appium.tapElement(\"//android.widget.Button[@text='OK']\");\n```\n\n## Troubleshooting\n\n1. Device not found:\n\n   - Check `adb devices` output\n   - Verify USB debugging is enabled\n   - Try reconnecting the device\n\n2. App not installing:\n\n   - Verify APK path is correct\n   - Check device has enough storage\n   - Ensure app is signed for debug\n\n3. Elements not found:\n\n   - Use Appium Inspector to verify selectors\n   - Check if elements are visible on screen\n   - Try different locator strategies\n\n4. Connection issues:\n\n   - Verify Appium server is running\n   - Check port conflicts\n   - Ensure correct capabilities are set\n\n5. iOS Simulator issues:\n   - Verify Xcode command line tools are installed: `xcode-select -p`\n   - Check simulator UDID is correct using `xcrun simctl list devices`\n   - Close and restart simulator if it becomes unresponsive\n\n## Contributing\n\nFeel free to submit issues and pull requests for additional features or bug fixes.\n\n## License\n\nMIT\n",
      "npm_url": "https://www.npmjs.com/package/appium-mcp",
      "npm_downloads": 177,
      "keywords": [
        "appium",
        "automation",
        "app",
        "appium capabilities",
        "appium mcp",
        "rahulec08 appium"
      ],
      "category": "browser-automation"
    },
    "Saik0s--mcp-browser-use": {
      "owner": "Saik0s",
      "name": "mcp-browser-use",
      "url": "https://github.com/Saik0s/mcp-browser-use",
      "imageUrl": "/freedevtools/mcp/pfp/Saik0s.webp",
      "description": "Automates interactions with web browsers for tasks in testing and development, enabling natural language control and web research capabilities.",
      "stars": 819,
      "forks": 103,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T03:55:03Z",
      "readme_content": "<br/>\n\n# browser-use MCP server & CLI\n[![Documentation](https://img.shields.io/badge/Documentation-üìï-blue)](https://docs.browser-use.com)\n[![License](https://img.shields.io/badge/License-MIT-green)](LICENSE)\n\n> **Project Note**: This MCP server implementation builds upon the [browser-use/web-ui](https://github.com/browser-use/web-ui) foundation. Core browser automation logic and configuration patterns are adapted from the original project.\n\nAI-driven browser automation server implementing the Model Context Protocol (MCP) for natural language browser control and web research. Also provides CLI access to its core functionalities.\n\n<a href=\"https://glama.ai/mcp/servers/@Saik0s/mcp-browser-use\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@Saik0s/mcp-browser-use/badge\" alt=\"Browser-Use MCP server\" /></a>\n\n## Features\n\n-   üß† **MCP Integration** - Full protocol implementation for AI agent communication.\n-   üåê **Browser Automation** - Page navigation, form filling, element interaction via natural language (`run_browser_agent` tool).\n-   üëÅÔ∏è **Visual Understanding** - Optional screenshot analysis for vision-capable LLMs.\n-   üîÑ **State Persistence** - Option to manage a server browser session across multiple MCP calls or connect to user's browser.\n-   üîå **Multi-LLM Support** - Integrates with OpenAI, Anthropic, Azure, DeepSeek, Google, Mistral, Ollama, OpenRouter, Alibaba, Moonshot, Unbound AI.\n-   üîç **Deep Research Tool** - Dedicated tool for multi-step web research and report generation (`run_deep_research` tool).\n-   ‚öôÔ∏è **Environment Variable Configuration** - Fully configurable via environment variables using a structured Pydantic model.\n-   üîó **CDP Connection** - Ability to connect to and control a user-launched Chrome/Chromium instance via Chrome DevTools Protocol.\n-   ‚å®Ô∏è **CLI Interface** - Access core agent functionalities (`run_browser_agent`, `run_deep_research`) directly from the command line for testing and scripting.\n\n## Quick Start\n\n### The Essentials\n\n1. Install UV - the rocket-powered Python installer:\n`curl -LsSf https://astral.sh/uv/install.sh | sh`\n\n2. Get Playwright browsers (required for automation):\n`uvx --from mcp-server-browser-use@latest python -m playwright install`\n\n### Integration Patterns\n\nFor MCP clients like Claude Desktop, add a server configuration that's as simple as:\n\n```json\n// Example 1: One-Line Latest Version (Always Fresh)\n\"mcpServers\": {\n    \"browser-use\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-browser-use@latest\"],\n      \"env\": {\n        \"MCP_LLM_GOOGLE_API_KEY\": \"YOUR_KEY_HERE_IF_USING_GOOGLE\",\n        \"MCP_LLM_PROVIDER\": \"google\",\n        \"MCP_LLM_MODEL_NAME\": \"gemini-2.5-flash-preview-04-17\",\n        \"MCP_BROWSER_HEADLESS\": \"true\",\n      }\n    }\n}\n```\n\n```json\n// Example 2: Advanced Configuration with CDP\n\"mcpServers\": {\n    \"browser-use\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-browser-use@latest\"],\n      \"env\": {\n        \"MCP_LLM_OPENROUTER_API_KEY\": \"YOUR_KEY_HERE_IF_USING_OPENROUTER\",\n        \"MCP_LLM_PROVIDER\": \"openrouter\",\n        \"MCP_LLM_MODEL_NAME\": \"anthropic/claude-3.5-haiku\",\n        \"MCP_LLM_TEMPERATURE\": \"0.4\",\n\n        \"MCP_BROWSER_HEADLESS\": \"false\",\n        \"MCP_BROWSER_WINDOW_WIDTH\": \"1440\",\n        \"MCP_BROWSER_WINDOW_HEIGHT\": \"1080\",\n        \"MCP_AGENT_TOOL_USE_VISION\": \"true\",\n\n        \"MCP_RESEARCH_TOOL_SAVE_DIR\": \"/path/to/your/research\",\n        \"MCP_RESEARCH_TOOL_MAX_PARALLEL_BROWSERS\": \"5\",\n\n        \"MCP_PATHS_DOWNLOADS\": \"/path/to/your/downloads\",\n\n        \"MCP_BROWSER_USE_OWN_BROWSER\": \"true\",\n        \"MCP_BROWSER_CDP_URL\": \"http://localhost:9222\",\n\n        \"MCP_AGENT_TOOL_HISTORY_PATH\": \"/path/to/your/history\",\n\n        \"MCP_SERVER_LOGGING_LEVEL\": \"DEBUG\",\n        \"MCP_SERVER_LOG_FILE\": \"/path/to/your/log/mcp_server_browser_use.log\",\n      }\n    }\n}\n```\n\n```json\n// Example 3: Advanced Configuration with User Data and custom chrome path\n\"mcpServers\": {\n    \"browser-use\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-browser-use@latest\"],\n      \"env\": {\n        \"MCP_LLM_OPENAI_API_KEY\": \"YOUR_KEY_HERE_IF_USING_OPENAI\",\n        \"MCP_LLM_PROVIDER\": \"openai\",\n        \"MCP_LLM_MODEL_NAME\": \"gpt-4.1-mini\",\n        \"MCP_LLM_TEMPERATURE\": \"0.2\",\n\n        \"MCP_BROWSER_HEADLESS\": \"false\",\n\n        \"MCP_BROWSER_BINARY_PATH\": \"/path/to/your/chrome/binary\",\n        \"MCP_BROWSER_USER_DATA_DIR\": \"/path/to/your/user/data\",\n        \"MCP_BROWSER_DISABLE_SECURITY\": \"true\",\n        \"MCP_BROWSER_KEEP_OPEN\": \"true\",\n        \"MCP_BROWSER_TRACE_PATH\": \"/path/to/your/trace\",\n\n        \"MCP_AGENT_TOOL_HISTORY_PATH\": \"/path/to/your/history\",\n\n        \"MCP_SERVER_LOGGING_LEVEL\": \"DEBUG\",\n        \"MCP_SERVER_LOG_FILE\": \"/path/to/your/log/mcp_server_browser_use.log\",\n      }\n    }\n}\n```\n\n```json\n// Example 4: Local Development Flow\n\"mcpServers\": {\n    \"browser-use\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/your/dev/path\",\n        \"run\",\n        \"mcp-server-browser-use\"\n      ],\n      \"env\": {\n        \"MCP_LLM_OPENROUTER_API_KEY\": \"YOUR_KEY_HERE_IF_USING_OPENROUTER\",\n        \"MCP_LLM_PROVIDER\": \"openrouter\",\n        \"MCP_LLM_MODEL_NAME\": \"openai/gpt-4o-mini\",\n        \"MCP_BROWSER_HEADLESS\": \"true\",\n      }\n    }\n}\n```\n\n**Key Insight:** The best configurations emerge from starting simple (Example 1). The .env.example file contains all possible dials.\n\n## MCP Tools\n\nThis server exposes the following tools via the Model Context Protocol:\n\n### Synchronous Tools (Wait for Completion)\n\n1.  **`run_browser_agent`**\n    *   **Description:** Executes a browser automation task based on natural language instructions and waits for it to complete. Uses settings from `MCP_AGENT_TOOL_*`, `MCP_LLM_*`, and `MCP_BROWSER_*` environment variables.\n    *   **Arguments:**\n        *   `task` (string, required): The primary task or objective.\n    *   **Returns:** (string) The final result extracted by the agent or an error message. Agent history (JSON, optional GIF) saved if `MCP_AGENT_TOOL_HISTORY_PATH` is set.\n\n2.  **`run_deep_research`**\n    *   **Description:** Performs in-depth web research on a topic, generates a report, and waits for completion. Uses settings from `MCP_RESEARCH_TOOL_*`, `MCP_LLM_*`, and `MCP_BROWSER_*` environment variables. If `MCP_RESEARCH_TOOL_SAVE_DIR` is set, outputs are saved to a subdirectory within it; otherwise, operates in memory-only mode.\n    *   **Arguments:**\n        *   `research_task` (string, required): The topic or question for the research.\n        *   `max_parallel_browsers` (integer, optional): Overrides `MCP_RESEARCH_TOOL_MAX_PARALLEL_BROWSERS` from environment.\n    *   **Returns:** (string) The generated research report in Markdown format, including the file path (if saved), or an error message.\n\n## CLI Usage\n\nThis package also provides a command-line interface `mcp-browser-cli` for direct testing and scripting.\n\n**Global Options:**\n*   `--env-file PATH, -e PATH`: Path to a `.env` file to load configurations from.\n*   `--log-level LEVEL, -l LEVEL`: Override the logging level (e.g., `DEBUG`, `INFO`).\n\n**Commands:**\n\n1.  **`mcp-browser-cli run-browser-agent [OPTIONS] TASK`**\n    *   **Description:** Runs a browser agent task.\n    *   **Arguments:**\n        *   `TASK` (string, required): The primary task for the agent.\n    *   **Example:**\n        ```bash\n        mcp-browser-cli run-browser-agent \"Go to example.com and find the title.\" -e .env\n        ```\n\n2.  **`mcp-browser-cli run-deep-research [OPTIONS] RESEARCH_TASK`**\n    *   **Description:** Performs deep web research.\n    *   **Arguments:**\n        *   `RESEARCH_TASK` (string, required): The topic or question for research.\n    *   **Options:**\n        *   `--max-parallel-browsers INTEGER, -p INTEGER`: Override `MCP_RESEARCH_TOOL_MAX_PARALLEL_BROWSERS`.\n    *   **Example:**\n        ```bash\n        mcp-browser-cli run-deep-research \"What are the latest advancements in AI-driven browser automation?\" --max-parallel-browsers 5 -e .env\n        ```\n\nAll other configurations (LLM keys, paths, browser settings) are picked up from environment variables (or the specified `.env` file) as detailed in the Configuration section.\n\n## Configuration (Environment Variables)\n\nConfigure the server and CLI using environment variables. You can set these in your system or place them in a `.env` file in the project root (use `--env-file` for CLI). Variables are structured with prefixes.\n\n| Variable Group (Prefix)             | Example Variable                               | Description                                                                                                | Default Value                     |\n| :---------------------------------- | :--------------------------------------------- | :--------------------------------------------------------------------------------------------------------- | :-------------------------------- |\n| **Main LLM (MCP_LLM_)**             |                                                | Settings for the primary LLM used by agents.                                                               |                                   |\n|                                     | `MCP_LLM_PROVIDER`                             | LLM provider. Options: `openai`, `azure_openai`, `anthropic`, `google`, `mistral`, `ollama`, etc.         | `openai`                          |\n|                                     | `MCP_LLM_MODEL_NAME`                           | Specific model name for the provider.                                                                      | `gpt-4.1`                         |\n|                                     | `MCP_LLM_TEMPERATURE`                          | LLM temperature (0.0-2.0).                                                                                 | `0.0`                             |\n|                                     | `MCP_LLM_BASE_URL`                             | Optional: Generic override for LLM provider's base URL.                                                    | Provider-specific                 |\n|                                     | `MCP_LLM_API_KEY`                              | Optional: Generic LLM API key (takes precedence).                                                          | -                                 |\n|                                     | `MCP_LLM_OPENAI_API_KEY`                       | API Key for OpenAI (if provider is `openai`).                                                              | -                                 |\n|                                     | `MCP_LLM_ANTHROPIC_API_KEY`                    | API Key for Anthropic.                                                                                     | -                                 |\n|                                     | `MCP_LLM_GOOGLE_API_KEY`                       | API Key for Google AI (Gemini).                                                                            | -                                 |\n|                                     | `MCP_LLM_AZURE_OPENAI_API_KEY`                 | API Key for Azure OpenAI.                                                                                  | -                                 |\n|                                     | `MCP_LLM_AZURE_OPENAI_ENDPOINT`                | **Required if using Azure.** Your Azure resource endpoint.                                                 | -                                 |\n|                                     | `MCP_LLM_OLLAMA_ENDPOINT`                      | Ollama API endpoint URL.                                                                                   | `http://localhost:11434`          |\n|                                     | `MCP_LLM_OLLAMA_NUM_CTX`                       | Context window size for Ollama models.                                                                     | `32000`                           |\n| **Planner LLM (MCP_LLM_PLANNER_)**  |                                                | Optional: Settings for a separate LLM for agent planning. Defaults to Main LLM if not set.                |                                   |\n|                                     | `MCP_LLM_PLANNER_PROVIDER`                     | Planner LLM provider.                                                                                      | Main LLM Provider                 |\n|                                     | `MCP_LLM_PLANNER_MODEL_NAME`                   | Planner LLM model name.                                                                                    | Main LLM Model                    |\n| **Browser (MCP_BROWSER_)**          |                                                | General browser settings.                                                                                  |                                   |\n|                                     | `MCP_BROWSER_HEADLESS`                         | Run browser without UI (general setting).                                                                  | `false`                           |\n|                                     | `MCP_BROWSER_DISABLE_SECURITY`                 | Disable browser security features (general setting, use cautiously).                                       | `false`                           |\n|                                     | `MCP_BROWSER_BINARY_PATH`                      | Path to Chrome/Chromium executable.                                                                        | -                                 |\n|                                     | `MCP_BROWSER_USER_DATA_DIR`                    | Path to Chrome user data directory.                                                                        | -                                 |\n|                                     | `MCP_BROWSER_WINDOW_WIDTH`                     | Browser window width (pixels).                                                                             | `1280`                            |\n|                                     | `MCP_BROWSER_WINDOW_HEIGHT`                    | Browser window height (pixels).                                                                            | `1080`                            |\n|                                     | `MCP_BROWSER_USE_OWN_BROWSER`                  | Connect to user's browser via CDP URL.                                                                     | `false`                           |\n|                                     | `MCP_BROWSER_CDP_URL`                          | CDP URL (e.g., `http://localhost:9222`). Required if `MCP_BROWSER_USE_OWN_BROWSER=true`.                  | -                                 |\n|                                     | `MCP_BROWSER_KEEP_OPEN`                        | Keep server-managed browser open between MCP calls (if `MCP_BROWSER_USE_OWN_BROWSER=false`).               | `false`                           |\n|                                     | `MCP_BROWSER_TRACE_PATH`                       | Optional: Directory to save Playwright trace files. If not set, tracing to file is disabled.               | ` ` (empty, tracing disabled)     |\n| **Agent Tool (MCP_AGENT_TOOL_)**    |                                                | Settings for the `run_browser_agent` tool.                                                                 |                                   |\n|                                     | `MCP_AGENT_TOOL_MAX_STEPS`                     | Max steps per agent run.                                                                                   | `100`                             |\n|                                     | `MCP_AGENT_TOOL_MAX_ACTIONS_PER_STEP`          | Max actions per agent step.                                                                                | `5`                               |\n|                                     | `MCP_AGENT_TOOL_TOOL_CALLING_METHOD`           | Method for tool invocation ('auto', 'json_schema', 'function_calling').                                    | `auto`                            |\n|                                     | `MCP_AGENT_TOOL_MAX_INPUT_TOKENS`              | Max input tokens for LLM context.                                                                          | `128000`                          |\n|                                     | `MCP_AGENT_TOOL_USE_VISION`                    | Enable vision capabilities (screenshot analysis).                                                          | `true`                            |\n|                                     | `MCP_AGENT_TOOL_HEADLESS`                      | Override `MCP_BROWSER_HEADLESS` for this tool (true/false/empty).                                          | ` ` (uses general)                |\n|                                     | `MCP_AGENT_TOOL_DISABLE_SECURITY`              | Override `MCP_BROWSER_DISABLE_SECURITY` for this tool (true/false/empty).                                  | ` ` (uses general)                |\n|                                     | `MCP_AGENT_TOOL_ENABLE_RECORDING`              | Enable Playwright video recording.                                                                         | `false`                           |\n|                                     | `MCP_AGENT_TOOL_SAVE_RECORDING_PATH`           | Optional: Path to save recordings. If not set, recording to file is disabled even if `ENABLE_RECORDING=true`. | ` ` (empty, recording disabled)   |\n|                                     | `MCP_AGENT_TOOL_HISTORY_PATH`                  | Optional: Directory to save agent history JSON files. If not set, history saving is disabled.              | ` ` (empty, history saving disabled) |\n| **Research Tool (MCP_RESEARCH_TOOL_)** |                                             | Settings for the `run_deep_research` tool.                                                                 |                                   |\n|                                     | `MCP_RESEARCH_TOOL_MAX_PARALLEL_BROWSERS`      | Max parallel browser instances for deep research.                                                          | `3`                               |\n|                                     | `MCP_RESEARCH_TOOL_SAVE_DIR`                   | Optional: Base directory to save research artifacts. Task ID will be appended. If not set, operates in memory-only mode. | `None`                           |\n| **Paths (MCP_PATHS_)**              |                                                | General path settings.                                                                                     |                                   |\n|                                     | `MCP_PATHS_DOWNLOADS`                          | Optional: Directory for downloaded files. If not set, persistent downloads to a specific path are disabled.  | ` ` (empty, downloads disabled)  |\n| **Server (MCP_SERVER_)**            |                                                | Server-specific settings.                                                                                  |                                   |\n|                                     | `MCP_SERVER_LOG_FILE`                          | Path for the server log file. Empty for stdout.                                                            | ` ` (empty, logs to stdout)       |\n|                                     | `MCP_SERVER_LOGGING_LEVEL`                     | Logging level (`DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`).                                           | `ERROR`                           |\n|                                     | `MCP_SERVER_ANONYMIZED_TELEMETRY`              | Enable/disable anonymized telemetry (`true`/`false`).                                                      | `true`                            |\n|                                     | `MCP_SERVER_MCP_CONFIG`                        | Optional: JSON string for MCP client config used by the internal controller.                               | `null`                            |\n\n**Supported LLM Providers (`MCP_LLM_PROVIDER`):**\n`openai`, `azure_openai`, `anthropic`, `google`, `mistral`, `ollama`, `deepseek`, `openrouter`, `alibaba`, `moonshot`, `unbound`\n\n*(Refer to `.env.example` for a comprehensive list of all supported environment variables and their specific provider keys/endpoints.)*\n\n## Connecting to Your Own Browser (CDP)\n\nInstead of having the server launch and manage its own browser instance, you can connect it to a Chrome/Chromium browser that you launch and manage yourself.\n\n**Steps:**\n\n1.  **Launch Chrome/Chromium with Remote Debugging Enabled:**\n    (Commands for macOS, Linux, Windows as previously listed, e.g., `google-chrome --remote-debugging-port=9222`)\n\n2.  **Configure Environment Variables:**\n    Set the following environment variables:\n    ```dotenv\n    MCP_BROWSER_USE_OWN_BROWSER=true\n    MCP_BROWSER_CDP_URL=http://localhost:9222 # Use the same port\n    # Optional: MCP_BROWSER_USER_DATA_DIR=/path/to/your/profile\n    ```\n\n3.  **Run the MCP Server or CLI:**\n    Start the server (`uv run mcp-server-browser-use`) or CLI (`mcp-browser-cli ...`) as usual.\n\n**Important Considerations:**\n*   The browser launched with `--remote-debugging-port` must remain open.\n*   Settings like `MCP_BROWSER_HEADLESS` and `MCP_BROWSER_KEEP_OPEN` are ignored when `MCP_BROWSER_USE_OWN_BROWSER=true`.\n\n## Development\n\n```bash\n# Install dev dependencies and sync project deps\nuv sync --dev\n\n# Install playwright browsers\nuv run playwright install\n\n# Run MCP server with debugger (Example connecting to own browser via CDP)\n# 1. Launch Chrome: google-chrome --remote-debugging-port=9222 --user-data-dir=\"optional/path/to/user/profile\"\n# 2. Run inspector command with environment variables:\nnpx @modelcontextprotocol/inspector@latest \\\n  -e MCP_LLM_GOOGLE_API_KEY=$GOOGLE_API_KEY \\\n  -e MCP_LLM_PROVIDER=google \\\n  -e MCP_LLM_MODEL_NAME=gemini-2.5-flash-preview-04-17 \\\n  -e MCP_BROWSER_USE_OWN_BROWSER=true \\\n  -e MCP_BROWSER_CDP_URL=http://localhost:9222 \\\n  -e MCP_RESEARCH_TOOL_SAVE_DIR=./tmp/dev_research_output \\\n  uv --directory . run mcp-server-browser-use\n\n# Note: Change timeout in inspector's config panel if needed (default is 10 seconds)\n\n# Run CLI example\n# Create a .env file with your settings (including MCP_RESEARCH_TOOL_SAVE_DIR) or use environment variables\nuv run mcp-browser-cli -e .env run-browser-agent \"What is the title of example.com?\"\nuv run mcp-browser-cli -e .env run-deep-research \"What is the best material for a pan for everyday use on amateur kitchen and dishwasher?\"\n```\n\n## Troubleshooting\n\n-   **Configuration Error on Startup**: If the application fails to start with an error about a missing setting, ensure all **mandatory** environment variables (like `MCP_RESEARCH_TOOL_SAVE_DIR`) are set correctly in your environment or `.env` file.\n-   **Browser Conflicts**: If *not* using CDP (`MCP_BROWSER_USE_OWN_BROWSER=false`), ensure no conflicting Chrome instances are running with the same user data directory if `MCP_BROWSER_USER_DATA_DIR` is specified.\n-   **CDP Connection Issues**: If using `MCP_BROWSER_USE_OWN_BROWSER=true`:\n    *   Verify Chrome was launched with `--remote-debugging-port`.\n    *   Ensure the port in `MCP_BROWSER_CDP_URL` matches.\n    *   Check firewalls and ensure the browser is running.\n-   **API Errors**: Double-check API keys (`MCP_LLM_<PROVIDER>_API_KEY` or `MCP_LLM_API_KEY`) and endpoints (e.g., `MCP_LLM_AZURE_OPENAI_ENDPOINT` for Azure).\n-   **Vision Issues**: Ensure `MCP_AGENT_TOOL_USE_VISION=true` and your LLM supports vision.\n-   **Dependency Problems**: Run `uv sync` and `uv run playwright install`.\n-   **File/Path Issues**:\n    *   If optional features like history saving, tracing, or downloads are not working, ensure the corresponding path variables (`MCP_AGENT_TOOL_HISTORY_PATH`, `MCP_BROWSER_TRACE_PATH`, `MCP_PATHS_DOWNLOADS`) are set and the application has write permissions to those locations.\n    *   For deep research, ensure `MCP_RESEARCH_TOOL_SAVE_DIR` is set to a valid, writable directory.\n-   **Logging**: Check the log file (`MCP_SERVER_LOG_FILE`, if set) or console output. Increase `MCP_SERVER_LOGGING_LEVEL` to `DEBUG` for more details. For CLI, use `--log-level DEBUG`.\n\n## License\n\nMIT - See [LICENSE](LICENSE) for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "browser",
        "browsers",
        "automation",
        "browser automation",
        "automation web",
        "web browsers"
      ],
      "category": "browser-automation"
    },
    "Scrapybara--scrapybara-mcp": {
      "owner": "Scrapybara",
      "name": "scrapybara-mcp",
      "url": "https://github.com/Scrapybara/scrapybara-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Scrapybara.webp",
      "description": "Facilitates interaction with virtual Ubuntu desktops, enabling code execution, web browsing, and various actions through an intuitive interface. Supports real-time operations to enhance MCP client capabilities.",
      "stars": 17,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-13T16:42:25Z",
      "readme_content": "<div id=\"toc\" align=\"center\">\n  <ul style=\"list-style: none\">\n    <summary>\n      <h1> Scrapybara MCP </h1>\n    </summary>\n  </ul>\n</div>\n\n<p align=\"center\">\n  <a href=\"https://github.com/scrapybara/scrapybara-playground/blob/main/license\"><img alt=\"MIT License\" src=\"https://img.shields.io/badge/license-MIT-blue\" /></a>\n  <a href=\"https://discord.gg/s4bPUVFXqA\"><img alt=\"Discord\" src=\"https://img.shields.io/badge/Discord-Join%20the%20community-6D1CCF.svg?logo=discord\" /></a>\n  <a href=\"https://x.com/scrapybara\"><img alt=\"X\" src=\"https://img.shields.io/badge/Twitter-Follow%20us-6D1CCF.svg?logo=X\" /></a>\n\nA Model Context Protocol server for [Scrapybara](https://scrapybara.com). This server enables MCP clients such as [Claude Desktop](https://claude.ai/download), [Cursor](https://www.cursor.com/), and [Windsurf](https://codeium.com/windsurf) to interact with virtual Ubuntu desktops and take actions such as browsing the web, running code, and more.\n\n## Prerequisites\n\n- Node.js 18+\n- pnpm\n- Scrapybara API key (get one at [scrapybara.com](https://scrapybara.com))\n\n## Installation\n\n1. Clone the repository:\n\n```bash\ngit clone https://github.com/scrapybara/scrapybara-mcp.git\ncd scrapybara-mcp\n```\n\n2. Install dependencies:\n\n```bash\npnpm install\n```\n\n3. Build the project:\n\n```bash\npnpm build\n```\n\n4. Add the following to your MCP client config:\n\n```json\n{\n  \"mcpServers\": {\n    \"scrapybara-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/scrapybara-mcp/dist/index.js\"],\n      \"env\": {\n        \"SCRAPYBARA_API_KEY\": \"<YOUR_SCRAPYBARA_API_KEY>\",\n        \"ACT_MODEL\": \"<YOUR_ACT_MODEL>\", // \"anthropic\" or \"openai\"\n        \"AUTH_STATE_ID\": \"<YOUR_AUTH_STATE_ID>\" // Optional, for authenticating the browser\n      }\n    }\n  }\n}\n```\n\n5. Restart your MCP client and you're good to go!\n\n## Tools\n\n- **start_instance** - Start a Scrapybara Ubuntu instance. Use it as a desktop sandbox to access the web or run code. Always present the stream URL to the user afterwards so they can watch the instance in real time.\n- **get_instances** - Get all running Scrapybara instances.\n- **stop_instance** - Stop a running Scrapybara instance.\n- **bash** - Run a bash command in a Scrapybara instance.\n- **act** - Take action on a Scrapybara instance through an agent. The agent can control the instance with mouse/keyboard and bash commands.\n\n## Contributing\n\nScrapybara MCP is a community-driven project. Whether you're submitting an idea, fixing a typo, adding a new tool, or improving an existing one, your contributions are greatly appreciated!\n\nBefore contributing, read through the existing issues and pull requests to see if someone else is already working on something similar. That way you can avoid duplicating efforts.\n\nIf there are more tools or features you'd like to see, feel free to suggest them on the [issues page](https://github.com/scrapybara/scrapybara-mcp/issues).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "scrapybara",
        "scraping",
        "automation",
        "scrapybara scrapybara",
        "browser automation",
        "scrapybara mcp"
      ],
      "category": "browser-automation"
    },
    "Skyvern-AI--skyvern": {
      "owner": "Skyvern-AI",
      "name": "skyvern",
      "url": "https://github.com/Skyvern-AI/skyvern",
      "imageUrl": "/freedevtools/mcp/pfp/Skyvern-AI.webp",
      "description": "Connect AI applications to the browser to automate tasks such as filling out forms, downloading files, and conducting web research. Supports both local setup with a preferred LLM and cloud functionality through an API.",
      "stars": 14518,
      "forks": 1234,
      "license": "GNU Affero General Public License v3.0",
      "language": "Python",
      "updated_at": "2025-10-03T07:26:14Z",
      "readme_content": "<!-- DOCTOC SKIP -->\n\n<h1 align=\"center\">\n <a href=\"https://www.skyvern.com\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"fern/images/skyvern_logo.png\"/>\n    \n  </picture>\n </a>\n <br />\n</h1>\n<p align=\"center\">\nüêâ Automate Browser-based workflows using LLMs and Computer Vision üêâ\n</p>\n<p align=\"center\">\n  <a href=\"https://www.skyvern.com/\"><img alt=\"Website_blue_logo_googlechrome_logoColor_black\" src=\"https://img.shields.io/badge/Website-blue?logo=googlechrome&logoColor=black\"/></a>\n  <a href=\"https://docs.skyvern.com/\"><img alt=\"Docs_yellow_logo_gitbook_logoColor_black\" src=\"https://img.shields.io/badge/Docs-yellow?logo=gitbook&logoColor=black\"/></a>\n  <a href=\"https://discord.gg/fG2XXEuQX3\"><img alt=\"1212486326352617534_logo_discord_label_discord\" src=\"https://img.shields.io/discord/1212486326352617534?logo=discord&label=discord\"/></a>\n  <!-- <a href=\"https://pepy.tech/project/skyvern\" target=\"_blank\"><img src=\"https://static.pepy.tech/badge/skyvern\" alt=\"Total Downloads\"/></a> -->\n  <a href=\"https://github.com/skyvern-ai/skyvern\"><img alt=\"skyvern\" src=\"https://img.shields.io/github/stars/skyvern-ai/skyvern\" /></a>\n  <a href=\"https://github.com/Skyvern-AI/skyvern/blob/main/LICENSE\"><img alt=\"skyvern\" src=\"https://img.shields.io/github/license/skyvern-ai/skyvern\"/></a>\n  <a href=\"https://twitter.com/skyvernai\"><img alt=\"skyvernai_style_social\" src=\"https://img.shields.io/twitter/follow/skyvernai?style=social\"/></a>\n  <a href=\"https://www.linkedin.com/company/95726232\"><img alt=\"Follow_on_LinkedIn_8A2BE2_logo_linkedin\" src=\"https://img.shields.io/badge/Follow%20 on%20LinkedIn-8A2BE2?logo=linkedin\"/></a>\n</p>\n\n[Skyvern](https://www.skyvern.com) automates browser-based workflows using LLMs and computer vision. It provides a simple API endpoint to fully automate manual workflows on a large number of websites, replacing brittle or unreliable automation solutions.\n\n<p align=\"center\">\n  \n</p>\n\nTraditional approaches to browser automations required writing custom scripts for websites, often relying on DOM parsing and XPath-based interactions which would break whenever the website layouts changed.\n\nInstead of only relying on code-defined XPath interactions, Skyvern relies on Vision LLMs to learn and interact with the websites.\n\n# How it works\nSkyvern was inspired by the Task-Driven autonomous agent design popularized by [BabyAGI](https://github.com/yoheinakajima/babyagi) and [AutoGPT](https://github.com/Significant-Gravitas/AutoGPT) -- with one major bonus: we give Skyvern the ability to interact with websites using browser automation libraries like [Playwright](https://playwright.dev/).\n\nSkyvern uses a swarm of agents to comprehend a website, and plan and execute its actions:\n\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"fern/images/skyvern_2_0_system_diagram.png\" />\n  \n</picture>\n\nThis approach has a few advantages:\n\n1. Skyvern can operate on websites it's never seen before, as it's able to map visual elements to actions necessary to complete a workflow, without any customized code\n1. Skyvern is resistant to website layout changes, as there are no pre-determined XPaths or other selectors our system is looking for while trying to navigate\n1. Skyvern is able to take a single workflow and apply it to a large number of websites, as it's able to reason through the interactions necessary to complete the workflow\n1. Skyvern leverages LLMs to reason through interactions to ensure we can cover complex situations. Examples include:\n    1. If you wanted to get an auto insurance quote from Geico, the answer to a common question \"Were you eligible to drive at 18?\" could be inferred from the driver receiving their license at age 16\n    1. If you were doing competitor analysis, it's understanding that an Arnold Palmer 22 oz can at 7/11 is almost definitely the same product as a 23 oz can at Gopuff (even though the sizes are slightly different, which could be a rounding error!)\n\nA detailed technical report can be found [here](https://blog.skyvern.com/skyvern-2-0-state-of-the-art-web-navigation-with-85-8-on-webvoyager-eval/).\n\n# Demo\n<!-- Redo demo -->\nhttps://github.com/user-attachments/assets/5cab4668-e8e2-4982-8551-aab05ff73a7f\n\n# Performance & Evaluation\n\nSkyvern has SOTA performance on the [WebBench benchmark](webbench.ai) with a 64.4% accuracy. The technical report + evaluation can be found [here](https://blog.skyvern.com/web-bench-a-new-way-to-compare-ai-browser-agents/)\n\n<p align=\"center\">\n  \n</p>\n\n## Performance on WRITE tasks (eg filling out forms, logging in, downloading files, etc)\n\nSkyvern is the best performing agent on WRITE tasks (eg filling out forms, logging in, downloading files, etc), which is primarily used for RPA (Robotic Process Automation) adjacent tasks.\n\n<p align=\"center\">\n  \n</p>\n\n# Quickstart\n\n## Skyvern Cloud\n[Skyvern Cloud](https://app.skyvern.com) is a managed cloud version of Skyvern that allows you to run Skyvern without worrying about the infrastructure. It allows you to run multiple Skyvern instances in parallel and comes bundled with anti-bot detection mechanisms, proxy network, and CAPTCHA solvers.\n\nIf you'd like to try it out, navigate to [app.skyvern.com](https://app.skyvern.com) and create an account.\n\n## Install & Run\n\nDependencies needed:\n- [Python 3.11.x](https://www.python.org/downloads/), works with 3.12, not ready yet for 3.13\n- [NodeJS & NPM](https://nodejs.org/en/download/)\n\nAdditionally, for Windows:\n- [Rust](https://rustup.rs/)\n- VS Code with C++ dev tools and Windows SDK\n\n### 1. Install Skyvern\n\n```bash\npip install skyvern\n```\n\n### 2. Run Skyvern\nThis is most helpful for first time run (db setup, db migrations etc).\n\n```bash\nskyvern quickstart\n```\n\n### 3. Run task\n\n#### UI (Recommended)\n\nStart the Skyvern service and UI (when DB is up and running)\n\n```bash\nskyvern run all\n```\n\nGo to http://localhost:8080 and use the UI to run a task\n\n#### Code\n\n```python\nfrom skyvern import Skyvern\n\nskyvern = Skyvern()\ntask = await skyvern.run_task(prompt=\"Find the top post on hackernews today\")\nprint(task)\n```\nSkyvern starts running the task in a browser that pops up and closes it when the task is done. You will be able to view the task from http://localhost:8080/history\n\nYou can also run a task on different targets:\n```python\nfrom skyvern import Skyvern\n\n# Run on Skyvern Cloud\nskyvern = Skyvern(api_key=\"SKYVERN API KEY\")\n\n# Local Skyvern service\nskyvern = Skyvern(base_url=\"http://localhost:8000\", api_key=\"LOCAL SKYVERN API KEY\")\n\ntask = await skyvern.run_task(prompt=\"Find the top post on hackernews today\")\nprint(task)\n```\n\n## Advanced Usage\n\n### Control your own browser (Chrome)\n> ‚ö†Ô∏è WARNING: Since [Chrome 136](https://developer.chrome.com/blog/remote-debugging-port), Chrome refuses any CDP connect to the browser using the default user_data_dir. In order to use your browser data, Skyvern copies your default user_data_dir to `./tmp/user_data_dir` the first time connecting to your local browser. ‚ö†Ô∏è\n\n1. Just With Python Code\n```python\nfrom skyvern import Skyvern\n\n# The path to your Chrome browser. This example path is for Mac.\nbrowser_path = \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"\nskyvern = Skyvern(\n    base_url=\"http://localhost:8000\",\n    api_key=\"YOUR_API_KEY\",\n    browser_path=browser_path,\n)\ntask = await skyvern.run_task(\n    prompt=\"Find the top post on hackernews today\",\n)\n```\n\n2. With Skyvern Service\n\nAdd two variables to your .env file:\n```bash\n# The path to your Chrome browser. This example path is for Mac.\nCHROME_EXECUTABLE_PATH=\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"\nBROWSER_TYPE=cdp-connect\n```\n\nRestart Skyvern service `skyvern run all` and run the task through UI or code\n\n### Run Skyvern with any remote browser\nGrab the cdp connection url and pass it to Skyvern\n\n```python\nfrom skyvern import Skyvern\n\nskyvern = Skyvern(cdp_url=\"your cdp connection url\")\ntask = await skyvern.run_task(\n    prompt=\"Find the top post on hackernews today\",\n)\n```\n\n### Get consistent output schema from your run\nYou can do this by adding the `data_extraction_schema` parameter:\n```python\nfrom skyvern import Skyvern\n\nskyvern = Skyvern()\ntask = await skyvern.run_task(\n    prompt=\"Find the top post on hackernews today\",\n    data_extraction_schema={\n        \"type\": \"object\",\n        \"properties\": {\n            \"title\": {\n                \"type\": \"string\",\n                \"description\": \"The title of the top post\"\n            },\n            \"url\": {\n                \"type\": \"string\",\n                \"description\": \"The URL of the top post\"\n            },\n            \"points\": {\n                \"type\": \"integer\",\n                \"description\": \"Number of points the post has received\"\n            }\n        }\n    }\n)\n```\n\n### Helpful commands to debug issues\n\n\n```bash\n# Launch the Skyvern Server Separately*\nskyvern run server\n\n# Launch the Skyvern UI\nskyvern run ui\n\n# Check status of the Skyvern service\nskyvern status\n\n# Stop the Skyvern service\nskyvern stop all\n\n# Stop the Skyvern UI\nskyvern stop ui\n\n# Stop the Skyvern Server Separately\nskyvern stop server\n```\n\n## Docker Compose setup\n\n1. Make sure you have [Docker Desktop](https://www.docker.com/products/docker-desktop/) installed and running on your machine\n1. Make sure you don't have postgres running locally (Run `docker ps` to check)\n1. Clone the repository and navigate to the root directory\n1. Run `skyvern init llm` to generate a `.env` file. This will be copied into the Docker image.\n1. Fill in the LLM provider key on the [docker-compose.yml](./docker-compose.yml). *If you want to run Skyvern on a remote server, make sure you set the correct server ip for the UI container in [docker-compose.yml](./docker-compose.yml).*\n2. Run the following command via the commandline:\n   ```bash\n    docker compose up -d\n   ```\n3. Navigate to `http://localhost:8080` in your browser to start using the UI\n\n> **Important:** Only one Postgres container can run on port 5432 at a time. If you switch from the CLI-managed Postgres to Docker Compose, you must first remove the original container:\n> ```bash\n> docker rm -f postgresql-container\n> ```\n\nIf you encounter any database related errors while using Docker to run Skyvern, check which Postgres container is running with `docker ps`.\n\n\n\n# Skyvern Features\n\n## Skyvern Tasks\nTasks are the fundamental building block inside Skyvern. Each task is a single request to Skyvern, instructing it to navigate through a website and accomplish a specific goal.\n\nTasks require you to specify a `url`, `prompt`, and can optionally include a `data schema` (if you want the output to conform to a specific schema) and `error codes` (if you want Skyvern to stop running in specific situations).\n\n<p align=\"center\">\n  \n</p>\n\n\n## Skyvern Workflows\nWorkflows are a way to chain multiple tasks together to form a cohesive unit of work.\n\nFor example, if you wanted to download all invoices newer than January 1st, you could create a workflow that first navigated to the invoices page, then filtered down to only show invoices newer than January 1st, extracted a list of all eligible invoices, and iterated through each invoice to download it.\n\nAnother example is if you wanted to automate purchasing products from an e-commerce store, you could create a workflow that first navigated to the desired product, then added it to a cart. Second, it would navigate to the cart and validate the cart state. Finally, it would go through the checkout process to purchase the items.\n\nSupported workflow features include:\n1. Browser Task\n1. Browser Action\n1. Data Extraction\n1. Validation\n1. For Loops\n1. File parsing\n1. Sending emails\n1. Text Prompts\n1. HTTP Request Block\n1. Custom Code Block\n1. Uploading files to block storage\n1. (Coming soon) Conditionals\n\n<p align=\"center\">\n  \n</p>\n\n## Livestreaming\nSkyvern allows you to livestream the viewport of the browser to your local machine so that you can see exactly what Skyvern is doing on the web. This is useful for debugging and understanding how Skyvern is interacting with a website, and intervening when necessary\n\n## Form Filling\nSkyvern is natively capable of filling out form inputs on websites. Passing in information via the `navigation_goal` will allow Skyvern to comprehend the information and fill out the form accordingly.\n\n## Data Extraction\nSkyvern is also capable of extracting data from a website.\n\nYou can also specify a `data_extraction_schema` directly within the main prompt to tell Skyvern exactly what data you'd like to extract from the website, in jsonc format. Skyvern's output will be structured in accordance to the supplied schema.\n\n## File Downloading\nSkyvern is also capable of downloading files from a website. All downloaded files are automatically uploaded to block storage (if configured), and you can access them via the UI.\n\n## Authentication\nSkyvern supports a number of different authentication methods to make it easier to automate tasks behind a login. If you'd like to try it out, please reach out to us [via email](mailto:founders@skyvern.com) or [discord](https://discord.gg/fG2XXEuQX3).\n\n<p align=\"center\">\n  \n</p>\n\n\n### üîê 2FA Support (TOTP)\nSkyvern supports a number of different 2FA methods to allow you to automate workflows that require 2FA.\n\nExamples include:\n1. QR-based 2FA (e.g. Google Authenticator, Authy)\n1. Email based 2FA\n1. SMS based 2FA\n\nüîê Learn more about 2FA support [here](https://docs.skyvern.com/credentials/totp).\n\n### Password Manager Integrations\nSkyvern currently supports the following password manager integrations:\n- [x] Bitwarden\n- [ ] 1Password\n- [ ] LastPass\n\n\n## Model Context Protocol (MCP)\nSkyvern supports the Model Context Protocol (MCP) to allow you to use any LLM that supports MCP.\n\nSee the MCP documentation [here](https://github.com/Skyvern-AI/skyvern/blob/main/integrations/mcp/README.md)\n\n## Zapier / Make.com / N8N Integration\nSkyvern supports Zapier, Make.com, and N8N to allow you to connect your Skyvern workflows to other apps.\n\n* [Zapier](https://docs.skyvern.com/integrations/zapier)\n* [Make.com](https://docs.skyvern.com/integrations/make.com)\n* [N8N](https://docs.skyvern.com/integrations/n8n)\n\nüîê Learn more about 2FA support [here](https://docs.skyvern.com/credentials/totp).\n\n\n# Real-world examples of Skyvern\nWe love to see how Skyvern is being used in the wild. Here are some examples of how Skyvern is being used to automate workflows in the real world. Please open PRs to add your own examples!\n\n## Invoice Downloading on many different websites\n[Book a demo to see it live](https://meetings.hubspot.com/skyvern/demo)\n\n<p align=\"center\">\n  \n</p>\n\n## Automate the job application process\n[üí° See it in action](https://app.skyvern.com/tasks/create/job_application)\n<p align=\"center\">\n  \n</p>\n\n## Automate materials procurement for a manufacturing company\n[üí° See it in action](https://app.skyvern.com/tasks/create/finditparts)\n<p align=\"center\">\n  \n</p>\n\n## Navigating to government websites to register accounts or fill out forms\n[üí° See it in action](https://app.skyvern.com/tasks/create/california_edd)\n<p align=\"center\">\n  \n</p>\n<!-- Add example of delaware entity lookups x2 -->\n\n## Filling out random contact us forms\n[üí° See it in action](https://app.skyvern.com/tasks/create/contact_us_forms)\n<p align=\"center\">\n  \n</p>\n\n\n## Retrieving insurance quotes from insurance providers in any language\n[üí° See it in action](https://app.skyvern.com/tasks/create/bci_seguros)\n<p align=\"center\">\n  \n</p>\n\n[üí° See it in action](https://app.skyvern.com/tasks/create/geico)\n\n<p align=\"center\">\n  \n</p>\n\n# Contributor Setup\nMake sure to have [uv](https://docs.astral.sh/uv/getting-started/installation/) installed.\n1. Run this to create your virtual environment (`.venv`)\n    ```bash\n    uv sync --group dev\n    ```\n2. Perform initial server configuration\n    ```bash\n    uv run skyvern quickstart\n    ```\n3. Navigate to `http://localhost:8080` in your browser to start using the UI\n   *The Skyvern CLI supports Windows, WSL, macOS, and Linux environments.*\n\n# Documentation\n\nMore extensive documentation can be found on our [üìï docs page](https://docs.skyvern.com). Please let us know if something is unclear or missing by opening an issue or reaching out to us [via email](mailto:founders@skyvern.com) or [discord](https://discord.gg/fG2XXEuQX3).\n\n# Supported LLMs\n| Provider | Supported Models |\n| -------- | ------- |\n| OpenAI   | gpt4-turbo, gpt-4o, gpt-4o-mini |\n| Anthropic | Claude 3 (Haiku, Sonnet, Opus), Claude 3.5 (Sonnet) |\n| Azure OpenAI | Any GPT models. Better performance with a multimodal llm (azure/gpt4-o) |\n| AWS Bedrock | Anthropic Claude 3 (Haiku, Sonnet, Opus), Claude 3.5 (Sonnet) |\n| Gemini | Gemini 2.5 Pro and flash, Gemini 2.0 |\n| Ollama | Run any locally hosted model via [Ollama](https://github.com/ollama/ollama) |\n| OpenRouter | Access models through [OpenRouter](https://openrouter.ai) |\n| OpenAI-compatible | Any custom API endpoint that follows OpenAI's API format (via [liteLLM](https://docs.litellm.ai/docs/providers/openai_compatible)) |\n\n#### Environment Variables\n\n##### OpenAI\n| Variable | Description| Type | Sample Value|\n| -------- | ------- | ------- | ------- |\n| `ENABLE_OPENAI`| Register OpenAI models | Boolean | `true`, `false` |\n| `OPENAI_API_KEY` | OpenAI API Key | String | `sk-1234567890` |\n| `OPENAI_API_BASE` | OpenAI API Base, optional | String | `https://openai.api.base` |\n| `OPENAI_ORGANIZATION` | OpenAI Organization ID, optional | String | `your-org-id` |\n\nRecommended `LLM_KEY`: `OPENAI_GPT4O`, `OPENAI_GPT4O_MINI`, `OPENAI_GPT4_1`, `OPENAI_O4_MINI`, `OPENAI_O3`\n\n##### Anthropic\n| Variable | Description| Type | Sample Value|\n| -------- | ------- | ------- | ------- |\n| `ENABLE_ANTHROPIC` | Register Anthropic models| Boolean | `true`, `false` |\n| `ANTHROPIC_API_KEY` | Anthropic API key| String | `sk-1234567890` |\n\nRecommended`LLM_KEY`: `ANTHROPIC_CLAUDE3.5_SONNET`, `ANTHROPIC_CLAUDE3.7_SONNET`, `ANTHROPIC_CLAUDE4_OPUS`, `ANTHROPIC_CLAUDE4_SONNET`\n\n##### Azure OpenAI\n| Variable | Description| Type | Sample Value|\n| -------- | ------- | ------- | ------- |\n| `ENABLE_AZURE` | Register Azure OpenAI models | Boolean | `true`, `false` |\n| `AZURE_API_KEY` | Azure deployment API key | String | `sk-1234567890` |\n| `AZURE_DEPLOYMENT` | Azure OpenAI Deployment Name | String | `skyvern-deployment`|\n| `AZURE_API_BASE` | Azure deployment api base url| String | `https://skyvern-deployment.openai.azure.com/`|\n| `AZURE_API_VERSION` | Azure API Version| String | `2024-02-01`|\n\nRecommended `LLM_KEY`: `AZURE_OPENAI`\n\n##### AWS Bedrock\n| Variable | Description| Type | Sample Value|\n| -------- | ------- | ------- | ------- |\n| `ENABLE_BEDROCK` | Register AWS Bedrock models. To use AWS Bedrock, you need to make sure your [AWS configurations](https://github.com/boto/boto3?tab=readme-ov-file#using-boto3) are set up correctly first. | Boolean | `true`, `false` |\n\nRecommended `LLM_KEY`: `BEDROCK_ANTHROPIC_CLAUDE3.7_SONNET_INFERENCE_PROFILE`, `BEDROCK_ANTHROPIC_CLAUDE4_OPUS_INFERENCE_PROFILE`, `BEDROCK_ANTHROPIC_CLAUDE4_SONNET_INFERENCE_PROFILE`\n\n##### Gemini\n| Variable | Description| Type | Sample Value|\n| -------- | ------- | ------- | ------- |\n| `ENABLE_GEMINI` | Register Gemini models| Boolean | `true`, `false` |\n| `GEMINI_API_KEY` | Gemini API Key| String | `your_google_gemini_api_key`|\n\nRecommended `LLM_KEY`: `GEMINI_2.5_PRO_PREVIEW`, `GEMINI_2.5_FLASH_PREVIEW`\n\n##### Ollama\n| Variable | Description| Type | Sample Value|\n| -------- | ------- | ------- | ------- |\n| `ENABLE_OLLAMA`| Register local models via Ollama | Boolean | `true`, `false` |\n| `OLLAMA_SERVER_URL` | URL for your Ollama server | String | `http://host.docker.internal:11434` |\n| `OLLAMA_MODEL` | Ollama model name to load | String | `qwen2.5:7b-instruct` |\n\nRecommended `LLM_KEY`: `OLLAMA`\n\nNote: Ollama does not support vision yet.\n\n##### OpenRouter\n| Variable | Description| Type | Sample Value|\n| -------- | ------- | ------- | ------- |\n| `ENABLE_OPENROUTER`| Register OpenRouter models | Boolean | `true`, `false` |\n| `OPENROUTER_API_KEY` | OpenRouter API key | String | `sk-1234567890` |\n| `OPENROUTER_MODEL` | OpenRouter model name | String | `mistralai/mistral-small-3.1-24b-instruct` |\n| `OPENROUTER_API_BASE` | OpenRouter API base URL | String | `https://api.openrouter.ai/v1` |\n\nRecommended `LLM_KEY`: `OPENROUTER`\n\n##### OpenAI-Compatible\n| Variable | Description| Type | Sample Value|\n| -------- | ------- | ------- | ------- |\n| `ENABLE_OPENAI_COMPATIBLE`| Register a custom OpenAI-compatible API endpoint | Boolean | `true`, `false` |\n| `OPENAI_COMPATIBLE_MODEL_NAME` | Model name for OpenAI-compatible endpoint | String | `yi-34b`, `gpt-3.5-turbo`, `mistral-large`, etc.|\n| `OPENAI_COMPATIBLE_API_KEY` | API key for OpenAI-compatible endpoint | String | `sk-1234567890`|\n| `OPENAI_COMPATIBLE_API_BASE` | Base URL for OpenAI-compatible endpoint | String | `https://api.together.xyz/v1`, `http://localhost:8000/v1`, etc.|\n| `OPENAI_COMPATIBLE_API_VERSION` | API version for OpenAI-compatible endpoint, optional| String | `2023-05-15`|\n| `OPENAI_COMPATIBLE_MAX_TOKENS` | Maximum tokens for completion, optional| Integer | `4096`, `8192`, etc.|\n| `OPENAI_COMPATIBLE_TEMPERATURE` | Temperature setting, optional| Float | `0.0`, `0.5`, `0.7`, etc.|\n| `OPENAI_COMPATIBLE_SUPPORTS_VISION` | Whether model supports vision, optional| Boolean | `true`, `false`|\n\nSupported LLM Key: `OPENAI_COMPATIBLE`\n\n##### General LLM Configuration\n| Variable | Description| Type | Sample Value|\n| -------- | ------- | ------- | ------- |\n| `LLM_KEY` | The name of the model you want to use | String | See supported LLM keys above |\n| `SECONDARY_LLM_KEY` | The name of the model for mini agents skyvern runs with | String | See supported LLM keys above |\n| `LLM_CONFIG_MAX_TOKENS` | Override the max tokens used by the LLM | Integer | `128000` |\n\n# Feature Roadmap\nThis is our planned roadmap for the next few months. If you have any suggestions or would like to see a feature added, please don't hesitate to reach out to us [via email](mailto:founders@skyvern.com) or [discord](https://discord.gg/fG2XXEuQX3).\n\n- [x] **Open Source** - Open Source Skyvern's core codebase\n- [x] **Workflow support** - Allow support to chain multiple Skyvern calls together\n- [x] **Improved context** - Improve Skyvern's ability to understand content around interactable elements by introducing feeding relevant label context through the text prompt\n- [x] **Cost Savings** - Improve Skyvern's stability and reduce the cost of running Skyvern by optimizing the context tree passed into Skyvern\n- [x] **Self-serve UI** - Deprecate the Streamlit UI in favour of a React-based UI component that allows users to kick off new jobs in Skyvern\n- [x] **Workflow UI Builder** - Introduce a UI to allow users to build and analyze workflows visually\n- [x] **Chrome Viewport streaming** - Introduce a way to live-stream the Chrome viewport to the user's browser (as a part of the self-serve UI)\n- [x] **Past Runs UI** - Deprecate the Streamlit UI in favour of a React-based UI that allows you to visualize past runs and their results\n- [X] **Auto workflow builder (\"Observer\") mode** - Allow Skyvern to auto-generate workflows as it's navigating the web to make it easier to build new workflows\n- [x] **Prompt Caching** - Introduce a caching layer to the LLM calls to dramatically reduce the cost of running Skyvern (memorize past actions and repeat them!)\n- [x] **Web Evaluation Dataset** - Integrate Skyvern with public benchmark tests to track the quality of our models over time\n- [ ] **Improved Debug mode** - Allow Skyvern to plan its actions and get \"approval\" before running them, allowing you to debug what it's doing and more easily iterate on the prompt\n- [ ] **Chrome Extension** - Allow users to interact with Skyvern through a Chrome extension (incl voice mode, saving tasks, etc.)\n- [ ] **Skyvern Action Recorder** - Allow Skyvern to watch a user complete a task and then automatically generate a workflow for it\n- [ ] **Interactable Livestream** - Allow users to interact with the livestream in real-time to intervene when necessary (such as manually submitting sensitive forms)\n- [ ] **Integrate LLM Observability tools** - Integrate LLM Observability tools to allow back-testing prompt changes with specific data sets + visualize the performance of Skyvern over time\n- [x] **Langchain Integration** - Create langchain integration in langchain_community to use Skyvern as a \"tool\".\n\n# Contributing\n\nWe welcome PRs and suggestions! Don't hesitate to open a PR/issue or to reach out to us [via email](mailto:founders@skyvern.com) or [discord](https://discord.gg/fG2XXEuQX3).\nPlease have a look at our [contribution guide](CONTRIBUTING.md) and\n[\"Help Wanted\" issues](https://github.com/skyvern-ai/skyvern/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22) to get started!\n\nIf you want to chat with the skyvern repository to get a high level overview of how it is structured, how to build off it, and how to resolve usage questions, check out [Code Sage](https://sage.storia.ai?utm_source=github&utm_medium=referral&utm_campaign=skyvern-readme).\n\n# Telemetry\n\nBy Default, Skyvern collects basic usage statistics to help us understand how Skyvern is being used. If you would like to opt-out of telemetry, please set the `SKYVERN_TELEMETRY` environment variable to `false`.\n\n# License\nSkyvern's open source repository is supported via a managed cloud. All of the core logic powering Skyvern is available in this open source repository licensed under the [AGPL-3.0 License](LICENSE), with the exception of anti-bot measures available in our managed cloud offering.\n\nIf you have any questions or concerns around licensing, please [contact us](mailto:support@skyvern.com) and we would be happy to help.\n\n# Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=Skyvern-AI/skyvern&type=Date)](https://star-history.com/#Skyvern-AI/skyvern&Date)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "skyvern",
        "automation",
        "web",
        "skyvern ai",
        "ai skyvern",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "SleepyRabbit--playwright-mcp": {
      "owner": "SleepyRabbit",
      "name": "playwright-mcp",
      "url": "https://github.com/SleepyRabbit/playwright-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/SleepyRabbit.webp",
      "description": "Enables interaction with web pages through structured accessibility snapshots for browser automation without relying on vision models. Facilitates web navigation, form-filling, data extraction, and automated testing using structured data.",
      "stars": 0,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "",
      "updated_at": "2025-04-21T08:54:00Z",
      "readme_content": "## Playwright MCP\n\nA Model Context Protocol (MCP) server that provides browser automation capabilities using [Playwright](https://playwright.dev). This server enables LLMs to interact with web pages through structured accessibility snapshots, bypassing the need for screenshots or visually-tuned models.\n\n### Key Features\n\n- **Fast and lightweight**: Uses Playwright's accessibility tree, not pixel-based input.\n- **LLM-friendly**: No vision models needed, operates purely on structured data.\n- **Deterministic tool application**: Avoids ambiguity common with screenshot-based approaches.\n\n### Use Cases\n\n- Web navigation and form-filling\n- Data extraction from structured content\n- Automated testing driven by LLMs\n- General-purpose browser interaction for agents\n\n### Example config\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/mcp@latest\"\n      ]\n    }\n  }\n}\n```\n\n\n#### Installation in VS Code\n\nInstall the Playwright MCP server in VS Code using one of these buttons:\n\n<!--\n// Generate using?:\nconst config = JSON.stringify({ name: 'playwright', command: 'npx', args: [\"-y\", \"@playwright/mcp@latest\"] });\nconst urlForWebsites = `vscode:mcp/install?${encodeURIComponent(config)}`;\n// Github markdown does not allow linking to `vscode:` directly, so you can use our redirect:\nconst urlForGithub = `https://insiders.vscode.dev/redirect?url=${encodeURIComponent(urlForWebsites)}`;\n-->\n\n[<img src=\"https://img.shields.io/badge/VS_Code-VS_Code?style=flat-square&label=Install%20Server&color=0098FF\" alt=\"Install in VS Code\">](https://insiders.vscode.dev/redirect?url=vscode%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522%2540playwright%252Fmcp%2540latest%2522%255D%257D)  [<img alt=\"Install in VS Code Insiders\" src=\"https://img.shields.io/badge/VS_Code_Insiders-VS_Code_Insiders?style=flat-square&label=Install%20Server&color=24bfa5\">](https://insiders.vscode.dev/redirect?url=vscode-insiders%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522%2540playwright%252Fmcp%2540latest%2522%255D%257D)\n\nAlternatively, you can install the Playwright MCP server using the VS Code CLI:\n\n```bash\n# For VS Code\ncode --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@playwright/mcp@latest\"]}'\n```\n\n```bash\n# For VS Code Insiders\ncode-insiders --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@playwright/mcp@latest\"]}'\n```\n\nAfter installation, the Playwright MCP server will be available for use with your GitHub Copilot agent in VS Code.\n\n### CLI Options\n\nThe Playwright MCP server supports the following command-line options:\n\n- `--browser <browser>`: Browser or chrome channel to use. Possible values:\n  - `chrome`, `firefox`, `webkit`, `msedge`\n  - Chrome channels: `chrome-beta`, `chrome-canary`, `chrome-dev`\n  - Edge channels: `msedge-beta`, `msedge-canary`, `msedge-dev`\n  - Default: `chrome`\n- `--caps <caps>`: Comma-separated list of capabilities to enable, possible values: tabs, pdf, history, wait, files, install. Default is all.\n- `--cdp-endpoint <endpoint>`: CDP endpoint to connect to\n- `--executable-path <path>`: Path to the browser executable\n- `--headless`: Run browser in headless mode (headed by default)\n- `--port <port>`: Port to listen on for SSE transport\n- `--user-data-dir <path>`: Path to the user data directory\n- `--vision`: Run server that uses screenshots (Aria snapshots are used by default)\n\n### User data directory\n\nPlaywright MCP will launch the browser with the new profile, located at\n\n```\n- `%USERPROFILE%\\AppData\\Local\\ms-playwright\\mcp-chrome-profile` on Windows\n- `~/Library/Caches/ms-playwright/mcp-chrome-profile` on macOS\n- `~/.cache/ms-playwright/mcp-chrome-profile` on Linux\n```\n\nAll the logged in information will be stored in that profile, you can delete it between sessions if you'd like to clear the offline state.\n\n\n### Running headless browser (Browser without GUI).\n\nThis mode is useful for background or batch operations.\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/mcp@latest\",\n        \"--headless\"\n      ]\n    }\n  }\n}\n```\n\n### Running headed browser on Linux w/o DISPLAY\n\nWhen running headed browser on system w/o display or from worker processes of the IDEs,\nrun the MCP server from environment with the DISPLAY and pass the `--port` flag to enable SSE transport.\n\n```bash\nnpx @playwright/mcp@latest --port 8931\n```\n\nAnd then in MCP client config, set the `url` to the SSE endpoint:\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"url\": \"http://localhost:8931/sse\"\n    }\n  }\n}\n```\n\n### Tool Modes\n\nThe tools are available in two modes:\n\n1. **Snapshot Mode** (default): Uses accessibility snapshots for better performance and reliability\n2. **Vision Mode**: Uses screenshots for visual-based interactions\n\nTo use Vision Mode, add the `--vision` flag when starting the server:\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/mcp@latest\",\n        \"--vision\"\n      ]\n    }\n  }\n}\n```\n\nVision Mode works best with the computer use models that are able to interact with elements using\nX Y coordinate space, based on the provided screenshot.\n\n### Programmatic usage with custom transports\n\n```js\nimport { createServer } from '@playwright/mcp';\n\n// ...\n\nconst server = createServer({\n  launchOptions: { headless: true }\n});\ntransport = new SSEServerTransport(\"/messages\", res);\nserver.connect(transport);\n```\n\n### Snapshot-based Interactions\n\n- **browser_click**\n  - Description: Perform click on a web page\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n\n- **browser_hover**\n  - Description: Hover over element on page\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n\n- **browser_drag**\n  - Description: Perform drag and drop between two elements\n  - Parameters:\n    - `startElement` (string): Human-readable source element description used to obtain permission to interact with the element\n    - `startRef` (string): Exact source element reference from the page snapshot\n    - `endElement` (string): Human-readable target element description used to obtain permission to interact with the element\n    - `endRef` (string): Exact target element reference from the page snapshot\n\n- **browser_type**\n  - Description: Type text into editable element\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n    - `text` (string): Text to type into the element\n    - `submit` (boolean, optional): Whether to submit entered text (press Enter after)\n    - `slowly` (boolean, optional): Whether to type one character at a time. Useful for triggering key handlers in the page. By default entire text is filled in at once.\n\n- **browser_select_option**\n  - Description: Select an option in a dropdown\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n    - `values` (array): Array of values to select in the dropdown. This can be a single value or multiple values.\n\n- **browser_snapshot**\n  - Description: Capture accessibility snapshot of the current page, this is better than screenshot\n  - Parameters: None\n\n- **browser_take_screenshot**\n  - Description: Take a screenshot of the current page. You can't perform actions based on the screenshot, use browser_snapshot for actions.\n  - Parameters:\n    - `raw` (boolean, optional): Whether to return without compression (in PNG format). Default is false, which returns a JPEG image.\n\n### Vision-based Interactions\n\n- **browser_screen_move_mouse**\n  - Description: Move mouse to a given position\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `x` (number): X coordinate\n    - `y` (number): Y coordinate\n\n- **browser_screen_capture**\n  - Description: Take a screenshot of the current page\n  - Parameters: None\n\n- **browser_screen_click**\n  - Description: Click left mouse button\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `x` (number): X coordinate\n    - `y` (number): Y coordinate\n\n- **browser_screen_drag**\n  - Description: Drag left mouse button\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `startX` (number): Start X coordinate\n    - `startY` (number): Start Y coordinate\n    - `endX` (number): End X coordinate\n    - `endY` (number): End Y coordinate\n\n- **browser_screen_type**\n  - Description: Type text\n  - Parameters:\n    - `text` (string): Text to type\n    - `submit` (boolean, optional): Whether to submit entered text (press Enter after)\n\n- **browser_press_key**\n  - Description: Press a key on the keyboard\n  - Parameters:\n    - `key` (string): Name of the key to press or a character to generate, such as `ArrowLeft` or `a`\n\n### Tab Management\n\n- **browser_tab_list**\n  - Description: List browser tabs\n  - Parameters: None\n\n- **browser_tab_new**\n  - Description: Open a new tab\n  - Parameters:\n    - `url` (string, optional): The URL to navigate to in the new tab. If not provided, the new tab will be blank.\n\n- **browser_tab_select**\n  - Description: Select a tab by index\n  - Parameters:\n    - `index` (number): The index of the tab to select\n\n- **browser_tab_close**\n  - Description: Close a tab\n  - Parameters:\n    - `index` (number, optional): The index of the tab to close. Closes current tab if not provided.\n\n### Navigation\n\n- **browser_navigate**\n  - Description: Navigate to a URL\n  - Parameters:\n    - `url` (string): The URL to navigate to\n\n- **browser_navigate_back**\n  - Description: Go back to the previous page\n  - Parameters: None\n\n- **browser_navigate_forward**\n  - Description: Go forward to the next page\n  - Parameters: None\n\n### Keyboard\n\n- **browser_press_key**\n  - Description: Press a key on the keyboard\n  - Parameters:\n    - `key` (string): Name of the key to press or a character to generate, such as `ArrowLeft` or `a`\n\n### Console\n\n- **browser_console_messages**\n  - Description: Returns all console messages\n  - Parameters: None\n\n### Files and Media\n\n- **browser_file_upload**\n  - Description: Choose one or multiple files to upload\n  - Parameters:\n    - `paths` (array): The absolute paths to the files to upload. Can be a single file or multiple files.\n\n- **browser_pdf_save**\n  - Description: Save page as PDF\n  - Parameters: None\n\n### Utilities\n\n- **browser_wait**\n  - Description: Wait for a specified time in seconds\n  - Parameters:\n    - `time` (number): The time to wait in seconds (capped at 10 seconds)\n\n- **browser_resize**\n  - Description: Resize the browser window\n  - Parameters:\n    - `width` (number): The desired width of the browser window\n    - `height` (number): The desired height of the browser window\n\n- **browser_handle_dialog**\n  - Description: Handle browser dialogs (alert, confirm, prompt)\n  - Parameters:\n    - `accept` (boolean): Whether to accept or dismiss the dialog\n    - `promptText` (string, optional): Text to enter in case of prompt dialogs\n\n- **browser_close**\n  - Description: Close the page\n  - Parameters: None\n\n- **browser_install**\n  - Description: Install the browser specified in the config. Call this if you get an error about the browser not being installed.\n  - Parameters: None\n",
      "npm_url": "https://www.npmjs.com/package/playwright-mcp",
      "npm_downloads": 88803,
      "keywords": [
        "browser",
        "scraping",
        "automation",
        "browser automation",
        "automation web",
        "facilitates web"
      ],
      "category": "browser-automation"
    },
    "VikashLoomba--MCP-Server-Playwright": {
      "owner": "VikashLoomba",
      "name": "MCP-Server-Playwright",
      "url": "https://github.com/VikashLoomba/MCP-Server-Playwright",
      "imageUrl": "/freedevtools/mcp/pfp/VikashLoomba.webp",
      "description": "Provides browser automation capabilities for interacting with web pages, capturing screenshots, and executing JavaScript in a real browser environment.",
      "stars": 260,
      "forks": 37,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-30T06:45:41Z",
      "readme_content": "<h1 align=\"center\">MCP Server Playwright</h1>\n<p align=\"center\">\n  <a href=\"https://www.automatalabs.io\"><img alt=\"MCP Playwright\" src=\"https://automatalabs.io/icon.svg\" height=\"250\"/></a>\n</p>\n<p align=\"center\">\n  <b>A Model Context Protocol server that provides browser automation capabilities using Playwright</b></br>\n  <sub>Enable LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment</sub>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/@automatalabs/mcp-server-playwright\"><img alt=\"NPM Version\" src=\"https://img.shields.io/npm/v/@automatalabs/mcp-server-playwright.svg\" height=\"20\"/></a>\n  <a href=\"https://npmcharts.com/compare/@automatalabs/mcp-server-playwright?minimal=true\"><img alt=\"Downloads per month\" src=\"https://img.shields.io/npm/dm/@automatalabs/mcp-server-playwright.svg\" height=\"20\"/></a>\n  <a href=\"https://github.com/Automata-Labs-team/MCP-Server-Playwright/blob/main/LICENSE\"><img alt=\"License\" src=\"https://img.shields.io/github/license/Automata-Labs-team/MCP-Server-Playwright.svg\" height=\"20\"/></a>\n  <a href=\"https://smithery.ai/server/@automatalabs/mcp-server-playwright\"><img alt=\"Smithery Installs\" src=\"https://smithery.ai/badge/@automatalabs/mcp-server-playwright\" height=\"20\"/></a>\n</p>\n\n<a href=\"https://glama.ai/mcp/servers/9q4zck8po5\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/9q4zck8po5/badge\" alt=\"MCP-Server-Playwright MCP server\" /></a>\n\n## Table of Contents\n\n- [Features](#features)\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Components](#components)\n  - [Tools](#tools)\n  - [Resources](#resources)\n- [License](#license)\n\n## Features\n\n- üåê Full browser automation capabilities\n- üì∏ Screenshot capture of entire pages or specific elements\n- üñ±Ô∏è Comprehensive web interaction (navigation, clicking, form filling)\n- üìä Console log monitoring\n- üîß JavaScript execution in browser context\n\n## Installation\n\n### Installing via Smithery\n\nTo install MCP Server Playwright for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@automatalabs/mcp-server-playwright):\n\n```bash\nnpx -y @smithery/cli install @automatalabs/mcp-server-playwright --client claude\n```\n\nYou can install the package using either npx or mcp-get:\n\nUsing npx:\n```bash\nnpx @automatalabs/mcp-server-playwright install\n```\nThis command will:\n1. Check your operating system compatibility (Windows/macOS)\n2. Create or update the Claude configuration file\n3. Configure the Playwright server integration\n\nThe configuration file will be automatically created/updated at:\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\nUsing mcp-get:\n```bash\nnpx @michaellatman/mcp-get@latest install @automatalabs/mcp-server-playwright\n```\n\n## Configuration\n\nThe installation process will automatically add the following configuration to your Claude config file:\n\n```json\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@automatalabs/mcp-server-playwright\"]\n    }\n  }\n}\n```\n## Using with Cursor\n\nYou can also use MCP Server Playwright with [Cursor](https://www.cursor.so/), an AI-powered code editor. To enable browser automation in Cursor via MCP:\n\n1. **Install Playwright browsers** (if not already):\n    ```bash\n    npx playwright install\n    ```\n\n2. **Install MCP Server Playwright for Cursor** using Smithery:\n    ```bash\n    npx -y @smithery/cli install @automatalabs/mcp-server-playwright --client cursor\n    ```\n\n3. **Configuration file setup**:  \n   If you do not use Claude, the configuration file (`claude_desktop_config.json`) may not be created automatically.  \n   - On Windows, create a folder named `Claude` in `%APPDATA%` (usually `C:\\Users\\<YourName>\\AppData\\Roaming\\Claude`).\n   - Inside that folder, create a file named `claude_desktop_config.json` with the following content:\n   \n    ```json\n    {\n      \"serverPort\": 3456\n    }\n    ```\n\n4. **Follow the remaining steps in the [Installation](#installation) section above** to complete the setup.\n\nNow, you can use all the browser automation tools provided by MCP Server Playwright directly from Cursor‚Äôs AI features, such as web navigation, screenshot capture, and JavaScript execution.\n\n> **Note:** Make sure you have Node.js installed and `npx` available in your system PATH.\n\n## Components\n\n### Tools\n\n#### `browser_navigate`\nNavigate to any URL in the browser\n```javascript\n{\n  \"url\": \"https://stealthbrowser.cloud\"\n}\n```\n\n#### `browser_screenshot`\nCapture screenshots of the entire page or specific elements\n```javascript\n{\n  \"name\": \"screenshot-name\",     // required\n  \"selector\": \"#element-id\",     // optional\n  \"fullPage\": true              // optional, default: false\n}\n```\n\n#### `browser_click`\nClick elements on the page using CSS selector\n```javascript\n{\n  \"selector\": \"#button-id\"\n}\n```\n\n#### `browser_click_text`\nClick elements on the page by their text content\n```javascript\n{\n  \"text\": \"Click me\"\n}\n```\n\n#### `browser_hover`\nHover over elements on the page using CSS selector\n```javascript\n{\n  \"selector\": \"#menu-item\"\n}\n```\n\n#### `browser_hover_text`\nHover over elements on the page by their text content\n```javascript\n{\n  \"text\": \"Hover me\"\n}\n```\n\n#### `browser_fill`\nFill out input fields\n```javascript\n{\n  \"selector\": \"#input-field\",\n  \"value\": \"Hello World\"\n}\n```\n\n#### `browser_select`\nSelect an option in a SELECT element using CSS selector\n```javascript\n{\n  \"selector\": \"#dropdown\",\n  \"value\": \"option-value\"\n}\n```\n\n#### `browser_select_text`\nSelect an option in a SELECT element by its text content\n```javascript\n{\n  \"text\": \"Choose me\",\n  \"value\": \"option-value\"\n}\n```\n\n#### `browser_evaluate`\nExecute JavaScript in the browser console\n```javascript\n{\n  \"script\": \"document.title\"\n}\n```\n\n### Resources\n\n1. **Console Logs** (`console://logs`)\n   - Access browser console output in text format\n   - Includes all console messages from the browser\n\n2. **Screenshots** (`screenshot://<n>`)\n   - Access PNG images of captured screenshots\n   - Referenced by the name specified during capture\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](https://github.com/Automata-Labs-team/MCP-Server-Playwright/blob/main/LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "browser",
        "javascript",
        "browser automation",
        "automation web",
        "provides browser"
      ],
      "category": "browser-automation"
    },
    "adalovu--mcp-playwright": {
      "owner": "adalovu",
      "name": "mcp-playwright",
      "url": "https://github.com/adalovu/mcp-playwright",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Automates and interacts with web browsers using Playwright, enabling actions such as taking screenshots, generating test code, scraping web pages, and executing JavaScript in real browser environments.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "https://www.npmjs.com/package/mcp-playwright",
      "npm_downloads": 1667,
      "keywords": [
        "automation",
        "browser",
        "browsers",
        "browser automation",
        "automation web",
        "playwright automates"
      ],
      "category": "browser-automation"
    },
    "afshawnlotfi--mcp-configurable-puppeteer": {
      "owner": "afshawnlotfi",
      "name": "mcp-configurable-puppeteer",
      "url": "https://github.com/afshawnlotfi/mcp-configurable-puppeteer",
      "imageUrl": "/freedevtools/mcp/pfp/afshawnlotfi.webp",
      "description": "Automate browser interactions to navigate web pages, capture screenshots, and execute JavaScript in a real browser environment. Customize browser automation options using Puppeteer with environment variables for flexibility.",
      "stars": 4,
      "forks": 8,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-27T21:04:16Z",
      "readme_content": "# Configurable Puppeteer MCP Server\n\nA Model Context Protocol server that provides browser automation capabilities using Puppeteer with configurable options. This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment, with the ability to customize Puppeteer launch options through environment variables.\n\n## Components\n\n### Tools\n\n- **puppeteer_navigate**\n  - Navigate to any URL in the browser\n  - Input: `url` (string)\n\n- **puppeteer_screenshot**\n  - Capture screenshots of the entire page or specific elements\n  - Inputs:\n    - `name` (string, required): Name for the screenshot\n    - `selector` (string, optional): CSS selector for element to screenshot\n    - `width` (number, optional, default: 800): Screenshot width\n    - `height` (number, optional, default: 600): Screenshot height\n\n- **puppeteer_click**\n  - Click elements on the page\n  - Input: `selector` (string): CSS selector for element to click\n\n- **puppeteer_hover**\n  - Hover elements on the page\n  - Input: `selector` (string): CSS selector for element to hover\n\n- **puppeteer_fill**\n  - Fill out input fields\n  - Inputs:\n    - `selector` (string): CSS selector for input field\n    - `value` (string): Value to fill\n\n- **puppeteer_select**\n  - Select an element with SELECT tag\n  - Inputs:\n    - `selector` (string): CSS selector for element to select\n    - `value` (string): Value to select\n\n- **puppeteer_evaluate**\n  - Execute JavaScript in the browser console\n  - Input: `script` (string): JavaScript code to execute\n\n### Resources\n\nThe server provides access to two types of resources:\n\n1. **Console Logs** (`console://logs`)\n   - Browser console output in text format\n   - Includes all console messages from the browser\n\n2. **Screenshots** (`screenshot://<name>`)\n   - PNG images of captured screenshots\n   - Accessible via the screenshot name specified during capture\n\n## Key Features\n\n- Browser automation\n- Console log monitoring\n- Screenshot capabilities\n- JavaScript execution\n- Basic web interaction (navigation, clicking, form filling)\n- **Configurable Puppeteer options** through environment variables\n\n## Configuration\n\n### Using with Custom Puppeteer Options\n\nYou can configure Puppeteer launch options by providing a JSON string in the `PUPPETEER_ARGS` environment variable. This allows you to customize browser behavior without modifying the server code.\n\n#### Example: Using Firefox Instead of Chrome\n\n```json\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"github:afshawnlotfi/mcp-configurable-puppeteer\"],\n      \"env\": {\n        \"PUPPETEER_ARGS\": \"{\\\"browser\\\": \\\"firefox\\\"}\"\n      }\n    }\n  }\n}\n```\n\n#### Example: Configuring Browser Window Size\n\n```json\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"github:afshawnlotfi/mcp-configurable-puppeteer\"],\n      \"env\": {\n        \"PUPPETEER_ARGS\": \"{\\\"defaultViewport\\\": {\\\"width\\\": 1280, \\\"height\\\": 800}}\"\n      }\n    }\n  }\n}\n```\n\n### Standard Configuration\n\n#### NPX\n```json\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"github:afshawnlotfi/mcp-configurable-puppeteer\"]\n    }\n  }\n}\n```\n\nYou can also specify a branch, tag, or commit:\n\n```json\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"github:afshawnlotfi/mcp-configurable-puppeteer#main\"]\n    }\n  }\n}\n```\n\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "puppeteer",
        "automation",
        "automate",
        "puppeteer automate",
        "browser automation",
        "automate browser"
      ],
      "category": "browser-automation"
    },
    "agent-infra--mcp-server-browser": {
      "owner": "agent-infra",
      "name": "mcp-server-browser",
      "url": "https://github.com/bytedance/UI-TARS-desktop/tree/main/packages/agent-infra/mcp-servers/browser",
      "imageUrl": "",
      "description": "Browser automation capabilities using Puppeteer, both support local and remote browser connection.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "https://www.npmjs.com/package/@agent-infra/mcp-server-browser",
      "npm_downloads": 321792,
      "keywords": [
        "automation",
        "puppeteer",
        "scraping",
        "browser automation",
        "automation web",
        "using puppeteer"
      ],
      "category": "browser-automation"
    },
    "ahai72160--playwright-mcp": {
      "owner": "ahai72160",
      "name": "playwright-mcp",
      "url": "https://github.com/ahai72160/playwright-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ahai72160.webp",
      "description": "Facilitates browser automation through structured accessibility snapshots, enabling interaction with web pages without visual models. Supports web navigation, form-filling, data extraction, and automated testing with a deterministic approach.",
      "stars": 0,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "",
      "updated_at": "2025-04-29T09:38:46Z",
      "readme_content": "## Playwright MCP\n\nA Model Context Protocol (MCP) server that provides browser automation capabilities using [Playwright](https://playwright.dev). This server enables LLMs to interact with web pages through structured accessibility snapshots, bypassing the need for screenshots or visually-tuned models.\n\n### Key Features\n\n- **Fast and lightweight**: Uses Playwright's accessibility tree, not pixel-based input.\n- **LLM-friendly**: No vision models needed, operates purely on structured data.\n- **Deterministic tool application**: Avoids ambiguity common with screenshot-based approaches.\n\n### Use Cases\n\n- Web navigation and form-filling\n- Data extraction from structured content\n- Automated testing driven by LLMs\n- General-purpose browser interaction for agents\n\n### Example config\n\n#### NPX\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/mcp@latest\"\n      ]\n    }\n  }\n}\n```\n\n#### Installation in VS Code\n\nInstall the Playwright MCP server in VS Code using one of these buttons:\n\n<!--\n// Generate using?:\nconst config = JSON.stringify({ name: 'playwright', command: 'npx', args: [\"-y\", \"@playwright/mcp@latest\"] });\nconst urlForWebsites = `vscode:mcp/install?${encodeURIComponent(config)}`;\n// Github markdown does not allow linking to `vscode:` directly, so you can use our redirect:\nconst urlForGithub = `https://insiders.vscode.dev/redirect?url=${encodeURIComponent(urlForWebsites)}`;\n-->\n\n[<img src=\"https://img.shields.io/badge/VS_Code-VS_Code?style=flat-square&label=Install%20Server&color=0098FF\" alt=\"Install in VS Code\">](https://insiders.vscode.dev/redirect?url=vscode%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522%2540playwright%252Fmcp%2540latest%2522%255D%257D)  [<img alt=\"Install in VS Code Insiders\" src=\"https://img.shields.io/badge/VS_Code_Insiders-VS_Code_Insiders?style=flat-square&label=Install%20Server&color=24bfa5\">](https://insiders.vscode.dev/redirect?url=vscode-insiders%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522%2540playwright%252Fmcp%2540latest%2522%255D%257D)\n\nAlternatively, you can install the Playwright MCP server using the VS Code CLI:\n\n```bash\n# For VS Code\ncode --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@playwright/mcp@latest\"]}'\n```\n\n```bash\n# For VS Code Insiders\ncode-insiders --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@playwright/mcp@latest\"]}'\n```\n\nAfter installation, the Playwright MCP server will be available for use with your GitHub Copilot agent in VS Code.\n\n### CLI Options\n\nThe Playwright MCP server supports the following command-line options:\n\n- `--browser <browser>`: Browser or chrome channel to use. Possible values:\n  - `chrome`, `firefox`, `webkit`, `msedge`\n  - Chrome channels: `chrome-beta`, `chrome-canary`, `chrome-dev`\n  - Edge channels: `msedge-beta`, `msedge-canary`, `msedge-dev`\n  - Default: `chrome`\n- `--caps <caps>`: Comma-separated list of capabilities to enable, possible values: tabs, pdf, history, wait, files, install. Default is all.\n- `--cdp-endpoint <endpoint>`: CDP endpoint to connect to\n- `--executable-path <path>`: Path to the browser executable\n- `--headless`: Run browser in headless mode (headed by default)\n- `--port <port>`: Port to listen on for SSE transport\n- `--host <host>`: Host to bind server to. Default is localhost. Use 0.0.0.0 to bind to all interfaces.\n- `--user-data-dir <path>`: Path to the user data directory\n- `--vision`: Run server that uses screenshots (Aria snapshots are used by default)\n\n### User data directory\n\nPlaywright MCP will launch the browser with the new profile, located at\n\n```\n- `%USERPROFILE%\\AppData\\Local\\ms-playwright\\mcp-chrome-profile` on Windows\n- `~/Library/Caches/ms-playwright/mcp-chrome-profile` on macOS\n- `~/.cache/ms-playwright/mcp-chrome-profile` on Linux\n```\n\nAll the logged in information will be stored in that profile, you can delete it between sessions if you'd like to clear the offline state.\n\n### Running headless browser (Browser without GUI)\n\nThis mode is useful for background or batch operations.\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/mcp@latest\",\n        \"--headless\"\n      ]\n    }\n  }\n}\n```\n\n### Running headed browser on Linux w/o DISPLAY\n\nWhen running headed browser on system w/o display or from worker processes of the IDEs,\nrun the MCP server from environment with the DISPLAY and pass the `--port` flag to enable SSE transport.\n\n```bash\nnpx @playwright/mcp@latest --port 8931\n```\n\nAnd then in MCP client config, set the `url` to the SSE endpoint:\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"url\": \"http://localhost:8931/sse\"\n    }\n  }\n}\n```\n\nWhen running in a remote server, you can use the `--host` flag to bind the server to `0.0.0.0` to make it accessible from outside.\n\n```bash\nnpx @playwright/mcp@latest --port 8931 --host 0.0.0.0\n```\n\nIn MCP client config, `$server-ip` is the IP address of the server:\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"url\": \"http://{$server-ip}:8931/sse\"\n    }\n  }\n}\n```\n\n### Docker\n\n**NOTE:** The Docker implementation only supports headless chromium at the moment.\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"--init\", \"mcp/playwright\"]\n    }\n  }\n}\n```\n\n### Tool Modes\n\nThe tools are available in two modes:\n\n1. **Snapshot Mode** (default): Uses accessibility snapshots for better performance and reliability\n2. **Vision Mode**: Uses screenshots for visual-based interactions\n\nTo use Vision Mode, add the `--vision` flag when starting the server:\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/mcp@latest\",\n        \"--vision\"\n      ]\n    }\n  }\n}\n```\n\nVision Mode works best with the computer use models that are able to interact with elements using\nX Y coordinate space, based on the provided screenshot.\n\n### Build with Docker\n\nYou can build the Docker image yourself.\n\n```\ndocker build -t mcp/playwright .\n```\n\n### Programmatic usage with custom transports\n\n```js\nimport http from 'http';\n\nimport { createServer } from '@playwright/mcp';\nimport { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';\n\nhttp.createServer(async (req, res) => {\n  // ...\n\n  // Creates a headless Playwright MCP server with SSE transport\n  const mcpServer = await createServer({ headless: true });\n  const transport = new SSEServerTransport('/messages', res);\n  await mcpServer.connect(transport);\n\n  // ...\n});\n\n```\n\n<!--- Generated by update-readme.js -->\n\n### Snapshot-based Interactions\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_snapshot**\n  - Description: Capture accessibility snapshot of the current page, this is better than screenshot\n  - Parameters: None\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_click**\n  - Description: Perform click on a web page\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_drag**\n  - Description: Perform drag and drop between two elements\n  - Parameters:\n    - `startElement` (string): Human-readable source element description used to obtain the permission to interact with the element\n    - `startRef` (string): Exact source element reference from the page snapshot\n    - `endElement` (string): Human-readable target element description used to obtain the permission to interact with the element\n    - `endRef` (string): Exact target element reference from the page snapshot\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_hover**\n  - Description: Hover over element on page\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_type**\n  - Description: Type text into editable element\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n    - `text` (string): Text to type into the element\n    - `submit` (boolean, optional): Whether to submit entered text (press Enter after)\n    - `slowly` (boolean, optional): Whether to type one character at a time. Useful for triggering key handlers in the page. By default entire text is filled in at once.\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_select_option**\n  - Description: Select an option in a dropdown\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n    - `values` (array): Array of values to select in the dropdown. This can be a single value or multiple values.\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_take_screenshot**\n  - Description: Take a screenshot of the current page. You can't perform actions based on the screenshot, use browser_snapshot for actions.\n  - Parameters:\n    - `raw` (boolean, optional): Whether to return without compression (in PNG format). Default is false, which returns a JPEG image.\n    - `element` (string, optional): Human-readable element description used to obtain permission to screenshot the element. If not provided, the screenshot will be taken of viewport. If element is provided, ref must be provided too.\n    - `ref` (string, optional): Exact target element reference from the page snapshot. If not provided, the screenshot will be taken of viewport. If ref is provided, element must be provided too.\n\n### Vision-based Interactions\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_capture**\n  - Description: Take a screenshot of the current page\n  - Parameters: None\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_move_mouse**\n  - Description: Move mouse to a given position\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `x` (number): X coordinate\n    - `y` (number): Y coordinate\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_click**\n  - Description: Click left mouse button\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `x` (number): X coordinate\n    - `y` (number): Y coordinate\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_drag**\n  - Description: Drag left mouse button\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `startX` (number): Start X coordinate\n    - `startY` (number): Start Y coordinate\n    - `endX` (number): End X coordinate\n    - `endY` (number): End Y coordinate\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_type**\n  - Description: Type text\n  - Parameters:\n    - `text` (string): Text to type into the element\n    - `submit` (boolean, optional): Whether to submit entered text (press Enter after)\n\n### Tab Management\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_tab_list**\n  - Description: List browser tabs\n  - Parameters: None\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_tab_new**\n  - Description: Open a new tab\n  - Parameters:\n    - `url` (string, optional): The URL to navigate to in the new tab. If not provided, the new tab will be blank.\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_tab_select**\n  - Description: Select a tab by index\n  - Parameters:\n    - `index` (number): The index of the tab to select\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_tab_close**\n  - Description: Close a tab\n  - Parameters:\n    - `index` (number, optional): The index of the tab to close. Closes current tab if not provided.\n\n### Navigation\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_navigate**\n  - Description: Navigate to a URL\n  - Parameters:\n    - `url` (string): The URL to navigate to\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_navigate_back**\n  - Description: Go back to the previous page\n  - Parameters: None\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_navigate_forward**\n  - Description: Go forward to the next page\n  - Parameters: None\n\n### Keyboard\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_press_key**\n  - Description: Press a key on the keyboard\n  - Parameters:\n    - `key` (string): Name of the key to press or a character to generate, such as `ArrowLeft` or `a`\n\n### Console\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_console_messages**\n  - Description: Returns all console messages\n  - Parameters: None\n\n### Files and Media\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_file_upload**\n  - Description: Upload one or multiple files\n  - Parameters:\n    - `paths` (array): The absolute paths to the files to upload. Can be a single file or multiple files.\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_pdf_save**\n  - Description: Save page as PDF\n  - Parameters: None\n\n### Utilities\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_close**\n  - Description: Close the page\n  - Parameters: None\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_wait**\n  - Description: Wait for a specified time in seconds\n  - Parameters:\n    - `time` (number): The time to wait in seconds\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_resize**\n  - Description: Resize the browser window\n  - Parameters:\n    - `width` (number): Width of the browser window\n    - `height` (number): Height of the browser window\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_install**\n  - Description: Install the browser specified in the config. Call this if you get an error about the browser not being installed.\n  - Parameters: None\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_handle_dialog**\n  - Description: Handle a dialog\n  - Parameters:\n    - `accept` (boolean): Whether to accept the dialog.\n    - `promptText` (string, optional): The text of the prompt in case of a prompt dialog.\n\n<!--- End of generated section -->\n",
      "npm_url": "https://www.npmjs.com/package/playwright-mcp",
      "npm_downloads": 88803,
      "keywords": [
        "automation",
        "browser",
        "scraping",
        "browser automation",
        "automation web",
        "facilitates browser"
      ],
      "category": "browser-automation"
    },
    "aircodelabs--grasp": {
      "owner": "aircodelabs",
      "name": "grasp",
      "url": "https://github.com/aircodelabs/grasp",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "A self-hosted browser automation agent that executes natural language commands to control web activities, integrating easily with other AI applications and agents through MCP and A2A support.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "https://www.npmjs.com/package/grasp",
      "npm_downloads": 5901,
      "keywords": [
        "automation",
        "web",
        "aircodelabs",
        "automation web",
        "browser automation",
        "automation capabilities"
      ],
      "category": "browser-automation"
    },
    "alinaqi--mcp-linkedin-server": {
      "owner": "alinaqi",
      "name": "mcp-linkedin-server",
      "url": "https://github.com/alinaqi/mcp-linkedin-server",
      "imageUrl": "/freedevtools/mcp/pfp/alinaqi.webp",
      "description": "Automate interactions with LinkedIn, extract data, and manage profiles, posts, and feeds using browser automation while adhering to LinkedIn's terms and rate limits.",
      "stars": 43,
      "forks": 11,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-11T17:40:49Z",
      "readme_content": "# LinkedIn Browser MCP Server\n\nA FastMCP-based server for LinkedIn automation and data extraction using browser automation. This server provides a set of tools for interacting with LinkedIn programmatically while respecting LinkedIn's terms of service and rate limits.\n\n## Features\n\n- **Secure Authentication**\n  - Environment-based credential management\n  - Session persistence with encrypted cookie storage\n  - Rate limiting protection\n  - Automatic session recovery\n\n- **Profile Operations**\n  - View and extract profile information\n  - Search for profiles based on keywords\n  - Browse LinkedIn feed\n  - Profile visiting capabilities\n\n- **Post Interactions**\n  - Like posts\n  - Comment on posts\n  - Read post content and engagement metrics\n\n## Prerequisites\n\n- Python 3.8+\n- Playwright\n- FastMCP library\n- LinkedIn account\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone [repository-url]\ncd mcp-linkedin-server\n```\n\n2. Create and activate a virtual environment:\n```bash\npython -m venv env\nsource env/bin/activate  # On Windows: env\\Scripts\\activate\n```\n\n3. Install dependencies:\n```bash\npip install -r requirements.txt\nplaywright install chromium\n```\n\n4. Set up environment variables:\nCreate a `.env` file in the root directory with:\n```env\nLINKEDIN_USERNAME=your_email@example.com\nLINKEDIN_PASSWORD=your_password\nCOOKIE_ENCRYPTION_KEY=your_encryption_key  # Optional: will be auto-generated if not provided\n```\n\n## Usage\n\n1. Start the MCP server:\n```bash\npython linkedin_browser_mcp.py\n```\n\n2. Available Tools:\n\n- `login_linkedin_secure`: Securely log in using environment credentials\n- `browse_linkedin_feed`: Browse and extract posts from feed\n- `search_linkedin_profiles`: Search for profiles matching criteria\n- `view_linkedin_profile`: View and extract data from specific profiles\n- `interact_with_linkedin_post`: Like, comment, or read posts\n\n### Example Usage\n\n```python\nfrom fastmcp import FastMCP\n\n# Initialize client\nclient = FastMCP.connect(\"http://localhost:8000\")\n\n# Login\nresult = await client.login_linkedin_secure()\nprint(result)\n\n# Search profiles\nprofiles = await client.search_linkedin_profiles(\n    query=\"software engineer\",\n    count=5\n)\nprint(profiles)\n\n# View profile\nprofile_data = await client.view_linkedin_profile(\n    profile_url=\"https://www.linkedin.com/in/username\"\n)\nprint(profile_data)\n```\n\n## Security Features\n\n- Encrypted cookie storage\n- Rate limiting protection\n- Secure credential management\n- Session persistence\n- Browser automation security measures\n\n## Best Practices\n\n1. **Rate Limiting**: The server implements rate limiting to prevent excessive requests:\n   - Maximum 5 login attempts per hour\n   - Automatic session reuse\n   - Cookie persistence to minimize login needs\n\n2. **Error Handling**: Comprehensive error handling for:\n   - Network issues\n   - Authentication failures\n   - LinkedIn security challenges\n   - Invalid URLs or parameters\n\n3. **Session Management**:\n   - Automatic cookie encryption\n   - Session persistence\n   - Secure storage practices\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a Pull Request\n\n## License\n\nMIT\n\n## Disclaimer\n\nThis tool is for educational purposes only. Ensure compliance with LinkedIn's terms of service and rate limiting guidelines when using this software. ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "linkedin",
        "scraping",
        "automation",
        "automation web",
        "browser automation",
        "adhering linkedin"
      ],
      "category": "browser-automation"
    },
    "angiejones--mcp-selenium": {
      "owner": "angiejones",
      "name": "mcp-selenium",
      "url": "https://github.com/angiejones/mcp-selenium",
      "imageUrl": "/freedevtools/mcp/pfp/angiejones.webp",
      "description": "Automates browser interactions through Selenium WebDriver, enabling actions like navigating to URLs, finding elements with various locator strategies, and performing mouse actions such as clicking and dragging.",
      "stars": 268,
      "forks": 71,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-02T10:25:04Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/angiejones-mcp-selenium-badge.png)](https://mseep.ai/app/angiejones-mcp-selenium)\n\n# MCP Selenium Server\n\n<a href=\"https://glama.ai/mcp/servers/s2em7b2kwf\">\n  <img alt=\"badge\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/s2em7b2kwf/badge\" />\n</a>\n\n[![smithery badge](https://smithery.ai/badge/@angiejones/mcp-selenium)](https://smithery.ai/server/@angiejones/mcp-selenium)\n\nA Model Context Protocol (MCP) server implementation for Selenium WebDriver, enabling browser automation through standardized MCP clients.\n\n## Video Demo (Click to Watch)\n\n[![Watch the video](https://img.youtube.com/vi/mRV0N8hcgYA/sddefault.jpg)](https://youtu.be/mRV0N8hcgYA)\n\n\n## Features\n\n- Start browser sessions with customizable options\n- Navigate to URLs\n- Find elements using various locator strategies\n- Click, type, and interact with elements\n- Perform mouse actions (hover, drag and drop)\n- Handle keyboard input\n- Take screenshots\n- Upload files\n- Support for headless mode\n\n## Supported Browsers\n\n- Chrome\n- Firefox\n- MS Edge\n\n## Use with Goose\n\n### Option 1: One-click install\nCopy and paste the link below into a browser address bar to add this extension to goose desktop:\n\n```\ngoose://extension?cmd=npx&arg=-y&arg=%40angiejones%2Fmcp-selenium&id=selenium-mcp&name=Selenium%20MCP&description=automates%20browser%20interactions\n```\n\n\n### Option 2: Add manually to desktop or CLI\n\n* Name: `Selenium MCP`\n* Description: `automates browser interactions`\n* Command: `npx -y @angiejones/mcp-selenium`\n\n## Use with other MCP clients (e.g. Claude Desktop, etc)\n```json\n{\n  \"mcpServers\": {\n    \"selenium\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@angiejones/mcp-selenium\"]\n    }\n  }\n}\n```\n\n---\n\n## Development\n\nTo work on this project:\n\n1. Clone the repository\n2. Install dependencies: `npm install`\n3. Run the server: `npm start`\n\n### Installation\n\n#### Installing via Smithery\n\nTo install MCP Selenium for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@angiejones/mcp-selenium):\n\n```bash\nnpx -y @smithery/cli install @angiejones/mcp-selenium --client claude\n```\n\n#### Manual Installation\n```bash\nnpm install -g @angiejones/mcp-selenium\n```\n\n\n### Usage\n\nStart the server by running:\n\n```bash\nmcp-selenium\n```\n\nOr use with NPX in your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"selenium\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@angiejones/mcp-selenium\"\n      ]\n    }\n  }\n}\n```\n\n\n\n## Tools\n\n### start_browser\nLaunches a browser session.\n\n**Parameters:**\n- `browser` (required): Browser to launch\n  - Type: string\n  - Enum: [\"chrome\", \"firefox\"]\n- `options`: Browser configuration options\n  - Type: object\n  - Properties:\n    - `headless`: Run browser in headless mode\n      - Type: boolean\n    - `arguments`: Additional browser arguments\n      - Type: array of strings\n\n**Example:**\n```json\n{\n  \"tool\": \"start_browser\",\n  \"parameters\": {\n    \"browser\": \"chrome\",\n    \"options\": {\n      \"headless\": true,\n      \"arguments\": [\"--no-sandbox\"]\n    }\n  }\n}\n```\n\n### navigate\nNavigates to a URL.\n\n**Parameters:**\n- `url` (required): URL to navigate to\n  - Type: string\n\n**Example:**\n```json\n{\n  \"tool\": \"navigate\",\n  \"parameters\": {\n    \"url\": \"https://www.example.com\"\n  }\n}\n```\n\n### find_element\nFinds an element on the page.\n\n**Parameters:**\n- `by` (required): Locator strategy\n  - Type: string\n  - Enum: [\"id\", \"css\", \"xpath\", \"name\", \"tag\", \"class\"]\n- `value` (required): Value for the locator strategy\n  - Type: string\n- `timeout`: Maximum time to wait for element in milliseconds\n  - Type: number\n  - Default: 10000\n\n**Example:**\n```json\n{\n  \"tool\": \"find_element\",\n  \"parameters\": {\n    \"by\": \"id\",\n    \"value\": \"search-input\",\n    \"timeout\": 5000\n  }\n}\n```\n\n### click_element\nClicks an element.\n\n**Parameters:**\n- `by` (required): Locator strategy\n  - Type: string\n  - Enum: [\"id\", \"css\", \"xpath\", \"name\", \"tag\", \"class\"]\n- `value` (required): Value for the locator strategy\n  - Type: string\n- `timeout`: Maximum time to wait for element in milliseconds\n  - Type: number\n  - Default: 10000\n\n**Example:**\n```json\n{\n  \"tool\": \"click_element\",\n  \"parameters\": {\n    \"by\": \"css\",\n    \"value\": \".submit-button\"\n  }\n}\n```\n\n### send_keys\nSends keys to an element (typing).\n\n**Parameters:**\n- `by` (required): Locator strategy\n  - Type: string\n  - Enum: [\"id\", \"css\", \"xpath\", \"name\", \"tag\", \"class\"]\n- `value` (required): Value for the locator strategy\n  - Type: string\n- `text` (required): Text to enter into the element\n  - Type: string\n- `timeout`: Maximum time to wait for element in milliseconds\n  - Type: number\n  - Default: 10000\n\n**Example:**\n```json\n{\n  \"tool\": \"send_keys\",\n  \"parameters\": {\n    \"by\": \"name\",\n    \"value\": \"username\",\n    \"text\": \"testuser\"\n  }\n}\n```\n\n### get_element_text\nGets the text() of an element.\n\n**Parameters:**\n- `by` (required): Locator strategy\n  - Type: string\n  - Enum: [\"id\", \"css\", \"xpath\", \"name\", \"tag\", \"class\"]\n- `value` (required): Value for the locator strategy\n  - Type: string\n- `timeout`: Maximum time to wait for element in milliseconds\n  - Type: number\n  - Default: 10000\n\n**Example:**\n```json\n{\n  \"tool\": \"get_element_text\",\n  \"parameters\": {\n    \"by\": \"css\",\n    \"value\": \".message\"\n  }\n}\n```\n\n### hover\nMoves the mouse to hover over an element.\n\n**Parameters:**\n- `by` (required): Locator strategy\n  - Type: string\n  - Enum: [\"id\", \"css\", \"xpath\", \"name\", \"tag\", \"class\"]\n- `value` (required): Value for the locator strategy\n  - Type: string\n- `timeout`: Maximum time to wait for element in milliseconds\n  - Type: number\n  - Default: 10000\n\n**Example:**\n```json\n{\n  \"tool\": \"hover\",\n  \"parameters\": {\n    \"by\": \"css\",\n    \"value\": \".dropdown-menu\"\n  }\n}\n```\n\n### drag_and_drop\nDrags an element and drops it onto another element.\n\n**Parameters:**\n- `by` (required): Locator strategy for source element\n  - Type: string\n  - Enum: [\"id\", \"css\", \"xpath\", \"name\", \"tag\", \"class\"]\n- `value` (required): Value for the source locator strategy\n  - Type: string\n- `targetBy` (required): Locator strategy for target element\n  - Type: string\n  - Enum: [\"id\", \"css\", \"xpath\", \"name\", \"tag\", \"class\"]\n- `targetValue` (required): Value for the target locator strategy\n  - Type: string\n- `timeout`: Maximum time to wait for elements in milliseconds\n  - Type: number\n  - Default: 10000\n\n**Example:**\n```json\n{\n  \"tool\": \"drag_and_drop\",\n  \"parameters\": {\n    \"by\": \"id\",\n    \"value\": \"draggable\",\n    \"targetBy\": \"id\",\n    \"targetValue\": \"droppable\"\n  }\n}\n```\n\n### double_click\nPerforms a double click on an element.\n\n**Parameters:**\n- `by` (required): Locator strategy\n  - Type: string\n  - Enum: [\"id\", \"css\", \"xpath\", \"name\", \"tag\", \"class\"]\n- `value` (required): Value for the locator strategy\n  - Type: string\n- `timeout`: Maximum time to wait for element in milliseconds\n  - Type: number\n  - Default: 10000\n\n**Example:**\n```json\n{\n  \"tool\": \"double_click\",\n  \"parameters\": {\n    \"by\": \"css\",\n    \"value\": \".editable-text\"\n  }\n}\n```\n\n### right_click\nPerforms a right click (context click) on an element.\n\n**Parameters:**\n- `by` (required): Locator strategy\n  - Type: string\n  - Enum: [\"id\", \"css\", \"xpath\", \"name\", \"tag\", \"class\"]\n- `value` (required): Value for the locator strategy\n  - Type: string\n- `timeout`: Maximum time to wait for element in milliseconds\n  - Type: number\n  - Default: 10000\n\n**Example:**\n```json\n{\n  \"tool\": \"right_click\",\n  \"parameters\": {\n    \"by\": \"css\",\n    \"value\": \".context-menu-trigger\"\n  }\n}\n```\n\n### press_key\nSimulates pressing a keyboard key.\n\n**Parameters:**\n- `key` (required): Key to press (e.g., 'Enter', 'Tab', 'a', etc.)\n  - Type: string\n\n**Example:**\n```json\n{\n  \"tool\": \"press_key\",\n  \"parameters\": {\n    \"key\": \"Enter\"\n  }\n}\n```\n\n### upload_file\nUploads a file using a file input element.\n\n**Parameters:**\n- `by` (required): Locator strategy\n  - Type: string\n  - Enum: [\"id\", \"css\", \"xpath\", \"name\", \"tag\", \"class\"]\n- `value` (required): Value for the locator strategy\n  - Type: string\n- `filePath` (required): Absolute path to the file to upload\n  - Type: string\n- `timeout`: Maximum time to wait for element in milliseconds\n  - Type: number\n  - Default: 10000\n\n**Example:**\n```json\n{\n  \"tool\": \"upload_file\",\n  \"parameters\": {\n    \"by\": \"id\",\n    \"value\": \"file-input\",\n    \"filePath\": \"/path/to/file.pdf\"\n  }\n}\n```\n\n### take_screenshot\nCaptures a screenshot of the current page.\n\n**Parameters:**\n- `outputPath` (optional): Path where to save the screenshot. If not provided, returns base64 data.\n  - Type: string\n\n**Example:**\n```json\n{\n  \"tool\": \"take_screenshot\",\n  \"parameters\": {\n    \"outputPath\": \"/path/to/screenshot.png\"\n  }\n}\n```\n\n### close_session\nCloses the current browser session and cleans up resources.\n\n**Parameters:**\nNone required\n\n**Example:**\n```json\n{\n  \"tool\": \"close_session\",\n  \"parameters\": {}\n}\n```\n\n\n## License\n\nMIT\n",
      "npm_url": "https://www.npmjs.com/package/@angiejones/mcp-selenium",
      "npm_downloads": 12921,
      "keywords": [
        "webdriver",
        "selenium",
        "automation",
        "browser automation",
        "selenium automates",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "ashley-ha--mcp-manus": {
      "owner": "ashley-ha",
      "name": "mcp-manus",
      "url": "https://github.com/ashley-ha/mcp-manus",
      "imageUrl": "/freedevtools/mcp/pfp/ashley-ha.webp",
      "description": "Automate browser interactions to enhance web automation tasks by leveraging state management and interactive element manipulation. This agent integrates with the Model Context Protocol for seamless browser automation capabilities.",
      "stars": 7,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-01T04:40:35Z",
      "readme_content": "# MCP Browser Agent\n\n[![smithery badge](https://smithery.ai/badge/@ashley-ha/mcp-manus)](https://smithery.ai/server/@ashley-ha/mcp-manus)\n\nBuilt at AGI House MCP Hackathon\n\n<a href=\"https://glama.ai/mcp/servers/@ashley-ha/mcp-manus\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@ashley-ha/mcp-manus/badge\" alt=\"Browser Agent MCP server\" />\n</a>\n\n## Overview\n\nThis project is a browser automation agent that uses the Model Context Protocol (MCP) to enable browser interactions. It provides a seamless integration between Claude and browser automation capabilities through our MCP server. \n\nThank you to Browser-Use for their browser agent capabilities that help power our MCP server!\n\n## System Requirements\n\n- macOS (darwin 24.2.0)\n- Python 3.12 or higher\n- `uv` package manager\n- Google Chrome browser (Ensure your browser is closed before running task(s).)\n\n## Installation\n\n### Installing via Smithery\n\nTo install Browser Automation Agent for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@ashley-ha/mcp-manus):\n\n```bash\nnpx -y @smithery/cli install @ashley-ha/mcp-manus --client claude\n```\n\n### Manual Installation\n1. Clone the repository:\n```bash\ngit clone <repository-url>\ncd mcp\n```\n\n2. Set up the Python environment using `uv`:\n```bash\nuv venv\nsource .venv/bin/activate\nuv sync\n```\n\n## Configuration\n\n### Claude Desktop Configuration\n\nCreate or modify your Claude Desktop configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"browser-use\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/ABSOLUTE/PATH/TO/mcp\",\n        \"run\",\n        \"browser-use.py\"\n      ]\n    }\n  }\n}\n```\n\nReplace `/ABSOLUTE/PATH/TO/browser-use` with the absolute path to your project directory.\n\n### Browser Configuration\n\nThe agent is configured to use Google Chrome with the following default settings:\n- Non-headless mode for development\n- Window size: 1280x1100\n- Disabled security features for testing\n- Recording path: ./tmp/recordings\n\n## Features\n\n- Browser automation through MCP tools\n- State management and planning capabilities\n- Interactive element detection and manipulation\n- Configurable browser contexts\n- Logging and debugging support\n\n## Usage\n\nThe agent provides two main tools:\n\n1. `get_planner_state`: Retrieves the current browser state and planning context\n2. `execute_actions`: Executes planned actions in the browser\n\n## Development\n\n### Logging\n\nThe project uses Python's built-in logging with the following configuration:\n- All logs are directed to stderr\n- Custom formatting: `%(levelname)-8s [%(name)s] %(message)s`\n- Root logger level: INFO\n- Third-party loggers level: WARNING\n\n### Project Structure\n\n- `browser-use.py`: Main entry point and server implementation\n- `tmp/recordings`: Directory for browser session recordings\n- Dependencies managed through `uv`\n\n## Contributing\n\nThis project was built during the AGI House MCP Hackathon. Contributions are welcome!\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\nCopyright (c) 2025 Jaeyun Ha, Ashley Ha\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "scraping",
        "browser",
        "browser automation",
        "automate browser",
        "web automation"
      ],
      "category": "browser-automation"
    },
    "automatalabs--mcp-server-playwright": {
      "owner": "automatalabs",
      "name": "mcp-server-playwright",
      "url": "https://github.com/Automata-Labs-team/MCP-Server-Playwright",
      "imageUrl": "",
      "description": "An MCP server for browser automation using Playwright",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "https://www.npmjs.com/package/@automatalabs/mcp-server-playwright",
      "npm_downloads": 23397,
      "keywords": [
        "automation",
        "browser",
        "web",
        "automation web",
        "browser automation",
        "automation using"
      ],
      "category": "browser-automation"
    },
    "babelcloud--gbox": {
      "owner": "babelcloud",
      "name": "gbox",
      "url": "https://github.com/babelcloud/gbox",
      "imageUrl": "/freedevtools/mcp/pfp/babelcloud.webp",
      "description": "A self-hostable sandbox for executing commands, reading and writing files, and browsing the web across various platforms like iOS and Android. The server supports executing Linux commands and Python scripts, making it suitable for running complex analyses and generating documents like PDFs and diagrams.",
      "stars": 142,
      "forks": 43,
      "license": "Apache License 2.0",
      "language": "Go",
      "updated_at": "2025-10-03T09:35:08Z",
      "readme_content": "# GBOX\n\n![GBOX Animation](https://github.com/user-attachments/assets/50a6ebb4-d432-4364-b651-1738855a4b1f)\n\n**GBOX** provides environments for AI Agents to operate computer and mobile devices.\n\n![GBOX Introduction](https://github.com/user-attachments/assets/eded50bd-4498-4bca-85f8-fb3ec272e032)\n\n*Mobile Scenario:*\nYour agents can use GBOX to develop/test android apps, or run apps on the Android to complete various tasks(mobile automation).\n\n*Desktop Scenario:*\nYour agents can use GBOX to operate desktop apps such as browser, terminal, VSCode, etc(desktop automation).\n\n*MCP:* \nYou can also plug GBOX MCP to any Agent you like, such as Cursor, Claude Code. These agents will instantly get the ability to operate computer and mobile devices.\n\n## Installation\n\n### System Requirements\n\n- MacOS \n  - Version: 10.15 or later\n  - [Homebrew](https://brew.sh)\n\n> Note: Using gbox on other platforms, please check npm package [@gbox.ai/cli](https://www.npmjs.com/package/@gbox.ai/cli) for installation instructions. You can also login to [GBOX.AI](https://gbox.ai) to use web-based dashboard.\n\n### Installation Steps\n\n```bash\n# Install via Homebrew (on MacOS)\nbrew install gbox\n# Login to gbox.ai\ngbox login\n\n# Export MCP config and merge into Claude Code/Cursor\ngbox mcp export --merge-to claude-code\ngbox mcp export --merge-to cursor\n```\n\n### Command Line Usage\n\nCheck [GBOX CLI Reference](https://docs.gbox.ai/cli) for detailed usage.\n\n### SDK Usage\n\nCheck [GBOX SDK Reference](https://docs.gbox.ai/sdk) for detailed usage.\n\n## Use GBOX as a MCP Server(Login required)\n\nUsing GBOX CLI to configure MCP server to your Claude Code/Cursor:\n```bash\n# Export MCP config for Cursor\ngbox mcp export --merge-to cursor\n\n# Export MCP config for Claude Code\ngbox mcp export --merge-to claude-code --scope project\n\n```\n\nOr copy paste the following content into your Claude Code/Cursor MCP config:\n```json\n{\n  \"mcpServers\": {\n    \"gbox-android\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@gbox.ai/mcp-android-server@latest\"\n      ]\n    }\n  }\n}\n```\n> Note:\n> - Currently, GBOX MCP can only control Android environments.\n> - If you need Cursor/Claude Code to control your local Android device, please check [Register Local Device](https://docs.gbox.ai/cli/register-local-device)\n\n## Android MCP Use Cases\n\n| Use Case | Demo |\n|----------|------|\n| Claude Code Develop/Test Android App | [![Claude Code Develop/Test Android App](https://img.youtube.com/vi/IzlZFsqC4CY/maxresdefault.jpg)](https://www.youtube.com/watch?v=IzlZFsqC4CY) |\n| Claude Code Compare Prices on eCommerce Apps | [![Claude Code Compare Prices on eCommerce Apps](https://img.youtube.com/vi/Op3ZSVg-qg8/maxresdefault.jpg)](https://www.youtube.com/watch?v=Op3ZSVg-qg8) |\n\n\n## Environments\nCurrently, GBOX supports the following environments:\n- Android\n- Linux Desktop/Browser\n\n### Android Environment\nThere are three types of Android environments, you can choose based on your needs:\n\n**1. Cloud Virtual Device:** \n\nLogin to [GBOX.AI](https://gbox.ai) to get a cloud virtual device. Best for testing and development.\n\n**2. Cloud Physical Device:** \n\nLogin to [GBOX.AI](https://gbox.ai) to get a cloud physical device. Cloud physical device is a real Android phone that you can use for production scenarios.\n\n**3. Local Physical Device:** \n\nUse your own physical device [Register Local Device](https://docs.gbox.ai/cli/register-local-device). Your local device can be any Android device that have Developer Mode enabled. Best for production scenarios and personal use.\n\n### Linux Desktop/Browser Environment\n\nLogin to [GBOX.AI](https://gbox.ai) to get a Linux desktop/browser environment. Best for testing and development.\n\n## Develop gbox\n\n### Prerequisites\n\n- Go 1.21 or later\n- Make\n- pnpm (via corepack)\n- Node.js 16.13 or later\n\n### Build\n\n```bash\n# Build all components\nmake build\n\n# Create distribution package\nmake dist\n```\n\n### Running Services\n\n```bash\n# MCP Server\ncd packages/mcp-server && pnpm dev\n\n# MCP Inspector\ncd packages/mcp-server && pnpm inspect\n```\n\n### Contributing\n\nWe welcome contributions! Please feel free to submit a Pull Request. For major changes, please open an issue first to discuss what you would like to change.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b username/feature-name`)\n3. Commit your changes (`git commit -m 'Add some feature'`)\n4. Push to the branch (`git push origin username/feature-name`)\n5. Open a Pull Request\n\n### Things to Know about Dev and Debug Locally\n\n## License\n\nThis project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "https://www.npmjs.com/package/gbox",
      "npm_downloads": 5722,
      "keywords": [
        "babelcloud",
        "automation",
        "browser",
        "browser automation",
        "automation web",
        "babelcloud gbox"
      ],
      "category": "browser-automation"
    },
    "blazickjp--web-browser-mcp-server": {
      "owner": "blazickjp",
      "name": "web-browser-mcp-server",
      "url": "https://github.com/blazickjp/web-browser-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/blazickjp.webp",
      "description": "Provides advanced web browsing capabilities for AI applications, enabling interaction with web content and retrieval of information from online sources.",
      "stars": 42,
      "forks": 11,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-18T11:51:57Z",
      "readme_content": "[![Twitter Follow](https://img.shields.io/twitter/follow/JoeBlazick?style=social)](https://twitter.com/JoeBlazick)\n[![smithery badge](https://smithery.ai/badge/web-browser-mcp-server)](https://smithery.ai/server/web-browser-mcp-server)\n[![Python Version](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![PyPI Downloads](https://img.shields.io/pypi/dm/web-browser-mcp-server.svg)](https://pypi.org/project/web-browser-mcp-server/)\n[![PyPI Version](https://img.shields.io/pypi/v/web-browser-mcp-server.svg)](https://pypi.org/project/web-browser-mcp-server/)\n\n<a href=\"https://glama.ai/mcp/servers/3hphahzvql\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/3hphahzvql/badge\" alt=\"web-browser-mcp-server MCP server\" /></a>\n\n## ‚ú® Features\n\n> üåê Enable AI assistants to browse and extract content from the web through a simple MCP interface.\n\nThe Web Browser MCP Server provides AI models with the ability to browse websites, extract content, and understand web pages through the Message Control Protocol (MCP). It enables smart content extraction with CSS selectors and robust error handling.\n\n<div align=\"center\">\n  \nü§ù **[Contribute](https://github.com/blazickjp/web-browser-mcp-server/blob/main/CONTRIBUTING.md)** ‚Ä¢ \nüìù **[Report Bug](https://github.com/blazickjp/web-browser-mcp-server/issues)**\n\n</div>\n\n## ‚ú® Core Features\n\n- üéØ **Smart Content Extraction**: Target exactly what you need with CSS selectors\n- ‚ö° **Lightning Fast**: Built with async processing for optimal performance\n- üìä **Rich Metadata**: Capture titles, links, and structured content\n- üõ°Ô∏è **Robust & Reliable**: Built-in error handling and timeout management\n- üåç **Cross-Platform**: Works everywhere Python runs\n\n## üöÄ Quick Start\n\n### Installing via Smithery\n\nTo install Web Browser Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/web-browser-mcp-server):\n\n```bash\nnpx -y @smithery/cli install web-browser-mcp-server --client claude\n```\n\n### Installing Manually\nInstall using uv:\n\n```bash\nuv tool install web-browser-mcp-server\n```\n\nFor development:\n\n```bash\n# Clone and set up development environment\ngit clone https://github.com/blazickjp/web-browser-mcp-server.git\ncd web-browser-mcp-server\n\n# Create and activate virtual environment\nuv venv\nsource .venv/bin/activate\n\n# Install with test dependencies\nuv pip install -e \".[test]\"\n```\n\n### üîå MCP Integration\n\nAdd this configuration to your MCP client config file:\n\n```json\n{\n    \"mcpServers\": {\n        \"web-browser-mcp-server\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"tool\",\n                \"run\",\n                \"web-browser-mcp-server\"\n            ],\n            \"env\": {\n                \"REQUEST_TIMEOUT\": \"30\"\n            }\n        }\n    }\n}\n```\n\nFor Development:\n\n```json\n{\n    \"mcpServers\": {\n        \"web-browser-mcp-server\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"path/to/cloned/web-browser-mcp-server\",\n                \"run\",\n                \"web-browser-mcp-server\"\n            ],\n            \"env\": {\n                \"REQUEST_TIMEOUT\": \"30\"\n            }\n        }\n    }\n}\n```\n\n## üí° Available Tools\n\nThe server provides a powerful web browsing tool:\n\n### browse_webpage\nBrowse and extract content from web pages with optional CSS selectors:\n\n```python\n# Basic webpage fetch\nresult = await call_tool(\"browse_webpage\", {\n    \"url\": \"https://example.com\"\n})\n\n# Target specific content with CSS selectors\nresult = await call_tool(\"browse_webpage\", {\n    \"url\": \"https://example.com\",\n    \"selectors\": {\n        \"headlines\": \"h1, h2\",\n        \"main_content\": \"article.content\",\n        \"navigation\": \"nav a\"\n    }\n})\n```\n\n## ‚öôÔ∏è Configuration\n\nConfigure through environment variables:\n\n| Variable | Purpose | Default |\n|----------|---------|---------|\n| `REQUEST_TIMEOUT` | Webpage request timeout in seconds | 30 |\n\n## üß™ Testing\n\nRun the test suite:\n\n```bash\npython -m pytest\n```\n\n## üìÑ License\n\nReleased under the MIT License. See the LICENSE file for details.\n\n---\n\n<div align=\"center\">\n\nMade with ‚ù§Ô∏è by the Pear Labs Team\n\n<a href=\"https://glama.ai/mcp/servers/04dtxi5i5n\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/04dtxi5i5n/badge\" alt=\"Web Browser MCP Server\" /></a>\n</div>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "browser",
        "web",
        "browser automation",
        "automation web",
        "advanced web"
      ],
      "category": "browser-automation"
    },
    "browsercat--browsercat-mcp-server": {
      "owner": "browsercat",
      "name": "browsercat-mcp-server",
      "url": "https://github.com/browsercat/browsercat-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/browsercat.webp",
      "description": "Automate web interactions by navigating to URLs, taking screenshots, and executing JavaScript in a cloud-based browser environment without local installations.",
      "stars": 4,
      "forks": 8,
      "license": "No License",
      "language": "",
      "updated_at": "2025-09-28T23:03:49Z",
      "readme_content": "# BrowserCat MCP Server\n\nA Model Context Protocol server that provides browser automation capabilities using BrowserCat's cloud browser service. This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment without needing to install browsers locally.\n\n## Components\n\n### Tools\n\n- **browsercat_navigate**\n    - Navigate to any URL in the browser\n    - Input: `url` (string)\n- **browsercat_screenshot**\n    - Capture screenshots of the entire page or specific elements\n    - Inputs:\n        - `name` (string, required): Name for the screenshot\n        - `selector` (string, optional): CSS selector for element to screenshot\n        - `width` (number, optional, default: 800): Screenshot width\n        - `height` (number, optional, default: 600): Screenshot height\n- **browsercat_click**\n    - Click elements on the page\n    - Input: `selector` (string): CSS selector for element to click\n- **browsercat_hover**\n    - Hover elements on the page\n    - Input: `selector` (string): CSS selector for element to hover\n- **browsercat_fill**\n    - Fill out input fields\n    - Inputs:\n        - `selector` (string): CSS selector for input field\n        - `value` (string): Value to fill\n- **browsercat_select**\n    - Select an option from a dropdown menu\n    - Inputs:\n        - `selector` (string): CSS selector for select element\n        - `value` (string): Value to select\n- **browsercat_evaluate**\n    - Execute JavaScript in the browser console\n    - Input: `script` (string): JavaScript code to execute\n\n### Resources\n\nThe server provides access to two types of resources:\n\n1. **Console Logs** (`console://logs`)\n    - Browser console output in text format\n    - Includes all console messages from the browser\n2. **Screenshots** (`screenshot://<name>`)\n    - PNG images of captured screenshots\n    - Accessible via the screenshot name specified during capture\n\n## Key Features\n\n- Cloud-based browser automation\n- No local browser installation required\n- Console log monitoring\n- Screenshot capabilities\n- JavaScript execution\n- Basic web interaction (navigation, clicking, form filling)\n\n## Configuration to use BrowserCat MCP Server\n\n### Environment Variables\n\nThe BrowserCat MCP server requires the following environment variable:\n\n- `BROWSERCAT_API_KEY`: Your BrowserCat API key (required). You can get one for free at https://browsercat.xyz/mcp.\n\n### NPX Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"browsercat\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@browsercatco/mcp-server\"],\n      \"env\": {\n        \"BROWSERCAT_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "browsercat",
        "automation",
        "browser",
        "browser automation",
        "automation web",
        "automate web"
      ],
      "category": "browser-automation"
    },
    "browsermcp--mcp": {
      "owner": "browsermcp",
      "name": "mcp",
      "url": "https://github.com/browsermcp/mcp",
      "imageUrl": "",
      "description": "Automate your local Chrome browser",
      "stars": 4500,
      "forks": 329,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-03T08:55:27Z",
      "readme_content": "<a href=\"https://browsermcp.io\">\n  \n</a>\n\n<h3 align=\"center\">Browser MCP</h3>\n\n<p align=\"center\">\n  Automate your browser with AI.\n  <br />\n  <a href=\"https://browsermcp.io\"><strong>Website</strong></a> \n  ‚Ä¢\n  <a href=\"https://docs.browsermcp.io\"><strong>Docs</strong></a>\n</p>\n\n## About\n\nBrowser MCP is an MCP server + Chrome extension that allows you to automate your browser using AI applications like VS Code, Claude, Cursor, and Windsurf.\n\n## Features\n\n- ‚ö° Fast: Automation happens locally on your machine, resulting in better performance without network latency.\n- üîí Private: Since automation happens locally, your browser activity stays on your device and isn't sent to remote servers.\n- üë§ Logged In: Uses your existing browser profile, keeping you logged into all your services.\n- ü•∑üèº Stealth: Avoids basic bot detection and CAPTCHAs by using your real browser fingerprint.\n\n## Contributing\n\nThis repo contains all the core MCP code for Browser MCP, but currently cannot yet be built on its own due to dependencies on utils and types from the monorepo where it's developed.\n\n## Credits\n\nBrowser MCP was adapted from the [Playwright MCP server](https://github.com/microsoft/playwright-mcp) in order to automate the user's browser rather than creating new browser instances. This allows using the user's existing browser profile to use logged-in sessions and avoid bot detection mechanisms that commonly block automated browser use.",
      "npm_url": "https://www.npmjs.com/package/mcp",
      "npm_downloads": 17624,
      "keywords": [
        "browsermcp",
        "automation",
        "browser",
        "browser automation",
        "automation web",
        "browsermcp mcp"
      ],
      "category": "browser-automation"
    },
    "browserstack--mcp-server": {
      "owner": "browserstack",
      "name": "mcp-server",
      "url": "https://github.com/browserstack/mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/browserstack.webp",
      "description": "Connects to BrowserStack's cloud infrastructure for executing manual and automated tests on real devices and browsers. Offers tools for debugging, fixing test failures, and ensuring accessibility compliance within development workflows.",
      "stars": 96,
      "forks": 29,
      "license": "GNU Affero General Public License v3.0",
      "language": "TypeScript",
      "updated_at": "2025-09-30T02:10:27Z",
      "readme_content": "# BrowserStack MCP Server\n\n<div align=\"center\">\n \n</div>\n\n\n<div align=\"center\">\n<a href=\"https://www.npmjs.com/package/@browserstack/mcp-server\">\n<img alt=\"NPM Version\" src=\"https://img.shields.io/npm/v/%40browserstack%2Fmcp-server\">\n</a>\n\n</div>\n\n<p align=\"center\">Comprehensive Test Platform</p>\n\n<div align=\"center\">\n<a href=\"https://glama.ai/mcp/servers/@browserstack/mcp-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@browserstack/mcp-server/badge\" alt=\"BrowserStack server MCP server\" />\n</a>\n</div>\n\n<div>\n    <a href=\"https://www.youtube.com/watch?v=sLA7K9v7qZc&list=PL1vH6dHT3H7oy8w9CY6L_nxGxCc89VXMX&index=5\">\n      \n    </a>\n  </div>\n\n  \nManage test cases, execute manual or automated tests, debug issues, and even fix code‚Äîdirectly within tools like Cursor, Claude, or any MCP-enabled client, using plain English.\n#### Test from anywhere:\nEasily connect the BrowserStack Test Platform to your favourite AI tools, such as IDEs, LLMs, or agentic workflows.\n#### Test with natural language:\nManage, execute, debug tests, and even fix code using plain English prompts.\n#### Reduced context switching:\nStay in flow‚Äîkeep all project context in one place and trigger actions directly from your IDE or LLM.\n\n## ‚ö°Ô∏è One Click MCP Setup  \n\nClick on the buttons below to install MCP in your respective IDE:\n\n<a href=\"http://mcp.browserstack.com/one-click-setup?client=vscode\"></a>&nbsp;&nbsp;&nbsp;<a href=\"http://mcp.browserstack.com/one-click-setup?client=cursor\"></a>\n\n#### Note : Ensure you are using Node version >= `18.0` \n- Check your node version using `node --version`. Recommended version: `v22.15.0` (LTS)\n- To Upgrade Node :\n- 1. On macOS `(Homebrew) - brew update && brew upgrade node  or if using (nvm) - nvm install 22.15.0 && nvm use 22.15.0 && nvm alias default 22.15.0`\n- 2. On Windows `(nvm-windows) : nvm install 22.15.0 && nvm use 22.15.0`\n- üëâ <a href=\"https://nodejs.org/en/download\" target=\"_blank\">Or directly download the Node.js LTS Installer</a>\n\n.\n        \n## üí° Usage Examples\n\n### üì± Manual App Testing\n\nTest mobile apps on real devices across the latest OS versions. Reproduce bugs and debug crashes without setup hassles.\nBelow are some sample prompts to use your mobile apps on BrowserStack's extensive cloud of real devices\n```bash\n# Open app on specific device\n\"open my app on a iPhone 15 Pro Max\"\n\n# Debug app crashes\n\"My app crashed on Android 14 device, can you help me debug?\"\n```\n\n- Unlike emulators, test your app's real-world performance on actual devices. With advanced [App-Profiling features](https://www.browserstack.com/docs/app-live/app-performance-testing), you can debug crashes and performance issues in real-time.\n- Access all major devices and OS versions from our [device grid](https://www.browserstack.com/list-of-browsers-and-platforms/app_live), We have strict SLAs to provision our global datacenters with newly released devices on [launch day](https://www.browserstack.com/blog/browserstack-launches-iphone-15-on-day-0-behind-the-scenes/).\n\n### üåê Manual Web Testing\n\nSimilar to the app testing, you can use the following prompts to test your **websites** on BrowserStack's extensive cloud of real browsers and devices. Don't have Edge browser installed on your machine ? We've got you covered!\n\n```bash\n# Test your websites\n\"open my website hosted on localhost:3001 on Edge\"\n\"open browserstack.com on latest version of Chrome\"\n```\n\n- Test websites across different browsers and devices. We support [every major browser](https://www.browserstack.com/list-of-browsers-and-platforms/live) across every major OS.\n- Seamlessly test websites hosted locally on your machine, no need to deploy to a remote server!\n\n### üß™ Automated Testing (Playwright, Selenium, A11y and more..)\n\nAuto-analyze, diagnose, and even fix broken test scripts right in your IDE or LLM. Instantly fetch logs, identify root causes, and apply context-aware fixes. No more debugging loops.\nBelow are few example prompts to run/debug/fix your automated tests on BrowserStack's [Test Platform](https://www.browserstack.com/test-platform).\n\n```bash\n#Port test suite to BrowserStack\n\"Setup test suite to run on BrowserStack infra\"\n\n#Run tests on BrowserStack\n‚ÄúRun my tests on BrowserStack‚Äù\n\n#AI powered debugging of test failures\n\"My App Automate tests have failed, can you help me fix the new failures?\"\n\n```\n- Fix test failures reported by your CI/CD pipeline by utilising our industry leading [Test Observability](https://www.browserstack.com/docs/test-observability) features. Find more info [here](https://www.browserstack.com/docs/test-observability/features/smart-tags).\n- Run tests written in Jest, Playwright, Selenium, and more on BrowserStack's [Test Platform](https://www.browserstack.com/test-platform)\n\n### üåê Accessibility\n\nCatch accessibility issues early with automated, local a11y scans. Get one-click, AI-suggested fixes. No docs hunting, no CI surprises. Ensure WCAG and ADA compliance with our Accessibility Testing tool\n\n```bash\n#Scan accessibility issues while development\n\"Scan & help fix accessibility issues for my website running locally on localhost:3000\"\n\n#Scan accessibility issues on production site\n‚ÄúRun accessibility scan & identify issues on my website - www.bstackdemo.com‚Äù\n\n```\n\n### üìã Test Management \n\nCreate and manage test cases, create test plans and trigger test runs using natural language. Below are a few example prompts to utilise capabilities of BrowserStack's [Test Management](https://www.browserstack.com/test-management) with MCP server.\n\n```bash\n# Create project & folder structure\n\"create new Test management project named My Demo Project with two sub folders - Login & Checkout\"\n\n# Add test cases\n\"add invalid login test case in Test Management project named My Demo Project\"\n\n# List added test cases \n\"list high priority Login test cases from Test Management project - My Demo Project\"\n\n# Create test run\n\"create a test run for Login tests from Test Management project - My Demo Project\"\n\n# Update test results\n\"update test results as passed for Login tests test run from My Demo Project\"\n```\n\n### üß™ Access BrowserStack AI agents \n\nGenerate test cases from PRDs, convert manual tests to low-code automation, and auto-heal flaky scripts powered by BrowserStack‚Äôs AI agents, seamlessly integrated into your workflow.  Below are few example prompts to access Browserstack AI agents\n\n```bash\n#Test case generator agent\n\"With Browserstack AI, create relevant test cases for my PRD located at /usr/file/location\"\n\n\n#Low code authoring agent\n‚ÄúWith Browserstack AI, automate my manual test case X, added in Test Management‚Äù\n\n\n#Self healing agent\n‚ÄúHelp fix flaky tests in my test script with Browserstack AI self healing‚Äù\n```\n\n\n## üõ†Ô∏è Installation\n\n### üìã Prerequisites for MCP Setup\n#### Note : Ensure you are using Node version >= `18.0` \n- Check your node version using `node --version`. Recommended version: `v22.15.0` (LTS)\n   \n### **One Click MCP Setup**\n\nClick on the buttons below to install MCP in your respective IDE:\n\n<a href=\"http://mcp.browserstack.com/one-click-setup?client=vscode\"></a>&nbsp;&nbsp;&nbsp;<a href=\"http://mcp.browserstack.com/one-click-setup?client=cursor\"></a>\n\n### **Alternate ways to Setup MCP server**\n\n1. **Create a BrowserStack Account**\n\n   - Sign up for [BrowserStack](https://www.browserstack.com/users/sign_up) if you don't have an account already.\n\n   - ‚ÑπÔ∏è If you have an open-source project, we'll be able to provide you with a [free plan](https://www.browserstack.com/open-source).\n   \n\n   - Once you have an account (and purchased appropriate plan), note down your `username` and `access_key` from [Account Settings](https://www.browserstack.com/accounts/profile/details).\n\n2. #### Note : Ensure you are using Node version >= `18.0` \n    - Check your node version using `node --version`. Recommended version: `v22.15.0` (LTS)\n   \n\n3. **Install the MCP Server**\n\n   - VSCode (Copilot - Agent Mode): `.vscode/mcp.json`:\n    \n      - Locate or Create the Configuration File: \n        In the root directory of your project, look for a folder named .vscode. This folder is usually hidden so you will need to find it as mentioned in the expand.\n    \n      - If this folder doesn't exist, create it.\n    \n      - Inside the .vscode folder, create a new file named mcp.json\n      \n      - Add the Configuration: Open the mcp.json file and then add the  following JSON content. \n      \n      - Replace the username and <access_key> with your BrowserStack   credentials.\n\n   ```json\n   {\n     \"servers\": {\n       \"browserstack\": {\n         \"command\": \"npx\",\n         \"args\": [\"-y\", \"@browserstack/mcp-server@latest\"],\n         \"env\": {\n           \"BROWSERSTACK_USERNAME\": \"<username>\",\n           \"BROWSERSTACK_ACCESS_KEY\": \"<access_key>\"\n         }\n       }\n     }\n   }\n   ```\n\n   - In VSCode, make sure to click on `Start` button in the MCP Server to start the server.\n     \n\n   \n   #### ** Alternate way to setup MCP on VSCode Copilot\n\n   1.Click on the gear icon to Select Tools\n    <div align=\"center\">\n       \n    </div>\n   2. A tool menu would appear at the top-centre, scroll down on the     menu at the top and then Click on Add MCP Server\n    <div align=\"center\">\n       \n    </div>\n   3. Select NPM package option (Install fron an NPM package) - 3rd in the list\n    <div align=\"center\">\n       \n    </div>\n   4. Enter NPM Package Name (@browserstack/mcp-server)\n    <div align=\"center\">\n       \n    </div>\n   5. Enter browserstack user name and access key\n   \n   \n   \n   \n   * For Cursor: `.cursor/mcp.json`:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"browserstack\": {\n         \"command\": \"npx\",\n         \"args\": [\"-y\", \"@browserstack/mcp-server@latest\"],\n         \"env\": {\n           \"BROWSERSTACK_USERNAME\": \"<username>\",\n           \"BROWSERSTACK_ACCESS_KEY\": \"<access_key>\"\n         }\n       }\n     }\n   }\n   ```\n\n   - Claude Desktop: `~/claude_desktop_config.json`:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"browserstack\": {\n         \"command\": \"npx\",\n         \"args\": [\"-y\", \"@browserstack/mcp-server@latest\"],\n         \"env\": {\n           \"BROWSERSTACK_USERNAME\": \"<username>\",\n           \"BROWSERSTACK_ACCESS_KEY\": \"<access_key>\"\n         }\n       }\n     }\n   }\n   ```\n   - Cline\n     \nClick the ‚ÄúMCP Servers‚Äù icon in the navigation bar\nSelect the ‚ÄúInstalled‚Äù tab. Click the ‚ÄúConfigure MCP Servers‚Äù button at the bottom of the pane.\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"browserstack\": {\n         \"command\": \"npx\",\n         \"args\": [\"-y\", \"@browserstack/mcp-server@latest\"],\n         \"env\": {\n           \"BROWSERSTACK_USERNAME\": \"<username>\",\n           \"BROWSERSTACK_ACCESS_KEY\": \"<access_key>\"\n         }\n       }\n     }\n   }\n   ```\n\n### Installing via Smithery\n\nTo install BrowserStack Test Platform Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@browserstack/mcp-server):\n\n```bash\nnpx -y @smithery/cli install @browserstack/mcp-server --client claude\n```\n\n\n### üí° List of BrowserStack MCP Tools\n\nAs of now we support 20 tools.\n\n\n---\n\n## üßæ Test Management\n\n 1. `createProjectOrFolder` ‚Äî Create a Test Management project and/or folders to organize test cases. Returns with Folder ID, Project ID and Test Management Link to access the TM Project Dashboard.\n  **Prompt example**\n\n  ```text\n  Create a new Test Management project named 'Shopping App' with two folders - Login and Checkout\n  ```\n\n\n 2. `createTestCase` ‚Äî Add a manual test case under a specific project/folder (uses project identifier like PR-xxxxx and a folder ID).\n  **Prompt example**\n\n  ```text\n  Add a test case named 'Invalid Login Scenario' to the Login folder in the 'Shopping App' project with PR-53617, Folder ID: 117869\n  ```\n\n 3. `listTestCases` ‚Äî List test cases for a project (supports filters like priority, status, tags).\n  **Prompt example**\n\n  ```text\n  List all high-priority test cases in the 'Shopping App' project with project_identifier: PR-59457\n  ```\n\n 4. `createTestRun` ‚Äî Create a test run (suite) for selected test cases in a project.\n  **Prompt example**\n\n  ```text\n  Create a test run for the Login folder in the 'Shopping App' project and name it 'Release v1.0 Login Flow'\n  ```\n\n 5. `listTestRuns` ‚Äî List test runs for a project (filter by dates, assignee, state).\n  **Prompt example**\n\n  ```text\n  List all test runs from the 'Shopping App' project that were executed last week and are currently marked in-progress\n  ```\n\n 6. `updateTestRun` ‚Äî Partially update a test run (status, tags, notes, associated test cases).\n  **Prompt example**\n\n  ```text\n  Update test run ID 1043 in the 'Shopping App' project and mark it as complete with the note 'Regression cycle done'\n  ```\n\n 7. `addTestResult` ‚Äî Add a manual execution result (passed/failed/blocked/skipped) for a test case within a run.\n  **Prompt example**\n\n  ```text\n  Mark the test case 'Invalid Login Scenario' as passed in test run ID 1043 of the 'Shopping App' project\n  ```\n\n 8. `createTestCasesFromFile` ‚Äî Bulk-create test cases from an uploaded file (e.g., PDF).\n  **Prompt example**\n\n  ```text\n  Upload test cases from '/Users/xyz/testcases.pdf' to the 'Shopping App' project in Test Management\n  ```\n\n---\n\n## ‚öôÔ∏è BrowserStack SDK Setup / Automate Test\n\n 9. `setupBrowserStackAutomateTests` ‚Äî Integrate BrowserStack SDK and run web tests on BrowserStack (optionally enable Percy).\n  **Prompt example**\n\n  ```text\n  Run my Selenium-JUnit5 tests written in Java on Chrome and Firefox. Enable Percy for visual testing.\n  ```\n\n 10. `fetchAutomationScreenshots` ‚Äî Fetch screenshots captured during a given Automate/App Automate session.\n  **Prompt example**\n\n  ```text\n  Get screenshots from Automate session ID abc123xyz for my desktop test run\n  ```\n\n---\n\n## üîç Observability\n\n 11. `getFailureLogs` ‚Äî Retrieve error logs for Automate/App Automate sessions (optionally by Build ID for App Automate).\n  **Prompt example**\n\n  ```text\n  Get the error logs from the session ID: 21a864032a7459f1e7634222249b316759d6827f, Build ID: dt7ung4wmjittzff8kksrjadjax9gzvbscoyf9qn of App Automate test session\n  ```\n\n---\n\n## üì± App Live\n\n 12. `runAppLiveSession` ‚Äî Start a manual app testing session on a real device in the cloud.\n  **Prompt example**\n\n  ```text\n  Open my app on iPhone 15 Pro Max with iOS 17. App path is /Users/xyz/app.ipa\n  ```\n\n---\n\n## üíª Live\n\n 13. `runBrowserLiveSession` ‚Äî Start a Live session for website testing on desktop or mobile browsers.\n  **Prompt example**\n\n  ```text\n  Open www.google.com on the latest version of Microsoft Edge on Windows 11\n  ```\n\n---\n\n## üì≤ App Automate\n\n 14. `takeAppScreenshot` ‚Äî Launch the app on a specified device and captures a quick verification screenshot. This tool is just to verify whether your app has been launched.\n  **Prompt example**\n\n  ```text\n  Take a screenshot of my app on Google Pixel 6 with Android 12 while testing on App Automate. App file path: /Users/xyz/app-debug.apk\n  ```\n\n 15. `runAppTestsOnBrowserStack` ‚Äî Run automated mobile tests (Espresso/XCUITest, etc.) on real devices.\n  **Prompt example**\n\n  ```text\n  Run Espresso tests from /tests/checkout.zip on Galaxy S21 and Pixel 6 with Android 12. App path is /apps/beta-release.apk under project 'Checkout Flow'\n  ```\n\n---\n\n## ‚ôø Accessibility\n\n 16. `accessibilityExpert` ‚Äî Ask A11y Expert (WCAG 2.0/2.1/2.2, mobile/web usability, best practices).\n  **Prompt example**\n\n  ```text\n  What WCAG guidelines apply to form field error messages on mobile web?\n  ```\n\n 17. `startAccessibilityScan` ‚Äî Start a web accessibility scan and return the result link.\n  **Prompt example**\n\n  ```text\n  Run accessibility scan for \"www.example.com\"\n  ```\n\n---\n\n## ü§ñ BrowserStack AI Agents\n\n 18. `fetchSelfHealedSelectors` ‚Äî Retrieve AI self-healed selectors to fix flaky tests due to DOM changes.\n  **Prompt example**\n\n  ```text\n  Fetch and fix flaky test selectors in Automate session ID session_9482 using MCP\n  ```\n\n 19. `createLCASteps` ‚Äî Generate Low Code Automation steps from a manual test case in Test Management.\n  **Prompt example**\n\n  ```text\n  Convert the manual test case 'Add to Cart' in the 'Shopping App' project into LCA steps\n  ```\n\n 20. `uploadProductRequirementFile` ‚Äî Upload a PRD/screenshot/PDF and get a file mapping ID (used with `createTestCasesFromFile`).\n  **Prompt example**\n\n  ```text\n  Upload PRD from /Users/xyz/Desktop/login-flow.pdf and use BrowserStack AI to generate test cases\n  ```\n##  üöÄ Remote MCP Server\n\nRemote MCP comes with all the functionalities of an MCP server without the hassles of complex setup or local installation.\n\n### Key benefits:\n\n- ‚úÖ Works seamlessly in enterprise networks without worrying about firewalls or binaries or where local installation is not allowed.\n\n- ‚úÖ Secure OAuth integration ‚Äì no password sharing or manual credential handling.\n\n### Limitations:\n\n- ‚ùå No Local Testing support (cannot test apps behind VPNs, firewalls, or localhost). If you have to do Local Testing, you would have to use a BrowserStack Local MCP server.\n- ‚ùå Latency can be slightly higher, but nothing considerable ‚Äî you generally won‚Äôt notice it in normal use.\n\n### Installation Steps: \n\n   - On VSCode (Copilot - Agent Mode): `.vscode/mcp.json`:\n    \n      - Locate or Create the Configuration File:\n      - In the root directory of your project, look for a folder named .vscode. This folder is usually hidden so you will need to find it as            mentioned in the expand.\n      - If this folder doesn't exist, create it.\n      - Inside the .vscode folder, create a new file named mcp.json\n      - To setup Remote BrowserStack MCP instead of local BrowserStack MCP you can add the following JSON content :\n         <div align=\"center\">\n         \n         </div>\n        \n        ### Alternative way to Setup Remote MCP\n\n      -  Step 1.Click on the gear icon to Select Tools\n      \n          <div align=\"center\">\n           \n          </div>\n          \n      -  Step 2. A tool menu would appear at the top-centre, scroll down on the menu at the top and then Click on Add MCP Server\n      \n        <div align=\"center\">\n         \n        </div>\n\n      - Step 3. Click on HTTP option\n         <div align=\"center\">\n         \n         </div>\n         \n      - Step 4. Paste Remote MCP Server URL : https://mcp.browserstack.com/mcp\n         <div align=\"center\">\n         \n         </div>\n         \n      - Step 5. Give server id as : browserstack\n      \n          <div align=\"center\">\n          \n          </div>\n          \n      - Step 6. In VSCode Click on start MCP Server and then click on \"Allow\"\n      \n          <div align=\"center\">\n          \n          </div>\n          \n          <div align=\"center\">\n          \n          </div>\n          \n          <div align=\"center\">\n          \n          </div>\n\n     \n\n## ü§ù Recommended MCP Clients\n\n- We recommend using **Github Copilot or Cursor** for automated testing + debugging use cases.\n- For manual testing use cases (Live Testing), we recommend using **Claude Desktop**.\n\n## ‚ö†Ô∏è Important Notes\n\n- The BrowserStack MCP Server is under active development and currently supports a subset of the MCP spec. More features will be added soon.\n- Tool invocations rely on the MCP Client which in turn relies on an LLM, hence there can be some non-deterministic behaviour that can lead to unexpected results. If you have any suggestions or feedback, please open an issue to discuss.\n\n## üìù Contributing\n\nWe welcome contributions! Please open an issue to discuss any changes you'd like to make.\nüëâ [**Click here to view our Contributing Guidelines**](https://github.com/browserstack/mcp-server/blob/main/CONTRIBUTING.md)\n\n## üìû Support\n\nFor support, please:\n\n- Open an issue in our [GitHub repository](https://github.com/browserstack/mcp-server) if you face any issues related to the MCP Server.\n- Contact our [support team](https://www.browserstack.com/contact) for any other queries.\n\n## üöÄ More Features Coming Soon\n\nStay tuned for exciting updates! Have any suggestions? Please open an issue to discuss.",
      "npm_url": "https://www.npmjs.com/package/mcp-server",
      "npm_downloads": 29732,
      "keywords": [
        "browserstack",
        "browser",
        "browsers",
        "browserstack mcp",
        "browser automation",
        "browserstack cloud"
      ],
      "category": "browser-automation"
    },
    "buyitsydney--CodingBaby-Browser-MCP": {
      "owner": "buyitsydney",
      "name": "CodingBaby-Browser-MCP",
      "url": "https://github.com/buyitsydney/CodingBaby-Browser-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/buyitsydney.webp",
      "description": "Bridges AI assistants with the Chrome browser for web browsing, interaction, and data collection using a WebSocket-based protocol. Supports automation tasks such as navigating websites, taking screenshots, and managing browser tabs and forms.",
      "stars": 24,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-05T01:10:48Z",
      "readme_content": "# CodingBaby-Browser-MCP\n\n## Overview\n\nCodingBaby-Browser-MCP is a powerful tool that enables AI assistants like Claude 3.7 Sonnet in Cursor to control Chrome browser for automated tasks. This tool bridges the gap between AI and web browser interaction through a WebSocket-based communication protocol.\n\n## Features\n\n- **Browser Automation**: Control Chrome browser programmatically to navigate websites, fill forms, and perform clicks\n- **Screenshot Capture**: Take screenshots of entire pages or specific areas\n- **Multi-tab Support**: Create, list, select, and close browser tabs\n- **Form Interaction**: Type text, press keys, and select form elements\n- **Batch Commands**: Execute multiple browser operations in sequence\n- **Viewport Control**: Adjust browser window size for responsive testing\n\n## Architecture\n\nThe project consists of two main components:\n\n1. **MCP Tool Server**: A Node.js server that implements the Model Context Protocol (MCP) to communicate with AI assistants in Cursor\n2. **Chrome Extension**: A browser extension that receives commands from the MCP server and controls the browser\n\nThe system uses WebSocket (port 9876 by default) to establish a bidirectional communication channel between the MCP server and the Chrome extension.\n\n## Installation\n\n### Prerequisites\n- Node.js (v14 or higher)\n- Chrome browser\n- Cursor editor with Claude 3.7 Sonnet\n\n### MCP Tool Setup\n1. In Cursor, go to Settings ‚Üí MCP\n2. Add new global MCP server with the following configuration:\n```json\n{\n  \"mcpServers\": {\n    \"CodingBaby-Browser-MCP\": {\n      \"command\": \"npx\",\n      \"args\": [\"@sydneyassistent/codingbaby-browser-mcp\"]\n    }\n  }\n}\n```\n\n### Chrome Extension Setup\n1. Install the CodingBaby Extension from the Chrome Web Store\n2. Enable the extension and ensure it has the necessary permissions\n\n## Usage\n\nOnce installed, you can ask Claude 3.7 in Cursor to control your browser:\n\n```\nUse the browser to navigate to https://example.com\n```\n\n## Available Commands\n\n- `navigate`: Open a URL in the browser\n- `click`: Click on elements\n- `type`: Enter text in form fields\n- `pressKey`: Simulate keyboard actions\n- `scroll`: Scroll in any direction\n- `takeScreenshot`: Capture browser content\n- `wait`: Pause execution for specified time\n- `setViewport`: Change browser window dimensions\n- `tabNew`, `tabList`, `tabSelect`, `tabClose`: Tab management\n- `batch`: Execute multiple commands in sequence\n- `close`: Close the browser session\n\n## Development and Debugging\n\nIf you've downloaded the source code, you can set up the project for development and debugging purposes.\n\n### Debugging Chrome Extension\n\nTo load and debug the Chrome extension from source code:\n\n1. Open Chrome and navigate to `chrome://extensions/`\n2. Enable \"Developer mode\" by toggling the switch in the top-right corner\n3. Click \"Load unpacked\" button\n4. Navigate to the `chrome-extension` directory in the project and select it\n5. The extension will now be loaded in developer mode\n6. You can view console logs by right-clicking the extension icon, selecting \"Inspect\" and opening the Console tab\n7. Make changes to the extension code and click the refresh icon on the extension card to apply changes\n\n### Debugging MCP Server in Cursor\n\nTo use the local MCP server code for debugging:\n\n1. Clone or download the repository to your local machine\n2. Navigate to the project directory and install dependencies:\n   ```bash\n   cd Browser-MCP\n   npm install\n   ```\n3. In Cursor, go to Settings ‚Üí MCP\n4. Add a new MCP server with the following configuration:\n   ```json\n   {\n     \"mcpServers\": {\n       \"CodingBaby-Browser-MCP-Dev\": {\n         \"command\": \"node\",\n         \"args\": [\"/absolute/path/to/your/Browser-MCP/index.js\"]\n       }\n     }\n   }\n   ```\n   Replace `/absolute/path/to/your/` with the actual path to the downloaded project\n5. Click \"Refresh\" to load the MCP server\n6. You can now make changes to the MCP server code and restart the server by clicking \"Refresh\" in Cursor's MCP settings\n\nFor debugging, you can:\n- Check the Cursor MCP logs by clicking on the MCP status icon\n- Add `console.error()` statements to the code for more detailed logging\n- Run the MCP server manually from the terminal for full console output\n\n## Troubleshooting\n\n- **Port Conflict**: If port 9876 is already in use, the tool will attempt to release it automatically\n- **Connection Issues**: Ensure the Chrome extension is properly installed and enabled\n\n## License\n\nMIT\n\n## Links\n\n- Official Website: [www.codingbaby.fun](https://www.codingbaby.fun)\n- NPM Package: [@sydneyassistent/codingbaby-browser-mcp](https://www.npmjs.com/package/@sydneyassistent/codingbaby-browser-mcp)\n- Chrome Extension: [CodingBaby Extension](https://chromewebstore.google.com/detail/codingbaby-extension/pjadpjgapfnmaaabkjbeldmjdmcfgcco) ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "browser",
        "websocket",
        "browser automation",
        "automation web",
        "codingbaby browser"
      ],
      "category": "browser-automation"
    },
    "chikingsley--browser-tools-mcp": {
      "owner": "chikingsley",
      "name": "browser-tools-mcp",
      "url": "https://github.com/chikingsley/browser-tools-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Monitor and interact with browser data, capturing console logs, network activity, and screenshots to facilitate AI applications. Provides a secure, local solution for data privacy while enhancing AI tools with browser insights.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "https://www.npmjs.com/package/browser-tools-mcp",
      "npm_downloads": 3555,
      "keywords": [
        "automation",
        "browser",
        "scraping",
        "browser automation",
        "automation web",
        "browser tools"
      ],
      "category": "browser-automation"
    },
    "cloudflare--playwright-mcp": {
      "owner": "cloudflare",
      "name": "playwright-mcp",
      "url": "https://github.com/cloudflare/playwright-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/cloudflare.webp",
      "description": "Automates browser interactions and testing by executing web navigation and element interaction, while capturing screenshots and snapshots. Integrated with Cloudflare Workers for deployment, it enhances LLM-driven workflows with powerful browser automation capabilities.",
      "stars": 189,
      "forks": 23,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-09-30T00:07:06Z",
      "readme_content": "## Cloudflare Playwright MCP\n\n[![Deploy to Cloudflare](https://deploy.workers.cloudflare.com/button)](https://deploy.workers.cloudflare.com/?url=https://github.com/cloudflare/playwright-mcp/tree/main/cloudflare/example)\n\n### Overview\n\nThis project leverages Playwright for automated browser testing and integrates with Cloudflare Workers, [Browser Rendering](https://developers.cloudflare.com/browser-rendering/) and [`@cloudflare/playwright`](https://github.com/cloudflare/playwright) for deployment.\n\n### Build and Deploy\n\nFollow these steps to set up and deploy the project:\n\n1. Install dependencies:\n```bash\nnpm ci\n```\n\n2. Build:\n```bash\ncd cloudflare\nnpm run build\n```\n\n3. Deploy to Cloudflare Workers:\n\n```bash\ncd cloudflare/example\nnpx wrangler deploy\n```\n\n### Use with Cloudflare AI Playground\n\n\n\n[Cloudflare playground AI](https://playground.ai.cloudflare.com/) is a great way to test MCP servers using LLM models available in Workers AI.\n\n- Navigate to https://playground.ai.cloudflare.com/\n- Ensure model is set to `llama-3.3-70b-instruct-fp8-fast`\n- In **MCP Servers**, set **URL** to `https://[my-mcp-url].workers.dev/sse`\n- Click **Connect**\n- Status should update to **Connected** and it should list 14 available tools\n\nYou can now start to interact with the model, and it will run necessary tools to accomplish what was requested.\n\n> [!TIP]\n> For best results, give simple instructions consisting of one single action, e. g., \"Create a new todo entry\", \"Go to cloudflare site\", \"Take a screenshot\"\n\n\nExample of a conversation:\n\n| Role | Message |\n|------|---------|\n| **User** | Go to demo.playwright.dev/todomvc |\n| **Assistant** | *runs browser_navigate tool*<br> The page has been navigated to https://demo.playwright.dev/todomvc/. The page title is \"React ‚Ä¢ TodoMVC\". The page snapshot shows the content of the page, including a heading, a textbox, and several links. |\n| **User** | Create some todo entry |\n| **Assistant** |  *runs browser_type tool*<br> A new todo entry \"Buy groceries\" has been created. The page snapshot shows the updated content of the page, including the new todo entry. |\n| **User** | Nice. Now create a todo in parrot style |\n| **Assistant** | *runs browser_type tool*<br> A new todo entry \"Polly wants a cracker\" has been created in parrot style. The page snapshot shows the updated content of the page, including the new todo entry. |\n| **User** | And create another todo in yoda style |\n| **Assistant** | *runs browser_type tool*<br> A new todo entry \"A walk, I must take\" has been created in Yoda style. The page snapshot shows the updated content of the page, including the new todo entry. |\n| **User** | Take a screenshot |\n| **Assistant** | *runs browser_take_screenshot tool*<br>  A screenshot of the current page has been taken. The screenshot is in PNG format and is 56KB in size. |\n| **User** | Now click the checkbox of the parrot todo entry |\n| **Assistant** | *runs browser_clickt tool*<br> The checkbox of the parrot todo entry \"Polly wants a cracker\" has been clicked. The page snapshot shows the updated content of the page, with the checkbox now checked. |\n| **User** | Take a screenshot |\n| **Assistant** | *runs browser_take_screenshot tool*<br>  A screenshot of the current page has been taken. The screenshot is in PNG format and is 58KB in size. |\n| **User** | Remove completed todo entries |\n| **Assistant** | *runs browser_clickt tool*<br> The \"Clear completed\" button has been clicked. The page snapshot shows the updated content of the page, with the completed todo entry \"Polly wants a cracker\" removed. |\n| **User** | Take a final screenshot |\n| **Assistant** | *runs browser_take_screenshot tool*<br>  A final screenshot of the current page has been taken. The screenshot is in PNG format and is 50KB in size. |\n\n### Use with Claude Desktop\n\nAs of now, [Claude Desktop](https://claude.ai/download) only supports local MCP servers. To use `playground-mcp` with Claude Desktop we make use of [mcp-remote](https://github.com/geelen/mcp-remote), a tool that proxies remote MCP servers and exposes them locally. Use the following configuration:\n\n1. Open the configuration file for Claude Desktop.\n2. Add the following JSON snippet under the `mcpServers` section:\n\n```json\n{\n  \"mcpServers\": {\n    \"cloudflare-playwright-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"https://[my-mcp-url].workers.dev/sse\"\n      ]\n    }\n  }\n}\n```\n\n3. Save the configuration file and **restart** Claude Desktop to apply the changes.\n\nThis setup ensures that Claude Desktop can communicate with the Cloudflare Playwright MCP server.\n\nHere's an example of a session opening the TODO demo app, adding \"buy lemons\" and doing a screenshot, taking advantage of playwright-mcp tools and Browser Rendering:\n\n\n\n### Configure in VSCode\n\nYou can install the Playwright MCP server using the [VS Code CLI](https://code.visualstudio.com/docs/configure/command-line):\n\n```bash\n# For VS Code\ncode --add-mcp '{\"name\":\"cloudflare-playwright\",\"type\":\"sse\",\"url\":\"https://[my-mcp-url].workers.dev/sse\"}'\n```\n\n```bash\n# For VS Code Insiders\ncode-insiders --add-mcp '{\"name\":\"cloudflare-playwright\",\"type\":\"sse\",\"url\":\"https://[my-mcp-url].workers.dev/sse\"}'\n```\n\nAfter installation, the Playwright MCP server will be available for use with your GitHub Copilot agent in VS Code.\n</details>\n\n### Tool Modes\n\nThe tools are available in two modes:\n\n1. **Snapshot Mode** (default): Uses accessibility snapshots for better performance and reliability\n2. **Vision Mode**: Uses screenshots for visual-based interactions\n\nVision Mode works best with the computer use models that are able to interact with elements using\nX Y coordinate space, based on the provided screenshot.\n\n<!--- Tools generated by update-readme.js -->\n\n<details>\n<summary><b>Interactions</b></summary>\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_snapshot**\n  - Title: Page snapshot\n  - Description: Capture accessibility snapshot of the current page, this is better than screenshot\n  - Parameters: None\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_click**\n  - Title: Click\n  - Description: Perform click on a web page\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n    - `doubleClick` (boolean, optional): Whether to perform a double click instead of a single click\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_drag**\n  - Title: Drag mouse\n  - Description: Perform drag and drop between two elements\n  - Parameters:\n    - `startElement` (string): Human-readable source element description used to obtain the permission to interact with the element\n    - `startRef` (string): Exact source element reference from the page snapshot\n    - `endElement` (string): Human-readable target element description used to obtain the permission to interact with the element\n    - `endRef` (string): Exact target element reference from the page snapshot\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_hover**\n  - Title: Hover mouse\n  - Description: Hover over element on page\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_type**\n  - Title: Type text\n  - Description: Type text into editable element\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n    - `text` (string): Text to type into the element\n    - `submit` (boolean, optional): Whether to submit entered text (press Enter after)\n    - `slowly` (boolean, optional): Whether to type one character at a time. Useful for triggering key handlers in the page. By default entire text is filled in at once.\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_select_option**\n  - Title: Select option\n  - Description: Select an option in a dropdown\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n    - `values` (array): Array of values to select in the dropdown. This can be a single value or multiple values.\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_press_key**\n  - Title: Press a key\n  - Description: Press a key on the keyboard\n  - Parameters:\n    - `key` (string): Name of the key to press or a character to generate, such as `ArrowLeft` or `a`\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_wait_for**\n  - Title: Wait for\n  - Description: Wait for text to appear or disappear or a specified time to pass\n  - Parameters:\n    - `time` (number, optional): The time to wait in seconds\n    - `text` (string, optional): The text to wait for\n    - `textGone` (string, optional): The text to wait for to disappear\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_file_upload**\n  - Title: Upload files\n  - Description: Upload one or multiple files\n  - Parameters:\n    - `paths` (array): The absolute paths to the files to upload. Can be a single file or multiple files.\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_handle_dialog**\n  - Title: Handle a dialog\n  - Description: Handle a dialog\n  - Parameters:\n    - `accept` (boolean): Whether to accept the dialog.\n    - `promptText` (string, optional): The text of the prompt in case of a prompt dialog.\n  - Read-only: **false**\n\n</details>\n\n<details>\n<summary><b>Navigation</b></summary>\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_navigate**\n  - Title: Navigate to a URL\n  - Description: Navigate to a URL\n  - Parameters:\n    - `url` (string): The URL to navigate to\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_navigate_back**\n  - Title: Go back\n  - Description: Go back to the previous page\n  - Parameters: None\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_navigate_forward**\n  - Title: Go forward\n  - Description: Go forward to the next page\n  - Parameters: None\n  - Read-only: **true**\n\n</details>\n\n<details>\n<summary><b>Resources</b></summary>\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_take_screenshot**\n  - Title: Take a screenshot\n  - Description: Take a screenshot of the current page. You can't perform actions based on the screenshot, use browser_snapshot for actions.\n  - Parameters:\n    - `raw` (boolean, optional): Whether to return without compression (in PNG format). Default is false, which returns a JPEG image.\n    - `filename` (string, optional): File name to save the screenshot to. Defaults to `page-{timestamp}.{png|jpeg}` if not specified.\n    - `element` (string, optional): Human-readable element description used to obtain permission to screenshot the element. If not provided, the screenshot will be taken of viewport. If element is provided, ref must be provided too.\n    - `ref` (string, optional): Exact target element reference from the page snapshot. If not provided, the screenshot will be taken of viewport. If ref is provided, element must be provided too.\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_pdf_save**\n  - Title: Save as PDF\n  - Description: Save page as PDF\n  - Parameters:\n    - `filename` (string, optional): File name to save the pdf to. Defaults to `page-{timestamp}.pdf` if not specified.\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_network_requests**\n  - Title: List network requests\n  - Description: Returns all network requests since loading the page\n  - Parameters: None\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_console_messages**\n  - Title: Get console messages\n  - Description: Returns all console messages\n  - Parameters: None\n  - Read-only: **true**\n\n</details>\n\n<details>\n<summary><b>Utilities</b></summary>\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_install**\n  - Title: Install the browser specified in the config\n  - Description: Install the browser specified in the config. Call this if you get an error about the browser not being installed.\n  - Parameters: None\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_close**\n  - Title: Close browser\n  - Description: Close the page\n  - Parameters: None\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_resize**\n  - Title: Resize browser window\n  - Description: Resize the browser window\n  - Parameters:\n    - `width` (number): Width of the browser window\n    - `height` (number): Height of the browser window\n  - Read-only: **true**\n\n</details>\n\n<details>\n<summary><b>Tabs</b></summary>\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_tab_list**\n  - Title: List tabs\n  - Description: List browser tabs\n  - Parameters: None\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_tab_new**\n  - Title: Open a new tab\n  - Description: Open a new tab\n  - Parameters:\n    - `url` (string, optional): The URL to navigate to in the new tab. If not provided, the new tab will be blank.\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_tab_select**\n  - Title: Select a tab\n  - Description: Select a tab by index\n  - Parameters:\n    - `index` (number): The index of the tab to select\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_tab_close**\n  - Title: Close a tab\n  - Description: Close a tab\n  - Parameters:\n    - `index` (number, optional): The index of the tab to close. Closes current tab if not provided.\n  - Read-only: **false**\n\n</details>\n\n<details>\n<summary><b>Testing</b></summary>\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_generate_playwright_test**\n  - Title: Generate a Playwright test\n  - Description: Generate a Playwright test for given scenario\n  - Parameters:\n    - `name` (string): The name of the test\n    - `description` (string): The description of the test\n    - `steps` (array): The steps of the test\n  - Read-only: **true**\n\n</details>\n\n<details>\n<summary><b>Vision mode</b></summary>\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_capture**\n  - Title: Take a screenshot\n  - Description: Take a screenshot of the current page\n  - Parameters: None\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_move_mouse**\n  - Title: Move mouse\n  - Description: Move mouse to a given position\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `x` (number): X coordinate\n    - `y` (number): Y coordinate\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_click**\n  - Title: Click\n  - Description: Click left mouse button\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `x` (number): X coordinate\n    - `y` (number): Y coordinate\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_drag**\n  - Title: Drag mouse\n  - Description: Drag left mouse button\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `startX` (number): Start X coordinate\n    - `startY` (number): Start Y coordinate\n    - `endX` (number): End X coordinate\n    - `endY` (number): End Y coordinate\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_type**\n  - Title: Type text\n  - Description: Type text\n  - Parameters:\n    - `text` (string): Text to type into the element\n    - `submit` (boolean, optional): Whether to submit entered text (press Enter after)\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_press_key**\n  - Title: Press a key\n  - Description: Press a key on the keyboard\n  - Parameters:\n    - `key` (string): Name of the key to press or a character to generate, such as `ArrowLeft` or `a`\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_wait_for**\n  - Title: Wait for\n  - Description: Wait for text to appear or disappear or a specified time to pass\n  - Parameters:\n    - `time` (number, optional): The time to wait in seconds\n    - `text` (string, optional): The text to wait for\n    - `textGone` (string, optional): The text to wait for to disappear\n  - Read-only: **true**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_file_upload**\n  - Title: Upload files\n  - Description: Upload one or multiple files\n  - Parameters:\n    - `paths` (array): The absolute paths to the files to upload. Can be a single file or multiple files.\n  - Read-only: **false**\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_handle_dialog**\n  - Title: Handle a dialog\n  - Description: Handle a dialog\n  - Parameters:\n    - `accept` (boolean): Whether to accept the dialog.\n    - `promptText` (string, optional): The text of the prompt in case of a prompt dialog.\n  - Read-only: **false**\n\n</details>\n\n\n<!--- End of tools generated section -->",
      "npm_url": "https://www.npmjs.com/package/playwright-mcp",
      "npm_downloads": 88803,
      "keywords": [
        "cloudflare",
        "automation",
        "browser",
        "browser automation",
        "automation web",
        "automates browser"
      ],
      "category": "browser-automation"
    },
    "cmann50--mcp-chrome-google-search": {
      "owner": "cmann50",
      "name": "mcp-chrome-google-search",
      "url": "https://github.com/cmann50/mcp-chrome-google-search",
      "imageUrl": "/freedevtools/mcp/pfp/cmann50.webp",
      "description": "Enables the integration of Google search capabilities and extraction of webpage content through the Chrome browser.",
      "stars": 21,
      "forks": 6,
      "license": "MIT License",
      "language": "HTML",
      "updated_at": "2025-08-26T00:18:26Z",
      "readme_content": "# MCP Chrome Google Search Tool\n\nMCP tool for Google search and webpage content extraction using Chrome browser. Works with Claude to enable Google search and content fetching capabilities.\n\n## Quick Installation\n\n1. **Configure Claude Desktop**\n   - Open Claude Desktop on Mac\n   - Go to Claude > Settings > Developer > Edit Config\n   - Add the following to your config file:\n   ```json\n   {\n     \"mcpServers\": {\n       \"mcp-chrome-google-search\": {\n         \"command\": \"npx\",\n         \"args\": [\n           \"-y\",\n           \"@cmann50/mcp-chrome-google-search\"\n         ]\n       }\n     }\n   }\n   ```\n   - Restart Claude Desktop\n\n2. **First Time Setup**\n   - **Grant Accessibility Permissions**\n     - On first run, approve macOS accessibility permissions prompt\n     - Navigate to: System Preferences > Security & Privacy > Privacy > Accessibility\n     - Add and enable permissions for your terminal app\n\n   - **Enable Chrome JavaScript from Apple Events**\n     - Open Chrome\n     - Navigate to: View > Developer > Allow JavaScript from Apple Events\n     - One-time setup only\n\nOnce configured, Claude will be able to perform Google searches and extract webpage content through Chrome when you make requests.\n\n## Key Advantages\n\n- Free to search google\n- Opens and small windows and uses your chrome browser, so should not get blocked\n- Since it is using your Chrome window it can access authenticated content.  Claude can just open the URL in your browser.\n\n## Platform Support\n- ‚úÖ macOS\n- ‚ùå Windows (not supported)\n- ‚ùå Linux (not supported)\n\n## Requirements\n1. macOS\n2. Google Chrome\n3. Node.js 20 or higher\n\n## Alternative Installation Methods\n\n### NPX Installation\n```bash\nnpx mcp-chrome-google-search\n```\n\n\n### Custom Installation\n1. Checkout from git\n2. Run `npm run build`\n3. Add to Claude config (use absolute path):\n```json\n{\n    \"google-tools\": {\n        \"command\": \"node\",\n        \"args\": [\n            \"/your/checkout/path/mcp/mcp-chrome-google-search/dist/index.js\"\n        ]\n    }\n}\n```\n\n## Local development\n\nTo test changes locally bump package.json version and run\nto put it in edit mode:\n```\nnpm install -g .\n```\nThen just do `npm run build` and the files will go in dist where claude is monitoring\n\nThen press ctrl-R in claude desktop, no need to restart it\n\n## Debugging\n\n### Log Monitoring\n```bash\n# Follow logs in real-time\ntail -n 20 -F ~/Library/Logs/Claude/mcp*.log\n```\n\n### Dev Tools Access\n1. Enable developer settings:\n```bash\necho '{\"allowDevTools\": true}' > ~/Library/Application\\ Support/Claude/developer_settings.json\n```\n2. Open DevTools: Command-Option-Shift-i in Claude desktop\n3. Use ctrl-r in Claude desktop while tailing for better errors\n\n## Troubleshooting\n\n### Chrome JavaScript Error\nIf you see:\n```\nexecution error: Google Chrome got an error: Executing JavaScript through AppleScript \nis turned off. For more information: https://support.google.com/chrome/?p=applescript (12)\n```\n\nSolution:\n1. Open Chrome\n2. View > Developer > Allow JavaScript from Apple Events\n\n### Accessibility Permission Issues\nIf Chrome control fails:\n1. Open System Preferences\n2. Security & Privacy > Privacy > Accessibility\n3. Ensure terminal app is listed and enabled\n4. Use lock icon to make changes if needed\n\n## Implementation Details\n\n- Uses AppleScript for Chrome control\n- Visible automation - Chrome windows will open/navigate\n- Each request opens a new Chrome tab\n- Close unused tabs periodically for optimal performance\n- Only use with trusted Claude instances (has Chrome control access)\n\n## Support\n\n- Create GitHub issues for problems\n- Include macOS and Chrome version details\n\n## License\n\nMIT License - see LICENSE file for details",
      "npm_url": "https://www.npmjs.com/package/@cmann50/mcp-chrome-google-search",
      "npm_downloads": 4184,
      "keywords": [
        "chrome",
        "automation",
        "browser",
        "browser automation",
        "automation web",
        "mcp chrome"
      ],
      "category": "browser-automation"
    },
    "co-browser--browser-use-mcp-server": {
      "owner": "co-browser",
      "name": "browser-use-mcp-server",
      "url": "https://github.com/co-browser/browser-use-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/co-browser.webp",
      "description": "Enables AI agents to perform web browsing tasks and retrieve information from web pages through a unified API. Enhances language models by providing real-time access to web content.",
      "stars": 749,
      "forks": 101,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-01T12:20:22Z",
      "readme_content": "# browser-use-mcp-server\n\n<div align=\"center\">\n\n[![Twitter URL](https://img.shields.io/twitter/url/https/twitter.com/cobrowser.svg?style=social&label=Follow%20%40cobrowser)](https://x.com/cobrowser)\n[![Discord](https://img.shields.io/discord/1351569878116470928?logo=discord&logoColor=white&label=discord&color=white)](https://discord.gg/gw9UpFUhyY)\n[![PyPI version](https://badge.fury.io/py/browser-use-mcp-server.svg)](https://badge.fury.io/py/browser-use-mcp-server)\n\n**An MCP server that enables AI agents to control web browsers using\n[browser-use](https://github.com/browser-use/browser-use).**\n\n> **üåê Want to Vibe Browse the Web?** Open-source AI-powered web browser - [**Vibe Browser**](https://github.com/co-browser/vibe).\n>\n> **üîó Managing multiple MCP servers?** Simplify your development workflow with [agent-browser](https://github.com/co-browser/agent-browser)\n\n</div>\n\n## Prerequisites\n\n- [uv](https://github.com/astral-sh/uv) - Fast Python package manager\n- [Playwright](https://playwright.dev/) - Browser automation\n- [mcp-proxy](https://github.com/sparfenyuk/mcp-proxy) - Required for stdio mode\n\n```bash\n# Install prerequisites\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nuv tool install mcp-proxy\nuv tool update-shell\n```\n\n## Environment\n\nCreate a `.env` file:\n\n```bash\nOPENAI_API_KEY=your-api-key\nCHROME_PATH=optional/path/to/chrome\nPATIENT=false  # Set to true if API calls should wait for task completion\n```\n\n## Installation\n\n```bash\n# Install dependencies\nuv sync\nuv pip install playwright\nuv run playwright install --with-deps --no-shell chromium\n```\n\n## Usage\n\n### SSE Mode\n\n```bash\n# Run directly from source\nuv run server --port 8000\n```\n\n### stdio Mode\n\n```bash\n# 1. Build and install globally\nuv build\nuv tool uninstall browser-use-mcp-server 2>/dev/null || true\nuv tool install dist/browser_use_mcp_server-*.whl\n\n# 2. Run with stdio transport\nbrowser-use-mcp-server run server --port 8000 --stdio --proxy-port 9000\n```\n\n## Client Configuration\n\n### SSE Mode Client Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"browser-use-mcp-server\": {\n      \"url\": \"http://localhost:8000/sse\"\n    }\n  }\n}\n```\n\n### stdio Mode Client Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"browser-server\": {\n      \"command\": \"browser-use-mcp-server\",\n      \"args\": [\n        \"run\",\n        \"server\",\n        \"--port\",\n        \"8000\",\n        \"--stdio\",\n        \"--proxy-port\",\n        \"9000\"\n      ],\n      \"env\": {\n        \"OPENAI_API_KEY\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\n### Config Locations\n\n| Client           | Configuration Path                                                |\n| ---------------- | ----------------------------------------------------------------- |\n| Cursor           | `./.cursor/mcp.json`                                              |\n| Windsurf         | `~/.codeium/windsurf/mcp_config.json`                             |\n| Claude (Mac)     | `~/Library/Application Support/Claude/claude_desktop_config.json` |\n| Claude (Windows) | `%APPDATA%\\Claude\\claude_desktop_config.json`                     |\n\n## Features\n\n- [x] **Browser Automation**: Control browsers through AI agents\n- [x] **Dual Transport**: Support for both SSE and stdio protocols\n- [x] **VNC Streaming**: Watch browser automation in real-time\n- [x] **Async Tasks**: Execute browser operations asynchronously\n\n## Local Development\n\nTo develop and test the package locally:\n\n1. Build a distributable wheel:\n\n   ```bash\n   # From the project root directory\n   uv build\n   ```\n\n2. Install it as a global tool:\n\n   ```bash\n   uv tool uninstall browser-use-mcp-server 2>/dev/null || true\n   uv tool install dist/browser_use_mcp_server-*.whl\n   ```\n\n3. Run from any directory:\n\n   ```bash\n   # Set your OpenAI API key for the current session\n   export OPENAI_API_KEY=your-api-key-here\n\n   # Or provide it inline for a one-time run\n   OPENAI_API_KEY=your-api-key-here browser-use-mcp-server run server --port 8000 --stdio --proxy-port 9000\n   ```\n\n4. After making changes, rebuild and reinstall:\n   ```bash\n   uv build\n   uv tool uninstall browser-use-mcp-server\n   uv tool install dist/browser_use_mcp_server-*.whl\n   ```\n\n## Docker\n\nUsing Docker provides a consistent and isolated environment for running the server.\n\n```bash\n# Build the Docker image\ndocker build -t browser-use-mcp-server .\n\n# Run the container with the default VNC password (\"browser-use\")\n# --rm ensures the container is automatically removed when it stops\n# -p 8000:8000 maps the server port\n# -p 5900:5900 maps the VNC port\ndocker run --rm -p8000:8000 -p5900:5900 browser-use-mcp-server\n\n# Run with a custom VNC password read from a file\n# Create a file (e.g., vnc_password.txt) containing only your desired password\necho \"your-secure-password\" > vnc_password.txt\n# Mount the password file as a secret inside the container\ndocker run --rm -p8000:8000 -p5900:5900 \\\n  -v $(pwd)/vnc_password.txt:/run/secrets/vnc_password:ro \\\n  browser-use-mcp-server\n```\n\n*Note: The `:ro` flag in the volume mount (`-v`) makes the password file read-only inside the container for added security.*\n\n### VNC Viewer\n\n```bash\n# Browser-based viewer\ngit clone https://github.com/novnc/noVNC\ncd noVNC\n./utils/novnc_proxy --vnc localhost:5900\n```\n\nDefault password: `browser-use` (unless overridden using the custom password method)\n\n<div align=\"center\">\n  <img width=\"428\" alt=\"VNC Screenshot\" src=\"https://github.com/user-attachments/assets/45bc5bee-418d-4182-94f5-db84b4fc0b3a\" />\n  <br><br>\n  <img width=\"428\" alt=\"VNC Screenshot\" src=\"https://github.com/user-attachments/assets/7db53f41-fc00-4e48-8892-f7108096f9c4\" />\n</div>\n\n## Example\n\nTry asking your AI:\n\n```text\nopen https://news.ycombinator.com and return the top ranked article\n```\n\n## Support\n\nFor issues or inquiries: [cobrowser.xyz](https://cobrowser.xyz)\n\n## Star History\n\n<div align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=co-browser/browser-use-mcp-server&type=Date&theme=dark\" />\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=co-browser/browser-use-mcp-server&type=Date\" />\n    <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=co-browser/browser-use-mcp-server&type=Date\" />\n  </picture>\n</div>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "browser",
        "web",
        "browser automation",
        "automation web",
        "perform web"
      ],
      "category": "browser-automation"
    },
    "cploujoux--mcp-puppeteer": {
      "owner": "cploujoux",
      "name": "mcp-puppeteer",
      "url": "https://github.com/cploujoux/mcp-puppeteer",
      "imageUrl": "/freedevtools/mcp/pfp/cploujoux.webp",
      "description": "Automate web interactions, capture screenshots, and execute JavaScript in a browser environment. Enable LLMs to navigate web pages, click on elements, and monitor console logs in real-time.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-19T12:03:52Z",
      "readme_content": "# Puppeteer\n\nA Model Context Protocol server that provides browser automation capabilities using Puppeteer. This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment.\n\n## Components\n\n### Tools\n\n- **puppeteer_navigate**\n\n  - Navigate to any URL in the browser\n  - Input: `url` (string)\n\n- **puppeteer_screenshot**\n\n  - Capture screenshots of the entire page or specific elements\n  - Inputs:\n    - `name` (string, required): Name for the screenshot\n    - `selector` (string, optional): CSS selector for element to screenshot\n    - `width` (number, optional, default: 800): Screenshot width\n    - `height` (number, optional, default: 600): Screenshot height\n\n- **puppeteer_click**\n\n  - Click elements on the page\n  - Input: `selector` (string): CSS selector for element to click\n\n- **puppeteer_hover**\n\n  - Hover elements on the page\n  - Input: `selector` (string): CSS selector for element to hover\n\n- **puppeteer_fill**\n\n  - Fill out input fields\n  - Inputs:\n    - `selector` (string): CSS selector for input field\n    - `value` (string): Value to fill\n\n- **puppeteer_select**\n\n  - Select an element with SELECT tag\n  - Inputs:\n    - `selector` (string): CSS selector for element to select\n    - `value` (string): Value to select\n\n- **puppeteer_evaluate**\n  - Execute JavaScript in the browser console\n  - Input: `script` (string): JavaScript code to execute\n\n### Resources\n\nThe server provides access to two types of resources:\n\n1. **Console Logs** (`console://logs`)\n\n   - Browser console output in text format\n   - Includes all console messages from the browser\n\n2. **Screenshots** (`screenshot://<name>`)\n   - PNG images of captured screenshots\n   - Accessible via the screenshot name specified during capture\n\n## Key Features\n\n- Browser automation\n- Console log monitoring\n- Screenshot capabilities\n- JavaScript execution\n- Basic web interaction (navigation, clicking, form filling)\n\n## Configuration to use Puppeteer Server\n\nHere's the Claude Desktop configuration to use the Puppeter server:\n\n### Docker\n\n**NOTE** The docker implementation will use headless chromium, where as the NPX version will open a browser window.\n\n```json\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"--init\",\n        \"-e\",\n        \"DOCKER_CONTAINER=true\",\n        \"mcp/puppeteer\"\n      ]\n    }\n  }\n}\n```\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-puppeteer\"]\n    }\n  }\n}\n```\n\n## Build\n\nDocker build:\n\n```bash\ndocker build -t mcp/puppeteer -f src/puppeteer/Dockerfile .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "https://www.npmjs.com/package/mcp-puppeteer",
      "npm_downloads": 408,
      "keywords": [
        "automation",
        "puppeteer",
        "cploujoux",
        "puppeteer automate",
        "browser automation",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "deploya-labs--mcp-browser-use": {
      "owner": "deploya-labs",
      "name": "mcp-browser-use",
      "url": "https://github.com/deploya-labs/mcp-browser-use",
      "imageUrl": "/freedevtools/mcp/pfp/deploya-labs.webp",
      "description": "Automate web browsing tasks using natural language commands to navigate pages, fill forms, and interact with web elements. The server maintains state persistence across sessions for enhanced browsing experience.",
      "stars": 2,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-14T08:54:31Z",
      "readme_content": "<br/>\n\n# browser-use MCP server\n[![Documentation](https://img.shields.io/badge/Documentation-üìï-blue)](https://docs.browser-use.com)\n[![License](https://img.shields.io/badge/License-MIT-green)](LICENSE)\n\n> **Project Note**: This MCP server implementation builds upon the [browser-use/web-ui](https://github.com/browser-use/web-ui) foundation. Core browser automation logic and configuration patterns are adapted from the original project.\n\nAI-driven browser automation server implementing the Model Context Protocol (MCP) for natural language browser control.\n\n<a href=\"https://glama.ai/mcp/servers/dz6dy5hw59\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/dz6dy5hw59/badge\" alt=\"Browser-Use Server MCP server\" /></a>\n\n## Features\n\n- üß† **MCP Integration** - Full protocol implementation for AI agent communication\n- üåê **Browser Automation** - Page navigation, form filling, and element interaction\n- üëÅÔ∏è **Visual Understanding** - Screenshot analysis and vision-based interactions\n- üîÑ **State Persistence** - Maintain browser sessions between tasks\n- üîå **Multi-LLM Support** - OpenAI, Anthropic, Azure, DeepSeek integration\n\n## Quick Start\n\n### Prerequisites\n\n- Python 3.11 or higher\n- uv (fast Python package installer)\n- Chrome/Chromium browser\n\n### Installation\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n\"mcpServers\": {\n    \"browser-use\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-server-browser-use\",\n      ],\n      \"env\": {\n        \"OPENROUTER_API_KEY\": \"\",\n        \"OPENROUTER_ENDPOINT\": \"https://openrouter.ai/api/v1\",\n        \"OPENAI_ENDPOINT\": \"https://api.openai.com/v1\",\n        \"OPENAI_API_KEY\": \"\",\n        \"ANTHROPIC_ENDPOINT\": \"https://api.anthropic.com\",\n        \"ANTHROPIC_API_KEY\": \"\",\n        \"GOOGLE_API_KEY\": \"\",\n        \"AZURE_OPENAI_ENDPOINT\": \"\",\n        \"AZURE_OPENAI_API_KEY\": \"\",\n        \"DEEPSEEK_ENDPOINT\": \"https://api.deepseek.com\",\n        \"DEEPSEEK_API_KEY\": \"\",\n        \"MISTRAL_API_KEY\": \"\",\n        \"MISTRAL_ENDPOINT\": \"https://api.mistral.ai/v1\",\n        \"OLLAMA_ENDPOINT\": \"http://localhost:11434\",\n        \"ANONYMIZED_TELEMETRY\": \"true\",\n        \"BROWSER_USE_LOGGING_LEVEL\": \"info\",\n        \"CHROME_PATH\": \"\",\n        \"CHROME_USER_DATA\": \"\",\n        \"CHROME_DEBUGGING_PORT\": \"9222\",\n        \"CHROME_DEBUGGING_HOST\": \"localhost\",\n        \"CHROME_PERSISTENT_SESSION\": \"false\",\n        \"BROWSER_HEADLESS\": \"false\",\n        \"BROWSER_DISABLE_SECURITY\": \"false\",\n        \"BROWSER_WINDOW_WIDTH\": \"1280\",\n        \"BROWSER_WINDOW_HEIGHT\": \"720\",\n        \"BROWSER_TRACE_PATH\": \"trace.json\",\n        \"BROWSER_RECORDING_PATH\": \"recording.mp4\",\n        \"RESOLUTION\": \"1920x1080x24\",\n        \"RESOLUTION_WIDTH\": \"1920\",\n        \"RESOLUTION_HEIGHT\": \"1080\",\n        \"VNC_PASSWORD\": \"youvncpassword\",\n        \"MCP_MODEL_PROVIDER\": \"anthropic\",\n        \"MCP_MODEL_NAME\": \"claude-3-5-sonnet-20241022\",\n        \"MCP_TEMPERATURE\": \"0.3\",\n        \"MCP_MAX_STEPS\": \"30\",\n        \"MCP_USE_VISION\": \"true\",\n        \"MCP_MAX_ACTIONS_PER_STEP\": \"5\",\n        \"MCP_TOOL_CALL_IN_CONTENT\": \"true\"\n    }\n}\n```\n\n### Local Development\n\n```json\n\"browser-use\": {\n  \"command\": \"uv\",\n  \"args\": [\n    \"--directory\",\n    \"/path/to/mcp-browser-use\",\n    \"run\",\n    \"mcp-server-browser-use\"\n  ],\n  \"env\": {\n    ...\n  }\n}\n```\n\n## Development\n\n```bash\n# Install dev dependencies\nuv sync\n\n# Run with debugger\nnpx @modelcontextprotocol/inspector uv --directory . run mcp-server-browser-use\n```\n\n## Troubleshooting\n\n-   **Browser Conflicts**: Close all Chrome instances before starting.\n-   **API Errors**: Verify API keys in environment variables match your LLM provider.\n-   **Vision Support**: Ensure `MCP_USE_VISION=true` for screenshot analysis.\n\n## Provider Configuration\n\nThe server supports multiple LLM providers through environment variables. Here are the available options for `MCP_MODEL_PROVIDER`:\n\n| Provider | Value | Required Env Variables |\n|----------|--------|----------------------|\n| Anthropic | `anthropic` | `ANTHROPIC_API_KEY`<br>`ANTHROPIC_ENDPOINT` (optional) |\n| OpenAI | `openai` | `OPENAI_API_KEY`<br>`OPENAI_ENDPOINT` (optional) |\n| Azure OpenAI | `azure_openai` | `AZURE_OPENAI_API_KEY`<br>`AZURE_OPENAI_ENDPOINT` |\n| DeepSeek | `deepseek` | `DEEPSEEK_API_KEY`<br>`DEEPSEEK_ENDPOINT` (optional) |\n| Gemini | `gemini` | `GOOGLE_API_KEY` |\n| Mistral | `mistral` | `MISTRAL_API_KEY`<br>`MISTRAL_ENDPOINT` (optional) |\n| Ollama | `ollama` | `OLLAMA_ENDPOINT` (optional, defaults to localhost:11434) |\n| OpenRouter | `openrouter` | `OPENROUTER_API_KEY`<br>`OPENROUTER_ENDPOINT` (optional) |\n\n### Notes:\n- For endpoints marked as optional, default values will be used if not specified\n- Temperature can be configured using `MCP_TEMPERATURE` (default: 0.3)\n- Model can be specified using `MCP_MODEL_NAME`\n- For Ollama models, additional context settings like `num_ctx` and `num_predict` are configurable\n\n## Credits\n\nThis project extends the [browser-use/web-ui](https://github.com/browser-use/web-ui) under MIT License. Special thanks to the original authors for their browser automation framework.\n\n## License\n\nMIT - See [LICENSE](LICENSE) for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "browser",
        "automate",
        "browser automation",
        "automation web",
        "automate web"
      ],
      "category": "browser-automation"
    },
    "devalexandre--mcp-servers": {
      "owner": "devalexandre",
      "name": "mcp-servers",
      "url": "https://github.com/devalexandre/mcp-servers",
      "imageUrl": "/freedevtools/mcp/pfp/devalexandre.webp",
      "description": "Control a headless browser for automated navigation, screenshot capturing, and interaction with web page elements. Facilitates the creation of automation projects using the Multi-Context Protocol framework.",
      "stars": 0,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-03-10T20:23:03Z",
      "readme_content": "[![smithery badge](https://smithery.ai/badge/@devalexandre/mcp-servers)](https://smithery.ai/server/@devalexandre/mcp-servers)\n\n# MCP Servers\n\n[![smithery badge](https://smithery.ai/badge/@devalexandre/mcp-servers)](https://smithery.ai/server/@devalexandre/mcp-servers)\n\n## Description\n\nThe **MCP Servers with Pyppeteer** is a tool that allows you to control a headless browser using [Pyppeteer](https://github.com/pyppeteer/pyppeteer), enabling automated navigation, screenshot capturing, interaction with page elements, and more. This project was developed to facilitate the creation of automation servers based on the MCP (Multi-Context Protocol) framework.\n\n---\n\n## Features\n\n- **Automated Navigation:** Navigate to specific URLs.\n- **Screenshot Capture:** Take screenshots of visited pages.\n- **Element Interaction:** Click on page elements using CSS selectors, XPath, or class names.\n- **Dynamic Resources:** Access dynamic page information, such as the current URL.\n- **Server Lifecycle Management:** Controlled initialization and shutdown of the browser.\n\n---\n\n## Prerequisites\n\nMake sure you have the following installed before getting started:\n\n1. **Python 3.7+**: The project has been tested with Python 3.12, but earlier versions (3.7+) should also work.\n2. **pip**: Python package manager.\n3. **Git**: To clone the repository.\n\n---\n\n## Installation\n\n### Installing via Smithery\n\nTo install MCP Servers for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@devalexandre/mcp-servers):\n\n```bash\nnpx -y @smithery/cli install @devalexandre/mcp-servers --client claude\n```\n\n### Via Pip GitHub\n\n1. **Install the Package:**\n\n   ```bash\n   pip install -e git+https://github.com/devalexandre/mcp-servers.git#egg=mcp-servers\n   ```\n\n### Via Git\n\n1. **Clone the Repository:**\n\n   ```bash\n   git clone https://github.com/devalexandre/mcp-servers.git\n   cd mcp-servers\n\n2. **Create a Virtual Environment (Optional):**\n\n   ```bash\n   python -m venv venv\n   source venv/bin/activate  # On Windows, use `venv\\Scripts\\activate`\n   pip install -r requirements.txt\n   ```\n\n3. **nstall the Package in Editable Mode:**\n\n   ```bash\n   pip install -e .\n   ```\n",
      "npm_url": "https://www.npmjs.com/package/mcp-servers",
      "npm_downloads": 854,
      "keywords": [
        "automation",
        "browser",
        "automated",
        "browser automation",
        "automation web",
        "browser automated"
      ],
      "category": "browser-automation"
    },
    "djyde--browser-mcp": {
      "owner": "djyde",
      "name": "browser-mcp",
      "url": "https://github.com/djyde/browser-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/djyde.webp",
      "description": "Interact with the browser to execute commands, modify styles, and access browsing history. Enables retrieval of content from the current page in markdown format and customization of page styles directly through an MCP interface.",
      "stars": 82,
      "forks": 13,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-08-25T15:24:47Z",
      "readme_content": "# browser-mcp\n\nA browser extension and MCP server that allows you to interact with the browser you are using.\n\n![mcp](https://github.com/user-attachments/assets/8464d4dc-7192-4d89-be05-bdcbaf0b5807)\n\n![jkXeswNy@2x](https://github.com/user-attachments/assets/18c90714-5ec7-4d9d-ac24-74af1b6c907d)\n\n## Usage\n\n```json\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@djyde/mcp-browser@latest\"\n      ]\n    }\n  }\n}\n```\n\n## Tools\n\nAll available tools are listed in `server/src/tools.ts`.\n\n### `get_current_page_markdown`\n\nGet the markdown from current browser browsing page.\n\nexample:\n\n```\nSummarize the current page.\n```\n\n### `append_style`\n\nAppend a css style to the current browser browsing page.\n\nexample:\n\n```\nChange the current page to dark mode.\n```\n\n### `history_search`\n\nSearch the browser history.\n\nexample:\n\n```\nSearch the browser history for \"github\".\n```\n\n## Roadmap\n\n- [ ] Publish the extension to extension store.\n- [ ] Write documentation.\n- [ ] Add more tools.\n\n## Build\n\n```bash\npnpm i\n```\n\n### Extension\n\n```bash\ncd extension\n\n# chrome\nnpm run build\n\n# edge\nnpm run build:edge\n\n# firefox\nnpm run build:firefox\n```\n\nAfter building, the extension will be in the `extension/.output` directory.\n\n## Server\n\n```bash\ncd server\n\n# dev\nnpm run dev\n\n# build\nnpm run build\n```\n\n`server/dist/cli.js` is the MCP server entry.\n\n## Contributing\n\n### Add a new tool\n\n1. Add the tool schema to the `tools` array in `server/src/tools.ts`.\n2. Add a extension callable handler in `extension/calls.ts`.\n3. Add a tool handler in `server/src/tools.ts`. Use the `call` function to call the extension handler.\n\n## License\n\nAGPL-3.0-or-later\n",
      "npm_url": "https://www.npmjs.com/package/browser-mcp",
      "npm_downloads": 698,
      "keywords": [
        "browser",
        "automation",
        "scraping",
        "browser automation",
        "automation web",
        "browser mcp"
      ],
      "category": "browser-automation"
    },
    "dlwjdtn535--mcp-chrome-integration": {
      "owner": "dlwjdtn535",
      "name": "mcp-chrome-integration",
      "url": "https://github.com/dlwjdtn535/mcp-chrome-integration",
      "imageUrl": "/freedevtools/mcp/pfp/dlwjdtn535.webp",
      "description": "Control the Chrome browser for web automation tasks, including navigation, element interaction, and page analysis, while managing features like bookmarks and history. Execute scripts securely and extract detailed page content to enhance automation workflows.",
      "stars": 6,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-21T05:08:16Z",
      "readme_content": "# MCP Chrome Integration \n[![smithery badge](https://smithery.ai/badge/@dlwjdtn535/mcp-chrome-integration)](https://smithery.ai/server/@dlwjdtn535/mcp-chrome-integration)\n[![Buy Me A Coffee](https://img.shields.io/badge/Buy%20Me%20A%20Coffee-support-yellow.svg)](https://buymeacoffee.com/dlwjdtn535)\n\nA protocol that enables AI models to control Chrome browser and perform web automation.\n\n## Installation\n\n### Prerequisites\n- Python 3.12\n- Google Chrome browser extension installed (websocket client)\n- uv (Python package installer) or Docker\n\n### Installing via Smithery\n\nTo install Chrome Browser Automation Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@dlwjdtn535/mcp-chrome-integration):\n\n```bash\nnpx -y @smithery/cli install @dlwjdtn535/mcp-chrome-integration --client claude\n```\n\n### Configuration Setup\n\nChoose one of the following setup methods based on your environment:\n\n#### 1. Using uv (Recommended)\n\n**Windows Setup:**\n```json\n{\n  \"mcpServers\": {\n    \"mcp-chrome-integration\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--directory\",\n        \"%LOCALAPPDATA%\\\\Programs\\\\mcp-chrome-integration\\\\src\",\n        \"mcp-server\"\n      ],\n      \"env\": {\n        \"WEBSOCKET_PORT\": \"8012\"\n      }\n    }\n  }\n}\n```\n\n**macOS Setup:**\n```json\n{\n  \"mcpServers\": {\n    \"mcp-chrome-integration\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--directory\",\n        \"/usr/local/bin/mcp-chrome-integration/src\",\n        \"mcp-server\"\n      ],\n      \"env\": {\n        \"WEBSOCKET_PORT\": \"8012\"\n      }\n    }\n  }\n}\n```\n\n**Linux Setup:**\n```json\n{\n  \"mcpServers\": {\n    \"mcp-chrome-integration\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--directory\",\n        \"/usr/local/bin/mcp-chrome-integration/src\",\n        \"mcp-server\"\n      ],\n      \"env\": {\n        \"WEBSOCKET_PORT\": \"8012\"\n      }\n    }\n  }\n}\n```\n\n## Key Features\n\n### 1. Page Navigation & Interaction\n- URL Navigation\n- Element Clicking\n- Text Input\n- Form Filling\n- Page Scrolling\n- Table Data Extraction\n- JavaScript Code Execution\n\n### 2. Element Manipulation\n- Get Element Information (dimensions, styles, visibility)\n- Wait for Elements\n- Change Background Colors\n- Get Page State and Content\n\n### 3. Page Analysis\n- Get HTML Content\n- Count Links\n- Extract Meta Tags\n- Get Image Information\n- Form Analysis\n- Page Content Streaming\n\n### 4. Browser Features\n- Bookmark Management\n- Access Browser History\n- Handle Downloads\n- Show Notifications\n- Clipboard Management\n- Cookie Handling\n\n### 5. System Integration\n- Get System Information\n- Access Geolocation\n- Monitor Power/Battery Status\n- Take Screenshots\n\n## Usage Examples\n\n```python\n# Navigate to URL\ntool_navigate_to(url=\"https://example.com\", tab_id=\"your_tab_id\")\n\n# Click Element\ntool_click_element(selector=\"#submit-button\", tab_id=\"your_tab_id\")\n\n# Type Text\ntool_type_text(selector=\"#search\", text=\"query\", tab_id=\"your_tab_id\")\n\n# Check Page State\ntool_state(tab_id=\"your_tab_id\")\n\n# Execute JavaScript\ntool_execute_script(script=\"console.log('Hello')\", tab_id=\"your_tab_id\")\n\n# Extract Table Data\ntool_extract_table(selector=\".data-table\", tab_id=\"your_tab_id\")\n\n# Get Element Info\ntool_get_element_info(selector=\".my-element\", tab_id=\"your_tab_id\")\n```\n\n## Important Notes\n\n### 1. Chrome Security Restrictions\n- Does not work on chrome:// URLs\n- Only works on regular websites (http:// or https://)\n- Some websites' Content Security Policy (CSP) may restrict certain operations\n- Consider website's CSP when executing JavaScript\n\n### 2. Tab Management\n- tab_id required for all operations\n- Use tool_tab_list() to check available tabs\n- Check tab state before operations\n\n### 3. Error Handling\n- Check return values for success/failure status\n- Handle timeouts for wait operations\n- Consider website loading state\n\n## Installation & Setup\n\n### 1. Chrome Extension Installation & Setup\n1. Prepare Extension\n   ```bash\n   # Navigate to extension directory\n   cd mcp-client\n   ```\n\n2. Install in Chrome Browser\n   - Open Chrome browser\n   - Enter `chrome://extensions/` in address bar\n   - Enable \"Developer mode\" toggle in top-right\n   - Click \"Load unpacked\" button in top-left\n   - Select the `mcp-client` directory\n\n3. Configure Extension\n   - Click MCP extension icon in Chrome toolbar\n   - Enter server URL (default: `ws://localhost:8012`)\n   - Click \"Connect\" button to connect to server\n   - Connection status should change to \"Connected\"\n\n4. Using the Extension\n   - Works automatically in connected tabs\n   - For new tabs, click extension icon and connect\n   - Monitor operations in log window\n   - Click \"Disconnect\" to end connection\n\n### 2. Server Setup\n```bash\n# Navigate to server directory\ncd mcp-server\n\n# Install dependencies\npip install -r requirements.txt\n\n# Start server\npython src/server.py\n```\n\n## Extension Features\n\n### 1. Popup Interface\n- Server URL Configuration\n- Connect/Disconnect Button\n- Current Tab Status\n- Log Message Viewer\n\n### 2. Background Features\n- Tab Management\n- WebSocket Connection Maintenance\n- Automatic Reconnection\n- Error Recovery\n\n### 3. Security Features\n- HTTPS Support\n- CSP Compliance\n- Secure Script Execution\n- Permission Management\n\n### 4. Debugging\n- Log Viewing in Developer Tools\n- Detailed Error Messages\n- Network Communication Monitoring\n- Execution State Tracking\n\n## Troubleshooting\n\n### 1. Connection Issues\n- Verify Server URL\n- Check Server Status\n- Check Firewall Settings\n- Verify WebSocket Port (8012) Availability\n\n### 2. Execution Errors\n- Check CSP Restrictions\n- Grant Required Permissions\n- Review Console Error Messages\n- Validate Tab IDs\n\n### 3. Performance Issues\n- Monitor Memory Usage\n- Disconnect Unused Tabs\n- Adjust Status Update Frequency\n- Optimize Large Data Processing\n\n## License\n\nMIT ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "browser",
        "chrome",
        "browser automation",
        "automation web",
        "web automation"
      ],
      "category": "browser-automation"
    },
    "dlwjdtn535--mcp-chrome-server": {
      "owner": "dlwjdtn535",
      "name": "mcp-chrome-server",
      "url": "https://github.com/dlwjdtn535/mcp-chrome-server",
      "imageUrl": "/freedevtools/mcp/pfp/dlwjdtn535.webp",
      "description": "Automate browser tasks such as web navigation, login management, and element manipulation with advanced credential management and intelligent handling of web interactions.",
      "stars": 2,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-07-04T03:22:34Z",
      "readme_content": "# MCP Chrome Server\n\n[![smithery badge](https://smithery.ai/badge/@dlwjdtn535/mcp-chrome-server)](https://smithery.ai/server/@dlwjdtn535/mcp-chrome-server)\n[![Buy Me A Coffee](https://img.shields.io/badge/Buy%20Me%20A%20Coffee-support-yellow.svg)](https://buymeacoffee.com/dlwjdtn535)\n\nA Chrome server based on MCP (Model-Controller-Prompt) for browser automation.\n\n## Installation\n\n### Prerequisites\n- Python 3.12\n- Google Chrome browser installed\n- uv (Python package installer) or Docker\n\n### Installing via Smithery\n\n```bash\nnpx -y @smithery/cli install @dlwjdtn535/mcp-chrome-server --client claude\n```\n\n### Configuration Setup\n\nChoose one of the following setup methods based on your environment:\n\n#### 1. Using uv (Recommended)\n\n**Windows Setup:**\n```json\n{\n  \"mcpServers\": {\n    \"mcp-chrome-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--directory\",\n        \"%LOCALAPPDATA%\\\\Programs\\\\mcp-chrome-server\\\\src\",\n        \"mcp-chrome-server\"\n      ],\n      \"env\": {\n        \"CHROME_PROFILE_PATH\": \"%LOCALAPPDATA%\\\\Google\\\\Chrome\\\\User Data\"\n      }\n    }\n  }\n}\n```\n\n**macOS Setup:**\n```json\n{\n  \"mcpServers\": {\n    \"mcp-chrome-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--directory\",\n        \"/usr/local/bin/mcp-chrome-server/src\",\n        \"mcp-chrome-server\"\n      ],\n      \"env\": {\n        \"CHROME_PROFILE_PATH\": \"$HOME/Library/Application Support/Google/Chrome\"\n      }\n    }\n  }\n}\n```\n\n**Linux Setup:**\n```json\n{\n  \"mcpServers\": {\n    \"mcp-chrome-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--directory\",\n        \"/usr/local/bin/mcp-chrome-server/src\",\n        \"mcp-chrome-server\"\n      ],\n      \"env\": {\n        \"CHROME_PROFILE_PATH\": \"$HOME/.config/google-chrome\"\n      }\n    }\n  }\n}\n```\n\n## Configuration\n\n### Chrome Profile Paths\n\nDefault Chrome profile paths for each operating system:\n\n| OS | Path |\n|---|---|\n| Windows | `%LOCALAPPDATA%\\Google\\Chrome\\User Data` |\n| macOS | `~/Library/Application Support/Google/Chrome` |\n| Linux | `~/.config/google-chrome` |\n\n### Important Notes\n- Close all running Chrome instances before starting the automation server\n- Ensure proper permissions for the Chrome profile directory\n- For Docker setup, make sure the volume mount path matches your system's Chrome profile path\n\n### Credential Management\n\nSecurely store and manage login information using the system keychain:\n\n```python\n# Save credentials\nresult = tool_save_credentials(\n    site=\"example.com\",\n    username=\"your_username\",\n    password=\"your_password\"\n)\n\n# Retrieve saved credentials\nresult = tool_get_credentials(\n    site=\"example.com\",\n    username=\"your_username\"\n)\n```\n\n## Key Features\n\n### Browser Control\n\n```python\n# Open browser\nresult = tool_open_browser()\n\n# Navigate to URL\nresult = tool_navigate(url=\"https://example.com\")\n\n# Close browser\nresult = tool_close_browser()\n```\n\n### Web Login\n\n```python\nresult = tool_web_login(\n    url=\"https://example.com/login\",\n    credentials={\n        \"username\": \"your_username\",\n        \"password\": \"your_password\"\n    },\n    selectors={\n        \"username\": \"#id\",\n        \"password\": \"#pw\",\n        \"submit\": \".login-button\"\n    }\n)\n```\n\nSpecial handling:\n- Waits for user to solve CAPTCHA when detected\n- Automatic detection of 2-factor authentication\n- Detailed analysis of login failure scenarios\n\n### Element Manipulation\n\n```python\n# Click element\nresult = tool_click(selector=\".button\")\n\n# Type text\nresult = tool_type(\n    selector=\"#input-field\",\n    text=\"Hello, World!\"\n)\n\n# Get text\nresult = tool_get_text(selector=\".content\")\n\n# Get multiple elements\nresult = tool_get_elements(selector=\".items\")\n```\n\n## Important Considerations\n\n1. Chrome Profile Usage\n   - Verify correct profile path configuration\n   - Close all other Chrome windows using the profile\n\n2. Automation Detection Prevention\n   - Simulation of natural user behavior\n   - Maintain appropriate delays between login attempts\n\n3. Security\n   - Always use system keychain for important credentials\n   - Never expose credentials directly in environment variables or configuration files\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "browser",
        "chrome",
        "browser automation",
        "automation web",
        "automate browser"
      ],
      "category": "browser-automation"
    },
    "dmaznest--browsercat-mcp-server": {
      "owner": "dmaznest",
      "name": "browsercat-mcp-server",
      "url": "https://github.com/dmaznest/browsercat-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/dmaznest.webp",
      "description": "Enables remote web browsing automation using BrowserCat's cloud service, allowing for navigation, form filling, and JavaScript execution. Capture screenshots and monitor browser console logs while interacting with web pages in a real browser environment.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-06-01T20:23:51Z",
      "readme_content": "# BrowserCat MCP Server\n\nA Model Context Protocol server that provides browser automation capabilities using BrowserCat's cloud browser service. This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment without needing to install browsers locally.\n\n## Components\n\n### Tools\n\n- **browsercat_navigate**\n    - Navigate to any URL in the browser\n    - Input: `url` (string)\n- **browsercat_screenshot**\n    - Capture screenshots of the entire page or specific elements\n    - Inputs:\n        - `name` (string, required): Name for the screenshot\n        - `selector` (string, optional): CSS selector for element to screenshot\n        - `width` (number, optional, default: 800): Screenshot width\n        - `height` (number, optional, default: 600): Screenshot height\n- **browsercat_click**\n    - Click elements on the page\n    - Input: `selector` (string): CSS selector for element to click\n- **browsercat_hover**\n    - Hover elements on the page\n    - Input: `selector` (string): CSS selector for element to hover\n- **browsercat_fill**\n    - Fill out input fields\n    - Inputs:\n        - `selector` (string): CSS selector for input field\n        - `value` (string): Value to fill\n- **browsercat_select**\n    - Select an option from a dropdown menu\n    - Inputs:\n        - `selector` (string): CSS selector for select element\n        - `value` (string): Value to select\n- **browsercat_evaluate**\n    - Execute JavaScript in the browser console\n    - Input: `script` (string): JavaScript code to execute\n\n### Resources\n\nThe server provides access to two types of resources:\n\n1. **Console Logs** (`console://logs`)\n    - Browser console output in text format\n    - Includes all console messages from the browser\n2. **Screenshots** (`screenshot://<name>`)\n    - PNG images of captured screenshots\n    - Accessible via the screenshot name specified during capture\n\n## Key Features\n\n- Cloud-based browser automation\n- No local browser installation required\n- Console log monitoring\n- Screenshot capabilities\n- JavaScript execution\n- Basic web interaction (navigation, clicking, form filling)\n\n## Configuration to use BrowserCat MCP Server\n\n### Environment Variables\n\nThe BrowserCat MCP server requires the following environment variable:\n\n- `BROWSERCAT_API_KEY`: Your BrowserCat API key (required). You can get one for free at https://browsercat.xyz/mcp.\n\n### NPX Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"browsercat\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@browsercatco/mcp-server\"],\n      \"env\": {\n        \"BROWSERCAT_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "browsercat",
        "browser",
        "automation",
        "dmaznest browsercat",
        "using browsercat",
        "browser automation"
      ],
      "category": "browser-automation"
    },
    "dragons96--mcp-undetected-chromedriver": {
      "owner": "dragons96",
      "name": "mcp-undetected-chromedriver",
      "url": "https://github.com/dragons96/mcp-undetected-chromedriver",
      "imageUrl": "/freedevtools/mcp/pfp/dragons96.webp",
      "description": "Automates control of the Chrome browser while successfully bypassing anti-bot detection mechanisms using undetected-chromedriver. Provides a comprehensive interface for various automated web interactions.",
      "stars": 6,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-21T03:20:52Z",
      "readme_content": "# MCP-Undetected-Chromedriver\n\n[![smithery badge](https://smithery.ai/badge/@dragons96/mcp-undetected-chromedriver)](https://smithery.ai/server/@dragons96/mcp-undetected-chromedriver)\n\nAn MCP service built on undetected-chromedriver, providing a comprehensive interface for automating Chrome browser control while bypassing anti-bot detection.\n\n[‰∏≠ÊñáÊñáÊ°£](README_ZH.md)\n\n## Installation\n\n\nTo install MCP-Undetected-Chromedriver for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@dragons96/mcp-undetected-chromedriver):\n\n```bash\nnpx -y @smithery/cli install @dragons96/mcp-undetected-chromedriver --client claude\n```\n\n## Configuration to use Undetected Chromedriver Server\n\nHere's the Claude Desktop configuration to use the Undetected-chromedriver server:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-undetected-chromedriver\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@smithery/cli@latest\",\n        \"run\",\n        \"@dragons96/mcp-undetected-chromedriver\",\n        \"--config\",\n        \"{}\"\n      ]\n    }\n  }\n}\n```\n\n\n### Requirements\n\n- Python >= 3.11\n- Chrome browser\n\n### Installation with uv\n\n```bash\n# Create virtual environment\nuv venv\n\n# Activate virtual environment\n# Windows\n.venv\\Scripts\\activate\n# Linux/MacOS\nsource .venv/bin/activate\n\n# Install dependencies\nuv pip install -e .\n```\n\n## Project Introduction\n\nMCP-Undetected-Chromedriver is an MCP (Multi Channel Protocol) service that wraps the functionality of the undetected-chromedriver library into a series of easy-to-use APIs. This project is particularly suitable for scenarios that require bypassing modern website anti-bot detection mechanisms in automated testing, data scraping, or web automation scripts.\n\n### Key Features\n\n- Based on undetected-chromedriver, effectively bypassing website anti-bot detection\n- Provides rich browser operation API interfaces\n- Supports screenshots, PDF export, and other functionalities\n- Supports complex page interaction operations such as clicking, form filling, dragging, etc.\n- Seamlessly integrates with other tools in the MCP ecosystem\n\n## Todo List\n\n- [ ] Optimize browser driver management and handle driver interruptions\n- [ ] Extend API capabilities\n- [ ] Add more comprehensive error handling and logging\n- [ ] Improve documentation with more usage examples\n- [ ] Add support for browser profiles and extensions\n\n## Usage\n\n### Starting the Service\n\n```bash\nmcp-server-undetected-chromedriver\n```\n\n### Available APIs\n\nThe service provides the following main API interfaces:\n\n- `browser_navigate`: Navigate to a specified URL\n- `browser_screenshot`: Take a screenshot of the current page\n- `browser_click`: Click on page elements\n- `browser_iframe_click`: Click on elements within an iframe\n- `browser_fill`: Fill content in input fields\n- `browser_select`: Select options in dropdown selection boxes\n- `browser_hover`: Hover the mouse over elements\n- `browser_evalute`: Execute JavaScript code\n- `browser_close`: Close the browser\n- `browser_get_visible_text`: Get visible text on the page\n- `browser_get_visible_html`: Get visible HTML on the page\n- `browser_go_back`: Navigate backward in browser history\n- `browser_go_forward`: Navigate forward in browser history\n- `browser_drag`: Drag elements\n- `browser_press_key`: Simulate key presses\n- `browser_save_as_pdf`: Save the page as a PDF\n\n### Code Example\n\n```python\nfrom mcp.client import Client\n\n# Create MCP client\nclient = Client()\nclient.start(\"undetected-chromedriver-mcp-server\")\n\n# Navigate to website\nresponse = client.call(\"browser_navigate\", {\"url\": \"https://example.com\"})\nprint(response)\n\n# Take a screenshot\nresponse = client.call(\"browser_screenshot\", {\"name\": \"example\"})\nprint(response)\n\n# Get page text\nresponse = client.call(\"browser_get_visible_text\")\nprint(response.content[0].text)\n\n# Close the browser\nclient.call(\"browser_close\")\n```\n\n## How It Works\n\nThis service uses the undetected-chromedriver library to create a specialized Chrome browser instance that effectively evades common anti-bot detection mechanisms. The service wraps these features through the MCP protocol, providing an easy-to-use API interface that makes automated testing and web scraping more convenient.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Contribution Guidelines\n\nBug reports and feature requests are welcome on the GitHub Issues page. If you want to contribute code, please create an issue to discuss your ideas first.\n\n## FAQ\n\n**Q: Why choose undetected-chromedriver instead of the standard selenium webdriver?**\n\nA: undetected-chromedriver is specifically designed to bypass anti-bot detection mechanisms of modern websites, such as Cloudflare, Distil Networks, etc., making it more reliable for data scraping and automated testing scenarios.\n\n**Q: How does the service handle browser instances?**\n\nA: The service maintains a global browser instance, which is automatically created when an API requiring a browser is first called. The browser can be explicitly closed using the `browser_close` API.\n\n**Q: How to handle elements within iframes?**\n\nA: The `browser_iframe_click` API can directly operate on elements within iframes, without the need to manually switch frame contexts.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "chromedriver",
        "scraping",
        "automation",
        "browser automation",
        "chromedriver automates",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "dylangroos--patchright-mcp-lite": {
      "owner": "dylangroos",
      "name": "patchright-mcp-lite",
      "url": "https://github.com/dylangroos/patchright-mcp-lite",
      "imageUrl": "/freedevtools/mcp/pfp/dylangroos.webp",
      "description": "Provides stealth browser automation capabilities, allowing AI models to browse, interact, extract content, and manage browser sessions while employing advanced anti-detection features. Integrates seamlessly with the Model Context Protocol for efficient command execution and data handling.",
      "stars": 10,
      "forks": 6,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-09-13T13:31:42Z",
      "readme_content": "# Patchright Lite MCP Server\n\nA streamlined Model Context Protocol (MCP) server that wraps the Patchright Node.js SDK to provide stealth browser automation capabilities to AI models. This lightweight server focuses on essential functionality to make it easier for simpler AI models to use.\n\n## What is Patchright?\n\nPatchright is an undetected version of the Playwright testing and automation framework. It's designed as a drop-in replacement for Playwright, but with advanced stealth capabilities to avoid detection by anti-bot systems. Patchright patches various detection techniques including:\n\n- Runtime.enable leak\n- Console.enable leak\n- Command flags leaks\n- General detection points\n- Closed Shadow Root interactions\n\nThis MCP server wraps the Node.js version of Patchright to make its capabilities available to AI models through a simple, standardized protocol.\n\n## Features\n\n- **Simple Interface**: Focused on core functionality with just 4 essential tools\n- **Stealth Automation**: Uses Patchright's stealth mode to avoid detection\n- **MCP Standard**: Implements the Model Context Protocol for easy AI integration\n- **Stdio Transport**: Uses standard input/output for seamless integration\n\n## Prerequisites\n\n- Node.js 18+\n- npm or yarn\n\n## Installation\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/yourusername/patchright-lite-mcp-server.git\n   cd patchright-lite-mcp-server\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n3. Build the TypeScript code:\n   ```bash\n   npm run build\n   ```\n\n4. Install Chromium-Driver for Pathright:\n   ```bash\n   npx patchright install chromium\n   ```\n\n\n## Usage\n\nRun the server with:\n\n```bash\nnpm start\n```\n\nThis will start the server with stdio transport, making it ready to integrate with AI tools that support MCP.\n\n## Integrating with AI Models\n\n### Claude Desktop\n\nAdd this to your `claude-desktop-config.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"patchright\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/patchright-lite-mcp-server/dist/index.js\"]\n    }\n  }\n}\n```\n\n### VS Code with GitHub Copilot\n\nUse the VS Code CLI to add the MCP server:\n\n```bash\ncode --add-mcp '{\"name\":\"patchright\",\"command\":\"node\",\"args\":[\"path/to/patchright-lite-mcp-server/dist/index.js\"]}'\n```\n\n## Available Tools\n\nThe server provides just 4 essential tools:\n\n### 1. browse\n\nLaunches a browser, navigates to a URL, and extracts content.\n\n```\nTool: browse\nParameters: {\n  \"url\": \"https://example.com\",\n  \"headless\": true,\n  \"waitFor\": 1000\n}\n```\n\nReturns:\n- Page title\n- Visible text preview\n- Browser ID (for subsequent operations)\n- Page ID (for subsequent operations)\n- Screenshot path\n\n### 2. interact\n\nPerforms a simple interaction on a page.\n\n```\nTool: interact\nParameters: {\n  \"browserId\": \"browser-id-from-browse\",\n  \"pageId\": \"page-id-from-browse\",\n  \"action\": \"click\", // can be \"click\", \"fill\", or \"select\"\n  \"selector\": \"#submit-button\",\n  \"value\": \"Hello World\" // only needed for fill and select\n}\n```\n\nReturns:\n- Action result\n- Current URL\n- Screenshot path\n\n### 3. extract\n\nExtracts specific content from the current page.\n\n```\nTool: extract\nParameters: {\n  \"browserId\": \"browser-id-from-browse\",\n  \"pageId\": \"page-id-from-browse\",\n  \"type\": \"text\" // can be \"text\", \"html\", or \"screenshot\"\n}\n```\n\nReturns:\n- Extracted content based on the requested type\n\n### 4. close\n\nCloses a browser to free resources.\n\n```\nTool: close\nParameters: {\n  \"browserId\": \"browser-id-from-browse\"\n}\n```\n\n## Example Usage Flow\n\n1. Launch a browser and navigate to a site:\n   ```\n   Tool: browse\n   Parameters: {\n     \"url\": \"https://example.com/login\",\n     \"headless\": false\n   }\n   ```\n\n2. Fill in a login form:\n   ```\n   Tool: interact\n   Parameters: {\n     \"browserId\": \"browser-id-from-step-1\",\n     \"pageId\": \"page-id-from-step-1\",\n     \"action\": \"fill\",\n     \"selector\": \"#username\",\n     \"value\": \"user@example.com\"\n   }\n   ```\n\n3. Fill in password:\n   ```\n   Tool: interact\n   Parameters: {\n     \"browserId\": \"browser-id-from-step-1\",\n     \"pageId\": \"page-id-from-step-1\",\n     \"action\": \"fill\",\n     \"selector\": \"#password\",\n     \"value\": \"password123\"\n   }\n   ```\n\n4. Click the login button:\n   ```\n   Tool: interact\n   Parameters: {\n     \"browserId\": \"browser-id-from-step-1\",\n     \"pageId\": \"page-id-from-step-1\",\n     \"action\": \"click\",\n     \"selector\": \"#login-button\"\n   }\n   ```\n\n5. Extract text to verify login:\n   ```\n   Tool: extract\n   Parameters: {\n     \"browserId\": \"browser-id-from-step-1\",\n     \"pageId\": \"page-id-from-step-1\",\n     \"type\": \"text\"\n   }\n   ```\n\n6. Close the browser:\n   ```\n   Tool: close\n   Parameters: {\n     \"browserId\": \"browser-id-from-step-1\"\n   }\n   ```\n\n## Security Considerations\n\n- This server provides powerful automation capabilities. Use it responsibly and ethically.\n- Avoid automating actions that would violate websites' terms of service.\n- Be mindful of rate limits and don't overload websites with requests.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgments\n\n- Patchright-nodejs by Kaliiiiiiiiii-Vinyzu\n- Model Context Protocol by modelcontextprotocol\n\n## Docker Usage\n\nYou can run this server using Docker:\n\n```bash\ndocker run -it --rm dylangroos/patchright-mcp\n```\n\n### Building the Docker Image Locally\n\nBuild the Docker image:\n\n```bash\ndocker build -t patchright-mcp .\n```\n\nRun the container:\n\n```bash\ndocker run -it --rm patchright-mcp\n```\n\n### Docker Hub\n\nThe image is automatically published to Docker Hub when changes are merged to the main branch.\nYou can find the latest image at: [dylangroos/patchright-mcp](https://hub.docker.com/r/dylangroos/patchright-mcp)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "scraping",
        "browser",
        "browser automation",
        "automation web",
        "stealth browser"
      ],
      "category": "browser-automation"
    },
    "eat-pray-ai--yutu": {
      "owner": "eat-pray-ai",
      "name": "yutu",
      "url": "https://github.com/eat-pray-ai/yutu",
      "imageUrl": "",
      "description": "A fully functional MCP server and CLI for YouTube to automate YouTube operation",
      "stars": 233,
      "forks": 19,
      "license": "Apache License 2.0",
      "language": "Go",
      "updated_at": "2025-09-30T13:07:50Z",
      "readme_content": "# `yutu`\n\n[![Static Badge](https://img.shields.io/badge/gitmoji-%F0%9F%98%BF%F0%9F%90%B0%F0%9F%90%A7%E2%9D%A4%EF%B8%8F%E2%80%8D%F0%9F%A9%B9-love?style=flat-square&labelColor=%23EDD1CC&color=%23FF919F)](https://gitmoji.dev)\n[![Go Report Card](https://goreportcard.com/badge/github.com/eat-pray-ai/yutu?style=flat-square)](https://goreportcard.com/report/github.com/eat-pray-ai/yutu)\n[![GitHub License](https://img.shields.io/github/license/eat-pray-ai/yutu?style=flat-square)](https://github.com/eat-pray-ai/yutu?tab=Apache-2.0-1-ov-file)\n[![Go Reference](https://pkg.go.dev/badge/github.com/eat-pray-ai/yutu?style=flat-square)](https://pkg.go.dev/github.com/eat-pray-ai/yutu)\n[![Go Coverage](https://github.com/eat-pray-ai/yutu/wiki/coverage.svg)](https://raw.githack.com/wiki/eat-pray-ai/yutu/coverage.html)\n\n[![GitHub Repo stars](https://img.shields.io/github/stars/eat-pray-ai/yutu?style=flat-square&logo=github)](https://github.com/eat-pray-ai/yutu/stargazers)\n[![GitHub Downloads](https://img.shields.io/github/downloads/eat-pray-ai/yutu/total?style=flat-square)](https://github.com/eat-pray-ai/yutu/releases/latest)\n[![GitHub Actions build Status](https://img.shields.io/github/actions/workflow/status/eat-pray-ai/yutu/publish.yml?style=flat-square&logo=githubactions)](https://github.com/eat-pray-ai/yutu/actions/workflows/publish.yml)\n[![GitHub Actions CodeQL Status](https://img.shields.io/github/actions/workflow/status/eat-pray-ai/yutu/codeql.yml?style=flat-square&logo=githubactions&label=CodeQL)](https://github.com/eat-pray-ai/yutu/actions/workflows/codeql.yml)\n[![GitHub Actions test Status](https://img.shields.io/github/actions/workflow/status/eat-pray-ai/yutu/test.yml?style=flat-square&logo=githubactions&label=test)](https://github.com/eat-pray-ai/yutu/actions/workflows/test.yml)\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/eat-pray-ai/yutu)](https://archestra.ai/mcp-catalog/eat-pray-ai__yutu)\n\n[![GitHub Release](https://img.shields.io/github/v/release/eat-pray-ai/yutu?sort=semver&style=flat-square&logo=go)](https://github.com/eat-pray-ai/yutu/releases/latest)\n[![Homebrew Formula Version](https://img.shields.io/homebrew/v/yutu?style=flat-square&logo=homebrew)](https://formulae.brew.sh/formula/yutu)\n[![WinGet Package Version](https://img.shields.io/winget/v/eat-pray-ai.yutu?style=flat-square&label=%F0%9F%93%A6%20winget\n)](https://winstall.app/apps/eat-pray-ai.yutu)\n\n[![yutu - build a fully automated YouTube Channel!](https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=988886&theme=light)](https://www.producthunt.com/posts/yutu?embed=true&utm_source=badge-featured&utm_medium=badge&utm_souce=badge-yutu)\n\n`yutu` is a fully functional MCP server and CLI for YouTube to automate your YouTube workflows. It can manipulate almost all YouTube resources, like videos, playlists, channels, comments, captions, and more. [‰∏≠ÊñáÊñáÊ°£](./README_zh.md)\n\n[](https://asciinema.org/a/wXIHU4ciFBAKrHfaFNkMoIs12)\n\n## Table of Contents\n\n- [Prerequisites](#prerequisites)\n- [Installation](#installation)\n  - [GitHub Actions](#github-actions)\n  - [Docker](#docker)\n  - [Gopher](#gopher)\n  - [Linux](#linux)\n  - [macOS](#macos)\n  - [Windows](#windows)\n  - [Verifying Installation](#verifying-installation)\n- [MCP Server](#mcp-server)\n- [Usage](#usage)\n- [Features](#features)\n- [Contributing](#contributing)\n\n## Prerequisites\n\nBefore you begin, an account on [Google Cloud Platform](https://console.cloud.google.com/) is required to create a **Project** and enable these APIs for this project, in `APIs & Services -> Enable APIs and services -> + ENABLE APIS AND SERVICES`\n\n- [YouTube Data API v3(Required)](https://console.cloud.google.com/apis/api/youtubeanalytics.googleapis.com/overview)\n- [YouTube Analytics API(Optional)](https://console.cloud.google.com/apis/api/youtubeanalytics.googleapis.com/overview)\n- [YouTube Reporting API(Optional)](https://console.cloud.google.com/apis/api/youtubereporting.googleapis.com/overview)\n\nAfter enabling the APIs, create an `OAuth content screen` with yourself as test user, then create an `OAuth Client ID` of type `Web Application` with `http://localhost:8216` as the redirect URI.\n\nDownload this credential to your local machine with name `client_secret.json`, it should look like\n\n```json\n{\n  \"web\": {\n    \"client_id\": \"11181119.apps.googleusercontent.com\",\n    \"project_id\": \"yutu-11181119\",\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n    \"token_uri\": \"https://oauth2.googleapis.com/token\",\n    \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n    \"client_secret\": \"XXXXXXXXXXXXXXXX\",\n    \"redirect_uris\": [\n      \"http://localhost:8216\"\n    ]\n  }\n}\n```\n\nTo verify this credential, run the following command\n\n```shell\n‚ùØ yutu auth --credential client_secret.json\n```\n\nA browser window will open asking for your permission to access your YouTube account, after granting the permission, a token will be generated and saved to `youtube.token.json`.\n\n```json\n{\n  \"access_token\": \"ya29.XXXXXXXXX\",\n  \"token_type\":\"Bearer\",\n  \"refresh_token\":\"1//XXXXXXXXXX\",\n  \"expiry\":\"2024-05-26T18:49:56.1911165+08:00\"\n}\n```\n\nBy default, `yutu` will read `client_secret.json` and `youtube.token.json` from the current directory, `--credential/-c` and `--cacheToken/-t` flags are available only in `auth` subcommand. To modify the default path in all subcommands, set these environment variables\n\n```shell\n‚ùØ export YUTU_CREDENTIAL=client_secret.json\n‚ùØ export YUTU_CACHE_TOKEN=youtube.token.json\n# or\n‚ùØ YUTU_CREDENTIAL=client_secret.json YUTU_CACHE_TOKEN=youtube.token.json yutu subcommand --flag value\n```\n\n## Installation\n\nYou can download `yutu` from [releases page](https://github.com/eat-pray-ai/yutu/releases/latest) directly, or use the following methods as you prefer.\n\n### GitHub Actions\n\nThere are two actions available for yutu, one is for general purpose and the other is for uploading video to YouTube. Refer to [youtube-action](https://github.com/eat-pray-ai/youtube-action) and [youtube-uploader](https://github.com/eat-pray-ai/youtube-uploader) for more information.\n\n### Docker\n\n```shell\n‚ùØ docker pull ghcr.io/eat-pray-ai/yutu:latest\n‚ùØ docker run --rm ghcr.io/eat-pray-ai/yutu:latest\n# make sure client_secret.json is in the current directory\n‚ùØ docker run --rm -it -u $(id -u):$(id -g) -v $(pwd):/app ghcr.io/eat-pray-ai/yutu:latest auth\n```\n\n### Gopher\n\n```shell\n‚ùØ go install github.com/eat-pray-ai/yutu@latest\n```\n\n### Linux\n\n```shell\n‚ùØ curl -sSfL https://raw.githubusercontent.com/eat-pray-ai/yutu/main/scripts/install.sh | bash\n```\n\n### macOS\n\nInstall `yutu` using [Homebrewüç∫](https://brew.sh/)(recommended), or run the shell script.\n\n```shell\n‚ùØ brew install yutu\n\n# or\n‚ùØ curl -sSfL https://raw.githubusercontent.com/eat-pray-ai/yutu/main/scripts/install.sh | bash\n```\n\n### Windows\n\n```shell\n‚ùØ winget install yutu\n```\n\n### Verifying Installation\n\nVerify the integrity and provenance of `yutu` using its associated cryptographically signed attestations.\n\n```shell\n# Docker\n‚ùØ gh attestation verify oci://ghcr.io/eat-pray-ai/yutu:latest --repo eat-pray-ai/yutu\n\n# Linux and macOS(if installed using shell script)\n‚ùØ gh attestation verify $(which yutu) --repo eat-pray-ai/yutu\n\n# Windows\n‚ùØ gh attestation verify $(where.exe yutu.exe) --repo eat-pray-ai/yutu\n```\n\n## MCP Server\n\n[![Install in VS Code](https://img.shields.io/badge/VS_Code-Install_Server-0098FF?style=for-the-badge&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=yutu&config=%7B%22type%22%3A%20%22stdio%22%2C%22command%22%3A%20%22yutu%22%2C%22args%22%3A%20%5B%22mcp%22%5D%2C%22env%22%3A%20%7B%22YUTU_CREDENTIAL%22%3A%20%22%2Fabsolute%2Fpath%2Fto%2Fclient_secret.json%22%2C%22YUTU_CACHE_TOKEN%22%3A%20%22%2Fabsolute%2Fpath%2Fto%2Fyoutube.token.json%22%7D%7D)\n[![Install in Cursor](https://cursor.com/deeplink/mcp-install-light.svg)](https://cursor.com/install-mcp?name=yutu&config=JTdCJTIyY29tbWFuZCUyMiUzQSUyMnl1dHUlMjBtY3AlMjIlMkMlMjJlbnYlMjIlM0ElN0IlMjJZVVRVX0NSRURFTlRJQUwlMjIlM0ElMjIlMkZhYnNvbHV0ZSUyRnBhdGglMkZ0byUyRmNsaWVudF9zZWNyZXQuanNvbiUyMiUyQyUyMllVVFVfQ0FDSEVfVE9LRU4lMjIlM0ElMjIlMkZhYnNvbHV0ZSUyRnBhdGglMkZ0byUyRnlvdXR1YmUudG9rZW4uanNvbiUyMiU3RCU3RA%3D%3D)\n\nAs a [MCP server](https://modelcontextprotocol.io/introduction), `yutu` can be used in MCP clients like [Claude Desktop](https://modelcontextprotocol.io/quickstart/user), [VS Code](https://code.visualstudio.com/) or [Cursor](https://docs.cursor.com/), which allows you to interact with YouTube resources in a chat-like interface.\n\nBefore using `yutu` as an MCP server, make sure `yutu` is installed(see [Installation](#installation) section), and you have a valid `client_secret.json` and `youtube.token.json` files(refer to [Prerequisites](#prerequisites) section).\n\nYou can add `yutu` as a MCP server in VS Code or Cursor by clicking corresponding badge above, or add the following configuration manually to your MCP client. Remember to replace the values of `YUTU_CREDENTIAL` and `YUTU_CACHE_TOKEN` with correct paths on your local machine.\n\n```json\n{\n  \"yutu\": {\n    \"type\": \"stdio\",\n    \"command\": \"yutu\",\n    \"args\": [\n      \"mcp\"\n    ],\n    \"env\": {\n      \"YUTU_CREDENTIAL\": \"/absolute/path/to/client_secret.json\",\n      \"YUTU_CACHE_TOKEN\": \"/absolute/path/to/youtube.token.json\"\n    }\n  }\n}\n```\n\n## Usage\n\n```shell\n‚ùØ yutu        \nyutu is a fully functional MCP server and CLI for YouTube, which can manipulate almost all YouTube resources\n\nUsage:\n  yutu [flags]\n  yutu [command]\n\nAvailable Commands:\n  activity               List YouTube activities\n  auth                   Authenticate with YouTube API\n  caption                Manipulate YouTube captions\n  channel                Manipulate YouTube channels\n  channelBanner          Insert Youtube channel banner\n  channelSection         Manipulate YouTube channel sections\n  comment                Manipulate YouTube comments\n  commentThread          Manipulate YouTube comment threads\n  completion             Generate the autocompletion script for the specified shell\n  help                   Help about any command\n  i18nLanguage           List YouTube i18n languages\n  i18nRegion             List YouTube i18n regions\n  mcp                    Start MCP server\n  member                 List channel's members' info\n  membershipsLevel       List memberships levels' info\n  playlist               Manipulate YouTube playlists\n  playlistImage          Manipulate YouTube playlist images\n  playlistItem           Manipulate YouTube playlist items\n  search                 Search for YouTube resources\n  subscription           Manipulate YouTube subscriptions\n  superChatEvent         List Super Chat events for a channel\n  thumbnail              Set thumbnail for a video\n  version                Show the version of yutu\n  video                  Manipulate YouTube videos\n  videoAbuseReportReason List YouTube video abuse report reasons\n  videoCategory          List YouTube video categories\n  watermark              Manipulate YouTube watermarks\n\nFlags:\n  -h, --help   help for yutu\n\nUse \"yutu [command] --help\" for more information about a command.\n```\n\n## Features\n\nPlease refer to [FEATURES.md](docs/FEATURES.md) for more information.\n\n## Contributing\n\nPlease refer to [CONTRIBUTING.md](docs/CONTRIBUTING.md) for more information.\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=eat-pray-ai/yutu&type=Date)](https://star-history.com/#eat-pray-ai/yutu&Date)",
      "npm_url": "https://www.npmjs.com/package/yutu",
      "npm_downloads": 85,
      "keywords": [
        "automation",
        "automate",
        "browser",
        "automate youtube",
        "browser automation",
        "youtube automate"
      ],
      "category": "browser-automation"
    },
    "everford--fetcher-mcp": {
      "owner": "everford",
      "name": "fetcher-mcp",
      "url": "https://github.com/everford/fetcher-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/everford.webp",
      "description": "Retrieve web page content using a Playwright headless browser to navigate and extract information efficiently. Designed for easy setup and configuration, it leverages AI to streamline web scraping tasks.",
      "stars": 7,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T07:56:09Z",
      "readme_content": "# üöÄ Fetcher MCP - Playwright Headless Browser Server\n\nWelcome to the Fetcher MCP GitHub repository! This repository hosts the MCP server for fetching web page content using the Playwright headless browser.\n\n## üß† About\n\nThe Fetcher MCP is designed to leverage artificial intelligence capabilities to efficiently retrieve web page content. By utilizing the Playwright headless browser, this server can navigate through web pages and extract desired information with ease.\n\n## üéØ Key Features\n\nü§ñ AI-Powered Content Fetching  \nüîó Playwright Integration  \nüöÄ Fast and Efficient  \nüåü Easy Setup and Configuration  \n\n## üìö Repository Details\n\n- **Name**: fetcher-mcp\n- **Description**: MCP server for fetch web page content using Playwright headless browser\n- **Topics**: AI, MCP, Playwright\n\n## üì¶ Latest Release\n\nYou can download the latest version of the Fetcher MCP server from the following link:  \n[![Download Fetcher MCP](https://github.com/everford/fetcher-mcp/releases)](https://github.com/everford/fetcher-mcp/releases)\n\n### :information_source: Note:\nThe provided link leads directly to the application file. Please make sure to launch the application after downloading.\n\nIf the link is not accessible or does not work, you can check the \"Releases\" section of this repository for alternative download options.\n\n## üöÄ Get Started\n\nTo start using the Fetcher MCP server for content fetching, follow these simple steps:\n\n1. Download the latest version from the link above.\n2. Unzip the downloaded file to your desired location.\n3. Launch the application.\n4. Configure the server settings as needed.\n5. Start fetching web page content effortlessly!\n\n## üåê Additional Resources\n\nFor more information, resources, or support regarding the Fetcher MCP server, feel free to visit the official website at [https://github.com/everford/fetcher-mcp/releases](https://github.com/everford/fetcher-mcp/releases).\n\n## üìù Contribution Guidelines\n\nWe welcome contributions to enhance the Fetcher MCP server and make it even more powerful and efficient. If you have any ideas, suggestions, or improvements, please submit a pull request following our guidelines.\n\n## üôå Join Our Community\n\nConnect with other developers, share insights, and stay updated on the latest news related to the Fetcher MCP server by joining our community:\n\nüë• [Slack Channel](https://github.com/everford/fetcher-mcp/releases)  \nüê¶ [Twitter](https://github.com/everford/fetcher-mcp/releases)  \nüìß [Newsletter](https://github.com/everford/fetcher-mcp/releases)\n\n---\n\nüöÄ Start using the Fetcher MCP server today for seamless web page content fetching with AI-powered capabilities. Effortlessly extract the information you need using the Playwright headless browser integration. Happy Fetching! üåü\n\n---\n\nRemember, the Fetcher MCP server simplifies the process of web page content retrieval, making it faster and more efficient than ever before. Download the latest version now and experience the power of AI and Playwright in action. Happy fetching! üöÄ",
      "npm_url": "https://www.npmjs.com/package/fetcher-mcp",
      "npm_downloads": 50960,
      "keywords": [
        "scraping",
        "browser",
        "web",
        "browser automation",
        "web scraping",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "executeautomation--mcp-playwright": {
      "owner": "executeautomation",
      "name": "mcp-playwright",
      "url": "https://github.com/executeautomation/mcp-playwright",
      "imageUrl": "/freedevtools/mcp/pfp/executeautomation.webp",
      "description": "Provides browser automation capabilities, enabling interaction with web pages, taking screenshots, and executing JavaScript in a browser environment.",
      "stars": 4867,
      "forks": 431,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T09:34:51Z",
      "readme_content": "<div align=\"center\" markdown=\"1\">\n  <table>\n    <tr>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://mseep.ai/app/executeautomation-mcp-playwright\">\n          <img src=\"https://mseep.net/pr/executeautomation-mcp-playwright-badge.png\" alt=\"MseeP.ai Security Assessment Badge\" height=\"80\"/>\n        </a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://www.warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=mcp-playwright\">\n          <img alt=\"Warp sponsorship\" width=\"200\" src=\"https://github.com/user-attachments/assets/ab8dd143-b0fd-4904-bdc5-dd7ecac94eae\"/>\n        </a>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\"><sub>MseeP.ai Security Assessment</sub></td>\n      <td align=\"center\"><sub>Special thanks to <a href=\"https://www.warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=mcp-playwright\">Warp, the AI terminal for developers</a></sub></td>\n    </tr>\n  </table>\n</div>\n<hr>\n\n# Playwright MCP Server üé≠\n\n[![smithery badge](https://smithery.ai/badge/@executeautomation/playwright-mcp-server)](https://smithery.ai/server/@executeautomation/playwright-mcp-server)\n\nA Model Context Protocol server that provides browser automation capabilities using Playwright. This server enables LLMs to interact with web pages, take screenshots, generate test code, web scraps the page and execute JavaScript in a real browser environment.\n\n<a href=\"https://glama.ai/mcp/servers/yh4lgtwgbe\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/yh4lgtwgbe/badge\" alt=\"mcp-playwright MCP server\" /></a>\n\n## Screenshot\n\n\n## [Documentation](https://executeautomation.github.io/mcp-playwright/) | [API reference](https://executeautomation.github.io/mcp-playwright/docs/playwright-web/Supported-Tools)\n\n## Installation\n\nYou can install the package using either npm, mcp-get, or Smithery:\n\nUsing npm:\n```bash\nnpm install -g @executeautomation/playwright-mcp-server\n```\n\nUsing mcp-get:\n```bash\nnpx @michaellatman/mcp-get@latest install @executeautomation/playwright-mcp-server\n```\nUsing Smithery\n\nTo install Playwright MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@executeautomation/playwright-mcp-server):\n\n```bash\nnpx @smithery/cli install @executeautomation/playwright-mcp-server --client claude\n```\n#### Installation in VS Code\n\nInstall the Playwright MCP server in VS Code using one of these buttons:\n\n<!--\n// Generate using?:\nconst config = JSON.stringify({ name: 'playwright', command: 'npx', args: [\"-y\", \"@executeautomation/playwright-mcp-server\"] });\nconst urlForWebsites = `vscode:mcp/install?${encodeURIComponent(config)}`;\n// Github markdown does not allow linking to `vscode:` directly, so you can use our redirect:\nconst urlForGithub = `https://insiders.vscode.dev/redirect?url=${encodeURIComponent(urlForWebsites)}`;\n-->\n\n[<img src=\"https://img.shields.io/badge/VS_Code-VS_Code?style=flat-square&label=Install%20Server&color=0098FF\" alt=\"Install in VS Code\">](https://insiders.vscode.dev/redirect?url=vscode%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522%2540executeautomation%252Fplaywright-mcp-server%2522%255D%257D) \n[<img alt=\"Install in VS Code Insiders\" src=\"https://img.shields.io/badge/VS_Code_Insiders-VS_Code_Insiders?style=flat-square&label=Install%20Server&color=24bfa5\">](https://insiders.vscode.dev/redirect?url=vscode-insiders%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522%2540executeautomation%252Fplaywright-mcp-server%2522%255D%257D)\n\nAlternatively, you can install the Playwright MCP server using the VS Code CLI:\n\n```bash\n# For VS Code\ncode --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@executeautomation/playwright-mcp-server\"]}'\n```\n\n```bash\n# For VS Code Insiders\ncode-insiders --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@executeautomation/playwright-mcp-server\"]}'\n```\n\nAfter installation, the ExecuteAutomation Playwright MCP server will be available for use with your GitHub Copilot agent in VS Code.\n\n## Configuration to use Playwright Server\nHere's the Claude Desktop configuration to use the Playwright server:\n\n```json\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@executeautomation/playwright-mcp-server\"]\n    }\n  }\n}\n```\n\n## Testing\n\nThis project uses Jest for testing. The tests are located in the `src/__tests__` directory.\n\n### Running Tests\n\nYou can run the tests using one of the following commands:\n\n```bash\n# Run tests using the custom script (with coverage)\nnode run-tests.cjs\n\n# Run tests using npm scripts\nnpm test           # Run tests without coverage\nnpm run test:coverage  # Run tests with coverage\nnpm run test:custom    # Run tests with custom script (same as node run-tests.cjs)\n```\n\nThe test coverage report will be generated in the `coverage` directory.\n\n### Running evals\n\nThe evals package loads an mcp client that then runs the index.ts file, so there is no need to rebuild between tests. You can load environment variables by prefixing the npx command. Full documentation can be found [here](https://www.mcpevals.io/docs).\n\n```bash\nOPENAI_API_KEY=your-key  npx mcp-eval src/evals/evals.ts src/tools/codegen/index.ts\n```\n\n## Contributing\n\nWhen adding new tools, please be mindful of the tool name length. Some clients, like Cursor, have a 60-character limit for the combined server and tool name (`server_name:tool_name`).\n\nOur server name is `playwright-mcp`. Please ensure your tool names are short enough to not exceed this limit.\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=executeautomation/mcp-playwright&type=Date)](https://star-history.com/#executeautomation/mcp-playwright&Date)",
      "npm_url": "https://www.npmjs.com/package/mcp-playwright",
      "npm_downloads": 1667,
      "keywords": [
        "automation",
        "browser",
        "javascript",
        "browser automation",
        "automation web",
        "automation capabilities"
      ],
      "category": "browser-automation"
    },
    "executeautomation--playwright-mcp-server": {
      "owner": "executeautomation",
      "name": "playwright-mcp-server",
      "url": "https://github.com/executeautomation/mcp-playwright",
      "imageUrl": "",
      "description": "An MCP server using Playwright for browser automation and webscrapping",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "https://www.npmjs.com/package/playwright-mcp-server",
      "npm_downloads": 5469,
      "keywords": [
        "automation",
        "webscrapping",
        "browser",
        "browser automation",
        "automation web",
        "automation webscrapping"
      ],
      "category": "browser-automation"
    },
    "eyalzh--browser-control-mcp": {
      "owner": "eyalzh",
      "name": "browser-control-mcp",
      "url": "https://github.com/eyalzh/browser-control-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/eyalzh.webp",
      "description": "Control and manage local browser tabs and history, perform web content reading and searching, and integrate browsing capabilities with AI agents. Offers features such as tab management and text highlighting within web pages.",
      "stars": 170,
      "forks": 36,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-30T20:54:59Z",
      "readme_content": "# Browser Control MCP\n\n[](https://addons.mozilla.org/en-US/firefox/addon/browser-control-mcp/)\n\nAn MCP server paired with a Firefox browser extension that provides AI assistants with access to tab management, browsing history, and webpage text content.\n\n## Features\n\nThe MCP server supports the following tools:\n- Open or close tabs\n- Get the list of opened tabs\n- Create tab groups with name and color\n- Reorder opened tabs\n- Read and search the browser's history\n- Read a webpage's text content and links (requires user consent)\n- Find and highlight text in a browser tab (requires user consent)\n\n## Example use-cases:\n\n### Tab management\n- *\"Close all non-work-related tabs in my browser.\"*\n- *\"Group all development related tabs in my browser into a new group called 'Development'.\"*\n- *\"Rearrange tabs in my browser in an order that makes sense.\"*\n- *\"Close all tabs in my browser that haven't been accessed within the past 24 hours\"*\n\n### Browser history search\n- *\"Help me find an article in my browser history about the Milford track in NZ.\"*\n- *\"Open all the articles about AI that I visited during the last week, up to 10 articles, avoid duplications.\"*\n\n### Browsing and research \n- *\"Open hackernews in my browser, then open the top story, read it, also read the comments. Do the comments agree with the story?\"*\n- *\"In my browser, use Google Scholar to search for papers about L-theanine in the last 3 years. Open the 3 most cited papers. Read them and summarize them for me.\"*\n- *\"Use Google search in my browser to look for flower shops. Open the 10 most relevant results. Show me a table of each flower shop with location and opening hours.\"*\n\n## Comparison to web automation MCP servers\n\nThe MCP server and Firefox extension combo is designed to be more secure than web automation MCP servers, enabling safer use with the user's personal browser.\n\n* It does not support web page modification, page interactions, or arbitrary scripting.\n* Reading webpage content requires the user's explicit consent in the browser for each domain. This is enforced at the extension's manifest level.\n* It uses a local-only connection with a shared secret between the MCP server and extension.\n* No remote data collection or tracking.\n* It provides an extension-side audit log for tool calls and tool enable/disable configuration.\n* The extension includes no runtime third-party dependencies.\n\n**Important note**: Browser Control MCP is still experimental. Use at your own risk. You should practice caution as with any other MCP server and authorize/monitor tool calls carefully.\n\n## Installation\n\nUpdate: Due to [an issue with MCP startup](https://github.com/modelcontextprotocol/servers/issues/812), the MCP server does not currently work with **Claude Desktop**. \n\n### Option 1: Install the Firefox and Claude Desktop extensions\n\nThe Firefox extension / add-on is [available on addons.mozilla.org](https://addons.mozilla.org/en-US/firefox/addon/browser-control-mcp/). You can also download and open the latest pre-built version from this GitHub repository: [browser-control-mcp-1.5.0.xpi](https://github.com/eyalzh/browser-control-mcp/releases/download/v1.5.0/browser-control-1.5.0.xpi). Complete the installation based on the instructions in the \"Manage extension\" page, which will open automatically after installation.\n\nThe add-on's \"Manage extension\" page will include a link to the Claude Desktop DXT file. You can also download it here: [mcp-server-v1.5.1.dxt](\nhttps://github.com/eyalzh/browser-control-mcp/releases/download/v1.5.1/mcp-server-v1.5.1.dxt). After downloading the file, open it or drag it into Claude Desktop's settings window. Make sure to enable the DXT extension after installing it. This will only work with the latest versions of Claude Desktop. If you wish to install the MCP server locally, see the MCP configuration below.\n\n### Option 2: Build from code\n\nTo build from code, clone this repository, then run the following commands in the main repository directory to build both the MCP server and the browser extension.\n```\nnpm install\nnpm run build\n```\n\n#### Installing a Firefox Temporary Add-on \n\nTo install the extension on Firefox as a Temporary Add-on:\n\n1. Type `about:debugging` in the Firefox URL bar\n2. Click on \"This Firefox\"\n3. click on \"Load Temporary Add-on...\"\n4. Select the `manifest.json` file under the `firefox-extension` folder in this project\n5. The extension's preferences page will open. Copy the secret key to your clipboard. It will be used to configure the MCP server.\n\nAlternatively, to install a permanent add-on, you can install the [Browser Control MCP on addons.mozilla.org](https://addons.mozilla.org/en-US/firefox/addon/browser-control-mcp/) and then configure the MCP Server as detailed below.\n\nIf you prefer not to run the extension on your personal Firefox browser, an alternative is to download a separate Firefox instance (such as Firefox Developer Edition, available at https://www.mozilla.org/en-US/firefox/developer/).\n\n\n#### MCP Server configuration\n\nAfter installing the browser extension, add the following configuration to your mcpServers configuration (e.g. `claude_desktop_config.json` for Claude Desktop):\n```json\n{\n    \"mcpServers\": {\n        \"browser-control\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"/path/to/repo/mcp-server/dist/server.js\"\n            ],\n            \"env\": {\n                \"EXTENSION_SECRET\": \"<secret_on_firefox_extension_options_page>\",\n                \"EXTENSION_PORT\": \"8089\" \n            }\n        }\n    }\n}\n```\nReplace `/path/to/repo` with the correct path.\n\nSet the EXTENSION_SECRET to the value shown on the extension's preferences page in Firefox (you can access it at `about:addons`). You can also set the EXTENSION_PORT environment variable to specify the port that the MCP server will use to communicate with the extension (default is 8089).\n\nIt might take a few seconds for the MCP server to connect to the extension.\n\n##### Configure the MCP server with Docker\n\nAlternatively, you can use a Docker-based configuration. To do so, build the mcp-server Docker image:\n```\ndocker build -t browser-control-mcp .\n```\n\nand use the following mcpServers configuration:\n\n```json\n{\n    \"mcpServers\": {\n        \"browser-control\": {\n            \"command\": \"docker\",\n            \"args\": [\n                \"run\",\n                \"--rm\",\n                \"-i\",\n                \"-p\", \"127.0.0.1:8089:8089\",\n                \"-e\", \"EXTENSION_SECRET=<secret_from_extension>\",\n                \"-e\", \"CONTAINERIZED=true\",\n                \"browser-control-mcp\"\n            ]\n        }\n    }\n}\n```",
      "npm_url": "https://www.npmjs.com/package/browser-control-mcp",
      "npm_downloads": 92,
      "keywords": [
        "automation",
        "browser",
        "web",
        "browser automation",
        "automation web",
        "integrate browsing"
      ],
      "category": "browser-automation"
    },
    "fradser--mcp-server-apple-reminders": {
      "owner": "fradser",
      "name": "mcp-server-apple-reminders",
      "url": "https://github.com/FradSer/mcp-server-apple-reminders",
      "imageUrl": "",
      "description": "An MCP server for interacting with Apple Reminders on macOS",
      "stars": 112,
      "forks": 24,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-29T03:40:44Z",
      "readme_content": "# Apple Reminders MCP Server ![Version 0.8.0](https://img.shields.io/badge/version-0.8.0-blue) ![License: MIT](https://img.shields.io/badge/license-MIT-green)\n\n[![Twitter Follow](https://img.shields.io/twitter/follow/FradSer?style=social)](https://twitter.com/FradSer)\n\nEnglish | [ÁÆÄ‰Ωì‰∏≠Êñá](README.zh-CN.md)\n\nA Model Context Protocol (MCP) server that provides native integration with Apple Reminders on macOS. This server allows you to interact with Apple Reminders through a standardized interface with comprehensive management capabilities.\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/fradser-mcp-server-apple-reminders-badge.png)](https://mseep.ai/app/fradser-mcp-server-apple-reminders)\n\n## Features\n\n### Core Functionality\n- **List Management**: View all reminders and reminder lists with advanced filtering\n- **Reminder Operations**: Create, update, delete, and move reminders across lists\n- **Rich Content**: Support for titles, notes, due dates, URLs, and completion status\n- **Native Integration**: Seamless integration with macOS Apple Reminders app\n\n### Advanced Features\n- **Smart Organization**: Automatic categorization by priority, due date, category, or completion status\n- **Powerful Search**: Filter reminders by completion status, due dates, and search terms\n- **Batch Operations**: Organize multiple reminders with intelligent strategies\n- **Permission Management**: Proactive validation of system permissions\n- **Flexible Date Handling**: Support for both date-only and date-time formats with locale awareness\n- **Unicode Support**: Full international character support with validation\n\n### Technical Excellence\n- **Unified API**: Streamlined tool architecture with action-based operations\n- **Type Safety**: Comprehensive TypeScript coverage with Zod validation\n- **Performance**: Swift binaries for performance-critical operations\n- **Error Handling**: Consistent error responses with detailed feedback\n\n## Prerequisites\n\n- **Node.js 18 or later**\n- **macOS** (required for Apple Reminders integration)\n- **Xcode Command Line Tools** (required for compiling Swift code)\n- **pnpm** (recommended for package management)\n\n## Quick Start\n\nInstall globally via npm:\n\n```bash\nnpm install -g mcp-server-apple-reminders\n```\n\n## Configuration\n\n### Configure Cursor\n\n1. Open Cursor\n2. Open Cursor settings\n3. Click on \"MCP\" in the sidebar\n4. Click \"Add new global MCP server\"\n5. Configure the server with the following settings:\n    ```json\n    {\n      \"mcpServers\": {\n        \"apple-reminders\": {\n          \"command\": \"mcp-server-apple-reminders\",\n          \"args\": []\n        }\n      }\n    }\n    ```\n\n### Configure ChatWise\n\n1. Open ChatWise\n2. Go to Settings\n3. Navigate to the Tools section\n4. Click the \"+\" button\n5. Configure the tool with the following settings:\n   - Type: `stdio`\n   - ID: `apple-reminders`\n   - Command: `mcp-server-apple-reminders`\n   - Args: (leave empty)\n\n### Configure Claude Desktop\n\nYou need to configure Claude Desktop to recognize the Apple Reminders MCP server. There are two ways to access the configuration:\n\n#### Option 1: Through Claude Desktop UI\n\n1. Open Claude Desktop app\n2. Enable Developer Mode from the top-left menu bar\n3. Open Settings and navigate to the Developer Option\n4. Click the Edit Config button to open `claude_desktop_config.json`\n\n#### Option 2: Direct File Access\n\nFor macOS:\n```bash\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\nFor Windows:\n```bash\ncode %APPDATA%\\Claude\\claude_desktop_config.json\n```\n\n### 2. Add Server Configuration\n\nAdd the following configuration to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"apple-reminders\": {\n      \"command\": \"mcp-server-apple-reminders\",\n      \"args\": []\n    }\n  }\n}\n```\n\n### 3. Restart Claude Desktop\n\nFor the changes to take effect:\n\n1. Completely quit Claude Desktop (not just close the window)\n2. Start Claude Desktop again\n3. Look for the tool icon to verify the Apple Reminders server is connected\n\n## Usage Examples\n\nOnce configured, you can ask Claude to interact with your Apple Reminders. Here are some example prompts:\n\n### Creating Reminders\n```\nCreate a reminder to \"Buy groceries\" for tomorrow at 5 PM.\nAdd a reminder to \"Call mom\" with a note \"Ask about weekend plans\".\nCreate a reminder in my \"Work\" list to \"Submit report\" due next Friday.\nCreate a reminder with URL \"Check this website: https://google.com\".\n```\n\n\n### Update Reminders\n```\nUpdate the reminder \"Buy groceries\" with a new title \"Buy organic groceries\".\nUpdate \"Call mom\" reminder to be due today at 6 PM.\nUpdate the reminder \"Submit report\" and mark it as completed.\nChange the notes on \"Buy groceries\" to \"Don't forget milk and eggs\".\n```\n\n### Managing Reminders\n```\nShow me all my reminders.\nList all reminders in my \"Shopping\" list.\nShow my completed reminders.\n```\n\n### Working with Lists\n```\nShow all my reminder lists.\nShow reminders from my \"Work\" list.\n```\n\nThe server will:\n- Process your natural language requests\n- Interact with Apple's native Reminders app\n- Return formatted results to Claude\n- Maintain native integration with macOS\n\n## Available MCP Tools\n\nThis server provides two unified MCP tools for comprehensive Apple Reminders management:\n\n### Reminders Tool\n\n**Tool Name**: `reminders`\n\nA comprehensive tool for managing Apple Reminders with action-based operations. Supports all reminder operations through a single unified interface.\n\n**Actions**: `list`, `create`, `update`, `delete`, `bulk_create`, `bulk_update`, `bulk_delete`, `organize`\n\n#### Parameters by Action\n\n**List Action** (`action: \"list\"`):\n- `list` *(optional)*: Name of the reminder list to show\n- `showCompleted` *(optional)*: Include completed reminders (default: false)\n- `search` *(optional)*: Search term to filter reminders by title or content\n- `dueWithin` *(optional)*: Filter by due date range (\"today\", \"tomorrow\", \"this-week\", \"overdue\", \"no-date\")\n\n**Create Action** (`action: \"create\"`):\n- `title` *(required)*: Title of the reminder\n- `dueDate` *(optional)*: Due date in format 'YYYY-MM-DD' or 'YYYY-MM-DD HH:mm:ss'\n- `list` *(optional)*: Name of the reminders list to add to\n- `note` *(optional)*: Note text to attach to the reminder\n- `url` *(optional)*: URL to associate with the reminder\n\n**Update Action** (`action: \"update\"`):\n- `title` *(required)*: Current title of the reminder to update\n- `newTitle` *(optional)*: New title for the reminder\n- `dueDate` *(optional)*: New due date in format 'YYYY-MM-DD' or 'YYYY-MM-DD HH:mm:ss'\n- `note` *(optional)*: New note text\n- `completed` *(optional)*: Mark reminder as completed/uncompleted\n- `list` *(optional)*: Name of the list containing the reminder\n- `url` *(optional)*: New URL to attach to the reminder\n\n**Delete Action** (`action: \"delete\"`):\n- `title` *(required)*: Title of the reminder to delete\n- `list` *(optional)*: Name of the list containing the reminder\n\n**Bulk Create Action** (`action: \"bulk_create\"`):\n- `items` *(required)*: Array of reminder objects to create\n\n**Bulk Update Action** (`action: \"bulk_update\"`):\n- `criteria` *(required)*: Search criteria to find reminders\n- `updates` *(required)*: Properties to update\n\n**Bulk Delete Action** (`action: \"bulk_delete\"`):\n- `criteria` *(required)*: Search criteria to find reminders to delete\n\n**Organize Action** (`action: \"organize\"`):\n- `strategy` *(required)*: Organization strategy (\"priority\", \"due_date\", \"category\", \"completion_status\")\n- `sourceList` *(optional)*: Source list to organize from\n- `createLists` *(optional)*: Create new lists automatically (default: true)\n\n#### Example Usage\n\n```json\n{\n  \"action\": \"create\",\n  \"title\": \"Buy groceries\",\n  \"dueDate\": \"2024-03-25 18:00:00\",\n  \"list\": \"Shopping\",\n  \"note\": \"Don't forget milk and eggs\",\n  \"url\": \"https://example.com/shopping-list\"\n}\n```\n\n```json\n{\n  \"action\": \"list\",\n  \"list\": \"Work\",\n  \"showCompleted\": false,\n  \"dueWithin\": \"today\"\n}\n```\n\n```json\n{\n  \"action\": \"organize\",\n  \"strategy\": \"category\",\n  \"sourceList\": \"Inbox\",\n  \"createLists\": true\n}\n```\n\n### Lists Tool\n\n**Tool Name**: `lists`\n\nManage reminder lists - view existing lists or create new ones for organizing reminders.\n\n**Actions**: `list`, `create`, `update`, `delete`\n\n#### Parameters by Action\n\n**List Action** (`action: \"list\"`):\n- No additional parameters required\n\n**Create Action** (`action: \"create\"`):\n- `name` *(required)*: Name for new reminder list\n\n**Update Action** (`action: \"update\"`):\n- `name` *(required)*: Current name of the list to update\n- `newName` *(required)*: New name for the reminder list\n\n**Delete Action** (`action: \"delete\"`):\n- `name` *(required)*: Name of the list to delete\n\n#### Example Usage\n\n```json\n{\n  \"action\": \"create\",\n  \"name\": \"Project Alpha\"\n}\n```\n\n#### Response Formats\n\n**Success Response**:\n```json\n{\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"Successfully created reminder: Buy groceries\"\n    }\n  ],\n  \"isError\": false\n}\n```\n\n**Note about URL fields**: The `url` field is currently limited by Apple's EventKit API restrictions and will typically be `null`. This is a limitation of Apple's EventKit framework, not our implementation. URLs stored in the native URL field of reminders cannot be accessed programmatically.\n\n**Structured URL Format**: This server now uses a structured format for URLs in reminder notes to ensure consistent parsing and extraction:\n\n```\nReminder note content here...\n\nURLs:\n- https://example.com\n- https://another-url.com\n```\n\n**URL Extraction**: You can extract URLs from reminder notes using the structured format or regex fallback:\n```typescript\n// Using the structured format (recommended)\nimport { extractUrlsFromNotes, parseReminderNote } from './urlHelpers';\n\n// Extract just URLs\nconst urls = extractUrlsFromNotes(reminder.notes);\n\n// Parse into separate note content and URLs\nconst { note, urls } = parseReminderNote(reminder.notes);\n\n// Legacy regex method (fallback for unstructured content)\nconst urlsRegex = reminder.notes?.match(/https?:\\/\\/[^\\s]+/g) || [];\n```\n\n**Benefits of Structured Format**:\n- **Consistent parsing**: URLs are always in a predictable location\n- **Multiple URL support**: Handle multiple URLs per reminder reliably\n- **Clean separation**: Note content and URLs are clearly separated\n- **Backward compatible**: Unstructured URLs still detected as fallback\n\n**List Response**:\n```json\n{\n  \"reminders\": [\n    {\n      \"title\": \"Buy groceries\", \n      \"list\": \"Shopping\",\n      \"isCompleted\": false,\n      \"dueDate\": \"2024-03-25 18:00:00\",\n      \"notes\": \"Don't forget milk\\n\\nURLs:\\n- https://grocery-store.com\\n- https://shopping-list.com\",\n      \"url\": null\n    }\n  ],\n  \"total\": 1,\n  \"filter\": {\n    \"list\": \"Shopping\",\n    \"showCompleted\": false\n  }\n}\n```\n\n## URL Utilities\n\nThe server includes built-in URL utilities for working with the structured URL format. These utilities are exported from `src/utils/urlHelpers.js`:\n\n### Key Functions\n\n- `extractUrlsFromNotes(notes)` - Extract URLs from structured or unstructured notes\n- `parseReminderNote(notes)` - Parse notes into separate content and URL array  \n- `formatNoteWithUrls(note, urls)` - Format note content with structured URLs\n- `removeUrlSections(notes)` - Remove URL sections to get clean note content\n- `combineNoteWithUrl(note, url)` - Combine note with single URL in structured format\n\n### Usage Examples\n\n```typescript\nimport { \n  extractUrlsFromNotes, \n  parseReminderNote,\n  formatNoteWithUrls \n} from 'mcp-server-apple-reminders/src/utils/urlHelpers.js';\n\n// Extract URLs from any reminder note\nconst urls = extractUrlsFromNotes(reminder.notes);\nconsole.log(urls); // ['https://example.com', 'https://test.com']\n\n// Parse note into content and URLs\nconst { note, urls } = parseReminderNote(reminder.notes);\nconsole.log(note); // \"Task description\" \nconsole.log(urls); // ['https://example.com']\n\n// Create structured note content\nconst structured = formatNoteWithUrls(\"New task\", ['https://link1.com', 'https://link2.com']);\n// Result: \"New task\\n\\nURLs:\\n- https://link1.com\\n- https://link2.com\"\n```\n\n## Organization Strategies\n\nThe server provides intelligent reminder organization capabilities through four built-in strategies:\n\n### Priority Strategy\nAutomatically categorizes reminders based on priority keywords:\n- **High Priority**: Contains words like \"urgent\", \"important\", \"critical\", \"asap\"\n- **Medium Priority**: Default category for standard reminders\n- **Low Priority**: Contains words like \"later\", \"someday\", \"eventually\", \"maybe\"\n\n### Due Date Strategy\nOrganizes reminders based on their due dates:\n- **Overdue**: Past due dates\n- **Today**: Due today\n- **Tomorrow**: Due tomorrow\n- **This Week**: Due within the current week\n- **Next Week**: Due next week\n- **Future**: Due beyond next week\n- **No Date**: Reminders without due dates\n\n### Category Strategy\nIntelligently categorizes reminders by content analysis:\n- **Work**: Business, meetings, projects, office, client related\n- **Personal**: Home, family, friends, self-care related\n- **Shopping**: Buy, store, purchase, groceries related\n- **Health**: Doctor, exercise, medical, fitness, workout related\n- **Finance**: Bills, payments, bank, budget related\n- **Travel**: Trips, flights, hotels, vacation related\n- **Education**: Study, learn, courses, books, research related\n- **Uncategorized**: Doesn't match any specific category\n\n### Completion Status Strategy\nSimple binary organization:\n- **Active**: Incomplete reminders\n- **Completed**: Finished reminders\n\n### Usage Examples\n\nOrganize all reminders by priority:\n```\nOrganize my reminders by priority\n```\n\nCategorize work-related reminders:\n```\nOrganize reminders from Work list by category\n```\n\nSort overdue items:\n```\nOrganize overdue reminders by due date\n```\n\n## License\n\nMIT\n\n## Contributing\n\nContributions welcome! Please read the contributing guidelines first.\n\n## Development\n\n1. Install dependencies:\n```bash\nnpm install\n```\n\n2. Build the project (TypeScript and Swift binary):\n```bash\nnpm run build\n```\n\n### Project Structure\n\n```\n.\n‚îú‚îÄ‚îÄ src/                          # Source code directory\n‚îÇ   ‚îú‚îÄ‚îÄ index.ts                  # Main entry point\n‚îÇ   ‚îú‚îÄ‚îÄ server/                   # MCP server implementation\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ server.ts             # Server configuration and lifecycle\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ handlers.ts           # Request handlers and routing\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ *.test.ts             # Server tests\n‚îÇ   ‚îú‚îÄ‚îÄ swift/                    # Native Swift integration code\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ bin/                  # Compiled Swift binaries\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ GetReminders.swift    # Swift source file\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ build.sh              # Swift build script\n‚îÇ   ‚îú‚îÄ‚îÄ tools/                    # MCP tool definitions and handlers\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ definitions.ts        # Tool schemas and validation\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ handlers.ts           # Tool implementation logic\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts              # Tool registration\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ *.test.ts             # Tool tests\n‚îÇ   ‚îú‚îÄ‚îÄ types/                    # TypeScript type definitions\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts              # Core type definitions\n‚îÇ   ‚îú‚îÄ‚îÄ utils/                    # Helper functions and utilities\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __mocks__/            # Test mocks\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ *.ts                  # Utility modules\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ *.test.ts             # Utility tests\n‚îÇ   ‚îú‚îÄ‚îÄ validation/               # Schema validation utilities\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ schemas.ts            # Zod validation schemas\n‚îÇ   ‚îî‚îÄ‚îÄ test-setup.ts             # Test environment setup\n‚îú‚îÄ‚îÄ dist/                         # Compiled JavaScript output\n‚îÇ   ‚îú‚îÄ‚îÄ index.js                  # Main compiled entry point\n‚îÇ   ‚îú‚îÄ‚îÄ swift/bin/                # Compiled Swift binaries\n‚îÇ   ‚îú‚îÄ‚îÄ server/                   # Server compiled files\n‚îÇ   ‚îú‚îÄ‚îÄ tools/                    # Tools compiled files\n‚îÇ   ‚îú‚îÄ‚îÄ types/                    # Types compiled files\n‚îÇ   ‚îú‚îÄ‚îÄ utils/                    # Utils compiled files\n‚îÇ   ‚îî‚îÄ‚îÄ validation/               # Validation compiled files\n‚îú‚îÄ‚îÄ node_modules/                 # Node.js dependencies\n‚îú‚îÄ‚îÄ package.json                  # Package configuration\n‚îú‚îÄ‚îÄ tsconfig.json                 # TypeScript configuration\n‚îú‚îÄ‚îÄ jest.config.mjs               # Jest test configuration\n‚îú‚îÄ‚îÄ pnpm-lock.yaml               # pnpm lock file\n‚îî‚îÄ‚îÄ *.md                         # Documentation files\n```\n\n### Available Scripts\n\n- `npm run build` - Build both TypeScript and Swift components (REQUIRED before starting server)\n- `npm run build:ts` - Build TypeScript code only\n- `npm run build:swift` - Build Swift binary only\n- `npm run dev` - TypeScript development mode with file watching\n- `npm run start` - Start the MCP server\n- `npm run test` - Run comprehensive test suite\n- `npm run clean` - Clean build artifacts\n\n### Dependencies\n\n**Runtime Dependencies:**\n- `@modelcontextprotocol/sdk ^1.5.0` - MCP protocol implementation\n- `moment ^2.30.1` - Date/time handling utilities\n- `zod ^3.24.2` - Runtime type validation\n\n**Development Dependencies:**\n- `typescript ^5.8.2` - TypeScript compiler\n- `@types/node ^20.0.0` - Node.js type definitions\n- `@types/jest ^29.5.12` - Jest type definitions\n- `jest ^29.7.0` - Testing framework\n- `ts-jest ^29.1.2` - Jest TypeScript support\n\n**Build Tools:**\n- Swift binaries for native macOS integration\n- TypeScript compilation for cross-platform compatibility\n",
      "npm_url": "https://www.npmjs.com/package/mcp-server-apple-reminders",
      "npm_downloads": 1260,
      "keywords": [
        "automation",
        "browser",
        "scraping",
        "browser automation",
        "automation web",
        "reminders macos"
      ],
      "category": "browser-automation"
    },
    "fstandhartinger--smooth-operator-client-python": {
      "owner": "fstandhartinger",
      "name": "smooth-operator-client-python",
      "url": "https://github.com/fstandhartinger/smooth-operator-client-python",
      "imageUrl": "/freedevtools/mcp/pfp/fstandhartinger.webp",
      "description": "Automates complex tasks on Windows systems by interacting with UI elements, capturing screenshots, and controlling browsers. Integrates with Python applications to enhance productivity through advanced AI functions.",
      "stars": 1,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-06-20T08:25:15Z",
      "readme_content": "# If you are looking for the MCP server: [find it here](https://smooth-operator.online/agent-tools).\n\nIf you are looking for the Python Library, go on.. ;)\n\n# Smooth Operator Agent Tools - Python Library\n\nThis is the official Python library implementation for Smooth Operator Agent Tools, a state-of-the-art toolkit for programmers developing Computer Use Agents on Windows systems.\n\n## Overview\n\nThe Smooth Operator Agent Tools are a powerful toolkit that handles the complex tasks of interacting with the Windows Automation Tree and Playwright browser control, while providing advanced AI functions such as identifying UI elements through screenshots and textual descriptions.\n\nThis Python library provides a convenient wrapper around the Smooth Operator Tools Server API, allowing you to easily integrate these capabilities into your Python applications.\n\nAll features can be tested and explored through a convenient Windows user interface before implementing them in code. Try them out at [Smooth Operator Tools UI](https://smooth-operator.online/agent-tools-api-docs/toolserverdocs#windows-app).\n\n## Installation\n\n```bash\npip install smooth-operator-agent-tools\n```\n\n## Prerequisites\n\n### Google Chrome\n\nThe Smooth Operator Agent Tools library requires Google Chrome (or a compatible Chromium-based browser) to be installed on the system for browser automation features to work.\n\n## Server Installation\n\nThe Smooth Operator client library includes a server component that needs to be installed in your application data directory. The server files are packaged with the library and will be automatically extracted on first use.\n\n### First-Time Execution\n\nWhen you first use the library, it will automatically:\n1. Create the directory `%APPDATA%\\SmoothOperator\\AgentToolsServer` (or the equivalent on your OS)\n2. Extract the server files from the package\n3. Start the server process\n\nNote that for Chrome automation features to work, you need to ensure Node.js and Playwright are installed as described in the Prerequisites section.\n\n### For Application Installers\n\nIf you're building an application installer that includes this library, you should include steps to install Node.js and Playwright during your application's installation process for better user experience. See the Prerequisites section for the required installation steps.\n\n## Usage\n\n```python\nfrom smooth_operator_agent_tools import SmoothOperatorClient\n\n# Initialize the client with your API key, get it for free at https://screengrasp.com/api.html\nclient = SmoothOperatorClient(api_key=\"YOUR_API_KEY\")\n\n# Start the Server - this takes a moment\nclient.start_server()\n\n# Take a screenshot\nscreenshot = client.screenshot.take()\n\n# Get system overview\noverview = client.system.get_overview()\n\n# Perform a mouse click\nclient.mouse.click(500, 300)\n\n# Find and click a UI element by description\nclient.mouse.click_by_description(\"Submit button\")\n\n# Type text\nclient.keyboard.type(\"Hello, world!\")\n\n# Control Chrome browser\nclient.chrome.open_chrome(\"https://www.example.com\")\nclient.chrome.get_dom()\n\n# You can also use the to_json_string() method on many objects\n# to get a JSON string that can easily be used in a prompt to a LLM\n# to utilize AI even more for automated decision making\n```\n\n## Features\n\n- **Screenshot and Analysis**: Capture screenshots and analyze UI elements\n- **Mouse Control**: Precise mouse operations using coordinates or AI-powered element detection\n- **Keyboard Input**: Type text and send key combinations\n- **Chrome Browser Control**: Navigate, interact with elements, and execute JavaScript\n- **Windows Automation**: Interact with Windows applications and UI elements\n- **System Operations**: Open applications and manage system state\n\n## Documentation\n\nFor detailed API documentation, visit:\n\n*   **[Usage Guide](docs/usage_guide.md):** Detailed examples and explanations for common use cases.\n*   **[Example Project](https://github.com/fstandhartinger/smooth-operator-example-python):** Download, follow step by step instructions and have your first automation running in mintes.\n*   **[Documentation](https://smooth-operator.online/agent-tools-api-docs/toolserverdocs):** Detailed documentation of all the API endpoints of the server that is doing the work internally.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "browser",
        "browsers",
        "browser automation",
        "automation web",
        "browsers integrates"
      ],
      "category": "browser-automation"
    },
    "getrupt--ashra-mcp": {
      "owner": "getrupt",
      "name": "ashra-mcp",
      "url": "https://github.com/getrupt/ashra-mcp",
      "imageUrl": "",
      "description": "Extract structured data from any website. Just prompt and get JSON.",
      "stars": 43,
      "forks": 8,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-28T03:39:07Z",
      "readme_content": "# Ashra MCP\n\nA Model Context Protocol server for Ashra.\n\n## Usage\n\nInstall dependencies:\n\n`yarn`\n\nBuild the project:\n\n`yarn build`\n\n## Claude Configuration\n\nDownload the latest version of [Claude](https://claude.ai/download).\n\nAdd to or create the following file `claude_desktop_config.json` in `cd ~/Library/Application\\ Support/Claude`:\n\n```json\n{\n  \"mcpServers\": {\n    \"ashra\": {\n      \"command\": \"node\",\n      // OR if you're using nvm and the version picked is not preferred/working\n      // \"command\": \"/Users/<user>/.nvm/versions/node/<version>/bin/node\",\n      \"args\": [\"<path/to/ashra-mcp>/build/index.js\"],\n      \"env\": {\n        \"ASHRA_API_KEY\": \"<YOUR-API-KEY>\"\n      }\n    }\n  }\n}\n```\n\n## Troubleshooting\n\nConsult the [MCP server documentation](https://modelcontextprotocol.io/quickstart/server) for more information.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "scraping",
        "automation",
        "web",
        "browser automation",
        "automation web",
        "scraping processing"
      ],
      "category": "browser-automation"
    },
    "heehee365--MediaCrawler": {
      "owner": "heehee365",
      "name": "MediaCrawler",
      "url": "https://github.com/heehee365/MediaCrawler",
      "imageUrl": "/freedevtools/mcp/pfp/heehee365.webp",
      "description": "Scrapes data from popular social media platforms such as Xiaohongshu, Douyin, Kuaishou, Bilibili, and Weibo. Extracts videos, images, comments, likes, and shares using Playwright for efficient data collection.",
      "stars": 1,
      "forks": 0,
      "license": "Other",
      "language": "",
      "updated_at": "2025-08-25T09:59:59Z",
      "readme_content": "> **ÂÖçË¥£Â£∞ÊòéÔºö**\n> \n> Â§ßÂÆ∂ËØ∑‰ª•Â≠¶‰π†‰∏∫ÁõÆÁöÑ‰ΩøÁî®Êú¨‰ªìÂ∫ìÔºåÁà¨Ëô´ËøùÊ≥ïËøùËßÑÁöÑÊ°à‰ª∂Ôºöhttps://github.com/HiddenStrawberry/Crawler_Illegal_Cases_In_China  <br>\n>\n>Êú¨‰ªìÂ∫ìÁöÑÊâÄÊúâÂÜÖÂÆπ‰ªÖ‰æõÂ≠¶‰π†ÂíåÂèÇËÄÉ‰πãÁî®ÔºåÁ¶ÅÊ≠¢Áî®‰∫éÂïÜ‰∏öÁî®ÈÄî„ÄÇ‰ªª‰Ωï‰∫∫ÊàñÁªÑÁªá‰∏çÂæóÂ∞ÜÊú¨‰ªìÂ∫ìÁöÑÂÜÖÂÆπÁî®‰∫éÈùûÊ≥ïÁî®ÈÄîÊàñ‰æµÁäØ‰ªñ‰∫∫ÂêàÊ≥ïÊùÉÁõä„ÄÇÊú¨‰ªìÂ∫ìÊâÄÊ∂âÂèäÁöÑÁà¨Ëô´ÊäÄÊúØ‰ªÖÁî®‰∫éÂ≠¶‰π†ÂíåÁ†îÁ©∂Ôºå‰∏çÂæóÁî®‰∫éÂØπÂÖ∂‰ªñÂπ≥Âè∞ËøõË°åÂ§ßËßÑÊ®°Áà¨Ëô´ÊàñÂÖ∂‰ªñÈùûÊ≥ïË°å‰∏∫„ÄÇÂØπ‰∫éÂõ†‰ΩøÁî®Êú¨‰ªìÂ∫ìÂÜÖÂÆπËÄåÂºïËµ∑ÁöÑ‰ªª‰ΩïÊ≥ïÂæãË¥£‰ªªÔºåÊú¨‰ªìÂ∫ì‰∏çÊâøÊãÖ‰ªª‰ΩïË¥£‰ªª„ÄÇ‰ΩøÁî®Êú¨‰ªìÂ∫ìÁöÑÂÜÖÂÆπÂç≥Ë°®Á§∫ÊÇ®ÂêåÊÑèÊú¨ÂÖçË¥£Â£∞ÊòéÁöÑÊâÄÊúâÊù°Ê¨æÂíåÊù°‰ª∂„ÄÇ\n\n> ÁÇπÂáªÊü•ÁúãÊõ¥‰∏∫ËØ¶ÁªÜÁöÑÂÖçË¥£Â£∞Êòé„ÄÇ[ÁÇπÂáªË∑≥ËΩ¨](#disclaimer)\n# ‰ªìÂ∫ìÊèèËø∞\n\n**Â∞èÁ∫¢‰π¶Áà¨Ëô´**Ôºå**ÊäñÈü≥Áà¨Ëô´**Ôºå **Âø´ÊâãÁà¨Ëô´**Ôºå **BÁ´ôÁà¨Ëô´**Ôºå **ÂæÆÂçöÁà¨Ëô´**...„ÄÇ  \nÁõÆÂâçËÉΩÊäìÂèñÂ∞èÁ∫¢‰π¶„ÄÅÊäñÈü≥„ÄÅÂø´Êâã„ÄÅBÁ´ô„ÄÅÂæÆÂçöÁöÑËßÜÈ¢ë„ÄÅÂõæÁâá„ÄÅËØÑËÆ∫„ÄÅÁÇπËµû„ÄÅËΩ¨ÂèëÁ≠â‰ø°ÊÅØ„ÄÇ\n\nÂéüÁêÜÔºöÂà©Áî®[playwright](https://playwright.dev/)Êê≠Ê°•Ôºå‰øùÁïôÁôªÂΩïÊàêÂäüÂêéÁöÑ‰∏ä‰∏ãÊñáÊµèËßàÂô®ÁéØÂ¢ÉÔºåÈÄöËøáÊâßË°åJSË°®ËææÂºèËé∑Âèñ‰∏Ä‰∫õÂä†ÂØÜÂèÇÊï∞\nÈÄöËøá‰ΩøÁî®Ê≠§ÊñπÂºèÔºåÂÖçÂéª‰∫ÜÂ§çÁé∞Ê†∏ÂøÉÂä†ÂØÜJS‰ª£Á†ÅÔºåÈÄÜÂêëÈöæÂ∫¶Â§ßÂ§ßÈôç‰Ωé\n\n## ËßÜÈ¢ëÊïôÁ®ã\n> Â¶ÇÊûú‰Ω†ÊÉ≥ÂæàÂø´ÂÖ•Èó®Ëøô‰∏™È°πÁõÆÔºåÊàñËÄÖÊÉ≥‰∫ÜÂÖ∑‰ΩìÂÆûÁé∞ÂéüÁêÜÔºåÊàëÊé®Ëçê‰Ω†ÁúãÁúãËøô‰∏™ËØæÁ®ãÔºå‰ªéËÆæËÆ°Âá∫Âèë‰∏ÄÊ≠•Ê≠•Â∏¶‰Ω†Â¶Ç‰Ωï‰ΩøÁî®ÔºåÈó®ÊßõÂ§ßÂ§ßÈôç‰ΩéÔºåÂêåÊó∂‰πüÊòØÂØπÊàëÂºÄÊ∫êÁöÑÊîØÊåÅÔºåÂ¶ÇÊûú‰Ω†ËÉΩÊîØÊåÅÊàëÁöÑËØæÁ®ãÔºåÊàëÂ∞Ü‰ºöÈùûÂ∏∏ÂºÄÂøÉÔΩû<br>\n> ËØæÁ®ãÂîÆ‰ª∑ÈùûÂ∏∏ÈùûÂ∏∏ÁöÑ‰æøÂÆúÔºåÂá†ÊùØÂíñÂï°ÁöÑ‰∫ãÂÑø.<br>\n> ËØæÁ®ã‰ªãÁªçÈ£û‰π¶ÊñáÊ°£ÈìæÊé•Ôºöhttps://relakkes.feishu.cn/wiki/JUgBwdhIeiSbAwkFCLkciHdAnhh\n\n\n## ÊÑüË∞¢‰∏ãÂàóSponsorsÂØπÊú¨‰ªìÂ∫ìËµûÂä©\n<a href=\"https://sider.ai/ad-land-redirect?source=github&p1=mi&p2=kk\">ÈÄöËøáÊ≥®ÂÜåËøô‰∏™Ê¨æÂÖçË¥πÁöÑGPTÂä©ÊâãÔºåÂ∏ÆÊàëËé∑ÂèñGPT4È¢ùÂ∫¶‰Ωú‰∏∫ÊîØÊåÅ„ÄÇ‰πüÊòØÊàëÊØèÂ§©Âú®Áî®ÁöÑ‰∏ÄÊ¨æchrome AIÂä©ÊâãÊèí‰ª∂</a>\n<a href=\"https://sider.ai/ad-land-redirect?source=github&p1=mi&p2=kk\" target=\"_blank\"><img alt=\"jK8drZ2bxTg67q9\" src=\"https://s2.loli.net/2024/04/01/jK8drZ2bxTg67q9.png\" ></a>\n\nÊàê‰∏∫ËµûÂä©ËÄÖÔºåÂ±ïÁ§∫‰Ω†ÁöÑ‰∫ßÂìÅÂú®ËøôÈáåÔºåËÅîÁ≥ª‰ΩúËÄÖÔºörelakkes@gmail.com\n\n## ÂäüËÉΩÂàóË°®\n| Âπ≥Âè∞  | Cookie ÁôªÂΩï | ‰∫åÁª¥Á†ÅÁôªÂΩï | ÊâãÊú∫Âè∑ÁôªÂΩï | ÂÖ≥ÈîÆËØçÊêúÁ¥¢ | ÊåáÂÆöËßÜÈ¢ë/Â∏ñÂ≠ê ID Áà¨Âèñ | ÁôªÂΩïÁä∂ÊÄÅÁºìÂ≠ò | Êï∞ÊçÆ‰øùÂ≠ò | IP ‰ª£ÁêÜÊ±† | ÊªëÂùóÈ™åËØÅÁ†Å |\n|:---:|:---------:|:-----:|:-----:|:-----:|:-------------:|:------:|:----:|:------:|:-----:|\n| Â∞èÁ∫¢‰π¶ |     ‚úÖ     |   ‚úÖ   | ‚úÖ     |   ‚úÖ   |       ‚úÖ       |   ‚úÖ    |  ‚úÖ   |   ‚úÖ    |   ‚úï   |\n| ÊäñÈü≥  |     ‚úÖ     |   ‚úÖ   | ‚úÖ     |   ‚úÖ   |       ‚úÖ       |   ‚úÖ    |  ‚úÖ   |   ‚úÖ    |   ‚úÖ   |\n| Âø´Êâã  |     ‚úÖ     |   ‚úÖ   | ‚úï     |   ‚úÖ   |       ‚úÖ       |   ‚úÖ    |  ‚úÖ   |   ‚úÖ    |    ‚úï   |\n| B Á´ô |     ‚úÖ     |   ‚úÖ   | ‚úï     |   ‚úÖ   |       ‚úÖ       |   ‚úÖ    |  ‚úÖ   |   ‚úÖ    |   ‚úï   |\n| ÂæÆÂçö  |     ‚úÖ      |   ‚úÖ    | ‚úï     |   ‚úÖ    |       ‚úÖ        |    ‚úÖ    |   ‚úÖ   |    ‚úÖ    |   ‚úï   |\n\n\n## ‰ΩøÁî®ÊñπÊ≥ï\n\n### ÂàõÂª∫Âπ∂ÊøÄÊ¥ª python ËôöÊãüÁéØÂ¢É\n   ```shell   \n   # ËøõÂÖ•È°πÁõÆÊ†πÁõÆÂΩï\n   cd MediaCrawler\n   \n   # ÂàõÂª∫ËôöÊãüÁéØÂ¢É\n   # Ê≥®ÊÑèpython ÁâàÊú¨ÈúÄË¶Å3.7 - 3.9 \n   python -m venv venv\n   \n   # macos & linux ÊøÄÊ¥ªËôöÊãüÁéØÂ¢É\n   source venv/bin/activate\n\n   # windows ÊøÄÊ¥ªËôöÊãüÁéØÂ¢É\n   venv\\Scripts\\activate\n\n   ```\n\n### ÂÆâË£Ö‰æùËµñÂ∫ì\n\n   ```shell\n   pip3 install -r requirements.txt\n   ```\n\n### ÂÆâË£Ö playwrightÊµèËßàÂô®È©±Âä®\n\n   ```shell\n   playwright install\n   ```\n\n### ËøêË°åÁà¨Ëô´Á®ãÂ∫è\n\n   ```shell\n   # ‰ªéÈÖçÁΩÆÊñá‰ª∂‰∏≠ËØªÂèñÂÖ≥ÈîÆËØçÊêúÁ¥¢Áõ∏ÂÖ≥ÁöÑÂ∏ñÂ≠êÂπ∂Áà¨ÂèñÂ∏ñÂ≠ê‰ø°ÊÅØ‰∏éËØÑËÆ∫\n   python main.py --platform xhs --lt qrcode --type search\n   \n   # ‰ªéÈÖçÁΩÆÊñá‰ª∂‰∏≠ËØªÂèñÊåáÂÆöÁöÑÂ∏ñÂ≠êIDÂàóË°®Ëé∑ÂèñÊåáÂÆöÂ∏ñÂ≠êÁöÑ‰ø°ÊÅØ‰∏éËØÑËÆ∫‰ø°ÊÅØ\n   python main.py --platform xhs --lt qrcode --type detail\n  \n   # ÊâìÂºÄÂØπÂ∫îAPPÊâ´‰∫åÁª¥Á†ÅÁôªÂΩï\n     \n   # ÂÖ∂‰ªñÂπ≥Âè∞Áà¨Ëô´‰ΩøÁî®Á§∫‰æãÔºåÊâßË°å‰∏ãÈù¢ÁöÑÂëΩ‰ª§Êü•Áúã\n   python main.py --help    \n   ```\n\n\n### Êï∞ÊçÆ‰øùÂ≠ò\n- ÊîØÊåÅ‰øùÂ≠òÂà∞ÂÖ≥Á≥ªÂûãÊï∞ÊçÆÂ∫ìÔºàMysql„ÄÅPgSQLÁ≠âÔºâ\n- ÊîØÊåÅ‰øùÂ≠òÂà∞csv‰∏≠Ôºàdata/ÁõÆÂΩï‰∏ãÔºâ\n- ÊîØÊåÅ‰øùÂ≠òÂà∞json‰∏≠Ôºàdata/ÁõÆÂΩï‰∏ãÔºâ\n\n## MediaCrawlerÁà¨Ëô´È°πÁõÆ‰∫§ÊµÅÁæ§Ôºö\n> 7Â§©ÊúâÊïàÊúüÔºåËá™Âä®Êõ¥Êñ∞, Â¶ÇÊûú‰∫∫Êª°‰∫ÜÂèØ‰ª•Âä†‰ΩúËÄÖwxÊãâËøõÁæ§: yzglanÔºåÂ§áÊ≥®Êù•Ëá™github.\n\n<div style=\"max-width: 200px\">  \n<p></p>\n</div>\n\n\n## ÊâìËµè\nÂÖçË¥πÂºÄÊ∫ê‰∏çÊòìÔºåÂ¶ÇÊûúÈ°πÁõÆÂ∏ÆÂà∞‰Ω†‰∫ÜÔºåÂèØ‰ª•ÁªôÊàëÊâìËµèÂì¶ÔºåÊÇ®ÁöÑÊîØÊåÅÂ∞±ÊòØÊàëÊúÄÂ§ßÁöÑÂä®ÂäõÔºÅ\n<div style=\"display: flex;justify-content: space-between;width: 100%\">\n    <p></p>\n    <p></p>\n</div>\n\n## Áà¨Ëô´ÂÖ•Èó®ËØæÁ®ã\nÊàëÊñ∞ÂºÄÁöÑÁà¨Ëô´ÊïôÁ®ãGithub‰ªìÂ∫ì [CrawlerTutorial](https://github.com/NanmiCoder/CrawlerTutorial) ÔºåÊÑüÂÖ¥Ë∂£ÁöÑÊúãÂèãÂèØ‰ª•ÂÖ≥Ê≥®‰∏Ä‰∏ãÔºåÊåÅÁª≠Êõ¥Êñ∞Ôºå‰∏ªÊâì‰∏Ä‰∏™ÂÖçË¥π.\n\n\n## ËøêË°åÊä•ÈîôÂ∏∏ËßÅÈóÆÈ¢òQ&A\n> ÈÅáÂà∞ÈóÆÈ¢òÂÖàËá™Ë°åÊêúÁ¥¢Ëß£ÂÜ≥‰∏ãÔºåÁé∞Âú®AIÂæàÁÅ´ÔºåÁî®ChatGPTÂ§ßÂ§öÊÉÖÂÜµ‰∏ãËÉΩËß£ÂÜ≥‰Ω†ÁöÑÈóÆÈ¢ò [ÂÖçË¥πÁöÑChatGPT](https://sider.ai/ad-land-redirect?source=github&p1=mi&p2=kk)  \n\n‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è [Â∏∏ËßÅÈóÆÈ¢ò](docs/Â∏∏ËßÅÈóÆÈ¢ò.md)\n\n\n## È°πÁõÆ‰ª£Á†ÅÁªìÊûÑ\n‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è [È°πÁõÆ‰ª£Á†ÅÁªìÊûÑËØ¥Êòé](docs/È°πÁõÆ‰ª£Á†ÅÁªìÊûÑ.md)\n\n## ÊâãÊú∫Âè∑ÁôªÂΩïËØ¥Êòé\n‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è [ÊâãÊú∫Âè∑ÁôªÂΩïËØ¥Êòé](docs/ÊâãÊú∫Âè∑ÁôªÂΩïËØ¥Êòé.md)\n\n\n\n## star Ë∂ãÂäøÂõæ\n- Â¶ÇÊûúËØ•È°πÁõÆÂØπ‰Ω†ÊúâÂ∏ÆÂä©Ôºåstar‰∏Ä‰∏ã ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è\n\n[![Star History Chart](https://api.star-history.com/svg?repos=NanmiCoder/MediaCrawler&type=Date)](https://star-history.com/#NanmiCoder/MediaCrawler&Date)\n\n\n\n\n## ÂèÇËÄÉ\n\n- xhsÂÆ¢Êà∑Á´Ø [ReaJasonÁöÑxhs‰ªìÂ∫ì](https://github.com/ReaJason/xhs)\n- Áü≠‰ø°ËΩ¨Âèë [ÂèÇËÄÉ‰ªìÂ∫ì](https://github.com/pppscn/SmsForwarder)\n- ÂÜÖÁΩëÁ©øÈÄèÂ∑•ÂÖ∑ [ngrok](https://ngrok.com/docs/)\n\n\n\n## ÂÖçË¥£Â£∞Êòé\n<div id=\"disclaimer\"> \n\n### 1. È°πÁõÆÁõÆÁöÑ‰∏éÊÄßË¥®\nÊú¨È°πÁõÆÔºà‰ª•‰∏ãÁÆÄÁß∞‚ÄúÊú¨È°πÁõÆ‚ÄùÔºâÊòØ‰Ωú‰∏∫‰∏Ä‰∏™ÊäÄÊúØÁ†îÁ©∂‰∏éÂ≠¶‰π†Â∑•ÂÖ∑ËÄåÂàõÂª∫ÁöÑÔºåÊó®Âú®Êé¢Á¥¢ÂíåÂ≠¶‰π†ÁΩëÁªúÊï∞ÊçÆÈááÈõÜÊäÄÊúØ„ÄÇÊú¨È°πÁõÆ‰∏ìÊ≥®‰∫éËá™Â™í‰ΩìÂπ≥Âè∞ÁöÑÊï∞ÊçÆÁà¨ÂèñÊäÄÊúØÁ†îÁ©∂ÔºåÊó®Âú®Êèê‰æõÁªôÂ≠¶‰π†ËÄÖÂíåÁ†îÁ©∂ËÄÖ‰Ωú‰∏∫ÊäÄÊúØ‰∫§ÊµÅ‰πãÁî®„ÄÇ\n\n### 2. Ê≥ïÂæãÂêàËßÑÊÄßÂ£∞Êòé\nÊú¨È°πÁõÆÂºÄÂèëËÄÖÔºà‰ª•‰∏ãÁÆÄÁß∞‚ÄúÂºÄÂèëËÄÖ‚ÄùÔºâÈÉëÈáçÊèêÈÜíÁî®Êà∑Âú®‰∏ãËΩΩ„ÄÅÂÆâË£ÖÂíå‰ΩøÁî®Êú¨È°πÁõÆÊó∂Ôºå‰∏•Ê†ºÈÅµÂÆà‰∏≠Âçé‰∫∫Ê∞ëÂÖ±ÂíåÂõΩÁõ∏ÂÖ≥Ê≥ïÂæãÊ≥ïËßÑÔºåÂåÖÊã¨‰ΩÜ‰∏çÈôê‰∫é„Ää‰∏≠Âçé‰∫∫Ê∞ëÂÖ±ÂíåÂõΩÁΩëÁªúÂÆâÂÖ®Ê≥ï„Äã„ÄÅ„Ää‰∏≠Âçé‰∫∫Ê∞ëÂÖ±ÂíåÂõΩÂèçÈó¥Ë∞çÊ≥ï„ÄãÁ≠âÊâÄÊúâÈÄÇÁî®ÁöÑÂõΩÂÆ∂Ê≥ïÂæãÂíåÊîøÁ≠ñ„ÄÇÁî®Êà∑Â∫îËá™Ë°åÊâøÊãÖ‰∏ÄÂàáÂõ†‰ΩøÁî®Êú¨È°πÁõÆËÄåÂèØËÉΩÂºïËµ∑ÁöÑÊ≥ïÂæãË¥£‰ªª„ÄÇ\n\n### 3. ‰ΩøÁî®ÁõÆÁöÑÈôêÂà∂\nÊú¨È°πÁõÆ‰∏•Á¶ÅÁî®‰∫é‰ªª‰ΩïÈùûÊ≥ïÁõÆÁöÑÊàñÈùûÂ≠¶‰π†„ÄÅÈùûÁ†îÁ©∂ÁöÑÂïÜ‰∏öË°å‰∏∫„ÄÇÊú¨È°πÁõÆ‰∏çÂæóÁî®‰∫é‰ªª‰ΩïÂΩ¢ÂºèÁöÑÈùûÊ≥ï‰æµÂÖ•‰ªñ‰∫∫ËÆ°ÁÆóÊú∫Á≥ªÁªüÔºå‰∏çÂæóÁî®‰∫é‰ªª‰Ωï‰æµÁäØ‰ªñ‰∫∫Áü•ËØÜ‰∫ßÊùÉÊàñÂÖ∂‰ªñÂêàÊ≥ïÊùÉÁõäÁöÑË°å‰∏∫„ÄÇÁî®Êà∑Â∫î‰øùËØÅÂÖ∂‰ΩøÁî®Êú¨È°πÁõÆÁöÑÁõÆÁöÑÁ∫ØÂ±û‰∏™‰∫∫Â≠¶‰π†ÂíåÊäÄÊúØÁ†îÁ©∂Ôºå‰∏çÂæóÁî®‰∫é‰ªª‰ΩïÂΩ¢ÂºèÁöÑÈùûÊ≥ïÊ¥ªÂä®„ÄÇ\n\n### 4. ÂÖçË¥£Â£∞Êòé\nÂºÄÂèëËÄÖÂ∑≤Â∞ΩÊúÄÂ§ßÂä™ÂäõÁ°Æ‰øùÊú¨È°πÁõÆÁöÑÊ≠£ÂΩìÊÄßÂèäÂÆâÂÖ®ÊÄßÔºå‰ΩÜ‰∏çÂØπÁî®Êà∑‰ΩøÁî®Êú¨È°πÁõÆÂèØËÉΩÂºïËµ∑ÁöÑ‰ªª‰ΩïÂΩ¢ÂºèÁöÑÁõ¥Êé•ÊàñÈó¥Êé•ÊçüÂ§±ÊâøÊãÖË¥£‰ªª„ÄÇÂåÖÊã¨‰ΩÜ‰∏çÈôê‰∫éÁî±‰∫é‰ΩøÁî®Êú¨È°πÁõÆËÄåÂØºËá¥ÁöÑ‰ªª‰ΩïÊï∞ÊçÆ‰∏¢Â§±„ÄÅËÆæÂ§áÊçüÂùè„ÄÅÊ≥ïÂæãËØâËÆºÁ≠â„ÄÇ\n\n### 5. Áü•ËØÜ‰∫ßÊùÉÂ£∞Êòé\nÊú¨È°πÁõÆÁöÑÁü•ËØÜ‰∫ßÊùÉÂΩíÂºÄÂèëËÄÖÊâÄÊúâ„ÄÇÊú¨È°πÁõÆÂèóÂà∞Ëëó‰ΩúÊùÉÊ≥ïÂíåÂõΩÈôÖËëó‰ΩúÊùÉÊù°Á∫¶‰ª•ÂèäÂÖ∂‰ªñÁü•ËØÜ‰∫ßÊùÉÊ≥ïÂæãÂíåÊù°Á∫¶ÁöÑ‰øùÊä§„ÄÇÁî®Êà∑Âú®ÈÅµÂÆàÊú¨Â£∞ÊòéÂèäÁõ∏ÂÖ≥Ê≥ïÂæãÊ≥ïËßÑÁöÑÂâçÊèê‰∏ãÔºåÂèØ‰ª•‰∏ãËΩΩÂíå‰ΩøÁî®Êú¨È°πÁõÆ„ÄÇ\n\n### 6. ÊúÄÁªàËß£ÈáäÊùÉ\nÂÖ≥‰∫éÊú¨È°πÁõÆÁöÑÊúÄÁªàËß£ÈáäÊùÉÂΩíÂºÄÂèëËÄÖÊâÄÊúâ„ÄÇÂºÄÂèëËÄÖ‰øùÁïôÈöèÊó∂Êõ¥ÊîπÊàñÊõ¥Êñ∞Êú¨ÂÖçË¥£Â£∞ÊòéÁöÑÊùÉÂà©ÔºåÊÅï‰∏çÂè¶Ë°åÈÄöÁü•„ÄÇ\n</div>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "scraping",
        "mediacrawler",
        "web",
        "mediacrawler scrapes",
        "browser automation",
        "scraping processing"
      ],
      "category": "browser-automation"
    },
    "hetaoBackend--mcp-pyautogui-server": {
      "owner": "hetaoBackend",
      "name": "mcp-pyautogui-server",
      "url": "https://github.com/hetaoBackend/mcp-pyautogui-server",
      "imageUrl": "/freedevtools/mcp/pfp/hetaoBackend.webp",
      "description": "Control mouse movements, simulate keyboard input, and capture screenshots for automated GUI testing across multiple platforms, including Windows, macOS, and Linux.",
      "stars": 27,
      "forks": 9,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-01T12:42:30Z",
      "readme_content": "# mcp-pyautogui-server\n\n[![smithery badge](https://smithery.ai/badge/@hetaoBackend/mcp-pyautogui-server)](https://smithery.ai/server/@hetaoBackend/mcp-pyautogui-server)\n\nA MCP (Model Context Protocol) server that provides automated GUI testing and control capabilities through PyAutoGUI.\n\n## Features\n\n* Control mouse movements and clicks\n* Simulate keyboard input\n* Take screenshots\n* Find images on screen\n* Get screen information\n* Cross-platform support (Windows, macOS, Linux)\n\n## Tools\n\nThe server implements the following tools:\n\n### Mouse Control\n* Move mouse to specific coordinates\n* Click at current or specified position\n* Drag and drop operations\n* Get current mouse position\n\n### Keyboard Control  \n* Type text\n* Press individual keys\n* Hotkey combinations\n\n### Screen Operations\n* Take screenshots\n* Get screen size\n* Find image locations on screen\n* Get pixel colors\n\n## Installation\n\n### Prerequisites\n\n* Python 3.12+\n* PyAutoGUI\n* Other dependencies will be installed automatically\n\n### Install Steps\n\nInstall the package:\n\n```bash\npip install mcp-pyautogui-server\n```\n\n### Claude Desktop Configuration\n\nOn MacOS:\n```bash\n~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\nOn Windows:\n```bash\n%APPDATA%/Claude/claude_desktop_config.json\n```\n\nDevelopment/Unpublished Servers Configuration:\n```json\n{\n  \"mcpServers\": {\n    \"mcp-pyautogui-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/mcp-pyautogui-server\",\n        \"run\",\n        \"mcp-pyautogui-server\"\n      ]\n    }\n  }\n}\n```\n\nPublished Servers Configuration:\n```json\n{\n  \"mcpServers\": {\n    \"mcp-pyautogui-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-pyautogui-server\"\n      ]\n    }\n  }\n}\n```\n\n## Development\n\n### Building and Publishing\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: Set PyPI credentials via environment variables or command flags:\n* Token: `--token` or `UV_PUBLISH_TOKEN`\n* Username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nFor the best debugging experience, use the MCP Inspector.\n\nLaunch the MCP Inspector via npm:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /path/to/mcp-pyautogui-server run mcp-pyautogui-server\n```\n\nThe Inspector will display a URL that you can access in your browser to begin debugging.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "browser",
        "automated",
        "browser automation",
        "automation web",
        "automated gui"
      ],
      "category": "browser-automation"
    },
    "iiiusky--mcp-playwright": {
      "owner": "iiiusky",
      "name": "mcp-playwright",
      "url": "https://github.com/iiiusky/mcp-playwright",
      "imageUrl": "/freedevtools/mcp/pfp/iiiusky.webp",
      "description": "Automates browser interactions by taking screenshots, generating test code, and executing JavaScript in real browser environments. Enables interaction with web pages and facilitates web scraping.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-04-14T05:51:25Z",
      "readme_content": "# Playwright MCP Server üé≠\n\n[![smithery badge](https://smithery.ai/badge/@executeautomation/playwright-mcp-server)](https://smithery.ai/server/@executeautomation/playwright-mcp-server)\n\nA Model Context Protocol server that provides browser automation capabilities using Playwright. This server enables LLMs to interact with web pages, take screenshots, generate test code, web scraps the page and execute JavaScript in a real browser environment.\n\n<a href=\"https://glama.ai/mcp/servers/yh4lgtwgbe\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/yh4lgtwgbe/badge\" alt=\"mcp-playwright MCP server\" /></a>\n\n## Screenshot\n\n\n## [Documentation](https://executeautomation.github.io/mcp-playwright/) | [API reference](https://executeautomation.github.io/mcp-playwright/docs/playwright-web/Supported-Tools)\n\n## Installation\n\nYou can install the package using either npm, mcp-get, or Smithery:\n\nUsing npm:\n```bash\nnpm install -g @executeautomation/playwright-mcp-server\n```\n\nUsing mcp-get:\n```bash\nnpx @michaellatman/mcp-get@latest install @executeautomation/playwright-mcp-server\n```\nUsing Smithery\n\nTo install Playwright MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@executeautomation/playwright-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @executeautomation/playwright-mcp-server --client claude\n```\n#### Installation in VS Code\n\nInstall the Playwright MCP server in VS Code using one of these buttons:\n\n<!--\n// Generate using?:\nconst config = JSON.stringify({ name: 'playwright', command: 'npx', args: [\"-y\", \"@executeautomation/playwright-mcp-server\"] });\nconst urlForWebsites = `vscode:mcp/install?${encodeURIComponent(config)}`;\n// Github markdown does not allow linking to `vscode:` directly, so you can use our redirect:\nconst urlForGithub = `https://insiders.vscode.dev/redirect?url=${encodeURIComponent(urlForWebsites)}`;\n-->\n\n[<img alt=\"Install in VS Code Insiders\" src=\"https://img.shields.io/badge/VS_Code_Insiders-VS_Code_Insiders?style=flat-square&label=Install%20Server&color=24bfa5\">](https://insiders.vscode.dev/redirect?url=vscode-insiders%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522%2540executeautomation%252Fplaywright-mcp-server%2522%255D%257D)\n\nAlternatively, you can install the Playwright MCP server using the VS Code CLI:\n\n```bash\n# For VS Code\ncode --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@executeautomation/playwright-mcp-server\"]}'\n```\n\n```bash\n# For VS Code Insiders\ncode-insiders --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@executeautomation/playwright-mcp-server\"]}'\n```\n\nAfter installation, the ExecuteAutomation Playwright MCP server will be available for use with your GitHub Copilot agent in VS Code.\n\n## Configuration to use Playwright Server\nHere's the Claude Desktop configuration to use the Playwright server:\n\n```json\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@executeautomation/playwright-mcp-server\"]\n    }\n  }\n}\n```\n\n## Testing\n\nThis project uses Jest for testing. The tests are located in the `src/__tests__` directory.\n\n### Running Tests\n\nYou can run the tests using one of the following commands:\n\n```bash\n# Run tests using the custom script (with coverage)\nnode run-tests.cjs\n\n# Run tests using npm scripts\nnpm test           # Run tests without coverage\nnpm run test:coverage  # Run tests with coverage\nnpm run test:custom    # Run tests with custom script (same as node run-tests.cjs)\n```\n\nThe test coverage report will be generated in the `coverage` directory.\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=executeautomation/mcp-playwright&type=Date)](https://star-history.com/#executeautomation/mcp-playwright&Date)",
      "npm_url": "https://www.npmjs.com/package/mcp-playwright",
      "npm_downloads": 1667,
      "keywords": [
        "automation",
        "browser",
        "javascript",
        "browser automation",
        "automates browser",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "imprvhub--mcp-browser-agent": {
      "owner": "imprvhub",
      "name": "mcp-browser-agent",
      "url": "https://github.com/imprvhub/mcp-browser-agent",
      "imageUrl": "/freedevtools/mcp/pfp/imprvhub.webp",
      "description": "Facilitates autonomous browser automation and API interaction, enabling navigation of web pages, manipulation of DOM elements, and execution of JavaScript. It supports features like persistent browser sessions, HTTP requests, and detailed logging for complex web task automation.",
      "stars": 23,
      "forks": 5,
      "license": "Mozilla Public License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-09-24T08:46:04Z",
      "readme_content": "# MCP Browser Agent\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/imprvhub/mcp-browser-agent)](https://archestra.ai/mcp-catalog/imprvhub__mcp-browser-agent)\n[![smithery badge](https://smithery.ai/badge/@imprvhub/mcp-browser-agent)](https://smithery.ai/server/@imprvhub/mcp-browser-agent)\n\n<table style=\"border-collapse: collapse; width: 100%; table-layout: fixed;\">\n<tr>\n<td style=\"width: 40%; padding: 15px; vertical-align: middle; border: none;\">A powerful Model Context Protocol (MCP) integration that provides Claude Desktop with autonomous browser automation capabilities.</td>\n<td style=\"width: 60%; padding: 0; vertical-align: middle; border: none; min-width: 300px; text-align: center;\"><a href=\"https://glama.ai/mcp/servers/@imprvhub/mcp-browser-agent\">\n  <img style=\"max-width: 100%; height: auto; min-width: 300px;\" src=\"https://glama.ai/mcp/servers/@imprvhub/mcp-browser-agent/badge\" alt=\"Browser Agent MCP server\" />\n</a></td>\n</tr>\n</table>\n\n## Features\n\n- **Advanced Browser Automation**\n  - Navigate to any URL with customizable load strategies\n  - Capture full-page or element-specific screenshots\n  - Perform precise DOM interactions (click, fill, select, hover)\n  - Execute arbitrary JavaScript in browser context with console logs capture\n\n- **Powerful API Client**\n  - Execute HTTP requests (GET, POST, PUT, PATCH, DELETE)\n  - Configure request headers and body content\n  - Process response data with JSON formatting\n  - Error handling with detailed feedback\n\n- **MCP Resource Management**\n  - Access browser console logs as resources\n  - Retrieve screenshots through MCP resource interface\n  - Persistent session with headful browser instance\n\n- **AI Agent Capabilities**\n  - Chain multiple browser operations for complex tasks\n  - Follow multi-step instructions with intelligent error recovery\n  - Technical task automation through natural language instructions\n\n## Demo\n\n<p>\n  <a href=\"https://www.youtube.com/watch?v=0lMsKiTy7TE\">\n    \n  </a>\n</p>\n\n<details>\n<summary> Timestamps: </summary>\n\nClick on any timestamp to jump to that section of the video\n\n[**00:00**](https://www.youtube.com/watch?v=0lMsKiTy7TE&t=0s) - **Google Search for MCP**  \nNavigation to Google homepage and search for \"Model Context Protocol\". Demonstration of Claude Desktop using the MCP integration to perform a basic web search and process the results.\n\n[**00:33**](https://www.youtube.com/watch?v=0lMsKiTy7TE&t=33s) - **Screenshot Capture**  \nTaking a screenshot of the search results with a custom filename and showcasing it in Finder. Shows how Claude can capture and save visual content from web pages during browser automation.\n\n[**01:00**](https://www.youtube.com/watch?v=0lMsKiTy7TE&t=60s) - **Wikipedia Search**  \nNavigation to Wikipedia.org and search for \"Model Context Protocol\". Illustrates Claude's ability to interact with different websites and their search functionality through the MCP integration.\n\n[**01:38**](https://www.youtube.com/watch?v=0lMsKiTy7TE&t=98s) - **Dropdown Menu Interaction I**  \nNavigation to a test website (the-internet.herokuapp.com/dropdown) and selection of \"Option 1\" from a dropdown menu. Demonstrates Claude's capability to interact with form elements and make selections.\n\n[**01:56**](https://www.youtube.com/watch?v=0lMsKiTy7TE&t=116s) - **Dropdown Menu Interaction II**  \nChanging the selection to \"Option 2\" from the same dropdown menu. Shows Claude's ability to manipulate the same form element multiple times and make different selections.\n\n[**02:09**](https://www.youtube.com/watch?v=0lMsKiTy7TE&t=129s) - **Login Form Completion**  \nNavigation to a login page (the-internet.herokuapp.com/login) and filling in the username field with \"tomsmith\" and password field with \"SuperSecretPassword!\". Demonstrates form filling automation.\n\n[**02:28**](https://www.youtube.com/watch?v=0lMsKiTy7TE&t=148s) - **Login Submission**  \nSubmitting the login credentials and completing the authentication process. Shows Claude's ability to trigger form submissions and navigate through multi-step processes.\n\n[**02:36**](https://www.youtube.com/watch?v=0lMsKiTy7TE&t=156s) - **API Request Execution**  \nPerforming a GET request to JSONPlaceholder API endpoint. Demonstrates Claude's capability to make direct API calls and process the returned data through the MCP integration.\n</details>\n\n## Requirements\n\n- Node.js 16 or higher\n- Claude Desktop\n- Playwright dependencies\n\n### Browser Support\n\n```bash\nnpm init playwright@latest\n```\n\nThis package includes Playwright and the necessary dependencies for running browser automation. When you run `npm install`, the required Playwright dependencies will be installed. The package supports the following browsers:\n\n- Chrome (default)\n- Firefox\n- Microsoft Edge\n- WebKit (Safari engine)\n\nWhen you first use a browser type, Playwright will automatically install the corresponding browser drivers as needed. You can also install them manually with the following commands:\n\n```\nnpx playwright install chrome\nnpx playwright install firefox\nnpx playwright install webkit\nnpx playwright install msedge\n```\n\n> **Note about Safari**: Playwright doesn't provide direct support for Safari browser. Instead, it uses WebKit, which is the browser engine that powers Safari.\n>\n> **Note about Edge**: When selecting Edge as the browser type, the agent will actually launch Microsoft Edge (not Chromium). Technically, in Playwright, Edge is launched using the Chromium browser instance with the 'msedge' channel parameter because Microsoft Edge is based on Chromium.\n## Installation\n\n### Installing Manually\n1. Clone or download this repository:\n```\ngit clone https://github.com/imprvhub/mcp-browser-agent\ncd mcp-browser-agent\n```\n\n2. Install dependencies:\n```\nnpm install\n```\n\n3. Build the project:\n```\nnpm run build\n```\n\n## Running the MCP Server\n\nThere are two ways to run the MCP server:\n\n### Option 1: Running manually\n\n1. Open a terminal or command prompt\n2. Navigate to the project directory\n3. Run the server directly:\n\n```\nnode dist/index.js\n```\n\nKeep this terminal window open while using Claude Desktop. The server will run until you close the terminal.\n\n### Option 2: Auto-starting with Claude Desktop (recommended for regular use)\n\nThe Claude Desktop can automatically start the MCP server when needed. To set this up:\n\n#### Configuration\n\nThe Claude Desktop configuration file is located at:\n\n- **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n- **Linux**: `~/.config/Claude/claude_desktop_config.json`\n\nEdit this file to add the Browser Agent MCP configuration. If the file doesn't exist, create it:\n\n```json\n{\n  \"mcpServers\": {\n    \"browserAgent\": {\n      \"command\": \"node\",\n      \"args\": [\"ABSOLUTE_PATH_TO_DIRECTORY/mcp-browser-agent/dist/index.js\",\n      \"--browser\",\n      \"chrome\"\n    ]\n    }\n  }\n}\n```\n\n**Important**: Replace `ABSOLUTE_PATH_TO_DIRECTORY` with the **complete absolute path** where you installed the MCP\n  - macOS/Linux example: `/Users/username/mcp-browser-agent`\n  - Windows example: `C:\\\\Users\\\\username\\\\mcp-browser-agent`\n\nIf you already have other MCPs configured, simply add the \"browserAgent\" section inside the \"mcpServers\" object. Here's an example of a configuration with multiple MCPs:\n\n```json\n{\n  \"mcpServers\": {\n    \"otherMcp1\": {\n      \"command\": \"...\",\n      \"args\": [\"...\"]\n    },\n    \"otherMcp2\": {\n      \"command\": \"...\",\n      \"args\": [\"...\"]\n    },\n    \"browserAgent\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"ABSOLUTE_PATH_TO_DIRECTORY/mcp-browser-agent/dist/index.js\",\n      \"--browser\",\n      \"chrome\"\n    ]\n    }\n  }\n}\n```\n\n## Browser Selection\n\nThe MCP Browser Agent supports multiple browser types. By default, it uses Chrome, but you can specify a different browser in several ways:\n\n### Option 1: Configuration File\n\nCreate or edit the file `.mcp_browser_agent_config.json` in your home directory:\n\n```json\n{\n  \"browserType\": \"chrome\"\n}\n```\n\nSupported values for `browserType` are:\n- `chrome` - Uses installed Chrome (default)\n- `firefox` - Uses Firefox 'Nightly' browser\n- `webkit` - Uses WebKit engine (Note: This is not Safari itself but the WebKit rendering engine that powers Safari)\n- `edge` - Uses Microsoft Edge\n\n> **Note about Safari**: Playwright doesn't provide direct support for Safari browser. Instead, it uses WebKit, which is the browser engine that powers Safari. The WebKit implementation in Playwright provides similar functionality but is not identical to the Safari browser experience.\n\n### Option 2: Command Line Argument\n\nWhen starting the MCP server manually, you can specify the browser type:\n\n```\nnode dist/index.js --browser firefox\n```\n\n### Option 3: Environment Variable\n\nSet the `MCP_BROWSER_TYPE` environment variable:\n\n```\nMCP_BROWSER_TYPE=firefox node dist/index.js\n```\n\n### Option 4: Claude Desktop Configuration\n\nWhen configuring the MCP in Claude Desktop's `claude_desktop_config.json`, you can specify the browser type:\n\n```json\n{\n  \"mcpServers\": {\n    \"browserAgent\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"ABSOLUTE_PATH_TO_DIRECTORY/mcp-browser-agent/dist/index.js\",\n        \"--browser\",\n        \"chrome\"\n      ]\n    }\n  }\n}\n```\n\n## Technical Implementation\n\nMCP Browser Agent is built on the Model Context Protocol, enabling Claude to interact with a headful browser through Playwright. The implementation consists of four main components:\n\n1. **Server (index.ts)**\n   - Initializes the MCP server with Model Context Protocol standard protocol\n   - Configures server capabilities for tools and resources\n   - Establishes communication with Claude through the stdio transport\n\n2. **Tools Registry (tools.ts)**\n   - Defines browser and API tool schemas\n   - Specifies parameters, validation rules, and descriptions\n   - Registers tools with the MCP server for Claude's discovery\n\n3. **Request Handlers (handlers.ts)**\n   - Manages MCP protocol requests for tools and resources\n   - Exposes browser logs and screenshots as queryable resources\n   - Routes tool execution requests to the appropriate handlers\n\n4. **Executor (executor.ts)**\n   - Manages browser and API client lifecycle\n   - Implements browser automation functions using Playwright\n   - Handles API requests with proper error handling and response parsing\n   - Maintains stateful browser session between commands\n\n### Agent Capabilities\n\nUnlike basic integrations, MCP Browser Agent functions as a true AI agent by:\n\n- Maintaining persistent browser state across multiple commands\n- Capturing detailed console logs for debugging\n- Storing screenshots for reference and review\n- Managing complex interaction sequences\n- Providing detailed error information for recovery\n- Supporting chained operations for complex workflows\n\n## Available Tools\n\n### Browser Tools\n\n| Tool Name | Description | Parameters |\n|-----------|-------------|------------|\n| `browser_navigate` | Navigate to a URL | `url` (required), `timeout`, `waitUntil` |\n| `browser_screenshot` | Capture screenshot | `name` (required), `selector`, `fullPage`, `mask`, `savePath` |\n| `browser_click` | Click element | `selector` (required) |\n| `browser_fill` | Fill form input | `selector` (required), `value` (required) |\n| `browser_select` | Select dropdown option | `selector` (required), `value` (required) |\n| `browser_hover` | Hover over element | `selector` (required) |\n| `browser_evaluate` | Execute JavaScript | `script` (required) |\n\n### API Tools\n\n| Tool Name | Description | Parameters |\n|-----------|-------------|------------|\n| `api_get` | GET request | `url` (required), `headers` |\n| `api_post` | POST request | `url` (required), `data` (required), `headers` |\n| `api_put` | PUT request | `url` (required), `data` (required), `headers` |\n| `api_patch` | PATCH request | `url` (required), `data` (required), `headers` |\n| `api_delete` | DELETE request | `url` (required), `headers` |\n\n## Resource Access\n\nThe MCP Browser Agent exposes the following resources:\n\n- `browser://logs` - Access browser console logs\n- `screenshot://[name]` - Access screenshots by name\n\n\n## Example Usage\n\nHere are some realistic examples of how to use the MCP Browser Agent with Claude:\n\n### Basic Browser Navigation\n\n```\nNavigate to the Google homepage at https://www.google.com\n```\n\n```\nTake a screenshot of the current page and name it \"google-homepage\"\n```\n\n```\nType \"weather forecast\" in the search box\n```\n\n### Simple Interactions\n\n```\nNavigate to https://www.wikipedia.org and search for \"Model Context Protocol\"\n```\n\n```\nGo to https://the-internet.herokuapp.com/dropdown and select the option \"Option 1\" from the dropdown\n```\n\n### Basic Form Filling\n\n```\nNavigate to https://the-internet.herokuapp.com/login and fill in the username field with \"tomsmith\" and the password field with \"SuperSecretPassword!\"\n```\n\n```\nGo to https://the-internet.herokuapp.com/login, fill in the username and password fields, then click the login button\n```\n\n### Simple JavaScript Execution\n\n```\nGo to https://example.com and execute a JavaScript script to return the page title\n```\n\n```\nNavigate to https://www.google.com and execute a JavaScript script to count the number of links on the page\n```\n\n### Basic API Requests\n\n```\nPerform a GET request to https://jsonplaceholder.typicode.com/todos/1\n```\n\n```\nMake a POST request to https://jsonplaceholder.typicode.com/posts with appropriate JSON data\n```\n\nThese examples represent the actual capabilities of the MCP Browser Agent and are more realistic about what it can accomplish in its current state.\n\n## Troubleshooting\n\n### \"Server disconnected\" error\nIf you see the error \"MCP Browser Agent: Server disconnected\" in Claude Desktop:\n\n1. **Verify the server is running**:\n   - Open a terminal and manually run `node dist/index.js` from the project directory\n   - If the server starts successfully, use Claude while keeping this terminal open\n\n2. **Check your configuration**:\n   - Ensure the absolute path in `claude_desktop_config.json` is correct for your system\n   - Double-check that you've used double backslashes (`\\\\`) for Windows paths\n   - Verify you're using the complete path from the root of your filesystem\n\n### Browser not appearing\nIf the browser doesn't launch or you don't see it:\n\n1. **Check if the specified browser is installed**\n   - Verify that you have the browser (Chrome, Firefox, Edge, or Safari/WebKit) installed on your system\n   - The browser drivers are handled automatically by Playwright\n\n2. **Restart the server and Claude Desktop**\n   - Kill any existing node processes that might be running the server\n   - Restart Claude Desktop to establish a fresh connection\n\n### Browser process not closing properly\nThere are known issues with Chromium and Chrome browsers where the process sometimes doesn't terminate properly after use. If you experience this issue:\n\n1. **Manually close the browser process**:\n   - **Windows**: Press Ctrl+Shift+Esc to open Task Manager, find the Chrome/Chromium process and end it\n   - **macOS**: Open Activity Monitor (Applications > Utilities > Activity Monitor), find the Chrome/Chromium process and click the X to terminate it\n   - **Linux**: Run `ps aux | grep chrome` or `ps aux | grep chromium` to find the process, then `kill <PID>` to terminate it\n\n2. **Note about browser compatibility**:\n   - This issue has been observed primarily with Chromium and Chrome\n   - Firefox and Playwright's built-in browser don't typically experience this problem\n\n> [!CAUTION]\n> This MCP integration is built on Playwright, which has known issues and bugs that may affect its operation. Please report any issues you encounter with the browser automation to [Playwright's GitHub issues](https://github.com/microsoft/playwright/issues). The Playwright team is continuously working to address these issues, but this agent provides a foundation for browser automation capabilities with Claude Desktop despite these limitations.\n\n## Development\n\n### Project Structure\n\n- `src/index.ts`: Main entry point and MCP server initialization\n- `src/tools.ts`: Tool schemas and registration\n- `src/handlers.ts`: MCP request handlers for tools and resources\n- `src/executor.ts`: Tool implementation logic using Playwright\n\n### Building\n\n```\nnpm run build\n```\n\n### Watching for Changes\n\n```\nnpm run watch\n```\n\n## Testing\n\nThe project includes tests to verify core functionality and browser handling.\n\n```\nnpm test               # Run tests\nnpm run test:watch     # Watch mode\nnpm run test:coverage  # Coverage report\n```\n\nTests verify configuration integrity, browser automation features, error handling, and process cleanup. The test suite focuses particularly on ensuring proper handling of browser processes due to known issues with Chrome/Chromium termination.\n\n## Security Considerations\n\n> [!IMPORTANT]\n> This MCP integration provides Claude with autonomous browser control capabilities. Please review our [Security Policy](SECURITY.md) for important information about prohibited uses, security implications, and best practices.\n\nThe MCP Browser Agent is designed for legitimate automation tasks but could potentially be misused. Users are responsible for ensuring their use complies with all applicable laws, terms of service, and ethical guidelines. See our detailed [Security Policy](SECURITY.md) for more information.\n\n## Contributing\n\nContributions to the MCP Browser Agent are welcome! Here are some areas where you can help:\n\n- Adding new browser automation capabilities\n- Improving error handling and recovery\n- Enhancing screenshot and resource management\n- Creating useful workflows and examples\n- Optimizing performance for complex operations\n\n## License\n\nThis project is licensed under the Mozilla Public License 2.0 - see the [LICENSE](https://github.com/imprvhub/mcp-browser-agent/blob/main/LICENSE) file for details.\n\n## Related Links\n\n- [Model Context Protocol](https://modelcontextprotocol.io/)\n- [Claude Desktop](https://claude.ai/download)\n- [Playwright Documentation](https://playwright.dev/docs/intro)\n- [MCP Series](https://github.com/mcp-series)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "browser",
        "imprvhub",
        "browser automation",
        "browser agent",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "jae-jae--fetcher-mcp": {
      "owner": "jae-jae",
      "name": "fetcher-mcp",
      "url": "https://github.com/jae-jae/fetcher-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/jae-jae.webp",
      "description": "Fetch web page content using a headless browser, capable of executing JavaScript to handle dynamic web pages and modern web applications. Extracts the main content intelligently using a Readability algorithm and supports output in both HTML and Markdown formats.",
      "stars": 879,
      "forks": 71,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T02:55:44Z",
      "readme_content": "<div align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/jae-jae/fetcher-mcp/refs/heads/main/icon.svg\" width=\"100\" height=\"100\" alt=\"Fetcher MCP Icon\" />\n</div>\n\n[‰∏≠Êñá](https://www.readme-i18n.com/jae-jae/fetcher-mcp?lang=zh) |\n[Deutsch](https://www.readme-i18n.com/jae-jae/fetcher-mcp?lang=de) |\n[Espa√±ol](https://www.readme-i18n.com/jae-jae/fetcher-mcp?lang=es) |\n[fran√ßais](https://www.readme-i18n.com/jae-jae/fetcher-mcp?lang=fr) |\n[Êó•Êú¨Ë™û](https://www.readme-i18n.com/jae-jae/fetcher-mcp?lang=ja) |\n[ÌïúÍµ≠Ïñ¥](https://www.readme-i18n.com/jae-jae/fetcher-mcp?lang=ko) |\n[Portugu√™s](https://www.readme-i18n.com/jae-jae/fetcher-mcp?lang=pt) |\n[–†—É—Å—Å–∫–∏–π](https://www.readme-i18n.com/jae-jae/fetcher-mcp?lang=ru)\n\n# Fetcher MCP\n\nMCP server for fetch web page content using Playwright headless browser.\n\n> üåü **Recommended**: [OllaMan](https://ollaman.com/) - Powerful Ollama AI Model Manager.\n\n## Advantages\n\n- **JavaScript Support**: Unlike traditional web scrapers, Fetcher MCP uses Playwright to execute JavaScript, making it capable of handling dynamic web content and modern web applications.\n\n- **Intelligent Content Extraction**: Built-in Readability algorithm automatically extracts the main content from web pages, removing ads, navigation, and other non-essential elements.\n\n- **Flexible Output Format**: Supports both HTML and Markdown output formats, making it easy to integrate with various downstream applications.\n\n- **Parallel Processing**: The `fetch_urls` tool enables concurrent fetching of multiple URLs, significantly improving efficiency for batch operations.\n\n- **Resource Optimization**: Automatically blocks unnecessary resources (images, stylesheets, fonts, media) to reduce bandwidth usage and improve performance.\n\n- **Robust Error Handling**: Comprehensive error handling and logging ensure reliable operation even when dealing with problematic web pages.\n\n- **Configurable Parameters**: Fine-grained control over timeouts, content extraction, and output formatting to suit different use cases.\n\n## Quick Start\n\nRun directly with npx:\n\n```bash\nnpx -y fetcher-mcp\n```\n\nFirst time setup - install the required browser by running the following command in your terminal:\n\n```bash\nnpx playwright install chromium\n```\n\n### HTTP and SSE Transport\n\nUse the `--transport=http` parameter to start both Streamable HTTP endpoint and SSE endpoint services simultaneously:\n\n```bash\nnpx -y fetcher-mcp --log --transport=http --host=0.0.0.0 --port=3000\n```\n\nAfter startup, the server provides the following endpoints:\n\n- `/mcp` - Streamable HTTP endpoint (modern MCP protocol)\n- `/sse` - SSE endpoint (legacy MCP protocol)\n\nClients can choose which method to connect based on their needs.\n\n### Debug Mode\n\nRun with the `--debug` option to show the browser window for debugging:\n\n```bash\nnpx -y fetcher-mcp --debug\n```\n\n## Configuration MCP\n\nConfigure this MCP server in Claude Desktop:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"fetcher\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"fetcher-mcp\"]\n    }\n  }\n}\n```\n\n## Docker Deployment\n\n### Running with Docker\n\n```bash\ndocker run -p 3000:3000 ghcr.io/jae-jae/fetcher-mcp:latest\n```\n\n### Deploying with Docker Compose\n\nCreate a `docker-compose.yml` file:\n\n```yaml\nversion: \"3.8\"\n\nservices:\n  fetcher-mcp:\n    image: ghcr.io/jae-jae/fetcher-mcp:latest\n    container_name: fetcher-mcp\n    restart: unless-stopped\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n    # Using host network mode on Linux hosts can improve browser access efficiency\n    # network_mode: \"host\"\n    volumes:\n      # For Playwright, may need to share certain system paths\n      - /tmp:/tmp\n    # Health check\n    healthcheck:\n      test: [\"CMD\", \"wget\", \"--spider\", \"-q\", \"http://localhost:3000\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n```\n\nThen run:\n\n```bash\ndocker-compose up -d\n```\n\n## Features\n\n- `fetch_url` - Retrieve web page content from a specified URL\n\n  - Uses Playwright headless browser to parse JavaScript\n  - Supports intelligent extraction of main content and conversion to Markdown\n  - Supports the following parameters:\n    - `url`: The URL of the web page to fetch (required parameter)\n    - `timeout`: Page loading timeout in milliseconds, default is 30000 (30 seconds)\n    - `waitUntil`: Specifies when navigation is considered complete, options: 'load', 'domcontentloaded', 'networkidle', 'commit', default is 'load'\n    - `extractContent`: Whether to intelligently extract the main content, default is true\n    - `maxLength`: Maximum length of returned content (in characters), default is no limit\n    - `returnHtml`: Whether to return HTML content instead of Markdown, default is false\n    - `waitForNavigation`: Whether to wait for additional navigation after initial page load (useful for sites with anti-bot verification), default is false\n    - `navigationTimeout`: Maximum time to wait for additional navigation in milliseconds, default is 10000 (10 seconds)\n    - `disableMedia`: Whether to disable media resources (images, stylesheets, fonts, media), default is true\n    - `debug`: Whether to enable debug mode (showing browser window), overrides the --debug command line flag if specified\n\n- `fetch_urls` - Batch retrieve web page content from multiple URLs in parallel\n  - Uses multi-tab parallel fetching for improved performance\n  - Returns combined results with clear separation between webpages\n  - Supports the following parameters:\n    - `urls`: Array of URLs to fetch (required parameter)\n    - Other parameters are the same as `fetch_url`\n\n- `browser_install` - Install Playwright Chromium browser binary automatically\n\n  - Installs required Chromium browser binary when not available\n  - Automatically suggested when browser installation errors occur\n  - Supports the following parameters:\n    - `withDeps`: Install system dependencies required by Chromium browser, default is false\n    - `force`: Force installation even if Chromium is already installed, default is false\n\n## Tips\n\n### Handling Special Website Scenarios\n\n#### Dealing with Anti-Crawler Mechanisms\n\n- **Wait for Complete Loading**: For websites using CAPTCHA, redirects, or other verification mechanisms, include in your prompt:\n\n  ```\n  Please wait for the page to fully load\n  ```\n\n  This will use the `waitForNavigation: true` parameter.\n\n- **Increase Timeout Duration**: For websites that load slowly:\n  ```\n  Please set the page loading timeout to 60 seconds\n  ```\n  This adjusts both `timeout` and `navigationTimeout` parameters accordingly.\n\n#### Content Retrieval Adjustments\n\n- **Preserve Original HTML Structure**: When content extraction might fail:\n\n  ```\n  Please preserve the original HTML content\n  ```\n\n  Sets `extractContent: false` and `returnHtml: true`.\n\n- **Fetch Complete Page Content**: When extracted content is too limited:\n\n  ```\n  Please fetch the complete webpage content instead of just the main content\n  ```\n\n  Sets `extractContent: false`.\n\n- **Return Content as HTML**: When HTML format is needed instead of default Markdown:\n  ```\n  Please return the content in HTML format\n  ```\n  Sets `returnHtml: true`.\n\n### Debugging and Authentication\n\n#### Enabling Debug Mode\n\n- **Dynamic Debug Activation**: To display the browser window during a specific fetch operation:\n  ```\n  Please enable debug mode for this fetch operation\n  ```\n  This sets `debug: true` even if the server was started without the `--debug` flag.\n\n#### Using Custom Cookies for Authentication\n\n- **Manual Login**: To login using your own credentials:\n\n  ```\n  Please run in debug mode so I can manually log in to the website\n  ```\n\n  Sets `debug: true` or uses the `--debug` flag, keeping the browser window open for manual login.\n\n- **Interacting with Debug Browser**: When debug mode is enabled:\n\n  1. The browser window remains open\n  2. You can manually log into the website using your credentials\n  3. After login is complete, content will be fetched with your authenticated session\n\n- **Enable Debug for Specific Requests**: Even if the server is already running, you can enable debug mode for a specific request:\n  ```\n  Please enable debug mode for this authentication step\n  ```\n  Sets `debug: true` for this specific request only, opening the browser window for manual login.\n\n## Development\n\n### Install Dependencies\n\n```bash\nnpm install\n```\n\n### Install Playwright Browser\n\nInstall the browsers needed for Playwright:\n\n```bash\nnpm run install-browser\n```\n\n### Build the Server\n\n```bash\nnpm run build\n```\n\n## Debugging\n\nUse MCP Inspector for debugging:\n\n```bash\nnpm run inspector\n```\n\nYou can also enable visible browser mode for debugging:\n\n```bash\nnode build/index.js --debug\n```\n\n## Related Projects\n\n- [g-search-mcp](https://github.com/jae-jae/g-search-mcp): A powerful MCP server for Google search that enables parallel searching with multiple keywords simultaneously. Perfect for batch search operations and data collection.\n\n## License\n\nLicensed under the [MIT License](https://choosealicense.com/licenses/mit/)\n\n[![Powered by DartNode](https://dartnode.com/branding/DN-Open-Source-sm.png)](https://dartnode.com \"Powered by DartNode - Free VPS for Open Source\")\n",
      "npm_url": "https://www.npmjs.com/package/fetcher-mcp",
      "npm_downloads": 50960,
      "keywords": [
        "scraping",
        "automation",
        "html",
        "browser automation",
        "automation web",
        "scraping processing"
      ],
      "category": "browser-automation"
    },
    "janspoerer--mcp_browser_use": {
      "owner": "janspoerer",
      "name": "mcp_browser_use",
      "url": "https://github.com/janspoerer/mcp_browser_use",
      "imageUrl": "/freedevtools/mcp/pfp/janspoerer.webp",
      "description": "Automate web tasks, including actions like browsing, scraping, and interacting with web applications using natural language instructions. Integrates with Selenium to facilitate seamless web interactions within applications.",
      "stars": 4,
      "forks": 2,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-16T13:34:01Z",
      "readme_content": "# MCP Browser Use\n\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/9e05b912-08dc-41f5-b7fa-1087315883d5)\n\n\n\n\n<br>\n<br>\n<br>\n\n## What You Can Achieve With This MCP\n\nThis project aims to empower AI agents to perform web use, browser automation, scraping, and automation with Model Context Protocol (MCP) and Selenium.\n\nThe special feature of this MCP is that it can handle multiple agents accessing multiple browser **windows**. One does not need to start multiple Docker images, VMs, or computers to have multiple scraping agents. And one can still use **one single browser profile** across all agents. Each agent will have its own windows, and they will not interfere with each other.\n\n_This makes the handling of multiple agents seamless: Just start as many agents as you want, and it will just work!_ Use two Claude Code instances, one Codex CLI instance, one Gemini CLI instance and a `fast-agent` instance -- all on one computer, all using the same browser profile, and all working (somewhat) in parallel.\n\n> Our mission is to let AI agents complete any web task with minimal human supervision -- all based on natural language instructions.\n\n## Feature Highlights\n\n* **HTML Truncation:** The MCP allows you to configure truncation of the HTML pages. Other scraping MCPs may overwhelm the AI with accessibility snapshots or HTML dumps that are larger than the context window. This MCP will help you to manage the maximum page size by setting the `MCP_MAX_SNAPSHOT_CHARS` environment variable.\n* **Multiple Browser Windows and Multiple Agents:** You can connect multiple agents to this MCP independently, without requiring coordination on behalf of the agents. Each agent can work with **the same** browser profile, which is helpful when logins should persist across agents. Each agent gets their own browser window, so they do not interfere with each other. Uses Chrome DevTools Protocol TargetId to identify browser windows.\n\n## Known Limitations\n\n* **Iframe Context:** Multi-step interactions within iframes require specifying `iframe_selector` for each action. Browser context resets after each tool call for reliability. For iframe workflows, repeat the iframe selector parameter in each `click_element`, `fill_text`, or `debug_element` call.\n\n## Configuration / Installation\n\n* We recommend using Chrome Canary or Chrome Beta. This will ensure that your AI agents will not interfere with your Chrome instance. While this MCP can handle an arbitrary number of agents to use a single Chrome executable, the MCP does require the instance to be started in developer mode. If you, as a normal human user, start your normal Chrome instance manually, the Chrome instance **won't be in developer mode**. This is a problem. Thus, allow you to use your Chrome browser normally, please just install Chrome Beta (recommended) or Chrome Canary (not recommended due to instability).\n* After installing Chrome Beta, point to the Chrome Beta executable in the `.env` file as described below.\n* Start the MCP server (if you do not know how to do this, check the section \"How to Use (This) MCP below).\n\n## How to Use (This) MCP\n\nPlease refer to the [MCP documentation on modelcontextprotocol.io](https://modelcontextprotocol.io/quickstart/user).\n\nPlease note that you will need to install all dependencies in the Python environment that your MCP config file points to. For example, if you point to the `python` or `python3` executable, you will point to the global Python environment. Usually it is preferred to point to a virtual environment such as:\n\n```\n/Users/yourname/code/mcp_browser_use/.venv/bin/python\n```\n\nIf you have cloned this repository to your local `code` folder, your MCP config file should look like this:\n\n```\n{\n    \"mcpServers\": {\n        \"mcp_browser_use\": {\n            \"command\": \"/Users/janspoerer/code/mcp_browser_use/.venv/bin/python\",\n            \"args\": [\n                \"/Users/janspoerer/code/mcp_browser_use/mcp_browser_use\"\n            ]\n        }\n    }\n}\n```\n\nand it will be here (in macOS): `/Users/janspoerer/Library/Application Support/Claude/claude_desktop_config.json`.\n\nPlease refer to the `requirements.txt` to see which dependencies you need to install.\n\nRestart Claude to see if the JSON config is valid. Claude will lead to you the error logs for the MCP if something is off.\n\nIf the setup was successful, you will see a small hammer icon in the bottom-right of the \"New Chat\" window in Claude. Next to the hammer will be the number of functions that the MCP provides.\n\nClick the hammer to see the available tools.\n\n## `.env` Variables\n\n```\nCHROME_PROFILE_NAME=Selenium\nCHROME_EXECUTABLE_PATH=/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\nCHROME_PROFILE_USER_DATA_DIR=/Users/janspoerer/Library/Application Support/Google/Chrome\nCHROME_PROFILE_NAME=Profile 15\nMCP_MAX_SNAPSHOT_CHARS=10000\n```\n\n## Available Tools\n\n\n## Debugging\n\nCheck if the browser is running by visiting this URL in your main browser (not the automated browser):\n\n```\nhttp://127.0.0.1:9223/json/version\n```\n\nIt will display something like this if the browser is running:\n\n```\n{\n   \"Browser\": \"Chrome/140.0.7339.24\",\n   \"Protocol-Version\": \"1.3\",\n   \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36\",\n   \"V8-Version\": \"14.0.365.3\",\n   \"WebKit-Version\": \"537.36 (@f8765868e23d9ee5209061fc999f6495c525cd13)\",\n   \"webSocketDebuggerUrl\": \"ws://127.0.0.1:9223/devtools/browser/d8f511eb-947c-4eb1-833d-917212a92394\"\n}\n```\n\n## Demo Video (YouTube)\n\n[![Quick demo](https://img.youtube.com/vi/20B8trurlsI/hqdefault.jpg)](https://www.youtube.com/watch?v=20B8trurlsI)\n\n\n\n## Run Tests\n\nWe DO NOT want to use pytest-asyncio.\n\n```\npip install -e \".[test]\"`\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "selenium",
        "automation",
        "scraping",
        "browser automation",
        "automation web",
        "automate web"
      ],
      "category": "browser-automation"
    },
    "jkawamoto--mcp-bear": {
      "owner": "jkawamoto",
      "name": "mcp-bear",
      "url": "https://github.com/jkawamoto/mcp-bear",
      "imageUrl": "/freedevtools/mcp/pfp/jkawamoto.webp",
      "description": "Interact with Bear note-taking software to manage notes and retrieve information. Provides integration with Bear's API for note creation and manipulation.",
      "stars": 44,
      "forks": 9,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T07:03:47Z",
      "readme_content": "# Bear MCP Server\n[![Python Application](https://github.com/jkawamoto/mcp-bear/actions/workflows/python-app.yaml/badge.svg)](https://github.com/jkawamoto/mcp-bear/actions/workflows/python-app.yaml)\n[![GitHub License](https://img.shields.io/github/license/jkawamoto/mcp-bear)](https://github.com/jkawamoto/mcp-bear/blob/main/LICENSE)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit)](https://github.com/pre-commit/pre-commit)\n[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)\n\nA MCP server for interacting with [Bear](https://bear.app/) note-taking software.\n\n<a href=\"https://glama.ai/mcp/servers/2gg54jdwwv\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/2gg54jdwwv/badge\" alt=\"Bear Server MCP server\" /></a>\n\n## Installation\n> [!NOTE]\n> You'll need [`uv`](https://docs.astral.sh/uv) installed on your system to use `uvx` command.\n\n### For Goose CLI\nTo enable the Bear extension in Goose CLI,\nedit the configuration file `~/.config/goose/config.yaml` to include the following entry:\n\n```yaml\nextensions:\n  bear:\n    name: Bear\n    cmd: uvx\n    args: [--from, git+https://github.com/jkawamoto/mcp-bear, mcp-bear]\n    envs: { \"BEAR_API_TOKEN\": \"<YOUR_TOKEN>\" }\n    enabled: true\n    type: stdio\n```\n\n### For Goose Desktop\nAdd a new extension with the following settings:\n\n- **Type**: Standard IO\n- **ID**: bear\n- **Name**: Bear\n- **Description**: Interacting with Bear note-taking software\n- **Command**: `uvx --from git+https://github.com/jkawamoto/mcp-bear mcp-bear`\n- **Environment Variables**: Add `BEAR_API_TOKEN` with your api token\n\nFor more details on configuring MCP servers in Goose Desktop,\nrefer to the documentation:\n[Using Extensions - MCP Servers](https://block.github.io/goose/docs/getting-started/using-extensions#mcp-servers).\n\n### For Claude Desktop\nDownload the latest MCP bundle `mcp-bear.mcpb` from\nthe [Releases](https://github.com/jkawamoto/mcp-bear/releases) page,\nthen open the downloaded `.mcpb `file or drag it into the Claude Desktop's Settings window.\n\nYou can also manually configure this server for Claude Desktop.\nEdit the `claude_desktop_config.json` file by adding the following entry under `mcpServers`:\n\n```json\n{\n  \"mcpServers\": {\n    \"bear\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--from\",\n        \"git+https://github.com/jkawamoto/mcp-bear\",\n        \"mcp-bear\",\n        \"--token\",\n        \"<YOUR_TOKEN>\"\n      ]\n    }\n  }\n}\n```\nAfter editing, restart the application.\nFor more information,\nsee: [For Claude Desktop Users - Model Context Protocol](https://modelcontextprotocol.io/quickstart/user).\n\n### For LM Studio\nTo configure this server for LM Studio, click the button below.\n\n[![Add MCP Server bear to LM Studio](https://files.lmstudio.ai/deeplink/mcp-install-light.svg)](https://lmstudio.ai/install-mcp?name=bear&config=eyJjb21tYW5kIjoidXZ4IiwiYXJncyI6WyItLWZyb20iLCJnaXQraHR0cHM6Ly9naXRodWIuY29tL2prYXdhbW90by9tY3AtYmVhciIsIm1jcC1iZWFyIiwiLS10b2tlbiIsIjxZT1VSX1RPS0VOPiJdfQ%3D%3D)\n\n## Actions Implemented\n\nThe server supports the following actions.\nRefer to Bear's [X-callback-url Scheme documentation](https://bear.app/faq/x-callback-url-scheme-documentation/) for details on each action.\n\n- [x] /open-note\n- [x] /create\n- [x] /add-text (partially, via the replace_note method)\n- [ ] /add-file\n- [x] /tags\n- [x] /open-tag\n- [x] /rename-tag\n- [x] /delete-tag\n- [x] /trash\n- [x] /archive\n- [x] /untagged\n- [x] /todo\n- [x] /today\n- [x] /locked\n- [x] /search\n- [x] /grab-url\n\n## License\nThis application is licensed under the MIT License. See the [LICENSE](LICENSE) file for more details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "scraping",
        "browser",
        "browser automation",
        "automation web",
        "bear api"
      ],
      "category": "browser-automation"
    },
    "jonnyhoff--mcp-browser-use": {
      "owner": "jonnyhoff",
      "name": "mcp-browser-use",
      "url": "https://github.com/jonnyhoff/mcp-browser-use",
      "imageUrl": "/freedevtools/mcp/pfp/jonnyhoff.webp",
      "description": "Execute browser automation tasks using natural language commands through an API. Utilize OpenAI's GPT models to interpret commands and automate browser actions seamlessly.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-05T12:18:16Z",
      "readme_content": "# MCP Server\n\nMCP (Machine Control Protocol) Server that provides browser automation capabilities through a simple API.\n\n## Description\n\nThis server creates an API endpoint that allows you to run browser automation tasks using natural language commands. It utilizes:\n\n- **FastMCP**: For creating a simple API server\n- **browser-use**: For browser automation capabilities\n- **OpenAI's GPT models**: To interpret natural language commands\n\n## Prerequisites\n\n- Python 3.11+\n- Poetry for dependency management\n- OpenAI API key\n\n## Setup\n\n### 1. Install dependencies\n\n\n```bash\npoetry install\n```\n\n\n### 2. Configure environment variables\n\nCreate a `.env` file in the root directory with:\n\n```\nOPENAI_API_KEY=your_openai_api_key_here\n```\n\n## Run\n\n```bash\npoetry run python main.py\n```\n\n\nThe server will start with SSE (Server-Sent Events) transport on the default port.\n\n## Features\n\n### Browser Automation\n\nUse the `/run_browser_task` endpoint to execute browser automation tasks using natural language. For example:\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "automate",
        "browser",
        "browser automation",
        "automate browser",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "kazuph--mcp-browser-tabs": {
      "owner": "kazuph",
      "name": "mcp-browser-tabs",
      "url": "https://github.com/kazuph/mcp-browser-tabs",
      "imageUrl": "/freedevtools/mcp/pfp/kazuph.webp",
      "description": "Manage and retrieve information about currently open Chrome browser tabs, enabling interactions with the browser's tab content and control functions.",
      "stars": 8,
      "forks": 6,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-06T01:25:17Z",
      "readme_content": "# MCP Browser Tabs\n\nModel Context Protocol server for retrieving and managing Chrome browser tabs information. This allows Claude Desktop (or any MCP client) to fetch information about and control currently open Chrome tabs.\n\n<a href=\"https://glama.ai/mcp/servers/wze1kc6emp\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/wze1kc6emp/badge\" alt=\"Browser Tabs Server MCP server\" /></a>\n\n## Quick Start (For Users)\n\nTo use this tool with Claude Desktop, simply add the following to your Claude Desktop configuration (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"tools\": {\n    \"browser-tabs\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@kazuph/mcp-browser-tabs\"]\n    }\n  }\n}\n```\n\nThis will automatically download and run the latest version of the tool when needed.\n\n### Required Setup\n\n1. Enable Accessibility for Chrome:\n   - Open System Settings\n   - Go to Privacy & Security > Accessibility\n   - Click the \"+\" button\n   - Add Google Chrome from your Applications folder\n   - Turn ON the toggle for Chrome\n\nThis accessibility setting is required for AppleScript to interact with Chrome tabs.\n\n## For Developers\n\nThe following sections are for those who want to develop or modify the tool.\n\n### Prerequisites\n\n- Node.js 18+\n- macOS (for AppleScript operations)\n- Google Chrome\n- Claude Desktop (install from https://claude.ai/desktop)\n- tsx (install via `npm install -g tsx`)\n\n### Installation\n\n```bash\ngit clone https://github.com/kazuph/mcp-browser-tabs.git\ncd mcp-browser-tabs\nnpm install\nnpm run build\n```\n\n## Available Tools\n\n- `get_tabs`: Retrieves all open tabs from Google Chrome browser, returning their titles and URLs. Tabs are grouped by window and displayed in a format like \"Window 1-1\" (Window 1, Tab 1).\n\n- `close_tab`: Closes a specific tab in Google Chrome using window and tab indices.\n  - Parameters:\n    - windowIndex: Window number (starts from 1)\n    - tabIndex: Tab number within the window (starts from 1)\n  - Note: When closing multiple tabs, start from the highest index numbers to avoid index shifting. After closing tabs, use get_tabs to confirm the changes.\n\n## Notes\n\n- This tool is designed for macOS only due to its dependency on AppleScript.\n- Requires Google Chrome to be installed and running.\n- Accessibility permissions must be granted for Chrome.\n\n## License\n\nMIT License - see the [LICENSE](LICENSE) file for details\n",
      "npm_url": "https://www.npmjs.com/package/@kazuph/mcp-browser-tabs",
      "npm_downloads": 4006,
      "keywords": [
        "browser",
        "automation",
        "chrome",
        "browser automation",
        "automation web",
        "mcp browser"
      ],
      "category": "browser-automation"
    },
    "kimtaeyoon83--mcp-server-youtube-transcript": {
      "owner": "kimtaeyoon83",
      "name": "mcp-server-youtube-transcript",
      "url": "https://github.com/kimtaeyoon83/mcp-server-youtube-transcript",
      "imageUrl": "",
      "description": "Fetch YouTube subtitles and transcripts for AI analysis",
      "stars": 325,
      "forks": 58,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-30T01:50:41Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/kimtaeyoon83-mcp-server-youtube-transcript-badge.png)](https://mseep.ai/app/kimtaeyoon83-mcp-server-youtube-transcript)\n\n# YouTube Transcript Server\n\n[![smithery badge](https://smithery.ai/badge/@kimtaeyoon83/mcp-server-youtube-transcript)](https://smithery.ai/server/@kimtaeyoon83/mcp-server-youtube-transcript)\n\nA Model Context Protocol server that enables retrieval of transcripts from YouTube videos. This server provides direct access to video captions and subtitles through a simple interface.\n\n<a href=\"https://glama.ai/mcp/servers/z429kk3te7\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/z429kk3te7/badge\" alt=\"mcp-server-youtube-transcript MCP server\" /></a>\n\n### Installing via Smithery\n\nTo install YouTube Transcript Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kimtaeyoon83/mcp-server-youtube-transcript):\n\n```bash\nnpx -y @smithery/cli install @kimtaeyoon83/mcp-server-youtube-transcript --client claude\n```\n\n## Components\n\n### Tools\n\n- **get_transcript**\n  - Extract transcripts from YouTube videos\n  - Inputs:\n    - `url` (string, required): YouTube video URL or video ID\n    - `lang` (string, optional, default: \"en\"): Language code for transcript (e.g., 'ko', 'en')\n\n## Key Features\n\n- Support for multiple video URL formats\n- Language-specific transcript retrieval\n- Detailed metadata in responses\n\n## Configuration\n\nTo use with Claude Desktop, add this server configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"youtube-transcript\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@kimtaeyoon83/mcp-server-youtube-transcript\"]\n    }\n  }\n}\n```\n\n## Install via tool\n\n[mcp-get](https://github.com/michaellatman/mcp-get) A command-line tool for installing and managing Model Context Protocol (MCP) servers.\n\n```shell \nnpx @michaellatman/mcp-get@latest install @kimtaeyoon83/mcp-server-youtube-transcript\n```\n\n## Awesome-mcp-servers \n[awesome-mcp-servers](https://github.com/punkpeye/awesome-mcp-servers) A curated list of awesome Model Context Protocol (MCP) servers.\n\n## Development\n\n### Prerequisites\n\n- Node.js 18 or higher\n- npm or yarn\n\n### Setup\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n### Testing\n\n```bash\nnpm test\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the MCP Inspector for development:\n\n```bash\nnpm run inspector\n```\n\n\n\n## Running evals\n\nThe evals package loads an mcp client that then runs the index.ts file, so there is no need to rebuild between tests. You can load environment variables by prefixing the npx command. Full documentation can be found [here](https://www.mcpevals.io/docs).\n\n```bash\nOPENAI_API_KEY=your-key  npx mcp-eval src/evals/evals.ts src/index.ts\n```\n## Error Handling\n\nThe server implements robust error handling for common scenarios:\n- Invalid video URLs or IDs\n- Unavailable transcripts\n- Language availability issues\n- Network errors\n\n## Usage Examples\n\n1. Get transcript by video URL:\n```typescript\nawait server.callTool(\"get_transcript\", {\n  url: \"https://www.youtube.com/watch?v=VIDEO_ID\",\n  lang: \"en\"\n});\n```\n\n2. Get transcript by video ID:\n```typescript\nawait server.callTool(\"get_transcript\", {\n  url: \"VIDEO_ID\",\n  lang: \"ko\"\n});\n```\n\n3. How to Extract YouTube Subtitles in Claude Desktop App\n```\nchat: https://youtu.be/ODaHJzOyVCQ?si=aXkJgso96Deri0aB Extract subtitles\n```\n\n## Security Considerations\n\nThe server:\n- Validates all input parameters\n- Handles YouTube API errors gracefully\n- Implements timeouts for transcript retrieval\n- Provides detailed error messages for troubleshooting\n\n## License\n\nThis MCP server is licensed under the MIT License. See the LICENSE file for details.\n",
      "npm_url": "https://www.npmjs.com/package/@kimtaeyoon83/mcp-server-youtube-transcript",
      "npm_downloads": 24203,
      "keywords": [
        "automation",
        "scraping",
        "ai",
        "automation web",
        "browser automation",
        "content ai"
      ],
      "category": "browser-automation"
    },
    "kimtth--mcp-aoai-web-browsing": {
      "owner": "kimtth",
      "name": "mcp-aoai-web-browsing",
      "url": "https://github.com/kimtth/mcp-aoai-web-browsing",
      "imageUrl": "/freedevtools/mcp/pfp/kimtth.webp",
      "description": "An MCP server for web browsing automation that integrates Azure OpenAI to facilitate interactions with web applications through an automated interface. It utilizes Playwright for end-to-end testing and customizes responses to fit the OpenAI function calling format.",
      "stars": 30,
      "forks": 11,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-19T23:49:01Z",
      "readme_content": "## MCP Server & Client implementation for using Azure OpenAI\n\n<!-- [![smithery badge](https://smithery.ai/badge/mcp-web-auto)](https://smithery.ai/server/mcp-web-auto) -->\n\n- A minimal server/client application implementation utilizing the Model Context Protocol (MCP) and Azure OpenAI.\n\n    1. The MCP server is built with `FastMCP`.  \n    2. `Playwright` is an an open source, end to end testing framework by Microsoft for testing your modern web applications. \n    3. The MCP response about tools will be converted to the OpenAI function calling format.  \n    4. The bridge that converts the MCP server response to the OpenAI function calling format customises the `MCP-LLM Bridge` implementation.\n    5. To ensure a stable connection, the server object is passed directly into the bridge. \n\n## Model Context Protocol (MCP)\n\n**Model Context Protocol (MCP)** MCP (Model Context Protocol) is an open protocol that enables secure, controlled interactions between AI applications and local or remote resources. \n\n### Official Repositories\n\n- [MCP Python SDK](https://github.com/modelcontextprotocol/python-sdk)  \n- [Create Python Server](https://github.com/modelcontextprotocol/create-python-server)  \n- [MCP Servers](https://github.com/modelcontextprotocol/servers)  \n\n### Community Resources\n\n- [Awesome MCP Servers](https://github.com/punkpeye/awesome-mcp-servers)  \n- [MCP on Reddit](https://www.reddit.com/r/mcp/)  \n\n### Related Projects\n\n- [FastMCP](https://github.com/jlowin/fastmcp): The fast, Pythonic way to build MCP servers.\n- [Chat MCP](https://github.com/daodao97/chatmcp): MCP client\n- [MCP-LLM Bridge](https://github.com/bartolli/mcp-llm-bridge): MCP implementation that enables communication between MCP servers and OpenAI-compatible LLMs\n\n### MCP Playwright\n\n- [MCP Playwright server](https://github.com/executeautomation/mcp-playwright)  \n- [Microsoft Playwright for Python](https://github.com/microsoft/playwright-python)  \n\n### Configuration\n\nDuring the development phase in December 2024, the Python project should be initiated with 'uv'. Other dependency management libraries, such as 'pip' and 'poetry', are not yet fully supported by the MCP CLI.\n\n1. Rename `.env.template` to `.env`, then fill in the values in `.env` for Azure OpenAI:\n\n    ```bash\n    AZURE_OPEN_AI_ENDPOINT=\n    AZURE_OPEN_AI_API_KEY=\n    AZURE_OPEN_AI_DEPLOYMENT_MODEL=\n    AZURE_OPEN_AI_API_VERSION=\n    ```\n\n1. Install `uv` for python library management\n\n    ```bash\n    pip install uv\n    uv sync\n    ```\n\n1. Execute `python chatgui.py`\n\n    - The sample screen shows the client launching a browser to navigate to the URL.\n\n    \n\n### w.r.t. 'stdio'\n\n`stdio` is a **transport layer** (raw data flow), while **JSON-RPC** is an **application protocol** (structured communication). They are distinct but often used interchangeably, e.g., \"JSON-RPC over stdio\" in protocols.\n\n### Tool description\n\n```cmd\n@self.mcp.tool()\nasync def playwright_navigate(url: str, timeout=30000, wait_until=\"load\"):\n    \"\"\"Navigate to a URL.\"\"\" -> This comment provides a description, which may be used in a mechanism similar to function calling in LLMs.\n\n# Output\nTool(name='playwright_navigate', description='Navigate to a URL.', inputSchema={'properties': {'url': {'title': 'Url', 'type': 'string'}, 'timeout': {'default': 30000, 'title': 'timeout', 'type': 'string'}\n```\n\n### Tip: uv\n\n- [features](https://docs.astral.sh/uv/getting-started/features)\n\n```\nuv run: Run a script.\nuv venv: Create a new virtual environment. By default, '.venv'.\nuv add: Add a dependency to a script\nuv remove: Remove a dependency from a script\nuv sync: Sync (Install) the project's dependencies with the environment.\n```\n\n### Tip\n\n- taskkill command for python.exe\n\n```cmd\ntaskkill /IM python.exe /F\n```\n- Visual Code: Python Debugger: Debugging with launch.json will start the debugger using the configuration from .vscode/launch.json.\n\n<!-- ### Sample query\n\nNavigate to website http://eaapp.somee.com and click the login link. In the login page, enter the username and password as \"admin\" and \"password\" respectively and perform login. Then click the Employee List page and click \"Create New\" button and enter realistic employee details to create for Name, Salary, DurationWorked, Select dropdown for Grade as CLevel and Email. -->",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "openai",
        "automation",
        "web",
        "automation web",
        "browser automation",
        "browsing automation"
      ],
      "category": "browser-automation"
    },
    "kitfactory--PyMCPAutoGUI": {
      "owner": "kitfactory",
      "name": "PyMCPAutoGUI",
      "url": "https://github.com/kitfactory/PyMCPAutoGUI",
      "imageUrl": "/freedevtools/mcp/pfp/kitfactory.webp",
      "description": "Automate GUI tasks by controlling the mouse and keyboard to interact with desktop applications, enabling AI agents to perform repetitive actions and streamline workflows.",
      "stars": 10,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-24T18:19:00Z",
      "readme_content": "# PyMCPAutoGUI üñ±Ô∏è‚å®Ô∏èüñºÔ∏è - GUI Automation via MCP\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n**Supercharge your AI Agent's capabilities!** ‚ú® PyMCPAutoGUI provides a bridge between your AI agents (like those in Cursor or other MCP-compatible environments) and your computer's graphical user interface (GUI). It allows your agent to see the screen üëÅÔ∏è, control the mouse üñ±Ô∏è and keyboard ‚å®Ô∏è, and interact with windows ü™ü, just like a human user!\n\nStop tedious manual GUI tasks and let your AI do the heavy lifting üí™. Perfect for automating repetitive actions, testing GUIs, or building powerful AI assistants ü§ñ.\n\n## ü§î Why Choose PyMCPAutoGUI?\n\n*   **ü§ñ Empower Your Agents:** Give your AI agents the power to interact directly with desktop applications.\n*   **‚úÖ Simple Integration:** Works seamlessly with MCP-compatible clients like the Cursor editor. It's plug and play!\n*   **üöÄ Easy to Use:** Get started with a simple server command. Seriously, it's *that* easy.\n*   **üñ±Ô∏è‚å®Ô∏è Comprehensive Control:** Offers a wide range of GUI automation functions from the battle-tested [PyAutoGUI](https://pyautogui.readthedocs.io/en/latest/) and [PyGetWindow](https://pygetwindow.readthedocs.io/en/latest/).\n*   **üñºÔ∏è Screen Perception:** Includes tools for taking screenshots and locating images on the screen ‚Äì let your agent *see*!\n*   **ü™ü Window Management:** Control window position, size, state (minimize, maximize), and more. Tidy up that desktop!\n*   **üí¨ User Interaction:** Display alert, confirmation, and prompt boxes to communicate with the user.\n\n## üõ†Ô∏è Supported Environments\n\n*   **Operating Systems:** Windows, macOS, Linux (Requires appropriate dependencies for `pyautogui` on each OS)\n*   **Python:** 3.11+ üêç\n*   **MCP Clients:** Cursor Editor, any client supporting the [Model Context Protocol (MCP)](https://microsoft.github.io/language-server-protocol/specifications/mcp/)\n\n## üöÄ Getting Started - It's Super Easy!\n\n### 1. Installation (Recommended: Use a Virtual Environment!)\n\nUsing a virtual environment keeps your project dependencies tidy.\n\n```bash\n# Create and activate a virtual environment (example using venv)\npython -m venv .venv\n# Windows PowerShell\n.venv\\Scripts\\Activate.ps1\n# macOS / Linux bash\nsource .venv/bin/activate\n\n# Install using pip (from PyPI or local source)\n# Make sure your virtual environment is active!\npip install pymcpautogui # Or pip install . if installing from local source\n```\n\n*(Note: `pyautogui` might have system dependencies like `scrot` on Linux for screenshots. Please check the `pyautogui` documentation for OS-specific installation requirements.)*\n\n### 2. Running the MCP Server\n\nOnce installed, simply run the server from your terminal:\n\n```bash\n# Make sure your virtual environment is activated!\npython -m pymcpautogui.server\n```\n\nThe server will start and listen for connections (defaulting to port 6789). Look for this output:\n\n```\nINFO:     Started server process [XXXXX]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://127.0.0.1:6789 (Press CTRL+C to quit)\n```\n\nKeep this terminal running while you need the GUI automation magic! ‚ú®\n\n## ‚ú® Seamless Integration with Cursor Editor\n\nConnect PyMCPAutoGUI to Cursor (@ symbol) for GUI automation directly within your coding workflow.\n\n1.  **Open MCP Configuration:** In Cursor, use the Command Palette (`Ctrl+Shift+P` or `Cmd+Shift+P`) and find \"MCP: Open mcp.json configuration file\".\n2.  **Add PyMCPAutoGUI Config:** Add or merge this configuration into your `mcp.json`. Adjust paths if needed (especially if Cursor isn't running from the project root).\n\n    ```json\n    {\n        \"mcpServers\": {\n            // ... other MCP server configs if any ...\n            \"PyMCPAutoGUI\": {\n                // Sets the working directory. ${workspaceFolder} is usually correct.\n                \"cwd\": \"${workspaceFolder}\",\n\n                // Command to run Python. 'python' works if the venv is active in the terminal\n                // where Cursor was launched, or specify the full path.\n                \"command\": \"python\", // Or \".venv/Scripts/python.exe\" (Win) or \".venv/bin/python\" (Mac/Linux)\n\n                // Arguments to start the server module.\n                \"args\": [\"-m\", \"pymcpautogui.server\"]\n            }\n            // ... other MCP server configs if any ...\n        }\n    }\n    ```\n    *(Tip: If `mcp.json` already exists, just add the `\"PyMCPAutoGUI\": { ... }` part inside the `mcpServers` object.)*\n\n3.  **Save `mcp.json`**. Cursor will detect the server.\n4.  **Automate!** Use `@PyMCPAutoGUI` in Cursor chats:\n\n    *Example:*\n    `@PyMCPAutoGUI move_to(x=100, y=200)`\n    `@PyMCPAutoGUI write(text='Automating with AI! üéâ', interval=0.1)`\n    `@PyMCPAutoGUI screenshot(filename='current_screen.png')`\n    `@PyMCPAutoGUI activate_window(title='Notepad')`\n\n## üß∞ Available Tools\n\nPyMCPAutoGUI exposes most functions from `pyautogui` and `pygetwindow`. Examples include:\n\n*   **Mouse üñ±Ô∏è:** `move_to`, `click`, `move_rel`, `drag_to`, `drag_rel`, `scroll`, `mouse_down`, `mouse_up`, `get_position`\n*   **Keyboard ‚å®Ô∏è:** `write`, `press`, `key_down`, `key_up`, `hotkey`\n*   **Screenshots üñºÔ∏è:** `screenshot`, `locate_on_screen`, `locate_center_on_screen`\n*   **Windows ü™ü:** `get_all_titles`, `get_windows_with_title`, `get_active_window`, `activate_window`, `minimize_window`, `maximize_window`, `restore_window`, `move_window`, `resize_window`, `close_window`\n*   **Dialogs üí¨:** `alert`, `confirm`, `prompt`, `password`\n*   **Config ‚öôÔ∏è:** `set_pause`, `set_failsafe`\n\nFor the full list and details, check the `pymcpautogui/server.py` file or use `@PyMCPAutoGUI list_tools` in your MCP client.\n\n## üìÑ License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details. Happy Automating! üòÑ\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "pymcpautogui",
        "automate",
        "browser automation",
        "automation web",
        "pymcpautogui automate"
      ],
      "category": "browser-automation"
    },
    "kkk929--browser-use": {
      "owner": "kkk929",
      "name": "browser-use",
      "url": "https://github.com/kkk929/browser-use",
      "imageUrl": "/freedevtools/mcp/pfp/kkk929.webp",
      "description": "Control and automate browser tasks through integrated AI functionality, facilitating seamless interaction and task execution in web environments.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-02-27T13:26:43Z",
      "readme_content": "<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"./static/browser-use-dark.png\">\n  <source media=\"(prefers-color-scheme: light)\" srcset=\"./static/browser-use.png\">\n  \n</picture>\n\n<h1 align=\"center\">Enable AI to control your browser ü§ñ</h1>\n\n[![GitHub stars](https://img.shields.io/github/stars/gregpr07/browser-use?style=social)](https://github.com/gregpr07/browser-use/stargazers)\n[![Discord](https://img.shields.io/discord/1303749220842340412?color=7289DA&label=Discord&logo=discord&logoColor=white)](https://link.browser-use.com/discord)\n[![Documentation](https://img.shields.io/badge/Documentation-üìï-blue)](https://docs.browser-use.com)\n[![Cloud](https://img.shields.io/badge/Cloud-‚òÅÔ∏è-blue)](https://cloud.browser-use.com)\n[![Twitter Follow](https://img.shields.io/twitter/follow/Gregor?style=social)](https://x.com/gregpr07)\n[![Twitter Follow](https://img.shields.io/twitter/follow/Magnus?style=social)](https://x.com/mamagnus00)\n[![Weave Badge](https://img.shields.io/endpoint?url=https%3A%2F%2Fapp.workweave.ai%2Fapi%2Frepository%2Fbadge%2Forg_T5Pvn3UBswTHIsN1dWS3voPg%2F881458615&labelColor=#EC6341)](https://app.workweave.ai/reports/repository/org_T5Pvn3UBswTHIsN1dWS3voPg/881458615)\n\n\nüåê Browser-use is the easiest way to connect your AI agents with the browser. \n\nüí° See what others are building and share your projects in our [Discord](https://link.browser-use.com/discord) - we'd love to see what you create!\n\nüå©Ô∏è Skip the setup - try our hosted version for instant browser automation! [Try it now](https://cloud.browser-use.com).\n\n\n# Quick start\n\n\nWith pip (Python>=3.11):\n\n```bash\npip install browser-use\n```\n\ninstall playwright:\n\n```bash\nplaywright install\n```\n\nSpin up your agent:\n\n```python\nfrom langchain_openai import ChatOpenAI\nfrom browser_use import Agent\nimport asyncio\nfrom dotenv import load_dotenv\nload_dotenv()\n\nasync def main():\n    agent = Agent(\n        task=\"Compare the price of gpt-4o and DeepSeek-V3\",\n        llm=ChatOpenAI(model=\"gpt-4o\"),\n    )\n    result = await agent.run()\n    print(result)\n\nasyncio.run(main())\n```\n\nAdd your API keys for the provider you want to use to your `.env` file.\n\n```bash\nOPENAI_API_KEY=\n```\n\nFor other settings, models, and more, check out the [documentation üìï](https://docs.browser-use.com).\n\n\n### Test with UI\n\nYou can test [browser-use with a UI repository](https://github.com/browser-use/web-ui)\n\nOr simply run the gradio example:\n\n```\nuv pip install gradio\n```\n\n```bash\npython examples/ui/gradio_demo.py\n```\n\n# Demos\n\n\n\n\n\n\n\n<br/><br/>\n\n[Task](https://github.com/browser-use/browser-use/blob/main/examples/use-cases/shopping.py): Add grocery items to cart, and checkout.\n\n[![AI Did My Groceries](https://github.com/user-attachments/assets/d9359085-bde6-41d4-aa4e-6520d0221872)](https://www.youtube.com/watch?v=L2Ya9PYNns8)\n\n\n<br/><br/>\n\n\nPrompt: Add my latest LinkedIn follower to my leads in Salesforce.\n\n![LinkedIn to Salesforce](https://github.com/user-attachments/assets/1440affc-a552-442e-b702-d0d3b277b0ae)\n\n<br/><br/>\n\n[Prompt](https://github.com/browser-use/browser-use/blob/main/examples/use-cases/find_and_apply_to_jobs.py): Read my CV & find ML jobs, save them to a file, and then start applying for them in new tabs, if you need help, ask me.'\n\nhttps://github.com/user-attachments/assets/171fb4d6-0355-46f2-863e-edb04a828d04\n\n<br/><br/>\n\n[Prompt](https://github.com/browser-use/browser-use/blob/main/examples/browser/real_browser.py): Write a letter in Google Docs to my Papa, thanking him for everything, and save the document as a PDF.\n\n![Letter to Papa](https://github.com/user-attachments/assets/242ade3e-15bc-41c2-988f-cbc5415a66aa)\n\n<br/><br/>\n\n[Prompt](https://github.com/browser-use/browser-use/blob/main/examples/custom-functions/save_to_file_hugging_face.py): Look up models with a license of cc-by-sa-4.0 and sort by most likes on Hugging face, save top 5 to file.\n\nhttps://github.com/user-attachments/assets/de73ee39-432c-4b97-b4e8-939fd7f323b3\n\n\n<br/><br/>\n\n\n## More examples\n\nFor more examples see the [examples](examples) folder or join the [Discord](https://link.browser-use.com/discord) and show off your project.\n\n# Vision\n\nTell your computer what to do, and it gets it done.\n\n## Roadmap\n\n### Agent\n- [ ] Improve agent memory (summarize, compress, RAG, etc.)\n- [ ] Enhance planning capabilities (load website specific context)\n- [ ] Reduce token consumption (system prompt, DOM state)\n\n### DOM Extraction\n- [ ] Improve extraction for datepickers, dropdowns, special elements\n- [ ] Improve state representation for UI elements\n\n### Rerunning tasks\n- [ ] LLM as fallback\n- [ ] Make it easy to define workfows templates where LLM fills in the details\n- [ ] Return playwright script from the agent\n\n### Datasets\n- [ ] Create datasets for complex tasks\n- [ ] Benchmark various models against each other\n- [ ] Fine-tuning models for specific tasks\n\n### User Experience\n- [ ] Human-in-the-loop execution\n- [ ] Improve the generated GIF quality\n- [ ] Create various demos for tutorial execution, job application, QA testing, social media, etc.\n\n## Contributing\n\nWe love contributions! Feel free to open issues for bugs or feature requests. To contribute to the docs, check out the `/docs` folder.\n\n## Local Setup\n\nTo learn more about the library, check out the [local setup üìï](https://docs.browser-use.com/development/local-setup).\n\n## Cooperations\n\nWe are forming a commission to define best practices for UI/UX design for browser agents.\nTogether, we're exploring how software redesign improves the performance of AI agents and gives these companies a competitive advantage by designing their existing software to be at the forefront of the agent age.\n\nEmail [Toby](mailto:tbiddle@loop11.com?subject=I%20want%20to%20join%20the%20UI/UX%20commission%20for%20AI%20agents&body=Hi%20Toby%2C%0A%0AI%20found%20you%20in%20the%20browser-use%20GitHub%20README.%0A%0A) to apply for a seat on the committee.\n## Citation\n\nIf you use Browser Use in your research or project, please cite:\n\n\n    \n```bibtex\n@software{browser_use2024,\n  author = {M√ºller, Magnus and ≈Ωuniƒç, Gregor},\n  title = {Browser Use: Enable AI to control your browser},\n  year = {2024},\n  publisher = {GitHub},\n  url = {https://github.com/browser-use/browser-use}\n}\n```\n \n\n\n <div align=\"center\"> <img alt=\"402b2129_b6ac_44d3_a217_01aea3277dce\" src=\"https://github.com/user-attachments/assets/402b2129-b6ac-44d3-a217-01aea3277dce\" width=\"400\"/> \n \n[![Twitter Follow](https://img.shields.io/twitter/follow/Gregor?style=social)](https://x.com/gregpr07)\n[![Twitter Follow](https://img.shields.io/twitter/follow/Magnus?style=social)](https://x.com/mamagnus00)\n \n </div> \n\n<div align=\"center\">\nMade with ‚ù§Ô∏è in Zurich and San Francisco\n </div>",
      "npm_url": "https://www.npmjs.com/package/browser-use",
      "npm_downloads": 10265,
      "keywords": [
        "automation",
        "browser",
        "scraping",
        "browser automation",
        "automate browser",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "korwabs--playwright-record-mcp": {
      "owner": "korwabs",
      "name": "playwright-record-mcp",
      "url": "https://github.com/korwabs/playwright-record-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/korwabs.webp",
      "description": "Enables browser automation with video recording capabilities, allowing interaction with web pages through structured accessibility snapshots. Supports navigation, form-filling, data extraction, and automated testing without relying on visual inputs.",
      "stars": 2,
      "forks": 3,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-09-05T13:36:03Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/korwabs-playwright-record-mcp-badge.png)](https://mseep.ai/app/korwabs-playwright-record-mcp)\n\n# Playwright Record MCP\n\nPlaywright Record MCP is a Model Context Protocol (MCP) server that provides browser automation capabilities using [Playwright](https://playwright.dev/). This server adds video recording functionality to record browser interactions. It enables LLMs (Large Language Models) to interact with web pages through structured accessibility snapshots, without requiring screenshots or visual models.\n\n## Key Features\n\n- **Fast and lightweight**: Uses Playwright's accessibility tree, not pixel-based input.\n- **LLM-friendly**: No vision models needed, operates purely on structured data.\n- **Deterministic tool application**: Avoids ambiguity common with screenshot-based approaches.\n- **Video recording**: Ability to record browser interactions as video.\n\n## Use Cases\n\n- Web navigation and form-filling\n- Data extraction from structured content\n- LLM-driven automated testing\n- General-purpose browser interaction for agents\n- Recording and analyzing browser interactions\n\n## Installation\n\n### Installation via NPM\n\n```bash\nnpm install @playwright/record-mcp\n```\n\nOr\n\n```bash\nnpx @playwright/record-mcp\n```\n\n### Configuration Example\n\n#### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/record-mcp@latest\"\n      ]\n    }\n  }\n}\n```\n\n### Installation in VS Code\n\nYou can install the Playwright Record MCP server using VS Code CLI:\n\n```bash\n# For VS Code\ncode --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@playwright/record-mcp@latest\"]}'\n```\n\n```bash\n# For VS Code Insiders\ncode-insiders --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@playwright/record-mcp@latest\"]}'\n```\n\nAfter installation, the Playwright Record MCP server will be available for use with your GitHub Copilot agent in VS Code.\n\n## CLI Options\n\nThe Playwright Record MCP server supports the following command-line options:\n\n- `--browser <browser>`: Browser or Chrome channel to use. Possible values:\n  - `chrome`, `firefox`, `webkit`, `msedge`\n  - Chrome channels: `chrome-beta`, `chrome-canary`, `chrome-dev`\n  - Edge channels: `msedge-beta`, `msedge-canary`, `msedge-dev`\n  - Default: `chrome`\n- `--caps <caps>`: Comma-separated list of capabilities to enable, possible values: tabs, pdf, history, wait, files, install. Default is all.\n- `--cdp-endpoint <endpoint>`: CDP endpoint to connect to\n- `--executable-path <path>`: Path to the browser executable\n- `--headless`: Run browser in headless mode (headed by default)\n- `--port <port>`: Port to listen on for SSE transport\n- `--user-data-dir <path>`: Path to the user data directory\n- `--vision`: Run server that uses screenshots (Aria snapshots are used by default)\n- `--record`: Record browser interactions as video (new feature)\n- `--record-path <path>`: Path to save recording files (default: ./recordings)\n- `--record-format <format>`: Recording format, possible values: mp4, webm (default: mp4)\n\n## User Data Directory\n\nPlaywright Record MCP will launch the browser with a new profile, located at:\n\n- Windows: `%USERPROFILE%\\AppData\\Local\\ms-playwright\\mcp-chrome-profile`\n- macOS: `~/Library/Caches/ms-playwright/mcp-chrome-profile`\n- Linux: `~/.cache/ms-playwright/mcp-chrome-profile`\n\nAll login information will be stored in that profile; you can delete it between sessions if you'd like to clear the offline state.\n\n## Running Headless Browser (Browser without GUI)\n\nThis mode is useful for background or batch operations.\n\n```json\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/record-mcp@latest\",\n        \"--headless\"\n      ]\n    }\n  }\n}\n```\n\n## Using Video Recording\n\nTo use the video recording feature, use the `--record` flag:\n\n```json\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/record-mcp@latest\",\n        \"--record\"\n      ]\n    }\n  }\n}\n```\n\nTo specify the recording file save path:\n\n```json\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/record-mcp@latest\",\n        \"--record\",\n        \"--record-path\", \"./my-recordings\"\n      ]\n    }\n  }\n}\n```\n\nTo specify the recording format:\n\n```json\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/record-mcp@latest\",\n        \"--record\",\n        \"--record-format\", \"webm\"\n      ]\n    }\n  }\n}\n```\n\n## Running Headed Browser on Linux without DISPLAY\n\nWhen running a headed browser on a system without a display or from worker processes of IDEs,\nrun the MCP server from an environment with DISPLAY and pass the `--port` flag to enable SSE transport.\n\n```bash\nnpx @playwright/record-mcp@latest --port 8931\n```\n\nThen, in the MCP client config, set the `url` to the SSE endpoint:\n\n```json\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"url\": \"http://localhost:8931/sse\"\n    }\n  }\n}\n```\n\n## Docker\n\n**NOTE:** The Docker implementation currently only supports headless Chromium.\n\n```json\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"--init\", \"mcp/playwright-record\"]\n    }\n  }\n}\n```\n\nTo build with Docker:\n\n```bash\ndocker build -t mcp/playwright-record .\n```\n\n## Tool Modes\n\nThe tools are available in two modes:\n\n1. **Snapshot Mode** (default): Uses accessibility snapshots for better performance and reliability\n2. **Vision Mode**: Uses screenshots for visual-based interactions\n\nTo use Vision Mode, add the `--vision` flag when starting the server:\n\n```json\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/record-mcp@latest\",\n        \"--vision\"\n      ]\n    }\n  }\n}\n```\n\nVision Mode works best with computer use models that are able to interact with elements using X-Y coordinate space, based on the provided screenshot.\n\n## Programmatic Usage with Custom Transports\n\n```javascript\nimport http from 'http';\n\nimport { createServer } from '@playwright/record-mcp';\nimport { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';\n\nhttp.createServer(async (req, res) => {\n  // ...\n\n  // Creates a headless Playwright Record MCP server with SSE transport\n  const mcpServer = await createServer({ headless: true, record: true });\n  const transport = new SSEServerTransport('/messages', res);\n  await mcpServer.connect(transport);\n\n  // ...\n});\n```\n\n## Snapshot-based Interactions\n\n- **browser_snapshot**\n  - Description: Capture accessibility snapshot of the current page, this is better than screenshot\n  - Parameters: None\n\n- **browser_click**\n  - Description: Perform click on a web page\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n\n- **browser_drag**\n  - Description: Perform drag and drop between two elements\n  - Parameters:\n    - `startElement` (string): Human-readable source element description used to obtain the permission to interact with the element\n    - `startRef` (string): Exact source element reference from the page snapshot\n    - `endElement` (string): Human-readable target element description used to obtain the permission to interact with the element\n    - `endRef` (string): Exact target element reference from the page snapshot\n\n- **browser_hover**\n  - Description: Hover over element on page\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n\n- **browser_type**\n  - Description: Type text into editable element\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n    - `text` (string): Text to type into the element\n    - `submit` (boolean, optional): Whether to submit entered text (press Enter after)\n    - `slowly` (boolean, optional): Whether to type one character at a time. Useful for triggering key handlers in the page. By default entire text is filled in at once.\n\n## Video Recording Tools (New Feature)\n\n- **browser_record_start**\n  - Description: Start recording browser interactions\n  - Parameters:\n    - `path` (string, optional): Path to save the recording file\n    - `format` (string, optional): Recording format (mp4 or webm)\n\n- **browser_record_stop**\n  - Description: Stop and save browser interaction recording\n  - Parameters: None\n\n- **browser_record_pause**\n  - Description: Pause the current recording\n  - Parameters: None\n\n- **browser_record_resume**\n  - Description: Resume a paused recording\n  - Parameters: None\n\n- **browser_record_list**\n  - Description: Return a list of current recording files\n  - Parameters: None\n\n## Examples\n\n### Starting and Stopping Video Recording\n\n```javascript\n// Start video recording\nawait mcpServer.invoke('browser_record_start', {\n  path: './my-recordings/test-recording.mp4',\n  format: 'mp4'\n});\n\n// Perform browser navigation\nawait mcpServer.invoke('browser_navigate', {\n  url: 'https://example.com'\n});\n\n// Interact with the page\nconst snapshot = await mcpServer.invoke('browser_snapshot');\n// Find elements in the snapshot...\n\n// Stop video recording\nawait mcpServer.invoke('browser_record_stop');\n```\n\n## Supported Browsers\n\n- Chrome\n- Firefox\n- WebKit\n- Microsoft Edge\n\n## Requirements\n\n- Node.js 18 or higher\n- The required browser must be installed (or use the `browser_install` tool to install it)\n\n## License\n\nApache-2.0 license\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "web",
        "automated",
        "browser automation",
        "automation web",
        "processing web"
      ],
      "category": "browser-automation"
    },
    "lars-hagen--mcp-playwright-cdp": {
      "owner": "lars-hagen",
      "name": "mcp-playwright-cdp",
      "url": "https://github.com/lars-hagen/mcp-playwright-cdp",
      "imageUrl": "/freedevtools/mcp/pfp/lars-hagen.webp",
      "description": "Provides browser automation and interaction with web pages using Playwright and Chrome DevTools Protocol (CDP), enabling LLMs to interact with the web, take screenshots, and execute JavaScript in a real browser environment.",
      "stars": 37,
      "forks": 11,
      "license": "Other",
      "language": "TypeScript",
      "updated_at": "2025-10-01T01:06:31Z",
      "readme_content": "# MCP Playwright CDP\n[![smithery badge](https://smithery.ai/badge/@lars-hagen/mcp-playwright-cdp)](https://smithery.ai/server/@lars-hagen/mcp-playwright-cdp)\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/lars-hagen/mcp-playwright-cdp/blob/main/LICENSE)\n\nA Model Context Protocol server that provides browser automation capabilities using Playwright with Chrome DevTools Protocol (CDP) support. This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment, with the ability to connect to existing Chrome instances via CDP.\n\n> This is a fork of [executeautomation/mcp-playwright](https://github.com/executeautomation/mcp-playwright) v0.2.7, enhanced with CDP support for connecting to running Chrome instances.\n\n<a href=\"https://glama.ai/mcp/servers/fdvu5n58kv\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/fdvu5n58kv/badge\" alt=\"Playwright CDP MCP server\" /></a>\n\n## Key Features\n\n- üîó Connect to existing Chrome instances via CDP\n- üåê Full browser automation capabilities\n- üì∏ Screenshot capture of entire pages or specific elements\n- üñ±Ô∏è Comprehensive web interactions (navigation, clicking, form filling)\n- üìä Console log monitoring\n- üîß JavaScript execution in browser context\n- üåç HTTP API testing support\n\n## Installation\n\nYou can install the package using either npm or Smithery:\n\n### Installing via Smithery\nTo install MCP Playwright CDP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@lars-hagen/mcp-playwright-cdp):\n\n```bash\nnpx -y @smithery/cli install @lars-hagen/mcp-playwright-cdp --client claude\n```\n\n### Manual Installation\nUsing npm:\n```bash\nnpm install\n```\n\n## Configuration\n\nAdd this to your Claude Desktop configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/mcp-playwright/dist/index.js\"]\n    }\n  }\n}\n```\nReplace `/path/to/mcp-playwright` with your actual path to the repository.\n\n## CDP Connection\n\nThis fork adds the ability to connect to an existing Chrome instance via CDP. To use this feature:\n\n1. Launch Chrome with remote debugging enabled:\n```bash\n/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222\n```\n\n2. The server will automatically attempt to connect to the running Chrome instance first, before launching a new browser.\n\n## Credits\n\nThis project is a fork of [executeautomation/mcp-playwright](https://github.com/executeautomation/mcp-playwright), enhanced with CDP support for connecting to running Chrome instances.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "browser",
        "cdp",
        "browser automation",
        "automation web",
        "playwright chrome"
      ],
      "category": "browser-automation"
    },
    "lightpanda-io--gomcp": {
      "owner": "lightpanda-io",
      "name": "gomcp",
      "url": "https://github.com/lightpanda-io/gomcp",
      "imageUrl": "",
      "description": "An MCP server in Go for Lightpanda, the ultra fast headless browser designed for web automation",
      "stars": 33,
      "forks": 7,
      "license": "Apache License 2.0",
      "language": "Go",
      "updated_at": "2025-09-30T15:25:54Z",
      "readme_content": "# Lightpanda Go MCP server\n\n`gomcp` is an [MCP server](https://modelcontextprotocol.io) written in\n[Go](https://go.dev/).\n\nIt exposes tools to interact with [Lightpanda Browser](https://lightpanda.io/)\nvia [CDP protocol](https://chromedevtools.github.io/devtools-protocol/).\n\n```mermaid\nflowchart LR;\n  A[CDP Client]-->|SSE or stdio|gomcp;\n  gomcp-->|CDP|B[Lightpanda browser];\n```\n\n## Installation\n\n### Requirements\n\n`gomcp` requires you to have already installed [Lightpanda\nBrowser](https://lightpanda.io/docs/getting-started/installation).\n\n### Build from source\n\nYou need to install [Go](https://go.dev/doc/install) to build from source.\n\nOnce you have cloned the repository, build the binary with `go build`.\n\n## Usage\n\nBy default, `gocmp` starts a local instance of Lightpanda browser.\n\nOn the first run, you need to download the binary with the command:\n```\n$ gomcp download\n```\nThe browser is stored in the user config directory.\n`$XDG_CONFIG_HOME/lightpanda-gomcp` or `HOME/.config/lightpanda-gomcp` on\nLinux, `$HOME/Library/Application Support/lightpanda-gomcp` on Macosx.\n\nYou can remove the downloaded binary with `gomcp cleanup` command.\n\nYou can connect on a remote browser with the option `--cdp`.\n```\n$ gomcp -cdp ws://127.0.0.1:9222 stdio\n```\n\n###  Configure Claude Desktop\n\nYou can configure `gomcp` as a source for your [Claude\nDesktop](https://claude.ai/download).\n\nClaude Desktop uses the\n[stdio](https://modelcontextprotocol.io/docs/concepts/transports#standard-input%2Foutput-stdio)\ntransport to connect to an MCP server.\n\nEdit the `claude_desktop_config.json` configuration file and add `gomcp` as the mcp\nserver **and restart Claude Desktop**.\n\n```json\n{\n  \"mcpServers\": {\n    \"lightpanda\": {\n      \"command\": \"/path/to/gomcp\",\n      \"args\": [\"stdio\"]\n    }\n  }\n}\n```\n\nThe model context protocol website gives a way to find\n[claude_desktop_config.json](https://modelcontextprotocol.io/quickstart/user#2-add-the-filesystem-mcp-server)\nfile.\n\n### Standard input/output (stdio)\n\nYou can start `gomcp` as a\n[stdio](https://modelcontextprotocol.io/docs/concepts/transports#standard-input%2Foutput-stdio).\n\n```\n$ ./gomcp stdio\n```\n\n### Server-Sent Events (SSE)\n\nYou can start `gomcp` as a\n[SSE](https://modelcontextprotocol.io/docs/concepts/transports#server-sent-events-sse).\n\nBy default, the server listens to the HTTP connection at `127.0.0.1:8081`.\n\n```\n$ ./gomcp sse\n2025/05/06 14:37:13 INFO server listening addr=127.0.0.1:8081\n```\n## Thanks\n\n`gomcp` is built thanks of open source projects, in particular:\n* [Go language](https://go.dev)\n* [Chromedp](https://github.com/chromedp/chromedp)\n* [JohannesKaufmann/html-to-markdown](github.com/JohannesKaufmann/html-to-markdown)\n* [Lightpanda Browser](https://github.com/lightpanda-io/browser)\n",
      "npm_url": "https://www.npmjs.com/package/gomcp",
      "npm_downloads": 867,
      "keywords": [
        "automation",
        "web",
        "browser",
        "browser automation",
        "automation web",
        "web automation"
      ],
      "category": "browser-automation"
    },
    "lingxingchi--mcp-server-browserbase": {
      "owner": "lingxingchi",
      "name": "mcp-server-browserbase",
      "url": "https://github.com/lingxingchi/mcp-server-browserbase",
      "imageUrl": "/freedevtools/mcp/pfp/lingxingchi.webp",
      "description": "Automates interaction with web pages in a cloud browser environment, enabling tasks such as data extraction, screenshot capture, and JavaScript execution.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-04-22T09:43:36Z",
      "readme_content": "# Browserbase MCP Server\n\n\n\n[The Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) is an open protocol that enables seamless integration between LLM applications and external data sources and tools. Whether you‚Äôre building an AI-powered IDE, enhancing a chat interface, or creating custom AI workflows, MCP provides a standardized way to connect LLMs with the context they need.\n\nThis server provides cloud browser automation capabilities using [Browserbase](https://www.browserbase.com/), [Puppeteer](https://pptr.dev/), and [Stagehand](https://github.com/browserbase/stagehand). This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a cloud browser environment.\n\nTo learn to get started with Browserbase, check out [Browserbase MCP](./browserbase/README.md) or [Stagehand MCP](./stagehand/README.md).\n\n## Getting Started with available MCPs\n\nüåê **Browserbase MCP** - Located in [`browserbase/`](./browserbase/)\n\n| Feature            | Description                               |\n| ------------------ | ----------------------------------------- |\n| Browser Automation | Control and orchestrate cloud browsers    |\n| Data Extraction    | Extract structured data from any webpage  |\n| Console Monitoring | Track and analyze browser console logs    |\n| Screenshots        | Capture full-page and element screenshots |\n| JavaScript         | Execute custom JS in the browser context  |\n| Web Interaction    | Navigate, click, and fill forms with ease |\n\nü§ò **Stagehand MCP** - Located in [`stagehand/`](./stagehand/)\n\n| Feature             | Description                                                                                                                                                    |\n| ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Atomic Instructions | Execute precise actions like `act(\"click the login button\")` or `extract(\"find the red shoes\")`                                                                |\n| Model Flexibility   | Supports multiple models, including OpenAI's GPT-4 and Anthropic's Claude-3.7 Sonnet                                                                           |\n| Modular Design      | Easily integrate new models with minimal changes                                                                                                               |\n| Vision Support      | Use annotated screenshots for complex DOMs                                                                                                                     |\n| Open Source         | Contribute to the project and join the [Slack community](https://join.slack.com/t/stagehand-dev/shared_invite/zt-2uvuobu50-~wVSx2Si75CPa3332hwVEw) for support |\n\n### Alternative Installation Methods\n\n[Smithery](https://smithery.ai/server/@browserbasehq/mcp-browserbase)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "browserbase",
        "automation",
        "browser",
        "browser automation",
        "automation web",
        "browserbase automates"
      ],
      "category": "browser-automation"
    },
    "lxe--chrome-mcp": {
      "owner": "lxe",
      "name": "chrome-mcp",
      "url": "https://github.com/lxe/chrome-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/lxe.webp",
      "description": "Control a Chrome browser instance programmatically, navigate web pages, interact with elements, and retrieve page information to enhance automation workflows.",
      "stars": 42,
      "forks": 6,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-16T20:19:48Z",
      "readme_content": "# Chrome MCP Server\n\nA Model Context Protocol (MCP) server that provides fine-grained control over a Chrome browser instance through the Chrome DevTools Protocol (CDP).\n\n## Prerequisites\n\n- [Bun](https://bun.sh/) (recommended) or Node.js (v14 or higher)\n- Chrome browser with remote debugging enabled\n\n## Setup\n\n### Installing Bun\n\n1. Install Bun (if not already installed):\n```bash\n# macOS, Linux, or WSL\ncurl -fsSL https://bun.sh/install | bash\n\n# Windows (using PowerShell)\npowershell -c \"irm bun.sh/install.ps1 | iex\"\n\n# Alternatively, using npm\nnpm install -g bun\n```\n\n2. Start Chrome with remote debugging enabled:\n\n   ```bash\n   # macOS\n   /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222\n\n   # Windows\n   start chrome --remote-debugging-port=9222\n\n   # Linux\n   google-chrome --remote-debugging-port=9222\n   ```\n\n3. Install dependencies:\n```bash\nbun install\n```\n\n4. Start the server:\n```bash\nbun start\n```\n\nFor development with hot reloading:\n```bash\nbun dev\n```\n\nThe server will start on port 3000 by default. You can change this by setting the `PORT` environment variable.\n\n## Configuring Roo Code to use this MCP server\n\nTo use this Chrome MCP server with Roo Code:\n\n1. Open Roo Code settings\n2. Navigate to the MCP settings configuration file at:\n   - macOS: `~/Library/Application Support/Code/User/globalStorage/rooveterinaryinc.roo-cline/settings/cline_mcp_settings.json`\n   - Windows: `%APPDATA%\\Code\\User\\globalStorage\\rooveterinaryinc.roo-cline\\settings\\cline_mcp_settings.json`\n   - Linux: `~/.config/Code/User/globalStorage/rooveterinaryinc.roo-cline/settings/cline_mcp_settings.json`\n\n3. Add the following configuration to the `mcpServers` object:\n\n```json\n{\n  \"mcpServers\": {\n    \"chrome-control\": {\n      \"url\": \"http://localhost:3000/sse\",\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n  }\n}\n```\n\n4. Save the file and restart Roo Code to apply the changes.\n\n5. You can now use the Chrome MCP tools in Roo Code to control the browser.\n\n## Available Tools\n\nThe server provides the following tools for browser control:\n\n### navigate\nNavigate to a specific URL.\n\nParameters:\n- `url` (string): The URL to navigate to\n\n### click\nClick at specific coordinates.\n\nParameters:\n- `x` (number): X coordinate\n- `y` (number): Y coordinate\n\n### type\nType text at the current focus.\n\nParameters:\n- `text` (string): Text to type\n\n### clickElement\nClick on an element by its index in the page info.\n\nParameters:\n- `selector` (string): Element index (e.g., \"0\" for the first element)\n\n### getText\nGet text content of an element using a CSS selector.\n\nParameters:\n- `selector` (string): CSS selector to find the element\n\n### getPageInfo\nGet semantic information about the page including interactive elements and text nodes.\n\n### getPageState\nGet current page state including URL, title, scroll position, and viewport size.\n\n## Usage\n\nThe server implements the Model Context Protocol with SSE transport. Connect to the server at:\n- SSE endpoint: `http://localhost:3000/sse`\n- Messages endpoint: `http://localhost:3000/message?sessionId=...`\n\nWhen using with Roo Code, the configuration in the MCP settings file will handle the connection automatically.\n\n## Development\n\nTo run the server in development mode with hot reloading:\n```bash\nbun dev\n```\n\nThis uses Bun's built-in watch mode to automatically restart the server when files change.\n\n## License\n\nMIT ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "chrome",
        "browser",
        "automation",
        "browser automation",
        "lxe chrome",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "m2rads--limetest-arch": {
      "owner": "m2rads",
      "name": "limetest-arch",
      "url": "https://github.com/m2rads/limetest-arch",
      "imageUrl": "/freedevtools/mcp/pfp/m2rads.webp",
      "description": "Automate testing processes using AI-driven validation with a focus on end-to-end testing. Utilizes Playwright for lightweight and deterministic testing, allowing tests to be defined in natural language and executed efficiently.",
      "stars": 2,
      "forks": 3,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-07-08T08:31:06Z",
      "readme_content": "# Limetest\n\nLimetest is the most light weight end to end testing framework with AI capabilities that can run in your CI workflows. Define your test cases in natural language and let AI handle the execution.\n\n### Key Features\n\n- **Optimized for AI**: Define your test cases in plain language and let AI execute them end to end.\n- **Lightweight & Efficient**: Leverages Playwright snapshot instead of pixel analysis for faster, more reliable execution.\n- **Vision Capabilities**: Falls back to vision mode when snapshot mode fails during more sophisticated test scenarios.\n\n## Installation\n\n```bash\nnpm install @limetest/limetest\n\nnpx playwright install\n```\n\n### User data directory\n\nlimtest will launch Chrome browser with the new profile, located at\n\n```\n- `%USERPROFILE%\\AppData\\Local\\ms-limetest\\mcp-chrome-profile` on Windows\n- `~/Library/Caches/ms-limetest/mcp-chrome-profile` on macOS\n- `~/.cache/ms-limetest/mcp-chrome-profile` on Linux\n```\n\n## Usage\n\n### Run Tests\nUse --headless for running tests headlessly in CI workflows\n\n```bash\nnpx limetest example\n```\n\n## limetest MCP Server\n\nhttps://github.com/user-attachments/assets/b801f239-dc66-4b3b-bcf2-42e2a9a68721\n\nA Model Context Protocol (MCP) server powered by [Playwright](https://playwright.dev) that streamlinse end to end testing for your MCP client.\n\n### Use Cases\n\n- Automated testing planned and executed by LLMs\n\n### Example config\n\nAfter cloning this repo, build and add the E2E MCP server to your MCP Client as such:\nNotice that you need OpenAI API key to run this MCP server in end to end mode.\n\n```bash\nnpm install @limetest/mcp\n\nnpx playwright install\n```\n\nThen:\n\n```js\n{\n    \"mcpServers\": {\n        \"limetest\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"npx @limetest/mcp\",\n                \"--api-key=<your openai api key>\"\n            ]\n        }\n    }\n}\n```\n\nAll the logged in information will be stored in that profile, you can delete it between sessions if you'd like to clear the offline state.\n\n## Acknowledgements\n\nLimetest is based on [Microsoft's Playwright MCP](https://github.com/microsoft/playwright-mcp) and optimized for automated end-to-end testing as a standalone framework. This project is distributed under the Apache 2.0 License.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "testing",
        "automate",
        "browser automation",
        "automation web",
        "automate testing"
      ],
      "category": "browser-automation"
    },
    "madtank--nova-act-mcp": {
      "owner": "madtank",
      "name": "nova-act-mcp",
      "url": "https://github.com/madtank/nova-act-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/madtank.webp",
      "description": "Enables interactive control of web browsers using natural language instructions, allowing for the automation of web tasks while providing visibility into the agent's reasoning process. Supports session management with persistent profiles and detailed feedback on agent thinking.",
      "stars": 16,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-27T17:54:30Z",
      "readme_content": "# nova-act-mcp-server\n[![PyPI](https://img.shields.io/pypi/v/nova-act-mcp-server)](https://pypi.org/project/nova-act-mcp-server/)\n\n**nova‚Äëact‚Äëmcp‚Äëserver** is a zero‚Äëinstall [Model Context Protocol](https://modelcontextprotocol.io/) (MCP) server that exposes [Amazon Nova Act](https://nova.amazon.com/act) browser‚Äëautomation tools for AI agents.\n\n## What's New in v3.2.0\n\n- **File-Based Screenshots**: Screenshots now save to files instead of inline base64, eliminating MCP message size limits\n- **Optimized Image Quality**: Reduced screenshot quality (60/30) for smaller file sizes (~50KB vs 500KB+)  \n- **Enhanced Error Handling**: Improved exception handling for browser operations\n- **Better Testing**: Comprehensive test coverage for screenshot functionality\n- **MCP Inspector Integration**: New testing script for easy validation\n\n## Quick Start (uvx)\n\n### Step 1: Get a Nova Act API Key\nObtain your API key from [Nova Act](https://nova.amazon.com/act).\n\n### Step 2: Add to MCP Client Configuration\n\n```jsonc\n{\n  \"mcpServers\": {\n    \"nova_act_browser_tools\": {\n      \"command\": \"uvx\",\n      \"args\": [\"nova-act-mcp-server\"],\n      \"env\": { \"NOVA_ACT_API_KEY\": \"YOUR_NOVA_ACT_API_KEY_HERE\" }\n    }\n  }\n}\n```\n\n### Step 3: Start Using Browser Tools\nAI agents can now call tools like `start_session`, `execute_instruction`, etc. through any MCP-compatible client such as Claude Desktop or VS Code.\n\n## Core Tools Overview\n\n| Tool | Description | Key Parameters |\n|------|-------------|----------------|\n| `start_session` | Starts a new browser session | `url`, `headless=True` |\n| `execute_instruction` | Runs a natural language instruction in the browser | `session_id`, `instruction` |\n| `inspect_browser` | Gets a screenshot and state of the current browser | `session_id`, `include_screenshot=True` |\n| `end_session` | Closes a browser session and cleans up resources | `session_id` |\n| `list_browser_sessions` | Lists all active browser sessions | None |\n\n## Local Development & Testing\n\n### Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/madtank/nova-act-mcp.git\ncd nova-act-mcp\n\n# Create and activate virtual environment\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install with development dependencies\nuv pip install -e .[dev]\n```\n\n### Running Tests\n\n```bash\n# Run all tests (integration tests require NOVA_ACT_API_KEY)\npytest\n\n# Run only unit tests (no API key required)\npytest tests/unit\n\n# Run integration tests (requires API key)\nNOVA_ACT_API_KEY=\"your_key_here\" pytest tests/integration\n```\n\n### Running Locally with MCP Inspector UI\n\n```bash\n# Start the server with the MCP Inspector\nnpx @modelcontextprotocol/inspector -e PYTHONUNBUFFERED=1 -e NOVA_ACT_API_KEY=\"YOUR_KEY\" -- python -m nova_mcp_server\n```\n\nThen visit `http://localhost:6274` in your browser. For optimal experience, set the Inspector UI timeout to 60 seconds for `start_session` operations.\n\n## Advanced Tools\n\n| Tool | Description |\n|------|-------------|\n| `fetch_file` | Downloads a file from the current page |\n| `view_html_log` | Gets the HTML content of the current page |\n| `compress_logs` | Creates and returns a ZIP of session logs and screenshots |\n\n## License\n[MIT](LICENSE)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "browser",
        "browsers",
        "browser automation",
        "automation web",
        "control web"
      ],
      "category": "browser-automation"
    },
    "markbustamante77--mcp": {
      "owner": "markbustamante77",
      "name": "mcp",
      "url": "https://github.com/markbustamante77/mcp",
      "imageUrl": "/freedevtools/mcp/pfp/markbustamante77.webp",
      "description": "Facilitates interaction with web pages using structured accessibility snapshots for efficient browser automation without reliance on vision models. Enables web navigation, form-filling, data extraction, and testing with a deterministic approach.",
      "stars": 1,
      "forks": 1,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-04-17T19:04:28Z",
      "readme_content": "## Playwright MCP\n\nA Model Context Protocol (MCP) server that provides browser automation capabilities using [Playwright](https://playwright.dev). This server enables LLMs to interact with web pages through structured accessibility snapshots, bypassing the need for screenshots or visually-tuned models.\n\n### Key Features\n\n- **Fast and lightweight**: Uses Playwright's accessibility tree, not pixel-based input.\n- **LLM-friendly**: No vision models needed, operates purely on structured data.\n- **Deterministic tool application**: Avoids ambiguity common with screenshot-based approaches.\n\n### Use Cases\n\n- Web navigation and form-filling\n- Data extraction from structured content\n- Automated testing driven by LLMs\n- General-purpose browser interaction for agents\n\n### Example config\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/mcp@latest\"\n      ]\n    }\n  }\n}\n```\n\n\n#### Installation in VS Code\n\nInstall the Playwright MCP server in VS Code using one of these buttons:\n\n<!--\n// Generate using?:\nconst config = JSON.stringify({ name: 'playwright', command: 'npx', args: [\"-y\", \"@playwright/mcp@latest\"] });\nconst urlForWebsites = `vscode:mcp/install?${encodeURIComponent(config)}`;\n// Github markdown does not allow linking to `vscode:` directly, so you can use our redirect:\nconst urlForGithub = `https://insiders.vscode.dev/redirect?url=${encodeURIComponent(urlForWebsites)}`;\n-->\n\n[<img src=\"https://img.shields.io/badge/VS_Code-VS_Code?style=flat-square&label=Install%20Server&color=0098FF\" alt=\"Install in VS Code\">](https://insiders.vscode.dev/redirect?url=vscode%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522%2540playwright%252Fmcp%2540latest%2522%255D%257D)  [<img alt=\"Install in VS Code Insiders\" src=\"https://img.shields.io/badge/VS_Code_Insiders-VS_Code_Insiders?style=flat-square&label=Install%20Server&color=24bfa5\">](https://insiders.vscode.dev/redirect?url=vscode-insiders%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522%2540playwright%252Fmcp%2540latest%2522%255D%257D)\n\nAlternatively, you can install the Playwright MCP server using the VS Code CLI:\n\n```bash\n# For VS Code\ncode --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@playwright/mcp@latest\"]}'\n```\n\n```bash\n# For VS Code Insiders\ncode-insiders --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@playwright/mcp@latest\"]}'\n```\n\nAfter installation, the Playwright MCP server will be available for use with your GitHub Copilot agent in VS Code.\n\n### CLI Options\n\nThe Playwright MCP server supports the following command-line options:\n\n- `--browser <browser>`: Browser or chrome channel to use. Possible values:\n  - `chrome`, `firefox`, `webkit`, `msedge`\n  - Chrome channels: `chrome-beta`, `chrome-canary`, `chrome-dev`\n  - Edge channels: `msedge-beta`, `msedge-canary`, `msedge-dev`\n  - Default: `chrome`\n- `--caps <caps>`: Comma-separated list of capabilities to enable, possible values: tabs, pdf, history, wait, files, install. Default is all.\n- `--cdp-endpoint <endpoint>`: CDP endpoint to connect to\n- `--executable-path <path>`: Path to the browser executable\n- `--headless`: Run browser in headless mode (headed by default)\n- `--port <port>`: Port to listen on for SSE transport\n- `--user-data-dir <path>`: Path to the user data directory\n- `--vision`: Run server that uses screenshots (Aria snapshots are used by default)\n\n### User data directory\n\nPlaywright MCP will launch the browser with the new profile, located at\n\n```\n- `%USERPROFILE%\\AppData\\Local\\ms-playwright\\mcp-chrome-profile` on Windows\n- `~/Library/Caches/ms-playwright/mcp-chrome-profile` on macOS\n- `~/.cache/ms-playwright/mcp-chrome-profile` on Linux\n```\n\nAll the logged in information will be stored in that profile, you can delete it between sessions if you'd like to clear the offline state.\n\n\n### Running headless browser (Browser without GUI).\n\nThis mode is useful for background or batch operations.\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/mcp@latest\",\n        \"--headless\"\n      ]\n    }\n  }\n}\n```\n\n### Running headed browser on Linux w/o DISPLAY\n\nWhen running headed browser on system w/o display or from worker processes of the IDEs,\nrun the MCP server from environment with the DISPLAY and pass the `--port` flag to enable SSE transport.\n\n```bash\nnpx @playwright/mcp@latest --port 8931\n```\n\nAnd then in MCP client config, set the `url` to the SSE endpoint:\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"url\": \"http://localhost:8931/sse\"\n    }\n  }\n}\n```\n\n### Tool Modes\n\nThe tools are available in two modes:\n\n1. **Snapshot Mode** (default): Uses accessibility snapshots for better performance and reliability\n2. **Vision Mode**: Uses screenshots for visual-based interactions\n\nTo use Vision Mode, add the `--vision` flag when starting the server:\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/mcp@latest\",\n        \"--vision\"\n      ]\n    }\n  }\n}\n```\n\nVision Mode works best with the computer use models that are able to interact with elements using\nX Y coordinate space, based on the provided screenshot.\n\n### Programmatic usage with custom transports\n\n```js\nimport { createServer } from '@playwright/mcp';\n\n// ...\n\nconst server = createServer({\n  launchOptions: { headless: true }\n});\ntransport = new SSEServerTransport(\"/messages\", res);\nserver.connect(transport);\n```\n\n### Snapshot-based Interactions\n\n- **browser_click**\n  - Description: Perform click on a web page\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n\n- **browser_hover**\n  - Description: Hover over element on page\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n\n- **browser_drag**\n  - Description: Perform drag and drop between two elements\n  - Parameters:\n    - `startElement` (string): Human-readable source element description used to obtain permission to interact with the element\n    - `startRef` (string): Exact source element reference from the page snapshot\n    - `endElement` (string): Human-readable target element description used to obtain permission to interact with the element\n    - `endRef` (string): Exact target element reference from the page snapshot\n\n- **browser_type**\n  - Description: Type text into editable element\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n    - `text` (string): Text to type into the element\n    - `submit` (boolean, optional): Whether to submit entered text (press Enter after)\n    - `slowly` (boolean, optional): Whether to type one character at a time. Useful for triggering key handlers in the page. By default entire text is filled in at once.\n\n- **browser_select_option**\n  - Description: Select an option in a dropdown\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n    - `values` (array): Array of values to select in the dropdown. This can be a single value or multiple values.\n\n- **browser_snapshot**\n  - Description: Capture accessibility snapshot of the current page, this is better than screenshot\n  - Parameters: None\n\n- **browser_take_screenshot**\n  - Description: Take a screenshot of the current page. You can't perform actions based on the screenshot, use browser_snapshot for actions.\n  - Parameters:\n    - `raw` (boolean, optional): Whether to return without compression (in PNG format). Default is false, which returns a JPEG image.\n\n### Vision-based Interactions\n\n- **browser_screen_move_mouse**\n  - Description: Move mouse to a given position\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `x` (number): X coordinate\n    - `y` (number): Y coordinate\n\n- **browser_screen_capture**\n  - Description: Take a screenshot of the current page\n  - Parameters: None\n\n- **browser_screen_click**\n  - Description: Click left mouse button\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `x` (number): X coordinate\n    - `y` (number): Y coordinate\n\n- **browser_screen_drag**\n  - Description: Drag left mouse button\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `startX` (number): Start X coordinate\n    - `startY` (number): Start Y coordinate\n    - `endX` (number): End X coordinate\n    - `endY` (number): End Y coordinate\n\n- **browser_screen_type**\n  - Description: Type text\n  - Parameters:\n    - `text` (string): Text to type\n    - `submit` (boolean, optional): Whether to submit entered text (press Enter after)\n\n- **browser_press_key**\n  - Description: Press a key on the keyboard\n  - Parameters:\n    - `key` (string): Name of the key to press or a character to generate, such as `ArrowLeft` or `a`\n\n### Tab Management\n\n- **browser_tab_list**\n  - Description: List browser tabs\n  - Parameters: None\n\n- **browser_tab_new**\n  - Description: Open a new tab\n  - Parameters:\n    - `url` (string, optional): The URL to navigate to in the new tab. If not provided, the new tab will be blank.\n\n- **browser_tab_select**\n  - Description: Select a tab by index\n  - Parameters:\n    - `index` (number): The index of the tab to select\n\n- **browser_tab_close**\n  - Description: Close a tab\n  - Parameters:\n    - `index` (number, optional): The index of the tab to close. Closes current tab if not provided.\n\n### Navigation\n\n- **browser_navigate**\n  - Description: Navigate to a URL\n  - Parameters:\n    - `url` (string): The URL to navigate to\n\n- **browser_navigate_back**\n  - Description: Go back to the previous page\n  - Parameters: None\n\n- **browser_navigate_forward**\n  - Description: Go forward to the next page\n  - Parameters: None\n\n### Keyboard\n\n- **browser_press_key**\n  - Description: Press a key on the keyboard\n  - Parameters:\n    - `key` (string): Name of the key to press or a character to generate, such as `ArrowLeft` or `a`\n\n### Console\n\n- **browser_console_messages**\n  - Description: Returns all console messages\n  - Parameters: None\n\n### Files and Media\n\n- **browser_file_upload**\n  - Description: Choose one or multiple files to upload\n  - Parameters:\n    - `paths` (array): The absolute paths to the files to upload. Can be a single file or multiple files.\n\n- **browser_pdf_save**\n  - Description: Save page as PDF\n  - Parameters: None\n\n### Utilities\n\n- **browser_wait**\n  - Description: Wait for a specified time in seconds\n  - Parameters:\n    - `time` (number): The time to wait in seconds (capped at 10 seconds)\n\n- **browser_close**\n  - Description: Close the page\n  - Parameters: None\n\n- **browser_install**\n  - Description: Install the browser specified in the config. Call this if you get an error about the browser not being installed.\n  - Parameters: None\n",
      "npm_url": "https://www.npmjs.com/package/mcp",
      "npm_downloads": 17624,
      "keywords": [
        "scraping",
        "automation",
        "browser",
        "browser automation",
        "automation web",
        "web navigation"
      ],
      "category": "browser-automation"
    },
    "merajmehrabi--puppeteer-mcp-server": {
      "owner": "merajmehrabi",
      "name": "puppeteer-mcp-server",
      "url": "https://github.com/merajmehrabi/puppeteer-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/merajmehrabi.webp",
      "description": "Browser automation through Puppeteer enables interaction with new browser instances and existing Chrome windows, facilitating automated web tasks.",
      "stars": 269,
      "forks": 38,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T13:33:07Z",
      "readme_content": "# Puppeteer MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@merajmehrabi/puppeteer-mcp-server)](https://smithery.ai/server/@merajmehrabi/puppeteer-mcp-server)\nThis MCP server provides browser automation capabilities through Puppeteer, allowing interaction with both new browser instances and existing Chrome windows.\n\n## Acknowledgment\n\nThis project is an experimental implementation inspired by [@modelcontextprotocol/server-puppeteer](https://github.com/modelcontextprotocol/servers). While it shares similar goals and concepts, it explores alternative approaches to browser automation through the Model Context Protocol.\n\n<a href=\"https://glama.ai/mcp/servers/lpt1tvbubf\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/lpt1tvbubf/badge\" alt=\"Puppeteer Server MCP server\" /></a>\n\n## Features\n\n- Navigate web pages\n- Take screenshots\n- Click elements\n- Fill forms\n- Select options\n- Hover elements\n- Execute JavaScript\n- Smart Chrome tab management:\n  - Connect to active Chrome tabs\n  - Preserve existing Chrome instances\n  - Intelligent connection handling\n\n## Project Structure\n\n```\n/\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îú‚îÄ‚îÄ config/        # Configuration modules\n‚îÇ   ‚îú‚îÄ‚îÄ tools/         # Tool definitions and handlers\n‚îÇ   ‚îú‚îÄ‚îÄ browser/       # Browser connection management\n‚îÇ   ‚îú‚îÄ‚îÄ types/         # TypeScript type definitions\n‚îÇ   ‚îú‚îÄ‚îÄ resources/     # Resource handlers\n‚îÇ   ‚îî‚îÄ‚îÄ server.ts      # Server initialization\n‚îú‚îÄ‚îÄ index.ts          # Entry point\n‚îî‚îÄ‚îÄ README.md        # Documentation\n```\n\n## Installation\n\n### Option 1: Install from npm\n\n```bash\nnpm install -g puppeteer-mcp-server\n```\n\nYou can also run it directly without installation using npx:\n\n```bash\nnpx puppeteer-mcp-server\n```\n\n### Option 2: Install from source\n\n1. Clone this repository or download the source code\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n3. Build the project:\n\n```bash\nnpm run build\n```\n\n4. Run the server:\n\n```bash\nnpm start\n```\n\n## MCP Server Configuration\n\nTo use this tool with Claude, you need to add it to your MCP settings configuration file.\n\n### For Claude Desktop App\n\nAdd the following to your Claude Desktop configuration file (located at `%APPDATA%\\Claude\\claude_desktop_config.json` on Windows or `~/Library/Application Support/Claude/claude_desktop_config.json` on macOS):\n\n#### If installed globally via npm:\n\n```json\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"puppeteer-mcp-server\",\n      \"args\": [],\n      \"env\": {}\n    }\n  }\n}\n```\n\n#### Using npx (without installation):\n\n```json\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"puppeteer-mcp-server\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\n#### If installed from source:\n\n```json\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/puppeteer-mcp-server/dist/index.js\"],\n      \"env\": {\n        \"NODE_OPTIONS\": \"--experimental-modules\"\n      }\n    }\n  }\n}\n```\n\n### For Claude VSCode Extension\n\nAdd the following to your Claude VSCode extension MCP settings file (located at `%APPDATA%\\Code\\User\\globalStorage\\saoudrizwan.claude-dev\\settings\\cline_mcp_settings.json` on Windows or `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json` on macOS):\n\n#### If installed globally via npm:\n\n```json\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"puppeteer-mcp-server\",\n      \"args\": [],\n      \"env\": {}\n    }\n  }\n}\n```\n\n#### Using npx (without installation):\n\n```json\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"puppeteer-mcp-server\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\n#### If installed from source:\n\n```json\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/puppeteer-mcp-server/dist/index.js\"],\n      \"env\": {\n        \"NODE_OPTIONS\": \"--experimental-modules\"\n      }\n    }\n  }\n}\n```\n\nFor source installation, replace `path/to/puppeteer-mcp-server` with the actual path to where you installed this tool.\n\n## Usage\n\n### Standard Mode\n\nThe server will launch a new browser instance by default.\n\n### Active Tab Mode\n\nTo connect to an existing Chrome window:\n\n1. Close any existing Chrome instances completely\n\n2. Launch Chrome with remote debugging enabled:\n   ```bash\n   # Windows\n   \"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\" --remote-debugging-port=9222\n\n   # macOS\n   /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222\n\n   # Linux\n   google-chrome --remote-debugging-port=9222\n   ```\n\n3. Navigate to your desired webpage in Chrome\n\n4. Connect using the `puppeteer_connect_active_tab` tool:\n   ```json\n   {\n     \"targetUrl\": \"https://example.com\", // Optional: specific tab URL\n     \"debugPort\": 9222 // Optional: defaults to 9222\n   }\n   ```\n\nThe server will:\n- Detect and connect to the Chrome instance running with remote debugging enabled\n- Preserve your Chrome instance (won't close it)\n- Find and connect to non-extension tabs\n- Provide clear error messages if connection fails\n\n## Available Tools\n\n### puppeteer_connect_active_tab\nConnect to an existing Chrome instance with remote debugging enabled.\n- Optional:\n  - `targetUrl` - URL of the specific tab to connect to\n  - `debugPort` - Chrome debugging port (default: 9222)\n\n### puppeteer_navigate\nNavigate to a URL.\n- Required: `url` - The URL to navigate to\n\n### puppeteer_screenshot\nTake a screenshot of the current page or a specific element.\n- Required: `name` - Name for the screenshot\n- Optional:\n  - `selector` - CSS selector for element to screenshot\n  - `width` - Width in pixels (default: 800)\n  - `height` - Height in pixels (default: 600)\n\n### puppeteer_click\nClick an element on the page.\n- Required: `selector` - CSS selector for element to click\n\n### puppeteer_fill\nFill out an input field.\n- Required:\n  - `selector` - CSS selector for input field\n  - `value` - Text to enter\n\n### puppeteer_select\nUse dropdown menus.\n- Required:\n  - `selector` - CSS selector for select element\n  - `value` - Option value to select\n\n### puppeteer_hover\nHover over elements.\n- Required: `selector` - CSS selector for element to hover\n\n### puppeteer_evaluate\nExecute JavaScript in the browser console.\n- Required: `script` - JavaScript code to execute\n\n## Security Considerations\n\nWhen using remote debugging:\n- Only enable on trusted networks\n- Use a unique debugging port\n- Close debugging port when not in use\n- Never expose debugging port to public networks\n\n## Logging and Debugging\n\n### File-based Logging\nThe server implements comprehensive logging using Winston:\n\n- Location: `logs/` directory\n- File Pattern: `mcp-puppeteer-YYYY-MM-DD.log`\n- Log Rotation:\n  - Daily rotation\n  - Maximum size: 20MB per file\n  - Retention: 14 days\n  - Automatic compression of old logs\n\n### Log Levels\n- DEBUG: Detailed debugging information\n- INFO: General operational information\n- WARN: Warning messages\n- ERROR: Error events and exceptions\n\n### Logged Information\n- Server startup/shutdown events\n- Browser operations (launch, connect, close)\n- Navigation attempts and results\n- Tool executions and outcomes\n- Error details with stack traces\n- Browser console output\n- Resource usage (screenshots, console logs)\n\n## Error Handling\n\nThe server provides detailed error messages for:\n- Connection failures\n- Missing elements\n- Invalid selectors\n- JavaScript execution errors\n- Screenshot failures\n\nEach tool call returns:\n- Success/failure status\n- Detailed error message if failed\n- Operation result data if successful\n\nAll errors are also logged to the log files with:\n- Timestamp\n- Error message\n- Stack trace (when available)\n- Context information\n\n## Contributing\n\nContributions are welcome! Please read our [Contributing Guidelines](CONTRIBUTING.md) for details on how to submit pull requests, report issues, and contribute to the project.\n\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "https://www.npmjs.com/package/puppeteer-mcp-server",
      "npm_downloads": 40345,
      "keywords": [
        "puppeteer",
        "automation",
        "scraping",
        "automation puppeteer",
        "browser automation",
        "puppeteer enables"
      ],
      "category": "browser-automation"
    },
    "mfengzhishang--mcp": {
      "owner": "mfengzhishang",
      "name": "mcp",
      "url": "https://github.com/mfengzhishang/mcp",
      "imageUrl": "/freedevtools/mcp/pfp/mfengzhishang.webp",
      "description": "Provides web scraping, structured data extraction, and web crawling capabilities. Integrates browser automation agents for tasks related to data retrieval from webpages.",
      "stars": 1,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-08-10T22:25:34Z",
      "readme_content": "# Hyperbrowser MCP Server\n[![smithery badge](https://smithery.ai/badge/@hyperbrowserai/mcp)](https://smithery.ai/server/@hyperbrowserai/mcp)\n\n![Frame 5](https://github.com/user-attachments/assets/3309a367-e94b-418a-a047-1bf1ad549c0a)\n\nThis is Hyperbrowser's Model Context Protocol (MCP) Server. It provides various tools to scrape, extract structured data, and crawl webpages. It also provides easy access to general purpose browser agents like OpenAI's CUA, Anthropic's Claude Computer Use, and Browser Use.\n\nMore information about the Hyperbrowser can be found [here](https://docs.hyperbrowser.ai/). The hyperbrowser API supports a superset of features present in the mcp server.\n\nMore information about the Model Context Protocol can be found [here](https://modelcontextprotocol.io/introduction).\n\n## Table of Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Tools](#tools)\n- [Configuration](#configuration)\n- [License](#license)\n\n## Installation\n\n### Manual Installation\nTo install the server, run:\n\n```bash\nnpx hyperbrowser-mcp <YOUR-HYPERBROWSER-API-KEY>\n```\n\n## Running on Cursor\nAdd to `~/.cursor/mcp.json` like this:\n```json\n{\n  \"mcpServers\": {\n    \"hyperbrowser\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"hyperbrowser-mcp\"],\n      \"env\": {\n        \"HYPERBROWSER_API_KEY\": \"YOUR-API-KEY\"\n      }\n    }\n  }\n}\n```\n\n## Running on Windsurf\nAdd to your `./codeium/windsurf/model_config.json` like this:\n```json\n{\n  \"mcpServers\": {\n    \"hyperbrowser\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"hyperbrowser-mcp\"],\n      \"env\": {\n        \"HYPERBROWSER_API_KEY\": \"YOUR-API-KEY\"\n      }\n    }\n  }\n}\n```\n\n### Development\n\nFor development purposes, you can run the server directly from the source code.\n\n1. Clone the repository:\n\n   ```sh\n   git clone git@github.com:hyperbrowserai/mcp.git hyperbrowser-mcp\n   cd hyperbrowser-mcp\n   ```\n\n2. Install dependencies:\n\n   ```sh\n   npm install # or yarn install\n   npm run build\n   ```\n\n3. Run the server:\n\n   ```sh\n   node dist/server.js\n   ```\n\n## Claude Desktop app\nThis is an example config for the Hyperbrowser MCP server for the Claude Desktop client.\n\n```json\n{\n  \"mcpServers\": {\n    \"hyperbrowser\": {\n      \"command\": \"npx\",\n      \"args\": [\"--yes\", \"hyperbrowser-mcp\"],\n      \"env\": {\n        \"HYPERBROWSER_API_KEY\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\n\n## Tools\n* `scrape_webpage` - Extract formatted (markdown, screenshot etc) content from any webpage \n* `crawl_webpages` - Navigate through multiple linked pages and extract LLM-friendly formatted content\n* `extract_structured_data` - Convert messy HTML into structured JSON\n* `search_with_bing` - Query the web and get results with Bing search\n* `browser_use_agent` - Fast, lightweight browser automation with the Browser Use agent\n* `openai_computer_use_agent` - General-purpose automation using OpenAI‚Äôs CUA model\n* `claude_computer_use_agent` - Complex browser tasks using Claude computer use\n* `create_profile` - Creates a new persistent Hyperbrowser profile.\n* `delete_profile` - Deletes an existing persistent Hyperbrowser profile.\n* `list_profiles` - Lists existing persistent Hyperbrowser profiles.\n\n### Installing via Smithery\n\nTo install Hyperbrowser MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@hyperbrowserai/mcp):\n\n```bash\nnpx -y @smithery/cli install @hyperbrowserai/mcp --client claude\n```\n\n## Resources\n\nThe server provides the documentation about hyperbrowser through the `resources` methods. Any client which can do discovery over resources has access to it.\n\n## License\n\nThis project is licensed under the MIT License.\n",
      "npm_url": "https://www.npmjs.com/package/mcp",
      "npm_downloads": 17624,
      "keywords": [
        "scraping",
        "automation",
        "webpages",
        "browser automation",
        "automation web",
        "web scraping"
      ],
      "category": "browser-automation"
    },
    "mhazarabad--browser-use-mcp": {
      "owner": "mhazarabad",
      "name": "browser-use-mcp",
      "url": "https://github.com/mhazarabad/browser-use-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Automate browser tasks using the Browser Use API. Manage and monitor automation tasks, including the ability to run, pause, and resume operations while retrieving task information.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "https://www.npmjs.com/package/browser-use-mcp",
      "npm_downloads": 620,
      "keywords": [
        "automation",
        "browser",
        "automate",
        "browser automation",
        "automate browser",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "miyuren--mcp-server-browserbase": {
      "owner": "miyuren",
      "name": "mcp-server-browserbase",
      "url": "https://github.com/miyuren/mcp-server-browserbase",
      "imageUrl": "/freedevtools/mcp/pfp/miyuren.webp",
      "description": "Automates web browsing and data extraction using cloud browser capabilities. Interacts with web pages, captures screenshots, and executes JavaScript in a secure environment.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-04-10T10:33:04Z",
      "readme_content": "# Browserbase MCP Server\n\n\n\n[The Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) is an open protocol that enables seamless integration between LLM applications and external data sources and tools. Whether you‚Äôre building an AI-powered IDE, enhancing a chat interface, or creating custom AI workflows, MCP provides a standardized way to connect LLMs with the context they need.\n\nThis server provides cloud browser automation capabilities using [Browserbase](https://www.browserbase.com/), [Puppeteer](https://pptr.dev/), and [Stagehand](https://github.com/browserbase/stagehand). This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a cloud browser environment.\n\nTo learn to get started with Browserbase, check out [Browserbase MCP](./browserbase/README.md) or [Stagehand MCP](./stagehand/README.md).\n\n## Getting Started with available MCPs\n\nüåê **Browserbase MCP** - Located in [`browserbase/`](./browserbase/)\n\n| Feature            | Description                               |\n| ------------------ | ----------------------------------------- |\n| Browser Automation | Control and orchestrate cloud browsers    |\n| Data Extraction    | Extract structured data from any webpage  |\n| Console Monitoring | Track and analyze browser console logs    |\n| Screenshots        | Capture full-page and element screenshots |\n| JavaScript         | Execute custom JS in the browser context  |\n| Web Interaction    | Navigate, click, and fill forms with ease |\n\nü§ò **Stagehand MCP** - Located in [`stagehand/`](./stagehand/)\n\n| Feature             | Description                                                                                                                                                    |\n| ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Atomic Instructions | Execute precise actions like `act(\"click the login button\")` or `extract(\"find the red shoes\")`                                                                |\n| Model Flexibility   | Supports multiple models, including OpenAI's GPT-4 and Anthropic's Claude-3.7 Sonnet                                                                           |\n| Modular Design      | Easily integrate new models with minimal changes                                                                                                               |\n| Vision Support      | Use annotated screenshots for complex DOMs                                                                                                                     |\n| Open Source         | Contribute to the project and join the [Slack community](https://join.slack.com/t/stagehand-dev/shared_invite/zt-2uvuobu50-~wVSx2Si75CPa3332hwVEw) for support |\n\n### Alternative Installation Methods\n\n[Smithery](https://smithery.ai/server/@browserbasehq/mcp-browserbase)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "browserbase",
        "automation",
        "browser",
        "browser automation",
        "automation web",
        "automates web"
      ],
      "category": "browser-automation"
    },
    "modelcontextprotocol--server-puppeteer": {
      "owner": "modelcontextprotocol",
      "name": "server-puppeteer",
      "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/puppeteer",
      "imageUrl": "",
      "description": "Browser automation for web scraping and interaction",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "https://www.npmjs.com/package/@modelcontextprotocol/server-puppeteer",
      "npm_downloads": 587530,
      "keywords": [
        "scraping",
        "automation",
        "puppeteer",
        "browser automation",
        "automation web",
        "puppeteer browser"
      ],
      "category": "browser-automation"
    },
    "modelcontextprotocol--servers": {
      "owner": "modelcontextprotocol",
      "name": "servers",
      "url": "https://github.com/modelcontextprotocol/servers",
      "imageUrl": "/freedevtools/mcp/pfp/modelcontextprotocol.webp",
      "description": "Provides browser automation capabilities, enabling LLMs to interact with web pages, take screenshots, and execute JavaScript within a real browser environment.",
      "stars": 69427,
      "forks": 8224,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T10:23:09Z",
      "readme_content": "# Model Context Protocol servers\n\nThis repository is a collection of *reference implementations* for the [Model Context Protocol](https://modelcontextprotocol.io/) (MCP), as well as references to community-built servers and additional resources.\n\nThe servers in this repository showcase the versatility and extensibility of MCP, demonstrating how it can be used to give Large Language Models (LLMs) secure, controlled access to tools and data sources.\nTypically, each MCP server is implemented with an MCP SDK:\n\n- [C# MCP SDK](https://github.com/modelcontextprotocol/csharp-sdk)\n- [Go MCP SDK](https://github.com/modelcontextprotocol/go-sdk)\n- [Java MCP SDK](https://github.com/modelcontextprotocol/java-sdk)\n- [Kotlin MCP SDK](https://github.com/modelcontextprotocol/kotlin-sdk)\n- [PHP MCP SDK](https://github.com/modelcontextprotocol/php-sdk)\n- [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)\n- [Ruby MCP SDK](https://github.com/modelcontextprotocol/ruby-sdk)\n- [Rust MCP SDK](https://github.com/modelcontextprotocol/rust-sdk)\n- [Swift MCP SDK](https://github.com/modelcontextprotocol/swift-sdk)\n- [TypeScript MCP SDK](https://github.com/modelcontextprotocol/typescript-sdk)\n\n> [!NOTE]\n> Lists in this README are maintained in alphabetical order to minimize merge conflicts when adding new items.\n\n## üåü Reference Servers\n\nThese servers aim to demonstrate MCP features and the official SDKs.\n\n- **[Everything](src/everything)** - Reference / test server with prompts, resources, and tools.\n- **[Fetch](src/fetch)** - Web content fetching and conversion for efficient LLM usage.\n- **[Filesystem](src/filesystem)** - Secure file operations with configurable access controls.\n- **[Git](src/git)** - Tools to read, search, and manipulate Git repositories.\n- **[Memory](src/memory)** - Knowledge graph-based persistent memory system.\n- **[Sequential Thinking](src/sequentialthinking)** - Dynamic and reflective problem-solving through thought sequences.\n- **[Time](src/time)** - Time and timezone conversion capabilities.\n\n### Archived\n\nThe following reference servers are now archived and can be found at [servers-archived](https://github.com/modelcontextprotocol/servers-archived).\n\n- **[AWS KB Retrieval](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/aws-kb-retrieval-server)** - Retrieval from AWS Knowledge Base using Bedrock Agent Runtime.\n- **[Brave Search](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/brave-search)** - Web and local search using Brave's Search API.  Has been replaced by the [official server](https://github.com/brave/brave-search-mcp-server).\n- **[EverArt](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/everart)** - AI image generation using various models.\n- **[GitHub](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/github)** - Repository management, file operations, and GitHub API integration.\n- **[GitLab](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/gitlab)** - GitLab API, enabling project management.\n- **[Google Drive](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/gdrive)** - File access and search capabilities for Google Drive.\n- **[Google Maps](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/google-maps)** - Location services, directions, and place details.\n- **[PostgreSQL](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/postgres)** - Read-only database access with schema inspection.\n- **[Puppeteer](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/puppeteer)** - Browser automation and web scraping.\n- **[Redis](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/redis)** - Interact with Redis key-value stores.\n- **[Sentry](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/sentry)** - Retrieving and analyzing issues from Sentry.io.\n- **[Slack](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/slack)** - Channel management and messaging capabilities. Now maintained by [Zencoder](https://github.com/zencoderai/slack-mcp-server)\n- **[SQLite](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/sqlite)** - Database interaction and business intelligence capabilities.\n\n## ü§ù Third-Party Servers\n\n### üéñÔ∏è Official Integrations\n\nOfficial integrations are maintained by companies building production ready MCP servers for their platforms.\n\n- <img height=\"12\" width=\"12\" src=\"https://www.21st.dev/favicon.ico\" alt=\"21st.dev Logo\" /> **[21st.dev Magic](https://github.com/21st-dev/magic-mcp)** - Create crafted UI components inspired by the best 21st.dev design engineers.\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/LpSK1tSZweomrAHOMAj9Gea96lA.svg\" alt=\"Paragon Logo\" /> **[ActionKit by Paragon](https://github.com/useparagon/paragon-mcp)** - Connect to 130+ SaaS integrations (e.g. Slack, Salesforce, Gmail) with Paragon‚Äôs [ActionKit](https://www.useparagon.com/actionkit) API.\n- <img height=\"12\" width=\"12\" src=\"https://invoxx-public-bucket.s3.eu-central-1.amazonaws.com/frontend-resources/adfin-logo-small.svg\" alt=\"Adfin Logo\" /> **[Adfin](https://github.com/Adfin-Engineering/mcp-server-adfin)** - The only platform you need to get paid - all payments in one place, invoicing and accounting reconciliations with [Adfin](https://www.adfin.com/).\n- <img height=\"12\" width=\"12\" src=\"https://github.com/AgentOps-AI/agentops/blob/main/docs/favicon.png\" alt=\"AgentOps Logo\" /> **[AgentOps](https://github.com/AgentOps-AI/agentops-mcp)** - Provide observability and tracing for debugging AI agents with [AgentOps](https://www.agentops.ai/) API.\n- <img height=\"12\" width=\"12\" src=\"https://www.agentql.com/favicon/favicon.png\" alt=\"AgentQL Logo\" /> **[AgentQL](https://github.com/tinyfish-io/agentql-mcp)** - Enable AI agents to get structured data from unstructured web with [AgentQL](https://www.agentql.com/).\n- <img height=\"12\" width=\"12\" src=\"https://agentrpc.com/favicon.ico\" alt=\"AgentRPC Logo\" /> **[AgentRPC](https://github.com/agentrpc/agentrpc)** - Connect to any function, any language, across network boundaries using [AgentRPC](https://www.agentrpc.com/).\n- **[Agentset](https://github.com/agentset-ai/mcp-server)** - RAG for your knowledge base connected to [Agentset](https://agentset.ai).\n- <img height=\"12\" width=\"12\" src=\"https://aiven.io/favicon.ico\" alt=\"Aiven Logo\" /> **[Aiven](https://github.com/Aiven-Open/mcp-aiven)** - Navigate your [Aiven projects](https://go.aiven.io/mcp-server) and interact with the PostgreSQL¬Æ, Apache Kafka¬Æ, ClickHouse¬Æ and OpenSearch¬Æ services\n- <img height=\"12\" width=\"12\" src=\"https://www.alation.com/resource-center/download/7p3vnbbznfiw/34FMtBTex5ppvs2hNYa9Fc/c877c37e88e5339878658697c46d2d58/Alation-Logo-Bug-Primary.svg\" alt=\"Alation Logo\" /> **[Alation](https://github.com/Alation/alation-ai-agent-sdk)** - Unlock the power of the enterprise Data Catalog by harnessing tools provided by the Alation MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://i.postimg.cc/5NYw9qjS/alby-icon-head-yellow-500x500.png\" alt=\"Alby Logo\" /> **[Alby Bitcoin Payments](https://github.com/getAlby/mcp)** - Connect any bitcoin lightning wallet to your agent to send and receive instant payments globally with your agent.\n- **[Algolia](https://github.com/algolia/mcp)** - Use AI agents to provision, configure, and query your [Algolia](https://algolia.com) search indices.\n- <img height=\"12\" width=\"12\" src=\"https://img.alicdn.com/imgextra/i4/O1CN01epkXwH1WLAXkZfV6N_!!6000000002771-2-tps-200-200.png\" alt=\"Alibaba Cloud AnalyticDB for MySQL Logo\" /> **[Alibaba Cloud AnalyticDB for MySQL](https://github.com/aliyun/alibabacloud-adb-mysql-mcp-server)** - Connect to an [AnalyticDB for MySQL](https://www.alibabacloud.com/en/product/analyticdb-for-mysql) cluster for getting database or table metadata, querying and analyzing data. It will be supported to add the OpenAPI for cluster operation in the future.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/aliyun/alibabacloud-adbpg-mcp-server/blob/master/images/AnalyticDB.png\" alt=\"Alibaba Cloud AnalyticDB for PostgreSQL Logo\" /> **[Alibaba Cloud AnalyticDB for PostgreSQL](https://github.com/aliyun/alibabacloud-adbpg-mcp-server)** - An MCP server to connect to [AnalyticDB for PostgreSQL](https://github.com/aliyun/alibabacloud-adbpg-mcp-server) instances, query and analyze data.\n- <img height=\"12\" width=\"12\" src=\"https://img.alicdn.com/imgextra/i3/O1CN0101UWWF1UYn3rAe3HU_!!6000000002530-2-tps-32-32.png\" alt=\"DataWorks Logo\" /> **[Alibaba Cloud DataWorks](https://github.com/aliyun/alibabacloud-dataworks-mcp-server)** - A Model Context Protocol (MCP) server that provides tools for AI, allowing it to interact with the [DataWorks](https://www.alibabacloud.com/help/en/dataworks/) Open API through a standardized interface. This implementation is based on the Alibaba Cloud Open API and enables AI agents to perform cloud resources operations seamlessly.\n- <img height=\"12\" width=\"12\" src=\"https://opensearch-shanghai.oss-cn-shanghai.aliyuncs.com/ouhuang/aliyun-icon.png\" alt=\"Alibaba Cloud OpenSearch Logo\" /> **[Alibaba Cloud OpenSearch](https://github.com/aliyun/alibabacloud-opensearch-mcp-server)** - This MCP server equips AI Agents with tools to interact with [OpenSearch](https://help.aliyun.com/zh/open-search/?spm=5176.7946605.J_5253785160.6.28098651AaYZXC) through a standardized and extensible interface.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/aliyun/alibaba-cloud-ops-mcp-server/blob/master/image/alibaba-cloud.png\" alt=\"Alibaba Cloud OPS Logo\" /> **[Alibaba Cloud OPS](https://github.com/aliyun/alibaba-cloud-ops-mcp-server)** - Manage the lifecycle of your Alibaba Cloud resources with [CloudOps Orchestration Service](https://www.alibabacloud.com/en/product/oos) and Alibaba Cloud OpenAPI.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/aliyun/alibabacloud-rds-openapi-mcp-server/blob/main/assets/alibabacloudrds.png\" alt=\"Alibaba Cloud RDS MySQL Logo\" /> **[Alibaba Cloud RDS](https://github.com/aliyun/alibabacloud-rds-openapi-mcp-server)** - An MCP server designed to interact with the Alibaba Cloud RDS OpenAPI, enabling programmatic management of RDS resources via an LLM.\n- <img height=\"12\" width=\"12\" src=\"https://www.alipayplus.com/favicon.ico\" alt=\"AlipayPlus Logo\" /> **[AlipayPlus](https://github.com/alipay/global-alipayplus-mcp)** - Connect your AI Agents to AlipayPlus Checkout Payment.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.allvoicelab.com/resources/workbench/dist/icon-dark.ico\" alt=\"AllVoiceLab Logo\" /> **[AllVoiceLab](https://www.allvoicelab.com/mcp)** - An AI voice toolkit with TTS, voice cloning, and video translation, now available as an MCP server for smarter agent integration.\n- <img height=\"12\" width=\"12\" src=\"https://files.alpaca.markets/webassets/favicon-32x32.png\" alt=\"Alpaca Logo\" /> **[Alpaca](https://github.com/alpacahq/alpaca-mcp-server)** ‚Äì Alpaca's MCP server lets you trade stocks and options, analyze market data, and build strategies through [Alpaca's Trading API](https://alpaca.markets/)\n- <img height=\"12\" width=\"12\" src=\"https://www.alphavantage.co/logo.png/\" alt=\"AlphaVantage Logo\" /> **[AlphaVantage](https://mcp.alphavantage.co/)** - Connect to 100+ APIs for financial market data, including stock prices, fundamentals, and more from [AlphaVantage](https://www.alphavantage.co)\n- <img height=\"12\" width=\"12\" src=\"https://alttester.com/app/themes/alttester-sage-theme/public/images/logo-alttester.038ec8.png\" alt=\"AltTester Logo\" /> **[AltTester¬Æ](https://alttester.com/docs/desktop/latest/pages/ai-extension.html)** - Use AltTester¬Æ capabilities to connect and test your Unity or Unreal game. Write game test automation faster and smarter, using [AltTester](https://alttester.com) and the AltTester¬Æ MCP server. \n- <img height=\"12\" width=\"12\" src=\"https://www.antom.com/favicon.ico\" alt=\"Antom Logo\" /> **[Antom](https://github.com/alipay/global-antom-mcp)** - Connect your AI Agents to Antom Checkout Payment.\n- <img height=\"12\" width=\"12\" src=\"https://developers.anytype.io/img/favicon.ico\" alt=\"Anytype Logo\" /> **[Anytype](https://github.com/anyproto/anytype-mcp)** - An MCP server enabling AI assistants to interact with [Anytype](https://anytype.io) - a local and collaborative wiki - to organize objects, lists, and more through natural language.\n- <img height=\"12\" width=\"12\" src=\"https://doris.apache.org/images/favicon.ico\" alt=\"Apache Doris Logo\" /> **[Apache Doris](https://github.com/apache/doris-mcp-server)** - MCP Server For [Apache Doris](https://doris.apache.org/), an MPP-based real-time data warehouse.\n- <img height=\"12\" width=\"12\" src=\"https://iotdb.apache.org/img/logo.svg\" alt=\"Apache IoTDB Logo\" /> **[Apache IoTDB](https://github.com/apache/iotdb-mcp-server)** - MCP Server for [Apache IoTDB](https://github.com/apache/iotdb) database and its tools\n- **[Apache Pinot](https://github.com/startreedata/mcp-pinot)** ‚Äì MCP server for running real - time analytics queries on Apache Pinot, an open-source OLAP database built for high-throughput, low-latency powering real-time applications.\n- <img height=\"12\" width=\"12\" src=\"https://apify.com/favicon.ico\" alt=\"Apify Logo\" /> **[Apify](https://github.com/apify/apify-mcp-server)** - Use 6,000+ pre-built cloud tools to extract data from websites, e-commerce, social media, search engines, maps, and more\n- <img height=\"12\" width=\"12\" src=\"https://2052727.fs1.hubspotusercontent-na1.net/hubfs/2052727/cropped-cropped-apimaticio-favicon-1-32x32.png\" alt=\"APIMatic Logo\" /> **[APIMatic MCP](https://github.com/apimatic/apimatic-validator-mcp)** - APIMatic MCP Server is used to validate OpenAPI specifications using [APIMatic](https://www.apimatic.io/). The server processes OpenAPI files and returns validation summaries by leveraging APIMatic's API.\n- <img height=\"12\" width=\"12\" src=\"https://apollo-server-landing-page.cdn.apollographql.com/_latest/assets/favicon.png\" alt=\"Apollo Graph Logo\" /> **[Apollo MCP Server](https://github.com/apollographql/apollo-mcp-server/)** - Connect your GraphQL APIs to AI agents\n- <img height=\"12\" width=\"12\" src=\"https://developer.aqara.com/favicon.ico\" alt=\"Aqara Logo\" /> **[Aqara MCP Server](https://github.com/aqara/aqara-mcp-server/)** - Control  [Aqara](https://www.aqara.com/) smart home devices, query status, execute scenes, and much more using natural language.\n- <img height=\"12\" width=\"12\" src=\"https://media.licdn.com/dms/image/v2/C4D0BAQEeD7Dxbpadkw/company-logo_200_200/company-logo_200_200/0/1644692667545/archbee_logo?e=2147483647&v=beta&t=lTi9GRIoqzG6jN3kJC26uZWh0q3uiQelsH6mGoq_Wfw\" alt=\"Archbee Logo\" /> **[Archbee](https://www.npmjs.com/package/@archbee/mcp)** - Write and publish documentation that becomes the trusted source for instant answers with AI. Stop cobbling tools and use [Archbee](https://www.archbee.com/) ‚Äî the first complete documentation platform.\n- <img height=\"12\" width=\"12\" src=\"https://phoenix.arize.com/wp-content/uploads/2023/04/cropped-Favicon-32x32.png\" alt=\"Arize-Phoenix Logo\" /> **[Arize Phoenix](https://github.com/Arize-ai/phoenix/tree/main/js/packages/phoenix-mcp)** - Inspect traces, manage prompts, curate datasets, and run experiments using [Arize Phoenix](https://github.com/Arize-ai/phoenix), an open-source AI and LLM observability tool.\n- <img height=\"12\" width=\"12\" src=\"https://731523176-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FaVUBXRZbpAgtjYf5HsvO%2Fuploads%2FaRRrVVocXCTr6GkepfCx%2Flogo_color.svg?alt=media&token=3ba24089-0ab2-421f-a9d9-41f2f94f954a\" alt=\"Armor Logo\" /> **[Armor Crypto MCP](https://github.com/armorwallet/armor-crypto-mcp)** - MCP to interface with multiple blockchains, staking, DeFi, swap, bridging, wallet management, DCA, Limit Orders, Coin Lookup, Tracking and more.\n- <img height=\"12\" width=\"12\" src=\"https://console.asgardeo.io/app/libs/themes/wso2is/assets/images/branding/favicon.ico\" alt=\"Asgardeo Logo\" /> **[Asgardeo](https://github.com/asgardeo/asgardeo-mcp-server)** - MCP server to interact with your [Asgardeo](https://wso2.com/asgardeo) organization through LLM tools.\n- <img height=\"12\" width=\"12\" src=\"https://www.datastax.com/favicon-32x32.png\" alt=\"DataStax logo\" /> **[Astra DB](https://github.com/datastax/astra-db-mcp)** - Comprehensive tools for managing collections and documents in a [DataStax Astra DB](https://www.datastax.com/products/datastax-astra) NoSQL database with a full range of operations such as create, update, delete, find, and associated bulk actions.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/66598898fd13d51606c3215d/66ccbfef13bd8bc19d587578_favicon-32x32.png\" alt=\"Atla Logo\" /> **[Atla](https://github.com/atla-ai/atla-mcp-server)** - Enable AI agents to interact with the [Atla API](https://docs.atla-ai.com/) for state-of-the-art LLMJ evaluation.\n- <img height=\"12\" width=\"12\" src=\"https://assets.atlan.com/assets/atlan-a-logo-blue-background.png\" alt=\"Atlan Logo\" /> **[Atlan](https://github.com/atlanhq/agent-toolkit/tree/main/modelcontextprotocol)** - The Atlan Model Context Protocol server allows you to interact with the [Atlan](https://www.atlan.com/) services through multiple tools.\n- <img height=\"12\" width=\"12\" src=\"https://www.atlassian.com/favicon.ico\" alt=\"Atlassian Logo\" /> **[Atlassian](https://www.atlassian.com/platform/remote-mcp-server)** - Securely interact with Jira work items and Confluence pages, and search across both.\n- <img height=\"12\" width=\"12\" src=\"https://res.oafimg.cn/-/737b3b3ffed9b19e/logo.png\" alt=\"AtomGit Logo\" /> **[AtomGit](https://atomgit.com/atomgit-open-source-ecosystem/atomgit-mcp-server)** - Official AtomGit server for integration with repository management, PRs, issues, branches, labels, and more.\n- <img height=\"12\" width=\"12\" src=\"https://resources.audiense.com/hubfs/favicon-1.png\" alt=\"Audiense Logo\" /> **[Audiense Insights](https://github.com/AudienseCo/mcp-audiense-insights)** - Marketing insights and audience analysis from [Audiense](https://www.audiense.com/products/audiense-insights) reports, covering demographic, cultural, influencer, and content engagement analysis.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.auth0.com/website/website/favicons/auth0-favicon.svg\" alt=\"Auth0 Logo\" /> **[Auth0](https://github.com/auth0/auth0-mcp-server)** - MCP server for interacting with your Auth0 tenant, supporting creating and modifying actions, applications, forms, logs, resource servers, and more.\n- <img height=\"12\" width=\"12\" src=\"https://firstorder.ai/favicon_auth.ico\" alt=\"Authenticator App Logo\" /> **[Authenticator App ¬∑ 2FA](https://github.com/firstorderai/authenticator_mcp)** - A secure MCP (Model Context Protocol) server that enables AI agents to interact with the Authenticator App.\n- <img height=\"12\" width=\"12\" src=\"https://a0.awsstatic.com/libra-css/images/site/fav/favicon.ico\" alt=\"AWS Logo\" /> **[AWS](https://github.com/awslabs/mcp)** -  Specialized MCP servers that bring AWS best practices directly to your development workflow.\n- <img height=\"12\" width=\"12\" src=\"https://axiom.co/favicon.ico\" alt=\"Axiom Logo\" /> **[Axiom](https://github.com/axiomhq/mcp-server-axiom)** - Query and analyze your Axiom logs, traces, and all other event data in natural language\n- <img height=\"12\" width=\"12\" src=\"https://cdn-dynmedia-1.microsoft.com/is/content/microsoftcorp/acom_social_icon_azure\" alt=\"Microsoft Azure Logo\" /> **[Azure](https://github.com/microsoft/mcp/tree/main/servers/Azure.Mcp.Server)** - The Azure MCP Server gives MCP Clients access to key Azure services and tools like Azure Storage, Cosmos DB, the Azure CLI, and more.\n- <img height=\"12\" width=\"12\" src=\"https://cdn-dynmedia-1.microsoft.com/is/content/microsoftcorp/1062064-Products-1.2-24x24\" alt=\"Microsoft Azure DevOps Logo\" /> **[Azure DevOps](https://github.com/microsoft/azure-devops-mcp)** - Interact with Azure DevOps services like repositories, work items, builds, releases, test plans, and code search.\n- <img height=\"12\" width=\"12\" src=\"https://application.backdocket.com/favicon.ico\" alt=\"Backdocket Logo\" /> **[Backdocket](https://ai.backdocket.com)** - Search, Retrieve, and Update your **[Backdocket](https://backdocket.com)** data. This currently includes Claims, Matters, Contacts, Tasks and Advanced Searches. To easily use the Remote Mcp Server utilize the following url: **[https://ai.backdocket.com/mcp]([https://backdocket.com](https://ai.backdocket.com/mcp))**\n- <img height=\"12\" width=\"12\" src=\"https://mapopen-website-wiki.cdn.bcebos.com/LOGO/lbsyunlogo_icon.ico\" alt=\"Baidu Map Logo\" /> **[Baidu Map](https://github.com/baidu-maps/mcp)** - [Baidu Map MCP Server](https://lbsyun.baidu.com/faq/api?title=mcpserver/base) provides tools for AI agents to interact with Baidu Maps APIs, enabling location-based services and geospatial data analysis.\n- <img height=\"12\" width=\"12\" src=\"https://www.bankless.com/favicon.ico\" alt=\"Bankless Logo\" /> **[Bankless Onchain](https://github.com/bankless/onchain-mcp)** - Query Onchain data, like ERC20 tokens, transaction history, smart contract state.\n- <img height=\"12\" width=\"12\" src=\"https://baserow.io/img/logo_baserow_square_large.png\" alt=\"Baserow Logo\" /> **[Baserow](https://gitlab.com/baserow/baserow/-/tree/develop/backend/src/baserow/api/mcp)** - Query data from Baserow self-hosted or SaaS databases using MCP integration.\n- <img height=\"12\" width=\"12\" src=\"https://bicscan.io/favicon.png\" alt=\"BICScan Logo\" /> **[BICScan](https://github.com/ahnlabio/bicscan-mcp)** - Risk score / asset holdings of EVM blockchain address (EOA, CA, ENS) and even domain names.\n- <img height=\"12\" width=\"12\" src=\"https://web-cdn.bitrise.io/favicon.ico\" alt=\"Bitrise Logo\" /> **[Bitrise](https://github.com/bitrise-io/bitrise-mcp)** - Chat with your builds, CI, and [more](https://bitrise.io/blog/post/chat-with-your-builds-ci-and-more-introducing-the-bitrise-mcp-server).\n- <img height=\"12\" width=\"12\" src=\"https://boikot.xyz/assets/favicon.svg\" alt=\"boikot Logo\" /> **[Boikot](https://github.com/boikot-xyz/boikot)** - Learn about the ethical and unethical actions of major companies with [boikot.xyz](https://boikot.xyz/).\n- <img height=\"12\" width=\"12\" src=\"https://boldsign.com/favicon.ico\" alt=\"BoldSign Logo\" /> **[BoldSign](https://github.com/boldsign/boldsign-mcp)** - Search, request, and manage e-signature contracts effortlessly with [BoldSign](https://boldsign.com/).\n- <img height=\"12\" width=\"12\" src=\"https://boost.space/favicon.ico\" alt=\"Boost.space Logo\" /> **[Boost.space](https://github.com/boostspace/boostspace-mcp-server)** - An MCP server integrating with [Boost.space](https://boost.space) for centralized, automated business data from 2000+ sources.\n- <img height=\"12\" width=\"12\" src=\"https://www.box.com/favicon.ico\" alt=\"Box Logo\" /> **[Box](https://github.com/box-community/mcp-server-box)** - Interact with the Intelligent Content Management platform through Box AI.\n- <img height=\"12\" width=\"12\" src=\"https://www.brightdata.com/favicon.ico\" alt=\"BrightData Logo\" /> **[BrightData](https://github.com/luminati-io/brightdata-mcp)** - Discover, extract, and interact with the web - one interface powering automated access across the public internet.\n- <img height=\"12\" width=\"12\" src=\"https://browserbase.com/favicon.ico\" alt=\"Browserbase Logo\" /> **[Browserbase](https://github.com/browserbase/mcp-server-browserbase)** - Automate browser interactions in the cloud (e.g. web navigation, data extraction, form filling, and more)\n- <img height=\"12\" width=\"12\" src=\"https://browserstack.wpenginepowered.com/wp-content/themes/browserstack/img/favicons/favicon.ico\" alt=\"BrowserStack Logo\" /> **[BrowserStack](https://github.com/browserstack/mcp-server)** - Access BrowserStack's [Test Platform](https://www.browserstack.com/test-platform) to debug, write and fix tests, do accessibility testing and more.\n- <img height=\"12\" width=\"12\" src=\"https://www.google.com/s2/favicons?domain=buildkite.com&sz=24\" alt=\"Buildkite Logo\" /> **[Buildkite](https://github.com/buildkite/buildkite-mcp-server)** - Exposing Buildkite data (pipelines, builds, jobs, tests) to AI tooling and editors.\n- <img height=\"12\" width=\"12\" src=\"https://bldbl.dev/favico.png\" alt=\"Buildable Logo\" />**[Buildable](https://github.com/chunkydotdev/bldbl-mcp)** (TypeScript) - Official MCP server for Buildable AI-powered development platform. Enables AI assistants to manage tasks, track progress, get project context, and collaborate with humans on software projects.\n- <img height=\"12\" width=\"12\" src=\"https://builtwith.com/favicon.ico\" alt=\"BuiltWith Logo\" /> **[BuiltWith](https://github.com/builtwith/mcp)** - Identify the technology stack behind any website.\n- <img height=\"12\" width=\"12\" src=\"https://portswigger.net/favicon.ico\" alt=\"PortSwigger Logo\" /> **[Burp Suite](https://github.com/PortSwigger/mcp-server)** - MCP Server extension allowing AI clients to connect to [Burp Suite](https://portswigger.net)\n- <img src=\"https://app.cal.com/favicon.ico\" alt=\"Cal.com\" width=\"12\" height=\"12\"> **[Cal.com](https://www.npmjs.com/package/@calcom/cal-mcp?activeTab=readme)** - Connect to the Cal.com API to schedule and manage bookings and appointments.\n- <img height=\"12\" width=\"12\" src=\"https://campertunity.com/assets/icon/favicon.ico\" alt=\"Campertunity Logo\" /> **[Campertunity](https://github.com/campertunity/mcp-server)** - Search campgrounds around the world on campertunity, check availability, and provide booking links.\n- <img height=\"12\" width=\"12\" src=\"https://static.canva.com/static/images/favicon.ico\" alt=\"Canva logo\" /> **[Canva](https://www.canva.dev/docs/apps/mcp-server/)** ‚Äî Provide AI - powered development assistance for [Canva](https://canva.com) apps and integrations.\n- <img height=\"12\" width=\"12\" src=\"https://carbonvoice.app/favicon.ico\" alt=\"Carbon Voice Logo\" /> **[Carbon Voice](https://github.com/PhononX/cv-mcp-server)** - MCP Server that connects AI Agents to [Carbon Voice](https://getcarbon.app). Create, manage, and interact with voice messages, conversations, direct messages, folders, voice memos, AI actions and more in [Carbon Voice](https://getcarbon.app).\n-  **[Cartesia](https://github.com/cartesia-ai/cartesia-mcp)** - Connect to the [Cartesia](https://cartesia.ai/) voice platform to perform text-to-speech, voice cloning etc.\n- <img height=\"12\" width=\"12\" src=\"https://www.cashfree.com/favicon.ico\" alt=\"Cashfree logo\" /> **[Cashfree](https://github.com/cashfree/cashfree-mcp)** - [Cashfree Payments](https://www.cashfree.com/) official MCP server.\n- **[CB Insights](https://github.com/cbinsights/cbi-mcp-server)** - Use the [CB Insights](https://www.cbinsights.com) MCP Server to connect to [ChatCBI](https://www.cbinsights.com/chatcbi/)\n- <img height=\"12\" width=\"12\" src=\"https://cleanupcrew.ai/favicon-light.png\" alt=\"Cleanup Crew logo\" /> **[Cleanup Crew](https://cleanupcrew.ai/install)** - Real-time human support service for non-technical founders using AI coding tools. When AI hits a wall, request instant human help directly from your IDE.\n- <img height=\"12\" width=\"12\" src=\"https://www.chargebee.com/static/resources/brand/favicon.png\" alt=\"Chargebee Logo\" /> **[Chargebee](https://github.com/chargebee/agentkit/tree/main/modelcontextprotocol)** - MCP Server that connects AI agents to [Chargebee platform](https://www.chargebee.com).\n- <img height=\"12\" width=\"12\" src=\"https://cheqd.io/wp-content/uploads/2023/03/logo_cheqd_favicon.png\" alt=\"Cheqd Logo\" /> **[Cheqd](https://github.com/cheqd/mcp-toolkit)** - Enable AI Agents to be trusted, verified, prevent fraud, protect your reputation, and more through [cheqd's](https://cheqd.io) Trust Registries and Credentials.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.chiki.studio/brand/logo.png\" alt=\"Chiki StudIO Logo\" /> **[Chiki StudIO](https://chiki.studio/galimybes/mcp/)** - Create your own configurable MCP servers purely via configuration (no code), with instructions, prompts, and tools support.\n- <img height=\"12\" width=\"12\" src=\"https://trychroma.com/_next/static/media/chroma-logo.ae2d6e4b.svg\" alt=\"Chroma Logo\" /> **[Chroma](https://github.com/chroma-core/chroma-mcp)** - Embeddings, vector search, document storage, and full-text search with the open-source AI application database\n- <img height=\"12\" width=\"12\" src=\"https://www.chronulus.com/favicon/chronulus-logo-blue-on-alpha-square-128x128.ico\" alt=\"Chronulus AI Logo\" /> **[Chronulus AI](https://github.com/ChronulusAI/chronulus-mcp)** - Predict anything with Chronulus AI forecasting and prediction agents.\n- <img height=\"12\" width=\"12\" src=\"https://circleci.com/favicon.ico\" alt=\"CircleCI Logo\" /> **[CircleCI](https://github.com/CircleCI-Public/mcp-server-circleci)** - Enable AI Agents to fix build failures from CircleCI.\n- <img height=\"12\" width=\"12\" src=\"https://assets.zilliz.com/Zilliz_Logo_Mark_White_20230223_041013_86057436cc.png\" alt=\"Claude Context Logo\" /> **[Claude Context](https://github.com/zilliztech/claude-context)** - Bring your codebase as context to Claude Code\n- <img height=\"12\" width=\"12\" src=\"https://clickhouse.com/favicon.ico\" alt=\"ClickHouse Logo\" /> **[ClickHouse](https://github.com/ClickHouse/mcp-clickhouse)** - Query your [ClickHouse](https://clickhouse.com/) database server.\n- <img height=\"12\" width=\"12\" src=\"https://brand.clicksend.com/_ipx/s_794x608/img/clicksend_icon_only.svg\" alt=\"ClickSend Logo\" /> **[ClickSend](https://github.com/ClickSend/clicksend-mcp-server/)** - This is the official ClickSend MCP Server developed by ClickSend team.\n- <img height=\"12\" width=\"12\" src=\"https://7463-tcb-advanced-a656fc-1257967285.tcb.qcloud.la/mcp/cloudbase-logo.svg\" alt=\"CloudBase Logo\" /> **[CloudBase](https://github.com/TencentCloudBase/CloudBase-AI-ToolKit)** - One-stop backend services for WeChat Mini-Programs and full-stack apps with serverless cloud functions and databases by [Tencent CloudBase](https://tcb.cloud.tencent.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.cloudbet.com/favicon.ico\" alt=\"Cloudbet Logo\" /> **[Cloudbet](https://github.com/cloudbet/sports-mcp-server)** - Structured sports and esports data via Cloudbet API: fixtures, live odds, stake limits, and markets.\n- <img height=\"12\" width=\"12\" src=\"https://www.cloudbees.com/favicon.ico\" alt=\"CloudBees Logo\" /> **[CloudBees](https://docs.cloudbees.com/docs/cloudbees-mcp/latest/)** - Enable AI access to your [CloudBees Unify](https://www.cloudbees.com/unify) environment.\n- <img src=\"http://www.google.com/s2/favicons?domain=www.cloudera.com\" alt=\"Cloudera Iceberg\" width=\"12\" height=\"12\"> **[Cloudera Iceberg](https://github.com/cloudera/iceberg-mcp-server)** - enabling AI on the [Open Data Lakehouse](https://www.cloudera.com/products/open-data-lakehouse.html).\n- <img alt=\"cloudflare\" height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/cloudflare\" /> **[Cloudflare](https://github.com/cloudflare/mcp-server-cloudflare)** - Deploy, configure & interrogate your resources on the Cloudflare developer platform (e.g. Workers/KV/R2/D1)\n- <img src=\"https://cdn.prod.website-files.com/64d41aab8183c7c3324ddb29/67c0f1e272e51cf3c511c17c_Gyph.svg\" alt=\"Cloudinary\" width=\"12\" height=\"12\"> **[Cloudinary](https://github.com/cloudinary/mcp-servers)** - Exposes Cloudinary's media upload, transformation, AI analysis, management, optimization and delivery as tools usable by AI agents\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/Cloudsway-AI/smartsearch/refs/heads/main/plugin_cloudsway.ico\" alt=\"Cloudsway Logo\" /> **[Cloudsway SmartSearch](https://github.com/Cloudsway-AI/smartsearch)** - Web search MCP server powered by Cloudsway, supporting keyword search, language, and safety options. Returns structured JSON results.\n-  **[Codacy](https://github.com/codacy/codacy-mcp-server/)** - Interact with [Codacy](https://www.codacy.com) API to query code quality issues, vulnerabilities, and coverage insights about your code.\n-  **[CodeLogic](https://github.com/CodeLogicIncEngineering/codelogic-mcp-server)** - Interact with [CodeLogic](https://codelogic.com), a Software Intelligence platform that graphs complex code and data architecture dependencies, to boost AI accuracy and insight.\n- <img height=\"12\" width=\"12\" src=\"https://www.coingecko.com/favicon.ico\" alt=\"CoinGecko Logo\" /> **[CoinGecko](https://github.com/coingecko/coingecko-typescript/tree/main/packages/mcp-server)** - Official [CoinGecko API](https://www.coingecko.com/en/api) MCP Server for Crypto Price & Market Data, across 200+ Blockchain Networks and 8M+ Tokens.\n- <img height=\"12\" width=\"12\" src=\"https://www.comet.com/favicon.ico\" alt=\"Comet Logo\" /> **[Comet Opik](https://github.com/comet-ml/opik-mcp)** - Query and analyze your [Opik](https://github.com/comet-ml/opik) logs, traces, prompts and all other telemetry data from your LLMs in natural language.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6572bd8c27ee5db3eb91f4b3/6572bd8d27ee5db3eb91f55e_favicon-dashflow-webflow-template.svg\" alt=\"OSS Conductor Logo\" /> <img height=\"12\" width=\"12\" src=\"https://orkes.io/icons/icon-48x48.png\" alt=\"Orkes Conductor Logo\" />**[Conductor](https://github.com/conductor-oss/conductor-mcp)** - Interact with Conductor (OSS and Orkes) REST APIs.\n- <img height=\"12\" width=\"12\" src=\"https://platform.composio.dev/favicon.ico\" alt=\"Composio Logo\" /> **[Composio](https://docs.composio.dev/docs/mcp-overview#-getting-started)** ‚Äì Use [Composio](https://composio.dev) to connect 100+ tools. Zero setup. Auth built-in. Made for agents, works for humans.\n- <img height=\"12\" width=\"12\" src=\"https://www.confluent.io/favicon.ico\" alt=\"Confluent Logo\" /> **[Confluent](https://github.com/confluentinc/mcp-confluent)** - Interact with Confluent Kafka and Confluent Cloud REST APIs.\n- <img src=\"https://contrastsecurity.com/favicon.ico\" alt=\"Contrast Security\" width=\"12\" height=\"12\"> **[Contrast Security](https://github.com/Contrast-Security-OSS/mcp-contrast)** - Brings Contrast's vulnerability and SCA data into your coding agent to quickly remediate vulnerabilities.\n- <img height=\"12\" width=\"12\" src=\"https://www.convex.dev/favicon.ico\" alt=\"Convex Logo\" /> **[Convex](https://stack.convex.dev/convex-mcp-server)** - Introspect and query your apps deployed to Convex.\n- <img height=\"12\" width=\"12\" src=\"https://www.cortex.io/favicon.ico\" alt=\"Cortex Logo\" /> **[Cortex](https://github.com/cortexapps/cortex-mcp)** - Official MCP server for [Cortex](https://www.cortex.io).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/605755?s=200&v=4\" alt=\"Couchbase Logo\" /> **[Couchbase](https://github.com/Couchbase-Ecosystem/mcp-server-couchbase)** - Interact with the data stored in Couchbase clusters.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/user-attachments/assets/b256f9fa-2020-4b37-9644-c77229ef182b\" alt=\"CRIC ÂÖãËÄåÁëû LOGO\"> **[CRIC Wuye AI](https://github.com/wuye-ai/mcp-server-wuye-ai)** - Interact with capabilities of the CRIC Wuye AI platform, an intelligent assistant specifically for the property management industry.\n- <img height=\"12\" width=\"12\" src=\"https://www.crowdstrike.com/etc.clientlibs/crowdstrike/clientlibs/crowdstrike-common/resources/favicon.ico\" alt=\"CrowdStrike Logo\" /> **[CrowdStrike Falcon](https://github.com/CrowdStrike/falcon-mcp)** - Connects AI agents with the CrowdStrike Falcon platform for intelligent security analysis, providing programmatic access to detections, incidents, behaviors, threat intelligence, hosts, vulnerabilities, and identity protection capabilities.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/58433296\" alt=\"CTERA Edge Filer\" /> **[CTERA Edge Filer](https://github.com/ctera/mcp-ctera-edge)** - CTERA Edge Filer delivers intelligent edge caching and multiprotocol file access, enabling fast, secure access to files across core and remote sites.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/58433296\" alt=\"CTERA Portal\" /> **[CTERA Portal](https://github.com/ctera/mcp-ctera-core)** - CTERA Portal is a multi-tenant, multi-cloud platform that delivers a global namespace and unified management across petabytes of distributed content.\n- <img height=\"12\" width=\"12\" src=\"https://app.cycode.com/img/favicon.ico\" alt=\"Cycode Logo\" /> **[Cycode](https://github.com/cycodehq/cycode-cli#mcp-command-experiment)** - Boost security in your dev lifecycle via SAST, SCA, Secrets & IaC scanning with [Cycode](https://cycode.com/).\n- <img height=\"12\" width=\"12\" src=\"http://app.itsdart.com/static/img/favicon.png\" alt=\"Dart Logo\" /> **[Dart](https://github.com/its-dart/dart-mcp-server)** - Interact with task, doc, and project data in [Dart](https://itsdart.com), an AI-native project management tool\n- <img height=\"12\" width=\"12\" src=\"https://cdn.bfldr.com/9AYANS2F/at/k8bgnnxhb4bggjk88r4x9snf/databricks-symbol-color.svg?auto=webp&format=png&width=12&height=13\" alt=\"Databricks Logo\" /> **[Databricks](https://docs.databricks.com/aws/en/generative-ai/mcp/)** - Connect to data, AI tools & agents, and the rest of the Databricks platform using turnkey managed MCP servers. Or, host your own custom MCP servers within the Databricks security and data governance boundary.\n- <img height=\"12\" width=\"12\" src=\"https://datahub.com/wp-content/uploads/2025/04/cropped-Artboard-1-32x32.png\" alt=\"DataHub Logo\" /> **[DataHub](https://github.com/acryldata/mcp-server-datahub)** - Search your data assets, traverse data lineage, write SQL queries, and more using [DataHub](https://datahub.com/) metadata.\n- <img height=\"12\" width=\"12\" src=\"https://www.daytona.io/brand/social-daytona-icon.png\" alt=\"Daytona Logo\" /> **[Daytona](https://github.com/daytonaio/daytona/tree/main/apps/cli/mcp)** - Fast and secure execution of your AI generated code with [Daytona](https://daytona.io) sandboxes\n- <img height=\"12\" width=\"12\" src=\"https://debugg.ai/favicon.svg\" alt=\"Debugg AI Logo\" /> **[Debugg.AI](https://github.com/debugg-ai/debugg-ai-mcp)** - Zero-Config, Fully AI-Managed End-to-End Testing for any code gen platform via [Debugg.AI](https://debugg.ai) remote browsing test agents.\n- <img height=\"12\" width=\"12\" src=\"https://www.deepl.com/img/logo/deepl-logo-blue.svg\" alt=\"DeepL Logo\" /> **[DeepL](https://github.com/DeepLcom/deepl-mcp-server)** - Translate or rewrite text with [DeepL](https://deepl.com)'s very own AI models using [the DeepL API](https://developers.deepl.com/docs)\n- <img height=\"12\" width=\"12\" src=\"https://defang.io/_next/static/media/defang-icon-dark-colour.25f95b77.svg\" alt=\"Defang Logo\" /> **[Defang](https://github.com/DefangLabs/defang/blob/main/src/pkg/mcp/README.md)** - Deploy your project to the cloud seamlessly with the [Defang](https://www.defang.io) platform without leaving your integrated development environment\n- <img height=\"12\" width=\"12\" src=\"https://detailer.ginylil.com/favicon.ico\" alt=\"Detailer Logo\" /> **[Detailer](https://detailer.ginylil.com/)** ‚Äì Instantly generate rich, AI-powered documentation for your GitHub repositories. Designed for AI agents to gain deep project context before taking action.\n- <img height=\"12\" width=\"12\" src=\"https://devcycle.com/_next/image?url=%2Fassets%2Fbrand%2FColor-logo-mark.png&w=384&q=75\" alt=\"DevCycle Logo\" /> **[DevCycle](https://docs.devcycle.com/cli-mcp/mcp-getting-started)** - Create and monitor feature flags using natural language in your AI coding assistant.\n- <img height=\"12\" width=\"12\" src=\"https://www.devhub.com/img/upload/favicon-196x196-dh.png\" alt=\"DevHub Logo\" /> **[DevHub](https://github.com/devhub/devhub-cms-mcp)** - Manage and utilize website content within the [DevHub](https://www.devhub.com) CMS platform\n- <img height=\"12\" width=\"12\" src=\"https://devrev.ai/favicon.ico\" alt=\"DevRev Logo\" /> **[DevRev](https://github.com/devrev/mcp-server)** - An MCP server to integrate with DevRev APIs to search through your DevRev Knowledge Graph where objects can be imported from diff. Sources listed [here](https://devrev.ai/docs/import#available-sources).\n- <img height=\"12\" width=\"12\" src=\"https://dexpaprika.com/favicon.ico\" alt=\"DexPaprika Logo\" /> **[DexPaprika (CoinPaprika)](https://github.com/coinpaprika/dexpaprika-mcp)** - Access real-time DEX data, liquidity pools, token information, and trading analytics across multiple blockchain networks with [DexPaprika](https://dexpaprika.com) by CoinPaprika.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/dolthub/dolt/raw/main/images/Dolt-Logo@3x.svg\" alt=\"Dolt Logo\" /> **[Dolt](https://github.com/dolthub/dolt-mcp)** - The official MCP server for version-controlled [Dolt](https://doltdb.com/) databases.\n- <img height=\"12\" width=\"12\" src=\"https://eu.getdot.ai/favicon.ico\" alt=\"GetDot.ai Logo\" /> **[Dot (GetDot.ai)](https://docs.getdot.ai/dot/integrations/mcp)** - Fetch, analyze or visualize data from your favorite database or data warehouse (Snowflake, BigQuery, Redshift, Databricks, Clickhouse, ...) with [Dot](https://getdot.ai), your AI Data Analyst. This remote MCP server is a one-click integration for user that have setup Dot.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/65421071?s=200&v=4\" alt=\"Drata Logo\" /> **[Drata](https://drata.com/mcp)** - Get hands-on with our experimental MCP server‚Äîbringing real-time compliance intelligence into your AI workflows.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/204530939?s=200&v=4\" alt=\"Dumpling AI Logo\" /> **[Dumpling AI](https://github.com/Dumpling-AI/mcp-server-dumplingai)** - Access data, web scraping, and document conversion APIs by [Dumpling AI](https://www.dumplingai.com/)\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/58178984\" alt=\"Dynatrace Logo\" /> **[Dynatrace](https://github.com/dynatrace-oss/dynatrace-mcp)** - Manage and interact with the [Dynatrace Platform ](https://www.dynatrace.com/platform) for real-time observability and monitoring.\n- <img height=\"12\" width=\"12\" src=\"https://e2b.dev/favicon.ico\" alt=\"E2B Logo\" /> **[E2B](https://github.com/e2b-dev/mcp-server)** - Run code in secure sandboxes hosted by [E2B](https://e2b.dev)\n- <img height=\"12\" width=\"12\" src=\"https://www.edgee.cloud/favicon.ico\" alt=\"Edgee Logo\" /> **[Edgee](https://github.com/edgee-cloud/mcp-server-edgee)** - Deploy and manage [Edgee](https://www.edgee.cloud) components and projects\n- <img height=\"12\" width=\"12\" src=\"https://static.edubase.net/media/brand/favicon/favicon-32x32.png\" alt=\"EduBase Logo\" /> **[EduBase](https://github.com/EduBase/MCP)** - Interact with [EduBase](https://www.edubase.net), a comprehensive e-learning platform with advanced quizzing, exam management, and content organization capabilities\n- <img height=\"12\" width=\"12\" src=\"https://www.elastic.co/favicon.ico\" alt=\"Elasticsearch Logo\" /> **[Elasticsearch](https://github.com/elastic/mcp-server-elasticsearch)** - Query your data in [Elasticsearch](https://www.elastic.co/elasticsearch)\n- <img height=\"12\" width=\"12\" src=\"https://github.com/EmberAGI/arbitrum-vibekit/blob/main/img/Ember%20Black.png?raw=true\" alt=\"Ember AI Logo\" /> **[Ember AI](https://docs.emberai.xyz/)** - A unified MCP server that enables AI agents to execute cross-chain DeFi strategies.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/656eaf5c6da3527caf362363/656ecc07555afac40df4c40e_Facicon.png\" alt=\"Endor Labs Logo\" /> **[Endor Labs](https://docs.endorlabs.com/deployment/ide/mcp/)** - Find and fix security risks in you code. Integrate [Endor Labs](https://endorlabs.com) to scan and secure your code from vulnerabilities and secret leaks.\n- <img height=\"12\" width=\"12\" src=\"https://esignatures.com/favicon.ico\" alt=\"eSignatures Logo\" /> **[eSignatures](https://github.com/esignaturescom/mcp-server-esignatures)** - Contract and template management for drafting, reviewing, and sending binding contracts.\n- <img height=\"12\" width=\"12\" src=\"https://rainmaker.espressif.com/favicon.ico\" alt=\"ESP RainMaker Logo\" /> **[ESP RainMaker](https://github.com/espressif/esp-rainmaker-mcp)** - Official Espressif MCP Server to Control and Manage ESP RainMaker Devices.\n- <img height=\"12\" width=\"12\" src=\"https://exa.ai/images/favicon-32x32.png\" alt=\"Exa Logo\" /> **[Exa](https://github.com/exa-labs/exa-mcp-server)** - Search Engine made for AIs by [Exa](https://exa.ai)\n- <img height=\"12\" width=\"12\" src=\"https://www.explorium.ai/wp-content/uploads/2025/04/Favicon-Purple-512x512-1-150x150.png\" alt=\"Explorium Logo\" /> **[Explorium](https://github.com/explorium-ai/mcp-explorium)** - B2B data and infrastructure for AI SDR & GTM Agents [Explorium](https://www.explorium.ai)\n- **[FalkorDB](https://github.com/FalkorDB/FalkorDB-MCPServer)** - FalkorDB graph database server get schema and read/write-cypher [FalkorDB](https://www.falkordb.com)\n- <img height=\"12\" width=\"12\" src=\"https://fetchserp.com/icon.png\" alt=\"fetchSERP Logo\" /> **[fetchSERP](https://github.com/fetchSERP/fetchserp-mcp-server-node)** - All-in-One SEO & Web Intelligence Toolkit API [fetchSERP](https://www.fetchserp.com/)\n- <img height=\"12\" width=\"12\" src=\"https://fewsats.com/favicon.svg\" alt=\"Fewsats Logo\" /> **[Fewsats](https://github.com/Fewsats/fewsats-mcp)** - Enable AI Agents to purchase anything in a secure way using [Fewsats](https://fewsats.com)\n- <img height=\"12\" width=\"12\" src=\"https://fibery.io/favicon.svg\" alt=\"Fibery Logo\" /> **[Fibery](https://github.com/Fibery-inc/fibery-mcp-server)** - Perform queries and entity operations in your [Fibery](https://fibery.io) workspace.\n- <img height=\"12\" width=\"12\" src=\"https://financialdatasets.ai/favicon.ico\" alt=\"Financial Datasets Logo\" /> **[Financial Datasets](https://github.com/financial-datasets/mcp-server)** - Stock market API made for AI agents\n- <img height=\"12\" width=\"12\" src=\"https://www.gstatic.com/devrel-devsite/prod/v7aeef7f1393bb1d75a4489145c511cdd5aeaa8e13ad0a83ec1b5b03612e66330/firebase/images/favicon.png\" alt=\"Firebase Logo\" /> **[Firebase](https://github.com/firebase/firebase-tools/blob/master/src/mcp)** - Firebase's experimental [MCP Server](https://firebase.google.com/docs/cli/mcp-server) to power your AI Tools\n- <img height=\"12\" width=\"12\" src=\"https://firecrawl.dev/favicon.ico\" alt=\"Firecrawl Logo\" /> **[Firecrawl](https://github.com/firecrawl/firecrawl-mcp-server)** - Extract web data with [Firecrawl](https://firecrawl.dev)\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/100200663?s=200&v=4\" alt=\"Firefly Logo\" /> **[Firefly](https://github.com/gofireflyio/firefly-mcp)** - Integrates, discovers, manages, and codifies cloud resources with [Firefly](https://firefly.ai).\n- <img height=\"12\" width=\"12\" src=\"https://fireproof.storage/favicon.ico\" alt=\"Fireproof Logo\" /> **[Fireproof](https://github.com/fireproof-storage/mcp-database-server)** - Immutable ledger database with live synchronization\n- <img height=\"12\" width=\"12\" src=\"https://fixparser.dev/favicon.ico\" alt=\"FIXParser Logo\" /> **[FIXParser](https://gitlab.com/logotype/fixparser/-/tree/main/packages/fixparser-plugin-mcp)** - A modern FIX Protocol engine for AI-powered trading agents\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/52471808\" alt=\"Fluid Attacks Logo\" /> **[Fluid Attacks](https://github.com/fluidattacks/mcp)** - Interact with the [Fluid Attacks](https://fluidattacks.com/) API, enabling vulnerability management, organization insights, and GraphQL query execution.\n- <img height=\"12\" width=\"12\" src=\"https://forevervm.com/icon.png\" alt=\"ForeverVM Logo\" /> **[ForeverVM](https://github.com/jamsocket/forevervm/tree/main/javascript/mcp-server)** - Run Python in a code sandbox.\n- <img height=\"12\" width=\"12\" src=\"https://flutterwave.com/favicon.ico\" alt=\"Flutterwave Logo\" /> **[Flutterwave](https://github.com/bajoski34/mcp-flutterwave/tree/main)** - Interact with Flutterwave payment solutions API, to manage transactions, payment links and more.\n- <img height=\"12\" width=\"12\" src=\"https://app.gibsonai.com/favicon.ico\" alt=\"GibsonAI Logo\" /> **[GibsonAI](https://github.com/GibsonAI/mcp)** - AI-Powered Cloud databases: Build, migrate, and deploy database instances with AI\n- <img height=\"12\" width=\"12\" src=\"https://gcore.com/assets/favicon/favicon-16x16.png\" alt=\"Gcore Logo\" /> **[Gcore](https://github.com/G-Core/gcore-mcp-server)** - Interact with Gcore platform services via LLM assistants, providing unified access to CDN, GPU Cloud & AI Inference, Video Streaming, WAAP, and cloud resources including instances and networks.\n- <img height=\"12\" width=\"12\" src=\"https://gitea.com/assets/img/favicon.svg\" alt=\"Gitea Logo\" /> **[Gitea](https://gitea.com/gitea/gitea-mcp)** - Interact with Gitea instances with MCP.\n- <img height=\"12\" width=\"12\" src=\"https://gitee.com/favicon.ico\" alt=\"Gitee Logo\" /> **[Gitee](https://github.com/oschina/mcp-gitee)** - Gitee API integration, repository, issue, and pull request management, and more.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/5ee25cbe47310017adf964da/6323888a9b9f4e22a7bc766b_GG%20Favicon.svg\" alt=\"GitGuardian Logo\" /> **[GitGuardian](https://github.com/GitGuardian/gg-mcp)** - GitGuardian official MCP server - Scan projects using GitGuardian's industry-leading API, which features over 500 secret detectors to prevent credential leaks before they reach public repositories. Resolve security incidents directly with rich contextual data for rapid, automated remediation.\n- <img height=\"12\" width=\"12\" src=\"https://gitlab.com/favicon.ico\" alt=\"GitLab Logo\" /> **[GitLab](https://docs.gitlab.com/user/gitlab_duo/model_context_protocol/mcp_server/)** - GitLab's official MCP server enabling AI tools to securely access GitLab project data, manage issues, and perform repository operations via OAuth 2.0.\n- <img height=\"12\" width=\"12\" src=\"https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png\" alt=\"GitHub Logo\" /> **[GitHub](https://github.com/github/github-mcp-server)** - GitHub's official MCP Server.\n- <img height=\"12\" width=\"12\" src=\"https://www.gitkraken.com/wp-content/uploads/2021/03/android-chrome-144x144-1.png\" alt=\"GitKraken Logo\" /> **[GitKraken](https://github.com/gitkraken/gk-cli?tab=readme-ov-file#mcp-server)** - A CLI for interacting with GitKraken APIs. Includes an MCP server via `gk mcp` that not only wraps GitKraken APIs, but also Jira, GitHub, GitLab, and more.\n- <img height=\"12\" width=\"12\" src=\"https://app.glean.com/images/favicon3-196x196.png\" alt=\"Glean Logo\" /> **[Glean](https://github.com/gleanwork/mcp-server)** - Enterprise search and chat using Glean's API.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.jsdelivr.net/gh/jsdelivr/globalping-media@refs/heads/master/icons/android-chrome-192x192.png\" alt=\"Globalping Logo\" /> **[Globalping](https://github.com/jsdelivr/globalping-mcp-server)** - Access a network of thousands of probes to run network commands like ping, traceroute, mtr, http and DNS resolve.\n- <img height=\"12\" width=\"12\" src=\"https://gnucleus.ai/favicon.ico\" alt=\"gNucleus Logo\" /> **[gNucleus Text-To-CAD](https://github.com/gNucleus/text-to-cad-mcp)** - Generate CAD parts and assemblies from text using gNucleus AI models.\n- <img height=\"12\" width=\"12\" src=\"https://www.gstatic.com/cgc/favicon.ico\" alt=\"Google Cloud Logo\" /> **[Google Cloud Run](https://github.com/GoogleCloudPlatform/cloud-run-mcp)** - Deploy code to Google Cloud Run\n- <img height=\"12\" width=\"12\" src=\"https://api.gologin.com/favicon.ico\" alt=\"GoLogin Logo\" /> **[GoLogin MCP server](https://github.com/gologinapp/gologin-mcp)** - Manage your GoLogin browser profiles and automation directly through AI conversations!\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/3717923?s=200&v=4\" alt=\"Google Maps Platform Logo\" /> **[Google Maps Platform Code Assist](https://github.com/googlemaps/platform-ai/tree/main/packages/code-assist)** - Ground agents on fresh, official documentation and code samples for optimal geo-related guidance and code..\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6605a2979ff17b2cd1939cd4/6605a460de47e7596ed84f06_icon256.png\" alt=\"gotoHuman Logo\" /> **[gotoHuman](https://github.com/gotohuman/gotohuman-mcp-server)** - Human-in-the-loop platform - Allow AI agents and automations to send requests for approval to your [gotoHuman](https://www.gotohuman.com) inbox.\n- <img height=\"12\" width=\"12\" src=\"https://grafana.com/favicon.ico\" alt=\"Grafana Logo\" /> **[Grafana](https://github.com/grafana/mcp-grafana)** - Search dashboards, investigate incidents and query datasources in your Grafana instance\n- <img height=\"12\" width=\"12\" src=\"https://grafbase.com/favicon.ico\" alt=\"Grafbase Logo\" /> **[Grafbase](https://github.com/grafbase/grafbase/tree/main/crates/mcp)** - Turn your GraphQL API into an efficient MCP server with schema intelligence in a single command.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/5f5e90c17e7c9eb95c7acb17/61d3457a519242f2c75c725c_favicon.png\" alt=\"Grain Logo\" /> **[Grain](https://grain.com/release-note/06-18-2025)** - Access your Grain meetings notes & transcripts directly in claude and generate reports with native Claude Prompts.\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/KCOWBYLKunDff1Dr452y6EfjiU.png\" alt=\"Graphlit Logo\" /> **[Graphlit](https://github.com/graphlit/graphlit-mcp-server)** - Ingest anything from Slack to Gmail to podcast feeds, in addition to web crawling, into a searchable [Graphlit](https://www.graphlit.com) project.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/64a5291e7847ac04fe1531ad/64a529af2f1fc7debc26f2a6_favicon-32x32.avif\" alt=\"Gremlin favicon\" /> **[Gremlin](https://github.com/gremlin/mcp)** - The official [Gremlin](https://www.gremlin.com) MCP server. Analyze your reliability posture, review recent tests and chaos engineering experiments, and create detailed reports.\n- <img height=\"12\" width=\"12\" src=\"https://greptime.com/favicon.ico\" alt=\"Greptime Logo\" /> **[GreptimeDB](https://github.com/GreptimeTeam/greptimedb-mcp-server)** - Provides AI assistants with a secure and structured way to explore and analyze data in [GreptimeDB](https://github.com/GreptimeTeam/greptimedb).\n- <img height=\"12\" width=\"12\" src=\"https://growi.org/assets/images/favicon.ico\" alt=\"GROWI Logo\" /> **[GROWI](https://github.com/growilabs/growi-mcp-server)** - Official MCP Server to integrate with GROWI APIs.\n- <img height=\"12\" width=\"12\" src=\"https://gyazo.com/favicon.ico\" alt=\"Gyazo Logo\" /> **[Gyazo](https://github.com/nota/gyazo-mcp-server)** - Search, fetch, upload, and interact with Gyazo images, including metadata and OCR data.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6374050260446c42f94dc90f/63d828be3e13d32ee6973f35_favicon-32x32.png\" alt=\"Harper Logo\" /> **[Harper](https://github.com/HarperDB/mcp-server)** - An MCP server providing an interface for MCP clients to access data within [Harper](https://www.harpersystems.dev/).\n- <img height=\"12\" width=\"12\" src=\"https://www.herokucdn.com/favicons/favicon.ico\" alt=\"Heroku Logo\" /> **[Heroku](https://github.com/heroku/heroku-mcp-server)** - Interact with the Heroku Platform through LLM-driven tools for managing apps, add-ons, dynos, databases, and more.\n- <img height=\"12\" width=\"12\" src=\"https://heyoncall.com/favicon.ico\" alt=\"HeyOnCall Logo\" /> **[HeyOnCall](https://heyoncall.com/blog/mcp-server-for-paging-a-human)** - Page a human, sending critical or non-critical alerts to the free [HeyOnCall](https://heyoncall.com/) iOS or Android apps.\n- <img height=\"12\" width=\"12\" src=\"https://www.hiveflow.ai/favicon.ico\" alt=\"Hiveflow Logo\" /> **[Hiveflow](https://github.com/hiveflowai/hiveflow-mcp-server)** - Create, manage, and execute agentic AI workflows directly from your assistant.\n- <img height=\"12\" width=\"12\" src=\"https://hiveintelligence.xyz/favicon.ico\" alt=\"Hive Intelligence Logo\" /> **[Hive Intelligence](https://github.com/hive-intel/hive-crypto-mcp)** - Ultimate cryptocurrency MCP for AI assistants with unified access to crypto, DeFi, and Web3 analytics\n- <img height=\"12\" width=\"12\" src=\"https://img.alicdn.com/imgextra/i3/O1CN01d9qrry1i6lTNa2BRa_!!6000000004364-2-tps-218-200.png\" alt=\"Hologres Logo\" /> **[Hologres](https://github.com/aliyun/alibabacloud-hologres-mcp-server)** - Connect to a [Hologres](https://www.alibabacloud.com/en/product/hologres) instance, get table metadata, query and analyze data.\n- <img height=\"12\" width=\"12\" src=\"https://brew.sh/assets/img/favicon.ico\" alt=\"Homebrew Logo\" /> **[Homebrew](https://docs.brew.sh/MCP-Server)** Allows [Homebrew](https://brew.sh) users to run Homebrew commands locally.\n- <img height=\"12\" width=\"12\" src=\"https://www.honeycomb.io/favicon.ico\" alt=\"Honeycomb Logo\" /> **[Honeycomb](https://github.com/honeycombio/honeycomb-mcp)** Allows [Honeycomb](https://www.honeycomb.io/) Enterprise customers to query and analyze their data, alerts, dashboards, and more; and cross-reference production behavior with the codebase.\n- <img height=\"12\" width=\"12\" src=\"https://static.hsinfrastatic.net/StyleGuideUI/static-3.438/img/sprocket/favicon-32x32.png\" alt=\"HubSpot Logo\" /> **[HubSpot](https://developer.hubspot.com/mcp)** - Connect, manage, and interact with [HubSpot](https://www.hubspot.com/) CRM data\n- <img height=\"12\" width=\"12\" src=\"https://huggingface.co/datasets/huggingface/brand-assets/resolve/main/hf-logo.svg\" alt=\"HuggingFace Logo\" /> **[Hugging Face](https://huggingface.co/settings/mcp)** - Connect to the Hugging Face Hub APIs programmatically: semantic search for spaces and papers, exploration of datasets and models, and access to all compatible MCP Gradio tool spaces!\n- <img height=\"12\" width=\"12\" src=\"https://hunter.io/favicon.ico\" alt=\"Hunter Logo\" /> **[Hunter](https://github.com/hunter-io/hunter-mcp)** - Interact with the [Hunter API](https://hunter.io) to get B2B data using natural language.\n- <img height=\"12\" width=\"12\" src=\"https://app.hyperbolic.xyz/hyperbolic-logo.svg\" alt=\"Hyperbolic Labs Logo\" /> **[Hyperbolic](https://github.com/HyperbolicLabs/hyperbolic-mcp)** - Interact with Hyperbolic's GPU cloud, enabling agents and LLMs to view and rent available GPUs, SSH into them, and run GPU-powered workloads for you.\n- <img height=\"12\" width=\"12\" src=\"https://hyperbrowser-assets-bucket.s3.us-east-1.amazonaws.com/Hyperbrowser-logo.png\" alt=\"Hyperbrowsers23 Logo\" /> **[Hyperbrowser](https://github.com/hyperbrowserai/mcp)** - [Hyperbrowser](https://www.hyperbrowser.ai/) is the next-generation platform empowering AI agents and enabling effortless, scalable browser automation.\n- **[IBM wxflows](https://github.com/IBM/wxflows/tree/main/examples/mcp/javascript)** - Tool platform by IBM to build, test and deploy tools for any data source\n- <img height=\"12\" width=\"12\" src=\"https://www.getinboxzero.com/icon.png\" alt=\"Inbox Zero Logo\" /> **[Inbox Zero](https://github.com/elie222/inbox-zero/tree/main/apps/mcp-server)** - AI personal assistant for email [Inbox Zero](https://www.getinboxzero.com)\n- <img height=\"12\" width=\"12\" src=\"https://www.inflectra.com/Favicon.ico\" alt=\"Inflectra Logo\" /> **[Inflectra Spira](https://github.com/Inflectra/mcp-server-spira)** - Connect to your instance of the SpiraTest, SpiraTeam or SpiraPlan application lifecycle management platform by [Inflectra](https://www.inflectra.com)\n-  **[Inkeep](https://github.com/inkeep/mcp-server-python)** - RAG Search over your content powered by [Inkeep](https://inkeep.com)\n- <img height=\"12\" width=\"12\" src=\"https://integration.app/favicon.ico\" alt=\"Integration App Icon\" /> **[Integration App](https://github.com/integration-app/mcp-server)** - Interact with any other SaaS applications on behalf of your customers.\n- <img height=\"12\" width=\"12\" src=\"https://www.ip2location.io/favicon.ico\" alt=\"IP2Location.io Icon\" /> **[IP2Location.io](https://github.com/ip2location/mcp-ip2location-io)** - Interact with IP2Location.io API to retrieve the geolocation information for an IP address.\n- <img height=\"12\" width=\"12\" src=\"https://static.iplocate.io/custom/logo-square-rounded.png\" alt=\"IPLocate Icon\" /> **[IPLocate](https://github.com/iplocate/mcp-server-iplocate)** - Look up IP address geolocation, network information, detect proxies and VPNs, and find abuse contact details using [IPLocate.io](https://www.iplocate.io)\n- <img height=\"12\" width=\"12\" src=\"https://jellyfish.co/favicon.ico\" alt=\"Jellyfish Logo\" /> **[Jellyfish](https://github.com/Jellyfish-AI/jellyfish-mcp)** ‚Äì Give your AI agent context about your team's software engineering allocations and workflow via the [Jellyfish](https://jellyfish.co) platform\n- <img alt=\"jetbrains\" height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/jetbrains\" /> **[JetBrains](https://www.jetbrains.com/help/idea/mcp-server.html)** ‚Äì Work on your code with JetBrains IDEs: IntelliJ IDEA, PhpStorm, etc.\n- <img height=\"12\" width=\"12\" src=\"https://speedmedia.jfrog.com/08612fe1-9391-4cf3-ac1a-6dd49c36b276/media.jfrog.com/wp-content/uploads/2019/04/20131046/Jfrog16-1.png\" alt=\"JFrog Logo\" /> **[JFrog](https://github.com/jfrog/mcp-jfrog)** - Model Context Protocol (MCP) Server for the [JFrog](https://jfrog.com/) Platform API, enabling repository management, build tracking, release lifecycle management, and more.\n- <img height=\"12\" width=\"12\" src=\"https://jenkins.io/images/logos/jenkins/jenkins.svg\" alt=\"Jenkins Logo\" /> **[Jenkins](https://plugins.jenkins.io/mcp-server/)** - Official Jenkins MCP Server plugin enabling AI assistants to manage builds, check job statuses, retrieve logs, and integrate with CI/CD pipelines through standardized MCP interface.\n- <img height=\"12\" width=\"12\" src=\"https://kagi.com/favicon.ico\" alt=\"Kagi Logo\" /> **[Kagi Search](https://github.com/kagisearch/kagimcp)** - Search the web using Kagi's search API\n- <img height=\"12\" width=\"12\" src=\"https://connection.keboola.com/favicon.ico\" alt=\"Keboola Logo\" /> **[Keboola](https://github.com/keboola/keboola-mcp-server)** - Build robust data workflows, integrations, and analytics on a single intuitive platform.\n- <img height=\"12\" width=\"12\" src=\"https://mcp.onkernel.com/favicon.svg\" alt=\"Kernel Logo\" /> **[Kernel](https://github.com/onkernel/kernel-mcp-server)** ‚Äì Access Kernel's cloud‚Äëbased browsers via MCP.\n- <img height=\"12\" width=\"12\" src=\"https://keywordseverywhere.com/favicon.ico\" alt=\"Keywords Everywhere Logo\" /> **[Keywords Everywhere](https://api.keywordseverywhere.com/docs/#/mcp_integration)** ‚Äì Access SEO data through the official Keywords Everywhere API MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://keywordspeopleuse.com/favicon.ico\" alt=\"KeywordsPeopleUse Logo\" /> **[KeywordsPeopleUse.com](https://github.com/data-skunks/kpu-mcp)** - Find questions people ask online with [KeywordsPeopleUse](https://keywordspeopleuse.com).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/4815054\" alt=\"Kintone Logo\" /> **[Kintone](https://github.com/kintone/mcp-server)** - The official local MCP server for [Kintone](https://kintone.com).\n- <img height=\"12\" width=\"12\" src=\"https://kirokuforms.com/favicon.svg\" alt=\"KirokuForms Logo\" /> **[KirokuForms](https://www.kirokuforms.com/ai/mcp)** - [KirokuForms](https://www.kirokuforms.com) is an AI-powered form platform combining professional form building with Human-in-the-Loop (HITL) capabilities. Create custom forms, collect submissions, and integrate human oversight into AI workflows through [MCP integration](https://kirokuforms.com/ai/mcp).\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/klavis-ai/klavis/main/static/klavis-ai.png\" alt=\"Klavis Logo\" /> **[Klavis ReportGen](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/report_generation)** - Create professional reports from a simple user query.\n- <img height=\"12\" width=\"12\" src=\"https://www.klaviyo.com/media/Favicon-16by16.png\" alt=\"Klaviyo Logo\" /> **[Klaviyo](https://developers.klaviyo.com/en/docs/klaviyo_mcp_server)** - Interact with your [Klaviyo](https://www.klaviyo.com/) marketing data.\n- <img height=\"12\" width=\"12\" src=\"https://platform.kluster.ai/logo-light.svg\" alt=\"kluster.ai Logo\" /> **[kluster.ai](https://docs.kluster.ai/get-started/mcp/overview/)** - kluster.ai provides MCP servers that bring AI services directly into your development workflow, including guardrails like hallucination detection.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6347ea26001f0287c592ff91/649953ef7a9ffe1f3e492b5a_Knit%20Logo.svg\" alt=\"Knit Logo\" /> **[Knit MCP Server](https://developers.getknit.dev/docs/knit-mcp-server-getting-started)** - Production-ready remote MCP servers that enable you to connect with 10000+ tools across CRM, HRIS, Payroll, Accounting, ERP, Calendar, Expense Management, and Chat categories.\n- <img height=\"12\" width=\"12\" src=\"https://knock.app/favicon/favicon-dark.svg\" alt=\"Knock Logo\" /> **[Knock MCP Server](https://github.com/knocklabs/agent-toolkit#model-context-protocol-mcp)** - Send product and customer messaging across email, in-app, push, SMS, Slack, MS Teams.\n- <img height=\"12\" width=\"12\" src=\"https://kumo-sdk-public.s3.us-west-2.amazonaws.com/rfm-colabs/kumo_ai_logo.jpeg\" alt=\"Kumo Logo\" /> **[Kumo](https://github.com/kumo-ai/kumo-rfm-mcp)** - MCP Server to interact with KumoRFM, a foundation model for generating predictions from your relational data.\n- <img height=\"12\" width=\"12\" src=\"https://www.kurrent.io/favicon.ico\" alt=\"Kurrent Logo\" /> **[KurrentDB](https://github.com/kurrent-io/mcp-server)** - This is a simple MCP server to help you explore data and prototype projections faster on top of KurrentDB.\n- <img height=\"12\" width=\"12\" src=\"https://kuzudb.com/favicon.ico\" alt=\"Kuzu Logo\" /> **[Kuzu](https://github.com/kuzudb/kuzu-mcp-server)** - This server enables LLMs to inspect database schemas and execute queries on the provided Kuzu graph database. See [blog](https://blog.kuzudb.com/post/2025-03-23-kuzu-mcp-server/)) for a debugging use case.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/187484914\" alt=\"KWDB Logo\" /> **[KWDB](https://github.com/KWDB/kwdb-mcp-server)** - Reading, writing, querying, modifying data, and performing DDL operations with data in your KWDB Database.\n- <img height=\"12\" width=\"12\" src=\"https://labelstud.io/favicon-16x16.png\" alt=\"Label Studio Logo\" /> **[Label Studio](https://github.com/HumanSignal/label-studio-mcp-server)** - Open Source data labeling platform.\n- <img src=\"https://avatars.githubusercontent.com/u/188884511?s=48&v=4\" alt=\"Lambda Capture\" width=\"12\" height=\"12\"> **[Lambda Capture](https://github.com/lambda-capture/mcp-server)** - Macroeconomic Forecasts & Semantic Context from Federal Reserve, Bank of England, ECB.\n- <img src=\"https://www.lambdatest.com/resources/images/header/professional-service.svg\" alt=\"LambdaTest MCP server\" width=\"12\" height=\"12\"> **[LambdaTest](https://www.lambdatest.com/mcp)** - LambdaTest MCP Servers ranging from Accessibility, SmartUI, Automation, and HyperExecute allows you to connect AI assistants with your testing workflow, streamlining setup, analyzing failures, and generating fixes to speed up testing and improve efficiency.\n- <img height=\"12\" width=\"12\" src=\"https://langfuse.com/favicon.ico\" alt=\"Langfuse Logo\" /> **[Langfuse Prompt Management](https://github.com/langfuse/mcp-server-langfuse)** - Open-source tool for collaborative editing, versioning, evaluating, and releasing prompts.\n- <img height=\"12\" width=\"12\" src=\"https://laratranslate.com/favicon.ico\" alt=\"Lara Translate Logo\" /> **[Lara Translate](https://github.com/translated/lara-mcp)** - MCP Server for Lara Translate API, enabling powerful translation capabilities with support for language detection and context-aware translations.\n- <img height=\"12\" width=\"12\" src=\"https://last9.io/favicon.png\" alt=\"Last9 Logo\" /> **[Last9](https://github.com/last9/last9-mcp-server)** - Seamlessly bring real-time production context‚Äîlogs, metrics, and traces‚Äîinto your local environment to auto-fix code faster.\n- <img height=\"12\" width=\"12\" src=\"https://www.launchdarkly.com/favicon.ico\" alt=\"LaunchDarkly Logo\" /> **[LaunchDarkly](https://github.com/launchdarkly/mcp-server)** - LaunchDarkly is a continuous delivery platform that provides feature flags as a service and allows developers to iterate quickly and safely.\n- <img height=\"12\" width=\"12\" src=\"https://www.line.me/favicon-32x32.png\" alt=\"LINE Logo\" /> **[LINE](https://github.com/line/line-bot-mcp-server)** - Integrates the LINE Messaging API to connect an AI Agent to the LINE Official Account.\n- <img height=\"12\" width=\"12\" src=\"https://linear.app/favicon.ico\" alt=\"Linear Logo\" /> **[Linear](https://linear.app/docs/mcp)** - Search, create, and update Linear issues, projects, and comments.\n- <img height=\"12\" width=\"12\" src=\"https://lingo.dev/favicon.ico\" alt=\"Lingo.dev Logo\" /> **[Lingo.dev](https://github.com/lingodotdev/lingo.dev/blob/main/mcp.md)** - Make your AI agent speak every language on the planet, using [Lingo.dev](https://lingo.dev) Localization Engine.\n- <img height=\"12\" width=\"12\" src=\"https://ligo.ertiqah.com/favicon.avif\" alt=\"LiGo Logo\" /> **[LinkedIn MCP Runner](https://github.com/ertiqah/linkedin-mcp-runner)** - Write, edit, and schedule LinkedIn posts right from ChatGPT and Claude with [LiGo](https://ligo.ertiqah.com/).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/175112039?s=200&v=4\" alt=\"Linkup Logo\" /> **[Linkup](https://github.com/LinkupPlatform/js-mcp-server)** - (JS version) MCP server that provides web search capabilities through Linkup's advanced search API. This server enables AI assistants and development tools to perform intelligent web searches with natural language queries.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/175112039?s=200&v=4\" alt=\"Linkup Logo\" /> **[Linkup](https://github.com/LinkupPlatform/python-mcp-server)** - (Python version) MCP server that provides web search capabilities through Linkup's advanced search API. This server enables AI assistants and development tools to perform intelligent web searches with natural language queries.\n- <img src=\"https://avatars.githubusercontent.com/u/149083471\" alt=\"Lippia.io\" width=\"12\" height=\"12\"> **[Lippia](https://github.com/Lippia-io/Lippia-MCP-Server/blob/main/getting-started.md)** - MCP Server to accelerate Test Automation using Lippia Framework.\n- <img src=\"https://gornschool.com/gorn.png\" alt=\"Lisply\" width=\"12\" height=\"12\"> **[Lisply](https://github.com/gornskew/lisply-mcp)** - Flexible frontend for compliant Lisp-speaking backends.\n- <img height=\"12\" width=\"12\" src=\"https://litmus.io/favicon.ico\" alt=\"Litmus.io Logo\" /> **[Litmus.io](https://github.com/litmusautomation/litmus-mcp-server)** - Official MCP server for configuring [Litmus](https://litmus.io) Edge for Industrial Data Collection, Edge Analytics & Industrial AI.\n- <img height=\"12\" width=\"12\" src=\"https://liveblocks.io/favicon.ico\" alt=\"Liveblocks Logo\" /> **[Liveblocks](https://github.com/liveblocks/liveblocks-mcp-server)** - Ready‚Äëmade features for AI & human collaboration‚Äîuse this to develop your [Liveblocks](https://liveblocks.io) app quicker.\n- <img height=\"12\" width=\"12\" src=\"https://logfire.pydantic.dev/favicon.ico\" alt=\"Logfire Logo\" /> **[Logfire](https://github.com/pydantic/logfire-mcp)** - Provides access to OpenTelemetry traces and metrics through Logfire.\n- <img height=\"12\" width=\"12\" src=\"https://make.magicmealkits.com/favicon.ico\" alt=\"Magic Meal Kits Logo\" /> **[Magic Meal Kits](https://github.com/pureugong/mmk-mcp)** - Unleash Make's Full Potential by [Magic Meal Kits](https://make.magicmealkits.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.mailgun.com/favicon.ico\" alt=\"Mailgun Logo\" /> **[Mailgun](https://github.com/mailgun/mailgun-mcp-server)** - Interact with Mailgun API.\n- <img height=\"12\" width=\"12\" src=\"https://www.mailjet.com/favicon.ico\" alt=\"Mailjet Logo\" /> **[Mailjet](https://github.com/mailgun/mailjet-mcp-server)** - Official MCP server which allows AI agents to interact with contact, campaign, segmentation, statistics, workflow (and more) APIs from [Sinch Mailjet](https://www.mailjet.com).\n- <img height=\"12\" width=\"12\" src=\"https://www.make.com/favicon.ico\" alt=\"Make Logo\" /> **[Make](https://github.com/integromat/make-mcp-server)** - Turn your [Make](https://www.make.com/) scenarios into callable tools for AI assistants.\n- <img height=\"12\" width=\"12\" src=\"https://static-assets.mapbox.com/branding/favicon/v1/favicon.ico\" alt=\"Mapbox Logo\" /> **[Mapbox](https://github.com/mapbox/mcp-server)** - Unlock geospatial intelligence through Mapbox APIs like geocoding, POI search, directions, isochrones and more.\n- <img height=\"12\" width=\"12\" src=\"https://www.mariadb.com/favicon.ico\" alt=\"MariaDB Logo\" /> **[MariaDB](https://github.com/mariadb/mcp)** - A standard interface for managing and querying MariaDB databases, supporting both standard SQL operations and advanced vector/embedding-based search.\n- <img height=\"14\" width=\"14\" src=\"https://raw.githubusercontent.com/rust-mcp-stack/mcp-discovery/refs/heads/main/docs/_media/mcp-discovery-logo.png\" alt=\"mcp-discovery logo\" /> **[MCP Discovery](https://github.com/rust-mcp-stack/mcp-discovery)** - A lightweight CLI tool built in Rust for discovering MCP server capabilities.\n- <img height=\"12\" width=\"12\" src=\"https://googleapis.github.io/genai-toolbox/favicons/favicon.ico\" alt=\"MCP Toolbox for Databases Logo\" /> **[MCP Toolbox for Databases](https://github.com/googleapis/genai-toolbox)** - Open source MCP server specializing in easy, fast, and secure tools for Databases. Supports  AlloyDB, BigQuery, Bigtable, Cloud SQL, Dgraph, Looker, MySQL, Neo4j, Postgres, Spanner, and more.\n- <img height=\"12\" width=\"12\" src=\"https://www.meilisearch.com/favicon.ico\" alt=\"Meilisearch Logo\" /> **[Meilisearch](https://github.com/meilisearch/meilisearch-mcp)** - Interact & query with Meilisearch (Full-text & semantic search API)\n- <img height=\"12\" width=\"12\" src=\"https://memgraph.com/favicon.png\" alt=\"Memgraph Logo\" /> **[Memgraph](https://github.com/memgraph/ai-toolkit/tree/main/integrations/mcp-memgraph)** - Query your data in [Memgraph](https://memgraph.com/) graph database.\n- <img height=\"12\" width=\"12\" src=\"https://www.mercadolibre.com.ar/favicon.ico\" alt=\"MercadoLibre Logo\" /> **[Mercado Libre](https://mcp.mercadolibre.com/)** - Mercado Libre's official MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://www.mercadopago.com/favicon.ico\" alt=\"MercadoPago Logo\" /> **[Mercado Pago](https://mcp.mercadopago.com/)** - Mercado Pago's official MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://metoro.io/static/images/logos/MetoroLogo.png\" alt=\"Metoro Logo\" /> **[Metoro](https://github.com/metoro-io/metoro-mcp-server)** - Query and interact with kubernetes environments monitored by Metoro\n- <img height=\"12\" width=\"12\" src=\"https://claritystatic.azureedge.net/images/logo.ico\" alt=\"Microsoft Clarity Logo\"/> **[Microsoft Clarity](https://github.com/microsoft/clarity-mcp-server)** - Official MCP Server to get your behavioral analytics data and insights from [Clarity](https://clarity.microsoft.com)\n- <img height=\"12\" width=\"12\" src=\"https://conn-afd-prod-endpoint-bmc9bqahasf3grgk.b01.azurefd.net/releases/v1.0.1735/1.0.1735.4099/commondataserviceforapps/icon.png\" alt=\"Microsoft Dataverse Logo\" /> **[Microsoft Dataverse](https://go.microsoft.com/fwlink/?linkid=2320176)** - Chat over your business data using NL - Discover tables, run queries, retrieve data, insert or update records, and execute custom prompts grounded in business knowledge and context.\n- <img height=\"12\" width=\"12\" src=\"https://learn.microsoft.com/favicon.ico\" alt=\"Microsoft Learn Logo\" /> **[Microsoft Learn Docs](https://github.com/microsoftdocs/mcp)** - An MCP server that provides structured access to Microsoft's official documentation. Retrieves accurate, authoritative, and context-aware technical content for code generation, question answering, and workflow grounding.\n- <img height=\"12\" width=\"12\" src=\"https://statics.teams.microsoft.com/hashedassets/favicon/prod/favicon-9f45b466.ico\" alt=\"Microsoft Teams Logo\" /> **[Microsoft Teams](https://devblogs.microsoft.com/microsoft365dev/announcing-the-updated-teams-ai-library-and-mcp-support/)** - Official Microsoft Teams AI Library with MCP support enabling advanced agent orchestration, multi-agent collaboration, and seamless integration with Teams messaging and collaboration features.\n- <img alt=\"favicon_32x32\" height=\"12\" width=\"12\" src=\"https://milvus.io/favicon-32x32.png\" /> **[Milvus](https://github.com/zilliztech/mcp-server-milvus)** - Search, Query and interact with data in your Milvus Vector Database.\n- <img src=\"https://www.mimilabs.ai/logos/mimilabsSquare.svg\" alt=\"mimilabs\" width=\"12\" height=\"12\"> **[mimilabs](https://www.mimilabs.ai/mcp)** - A US healthcare data discovery guide for 50+ gov sources and thousands of publicly available US healthcare datasets regarding gov-funded programs, policies, drug pricings, clinical trials, etc.\n- <img src=\"https://avatars.githubusercontent.com/u/94089762?s=48&v=4\" alt=\"Mobb\" width=\"12\" height=\"12\"> **[Mobb](https://github.com/mobb-dev/bugsy?tab=readme-ov-file#model-context-protocol-mcp-server)** - The [Mobb Vibe Shield](https://vibe.mobb.ai/) MCP server identifies and remediates vulnerabilities in both human and AI-written code, ensuring your applications remain secure without slowing development.\n- <img alt=\"favicon\" height=\"12\" width=\"12\" src=\"https://console.gomomento.com/favicon.ico\" /> **[Momento](https://github.com/momentohq/mcp-momento)** - Momento Cache lets you quickly improve your performance, reduce costs, and handle load at any scale.\n- <img height=\"12\" width=\"12\" src=\"https://www.monday.com/favicon.ico\" alt=\"Monday.com Logo\" /> **[Monday.com](https://github.com/mondaycom/mcp)** - Interact with Monday.com boards, items, accounts and work forms.\n- <img alt=\"favicon\" height=\"12\" width=\"12\" src=\"https://www.mongodb.com/favicon.ico\" /> **[MongoDB](https://github.com/mongodb-js/mongodb-mcp-server)** - Both MongoDB Community Server and MongoDB Atlas are supported.\n- <img height=\"12\" width=\"12\" src=\"https://moorcheh.ai/Moorcheh-mcp.ico\" alt=\"Moorcheh Logo\" /> **[Moorcheh](https://github.com/moorcheh-ai/moorcheh-mcp)** - Embed, store, and search your documents, and build secure chatbots and RAG systems with Moorcheh's information-theoretic semantic search engine\n- <img height=\"12\" width=\"12\" src=\"https://www.motherduck.com/favicon.ico\" alt=\"MotherDuck Logo\" /> **[MotherDuck](https://github.com/motherduckdb/mcp-server-motherduck)** - Query and analyze data with MotherDuck and local DuckDB\n- <img height=\"12\" width=\"12\" src=\"https://docs.mulesoft.com/_/img/favicon.ico\" alt=\"Mulesoft Logo\" /> **[Mulesoft](https://www.npmjs.com/package/@mulesoft/mcp-server)** - Build, deploy, and manage MuleSoft applications with natural language, directly inside any compatible IDE.\n- <img height=\"12\" width=\"12\" src=\"https://www.multiplayer.app/favicon-32x32.png\" alt=\"Multiplayer Logo\" /> **[Multiplayer](https://www.multiplayer.app/docs/ai/mcp-server)** - Analyze your full stack session recordings easily. Record a bug with Multiplayer, analyze and fix it with LLM\n-  **[Nango](https://docs.nango.dev/guides/use-cases/mcp-server)** - Integrate your AI agent with 500+ APIs: Auth, custom tools, and observability. Open-source.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/38020270\" alt=\"NanoVMs Logo\" /> **[NanoVMs](https://github.com/nanovms/ops-mcp)** - Easily Build and Deploy unikernels to any cloud.\n- <img height=\"12\" width=\"12\" src=\"https://needle-ai.com/images/needle-logo-orange-2-rounded.png\" alt=\"Needle AI Logo\" /> **[Needle](https://github.com/needle-ai/needle-mcp)** - Production-ready RAG out of the box to search and retrieve data from your own documents.\n- <img height=\"12\" width=\"12\" src=\"https://neo4j.com/favicon.ico\" alt=\"Neo4j Logo\" /> **[Neo4j](https://github.com/neo4j-contrib/mcp-neo4j/)** - Neo4j graph database server (schema + read/write-cypher) and separate graph database backed memory\n- <img height=\"12\" width=\"12\" src=\"https://knowall.ai/favicon.ico\" alt=\"Neo4j Agent Memory Logo\" /> **[Neo4j Agent Memory](https://github.com/knowall-ai/mcp-neo4j-agent-memory)** - Memory management for AI agents using Neo4j knowledge graphs\n- <img height=\"12\" width=\"12\" src=\"https://neo4j.com/favicon.ico\" alt=\"Neo4j Logo\" /> **[Neo4j GDS](https://github.com/neo4j-contrib/gds-agent)** - Neo4j graph data science server with comprehensive graph algorithms that enables complex graph reasoning and Q&A.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/183852044?s=48&v=4\" alt=\"Neon Logo\" /> **[Neon](https://github.com/neondatabase/mcp-server-neon)** - Interact with the Neon serverless Postgres platform\n- <img height=\"12\" width=\"12\" src=\"https://app.usenerve.com/favicon.ico\" alt=\"Nerve Logo\" /> **[Nerve](https://github.com/nerve-hq/nerve-mcp-server)** - Search and Act on all your company data across all your SaaS apps via [Nerve](https://www.usenerve.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.netdata.cloud/favicon-32x32.png\" alt=\"Netdata Logo\" /> **[Netdata](https://github.com/netdata/netdata/blob/master/src/web/mcp/README.md)** - Discovery, exploration, reporting and root cause analysis using all observability data, including metrics, logs, systems, containers, processes, and network connections\n- <img height=\"12\" width=\"12\" src=\"https://www.netlify.com/favicon/icon.svg\" alt=\"Netlify Logo\" /> **[Netlify](https://docs.netlify.com/welcome/build-with-ai/netlify-mcp-server/)** - Create, build, deploy, and manage your websites with Netlify web platform.\n- <img height=\"12\" width=\"12\" src=\"https://www.thenile.dev/favicon.ico\" alt=\"Nile Logo\" /> **[Nile](https://github.com/niledatabase/nile-mcp-server)** - An MCP server that talks to Nile - Postgres re-engineered for B2B apps. Manage and query databases, tenants, users, auth using LLMs\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/208441832?s=400&v=4\" alt=\"Nodit Logo\" /> **[Nodit](https://github.com/noditlabs/nodit-mcp-server)** - Official Nodit MCP Server enabling access to multi-chain RPC Nodes and Data APIs for blockchain data.\n- <img height=\"12\" width=\"12\" src=\"https://app.norman.finance/favicons/favicon-32x32.png\" alt=\"Norman Logo\" /> **[Norman Finance](https://github.com/norman-finance/norman-mcp-server)** - MCP server for managing accounting and taxes with Norman Finance.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/4792552?s=200&v=4\" alt=\"Notion Logo\" /> **[Notion](https://github.com/makenotion/notion-mcp-server#readme)** - This project implements an MCP server for the Notion API.\n-  **[Nutrient](https://github.com/PSPDFKit/nutrient-dws-mcp-server)** - Create, Edit, Sign, Extract Documents using Natural Language\n- <img height=\"12\" width=\"12\" src=\"https://nx.dev/favicon/favicon.svg\" alt=\"Nx Logo\" /> **[Nx](https://github.com/nrwl/nx-console/blob/master/apps/nx-mcp)** - Makes [Nx's understanding](https://nx.dev/features/enhance-AI) of your codebase accessible to LLMs, providing insights into the codebase architecture, project relationships and runnable tasks thus allowing AI to make precise code suggestions.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/82347605?s=48&v=4\" alt=\"OceanBase Logo\" /> **[OceanBase](https://github.com/oceanbase/mcp-oceanbase)** - MCP Server for OceanBase database and its tools\n- <img height=\"12\" width=\"12\" src=\"https://docs.octagonagents.com/logo.svg\" alt=\"Octagon Logo\" /> **[Octagon](https://github.com/OctagonAI/octagon-mcp-server)** - Deliver real-time investment research with extensive private and public market data.\n- <img height=\"12\" width=\"12\" src=\"https://octoeverywhere.com/img/logo.png\" alt=\"OctoEverywhere Logo\" /> **[OctoEverywhere](https://github.com/OctoEverywhere/mcp)** - A 3D Printing MCP server that allows for querying for live state, webcam snapshots, and 3D printer control.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/211697972\" alt=\"Offorte Logo\" /> **[Offorte](https://github.com/offorte/offorte-mcp-server#readme)** - Offorte Proposal Software official MCP server enables creation and sending of business proposals.\n-  **[OlaMaps](https://pypi.org/project/ola-maps-mcp-server)** - Official Ola Maps MCP Server for services like geocode, directions, place details and many more.\n- <img height=\"12\" width=\"12\" src=\"https://www.olostep.com/favicon.ico\" alt=\"Olostep\" /> **[Olostep](https://github.com/olostep/olostep-mcp-server)** - Search, scrape and crawl content from web. Real-time results in clean markdown.\n- <img height=\"12\" width=\"12\" src=\"https://static.onlyoffice.com/images/favicon.ico\" alt=\"ONLYOFFICE DocSpace\" /> **[ONLYOFFICE DocSpace](https://github.com/ONLYOFFICE/docspace-mcp)** - Interact with [ONLYOFFICE DocSpace](https://www.onlyoffice.com/docspace.aspx) API to create rooms, manage files and folders.\n- **[OMOP MCP](https://github.com/OHNLP/omop_mcp)** - Map clinical terminology to OMOP concepts using LLMs for healthcare data standardization.\n- <img height=\"12\" width=\"12\" src=\"https://op.gg/favicon.ico\" alt=\"OP.GG Logo\" /> **[OP.GG](https://github.com/opgginc/opgg-mcp)** - Access real-time gaming data across popular titles like League of Legends, TFT, and Valorant, offering champion analytics, esports schedules, meta compositions, and character statistics.\n- <img height=\"12\" width=\"12\" src=\"https://www.openfort.io/img/icon.svg\" alt=\"Openfort\" /> **[Openfort](https://github.com/openfort-xyz/mcp)** - Connect your AI to Openfort's smart wallet, auth, and project infrastructure.\n- <img height=\"12\" width=\"12\" src=\"https://open-metadata.org/favicon.ico\" alt=\"OpenMetadata\" /> **[OpenMetadata](https://open-metadata.org/mcp)** - The first Enterprise-grade MCP server for metadata\n- <img height=\"12\" width=\"12\" src=\"https://opensearch.org/wp-content/uploads/2025/01/opensearch_mark_default.svg\" alt=\"OpenSearch Logo\" /> **[OpenSearch](https://github.com/opensearch-project/opensearch-mcp-server-py)** -  MCP server that enables AI agents to perform search and analytics use cases on data stored in [OpenSearch](https://opensearch.org/).\n- <img height=\"12\" width=\"12\" src=\"https://app.opslevel.com/favicon.ico\" alt=\"OpsLevel\" /> **[OpsLevel](https://github.com/opslevel/opslevel-mcp)** - Official MCP Server for [OpsLevel](https://www.opslevel.com).\n- <img height=\"12\" width=\"12\" src=\"https://optuna.org/assets/img/favicon.ico\" alt=\"Optuna Logo\" /> **[Optuna](https://github.com/optuna/optuna-mcp)** - Official MCP server enabling seamless orchestration of hyperparameter search and other optimization tasks with [Optuna](https://optuna.org/).\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/oracle/mcp/refs/heads/main/oracle.svg\" alt=\"Oracle Logo\" /> **[Oracle](https://docs.oracle.com/en/database/oracle/sql-developer-command-line/25.2/sqcug/starting-and-managing-sqlcl-mcp-server.html#GUID-5F916B5D-8670-42BD-9F8B-D3D2424EC47E)** - Official [Oracle Database: SQLcl ](https://www.oracle.com/database/sqldeveloper/technologies/sqlcl/download/) MCP server enabling all access to any Oracle Database via native MCP support directly in SQLcl.\n- <img height=\"12\" width=\"12\" src=\"https://orshot.com/brand/favicon.svg\" alt=\"Orshot Logo\" /> **[Orshot](https://github.com/rishimohan/orshot-mcp-server)** - Official [Orshot](https://orshot.com) MCP server to dynamically generate images from custom design templates.\n- <img height=\"12\" width=\"12\" src=\"https://oxylabs.io/favicon.ico\" alt=\"Oxylabs Logo\" /> **[Oxylabs](https://github.com/oxylabs/oxylabs-mcp)** - Scrape websites with Oxylabs Web API, supporting dynamic rendering and parsing for structured data extraction.\n- <img height=\"12\" width=\"12\" src=\"https://developer.paddle.com/favicon.svg\" alt=\"Paddle Logo\" /> **[Paddle](https://github.com/PaddleHQ/paddle-mcp-server)** - Interact with the Paddle API. Manage product catalog, billing and subscriptions, and reports.\n- **[PaddleOCR](https://paddlepaddle.github.io/PaddleOCR/latest/en/version3.x/deployment/mcp_server.html)** - An MCP server that brings enterprise-grade OCR and document parsing capabilities to AI applications.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.brandfolder.io/YX9ETPCP/at/266537g8kh6mmvt24jvsjb/P-GreenRGB.svg\" alt=\"PagerDuty Logo\" /> **[PagerDuty](https://github.com/PagerDuty/pagerduty-mcp-server)** - Interact with your PagerDuty account, allowing you to manage incidents, services, schedules, and more directly from your MCP-enabled client.\n- **[Pagos](https://github.com/pagos-ai/pagos-mcp)** - Interact with the Pagos API. Query Credit Card BIN Data with more to come.\n- <img height=\"12\" width=\"12\" src=\"https://paiml.com/favicon.ico\" alt=\"PAIML Logo\" /> **[PAIML MCP Agent Toolkit](https://github.com/paiml/paiml-mcp-agent-toolkit)** - Professional project scaffolding toolkit with zero-configuration AI context generation, template generation for Rust/Deno/Python projects, and hybrid neuro-symbolic code analysis.\n- <img height=\"12\" width=\"12\" src=\"https://app.paperinvest.io/favicon.svg\" alt=\"Paper Logo\" /> **[Paper](https://github.com/paperinvest/mcp-server)** - Realistic paper trading platform with market simulation, 22 broker emulations, and professional tools for risk-free trading practice. First trading platform with MCP integration.\n- **[Patronus AI](https://github.com/patronus-ai/patronus-mcp-server)** - Test, evaluate, and optimize AI agents and RAG apps\n- <img height=\"12\" width=\"12\" src=\"https://mcp.paubox.com/paubox.png\" alt=\"Paubox Logo\" />**[Paubox](https://mcp.paubox.com)** - Official MCP server which allows AI agents to interact with Paubox Email API. HITRUST certified.\n- <img height=\"12\" width=\"12\" src=\"https://www.paypalobjects.com/webstatic/icon/favicon.ico\" alt=\"PayPal Logo\" /> **[PayPal](https://mcp.paypal.com)** - PayPal's official MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://ww2-secure.pearl.com/static/pearl/pearl-logo.svg\" alt=\"Pearl Logo\" /> **[Pearl](https://github.com/Pearl-com/pearl_mcp_server)** - Official MCP Server to interact with Pearl API. Connect your AI Agents with 12,000+ certified experts instantly.\n- <img height=\"12\" width=\"12\" src=\"https://www.perplexity.ai/favicon.ico\" alt=\"Perplexity Logo\" /> **[Perplexity](https://github.com/ppl-ai/modelcontextprotocol)** - An MCP server that connects to Perplexity's Sonar API, enabling real-time web-wide research in conversational AI.\n- <img height=\"12\" width=\"12\" src=\"https://www.foxit.com/favicon.ico\" alt=\"Foxit Logo\" /> **[PDFActionInspector](https://github.com/foxitsoftware/PDFActionInspector/tree/develop)** - A Model Context Protocol server for extracting and analyzing JavaScript Actions from PDF files. Provides comprehensive security analysis to detect malicious PDF behaviors, hidden scripts, and potential security threats through AI-assisted risk assessment.\n- <img height=\"12\" width=\"12\" src=\"https://www.pga.com/favicon.ico\" alt=\"PGA Logo\" /> **[PGA (Golf)](https://mcp.pga.com)** - PGA's official MCP Server for all things golf-related. Find a coach, play golf, improve your game, and more.\n- <img alt=\"54333248\" height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/54333248\" /> **[Pinecone](https://github.com/pinecone-io/pinecone-mcp)** - [Pinecone](https://docs.pinecone.io/guides/operations/mcp-server)'s developer MCP Server assist developers in searching documentation and managing data within their development environment.\n- <img alt=\"54333248\" height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/54333248\" /> **[Pinecone Assistant](https://github.com/pinecone-io/assistant-mcp)** - Retrieves context from your [Pinecone Assistant](https://docs.pinecone.io/guides/assistant/mcp-server) knowledge base.\n- <img height=\"12\" width=\"12\" src=\"https://pipedream.com/favicon.ico\" alt=\"Pipedream Logo\" /> **[Pipedream](https://github.com/PipedreamHQ/pipedream/tree/master/modelcontextprotocol)** - Connect with 2,500 APIs with 8,000+ prebuilt tools.\n- <img height=\"12\" width=\"12\" src=\"https://playcanvas.com/static-assets/images/icons/favicon.png\" alt=\"PlayCanvas Logo\" /> **[PlayCanvas](https://github.com/playcanvas/editor-mcp-server)** - Create interactive 3D web apps with the PlayCanvas Editor.\n- <img height=\"12\" width=\"12\" src=\"https://playwright.dev/img/playwright-logo.ico\" alt=\"Playwright Logo\" /> **[Playwright](https://github.com/microsoft/playwright-mcp)** ‚Äî Browser automation MCP server using Playwright to run tests, navigate pages, capture screenshots, scrape content, and automate web interactions reliably.\n- <img height=\"12\" width=\"12\" src=\"https://www.plugged.in/favicon.ico\" alt=\"Plugged.in Logo\" /> **[Plugged.in](https://github.com/VeriTeknik/pluggedin-mcp)** - A comprehensive proxy that combines multiple MCP servers into a single MCP. It provides discovery and management of tools, prompts, resources, and templates across servers, plus a playground for debugging when building MCP servers.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/port-labs/port-mcp-server/blob/main/assets/port_symbol_white.svg\" alt=\"Port Logo\" /> **[Port IO](https://github.com/port-labs/port-mcp-server)** - Access and manage your software catalog to improve service quality and compliance.\n- **[PostHog](https://github.com/posthog/mcp)** - Interact with PostHog analytics, feature flags, error tracking and more with the official PostHog MCP server.\n- **[Postman API](https://github.com/postmanlabs/postman-api-mcp)** - Manage your Postman resources using the [Postman API](https://www.postman.com/postman/postman-public-workspace/collection/i2uqzpp/postman-api).\n- <img height=\"12\" width=\"12\" src=\"https://powerdrill.ai/_next/static/media/powerdrill.0fa27d00.webp\" alt=\"Powerdrill Logo\" /> **[Powerdrill](https://github.com/powerdrillai/powerdrill-mcp)** - An MCP server that provides tools to interact with Powerdrill datasets, enabling smart AI data analysis and insights.\n- <img height=\"12\" width=\"12\" src=\"https://www.prisma.io/images/favicon-32x32.png\" alt=\"Prisma Logo\" /> **[Prisma](https://www.prisma.io/docs/postgres/mcp-server)** - Create and manage Prisma Postgres databases\n- <img height=\"12\" width=\"12\" src=\"https://probe.dev/favicon.ico\" alt=\"Probe.dev Logo\" /> **[Probe.dev](https://docs.probe.dev/guides/mcp-integration)** - Comprehensive media analysis and validation powered by [Probe.dev](https://probe.dev). Hosted MCP server with FFprobe, MediaInfo, and Probe Report analysis capabilities.\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/FGzpihs4MxmSJhyGZ6n7f2Xj0.png\" alt=\"Prode.ai Logo\" /> **[ProdE](https://github.com/CuriousBox-AI/ProdE-mcp)** - Your 24/7 production engineer that preserves context across multiple codebases.\n- <img height=\"12\" width=\"12\" src=\"https://programintegrity.org/wp-content/uploads/2024/07/PIA-Favicon.svg\" alt=\"Program Integrity Alliance (PIA) Logo\" /> **[Program Integrity Alliance (PIA)](https://github.com/Program-Integrity-Alliance/pia-mcp-local)** - Local and Hosted MCP servers providing AI-friendly access to U.S. Government Open Datasets. Also available on [Docker MCP Catalog](https://hub.docker.com/mcp/explore?search=PIA). See [our website](https://programintegrity.org) for more details.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/newtype-01/prompthouse-mcp/raw/main/prompthouse-logo-12x12.png\" alt=\"PromptHouse Logo\" /> **[PromptHouse](https://github.com/newtype-01/prompthouse-mcp)** - Personal prompt library with MCP integration for AI clients.\n- <img height=\"12\" width=\"12\" src=\"https://docs.speedscale.com/img/favicon.ico\" alt=\"proxymock Logo\" /> **[proxymock](https://docs.speedscale.com/proxymock/reference/mcp/)** - An MCP server that automatically generates tests and mocks by recording a live app.\n- <img src=\"https://www.pubnub.com/favicon/favicon-32x32.png\" alt=\"PubNub\" width=\"12\" height=\"12\"> **[PubNub](https://github.com/pubnub/pubnub-mcp-server)** - Retrieves context for developing with PubNub SDKs and calling APIs.\n- <img height=\"12\" width=\"12\" src=\"https://www.pulumi.com/images/favicon.ico\" alt=\"Pulumi Logo\" /> **[Pulumi](https://github.com/pulumi/mcp-server)** - Deploy and manage cloud infrastructure using [Pulumi](https://pulumi.com).\n- <img height=\"12\" width=\"12\" src=\"https://pure.md/favicon.png\" alt=\"Pure.md Logo\" /> **[Pure.md](https://github.com/puremd/puremd-mcp)** - Reliably access web content in markdown format with [pure.md](https://pure.md) (bot detection avoidance, proxy rotation, and headless JS rendering built in).\n- <img height=\"12\" width=\"12\" src=\"https://put.io/images/favicon.ico\" alt=\"Put.io Logo\" /> **[Put.io](https://github.com/putdotio/putio-mcp-server)** - Interact with your Put.io account to download torrents.\n- <img alt=\"logomark\" height=\"12\" width=\"12\" src=\"https://qdrant.tech/img/brand-resources-logos/logomark.svg\" /> **[Qdrant](https://github.com/qdrant/mcp-server-qdrant/)** - Implement semantic memory layer on top of the Qdrant vector search engine\n- <img src=\"https://api.qoretechnologies.com/api/public/apps/Qorus/qorus-logo.svg\" alt=\"Qorus\" width=\"12\" height=\"12\"> **[Qorus](https://qoretechnologies.com/manual/qorus/current/qorus/sysarch.html#mcp_server)** - Connect to any application, system, or technology and automate your business processes without coding and with AI\n- <img src=\"https://avatars.githubusercontent.com/u/18053493?s=200&v=4\" alt=\"Qonto\" width=\"12\" height=\"12\"> **[Qonto](https://github.com/qonto/qonto-mcp-server)** - Access and interact your Qonto account through LLMs using MCP.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/3912814\" alt=\"QuantConnect Logo\" /> **[QuantConnect](https://github.com/QuantConnect/mcp-server)** - Interact with your [QuantConnect](https://www.quantconnect.com/) account to update projects, write strategies, run backtest, and deploying strategies to production live-trading.\n- **[Quickchat AI](https://github.com/incentivai/quickchat-ai-mcp)** - Launch your conversational [Quickchat AI](https://quickchat.ai) agent as an MCP to give AI apps real-time access to its Knowledge Base and conversational capabilities\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/165178062\" alt=\"Ragie Logo\" /> **[Ragie](https://github.com/ragieai/ragie-mcp-server/)** - Retrieve context from your [Ragie](https://www.ragie.ai) (RAG) knowledge base connected to integrations like Google Drive, Notion, JIRA and more.\n- <img alt=\"favicon\" height=\"12\" width=\"12\" src=\"https://www.ramp.com/favicon.ico\" /> **[Ramp](https://github.com/ramp-public/ramp-mcp)** - Interact with [Ramp](https://ramp.com)'s Developer API to run analysis on your spend and gain insights leveraging LLMs\n- **[Raygun](https://github.com/MindscapeHQ/mcp-server-raygun)** - Interact with your crash reporting and real using monitoring data on your Raygun account\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/CU1m0xFonUl76ZeaW0IdkQ0M.png\" alt=\"Razorpay Logo\" /> **[Razorpay](https://github.com/razorpay/razorpay-mcp-server)** - Razorpay's official MCP server\n- <img height=\"12\" width=\"12\" src=\"https://www.recraft.ai/favicons/icon.svg\" alt=\"Recraft Logo\" /> **[Recraft](https://github.com/recraft-ai/mcp-recraft-server)** - Generate raster and vector (SVG) images using [Recraft](https://recraft.ai). Also you can edit, upscale images, create your own styles, and vectorize raster images\n- <img height=\"12\" width=\"12\" src=\"https://www.redhat.com/favicon.ico\" alt=\"Red Hat Logo\" /> **[Red Hat Insights](https://github.com/RedHatInsights/insights-mcp)** - Interact with [Red Hat Insights](https://www.redhat.com/en/technologies/management/insights) - build images, manage vulnerabilities, or view targeted recommendations.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/1529926\" alt=\"Redis Logo\" /> **[Redis](https://github.com/redis/mcp-redis/)** - The Redis official MCP Server offers an interface to manage and search data in Redis.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/1529926\" alt=\"Redis Logo\" /> **[Redis Cloud API](https://github.com/redis/mcp-redis-cloud/)** - The Redis Cloud API MCP Server allows you to manage your Redis Cloud resources using natural language.\n- <img src=\"https://avatars.githubusercontent.com/u/149024635\" alt=\"Reexpress\" width=\"12\" height=\"12\"> **[Reexpress](https://github.com/ReexpressAI/reexpress_mcp_server)** - Enable Similarity-Distance-Magnitude statistical verification for your search, software, and data science workflows\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/68a872edf3df6064de547670/68b7f089c45a6083ce25acb1_reflag-favicon-32.png\" alt=\"Reflag\" /> **[Reflag](https://github.com/reflagcom/javascript/tree/main/packages/cli#model-context-protocol)** - Create and manage feature flags using [Reflag](https://reflag.com)\n- <img height=\"12\" width=\"12\" src=\"https://www.reltio.com/wp-content/uploads/2024/03/cropped-cropped-Reltio_Light_Mode_Dark_Mode_Favicon-270x270.png\" alt=\"Reltio Logo\" /> **[Reltio](https://github.com/reltio-ai/reltio-mcp-server)** - A lightweight, plugin-based MCP server designed to perform advanced entity matching with language models in Reltio environments.\n- <img height=\"12\" width=\"12\" src=\"https://www.rember.com/favicon.ico\" alt=\"Rember Logo\" /> **[Rember](https://github.com/rember/rember-mcp)** - Create spaced repetition flashcards in [Rember](https://rember.com) to remember anything you learn in your chats\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/114033652\" alt=\"Render Logo\" /> **[Render](https://render.com/docs/mcp-server)** - The official Render MCP server: spin up new services, run queries against your databases, and debug rapidly with direct access to service metrics and logs.\n- <img height=\"12\" width=\"12\" src=\"https://reportportal.io/favicon.ico\" alt=\"ReportPortal Logo\" /> **[ReportPortal](https://github.com/reportportal/reportportal-mcp-server)** - explore and analyze automated test results from [ReportPortal](https://reportportal.io) using your favourite LLM.\n- <img height=\"12\" width=\"12\" src=\"http://nonica.io/Nonica-logo.ico\" alt=\"Nonica Logo\" /> **[Revit](https://github.com/NonicaTeam/AI-Connector-for-Revit)** - Connect and interact with your Revit models live.\n- <img height=\"12\" width=\"12\" src=\"https://ui.rilldata.com/favicon.png\" alt=\"Rill Data Logo\" /> **[Rill Data](https://docs.rilldata.com/explore/mcp)** - Interact with Rill Data to query and analyze your data.\n- <img height=\"12\" width=\"12\" src=\"https://riza.io/favicon.ico\" alt=\"Riza logo\" /> **[Riza](https://github.com/riza-io/riza-mcp)** - Arbitrary code execution and tool-use platform for LLMs by [Riza](https://riza.io)\n- <img height=\"12\" width=\"12\" src=\"https://cdn.foundation.roblox.com/current/RobloxStudio.ico\" alt=\"Roblox Studio\" /> **[Roblox Studio](https://github.com/Roblox/studio-rust-mcp-server)** - Roblox Studio MCP Server, create and manipulate scenes, scripts in Roblox Studio\n- <img src=\"https://hyper3d.ai/favicon.ico\" alt=\"Rodin\" width=\"12\" height=\"12\"> **[Rodin](https://github.com/DeemosTech/rodin-api-mcp)** - Generate 3D Models with [Hyper3D Rodin](https://hyper3d.ai)\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/66b7de6a233c04f4dac200a6/66bed52680d689629483c18b_faviconV2%20(2).png\" alt=\"Root Signals Logo\" /> **[Root Signals](https://github.com/root-signals/root-signals-mcp)** - Improve and quality control your outputs with evaluations using LLM-as-Judge\n- **[Routine](https://github.com/routineco/mcp-server)** - MCP server to interact with [Routine](https://routine.co/): calendars, tasks, notes, etc.\n- <img height=\"12\" width=\"12\" src=\"https://platform.composio.dev/favicon.ico\" alt=\"Composio Logo\"> **[Rube](https://github.com/ComposioHQ/Rube)** - Rube is a Model Context Protocol (MCP) server that connects your AI tools to 500+ apps like Gmail, Slack, GitHub, and Notion. Simply install it in your AI client, authenticate once with your apps, and start asking your AI to perform real actions like \"Send an email\" or \"Create a task.\"\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/safedep/.github/refs/heads/main/assets/logo/1.png\" alt=\"SafeDep Logo\" /> **[SafeDep](https://github.com/safedep/vet/blob/main/docs/mcp.md)** - SafeDep `vet-mcp` helps in  vetting open source packages for security risks‚Äîsuch as vulnerabilities and malicious code‚Äîbefore they're used in your project, especially with AI-generated code suggestions.\n- <img height=\"12\" width=\"12\" src=\"https://waf-ce.chaitin.cn/favicon.ico\" alt=\"SafeLine Logo\" /> **[SafeLine](https://github.com/chaitin/SafeLine/tree/main/mcp_server)** - [SafeLine](https://safepoint.cloud/landing/safeline) is a self-hosted WAF(Web Application Firewall) to protect your web apps from attacks and exploits.\n- <img height=\"12\" width=\"12\" src=\"https://scrapi.tech/favicon.ico\" alt=\"ScrAPI Logo\" /> **[ScrAPI](https://github.com/DevEnterpriseSoftware/scrapi-mcp)** - Web scraping using [ScrAPI](https://scrapi.tech). Extract website content that is difficult to access because of bot detection, captchas or even geolocation restrictions.\n- <img height=\"12\" width=\"12\" src=\"https://upnorthmedia.co/favicon.ico\" alt=\"Up North Media Logo\" /> **[ScreenshotMCP](https://github.com/upnorthmedia/ScreenshotMCP/)** - A Model Context Protocol MCP server for capturing website screenshots with full page, element, and device size features.\n- <img height=\"12\" width=\"12\" src=\"https://screenshotone.com/favicon.ico\" alt=\"ScreenshotOne Logo\" /> **[ScreenshotOne](https://github.com/screenshotone/mcp/)** - Render website screenshots with [ScreenshotOne](https://screenshotone.com/)\n- <img height=\"12\" width=\"12\" src=\"https://pics.fatwang2.com/56912e614b35093426c515860f9f2234.svg\" alt=\"Search1API Logo\" /> **[Search1API](https://github.com/fatwang2/search1api-mcp)** - One API for Search, Crawling, and Sitemaps\n- <img height=\"12\" width=\"12\" src=\"https://www.searchunify.com/favicon.ico\" alt=\"SearchUnify Logo\" /> **[SearchUnify](https://github.com/searchunify/su-mcp/)** - SearchUnify MCP Server (su-mcp) enables seamless integration of SearchUnify with Claude Desktop\n- <img height=\"12\" width=\"12\" src=\"https://secureframe.com/favicon.ico\" alt=\"Secureframe Logo\" /> **[Secureframe](https://github.com/secureframe/secureframe-mcp-server)** - Query security controls, monitor compliance tests, and access audit data across SOC 2, ISO 27001, CMMC, FedRAMP, and other frameworks from [Secureframe](https://secureframe.com).\n- <img height=\"12\" width=\"12\" src=\"https://semgrep.dev/favicon.ico\" alt=\"Semgrep Logo\" /> **[Semgrep](https://github.com/semgrep/mcp)** - Enable AI agents to secure code with [Semgrep](https://semgrep.dev/).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/187640573?s=48&v=4\" alt=\"Sequa Logo\" /> **[Sequa.AI](https://github.com/sequa-ai/sequa-mcp)** - Stop stitching context for Copilot and Cursor. With [Sequa MCP](https://github.com/sequa-ai/sequa-mcp), your AI tools know all your codebases and docs out of the box.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6372338e5477e047032b37a5/64f85e6388a2a5c8c9525b4d_favLogo.png\" alt=\"Shortcut Logo\" /> **[Shortcut](https://github.com/useshortcut/mcp-server-shortcut)** - Access and implement all of your projects and tasks (Stories) from [Shortcut](https://shortcut.com/).\n- <img alt=\"favicon_32x32_png_v_277b9cbbe31e8bc416504cf3b902d430\" height=\"12\" width=\"12\" src=\"https://www.singlestore.com/favicon-32x32.png?v=277b9cbbe31e8bc416504cf3b902d430\"/> **[SingleStore](https://github.com/singlestore-labs/mcp-server-singlestore)** - Interact with the SingleStore database platform\n- <img height=\"12\" width=\"12\" src=\"https://smartbear.com/smartbear/assets/img/favicon.png\" alt=\"SmartBear Logo\" /> **[SmartBear](https://github.com/SmartBear/smartbear-mcp)** - Provides access to multiple capabilities across SmartBear's API Hub, Test Hub, and Insight Hub, all through [dedicated tools and resources](https://developer.smartbear.com/smartbear-mcp/docs/mcp-server).\n- <img src=\"https://smooth-operator.online/logo48.png\" alt=\"Smooth Operator\" width=\"12\" height=\"12\"> **[Smooth Operator](https://smooth-operator.online/agent-tools-api-docs/toolserverdocs)** - Tools to automate Windows via AI Vision, Mouse, Keyboard, Automation Trees, Webbrowser\n- <img height=\"12\" width=\"12\" src=\"https://app.snyk.io/bundle/favicon-faj49uD9.png\" alt=\"Snyk Logo\" /> **[Snyk](https://github.com/snyk/snyk-ls/blob/main/mcp_extension/README.md)** - Enhance security posture by embedding [Snyk](https://snyk.io/) vulnerability scanning directly into agentic workflows.\n- <img height=\"12\" width=\"12\" src=\"https://www.sonarsource.com/favicon.ico\" alt=\"SonarQube Logo\" /> **[SonarQube](https://github.com/SonarSource/sonarqube-mcp-server)** - Enables seamless integration with [SonarQube](https://www.sonarsource.com/) Server or Cloud and allows for code snippet analysis within the agent context.\n- <img src=\"https://sophtron.com/favicon.ico\" alt=\"Sophtron\" width=\"12\" height=\"12\"> **[Sophtron](https://github.com/sophtron/Sophtron-Integration/tree/main/modelcontextprotocol)** - Connect to your bank, credit card, utilities accounts to retrieve account balances and transactions with [Sophtron Bank Integration](https://sophtron.com).\n- <img height=\"12\" width=\"12\" src=\"https://www.stackhawk.com/wp-content/uploads/2025/03/icon-512x512-2-150x150.png\" alt=\"StackHawk Logo\" /> **[StackHawk](https://github.com/stackhawk/stackhawk-mcp)** - Use [StackHawk](https://www.stackhawk.com/) to test for and FIX security problems in your code or vibe coded app.\n- <img height=\"12\" width=\"12\" src=\"https://www.starrocks.io/favicon.ico\" alt=\"StarRocks Logo\" /> **[StarRocks](https://github.com/StarRocks/mcp-server-starrocks)** - Interact with [StarRocks](https://www.starrocks.io/)\n- <img height=\"12\" width=\"12\" src=\"https://downloads.steadybit.com/logomark.svg\" alt=\"Steadybit Logo\" /> **[Steadybit](https://github.com/steadybit/mcp)** - Interact with [Steadybit](https://www.steadybit.com/)\n- <img height=\"12\" width=\"12\" src=\"https://steuerboard.net/favicon.ico\" alt=\"Steuerboard Logo\" /> **[Steuerboard](https://github.com/steuerboard/steuerboard-mcp-typescript)** - Interact with the accounting data in your business using our official MCP server\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/22632046?s=200&v=4\" alt=\"Storybook Logo\" /> **[Storybook](https://github.com/storybookjs/addon-mcp)** - Interact with [Storybook](https://storybook.js.org/) to automate UI component testing and documentation\n- <img height=\"12\" width=\"12\" src=\"https://stripe.com/favicon.ico\" alt=\"Stripe Logo\" /> **[Stripe](https://github.com/stripe/agent-toolkit)** - Interact with Stripe API\n- <img height=\"12\" width=\"12\" src=\"https://sunra.ai/favicon.ico\" alt=\"Sunra AI Logo\" /> **[Sunra AI](https://github.com/sunra-ai/sunra-clients/tree/main/mcp-server)** - Search for and run AI models on [Sunra.ai](https://sunra.ai). Discover models, create video, image, and 3D model content, track their status, and manage the generated media.\n- <img height=\"12\" width=\"12\" src=\"https://supabase.com/favicon/favicon.ico\" alt=\"Supabase Logo\" /> **[Supabase](https://github.com/supabase-community/supabase-mcp)** - Interact with Supabase: Create tables, query data, deploy edge functions, and more.\n- <img height=\"12\" width=\"12\" src=\"https://supadata.ai/favicon.ico\" alt=\"Supadata Logo\" /> **[Supadata](https://github.com/supadata-ai/mcp)** - Official MCP server for [Supadata](https://supadata.ai) - YouTube, TikTok, X and Web data for makers.\n- <img height=\"12\" width=\"12\" src=\"https://d12w4pyrrczi5e.cloudfront.net/archive/50eb154ab859c63a8f1c850f9fe094e25d35e929/images/favicon.ico\" alt=\"Tako Logo\" /> **[Tako](https://github.com/TakoData/tako-mcp)** - Use natural language to search [Tako](https://trytako.com) for real-time financial, sports, weather, and public data with visualization\n- <img height=\"12\" width=\"12\" src=\"https://tavily.com/favicon.ico\" alt=\"Tavily Logo\" /> **[Tavily](https://github.com/tavily-ai/tavily-mcp)** - Search engine for AI agents (search + extract) powered by [Tavily](https://tavily.com/)\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/10522416?s=200&v=4\" alt=\"Telnyx Logo\" /> **[Telnyx](https://github.com/team-telnyx/telnyx-mcp-server)** - Official MCP server for building AI-powered communication apps. Create voice assistants, send SMS campaigns, manage phone numbers, and integrate real-time messaging with enterprise-grade reliability. Includes remote [streamable-http](https://api.telnyx.com/v2/mcp) and [sse](https://api.telnyx.com/mcp/sse) servers.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/1615979?s=200&v=4\" alt=\"Teradata Logo\" /> **[Teradata](https://github.com/Teradata/teradata-mcp-server)** - This MCP Server support tools and prompts for multi task data analytics on a [Teradata](https://teradata.com) platform.\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/hashicorp/terraform-mcp-server/main/public/images/Terraform-LogoMark_onDark.svg\" alt=\"Terraform Logo\" /> **[Terraform](https://github.com/hashicorp/terraform-mcp-server)** - Seamlessly integrate with Terraform ecosystem, enabling advanced automation and interaction capabilities for Infrastructure as Code (IaC) development powered by [Terraform](https://www.hashicorp.com/en/products/terraform)\n- <img height=\"12\" width=\"12\" src=\"https://www.textin.com/favicon.png\" alt=\"TextIn Logo\" /> **[TextIn](https://github.com/intsig-textin/textin-mcp)** - An MCP server for the [TextIn](https://www.textin.com/?from=github_mcp) API, is a tool for extracting text and performing OCR on documents, it also supports converting documents into Markdown\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/106156665?s=200\" alt=\"Thena Logo\" /> **[Thena](https://mcp.thena.ai)** - Thena's MCP server for enabling users and AI agents to interact with Thena's services and manage customers across different channels such as Slack, Email, Web, Discord etc.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/24291394?v=4\" alt=\"ThingsBoard\" /> **[ThingsBoard](https://github.com/thingsboard/thingsboard-mcp)** - The ThingsBoard MCP Server provides a natural language interface for LLMs and AI agents to interact with your ThingsBoard IoT platform.\n- <img height=\"12\" width=\"12\" src=\"https://www.lg.com/favicon.ico\" alt=\"ThinQ Logo\" /> **[ThinQ Connect](https://github.com/thinq-connect/thinqconnect-mcp)** - Interact with LG ThinQ smart home devices and appliances through the ThinQ Connect MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://thirdweb.com/favicon.ico\" alt=\"Thirdweb Logo\" /> **[Thirdweb](https://github.com/thirdweb-dev/ai/tree/main/python/thirdweb-mcp)** - Read/write to over 2k blockchains, enabling data querying, contract analysis/deployment, and transaction execution, powered by [Thirdweb](https://thirdweb.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.thoughtspot.com/favicon-16x16.png\" alt=\"ThoughtSpot Logo\" /> **[ThoughtSpot](https://github.com/thoughtspot/mcp-server)** - AI is the new BI. A dedicated data analyst for everyone on your team. Bring [ThoughtSpot](https://thoughtspot.com) powers into Claude or any MCP host.\n- <img height=\"12\" width=\"12\" src=\"https://tianji.msgbyte.com/img/dark-brand.svg\" alt=\"Tianji Logo\" /> **[Tianji](https://github.com/msgbyte/tianji/tree/master/apps/mcp-server)** - Interact with Tianji platform whatever selfhosted or cloud platform, powered by [Tianji](https://tianji.msgbyte.com/).\n- <img height=\"12\" width=\"12\" src=\"https://www.pingcap.com/favicon.ico\" alt=\"TiDB Logo\" /> **[TiDB](https://github.com/pingcap/pytidb)** - MCP Server to interact with TiDB database platform.\n- <img height=\"12\" width=\"12\" src=\"https://www.tinybird.co/favicon.ico\" alt=\"Tinybird Logo\" /> **[Tinybird](https://github.com/tinybirdco/mcp-tinybird)** - Interact with Tinybird serverless ClickHouse platform\n- <img height=\"12\" width=\"12\" src=\"https://b2729162.smushcdn.com/2729162/wp-content/uploads/2023/10/cropped-Favicon-1-192x192.png?lossy=1&strip=1&webp=1\" alt=\"Tldv Logo\" /> **[Tldv](https://gitlab.com/tldv/tldv-mcp-server)** - Connect your AI agents to Google-Meet, Zoom & Microsoft Teams through [tl;dv](https://tldv.io)\n- <img height=\"12\" width=\"12\" src=\"https://www.todoist.com/static/favicon-32x32.png\" alt=\"Todoist Logo\" /> **[Todoist](https://github.com/doist/todoist-ai)** - Search, add, and update [Todoist](https://todoist.com) tasks, projects, sections, comments, and more.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.tokenmetrics.com/logo.svg\" alt=\"Token Metrics Logo\" /> **[Token Metrics](https://github.com/token-metrics/mcp)** - [Token Metrics](https://www.tokenmetrics.com/) integration for fetching real-time crypto market data, trading signals, price predictions, and advanced analytics.\n- <img height=\"12\" width=\"12\" src=\"https://di8m9w6rqrh5d.cloudfront.net/2G3TRwfv1w3GTLfmT7Dmco1VddoFTI5P/1920_6b7e7ec2-d897-4cd7-94f3-46a8301212c3.png\" alt=\"TomTom Logo\" /> **[TomTom-MCP](https://github.com/tomtom-international/tomtom-mcp)** - The [TomTom](https://www.tomtom.com/) MCP Server simplifies geospatial development by providing seamless access to TomTom's location services, including search, routing, traffic and static maps data.\n- <img height=\"12\" width=\"12\" src=\"https://images.thetradeagent.ai/trade_agent/logo.svg\" alt=\"Trade Agent Logo\" /> **[Trade Agent](https://github.com/Trade-Agent/trade-agent-mcp)** - Execute stock and crypto trades on your brokerage via [Trade Agent](https://thetradeagent.ai)\n-  **[Twelve Data](https://github.com/twelvedata/mcp)** ‚Äî Integrate your AI agents with real-time and historical financial market data through our official [Twelve Data](https://twelvedata.com) MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://www.twilio.com/content/dam/twilio-com/core-assets/social/favicon-16x16.png\" alt=\"Twilio Logo\" /> **[Twilio](https://github.com/twilio-labs/mcp)** - Interact with [Twilio](https://www.twilio.com/en-us) APIs to send SMS messages, manage phone numbers, configure your account, and more.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/91520705?s=48&v=4\" alt=\"Tencent RTC Logo\" /> **[Tencent RTC](https://github.com/Tencent-RTC/mcp)** - The MCP Server enables AI IDEs to more effectively understand and use [Tencent's Real-Time Communication](https://trtc.io/) SDKs and APIs, which significantly streamlines the process for developers to build audio/video call applications.\n- <img height=\"12\" width=\"12\" src=\"https://uberall.com/media/favicon.svg\" alt=\"Uberall Logo\" /> **[Uberall](https://github.com/uberall/uberall-mcp-server)** ‚Äì Manage multi - location presence, including listings, reviews, and social posting, via [uberall](https://uberall.com).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/91906527\" alt=\"Unblocked Logo\" /> **[Unblocked](https://docs.getunblocked.com/unblocked-mcp)** Help your AI-powered IDEs generate faster, more accurate code by giving them access to context from Slack, Confluence, Google Docs, JIRA, and more with [Unblocked](https://getunblocked.com).\n- <img height=\"12\" width=\"12\" src=\"https://unifai.network/favicon.ico\" alt=\"UnifAI Logo\" /> **[UnifAI](https://github.com/unifai-network/unifai-mcp-server)** - Dynamically search and call tools using [UnifAI Network](https://unifai.network)\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/plcQevjrOYnyriuGw90NfQBPoQ.jpg\" alt=\"Unstructured Logo\" /> **[Unstructured](https://github.com/Unstructured-IO/UNS-MCP)** - Set up and interact with your unstructured data processing workflows in [Unstructured Platform](https://unstructured.io)\n- <img height=\"12\" width=\"12\" src=\"https://upstash.com/icons/favicon-32x32.png\" alt=\"Upstash Logo\" /> **[Upstash](https://github.com/upstash/mcp-server)** - Manage Redis databases and run Redis commands on [Upstash](https://upstash.com/) with natural language.\n-  **[Vantage](https://github.com/vantage-sh/vantage-mcp-server)** - Interact with your organization's cloud cost spend.\n- <img height=\"12\" width=\"12\" src=\"https://mcp.variflight.com/favicon.ico\" alt=\"VariFlight Logo\" /> **[VariFlight](https://github.com/variflight/variflight-mcp)** - VariFlight's official MCP server provides tools to query flight information, weather data, comfort metrics, the lowest available fares, and other civil aviation-related data.\n- <img height=\"12\" width=\"12\" src=\"https://docs.octagonagents.com/logo.svg\" alt=\"Octagon Logo\" /> **[VCAgents](https://github.com/OctagonAI/octagon-vc-agents)** - Interact with investor agents‚Äîthink Wilson or Thiel‚Äîcontinuously updated with market intel.\n- **[Vectorize](https://github.com/vectorize-io/vectorize-mcp-server/)** - [Vectorize](https://vectorize.io) MCP server for advanced retrieval, Private Deep Research, Anything-to-Markdown file extraction and text chunking.\n- <img height=\"12\" width=\"12\" src=\"https://static.verbwire.com/favicon-16x16.png\" alt=\"Verbwire Logo\" /> **[Verbwire](https://github.com/verbwire/verbwire-mcp-server)** - Deploy smart contracts, mint NFTs, manage IPFS storage, and more through the Verbwire API\n- <img height=\"12\" width=\"12\" src=\"http://vercel.com/favicon.ico\" alt=\"Vercel Logo\" /> **[Vercel](https://vercel.com/docs/mcp/vercel-mcp)** - Access logs, search docs, and manage projects and deployments.\n- <img height=\"12\" width=\"12\" src=\"https://verodat.io/assets/favicon-16x16.png\" alt=\"Verodat Logo\" /> **[Verodat](https://github.com/Verodat/verodat-mcp-server)** - Interact with Verodat AI Ready Data platform\n- <img height=\"12\" width=\"12\" src=\"https://www.veyrax.com/favicon.ico\" alt=\"VeyraX Logo\" /> **[VeyraX](https://github.com/VeyraX/veyrax-mcp)** - Single tool to control all 100+ API integrations, and UI components\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/174736222?s=200&v=4\" alt=\"VictoriaMetrics Logo\" /> **[VictoriaMetrics](https://github.com/VictoriaMetrics-Community/mcp-victoriametrics)** - Comprehensive integration with [VictoriaMetrics APIs](https://docs.victoriametrics.com/victoriametrics/url-examples/) and [documentation](https://docs.victoriametrics.com/) for monitoring, observability, and debugging tasks related to your VictoriaMetrics instances.\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/ijlYG00LOcMD6zR1XLMxHbAwZkM.png\" alt=\"VideoDB Director\" /> **[VideoDB Director](https://github.com/video-db/agent-toolkit/tree/main/modelcontextprotocol)** - Create AI-powered video workflows including automatic editing, content moderation, voice cloning, highlight generation, and searchable video moments‚Äîall accessible via simple APIs and intuitive chat-based interfaces.\n- <img height=\"12\" width=\"12\" src=\"https://landing.ai/wp-content/uploads/2024/04/cropped-favicon-192x192.png\" alt=\"LandingAI VisionAgent\" /> **[VisionAgent MCP](https://github.com/landing-ai/vision-agent-mcp)** - A simple MCP server that enables your LLM to better reason over images, video and documents.\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/mckinsey/vizro/main/vizro-core/docs/assets/images/favicon.png\" alt=\"Vizro Logo\" /> **[Vizro](https://github.com/mckinsey/vizro/tree/main/vizro-mcp)** - Tools and templates to create validated and maintainable data charts and dashboards\n- <img height=\"12\" width=\"12\" src=\"https://wavespeed.ai/logo.webp\" alt=\"WaveSpeed Logo\" /> **[WaveSpeed](https://github.com/WaveSpeedAI/mcp-server)** - WaveSpeed MCP server providing AI agents with image and video generation capabilities.\n- <img height=\"12\" width=\"12\" src=\"https://waystation.ai/images/logo.svg\" alt=\"WayStation Logo\" /> **[WayStation](https://github.com/waystation-ai/mcp)** - Universal MCP server to connect to popular productivity tools such as Notion, Monday, AirTable, and many more\n- <img height=\"12\" width=\"12\" src=\"https://static.whatsapp.net/rsrc.php/v3/yz/r/ujTY9i_Jhs1.png\" alt=\"WhatsApp Business Logo\" /> **[WhatsApp Business](https://medium.com/@wassenger/introducing-whatsapp-mcp-ai-connector-3d393b52d1b0)** - WhatsApp Business MCP connector enabling AI agents to send messages, manage conversations, access templates, and integrate with WhatsApp Business API for automated customer communication.\n- <img height=\"12\" width=\"12\" src=\"https://www.webflow.com/favicon.ico\" alt=\"Webflow Logo\"> **[Webflow](https://github.com/webflow/mcp-server)** - Interact with Webflow sites, pages, and collections\n- <img height=\"12\" width=\"12\" src=\"https://webscraping.ai/favicon.ico\" alt=\"WebScraping.AI Logo\" /> **[WebScraping.AI](https://github.com/webscraping-ai/webscraping-ai-mcp-server)** - Interact with **[WebScraping.AI](https://WebScraping.AI)** for web data extraction and scraping\n- <img height=\"12\" width=\"12\" src=\"https://winston-app-production-public.s3.us-east-1.amazonaws.com/winston-ai-favicon-light.svg\" alt=\"Winston.AI Logo\" /> **[Winston AI](https://github.com/gowinston-ai/winston-ai-mcp-server)** - AI detector MCP server with industry leading accuracy rates in detecting use of AI in text and images. The [Winston AI](https://gowinston.ai) MCP server also offers a robust plagiarism checker to help maintain integrity.\n- <img height=\"12\" width=\"12\" src=\"https://www.xero.com/favicon.ico\" alt=\"Xero Logo\" /> **[Xero](https://github.com/XeroAPI/xero-mcp-server)** - Interact with the accounting data in your business using our official MCP server\n- <img height=\"12\" width=\"12\" src=\"https://storage.yandexcloud.net/ydb-www-prod-site-assets/favicon-202305/favicon.ico\" alt=\"YDB Logo\" /> **[YDB](https://github.com/ydb-platform/ydb-mcp)** - Query [YDB](https://ydb.tech/) databases\n- <img height=\"12\" width=\"12\" src=\"https://fe-resource.yeelight.com/logo-black.jpeg\" alt=\"Yeelight Logo\" /> **[Yeelight MCP Server](https://github.com/Yeelight/yeelight-iot-mcp)** - The official [Yeelight MCP Server](https://github.com/Yeelight/yeelight-iot-mcp) enables users to control and query their [Yeelight](https://en.yeelight.com/) smart devices using natural language, offering a seamless and efficient human-AI interaction experience.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/632cd328ed2b485519c3f689/6334977a5d1a542102d4b9b5_favicon-32x32.png\" alt=\"YepCode Logo\" /> **[YepCode](https://github.com/yepcode/mcp-server-js)** - Run code in a secure, scalable sandbox environment with full support for dependencies, secrets, logs, and access to APIs or databases. Powered by [YepCode](https://yepcode.io)\n- <img height=\"12\" width=\"12\" src=\"https://www.yugabyte.com/favicon-16x16.png\" alt=\"YugabyteDB Logo\" /> **[YugabyteDB](https://github.com/yugabyte/yugabytedb-mcp-server)** -  MCP Server to interact with your [YugabyteDB](https://www.yugabyte.com/) database\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/14069894\" alt=\"Yunxin Logo\" /> **[Yunxin](https://github.com/netease-im/yunxin-mcp-server)** - An MCP server that connects to Yunxin's IM/RTC/DATA Open-API\n- <img height=\"12\" width=\"12\" src=\"https://cdn.zapier.com/zapier/images/favicon.ico\" alt=\"Zapier Logo\" /> **[Zapier](https://zapier.com/mcp)** - Connect your AI Agents to 8,000 apps instantly.\n- <img height=\"12\" width=\"12\" src=\"https://www.zenable.app/zenable_light.svg\" alt=\"Zenable Logo\" /> **[Zenable](https://docs.zenable.io/integrations/mcp/getting-started)** - Clean up sloppy AI code and prevent vulnerabilities\n- **[ZenML](https://github.com/zenml-io/mcp-zenml)** - Interact with your MLOps and LLMOps pipelines through your [ZenML](https://www.zenml.io) MCP server\n- <img height=\"12\" width=\"12\" src=\"https://www.zine.ai/images/zine-logo.png\" alt=\"Zine Logo\" /> **[Zine](https://www.zine.ai)** - Your memory, everywhere AI goes. Think iPhoto for your knowledge - upload and curate. Like ChatGPT but portable - context that travels with you.\n- <img height=\"12\" width=\"12\" src=\"https://zizai.work/images/logo.jpg\" alt=\"ZIZAI Logo\" /> **[ZIZAI Recruitment](https://github.com/zaiwork/mcp)** - Interact with the next-generation intelligent recruitment platform for employees and employers, powered by [ZIZAI Recruitment](https://zizai.work).\n\n### üåé Community Servers\n\nA growing set of community-developed and maintained servers demonstrates various applications of MCP across different domains.\n\n> [!NOTE]\n> Community servers are **untested** and should be used at **your own risk**. They are not affiliated with or endorsed by Anthropic.\n\n- **[1mcpserver](https://github.com/particlefuture/1mcpserver)** - MCP of MCPs. Automatically discover, configure, and add MCP servers on your local machine.\n- **[1Panel](https://github.com/1Panel-dev/mcp-1panel)** - MCP server implementation that provides 1Panel interaction.\n- **[A2A](https://github.com/GongRzhe/A2A-MCP-Server)** - An MCP server that bridges the Model Context Protocol (MCP) with the Agent-to-Agent (A2A) protocol, enabling MCP-compatible AI assistants (like Claude) to seamlessly interact with A2A agents.\n- **[Ableton Live](https://github.com/Simon-Kansara/ableton-live-mcp-server)** - an MCP server to control Ableton Live.\n- **[Ableton Live](https://github.com/ahujasid/ableton-mcp)** (by ahujasid) - Ableton integration allowing prompt enabled music creation.\n- **[Actor Critic Thinking](https://github.com/aquarius-wing/actor-critic-thinking-mcp)** - Actor-critic thinking for performance evaluation\n- **[Adobe Commerce](https://github.com/rafaelstz/adobe-commerce-dev-mcp)** ‚Äî MCP to interact with Adobe Commerce GraphQL API, including orders, products, customers, etc.\n- **[ADR Analysis](https://github.com/tosin2013/mcp-adr-analysis-server)** - AI-powered Architectural Decision Records (ADR) analysis server that provides architectural insights, technology stack detection, security checks, and TDD workflow enhancement for software development projects.\n- **[AgentBay](https://github.com/Michael98671/agentbay)** - An MCP server for providing serverless cloud infrastructure for AI agents.\n- **[AgentMode](https://www.agentmode.app)** - Connect to dozens of databases, data warehouses, Github & more, from a single MCP server.  Run the Docker image locally, in the cloud, or on-premise.\n- **[AI Agent Marketplace Index](https://github.com/AI-Agent-Hub/ai-agent-marketplace-index-mcp)** - MCP server to search more than 5000+ AI agents and tools of various categories from [AI Agent Marketplace Index](http://www.deepnlp.org/store/ai-agent) and monitor traffic of AI Agents.\n- **[AI Tasks](https://github.com/jbrinkman/valkey-ai-tasks)** - Let the AI manage complex plans with integrated task management and tracking tools. Supports STDIO, SSE and Streamable HTTP transports.\n- **[ai-Bible](https://github.com/AdbC99/ai-bible)** - Search the bible reliably and repeatably [ai-Bible Labs](https://ai-bible.com)\n- **[Airbnb](https://github.com/openbnb-org/mcp-server-airbnb)** - Provides tools to search Airbnb and get listing details.\n- **[Airflow](https://github.com/yangkyeongmo/mcp-server-apache-airflow)** - An MCP Server that connects to [Apache Airflow](https://airflow.apache.org/) using official python client.\n- **[Airtable](https://github.com/domdomegg/airtable-mcp-server)** - Read and write access to [Airtable](https://airtable.com/) databases, with schema inspection.\n- **[Airtable](https://github.com/felores/airtable-mcp)** - Airtable Model Context Protocol Server.\n- **[Algorand](https://github.com/GoPlausible/algorand-mcp)** - A comprehensive MCP server for tooling interactions (40+) and resource accessibility (60+) plus many useful prompts for interacting with the Algorand blockchain.\n- **[Amadeus](https://github.com/donghyun-chae/mcp-amadeus)** (by donghyun-chae) - An MCP server to access, explore, and interact with Amadeus Flight Offers Search API for retrieving detailed flight options, including airline, times, duration, and pricing data.\n- **[Amazon Ads](https://github.com/MarketplaceAdPros/amazon-ads-mcp-server)** - MCP Server that provides interaction capabilities with Amazon Advertising through [MarketplaceAdPros](https://marketplaceadpros.com)/\n- **[AniList](https://github.com/yuna0x0/anilist-mcp)** (by yuna0x0) - An MCP server to interact with AniList API, allowing you to search for anime and manga, retrieve user data, and manage your watchlist.\n- **[Anki](https://github.com/scorzeth/anki-mcp-server)** - An MCP server for interacting with your [Anki](https://apps.ankiweb.net) decks and cards.\n- **[Anki](https://github.com/nietus/anki-mcp)** - MCP server to run locally with Anki and Ankiconnect. Supports creating, updating, searching and filtering cards and decks. Include mass update and other advanced tools.\n- **[AntV Chart](https://github.com/antvis/mcp-server-chart)** - A Model Context Protocol server for generating 15+ visual charts using [AntV](https://github.com/antvis).\n- **[Any Chat Completions](https://github.com/pyroprompts/any-chat-completions-mcp)** - Interact with any OpenAI SDK Compatible Chat Completions API like OpenAI, Perplexity, Groq, xAI and many more.\n- **[Apache Gravitino(incubating)](https://github.com/datastrato/mcp-server-gravitino)** - Allow LLMs to explore metadata of structured data and unstructured data with Gravitino, and perform data governance tasks including tagging/classification.\n- **[API Lab MCP](https://github.com/atototo/api-lab-mcp)** - Transform Claude into your AI-powered API testing laboratory. Test, debug, and document APIs through natural conversation with authentication support, response validation, and performance metrics.\n- **[APIWeaver](https://github.com/GongRzhe/APIWeaver)** - An MCP server that dynamically creates MCP  servers from web API configurations. This allows you to easily integrate any REST API, GraphQL endpoint, or web service into an MCP-compatible tool that can be used by AI assistants like Claude.\n- **[Apollo IO MCP Server](https://github.com/AgentX-ai/apollo-io-mcp-server)** - apollo.io mcp server. Get/enrich contact data for people and organizations agentically.\n- **[Apple Books](https://github.com/vgnshiyer/apple-books-mcp)** - Interact with your library on Apple Books, manage your book collection, summarize highlights, notes, and much more.\n- **[Apple Calendar](https://github.com/Omar-v2/mcp-ical)** - An MCP server that allows you to interact with your macOS Calendar through natural language, including features such as event creation, modification, schedule listing, finding free time slots etc.\n- **[Apple Docs](https://github.com/kimsungwhee/apple-docs-mcp)** - A powerful Model Context Protocol (MCP) server that provides seamless access to Apple Developer Documentation through natural language queries. Search, explore, and get detailed information about Apple frameworks, APIs, sample code, and more directly in your AI-powered development environment.\n- **[Apple Script](https://github.com/peakmojo/applescript-mcp)** - MCP server that lets LLM run AppleScript code to to fully control anything on Mac, no setup needed.\n- **[APT MCP](https://github.com/GdMacmillan/apt-mcp-server)** - MCP server which runs debian package manager (apt) commands for you using ai agents.\n- **[Aranet4](https://github.com/diegobit/aranet4-mcp-server)** - MCP Server to manage your Aranet4 CO2 sensor. Fetch data and store in a local SQLite. Ask questions about historical data.\n- **[ArangoDB](https://github.com/ravenwits/mcp-server-arangodb)** - MCP Server that provides database interaction capabilities through [ArangoDB](https://arangodb.com/).\n- **[ArangoDB Graph](https://github.com/PCfVW/mcp-arangodb-async)** - Async-first Python architecture, wrapping the official [python-arango driver](https://github.com/arangodb/python-arango) with graph management capabilities, content conversion utilities (JSON, Markdown, YAML and Table), backup/restore functionality, and graph analytics capabilities; the 33 MCP tools use strict [Pydantic](https://github.com/pydantic/pydantic) validation.\n- **[Arduino](https://github.com/vishalmysore/choturobo)** - MCP Server that enables AI-powered robotics using Claude AI and Arduino (ESP32) for real-world automation and interaction with robots.\n- **[arXiv API](https://github.com/prashalruchiranga/arxiv-mcp-server)** - An MCP server that enables interacting with the arXiv API using natural language.\n- **[arxiv-latex-mcp](https://github.com/takashiishida/arxiv-latex-mcp)** - MCP server that fetches and processes arXiv LaTeX sources for precise interpretation of mathematical expressions in papers.\n- **[Atlassian](https://github.com/sooperset/mcp-atlassian)** - Interact with Atlassian Cloud products (Confluence and Jira) including searching/reading Confluence spaces/pages, accessing Jira issues, and project metadata.\n- **[Atlassian Server (by phuc-nt)](https://github.com/phuc-nt/mcp-atlassian-server)** - An MCP server that connects AI agents (Cline, Claude Desktop, Cursor, etc.) to Atlassian Jira & Confluence, enabling data queries and actions through the Model Context Protocol.\n- **[Attestable MCP](https://github.com/co-browser/attestable-mcp-server)** - An MCP server running inside a trusted execution environment (TEE) via Gramine, showcasing remote attestation using [RA-TLS](https://gramine.readthedocs.io/en/stable/attestation.html). This allows an MCP client to verify the server before connecting.\n- **[Audius](https://github.com/glassBead-tc/audius-mcp-atris)** - Audius + AI = Atris. Interact with fans, stream music, tip your favorite artists, and more on Audius: all through Claude.\n- **[AutoML](https://github.com/emircansoftware/MCP_Server_DataScience)** ‚Äì An MCP server for data analysis workflows including reading, preprocessing, feature engineering, model selection, visualization, and hyperparameter tuning.\n- **[AX-Platform](https://github.com/AX-MCP/PaxAI?tab=readme-ov-file#mcp-setup-guides)** - AI Agent collaboration platform. Collaborate on tasks, share context, and coordinate workflows.\n- **[AWS](https://github.com/rishikavikondala/mcp-server-aws)** - Perform operations on your AWS resources using an LLM.\n- **[AWS Athena](https://github.com/lishenxydlgzs/aws-athena-mcp)** - An MCP server for AWS Athena to run SQL queries on Glue Catalog.\n- **[AWS Cognito](https://github.com/gitCarrot/mcp-server-aws-cognito)** - An MCP server that connects to AWS Cognito for authentication and user management.\n- **[AWS Cost Explorer](https://github.com/aarora79/aws-cost-explorer-mcp-server)** - Optimize your AWS spend (including Amazon Bedrock spend) with this MCP server by examining spend across regions, services, instance types and foundation models ([demo video](https://www.youtube.com/watch?v=WuVOmYLRFmI&feature=youtu.be)).\n- **[AWS Resources Operations](https://github.com/baryhuang/mcp-server-aws-resources-python)** - Run generated python code to securely query or modify any AWS resources supported by boto3.\n- **[AWS S3](https://github.com/aws-samples/sample-mcp-server-s3)** - A sample MCP server for AWS S3 that flexibly fetches objects from S3 such as PDF documents.\n- **[AWS SES](https://github.com/aws-samples/sample-for-amazon-ses-mcp)** Sample MCP Server for Amazon SES (SESv2). See [AWS blog post](https://aws.amazon.com/blogs/messaging - and-targeting/use-ai-agents-and-the-model-context-protocol-with-amazon-ses/) for more details.\n- **[Azure ADX](https://github.com/pab1it0/adx-mcp-server)** - Query and analyze Azure Data Explorer databases.\n- **[Azure DevOps](https://github.com/Vortiago/mcp-azure-devops)** - An MCP server that provides a bridge to Azure DevOps services, enabling AI assistants to query and manage work items.\n- **[Azure MCP Hub](https://github.com/Azure-Samples/mcp)** - A curated list of all MCP servers and related resources for Azure developers by **[Arun Sekhar](https://github.com/achandmsft)**\n- **[Azure OpenAI DALL-E 3 MCP Server](https://github.com/jacwu/mcp-server-aoai-dalle3)** - An MCP server for Azure OpenAI DALL-E 3 service to generate image from text.\n- **[Azure Wiki Search](https://github.com/coder-linping/azure-wiki-search-server)** - An MCP that enables AI to query the wiki hosted on Azure Devops Wiki.\n- **[Baidu AI Search](https://github.com/baidubce/app-builder/tree/master/python/mcp_server/ai_search)** - Web search with Baidu Cloud's AI Search\n- **[BambooHR MCP](https://github.com/encoreshao/bamboohr-mcp)** - An MCP server that interfaces with the BambooHR APIs, providing access to employee data, time tracking, and HR management features.\n- **[Base Free USDC Transfer](https://github.com/magnetai/mcp-free-usdc-transfer)** - Send USDC on [Base](https://base.org) for free using Claude AI! Built with [Coinbase CDP](https://docs.cdp.coinbase.com/mpc-wallet/docs/welcome).\n- **[Basic Memory](https://github.com/basicmachines-co/basic-memory)** - Local-first knowledge management system that builds a semantic graph from Markdown files, enabling persistent memory across conversations with LLMs.\n- **[BGG MCP](https://github.com/kkjdaniel/bgg-mcp)** (by kkjdaniel) - MCP to enable interaction with the BoardGameGeek API via AI tooling.\n- **[Bible](https://github.com/trevato/bible-mcp)** - Add biblical context to your generative AI applications.\n- **[BigQuery](https://github.com/LucasHild/mcp-server-bigquery)** (by LucasHild) - This server enables LLMs to inspect database schemas and execute queries on BigQuery.\n- **[BigQuery](https://github.com/ergut/mcp-bigquery-server)** (by ergut) - Server implementation for Google BigQuery integration that enables direct BigQuery database access and querying capabilities\n- **[Bilibili](https://github.com/wangshunnn/bilibili-mcp-server)** - This MCP server provides tools to fetch Bilibili user profiles, video metadata, search videos, and more.\n- **[Binance](https://github.com/ethancod1ng/binance-mcp-server)** - Cryptocurrency trading and market data access through Binance API integration.\n- **[Binance](https://github.com/AnalyticAce/BinanceMCPServer)** (by dosseh shalom) - Unofficial tools and server implementation for Binance's Model Context Protocol (MCP). Designed to support developers building crypto trading AI Agents.\n- **[Bing Web Search API](https://github.com/leehanchung/bing-search-mcp)** (by hanchunglee) - Server implementation for Microsoft Bing Web Search API.\n- **[BioMCP](https://github.com/genomoncology/biomcp)** (by imaurer) - Biomedical research assistant server providing access to PubMed, ClinicalTrials.gov, and MyVariant.info.\n- **[bioRxiv](https://github.com/JackKuo666/bioRxiv-MCP-Server)** - üîç Enable AI assistants to search and access bioRxiv papers through a simple MCP interface.\n- **[Bitable MCP](https://github.com/lloydzhou/bitable-mcp)** (by lloydzhou) - MCP server provides access to Lark Bitable through the Model Context Protocol. It allows users to interact with Bitable tables using predefined tools.\n- **[Blender](https://github.com/ahujasid/blender-mcp)** (by ahujasid) - Blender integration allowing prompt enabled 3D scene creation, modeling and manipulation.\n- **[Blender MCP](https://github.com/pranav-deshmukh/blender-mcp)** - MCP server to create professional like 3d scenes on blender using natural language.\n- **[Blockbench MCP Plugin](https://github.com/jasonjgardner/blockbench-mcp-plugin)** (by jasonjgardner) - Blockbench plugin to connect AI agents to Blockbench's JavaScript API. Allows for creating and editing 3D models or pixel art textures with AI in Blockbench.\n- **[Blockchain MCP](https://github.com/tatumio/blockchain-mcp)** - MCP Server for Blockchain Data from **[Tatum](http://tatum.io/mcp)** that instantly unlocks blockchain access for your AI agents. This official Tatum MCP server connects to any LLM in seconds.\n- **[Bluesky](https://github.com/semioz/bluesky-mcp)** (by semioz) - An MCP server for Bluesky, a decentralized social network. It enables automated interactions with the AT Protocol, supporting features like posting, liking, reposting, timeline management, and profile operations.\n- **[Bluetooth MCP Server](https://github.com/Hypijump31/bluetooth-mcp-server)** - Control Bluetooth devices and manage connections through natural language commands, including device discovery, pairing, and audio controls.\n- **[BNBChain MCP](https://github.com/bnb-chain/bnbchain-mcp)** - An MCP server for interacting with BSC, opBNB, and the Greenfield blockchain.\n- **[Braintree](https://github.com/QuentinCody/braintree-mcp-server)** - Unofficial PayPal Braintree payment gateway MCP Server for AI agents to process payments, manage customers, and handle transactions securely.\n- **[Brazilian Law](https://github.com/pdmtt/brlaw_mcp_server/)** (by pdmtt) - Agent-driven research on Brazilian law using official sources.\n- **[BreakoutRoom](https://github.com/agree-able/room-mcp)** - Agents accomplishing goals together in p2p rooms\n- **[Browser MCP](https://github.com/bytedance/UI-TARS-desktop/tree/main/packages/agent-infra/mcp-servers/browser)** (by UI-TARS) - A fast, lightweight MCP server that empowers LLMs with browser automation via Puppeteer‚Äôs structured accessibility data, featuring optional vision mode for complex visual understanding and flexible, cross-platform configuration.\n- **[browser-use](https://github.com/co-browser/browser-use-mcp-server)** (by co-browser) - browser-use MCP server with dockerized playwright + chromium + vnc. supports stdio & resumable http.\n- **[BrowserLoop](https://github.com/mattiasw/browserloop)** - An MCP server for taking screenshots of web pages using Playwright. Supports high-quality capture with configurable formats, viewport sizes, cookie-based authentication, and both full page and element-specific screenshots.\n- **[Bsc-mcp](https://github.com/TermiX-official/bsc-mcp)** The first MCP server that serves as the bridge between AI and BNB Chain, enabling AI agents to execute complex on-chain operations through seamless integration with the BNB Chain, including transfer, swap, launch, security check on any token and even more.\n- **[BugBug MCP Server](https://github.com/simplypixi/bugbug-mcp-server)** - Unofficial MCP server for BugBug API.\n- **[BVG MCP Server - (Unofficial) ](https://github.com/svkaizoku/mcp-bvg)** - Unofficial MCP server for Berliner Verkehrsbetriebe Api.\n- **[Bybit](https://github.com/ethancod1ng/bybit-mcp-server)** - A Model Context Protocol (MCP) server for integrating AI assistants with Bybit cryptocurrency exchange APIs, enabling automated trading, market data access, and account management.\n- **[CAD-MCP](https://github.com/daobataotie/CAD-MCP#)** (by daobataotie) - Drawing CAD(Line,Circle,Text,Annotation...) through MCP server, supporting mainstream CAD software.\n- **[Calculator](https://github.com/githejie/mcp-server-calculator)** - This server enables LLMs to use calculator for precise numerical calculations.\n- **[CalDAV MCP](https://github.com/dominik1001/caldav-mcp)** - A CalDAV MCP server to expose calendar operations as tools for AI assistants.\n- **[Calendly-mcp-server](https://github.com/meAmitPatil/calendly-mcp-server)** - Open source calendly mcp server.\n- **[Catalysis Hub](https://github.com/QuentinCody/catalysishub-mcp-server)** - Unofficial MCP server for searching and retrieving scientific data from the Catalysis Hub database, providing access to computational catalysis research and surface reaction data.\n- **[CCTV VMS MCP](https://github.com/jyjune/mcp_vms)** - A Model Context Protocol (MCP) server designed to connect to a CCTV recording program (VMS) to retrieve recorded and live video streams. It also provides tools to control the VMS software, such as showing live or playback dialogs for specific channels at specified times.\n- **[CFBD API](https://github.com/lenwood/cfbd-mcp-server)** - An MCP server for the [College Football Data API](https://collegefootballdata.com/).\n- **[ChatMCP](https://github.com/AI-QL/chat-mcp)** ‚Äì An Open Source Cross-platform GUI Desktop application compatible with Linux, macOS, and Windows, enabling seamless interaction with MCP servers across dynamically selectable LLMs, by **[AIQL](https://github.com/AI-QL)**\n- **[ChatSum](https://github.com/mcpso/mcp-server-chatsum)** - Query and Summarize chat messages with LLM. by [mcpso](https://mcp.so)\n- **[Chess.com](https://github.com/pab1it0/chess-mcp)** - Access Chess.com player data, game records, and other public information through standardized MCP interfaces, allowing AI assistants to search and analyze chess information.\n- **[ChessPal Chess Engine (stockfish)](https://github.com/wilson-urdaneta/chesspal-mcp-engine)** - A Stockfish-powered chess engine exposed as an MCP server. Calculates best moves and supports both HTTP/SSE and stdio transports.\n- **[Chroma](https://github.com/privetin/chroma)** - Vector database server for semantic document search and metadata filtering, built on Chroma\n- **[Chrome history](https://github.com/vincent-pli/chrome-history-mcp)** - Talk with AI about your browser history, get fun ^_^\n- **[CIViC](https://github.com/QuentinCody/civic-mcp-server)** - MCP server for the Clinical Interpretation of Variants in Cancer (CIViC) database, providing access to clinical variant interpretations and genomic evidence for cancer research.\n- **[Claude Thread Continuity](https://github.com/peless/claude-thread-continuity)** - Persistent memory system enabling Claude Desktop conversations to resume with full context across sessions. Maintains conversation history, project states, and user preferences for seamless multi-session workflows.\n- **[ClaudePost](https://github.com/ZilongXue/claude-post)** - ClaudePost enables seamless email management for Gmail, offering secure features like email search, reading, and sending.\n- **[CLDGeminiPDF Analyzer](https://github.com/tfll37/CLDGeminiPDF-Analyzer)** - MCP server tool enabling sharing large PDF files to Google LLMs via API for further/additional analysis and response retrieval to Claude Desktop.\n- **[ClearML MCP](https://github.com/prassanna-ravishankar/clearml-mcp)** - Get comprehensive ML experiment context and analysis directly from [ClearML](https://clear.ml) in your AI conversations.\n- **[ClickUp](https://github.com/TaazKareem/clickup-mcp-server)** - MCP server for ClickUp task management, supporting task creation, updates, bulk operations, and markdown descriptions.\n- **[Cloudinary](https://github.com/felores/cloudinary-mcp-server)** - Cloudinary Model Context Protocol Server to upload media to Cloudinary and get back the media link and details.\n- **[CockroachDB](https://github.com/amineelkouhen/mcp-cockroachdb)** - MCP server enabling AI agents and LLMs to manage, monitor, and query **[CockroachDB](https://www.cockroachlabs.com/)** using natural language.\n- **[CockroachDB MCP Server](https://github.com/viragtripathi/cockroachdb-mcp-server)** ‚Äì Full - featured MCP implementation built with FastAPI and CockroachDB. Supports schema bootstrapping, JSONB storage, LLM-ready CLI, and optional `/debug` endpoints.\n- **[code-assistant](https://github.com/stippi/code-assistant)** - A coding assistant MCP server that allows to explore a code-base and make changes to code. Should be used with trusted repos only (insufficient protection against prompt injections).\n- **[code-context-provider-mcp](https://github.com/AB498/code-context-provider-mcp)** - MCP server that provides code context and analysis for AI assistants. Extracts directory structure and code symbols using WebAssembly Tree-sitter parsers without Native Dependencies.\n- **[code-executor](https://github.com/bazinga012/mcp_code_executor)** - An MCP server that allows LLMs to execute Python code within a specified Conda environment.\n- **[code-sandbox-mcp](https://github.com/Automata-Labs-team/code-sandbox-mcp)** - An MCP server to create secure code sandbox environment for executing code within Docker containers.\n- **[cognee-mcp](https://github.com/topoteretes/cognee/tree/main/cognee-mcp)** - GraphRAG memory server with customizable ingestion, data processing and search\n- **[coin_api_mcp](https://github.com/longmans/coin_api_mcp)** - Provides access to [coinmarketcap](https://coinmarketcap.com/) cryptocurrency data.\n- **[CoinMarketCap](https://github.com/shinzo-labs/coinmarketcap-mcp)** - Implements the complete [CoinMarketCap](https://coinmarketcap.com/) API for accessing cryptocurrency market data, exchange information, and other blockchain-related metrics.\n- **[commands](https://github.com/g0t4/mcp-server-commands)** - Run commands and scripts. Just like in a terminal.\n- **[Companies House MCP](https://github.com/stefanoamorelli/companies-house-mcp)** (by Stefano Amorelli) - MCP server to connect with the UK Companies House API.\n- **[computer-control-mcp](https://github.com/AB498/computer-control-mcp)** - MCP server that provides computer control capabilities, like mouse, keyboard, OCR, etc. using PyAutoGUI, RapidOCR, ONNXRuntime Without External Dependencies.\n- **[Computer-Use - Remote MacOS Use](https://github.com/baryhuang/mcp-remote-macos-use)** - Open-source out-of-the-box alternative to OpenAI Operator, providing a full desktop experience and optimized for using remote macOS machines as autonomous AI agents.\n- **[Congress.gov API](https://github.com/AshwinSundar/congress_gov_mcp)** - An MCP server to interact with real-time data from the Congress.gov API, which is the official API for the United States Congress.\n- **[consul-mcp](https://github.com/kocierik/consul-mcp-server)** - A consul MCP server for service management, health check and Key-Value Store\n- **[consult7](https://github.com/szeider/consult7)** - Analyze large codebases and document collections using high-context models via OpenRouter, OpenAI, or Google AI -- very useful, e.g., with Claude Code\n- **[Contentful-mcp](https://github.com/ivo-toby/contentful-mcp)** - Read, update, delete, publish content in your [Contentful](https://contentful.com) space(s) from this MCP Server.\n- **[Context Crystallizer](https://github.com/hubertciebiada/context-crystallizer)** - AI Context Engineering tool that transforms large repositories into crystallized, AI-consumable knowledge through systematic analysis and optimization.\n- **[MCP Context Provider](https://github.com/doobidoo/MCP-Context-Provider)** - Static server that provides AI models with persistent tool-specific context and rules, preventing context loss between chat sessions and enabling consistent behavior across interactions.\n- **[context-portal](https://github.com/GreatScottyMac/context-portal)** - Context Portal (ConPort) is a memory bank database system that effectively builds a project-specific knowledge graph, capturing entities like decisions, progress, and architecture, along with their relationships. This serves as a powerful backend for Retrieval Augmented Generation (RAG), enabling AI assistants to access precise, up-to-date project information.\n- **[cplusplus-mcp](https://github.com/kandrwmrtn/cplusplus_mcp)** - Semantic C++ code analysis using libclang. Enables Claude to understand C++ codebases through AST parsing rather than text search - find classes, navigate inheritance, trace function calls, and explore code relationships.\n- **[CreateveAI Nexus](https://github.com/spgoodman/createveai-nexus-server)** - Open-Source Bridge Between AI Agents and Enterprise Systems, with simple custom API plug-in capabilities (including close compatibility with ComfyUI nodes), support for Copilot Studio's MCP agent integations, and support for Azure deployment in secure environments with secrets stored in Azure Key Vault, as well as straightforward on-premises deployment.\n- **[CRASH](https://github.com/nikkoxgonzales/crash-mcp)** - MCP server for structured, iterative reasoning and thinking with flexible validation, confidence tracking, revision mechanisms, and branching support.\n- **[Creatify](https://github.com/TSavo/creatify-mcp)** - MCP Server that exposes Creatify AI API capabilities for AI video generation, including avatar videos, URL-to-video conversion, text-to-speech, and AI-powered editing tools.\n- **[Cronlytic](https://github.com/Cronlytic/cronlytic-mcp-server)** - Create CRUD operations for serverless cron jobs through [Cronlytic](https://cronlytic.com) MCP Server\n- **[crypto-feargreed-mcp](https://github.com/kukapay/crypto-feargreed-mcp)**  -  Providing real-time and historical Crypto Fear & Greed Index data.\n- **[crypto-indicators-mcp](https://github.com/kukapay/crypto-indicators-mcp)**  -  An MCP server providing a range of cryptocurrency technical analysis indicators and strategies.\n- **[crypto-sentiment-mcp](https://github.com/kukapay/crypto-sentiment-mcp)**  -  An MCP server that delivers cryptocurrency sentiment analysis to AI agents.\n- **[cryptopanic-mcp-server](https://github.com/kukapay/cryptopanic-mcp-server)** - Providing latest cryptocurrency news to AI agents, powered by CryptoPanic.\n- **[CSV Editor](https://github.com/santoshray02/csv-editor)** - Comprehensive CSV processing with 40+ operations for data manipulation, analysis, and validation. Features auto-save, undo/redo, and handles GB+ files. Built with FastMCP & Pandas.\n- **[Cursor MCP Installer](https://github.com/matthewdcage/cursor-mcp-installer)** - A tool to easily install and configure other MCP servers within Cursor IDE, with support for npm packages, local directories, and Git repositories.\n- **[CVE Intelligence Server](https://github.com/gnlds/mcp-cve-intelligence-server-lite)** ‚Äì Provides vulnerability intelligence via multi - source CVE data, essential exploit discovery, and EPSS risk scoring through the MCP. Useful for security research, automation, and agent workflows.\n- **[D365FO](https://github.com/mafzaal/d365fo-client)** - A comprehensive MCP server for Microsoft Dynamics 365 Finance & Operations (D365 F&O) that provides easy access to OData endpoints, metadata operations, label management, and AI assistant integration.\n- **[Dagster](https://github.com/dagster-io/dagster/tree/master/python_modules/libraries/dagster-dg-cli)** - An MCP server to easily build data pipelines using [Dagster](https://dagster.io/).\n- **[Dappier](https://github.com/DappierAI/dappier-mcp)** - Connect LLMs to real-time, rights-cleared, proprietary data from trusted sources. Access specialized models for Real-Time Web Search, News, Sports, Financial Data, Crypto, and premium publisher content. Explore data models at [marketplace.dappier.com](https://marketplace.dappier.com/marketplace).\n- **[Data Exploration](https://github.com/reading-plus-ai/mcp-server-data-exploration)** - MCP server for autonomous data exploration on .csv-based datasets, providing intelligent insights with minimal effort. NOTE: Will execute arbitrary Python code on your machine, please use with caution!\n- **[Databricks](https://github.com/JordiNeil/mcp-databricks-server)** - Allows LLMs to run SQL queries, list and get details of jobs executions in a Databricks account.\n- **[Databricks Genie](https://github.com/yashshingvi/databricks-genie-MCP)** - A server that connects to the Databricks Genie, allowing LLMs to ask natural language questions, run SQL queries, and interact with Databricks conversational agents.\n- **[Databricks Smart SQL](https://github.com/RafaelCartenet/mcp-databricks-server)** - Leveraging Databricks Unity Catalog metadata, perform smart efficient SQL queries to solve Ad-hoc queries and explore data.\n- **[DataCite](https://github.com/QuentinCody/datacite-mcp-server)** - Unofficial MCP server for DataCite, providing access to research data and publication metadata through DataCite's REST API and GraphQL interface for scholarly research discovery.\n- **[Datadog](https://github.com/GeLi2001/datadog-mcp-server)** - Datadog MCP Server for application tracing, monitoring, dashboard, incidents queries built on official datadog api.\n- **[Dataset Viewer](https://github.com/privetin/dataset-viewer)** - Browse and analyze Hugging Face datasets with features like search, filtering, statistics, and data export\n- **[DataWorks](https://github.com/aliyun/alibabacloud-dataworks-mcp-server)** - A Model Context Protocol (MCP) server that provides tools for AI, allowing it to interact with the [DataWorks](https://www.alibabacloud.com/help/en/dataworks/) Open API through a standardized interface. This implementation is based on the Alibaba Cloud Open API and enables AI agents to perform cloud resources operations seamlessly.\n- **[Data4library](https://github.com/isnow890/data4library-mcp)** (by isnow890) - MCP server for Korea's Library Information Naru API, providing comprehensive access to public library data, book searches, loan status, reading statistics, and GPS-based nearby library discovery across South Korea.\n\n- **[DaVinci Resolve](https://github.com/samuelgursky/davinci-resolve-mcp)** - MCP server integration for DaVinci Resolve providing powerful tools for video editing, color grading, media management, and project control.\n- **[DBHub](https://github.com/bytebase/dbhub/)** - Universal database MCP server connecting to MySQL, MariaDB, PostgreSQL, and SQL Server.\n- **[Deebo](https://github.com/snagasuri/deebo-prototype)** ‚Äì Agentic debugging MCP server that helps AI coding agents delegate and fix hard bugs through isolated multi-agent hypothesis testing.\n- **[Deep Research](https://github.com/reading-plus-ai/mcp-server-deep-research)** - Lightweight MCP server offering Grok/OpenAI/Gemini/Perplexity-style automated deep research exploration and structured reporting.\n- **[DeepSeek MCP Server](https://github.com/DMontgomery40/deepseek-mcp-server)** - Model Context Protocol server integrating DeepSeek's advanced language models, in addition to [other useful API endpoints](https://github.com/DMontgomery40/deepseek-mcp-server?tab=readme-ov-file#features)\n- **[deepseek-thinker-mcp](https://github.com/ruixingshi/deepseek-thinker-mcp)** - A MCP (Model Context Protocol) provider Deepseek reasoning content to MCP-enabled AI Clients, like Claude Desktop. Supports access to Deepseek's thought processes from the Deepseek API service or from a local Ollama server.\n- **[Deepseek_R1](https://github.com/66julienmartin/MCP-server-Deepseek_R1)** - A Model Context Protocol (MCP) server implementation connecting Claude Desktop with DeepSeek's language models (R1/V3)\n- **[Depyler](https://github.com/paiml/depyler/blob/main/docs/mcp-integration.md)** - Energy-efficient Python-to-Rust transpiler with progressive verification, enabling AI assistants to convert Python code to safe, performant Rust while reducing energy consumption by 75-85%.\n- **[deploy-mcp](https://github.com/alexpota/deploy-mcp)** - Universal deployment tracker for AI assistants with live status badges and deployment monitoring.\n- **[Descope](https://github.com/descope-sample-apps/descope-mcp-server)** - An MCP server to integrate with [Descope](https://descope.com) to search audit logs, manage users, and more.\n- **[DesktopCommander](https://github.com/wonderwhy-er/DesktopCommanderMCP)** - Let AI edit and manage files on your computer, run terminal commands, and connect to remote servers via SSH - all powered by one of the most popular local MCP servers.\n- **[Devcontainer](https://github.com/AI-QL/mcp-devcontainers)** - An MCP server for devcontainer to generate and configure development containers directly from devcontainer configuration files.\n- **[DevDb](https://github.com/damms005/devdb-vscode?tab=readme-ov-file#mcp-configuration)** - An MCP server that runs right inside the IDE, for connecting to MySQL, Postgres, SQLite, and MSSQL databases.\n- **[DevOps AI Toolkit](https://github.com/vfarcic/dot-ai)** - AI-powered development productivity platform that enhances software development workflows through intelligent automation and AI-driven assistance.\n- **[DevOps-MCP](https://github.com/wangkanai/devops-mcp)** - Dynamic Azure DevOps MCP server with directory-based authentication switching, supporting work items, repositories, builds, pipelines, and multi-project management with local configuration files.\n- **[DGIdb](https://github.com/QuentinCody/dgidb-mcp-server)** - MCP server for the Drug Gene Interaction Database (DGIdb), providing access to drug-gene interaction data, druggable genome information, and pharmacogenomics research.\n- **[Dicom](https://github.com/ChristianHinge/dicom-mcp)** - An MCP server to query and retrieve medical images and for parsing and reading dicom-encapsulated documents (pdf etc.).\n- **[Dify](https://github.com/YanxingLiu/dify-mcp-server)** - A simple implementation of an MCP server for dify workflows.\n- **[Discogs](https://github.com/cswkim/discogs-mcp-server)** - An MCP server that connects to the Discogs API for interacting with your music collection.\n- **[Discord](https://github.com/v-3/discordmcp)** - An MCP server to connect to Discord guilds through a bot and read and write messages in channels\n- **[Discord](https://github.com/SaseQ/discord-mcp)** - An MCP server, which connects to Discord through a bot, and provides comprehensive integration with Discord.\n- **[Discord](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/discord)** - For Discord API integration by Klavis AI\n- **[Discourse](https://github.com/AshDevFr/discourse-mcp-server)** - An MCP server to search Discourse posts on a Discourse forum.\n- **[DocBase](https://help.docbase.io/posts/3925317)** - Official MCP server for DocBase API integration, enabling post management, user collaboration, group administration, and more.\n- **[Docker](https://github.com/ckreiling/mcp-server-docker)** - Integrate with Docker to manage containers, images, volumes, and networks.\n- **[Docker](https://github.com/0xshariq/docker-mcp-server)** - Docker MCP Server provides advanced, unified Docker management via CLI and MCP workflows, supporting containers, images, volumes, networks, and orchestration.\n- **[Docs](https://github.com/da1z/docsmcp)** - Enable documentation access for the AI agent, supporting llms.txt and other remote or local files.\n- **[documcp](https://github.com/tosin2013/documcp)** - An MCP server for intelligent document processing and management, supporting multiple formats and document operations.\n- **[Docy](https://github.com/oborchers/mcp-server-docy)** - Docy gives your AI direct access to the technical documentation it needs, right when it needs it. No more outdated information, broken links, or rate limits - just accurate, real-time documentation access for more precise coding assistance.\n- **[Dodo Payments](https://github.com/dodopayments/dodopayments-node/tree/main/packages/mcp-server)** - Enables AI agents to securely perform payment operations via a lightweight, serverless-compatible interface to the [Dodo Payments](https://dodopayments.com) API.\n- **[Domain Tools](https://github.com/deshabhishek007/domain-tools-mcp-server)** - A Model Context Protocol (MCP) server for comprehensive domain analysis: WHOIS, DNS records, and DNS health checks.\n- **[DPLP](https://github.com/szeider/mcp-dblp)**  - Searches the [DBLP](https://dblp.org) computer science bibliography database.\n- **[Druid MCP Server](https://github.com/iunera/druid-mcp-server)** - STDIO/SEE MCP Server for Apache Druid by [iunera](https://www.iunera.com) that provides extensive tools, resources, and prompts for managing and analyzing Druid clusters.\n- **[Drupal](https://github.com/Omedia/mcp-server-drupal)** - Server for interacting with [Drupal](https://www.drupal.org/project/mcp) using STDIO transport layer.\n- **[dune-analytics-mcp](https://github.com/kukapay/dune-analytics-mcp)** -  A mcp server that bridges Dune Analytics data to AI agents.\n- **[DynamoDB-Toolbox](https://www.dynamodbtoolbox.com/docs/databases/actions/mcp-toolkit)** - Leverages your Schemas and Access Patterns to interact with your [DynamoDB](https://aws.amazon.com/dynamodb) Database using natural language.\n- **[eBook-mcp](https://github.com/onebirdrocks/ebook-mcp)** - A lightweight MCP server that allows LLMs to read and interact with your personal PDF and EPUB ebooks. Ideal for building AI reading assistants or chat-based ebook interfaces.\n- **[ECharts MCP Server](https://github.com/hustcc/mcp-echarts)** - Generate visual charts using ECharts with AI MCP dynamically, used for chart generation and data analysis.\n- **[EDA MCP Server](https://github.com/NellyW8/mcp-EDA)** - A comprehensive Model Context Protocol server for Electronic Design Automation tools, enabling AI assistants to synthesize Verilog with Yosys, simulate designs with Icarus Verilog, run complete ASIC flows with OpenLane, and view results with GTKWave and KLayout.\n- **[EdgeOne Pages MCP](https://github.com/TencentEdgeOne/edgeone-pages-mcp)** - An MCP service for deploying HTML content to EdgeOne Pages and obtaining a publicly accessible URL.\n- **[Edwin](https://github.com/edwin-finance/edwin/tree/main/examples/mcp-server)** - MCP server for edwin SDK - enabling AI agents to interact with DeFi protocols across EVM, Solana and other blockchains.\n- **[eechat](https://github.com/Lucassssss/eechat)** - An open-source, cross-platform desktop application that seamlessly connects with MCP servers, across Linux, macOS, and Windows.\n- **[Elasticsearch](https://github.com/cr7258/elasticsearch-mcp-server)** - MCP server implementation that provides Elasticsearch interaction.\n- **[ElevenLabs](https://github.com/mamertofabian/elevenlabs-mcp-server)** - A server that integrates with ElevenLabs text-to-speech API capable of generating full voiceovers with multiple voices.\n- **[Email](https://github.com/Shy2593666979/mcp-server-email)** - This server enables users to send emails through various email providers, including Gmail, Outlook, Yahoo, Sina, Sohu, 126, 163, and QQ Mail. It also supports attaching files from specified directories, making it easy to upload attachments along with the email content.\n- **[Email SMTP](https://github.com/egyptianego17/email-mcp-server)** - A simple MCP server that lets your AI agent send emails and attach files through SMTP.\n- **[Enhance Prompt](https://github.com/FelixFoster/mcp-enhance-prompt)** - An MCP service for enhance you prompt.\n- **[Entrez](https://github.com/QuentinCody/entrez-mcp-server)** - Unofficial MCP server for NCBI Entrez databases, providing access to PubMed articles, gene information, protein data, and other biomedical research resources through NCBI's E-utilities API.\n- **[Ergo Blockchain MCP](https://github.com/marctheshark3/ergo-mcp)** -An MCP server to integrate Ergo Blockchain Node and Explorer APIs for checking address balances, analyzing transactions, viewing transaction history, performing forensic analysis of addresses, searching for tokens, and monitoring network status.\n- **[ESP MCP Server](https://github.com/horw/esp-mcp)** - An MCP server that integrates ESP IDF commands like building and flashing code for ESP Microcontrollers using an LLM.\n- **[Eunomia](https://github.com/whataboutyou-ai/eunomia-MCP-server)** - Extension of the Eunomia framework that connects Eunomia instruments with MCP servers\n- **[Everything Search](https://github.com/mamertofabian/mcp-everything-search)** - Fast file searching capabilities across Windows (using [Everything SDK](https://www.voidtools.com/support/everything/sdk/)), macOS (using mdfind command), and Linux (using locate/plocate command).\n- **[EVM MCP Server](https://github.com/mcpdotdirect/evm-mcp-server)** - Comprehensive blockchain services for 30+ EVM networks, supporting native tokens, ERC20, NFTs, smart contracts, transactions, and ENS resolution.\n- **[Excel](https://github.com/haris-musa/excel-mcp-server)** - Excel manipulation including data reading/writing, worksheet management, formatting, charts, and pivot table.\n- **[Excel to JSON MCP by WTSolutions](https://github.com/he-yang/excel-to-json-mcp)** - MCP Server providing a standardized interface for converting (1) Excel or CSV data into JSON format ;(2) Excel(.xlsx) file into Structured JSON.\n- **[Extended Memory](https://github.com/ssmirnovpro/extended-memory-mcp)** - Persistent memory across Claude conversations with multi-project support, automatic importance scoring, and tag-based organization. Production-ready with 400+ tests.\n- **[F1](https://github.com/AbhiJ2706/f1-mcp/tree/main)** - Access to Formula 1 data including race results, driver information, lap times, telemetry, and circuit details.\n- **[Fabric MCP](https://github.com/aci-labs/ms-fabric-mcp)** - Microsoft Fabric MCP server to accelerate working in your Fabric Tenant with the help of your favorite LLM models.\n- **[Fabric Real-Time Intelligence MCP](https://github.com/Microsoft/fabric-rti-mcp)** - Official Microsoft Fabric RTI server to accelerate working with Eventhouse, Azure Data Explorer(Kusto), Eventstreams and other RTI items using your favorite LLM models.\n- **[fabric-mcp-server](https://github.com/adapoet/fabric-mcp-server)** - The fabric-mcp-server is an MCP server that integrates [Fabric](https://github.com/danielmiessler/fabric) patterns with [Cline](https://cline.bot/), exposing them as tools for AI-driven task execution and enhancing Cline's capabilities.\n- **[Fal MCP Server](https://github.com/raveenb/fal-mcp-server)** - Generate AI images, videos, and music using Fal.ai models (FLUX, Stable Diffusion, MusicGen) directly in Claude\n- **[Facebook Ads](https://github.com/gomarble-ai/facebook-ads-mcp-server)** - MCP server acting as an interface to the Facebook Ads, enabling programmatic access to Facebook Ads data and management features.\n- **[Facebook Ads 10xeR](https://github.com/fortytwode/10xer)** - Advanced Facebook Ads MCP server with enhanced creative insights, multi-dimensional breakdowns, and comprehensive ad performance analytics.\n- **[Facebook Ads Library](https://github.com/trypeggy/facebook-ads-library-mcp)** - Get any answer from the Facebook Ads Library, conduct deep research including messaging, creative testing and comparisons in seconds.\n- **[Fantasy PL](https://github.com/rishijatia/fantasy-pl-mcp)** - Give your coding agent direct access to up-to date Fantasy Premier League data\n- **[Fastmail MCP](https://github.com/MadLlama25/fastmail-mcp)** - Access Fastmail via JMAP: list/search emails, send and move mail, handle attachments/threads, plus contacts and calendar tools.\n- **[fastn.ai ‚Äì Unified API MCP Server](https://github.com/fastnai/mcp-fastn)** - A remote, dynamic MCP server with a unified API that connects to 1,000+ tools, actions, and workflows, featuring built-in authentication and monitoring.\n- **[FDIC BankFind MCP Server - (Unofficial)](https://github.com/clafollett/fdic-bank-find-mcp-server)** - The is a MCPserver that brings the power of FDIC BankFind APIs straight to your AI tools and workflows. Structured U.S. banking data, delivered with maximum vibes. üòéüìä\n- **[FPE Demo MCP](https://github.com/Horizon-Digital-Engineering/fpe-demo-mcp)** - FF3 Format Preserving Encryption with authentication patterns for secure data protection in LLM workflows.\n- **[Federal Reserve Economic Data (FRED)](https://github.com/stefanoamorelli/fred-mcp-server)** (by Stefano Amorelli) - Community developed MCP server to interact with the Federal Reserve Economic Data.\n- **[Fetch](https://github.com/zcaceres/fetch-mcp)** - A server that flexibly fetches HTML, JSON, Markdown, or plaintext.\n- **[Feyod](https://github.com/jeroenvdmeer/feyod-mcp)** - A server that answers questions about football matches, and specialised in the football club Feyenoord.\n- **[Fast Filesystem](https://github.com/efforthye/fast-filesystem-mcp)** - Advanced filesystem operations with large file handling capabilities and Claude-optimized features. Provides fast file reading/writing, sequential reading for large files, directory operations, file search, and streaming writes with backup & recovery.\n- **[FHIR](https://github.com/wso2/fhir-mcp-server)** - A Model Context Protocol server that provides seamless, standardized access to Fast Healthcare Interoperability Resources (FHIR) data from any compatible FHIR server. Designed for easy integration with AI tools, developer workflows, and healthcare applications, it enables natural language and programmatic search, retrieval, and analysis of clinical data.\n- **[Fibaro HC3](https://github.com/coding-sailor/mcp-server-hc3)** - MCP server for Fibaro Home Center 3 smart home systems.\n- **[Figma](https://github.com/GLips/Figma-Context-MCP)** - Give your coding agent direct access to Figma file data, helping it one-shot design implementation.\n- **[Figma](https://github.com/paulvandermeijs/figma-mcp)** - A blazingly fast MCP server to read and export your Figma design files.\n- **[Figma to Flutter](https://github.com/mhmzdev/figma-flutter-mcp)** - Write down clean and better Flutter code from Figma design tokens and enrich nodes data in Flutter terminology.\n- **[Files](https://github.com/flesler/mcp-files)** - Enables agents to quickly find and edit code in a codebase with surgical precision. Find symbols, edit them everywhere.\n- **[FileSystem Server](https://github.com/Oncorporation/filesystem_server)** - Local MCP server for Visual Studio 2022 that provides code-workspace functionality by giving AI agents selective access to project folders and files\n- **[finmap.org](https://github.com/finmap-org/mcp-server)** MCP server provides comprehensive historical data from the US, UK, Russian and Turkish stock exchanges. Access sectors, tickers, company profiles, market cap, volume, value, and trade counts, as well as treemap and histogram visualizations.\n- **[Firebase](https://github.com/gannonh/firebase-mcp)** - Server to interact with Firebase services including Firebase Authentication, Firestore, and Firebase Storage.\n- **[Fish Audio](https://github.com/da-okazaki/mcp-fish-audio-server)** - Text-to-Speech integration with Fish Audio's API, supporting multiple voices, streaming, and real-time playback\n- **[FitBit MCP Server](https://github.com/NitayRabi/fitbit-mcp)** - An MCP server that connects to FitBit API using a token obtained from OAuth flow.\n- **[FlightRadar24](https://github.com/sunsetcoder/flightradar24-mcp-server)** - A Claude Desktop MCP server that helps you track flights in real-time using Flightradar24 data.\n- **[Fluent-MCP](https://github.com/modesty/fluent-mcp)** - MCP server for Fluent (ServiceNow SDK) providing access to ServiceNow SDK CLI, API specifications, code snippets, and more.\n- **[Flyworks Avatar](https://github.com/Flyworks-AI/flyworks-mcp)** - Fast and free zeroshot lipsync MCP server.\n- **[fmp-mcp-server](https://github.com/vipbat/fmp-mcp-server)** - Enable your agent for M&A analysis and investment banking workflows. Access company profiles, financial statements, ratios, and perform sector analysis with the [Financial Modeling Prep APIs]\n- **[FoundationModels](https://github.com/phimage/mcp-foundation-models)** - An MCP server that integrates Apple's [FoundationModels](https://developer.apple.com/documentation/foundationmodels) for text generation.\n- **[Foursquare](https://github.com/foursquare/foursquare-places-mcp)** - Enable your agent to recommend places around the world with the [Foursquare Places API](https://location.foursquare.com/products/places-api/)\n- **[FrankfurterMCP](https://github.com/anirbanbasu/frankfurtermcp)** - MCP server acting as an interface to the [Frankfurter API](https://frankfurter.dev/) for currency exchange data.\n- **[freqtrade-mcp](https://github.com/kukapay/freqtrade-mcp)** - An MCP server that integrates with the Freqtrade cryptocurrency trading bot.\n- **[Geolocation](https://github.com/jackyang25/geolocation-mcp-server)** - WalkScore API integration for walkability, transit, and bike scores.\n- **[GDB](https://github.com/pansila/mcp_server_gdb)** - A GDB/MI protocol server based on the MCP protocol, providing remote application debugging capabilities with AI assistants.\n- **[ggRMCP](https://github.com/aalobaidi/ggRMCP)** - A Go gateway that converts gRPC services into MCP-compatible tools, allowing AI models like Claude to directly call your gRPC services.\n- **[Gemini Bridge](https://github.com/eLyiN/gemini-bridge)** - Lightweight MCP server that enables Claude to interact with Google's Gemini AI through the official CLI, offering zero API costs and stateless architecture.\n- **[Ghost](https://github.com/MFYDev/ghost-mcp)** - A Model Context Protocol (MCP) server for interacting with Ghost CMS through LLM interfaces like Claude.\n- **[Git](https://github.com/geropl/git-mcp-go)** - Allows LLM to interact with a local git repository, incl. optional push support.\n- **[Git Mob](https://github.com/Mubashwer/git-mob-mcp-server)** - MCP server that interfaces with the [git-mob](https://github.com/Mubashwer/git-mob) CLI app for managing co-authors in git commits during pair/mob programming.\n- **[Github](https://github.com/0xshariq/github-mcp-server)** - A Model Context Protocol (MCP) server that provides 29 Git operations + 11 workflow combinations for AI assistants and developers. This server exposes comprehensive Git repository management through a standardized interface, enabling AI models and developers to safely manage complex version control workflows.\n- **[GitHub Actions](https://github.com/ko1ynnky/github-actions-mcp-server)** - A Model Context Protocol (MCP) server for interacting with GitHub Actions.\n- **[GitHub Enterprise MCP](https://github.com/ddukbg/github-enterprise-mcp)** - A Model Context Protocol (MCP) server for interacting with GitHub Enterprise.\n- **[GitHub GraphQL](https://github.com/QuentinCody/github-graphql-mcp-server)** - Unofficial GitHub MCP server that provides access to GitHub's GraphQL API, enabling more powerful and flexible queries for repository data, issues, pull requests, and other GitHub resources.\n- **[GitHub Projects](https://github.com/redducklabs/github-projects-mcp)** ‚Äî Manage GitHub Projects with full GraphQL API access including items, fields, and milestones.\n- **[GitHub Repos Manager MCP Server](https://github.com/kurdin/github-repos-manager-mcp)** - Token-based GitHub automation management. No Docker, Flexible configuration, 80+ tools with direct API integration.\n- **[GitMCP](https://github.com/idosal/git-mcp)** - gitmcp.io is a generic remote MCP server to connect to ANY GitHub repository or project documentation effortlessly\n- **[Glean](https://github.com/longyi1207/glean-mcp-server)** - A server that uses Glean API to search and chat.\n- **[Gmail](https://github.com/GongRzhe/Gmail-MCP-Server)** - A Model Context Protocol (MCP) server for Gmail integration in Claude Desktop with auto authentication support.\n- **[Gmail](https://github.com/Ayush-k-Shukla/gmail-mcp-server)** - A Simple MCP server for Gmail with support for all basic operations with oauth2.0.\n- **[Gmail Headless](https://github.com/baryhuang/mcp-headless-gmail)** - Remote hostable MCP server that can get and send Gmail messages without local credential or file system setup.\n- **[Gmail MCP](https://github.com/gangradeamitesh/mcp-google-email)** - A Gmail service implementation using MCP (Model Context Protocol) that provides functionality for sending, receiving, and managing emails through Gmail's API.\n- **[Gnuradio](https://github.com/yoelbassin/gnuradioMCP)** - An MCP server for GNU Radio that enables LLMs to autonomously create and modify RF .grc flowcharts.\n- **[Goal Story](https://github.com/hichana/goalstory-mcp)** - a Goal Tracker and Visualization Tool for personal and professional development.\n- **[GOAT](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-framework/model-context-protocol)** - Run more than +200 onchain actions on any blockchain including Ethereum, Solana and Base.\n- **[Godot](https://github.com/Coding-Solo/godot-mcp)** - An MCP server providing comprehensive Godot engine integration for project editing, debugging, and scene management.\n- **[Golang Filesystem Server](https://github.com/mark3labs/mcp-filesystem-server)** - Secure file operations with configurable access controls built with Go!\n- **[Goodnews](https://github.com/VectorInstitute/mcp-goodnews)** - A simple MCP server that delivers curated positive and uplifting news stories.\n- **[Gopher MCP](https://github.com/cameronrye/gopher-mcp)** - Modern, cross-platform MCP server that enables AI assistants to browse and interact with both Gopher protocol and Gemini protocol resources safely and efficiently.\n- **[Google Ads](https://github.com/gomarble-ai/google-ads-mcp-server)** - MCP server acting as an interface to the Google Ads, enabling programmatic access to Facebook Ads data and management features.\n- **[Google Analytics](https://github.com/surendranb/google-analytics-mcp)** - Google Analytics MCP Server to bring data across 200+ dimensions & metrics for LLMs to analyse.\n- **[Google Calendar](https://github.com/v-3/google-calendar)** - Integration with Google Calendar to check schedules, find time, and add/delete events\n- **[Google Calendar](https://github.com/nspady/google-calendar-mcp)** - Google Calendar MCP Server for managing Google calendar events. Also supports searching for events by attributes like title and location.\n- **[Google Custom Search](https://github.com/adenot/mcp-google-search)** - Provides Google Search results via the Google Custom Search API\n- **[Google Maps](https://github.com/Mastan1301/google_maps_mcp)** - Provides location results using Google Places API.\n- **[Google Sheets](https://github.com/xing5/mcp-google-sheets)** - Access and editing data to your Google Sheets.\n- **[Google Sheets](https://github.com/rohans2/mcp-google-sheets)** - An MCP Server written in TypeScript to access and edit data in your Google Sheets.\n- **[Google Tasks](https://github.com/zcaceres/gtasks-mcp)** - Google Tasks API Model Context Protocol Server.\n- **[Google Vertex AI Search](https://github.com/ubie-oss/mcp-vertexai-search)** - Provides Google Vertex AI Search results by grounding a Gemini model with your own private data\n- **[Google Workspace](https://github.com/taylorwilsdon/google_workspace_mcp)** - Comprehensive Google Workspace MCP with full support for Calendar, Drive, Gmail, and Docs using Streamable HTTP or SSE transport.\n- **[Google-Scholar](https://github.com/JackKuo666/Google-Scholar-MCP-Server)** - Enable AI assistants to search and access Google Scholar papers through a simple MCP interface.\n- **[Google-Scholar](https://github.com/mochow13/google-scholar-mcp)** - An MCP server for Google Scholar written in TypeScript with Streamable HTTP transport, along with a `client` implementations that integrates with the server and interacts with `gemini-2.5-flash`.\n- **[gx-mcp-server](https://github.com/davidf9999/gx-mcp-server)** - Expose Great Expectations data validation and quality checks as MCP tools for AI agents.\n- **[Gralio SaaS Database](https://github.com/tymonTe/gralio-mcp)** - Find and compare SaaS products, including data from G2 reviews, Trustpilot, Crunchbase, Linkedin, pricing, features and more, using [Gralio MCP](https://gralio.ai/mcp) server\n- **[GraphQL](https://github.com/drestrepom/mcp_graphql)** - Comprehensive GraphQL API integration that automatically exposes each GraphQL query as a separate tool.\n- **[GraphQL Schema](https://github.com/hannesj/mcp-graphql-schema)** - Allow LLMs to explore large GraphQL schemas without bloating the context.\n- **[HackMD](https://github.com/yuna0x0/hackmd-mcp)** (by yuna0x0) - An MCP server for HackMD, a collaborative markdown editor. It allows users to create, read, and update documents in HackMD using the Model Context Protocol.\n- **[HAProxy](https://github.com/tuannvm/haproxy-mcp-server)** - A Model Context Protocol (MCP) server for HAProxy implemented in Go, leveraging HAProxy Runtime API.\n- **[Hashing MCP Server](https://github.com/kanad13/MCP-Server-for-Hashing)** - MCP Server with cryptographic hashing functions e.g. SHA256, MD5, etc.\n- **[HDW LinkedIn](https://github.com/horizondatawave/hdw-mcp-server)** - Access to profile data and management of user account with [HorizonDataWave.ai](https://horizondatawave.ai/).\n- **[HeatPump](https://github.com/jiweiqi/heatpump-mcp-server)** ‚Äî Residential heat - pump sizing & cost-estimation tools by **HeatPumpHQ**.\n- **[Helm Chart CLI](https://github.com/jeff-nasseri/helm-chart-cli-mcp)** - Helm MCP provides a bridge between AI assistants and the Helm package manager for Kubernetes. It allows AI assistants to interact with Helm through natural language requests, executing commands like installing charts, managing repositories, and more.\n- **[Heurist Mesh Agent](https://github.com/heurist-network/heurist-mesh-mcp-server)** - Access specialized web3 AI agents for blockchain analysis, smart contract security, token metrics, and blockchain interactions through the [Heurist Mesh network](https://github.com/heurist-network/heurist-agent-framework/tree/main/mesh).\n- **[HLedger MCP](https://github.com/iiAtlas/hledger-mcp)** - Double entry plain text accounting, right in your LLM! This MCP enables comprehensive read, and (optional) write access to your local [HLedger](https://hledger.org/) accounting journals.\n- **[Holaspirit](https://github.com/syucream/holaspirit-mcp-server)** - Interact with [Holaspirit](https://www.holaspirit.com/).\n- **[Home Assistant](https://github.com/tevonsb/homeassistant-mcp)** - Interact with [Home Assistant](https://www.home-assistant.io/) including viewing and controlling lights, switches, sensors, and all other Home Assistant entities.\n- **[Home Assistant](https://github.com/voska/hass-mcp)** - Docker-ready MCP server for Home Assistant with entity management, domain summaries, automation support, and guided conversations. Includes pre-built container images for easy installation.\n- **[HubSpot](https://github.com/buryhuang/mcp-hubspot)** - HubSpot CRM integration for managing contacts and companies. Create and retrieve CRM data directly through Claude chat.\n- **[HuggingFace Spaces](https://github.com/evalstate/mcp-hfspace)** - Server for using HuggingFace Spaces, supporting Open Source Image, Audio, Text Models and more. Claude Desktop mode for easy integration.\n- **[Human-In-the-Loop](https://github.com/GongRzhe/Human-In-the-Loop-MCP-Server)** - A powerful MCP Server that enables AI assistants like Claude to interact with humans through intuitive GUI dialogs. This server bridges the gap between automated AI processes and human decision-making by providing real-time user input tools, choices, confirmations, and feedback mechanisms.\n- **[Human-use](https://github.com/RapidataAI/human-use)** - Instant human feedback through an MCP, have your AI interact with humans around the world. Powered by [Rapidata](https://www.rapidata.ai/)\n- **[Hyperledger Fabric Agent Suite](https://github.com/padmarajkore/hlf-fabric-agent)** - Modular toolkit for managing Fabric test networks and chaincode lifecycle via MCP tools.\n- **[Hyperliquid](https://github.com/mektigboy/server-hyperliquid)** - An MCP server implementation that integrates the Hyperliquid SDK for exchange data.\n- **[Hypertool](https://github.com/toolprint/hypertool-mcp)** ‚Äì MCP that let's you create hot - swappable, \"persona toolsets\" from multiple MCP servers to reduce tool overload and improve tool execution.\n- **[hyprmcp](https://github.com/stefanoamorelli/hyprmcp)** (by Stefano Amorelli) - Lightweight MCP server for `hyprland`.\n- **[iFlytek SparkAgent Platform](https://github.com/iflytek/ifly-spark-agent-mcp)** - This is a simple example of using MCP Server to invoke the task chain of the  iFlytek SparkAgent Platform.\n- **[iFlytek Workflow](https://github.com/iflytek/ifly-workflow-mcp-server)** - Connect to iFlytek Workflow via the MCP server and run your own Agent.\n- **[IIIF](https://github.com/code4history/IIIF_MCP)** - Comprehensive IIIF (International Image Interoperability Framework) protocol support for searching, navigating, and manipulating digital collections from museums, libraries, and archives worldwide.\n- **[Image Generation](https://github.com/GongRzhe/Image-Generation-MCP-Server)** - This MCP server provides image generation capabilities using the Replicate Flux model.\n- **[ImageSorcery MCP](https://github.com/sunriseapps/imagesorcery-mcp)** - ComputerVision-based ü™Ñ sorcery of image recognition and editing tools for AI assistants.\n- **[IMAP MCP](https://github.com/dominik1001/imap-mcp)** - üìß An IMAP Model Context Protocol (MCP) server to expose IMAP operations as tools for AI assistants.\n- **[iMCP](https://github.com/loopwork-ai/iMCP)** - A macOS app that provides an MCP server for your iMessage, Reminders, and other Apple services.\n- **[InfluxDB](https://github.com/idoru/influxdb-mcp-server)** - Run queries against InfluxDB OSS API v2.\n- **[Intelligent Image Generator](https://github.com/shinpr/mcp-image)** - Turn casual prompts into professional-quality images with AI enhancement\n- **[Inner Monologue MCP](https://github.com/abhinav-mangla/inner-monologue-mcp)** - A cognitive reasoning tool that enables LLMs to engage in private, structured self-reflection and multi-step reasoning before generating responses, improving response quality and problem-solving capabilities.\n- **[Inoyu](https://github.com/sergehuber/inoyu-mcp-unomi-server)** - Interact with an Apache Unomi CDP customer data platform to retrieve and update customer profiles\n- **[Instagram DM](https://github.com/trypeggy/instagram_dm_mcp)** - Send DMs on Instagram via your LLM\n- **[interactive-mcp](https://github.com/ttommyth/interactive-mcp)** - Enables interactive LLM workflows by adding local user prompts and chat capabilities directly into the MCP loop.\n- **[Intercom](https://github.com/raoulbia-ai/mcp-server-for-intercom)** - An MCP-compliant server for retrieving customer support tickets from Intercom. This tool enables AI assistants like Claude Desktop and Cline to access and analyze your Intercom support tickets.\n- **[iOS Simulator](https://github.com/InditexTech/mcp-server-simulator-ios-idb)** - A Model Context Protocol (MCP) server that enables LLMs to interact with iOS simulators (iPhone, iPad, etc.) through natural language commands.\n- **[ipybox](https://github.com/gradion-ai/ipybox)** - Python code execution sandbox based on IPython and Docker. Stateful code execution, file transfer between host and container, configurable network access. See [ipybox MCP server](https://gradion-ai.github.io/ipybox/mcp-server/) for details.\n- **[it-tools-mcp](https://github.com/wrenchpilot/it-tools-mcp)** - A Model Context Protocol server that recreates [CorentinTh it-tools](https://github.com/CorentinTh/it-tools) utilities for AI agents, enabling access to a wide range of developer tools (encoding, decoding, conversions, and more) via MCP.\n- **[itemit MCP](https://github.com/umin-ai/itemit-mcp)** - itemit is Asset Tracking MCP that manage the inventory, monitoring and location tracking that powers over +300 organizations.\n- **[iTerm MCP](https://github.com/ferrislucas/iterm-mcp)** - Integration with iTerm2 terminal emulator for macOS, enabling LLMs to execute and monitor terminal commands.\n- **[iTerm MCP Server](https://github.com/rishabkoul/iTerm-MCP-Server)** - A Model Context Protocol (MCP) server implementation for iTerm2 terminal integration. Able to manage multiple iTerm Sessions.\n- **[Java Decompiler](https://github.com/idachev/mcp-javadc)** - Decompile Java bytecode into readable source code from .class files, package names, or JAR archives using CFR decompiler\n- **[JavaFX](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jfx)** - Make drawings using a JavaFX canvas\n- **[JDBC](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc)** - Connect to any JDBC-compatible database and query, insert, update, delete, and more. Supports MySQL, PostgreSQL, Oracle, SQL Server, SQLite and [more](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc#supported-jdbc-variants).\n- **[Jenkins](https://github.com/jasonkylelol/jenkins-mcp-server)** - This MCP server allow you to create Jenkins tasks.\n- **[JMeter](https://github.com/QAInsights/jmeter-mcp-server)** - Run load testing using Apache JMeter via MCP-compliant tools.\n- **[Job Searcher](https://github.com/0xDAEF0F/job-searchoor)** - A FastMCP server that provides tools for retrieving and filtering job listings based on time period, keywords, and remote work preferences.\n- **[jobswithgpt](https://github.com/jobswithgpt/mcp)** - Job search MCP using jobswithgpt which indexes 500K+ public job listings and refreshed continously.\n- **[joinly](https://github.com/joinly-ai/joinly)** - MCP server to interact with browser-based meeting platforms (Zoom, Teams, Google Meet). Enables AI agents to send bots to online meetings, gather live transcripts, speak text, and send messages in the meeting chat.\n- **[JSON](https://github.com/GongRzhe/JSON-MCP-Server)** - JSON handling and processing server with advanced query capabilities using JSONPath syntax and support for array, string, numeric, and date operations.\n- **[JSON](https://github.com/kehvinbehvin/json-mcp-filter)** - JSON schema generation and filtering server with TypeScript type creation optimised for retrieving relevant context JSON data using quicktype-core and support for shape-based data extraction, nested object filtering, and array processing operations.\n- **[JSON to Excel by WTSolutions](https://github.com/he-yang/json-to-excel-mcp)** - Converting JSON into CSV format string from (1) JSON data, (2) URLs pointing to publiclly available .json files.\n- **[JSON2Video MCP](https://github.com/omergocmen/json2video-mcp-server)** - A Model Context Protocol (MCP) server implementation for programmatically generating videos using the json2video API. This server exposes powerful video generation and status-checking tools for use with LLMs, agents, or any MCP-compatible client.\n- **[jupiter-mcp](https://github.com/kukapay/jupiter-mcp)** - An MCP server for executing token swaps on the Solana blockchain using Jupiter's new Ultra API.\n- **[Jupyter MCP Server](https://github.com/datalayer/jupyter-mcp-server)** ‚Äì Real-time interaction with Jupyter Notebooks, allowing AI to edit, document and execute code for data analysis, visualization etc. Compatible with any Jupyter deployment (local, JupyterHub, ...).\n- **[Jupyter Notebook](https://github.com/jjsantos01/jupyter-notebook-mcp)** - connects Jupyter Notebook to Claude AI, allowing Claude to directly interact with and control Jupyter Notebooks. This integration enables AI-assisted code execution, data analysis, visualization, and more.\n- **[k8s-multicluster-mcp](https://github.com/razvanmacovei/k8s-multicluster-mcp)** - An MCP server for interact with multiple Kubernetes clusters simultaneously using multiple kubeconfig files.\n- **[Kafka](https://github.com/tuannvm/kafka-mcp-server)** - A Model Context Protocol (MCP) server for Apache Kafka implemented in Go, leveraging [franz-go](https://github.com/twmb/franz-go).\n- **[Kafka Schema Registry MCP](https://github.com/aywengo/kafka-schema-reg-mcp)** \\ - A comprehensive MCP server for Kafka Schema Registry with 48 tools, multi-registry support, authentication, and production safety features. Enables AI-powered schema management with enterprise-grade capabilities including schema contexts, migration tools, and comprehensive export capabilities.\n- **[kafka-mcp](https://github.com/shivamxtech/kafka-mcp)** - An MCP Server for Kafka clusters to interact with kafka environment via tools on messages, topics, offsets, partitions for consumer and producers along with seamless integration with MCP clients.\n- **[Keycloak](https://github.com/idoyudha/mcp-keycloak)** - The Keycloak MCP Server designed for agentic applications to manage and search data in Keycloak efficiently.\n- **[Keycloak MCP](https://github.com/ChristophEnglisch/keycloak-model-context-protocol)** - This MCP server enables natural language interaction with Keycloak for user and realm management including creating, deleting, and listing users and realms.\n- **[Keycloak MCP Server](https://github.com/sshaaf/keycloak-mcp-server)** - designed to work with Keycloak for identity and access management, with about 40+ tools covering, Users, Realms, Clients, Roles, Groups, IDPs, Authentication. Native builds available.\n- **[Kibana MCP](https://github.com/TocharianOU/mcp-server-kibana.git)** (by TocharianOU) - A community-maintained MCP server implementation that allows any MCP-compatible client to access and manage Kibana instances through natural language or programmatic requests.\n- **[Kibela](https://github.com/kiwamizamurai/mcp-kibela-server)** (by kiwamizamurai) - Interact with Kibela API.\n- **[KiCad MCP](https://github.com/lamaalrajih/kicad-mcp)** - MCP server for KiCad on Mac, Windows, and Linux.\n- **[kill-process-mcp](https://github.com/misiektoja/kill-process-mcp)** - List and terminate OS processes via natural language queries\n- **[Kindred Offers & Discounts MCP](https://github.com/kindred-app/mcp-server-kindred-offers)** (by kindred.co) - This MCP server allows you to get live deals and offers/coupons from e-commerce merchant sites all over the world.\n- **[kintone](https://github.com/macrat/mcp-server-kintone)** - Manage records and apps in [kintone](https://kintone.com) through LLM tools.\n- **[Kokoro TTS](https://github.com/mberg/kokoro-tts-mcp)** - Use Kokoro text to speech to convert text to MP3s with optional autoupload to S3.\n- **[Kong Konnect](https://github.com/Kong/mcp-konnect)** - A Model Context Protocol (MCP) server for interacting with Kong Konnect APIs, allowing AI assistants to query and analyze Kong Gateway configurations, traffic, and analytics.\n- **[Korea Stock Analyzer](https://github.com/Mrbaeksang/korea-stock-analyzer-mcp)** - Analyze Korean stocks (KOSPI/KOSDAQ) with 6 legendary investment strategies including Buffett, Lynch, Graham, Greenblatt, Fisher, and Templeton.\n- **[Kubernetes](https://github.com/Flux159/mcp-server-kubernetes)** - Connect to Kubernetes cluster and manage pods, deployments, and services.\n- **[Kubernetes and OpenShift](https://github.com/manusa/kubernetes-mcp-server)** - A powerful Kubernetes MCP server with additional support for OpenShift. Besides providing CRUD operations for any Kubernetes resource, this server provides specialized tools to interact with your cluster.\n- **[KubeSphere](https://github.com/kubesphere/ks-mcp-server)** - The KubeSphere MCP Server is a Model Context Protocol(MCP) server that provides integration with KubeSphere APIs, enabling to get resources from KubeSphere. Divided into four tools modules: Workspace Management, Cluster Management, User and Roles, Extensions Center.\n- **[Kukapay MCP Servers](https://github.com/kukapay/kukapay-mcp-servers)** - A comprehensive suite of Model Context Protocol (MCP) servers dedicated to cryptocurrency, blockchain, and Web3 data aggregation, analysis, and services from Kukapay.\n- **[kwrds.ai](https://github.com/mkotsollaris/kwrds_ai_mcp)** - Keyword research, people also ask, SERP and other SEO tools for [kwrds.ai](https://www.kwrds.ai/)\n- **[KYC-mcp-server](https://github.com/vishnurudra-ai/KYC-mcp-server)** - Know Your Computer (KYC) - MCP Server compatible with Claude Desktop. Comprehensive system diagnostics for Windows, Mac OS and Linux operating system with AI-powered recommendations.\n- **[Langflow-DOC-QA-SERVER](https://github.com/GongRzhe/Langflow-DOC-QA-SERVER)** - A Model Context Protocol server for document Q&A powered by Langflow. It demonstrates core MCP concepts by providing a simple interface to query documents through a Langflow backend.\n- **[Language Server](https://github.com/isaacphi/mcp-language-server)** - MCP Language Server helps MCP enabled clients navigate codebases more easily by giving them access to semantic tools like get definition, references, rename, and diagnostics.\n- **[Lark(Feishu)](https://github.com/kone-net/mcp_server_lark)** - A Model Context Protocol(MCP) server for Lark(Feishu) sheet, message, doc and etc.\n- **[Lazy Toggl MCP](https://github.com/movstox/lazy-toggl-mcp)** - Simple unofficial MCP server to track time via Toggl API\n- **[lean-lsp-mcp](https://github.com/oOo0oOo/lean-lsp-mcp)** - Interact with the [Lean theorem prover](https://lean-lang.org/) via the Language Server Protocol.\n- **[librenms-mcp](https://github.com/mhajder/librenms-mcp)** - MCP server for [LibreNMS](https://www.librenms.org/) management\n- **[libvirt-mcp](https://github.com/MatiasVara/libvirt-mcp)** - Allows LLM to interact with libvirt thus enabling to create, destroy or list the Virtual Machines in a system.\n- **[Lightdash](https://github.com/syucream/lightdash-mcp-server)** - Interact with [Lightdash](https://www.lightdash.com/), a BI tool.\n- **[LINE](https://github.com/amornpan/py-mcp-line)** (by amornpan) - Implementation for LINE Bot integration that enables Language Models to read and analyze LINE conversations through a standardized interface. Features asynchronous operation, comprehensive logging, webhook event handling, and support for various message types.\n- **[Linear](https://github.com/tacticlaunch/mcp-linear)** - Interact with Linear project management system.\n- **[Linear](https://github.com/jerhadf/linear-mcp-server)** - Allows LLM to interact with Linear's API for project management, including searching, creating, and updating issues.\n- **[Linear (Go)](https://github.com/geropl/linear-mcp-go)** - Allows LLM to interact with Linear's API via a single static binary.\n- **[Linear MCP](https://github.com/anoncam/linear-mcp)** - Full blown implementation of the Linear SDK to support comprehensive Linear management of projects, initiatives, issues, users, teams and states.\n- **[Linked API MCP](https://github.com/Linked-API/linkedapi-mcp)** - MCP server that lets AI assistants control LinkedIn accounts and retrieve real-time data.\n- **[Listmonk MCP Server](https://github.com/rhnvrm/listmonk-mcp)** (by rhnvrm) - Full API coverage of [Listmonk](https://github.com/knadh/listmonk) email marketing FOSS.\n- **[LlamaCloud](https://github.com/run-llama/mcp-server-llamacloud)** (by marcusschiesser) - Integrate the data stored in a managed index on [LlamaCloud](https://cloud.llamaindex.ai/)\n- **[lldb-mcp](https://github.com/stass/lldb-mcp)** - A Model Context Protocol server for LLDB that provides LLM-driven debugging.\n- **[llm-context](https://github.com/cyberchitta/llm-context.py)** - Provides a repo-packing MCP tool with configurable profiles that specify file inclusion/exclusion patterns and optional prompts.\n- **[Local History](https://github.com/xxczaki/local-history-mcp)** ‚Äì MCP server for accessing VS Code/Cursor's Local History.\n- **[Locust](https://github.com/QAInsights/locust-mcp-server)** - Allows running and analyzing Locust tests using MCP compatible clients.\n- **[Loki](https://github.com/scottlepp/loki-mcp)** - Golang based MCP Server to query logs from [Grafana Loki](https://github.com/grafana/loki).\n- **[Loki MCP Server](https://github.com/mo-silent/loki-mcp-server)** - Python based MCP Server for querying and analyzing logs from Grafana Loki with advanced filtering and authentication support.\n- **[LottieFiles](https://github.com/junmer/mcp-server-lottiefiles)** - Searching and retrieving Lottie animations from [LottieFiles](https://lottiefiles.com/)\n- **[lsp-mcp](https://github.com/Tritlo/lsp-mcp)** - Interact with Language Servers usint the Language Server Protocol to provide additional context information via hover, code actions and completions.\n- **[Lspace](https://github.com/Lspace-io/lspace-server)** - Turn scattered ChatGPT/Claude/Cursor conversations into persistent, searchable knowledge.\n- **[lucene-mcp-server](https://github.com/VivekKumarNeu/MCP-Lucene-Server)** - spring boot server using Lucene for fast document search and management.\n- **[lucid-mcp-server](https://github.com/smartzan63/lucid-mcp-server)** ‚Äì An MCP server for Lucidchart and Lucidspark: connect, search, and obtain text representations of your Lucid documents and diagrams via LLM - driven AI Vision analysis. [npm](https://www.npmjs.com/package/lucid-mcp-server)\n- **[LunarCrush Remote MCP](https://github.com/lunarcrush/mcp-server)** - Get the latest social metrics and posts for both current live social context as well as historical metrics in LLM and token optimized outputs. Ideal for automated trading / financial advisory.\n- **[mac-messages-mcp](https://github.com/carterlasalle/mac_messages_mcp)** - An MCP server that securely interfaces with your iMessage database via the Model Context Protocol (MCP), allowing LLMs to query and analyze iMessage conversations. It includes robust phone number validation, attachment processing, contact management, group chat handling, and full support for sending and receiving messages.\n- **[Maestro MCP](https://github.com/maestro-org/maestro-mcp)** - An MCP server for interacting with Bitcoin via the Maestro RPC API.\n- **[Magg: The MCP Aggregator](https://github.com/sitbon/magg)** - A meta-MCP server that acts as a universal hub, allowing LLMs to autonomously discover, install, and orchestrate multiple MCP servers - essentially giving AI assistants the power to extend their own capabilities on-demand. Includes `mbro`, a powerful CLI MCP server browser with scripting capability.\n- **[Mailchimp MCP](https://github.com/AgentX-ai/mailchimp-mcp)** - Allows AI agents to interact with the Mailchimp API (read-only)\n- **[MalwareBazaar_MCP](https://github.com/mytechnotalent/MalwareBazaar_MCP)** (by Kevin Thomas) - An AI-driven MCP server that autonomously interfaces with MalwareBazaar, delivering real-time threat intel and sample metadata for authorized cybersecurity research workflows.\n- **[Mandoline](https://github.com/mandoline-ai/mandoline-mcp-server)** - Enable AI assistants to reflect on, critique, and continuously improve their own performance using Mandoline's evaluation framework.\n- **[Matrix](https://github.com/mjknowles/matrix-mcp-server)** - Interact with a Matrix homeserver.\n- **[man-mcp-server](https://github.com/guyru/man-mcp-server)** - MCP to search and access man pages on the local machine.\n- **[MariaDB](https://github.com/abel9851/mcp-server-mariadb)** - MariaDB database integration with configurable access controls in Python.\n- **[Markdown2doc](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/pandoc)** - Convert between various file formats using Pandoc\n- **[Markdownify](https://github.com/zcaceres/mcp-markdownify-server)** - MCP to convert almost anything to Markdown (PPTX, HTML, PDF, Youtube Transcripts and more)\n- **[market-fiyati](https://github.com/mtcnbzks/market-fiyati-mcp-server)** - The MCP server for marketfiyati.org.tr, offering grocery price search and comparison across Turkish markets.)\n- **[Markitdown](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/markitdown)** - Convert files to Markdown\n- **[Masquerade](https://github.com/postralai/masquerade)** - Redact sensitive information from your PDF documents before sending them to Claude. Masquerade serves as a privacy firewall for LLMs.\n- **[MasterGo](https://github.com/mastergo-design/mastergo-magic-mcp)** - The server designed to connect MasterGo design tools with AI models. It enables AI models to directly retrieve DSL data from MasterGo design files.\n- **[Matlab-MCP-Tools](https://github.com/neuromechanist/matlab-mcp-tools)** - An MCP to write and execute MATLAB scripts, maintain workspace context between MCP calls, visualize plots, and perform section-by-section analysis of MATLAB code with full access to MATLAB's computational capabilities.\n- **[Maton](https://github.com/maton-ai/agent-toolkit/tree/main/modelcontextprotocol)** - Connect to your SaaS tools like HubSpot, Salesforce, and more.\n- **[Maven Tools MCP](https://github.com/arvindand/maven-tools-mcp)** - Maven Central dependency intelligence for JVM build tools. Supports all build tools (Maven, Gradle, SBT, Mill) with Context7 integration for documentation support.\n- **[MCP-Airflow-API](https://github.com/call518/MCP-Airflow-API)** - Model Context Protocol (MCP) server for Apache Airflow API integration. Provides comprehensive tools for managing Airflow clusters including service operations, configuration management, status monitoring, and request tracking.\n- **[mcpcap](https://github.com/mcpcap/mcpcap)** - A modular Python MCP (Model Context Protocol) Server for analyzing PCAP files.\n- **[MCP Compass](https://github.com/liuyoshio/mcp-compass)** - Suggest the right MCP server for your needs\n- **[MCP Create](https://github.com/tesla0225/mcp-create)** - A dynamic MCP server management service that creates, runs, and manages Model Context Protocol servers on-the-fly.\n- **[MCP Documentation Server](https://github.com/andrea9293/mcp-documentation-server)** - Server that provides local-first document management and semantic search via embeddings or Gemini AI (recommended). Optimized for performance with disk persistence, an in-memory index, and caching.\n- **[MCP Installer](https://github.com/anaisbetts/mcp-installer)** - This server is a server that installs other MCP servers for you.\n- **[MCP ProjectManage OpenProject](https://github.com/boma086/mcp-projectmanage-openproject)** - This server provides the MCP service for project weekly reports, with project management information supplied by OpenProject.\n- **[MCP Proxy Server](https://github.com/TBXark/mcp-proxy)** - An MCP proxy server that aggregates and serves multiple MCP resource servers through a single HTTP server.\n- **[MCP Server Creator](https://github.com/GongRzhe/MCP-Server-Creator)** - A powerful Model Context Protocol (MCP) server that creates other MCP servers! This meta-server provides tools for dynamically generating FastMCP server configurations and Python code.\n- **[MCP Server Generator](https://github.com/SerhatUzbas/mcp-server-generator)** - An MCP server that creates and manages  MCP servers! Helps both non-technical users and developers build custom JavaScript MCP servers with AI guidance, automatic dependency management, and Claude Desktop integration.\n- **[MCP STDIO to Streamable HTTP Adapter](https://github.com/pyroprompts/mcp-stdio-to-streamable-http-adapter)** - Connect to Streamable HTTP MCP Servers even if the MCP Client only supports STDIO.\n- **[MCP-Ambari-API](https://github.com/call518/MCP-Ambari-API)** - Model Context Protocol (MCP) server for Apache Ambari API integration. This project provides tools for managing Hadoop clusters, including service operations, configuration management, status monitoring, and request tracking.\n- **[MCP-OpenStack-Ops](https://github.com/call518/MCP-OpenStack-Ops)** - Professional OpenStack operations automation via MCP server. Specialized tools for cluster monitoring, instance management, volume control & network analysis. FastMCP + OpenStack SDK + Bearer auth. Claude Desktop ready. Perfect for DevOps & cloud automation.\n- **[MCP-PostgreSQL-Ops](https://github.com/call518/MCP-PostgreSQL-Ops)** - Model Context Protocol (MCP) server for Apache Ambari API integration. This project provides tools for managing Hadoop clusters, including service operations, configuration management, status monitoring, and request tracking.\n- **[mcp-containerd](https://github.com/jokemanfire/mcp-containerd)** - The containerd MCP implemented by Rust supports the operation of the CRI interface.\n- **[MCP-Database-Server](https://github.com/executeautomation/mcp-database-server)** - Fastest way to interact with your Database such as SQL Server, SQLite and PostgreSQL\n- **[mcp-grep](https://github.com/erniebrodeur/mcp-grep)** - Python-based MCP server that brings grep functionality to LLMs. Supports common grep features including pattern searching, case-insensitive matching, context lines, and recursive directory searches.\n- **[mcp-k8s-go](https://github.com/strowk/mcp-k8s-go)** - Golang-based Kubernetes server for MCP to browse pods and their logs, events, namespaces and more. Built to be extensible.\n- **[mcp-local-rag](https://github.com/nkapila6/mcp-local-rag)** - \"primitive\" RAG-like web search model context protocol (MCP) server that runs locally using Google's MediaPipe Text Embedder and DuckDuckGo Search.\n- **[mcp-mcp](https://github.com/wojtyniak/mcp-mcp)** - Meta-MCP Server that acts as a tool discovery service for MCP clients.\n- **[mcp-meme-sticky](https://github.com/nkapila6/mcp-meme-sticky)** - Make memes or stickers using MCP server for WhatsApp or Telegram.\n- **[mcp-memory-service](https://github.com/doobidoo/mcp-memory-service)** - Universal MCP memory service providing semantic memory search, persistent storage, and autonomous memory consolidation for AI assistants across 13+ AI applications.\n- **[MCP-NixOS](https://github.com/utensils/mcp-nixos)** - A Model Context Protocol server that provides AI assistants with accurate, real-time information about NixOS packages, system options, Home Manager settings, and nix-darwin macOS configurations.\n- **[mcp-open-library](https://github.com/8enSmith/mcp-open-library)** - A Model Context Protocol (MCP) server for the Open Library API that enables AI assistants to search for book and author information.\n- **[mcp-proxy](https://github.com/sparfenyuk/mcp-proxy)** - Connect to MCP servers that run on SSE transport, or expose stdio servers as an SSE server.\n- **[mcp-read-website-fast](https://github.com/just-every/mcp-read-website-fast)** - Fast, token-efficient web content extraction that converts websites to clean Markdown. Features Mozilla Readability, smart caching, polite crawling with robots.txt support, and concurrent fetching with minimal dependencies.\n- **[mcp-salesforce](https://github.com/lciesielski/mcp-salesforce-example)** - MCP server with basic demonstration of interactions with your Salesforce instance\n- **[mcp-sanctions](https://github.com/madupay/mcp-sanctions)** - Screen individuals and organizations against global sanctions lists (OFAC, SDN, UN, etc). Query by prompt or document upload.\n- **[mcp-screenshot-website-fast](https://github.com/just-every/mcp-screenshot-website-fast)** - High-quality screenshot capture optimized for Claude Vision API. Automatically tiles full pages into 1072x1072 chunks (1.15 megapixels) with configurable viewports and wait strategies for dynamic content.\n- **[mcp-server-leetcode](https://github.com/doggybee/mcp-server-leetcode)** - Practice and retrieve problems from LeetCode. Automate problem retrieval, solutions, and insights for coding practice and competitions.\n- **[Mcp-Swagger-Server](https://github.com/zaizaizhao/mcp-swagger-server)** (by zaizaizhao) - This MCP server transforms OpenAPI specifications into MCP tools, enabling AI assistants to interact with REST APIs through standardized protocol\n- **[MCP Dynamic Tool Groups](https://github.com/ECF/MCPToolGroups)** - Example MCP servers that use [annotated](https://github.com/spring-ai-community/mcp-annotations) Java interfaces/classes as 'tool groups'.  Using standard MCP annotations, service implementations can then, at runtime, be used to generate tool specifications, and then dynamically added or removed from MCP servers.   The functionality is demonstrated in a sample tool group, but can be similarly used for any API or service.\n- **[mcp-vision](https://github.com/groundlight/mcp-vision)** - An MCP server exposing HuggingFace computer vision models such as zero-shot object detection as tools, enhancing the vision capabilities of large language or vision-language models.\n- **[mcp-weather](https://github.com/TimLukaHorstmann/mcp-weather)** - Accurate weather forecasts via the AccuWeather API (free tier available).\n- **[KnowAir Weather MCP](https://github.com/shuowang-ai/Weather-MCP)** - A comprehensive Model Context Protocol (MCP) server providing real-time weather data, air quality monitoring, forecasts, and astronomical information powered by Caiyun Weather API.\n- **[mcp-youtube-extract](https://github.com/sinjab/mcp_youtube_extract)** - A Model Context Protocol server for YouTube operations, extracting video information and transcripts with intelligent fallback logic. Features comprehensive logging, error handling, and support for both auto-generated and manual transcripts.\n- **[mcp_weather](https://github.com/isdaniel/mcp_weather_server)** - Get weather information from https://api.open-meteo.com API.\n- **[MCPfinder](https://github.com/mcpfinder/server)** - The AI Agent's \"App Store\": Discover, install, and monetize AI capabilities ‚Äî all within the MCP ecosystem.\n- **[MCPIgnore Filesytem](https://github.com/CyberhavenInc/filesystem-mcpignore)** - A Data Security First filesystem MCP server that implements .mcpignore to prevent MCP clients from accessing sensitive data.\n- **[MCPJungle](https://github.com/mcpjungle/MCPJungle)** - Self-hosted MCP Registry and Gateway for enterprise AI Agents\n- **[Md2doc](https://github.com/Yorick-Ryu/md2doc-mcp)** - Convert Markdown text to DOCX format using an external conversion service\n- **[MeasureSpace MCP](https://github.com/MeasureSpace/measure-space-mcp-server)** - A free [Model Context Protocol (MCP) Server](https://smithery.ai/server/@MeasureSpace/measure-space-mcp-server) that provides global weather, climate, air quality forecast and geocoding services by [measurespace.io](https://measurespace.io).\n- **[MediaWiki](https://github.com/ProfessionalWiki/MediaWiki-MCP-Server)** - A Model Context Protocol (MCP) Server that interacts with any MediaWiki wiki\n- **[MediaWiki MCP adapter](https://github.com/lucamauri/MediaWiki-MCP-adapter)** - A custom Model Context Protocol adapter for MediaWiki and WikiBase APIs\n- **[medRxiv](https://github.com/JackKuo666/medRxiv-MCP-Server)** - Enable AI assistants to search and access medRxiv papers through a simple MCP interface.\n- **[mem0-mcp](https://github.com/mem0ai/mem0-mcp)** - A Model Context Protocol server for Mem0, which helps with managing coding preferences.\n- **[Membase](https://github.com/unibaseio/membase-mcp)** - Save and query your agent memory in distributed way by Membase.\n- **[Meme MCP](https://github.com/lidorshimoni/meme-mcp)** - Generate memes via AI using the Imgflip API through the Model Context Protocol.\n- **[memento-mcp](https://github.com/gannonh/memento-mcp)** - Knowledge graph memory system built on Neo4j with semantic search, temporal awareness.\n- **[Meta Ads Remote MCP](https://github.com/pipeboard-co/meta-ads-mcp)** - Remote MCP server to interact with Meta Ads API - access, analyze, and manage Facebook, Instagram, and other Meta platforms advertising campaigns.\n- **[MetaTrader MCP](https://github.com/ariadng/metatrader-mcp-server)** - Enable AI LLMs to execute trades using MetaTrader 5 platform.\n- **[Metricool MCP](https://github.com/metricool/mcp-metricool)** - A Model Context Protocol server that integrates with Metricool's social media analytics platform to retrieve performance metrics and schedule content across networks like Instagram, Facebook, Twitter, LinkedIn, TikTok and YouTube.\n- **[Microsoft 365](https://github.com/merill/lokka)** - (by Merill) A Model Context Protocol (MCP) server for Microsoft 365. Includes support for all services including Teams, SharePoint, Exchange, OneDrive, Entra, Intune and more. See [Lokka](https://lokka.dev/) for more details.\n- **[Microsoft 365](https://github.com/softeria/ms-365-mcp-server)** - MCP server that connects to Microsoft Office and the whole Microsoft 365 suite using Graph API (including Outlook/mail, files, Excel, calendar)\n- **[Microsoft 365](https://github.com/pnp/cli-microsoft365-mcp-server)** - Single MCP server that allows to manage many different areas of Microsoft 365, for example: Entra ID, OneDrive, OneNote, Outlook, Planner, Power Apps, Power Automate, Power Platform, SharePoint Embedded, SharePoint Online, Teams, Viva Engage, and many more.\n- **[Microsoft 365 Files (SharePoint/OneDrive)](https://github.com/godwin3737/mcp-server-microsoft365-filesearch)** (by godwin3737) - MCP server with tools to search and get file content from Microsoft 365 including Onedrive and SharePoint. Works with Documents (pdf/docx), Presentations, Spreadsheets and Images.\n- **[Microsoft Teams](https://github.com/InditexTech/mcp-teams-server)** - MCP server that integrates Microsoft Teams messaging (read, post, mention, list members and threads)\n- **[Mifos X](https://github.com/openMF/mcp-mifosx)** - An MCP server for the Mifos X Open Source Banking useful for managing clients, loans, savings, shares, financial transactions and generating financial reports.\n- **[Mikrotik](https://github.com/jeff-nasseri/mikrotik-mcp)** - Mikrotik MCP server which cover networking operations (IP, DHCP, Firewall, etc)\n- **[Mindmap](https://github.com/YuChenSSR/mindmap-mcp-server)** (by YuChenSSR) - A server that generates mindmaps from input containing markdown code.\n- **[Minima](https://github.com/dmayboroda/minima)** - MCP server for RAG on local files\n- **[Modao Proto MCP](https://github.com/modao-dev/modao-proto-mcp)** - AI-powered HTML prototype generation server that converts natural language descriptions into complete HTML code with modern design and responsive layouts. Supports design description expansion and seamless integration with Modao workspace.\n- **[Mobile MCP](https://github.com/mobile-next/mobile-mcp)** (by Mobile Next) - MCP server for Mobile(iOS/Android) automation, app scraping and development using physical devices or simulators/emulators.\n- **[Monday.com (unofficial)](https://github.com/sakce/mcp-server-monday)** - MCP Server to interact with Monday.com boards and items.\n- **[MongoDB](https://github.com/kiliczsh/mcp-mongo-server)** - A Model Context Protocol Server for MongoDB.\n- **[MongoDB & Mongoose](https://github.com/nabid-pf/mongo-mongoose-mcp)** - MongoDB MCP Server with Mongoose Schema and Validation.\n- **[MongoDB Lens](https://github.com/furey/mongodb-lens)** - Full Featured MCP Server for MongoDB Databases.\n- **[Monzo](https://github.com/BfdCampos/monzo-mcp-bfdcampos)** - Access and manage your Monzo bank accounts through natural language, including balance checking, pot management, transaction listing, and transaction annotation across multiple account types (personal, joint, flex).\n- **[Morningstar](https://github.com/Morningstar/morningstar-mcp-server)** - MCP Server to interact with Morningstar Research, Editorial and Datapoints\n- **[MSSQL](https://github.com/aekanun2020/mcp-server/)** - MSSQL database integration with configurable access controls and schema inspection\n- **[MSSQL](https://github.com/JexinSam/mssql_mcp_server)** (by jexin) - MCP Server for MSSQL database in Python\n- **[MSSQL-MCP](https://github.com/daobataotie/mssql-mcp)** (by daobataotie) - MSSQL MCP that refer to the official website's SQLite MCP for modifications to adapt to MSSQL\n- **[MSSQL-MCP-Node](https://github.com/mihai-dulgheru/mssql-mcp-node)** (by mihai - dulgheru) ‚Äì Node.js MCP server for Microsoft SQL Server featuring auto-detected single / multi-database configs, execute-SQL and schema tools, robust Zod validation, and optional Express endpoints for local testing\n- **[MSSQL-Python](https://github.com/amornpan/py-mcp-mssql)** (by amornpan) - A read-only Python implementation for MSSQL database access with enhanced security features, configurable access controls, and schema inspection capabilities. Focuses on safe database interaction through Python ecosystem.\n- **[Multi-Model Advisor](https://github.com/YuChenSSR/multi-ai-advisor-mcp)** - A Model Context Protocol (MCP) server that orchestrates queries across multiple Ollama models, synthesizing their insights to deliver a comprehensive and multifaceted AI perspective on any given query.\n- **[Multicluster-MCP-Sever](https://github.com/yanmxa/multicluster-mcp-server)** - The gateway for GenAI systems to interact with multiple Kubernetes clusters.\n- **[MySQL](https://github.com/benborla/mcp-server-mysql)** (by benborla) - MySQL database integration in NodeJS with configurable access controls and schema inspection\n- **[MySQL](https://github.com/designcomputer/mysql_mcp_server)** (by DesignComputer) - MySQL database integration in Python with configurable access controls and schema inspection\n- **[MySQL-Server](https://github.com/tonycai/mcp-mysql-server)** (by TonyCai) - MySQL Database Integration using Python script with configurable access controls and schema inspection, usng stdio mode to suitable local deployment, you can run it in docker container.\n- **[n8n](https://github.com/leonardsellem/n8n-mcp-server)** - This MCP server provides tools and resources for AI assistants to manage n8n workflows and executions, including listing, creating, updating, and deleting workflows, as well as monitoring their execution status.\n- **[Nacos MCP Router](https://github.com/nacos-group/nacos-mcp-router)** - This MCP(Model Context Protocol) Server provides tools to search, install, proxy other MCP servers.\n- **[NASA](https://github.com/ProgramComputer/NASA-MCP-server)** (by ProgramComputer) - Access to a unified gateway of NASA's data sources including but not limited to APOD, NEO, EPIC, GIBS.\n- **[NASA Image MCP Server](https://github.com/adithya1012/NASA-MCP-Server/blob/main/README.md)** - MCP server providing access to NASA's visual data APIs including Mars Rover photos, Earth satellite imagery (EPIC/GIBS), and Astronomy picture of the day. Features built-in image analysis tools with automatic format detection, compression, and base64 conversion for LLM integration.\n- **[Nasdaq Data Link](https://github.com/stefanoamorelli/nasdaq-data-link-mcp)** (by stefanoamorelli) - An MCP server to access, explore, and interact with Nasdaq Data Link's extensive and valuable financial and economic datasets.\n- **[National Parks](https://github.com/KyrieTangSheng/mcp-server-nationalparks)** - The server provides latest information of park details, alerts, visitor centers, campgrounds, hiking trails, and events for U.S. National Parks.\n- **[NAVER](https://github.com/pfldy2850/py-mcp-naver)** (by pfldy2850) - This MCP server provides tools to interact with various Naver services, such as searching blogs, news, books, and more.\n- **[Naver](https://github.com/isnow890/naver-search-mcp)** (by isnow890) - MCP server for Naver Search API integration, supporting blog, news, shopping search and DataLab analytics features.\n- **[NBA](https://github.com/Taidgh-Robinson/nba-mcp-server)** - This MCP server provides tools to fetch recent and historical NBA games including basic and advanced statistics.\n- **[NCI GDC](https://github.com/QuentinCody/nci-gdc-mcp-server)** - Unofficial MCP server for the National Cancer Institute's Genomic Data Commons (GDC), providing access to harmonized cancer genomic and clinical data for oncology research.\n- **[Neo4j](https://github.com/da-okazaki/mcp-neo4j-server)** - A community built server that interacts with Neo4j Graph Database.\n- **[Neovim](https://github.com/bigcodegen/mcp-neovim-server)** - An MCP Server for your Neovim session.\n- **[Netbird](https://github.com/aantti/mcp-netbird)** - List and analyze Netbird network peers, groups, policies, and more.\n- **[NetMind ParsePro](https://github.com/protagolabs/Netmind-Parse-PDF-MCP)** - The PDF Parser AI service, built and customized by the [NetMind](https://www.netmind.ai/) team.\n- **[Nikto MCP](https://github.com/weldpua2008/nikto-mcp)** (by weldpua2008) - A secure MCP server that enables AI agents to interact with Nikto web server scanner](- use with npx or docker).\n- **[NocoDB](https://github.com/edwinbernadus/nocodb-mcp-server)** - Read and write access to NocoDB database.\n- **[Node Code Sandbox](https://github.com/alfonsograziano/node-code-sandbox-mcp)** ‚Äì A Node.js MCP server that spins up isolated Docker - based sandboxes for executing JavaScript snippets with on-the-fly npm dependency installation\n- **[nomad-mcp](https://github.com/kocierik/mcp-nomad)** - A server that provides a set of tools for managing Nomad clusters through the MCP.\n- **[Notion](https://github.com/suekou/mcp-notion-server)** (by suekou) - Interact with Notion API.\n- **[Notion](https://github.com/v-3/notion-server)** (by v-3) - Notion MCP integration. Search, Read, Update, and Create pages through Claude chat.\n- **[NPM Plus](https://github.com/shacharsol/js-package-manager-mcp)** - AI-powered JavaScript package management with security scanning, bundle analysis, and intelligent dependency management for MCP-compatible editors.\n- **[NS Travel Information](https://github.com/r-huijts/ns-mcp-server)** - Access Dutch Railways (NS) real-time train travel information and disruptions through the official NS API.\n- **[ntfy-mcp](https://github.com/teddyzxcv/ntfy-mcp)** (by teddyzxcv) - The MCP server that keeps you informed by sending the notification on phone using ntfy\n- **[ntfy-me-mcp](https://github.com/gitmotion/ntfy-me-mcp)** (by gitmotion) - An ntfy MCP server for sending/fetching ntfy notifications to your self-hosted ntfy server from AI Agents üì§ (supports secure token auth & more - use with npx or docker!)\n- **[oatpp-mcp](https://github.com/oatpp/oatpp-mcp)** - C++ MCP integration for Oat++. Use [Oat++](https://oatpp.io) to build MCP servers.\n- **[Obsidian Markdown Notes](https://github.com/calclavia/mcp-obsidian)** - Read and search through your Obsidian vault or any directory containing Markdown notes\n- **[obsidian-mcp](https://github.com/StevenStavrakis/obsidian-mcp)** - (by Steven Stavrakis) An MCP server for Obsidian.md with tools for searching, reading, writing, and organizing notes.\n- **[OceanBase](https://github.com/yuanoOo/oceanbase_mcp_server)** - (by yuanoOo) A Model Context Protocol (MCP) server that enables secure interaction with OceanBase databases.\n- **[Octocode](https://github.com/bgauryy/octocode-mcp)** - (by Guy Bary) AI-powered developer assistant that enables advanced code research, analysis and discovery across GitHub and NPM realms in realtime\n- **[Odoo](https://github.com/ivnvxd/mcp-server-odoo)** - Connect AI assistants to Odoo ERP systems for business data access and workflow automation.\n- **[Office-PowerPoint-MCP-Server](https://github.com/GongRzhe/Office-PowerPoint-MCP-Server)** - A Model Context Protocol (MCP) server for creating, reading, and manipulating Microsoft PowerPoint documents.\n- **[Office-Visio-MCP-Server](https://github.com/GongRzhe/Office-Visio-MCP-Server)** - A Model Context Protocol (MCP) server for creating, reading, and manipulating Microsoft Visio documents.\n- **[Office-Word-MCP-Server](https://github.com/GongRzhe/Office-Word-MCP-Server)** - A Model Context Protocol (MCP) server for creating, reading, and manipulating Microsoft Word documents.\n- **[Okta](https://github.com/kapilduraphe/okta-mcp-server)** - Interact with Okta API.\n- **[OKX-MCP-Server](https://github.com/memetus/okx-mcp-playground)** - An MCP server provides various blockchain data and market price data via the OKX API. The server enables Claude to perform operations like retrieve assets prices, transaction data, account history data and trade instruction data.\n- **[OneNote](https://github.com/rajvirtual/MCP-Servers/tree/master/onenote)** - (by Rajesh Vijay) An MCP server that connects to Microsoft OneNote using the Microsoft Graph API. Reading notebooks, sections, and pages from OneNote,Creating new notebooks, sections, and pages in OneNote.\n- **[Onyx MCP Sandbox](https://github.com/avd1729/Onyx)** ‚Äì (by Aravind) A secure MCP server that executes code in isolated Docker sandboxes. Supports Python, Java, C, C++, JavaScript, and Rust. Provides the `run_code` tool, enforces CPU/memory limits, includes comprehensive tests, and detailed setup instructions.\n- **[Open Strategy Partners Marketing Tools](https://github.com/open-strategy-partners/osp_marketing_tools)** - Content editing codes, value map, and positioning tools for product marketing.\n- **[OpenAI WebSearch MCP](https://github.com/ConechoAI/openai-websearch-mcp)** - This is a Python-based MCP server that provides OpenAI `web_search` built-in tool.\n- **[OpenAlex.org MCP](https://github.com/drAbreu/alex-mcp)** - Professional MCP server providing ML-powered author disambiguation and comprehensive researcher profiles using the OpenAlex database.\n- **[OpenAPI](https://github.com/snaggle-ai/openapi-mcp-server)** - Interact with [OpenAPI](https://www.openapis.org/) APIs.\n- **[OpenAPI AnyApi](https://github.com/baryhuang/mcp-server-any-openapi)** - Interact with large [OpenAPI](https://www.openapis.org/) docs using built-in semantic search for endpoints. Allows for customizing the MCP server prefix.\n- **[OpenAPI Schema](https://github.com/hannesj/mcp-openapi-schema)** - Allow LLMs to explore large [OpenAPI](https://www.openapis.org/) schemas without bloating the context.\n- **[OpenAPI Schema Explorer](https://github.com/kadykov/mcp-openapi-schema-explorer)** - Token-efficient access to local or remote OpenAPI/Swagger specs via MCP Resources.\n- **[OpenCTI](https://github.com/Spathodea-Network/opencti-mcp)** - Interact with OpenCTI platform to retrieve threat intelligence data including reports, indicators, malware and threat actors.\n- **[OpenCV](https://github.com/GongRzhe/opencv-mcp-server)** - An MCP server providing OpenCV computer vision capabilities. This allows AI assistants and language models to access powerful computer vision tools.\n- **[OpenDota](https://github.com/asusevski/opendota-mcp-server)** - Interact with OpenDota API to retrieve Dota 2 match data, player statistics, and more.\n- **[OpenLink Generic Java Database Connectivity](https://github.com/OpenLinkSoftware/mcp-jdbc-server)** - Generic Database Management System (DBMS) access via Open Database Connectivity (ODBC) Connectors (Drivers)\n- **[OpenLink Generic Open Database Connectivity](https://github.com/OpenLinkSoftware/mcp-odbc-server)** - Generic Database Management System (DBMS) access via Open Database Connectivity (ODBC) Connectors (Drivers)\n- **[OpenLink Generic Python Open Database Connectivity](https://github.com/OpenLinkSoftware/mcp-pyodbc-server)** - Generic Database Management System (DBMS) access via Open Database Connectivity (ODBC) Connectors (Drivers) for PyODBC\n- **[OpenLink Generic SQLAlchemy Object-Relational Database Connectivity for PyODBC](https://github.com/OpenLinkSoftware/mcp-sqlalchemy-server)** - Generic Database Management System (DBMS) access via SQLAlchemy (PyODBC) Connectors (Drivers)\n- **[OpenMetadata](https://github.com/yangkyeongmo/mcp-server-openmetadata)** - MCP Server for OpenMetadata, an open-source metadata management platform.\n- **[OpenNeuro](https://github.com/QuentinCody/open-neuro-mcp-server)** - Unofficial MCP server for OpenNeuro, providing access to open neuroimaging datasets, study metadata, and brain imaging data for neuroscience research and analysis.\n- **[OpenReview](https://github.com/anyakors/openreview-mcp-server)** - An MCP server for [OpenReview](https://openreview.net/) to fetch, read and save manuscripts from AI/ML conferences.\n- **[OpenRPC](https://github.com/shanejonas/openrpc-mpc-server)** - Interact with and discover JSON-RPC APIs via [OpenRPC](https://open-rpc.org).\n- **[OpenStack](https://github.com/wangsqly0407/openstack-mcp-server)** - MCP server implementation that provides OpenStack interaction.\n- **[Open Targets](https://github.com/QuentinCody/open-targets-mcp-server)** - Unofficial MCP server for the Open Targets Platform, providing access to target-disease associations, drug discovery data, and therapeutic hypothesis generation for biomedical research.\n- **[OpenWeather](https://github.com/mschneider82/mcp-openweather)** - Interact with the free openweathermap API to get the current and forecast weather for a location.\n- **[OpenZIM MCP](https://github.com/cameronrye/openzim-mcp)** - Modern, secure, and high-performance MCP server that enables AI models to access and search ZIM format knowledge bases offline, including Wikipedia and educational content archives.\n- **[Operative WebEvalAgent](https://github.com/Operative-Sh/web-eval-agent)** (by [Operative.sh](https://www.operative.sh)) - An MCP server to test, debug, and fix web applications autonomously.\n- **[OPNSense MCP](https://github.com/vespo92/OPNSenseMCP)** - MCP Server for OPNSense Firewall Management and API access\n- **[OpenAI GPT Image](https://github.com/SureScaleAI/openai-gpt-image-mcp)** - OpenAI GPT image generation/editing MCP server.\n- **[Optimade MCP](https://github.com/dianfengxiaobo/optimade-mcp-server)** - An MCP server conducts real-time material science data queries with the Optimade database (for example, elemental composition, crystal structure).\n- **[Oracle](https://github.com/marcelo-ochoa/servers)** (by marcelo-ochoa) - Oracle Database integration in NodeJS with configurable access controls, query explain, stats and schema inspection\n- **[Oracle Cloud Infrastructure (OCI)](https://github.com/karthiksuku/oci-mcp)** (by karthiksukumar) - Python MCP server for OCI infrastructure (Compute, Autonomous Database, Object Storage). Read-heavy by default with safe instance actions (start/stop/reset). Includes Claude Desktop config and `.env` compartment scoping.\n- **[Oura MCP server](https://github.com/tomekkorbak/oura-mcp-server)** - MCP server for Oura API to retrieve one's sleep data\n- **[Oura Ring](https://github.com/rajvirtual/oura-mcp-server)** (by Rajesh Vijay) - MCP Server to access and analyze your Oura Ring data. It provides a structured way to fetch and understand your health metrics.\n- **[Outline](https://github.com/Vortiago/mcp-outline)** - MCP Server to interact with [Outline](https://www.getoutline.com) knowledge base to search, read, create, and manage documents and their content, access collections, add comments, and manage document backlinks.\n- **[Outlook Mail + Calendar + OneDrive](https://github.com/Norcim133/OutlookMCPServer) - Virtual assistant with Outlook Mail, Calendar, and early OneDrive support (requires Azure admin).\n- **[Pacman](https://github.com/oborchers/mcp-server-pacman)** - An MCP server that provides package index querying capabilities. This server is able to search and retrieve information from package repositories like PyPI, npm, crates.io, Docker Hub, and Terraform Registry.\n- **[pancakeswap-poolspy-mcp](https://github.com/kukapay/pancakeswap-poolspy-mcp)** - An MCP server that tracks newly created liquidity pools on Pancake Swap.\n- **[Pandoc](https://github.com/vivekVells/mcp-pandoc)** - MCP server for seamless document format conversion using Pandoc, supporting Markdown, HTML, PDF, DOCX (.docx), csv and more.\n- **[Paradex MCP](https://github.com/sv/mcp-paradex-py)** - MCP native server for interacting with Paradex platform, including fully features trading.\n- **[Parliament MCP]([https://github.com/sv/mcp-paradex-py](https://github.com/i-dot-ai/parliament-mcp))** - MCP server for querying UK parliamentary data.\n- **[PDF reader MCP](https://github.com/gpetraroli/mcp_pdf_reader)** - MCP server to read and search text in a local PDF file.\n- **[PDF Tools MCP](https://github.com/Sohaib-2/pdf-mcp-server)** - Comprehensive PDF manipulation toolkit (merge, split, encrypt, optimize and much more)\n- **[PDMT](https://github.com/paiml/pdmt)** - Pragmatic Deterministic MCP Templating - High-performance deterministic templating library with comprehensive todo validation, quality enforcement, and 0.0 temperature generation for reproducible outputs.\n- **[Peacock for VS Code](https://github.com/johnpapa/peacock-mcp)** - MCP Server for the Peacock extension for VS Code, coloring your world, one Code editor at a time. The main goal of the project is to show how an MCP server can be used to interact with APIs.\n- **[persistproc](https://github.com/irskep/persistproc)** - MCP server + command line tool that allows agents to see & control long-running processes like web servers.\n- **[Pexels](https://github.com/garylab/pexels-mcp-server)** - A MCP server providing access to Pexels Free Image API, enabling seamless search, retrieval, and download of high-quality royalty-free images.\n- **[Pharos](https://github.com/QuentinCody/pharos-mcp-server)** - Unofficial MCP server for the Pharos database by the National Center for Advancing Translational Sciences (NCATS), providing access to target, drug, and disease information for drug discovery research.\n- **[Phone MCP](https://github.com/hao-cyber/phone-mcp)** - üì± A powerful plugin that lets you control your Android phone. Enables AI agents to perform complex tasks like automatically playing music based on weather or making calls and sending texts.\n- **[PIF](https://github.com/hungryrobot1/MCP-PIF)** - A Personal Intelligence Framework (PIF), providing tools for file operations, structured reasoning, and journal-based documentation to support continuity and evolving human-AI collaboration across sessions.\n- **[Pinecone](https://github.com/sirmews/mcp-pinecone)** - MCP server for searching and uploading records to Pinecone. Allows for simple RAG features, leveraging Pinecone's Inference API.\n- **[Pinner MCP](https://github.com/safedep/pinner-mcp)** - An MCP server for pinning GitHub Actions and container base images to their immutable SHA hashes to prevent supply chain attacks.\n- **[Pixelle MCP](https://github.com/AIDC-AI/Pixelle-MCP)** - An omnimodal AIGC framework that seamlessly converts ComfyUI workflows into MCP tools with zero code, enabling full-modal support for Text, Image, Sound, and Video generation with Chainlit-based web interface.\n- **[Placid.app](https://github.com/felores/placid-mcp-server)** - Generate image and video creatives using Placid.app templates\n- **[Plane](https://github.com/kelvin6365/plane-mcp-server)** - This MCP Server will help you to manage projects and issues through Plane's API\n- **[Playwright](https://github.com/executeautomation/mcp-playwright)** - This MCP Server will help you run browser automation and webscraping using Playwright\n- **[Podbean](https://github.com/amurshak/podbeanMCP)** - MCP server for managing your podcasts, episodes, and analytics through the Podbean API. Allows for updating, adding, deleting podcasts, querying show description, notes, analytics, and more.\n- **[Polarsteps](https://github.com/remuzel/polarsteps-mcp)** - An MCP server to help you review your previous Trips and plan new ones!\n- **[PostgreSQL](https://github.com/ahmedmustahid/postgres-mcp-server)** - A PostgreSQL MCP server offering dual HTTP/Stdio transports for database schema inspection and read-only query execution with session management and Podman(or Docker) support.\n- **[Postman](https://github.com/shannonlal/mcp-postman)** - MCP server for running Postman Collections locally via Newman. Allows for simple execution of Postman Server and returns the results of whether the collection passed all the tests.\n- **[Powerdrill](https://github.com/powerdrillai/powerdrill-mcp)** - Interact with Powerdrill datasets, authenticated with [Powerdrill](https://powerdrill.ai) User ID and Project API Key.\n- **[Prefect](https://github.com/allen-munsch/mcp-prefect)** - MCP Server for workflow orchestration and ELT/ETL with Prefect Server, and Prefect Cloud [https://www.prefect.io/] using the `prefect` python client.\n- **[Productboard](https://github.com/kenjihikmatullah/productboard-mcp)** - Integrate the Productboard API into agentic workflows via MCP.\n- **[Prometheus](https://github.com/pab1it0/prometheus-mcp-server)** - Query and analyze Prometheus - open-source monitoring system.\n- **[Prometheus (TypeScript)](https://github.com/yanmxa/prometheus-mcp-server)** - Enable AI assistants to query Prometheus using natural language with TypeScript implementation.\n- **[Prometheus (Golang)](https://github.com/tjhop/prometheus-mcp-server/)** - A Prometheus MCP server with full API support for comprehensive management and deep interaction with Prometheus beyond basic query support. Written in go, it is a single binary install that is capable of STDIO, SSE, and HTTP transports for complex deployments. \n- **[PubChem](https://github.com/sssjiang/pubchem_mcp_server)** - extract drug information from pubchem API.\n- **[PubMed](https://github.com/JackKuo666/PubMed-MCP-Server)** - Enable AI assistants to search, access, and analyze PubMed articles through a simple MCP interface.\n- **[Pulumi](https://github.com/dogukanakkaya/pulumi-mcp-server)** - MCP Server to Interact with Pulumi API, creates and lists Stacks\n- **[Puppeteer vision](https://github.com/djannot/puppeteer-vision-mcp)** - Use Puppeteer to browse a webpage and return a high quality Markdown. Use AI vision capabilities to handle cookies, captchas, and other interactive elements automatically.\n- **[Pushover](https://github.com/ashiknesin/pushover-mcp)** - Send instant notifications to your devices using [Pushover.net](https://pushover.net/)\n- **[py-mcp-qdrant-rag](https://github.com/amornpan/py-mcp-qdrant-rag)** (by amornpan) - A Model Context Protocol server implementation that provides RAG capabilities through Qdrant vector database integration, enabling AI agents to perform semantic search and document retrieval with local or cloud-based embedding generation support across Mac, Linux, and Windows platforms.\n- **[pydantic/pydantic-ai/mcp-run-python](https://github.com/pydantic/pydantic-ai/tree/main/mcp-run-python)** - Run Python code in a secure sandbox via MCP tool calls, powered by Deno and Pyodide\n- **[Python CLI MCP](https://github.com/ofek/pycli-mcp)** - Interact with local Python command line applications.\n- **[QGIS](https://github.com/jjsantos01/qgis_mcp)** - connects QGIS to Claude AI through the MCP. This integration enables prompt-assisted project creation, layer loading, code execution, and more.\n- **[Qiniu MCP Server](https://github.com/qiniu/qiniu-mcp-server)** - The Model Context Protocol (MCP) Server built on Qiniu Cloud products supports users in accessing Qiniu Cloud Storage, intelligent multimedia services, and more through this MCP Server within the context of AI large model clients.\n- **[QuantConnect](https://github.com/taylorwilsdon/quantconnect-mcp)** - QuantConnect Algorithmic Trading Platform Orchestration MCP - Agentic LLM Driven Trading Strategy Design, Research & Implementation.\n- **[Quarkus](https://github.com/quarkiverse/quarkus-mcp-servers)** - MCP servers for the Quarkus Java framework.\n- **[QuickChart](https://github.com/GongRzhe/Quickchart-MCP-Server)** - A Model Context Protocol server for generating charts using QuickChart.io\n- **[Qwen_Max](https://github.com/66julienmartin/MCP-server-Qwen_Max)** - A Model Context Protocol (MCP) server implementation for the Qwen models.\n- **[RabbitMQ](https://github.com/kenliao94/mcp-server-rabbitmq)** - The MCP server that interacts with RabbitMQ to publish and consume messages.\n- **[RAE](https://github.com/rae-api-com/rae-mcp)** - MPC Server to connect your preferred model with rae-api.com, Roya Academy of Spanish Dictionary\n- **[RAG Local](https://github.com/renl/mcp-rag-local)** - This MCP server for storing and retrieving text passages locally based on their semantic meaning.\n- **[RAG Web Browser](https://github.com/apify/mcp-server-rag-web-browser)** An MCP server for Apify's open-source RAG Web Browser [Actor](https://apify.com/apify/rag-web-browser) to perform web searches, scrape URLs, and return content in Markdown.\n- **[Raindrop.io](https://github.com/hiromitsusasaki/raindrop-io-mcp-server)** - An integration that allows LLMs to interact with Raindrop.io bookmarks using the Model Context Protocol (MCP).\n- **[Random Number](https://github.com/zazencodes/random-number-mcp)** - Provides LLMs with essential random generation abilities, built entirely on Python's standard library.\n- **[RCSB PDB](https://github.com/QuentinCody/rcsb-pdb-mcp-server)** - Unofficial MCP server for the Research Collaboratory for Structural Bioinformatics Protein Data Bank (RCSB PDB), providing access to 3D protein structures, experimental data, and structural bioinformatics information.\n- **[Reaper](https://github.com/dschuler36/reaper-mcp-server)** - Interact with your [Reaper](https://www.reaper.fm/) (Digital Audio Workstation) projects.\n- **[Redbee](https://github.com/Tamsi/redbee-mcp)** - Redbee MCP server that provides support for interacting with Redbee API.\n- **[Redfish](https://github.com/nokia/mcp-redfish)** - Redfish MCP server that provides support for interacting with [DMTF Redfish API](https://www.dmtf.org/standards/redfish).\n- **[Redis](https://github.com/GongRzhe/REDIS-MCP-Server)** - Redis database operations and caching microservice server with support for key-value operations, expiration management, and pattern-based key listing.\n- **[Redis](https://github.com/prajwalnayak7/mcp-server-redis)** MCP server to interact with Redis Server, AWS Memory DB, etc for caching or other use-cases where in-memory and key-value based storage is appropriate\n- **[RedNote MCP](https://github.com/ifuryst/rednote-mcp)** - MCP server for accessing RedNote(XiaoHongShu, xhs) content\n- **[Reed Jobs](https://github.com/kld3v/reed_jobs_mcp)** - Search and retrieve job listings from Reed.co.uk.\n- **[Rememberizer AI](https://github.com/skydeckai/mcp-server-rememberizer)** - An MCP server designed for interacting with the Rememberizer data source, facilitating enhanced knowledge retrieval.\n- **[Replicate](https://github.com/deepfates/mcp-replicate)** - Search, run and manage machine learning models on Replicate through a simple tool-based interface. Browse models, create predictions, track their status, and handle generated images.\n- **[Resend](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/resend)** - Send email using Resend services\n- **[Revit MCP](https://github.com/revit-mcp)** - A service implementing the MCP protocol for Autodesk Revit.\n- **[Rijksmuseum](https://github.com/r-huijts/rijksmuseum-mcp)** - Interface with the Rijksmuseum API to search artworks, retrieve artwork details, access image tiles, and explore user collections.\n- **[Riot Games](https://github.com/jifrozen0110/mcp-riot)** - MCP server for League of Legends ‚Äì fetch player info, ranks, champion stats, and match history via Riot API.\n- **[Rohlik](https://github.com/tomaspavlin/rohlik-mcp)** - Shop groceries across the Rohlik Group platforms (Rohlik.cz, Knuspr.de, Gurkerl.at, Kifli.hu, Sezamo.ro)\n- **[Rquest](https://github.com/xxxbrian/mcp-rquest)** - An MCP server providing realistic browser-like HTTP request capabilities with accurate TLS/JA3/JA4 fingerprints for bypassing anti-bot measures.\n- **[Rust MCP Filesystem](https://github.com/rust-mcp-stack/rust-mcp-filesystem)** - Fast, asynchronous MCP server for efficient handling of various filesystem operations built with the power of Rust.\n- **[SafetySearch](https://github.com/surabhya/SafetySearch)** - Real-time FDA food safety data: recalls, adverse events, analysis.\n- **[Salesforce MCP](https://github.com/smn2gnt/MCP-Salesforce)** - Interact with Salesforce Data and Metadata\n- **[Salesforce MCP (AiondaDotCom)](https://github.com/AiondaDotCom/mcp-salesforce)** - Universal Salesforce integration with OAuth authentication, smart learning system, comprehensive backup capabilities, and full CRUD operations for any Salesforce org including custom objects and fields.\n- **[Salesforce MCP Server](https://github.com/tsmztech/mcp-server-salesforce)** - Comprehensive Salesforce integration with tools for querying records, executing Apex, managing fields/objects, and handling debug logs\n- **[Scanova MCP Server](https://github.com/trycon/scanova-mcp)** - MCP server for creating and managing QR codes using the [Scanova](https://scanova.io) API. Provides tools for generating, managing, and downloading QR codes.\n- **[SchemaCrawler](https://github.com/schemacrawler/SchemaCrawler-MCP-Server-Usage)** - Connect to any relational database, and be able to get valid SQL, and ask questions like what does a certain column prefix mean.\n- **[SchemaFlow](https://github.com/CryptoRadi/schemaflow-mcp-server)** - Real-time PostgreSQL & Supabase database schema access for AI-IDEs via Model Context Protocol. Provides live database context through secure SSE connections with three powerful tools: get_schema, analyze_database, and check_schema_alignment. [SchemaFlow](https://schemaflow.dev)\n- **[Scholarly](https://github.com/adityak74/mcp-scholarly)** - An MCP server to search for scholarly and academic articles.\n- **[scrapling-fetch](https://github.com/cyberchitta/scrapling-fetch-mcp)** - Access text content from bot-protected websites. Fetches HTML/markdown from sites with anti-automation measures using Scrapling.\n- **[Screeny](https://github.com/rohanrav/screeny)** - Privacy-first macOS MCP server that provides visual context for AI agents through window screenshots\n- **[ScriptFlow](https://github.com/yanmxa/scriptflow-mcp)** - Transform complex, repetitive AI interactions into persistent, executable scripts with comprehensive script management (add, edit, remove, list, search, execute) and multi-language support (Bash, Python, Node.js, TypeScript).\n- **[SearXNG](https://github.com/ihor-sokoliuk/mcp-searxng)** - A Model Context Protocol Server for [SearXNG](https://docs.searxng.org)\n- **[SearXNG](https://github.com/erhwenkuo/mcp-searxng)** - An MCP server provide web searching via [SearXNG](https://docs.searxng.org) & retrieve url as makrdown.\n- **[SearXNG Public](https://github.com/pwilkin/mcp-searxng-public)** - A Model Context Protocol Server for retrieving data from public [SearXNG](https://docs.searxng.org) instances, with fallback support\n- **[SEC EDGAR](https://github.com/stefanoamorelli/sec-edgar-mcp)** - (by Stefano Amorelli) A community Model Context Protocol Server to access financial filings and data through the U.S. Securities and Exchange Commission ([SEC](https://www.sec.gov/)) `Electronic Data Gathering, Analysis, and Retrieval` ([EDGAR](https://www.sec.gov/submit-filings/about-edgar)) database\n- **[SEO MCP](https://github.com/cnych/seo-mcp)** - A free SEO tool MCP (Model Control Protocol) service based on Ahrefs data. Includes features such as backlinks, keyword ideas, and more. by [claudemcp](https://www.claudemcp.com/servers/seo-mcp).\n- **[Serper](https://github.com/garylab/serper-mcp-server)** - An MCP server that performs Google searches using [Serper](https://serper.dev).\n- **[ServiceNow](https://github.com/osomai/servicenow-mcp)** - An MCP server to interact with a ServiceNow instance\n- **[ShaderToy](https://github.com/wilsonchenghy/ShaderToy-MCP)** - This MCP server lets LLMs to interact with the ShaderToy API, allowing LLMs to learn from compute shaders examples and enabling them to create complex GLSL shaders that they are previously not capable of.\n- **[ShareSeer](https://github.com/shareseer/shareseer-mcp-server)** - MCP to Access SEC filings, financials & insider trading data in real time using [ShareSeer](https://shareseer.com)\n- **[Shell](https://github.com/sonirico/mcp-shell)** - Give hands to AI. MCP server to run shell commands securely, auditably, and on demand\n- **[Shodan MCP](https://github.com/Hexix23/shodan-mcp)** - MCP server to interact with [Shodan](https://www.shodan.io/)\n- **[Shopify](https://github.com/GeLi2001/shopify-mcp)** - MCP to interact with Shopify API including order, product, customers and so on.\n- **[Shopify Storefront](https://github.com/QuentinCody/shopify-storefront-mcp-server)** - Unofficial MCP server that allows AI agents to discover Shopify storefronts and interact with them to fetch products, collections, and other store data through the Storefront API.\n- **[Simple Loki MCP](https://github.com/ghrud92/simple-loki-mcp)** - A simple MCP server to query Loki logs using logcli.\n- **[Siri Shortcuts](https://github.com/dvcrn/mcp-server-siri-shortcuts)** - MCP to interact with Siri Shortcuts on macOS. Exposes all Shortcuts as MCP tools.\n- **[Skyvern](https://github.com/Skyvern-AI/skyvern/tree/main/integrations/mcp)** - MCP to let Claude / Windsurf / Cursor / your LLM control the browser\n- **[Slack](https://github.com/korotovsky/slack-mcp-server)** - The most powerful MCP server for Slack Workspaces. This integration supports both Stdio and SSE transports, proxy settings and does not require any permissions or bots being created or approved by Workspace admins üòè.\n- **[Slack](https://github.com/zencoderai/slack-mcp-server)** - Slack MCP server which supports both stdio and Streamable HTTP transports. Extended from the original Anthropic's implementation which is now [archived](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/slack)\n- **[Slidespeak](https://github.com/SlideSpeak/slidespeak-mcp)** - Create PowerPoint presentations using the [Slidespeak](https://slidespeak.com/) API.\n- **[Smartlead](https://github.com/jean-technologies/smartlead-mcp-server-local)** - MCP to connect to Smartlead. Additional, tooling, functionality, and connection to workflow automation platforms also available.\n- **[Snowflake](https://github.com/Snowflake-Labs/mcp)** - Open-source MCP server for Snowflake from official Snowflake-Labs supports prompting Cortex Agents, querying structured & unstructured data, object management, SQL execution, semantic view querying, and more. RBAC, fine-grained CRUD controls, and all authentication methods supported.\n- **[Snowflake](https://github.com/isaacwasserman/mcp-snowflake-server)** - This MCP server enables LLMs to interact with Snowflake databases, allowing for secure and controlled data operations.\n- **[Snowflake Cortex MCP Server](https://github.com/thisisbhanuj/Snowflake-Cortex-MCP-Server)** -This Snowflake MCP server provides tooling for Snowflake Cortex AI features, bringing these capabilities to the MCP ecosystem. When connected to an MCP Client (e.g. Claude for Desktop, fast-agent, Agentic Orchestration Framework), users can leverage these Cortex AI features.\n- **[SoccerDataAPI](https://github.com/yeonupark/mcp-soccer-data)** - This MCP server provides real-time football match data based on the SoccerDataAPI.\n- **[Solana Agent Kit](https://github.com/sendaifun/solana-agent-kit/tree/main/examples/agent-kit-mcp-server)** - This MCP server enables LLMs to interact with the Solana blockchain with help of Solana Agent Kit by SendAI, allowing for 40+ protocol actions and growing\n- **[Solr MCP](https://github.com/mjochum64/mcp-solr-search)** - This MCP server offers a basic functionality to perform a search on Solr servers.\n- **[Solver](https://github.com/szeider/mcp-solver)** - Solves constraint satisfaction and optimization problems .\n- **[Solvitor](https://github.com/Adeptus-Innovatio/solvitor-mcp)** ‚Äì Solvitor MCP server provides tools to access reverse engineering tools that help developers extract IDL files from closed - source Solana smart contracts and decompile them.\n- **[Sourcerer](https://github.com/st3v3nmw/sourcerer-mcp)** - MCP for semantic code search & navigation that reduces token waste.\n- **[Specbridge](https://github.com/TBosak/specbridge)** - Easily turn your OpenAPI specs into MCP Tools.\n- **[Splunk](https://github.com/jkosik/mcp-server-splunk)** - Golang MCP server for Splunk (lists saved searches, alerts, indexes, macros...). Supports SSE and STDIO.\n- **[Spotify](https://github.com/varunneal/spotify-mcp)** - This MCP allows an LLM to play and use Spotify.\n- **[Spring Initializr](https://github.com/hpalma/springinitializr-mcp)** - This MCP allows an LLM to create Spring Boot projects with custom configurations. Instead of manually visiting start.spring.io, you can now ask your AI assistant to generate projects with specific dependencies, Java versions, and project structures.\n- **[Squad‚ÄØAI](https://github.com/the-basilisk-ai/squad-mcp)** ‚Äì Product‚Äëdiscovery and strategy platform integration. Create, query and update opportunities, solutions, outcomes, requirements and feedback from any MCP‚Äëaware LLM.\n- **[SSH](https://github.com/AiondaDotCom/mcp-ssh)** - Agent for managing and controlling SSH connections.\n- **[SSH](https://github.com/classfang/ssh-mcp-server)** - An MCP server that can execute SSH commands remotely, upload files, download files, and so on.\n- **[SSH MCP Server](https://github.com/sinjab/mcp_ssh)** - A production-ready Model Context Protocol server for SSH automation with background execution, file transfers, and comprehensive timeout protection. Features structured output, progress tracking, and enterprise-grade testing (87% coverage).\n- **[sslmon](https://github.com/firesh/sslmon-mcp)** - Domain/HTTPS/SSL domain registration information and SSL certificate monitoring capabilities. Query domain registration and expiration information, and SSL certificate information and validity status for any domain.\n- **[Standard Korean Dictionary](https://github.com/privetin/stdict)** - Search the dictionary using API\n- **[Star Wars](https://github.com/johnpapa/mcp-starwars)** -MCP Server for the SWAPI Star Wars API. The main goal of the project is to show how an MCP server can be used to interact with APIs.\n- **[Starknet MCP Server](https://github.com/mcpdotdirect/starknet-mcp-server)** - A comprehensive MCP server for interacting with the Starknet blockchain, providing tools for querying blockchain data, resolving StarknetIDs, and performing token transfers.\n- **[Starwind UI](https://github.com/Boston343/starwind-ui-mcp/)** - This MCP provides relevant commands, documentation, and other information to allow LLMs to take full advantage of Starwind UI's open source Astro components.\n- **[Stellar](https://github.com/syronlabs/stellar-mcp/)** - This MCP server enables LLMs to interact with the Stellar blockchain to create accounts, check address balances, analyze transactions, view transaction history, mint new assets, interact with smart contracts and much more.\n- **[Stitch AI](https://github.com/StitchAI/stitch-ai-mcp/)** - Knowledge management system for AI agents with memory space creation and retrieval capabilities.\n- **[Stockfish](https://github.com/sonirico/mcp-stockfish)** - MCP server connecting AI systems to Stockfish chess engine\n- **[Storybook](https://github.com/stefanoamorelli/storybook-mcp-server)** (by Stefano Amorelli) - Interact with Storybook component libraries, enabling component discovery, story management, prop inspection, and visual testing across different viewports.\n- **[Strava](https://github.com/r-huijts/strava-mcp)** - Connect to the Strava API to access activity data, athlete profiles, segments, and routes, enabling fitness tracking and analysis with Claude.\n- **[Strava API](https://github.com/tomekkorbak/strava-mcp-server)** - MCP server for Strava API to retrieve one's activities\n- **[Stripe](https://github.com/atharvagupta2003/mcp-stripe)** - This MCP allows integration with Stripe for handling payments, customers, and refunds.\n- **[Substack/Medium](https://github.com/jonathan-politzki/mcp-writer-substack)** - Connect Claude to your Substack/Medium writing, enabling semantic search and analysis of your published content.\n- **[System Health](https://github.com/thanhtung0201/mcp-remote-system-health)** - The MCP (Multi-Channel Protocol) System Health Monitoring is a robust, real-time monitoring solution designed to provide comprehensive health metrics and alerts for remote Linux servers.\n- **[SystemSage](https://github.com/Tarusharma1/SystemSage)** - A powerful, cross-platform system management and monitoring tool for Windows, Linux, and macOS.\n- **[Talk To Figma](https://github.com/sonnylazuardi/cursor-talk-to-figma-mcp)** - This MCP server enables LLMs to interact with Figma, allowing them to read and modify designs programmatically.\n- **[Talk To Figma via Claude](https://github.com/gaganmanku96/talk-with-figma-claude)** - TMCP server that provides seamless Figma integration specifically for Claude Desktop, enabling design creation, modification, and real-time collaboration through natural language commands.\n- **[TAM MCP Server](https://github.com/gvaibhav/TAM-MCP-Server)** - Market research and business intelligence with TAM/SAM calculations and integration across 8 economic data sources: Alpha Vantage, BLS, Census Bureau, FRED, IMF, Nasdaq Data Link, OECD, and World Bank.\n- **[Tasks](https://github.com/flesler/mcp-tasks)** - An efficient task manager. Designed to minimize tool confusion and maximize LLM budget efficiency while providing powerful search, filtering, and organization capabilities across multiple file formats (Markdown, JSON, YAML)\n- **[Tavily search](https://github.com/RamXX/mcp-tavily)** - An MCP server for Tavily's search & news API, with explicit site inclusions/exclusions\n- **[TcpSocketMCP](https://github.com/SpaceyKasey/TcpSocketMCP/)** - A Model Context Protocol (MCP) server that provides raw TCP socket access, enabling AI models to interact directly with network services using raw TCP Sockets. Supports multiple concurrent connections, buffering of response data and triggering automatic responses.\n- **[TeamRetro](https://github.com/adepanges/teamretro-mcp-server)** - This MCP server allows LLMs to interact with TeamRetro, allowing LLMs to manage user, team, team member, retrospective, health check, action, agreement and fetch the reports.\n- **[Telegram](https://github.com/chigwell/telegram-mcp)** - An MCP server that provides paginated chat reading, message retrieval, and message sending capabilities for Telegram through Telethon integration.\n- **[Telegram-Client](https://github.com/chaindead/telegram-mcp)** - A Telegram API bridge that manages user data, dialogs, messages, drafts, read status, and more for seamless interactions.\n- **[Telegram-mcp-server](https://github.com/DLHellMe/telegram-mcp-server)** - Access Telegram channels and groups directly in Claude. Features dual-mode operation with API access (100x faster) or web scraping, unlimited post retrieval, and search functionality.\n- **[Template MCP Server](https://github.com/mcpdotdirect/template-mcp-server)** - A CLI tool to create a new Model Context Protocol server project with TypeScript support, dual transport options, and an extensible structure\n- **[Tempo](https://github.com/scottlepp/tempo-mcp-server)** - An MCP server to query traces/spans from [Grafana Tempo](https://github.com/grafana/tempo).\n- **[Teradata](https://github.com/arturborycki/mcp-teradata)** - his MCP server enables LLMs to interact with Teradata databases. This MCP Server support tools and prompts for multi task data analytics\n- **[Terminal-Control](https://github.com/GongRzhe/terminal-controller-mcp)** - An MCP server that enables secure terminal command execution, directory navigation, and file system operations through a standardized interface.\n- **[Terraform-Cloud](https://github.com/severity1/terraform-cloud-mcp)** - An MCP server that integrates AI assistants with the Terraform Cloud API, allowing you to manage your infrastructure through natural conversation.\n- **[Tideways](https://github.com/abuhamza/tideways-mcp-server)** - A Model Context Protocol server that enables AI assistants to query Tideways performance monitoring data and provide conversational performance insights for PHP applications.\n- **[TFT-Match-Analyzer](https://github.com/GeLi2001/tft-mcp-server)** - MCP server for teamfight tactics match history & match details fetching, providing user the detailed context for every match.\n- **[Thales CDSP CAKM MCP Server](https://github.com/sanyambassi/thales-cdsp-cakm-mcp-server)** - An MCP server for the Thales CipherTrust Data Security Platform (CDSP) Cloud Key Management (CAKM) connector. This MCP server supports Ms SQL and Oracle databases.\n- **[Thales CDSP CRDP MCP Server](https://github.com/sanyambassi/thales-cdsp-crdp-mcp-server)** - A Model Context Protocol (MCP) server that allows interacting with the CipherTrust RestFul Data Protection (CRDP) data protection service.\n- **[Thales CipherTrust Manager MCP Server](https://github.com/sanyambassi/ciphertrust-manager-mcp-server)** - MCP server for Thales CipherTrust Manager integration, enabling secure key management and cryptographic operations.\n- **[thegraph-mcp](https://github.com/kukapay/thegraph-mcp)** - An MCP server that powers AI agents with indexed blockchain data from The Graph.\n- **[TheHive MCP Server](https://github.com/redwaysecurity/the-hive-mcp-server)** - An MCP server for [TheHive](https://strangebee.com/thehive/) Security Incident Response Platform.\n- **[Things3 MCP](https://github.com/urbanogardun/things3-mcp)** - Things3 task management integration for macOS with comprehensive TODO, project, and tag management.\n- **[Think MCP](https://github.com/Rai220/think-mcp)** - Enhances any agent's reasoning capabilities by integrating the think-tools, as described in [Anthropic's article](https://www.anthropic.com/engineering/claude-think-tool).\n- **[Think Node MCP](https://github.com/abhinav-mangla/think-tool-mcp)** - Enhances any agent's reasoning capabilities by integrating the think-tools, as described in [Anthropic's article](https://www.anthropic.com/engineering/claude-think-tool). (Works with Node)\n- **[Ticketmaster](https://github.com/delorenj/mcp-server-ticketmaster)** - Search for events, venues, and attractions through the Ticketmaster Discovery API\n- **[Ticketmaster MCP Server](https://github.com/mochow13/ticketmaster-mcp-server)** - A Model Context Protocol (MCP) server implemented in Streamable HTTP transport that allows AI models to interact with the Ticketmaster Discovery API, enabling searching events, venues, and attractions.\n- **[TickTick](https://github.com/alexarevalo9/ticktick-mcp-server)** - A Model Context Protocol (MCP) server designed to integrate with the TickTick task management platform, enabling intelligent context-aware task operations and automation.\n- **[TigerGraph](https://github.com/custom-discoveries/TigerGraph_MCP)** - A community built MCP server that interacts with TigerGraph Graph Database.\n- **[tip.md](https://github.com/tipdotmd#-mcp-server-for-ai-assistants)** - An MCP server that enables AI assistants to interact with tip.md's crypto tipping functionality, allowing agents or supporters to tip registered developers directly from AI chat interfaces.\n- **[TMD Earthquake](https://github.com/amornpan/tmd-earthquake-server-1.0)** - üåç Real-time earthquake monitoring from Thai Meteorological Department. Features magnitude filtering, location-based search (Thai/English), today's events tracking, dangerous earthquake alerts, and comprehensive statistics. Covers regional and global seismic activities.\n- **[TMDB](https://github.com/Laksh-star/mcp-server-tmdb)** - This MCP server integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.\n- **[Todoist](https://github.com/abhiz123/todoist-mcp-server)** - Interact with Todoist to manage your tasks.\n- **[Todos](https://github.com/tomelliot/todos-mcp)** - A practical todo list manager to use with your favourite chatbot.\n- **[token-minter-mcp](https://github.com/kukapay/token-minter-mcp)** - An MCP server providing tools for AI agents to mint ERC-20 tokens across multiple blockchains.\n- **[token-revoke-mcp](https://github.com/kukapay/token-revoke-mcp)** - An MCP server for checking and revoking ERC-20 token allowances across multiple blockchains.\n- **[Ton Blockchain MCP](https://github.com/devonmojito/ton-blockchain-mcp)** - An MCP server for interacting with Ton Blockchain.\n- **[TouchDesigner](https://github.com/8beeeaaat/touchdesigner-mcp)** - An MCP server for TouchDesigner, enabling interaction with TouchDesigner projects, nodes, and parameters.\n- **[Transcribe](https://github.com/transcribe-app/mcp-transcribe)** - An MCP server provides fast and reliable transcriptions for audio/video files and voice memos. It allows LLMs to interact with the text content of audio/video file.\n- **[Travel Planner](https://github.com/GongRzhe/TRAVEL-PLANNER-MCP-Server)** - Travel planning and itinerary management server integrating with Google Maps API for location search, place details, and route calculations.\n- **[Trello MCP Server](https://github.com/lioarce01/trello-mcp-server)** - An MCP server that interact with user Trello boards, modifying them with prompting.\n- **[Trino](https://github.com/tuannvm/mcp-trino)** - A high-performance Model Context Protocol (MCP) server for Trino implemented in Go.\n- **[Tripadvisor](https://github.com/pab1it0/tripadvisor-mcp)** - An MCP server that enables LLMs to interact with Tripadvisor API, supporting location data, reviews, and photos through standardized MCP interfaces\n- **[Triplyfy MCP](https://github.com/helpful-AIs/triplyfy-mcp)** - An MCP server that lets LLMs plan and manage itineraries with interactive maps in Triplyfy; manage itineraries, places and notes, and search/save flights.\n- **[TrueNAS Core MCP](https://github.com/vespo92/TrueNasCoreMCP)** - An MCP server for interacting with TrueNAS Core.\n- **[TuriX Computer Automation MCP](https://github.com/TurixAI/TuriX-CUA/tree/mac_mcp)** - MCP server for helping automation control your computer complete your pre-setting task.\n- **[Tyk API Management](https://github.com/TykTechnologies/tyk-dashboard-mcp)** - Chat with all of your organization's managed APIs and perform other API lifecycle operations, managing tokens, users, analytics, and more.\n- **[Typesense](https://github.com/suhail-ak-s/mcp-typesense-server)** - A Model Context Protocol (MCP) server implementation that provides AI models with access to Typesense search capabilities. This server enables LLMs to discover, search, and analyze data stored in Typesense collections.\n- **[UniFi Dream Machine](https://github.com/sabler/mcp-unifi)** An MCP server that gets your network telemetry from the UniFi Site Manager and your local UniFi router.\n- **[UniProt](https://github.com/QuentinCody/uniprot-mcp-server)** - Unofficial MCP server for UniProt, providing access to protein sequence data, functional annotations, taxonomic information, and cross-references for proteomics and bioinformatics research.\n- **[uniswap-poolspy-mcp](https://github.com/kukapay/uniswap-poolspy-mcp)** - An MCP server that tracks newly created liquidity pools on Uniswap across nine blockchain networks.\n- **[uniswap-trader-mcp](https://github.com/kukapay/uniswap-trader-mcp)** -An MCP server for AI agents to automate token swaps on Uniswap DEX across multiple blockchains.\n- **[Unity Catalog](https://github.com/ognis1205/mcp-server-unitycatalog)** - An MCP server that enables LLMs to interact with Unity Catalog AI, supporting CRUD operations on Unity Catalog Functions and executing them as MCP tools.\n- **[Unity Integration (Advanced)](https://github.com/quazaai/UnityMCPIntegration)** - Advanced Unity3d Game Engine MCP which supports ,Execution of Any Editor Related Code Directly Inside of Unity, Fetch Logs, Get Editor State and Allow File Access of the Project making it much more useful in Script Editing or asset creation.\n- **[Unity3d Game Engine](https://github.com/CoderGamester/mcp-unity)** - An MCP server that enables LLMs to interact with Unity3d Game Engine, supporting access to a variety of the Unit's Editor engine tools (e.g. Console Logs, Test Runner logs, Editor functions, hierarchy state, etc) and executing them as MCP tools or gather them as resources.\n- **[Universal MCP Servers](https://github.com/universal-mcp)** - A collection of MCP servers created using the [AgentR Universal MCP SDK](https://github.com/universal-mcp/universal-mcp).\n- **[Unleash Integration (Feature Toggle)](https://github.com/cuongtl1992/unleash-mcp)** - A Model Context Protocol (MCP) server implementation that integrates with Unleash Feature Toggle system. Provide a bridge between LLM applications and Unleash feature flag system\n- **[Upbit MCP Server](https://github.com/solangii/upbit-mcp-server)** ‚Äì An MCP server that enables real - time access to cryptocurrency prices, market summaries, and asset listings from the Upbit exchange.\n- **[use_aws_mcp](https://github.com/runjivu/use_aws_mcp)** - amazon-q-cli's use_aws tool extracted into independent mcp, for general aws api usage.\n- **[User Feedback](https://github.com/mrexodia/user-feedback-mcp)** - Simple MCP Server to enable a human-in-the-loop workflow in tools like Cline and Cursor.\n- **[USPTO](https://github.com/riemannzeta/patent_mcp_server)** - MCP server for accessing United States Patent & Trademark Office data through its Open Data Protocol (ODP) API.\n- **[Vectara](https://github.com/vectara/vectara-mcp)** - Query Vectara's trusted RAG-as-a-service platform.\n- **[Vega-Lite](https://github.com/isaacwasserman/mcp-vegalite-server)** - Generate visualizations from fetched data using the VegaLite format and renderer.\n- **[Vertica](https://github.com/nolleh/mcp-vertica)** - Vertica database integration in Python with configurable access controls and schema inspection\n- **[Vibe Check](https://github.com/PV-Bhat/vibe-check-mcp-server)** - An MCP server leveraging an external oversight layer to \"vibe check\" agents, and also self-improve accuracy & user alignment over time. Prevents scope creep, code bloat, misalignment, misinterpretation, tunnel vision, and overcomplication.\n- **[Video Editor](https://github.com/burningion/video-editing-mcp)** - A Model Context Protocol Server to add, edit, and search videos with [Video Jungle](https://www.video-jungle.com/).\n- **[Video Still Capture](https://github.com/13rac1/videocapture-mcp)** - üì∑ Capture video stills from an OpenCV-compatible webcam or other video source.\n- **[Virtual location (Google Street View,etc.)](https://github.com/mfukushim/map-traveler-mcp)** - Integrates Google Map, Google Street View, PixAI, Stability.ai, ComfyUI API and Bluesky to provide a virtual location simulation in LLM (written in Effect.ts)\n- **[VMware Fusion](https://github.com/yeahdongcn/vmware-fusion-mcp-server)** - Manage VMware Fusion virtual machines via the Fusion REST API.\n- **[VoiceMode](https://github.com/mbailey/voicemode)** - Enable voice conversations with Claude using any OpenAI-compatible STT/TTS service [getvoicemode.com](https://getvoicemode.com/)\n- **[Voice Status Report](https://github.com/tomekkorbak/voice-status-report-mcp-server)** - An MCP server that provides voice status updates using OpenAI's text-to-speech API, to be used with Cursor or Claude Code.\n- **[VolcEngine TOS](https://github.com/dinghuazhou/sample-mcp-server-tos)** - A sample MCP server for VolcEngine TOS that flexibly get objects from TOS.\n- **[Voyp](https://github.com/paulotaylor/voyp-mcp)** - VOYP MCP server for making calls using Artificial Intelligence.\n- **[vulnicheck](https://github.com/andrasfe/vulnicheck)** - Real-time Python package vulnerability scanner that checks dependencies against OSV and NVD databases, providing comprehensive security analysis with CVE details, lock file support, and actionable upgrade recommendations.\n- **[Wanaku MCP Router](https://github.com/wanaku-ai/wanaku/)** - The Wanaku MCP Router is a SSE-based MCP server that provides an extensible routing engine that allows integrating your enterprise systems with AI agents.\n- **[weather-mcp-server](https://github.com/devilcoder01/weather-mcp-server)** - Get real-time weather data for any location using weatherapi.\n- **[Web Search MCP](https://github.com/mrkrsl/web-search-mcp)** - A server that provides full web search, summaries and page extration for use with Local LLMs.\n- **[Webex](https://github.com/Kashyap-AI-ML-Solutions/webex-messaging-mcp-server)** - A Model Context Protocol (MCP) server that provides AI assistants with comprehensive access to Cisco Webex messaging capabilities.\n- **[Webflow](https://github.com/kapilduraphe/webflow-mcp-server)** - Interact with the Webflow APIs\n- **[webhook-mcp](https://github.com/noobnooc/webhook-mcp)** (by Nooc) - A Model Context Protocol (MCP) server that sends webhook notifications when called.\n- **[whale-tracker-mcp](https://github.com/kukapay/whale-tracker-mcp)**  -  A mcp server for tracking cryptocurrency whale transactions.\n- **[WhatsApp MCP Server](https://github.com/lharries/whatsapp-mcp)** - MCP server for your personal WhatsApp handling individuals, groups, searching and sending.\n- **[Whois MCP](https://github.com/bharathvaj-ganesan/whois-mcp)** - MCP server that performs whois lookup against domain, IP, ASN and TLD.\n- **[Wikidata MCP](https://github.com/zzaebok/mcp-wikidata)** - Wikidata MCP server that interact with Wikidata, by searching identifiers, extracting metadata, and executing sparql query.\n- **[Wikidata SPARQL](https://github.com/QuentinCody/wikidata-sparql-mcp-server)** - Unofficial REMOTE MCP server for Wikidata's SPARQL endpoint, providing access to structured knowledge data, entity relationships, and semantic queries for research and data analysis.\n- **[Wikifunctions](https://github.com/Fredibau/wikifunctions-mcp-fredibau)** - Allowing AI models to discover and execute functions from the WikiFunctions library.\n- **[Wikipedia MCP](https://github.com/Rudra-ravi/wikipedia-mcp)** - Access and search Wikipedia articles via MCP for AI-powered information retrieval.\n- **[WildFly MCP](https://github.com/wildfly-extras/wildfly-mcp)** - WildFly MCP server that enables LLM to interact with running WildFly servers (retrieve metrics, logs, invoke operations, ...).\n- **[Windows CLI](https://github.com/SimonB97/win-cli-mcp-server)** - MCP server for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, and Git Bash shells.\n- **[Windsor](https://github.com/windsor-ai/windsor_mcp)** - Windsor MCP (Model Context Protocol) enables your LLM to query, explore, and analyze your full-stack business data integrated into Windsor.ai with zero SQL writing or custom scripting.\n- **[Wordle MCP](https://github.com/cr2007/mcp-wordle-python)** - MCP Server that gets the Wordle Solution for a particular date.\n- **[WordPress MCP](https://github.com/Automattic/wordpress-mcp)** - Make your WordPress site into a simple MCP server, exposing functionality to LLMs and AI agents.\n- **[Workflowy](https://github.com/danield137/mcp-workflowy)** - A server that interacts with [workflowy](https://workflowy.com/).\n- **[World Bank data API](https://github.com/anshumax/world_bank_mcp_server)** - A server that fetches data indicators available with the World Bank as part of their data API\n- **[Wren Engine](https://github.com/Canner/wren-engine)** - The Semantic Engine for Model Context Protocol(MCP) Clients and AI Agents\n- **[X (Twitter)](https://github.com/EnesCinr/twitter-mcp)** (by EnesCinr) - Interact with twitter API. Post tweets and search for tweets by query.\n- **[X (Twitter)](https://github.com/vidhupv/x-mcp)** (by vidhupv) - Create, manage and publish X/Twitter posts directly through Claude chat.\n- **[Xcode](https://github.com/r-huijts/xcode-mcp-server)** - MCP server that brings AI to your Xcode projects, enabling intelligent code assistance, file operations, project management, and automated development tasks.\n- **[Xcode-mcp-server](https://github.com/drewster99/xcode-mcp-server)** (by drewster99) - Best Xcode integration - ClaudeCode and Cursor can build your project *with* Xcode and see the same errors you do. Fast easy setup.\n- **[xcodebuild](https://github.com/ShenghaiWang/xcodebuild)**  - üçé Build iOS Xcode workspace/project and feed back errors to llm.\n- **[Xero-mcp-server](https://github.com/john-zhang-dev/xero-mcp)** - Enabling clients to interact with Xero system for streamlined accounting, invoicing, and business operations.\n- **[XiYan](https://github.com/XGenerationLab/xiyan_mcp_server)** - üóÑÔ∏è An MCP server that supports fetching data from a database using natural language queries, powered by XiyanSQL as the text-to-SQL LLM.\n- **[XMind](https://github.com/apeyroux/mcp-xmind)** - Read and search through your XMind directory containing XMind files.\n- **[Yahoo Finance](https://github.com/AgentX-ai/yahoo-finance-server)** - üìà Lets your AI interact with Yahoo Finance to get comprehensive stock market data, news, financials, and more. Proxy supported.\n- **[yfinance](https://github.com/Adity-star/mcp-yfinance-server)** -üíπThe MCP YFinance Stock Server provides real-time and historical stock data in a standard format, powering dashboards, AI agents,and research tools with seamless financial insights.\n- **[YNAB](https://github.com/ChuckBryan/ynabmcpserver)** - A Model Context Protocol (MCP) server for integrating with YNAB (You Need A Budget), allowing AI assistants to securely access and analyze your financial data.\n- **[YouTrack](https://github.com/tonyzorin/youtrack-mcp)** - A Model Context Protocol (MCP) server implementation for JetBrains YouTrack, allowing AI assistants to interact with YouTrack issue tracking system.\n- **[YouTube](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/youtube)** - Extract Youtube video information (with proxies support).\n- **[YouTube](https://github.com/ZubeidHendricks/youtube-mcp-server)** - Comprehensive YouTube API integration for video management, Shorts creation, and analytics.\n- **[YouTube DLP](https://github.com/AgentX-ai/youtube-dlp-server)** - Retrieve video information, subtitles, and top comments with proxies.\n- **[YouTube MCP](https://github.com/aardeshir/youtube-mcp)** - Create playlists from song lists with OAuth2. Search videos, manage playlists, let AI curate your YouTube collections.\n- **[Youtube Uploader MCP](https://github.com/anwerj/youtube-uploader-mcp)** - AI‚Äëpowered YouTube uploader‚Äîno CLI, no YouTube Studio.\n- **[YouTube Video Summarizer](https://github.com/nabid-pf/youtube-video-summarizer-mcp)** - Summarize lengthy youtube videos.\n- **[yutu](https://github.com/eat-pray-ai/yutu)** - A fully functional MCP server and CLI for YouTube to automate YouTube operation.\n- **[ZapCap](https://github.com/bogdan01m/zapcap-mcp-server)** - MCP server for ZapCap API providing video caption and B-roll generation via natural language\n- **[Zettelkasten](https://github.com/joshylchen/zettelkasten)**- Comprehensive AI-powered knowledge management system implementing the Zettelkasten method. Features atomic note creation, full-text search, AI-powered CEQRC workflows (Capture‚ÜíExplain‚ÜíQuestion‚ÜíRefine‚ÜíConnect), intelligent link discovery, and multi-interface access (CLI, API, Web UI, MCP). Perfect for researchers, students, and knowledge workers.\n- **[ZincBind](https://github.com/QuentinCody/zincbind-mcp-server)** - Unofficial MCP server for ZincBind, providing access to a comprehensive database of zinc binding sites in proteins, structural coordination data, and metalloproteomics research information.\n- **[Zoom](https://github.com/Prathamesh0901/zoom-mcp-server/tree/main)** - Create, update, read and delete your zoom meetings.\n## üìö Frameworks\n\nThese are high-level frameworks that make it easier to build MCP servers or clients.\n\n### For servers\n\n* **[Anubis MCP](https://github.com/zoedsoupe/anubis-mcp)** (Elixir) - A high-performance and high-level Model Context Protocol (MCP) implementation in Elixir. Think like \"Live View\" for MCP.\n* **[ModelFetch](https://github.com/phuctm97/modelfetch/)** (TypeScript) - Runtime-agnostic SDK to create and deploy MCP servers anywhere TypeScript/JavaScript runs\n* **[EasyMCP](https://github.com/zcaceres/easy-mcp/)** (TypeScript)\n* **[FastAPI to MCP auto generator](https://github.com/tadata-org/fastapi_mcp)** ‚Äì A zero-configuration tool for automatically exposing FastAPI endpoints as MCP tools by **[Tadata](https://tadata.com/)**\n* **[FastMCP](https://github.com/punkpeye/fastmcp)** (TypeScript)\n* **[Foobara MCP Connector](https://github.com/foobara/mcp-connector)** - Easily expose Foobara commands written in Ruby as tools via MCP\n* **[Foxy Contexts](https://github.com/strowk/foxy-contexts)** ‚Äì A library to build MCP servers in Golang by **[strowk](https://github.com/strowk)**\n* **[Higress MCP Server Hosting](https://github.com/alibaba/higress/tree/main/plugins/wasm-go/mcp-servers)** - A solution for hosting MCP Servers by extending the API Gateway (based on Envoy) with wasm plugins.\n* **[MCP Declarative Java SDK](https://github.com/codeboyzhou/mcp-declarative-java-sdk)** Annotation-driven MCP servers development with Java, no Spring Framework Required, minimize dependencies as much as possible.\n* **[MCP-Framework](https://mcp-framework.com)** Build MCP servers with elegance and speed in TypeScript. Comes with a CLI to create your project with `mcp create app`. Get started with your first server in under 5 minutes by **[Alex Andru](https://github.com/QuantGeekDev)**\n* **[MCP Plexus](https://github.com/Super-I-Tech/mcp_plexus)**: A secure, **multi-tenant** and Multi-user MCP python server framework built to integrate easily with external services via OAuth 2.1, offering scalable and robust solutions for managing complex AI applications.\n* **[mcp_sse (Elixir)](https://github.com/kEND/mcp_sse)** An SSE implementation in Elixir for rapidly creating MCP servers.\n* **[mxcp](https://github.com/raw-labs/mxcp)** (Python) - Open-source framework for building enterprise-grade MCP servers using just YAML, SQL, and Python, with built-in auth, monitoring, ETL and policy enforcement.\n* **[Next.js MCP Server Template](https://github.com/vercel-labs/mcp-for-next.js)** (Typescript) - A starter Next.js project that uses the MCP Adapter to allow MCP clients to connect and access resources.\n* **[PayMCP](https://github.com/blustAI/paymcp)** (Python & TypeScript) - Lightweight payments layer for MCP servers: turn tools into paid endpoints with a two-line decorator. [PyPI](https://pypi.org/project/paymcp/) ¬∑ [npm](https://www.npmjs.com/package/paymcp) ¬∑ [TS repo](https://github.com/blustAI/paymcp-ts)\n* **[Perl SDK](https://github.com/mojolicious/mojo-mcp)** - An SDK for building MCP servers and clients with the Perl programming language.\n* **[Quarkus MCP Server SDK](https://github.com/quarkiverse/quarkus-mcp-server)** (Java)\n- **[R mcptools](https://github.com/posit-dev/mcptools)** - An R SDK for creating R-based MCP servers and retrieving functionality from third-party MCP servers as R functions.\n* **[SAP ABAP MCP Server SDK](https://github.com/abap-ai/mcp)** - Build SAP ABAP based MCP servers. ABAP 7.52 based with 7.02 downport; runs on R/3 & S/4HANA on-premises, currently not cloud-ready.\n* **[Spring AI MCP Server](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-server-boot-starter-docs.html)** - Provides auto-configuration for setting up an MCP server in Spring Boot applications.\n* **[Template MCP Server](https://github.com/mcpdotdirect/template-mcp-server)** - A CLI tool to create a new Model Context Protocol server project with TypeScript support, dual transport options, and an extensible structure\n* **[AgentR Universal MCP SDK](https://github.com/universal-mcp/universal-mcp)** - A python SDK to build MCP Servers with inbuilt credential management by **[Agentr](https://agentr.dev/home)**\n* **[Vercel MCP Adapter](https://github.com/vercel/mcp-adapter)** (TypeScript) - A simple package to start serving an MCP server on most major JS meta-frameworks including Next, Nuxt, Svelte, and more.\n* **[PHP MCP Server](https://github.com/php-mcp/server)** (PHP) - Core PHP implementation for the Model Context Protocol (MCP) server\n\n### For clients\n\n* **[codemirror-mcp](https://github.com/marimo-team/codemirror-mcp)** - CodeMirror extension that implements the Model Context Protocol (MCP) for resource mentions and prompt commands\n* **[llm-analysis-assistant](https://github.com/xuzexin-hz/llm-analysis-assistant)** <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/xuzexin-hz/llm-analysis-assistant/refs/heads/main/src/llm_analysis_assistant/pages/html/imgs/favicon.ico\" alt=\"Langfuse Logo\" /> - A very streamlined mcp client that supports calling and monitoring stdio/sse/streamableHttp, and can also view request responses through the /logs page. It also supports monitoring and simulation of ollama/openai interface.\n* **[MCP-Agent](https://github.com/lastmile-ai/mcp-agent)** - A simple, composable framework to build agents using Model Context Protocol by **[LastMile AI](https://www.lastmileai.dev)**\n* **[Spring AI MCP Client](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-client-boot-starter-docs.html)** - Provides auto-configuration for MCP client functionality in Spring Boot applications.\n* **[MCP CLI Client](https://github.com/vincent-pli/mcp-cli-host)** - A CLI host application that enables Large Language Models (LLMs) to interact with external tools through the Model Context Protocol (MCP).\n* **[OpenMCP Client](https://github.com/LSTM-Kirigaya/openmcp-client/)** - An all-in-one vscode/trae/cursor plugin for MCP server debugging. [Document](https://kirigaya.cn/openmcp/) & [OpenMCP SDK](https://kirigaya.cn/openmcp/sdk-tutorial/).\n* **[PHP MCP Client](https://github.com/php-mcp/client)** - Core PHP implementation for the Model Context Protocol (MCP) Client\n\n\n## üìö Resources\n\nAdditional resources on MCP.\n\n- **[A2A-MCP Java Bridge](https://github.com/vishalmysore/a2ajava)** - A2AJava brings powerful A2A-MCP integration directly into your Java applications. It enables developers to annotate standard Java methods and instantly expose them as MCP Server, A2A-discoverable actions ‚Äî with no boilerplate or service registration overhead.\n- **[AiMCP](https://www.aimcp.info)** - A collection of MCP clients&servers to find the right mcp tools by **[Hekmon](https://github.com/hekmon8)**\n- **[Awesome Crypto MCP Servers by badkk](https://github.com/badkk/awesome-crypto-mcp-servers)** - A curated list of MCP servers by **[Luke Fan](https://github.com/badkk)**\n- **[Awesome MCP Servers by appcypher](https://github.com/appcypher/awesome-mcp-servers)** - A curated list of MCP servers by **[Stephen Akinyemi](https://github.com/appcypher)**\n- **[Awesome MCP Servers by punkpeye](https://github.com/punkpeye/awesome-mcp-servers)** (**[website](https://glama.ai/mcp/servers)**) - A curated list of MCP servers by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Awesome MCP Servers by wong2](https://github.com/wong2/awesome-mcp-servers)** (**[website](https://mcpservers.org)**) - A curated list of MCP servers by **[wong2](https://github.com/wong2)**\n- **[Awesome Remote MCP Servers by JAW9C](https://github.com/jaw9c/awesome-remote-mcp-servers)** - A curated list of **remote** MCP servers, including their authentication support by **[JAW9C](https://github.com/jaw9c)**\n- **[Discord Server](https://glama.ai/mcp/discord)** ‚Äì A community discord server dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Discord Server (ModelContextProtocol)](https://discord.gg/jHEGxQu2a5)** ‚Äì Connect with developers, share insights, and collaborate on projects in an active Discord community dedicated to the Model Context Protocol by **[Alex Andru](https://github.com/QuantGeekDev)**\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/klavis-ai/klavis/main/static/klavis-ai.png\" alt=\"Klavis Logo\" /> **[Klavis AI](https://www.klavis.ai)** - Open Source MCP Infra. Hosted MCP servers and MCP clients on Slack and Discord.\n- **[MCP Badges](https://github.com/mcpx-dev/mcp-badges)** ‚Äì Quickly highlight your MCP project with clear, eye-catching badges, by **[Ironben](https://github.com/nanbingxyz)**\n- **[MCPRepository.com](https://mcprepository.com/)** - A repository that indexes and organizes all MCP servers for easy discovery.\n- **[mcp-cli](https://github.com/wong2/mcp-cli)** - A CLI inspector for the Model Context Protocol by **[wong2](https://github.com/wong2)**\n- **[mcp-dockmaster](https://mcp-dockmaster.com)** - An Open-Sourced UI to install and manage MCP servers for Windows, Linux and macOS.\n- **[mcp-get](https://mcp-get.com)** - Command line tool for installing and managing MCP servers by **[Michael Latman](https://github.com/michaellatman)**\n- **[mcp-guardian](https://github.com/eqtylab/mcp-guardian)** - GUI application + tools for proxying / managing control of MCP servers by **[EQTY Lab](https://eqtylab.io)**\n- **[MCP Linker](https://github.com/milisp/mcp-linker)** - A cross-platform Tauri GUI tool for one-click setup and management of MCP servers, supporting Claude Desktop, Cursor, Windsurf, VS Code, Cline, and Neovim.\n- **[mcp-manager](https://github.com/zueai/mcp-manager)** - Simple Web UI to install and manage MCP servers for Claude Desktop by **[Zue](https://github.com/zueai)**\n- **[MCP Marketplace Web Plugin](https://github.com/AI-Agent-Hub/mcp-marketplace)** MCP Marketplace is a small Web UX plugin to integrate with AI applications, Support various MCP Server API Endpoint (e.g pulsemcp.com/deepnlp.org and more). Allowing user to browse, paginate and select various MCP servers by different categories. [Pypi](https://pypi.org/project/mcp-marketplace) | [Maintainer](https://github.com/AI-Agent-Hub) | [Website](http://www.deepnlp.org/store/ai-agent/mcp-server)\n- **[mcp.natoma.ai](https://mcp.natoma.ai)** ‚Äì A Hosted MCP Platform to discover, install, manage and deploy MCP servers by **[Natoma Labs](https://www.natoma.ai)**\n- **[mcp.run](https://mcp.run)** - A hosted registry and control plane to install & run secure + portable MCP Servers.\n- **[MCPHub](https://www.mcphub.com)** - Website to list high quality MCP servers and reviews by real users. Also provide online chatbot for popular LLM models with MCP server support.\n- **[MCP Router](https://mcp-router.net)** ‚Äì Free Windows and macOS app that simplifies MCP management while providing seamless app authentication and powerful log visualization by **[MCP Router](https://github.com/mcp-router/mcp-router)**\n- **[MCP Servers Hub](https://github.com/apappascs/mcp-servers-hub)** (**[website](https://mcp-servers-hub-website.pages.dev/)**) - A curated list of MCP servers by **[apappascs](https://github.com/apappascs)**\n- **[MCPServers.com](https://mcpservers.com)** - A growing directory of high-quality MCP servers with clear setup guides for a variety of MCP clients. Built by the team behind the **[Highlight MCP client](https://highlightai.com/)**\n- **[MCP Servers Rating and User Reviews](http://www.deepnlp.org/store/ai-agent/mcp-server)** - Website to rate MCP servers, write authentic user reviews, and [search engine for agent & mcp](http://www.deepnlp.org/search/agent)\n- **[MCP Sky](https://bsky.app/profile/brianell.in/feed/mcp)** - Bluesky feed for MCP related news and discussion by **[@brianell.in](https://bsky.app/profile/brianell.in)**\n- **[MCP X Community](https://x.com/i/communities/1861891349609603310)** ‚Äì A X community for MCP by **[Xiaoyi](https://x.com/chxy)**\n- **[MCPHub](https://github.com/Jeamee/MCPHub-Desktop)** ‚Äì An Open Source macOS & Windows GUI Desktop app for discovering, installing and managing MCP servers by **[Jeamee](https://github.com/jeamee)**\n- **[mcpm](https://github.com/pathintegral-institute/mcpm.sh)** ([website](https://mcpm.sh)) - MCP Manager (MCPM) is a Homebrew-like service for managing Model Context Protocol (MCP) servers across clients by **[Pathintegral](https://github.com/pathintegral-institute)**\n- **[MCPVerse](https://mcpverse.dev)** - A portal for creating & hosting authenticated MCP servers and connecting to them securely.\n- **[MCP Servers Search](https://github.com/atonomus/mcp-servers-search)** - An MCP server that provides tools for querying and discovering available MCP servers from this list.\n- **[Search MCP Server](https://github.com/krzysztofkucmierz/search-mcp-server)** - Recommends the most relevant MCP servers based on the client's query by searching this README file.\n- **[MCPWatch](https://github.com/kapilduraphe/mcp-watch)** - A comprehensive security scanner for Model Context Protocol (MCP) servers that detects vulnerabilities and security issues in your MCP server implementations.\n- <img height=\"12\" width=\"12\" src=\"https://mkinf.io/favicon-lilac.png\" alt=\"mkinf Logo\" /> **[mkinf](https://mkinf.io)** - An Open Source registry of hosted MCP Servers to accelerate AI agent workflows.\n- **[Open-Sourced MCP Servers Directory](https://github.com/chatmcp/mcp-directory)** - A curated list of MCP servers by **[mcpso](https://mcp.so)**\n- <img height=\"12\" width=\"12\" src=\"https://opentools.com/favicon.ico\" alt=\"OpenTools Logo\" /> **[OpenTools](https://opentools.com)** - An open registry for finding, installing, and building with MCP servers by **[opentoolsteam](https://github.com/opentoolsteam)**\n- **[PulseMCP](https://www.pulsemcp.com)** ([API](https://www.pulsemcp.com/api)) - Community hub & weekly newsletter for discovering MCP servers, clients, articles, and news by **[Tadas Antanavicius](https://github.com/tadasant)**, **[Mike Coughlin](https://github.com/macoughl)**, and **[Ravina Patel](https://github.com/ravinahp)**\n- **[r/mcp](https://www.reddit.com/r/mcp)** ‚Äì A Reddit community dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[r/modelcontextprotocol](https://www.reddit.com/r/modelcontextprotocol)** ‚Äì A Model Context Protocol community Reddit page - discuss ideas, get answers to your questions, network with like-minded people, and showcase your projects! by **[Alex Andru](https://github.com/QuantGeekDev)**\n- **[MCP.ing](https://mcp.ing/)** - A list of MCP services for discovering MCP servers in the community and providing a convenient search function for MCP services by **[iiiusky](https://github.com/iiiusky)**\n- **[MCP Hunt](https://mcp-hunt.com)** - Realtime platform for discovering trending MCP servers with momentum tracking, upvoting, and community discussions - like Product Hunt meets Reddit for MCP\n- **[Smithery](https://smithery.ai/)** - A registry of MCP servers to find the right tools for your LLM agents by **[Henry Mao](https://github.com/calclavia)**\n- **[Toolbase](https://gettoolbase.ai)** - Desktop application that manages tools and MCP servers with just a few clicks - no coding required by **[gching](https://github.com/gching)**\n- **[ToolHive](https://github.com/StacklokLabs/toolhive)** - A lightweight utility designed to simplify the deployment and management of MCP servers, ensuring ease of use, consistency, and security through containerization by **[StacklokLabs](https://github.com/StacklokLabs)**\n- **[NetMind](https://www.netmind.ai/AIServices)** - Access powerful AI services via simple APIs or MCP servers to supercharge your productivity.\n\n## üöÄ Getting Started\n\n### Using MCP Servers in this Repository\nTypeScript-based servers in this repository can be used directly with `npx`.\n\nFor example, this will start the [Memory](src/memory) server:\n```sh\nnpx -y @modelcontextprotocol/server-memory\n```\n\nPython-based servers in this repository can be used directly with [`uvx`](https://docs.astral.sh/uv/concepts/tools/) or [`pip`](https://pypi.org/project/pip/). `uvx` is recommended for ease of use and setup.\n\nFor example, this will start the [Git](src/git) server:\n```sh\n# With uvx\nuvx mcp-server-git\n\n# With pip\npip install mcp-server-git\npython -m mcp_server_git\n```\n\nFollow [these](https://docs.astral.sh/uv/getting-started/installation/) instructions to install `uv` / `uvx` and [these](https://pip.pypa.io/en/stable/installation/) to install `pip`.\n\n### Using an MCP Client\nHowever, running a server on its own isn't very useful, and should instead be configured into an MCP client. For example, here's the Claude Desktop configuration to use the above server:\n\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-memory\"]\n    }\n  }\n}\n```\n\nAdditional examples of using the Claude Desktop as an MCP client might look like:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/path/to/allowed/files\"]\n    },\n    \"git\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-git\", \"--repository\", \"path/to/git/repo\"]\n    },\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    },\n    \"postgres\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\", \"postgresql://localhost/mydb\"]\n    }\n  }\n}\n```\n\n## üõ†Ô∏è Creating Your Own Server\n\nInterested in creating your own MCP server? Visit the official documentation at [modelcontextprotocol.io](https://modelcontextprotocol.io/introduction) for comprehensive guides, best practices, and technical details on implementing MCP servers.\n\n## ü§ù Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributing to this repository.\n\n## üîí Security\n\nSee [SECURITY.md](SECURITY.md) for reporting security vulnerabilities.\n\n## üìú License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## üí¨ Community\n\n- [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions)\n\n## ‚≠ê Support\n\nIf you find MCP servers useful, please consider starring the repository and contributing new servers or improvements!\n\n---\n\nManaged by Anthropic, but built together with the community. The Model Context Protocol is open source and we encourage everyone to contribute their own servers and improvements!",
      "npm_url": "https://www.npmjs.com/package/servers",
      "npm_downloads": 2441,
      "keywords": [
        "automation",
        "web",
        "modelcontextprotocol",
        "automation web",
        "browser automation",
        "modelcontextprotocol servers"
      ],
      "category": "browser-automation"
    },
    "ndthanhdev--mcp-browser-kit": {
      "owner": "ndthanhdev",
      "name": "mcp-browser-kit",
      "url": "https://github.com/ndthanhdev/mcp-browser-kit",
      "imageUrl": "",
      "description": "An MCP Server that enables AI assistants to interact with your local browsers.",
      "stars": 34,
      "forks": 6,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-28T17:13:06Z",
      "readme_content": "# MCP Browser Kit\n\n[![Build and Test](https://github.com/ndthanhdev/mcp-browser-kit/actions/workflows/build-test.yml/badge.svg)](https://github.com/ndthanhdev/mcp-browser-kit/actions/workflows/build-test.yml)\n[![Checked with Biome](https://img.shields.io/badge/Checked_with-Biome-60a5fa?style=flat&logo=biome)](https://biomejs.dev)\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/ndthanhdev/mcp-browser-kit)](https://archestra.ai/mcp-catalog/ndthanhdev__mcp-browser-kit)\n\nAn MCP Server that enables AI assistants to interact with your local browsers.\n\n> **Note**: Consider using a separate browser profile or dedicated browser instance with this MCP to prevent sensitive data from being unintentionally exposed to AI model providers.\n\nhttps://github.com/user-attachments/assets/1fbf87fd-06d1-42bf-a06f-cc2bbdf375a8\n\n## Usage\n\n1. Add MCP Browser Kit to your MCP Client:\n\n   ```json\n   {\n   \t\"mcpServers\": {\n   \t\t\"browser-kit\": {\n   \t\t\t\"command\": \"npx\",\n   \t\t\t\"args\": [\"@mcp-browser-kit/server\"]\n   \t\t}\n   \t}\n   }\n   ```\n\n2. Choose the right extension build for your browser:\n\n   - Check the [Compatibility table](#compatibility-table) below to see which build (M2 or M3) is compatible with your browser\n   - Note that M2 builds offer more functionality than M3 builds, so prefer M2 if your browser supports both\n\n3. Download and unzip the latest compatible build from [The Latest Release](https://github.com/ndthanhdev/mcp-browser-kit/releases/latest).\n\n4. [Load the extension](#load-extension) into a compatible browser and enable it.\n\n5. Refresh open tabs to ensure extension scripts are loaded.\n\n6. Start messaging on your MCP Client:\n\n   ```\n   Use browser-kit, star the last open GitHub repo on my browser\n   ```\n\n## Compatibility table\n\n> The M2 build supports more functionalities than the M3 build.\n\n> Extension file name patterns:\n>\n> - M2 build: `mcp_browser_kit_m2-[version].zip` (e.g., `mcp_browser_kit_m2-5.0.0.zip`)\n> - M3 build: `mcp_browser_kit_m3-[version].zip` (e.g., `mcp_browser_kit_m3-5.0.0.zip`)\n\n| Browser | M2 build | M3 build |\n| ------- | -------- | -------- |\n| Chrome  | ‚ùå       | ‚úÖ       |\n| Brave   | ‚úÖ       | ‚úÖ       |\n| Edge    | ‚úÖ       | ‚úÖ       |\n| Firefox | ‚úÖ       | ‚ùå       |\n| Safari  | ‚úÖ       | ‚ùå       |\n\n## Load Extension\n\n- Chromium-based browsers (Chrome, Brave, Edge)\n  1.  Open [chrome://extensions/](chrome://extensions/)\n  2.  Enable `Developer mode`\n  3.  Click `Load unpacked`\n  4.  Select the unpacked extension folder\n- Firefox\n  1.  Open [about:debugging#/runtime/this-firefox](about:debugging#/runtime/this-firefox)\n  2.  Click `Load Temporary Add-on`\n  3.  Select the `manifest.json` file in the unpacked extension folder\n- Safari\n  1.  Open `Develop > Show Extension Builder`\n  2.  Click `+` and select `Add Extension`\n  3.  Select the unpacked extension folder\n  4.  Click `Install` to install the extension\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "browser",
        "browsers",
        "mcp browser",
        "browser automation",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "newbeb--stealth-browser-mcp": {
      "owner": "newbeb",
      "name": "stealth-browser-mcp",
      "url": "https://github.com/newbeb/stealth-browser-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/newbeb.webp",
      "description": "Navigate websites and capture screenshots while bypassing bot detection systems using advanced stealth techniques. Modifies browser fingerprints to disguise web interactions as regular user traffic.",
      "stars": 14,
      "forks": 7,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-23T14:33:18Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/newbeb-stealth-browser-mcp-badge.png)](https://mseep.ai/app/newbeb-stealth-browser-mcp)\n\n# Stealth Browser MCP Server\n\nAn [MCP (Model Context Protocol)](https://modelcontextprotocol.ai) server that provides stealth browser capabilities using Playwright with anti-detection techniques. This server allows MCP clients to navigate to websites and take screenshots while evading common bot detection systems.\n\n<a href=\"https://glama.ai/mcp/servers/efxcqjoq01\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/efxcqjoq01/badge\" alt=\"Stealth Browser Server MCP server\" />\n</a>\n\n## Features\n\n- **Stealth Mode**: Uses [puppeteer-extra-plugin-stealth](https://github.com/berstend/puppeteer-extra/tree/master/packages/puppeteer-extra-plugin-stealth) with [playwright-extra](https://github.com/berstend/puppeteer-extra/tree/master/packages/playwright-extra) to bypass bot detections\n  - Modifies browser fingerprints to appear as regular user traffic\n  - Handles WebGL, canvas, font, plugin and other browser fingerprinting techniques\n- **Screenshot Tool**: Take full-page or element-specific screenshots of any website\n  - Supports both headless (default) and visible browser modes\n- **MCP Integration**: Exposes browser capabilities via Model Context Protocol\n\n## Installation\n\n```bash\n# Install dependencies\nbun install\n```\n\n## Usage\n\n```bash\n# Run the MCP server\nbun start\n\n# Development mode\nbun dev\n\n# Inspect available tools\nbun inspect\n```\n\n## Available Tools\n\n### screenshot\n\nTakes screenshots of webpages using a stealth browser.\n\nParameters:\n- `url` (string, required): The URL to navigate to\n- `fullPage` (boolean, optional, default: true): Whether to capture the entire page\n- `selector` (string, optional): CSS selector to capture only a specific element\n- `headless` (boolean, optional, default: true): Whether to run in headless mode or visible browser mode\n\n## Technical Details\n\nThis project uses:\n- [FastMCP](https://github.com/punkpeye/fastmcp) for the MCP server implementation\n- [Playwright](https://playwright.dev/) for browser automation\n- [playwright-extra](https://github.com/berstend/puppeteer-extra/tree/master/packages/playwright-extra) for plugin support\n- [puppeteer-extra-plugin-stealth](https://github.com/berstend/puppeteer-extra/tree/master/packages/puppeteer-extra-plugin-stealth) for avoiding bot detection\n\n---\n\nThis project was built with [Bun](https://bun.sh), a fast all-in-one JavaScript runtime.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "browser",
        "automation",
        "scraping",
        "browser automation",
        "stealth browser",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "nicholmikey--chrome-tools-MCP": {
      "owner": "nicholmikey",
      "name": "chrome-tools-MCP",
      "url": "https://github.com/nicholmikey/chrome-tools-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/nicholmikey.webp",
      "description": "Control Chrome tabs, execute JavaScript, capture screenshots, and monitor network traffic. Enhance browser automation capabilities by integrating directly with Chrome's DevTools Protocol.",
      "stars": 48,
      "forks": 11,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T09:13:53Z",
      "readme_content": "# Chrome Tools MCP Server\n\nAn MCP server that provides tools for interacting with Chrome through its DevTools Protocol. This server enables remote control of Chrome tabs, including executing JavaScript, capturing screenshots, monitoring network traffic, and more.\n\n## Why use an MCP server like this?\nThis type of MCP Server is useful When you need to manually configure your browser to be in a certain state before you let an AI tool like Cline poke at it. You can also use this tool to listen to and pull network events into its context. \n\n## Features\n\n- List Chrome tabs\n- Execute JavaScript in tabs\n- Capture screenshots\n- Monitor network traffic\n- Navigate tabs to URLs\n- Query DOM elements\n- Click elements with console output capture\n\n## Installation\n\n```bash\nnpm install @nicholmikey/chrome-tools\n```\n\n## Configuration\n\nThe server can be configured through environment variables in your MCP settings:\n\n```json\n{\n  \"chrome-tools\": {\n    \"command\": \"node\",\n    \"args\": [\"path/to/chrome-tools/dist/index.js\"],\n    \"env\": {\n      \"CHROME_DEBUG_URL\": \"http://localhost:9222\",\n      \"CHROME_CONNECTION_TYPE\": \"direct\",\n      \"CHROME_ERROR_HELP\": \"custom error message\"\n    }\n  }\n}\n```\n\n### Environment Variables\n\n- `CHROME_DEBUG_URL`: The URL where Chrome's remote debugging interface is available (default: http://localhost:9222)\n- `CHROME_CONNECTION_TYPE`: Connection type identifier for logging (e.g., \"direct\", \"ssh-tunnel\", \"docker\")\n- `CHROME_ERROR_HELP`: Custom error message shown when connection fails\n\n## Setup Guide\n\n### Native Setup (Windows/Mac/Linux)\n\n1. Launch Chrome with remote debugging enabled:\n   ```bash\n   # Windows\n   \"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\" --remote-debugging-port=9222\n\n   # Mac\n   /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222\n\n   # Linux\n   google-chrome --remote-debugging-port=9222\n   ```\n\n2. Configure MCP settings:\n   ```json\n   {\n     \"env\": {\n       \"CHROME_DEBUG_URL\": \"http://localhost:9222\",\n       \"CHROME_CONNECTION_TYPE\": \"direct\"\n     }\n   }\n   ```\n\n### WSL Setup\n\nWhen running in WSL, you'll need to set up an SSH tunnel to connect to Chrome running on Windows:\n\n1. Launch Chrome on Windows with remote debugging enabled\n2. Create an SSH tunnel:\n   ```bash\n   ssh -N -L 9222:localhost:9222 windowsuser@host\n   ```\n3. Configure MCP settings:\n   ```json\n   {\n     \"env\": {\n       \"CHROME_DEBUG_URL\": \"http://localhost:9222\",\n       \"CHROME_CONNECTION_TYPE\": \"ssh-tunnel\",\n       \"CHROME_ERROR_HELP\": \"Make sure the SSH tunnel is running: ssh -N -L 9222:localhost:9222 windowsuser@host\"\n     }\n   }\n   ```\n\n### Docker Setup\n\nWhen running Chrome in Docker:\n\n1. Launch Chrome container:\n   ```bash\n   docker run -d --name chrome -p 9222:9222 chromedp/headless-shell\n   ```\n\n2. Configure MCP settings:\n   ```json\n   {\n     \"env\": {\n       \"CHROME_DEBUG_URL\": \"http://localhost:9222\",\n       \"CHROME_CONNECTION_TYPE\": \"docker\"\n     }\n   }\n   ```\n\n## Tools\n\n### list_tabs\nLists all available Chrome tabs.\n\n### execute_script\nExecutes JavaScript code in a specified tab.\nParameters:\n- `tabId`: ID of the Chrome tab\n- `script`: JavaScript code to execute\n\n### capture_screenshot\nCaptures a screenshot of a specified tab, automatically optimizing it for AI model consumption.\nParameters:\n- `tabId`: ID of the Chrome tab\n- `format`: Image format (jpeg/png) - Note: This is only for initial capture. Final output uses WebP with PNG fallback\n- `quality`: JPEG quality (1-100) - Note: For initial capture only\n- `fullPage`: Capture full scrollable page\n\nImage Processing:\n1. WebP Optimization (Primary Format):\n   - First attempt: WebP with quality 80 and high compression effort\n   - Second attempt: WebP with quality 60 and near-lossless compression if first attempt exceeds 1MB\n2. PNG Fallback:\n   - Only used if WebP processing fails\n   - Includes maximum compression and color palette optimization\n3. Size Constraints:\n   - Maximum dimensions: 900x600 (maintains aspect ratio)\n   - Maximum file size: 1MB\n   - Progressive size reduction if needed\n\n### capture_network_events\nMonitors and captures network events from a specified tab.\nParameters:\n- `tabId`: ID of the Chrome tab\n- `duration`: Duration in seconds to capture\n- `filters`: Optional type and URL pattern filters\n\n### load_url\nNavigates a tab to a specified URL.\nParameters:\n- `tabId`: ID of the Chrome tab\n- `url`: URL to load\n\n### query_dom_elements\nQueries and retrieves detailed information about DOM elements matching a CSS selector.\nParameters:\n- `tabId`: ID of the Chrome tab\n- `selector`: CSS selector to find elements\nReturns:\n- Array of DOM elements with properties including:\n  - `nodeId`: Unique identifier for the node\n  - `tagName`: HTML tag name\n  - `textContent`: Text content of the element\n  - `attributes`: Object containing all element attributes\n  - `boundingBox`: Position and dimensions of the element\n  - `isVisible`: Whether the element is visible\n  - `ariaAttributes`: ARIA attributes for accessibility\n\n### click_element\nClicks on a DOM element and captures any console output triggered by the click.\nParameters:\n- `tabId`: ID of the Chrome tab\n- `selector`: CSS selector to find the element to click\nReturns:\n- Object containing:\n  - `message`: Success/failure message\n  - `consoleOutput`: Array of console messages triggered by the click\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "browser",
        "chrome",
        "browser automation",
        "chrome tools",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "operative_sh--web-eval-agent": {
      "owner": "operative_sh",
      "name": "web-eval-agent",
      "url": "https://github.com/Operative-Sh/web-eval-agent",
      "imageUrl": "",
      "description": "An MCP Server that autonomously debugs web applications with browser-use browser agents",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "scraping",
        "browser",
        "browser automation",
        "automation web",
        "browser agents"
      ],
      "category": "browser-automation"
    },
    "pietrozullo--browser-use-mcp": {
      "owner": "pietrozullo",
      "name": "browser-use-mcp",
      "url": "https://github.com/pietrozullo/browser-use-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/pietrozullo.webp",
      "description": "Automate web browsing tasks by using natural language commands to navigate websites, fill out forms, and click buttons. Integrates with language models to facilitate programmatic control of web interactions and data extraction.",
      "stars": 3,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-01T09:33:00Z",
      "readme_content": "<div align=\"center\">\n  <br />\n  <br />\n  \n  <br />\n  <br />\n</div>\n\n# Browser Use MCP Server\n\nA FastMCP server that enables browser automation through natural language commands. This server allows Language Models to browse the web, fill out forms, click buttons, and perform other web-based tasks via a simple API.\n\n## Quick Start\n\n### 1. Install the package\n\nInstall with a specific provider (e.g., OpenAI)\n\n```bash\npip install -e \"git+https://github.com/yourusername/browser-use-mcp.git#egg=browser-use-mcp[openai]\"\n```\nOr install all providers\n```bash\n\npip install -e \"git+https://github.com/yourusername/browser-use-mcp.git#egg=browser-use-mcp[all-providers]\"\n```\nInstall Playwright browsers\n```bash\nplaywright install chromium\n```\n\n### 2. Configure your MCP client\n\nAdd the browser-use-mcp server to your MCP client configuration:\n\n```javascript\n{\n    \"mcpServers\": {\n        \"browser-use-mcp\": {\n            \"command\": \"browser-use-mcp\",\n            \"args\": [\"--model\", \"gpt-4o\"],\n            \"env\": {\n                \"OPENAI_API_KEY\": \"your-openai-api-key\",  // Or any other provider's API key\n                \"DISPLAY\": \":0\"  // For GUI environments\n            }\n        }\n    }\n}\n```\n\nReplace `\"your-openai-api-key\"` with your actual API key or use an environment variable reference like `process.env.OPENAI_API_KEY`.\n\n### 3. Use it with your favorite MCP client\n\n#### Example using mcp-use with Python\n\n```python\nimport asyncio\nimport os\nfrom dotenv import load_dotenv\nfrom langchain_openai import ChatOpenAI\nfrom mcp_use import MCPAgent, MCPClient\n\nasync def main():\n    # Load environment variables\n    load_dotenv()\n\n    # Create MCPClient from config file\n    client = MCPClient(\n        config={\n            \"mcpServers\": {\n                \"browser-use-mcp\": {\n                    \"command\": \"browser-use-mcp\",\n                    \"args\": [\"--model\", \"gpt-4o\"],\n                    \"env\": {\n                        \"OPENAI_API_KEY\": os.getenv(\"OPENAI_API_KEY\"),\n                        \"DISPLAY\": \":0\",\n                    },\n                }\n            }\n        }\n    )\n\n    # Create LLM\n    llm = ChatOpenAI(model=\"gpt-4o\")\n\n    # Create agent with the client\n    agent = MCPAgent(llm=llm, client=client, max_steps=30)\n\n    # Run the query\n    result = await agent.run(\n        \"\"\"\n        Navigate to https://github.com, search for \"browser-use-mcp\", and summarize the project.\n        \"\"\",\n        max_steps=30,\n    )\n    print(f\"\\nResult: {result}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n#### Using Claude for Desktop\n\n1. Open Claude for Desktop\n2. Go to Settings ‚Üí Experimental features\n3. Enable Claude API Beta and OpenAPI schema for API\n4. Add the following configuration to your Claude Desktop config file:\n   - Mac: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%AppData%\\Claude\\claude_desktop_config.json`\n\n```json\n{\n    \"mcpServers\": {\n        \"browser-use\": {\n            \"command\": \"browser-use-mcp\",\n            \"args\": [\"--model\", \"claude-3-opus-20240229\"]\n        }\n    }\n}\n```\n\n5. Start a new conversation with Claude and ask it to perform web tasks\n\n## Supported LLM Providers\n\nThe following LLM providers are supported for browser automation:\n\n| Provider | API Key Environment Variable |\n|----------|----------------------------|\n| OpenAI | `OPENAI_API_KEY` |\n| Anthropic | `ANTHROPIC_API_KEY` |\n| Google | `GOOGLE_API_KEY` |\n| Cohere | `COHERE_API_KEY` |\n| Mistral AI | `MISTRAL_API_KEY` |\n| Groq | `GROQ_API_KEY` |\n| Together AI | `TOGETHER_API_KEY` |\n| AWS Bedrock | `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` |\n| Fireworks | `FIREWORKS_API_KEY` |\n| Azure OpenAI | `AZURE_OPENAI_API_KEY` and `AZURE_OPENAI_ENDPOINT` |\n| Vertex AI | `GOOGLE_APPLICATION_CREDENTIALS` |\n| NVIDIA | `NVIDIA_API_KEY` |\n| AI21 | `AI21_API_KEY` |\n| Databricks | `DATABRICKS_HOST` and `DATABRICKS_TOKEN` |\n| IBM watsonx.ai | `WATSONX_API_KEY` |\n| xAI | `XAI_API_KEY` |\n| Upstage | `UPSTAGE_API_KEY` |\n| Hugging Face | `HUGGINGFACE_API_KEY` |\n| Ollama | `OLLAMA_BASE_URL` |\n| Llama.cpp | `LLAMA_CPP_SERVER_URL` |\n\nFor more information check out: https://python.langchain.com/docs/integrations/chat/\n\nYou can create a `.env` file in the project directory with your API keys:\n\n```\nOPENAI_API_KEY=your_openai_key_here\n# Or any other provider key\n```\n\n## Troubleshooting\n\n- **API Key Issues**: Ensure your API key is correctly set in your environment variables or `.env` file.\n- **Provider Not Found**: Make sure you've installed the required provider package.\n- **Browser Automation Errors**: Check that Playwright is correctly installed with `playwright install chromium`.\n- **Model Selection**: If you get errors about an invalid model, try using the `--model` flag to specify a valid model for your provider.\n- **Debug Mode**: Use `--debug` to enable more detailed logging that can help identify issues.\n- **MCP Client Configuration**: Make sure your MCP client is correctly configured with the right command and environment variables.\n\n## License\n\nMIT # browser-use-mcp",
      "npm_url": "https://www.npmjs.com/package/browser-use-mcp",
      "npm_downloads": 620,
      "keywords": [
        "automation",
        "scraping",
        "browser",
        "browser automation",
        "automation web",
        "automate web"
      ],
      "category": "browser-automation"
    },
    "pim97--mcp-server-scrappey": {
      "owner": "pim97",
      "name": "mcp-server-scrappey",
      "url": "https://github.com/pim97/mcp-server-scrappey",
      "imageUrl": "/freedevtools/mcp/pfp/pim97.webp",
      "description": "Integrate AI models with Scrappey's web automation platform, enabling browser session management, HTTP requests, and automated interactions with web pages while handling anti-bot protections.",
      "stars": 0,
      "forks": 2,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-21T13:37:39Z",
      "readme_content": "# Scrappey MCP Server\n\nA Model Context Protocol (MCP) server for interacting with Scrappey.com's web automation and scraping capabilities. Try it out directly at [smithery.ai/server/@pim97/mcp-server-scrappey](https://smithery.ai/server/@pim97/mcp-server-scrappey).\n\n## Overview\n\nThis MCP server provides a bridge between AI models and Scrappey's web automation platform, allowing you to:\n- Create and manage browser sessions\n- Send HTTP requests through Scrappey's infrastructure\n- Execute browser actions (clicking, typing, scrolling, etc.)\n- Handle various anti-bot protections automatically\n\n## Setup\n\n1. Get your Scrappey API key from [Scrappey.com](https://scrappey.com)\n2. Set up your environment variable:\n```bash\nSCRAPPEY_API_KEY=your_api_key_here\n```\n\n## Available Tools\n\n### 1. Create Session (`scrappey_create_session`)\nCreates a new browser session that persists cookies and other state.\n\n```json\n{\n  \"proxy\": \"http://user:pass@ip:port\"  // Optional: Custom proxy, leave empty for default\n}\n```\n\n### 2. Destroy Session (`scrappey_destroy_session`)\nProperly closes a browser session.\n\n```json\n{\n  \"session\": \"session_id_here\"  // Required: The session ID to destroy\n}\n```\n\n### 3. Send Request (`scrappey_request`)\nSend HTTP requests through the Scrappey infrastructure.\n\n```json\n{\n  \"cmd\": \"request.get\",  // Required: request.get, request.post, etc.\n  \"url\": \"https://example.com\",  // Required: Target URL\n  \"session\": \"session_id_here\",  // Required: Session ID to use\n  \"postData\": \"key=value\",  // Optional: POST data\n  \"customHeaders\": {  // Optional: Custom headers\n    \"User-Agent\": \"custom-agent\"\n  }\n}\n```\n\n### 4. Browser Actions (`scrappey_browser_action`)\nExecute browser automation actions.\n\n```json\n{\n  \"session\": \"session_id_here\",  // Required: Session ID to use\n  \"browserActions\": [  // Required: Array of actions to perform\n    {\n      \"type\": \"click\",  // Action type: click, hover, type, scroll, wait\n      \"cssSelector\": \".button\",  // CSS selector for element\n      \"text\": \"Hello\",  // Text to type (for type action)\n      \"wait\": 1000  // Wait time in ms\n    }\n  ]\n}\n```\n\n## Typical Workflow\n\n1. Create a session:\n```json\n{\n  \"name\": \"scrappey_create_session\"\n}\n```\n\n2. Use the returned session ID for subsequent requests:\n```json\n{\n  \"name\": \"scrappey_request\",\n  \"cmd\": \"request.get\",\n  \"url\": \"https://example.com\",\n  \"session\": \"returned_session_id\"\n}\n```\n\n3. Perform browser actions if needed:\n```json\n{\n  \"name\": \"scrappey_browser_action\",\n  \"session\": \"returned_session_id\",\n  \"browserActions\": [\n    {\n      \"type\": \"click\",\n      \"cssSelector\": \"#login-button\"\n    },\n    {\n      \"type\": \"type\",\n      \"cssSelector\": \"#username\",\n      \"text\": \"myuser\"\n    }\n  ]\n}\n```\n\n4. Clean up by destroying the session when done:\n```json\n{\n  \"name\": \"scrappey_destroy_session\",\n  \"session\": \"returned_session_id\"\n}\n```\n\n## Features\n\n- Session persistence for maintaining state\n- Automatic anti-bot protection handling\n- Support for custom proxies\n- Browser automation capabilities\n- HTTP request methods (GET, POST, PUT, DELETE, PATCH)\n- Custom headers and cookies support\n\n## Best Practices\n\n1. Always destroy sessions when you're done with them\n2. Reuse sessions when making multiple requests to the same site\n3. Use appropriate wait times between actions for more human-like behavior\n4. Check if a session exists before using it\n\n## Error Handling\n\nThe server will return error messages with details when something goes wrong. Common errors include:\n- Invalid session IDs\n- Network timeouts\n- Invalid selectors for browser actions\n- Anti-bot protection failures\n\n## Resources\n\n- [Try it on Smithery](https://smithery.ai/server/@pim97/mcp-server-scrappey)\n- [Scrappey Documentation](https://wiki.scrappey.com/getting-started)\n- [Get Scrappey API Key](https://scrappey.com)\n\n## License\n\nMIT License\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "scraping",
        "scrappey",
        "automation",
        "scrappey web",
        "automation web",
        "browser automation"
      ],
      "category": "browser-automation"
    },
    "pvinis--mcp-playwright-stealth": {
      "owner": "pvinis",
      "name": "mcp-playwright-stealth",
      "url": "https://github.com/pvinis/mcp-playwright-stealth",
      "imageUrl": "/freedevtools/mcp/pfp/pvinis.webp",
      "description": "Automates browser interactions, enabling LLMs to navigate web pages, capture screenshots, generate test scripts, and execute JavaScript in real-time.",
      "stars": 13,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-24T11:49:30Z",
      "readme_content": "# Playwright MCP Server üé≠\n\n[![smithery badge](https://smithery.ai/badge/@executeautomation/playwright-mcp-server)](https://smithery.ai/server/@executeautomation/playwright-mcp-server)\n\nA Model Context Protocol server that provides browser automation capabilities using Playwright. This server enables LLMs to interact with web pages, take screenshots, generate test code, web scraps the page and execute JavaScript in a real browser environment.\n\n<a href=\"https://glama.ai/mcp/servers/yh4lgtwgbe\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/yh4lgtwgbe/badge\" alt=\"mcp-playwright MCP server\" /></a>\n\n## Screenshot\n\n\n## [Documentation](https://executeautomation.github.io/mcp-playwright/) | [API reference](https://executeautomation.github.io/mcp-playwright/docs/playwright-web/Supported-Tools)\n\n## Installation\n\nYou can install the package using either npm, mcp-get, or Smithery:\n\nUsing npm:\n```bash\nnpm install -g @executeautomation/playwright-mcp-server\n```\n\nUsing mcp-get:\n```bash\nnpx @michaellatman/mcp-get@latest install @executeautomation/playwright-mcp-server\n```\nUsing Smithery\n\nTo install Playwright MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@executeautomation/playwright-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @executeautomation/playwright-mcp-server --client claude\n```\n#### Installation in VS Code\n\nInstall the Playwright MCP server in VS Code using one of these buttons:\n\n<!--\n// Generate using?:\nconst config = JSON.stringify({ name: 'playwright', command: 'npx', args: [\"-y\", \"@executeautomation/playwright-mcp-server\"] });\nconst urlForWebsites = `vscode:mcp/install?${encodeURIComponent(config)}`;\n// Github markdown does not allow linking to `vscode:` directly, so you can use our redirect:\nconst urlForGithub = `https://insiders.vscode.dev/redirect?url=${encodeURIComponent(urlForWebsites)}`;\n-->\n\n[<img alt=\"Install in VS Code Insiders\" src=\"https://img.shields.io/badge/VS_Code_Insiders-VS_Code_Insiders?style=flat-square&label=Install%20Server&color=24bfa5\">](https://insiders.vscode.dev/redirect?url=vscode-insiders%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522%2540executeautomation%252Fplaywright-mcp-server%2522%255D%257D)\n\nAlternatively, you can install the Playwright MCP server using the VS Code CLI:\n\n```bash\n# For VS Code\ncode --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@executeautomation/playwright-mcp-server\"]}'\n```\n\n```bash\n# For VS Code Insiders\ncode-insiders --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@executeautomation/playwright-mcp-server\"]}'\n```\n\nAfter installation, the ExecuteAutomation Playwright MCP server will be available for use with your GitHub Copilot agent in VS Code.\n\n## Configuration to use Playwright Server\nHere's the Claude Desktop configuration to use the Playwright server:\n\n```json\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@executeautomation/playwright-mcp-server\"]\n    }\n  }\n}\n```\n\n## Testing\n\nThis project uses Jest for testing. The tests are located in the `src/__tests__` directory.\n\n### Running Tests\n\nYou can run the tests using one of the following commands:\n\n```bash\n# Run tests using the custom script (with coverage)\nnode run-tests.cjs\n\n# Run tests using npm scripts\nnpm test           # Run tests without coverage\nnpm run test:coverage  # Run tests with coverage\nnpm run test:custom    # Run tests with custom script (same as node run-tests.cjs)\n```\n\nThe test coverage report will be generated in the `coverage` directory.\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=executeautomation/mcp-playwright&type=Date)](https://star-history.com/#executeautomation/mcp-playwright&Date)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "web",
        "scripts",
        "browser automation",
        "automation web",
        "automates browser"
      ],
      "category": "browser-automation"
    },
    "raccoonaihq--raccoonai-mcp-server": {
      "owner": "raccoonaihq",
      "name": "raccoonai-mcp-server",
      "url": "https://github.com/raccoonaihq/raccoonai-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/raccoonaihq.webp",
      "description": "Enables web browsing, data extraction, and automation of complex web tasks using the LAM API. Automates interactions with websites by performing actions like filling out forms and navigating UI elements.",
      "stars": 0,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-13T10:40:11Z",
      "readme_content": "# Raccoon AI MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@raccoonaihq/raccoonai-mcp-server)](https://smithery.ai/server/@raccoonaihq/raccoonai-mcp-server)\n[![MCP Spec](https://img.shields.io/badge/mcp-compatible-green)](https://modelcontextprotocol.io)\n\nRaccoon AI's Model Context Protocol (MCP) server that enables leveraging the LAM API for web browsing, data extraction, and complex web tasks automation.\n\n## What can you do with this?\n\n- Search and browse websites\n- Fill out forms and navigate UI elements\n- Extract structured data based on defined schemas\n- Handle multistep processes across websites\n\n## Prerequisites\n\nBefore using the Raccoon LAM MCP server, you'll need:\n\n- Python 3.8 or higher\n- [Claude Desktop](https://claude.ai/download) or another MCP-compatible client\n- Raccoon AI Secret Key and your Raccoon Passcode\n\n## Installation\n\n### Using Smithery\n\n```bash\nnpx -y @smithery/cli@latest install @raccoonaihq/raccoonai-mcp-server --client claude\n```\n\n\n### From source\n\n```bash\ngit clone https://github.com/raccoonaihq/raccoonai-mcp-server.git\n```\n```bash\ncd raccoonai-mcp-server\n```\n```bash\nuv pip install -e .\n```\n\n#### To configure in Claude Desktop\n\n```bash\nmcp install src/raccoonai_mcp_server/server.py -v RACCOON_SECRET_KEY=<RACCOON_SECRET_KEY> -v RACCOON_PASSCODE=<RACCOON_PASSCODE>\n```\n\nReplace `<RACCOON_SECRET_KEY>` and `<RACCOON_PASSCODE>` with your actual creds. You can find them [here](https://platform.flyingraccoon.tech).\n\n## Examples\n\nHere are some example prompts that can be used with Claude to perform a variety of web tasks:\n\n1. Can you extract product information from Amazon.com for the top-rated gaming keyboards?\n2. Find and summarize the latest news articles about renewable energy technologies.\n3. Find the 3 latest iPhone models and extract the details in a schema.\n4. Do a deepsearch and generate a detailed report on Small Language Models.\n\n## Documentation\n\nFor more information, refer to:\n- [Raccoon LAM API Documentation](https://docs.flyingraccoon.tech/reference/lam/run)\n- [Model Context Protocol Documentation](https://modelcontextprotocol.io)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "raccoonaihq",
        "scraping",
        "browser automation",
        "automation web",
        "lam api"
      ],
      "category": "browser-automation"
    },
    "random-robbie--mcp-web-browser": {
      "owner": "random-robbie",
      "name": "mcp-web-browser",
      "url": "https://github.com/random-robbie/mcp-web-browser",
      "imageUrl": "/freedevtools/mcp/pfp/random-robbie.webp",
      "description": "Advanced web browsing capabilities enabling interactions with websites through a headless browser, capable of content extraction, form interaction, and tab management.",
      "stars": 23,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-18T13:54:58Z",
      "readme_content": "# MCP Web Browser Server\n\nAn advanced web browsing server for the Model Context Protocol (MCP) powered by Playwright, enabling headless browser interactions through a flexible, secure API.\n\n<a href=\"https://glama.ai/mcp/servers/lwqlaw6k6d\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/lwqlaw6k6d/badge\" alt=\"Web Browser Server MCP server\" /></a>\n\n## üåê Features\n\n- **Headless Web Browsing**: Navigate to any website with SSL certificate validation bypass\n- **Full Page Content Extraction**: Retrieve complete HTML content, including dynamically loaded JavaScript\n- **Multi-Tab Support**: Create, manage, and switch between multiple browser tabs\n- **Advanced Web Interaction Tools**:\n  - Extract text content\n  - Click page elements\n  - Input text into form fields\n  - Capture screenshots\n  - Extract page links with filtering capabilities\n  - Scroll pages in any direction\n  - Execute JavaScript on pages\n  - Refresh pages\n  - Wait for navigation to complete\n- **Resource Management**: Automatic cleanup of unused resources after inactivity\n- **Enhanced Page Information**: Get detailed metadata about the current page\n\n## üöÄ Quick Start\n\n### Prerequisites\n\n- Python 3.10+\n- MCP SDK\n- Playwright\n\n### Installation\n\n```bash\n# Install MCP and Playwright\npip install mcp playwright\n\n# Install browser dependencies\nplaywright install\n```\n\n### Configuration for Claude Desktop\n\nAdd to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"web-browser\": {\n      \"command\": \"python\",\n      \"args\": [\n        \"/path/to/your/server.py\"\n      ]\n    }\n  }\n}\n```\n\n## üí° Usage Examples\n\n### Basic Web Navigation\n\n```python\n# Browse to a website\npage_content = browse_to(\"https://example.com\")\n\n# Extract page text\ntext_content = extract_text_content()\n\n# Extract text from a specific element\ntitle_text = extract_text_content(\"h1.title\")\n```\n\n### Web Interaction\n\n```python\n# Navigate to a page\nbrowse_to(\"https://example.com/login\")\n\n# Input text into a form\ninput_text(\"#username\", \"your_username\")\ninput_text(\"#password\", \"your_password\")\n\n# Click a login button\nclick_element(\"#login-button\")\n```\n\n### Screenshot Capture\n\n```python\n# Capture full page screenshot\nfull_page_screenshot = get_page_screenshots(full_page=True)\n\n# Capture specific element screenshot\nelement_screenshot = get_page_screenshots(selector=\"#main-content\")\n```\n\n### Link Extraction\n\n```python\n# Get all links on the page\npage_links = get_page_links()\n\n# Get links matching a pattern\nfiltered_links = get_page_links(filter_pattern=\"contact\")\n```\n\n### Multi-Tab Browsing\n\n```python\n# Create a new tab\ntab_id = create_new_tab(\"https://example.com\")\n\n# Create another tab\nanother_tab_id = create_new_tab(\"https://example.org\")\n\n# List all open tabs\ntabs = list_tabs()\n\n# Switch between tabs\nswitch_tab(tab_id)\n\n# Close a tab\nclose_tab(another_tab_id)\n```\n\n### Advanced Interactions\n\n```python\n# Scroll the page\nscroll_page(direction=\"down\", amount=\"page\")\n\n# Execute JavaScript on the page\nresult = execute_javascript(\"return document.title\")\n\n# Get detailed page information\npage_info = get_page_info()\n\n# Refresh the current page\nrefresh_page()\n\n# Wait for navigation to complete\nwait_for_navigation(timeout_ms=5000)\n```\n\n## üõ°Ô∏è Security Features\n\n- SSL certificate validation bypass\n- Secure browser context management\n- Custom user-agent configuration\n- Error handling and comprehensive logging\n- Configurable timeout settings\n- CSP bypass control\n- Protection against cookie stealing\n\n## üîß Troubleshooting\n\n### Common Issues\n\n- **SSL Certificate Errors**: Automatically bypassed\n- **Slow Page Load**: Adjust timeout in `browse_to()` method\n- **Element Not Found**: Verify selectors carefully\n- **Browser Resource Usage**: Auto-cleanup after inactivity period\n\n### Logging\n\nAll significant events are logged with detailed information for easy debugging.\n\n## üìã Tool Parameters\n\n### `browse_to(url: str, context: Optional[Any] = None)`\n- `url`: Website to navigate to\n- `context`: Optional context object (currently unused)\n\n### `extract_text_content(selector: Optional[str] = None, context: Optional[Any] = None)`\n- `selector`: Optional CSS selector to extract specific content\n- `context`: Optional context object (currently unused)\n\n### `click_element(selector: str, context: Optional[Any] = None)`\n- `selector`: CSS selector of the element to click\n- `context`: Optional context object (currently unused)\n\n### `get_page_screenshots(full_page: bool = False, selector: Optional[str] = None, context: Optional[Any] = None)`\n- `full_page`: Capture entire page screenshot\n- `selector`: Optional element to screenshot\n- `context`: Optional context object (currently unused)\n\n### `get_page_links(filter_pattern: Optional[str] = None, context: Optional[Any] = None)`\n- `filter_pattern`: Optional text pattern to filter links\n- `context`: Optional context object (currently unused)\n\n### `input_text(selector: str, text: str, context: Optional[Any] = None)`\n- `selector`: CSS selector of input element\n- `text`: Text to input\n- `context`: Optional context object (currently unused)\n\n### `create_new_tab(url: Optional[str] = None, context: Optional[Any] = None)`\n- `url`: Optional URL to navigate to in the new tab\n- `context`: Optional context object (currently unused)\n\n### `switch_tab(tab_id: str, context: Optional[Any] = None)`\n- `tab_id`: ID of the tab to switch to\n- `context`: Optional context object (currently unused)\n\n### `list_tabs(context: Optional[Any] = None)`\n- `context`: Optional context object (currently unused)\n\n### `close_tab(tab_id: Optional[str] = None, context: Optional[Any] = None)`\n- `tab_id`: Optional ID of the tab to close (defaults to current tab)\n- `context`: Optional context object (currently unused)\n\n### `refresh_page(context: Optional[Any] = None)`\n- `context`: Optional context object (currently unused)\n\n### `get_page_info(context: Optional[Any] = None)`\n- `context`: Optional context object (currently unused)\n\n### `scroll_page(direction: str = \"down\", amount: str = \"page\", context: Optional[Any] = None)`\n- `direction`: Direction to scroll ('up', 'down', 'left', 'right')\n- `amount`: Amount to scroll ('page', 'half', or a number)\n- `context`: Optional context object (currently unused)\n\n### `wait_for_navigation(timeout_ms: int = 10000, context: Optional[Any] = None)`\n- `timeout_ms`: Maximum time to wait in milliseconds\n- `context`: Optional context object (currently unused)\n\n### `execute_javascript(script: str, context: Optional[Any] = None)`\n- `script`: JavaScript code to execute\n- `context`: Optional context object (currently unused)\n\n## ü§ù Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n### Development Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/random-robbie/mcp-web-browser.git\n\n# Create virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows use `venv\\Scripts\\activate`\n\n# Install dependencies\npip install -e .[dev]\n```\n\n## üìÑ License\n\nMIT License\n\n## üîó Related Projects\n\n- [Model Context Protocol](https://modelcontextprotocol.io)\n- [Playwright](https://playwright.dev)\n- [Claude Desktop](https://claude.ai/desktop)\n\n## üí¨ Support\n\nFor issues and questions, please [open an issue](https://github.com/random-robbie/mcp-web-browser/issues) on GitHub.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "browser",
        "automation",
        "web",
        "browser automation",
        "automation web",
        "advanced web"
      ],
      "category": "browser-automation"
    },
    "rdvo--mcp-server": {
      "owner": "rdvo",
      "name": "mcp-server",
      "url": "https://github.com/rdvo/mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/rdvo.webp",
      "description": "Automate web interactions by navigating to URLs, taking screenshots, and executing JavaScript in real browsers to enhance interaction with web pages. Monitor console logs and capture content effortlessly through a browser automation framework.",
      "stars": 2,
      "forks": 1,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-27T06:46:48Z",
      "readme_content": "# Steel Puppeteer\n\nA Model Context Protocol server that provides browser automation capabilities using Puppeteer and Steel. This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment.\n\n## Components\n\n### Tools\n\n- **puppeteer_navigate**\n  - Navigate to any URL in the browser\n  - Inputs:\n    - `url` (string, required): URL to navigate to\n    - `timeout` (number, optional, default: 60000): Navigation timeout in milliseconds\n    - `waitUntil` (string, optional, default: \"domcontentloaded\"): When to consider navigation succeeded. Options: \"load\", \"domcontentloaded\", \"networkidle0\", \"networkidle2\"\n\n- **puppeteer_screenshot**\n  - Capture screenshots of the entire page or specific elements\n  - Inputs:\n    - `name` (string, required): Name for the screenshot\n    - `selector` (string, optional): CSS selector for element to screenshot\n\n- **puppeteer_click**\n  - Click elements on the page\n  - Input: `selector` (string, required): CSS selector for element to click\n\n- **puppeteer_fill**\n  - Fill out input fields\n  - Inputs:\n    - `selector` (string, required): CSS selector for input field\n    - `value` (string, required): Value to fill\n\n- **puppeteer_select**\n  - Select an element with SELECT tag\n  - Inputs:\n    - `selector` (string, required): CSS selector for element to select\n    - `value` (string, required): Value to select\n\n- **puppeteer_hover**\n  - Hover elements on the page\n  - Input: `selector` (string, required): CSS selector for element to hover\n\n- **puppeteer_evaluate**\n  - Execute JavaScript in the browser console\n  - Input: `script` (string, required): JavaScript code to execute\n\n- **puppeteer_get_content**\n  - Extract content from the current page\n  - Input: `selector` (string, optional): CSS selector to get content from specific elements. If not provided, returns whole page content\n\n- **puppeteer_scroll**\n  - Scroll the page to trigger lazy-loading\n  - Inputs:\n    - `scrollDelay` (number, optional, default: 100): Delay between scrolls in milliseconds\n    - `maxScrolls` (number, optional, default: 50): Maximum number of scrolls\n\n### Resources\n\nThe server provides access to two types of resources:\n\n1. **Console Logs** (`console://logs`)\n   - Browser console output in text format\n   - Includes all console messages from the browser\n\n2. **Screenshots** (`screenshot://<name>`)\n   - PNG images of captured screenshots\n   - Accessible via the screenshot name specified during capture\n\n## Key Features\n\n- Browser automation with Puppeteer\n- Steel integration for browser session management\n- Console log monitoring and capture\n- Screenshot capabilities\n- JavaScript execution\n- Basic web interaction (navigation, clicking, form filling)\n- Content extraction with token limit handling\n- Lazy-loading support through scrolling\n- Local and remote Steel instance support\n\n## Configuration\n\n### Claude Desktop Configuration\n\nTo use the Steel Puppeteer server with Claude Desktop, add the following configuration to your Claude Desktop config file (typically located at `~/Library/Application Support/Claude/claude_desktop_config.json` on macOS):\n\n```json\n{\n  \"mcpServers\": {\n    \"steel-puppeteer\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/steel-puppeteer/dist/index.js\"],\n      \"env\": {\n        \"STEEL_LOCAL\": \"true\"\n      }\n    }\n  }\n}\n```\n\nReplace `\"path/to/steel-puppeteer/dist/index.js\"` with the actual path to the compiled JavaScript file on your system.\n\n### Environment Variables\n\nThe Steel Puppeteer server can be configured using the following environment variables:\n\n- `STEEL_LOCAL` (optional, default: \"false\"): Set to \"true\" to use a local Steel instance instead of the cloud service.\n- `STEEL_API_KEY` (required only if `STEEL_LOCAL` is \"false\"): Your Steel API key for authentication when using the cloud service.\n- `STEEL_URL` (optional): The URL of your Steel instance if using a custom deployment.\n\n\n### Server Configuration\nIf you're running the Steel Puppeteer server directly (not through Claude Desktop), you can set these environment variables in your shell or create a `.env` file in the project root. Here's an example `.env` file for local usage:\n\n```\nSTEEL_LOCAL=true\n```\n\nIf you're using the Steel cloud service, your `.env` file would look like this:\n\n```\nSTEEL_API_KEY=your-steel-api-key\nSTEEL_LOCAL=false\n```\n\n### Running the Server\n\nTo start the Steel Puppeteer server:\n\n1. Install dependencies:\n   ```\n   npm install\n   ```\n\n2. Build the project:\n   ```\n   npm run build\n   ```\n\n3. Start the server:\n   ```\n   npm start\n   ```\n\n4. Open Claude Desktop and browse away!\nThe server will start and listen on the specified port (default: 3000).\n\n### Troubleshooting\n\n- If you encounter issues with Puppeteer, ensure that you have the necessary dependencies installed on your system. Refer to the [Puppeteer troubleshooting guide](https://pptr.dev/#?product=Puppeteer&version=v13.5.0&show=api-troubleshooting) for more information.\n- If using the Steel cloud service, make sure your Steel API key is valid and has the necessary permissions.\n- If using a local Steel instance, ensure it's running and accessible at the specified URL (if custom) or at the default local address.\n\nFor more detailed configuration options and advanced usage, refer to the Steel documentation and the Puppeteer API reference.\n",
      "npm_url": "https://www.npmjs.com/package/mcp-server",
      "npm_downloads": 29732,
      "keywords": [
        "automation",
        "automate",
        "rdvo",
        "browser automation",
        "automation web",
        "automate web"
      ],
      "category": "browser-automation"
    },
    "robertheadley--chrome-debug-mcp": {
      "owner": "robertheadley",
      "name": "chrome-debug-mcp",
      "url": "https://github.com/robertheadley/chrome-debug-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/robertheadley.webp",
      "description": "Control Chrome with advanced debugging capabilities, automate page interactions, and manage userscripts seamlessly. Integrate powerful automation tools directly into web development workflows using Playwright with comprehensive Greasemonkey API support.",
      "stars": 42,
      "forks": 5,
      "license": "Other",
      "language": "JavaScript",
      "updated_at": "2025-09-12T19:32:58Z",
      "readme_content": "# Chrome Debug MCP Playwright\r\n\r\nA Model Context Protocol (MCP) implementation for browser automation using Playwright, with full Greasemonkey API support.\r\n<a href=\"https://glama.ai/mcp/servers/nguhnsghor\">\r\n\r\n \r\n\r\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/nguhnsghor/badge\" alt=\"Chrome Debug Server MCP server\" />\r\n \r\n\r\n</a>\r\n \r\n\r\n## Features\r\n\r\n### Core Browser Features\r\n- Browser launch and management\r\n- Multi-tab support with create/switch/close capabilities\r\n- Page navigation and interaction\r\n- Screenshot capture\r\n\r\n### Greasemonkey API Support\r\n- GM_addStyle for CSS injection\r\n- GM_getValue/GM_setValue for data storage\r\n- GM_deleteValue for storage cleanup\r\n- GM_notification for desktop notifications\r\n- GM_setClipboard for clipboard operations\r\n- GM_xmlhttpRequest for cross-origin requests\r\n\r\n### Resource Management\r\n- Network request interception\r\n- Request blocking, modification, and logging\r\n- Resource type filtering\r\n\r\n### Debug Features\r\n- Detailed logging system\r\n- Log file organization\r\n- Clean interface output\r\n\r\n## Installation\r\n\r\n```bash\r\nnpm install chrome-debug-mcp-playwright\r\n```\r\n\r\n## Quick Start\r\n\r\n```javascript\r\n// Launch browser\r\ntool browser launch_browser --url \"https://example.com\" --browserType \"chromium\"\r\n\r\n// Use GM functions\r\ntool browser gm_setValue --key \"setting\" --value \"test\"\r\ntool browser gm_getValue --key \"setting\"\r\n\r\n// Intercept requests\r\ntool browser intercept_requests --patterns [\"*.jpg\", \"*.css\"] --action \"block\"\r\n```\r\n\r\n## Documentation\r\n- [Commands](COMMANDS.md) - Detailed command documentation with examples\r\n- Full command list with usage examples available in COMMANDS.md\r\n\r\n## Core Features\r\n\r\n### Browser Management\r\n```javascript\r\n// Launch browser\r\ntool browser launch_browser --url \"https://example.com\"\r\n\r\n// Create new tab\r\ntool browser create_tab --url \"https://example.com\"\r\n\r\n// Switch between tabs\r\ntool browser switch_tab --index 1\r\n```\r\n\r\n### Greasemonkey API\r\n```javascript\r\n// Add custom styles\r\ntool browser gm_addStyle --css \"body { background: #f0f0f0; }\"\r\n\r\n// Store data\r\ntool browser gm_setValue --key \"setting\" --value \"test\"\r\n\r\n// Make cross-origin requests\r\ntool browser gm_xmlhttpRequest --url \"https://api.example.com/data\" --method \"GET\"\r\n```\r\n\r\n### Resource Interception\r\n```javascript\r\n// Block image loading\r\ntool browser intercept_requests --patterns [\"*.jpg\", \"*.png\"] --action \"block\"\r\n\r\n// Log all CSS requests\r\ntool browser intercept_requests --patterns [\"*.css\"] --action \"log\"\r\n```\r\n\r\n## Implementation Details\r\n\r\n### Logging System\r\n- All debug output redirected to log files\r\n- Timestamped entries\r\n- Organized in logs directory\r\n- Clean interface output\r\n\r\n### Error Handling\r\n- Detailed error logging\r\n- Proper cleanup on errors\r\n- Resource management\r\n\r\n## Dependencies\r\n- Playwright: Browser automation\r\n- @modelcontextprotocol/sdk: MCP implementation\r\n\r\n## Development\r\n\r\n### Prerequisites\r\n- Node.js 16 or higher\r\n- npm 7 or higher\r\n\r\n### Setup\r\n```bash\r\ngit clone https://github.com/yourusername/chrome-debug-mcp-playwright.git\r\ncd chrome-debug-mcp-playwright\r\nnpm install\r\n```\r\n\r\n## License\r\n\r\nMIT License - See LICENSE file for details.\r\n\r\n## Contributing\r\n\r\nWe welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\r\n\r\n## Acknowledgments\r\n\r\nBased on the original [chrome-debug-mcp](https://github.com/robertheadley/chrome-debug-mcp) by Robert Headley.\r\n=======\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n# Chrome Debug MCP Server\r\n\r\nA Model Context Protocol (MCP) server for controlling Chrome with debugging capabilities, userscript injection, and extension support.\r\n\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n=======\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n<a href=\"https://glama.ai/mcp/servers/nguhnsghor\">\r\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/nguhnsghor/badge\" alt=\"Chrome Debug Server MCP server\" />\r\n</a>\r\n\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n## Features\r\n\r\n### Chrome Control\r\n- Launch Chrome with custom configurations\r\n- Support for custom Chrome executable paths\r\n- User profile management (default or custom user data directory)\r\n- Extension support and management\r\n- Disable Chrome's \"Automation Controlled\" banner\r\n\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n=======\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n### Page Automation\r\n- Click, type, and interact with page elements\r\n- Handle dropdowns and form inputs\r\n- Hover and wait for elements\r\n- Take screenshots of full page or elements\r\n- Navigate between pages\r\n- Set viewport size and device emulation\r\n- Extract text and attributes from elements\r\n\r\n### Tab Management\r\n- List all open tabs with their IDs and URLs\r\n- Open new tabs with specified URLs\r\n- Close tabs by ID\r\n- Switch between tabs\r\n- Track and manage multiple tab states\r\n\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n### Debugging Capabilities\r\n- Remote debugging via Chrome DevTools Protocol (CDP)\r\n- Console log capture and monitoring\r\n- JavaScript evaluation in page context\r\n- Real-time console output streaming\r\n\r\n### Userscript Support\r\n- Inject userscripts into web pages\r\n- Greasemonkey-style API support:\r\n  - `GM_setValue`/`GM_getValue` for persistent storage\r\n  - `GM_addStyle` for CSS injection\r\n  - `GM_xmlhttpRequest` for cross-origin requests\r\n  - `GM_openInTab` for new tab creation\r\n  - `GM_registerMenuCommand` for menu commands\r\n\r\n### Extension Integration\r\n- Load unpacked extensions\r\n- Maintain extension states and configurations\r\n- Support for default Chrome profile extensions\r\n- Selective extension enabling/disabling\r\n\r\n## Installation\r\n\r\n### Prerequisites\r\n- [Node.js](https://nodejs.org/) (v14 or higher)\r\n- [Chrome](https://www.google.com/chrome/) browser installed\r\n- [Visual Studio Code](https://code.visualstudio.com/)\r\n- [Roo Code Extension](https://marketplace.visualstudio.com/items?itemName=RooVeterinaryInc.roo-cline)\r\n\r\n### Installing Roo Code Extension\r\n1. Open Visual Studio Code\r\n2. Go to Extensions (Ctrl+Shift+X)\r\n3. Search for \"Roo Code\"\r\n4. Click Install\r\n\r\n### Setting up Chrome Debug MCP Server\r\n1. Clone this repository:\r\n   ```bash\r\n   git clone https://github.com/yourusername/chrome-debug-mcp.git\r\n   cd chrome-debug-mcp\r\n   ```\r\n\r\n2. Install dependencies:\r\n   ```bash\r\n   npm install\r\n   ```\r\n\r\n3. Build the project:\r\n   ```bash\r\n   npm run build\r\n   ```\r\n\r\n4. Configure in Roo Code:\r\n   Add to `cline_mcp_settings.json`:\r\n   ```json\r\n   {\r\n     \"mcpServers\": {\r\n       \"chrome-debug\": {\r\n         \"command\": \"node\",\r\n         \"args\": [\"path/to/chrome-debug-mcp/build/index.js\"],\r\n         \"disabled\": false,\r\n         \"alwaysAllow\": []\r\n       }\r\n     }\r\n   }\r\n   ```\r\n\r\n## Usage\r\n\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n=======\r\nFor a complete reference of all available commands, tools, and functions, see [COMMANDS.md](docs/COMMANDS.md).\r\n\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\nFor a complete reference of all available commands, tools, and functions, see [COMMANDS.md](docs/COMMANDS.md).\r\n\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\nFor a complete reference of all available commands, tools, and functions, see [COMMANDS.md](docs/COMMANDS.md).\r\n\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\nFor a complete reference of all available commands, tools, and functions, see [COMMANDS.md](docs/COMMANDS.md).\r\n\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\nFor a complete reference of all available commands, tools, and functions, see [COMMANDS.md](docs/COMMANDS.md).\r\n\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\nFor a complete reference of all available commands, tools, and functions, see [COMMANDS.md](docs/COMMANDS.md).\r\n\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\nFor a complete reference of all available commands, tools, and functions, see [COMMANDS.md](docs/COMMANDS.md).\r\n\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n### Basic Chrome Launch\r\n```javascript\r\nuse_mcp_tool({\r\n  server_name: \"chrome-debug\",\r\n  tool_name: \"launch_chrome\",\r\n  arguments: {\r\n    executablePath: \"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\",\r\n    url: \"https://example.com\"\r\n  }\r\n})\r\n```\r\n\r\n### Launch with Custom Profile\r\n```javascript\r\nuse_mcp_tool({\r\n  server_name: \"chrome-debug\",\r\n  tool_name: \"launch_chrome\",\r\n  arguments: {\r\n    executablePath: \"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\",\r\n    userDataDir: \"path/to/chrome/profile\",\r\n    disableAutomationControlled: true\r\n  }\r\n})\r\n```\r\n\r\n### Inject Userscript\r\n```javascript\r\nuse_mcp_tool({\r\n  server_name: \"chrome-debug\",\r\n  tool_name: \"launch_chrome\",\r\n  arguments: {\r\n    url: \"https://example.com\",\r\n    userscriptPath: \"path/to/userscript.js\"\r\n  }\r\n})\r\n```\r\n\r\n### Evaluate JavaScript\r\n```javascript\r\nuse_mcp_tool({\r\n  server_name: \"chrome-debug\",\r\n  tool_name: \"evaluate\",\r\n  arguments: {\r\n    expression: \"document.title\"\r\n  }\r\n})\r\n```\r\n\r\n### Get Console Logs\r\n```javascript\r\nuse_mcp_tool({\r\n  server_name: \"chrome-debug\",\r\n  tool_name: \"get_console_logs\",\r\n  arguments: {\r\n    clear: true\r\n  }\r\n})\r\n```\r\n\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n=======\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n### Page Interaction Examples\r\n\r\n#### Click an Element\r\n```javascript\r\nuse_mcp_tool({\r\n  server_name: \"chrome-debug\",\r\n  tool_name: \"click\",\r\n  arguments: {\r\n    selector: \"#submit-button\",\r\n    delay: 500\r\n  }\r\n})\r\n```\r\n\r\n#### Type into Input\r\n```javascript\r\nuse_mcp_tool({\r\n  server_name: \"chrome-debug\",\r\n  tool_name: \"type\",\r\n  arguments: {\r\n    selector: \"#search-input\",\r\n    text: \"search query\",\r\n    delay: 100\r\n  }\r\n})\r\n```\r\n\r\n#### Select from Dropdown\r\n```javascript\r\nuse_mcp_tool({\r\n  server_name: \"chrome-debug\",\r\n  tool_name: \"select\",\r\n  arguments: {\r\n    selector: \"#country-select\",\r\n    value: \"US\"\r\n  }\r\n})\r\n```\r\n\r\n#### Wait for Element\r\n```javascript\r\nuse_mcp_tool({\r\n  server_name: \"chrome-debug\",\r\n  tool_name: \"wait_for_selector\",\r\n  arguments: {\r\n    selector: \".loading-complete\",\r\n    visible: true,\r\n    timeout: 5000\r\n  }\r\n})\r\n```\r\n\r\n#### Take Screenshot\r\n```javascript\r\nuse_mcp_tool({\r\n  server_name: \"chrome-debug\",\r\n  tool_name: \"screenshot\",\r\n  arguments: {\r\n    path: \"screenshot.png\",\r\n    fullPage: true\r\n  }\r\n})\r\n```\r\n\r\n#### Set Viewport Size\r\n```javascript\r\nuse_mcp_tool({\r\n  server_name: \"chrome-debug\",\r\n  tool_name: \"set_viewport\",\r\n  arguments: {\r\n    width: 1920,\r\n    height: 1080,\r\n    deviceScaleFactor: 1\r\n  }\r\n})\r\n```\r\n\r\n### Tab Management Examples\r\n\r\n#### List All Tabs\r\n```javascript\r\nuse_mcp_tool({\r\n  server_name: \"chrome-debug\",\r\n  tool_name: \"list_tabs\",\r\n  arguments: {}\r\n})\r\n```\r\n\r\n#### Open New Tab\r\n```javascript\r\nuse_mcp_tool({\r\n  server_name: \"chrome-debug\",\r\n  tool_name: \"new_tab\",\r\n  arguments: {\r\n    url: \"https://example.com\"\r\n  }\r\n})\r\n```\r\n\r\n#### Switch to Tab\r\n```javascript\r\nuse_mcp_tool({\r\n  server_name: \"chrome-debug\",\r\n  tool_name: \"switch_tab\",\r\n  arguments: {\r\n    tabId: \"tab-id-from-list-tabs\"\r\n  }\r\n})\r\n```\r\n\r\n#### Close Tab\r\n```javascript\r\nuse_mcp_tool({\r\n  server_name: \"chrome-debug\",\r\n  tool_name: \"close_tab\",\r\n  arguments: {\r\n    tabId: \"tab-id-from-list-tabs\"\r\n  }\r\n})\r\n```\r\n\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n## Dependencies\r\n\r\nThis project uses the following open-source packages:\r\n\r\n- [Puppeteer](https://pptr.dev/) - Chrome automation library\r\n- [chrome-remote-interface](https://github.com/cyrus-and/chrome-remote-interface) - Chrome DevTools Protocol client\r\n- [@modelcontextprotocol/sdk](https://github.com/ModelContextProtocol/sdk) - MCP SDK for server implementation\r\n\r\n## License\r\n\r\nThis project is licensed under the MIT License - see the LICENSE file for details.\r\n\r\n## Contributing\r\n\r\nSee our [Contributing Guide](CONTRIBUTING.md) for details on making contributions.\r\n\r\n## Acknowledgments\r\n\r\n- [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/)\r\n- [Greasemonkey API](https://wiki.greasespot.net/Greasemonkey_Manual:API)\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n<<<<<<< HEAD\r\n- [Model Context Protocol](https://modelcontextprotocol.ai)\r\n>>>>>>> parent of 8a57443 (Merge pull request #4 from robertheadley/feature/puppeteer-commands)\r\n=======\r\n- [Model Context Protocol](https://modelcontextprotocol.ai)\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n- [Model Context Protocol](https://modelcontextprotocol.ai)\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n- [Model Context Protocol](https://modelcontextprotocol.ai)\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n- [Model Context Protocol](https://modelcontextprotocol.ai)\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n- [Model Context Protocol](https://modelcontextprotocol.ai)\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n- [Model Context Protocol](https://modelcontextprotocol.ai)\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n=======\r\n- [Model Context Protocol](https://modelcontextprotocol.ai)\r\n>>>>>>> parent of 64acbb3 (Add files via upload)\r\n",
      "npm_url": "https://www.npmjs.com/package/chrome-debug-mcp",
      "npm_downloads": 3228,
      "keywords": [
        "userscripts",
        "greasemonkey",
        "automation",
        "browser automation",
        "automation web",
        "automation tools"
      ],
      "category": "browser-automation"
    },
    "samihalawa--mcp-ai-vision-debug-ui-automation": {
      "owner": "samihalawa",
      "name": "mcp-ai-vision-debug-ui-automation",
      "url": "https://github.com/samihalawa/mcp-ai-vision-debug-ui-automation",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Capture and analyze website screenshots with AI-powered visual analysis. Generate comprehensive UI/UX reports and maintain context across multiple analysis steps for enhanced debugging. Streamline your visual testing process with precise file operations and automated insights.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "https://www.npmjs.com/package/mcp-ai-vision-debug-ui-automation",
      "npm_downloads": 165,
      "keywords": [
        "automation",
        "automated",
        "scraping",
        "browser automation",
        "automation web",
        "ui automation"
      ],
      "category": "browser-automation"
    },
    "samihalawa--visual-ui-debug-agent-mcp": {
      "owner": "samihalawa",
      "name": "visual-ui-debug-agent-mcp",
      "url": "https://github.com/samihalawa/visual-ui-debug-agent-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/samihalawa.webp",
      "description": "Enables autonomous visual analysis, testing, and debugging of web interfaces using AI-powered tools. Detect UI bugs, validate user workflows, monitor performance, and generate detailed reports through Playwright integration.",
      "stars": 23,
      "forks": 4,
      "license": "ISC License",
      "language": "JavaScript",
      "updated_at": "2025-10-01T18:09:39Z",
      "readme_content": "# VUDA: Visual UI Debug Agent\n\n<a href=\"https://ibb.co/YTWc0mMQ\"><img src=\"https://i.ibb.co/TqT4W6S2/VUDAbanner.png\" alt=\"VUDAbanner\" border=\"0\"></a>\n\n\n\n[![MCP Server](https://img.shields.io/badge/MCP-VUDA-blue)](https://github.com/samihalawa/visual-ui-debug-agent-mcp) [![GLAMA Compatible](https://img.shields.io/badge/GLAMA-Compatible-green)](https://github.com/samihalawa/visual-ui-debug-agent-mcp) [![Smithery Compatible](https://img.shields.io/badge/Smithery-Compatible-orange)](https://smithery.ai/docs/config)\n\nVUDA is an autonomous debugging agent that empowers AI models to visually analyze, test, and debug web interfaces through Playwright. This MCP server enables any AI model (even those without built-in vision capabilities) to visually inspect web pages, find UI bugs, test user workflows, and validate application performance - all without human intervention.\n\n\n\n## Autonomous UI Debugging Agent\n\nVUDA functions as an AI-powered autonomous debugging agent that can:\n\n- **Perform comprehensive visual analysis** of web applications\n- **Detect UI issues** by inspecting visual elements and their properties\n- **Automatically test common user workflows** without manual test script creation\n- **Validate API endpoints** and verify backend responses\n- **Track visual changes** between application versions\n- **Monitor console logs** for errors and warnings\n- **Analyze performance metrics** to identify bottlenecks\n- **Generate detailed reports** with screenshots and recommendations\n\nThe agent is designed to work intelligently, reusing browser sessions, avoiding unnecessary file creation, and focusing on the most important aspects of your application.\n\n## Installation Options\n\n### Using an MCP Gateway (Recommended)\n\nThe easiest way to install VUDA is through any MCP-compatible gateway:\n\n```bash\n# Example with Claude gateway\nclaude-gateway install visual-ui-debug-agent-mcp\n```\n\n### Quick Installation Script\n\nUse our one-line installation script:\n\n```bash\ncurl -s https://raw.githubusercontent.com/samihalawa/visual-ui-debug-agent-mcp/main/scripts/install-global.sh | bash\n```\n\n### NPM Installation\n\nFor global installation via npm:\n\n```bash\n# Install globally\nnpm install -g visual-ui-debug-agent-mcp\n\n# Start the server\nvuda\n# or\nvisual-ui-debug-agent\n```\n\n### Docker Hub Installation\n\nFor containerized deployment:\n\n```bash\n# Pull the image from Docker Hub\ndocker pull luigi1234/visual-ui-debug-agent:latest\n\n# Run the container\ndocker run -p 8080:8080 luigi1234/visual-ui-debug-agent:latest\n```\n\n### Smithery Integration\n\nVUDA is fully Smithery-compatible using the included configuration file:\n\n```bash\n# Install with Smithery\nsmithery install visual-ui-debug-agent-mcp\n\n# Or run with your API key\nnpm run smithery:key YOUR_SMITHERY_API_KEY\n```\n\nFor full installation and usage instructions, see the [Smithery Integration Guide](./SMITHERY-GUIDE.md).\n\n### Cross-Platform Support\n\nPlatform-specific packages are available for all major platforms:\n\n```bash\n# For macOS (Intel or Apple Silicon)\nnpm install -g visual-ui-debug-agent-mcp-darwin-x64\nnpm install -g visual-ui-debug-agent-mcp-darwin-arm64\n\n# For Linux\nnpm install -g visual-ui-debug-agent-mcp-linux-x64\nnpm install -g visual-ui-debug-agent-mcp-linux-arm64\n\n# For Windows\nnpm install -g visual-ui-debug-agent-mcp-win32-x64\n```\n\n## Complete Tool Reference\n\n### Primary Visual Analysis Tools\n\n#### 1. `enhanced_page_analyzer` üîç\n\nProvides comprehensive analysis of web pages with interactive elements mapping, performance metrics, and visual inspection.\n\n```javascript\nconst analysis = await mcp.callTool(\"enhanced_page_analyzer\", {\n  url: \"https://example.com/dashboard\",\n  includeConsole: true,\n  mapElements: true,\n  fullPage: true\n});\n```\n\n#### 2. `ui_workflow_validator` üîÑ\n\nAutomatically tests full user journeys by executing and validating a sequence of UI interactions.\n\n```javascript\nconst result = await mcp.callTool(\"ui_workflow_validator\", {\n  startUrl: \"https://example.com/login\",\n  taskDescription: \"User login flow\",\n  steps: [\n    { description: \"Enter username\", action: \"fill\", selector: \"#username\", value: \"test\" },\n    { description: \"Enter password\", action: \"fill\", selector: \"#password\", value: \"pass\" },\n    { description: \"Click login\", action: \"click\", selector: \"button[type='submit']\" },\n    { description: \"Verify dashboard loads\", action: \"verifyElementVisible\", selector: \".dashboard\" }\n  ],\n  captureScreenshots: \"all\"\n});\n```\n\n#### 3. `visual_comparison` üëÅÔ∏è\n\nCompares two web pages or UI states to identify visual differences.\n\n```javascript\nconst diff = await mcp.callTool(\"visual_comparison\", {\n  url1: \"https://example.com/before\",\n  url2: \"https://example.com/after\",\n  threshold: 0.05\n});\n```\n\n#### 4. `screenshot_url` üì∏\n\nCaptures high-quality screenshots of any URL with options for full page or specific elements.\n\n```javascript\nconst screenshot = await mcp.callTool(\"screenshot_url\", {\n  url: \"https://example.com/profile\",\n  fullPage: true,\n  device: \"iPhone 13\"\n});\n```\n\n#### 5. `batch_screenshot_urls` üì∑\n\nTakes screenshots of multiple URLs in a single operation for efficient comparison.\n\n```javascript\nconst screenshots = await mcp.callTool(\"batch_screenshot_urls\", {\n  urls: [\"https://example.com/page1\", \"https://example.com/page2\"],\n  fullPage: true\n});\n```\n\n### User Flow Testing Tools\n\n#### 6. `navigation_flow_validator` üß≠\n\nTests multi-step navigation sequences with validation.\n\n```javascript\nconst navResult = await mcp.callTool(\"navigation_flow_validator\", {\n  startUrl: \"https://example.com\",\n  steps: [\n    { action: \"click\", selector: \"a.products\" },\n    { action: \"wait\", waitTime: 1000 },\n    { action: \"click\", selector: \".product-item\" }\n  ],\n  captureScreenshots: true\n});\n```\n\n#### 7. `api_endpoint_tester` üîå\n\nTests multiple API endpoints and verifies responses for backend validation.\n\n```javascript\nconst apiTest = await mcp.callTool(\"api_endpoint_tester\", {\n  url: \"https://api.example.com/v1\",\n  endpoints: [\n    { path: \"/users\", method: \"GET\" },\n    { path: \"/products\", method: \"GET\" }\n  ],\n  authToken: \"Bearer token123\"\n});\n```\n\n### DOM and Performance Analysis\n\n#### 8. `dom_inspector` üî¨\n\nInspects DOM elements and their properties in detail.\n\n```javascript\nconst elementInfo = await mcp.callTool(\"dom_inspector\", {\n  url: \"https://example.com\",\n  selector: \"nav.main-menu\",\n  includeChildren: true,\n  includeStyles: true\n});\n```\n\n#### 9. `console_monitor` üìü\n\nMonitors and captures console logs for error detection.\n\n```javascript\nconst logs = await mcp.callTool(\"console_monitor\", {\n  url: \"https://example.com/app\",\n  filterTypes: [\"error\", \"warning\"],\n  duration: 5000\n});\n```\n\n#### 10. `performance_analysis` ‚ö°\n\nMeasures and analyzes page load performance metrics.\n\n```javascript\nconst perfMetrics = await mcp.callTool(\"performance_analysis\", {\n  url: \"https://example.com/dashboard\",\n  iterations: 3\n});\n```\n\n### Low-Level Playwright Controls\n\n#### 11. `screenshot_local_files` üìÅ\n\nTakes screenshots of local HTML files.\n\n```javascript\nconst localScreenshot = await mcp.callTool(\"screenshot_local_files\", {\n  filePath: \"/path/to/local/file.html\"\n});\n```\n\n#### 12. Direct Playwright Actions\n\nComplete set of low-level Playwright controls for precise automation:\n\n- `playwright_navigate`: Navigate to specific URLs\n- `playwright_click`: Click on elements\n- `playwright_iframe_click`: Click elements inside iframes\n- `playwright_fill`: Fill form fields\n- `playwright_select`: Select dropdown options\n- `playwright_hover`: Hover over elements\n- `playwright_evaluate`: Run JavaScript in the page context\n- `playwright_console_logs`: Get console logs\n- `playwright_get_visible_text`: Extract visible text\n- `playwright_get_visible_html`: Get visible HTML\n- `playwright_go_back`: Navigate back\n- `playwright_go_forward`: Navigate forward\n- `playwright_press_key`: Press keyboard keys\n- `playwright_drag`: Drag and drop elements\n- `playwright_screenshot`: Take custom screenshots\n\n### Utility Tools\n\n#### 13. `tunnel_helper` üöá\n\nHelps with exposing local ports via Cloudflare tunnel for remote debugging access.\n\n```javascript\n// Guide the user through tunnel setup\nconst guide = await mcp.callTool(\"tunnel_helper\", {\n  action: \"guide\",\n  port: 3000\n});\n\n// Store a tunnel URL for later use\nawait mcp.callTool(\"tunnel_helper\", {\n  action: \"store\",\n  port: 3000,\n  url: \"https://example.trycloudflare.com\"\n});\n\n// Retrieve stored tunnel URLs\nconst tunnels = await mcp.callTool(\"tunnel_helper\", {\n  action: \"retrieve\"\n});\n```\n\n#### 14. `debug_memory` üíæ\n\nSaves and retrieves debugging context, environment variables, and important findings.\n\n```javascript\n// Save debugging context\nawait mcp.callTool(\"debug_memory\", {\n  action: \"save\",\n  key: \"api_config\",\n  data: {\n    baseUrl: \"https://api.example.com\",\n    apiKey: \"sk-123...\",\n    endpoints: [\"/users\", \"/products\"]\n  }\n});\n\n// Retrieve saved context\nconst config = await mcp.callTool(\"debug_memory\", {\n  action: \"retrieve\",\n  key: \"api_config\"\n});\n\n// List all saved items\nconst allItems = await mcp.callTool(\"debug_memory\", {\n  action: \"list\"\n});\n\n// Clear all saved data\nawait mcp.callTool(\"debug_memory\", {\n  action: \"clear\"\n});\n```\n\n## Autonomous Debugging Workflows\n\nVUDA can autonomously perform complete debugging workflows by combining tools. For example:\n\n### Visual Regression Testing\n```javascript\n// 1. Analyze the current version\nconst currentAnalysis = await mcp.callTool(\"enhanced_page_analyzer\", {...});\n\n// 2. Compare with previous version\nconst comparisonResult = await mcp.callTool(\"visual_comparison\", {...});\n\n// 3. Generate visual difference report\nconst report = await mcp.callTool(\"ui_workflow_validator\", {...});\n```\n\n### End-to-End User Flow Validation\n```javascript\n// 1. Start with login flow\nconst loginResult = await mcp.callTool(\"ui_workflow_validator\", {...});\n\n// 2. Validate core features\nconst featureResults = await mcp.callTool(\"navigation_flow_validator\", {...});\n\n// 3. Test API endpoints\nconst apiResults = await mcp.callTool(\"api_endpoint_tester\", {...});\n```\n\n### Performance Optimization\n```javascript\n// 1. Analyze initial performance\nconst initialPerformance = await mcp.callTool(\"performance_analysis\", {...});\n\n// 2. Identify slow-loading elements\nconst elementPerformance = await mcp.callTool(\"dom_inspector\", {...});\n\n// 3. Monitor console for errors\nconst consoleErrors = await mcp.callTool(\"console_monitor\", {...});\n```\n\n## Visual Analysis Examples\n\n### Element Mapping\n\n\nVUDA automatically maps all interactive elements on a page, making it easy for an AI model to understand the UI structure.\n\n### Visual Comparison\n\n\nThe visual comparison tool highlights differences between UI states, perfect for catching unexpected visual changes.\n\n## Integration Options\n\n### Integration with Smithery\n```yaml\n# smithery.yaml configuration\nstartCommand:\n  type: stdio\n  configSchema:\n    type: object\n    properties:\n      port:\n        type: number\n        description: Port number for the MCP server\n      debug:\n        type: boolean\n        description: Enable debug mode\n```\n\n### Integration with GLAMA\n```json\n// glama.json configuration\n{\n  \"name\": \"visual-ui-debug-agent-mcp\",\n  \"version\": \"1.0.0\",\n  \"settings\": {\n    \"port\": 8080,\n    \"headless\": true,\n    \"maxConcurrentSessions\": 5\n  }\n}\n```\n\n### Integration with Non-Vision Models\nVUDA converts visual information into structured data that can be used by any AI model, even those without vision capabilities:\n\n```javascript\n// The model receives structured data about visual elements\n{\n  \"interactiveElements\": [\n    {\n      \"tagName\": \"button\",\n      \"text\": \"Submit\",\n      \"bounds\": {\"x\": 120, \"y\": 240, \"width\": 100, \"height\": 40},\n      \"visible\": true\n    },\n    // More elements...\n  ]\n}\n```\n\n## CI/CD Integration\n\nVUDA includes GitHub Actions workflows for continuous integration and deployment:\n\n- **Build and Test**: Validates code quality\n- **NPM Publishing**: Automates package publishing\n- **Docker Publishing**: Creates and pushes Docker images\n- **Smithery Publishing**: Deploys to Smithery platform\n\n## License\n\nThis project is licensed under the [ISC License](LICENSE)",
      "npm_url": "https://www.npmjs.com/package/visual-ui-debug-agent-mcp",
      "npm_downloads": 153,
      "keywords": [
        "automation",
        "browser",
        "scraping",
        "browser automation",
        "automation web",
        "debugging web"
      ],
      "category": "browser-automation"
    },
    "samuelvinay91--autospectra-mcp-server": {
      "owner": "samuelvinay91",
      "name": "autospectra-mcp-server",
      "url": "https://github.com/samuelvinay91/autospectra-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/samuelvinay91.webp",
      "description": "Automate browser interactions and perform various testing capabilities, including accessibility checks and visual testing, through a comprehensive MCP server. Provides tools for API testing and debugging, integrating seamlessly with compatible AI systems.",
      "stars": 2,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-24T04:37:32Z",
      "readme_content": "# AutoSpectra MCP Server\n\n<div align=\"center\">\n  \n  <p><strong>All-In-One Automation Platform for AI Agents: Browser, API Testing, and More</strong></p>\n  \n  [![smithery badge](https://smithery.ai/badge/@samuelvinay91/autospectra-mcp-server)](https://smithery.ai/server/@samuelvinay91/autospectra-mcp-server)\n</div>\n\nAutoSpectra is a comprehensive MCP (Model Context Protocol) server that provides complete automation and testing capabilities for any AI agent. From browser automation and API testing to debugging tools and mock services, AutoSpectra offers a full suite of tools that integrate seamlessly with any MCP-compatible system, including but not limited to Claude, ChatGPT, Gemini, and Perplexity.\n\n## Features\n\n- **üåê Browser Automation**: Navigate, click, type, extract data, and take screenshots\n- **üîå API Testing Tools**: Make HTTP/GraphQL requests, validate schemas, create mock APIs\n- **üß™ Testing Framework**: End-to-end testing, accessibility testing, and visual validation\n- **üêû Debugging Capabilities**: Interactive debug sessions with step-by-step execution\n- **ü§ñ AI Agent Compatibility**: Works with any AI agent supporting the MCP protocol\n- **üëÅÔ∏è Visible Browser Mode**: Debug with visible browsers or run headless for efficiency\n- **üîÑ Self-Healing Selectors**: Robust element selection that adapts to changes\n- **üíª Claude Computer Use**: Integration with Anthropic's Claude computer capabilities\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/your-username/autospectra-mcp-server.git\ncd autospectra-mcp-server\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Environment Setup\n\nCreate a `.env` file in the root directory with the following variables:\n\n```\n# Server configuration\nPORT=3000\nDEBUG=true\nHTTP_SERVER=true\n\n# API Keys\nANTHROPIC_API_KEY=your-anthropic-api-key\n\n# Playwright configuration\nHEADLESS=false\nSLOW_MO=50\n\n# Output directory\nOUTPUT_DIR=./output\n```\n\n## Usage\n\n### Starting the Server\n\n```bash\n# Start the server\nnpm start\n\n# Or start in development mode\nnpm run dev\n```\n\n### Using the MCP Tools\n\nAutoSpectra provides a wide range of automation tools that can be used through the MCP protocol:\n\n#### Browser Automation\n\n```javascript\n// Navigate to a URL with visible browser\nawait use_mcp_tool({\n  server_name: \"autospectra\",\n  tool_name: \"navigate\",\n  arguments: {\n    url: \"https://example.com\",\n    visible: true\n  }\n});\n\n// Click on an element with selector\nawait use_mcp_tool({\n  server_name: \"autospectra\",\n  tool_name: \"click\",\n  arguments: {\n    selector: \"#login-button\"\n  }\n});\n```\n\n#### API Testing\n\n```javascript\n// Make an HTTP request\nawait use_mcp_tool({\n  server_name: \"autospectra\",\n  tool_name: \"api_request\",\n  arguments: {\n    method: \"GET\",\n    url: \"https://api.example.com/users/1\",\n    headers: {\n      \"Accept\": \"application/json\"\n    }\n  }\n});\n\n// Validate an API response against a schema\nawait use_mcp_tool({\n  server_name: \"autospectra\",\n  tool_name: \"validate_schema\",\n  arguments: {\n    response: responseData,\n    schema: {\n      type: \"object\",\n      required: [\"id\", \"name\", \"email\"],\n      properties: {\n        id: { type: \"number\" },\n        name: { type: \"string\" },\n        email: { type: \"string\", format: \"email\" }\n      }\n    }\n  }\n});\n```\n\n#### Interactive Debugging\n\n```javascript\n// Create a debug test session\nawait use_mcp_tool({\n  server_name: \"autospectra\",\n  tool_name: \"debug_test\",\n  arguments: {\n    testName: \"login-flow\",\n    testScript: `\n      step('step1', 'navigate', { url: 'https://example.com/login' });\n      step('step2', 'type', { selector: '#username', text: 'testuser' });\n      step('step3', 'click', { selector: '#login-button' });\n    `,\n    breakAt: ['step3'],\n    runImmediately: true\n  }\n});\n```\n\nFor complete documentation of all available tools and their parameters, see:\n- [Usage Guide](docs/api/tools/USAGE_GUIDE.md)\n- [API Testing Guide](docs/guides/API_TESTING_GUIDE.md)\n- [Current Tools List](docs/CURRENT_TOOLS_LIST.md)\n\n## Documentation\n\nAutoSpectra provides comprehensive documentation of its tooling capabilities:\n\n- [Tools Documentation Index](docs/MCP_TOOLS_INDEX.md) - Overview and index of all tools documentation\n- [Current Tools List](docs/CURRENT_TOOLS_LIST.md) - Complete reference of all currently available tools with parameters and examples\n- [Future Tool Enhancements](docs/FUTURE_TOOL_ENHANCEMENTS.md) - Roadmap of planned enhancements and missing tools\n\n## Project Structure\n\n```\nautospectra-mcp-server/\n‚îú‚îÄ‚îÄ docs/                # Documentation\n‚îÇ   ‚îú‚îÄ‚îÄ guides/          # User and developer guides\n‚îÇ   ‚îú‚îÄ‚îÄ api/             # API documentation\n‚îÇ   ‚îî‚îÄ‚îÄ examples/        # Example usage\n‚îú‚îÄ‚îÄ scripts/             # Utility and helper scripts\n‚îú‚îÄ‚îÄ src/                 # Source code\n‚îÇ   ‚îú‚îÄ‚îÄ automation/      # Browser automation\n‚îÇ   ‚îú‚îÄ‚îÄ computerUse/     # Claude computer use integration\n‚îÇ   ‚îú‚îÄ‚îÄ frameworks/      # Test framework integration\n‚îÇ   ‚îú‚îÄ‚îÄ nlp/             # NLP functionality\n‚îÇ   ‚îú‚îÄ‚îÄ server/          # Server-specific code\n‚îÇ   ‚îî‚îÄ‚îÄ utils/           # Utilities\n‚îú‚îÄ‚îÄ tests/               # Test files\n‚îÇ   ‚îú‚îÄ‚îÄ integration/     # Integration tests\n‚îÇ   ‚îú‚îÄ‚îÄ unit/            # Unit tests\n‚îÇ   ‚îî‚îÄ‚îÄ e2e/             # End-to-end tests\n```\n\n## Integration with AI Agents\n\nAutoSpectra seamlessly integrates with any AI agent supporting the MCP protocol:\n\n1. **Universal Compatibility**: Works with Claude, ChatGPT, Gemini, Perplexity, and more\n2. **Advanced Capabilities**: Access specialized features like Claude's Computer Use\n3. **Flexible Workflows**: Combine local and cloud-based automation\n\nSee the [AI Integration Guide](docs/guides/computer-use/COMPUTER_USE.md) for more information.\n\n## Platform Integrations\n\nAutoSpectra works with various AI platforms and development environments:\n\n1. **Claude Desktop/Cloud**: Enhanced automation with Computer Use capabilities\n2. **VS Code Extensions**: Seamless integration with development workflows\n3. **ChatGPT & OpenAI**: Full support for GPT-based assistants\n4. **Gemini & Other Models**: Compatible with all major AI platforms\n\nSee the [Platform Integration Guide](docs/guides/browser/CLINE_BROWSER_INTEGRATION.md) for more information.\n\n## Docker Support\n\n```bash\n# Build the Docker image\nnpm run docker:build\n\n# Run with Docker\nnpm run docker:run\n```\n\n## Testing\n\n```bash\n# Run all tests\nnpm run test:all\n\n# Run specific tests\nnpm run test:accessibility\nnpm run test:computer-use\nnpm run test:e2e\n```\n\n## Contributing\n\nContributions are welcome! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for more information.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "automate",
        "scraping",
        "browser automation",
        "automation web",
        "automate browser"
      ],
      "category": "browser-automation"
    },
    "samuelvinay91--uniauto-mcp-server": {
      "owner": "samuelvinay91",
      "name": "uniauto-mcp-server",
      "url": "https://github.com/samuelvinay91/uniauto-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/samuelvinay91.webp",
      "description": "Automates web and desktop applications with advanced self-healing capabilities and AI integration, enabling seamless test execution and case management. Incorporates a multi-layered recovery strategy to adapt to changes in applications during testing processes.",
      "stars": 3,
      "forks": 1,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-13T13:37:33Z",
      "readme_content": "# UniAuto MCP Server\n\n<p align=\"center\">\n  \n</p>\n\n[![smithery badge](https://smithery.ai/badge/@samuelvinay91/uniauto-mcp-server)](https://smithery.ai/server/@samuelvinay91/uniauto-mcp-server)\n\nUniversal Test Automation MCP Server for web and desktop automation with self-healing capabilities and AI integration.\n\n## Cutting-Edge Features\n\nUniAuto MCP Server incorporates several cutting-edge and futuristic features that position it at the forefront of test automation technology:\n\n### 1. Multi-Layered Self-Healing Automation\nThe server's 5-tier self-healing mechanism is revolutionary, using a sophisticated cascade of recovery strategies:\n- Repository-based alternative selectors\n- Role-based accessibility selectors\n- Dynamic looser selector generation\n- Visual element matching using DOM and image recognition\n- Contextual text-proximity detection\n\nThis multi-strategy approach creates extraordinarily resilient tests that can survive even major UI overhauls.\n\n### 2. AI-Driven Test Generation & Maintenance\nIntegration with Claude and other LLMs enables:\n- Natural language test creation (\"Automate the checkout process\")\n- Automatic test step generation with appropriate selectors\n- Intelligent response parsing to turn AI outputs into executable commands\n- Visual context interpretation (using screenshots as inputs)\n- Automated test code generation in multiple frameworks (Playwright, Cypress, Jest, etc.)\n- Support for various testing styles (BDD, TDD) and output formats\n- Application structure analysis for intelligent test creation\n\n### 3. MCP (Model Context Protocol) Integration\nThe MCP implementation is particularly forward-thinking:\n- Allows AI assistants to directly control testing infrastructure\n- Exposes a standardized API for automation actions\n- Enables seamless integration with Smithery.ai and other AI orchestration platforms\n- Creates a bridge between LLMs and web/desktop automation\n\n### 4. Unified Web + Desktop Automation\nThe integration of both web testing (via Playwright) and desktop automation within a single framework provides:\n- Cross-domain testing capabilities\n- Ability to test flows that span browsers and native applications\n- Consistent API across different application types\n\n### 5. Visual Intelligence\nThe implementation of visual matching provides:\n- Element recognition by appearance rather than structure\n- Testing continuity even when DOM elements change completely\n- Pixel-perfect comparison capabilities\n\n## Core Features\n\n- Web automation using Playwright (multi-browser support)\n- Desktop automation capabilities\n- Self-healing selectors for resilient test automation\n- AI integration for test generation (supports Claude and other models)\n- Automated test code generation in multiple frameworks and styles\n- MCP (Model Context Protocol) compatibility for use with AI assistants\n- Test case management and execution history\n- Visual element matching\n\n## Impact on Test Automation Ecosystem\n\nUniAuto MCP Server has the potential to transform the test automation landscape:\n\n### 1. Maintenance Cost Reduction\nThe self-healing capabilities dramatically reduce the #1 pain point in test automation - maintenance costs. Studies suggest that organizations spend 30-40% of testing time on test maintenance. UniAuto could reduce this by 70-80%, freeing QA resources for more strategic work.\n\n### 2. Democratization of Test Automation\nThe AI integration allows non-technical stakeholders to create tests using natural language, potentially expanding test automation adoption by:\n- Allowing product managers to directly specify acceptance tests\n- Enabling business analysts to validate features without coding\n- Reducing the specialized skills required for test creation\n\n### 3. Resilience Revolution\nBy solving the brittleness problem in modern automation, UniAuto shifts the entire ecosystem toward resilience-focused testing rather than selector-focused testing. This paradigm shift fundamentally changes how tests are written and evaluated.\n\n### 4. AI Amplification in Testing\nAs an MCP-compatible system that works with Claude and other models, UniAuto positions automation as an \"AI-native\" technology, creating a foundation for:\n- AI-driven exploratory testing\n- Autonomous test maintenance\n- Intelligent test prioritization based on application changes\n- Natural language test reporting for stakeholders\n\n### 5. Cross-Domain Testing Standards\nBy unifying web and desktop testing under one framework, UniAuto helps establish new standards for end-to-end testing that transcend the current siloed approach to different application types.\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/uniauto-mcp-server.git\ncd uniauto-mcp-server\n\n# Install dependencies\nnpm install\n\n# Install Playwright browsers\nnpx playwright install\n\n# Create environment file\ncp .env.example .env\n```\n\n## Configuration\n\nEdit the `.env` file to configure the server:\n\n```\n# Server Configuration\nPORT=3000\nNODE_ENV=development\n\n# Database (optional)\nMONGODB_URI=mongodb://localhost:27017/uniauto\n\n# Claude Configuration (required for AI processing)\nCLAUDE_API_KEY=your_claude_api_key\nCLAUDE_MODEL=claude-3-7-sonnet-20240229\n```\n\n### Claude API Integration\n\nUniAuto MCP Server uses the official Anthropic SDK to integrate with Claude:\n\n```javascript\nconst Anthropic = require('@anthropic-ai/sdk');\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.CLAUDE_API_KEY,\n});\n\nconst response = await anthropic.messages.create({\n  model: \"claude-3-7-sonnet-20240229\",\n  max_tokens: 1024,\n  messages: [{ role: \"user\", content: \"Hello, Claude\" }],\n});\n```\n\n## Usage\n\n```bash\n# Start the server in development mode\nnpm run dev\n\n# Start the server in production mode\nnpm start\n```\n\n## API Endpoints\n\n### Health Check\n- `GET /api/health` - Check server status\n\n### Automation Commands\n- `POST /api/execute` - Execute automation command\n\n### Test Case Management\n- `POST /api/test-cases` - Create a test case\n- `GET /api/test-cases` - Get all test cases\n- `GET /api/test-cases/:id` - Get a test case by ID\n- `PUT /api/test-cases/:id` - Update a test case\n- `DELETE /api/test-cases/:id` - Delete a test case\n\n### AI Integration\n- `POST /api/ai/process` - Process automation task with AI\n\n### Test Generation\n- `POST /api/generate-tests` - Generate test cases for an application\n- `POST /api/generate-full-suite` - Generate a complete test suite with multiple test types\n- `POST /api/scaffold-project` - Scaffold a complete test project structure\n- `GET /api/test-frameworks` - Get available test frameworks, styles, and formats\n\n### Advanced Testing\n- `POST /api/visual-compare` - Compare a page or element against a baseline image\n- `POST /api/accessibility-test` - Perform accessibility testing on a page\n- `POST /api/performance-test` - Perform performance testing on a page\n- `POST /api/network-trace` - Trace network activity for API testing\n- `POST /api/test-suite` - Run a comprehensive test suite\n\n### MCP Integration\n- `POST /api/mcp/invoke` - MCP compatible command execution\n- `GET /api/mcp/manifest` - Get MCP manifest\n\n## MCP Integration\n\nThis server is compatible with the Model Context Protocol (MCP) used by AI assistants like Claude. To use it with Claude or other AI models:\n\n1. Start the server\n2. Register the MCP server with the AI assistant\n3. The AI can now use the automation capabilities via the MCP protocol\n\n### Smithery.ai Integration\n\n[![smithery badge](https://smithery.ai/badge/@samuelvinay91/uniauto-mcp-server)](https://smithery.ai/server/@samuelvinay91/uniauto-mcp-server)\n\nUniAuto MCP Server integrates seamlessly with [Smithery.ai](https://smithery.ai), making it easy to connect with Claude 3.7 and other AI assistants:\n\nFor seamless integration with AI assistants, you can use Smithery.ai:\n\n```bash\n# Install Smithery CLI\nnpm install -g @smithery/cli\n\n# Connect UniAuto to Smithery\nsmithery connect uniauto-mcp-server\n\n# Connect to an AI assistant\nsmithery connect --assistant claude\n```\n\nOnce connected, you can use Claude Code, Claude Web, VSCode with Claude Extension, or Cursor to control UniAuto for automated testing.\n\nSee the [Smithery Setup Guide](docs/setup/SMITHERY-CLAUDE-GUIDE.md) for detailed instructions.\n\n### AI Assistant Integration\n\nUniAuto works with various AI assistants:\n\n- [Claude Integration Guide](docs/ai-integration/claude.md)\n- [VSCode Integration Guide](docs/ai-integration/vscode.md)\n- [Cursor Integration Guide](docs/ai-integration/cursor.md)\n- [Other AI Models Integration](docs/ai-integration/other-models.md)\n- [Test Generation Guide](docs/ai-integration/test-generation.md)\n\n## Test Generation Capabilities\n\nUniAuto MCP Server can automatically generate test code in various frameworks and styles:\n\n- **Multiple Frameworks**: Generate tests for Playwright, Cypress, Jest, Selenium, WebDriverIO, and more\n- **Test Styles**: Support for BDD, TDD, and other testing methodologies\n- **Output Formats**: JavaScript, TypeScript, Python, Java, C#, and Ruby\n- **Application Analysis**: Intelligent application structure analysis for context-aware test generation\n- **Project Scaffolding**: Generate complete test projects with configuration files\n- **Claude AI Integration**: Uses Claude 3.7 to produce high-quality, maintainable test code\n- **MCP Integration**: All test generation capabilities exposed via the Model Context Protocol\n\n## Advanced Testing Capabilities\n\nUniAuto MCP Server provides comprehensive testing capabilities beyond just generating test code:\n\n- **Visual Testing**: Compare page or element screenshots against baselines with configurable thresholds\n- **Accessibility Testing**: Check WCAG compliance with detailed reports on issues and suggested fixes \n- **Performance Testing**: Measure key web performance metrics like load time, FCP, LCP, and resources\n- **Network Tracing**: Monitor API calls, analyze responses, and validate network behavior\n- **Parallel Execution**: Run multiple test types concurrently to reduce total execution time\n- **Comprehensive Test Suite**: Combined test execution with unified reporting\n\nSee the [Test Generation Guide](docs/ai-integration/test-generation.md) for detailed API documentation and examples.\n\n## Self-Healing Capabilities\n\nThe server uses several strategies for self-healing selectors:\n\n1. Alternative selector repository\n2. Role-based selectors (Playwright specific)\n3. Looser CSS selector generation\n4. Visual element matching using Playwright's built-in capabilities\n5. Nearest text-based element finding\n\n## Playwright Benefits\n\nPlaywright offers several advantages for test automation:\n\n- **Cross-browser support**: Works with Chromium, Firefox, and WebKit\n- **Modern web support**: Better handling of Shadow DOM, iframes, and web components\n- **Powerful selectors**: Role-based selectors, text-based selection, and CSS/XPath support\n- **Auto-waiting**: Automatically waits for elements to be ready before acting\n- **Reliable actions**: More reliable element interactions with retries and timing management\n- **Network control**: Intercept and modify network requests\n- **Headless and headed mode**: Visual debugging when needed\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "scraping",
        "browser",
        "browser automation",
        "automation web",
        "automates web"
      ],
      "category": "browser-automation"
    },
    "sethbang--mcp-screenshot-server": {
      "owner": "sethbang",
      "name": "mcp-screenshot-server",
      "url": "https://github.com/sethbang/mcp-screenshot-server",
      "imageUrl": "/freedevtools/mcp/pfp/sethbang.webp",
      "description": "Captures screenshots of web pages and local HTML files using Puppeteer while allowing for configurable viewport dimensions and full page screenshot support.",
      "stars": 12,
      "forks": 10,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-03T19:57:57Z",
      "readme_content": "# MCP Screenshot Server\n\nAn MCP server implementation that provides screenshot functionality using Puppeteer. This server allows capturing screenshots of web pages and local HTML files through a simple MCP tool interface.\n\n## Features\n\n- Capture screenshots of any web page or local HTML file\n- Configurable viewport dimensions\n- Full page screenshot support\n- Custom output path option\n- Automatic screenshot directory management\n\n## Installation\n\n```bash\nnpm install\n```\n\n## Usage\n\nThe server provides a `take_screenshot` tool with the following options:\n\n```typescript\n{\n  url: string;         // URL to capture (can be http://, https://, or file:///)\n  width?: number;      // Viewport width in pixels (1-3840)\n  height?: number;     // Viewport height in pixels (1-2160)\n  fullPage?: boolean;  // Capture full scrollable page\n  outputPath?: string; // Custom output path (optional)\n}\n```\n\n## Development\n\n```bash\n# Build the project\nnpm run build\n\n# Run the MCP inspector for testing\nnpm run inspector\n```\n\n## License\n\nMIT\n",
      "npm_url": "https://www.npmjs.com/package/mcp-screenshot-server",
      "npm_downloads": 640,
      "keywords": [
        "automation",
        "html",
        "scraping",
        "browser automation",
        "screenshots web",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "showfive--playwright-mcp-server": {
      "owner": "showfive",
      "name": "playwright-mcp-server",
      "url": "https://github.com/showfive/playwright-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/showfive.webp",
      "description": "Control browsers for web interaction and automate tasks, including content retrieval and simulation of mouse operations on web pages.",
      "stars": 7,
      "forks": 4,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-07-08T15:41:34Z",
      "readme_content": "# Playwright MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@showfive/playwright-mcp-server)](https://smithery.ai/server/@showfive/playwright-mcp-server)\n\nEnglish | [Êó•Êú¨Ë™û](README.ja.md)\n\nThis project is a server that provides Playwright web page content retrieval functionality using the Model Context Protocol (MCP).\n\n## Features\n\n- Page navigation\n- Full page content retrieval\n- Visible content retrieval\n- Interactive elements detection\n- Mouse operation simulation\n- Echo functionality for testing\n\n## Installation\n\n### Installing via Smithery\n\nTo install Playwright MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@showfive/playwright-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @showfive/playwright-mcp-server --client claude\n```\n\n### Manual Installation\n```bash\nnpm install\n```\n\n## Usage\n\n### Starting the Server\n\n```bash\nnpm run build\nnpm start\n```\n\n### MCP Tools\n\nThe following tools are available:\n\n1. `navigate`\n   - Navigate to a specified URL\n   - Arguments: `{ url: string }`\n   - Returns: Navigation result\n\n2. `get_all_content`\n   - Retrieve content from the entire page\n   - Arguments: None\n   - Returns: All text content from the page\n\n3. `get_visible_content`\n   - Retrieve currently visible content\n   - Arguments: `{ minVisiblePercentage?: number }`\n   - Returns: Visible text content\n\n4. `get_interactive_elements`\n   - Get position information of interactive elements (buttons, links, etc.) on the page\n   - Arguments: None\n   - Returns: Coordinates and boundary information of interactive elements\n\n5. `move_mouse`\n   - Move mouse cursor to specified coordinates\n   - Arguments: `{ x: number, y: number }`\n   - Returns: Operation result\n\n6. `mouse_click`\n   - Execute mouse click at specified coordinates\n   - Arguments: `{ x: number, y: number, button?: \"left\" | \"right\" | \"middle\", clickCount?: number }`\n   - Returns: Click operation result\n\n7. `mouse_wheel`\n   - Execute mouse wheel scrolling\n   - Arguments: `{ deltaY: number, deltaX?: number }`\n   - Returns: Scroll operation result\n\n8. `drag_and_drop`\n   - Execute drag and drop operation\n   - Arguments: `{ sourceX: number, sourceY: number, targetX: number, targetY: number }`\n   - Returns: Drag and drop operation result\n\n9. `echo`\n   - Echo tool for testing\n   - Arguments: `{ message: string }`\n   - Returns: Sent message\n\n## Development\n\n### Running Tests\n\n```bash\n# Run all tests\nnpm test\n\n# Run tests in watch mode\nnpm run test:watch\n\n# Generate coverage report\nnpm run test:coverage\n```\n\n### Test Structure\n\n- `tools/*.test.ts`: Function tests for each tool\n- `mcp-server.test.ts`: MCP server function tests\n\n## Implementation Features\n\n1. Content Retrieval\n   - Full page content retrieval\n   - Visible content only retrieval\n   - Proper HTML parsing\n\n2. Interaction\n   - Detection and position information retrieval of interactive elements\n   - Mouse operation simulation (movement, clicks, scrolling)\n   - Drag and drop support\n\n3. Error Handling\n   - Proper navigation error handling\n   - Timeout processing\n   - Invalid URL detection\n\n4. Configuration Flexibility\n   - Headless/head mode selection\n   - Custom user agent\n   - Viewport size settings\n\n## Important Notes\n\n- Ensure necessary environment variables are set before using the MCP server\n- Follow the terms of service of target websites when retrieving web page content\n- Maintain appropriate intervals when sending multiple requests\n- When performing mouse operations, maintain appropriate intervals as they simulate actual user interactions\n\n## License\n\nISC\n",
      "npm_url": "https://www.npmjs.com/package/playwright-mcp-server",
      "npm_downloads": 5469,
      "keywords": [
        "automation",
        "browser",
        "browsers",
        "browser automation",
        "automation web",
        "browsers web"
      ],
      "category": "browser-automation"
    },
    "steel-dev--steel-mcp-server": {
      "owner": "steel-dev",
      "name": "steel-mcp-server",
      "url": "https://github.com/steel-dev/steel-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/steel-dev.webp",
      "description": "Connects LLMs to the web using Puppeteer-based tools, enabling actions like clicking, scrolling, typing, and taking screenshots. Facilitates tasks such as searching for recipes, tracking shipments, comparing product prices, and filling out online forms.",
      "stars": 43,
      "forks": 9,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-02T15:08:00Z",
      "readme_content": "# Steel MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@steel-dev/steel-mcp-server)](https://smithery.ai/server/@steel-dev/steel-mcp-server)\n\nhttps://github.com/user-attachments/assets/25848033-40ea-4fa4-96f9-83b6153a0212\n\n\nA Model Context Protocol (MCP) server that enables LLMs like Claude to navigate the web through Puppeteer-based tools and Steel. Based on the Web Voyager framework, it provides tools for all the standard web actions click clicking/scrolling/typing/etc and taking screenshots.\n\nAsk Claude to help you with tasks like:\n- \"Search for a recipe and save the ingredients list\"\n- \"Track a package delivery status\"\n- \"Find and compare prices for a specific product\"\n- \"Fill out an online job application\"\n\n<a href=\"https://glama.ai/mcp/servers/tbd32geble\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/tbd32geble/badge\" alt=\"Steel Server MCP server\" /></a>\n\n## üöÄ Quick Start\n\nBelow is a streamlined guide to run Steel Voyager inside Claude Desktop. You only need to adjust the environment options to switch between Steel Cloud and a local/self-hosted instance.\n\n### Prerequisites\n\n1. Latest versions of Git and Node.js installed\n2. [Claude Desktop](https://claude.ai/download) installed\n3. (Optional) [Steel Docker image](https://github.com/steel-dev/steel-browser) running locally, if you plan to self-host\n4. (Optional) If running Steel Cloud, bring your API key. Get one [here](https://app.steel.dev/settings/api-keys).\n\n---\n\n### A) Quick Start (Steel Cloud)\n\n1. Clone and build the project:\n\n   ```bash\n   git clone https://github.com/steel-dev/steel-mcp-server.git\n   cd steel-mcp-server\n   npm install\n   npm run build\n   ```\n\n2. Configure Claude Desktop (`~/Library/Application Support/Claude/claude_desktop_config.json`) by adding a server entry:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"steel-puppeteer\": {\n         \"command\": \"node\",\n         \"args\": [\"path/to/steel-voyager/dist/index.js\"],\n         \"env\": {\n           \"STEEL_LOCAL\": \"false\",\n           \"STEEL_API_KEY\": \"YOUR_STEEL_API_KEY_HERE\",\n           \"GLOBAL_WAIT_SECONDS\": \"1\"\n         }\n       }\n     }\n   }\n   ```\n\n   - Replace \"YOUR_STEEL_API_KEY_HERE\" with your valid Steel API key.\n   - Make sure \"STEEL_LOCAL\" is set to \"false\" for cloud mode.\n\n3. Start Claude Desktop. It will automatically launch this MCP server in Cloud mode.\n\n4. (Optional) You can view or manage active Steel Browser sessions in your [dashboard](https://app.steel.dev).\n\n---\n\n### B) Quick Start (Local / Self-Hosted Steel)\n\n1. Ensure your local or self-hosted Steel service is running (e.g., using the open-source Steel Docker image).\n\n2. Clone and build the project (same as above if not done yet):\n\n   ```bash\n   git clone https://github.com/steel-dev/steel-mcp-server.git\n   cd steel-mcp-server\n   npm install\n   npm run build\n   ```\n\n3. Configure Claude Desktop (`~/Library/Application Support/Claude/claude_desktop_config.json`) for local mode:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"steel-puppeteer\": {\n         \"command\": \"node\",\n         \"args\": [\"path/to/steel-voyager/dist/index.js\"],\n         \"env\": {\n           \"STEEL_LOCAL\": \"true\",\n           \"STEEL_BASE_URL\": \"http://localhost:3000\",\n           \"GLOBAL_WAIT_SECONDS\": \"1\"\n         }\n       }\n     }\n   }\n   ```\n\n   - \"STEEL_LOCAL\" must be \"true\".\n   - If self hosting on a cloud server, configure \"STEEL_BASE_URL\" to point to your local/self-hosted Steel URL.\n\n4. Start Claude Desktop, which will connect to your locally running Steel and launch Steel Voyager in local mode.\n\n5. (Optional) To view sessions locally, you can visit your self-hosted dashboard ([localhost:5173](http://localhost:5173/)) or logs specific to your Steel runtime environment.\n\n---\n\nThat‚Äôs it! Once Claude Desktop starts, it will orchestrate the MCP server behind the scenes and let you interact with the web automation capabilities through Steel Voyager.\n\nFor more info on getting set up or if you're having issues, check out the MCP set-up docs: https://modelcontextprotocol.io/quickstart/user\n\n## Components\n\n### Tools\n\n- **navigate**\n\n  - Navigate to any URL in the browser\n  - Inputs:\n    - `url` (string, required): URL to navigate to (e.g. \"https://example.com\").\n\n- **search**\n\n  - Perform a Google search by navigating to \"https://www.google.com/search?q=encodedQuery\".\n  - Inputs:\n    - `query` (string, required): Text to search for on Google.\n\n- **click**\n\n  - Click elements on the page using numbered labels\n  - Inputs:\n    - `label` (number, required): The label number of the element to click.\n\n- **type**\n\n  - Type text into input fields using numbered labels\n  - Inputs:\n    - `label` (number, required): The label number of the input field.\n    - `text` (string, required): Text to type into the field.\n    - `replaceText` (boolean, optional): If true, replaces any existing text in the field.\n\n- **scroll_down**\n\n  - Scroll down the page\n  - Inputs:\n    - `pixels` (integer, optional): Number of pixels to scroll down. If not specified, scrolls by one full page.\n\n- **scroll_up**\n\n  - Scroll up the page\n  - Inputs:\n    - `pixels` (integer, optional): Number of pixels to scroll up. If not specified, scrolls by one full page.\n\n- **go_back**\n\n  - Navigate to the previous page in browser history\n  - No inputs required\n\n- **wait**\n\n  - Wait for up to 10 seconds, useful for pages that load slowly or need more time for dynamic content to appear.\n  - Inputs:\n    - `seconds` (number, required): Number of seconds to wait (0 to 10).\n\n- **save_unmarked_screenshot**\n  - Capture the current page without bounding boxes or highlights and store it as a resource.\n  - Inputs:\n    - `resourceName` (string, optional): Name to store the screenshot under (e.g. \"before_login\"). If omitted, a generic name is generated automatically.\n\n### Resources\n\n- **Screenshots**:\n  Each saved screenshot is accessible via an MCP resource URI in the form of:\n  ‚Ä¢ `screenshot://RESOURCE_NAME`\n\n  The server stores these screenshots whenever you specify the \"save_unmarked_screenshot\" tool or when an action concludes (for most tools) with an annotated screenshot. These images can be retrieved through a standard MCP resource retrieval request.\n\n(Note: While console logs are still collected for analysis and debugging, they are not exposed as retrievable resources in this implementation. They appear in the server‚Äôs logs but are not served via MCP resource URIs.)\n\n## Key Features\n\n- Browser automation with Puppeteer\n- Steel integration for browser session management\n- Visual element identification through numbered labels\n- Screenshot capabilities\n- Basic web interaction (navigation, clicking, form filling)\n- Lazy-loading support through scrolling\n- Local and remote Steel instance support\n\n## Understanding Bounding Boxes\n\nWhen interacting with pages, Steel Puppeteer adds visual overlays to help identify interactive elements:\n\n- Each interactive element (buttons, links, inputs) gets a unique numbered label\n- Colored boxes outline the elements' boundaries\n- Labels appear above or inside elements for easy reference\n- Use these numbers when specifying elements for click or type operations\n\n\n## Configuration\n\nSteel Voyager can run in two modes: \"Local\" or \"Cloud\". This behavior is controlled by environment variables. Below is a concise overview:\n\n| Environment Variable | Default                 | Description                                                                                                                                                                                                                    |\n| -------------------- | ----------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| STEEL_LOCAL          | \"false\"                 | Determines if Steel Voyager runs in local (true) or cloud (false) mode.                                                                                                                                                        |\n| STEEL_API_KEY        | (none)                  | Required only when STEEL_LOCAL = \"false\". Used to authenticate requests with the Steel endpoint.                                                                                                                               |\n| STEEL_BASE_URL       | \"https://api.steel.dev\" | The base URL for the Steel API. Override this if self-hosting the Steel server (either locally or in your own cloud environment). If STEEL_LOCAL = \"true\" and STEEL_BASE_URL is unset, it defaults to \"http://localhost:3000\". |\n| GLOBAL_WAIT_SECONDS  | (none)                  | Optional. Number of seconds to wait after each tool action (for instance, to allow slow-loading pages).                                                                                                                        |\n\n### Local Mode\n\n1. Set STEEL_LOCAL=\"true\".\n2. (Optional) Set STEEL_BASE_URL to point to the Steel server if you host it on a custom domain. Otherwise, Steel Voyager will default to http://localhost:3000.\n3. No API key is required in this mode.\n4. Puppeteer will connect via ws://0.0.0.0:3000\n\nExample:\n\nexport STEEL_LOCAL=\"true\"\n\nexport STEEL_BASE_URL=\"http://localhost:3000\" # only if overriding\n\n### Cloud Mode\n\n1. Set STEEL_LOCAL=\"false\".\n2. Set STEEL_API_KEY so Steel Voyager can authenticate with the Steel cloud service (or your self-hosted Steel if you changed STEEL_BASE_URL).\n3. STEEL_BASE_URL defaults to https://api.steel.dev; override this if you have a self-hosted Steel instance running on another endpoint.\n4. Puppeteer will connect via wss://connect.steel.dev?sessionId=‚Ä¶&apiKey=‚Ä¶\n\nExample:\n\nexport STEEL_LOCAL=\"false\"\n\nexport STEEL_API_KEY=\"YOUR_STEEL_API_KEY_HERE\"\n\n### Claude Desktop Configuration\n\nTo use Steel Voyager with Claude Desktop, add something like this to your config file (often located at\n~/Library/Application Support/Claude/claude_desktop_config.json):\n\n```json\n{\n  \"mcpServers\": {\n    \"steel-puppeteer\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/steel-puppeteer/dist/index.js\"],\n      \"env\": {\n        \"STEEL_LOCAL\": \"false\",\n        \"STEEL_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\nAdjust the environment variables to match your desired mode:\n\n‚Ä¢ If running locally/self hosted, keep `\"STEEL_LOCAL\": \"true\"` and optionally `\"STEEL_BASE_URL\": \"http://localhost:3000\"`.  \n‚Ä¢ If running in cloud mode, remove `\"STEEL_LOCAL\": \"true\"`, add `\"STEEL_LOCAL\": \"false\"`, and supply `\"STEEL_API_KEY\": \"<YourKey>\"`\nThis will allow Claude Desktop to start Steel Voyager in the correct mode.\n\n## Installation & Running\n\n### Installing via Smithery\n\nTo install Steel MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@steel-dev/steel-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @steel-dev/steel-mcp-server --client claude\n```\n\n### Local Development\n\n1. Clone the repository\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n4. Start the server:\n   ```bash\n   npm start\n   ```\n\n\n## Example Usage üìπ\n\nWe asked Claude to impress us with it's new abilities and it decided to research the latest developments with sora then create an interactive visualization to demonstrate the data behind the model and how it works ü§Ø\n\n\nhttps://github.com/user-attachments/assets/8d4293ea-03fc-459f-ba6b-291f5b017ad7\n\n*Sorry for quality, github forces us to keep the videos under 10mb :/\n\n## Troubleshooting\n\nCommon issues and solutions:\n\n1. Verify your Steel API key when using cloud service and ensure your local Steel instance is running. Check that you have proper network connectivity to the service.\n\n2. If you're having issues with how pages are being rendered or marked up and sent to claude, try to add a delay in your config via the `GLOBAL_WAIT_SECONDS` env variable.\n\n3. Ensure the page has fully loaded and check your viewport size settings. Make sure your system has sufficient available memory for capturing screenshots.\n\n4. Session clean up isn't the best right now so you may need to manually release sessions as they're spun up to execute tasks.\n\n5. Prompting claude the right way can go a long way in improving performance and avoiding silly mistakes it may produce.\n\n6. Leverage the session viewer to analyse where your model may be getting stopped out.\n\n7. After ~15-20 browser actions claude starts to slow down as it's context window gets filled but with images. It shouldn't be horrible but we've noticed some latency here, especially with the Claude Desktop client lagging behind.\n\n## Contributing\n\nThis project is experimental and under active development. Contributions are welcome!\n\n1. Fork the repository\n2. Create a feature branch\n3. Submit a pull request\n\nPlease include:\n\n- Clear description of changes\n- Motivation\n- Documentation updates\n\n## Disclaimer\n\n‚ö†Ô∏è This project is experimental and based on the Web Voyager codebase. Use in production environments at your own risk.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "puppeteer",
        "scraping",
        "automation web",
        "browser automation",
        "puppeteer based"
      ],
      "category": "browser-automation"
    },
    "tanob--mcp-desktop-automation": {
      "owner": "tanob",
      "name": "mcp-desktop-automation",
      "url": "https://github.com/tanob/mcp-desktop-automation",
      "imageUrl": "/freedevtools/mcp/pfp/tanob.webp",
      "description": "Control desktop environments through mouse movements, keyboard input simulation, and screenshot capture. Integrate these automation features with AI models to enhance user interactivity and functionality.",
      "stars": 16,
      "forks": 6,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-25T18:27:05Z",
      "readme_content": "# MCP Desktop Automation\n\nA Model Context Protocol server that provides desktop automation capabilities using RobotJS and screenshot capabilities. This server enables LLMs to control mouse movements, keyboard inputs, and capture screenshots of the desktop environment.\n\n## Configuration to use Desktop Automation Server\n\nHere's how to configure Claude Desktop to use the MCP Desktop Automation server:\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"desktop-automation\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-desktop-automation\"]\n    }\n  }\n}\n```\n\n### Permissions\n\nThis server requires system-level permissions to:\n\n* Capture screenshots of your screen\n* Control mouse movement and clicks\n* Simulate keyboard input\n\nWhen first running Claude Desktop with this server, you may need to grant these permissions in your operating system's security settings.\n\n## Limitations\n\nWhile this server works with various MCP clients, it has been primarily tested with Claude Desktop.\n\n**Important**: The current implementation has a 1MB response size limit. For screen captures, this means:\n* High-resolution screenshots may exceed this limit and fail\n* Testing has shown 800x600 resolution works reliably\n* Consider reducing screen resolution or capturing specific screen areas if you encounter issues\n\n## Requirements\n\n- Node.js (>=14.x)\n\n## Components\n\n### Tools\n\n- **get_screen_size**\n  - Gets the screen dimensions\n  - No input parameters required\n\n- **screen_capture**\n  - Captures the current screen content\n  - No input parameters required\n\n- **keyboard_press**\n  - Presses a keyboard key or key combination\n  - Inputs:\n    - `key` (string, required): Key to press (e.g., 'enter', 'a', 'control')\n    - `modifiers` (array of strings, optional): Modifier keys to hold while pressing the key. Possible values: \"control\", \"shift\", \"alt\", \"command\"\n\n- **keyboard_type**\n  - Types text at the current cursor position\n  - Input: `text` (string, required): Text to type\n\n- **mouse_click**\n  - Performs a mouse click\n  - Inputs:\n    - `button` (string, optional, default: \"left\"): Mouse button to click. Possible values: \"left\", \"right\", \"middle\"\n    - `double` (boolean, optional, default: false): Whether to perform a double click\n\n- **mouse_move**\n  - Moves the mouse to specified coordinates\n  - Inputs:\n    - `x` (number, required): X coordinate\n    - `y` (number, required): Y coordinate\n\n### Resources\n\nThe server provides access to screenshots:\n\n1. **Screenshot List** (`screenshot://list`)\n   - Lists all available screenshots by name\n\n2. **Screenshot Content** (`screenshot://{id}`)\n   - PNG images of captured screenshots\n   - Accessible via the screenshot ID (timestamp-based naming)\n\n## Key Features\n\n- Desktop mouse control\n- Keyboard input simulation\n- Screen size detection\n- Screenshot capabilities\n- Simple JSON response format\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "https://www.npmjs.com/package/mcp-desktop-automation",
      "npm_downloads": 1520,
      "keywords": [
        "automation",
        "browser",
        "web",
        "browser automation",
        "automation web",
        "automation features"
      ],
      "category": "browser-automation"
    },
    "tatn--mcp-server-fetch-python": {
      "owner": "tatn",
      "name": "mcp-server-fetch-python",
      "url": "https://github.com/tatn/mcp-server-fetch-python",
      "imageUrl": "/freedevtools/mcp/pfp/tatn.webp",
      "description": "Fetch and transform web content into various formats, supporting both raw text extraction from various URLs and JavaScript-rendered content. The server facilitates extracting content from web pages, including media files, in a structured manner.",
      "stars": 7,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-19T02:28:53Z",
      "readme_content": "# mcp-server-fetch-python\n\nAn MCP server for fetching and transforming web content into various formats. This server provides comprehensive tools for extracting content from web pages, including support for JavaScript-rendered content and media files.\n\n<a href=\"https://glama.ai/mcp/servers/8d0zm2o56d\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/8d0zm2o56d/badge\" alt=\"Server Fetch Python MCP server\" /></a>\n\n## Features\n\n### Tools\n\nThe server provides four specialized tools:\n\n- **get-raw-text**: Extracts raw text content directly from URLs without browser rendering\n  - Arguments:\n    - `url`: URL of the target web page (text, JSON, XML, csv, tsv, etc.) (required)\n  - Best used for structured data formats or when fast, direct access is needed\n\n- **get-rendered-html**: Fetches fully rendered HTML content using a headless browser\n  - Arguments:\n    - `url`: URL of the target web page (required)\n  - Essential for modern web applications and SPAs that require JavaScript rendering\n\n- **get-markdown**: Converts web page content to well-formatted Markdown\n  - Arguments:\n    - `url`: URL of the target web page (required)\n  - Preserves structural elements while providing clean, readable text output\n\n- **get-markdown-from-media**: Performs AI-powered content extraction from media files\n  - Arguments:\n    - `url`: URL of the target media file (images, videos) (required)\n  - Utilizes computer vision and OCR for visual content analysis\n  - Requires a valid OPENAI_API_KEY to be set in environment variables\n  - Will return an error message if the API key is not set or if there are issues processing the media file\n\n## Usage\n\n### Claude Desktop\n\nTo use with Claude Desktop, add the server configuration:\n\nOn MacOS:  `~/Library/Application\\ Support/Claude/claude_desktop_config.json`  \nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n\"mcpServers\": {\n  \"mcp-server-fetch-python\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"mcp-server-fetch-python\"\n    ]\n  }\n}\n```\n\n\n## Environment Variables\n\nThe following environment variables can be configured:\n\n- **OPENAI_API_KEY**: Required for using the `get-markdown-from-media` tool. This key is needed for AI-powered image analysis and content extraction.\n- **PYTHONIOENCODING**: Set to \"utf-8\" if you encounter character encoding issues in the output.\n- **MODEL_NAME**: Specifies the model name to use. Defaults to \"gpt-4o\".\n\n```json\n\"mcpServers\": {\n  \"mcp-server-fetch-python\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"mcp-server-fetch-python\"\n    ],\n    \"env\": {\n        \"OPENAI_API_KEY\": \"sk-****\",\n        \"PYTHONIOENCODING\": \"utf-8\",\n        \"MODEL_NAME\": \"gpt-4o\",        \n    }\n  }\n}\n```\n\n\n### Local Installation\n\nAlternatively, you can install and run the server locally:\n\n```powershell\ngit clone https://github.com/tatn/mcp-server-fetch-python.git\ncd mcp-server-fetch-python\nuv sync\nuv build\n```\n\nThen add the following configuration to Claude Desktop config file:\n\n```json\n\"mcpServers\": {\n  \"mcp-server-fetch-python\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"--directory\",\n      \"path\\\\to\\\\mcp-server-fetch-python\",  # Replace with actual path to the cloned repository\n      \"run\",\n      \"mcp-server-fetch-python\"\n    ]\n  }\n}\n```\n\n## Development\n\n### Debugging\n\nYou can start the MCP Inspector using [npx](https://docs.npmjs.com/cli/v11/commands/npx)with the following commands:\n\n\n```bash\nnpx @modelcontextprotocol/inspector uvx mcp-server-fetch-python\n```\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory path\\\\to\\\\mcp-server-fetch-python run mcp-server-fetch-python\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "scraping",
        "automation",
        "web",
        "automation web",
        "browser automation",
        "scraping processing"
      ],
      "category": "browser-automation"
    },
    "theclarityproject--mcp-server": {
      "owner": "theclarityproject",
      "name": "mcp-server",
      "url": "https://github.com/theclarityproject/mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/theclarityproject.webp",
      "description": "Transform browser traffic into Model Context Protocols, enabling real-time data access for AI by extracting web API functionalities from HAR files. Capture network requests and convert them into tools for AI assistants like Claude.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-19T23:32:31Z",
      "readme_content": "# Clarity MCP Bootleg Market\n\nTurn browser traffic into tool calls. Smuggle your network requests into an MCP.\n\n## What's This All About?\n\nClarity is where you come when you need to get your hands on some Model Context Protocols (MCPs). Our server connects AI assistants like Claude with web APIs extracted from your HAR files. Think of it as a way to \"borrow\" functionality from websites and turn it into something AI can use.\n\n## How It Works\n\n```mermaid\nsequenceDiagram\n    participant Client as MCP Client (Claude)\n    participant Server as Clarity Server\n    participant Backend as Clarity Backend\n    participant API as Target Web APIs\n\n    note over Client,API: HAR File Processing\n    Backend->>Backend: Process HAR file\n    Backend->>Backend: Extract API endpoints\n    Backend->>Backend: Generate tools with AI\n    Backend->>Backend: Store in database\n\n    note over Client,API: Runtime Flow\n    Client->>Server: Connect via stdio\n    Client->>Server: ListTools request\n    Server->>Backend: Forward request\n    Backend->>Server: Return available tools\n    Server->>Client: Deliver tools to client\n\n    Client->>Server: CallTool request\n    Server->>Server: Transform tool name\n    Server->>Backend: Forward to backend\n    Backend->>API: Execute API call\n    API->>Backend: Return response\n    Backend->>Server: Return result\n    Server->>Client: Deliver to client\n```\n\n## Installation\n\n```bash\n# Install the package\nnpm install -g @lekt9/clarity-mcp\n\n# Set up your credentials\nexport CLARITY_API_KEY=your_api_key\n# Optional: Specify a specific MCP ID if you have multiple MCPs\nexport CLARITY_MCP_ID=your_mcp_id\n\n# Run the server\nclarity-mcp\n```\n\n## Creating MCPs\n\nTo create your own Model Context Protocols from HAR files:\n\n1. Visit [https://www.theclarityproject.net](https://www.theclarityproject.net)\n2. Upload your HAR file\n3. The platform will process the file and generate the necessary tools\n4. Obtain your API key from the website\n\n### The Underground MCP Market\n\n#### Premium Agent Tools\n\nMCPs are the secret sauce that AI agents crave. These Model Context Protocols are powerful tools that agents use to interact with external services and fetch real-time data. Without them, AI is trapped in its own bubble.\n\n#### APIs in Designer Clothes\n\nLet's be real - MCPs are just APIs with fancy clothes on. They follow OpenAPI specs like any other API, but they're packaged nicely for AI consumption. It's the same product, different wrapping - pure marketing genius.\n\n#### Reverse Engineering the Good Stuff\n\nEvery website out there is constantly sending network requests. With the right tools, you can capture these requests, reverse engineer them, and create your own bootleg copy of their API. It's like photocopying someone else's premium content.\n\n#### From Traffic to Premium MCP\n\nOur system takes your ordinary HAR files and transforms them into high-quality MCPs that any AI agent would pay top dollar for. We analyze the endpoints, parameters, and responses to create a perfect replica that tools can consume.\n\n> **Tip**: When an AI agent uses a tool, it's making an API call through an MCP. By creating these protocols, you can extend AI capabilities to interact with virtually any digital service.\n\n### Smuggling Guide\n\nA HAR (HTTP Archive) file captures all the network requests your browser makes while interacting with a website. Follow these steps to create one:\n\n#### Step 1: Open Developer Tools\n\nRight-click anywhere on the webpage and select \"Inspect\" or \"Inspect Element\". Alternatively, use these keyboard shortcuts:\n\n- Chrome/Edge/Firefox (Windows): F12 or Ctrl+Shift+I\n- Chrome/Edge/Firefox (Mac): Option+Cmd+I\n- Safari (Mac): Enable Develop menu first (Safari > Preferences > Advanced > Show Develop menu), then Option+Cmd+I\n\n#### Step 2: Record Network Activity\n\nIn the Developer Tools panel, navigate to the \"Network\" tab.\n\n- Ensure recording is active (usually a red circle icon).\n- Check the \"Preserve log\" option to keep requests across page loads.\n- Optional: Clear existing logs using the clear icon for a cleaner capture.\n- Perform the actions on the website that trigger the API calls you want to capture (e.g., logging in, loading data, submitting a form).\n\nInteract with the site thoroughly to ensure all desired requests are recorded.\n\n#### Step 3: Export HAR File\n\nOnce you've captured the necessary activity, right-click anywhere in the list of network requests.\n\n- Select \"Save all as HAR with content\" (or similar wording like \"Export HAR...\").\n- Choose a location to save the `.har` file.\n\nYou can now upload this HAR file using the uploader on the Clarity website.\n\n> **Important**: HAR files can contain sensitive information like cookies, authentication tokens, and personal data. Handle them securely and avoid sharing them publicly.\n\n## Usage with Claude\n\n1. Install the Claude Desktop application\n2. Open Claude settings and navigate to the MCP section\n3. Add a new MCP server with this command:\n   ```\n   npx -y @smithery/cli@latest install @lekt9/clarity-mcp --claude\n   ```\n4. Start a conversation with Claude and use the tools provided by your Clarity MCP\n\n## Environment Variables\n\n- `CLARITY_API_KEY`: API key for authenticating with the Clarity backend\n- `CLARITY_MCP_ID`: Optional MCP ID to specify which MCP to use (useful if you have multiple MCPs)\n- `NEXTJS_APP_URL`: URL of the Clarity backend (defaults to https://clarity.org/)\n\n## Technical Details\n\n### Architecture\n\nThe server follows a simple proxy architecture:\n\n1. **MCP Protocol Handling**: Implements the MCP protocol for client communication\n2. **Request Forwarding**: Forwards client requests to the Clarity backend\n3. **Response Transformation**: Transforms responses to match MCP protocol requirements\n\n### Key Components\n\n- **Server Class**: Main server implementation using the MCP SDK\n- **Request Handlers**: Handlers for ListTools and CallTool requests\n- **Name Transformation**: Functions to convert between naming conventions\n- **Error Handling**: Proper error propagation and handling\n\n## Development\n\nTo run the server in development mode:\n\n```bash\n# Clone the repository\ngit clone https://github.com/lekt9/clarity-mcp.git\ncd clarity-mcp\n\n# Install dependencies\nnpm install\n\n# Build the server\nnpm run build\n```\n\n## Limitations\n\n- The server requires a valid API key to make authenticated requests to the backend\n- Tool execution depends on the availability of the Clarity backend\n- The server does not cache tool definitions or results\n\n## License\n\nMIT\n",
      "npm_url": "https://www.npmjs.com/package/mcp-server",
      "npm_downloads": 29732,
      "keywords": [
        "automation",
        "scraping",
        "api",
        "automation web",
        "browser automation",
        "automation capabilities"
      ],
      "category": "browser-automation"
    },
    "twolven--mcp-server-puppeteer-py": {
      "owner": "twolven",
      "name": "mcp-server-puppeteer-py",
      "url": "https://github.com/twolven/mcp-server-puppeteer-py",
      "imageUrl": "/freedevtools/mcp/pfp/twolven.webp",
      "description": "Automate browser interactions by navigating web pages, taking screenshots, executing JavaScript, and monitoring console logs in a real browser environment using Playwright.",
      "stars": 16,
      "forks": 8,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-08-25T16:37:19Z",
      "readme_content": "# Puppeteer MCP Server (Python Implementation)\n\nA Model Context Protocol server that provides browser automation capabilities using Playwright (Python's equivalent to Puppeteer). This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment.\n\n## Overview\nThis Python implementation provides a stable alternative to the TypeScript version, offering the same capabilities with improved error handling and logging. It uses Playwright, which is the Python equivalent to Puppeteer, providing robust browser automation capabilities.\n\n## Key Features\n* Full browser automation\n* Page navigation\n* Screenshot capture (full page or elements)\n* Form interaction (clicking and filling)\n* JavaScript execution\n* Console log monitoring\n* Configurable timeouts\n* Detailed error handling\n* Comprehensive logging\n\n## Prerequisites\n* Python 3.8+\n* pip (Python package installer)\n\n## Installation\n1. Install the required packages:\n```bash\npip install -r requirements.txt\n```\n\n2. Install Playwright browsers:\n```bash\nplaywright install\n```\n\n## Usage\n\n### Starting the Server\nRun the server directly:\n```bash\npython puppeteer_server.py\n```\n\n### Claude Desktop Configuration\nAdd this to your Claude configuration file:\n```json\n{\n  \"mcpServers\": {\n    \"puppeteer\": {\n      \"command\": \"python\",\n      \"args\": [\"path/to/puppeteer.py\"]\n    }\n  }\n}\n```\n\n## Available Tools\n\n### puppeteer_navigate\nNavigate to any URL in the browser.\n```json\n{\n  \"name\": \"puppeteer_navigate\",\n  \"arguments\": {\n    \"url\": \"https://example.com\",\n    \"timeout\": 60000  // optional, defaults to 60000ms\n  }\n}\n```\n\n### puppeteer_screenshot\nCapture screenshots of the entire page or specific elements.\n```json\n{\n  \"name\": \"puppeteer_screenshot\",\n  \"arguments\": {\n    \"name\": \"my_screenshot\",\n    \"selector\": \"#specific-element\",  // optional\n    \"width\": 1280,  // optional, default: 1280\n    \"height\": 720,  // optional, default: 720\n    \"timeout\": 30000  // optional, defaults to 30000ms\n  }\n}\n```\n\n### puppeteer_click\nClick elements on the page.\n```json\n{\n  \"name\": \"puppeteer_click\",\n  \"arguments\": {\n    \"selector\": \".button-class\",\n    \"timeout\": 30000  // optional, defaults to 30000ms\n  }\n}\n```\n\n### puppeteer_fill\nFill out input fields.\n```json\n{\n  \"name\": \"puppeteer_fill\",\n  \"arguments\": {\n    \"selector\": \"#input-id\",\n    \"value\": \"text to fill\",\n    \"timeout\": 30000  // optional, defaults to 30000ms\n  }\n}\n```\n\n### puppeteer_evaluate\nExecute JavaScript in the browser console.\n```json\n{\n  \"name\": \"puppeteer_evaluate\",\n  \"arguments\": {\n    \"script\": \"document.title\",\n    \"timeout\": 30000  // optional, defaults to 30000ms\n  }\n}\n```\n\n## Error Handling\nThe server provides detailed error messages for common scenarios:\n* Navigation failures\n* Element not found\n* Timeout errors\n* JavaScript execution errors\n* Screenshot failures\n\n## Logging\nComprehensive logging is implemented with different levels:\n* INFO: Standard operations\n* ERROR: Operation failures\n* DEBUG: Detailed execution information\n\n## Notes\n* Browser launches in non-headless mode for better debugging\n* Default viewport size is 1280x720\n* All timeouts are configurable\n* Console logs are captured and stored\n* Screenshots are stored in memory with base64 encoding\n\n## Contributing\nContributions are welcome! Please read the repository's contributing guidelines before submitting pull requests.\n\n## License\nThis project is licensed under the Apache 2.0 License - see the LICENSE file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "puppeteer",
        "browser",
        "browser automation",
        "automate browser",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "uui6yee--scrm": {
      "owner": "uui6yee",
      "name": "scrm",
      "url": "https://github.com/uui6yee/scrm",
      "imageUrl": "/freedevtools/mcp/pfp/uui6yee.webp",
      "description": "Integrates multiple chat platforms such as Line and WhatsApp into a unified interface for message management, while enhancing browser fingerprint injection through advanced UserAgent strategies and detection mechanisms. Features a user-friendly control panel with real-time monitoring of fingerprint status.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-05-08T03:13:32Z",
      "readme_content": "## Ê≥∞Ê£ÆË∑®Â¢É\r\n\r\n### È°πÁõÆÁÆÄ‰ªã\r\n\r\nÊ≥∞Ê£ÆË∑®Â¢ÉÊòØ‰∏Ä‰∏™ËÅöÂêàËÅäÂ§©ËΩØ‰ª∂ÔºåÁõÆÂâçÊîØÊåÅ‰∫Ü Line Âíå Whatsapp ‰∏§‰∏™‰∏™ËÅäÂ§©Âπ≥Âè∞ÔºåÁî®Êà∑ÂèØ‰ª•Âú®‰∏Ä‰∏™ÁïåÈù¢‰∏äÂêåÊó∂Êé•Êî∂ÂíåÂèëÈÄÅÊ∂àÊÅØ„ÄÇ\r\n\r\n# ÊåáÁ∫πÊ≥®ÂÖ•ÂäüËÉΩ‰ºòÂåñ\r\n\r\n## Ê¶ÇËø∞\r\n\r\nÊú¨Ê¨°‰ºòÂåñÂÆåÂñÑ‰∫ÜÊ≥∞Ê£ÆË∑®Â¢ÉÂ∫îÁî®‰∏≠ÁöÑÊµèËßàÂô®ÊåáÁ∫πÊ≥®ÂÖ•ÂäüËÉΩÔºåËß£ÂÜ≥‰∫ÜÊåáÁ∫πÊ§çÂÖ•Êó†Êïà„ÄÅ`UserAgent` ËÆæÁΩÆÂ§±Ë¥•Á≠âÈóÆÈ¢òÔºåÂπ∂Â¢ûÂº∫‰∫ÜË∑®ÊµèËßàÂô®ÁöÑÂÖºÂÆπÊÄß„ÄÇ\r\n\r\n## ‰∏ªË¶ÅÊîπËøõ\r\n\r\n### 1. Êâ©Â±ïÊåáÁ∫πÊ£ÄÊµãËåÉÂõ¥\r\n\r\n- Â¢ûÂä†‰∫ÜÂØπÊõ¥Â§öÊåáÁ∫πÂ±ûÊÄßÁöÑÊîØÊåÅÂíåÊ£ÄÊµãÔºåÂåÖÊã¨:\r\n  - Á°¨‰ª∂Âπ∂Âèë(CPUÊ†∏ÂøÉÊï∞)\r\n  - ËÆæÂ§áÂÜÖÂ≠ò\r\n  - Â±èÂπïÂàÜËæ®Áéá\r\n  - WebGL‰ø°ÊÅØ\r\n  - Âú∞ÁêÜ‰ΩçÁΩÆÁä∂ÊÄÅ\r\n  - WebRTCÁä∂ÊÄÅ\r\n  - Âπ≥Âè∞‰ø°ÊÅØ\r\n\r\n### 2. Â¢ûÂº∫Áî®Êà∑‰ª£ÁêÜ(UserAgent)Ê≥®ÂÖ•Á®≥ÂÆöÊÄß\r\n\r\n- ÂÆûÁé∞‰∫ÜÂ§öÂ±ÇÊ¨°ÁöÑUserAgentÊ≥®ÂÖ•Á≠ñÁï•:\r\n  - ÂéüÂûãÈìæ‰øÆÊîπ\r\n  - ÂØπË±°Â±ûÊÄßÁõ¥Êé•‰øÆÊîπ\r\n  - ‰ª£ÁêÜÂØπË±°ÊõøÊç¢\r\n  - ÂÜÖËÅîËÑöÊú¨Ê≥®ÂÖ•\r\n  - Áõ∏ÂÖ≥Â±ûÊÄßÂçèÂêå‰øÆÊîπ(vendor, platform, appVersion)\r\n\r\n### 3. DOMÊ£ÄÊµãÊú∫Âà∂\r\n\r\n- Ê∑ªÂä†‰∫ÜDOMÂÖÉÁ¥†Ê£ÄÊµãÊú∫Âà∂ÔºåÊõ¥ÂèØÈù†Âú∞È™åËØÅÊåáÁ∫πÊòØÂê¶ÊàêÂäüÊ≥®ÂÖ•\r\n- ÊîØÊåÅÂú®È°µÈù¢Âä†ËΩΩËøáÁ®ã‰∏≠ÂíåÂä†ËΩΩÂÆåÊàêÂêéÁöÑÂ§öÁßçÂú∫ÊôØ‰∏ãÊ£ÄÊµã\r\n\r\n### 4. Â§áÁî®Ê≥®ÂÖ•ÊñπÊ°à\r\n\r\n- ÂÆûÁé∞‰∫ÜÂÅ•Â£ÆÁöÑÂ§áÁî®Ê≥®ÂÖ•Á≠ñÁï•ÔºåÂú®‰∏ªË¶ÅÊñπÊ°àÂ§±Ë¥•Êó∂Ëá™Âä®ÂàáÊç¢\r\n- Â§áÁî®ÊñπÊ°àÂåÖÂê´Êõ¥ÂÖ®Èù¢ÁöÑÊµèËßàÂô®Â±ûÊÄß‰øÆÊîπ\r\n\r\n### 5. Áî®Êà∑ÁïåÈù¢Â¢ûÂº∫\r\n\r\n- ÊîπËøõ‰∫ÜÊåáÁ∫πÊéßÂà∂Èù¢Êùø:\r\n  - Ê∑ªÂä†‰∫ÜÂ±ïÂºÄ/ÊäòÂè†ËØ¶ÁªÜ‰ø°ÊÅØÂäüËÉΩ\r\n  - Êèê‰æõÊõ¥Â§öÊåáÁ∫πÂ±ûÊÄßÁöÑÂÆûÊó∂Áä∂ÊÄÅ\r\n  - Â¢ûÂä†‰∫ÜÂà∑Êñ∞È°µÈù¢ÊåâÈíÆ\r\n\r\n### 6. ‰ª£Á†Å‰ºòÂåñ\r\n\r\n- ‰øÆÂ§ç‰∫Ü`SQLiteManager.ts`‰∏≠ÁöÑ`async asyncTransaction`ÊñπÊ≥ïÂëΩÂêçÂÜó‰ΩôÈóÆÈ¢ò\r\n- ‰ºòÂåñ‰∫ÜÊó•ÂøóËæìÂá∫Ê†ºÂºèÔºå‰æø‰∫éË∞ÉËØï\r\n- ÁßªÈô§‰∫ÜÂÜó‰Ωô‰ª£Á†Å\r\n\r\n## ‰ΩøÁî®ËØ¥Êòé\r\n\r\n1. Âú®ËÅäÂ§©ÁïåÈù¢Âè≥‰∏ãËßíÁÇπÂáªÊåáÁ∫πÊåâÈíÆÊâìÂºÄÊéßÂà∂Èù¢Êùø\r\n2. ÂèØÈÄâÊã©ËæìÂÖ•Ëá™ÂÆö‰πâUserAgentÊàñ‰ΩøÁî®ÈªòËÆ§ÂÄº\r\n3. ÁÇπÂáª\"ÊâãÂä®Ê≥®ÂÖ•ÊåáÁ∫π\"ÊåâÈíÆÂ∫îÁî®ÊåáÁ∫π\r\n4. ‰ΩøÁî®\"Ê£ÄÊü•Áä∂ÊÄÅ\"ÊåâÈíÆÈ™åËØÅÊåáÁ∫πÊòØÂê¶ÁîüÊïà\r\n5. Â¶ÇÈúÄÊü•ÁúãÊõ¥Â§öËØ¶ÊÉÖÔºåÁÇπÂáª\"Â±ïÂºÄÊõ¥Â§ö\"\r\n\r\n## ÊäÄÊúØÂÆûÁé∞\r\n\r\nÊåáÁ∫πÊ≥®ÂÖ•ÈÄöËøáÁ≤æÂøÉËÆæËÆ°ÁöÑJavaScriptÊ≥®ÂÖ•ÂÆûÁé∞ÔºåÈÅøÂÖç‰ΩøÁî®`Object.defineProperty`ÂèØËÉΩÂ∏¶Êù•ÁöÑÈóÆÈ¢ò„ÄÇ‰∏ªË¶Å‰ΩøÁî®‰ª•‰∏ãÊäÄÊúØ:\r\n\r\n1. ÂéüÂûãÈìæ‰øÆÊîπÂ±ûÊÄßËé∑ÂèñÂô®\r\n2. DOMÊ†áËÆ∞ÂÖÉÁ¥†Ë∑üË∏™Ê≥®ÂÖ•Áä∂ÊÄÅ\r\n3. Â§öÂ±ÇÊ¨°Ê≥®ÂÖ•Á°Æ‰øùÊàêÂäüÁéá\r\n4. ‰∫ã‰ª∂ÁõëÂê¨Âô®ÊîØÊåÅÂä®ÊÄÅÈ°µÈù¢\r\n",
      "npm_url": "https://www.npmjs.com/package/scrm",
      "npm_downloads": 1142,
      "keywords": [
        "browser",
        "fingerprint",
        "automation",
        "browser automation",
        "browser fingerprint",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "vinayak-mehta--mcp-browser-use": {
      "owner": "vinayak-mehta",
      "name": "mcp-browser-use",
      "url": "https://github.com/vinayak-mehta/mcp-browser-use",
      "imageUrl": "/freedevtools/mcp/pfp/vinayak-mehta.webp",
      "description": "Connects MCP clients with web browsers seamlessly, utilizing existing language model setups without needing additional API keys. Enhances browser interactions through integrated language model capabilities.",
      "stars": 74,
      "forks": 14,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-08-28T12:47:17Z",
      "readme_content": "# mcp-browser-use: MCP server for browser-use\n\n[![Version](https://img.shields.io/pypi/v/mcp-browser-use.svg)](https://pypi.org/project/mcp-browser-use/) [![Python Versions](https://img.shields.io/pypi/pyversions/mcp-browser-use.svg)](https://pypi.org/project/mcp-browser-use/) [![License](https://img.shields.io/pypi/l/mcp-browser-use.svg)](https://pypi.org/project/mcp-browser-use/)\n\n**mcp-browser-use** is the easiest way to connect any MCP client (like Claude or Cursor) with the browser using [browser-use](https://github.com/browser-use/browser-use).\n\nUnlike other `browser-use` MCPs that make you pay for an LLM API key, this one just uses the LLM that's already set up in your MCP client.\n\n[üì∫ Demo](https://x.com/vortex_ape/status/1900953901588729864)\n\n## Quickstart\n\nYou can start using `mcp-browser-use` with an MCP client by putting the following command in the relevant config:\n\n```bash\nuvx mcp-browser-use\n```\n\n**Note**: Provide the full path to uvx to prevent MCP client failing to start the server.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a pull request.\n\n## Versioning\n\n`mcp-browser-use` uses [Semantic Versioning](https://semver.org/). For the available versions, see the tags on the GitHub repository.\n\n## License\n\nThis project is licensed under the Apache 2.0 License, see the [LICENSE](https://github.com/vinayak-mehta/mcp-browser-use/blob/master/LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "browser",
        "browsers",
        "browser automation",
        "automation web",
        "mcp browser"
      ],
      "category": "browser-automation"
    },
    "vinhphamai23--mcp-playwright": {
      "owner": "vinhphamai23",
      "name": "mcp-playwright",
      "url": "https://github.com/vinhphamai23/mcp-playwright",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Automate web browsers using Playwright, allowing interaction with web pages, the ability to take screenshots, generate test code, scrape content, and execute JavaScript in a real browser environment.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "https://www.npmjs.com/package/mcp-playwright",
      "npm_downloads": 1667,
      "keywords": [
        "automation",
        "browser",
        "browsers",
        "browser automation",
        "automation web",
        "automate web"
      ],
      "category": "browser-automation"
    },
    "vinhphamai23--playwright-mcp": {
      "owner": "vinhphamai23",
      "name": "playwright-mcp",
      "url": "https://github.com/vinhphamai23/playwright-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Enables interaction with web pages for web navigation, form-filling, data extraction, and testing using Playwright's accessibility snapshots. Offers both snapshot and vision modes for flexible automation without depending on visual models.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "https://www.npmjs.com/package/playwright-mcp",
      "npm_downloads": 88803,
      "keywords": [
        "automation",
        "browser",
        "web",
        "browser automation",
        "automation web",
        "playwright accessibility"
      ],
      "category": "browser-automation"
    },
    "wenpingwu001--mcp-browser-use": {
      "owner": "wenpingwu001",
      "name": "mcp-browser-use",
      "url": "https://github.com/wenpingwu001/mcp-browser-use",
      "imageUrl": "/freedevtools/mcp/pfp/wenpingwu001.webp",
      "description": "Automate web browsing tasks using natural language commands to control browsers, conduct research, and generate reports. This server facilitates seamless integration of AI-driven browser automation into various workflows.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-04-09T08:04:57Z",
      "readme_content": "<br/>\n\n# browser-use MCP server\n[![Documentation](https://img.shields.io/badge/Documentation-üìï-blue)](https://docs.browser-use.com)\n[![License](https://img.shields.io/badge/License-MIT-green)](LICENSE)\n\n> **Project Note**: This MCP server implementation builds upon the [browser-use/web-ui](https://github.com/browser-use/web-ui) foundation. Core browser automation logic and configuration patterns are adapted from the original project.\n\nAI-driven browser automation server implementing the Model Context Protocol (MCP) for natural language browser control and web research.\n\n<a href=\"https://glama.ai/mcp/servers/@Saik0s/mcp-browser-use\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@Saik0s/mcp-browser-use/badge\" alt=\"Browser-Use MCP server\" /></a>\n\n## Features\n\n-   üß† **MCP Integration** - Full protocol implementation for AI agent communication.\n-   üåê **Browser Automation** - Page navigation, form filling, element interaction via natural language (`run_browser_agent` tool).\n-   üëÅÔ∏è **Visual Understanding** - Optional screenshot analysis for vision-capable LLMs.\n-   üîÑ **State Persistence** - Option to manage a browser session across multiple MCP calls or connect to user's browser.\n-   üîå **Multi-LLM Support** - Integrates with OpenAI, Anthropic, Azure, DeepSeek, Google, Mistral, Ollama, OpenRouter, Alibaba, Moonshot, Unbound AI.\n-   üîç **Deep Research Tool** - Dedicated tool for multi-step web research and report generation (`run_deep_search` tool).\n-   ‚öôÔ∏è **Environment Variable Configuration** - Fully configurable via environment variables.\n-   üîó **CDP Connection** - Ability to connect to and control a user-launched Chrome/Chromium instance via Chrome DevTools Protocol.\n\n## Quick Start\n\n### Prerequisites\n\n-   Python 3.11 or higher\n-   `uv` (fast Python package installer): `pip install uv`\n-   Chrome/Chromium browser installed\n-   Install Playwright browsers: `uv sync` and then `uv run playwright install`\n\n### Integration with MCP Clients (e.g., Claude Desktop)\n\nYou can configure clients like Claude Desktop to connect to this server. Add the following structure to the client's configuration (e.g., `claude_desktop_config.json`), adjusting the path and environment variables as needed:\n\n```json\n// Example for Claude Desktop config\n\"mcpServers\": {\n    \"browser-use\": {\n      // Option 1: Run installed package\n      // \"command\": \"uvx\",\n      // \"args\": [\"mcp-server-browser-use\"],\n\n      // Option 2: Run from local development source\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-server-browser-use\"\n      ],\n      \"env\": {\n        // --- CRITICAL: Add required API keys here ---\n        \"OPENAI_API_KEY\": \"YOUR_KEY_HERE_IF_USING_OPENAI\",\n        \"ANTHROPIC_API_KEY\": \"YOUR_KEY_HERE_IF_USING_ANTHROPIC\",\n        // ... add other keys based on MCP_MODEL_PROVIDER ...\n\n        // --- Optional Overrides (defaults are usually fine) ---\n        \"MCP_MODEL_PROVIDER\": \"anthropic\", // Default provider\n        \"MCP_MODEL_NAME\": \"claude-3-7-sonnet-20250219\", // Default model\n        \"BROWSER_HEADLESS\": \"true\",    // Default: run browser without UI\n        \"BROWSER_USE_LOGGING_LEVEL\": \"INFO\",\n\n        // --- Example for connecting to your own browser ---\n        // \"MCP_USE_OWN_BROWSER\": \"true\",\n        // \"CHROME_CDP\": \"http://localhost:9222\",\n\n        // Ensure Python uses UTF-8\n        \"PYTHONIOENCODING\": \"utf-8\",\n        \"PYTHONUNBUFFERED\": \"1\",\n        \"PYTHONUTF8\": \"1\"\n      }\n    }\n}\n```\n\n**Important:** Ensure the `command` and `args` correctly point to how you want to run the server (either the installed package or from the source directory). Set the necessary API keys in the `env` section.\n\n## MCP Tools\n\nThis server exposes the following tools via the Model Context Protocol:\n\n### Synchronous Tools (Wait for Completion)\n\n1.  **`run_browser_agent`**\n    *   **Description:** Executes a browser automation task based on natural language instructions and waits for it to complete. Uses settings prefixed with `MCP_` (e.g., `MCP_HEADLESS`, `MCP_MAX_STEPS`).\n    *   **Arguments:**\n        *   `task` (string, required): The primary task or objective.\n        *   `add_infos` (string, optional): Additional context or hints for the agent (used by `custom` agent type).\n    *   **Returns:** (string) The final result extracted by the agent or an error message.\n\n2.  **`run_deep_search`**\n    *   **Description:** Performs in-depth web research on a topic, generates a report, and waits for completion. Uses settings prefixed with `MCP_RESEARCH_` and general `BROWSER_` settings (e.g., `BROWSER_HEADLESS`).\n    *   **Arguments:**\n        *   `research_task` (string, required): The topic or question for the research.\n        *   `max_search_iterations` (integer, optional, default: 10): Max search cycles.\n        *   `max_query_per_iteration` (integer, optional, default: 3): Max search queries per cycle.\n    *   **Returns:** (string) The generated research report in Markdown format, including the file path, or an error message.\n\n## Configuration (Environment Variables)\n\nConfigure the server using environment variables. You can set these in your system or place them in a `.env` file in the project root.\n\n| Variable                        | Description                                                                                             | Required?                      | Default Value                     | Example Value                     |\n| :------------------------------ | :------------------------------------------------------------------------------------------------------ | :----------------------------- | :-------------------------------- | :-------------------------------- |\n| **LLM Settings**                |                                                                                                         |                                |                                   |                                   |\n| `MCP_MODEL_PROVIDER`            | LLM provider to use. See options below.                                                                 | **Yes**                        | `anthropic`                       | `openai`                          |\n| `MCP_MODEL_NAME`                | Specific model name for the chosen provider.                                                            | No                             | `claude-3-7-sonnet-20250219`      | `gpt-4o`                          |\n| `MCP_TEMPERATURE`               | LLM temperature (0.0-2.0). Controls randomness.                                                         | No                             | `0.0`                             | `0.7`                             |\n| `MCP_TOOL_CALLING_METHOD`       | Method for tool invocation ('auto', 'json_schema', 'function_calling'). Affects `run_browser_agent`.    | No                             | `auto`                            | `json_schema`                     |\n| `MCP_MAX_INPUT_TOKENS`          | Max input tokens for LLM context for `run_browser_agent`.                                               | No                             | `128000`                          | `64000`                           |\n| `MCP_BASE_URL`                  | Optional: Generic override for the LLM provider's base URL.                                             | No                             | Provider-specific                 | `http://localhost:8080/v1`        |\n| `MCP_API_KEY`                   | Optional: Generic override for the LLM provider's API key (takes precedence over provider-specific keys). | No                             | -                                 | `sk-...`                          |\n| **Provider API Keys**           | **Required based on `MCP_MODEL_PROVIDER` unless `MCP_API_KEY` is set.**                                 |                                |                                   |                                   |\n| `OPENAI_API_KEY`                | API Key for OpenAI.                                                                                     | If Used                        | -                                 | `sk-...`                          |\n| `ANTHROPIC_API_KEY`             | API Key for Anthropic.                                                                                  | If Used                        | -                                 | `sk-ant-...`                      |\n| `GOOGLE_API_KEY`                | API Key for Google AI (Gemini).                                                                         | If Used                        | -                                 | `AIza...`                         |\n| `AZURE_OPENAI_API_KEY`          | API Key for Azure OpenAI.                                                                               | If Used                        | -                                 | `...`                             |\n| `DEEPSEEK_API_KEY`              | API Key for DeepSeek.                                                                                   | If Used                        | -                                 | `sk-...`                          |\n| `MISTRAL_API_KEY`               | API Key for Mistral AI.                                                                                 | If Used                        | -                                 | `...`                             |\n| `OPENROUTER_API_KEY`            | API Key for OpenRouter.                                                                                 | If Used                        | -                                 | `sk-or-...`                       |\n| `ALIBABA_API_KEY`               | API Key for Alibaba Cloud (DashScope).                                                                  | If Used                        | -                                 | `sk-...`                          |\n| `MOONSHOT_API_KEY`              | API Key for Moonshot AI.                                                                                | If Used                        | -                                 | `sk-...`                          |\n| `UNBOUND_API_KEY`               | API Key for Unbound AI.                                                                                 | If Used                        | -                                 | `...`                             |\n| **Provider Endpoints**          | Optional: Override default API endpoints.                                                               |                                |                                   |                                   |\n| `OPENAI_ENDPOINT`               | OpenAI API endpoint URL.                                                                                | No                             | `https://api.openai.com/v1`       |                                   |\n| `ANTHROPIC_ENDPOINT`            | Anthropic API endpoint URL.                                                                             | No                             | `https://api.anthropic.com`       |                                   |\n| `AZURE_OPENAI_ENDPOINT`         | **Required if using Azure.** Your Azure resource endpoint.                                              | If Used                        | -                                 | `https://res.openai.azure.com/` |\n| `AZURE_OPENAI_API_VERSION`      | Azure API version.                                                                                      | No                             | `2025-01-01-preview`              | `2023-12-01-preview`              |\n| `DEEPSEEK_ENDPOINT`             | DeepSeek API endpoint URL.                                                                              | No                             | `https://api.deepseek.com`        |                                   |\n| `MISTRAL_ENDPOINT`              | Mistral API endpoint URL.                                                                               | No                             | `https://api.mistral.ai/v1`       |                                   |\n| `OLLAMA_ENDPOINT`               | Ollama API endpoint URL.                                                                                | No                             | `http://localhost:11434`          | `http://ollama.local:11434`       |\n| `OPENROUTER_ENDPOINT`           | OpenRouter API endpoint URL.                                                                            | No                             | `https://openrouter.ai/api/v1`    |                                   |\n| `ALIBABA_ENDPOINT`              | Alibaba (DashScope) API endpoint URL.                                                                   | No                             | `https://dashscope...v1`          |                                   |\n| `MOONSHOT_ENDPOINT`             | Moonshot API endpoint URL.                                                                              | No                             | `https://api.moonshot.cn/v1`      |                                   |\n| `UNBOUND_ENDPOINT`              | Unbound AI API endpoint URL.                                                                            | No                             | `https://api.getunbound.ai`       |                                   |\n| **Ollama Specific**             |                                                                                                         |                                |                                   |                                   |\n| `OLLAMA_NUM_CTX`                | Context window size for Ollama models.                                                                  | No                             | `32000`                           | `8192`                            |\n| `OLLAMA_NUM_PREDICT`            | Max tokens to predict for Ollama models.                                                                | No                             | `1024`                            | `2048`                            |\n| **Agent Settings (`run_browser_agent`)** |                                                                                                 |                                |                                   |                                   |\n| `MCP_AGENT_TYPE`                | Agent implementation for `run_browser_agent` ('org' or 'custom').                                       | No                             | `org`                             | `custom`                          |\n| `MCP_MAX_STEPS`                 | Max steps per agent run.                                                                                | No                             | `100`                             | `50`                              |\n| `MCP_USE_VISION`                | Enable vision capabilities (screenshot analysis).                                                       | No                             | `true`                            | `false`                           |\n| `MCP_MAX_ACTIONS_PER_STEP`      | Max actions per agent step.                                                                             | No                             | `5`                               | `10`                              |\n| `MCP_KEEP_BROWSER_OPEN`         | Keep browser managed by server open between `run_browser_agent` calls (if `MCP_USE_OWN_BROWSER=false`). | No                             | `false`                           | `true`                            |\n| `MCP_ENABLE_RECORDING`          | Enable Playwright video recording for `run_browser_agent`.                                              | No                             | `false`                           | `true`                            |\n| `MCP_SAVE_RECORDING_PATH`       | Path to save agent run video recordings (Required if `MCP_ENABLE_RECORDING=true`).                      | If Recording                   | -                                 | `./tmp/recordings`                |\n| `MCP_AGENT_HISTORY_PATH`        | Directory to save agent history JSON files.                                                             | No                             | `./tmp/agent_history`             | `./agent_runs`                    |\n| `MCP_HEADLESS`                  | Run browser without UI specifically for `run_browser_agent` tool.                                       | No                             | `true`                            | `false`                           |\n| `MCP_DISABLE_SECURITY`          | Disable browser security features specifically for `run_browser_agent` tool (use cautiously).           | No                             | `true`                            | `false`                           |\n| **Deep Research Settings (`run_deep_search`)** |                                                                                         |                                |                                   |                                   |\n| `MCP_RESEARCH_MAX_ITERATIONS`   | Max search iterations for deep research.                                                                | No                             | `10`                              | `5`                               |\n| `MCP_RESEARCH_MAX_QUERY`        | Max search queries per iteration.                                                                       | No                             | `3`                               | `5`                               |\n| `MCP_RESEARCH_USE_OWN_BROWSER`  | Use a separate browser instance for research (requires `CHROME_CDP` if `MCP_USE_OWN_BROWSER=true`).     | No                             | `false`                           | `true`                            |\n| `MCP_RESEARCH_SAVE_DIR`         | Directory to save research artifacts (report, results).                                                 | No                             | `./tmp/deep_research/{task_id}`   | `./research_output`               |\n| `MCP_RESEARCH_AGENT_MAX_STEPS`  | Max steps for sub-agents within deep research.                                                          | No                             | `10`                              | `15`                              |\n| **Browser Settings (General & Specific Tool Overrides)** |                                                                                |                                |                                   |                                   |\n| `MCP_USE_OWN_BROWSER`           | Set to true to connect to user's browser via `CHROME_CDP` instead of launching a new one.               | No                             | `false`                           | `true`                            |\n| `CHROME_CDP`                    | Connect to existing Chrome via DevTools Protocol URL. Required if `MCP_USE_OWN_BROWSER=true`.           | If `MCP_USE_OWN_BROWSER=true`  | -                                 | `http://localhost:9222`           |\n| `BROWSER_HEADLESS`              | Run browser without visible UI. Primarily affects `run_deep_search`. See also `MCP_HEADLESS`.           | No                             | `true`                            | `false`                           |\n| `BROWSER_DISABLE_SECURITY`      | General browser security setting. See also `MCP_DISABLE_SECURITY`.                                      | No                             | `false`                           | `true`                            |\n| `CHROME_PATH`                   | Path to Chrome/Chromium executable.                                                                     | No                             | -                                 | `/usr/bin/chromium-browser`       |\n| `CHROME_USER_DATA`              | Path to Chrome user data directory (for persistent sessions, useful with `CHROME_CDP`).                 | No                             | -                                 | `~/.config/google-chrome/Profile 1` |\n| `BROWSER_TRACE_PATH`            | Directory to save Playwright trace files (useful for debugging).                                        | No                             | `./tmp/trace`                     | `./traces`                        |\n| `BROWSER_WINDOW_WIDTH`          | Browser window width (pixels).                                                                          | No                             | `1280`                            | `1920`                            |\n| `BROWSER_WINDOW_HEIGHT`         | Browser window height (pixels).                                                                         | No                             | `720`                             | `1080`                            |\n| **Server & Logging**            |                                                                                                         |                                |                                   |                                   |\n| `LOG_FILE`                      | Path for the server log file.                                                                           | No                             | `mcp_server_browser_use.log`      | `/var/log/mcp_browser.log`        |\n| `BROWSER_USE_LOGGING_LEVEL`     | Logging level (`DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`).                                        | No                             | `INFO`                            | `DEBUG`                           |\n| `ANONYMIZED_TELEMETRY`          | Enable/disable anonymized telemetry (`true`/`false`).                                                   | No                             | `true`                            | `false`                           |\n\n**Supported LLM Providers (`MCP_MODEL_PROVIDER`):**\n\n`openai`, `azure_openai`, `anthropic`, `google`, `mistral`, `ollama`, `deepseek`, `openrouter`, `alibaba`, `moonshot`, `unbound`\n\n## Connecting to Your Own Browser (CDP)\n\nInstead of having the server launch and manage its own browser instance, you can connect it to a Chrome/Chromium browser that you launch and manage yourself. This is useful for:\n\n*   Using your existing browser profile (cookies, logins, extensions).\n*   Observing the automation directly in your own browser window.\n*   Debugging complex scenarios.\n\n**Steps:**\n\n1.  **Launch Chrome/Chromium with Remote Debugging Enabled:**\n    Open your terminal or command prompt and run the command appropriate for your operating system. This tells Chrome to listen for connections on a specific port (e.g., 9222).\n\n    *   **macOS:**\n        ```bash\n        /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --remote-debugging-port=9222\n        ```\n        *(Adjust the path if Chrome is installed elsewhere)*\n\n    *   **Linux:**\n        ```bash\n        google-chrome --remote-debugging-port=9222\n        # or\n        chromium-browser --remote-debugging-port=9222\n        ```\n\n    *   **Windows (Command Prompt):**\n        ```cmd\n        \"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\" --remote-debugging-port=9222\n        ```\n        *(Adjust the path to your Chrome installation if necessary)*\n\n    *   **Windows (PowerShell):**\n        ```powershell\n        & \"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\" --remote-debugging-port=9222\n        ```\n        *(Adjust the path to your Chrome installation if necessary)*\n\n    **Note:** If port 9222 is already in use, choose a different port (e.g., 9223) and use that same port in the `CHROME_CDP` environment variable.\n\n2.  **Configure Environment Variables:**\n    Set the following environment variables in your `.env` file or system environment before starting the MCP server:\n\n    ```dotenv\n    MCP_USE_OWN_BROWSER=true\n    CHROME_CDP=http://localhost:9222 # Use the same port you launched Chrome with\n    ```\n    *   `MCP_USE_OWN_BROWSER=true`: Tells the server to connect to an existing browser instead of launching one.\n    *   `CHROME_CDP`: Specifies the URL where the server can connect to your browser's DevTools Protocol endpoint.\n\n3.  **Run the MCP Server:**\n    Start the server as usual:\n    ```bash\n    uv run mcp-server-browser-use\n    ```\n\nNow, when you use the `run_browser_agent` or `run_deep_search` tools, the server will connect to your running Chrome instance instead of creating a new one.\n\n**Important Considerations:**\n\n*   The browser launched with `--remote-debugging-port` must remain open while the MCP server is running and needs to interact with it.\n*   Ensure the `CHROME_CDP` URL is accessible from where the MCP server is running (usually `http://localhost:PORT` if running on the same machine).\n*   Using your own browser means the server inherits its state (open tabs, logged-in sessions). Be mindful of this during automation.\n*   Settings like `MCP_HEADLESS`, `BROWSER_HEADLESS`, `MCP_KEEP_BROWSER_OPEN` are ignored when `MCP_USE_OWN_BROWSER=true`. Window size is determined by your browser window.\n\n## Development\n\n```bash\n# Install dev dependencies and sync project deps\nuv sync --dev\n\n# Install playwright browsers\nuv run playwright install\n\n# Run with debugger (Example connecting to own browser via CDP)\n# 1. Launch Chrome: google-chrome --remote-debugging-port=9222\n# 2. Run inspector command:\nnpx @modelcontextprotocol/inspector@latest \\\n  -e ANTHROPIC_API_KEY=$ANTHROPIC_API_KEY \\\n  -e MCP_MODEL_PROVIDER=anthropic \\\n  -e MCP_MODEL_NAME=claude-3-7-sonnet-20250219 \\\n  -e MCP_USE_OWN_BROWSER=true \\\n  -e CHROME_CDP=http://localhost:9222 \\\n  uv --directory . run mcp run src/mcp_server_browser_use/server.py\n# Note: Change timeout in inspector's config panel if needed (default is 10 seconds)\n```\n\n## Troubleshooting\n\n-   **Browser Conflicts**: If *not* using `CHROME_CDP` (`MCP_USE_OWN_BROWSER=false`), ensure no other conflicting Chrome instances are running with the same user data directory if `CHROME_USER_DATA` is specified.\n-   **CDP Connection Issues**: If using `MCP_USE_OWN_BROWSER=true`:\n    *   Verify Chrome was launched with the `--remote-debugging-port` flag.\n    *   Ensure the port in `CHROME_CDP` matches the port used when launching Chrome.\n    *   Check for firewall issues blocking the connection to the specified port.\n    *   Make sure the browser is still running.\n-   **API Errors**: Double-check that the correct API key environment variable (`OPENAI_API_KEY`, `ANTHROPIC_API_KEY`, etc.) is set for your chosen `MCP_MODEL_PROVIDER`, or that `MCP_API_KEY` is set. Verify keys and endpoints (`AZURE_OPENAI_ENDPOINT` is required for Azure).\n-   **Vision Issues**: Ensure `MCP_USE_VISION=true` if using vision features and that your selected LLM model supports vision.\n-   **Dependency Problems**: Run `uv sync` to ensure all dependencies are correctly installed. Check `pyproject.toml`.\n-   **Logging**: Check the log file specified by `LOG_FILE` (default: `mcp_server_browser_use.log`) for detailed error messages. Increase `BROWSER_USE_LOGGING_LEVEL` to `DEBUG` for more verbose output.\n\n## License\n\nMIT - See [LICENSE](LICENSE) for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "browser",
        "automate",
        "browser automation",
        "automation web",
        "automate web"
      ],
      "category": "browser-automation"
    },
    "williamvd4--browser-use-mcp-server": {
      "owner": "williamvd4",
      "name": "browser-use-mcp-server",
      "url": "https://github.com/williamvd4/browser-use-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/williamvd4.webp",
      "description": "Enables applications to execute browser tasks and retrieve real-time web data through a simple API. Supports interactions with web pages to enhance LLM capabilities.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-09-10T22:39:18Z",
      "readme_content": "# ‚û°Ô∏è browser-use mcp server\n\n[browser-use](https://github.com/browser-use/browser-use) MCP Server with SSE\ntransport\n\n### requirements\n\n- uv\n\n```\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n### quickstart\n\n```\nuv sync\nuv pip install playwright\nuv run playwright install --with-deps --no-shell chromium\nuv run server --port 8000\n```\n\n- the .env requires the following:\n\n```\nOPENAI_API_KEY=[your api key]\nCHROME_PATH=[only change this if you have a custom chrome build]\n```\n\n- we will be adding support for other LLM providers to power browser-use\n  (claude, grok, bedrock, etc)\n\nwhen building the dockerfile you can add in your own VNC server password:\n\n```\ndocker build --build-arg VNC_PASSWORD=klaatubaradanikto .\n```\n\n### tools\n\n- [x] SSE transport\n- [x] browser_use - Initiates browser tasks with URL and action\n- [x] browser_get_result - Retrieves results of async browser tasks\n\n### supported clients\n\n- cursor.ai\n- claude desktop\n- claude code\n- <s>windsurf</s> ([windsurf](https://codeium.com/windsurf) doesn't support SSE\n  yet)\n\n### usage\n\nafter running the server, add http://localhost:8000/sse to your client UI, or in\na mcp.json file:\n\n```json\n{\n  \"mcpServers\": {\n    \"browser-use-mcp-server\": {\n      \"url\": \"http://localhost:8000/sse\"\n    }\n  }\n}\n```\n\n#### cursor\n\n- `./.cursor/mcp.json`\n\n#### windsurf\n\n- `~/.codeium/windsurf/mcp_config.json`\n\n#### claude\n\n- `~/Library/Application Support/Claude/claude_desktop_config.json`\n- `%APPDATA%\\Claude\\claude_desktop_config.json`\n\nthen try asking your LLM the following:\n\n`open https://news.ycombinator.com and return the top ranked article`\n\n### help\n\nfor issues or interest reach out @ https://cobrowser.xyz\n\n# stars\n\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=co-browser/browser-use-mcp-server&type=Date&theme=dark\" />\n  <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=co-browser/browser-use-mcp-server&type=Date\" />\n  <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=co-browser/browser-use-mcp-server&type=Date\" />\n</picture>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "browser",
        "automation",
        "web",
        "browser automation",
        "automation web",
        "williamvd4 browser"
      ],
      "category": "browser-automation"
    },
    "willsmith2099--open-webui": {
      "owner": "willsmith2099",
      "name": "open-webui",
      "url": "https://github.com/willsmith2099/open-webui",
      "imageUrl": "/freedevtools/mcp/pfp/willsmith2099.webp",
      "description": "A self-hosted WebUI for enhancing interactions with language models. Supports features like voice calls and Markdown, functioning entirely offline and compatible with various LLM runners.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2024-11-22T01:49:24Z",
      "readme_content": "# Open WebUI üëã\n\n![GitHub stars](https://img.shields.io/github/stars/open-webui/open-webui?style=social)\n![GitHub forks](https://img.shields.io/github/forks/open-webui/open-webui?style=social)\n![GitHub watchers](https://img.shields.io/github/watchers/open-webui/open-webui?style=social)\n![GitHub repo size](https://img.shields.io/github/repo-size/open-webui/open-webui)\n![GitHub language count](https://img.shields.io/github/languages/count/open-webui/open-webui)\n![GitHub top language](https://img.shields.io/github/languages/top/open-webui/open-webui)\n![GitHub last commit](https://img.shields.io/github/last-commit/open-webui/open-webui?color=red)\n![Hits](https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Follama-webui%2Follama-wbui&count_bg=%2379C83D&title_bg=%23555555&icon=&icon_color=%23E7E7E7&title=hits&edge_flat=false)\n[![Discord](https://img.shields.io/badge/Discord-Open_WebUI-blue?logo=discord&logoColor=white)](https://discord.gg/5rJgQTnV4s)\n[![v1_label_Sponsor_message_logo_GitHub_color_fe8e86](https://img.shields.io/static/v1?label=Sponsor&message=%E2%9D%A4&logo=GitHub&color=%23fe8e86)](https://github.com/sponsors/tjbck)\n\nOpen WebUI is an [extensible](https://github.com/open-webui/pipelines), feature-rich, and user-friendly self-hosted WebUI designed to operate entirely offline. It supports various LLM runners, including Ollama and OpenAI-compatible APIs. For more information, be sure to check out our [Open WebUI Documentation](https://docs.openwebui.com/).\n\n\n\n## Key Features of Open WebUI ‚≠ê\n\n- üöÄ **Effortless Setup**: Install seamlessly using Docker or Kubernetes (kubectl, kustomize or helm) for a hassle-free experience with support for both `:ollama` and `:cuda` tagged images.\n\n- ü§ù **Ollama/OpenAI API Integration**: Effortlessly integrate OpenAI-compatible APIs for versatile conversations alongside Ollama models. Customize the OpenAI API URL to link with **LMStudio, GroqCloud, Mistral, OpenRouter, and more**.\n\n- üõ°Ô∏è **Granular Permissions and User Groups**: By allowing administrators to create detailed user roles and permissions, we ensure a secure user environment. This granularity not only enhances security but also allows for customized user experiences, fostering a sense of ownership and responsibility amongst users.\n\n- üì± **Responsive Design**: Enjoy a seamless experience across Desktop PC, Laptop, and Mobile devices.\n\n- üì± **Progressive Web App (PWA) for Mobile**: Enjoy a native app-like experience on your mobile device with our PWA, providing offline access on localhost and a seamless user interface.\n\n- ‚úíÔ∏èüî¢ **Full Markdown and LaTeX Support**: Elevate your LLM experience with comprehensive Markdown and LaTeX capabilities for enriched interaction.\n\n- üé§üìπ **Hands-Free Voice/Video Call**: Experience seamless communication with integrated hands-free voice and video call features, allowing for a more dynamic and interactive chat environment.\n\n- üõ†Ô∏è **Model Builder**: Easily create Ollama models via the Web UI. Create and add custom characters/agents, customize chat elements, and import models effortlessly through [Open WebUI Community](https://openwebui.com/) integration.\n\n- üêç **Native Python Function Calling Tool**: Enhance your LLMs with built-in code editor support in the tools workspace. Bring Your Own Function (BYOF) by simply adding your pure Python functions, enabling seamless integration with LLMs.\n\n- üìö **Local RAG Integration**: Dive into the future of chat interactions with groundbreaking Retrieval Augmented Generation (RAG) support. This feature seamlessly integrates document interactions into your chat experience. You can load documents directly into the chat or add files to your document library, effortlessly accessing them using the `#` command before a query.\n\n- üîç **Web Search for RAG**: Perform web searches using providers like `SearXNG`, `Google PSE`, `Brave Search`, `serpstack`, `serper`, `Serply`, `DuckDuckGo`, `TavilySearch`, `SearchApi` and `Bing` and inject the results directly into your chat experience.\n\n- üåê **Web Browsing Capability**: Seamlessly integrate websites into your chat experience using the `#` command followed by a URL. This feature allows you to incorporate web content directly into your conversations, enhancing the richness and depth of your interactions.\n\n- üé® **Image Generation Integration**: Seamlessly incorporate image generation capabilities using options such as AUTOMATIC1111 API or ComfyUI (local), and OpenAI's DALL-E (external), enriching your chat experience with dynamic visual content.\n\n- ‚öôÔ∏è **Many Models Conversations**: Effortlessly engage with various models simultaneously, harnessing their unique strengths for optimal responses. Enhance your experience by leveraging a diverse set of models in parallel.\n\n- üîê **Role-Based Access Control (RBAC)**: Ensure secure access with restricted permissions; only authorized individuals can access your Ollama, and exclusive model creation/pulling rights are reserved for administrators.\n\n- üåêüåç **Multilingual Support**: Experience Open WebUI in your preferred language with our internationalization (i18n) support. Join us in expanding our supported languages! We're actively seeking contributors!\n\n- üß© **Pipelines, Open WebUI Plugin Support**: Seamlessly integrate custom logic and Python libraries into Open WebUI using [Pipelines Plugin Framework](https://github.com/open-webui/pipelines). Launch your Pipelines instance, set the OpenAI URL to the Pipelines URL, and explore endless possibilities. [Examples](https://github.com/open-webui/pipelines/tree/main/examples) include **Function Calling**, User **Rate Limiting** to control access, **Usage Monitoring** with tools like Langfuse, **Live Translation with LibreTranslate** for multilingual support, **Toxic Message Filtering** and much more.\n\n- üåü **Continuous Updates**: We are committed to improving Open WebUI with regular updates, fixes, and new features.\n\nWant to learn more about Open WebUI's features? Check out our [Open WebUI documentation](https://docs.openwebui.com/features) for a comprehensive overview!\n\n## üîó Also Check Out Open WebUI Community!\n\nDon't forget to explore our sibling project, [Open WebUI Community](https://openwebui.com/), where you can discover, download, and explore customized Modelfiles. Open WebUI Community offers a wide range of exciting possibilities for enhancing your chat interactions with Open WebUI! üöÄ\n\n## How to Install üöÄ\n\n### Installation via Python pip üêç\n\nOpen WebUI can be installed using pip, the Python package installer. Before proceeding, ensure you're using **Python 3.11** to avoid compatibility issues.\n\n1. **Install Open WebUI**:\n   Open your terminal and run the following command to install Open WebUI:\n\n   ```bash\n   pip install open-webui\n   ```\n\n2. **Running Open WebUI**:\n   After installation, you can start Open WebUI by executing:\n\n   ```bash\n   open-webui serve\n   ```\n\nThis will start the Open WebUI server, which you can access at [http://localhost:8080](http://localhost:8080)\n\n### Quick Start with Docker üê≥\n\n> [!NOTE]  \n> Please note that for certain Docker environments, additional configurations might be needed. If you encounter any connection issues, our detailed guide on [Open WebUI Documentation](https://docs.openwebui.com/) is ready to assist you.\n\n> [!WARNING]\n> When using Docker to install Open WebUI, make sure to include the `-v open-webui:/app/backend/data` in your Docker command. This step is crucial as it ensures your database is properly mounted and prevents any loss of data.\n\n> [!TIP]  \n> If you wish to utilize Open WebUI with Ollama included or CUDA acceleration, we recommend utilizing our official images tagged with either `:cuda` or `:ollama`. To enable CUDA, you must install the [Nvidia CUDA container toolkit](https://docs.nvidia.com/dgx/nvidia-container-runtime-upgrade/) on your Linux/WSL system.\n\n### Installation with Default Configuration\n\n- **If Ollama is on your computer**, use this command:\n\n  ```bash\n  docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main\n  ```\n\n- **If Ollama is on a Different Server**, use this command:\n\n  To connect to Ollama on another server, change the `OLLAMA_BASE_URL` to the server's URL:\n\n  ```bash\n  docker run -d -p 3000:8080 -e OLLAMA_BASE_URL=https://example.com -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main\n  ```\n\n- **To run Open WebUI with Nvidia GPU support**, use this command:\n\n  ```bash\n  docker run -d -p 3000:8080 --gpus all --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:cuda\n  ```\n\n### Installation for OpenAI API Usage Only\n\n- **If you're only using OpenAI API**, use this command:\n\n  ```bash\n  docker run -d -p 3000:8080 -e OPENAI_API_KEY=your_secret_key -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main\n  ```\n\n### Installing Open WebUI with Bundled Ollama Support\n\nThis installation method uses a single container image that bundles Open WebUI with Ollama, allowing for a streamlined setup via a single command. Choose the appropriate command based on your hardware setup:\n\n- **With GPU Support**:\n  Utilize GPU resources by running the following command:\n\n  ```bash\n  docker run -d -p 3000:8080 --gpus=all -v ollama:/root/.ollama -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:ollama\n  ```\n\n- **For CPU Only**:\n  If you're not using a GPU, use this command instead:\n\n  ```bash\n  docker run -d -p 3000:8080 -v ollama:/root/.ollama -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:ollama\n  ```\n\nBoth commands facilitate a built-in, hassle-free installation of both Open WebUI and Ollama, ensuring that you can get everything up and running swiftly.\n\nAfter installation, you can access Open WebUI at [http://localhost:3000](http://localhost:3000). Enjoy! üòÑ\n\n### Other Installation Methods\n\nWe offer various installation alternatives, including non-Docker native installation methods, Docker Compose, Kustomize, and Helm. Visit our [Open WebUI Documentation](https://docs.openwebui.com/getting-started/) or join our [Discord community](https://discord.gg/5rJgQTnV4s) for comprehensive guidance.\n\n### Troubleshooting\n\nEncountering connection issues? Our [Open WebUI Documentation](https://docs.openwebui.com/troubleshooting/) has got you covered. For further assistance and to join our vibrant community, visit the [Open WebUI Discord](https://discord.gg/5rJgQTnV4s).\n\n#### Open WebUI: Server Connection Error\n\nIf you're experiencing connection issues, it‚Äôs often due to the WebUI docker container not being able to reach the Ollama server at 127.0.0.1:11434 (host.docker.internal:11434) inside the container . Use the `--network=host` flag in your docker command to resolve this. Note that the port changes from 3000 to 8080, resulting in the link: `http://localhost:8080`.\n\n**Example Docker Command**:\n\n```bash\ndocker run -d --network=host -v open-webui:/app/backend/data -e OLLAMA_BASE_URL=http://127.0.0.1:11434 --name open-webui --restart always ghcr.io/open-webui/open-webui:main\n```\n\n### Keeping Your Docker Installation Up-to-Date\n\nIn case you want to update your local Docker installation to the latest version, you can do it with [Watchtower](https://containrrr.dev/watchtower/):\n\n```bash\ndocker run --rm --volume /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --run-once open-webui\n```\n\nIn the last part of the command, replace `open-webui` with your container name if it is different.\n\nCheck our Migration Guide available in our [Open WebUI Documentation](https://docs.openwebui.com/tutorials/migration/).\n\n### Using the Dev Branch üåô\n\n> [!WARNING]\n> The `:dev` branch contains the latest unstable features and changes. Use it at your own risk as it may have bugs or incomplete features.\n\nIf you want to try out the latest bleeding-edge features and are okay with occasional instability, you can use the `:dev` tag like this:\n\n```bash\ndocker run -d -p 3000:8080 -v open-webui:/app/backend/data --name open-webui --add-host=host.docker.internal:host-gateway --restart always ghcr.io/open-webui/open-webui:dev\n```\n\n## What's Next? üåü\n\nDiscover upcoming features on our roadmap in the [Open WebUI Documentation](https://docs.openwebui.com/roadmap/).\n\n## License üìú\n\nThis project is licensed under the [MIT License](LICENSE) - see the [LICENSE](LICENSE) file for details. üìÑ\n\n## Support üí¨\n\nIf you have any questions, suggestions, or need assistance, please open an issue or join our\n[Open WebUI Discord community](https://discord.gg/5rJgQTnV4s) to connect with us! ü§ù\n\n## Star History\n\n<a href=\"https://star-history.com/#open-webui/open-webui&Date\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=open-webui/open-webui&type=Date&theme=dark\" />\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=open-webui/open-webui&type=Date\" />\n    <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=open-webui/open-webui&type=Date\" />\n  </picture>\n</a>\n\n---\n\nCreated by [Timothy Jaeryang Baek](https://github.com/tjbck) - Let's make Open WebUI even more amazing together! üí™",
      "npm_url": "https://www.npmjs.com/package/open-webui",
      "npm_downloads": 1679,
      "keywords": [
        "webui",
        "browser",
        "web",
        "webui self",
        "hosted webui",
        "webui enhancing"
      ],
      "category": "browser-automation"
    },
    "wysh3--perplexity-mcp-zerver": {
      "owner": "wysh3",
      "name": "perplexity-mcp-zerver",
      "url": "https://github.com/wysh3/perplexity-mcp-zerver",
      "imageUrl": "/freedevtools/mcp/pfp/wysh3.webp",
      "description": "Leverage AI-powered research capabilities by performing web searches, retrieving documentation, and analyzing code through a modular tool architecture. The server facilitates interactions with the Perplexity website without requiring an API key, utilizing browser automation for efficient data retrieval.",
      "stars": 59,
      "forks": 15,
      "license": "GNU General Public License v3.0",
      "language": "TypeScript",
      "updated_at": "2025-09-29T08:26:10Z",
      "readme_content": "# Perplexity MCP Zerver\n\nA minimalist research server implementing the Model Context Protocol (MCP) to deliver AI-powered research capabilities through Perplexity's web interface.\n\n[![MCP Compatible](https://img.shields.io/badge/MCP-Compatible-333)]()\n[![TypeScript Codebase](https://img.shields.io/badge/TypeScript-Codebase-333)]()\n[![Tests Passing](https://img.shields.io/badge/Tests-Passing-333)]()\n[![Bun Runtime](https://img.shields.io/badge/Runtime-Bun-333)]()\n\n## Research Capabilities\n\n- **Intelligent Web Research**: Search and summarize content without API limits\n- **Persistent Conversations**: Maintain context with local SQLite chat storage\n- **Content Extraction**: Clean article extraction with GitHub repository parsing\n- **Developer Tooling**: Documentation retrieval, API discovery, code analysis\n- **Keyless Operation**: Browser automation replaces API key requirements\n\n---\n\n## Available Tools\n\n### Search (`search`)\nPerform research queries with configurable depth  \n*Returns raw text results*\n\n### Get Documentation (`get_documentation`)\nRetrieve technical documentation with examples  \n*Returns structured documentation*\n\n### Find APIs (`find_apis`)\nDiscover relevant APIs for development needs  \n*Returns API listings and descriptions*\n\n### Check Deprecated Code (`check_deprecated_code`)\nAnalyze code snippets for outdated patterns  \n*Returns analysis report*\n\n### Extract URL Content (`extract_url_content`)\nParse web content with automatic GitHub handling  \n*Returns structured content metadata*\n\n### Chat (`chat_perplexity`)\nPersistent conversations with context history  \n*Returns conversation state in JSON format*\n\n---\n\n## Getting Started\n\n### Prerequisites\n- Bun runtime\n- Node.js 18+ (for TypeScript compilation)\n\n### Installation\n```bash\ngit clone https://github.com/wysh3/perplexity-mcp-zerver.git\ncd perplexity-mcp-zerver\nbun install\nbun run build\n```\n\n### Configuration\nAdd to your MCP configuration file:\n```json\n{\n  \"mcpServers\": {\n    \"perplexity-server\": {\n      \"command\": \"bun\",\n      \"args\": [\"/absolute/path/to/build/main.js\"],\n      \"timeout\": 300\n    }\n  }\n}\n```\n\n### Usage\nInitiate commands through your MCP client:\n- \"Use perplexity to research quantum computing advancements\"\n- \"Ask perplexity-server for React 18 documentation\"\n- \"Begin conversation with perplexity about neural networks\"\n\n---\n\n## Technical Comparison\n\n| Feature              | This Implementation | Traditional APIs |\n|----------------------|---------------------|------------------|\n| Authentication       | None required       | API keys         |\n| Cost                 | Free                | Usage-based      |\n| Data Privacy         | Local processing    | Remote servers   |\n| GitHub Integration   | Native support      | Limited          |\n| History Persistence  | SQLite storage      | Session-based    |\n\n---\n\n## Troubleshooting\n\n**Server Connection Issues**\n1. Verify absolute path in configuration\n2. Confirm Node.js installation with `node -v`\n3. Ensure build completed successfully\n\n**Content Extraction**\n- GitHub paths must use full repository URLs\n- Adjust link recursion depth in source configuration\n\n---\n\n## Origins & License\n \nbased on - [DaInfernalCoder/perplexity-researcher-mcp](https://github.com/DaInfernalCoder/perplexity-researcher-mcp)  \nrefactored from - [sm-moshi/docshunter](https://github.com/sm-moshi/docshunter)  \n\nLicensed under **GNU GPL v3.0** - [View License](LICENSE)\n\n---\n\n> This project interfaces with Perplexity via browser automation. Use responsibly and ethically. Stability depends on Perplexity's website consistency. Educational use only.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "scraping",
        "web",
        "automation web",
        "browser automation",
        "processing web"
      ],
      "category": "browser-automation"
    },
    "xinzhongyouhai--mcp-server-browserbase": {
      "owner": "xinzhongyouhai",
      "name": "mcp-server-browserbase",
      "url": "https://github.com/xinzhongyouhai/mcp-server-browserbase",
      "imageUrl": "/freedevtools/mcp/pfp/xinzhongyouhai.webp",
      "description": "Automate cloud browser interactions, extract data, perform web navigation, and capture screenshots. Execute JavaScript within a cloud browser environment for enhanced LLM applications.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-03-23T15:08:29Z",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "browserbase",
        "automation",
        "browser",
        "browser automation",
        "automation web",
        "browserbase automate"
      ],
      "category": "browser-automation"
    },
    "xspadex--bilibili-mcp": {
      "owner": "xspadex",
      "name": "bilibili-mcp",
      "url": "https://github.com/xspadex/bilibili-mcp.git",
      "imageUrl": "",
      "description": "A FastMCP-based tool that fetches Bilibili's trending videos and exposes them via a standard MCP interface.",
      "stars": 13,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-08T06:43:58Z",
      "readme_content": "‰∏ãÈù¢ÊòØ‰∏∫‰Ω†ÁöÑ `bilibili-mcp` Â∑•ÂÖ∑ÁîüÊàêÁöÑ `README.md` Á§∫‰æãÔºö\n\n---\n\n# üì∫ bilibili-mcp\n\n‰∏Ä‰∏™Áî®‰∫éËé∑Âèñ B Á´ôÁÉ≠Ê¶úÁöÑ MCP Â∑•ÂÖ∑ÔºåÂü∫‰∫é FastMCP Âíå B Á´ôÂÖ¨ÂºÄÊé•Âè£„ÄÇ‰Ω†ÂèØ‰ª•ÈÄöËøáÊ≥®ÂÜåÂà∞ Cursor ÊàñÂÖ∂‰ªñ MCP ÂÆ¢Êà∑Á´ØÔºåÂÆûÊó∂Ë∞ÉÁî®ÁÉ≠Èó®ËßÜÈ¢ëÊï∞ÊçÆ„ÄÇ\n\n## üöÄ Âø´ÈÄüÂºÄÂßã\n\n### 1. ÂÆâË£Ö‰æùËµñ\n\nÁ°Æ‰øù‰ΩøÁî® Python ‚â• 3.12ÔºåÂπ∂ÂÆâË£Ö‰ª•‰∏ã‰æùËµñÈ°πÔºö\n\n```bash\npip install httpx \"mcp[cli]>=1.6.0\"\n```\n\n### 2. È°πÁõÆÁªìÊûÑÁ§∫‰æã\n\n‰Ω†ÁöÑ‰∏ª‰ª£Á†ÅÊñá‰ª∂ÂèØ‰ª•ÊòØ `bilibili_mcp.py`ÔºåÈ°πÁõÆÁªìÊûÑÂ¶Ç‰∏ãÔºö\n\n```\nbilibili_mcp/\n‚îú‚îÄ‚îÄ bilibili_mcp.py\n‚îú‚îÄ‚îÄ pyproject.toml\n‚îî‚îÄ‚îÄ README.md\n```\n\n### 3. ÂêØÂä® MCP Server\n\n‰ΩøÁî® [`uv`](https://github.com/astral-sh/uv) ËøêË°åÂ∑•ÂÖ∑Ôºö\n\n```bash\nuv tool run bilibili-mcp\n```\n\nÊàñÈÄöËøáÈÖçÁΩÆÊñá‰ª∂ÂºïÁî®Ôºö\n\n```jsonc\n\"bilibili-j\": {\n  \"command\": \"uv\",\n  \"args\": [\n    \"tool\",\n    \"run\",\n    \"bilibili-mcp\"\n  ]\n}\n```\n\n### 4. Ê≥®ÂÜåÂ∑•ÂÖ∑\n\nFastMCP ‰ºöËá™Âä®Êö¥Èú≤‰∏Ä‰∏™Âêç‰∏∫ `get_popular` ÁöÑÂ∑•ÂÖ∑Ôºö\n\n#### üì¶ `get_popular(top_k: int = 3)`\n\nËé∑Âèñ B Á´ôÁÉ≠Ê¶úËßÜÈ¢ë‰ø°ÊÅØÔºåËøîÂõûÊúÄÂ§ö `top_k` ‰∏™Êù°ÁõÆÔºàÊúÄÂ§ß 10 Êù°Ôºâ„ÄÇ\n\n##### ËøîÂõûÁ§∫‰æãÔºö\n\n```json\n[\n  {\n    \"title\": \"‚ÄúÊàòÁÅ´ÂïäÔºåËÉΩ‰∏çËÉΩÂú®ÈªéÊòéÂâçÂÅúÊ≠á‰∏ÄÊ¨°‚Äù\",\n    \"link\": \"https://b23.tv/BV1...z\",\n    \"desc\": \"ÂñúÊ¨¢ÁöÑÊúãÂèãÂèØ‰ª•ÁÇπËµûÊäïÂ∏ÅÂÖ≥Ê≥®‰∏Ä‰∏ãÂì¶Ôºå‰Ω†ÁöÑÊîØÊåÅÊòØÊàëÊúÄÂ§ßÁöÑÂä®ÂäõÔºÅÔºÅ\",\n    \"view\": 1234567,\n    \"like\": 98765\n  },\n  ...\n]\n```\n\n## üõ† ÊäÄÊúØËØ¥Êòé\n\n- ‰ΩøÁî® `httpx` ÂÆûÁé∞ÂºÇÊ≠•ËØ∑Ê±Ç\n- ÈÄöËøá FastMCP Ê≥®ÂÜå‰∏∫Ê†áÂáÜ MCP Â∑•ÂÖ∑\n- ÊîØÊåÅÈÄöËøá `stdio` ‰∏é MCP ÂÆ¢Êà∑Á´ØÈÄö‰ø°Ôºà‰æãÂ¶Ç CursorÔºâ\n\n## üìå Ê≥®ÊÑè‰∫ãÈ°π\n\n- ‰ªÖÁî®‰∫éÂ≠¶‰π†‰∏éÁ†îÁ©∂ÔºåB Á´ôÊé•Âè£‰∏∫ÂÖ¨ÂºÄÊé•Âè£Ôºå‰ΩøÁî®Êó∂ËØ∑ÈÅøÂÖçËøá‰∫éÈ¢ëÁπÅËÆøÈóÆ„ÄÇ\n- ÈªòËÆ§ `User-Agent` ‰∏∫ `\"qwq\"`ÔºåÂèØÊ†πÊçÆÂÆûÈôÖÊÉÖÂÜµÊõ¥Êîπ‰∏∫Êõ¥ÂêàÁêÜÁöÑÂ≠óÁ¨¶‰∏≤„ÄÇ\n\n## üìÑ License\n\nMIT License.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fastmcp",
        "scraping",
        "xspadex",
        "browser automation",
        "automation web",
        "fastmcp based"
      ],
      "category": "browser-automation"
    },
    "ziux--playwright-plus-python-mcp": {
      "owner": "ziux",
      "name": "playwright-plus-python-mcp",
      "url": "https://github.com/ziux/playwright-plus-python-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ziux.webp",
      "description": "Provides browser automation capabilities for web navigation, interaction, content retrieval, and screenshot capture using Playwright. Includes a note storage system for summarizing notes with customizable detail levels.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "python",
        "web",
        "browser automation",
        "automation web",
        "plus python"
      ],
      "category": "browser-automation"
    },
    "zmx8516104--puppeteer": {
      "owner": "zmx8516104",
      "name": "puppeteer",
      "url": "https://github.com/zmx8516104/puppeteer",
      "imageUrl": "/freedevtools/mcp/pfp/zmx8516104.webp",
      "description": "Automates browser tasks by controlling Chrome or Firefox using a high-level JavaScript API, supporting web scraping, testing, and UI automation in headless or full browser modes.",
      "stars": 0,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "",
      "updated_at": "2025-04-29T06:07:25Z",
      "readme_content": "# Puppeteer\n\n[![build](https://github.com/puppeteer/puppeteer/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/puppeteer/puppeteer/actions/workflows/ci.yml)\n[![npm puppeteer package](https://img.shields.io/npm/v/puppeteer.svg)](https://npmjs.org/package/puppeteer)\n\n<img alt=\"29446482_04f7036a_841f_11e7_9872_91d1fc2ea683\" src=\"https://user-images.githubusercontent.com/10379601/29446482-04f7036a-841f-11e7-9872-91d1fc2ea683.png\" height=\"200\" align=\"right\"/>\n\n> Puppeteer is a JavaScript library which provides a high-level API to control\n> Chrome or Firefox over the\n> [DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/) or [WebDriver BiDi](https://pptr.dev/webdriver-bidi).\n> Puppeteer runs in the headless (no visible UI) by default\n\n## [Get started](https://pptr.dev/docs) | [API](https://pptr.dev/api) | [FAQ](https://pptr.dev/faq) | [Contributing](https://pptr.dev/contributing) | [Troubleshooting](https://pptr.dev/troubleshooting)\n\n## Installation\n\n```bash npm2yarn\nnpm i puppeteer # Downloads compatible Chrome during installation.\nnpm i puppeteer-core # Alternatively, install as a library, without downloading Chrome.\n```\n\n## Example\n\n```ts\nimport puppeteer from 'puppeteer';\n// Or import puppeteer from 'puppeteer-core';\n\n// Launch the browser and open a new blank page\nconst browser = await puppeteer.launch();\nconst page = await browser.newPage();\n\n// Navigate the page to a URL.\nawait page.goto('https://developer.chrome.com/');\n\n// Set screen size.\nawait page.setViewport({width: 1080, height: 1024});\n\n// Type into search box using accessible input name.\nawait page.locator('aria/Search').fill('automate beyond recorder');\n\n// Wait and click on first result.\nawait page.locator('.devsite-result-item-link').click();\n\n// Locate the full title with a unique string.\nconst textSelector = await page\n  .locator('text/Customize and automate')\n  .waitHandle();\nconst fullTitle = await textSelector?.evaluate(el => el.textContent);\n\n// Print the full title.\nconsole.log('The title of this blog post is \"%s\".', fullTitle);\n\nawait browser.close();\n```\n",
      "npm_url": "https://www.npmjs.com/package/mcp-puppeteer",
      "npm_downloads": 408,
      "keywords": [
        "puppeteer",
        "automation",
        "scraping",
        "puppeteer automates",
        "browser automation",
        "automation web"
      ],
      "category": "browser-automation"
    },
    "ztobs--cline-browser-use-mcp": {
      "owner": "ztobs",
      "name": "cline-browser-use-mcp",
      "url": "https://github.com/ztobs/cline-browser-use-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ztobs.webp",
      "description": "Automate browser tasks using Python scripts for operations like capturing screenshots, retrieving HTML content, and executing JavaScript on webpages.",
      "stars": 19,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-12T19:32:53Z",
      "readme_content": "# Browser Use Server\n\n[![smithery badge](https://smithery.ai/badge/@ztobs/cline-browser-use-mcp)](https://smithery.ai/server/@ztobs/cline-browser-use-mcp)\n\nA Model Context Protocol server for browser automation using Python scripts. For use with Cline\n\n<a href=\"https://glama.ai/mcp/servers/0aqrsbhx3z\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/0aqrsbhx3z/badge\" alt=\"Browser Use Server MCP server\" /></a>\n\n## Features\n\n### Browser Operations\n- `screenshot`: Capture a screenshot of a webpage (full page or viewport)\n- `get_html`: Retrieve the HTML content of a webpage\n- `execute_js`: Execute JavaScript on a webpage\n- `get_console_logs`: Get console logs from a webpage\n\nAll operations support custom interaction steps (e.g., clicking elements, scrolling) after page load.\n\n## Prerequisites\n\n1. (Optional but recommended) Install Xvfb for headless browser automation:\n```bash\n# Ubuntu/Debian\nsudo apt-get install xvfb\n\n# CentOS/RHEL\nsudo yum install xorg-x11-server-Xvfb\n\n# Arch Linux\nsudo pacman -S xorg-server-xvfb\n```\nXvfb (X Virtual Frame Buffer) creates a virtual display, allowing browser automation without detection as a bot. Learn more about Xvfb [here](https://www.x.org/releases/X11R7.6/doc/man/man1/Xvfb.1.xhtml).\n\n2. Install Miniconda or Anaconda\n3. Create a Conda environment:\n```bash\nconda create -n browser-use python=3.11\nconda activate browser-use\npip install -r requirements.txt\n```\n\n4. Set up LLM configuration:\n\nThe server supports multiple LLM providers. You can use any of the following API keys:\n```bash\n# Required: Set at least one of these API keys\nexport GLHF_API_KEY=your_api_key\nexport GROQ_API_KEY=your_api_key\nexport OPENAI_API_KEY=your_api_key\nexport OPENROUTER_API_KEY=your_api_key\nexport GITHUB_API_KEY=your_api_key\nexport DEEPSEEK_API_KEY=your_api_key\nexport GEMINI_API_KEY=your_api_key\nexport OLLAMA_API_KEY=your_api_key\n\n# Optional: Override default configuration\nexport MODEL=your_preferred_model  # Override the default model\nexport BASE_URL=your_custom_url    # Override the default API endpoint\nexport USE_VISION=false  # Enable/disable vision capabilities (default: false)\n```\n\nThe server will automatically use the first available API key it finds. You can optionally customize the model and base URL for any provider using the environment variables.\n\n## Installation\n\n### Installing via Smithery\n\nTo install Browser Use Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@ztobs/cline-browser-use-mcp):\n\n```bash\nnpx -y @smithery/cli install @ztobs/cline-browser-use-mcp --client claude\n```\n\n1. Clone this repository to `/home/YOUR_HOME/Documents/Cline/` directory\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the server:\n```bash\nnpm run build\n```\n\n## MCP Configuration\n\nAdd the following configuration to your Cline MCP settings:\n\n```json\n\"browser-use\": {\n  \"command\": \"node\",\n  \"args\": [\n    \"/home/YOUR_HOME/Documents/Cline/MCP/browser-use-server/build/index.js\"\n  ],\n  \"env\": {\n    // Required: Set at least one API key\n    \"GLHF_API_KEY\": \"your_api_key\",\n    \"GROQ_API_KEY\": \"your_api_key\",\n    \"OPENAI_API_KEY\": \"your_api_key\",\n    \"OPENROUTER_API_KEY\": \"your_api_key\",\n    \"GITHUB_API_KEY\": \"your_api_key\",\n    \"DEEPSEEK_API_KEY\": \"your_api_key\",\n    \"GEMINI_API_KEY\": \"your_api_key\",\n    \"OLLAMA_API_KEY\": \"your_api_key\",\n    // Optional: Configuration overrides\n    \"MODEL\": \"your_preferred_model\",\n    \"BASE_URL\": \"your_custom_url\",\n    \"USE_VISION\": \"false\"\n  },\n  \"disabled\": false,\n  \"autoApprove\": []\n}\n```\n\nReplace:\n- `YOUR_HOME` with your actual home directory name\n- `your_api_key` with your actual API keys\n\n## Usage\n\nRun the server:\n```bash\nnode build/index.js\n```\n\nThe server will be available on stdio and supports the following operations:\n\n### Screenshot\nParameters:\n- url: The webpage URL (required)\n- full_page: Whether to capture the full page or just the viewport (optional, default: false)\n- steps: Comma-separated actions or sentences describing steps to take after page load (optional)\n\n### Get HTML\nParameters:\n- url: The webpage URL (required)\n- steps: Comma-separated actions or sentences describing steps to take after page load (optional)\n\n### Execute JavaScript\nParameters:\n- url: The webpage URL (required)\n- script: JavaScript code to execute (required)\n- steps: Comma-separated actions or sentences describing steps to take after page load (optional)\n\n### Get Console Logs\nParameters:\n- url: The webpage URL (required)\n- steps: Comma-separated actions or sentences describing steps to take after page load (optional)\n\n## Example Cline Usage\n\nHere are some example tasks you can accomplish using the browser-use server with Cline:\n\n### Modifying Web Page Elements during Development\nTo change the color of a heading on a page that requires authentication:\n```\nChange the colour of the headline with the text \"Alle Foren im √úberblick.\" to deep blue on https://localhost:3000/foren/ page\n\nTo check/see the page, use browser-use MCP server to:\nOpen https://localhost:3000/auth,\nLogin with ztobs:Password123,\nNavigate to https://localhost:3000/foren/,\nAccept cookies if required\n\nhint: execute all browser actions in one command with multiple comma-separated steps\n```\n\nThis task demonstrates:\n- Multi-step browser automation using comma-separated steps\n- Authentication handling\n- Cookie acceptance\n- DOM manipulation\n- CSS styling changes\n\nThe server will execute these steps sequentially, handling any required interactions along the way.\n\n## Configuration\n\n### LLM Configuration\nThe server supports multiple LLM providers with their default configurations:\n\n- GLHF: Uses deepseek-ai/DeepSeek-V3 model\n- Ollama: Uses qwen2.5:32b-instruct-q4_K_M model with 32k context window\n- Groq: Uses deepseek-r1-distill-llama-70b model\n- OpenAI: Uses gpt-4o-mini model\n- Openrouter: Uses deepseek/deepseek-chat model\n- Github: Uses gpt-4o-mini model\n- DeepSeek: Uses deepseek-chat model\n- Gemini: Uses gemini-2.0-flash-exp model\n\nYou can override these defaults using environment variables:\n- `MODEL`: Set a custom model name for any provider\n- `BASE_URL`: Set a custom API endpoint URL (if the provider supports it)\n\n### Vision Support\nThe server supports vision capabilities through the USE_VISION environment variable:\n- Set USE_VISION=true to enable vision capabilities for browser operations\n- Default is false to optimize performance when vision is not needed\n- Useful for tasks that require visual understanding of webpage content\n\n### Xvfb Support\nThe server automatically detects if Xvfb is installed and:\n- Uses xvfb-run when available, enabling better browser automation without bot detection\n- Falls back to direct execution when Xvfb is not installed\n- Sets RUNNING_UNDER_XVFB environment variable accordingly\n\n### Timeout\nDefault timeout is 5 minutes (300000 ms). Modify the TIMEOUT constant in `build/index.js` to change this.\n\n## Error Handling\nThe server provides detailed error messages for:\n- Python script execution failures\n- Browser operation timeouts\n- Invalid parameters\n\n## Debugging\nUse the MCP Inspector for debugging:\n```bash\nnpm run inspector\n```\n\n## Uses\n\n[Browser Use](https://github.com/browser-use/browser-use)\n\n## License\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "scraping",
        "scripts",
        "browser automation",
        "automate browser",
        "automation web"
      ],
      "category": "browser-automation"
    }
  }
}