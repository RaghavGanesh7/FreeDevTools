{
  "category": "social-media",
  "categoryDisplay": "Social Media",
  "description": "Integration with social media platforms to allow posting, analytics, and interaction management. Enables AI-driven automation for social presence.",
  "totalRepositories": 67,
  "repositories": {
    "0xhijo--mcp_twitter": {
      "owner": "0xhijo",
      "name": "mcp_twitter",
      "url": "https://github.com/0xhijo/mcp_twitter",
      "imageUrl": "/freedevtools/mcp/pfp/0xhijo.webp",
      "description": "The Twitter Interaction Server allows AI models to easily perform actions on Twitter, such as posting updates, following users, and retrieving tweets. It simplifies access to Twitter's functionality through a standardized interface.",
      "stars": 10,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-23T09:32:46Z",
      "readme_content": "# MCP Twitter\n\n## Description\nMCP Twitter is a server based on the Model Context Protocol that allows direct interaction with Twitter/X. It exposes various Twitter API functionalities through a standardized set of tools, enabling AI models and applications to perform actions on Twitter.\n\n## Features\n\nThis MCP server provides the following actions:\n\n- **`create_twitter_post`**: Create a new X/Twitter post\n- **`reply_twitter_tweet`**: Reply to a specific X/Twitter post by ID\n- **`get_last_tweet`**: Get the most recent post from a specified X/Twitter account\n- **`get_last_tweets_options`**: Get a specified number of posts matching a search query\n- **`create_and_post_twitter_thread`**: Create and publish an X/Twitter thread\n- **`follow_twitter_from_username`**: Follow an X/Twitter user by username\n- **`get_twitter_profile_from_username`**: Get complete X/Twitter profile data by username\n- **`get_twitter_user_id_from_username`**: Get X/Twitter user ID from username\n- **`get_last_tweet_and_replies_from_user`**: Get recent X/Twitter posts and replies from a user\n- **`get_last_tweet_from_user`**: Get recent X/Twitter posts from a user\n- **`get_own_twitter_account_info`**: Get current account profile data\n\n## Installation and Usage\n\n### Local Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/0xhijo/mcp_twitter.git\n\n# Install dependencies and build the project\npnpm build\n\n# Launch the server\nnode ./build/index.js\n```\n### Installation via NPX\n```bash\nnpx mcp_twitter\n```\n\n## Configuration \n\n### Configuration via Twitter Scraper\n\n1. Configure the .env file:\n\n```sh\nTWITTER_AUTH_MODE = \"CREDENTIALS\" # Credentials mode\n\n# Your Twitter credentials\n\nTWITTER_USERNAME=\"YOUR_TWITTER_USERNAME\"\nTWITTER_PASSWORD=\"YOUR_TWITTER_PASSWORD\"\nTWITTER_EMAIL=\"YOUR_TWITTER_EMAIL\"\n```\n\nYou need to configure Twitter authentication by creating a `.env` file or directly adding the variables to your environment.\n\n### Configuration via Twitter API\n\n1. Create a Developer Account:\n\nMake sure you have a Twitter account\nVisit the Developer Platform\nGet your API credentials\nFollow this guide if you need help creating your developer account\n\n2. Configure the .env file\n\n```sh\nTWITTER_AUTH_MODE = \"API\" # API mode\n\n# Your CREDENTIALS obtained from the Developer Platform\n\nTWITTER_API=\"YOUR_TWITTER_API\"\nTWITTER_API_SECRET=\"YOUR_TWITTER_API_SECRET\"\nTWITTER_ACCESS_TOKEN=\"YOUR_TWITTER_ACCESS_TOKEN\"\nTWITTER_ACCESS_TOKEN_SECRET=\"YOUR_TWITTER_ACCESS_TOKEN_SECRET\"\n```\n## Integrating with Claude\nTo use MCP Twitter with Claude, you need to add it to your `claude_mcp_config.json` file. This will allow Claude to interact with Twitter through the MCP server.\n\n### Adding to Claude's MCP Configuration\nAdd the following entry to your `claude_mcp_config.json` file:\n\n```json\n\"mcp_twitter\": {\n  \"command\": \"npx\",\n  \"args\": [\"mcp_twitter\"],\n  \"env\": {\n    \"TWITTER_AUTH_MODE\": \"CREDENTIALS\",\n    \"TWITTER_USERNAME\": \"YOUR_TWITTER_USERNAME\",\n    \"TWITTER_PASSWORD\": \"YOUR_TWITTER_PASSWORD\",\n    \"TWITTER_EMAIL\": \"YOUR_TWITTER_EMAIL\"\n  }\n}\n```\nReplace the placeholder credentials with your actual Twitter account information. This configuration will launch the MCP Twitter server using npx when Claude needs to interact with Twitter.\n\n### Usage with Claude\nOnce configured, Claude will be able to use all the Twitter functionalities provided by the MCP server, such as creating posts, retrieving tweets, and more. You can simply ask Claude to perform Twitter actions, and it will utilize the MCP server to execute them.\n\n\n\n\n## Important Notes\n- Choose the authentication mode (API or CREDENTIALS) based on your needs\n- Verify that your credentials are properly configured in the .env file\n- Check the official documentation for more details about API limitations\n\n\n\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_twitter",
        "twitter",
        "tweets",
        "twitter functionality",
        "twitter interaction",
        "mcp_twitter twitter"
      ],
      "category": "social-media"
    },
    "AbdelStark--nostr-mcp": {
      "owner": "AbdelStark",
      "name": "nostr-mcp",
      "url": "https://github.com/AbdelStark/nostr-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/AbdelStark.webp",
      "description": "Connects AI models to the Nostr network for posting notes and facilitating interactions in a censorship-resistant environment, adhering to the freedom of speech protocol.",
      "stars": 35,
      "forks": 7,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-08T12:02:58Z",
      "readme_content": "# 🌐 Nostr MCP Server\n\nA Model Context Protocol (MCP) server that enables AI models to interact with Nostr, allowing them to post notes and interact with the freedom of speech protocol.\n\nCensorship resistance matters, even for LLMs.\n\n[![smithery badge](https://smithery.ai/badge/@AbdelStark/nostr-mcp)](https://smithery.ai/server/@AbdelStark/nostr-mcp)\n[![TypeScript](https://img.shields.io/badge/TypeScript-007ACC?style=flat-square&logo=typescript&logoColor=white)](https://www.typescriptlang.org/)\n[![MCP](https://img.shields.io/badge/MCP-Protocol-blue?style=flat-square)](https://github.com/modelcontextprotocol/typescript-sdk)\n[![Nostr](https://img.shields.io/badge/Nostr-Protocol-purple?style=flat-square)](https://nostr.com/)\n\nBTW, you should [join Nostr now!](https://start.njump.me/?s=npub1hr6v96g0phtxwys4x0tm3khawuuykz6s28uzwtj5j0zc7lunu99snw2e29)\n\n## 🚀 Features\n\n- 📝 Post notes to Nostr network\n- 🔌 Connect to multiple relays\n- 🤖 MCP-compliant API for AI integration\n- 💸 Send Lightning zaps to Nostr users (WIP)\n- 📡 Server-Sent Events (SSE) support for real-time communication\n\n## 👷‍♂️ TODOs\n\n- [ ] Add support for multiple simultaneous connections\n- [ ] Implement stdin transport mode (configurable via environment variable)\n\n## 📋 Prerequisites\n\n- Node.js 18+\n\n## 🛠️ Installation\n\n### Installing via Smithery\n\nTo install Nostr MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@AbdelStark/nostr-mcp):\n\n```bash\nnpx -y @smithery/cli install @AbdelStark/nostr-mcp --client claude\n```\n\n### Manual Installation\n1. Clone the repository:\n\n```bash\ngit clone https://github.com/AbdelStark/nostr-mcp\ncd nostr-mcp\n```\n\n1. Install dependencies:\n\n```bash\nnpm install\n```\n\n1. Create a `.env` file:\n\n> 💡 You can copy the `.env.example` file and modify it as needed.\n\n```env\n# Log level (debug, info, warn, error)\nLOG_LEVEL=debug\n# Node environment (development, production)\nNODE_ENV=development\n# List of Nostr relays to connect to\nNOSTR_RELAYS=wss://relay.damus.io,wss://relay.primal.net,wss://nos.lol\n# Your Nostr private key (starts with nsec)\nNOSTR_NSEC_KEY=your_nsec_key_here\n# Server mode (stdio or sse)\nSERVER_MODE=sse\n# Port for SSE mode\nPORT=9000\n```\n\n## 🚦 Usage\n\n### Starting the Server\n\n```bash\n# Development mode with hot reload\nnpm run dev\n\n# Production mode\nnpm start\n```\n\n### Available Tools\n\n#### `post_note`\n\nPosts a new note to the Nostr network.\n\nExample input:\n\n```json\n{\n  \"content\": \"Hello from Nostr! 👋\"\n}\n```\n\n#### `send_zap`\n\nSends a Lightning zap to a Nostr user.\n\nExample input:\n\n```json\n{\n  \"nip05Address\": \"user@domain.com\",\n  \"amount\": 1000\n}\n```\n\n## 🔧 Development\n\n### Project Structure\n\n```text\nnostr-mcp/\n├── src/\n│   ├── index.ts        # Main server entry point\n│   ├── nostr-client.ts # Nostr client implementation\n│   └── types.ts        # TypeScript type definitions\n├── .env               # Environment configuration\n└── tsconfig.json     # TypeScript configuration\n```\n\n### Running Tests\n\n```bash\nnpm test\n```\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🔗 Resources\n\n- [Join Nostr](https://start.njump.me/?s=npub1hr6v96g0phtxwys4x0tm3khawuuykz6s28uzwtj5j0zc7lunu99snw2e29)\n- [Nostr Manifesto](https://fiatjaf.com/nostr.html)\n- [Nostr Specifications](https://github.com/nostr-protocol/nips)\n- [Model Context Protocol](https://modelcontextprotocol.io/introduction)\n- [Visual testing tool for MCP servers](https://github.com/modelcontextprotocol/inspector)\n- [Awesome MCP Servers](https://github.com/punkpeye/awesome-mcp-servers)\n- [Awesome MCP Clients](https://github.com/punkpeye/awesome-mcp-clients)\n- [MCP TypeScript SDK](https://github.com/modelcontextprotocol/typescript-sdk)\n- [Nostr Development Kit (NDK)](https://github.com/nostr-dev-kit/ndk)\n\n## 📬 Contact\n\nFeel free to follow me if you'd like, using my public key:\n\n```text\nnpub1hr6v96g0phtxwys4x0tm3khawuuykz6s28uzwtj5j0zc7lunu99snw2e29\n```\n\nOr just **scan this QR code** to find me:\n\n![Nostr Public Key QR Code](https://hackmd.io/_uploads/SkAvwlYYC.png)\n\n---\n\n<p align=\"center\">\n  Made with ❤️ for the Nostr community\n</p>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "ai",
        "nostr",
        "automation social",
        "social media",
        "social presence"
      ],
      "category": "social-media"
    },
    "Beyond-Network-AI--beyond-mcp-server": {
      "owner": "Beyond-Network-AI",
      "name": "beyond-mcp-server",
      "url": "https://github.com/Beyond-Network-AI/beyond-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Beyond-Network-AI.webp",
      "description": "Provides standardized access to social platform data and onchain data, facilitating integration across multiple platforms. Supports Farcaster and includes a placeholder for Twitter integration, with extensibility for adding more platforms and optimized formatting for LLM interactions.",
      "stars": 12,
      "forks": 8,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-18T03:54:29Z",
      "readme_content": "# Beyond MCP Server\n\nAn extensible Model Context Protocol server that provides standardized access to social platform data and onchain data. Currently supports Farcaster (via Neynar API) with placeholder for Twitter integration. More platforms like Telegram including onchain data will be added soon.\n\n## Features\n\n- **MCP Compliant**: Fully implements the Model Context Protocol specification\n- **Multi-Platform**: Designed to support multiple social media platforms\n- **Extensible**: Easy to add new platform providers\n- **Well-Formatted**: Optimized context formatting for LLM consumption\n- **Flexible Transport**: Supports both stdio and SSE/HTTP transports\n\n\n## Supported Platforms\n\n- **Farcaster**: Full implementation via Neynar API\n- **Twitter**: Placeholder (not implemented)\n\n## Getting Started\n\n### Prerequisites\n\n- Node.js 16+\n- Neynar API key (for Farcaster access) [https://neynar.com/](https://neynar.com/)\n\n### Installation\n\n1. Clone the repository\n```bash\ngit clone https://github.com/yourusername/beyond-mcp-server.git\ncd beyond-mcp-server\n```\n\n2. Install dependencies\n```bash\nnpm install\n```\n\n3. Create a .env file from the template\n```bash\ncp .env.example .env\n# Edit .env with your API keys\n```\n\n4. Configure your environment variables\n   - **Required**: Set `NEYNAR_API_KEY` in your .env file\n   - You can obtain a Neynar API key from [https://neynar.com/](https://neynar.com/)\n   - Without a valid API key, Farcaster functionality will not work\n\n5. Build and start the server\n```bash\nnpm run build\nnpm start  # For stdio mode (default)\n# OR\nnpm run start:http  # For HTTP/SSE mode\n```\n\n## Using with Claude for Desktop\n\n1. Build the server\n```bash\nnpm run build\n```\n\n2. Make sure your .env file is properly configured with your API keys\n   - The server will look for .env in the following locations:\n     - Current working directory\n     - Project root directory\n     - Parent directories (up to 3 levels)\n   - You can also set environment variables directly in your system\n\n3. Add the server to your Claude Desktop configuration at:\n* macOS: ~/Library/Application Support/Claude/claude_desktop_config.json\n* Windows: %APPDATA%\\Claude\\claude_desktop_config.json\n  \n\n```json\n{\n  \"mcpServers\": {\n    \"beyond-social\": {\n      \"command\": \"/usr/local/bin/node\",\n      \"args\": [\n        \"/full/path/to/beyond-mcp-server/dist/index.js\",\n        \"--stdio\"\n      ]\n    }\n  }\n}\n```\n\n4. Alternatively, you can pass the API key and other environment variables directly in the Claude Desktop configuration (**recommended**):\n\n```json\n{\n  \"mcpServers\": {\n    \"beyond-social\": {\n      \"command\": \"/usr/local/bin/node\",\n      \"args\": [\n        \"/full/path/to/beyond-mcp-server/dist/index.js\",\n        \"--stdio\"\n      ],\n      \"env\": {\n        \"NEYNAR_API_KEY\": \"YOUR_API_KEY_HERE\",\n        \"ENABLE_FARCASTER\": \"true\",\n        \"ENABLE_TWITTER\": \"false\"\n      }\n    }\n  }\n}\n```\n\n5. Restart Claude for Desktop\n\n## MCP Capabilities\n\n### Resources\n\n* `social://{platform}/{query}/search` - Search content on a platform\n* `social://{platform}/user/{userId}/profile` - Get user profile\n* `social://{platform}/wallet/{walletAddress}/profile` - Get user profile by wallet address (Farcaster only)\n* `social://{platform}/user/{userId}/balance` - Get user's wallet balance (Farcaster only)\n  - Accepts either FID (numeric) or username\n  - If username is provided, automatically converts to FID before fetching balance\n* `social://{platform}/wallet/{walletAddress}/profile` - Get user profile by wallet address\n* `social://{platform}/user/{userId}/content` - Get user content\n* `social://{platform}/thread/{threadId}` - Get conversation thread\n* `social://{platform}/trending` - Get trending topics\n* `social://{platform}/trending-feed` - Get trending feed content with multi-provider support (Farcaster only)\n  - Supports providers: neynar (default), openrank, mbd\n  - Parameters: timeWindow (1h, 6h, 12h, 24h, 7d, 30d), limit\n* `social://{platform}/channels/search` - Search for channels on a platform (Farcaster only)\n  - Parameters: query, limit, cursor\n  - Returns channel details including name, description, follower count, and metadata\n* `social://{platform}/channels/bulk-search` - Search for multiple channels in parallel (Farcaster only)\n  - Parameters: queries (array), limit, cursor\n  - Returns results for each query with channel details and pagination info\n\n### Tools\n\n* `search-content` - Search for content on a social platform\n* `get-user-profile` - Get a user's profile information\n* `get-user-profile-by-wallet` - Get user profile using wallet address (Farcaster only)\n* `get-user-balance` - Get user's wallet balance (Farcaster only)\n  - Accepts either FID (numeric) or username\n  - Automatically handles username to FID conversion\n* `get-user-content` - Get content from a specific user\n* `get-thread` - Get a conversation thread\n* `get-trending-topics` - Get current trending topics\n* `getTrendingFeed` - Get trending feed with multi-provider support (Farcaster only)\n* `get-wallet-profile` - Get profile based on wallet address\n* `search-channels` - Search for channels on a platform (Farcaster only)\n  - Parameters: query, limit, cursor\n  - Returns detailed channel information including follower count and metadata\n* `search-bulk-channels` - Search for multiple channels in parallel (Farcaster only)\n  - Parameters: queries (array), limit, cursor\n  - Returns results for each query with channel details and pagination info\n\n### Prompts\n\n* `analyze-thread` - Analyze a social media thread\n* `summarize-user-activity` - Summarize a user's activity\n* `explore-trending-topics` - Explore trending topics on a platform\n* `analyze-search-results` - Analyze search results for a query\n* `explore-trending-feed` - Analyze trending feed content across different providers\n* `get-wallet-profile` - Get and analyze user profile by wallet address\n* `check-user-balance` - Analyze user's wallet balance and holdings\n  - Works with both FID and username inputs\n  - Handles automatic FID resolution for usernames\n* `explore-channels` - Analyze and explore channels on a platform\n  - Provides insights about channel popularity and content\n  - Helps discover relevant channels based on search criteria\n* `explore-bulk-channels` - Analyze and compare multiple channels in parallel\n  - Efficiently searches and compares multiple channels\n  - Provides insights about channel relationships and trends\n\n## Extending with New Providers\n\nTo add a new social platform provider:\n\n1. Create a new directory in `src/providers/`\n2. Implement the `ContentProvider` interface\n3. Register the provider in the registry\n\nExample:\n\n```typescript\nimport { ContentProvider } from '../interfaces/provider';\n\nexport class MyPlatformProvider implements ContentProvider {\n  public name = 'myplatform';\n  public platform = 'myplatform';\n  \n  // Implement all required methods\n}\n```\n\n## Development\n\n### Running in Development Mode\n\n```bash\nnpm run dev        # stdio mode\nnpm run dev:http   # HTTP mode\n```\n\n### Testing\n\n```bash\nnpm test\n```\n\n### Linting\n\n```bash\nnpm run lint\nnpm run lint:fix\n```\n\n## License\n\nMIT\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## Changelog\n\n   All notable changes to this project will be documented in this file.\n   \n   ### [1.0.0] - 2025-Mar-10\n   \n   #### Added\n   - Initial release\n   - Farcaster integration via Neynar API\n   - MCP compliant server implementation\n   - Support for both stdio and HTTP modes\n\n   ### [1.0.1] - 2025-Mar-19\n   \n   #### Added\n   - Added new tools and resource to fetch user profile with wallet address\n   - Added new tests\n     \n   ### [1.0.2] - 2025-Mar-21\n   \n   #### Added\n   - Added functionality to retrieve wallet balances of Farcaster users via ID or username\n   - Implemented multi-provider support for trending feed content\n   - Enhanced updateUserProfile with additional user details\n   - Added comprehensive tests to ensure reliability and performance\n  \n   ### [1.0.3] - 2025-Mar-24\n   \n   #### Added\n   - Add support to fetch Single and Bulk farcaster channel information \n   \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twitter",
        "social",
        "ai",
        "twitter integration",
        "social platform",
        "automation social"
      ],
      "category": "social-media"
    },
    "Bob-lance--instagram-engagement-mcp": {
      "owner": "Bob-lance",
      "name": "instagram-engagement-mcp",
      "url": "https://github.com/Bob-lance/instagram-engagement-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Bob-lance.webp",
      "description": "Analyze Instagram engagement metrics, extract demographic insights, and identify potential leads from comments and accounts. Support features such as sentiment analysis and comparative engagement assessments across different Instagram accounts.",
      "stars": 35,
      "forks": 6,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-23T11:37:41Z",
      "readme_content": "# Instagram Engagement MCP\n\n[![npm version](https://img.shields.io/npm/v/instagram-engagement-mcp.svg)](https://www.npmjs.com/package/instagram-engagement-mcp)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![smithery badge](https://smithery.ai/badge/@Bob-lance/instagram-engagement-mcp)](https://smithery.ai/server/@Bob-lance/instagram-engagement-mcp)\n\nAn MCP server that provides tools for analyzing Instagram engagement metrics, extracting demographic insights, and identifying potential leads from Instagram posts and accounts.\n\n## Features\n\n- **Analyze Post Comments**: Extract sentiment, themes, and potential leads from comments on Instagram posts\n- **Compare Accounts**: Compare engagement metrics across different Instagram accounts\n- **Extract Demographics**: Get demographic insights from users engaged with a post or account\n- **Identify Leads**: Find potential leads based on engagement patterns and criteria\n- **Generate Engagement Reports**: Create comprehensive reports with actionable insights\n\n## Installation\n\n### Installing via Smithery\n\nTo install Instagram Engagement Analysis for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@Bob-lance/instagram-engagement-mcp):\n\n```bash\nnpx -y @smithery/cli install @Bob-lance/instagram-engagement-mcp --client claude\n```\n\n### Option 1: Install from npm\n\n```bash\nnpm install -g instagram-engagement-mcp\n```\n\n### Option 2: Clone from GitHub\n\n```bash\ngit clone https://github.com/Bob-lance/instagram-engagement-mcp.git\ncd instagram-engagement-mcp\nnpm install\n```\n\n## Setup\n\n1. Copy the `.env.example` file to `.env` and add your Instagram credentials:\n   ```bash\n   cp .env.example .env\n   ```\n2. Edit the `.env` file with your Instagram username and password\n\n## Building from Source\n\nIf you cloned the repository, build the project:\n\n```bash\nnpm run build\n```\n\n## Configuration\n\nAdd the server to your MCP settings file:\n\n```json\n{\n  \"mcpServers\": {\n    \"instagram-engagement\": {\n      \"command\": \"npx\",\n      \"args\": [\"instagram-engagement-mcp\"],\n      \"env\": {\n        \"INSTAGRAM_USERNAME\": \"your_instagram_username\",\n        \"INSTAGRAM_PASSWORD\": \"your_instagram_password\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nIf you cloned the repository instead of installing from npm, use:\n\n```json\n{\n  \"mcpServers\": {\n    \"instagram-engagement\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/instagram-engagement-mcp/build/index.js\"],\n      \"env\": {\n        \"INSTAGRAM_USERNAME\": \"your_instagram_username\",\n        \"INSTAGRAM_PASSWORD\": \"your_instagram_password\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n## Available Tools\n\n### analyze_post_comments\n\nAnalyze comments on an Instagram post to identify sentiment, themes, and potential leads.\n\n**Parameters:**\n- `postUrl` (required): URL of the Instagram post to analyze\n- `maxComments` (optional): Maximum number of comments to analyze (default: 100)\n\n### compare_accounts\n\nCompare engagement metrics across different Instagram accounts.\n\n**Parameters:**\n- `accounts` (required): List of Instagram account handles to compare\n- `metrics` (optional): Metrics to compare (default: all)\n\n### extract_demographics\n\nExtract demographic insights from users engaged with a post or account.\n\n**Parameters:**\n- `accountOrPostUrl` (required): Instagram account handle or post URL to analyze\n- `sampleSize` (optional): Number of users to sample for demographic analysis (default: 50)\n\n### identify_leads\n\nIdentify potential leads based on engagement patterns.\n\n**Parameters:**\n- `accountOrPostUrl` (required): Instagram account handle or post URL to analyze\n- `criteria` (optional): Criteria for identifying leads\n\n### generate_engagement_report\n\nGenerate a comprehensive engagement report for an Instagram account.\n\n**Parameters:**\n- `account` (required): Instagram account handle\n- `startDate` (optional): Start date for the report (YYYY-MM-DD)\n- `endDate` (optional): End date for the report (YYYY-MM-DD)\n\n## Notes\n\n- This server uses the Instagram Private API, which is not officially supported by Instagram\n- Use responsibly and in accordance with Instagram's terms of service\n- Be aware of rate limits to avoid being blocked by Instagram\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "instagram",
        "social",
        "ai",
        "instagram engagement",
        "analyze instagram",
        "instagram accounts"
      ],
      "category": "social-media"
    },
    "DataWhisker--x-mcp-server": {
      "owner": "DataWhisker",
      "name": "x-mcp-server",
      "url": "https://github.com/DataWhisker/x-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/DataWhisker.webp",
      "description": "Integrates with X (Twitter) for functionalities such as reading tweets from the home timeline, creating new tweets, and replying to existing tweets. Includes built-in rate limit handling for the free API tier with a TypeScript implementation that provides full type safety.",
      "stars": 38,
      "forks": 10,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-26T16:42:11Z",
      "readme_content": "# X MCP Server\n\nA Model Context Protocol (MCP) server for X (Twitter) integration that provides tools for reading your timeline and engaging with tweets. Designed for use with Claude desktop.\n\n<a href=\"https://glama.ai/mcp/servers/5nx3qqiunw\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/5nx3qqiunw/badge\" alt=\"X Server MCP server\" /></a>\n\n## Features\n\n- Get tweets from your home timeline\n- Create new tweets\n- Reply to tweets\n- Delete tweets\n- Built-in rate limit handling for the free API tier\n- TypeScript implementation with full type safety\n\n## Prerequisites\n\n- Node.js (v16 or higher)\n- X (Twitter) Developer Account (Free)\n- Claude desktop app\n\n## X API Access\n\nX (Twitter) provides a free tier for basic API access:\n\n### Free Tier Features\n- **Post Limits:** \n  - 500 posts per month at user level\n  - 500 posts per month at app level\n- **Read Limits:**\n  - 100 reads per month\n- **Features:**\n  - Access to v2 post posting endpoints\n  - Media upload endpoints\n  - Access to Ads API\n  - Limited to 1 app ID\n  - Login with X functionality\n- **Rate Limits:**\n  - Rate-limited access to all endpoints\n  - Limits reset periodically\n\nNote: For higher volume needs, paid tiers are available:\n- Basic tier ($100/month): 50,000 tweets/month, additional endpoints\n- Pro tier ($5000/month): Higher limits and enterprise features\n\nYou can access the free tier at: https://developer.x.com/en/portal/products/free\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone [your-repo-url]\ncd x-mcp-server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the server:\n```bash\nnpm run build\n```\n\n## Configuration\n\nYou need to set up your X (Twitter) API credentials. Follow these detailed steps:\n\n1. Go to the [Twitter Developer Portal](https://developer.twitter.com/en/portal/dashboard)\n   - Sign in with your X (Twitter) account\n   - If you don't have a developer account, you'll be prompted to create one\n\n2. Access the Free Tier:\n   - Visit https://developer.x.com/en/portal/products/free\n   - Click \"Subscribe\" for the Free Access tier\n   - Complete the registration process\n\n3. Create a new project:\n   - Click \"Create Project\" button\n   - Enter a project name (e.g., \"MCP Integration\")\n   - Select \"Free\" as your setup\n   - Choose your use case\n   - Click \"Next\"\n\n4. Create a new app within your project:\n   - Click \"Create App\"\n   - Enter an app name\n   - Click \"Complete Setup\"\n\n5. Configure app settings:\n   - In your app dashboard, click \"App Settings\"\n   - Under \"User authentication settings\":\n     - Click \"Set Up\"\n     - Enable OAuth 1.0a\n     - Select \"Web App\" or \"Native App\"\n     - Enter any URL for callback (e.g., https://example.com/callback)\n     - Enter any URL for website (e.g., https://example.com)\n     - Click \"Save\"\n\n6. Set app permissions:\n   - In app settings, find \"App permissions\"\n   - Change to \"Read and Write\"\n   - Click \"Save\"\n\n7. Generate API Keys and Tokens:\n   - Go to \"Keys and Tokens\" tab\n   - Under \"Consumer Keys\":\n     - Click \"View Keys\" or \"Regenerate\"\n     - Save your API Key and API Key Secret\n   - Under \"Access Token and Secret\":\n     - Click \"Generate\"\n     - Make sure to select tokens with \"Read and Write\" permissions\n     - Save your Access Token and Access Token Secret\n\nImportant: \n- Keep your keys and tokens secure and never share them publicly\n- You'll need all four values:\n  - API Key (also called Consumer Key)\n  - API Key Secret (also called Consumer Secret)\n  - Access Token\n  - Access Token Secret\n- Remember the free tier limits:\n  - 500 posts per month at user level\n  - 500 posts per month at app level\n  - 100 reads per month\n\n## Claude Desktop Configuration\n\nTo connect the X MCP server with Claude desktop, you need to configure it in the Claude settings. Follow these steps:\n\n1. Open File Explorer\n2. Navigate to the Claude config directory:\n   - Press Win + R\n   - Type `%APPDATA%/Claude` and press Enter\n   - If the Claude folder doesn't exist, create it\n\n3. Create or edit `claude_desktop_config.json`:\n   - If the file doesn't exist, create a new file named `claude_desktop_config.json`\n   - If it exists, open it in a text editor (like Notepad)\n\n4. Add the following configuration, replacing the placeholder values with your actual API credentials from the previous section:\n```json\n{\n  \"mcpServers\": {\n    \"x\": {\n      \"command\": \"node\",\n      \"args\": [\"%USERPROFILE%/Projects/MCP Basket/x-server/build/index.js\"],\n      \"env\": {\n        \"TWITTER_API_KEY\": \"paste-your-api-key-here\",\n        \"TWITTER_API_SECRET\": \"paste-your-api-key-secret-here\",\n        \"TWITTER_ACCESS_TOKEN\": \"paste-your-access-token-here\",\n        \"TWITTER_ACCESS_SECRET\": \"paste-your-access-token-secret-here\"\n      }\n    }\n  }\n}\n```\n\n5. Save the file and restart Claude desktop\n\nNote: Make sure to:\n- Replace all four credential values with your actual API keys and tokens\n- Keep the quotes (\"\") around each value\n- Maintain the exact spacing and formatting shown above\n- Save the file with the `.json` extension\n\n## Available Tools\n\n### get_home_timeline\nGet the most recent tweets from your home timeline.\n\nParameters:\n- `limit` (optional): Number of tweets to retrieve (default: 20, max: 100)\n\nExample:\n```typescript\nawait use_mcp_tool({\n  server_name: \"x\",\n  tool_name: \"get_home_timeline\",\n  arguments: { limit: 5 }\n});\n```\n\n### create_tweet\nCreate a new tweet.\n\nParameters:\n- `text` (required): The text content of the tweet (max 280 characters)\n\nExample:\n```typescript\nawait use_mcp_tool({\n  server_name: \"x\",\n  tool_name: \"create_tweet\",\n  arguments: { text: \"Hello from MCP! 🤖\" }\n});\n```\n\n### reply_to_tweet\nReply to a tweet.\n\nParameters:\n- `tweet_id` (required): The ID of the tweet to reply to\n- `text` (required): The text content of the reply (max 280 characters)\n\nExample:\n```typescript\nawait use_mcp_tool({\n  server_name: \"x\",\n  tool_name: \"reply_to_tweet\",\n  arguments: {\n    tweet_id: \"1234567890\",\n    text: \"Great tweet! 👍\"\n  }\n});\n```\n\n### delete_tweet\nDelete a tweet.\nParameters:\n- `tweet_id` (required): The ID of the tweet to delete\nExample:\n```typescript\nawait use_mcp_tool({\n  server_name: \"x\",\n  tool_name: \"delete_tweet\",\n  arguments: {\n    tweet_id: \"1234567890\"\n  }\n});\n```\n\n## Development\n\n- `npm run build`: Build the TypeScript code\n- `npm run dev`: Run TypeScript in watch mode\n- `npm start`: Start the MCP server\n\n## Rate Limiting\n\nThe server includes built-in rate limit handling for X's free tier:\n- Monthly limits:\n  - 500 posts per month at user level\n  - 500 posts per month at app level\n  - 100 reads per month\n- Features:\n  - Tracks monthly usage\n  - Provides exponential backoff for rate limit errors\n  - Clear error messages when limits are reached\n  - Automatic retry after rate limit window expires\n\n## License\n\nMIT\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twitter",
        "tweets",
        "social",
        "integrates twitter",
        "twitter functionalities",
        "automation social"
      ],
      "category": "social-media"
    },
    "Ejb503--systemprompt-mcp-reddit": {
      "owner": "Ejb503",
      "name": "systemprompt-mcp-reddit",
      "url": "https://github.com/Ejb503/systemprompt-mcp-reddit",
      "imageUrl": "/freedevtools/mcp/pfp/Ejb503.webp",
      "description": "Fetch posts and content from Reddit, manage subreddits, and customize parameters for enhanced social media interaction.",
      "stars": 8,
      "forks": 5,
      "license": "Other",
      "language": "JavaScript",
      "updated_at": "2025-09-10T22:39:42Z",
      "readme_content": "# systemprompt-mcp-reddit\n\n[![npm version](https://img.shields.io/npm/v/systemprompt-mcp-reddit.svg)](https://www.npmjs.com/package/systemprompt-mcp-reddit)\n[![smithery badge](https://smithery.ai/badge/systemprompt-mcp-reddit)](https://smithery.ai/server/systemprompt-mcp-reddit)\n[![License: Apache-2.0](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Twitter Follow](https://img.shields.io/twitter/follow/tyingshoelaces_?style=social)](https://twitter.com/tyingshoelaces_)\n[![Discord](https://img.shields.io/discord/1255160891062620252?color=7289da&label=discord)](https://discord.com/invite/wkAbSuPWpr)\n\n[Website](https://systemprompt.io) | [Documentation](https://systemprompt.io/documentation) | [Blog](https://tyingshoelaces.com) | [Get API Key](https://systemprompt.io/console)\n\nA specialized Model Context Protocol (MCP) server that enables AI agents to interact with Reddit, including reading posts, creating content, and managing subreddit configurations. The server is designed to work specifically with [systemprompt.io](https://systemprompt.io) client that support sampling and notification features, and may not function properly with other MCP clients.\n\nAn API KEY is required to use this server. This is currently free, although this may change in the future. You can get one [here](https://systemprompt.io/console).\n\nThis server uses Sampling and Notification functionality from the [@modelcontextprotocol/sdk](https://github.com/modelcontextprotocol/sdk).\n\n## Features\n\n#### Core Functionality\n\n- **Subreddit Configuration**: Configure and manage multiple subreddits for the AI agent\n- **Content Retrieval**: Fetch hot, new, or controversial posts from configured subreddits\n- **Content Creation**: Generate AI-powered posts and replies with customizable parameters\n- **Writing Style Control**: Configure tone, vocabulary, and content guidelines for the AI\n\n#### Advanced Features\n\n- **Rule Compliance**: Automatic adherence to subreddit rules and requirements\n- **Content Guidelines**: Customizable instructions for content generation\n- **Flexible Post Types**: Support for both text and link posts\n- **Smart Replies**: Context-aware response generation\n\n#### Integration Features\n\n- **MCP Protocol Integration**: Full implementation of Model Context Protocol\n- **Type-Safe Implementation**: Complete TypeScript support\n- **Real-Time Processing**: Supports streaming responses\n- **Advanced Error Handling**: Comprehensive error management\n\n## System Architecture\n\nThis project follows a modular architecture designed to be adaptable for other MCP server implementations:\n\n### Core Components\n\n- **MCP Protocol Layer**: Implements the complete Model Context Protocol\n- **Service Layer**: Abstracts Reddit API interactions\n- **Handler Layer**: Routes and processes MCP requests\n- **Tool Layer**: Defines operations AI agents can perform\n- **Utility Layer**: Provides helpers for validation and data transformation\n\n### Directory Structure\n\n- `/src/config`: Server configuration and capabilities\n- `/src/constants`: Tool schemas, sampling templates, and system constants\n- `/src/handlers`: Request handlers and tool implementations\n- `/src/services`: API integration services\n- `/src/types`: TypeScript type definitions\n- `/src/utils`: Utility functions and helpers\n\nFor detailed documentation of the architecture and implementation patterns, see:\n- [ARCHITECTURE.md](./ARCHITECTURE.md): Complete system overview\n- [TEMPLATE_GUIDE.md](./TEMPLATE_GUIDE.md): Guide for creating new MCP servers\n\n## Using as a Template\n\nThis codebase is designed to serve as a template for creating other MCP servers. The modular architecture makes it straightforward to replace the Reddit integration with other APIs:\n\n1. Replace the service layer with your API implementation\n2. Define new tools appropriate for your domain\n3. Update type definitions and schemas\n4. Configure server capabilities\n\nSee [TEMPLATE_GUIDE.md](./TEMPLATE_GUIDE.md) for detailed step-by-step instructions.\n\n## 🎥 Demo & Showcase\n\nWatch our video demonstration to see Systemprompt MCP Reddit in action:\n\n[▶️ Watch Demo Video](https://www.youtube.com/watch?v=NyXkfVAv7OE)\n\n## Related Links\n\n- [Multimodal MCP Client](https://github.com/Ejb503/multimodal-mcp-client) - Voice-powered MCP client\n- [systemprompt.io Documentation](https://systemprompt.io/docs)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "automation",
        "ai",
        "automation social",
        "social presence",
        "social media"
      ],
      "category": "social-media"
    },
    "EnesCinr--twitter-mcp": {
      "owner": "EnesCinr",
      "name": "twitter-mcp",
      "url": "https://github.com/EnesCinr/twitter-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/EnesCinr.webp",
      "description": "Interact with Twitter to post tweets and perform searches on the platform.",
      "stars": 308,
      "forks": 40,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T12:45:06Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/enescinr-twitter-mcp-badge.png)](https://mseep.ai/app/enescinr-twitter-mcp)\n\n# Twitter MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@enescinar/twitter-mcp)](https://smithery.ai/server/@enescinar/twitter-mcp)\n\nThis MCP server allows Clients to interact with Twitter, enabling posting tweets and searching Twitter.\n\n<a href=\"https://glama.ai/mcp/servers/dhsudtc7cd\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/dhsudtc7cd/badge\" alt=\"Twitter Server MCP server\" />\n</a>\n\n## Quick Start\n\n1. Create a Twitter Developer account and get your API keys from [Twitter Developer Portal](https://developer.twitter.com/en/portal/dashboard)\n\n2. Add this configuration to your Claude Desktop config file:\n\n**Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`  \n**macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"twitter-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@enescinar/twitter-mcp\"],\n      \"env\": {\n        \"API_KEY\": \"your_api_key_here\",\n        \"API_SECRET_KEY\": \"your_api_secret_key_here\",\n        \"ACCESS_TOKEN\": \"your_access_token_here\",\n        \"ACCESS_TOKEN_SECRET\": \"your_access_token_secret_here\"\n      }\n    }\n  }\n}\n```\n\n3. Restart Claude Desktop\n\nThat's it! Claude can now interact with Twitter through two tools:\n\n- `post_tweet`: Post a new tweet\n- `search_tweets`: Search for tweets\n\n## Example Usage\n\nTry asking Claude:\n- \"Can you post a tweet saying 'Hello from Claude!'\"\n- \"Can you search for tweets about Claude AI?\"\n\n## Troubleshooting\n\nLogs can be found at:\n- **Windows**: `%APPDATA%\\Claude\\logs\\mcp-server-twitter.log`\n- **macOS**: `~/Library/Logs/Claude/mcp-server-twitter.log`\n\n\n## Development\n\nIf you want to contribute or run from source:\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/EnesCinr/twitter-mcp.git\ncd twitter-mcp\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build:\n```bash\nnpm run build\n```\n\n4. Run:\n```bash\nnpm start\n```\n\n\n\n## Running evals\n\nThe evals package loads an mcp client that then runs the index.ts file, so there is no need to rebuild between tests. You can load environment variables by prefixing the npx command. Full documentation can be found [here](https://www.mcpevals.io/docs).\n\n```bash\nOPENAI_API_KEY=your-key  npx mcp-eval src/evals/evals.ts src/index.ts\n```\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twitter",
        "tweets",
        "social",
        "interact twitter",
        "automation social",
        "twitter mcp"
      ],
      "category": "social-media"
    },
    "GridfireAI--reddit-mcp": {
      "owner": "GridfireAI",
      "name": "reddit-mcp",
      "url": "https://github.com/GridfireAI/reddit-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/GridfireAI.webp",
      "description": "Browse, search, and read Reddit content and comments through a simple interface, enabling integration of Reddit data into applications or workflows. Currently supports only read features with built-in rate limiting using the PRAW library.",
      "stars": 16,
      "forks": 7,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-31T12:55:58Z",
      "readme_content": "# Reddit MCP\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nA plug-and-play [MCP](https://modelcontextprotocol.io) server to browse, search, and read Reddit.\n\n## Demo\nHere's a short video showing how to use this in Claude Desktop:\n\nhttps://github.com/user-attachments/assets/a2e9f2dd-a9ac-453f-acd9-1791380ebdad\n\n## Features\n\n- Detailed parameter validation with [pydantic](https://docs.pydantic.dev)\n- Uses the reliable [PRAW](https://praw.readthedocs.io/) library under the hood\n- Built-in rate limiting protection thanks to PRAW\n\n## Caveats\n- Only supports read features for now. If you want to use write features, upvote the [issue](https://github.com/GridfireAI/reddit-mcp/issues/1) or [send a PR](CONTRIBUTING.md)! 🙌\n- Tools use tokens. To use this with Claude, you may need to be a Pro user to use many tool calls. Free tier users should be fine with lighter tool usage. Your token usage is your responsibility.\n\n## Installation\n\n### Prerequisite: Reddit API credentials\n\nCreate a [developer app](https://www.reddit.com/prefs/apps) in your Reddit account if you don't already have one. This will give you a `client_id` and `client_secret` to use in the following steps. If you already have these, you can skip this step.\n\n### Claude Desktop\n\nTo install into Claude Desktop:\n\n- Follow the instructions [here](https://modelcontextprotocol.io/quickstart/user) until the section \"Open up the configuration file in any text editor.\"\n- Add the following to the file depending on your preferred installation method:\n\n### Using [uvx](https://docs.astral.sh/uv/guides/tools/) (recommended)\n\n```json\n\"mcpServers\": {\n  \"reddit\": {\n    \"command\": \"uvx\",\n    \"args\": [\"reddit-mcp\"],\n    \"env\": {\n      \"REDDIT_CLIENT_ID\": \"<client_id>\",\n      \"REDDIT_CLIENT_SECRET\": \"<client_secret>\"\n    }\n  }\n}\n```\n\n### Using PIP\n\nFirst install the package:\n\n```bash\npip install reddit-mcp\n```\n\nThen add the following to the configuration file:\n\n```json\n\"mcpServers\": {\n  \"reddit\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"reddit_mcp\"],\n    \"env\": {\n      \"REDDIT_CLIENT_ID\": \"<client_id>\",\n      \"REDDIT_CLIENT_SECRET\": \"<client_secret>\"\n    }\n  }\n}\n```\n\n### Others\n\nYou can use this server with any [MCP client](https://modelcontextprotocol.io/docs/clients), including agent frameworks (LangChain, LlamaIndex, AutoGen, etc). For an example AutoGen integration, check out the [example](examples/autogen).\n\n## Tools\n\nThe tools the server will expose are:\n\n| Name                         | Description                              |\n| ---------------------------- | ---------------------------------------- |\n| `get_comment`                | Access a comment                         |\n| `get_comments_by_submission` | Access comments of a submission          |\n| `get_submission`             | Access a submission                      |\n| `get_subreddit`              | Access a subreddit by name               |\n| `search_posts`               | Search posts in a subreddit              |\n| `search_subreddits`          | Search subreddits by name or description |\n\n## Contributing\n\nContributions are welcome! See [CONTRIBUTING.md](CONTRIBUTING.md) for more information.\n\n## Acknowledgments\n\n- [PRAW](https://praw.readthedocs.io/) for an amazingly reliable library 💙\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "gridfireai",
        "reddit",
        "gridfireai reddit",
        "social media",
        "automation social"
      ],
      "category": "social-media"
    },
    "HagaiHen--facebook-mcp-server": {
      "owner": "HagaiHen",
      "name": "facebook-mcp-server",
      "url": "https://github.com/HagaiHen/facebook-mcp-server",
      "imageUrl": "",
      "description": "Integrates with Facebook Pages to enable direct management of posts, comments, and engagement metrics through the Graph API for streamlined social media management.",
      "stars": 52,
      "forks": 21,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T07:12:56Z",
      "readme_content": "# Facebook MCP Server\n\nThis project is a **MCP server** for automating and managing interactions on a Facebook Page using the Facebook Graph API. It exposes tools to create posts, moderate comments, fetch post insights, and filter negative feedback — ready to plug into Claude, or other LLM-based agents.\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/HagaiHen/facebook-mcp-server)](https://archestra.ai/mcp-catalog/hagaihen__facebook-mcp-server)\n<a href=\"https://glama.ai/mcp/servers/@HagaiHen/facebook-mcp-server\">\n  <img alt=\"badge\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@HagaiHen/facebook-mcp-server/badge\" />\n</a>\n\n---\n\n## 🤖 What Is This?\n\nThis MCP provides a suite of AI-callable tools that connect directly to a Facebook Page, abstracting common API operations as LLM-friendly functions.\n\n### ✅ Benefits\n\n- Empowers **social media managers** to automate moderation and analytics.\n- Seamlessly integrates with **Claude Desktop or any Agent client**.\n- Enables fine-grained control over Facebook content from natural language.\n\n---\n\n## 📦 Features\n\n| Tool                             | Description                                                         |\n|----------------------------------|---------------------------------------------------------------------|\n| `post_to_facebook`               | Create a new Facebook post with a message.                          |\n| `reply_to_comment`               | Reply to a specific comment on a post.                              |\n| `get_page_posts`                 | Retrieve recent posts from the Page.                                |\n| `get_post_comments`              | Fetch comments on a given post.                                     |\n| `delete_post`                    | Delete a specific post by ID.                                       |\n| `delete_comment`                 | Delete a specific comment by ID.                                    |\n| `hide_comment`                   | Hide a comment from public view.                         |\n| `unhide_comment`                 | Unhide a previously hidden comment.                      |\n| `delete_comment_from_post`       | Alias for deleting a comment from a specific post.                  |\n| `filter_negative_comments`       | Filter out comments with negative sentiment keywords.               |\n| `get_number_of_comments`         | Count the number of comments on a post.                             |\n| `get_number_of_likes`            | Count the number of likes on a post.                                |\n| `get_post_impressions`           | Get total impressions on a post.                                    |\n| `get_post_impressions_unique`    | Get number of unique users who saw the post.                        |\n| `get_post_impressions_paid`      | Get number of paid impressions on the post.                         |\n| `get_post_impressions_organic`   | Get number of organic impressions on the post.                      |\n| `get_post_engaged_users`         | Get number of users who engaged with the post.                      |\n| `get_post_clicks`                | Get number of clicks on the post.                                   |\n| `get_post_reactions_like_total`  | Get total number of 'Like' reactions.                               |\n| `get_post_top_commenters`        | Get the top commenters on a post.                                   |\n| `post_image_to_facebook`         | Post an image with a caption to the Facebook page.                  |\n| `send_dm_to_user`                | Send a direct message to a user.                                    |\n| `update_post`                    | Updates an existing post's message.                                 |\n| `schedule_post`                  | Schedule a post for future publication.                     |\n| `get_page_fan_count`             | Retrieve the total number of Page fans.                     |\n| `get_post_share_count`           | Get the number of shares on a post.                         |\n| `get_post_reactions_breakdown`   | Get all reaction counts for a post in one call.              |\n| `bulk_delete_comments`           | Delete multiple comments by ID.                              |\n| `bulk_hide_comments`             | Hide multiple comments by ID.                    |\n\n---\n\n## 🚀 Setup & Installation\n\n### 1. Clone the Repository\n\n```bash\ngit clone https://github.com/your-org/facebook-mcp-server.git\ncd facebook-mcp-server\n```\n\n### 2. 🛠️ Installation\n\nInstall dependencies using uv, a fast Python package manager:\nIf uv is not already installed, run:\n```bash\ncurl -Ls https://astral.sh/uv/install.sh | bash\n```\n\nOnce uv is installed, install the project dependencies:\n```bash\nuv pip install -r requirements.txt\n```\n\n### 3. Set Up Environment\n\nCreate a .env file in the root directory and add your Facebook Page credentials. \nYou can obtain these from  https://developers.facebook.com/tools/explorer\n\n```bash\nFACEBOOK_ACCESS_TOKEN=your_facebook_page_access_token\nFACEBOOK_PAGE_ID=your_page_id\n```\n\n## 🧩 Using with Claude Desktop\nTo set up the FacebookMCP in Clade:\n\n1.\tOpen Clade.\n2.\tGo to Settings → Developer → Edit Config.\n3.\tIn the config file that opens, add the following entry:\n\n```bash\n\"FacebookMCP\": {\n  \"command\": \"uv\",\n  \"args\": [\n    \"run\",\n    \"--with\",\n    \"mcp[cli]\",\n    \"--with\",\n    \"requests\",\n    \"mcp\",\n    \"run\",\n    \"/path/to/facebook-mcp-server/server.py\"\n  ]\n}\n```\n\n---\n\n## ✅ You’re Ready to Go!\n\nThat’s it — your Facebook MCP server is now fully configured and ready to power Claude Desktop. You can now post, moderate, and measure engagement all through natural language prompts!\n\n---\n\n## 🤝 Contributing\n\nContributions, issues, and feature requests are welcome!  \nFeel free to fork the repo and submit a pull request.\n\n- Create a branch: `git checkout -b feature/YourFeature`\n- Commit your changes: `git commit -m 'feat: add new feature'`\n- Push to the branch: `git push origin feature/YourFeature`\n- Open a pull request 🎉\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "facebook",
        "social",
        "ai",
        "integrates facebook",
        "hagaihen facebook",
        "facebook mcp"
      ],
      "category": "social-media"
    },
    "Hawstein--mcp-server-reddit": {
      "owner": "Hawstein",
      "name": "mcp-server-reddit",
      "url": "https://github.com/Hawstein/mcp-server-reddit",
      "imageUrl": "/freedevtools/mcp/pfp/Hawstein.webp",
      "description": "Enables interaction with Reddit's public API to fetch and browse content such as frontpage posts, subreddit information, and post comments.",
      "stars": 106,
      "forks": 18,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-28T06:25:19Z",
      "readme_content": "# MCP Server Reddit\n[![smithery badge](https://smithery.ai/badge/@Hawstein/mcp-server-reddit)](https://smithery.ai/server/@Hawstein/mcp-server-reddit)\n\nA Model Context Protocol server providing access to Reddit public API for LLMs. This server enables LLMs to interact with Reddit's content, including browsing frontpage posts, accessing subreddit information, and reading post comments.\n\nThis server uses [redditwarp](https://github.com/Pyprohly/redditwarp) to interact with Reddit's public API and exposes the functionality through MCP protocol.\n\n<a href=\"https://glama.ai/mcp/servers/4032xr14pu\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/4032xr14pu/badge\" alt=\"Server Reddit MCP server\" /></a>\n\n## Video Demo (Click to Watch)\n\nA demo in Clinde 👇\n\n[![MCP Server Reddit - Clinde](https://img.youtube.com/vi/1Gdx1jWFbCM/maxresdefault.jpg)](https://youtu.be/1Gdx1jWFbCM)\n\n\n## Available Tools\n\n- `get_frontpage_posts` - Get hot posts from Reddit frontpage\n  - Optional arguments:\n    - `limit` (integer): Number of posts to return (default: 10, range: 1-100)\n\n- `get_subreddit_info` - Get information about a subreddit\n  - Required arguments:\n    - `subreddit_name` (string): Name of the subreddit (e.g. 'Python', 'news')\n\n- `get_subreddit_hot_posts` - Get hot posts from a specific subreddit\n  - Required arguments:\n    - `subreddit_name` (string): Name of the subreddit (e.g. 'Python', 'news')\n  - Optional arguments:\n    - `limit` (integer): Number of posts to return (default: 10, range: 1-100)\n\n- `get_subreddit_new_posts` - Get new posts from a specific subreddit\n  - Required arguments:\n    - `subreddit_name` (string): Name of the subreddit (e.g. 'Python', 'news')\n  - Optional arguments:\n    - `limit` (integer): Number of posts to return (default: 10, range: 1-100)\n\n- `get_subreddit_top_posts` - Get top posts from a specific subreddit\n  - Required arguments:\n    - `subreddit_name` (string): Name of the subreddit (e.g. 'Python', 'news')\n  - Optional arguments:\n    - `limit` (integer): Number of posts to return (default: 10, range: 1-100)\n    - `time` (string): Time filter for top posts (default: '', options: 'hour', 'day', 'week', 'month', 'year', 'all')\n\n- `get_subreddit_rising_posts` - Get rising posts from a specific subreddit\n  - Required arguments:\n    - `subreddit_name` (string): Name of the subreddit (e.g. 'Python', 'news')\n  - Optional arguments:\n    - `limit` (integer): Number of posts to return (default: 10, range: 1-100)\n\n- `get_post_content` - Get detailed content of a specific post\n  - Required arguments:\n    - `post_id` (string): ID of the post\n  - Optional arguments:\n    - `comment_limit` (integer): Number of top-level comments to return (default: 10, range: 1-100)\n    - `comment_depth` (integer): Maximum depth of comment tree (default: 3, range: 1-10)\n\n- `get_post_comments` - Get comments from a post\n  - Required arguments:\n    - `post_id` (string): ID of the post\n  - Optional arguments:\n    - `limit` (integer): Number of comments to return (default: 10, range: 1-100)\n\n\n## Installation\n\n### Using [Clinde](https://clinde.ai/) (recommended)\n\nThe easiest way to use MCP Server Reddit is through the Clinde desktop app. Simply download and install Clinde, then:\n\n1. Open the Clinde app\n2. Navigate to the Servers page\n3. Find mcp-server-reddit and click Install\n\nThat's it! No technical knowledge required - Clinde handles all the installation and configuration for you seamlessly.\n\n### Using uv (recommended)\n\nWhen using [`uv`](https://docs.astral.sh/uv/) no specific installation is needed. We will\nuse [`uvx`](https://docs.astral.sh/uv/guides/tools/) to directly run *mcp-server-reddit*.\n\n### Using PIP\n\nAlternatively you can install `mcp-server-reddit` via pip:\n\n```bash\npip install mcp-server-reddit\n```\n\nAfter installation, you can run it as a script using:\n\n```bash\npython -m mcp_server_reddit\n```\n\n### Installing via Smithery\n\nTo install MCP Server Reddit for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@Hawstein/mcp-server-reddit):\n\n```bash\nnpx -y @smithery/cli install @Hawstein/mcp-server-reddit --client claude\n```\n\n## Configuration\n\n### Configure for Claude.app\n\nAdd to your Claude settings:\n\n<details>\n<summary>Using uvx</summary>\n\n```json\n\"mcpServers\": {\n  \"reddit\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-reddit\"]\n  }\n}\n```\n</details>\n\n<details>\n<summary>Using pip installation</summary>\n\n```json\n\"mcpServers\": {\n  \"reddit\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_reddit\"]\n  }\n}\n```\n</details>\n\n### Configure for Zed\n\nAdd to your Zed settings.json:\n\n<details>\n<summary>Using uvx</summary>\n\n```json\n\"context_servers\": [\n  \"mcp-server-reddit\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-reddit\"]\n  }\n],\n```\n</details>\n\n<details>\n<summary>Using pip installation</summary>\n\n```json\n\"context_servers\": {\n  \"mcp-server-reddit\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_reddit\"]\n  }\n},\n```\n</details>\n\n## Examples of Questions\n\n- \"What are the current hot posts on Reddit's frontpage?\" (get_frontpage_posts)\n- \"Tell me about the r/ClaudeAI subreddit\" (get_subreddit_info)\n- \"What are the hot posts in the r/ClaudeAI subreddit?\" (get_subreddit_hot_posts)\n- \"Show me the newest posts from r/ClaudeAI\" (get_subreddit_new_posts)\n- \"What are the top posts of all time in r/ClaudeAI?\" (get_subreddit_top_posts)\n- \"What posts are trending in r/ClaudeAI right now?\" (get_subreddit_rising_posts)\n- \"Get the full content and comments of this Reddit post: [post_url]\" (get_post_content)\n- \"Summarize the comments on this Reddit post: [post_url]\" (get_post_comments)\n\n## Debugging\n\nYou can use the MCP inspector to debug the server. For uvx installations:\n\n```bash\nnpx @modelcontextprotocol/inspector uvx mcp-server-reddit\n```\n\nOr if you've installed the package in a specific directory or are developing on it:\n\n```bash\ncd path/to/mcp_server_reddit\nnpx @modelcontextprotocol/inspector uv run mcp-server-reddit\n```\n\n## License\n\nmcp-server-reddit is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "reddit",
        "hawstein",
        "social media",
        "automation social",
        "social presence"
      ],
      "category": "social-media"
    },
    "Hypefury--hypefury-mcp": {
      "owner": "Hypefury",
      "name": "hypefury-mcp",
      "url": "https://github.com/Hypefury/hypefury-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Hypefury.webp",
      "description": "Authenticate with Hypefury to schedule social media posts and streamline social media management. Integrates with Hypefury's API for seamless post scheduling.",
      "stars": 1,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-15T16:23:22Z",
      "readme_content": "# Hypefury MCP Server\n\nThis project is a Model Context Protocol (MCP) server for integrating with Hypefury, a social media scheduling and growth platform. The server provides tools for authenticating with Hypefury and scheduling posts.\n\n## Features\n\n- Authentication with Hypefury API\n- Scheduling posts on social media via Hypefury\n- Deployment-ready for Smithery.ai\n- Local testing capability\n\n## Getting Started\n\n### Prerequisites\n\n- Node.js 16 or higher\n- npm or yarn\n\n### Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/eugenechabanov/hf-mcp.git\ncd hf-mcp\n\n# Install dependencies\nnpm install\n```\n\n### Environment Variables\n\nCreate a `.env` file in the root directory with the following variables:\n\n```\nHF_API_KEY=your_hypefury_api_key\n```\n\nAlternatively, when deploying to Smithery, set these as environment secrets.\n\n## Local Testing\n\nTest the MCP server locally with:\n\n```bash\n# Build and start with local testing transport\nnpm run dev:local\n```\n\nOr test with MCP Inspector:\n\n```bash\nnpx @modelcontextprotocol/inspector node build/local.js\n```\n\nThen open http://localhost:5173 in your browser to interact with the MCP server.\n\n## Deployment to Smithery\n\n1. Push this repository to GitHub\n2. Create a new server on Smithery.ai\n3. Connect to this repository\n4. Set `HF_API_KEY` as a secret\n5. Deploy\n\n## Tools\n\nThis MCP server provides the following tools:\n\n1. `auth` - Authenticate with Hypefury\n2. `schedule_post` - Schedule a post to be published via Hypefury\n\n## License\n\nMIT ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hypefury",
        "social",
        "automation",
        "automation social",
        "hypefury api",
        "schedule social"
      ],
      "category": "social-media"
    },
    "JonaFly--RednoteMCP": {
      "owner": "JonaFly",
      "name": "RednoteMCP",
      "url": "https://github.com/JonaFly/RednoteMCP",
      "imageUrl": "/freedevtools/mcp/pfp/JonaFly.webp",
      "description": "Automates login, content retrieval, and commenting on Xiaohongshu posts through keyword searches and URL-based access. Enables tailored interactions with various comment types to enhance user engagement.",
      "stars": 76,
      "forks": 17,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-30T03:15:31Z",
      "readme_content": "小红书自动评论工具（MCP Server）\n这是一款基于 Playwright 开发的小红书自动搜索和评论工具，作为 MCP Server，可通过特定配置接入 MCP Client，帮助用户自动完成登录小红书、搜索关键词、获取笔记内容及发布智能评论等操作。\n\n一、功能特点\n自动登录：支持手动扫码登录方式，首次登录成功后会保存登录状态，后续使用无需重复扫码。\n关键词搜索：能依据用户输入的关键词搜索小红书笔记，并可指定返回结果的数量。\n笔记内容获取：输入笔记的 URL，即可获取该笔记的详细内容。\n笔记评论获取：通过笔记 URL 获取相应笔记的评论信息。\n智能评论发布：支持多种评论类型，包括引流（引导用户关注或私聊）、点赞（简单互动获取好感）、咨询（以问题形式增加互动）、专业（展示专业知识建立权威），可根据需求选择发布。\n\n二、安装步骤\nPython 环境检查：确保系统已安装 Python 3.8 或更高版本。若未安装，可从 Python 官方网站下载并安装。\n项目获取：将本项目克隆或下载到本地。\n\n安装依赖：在项目目录下打开命令行，执行以下命令安装所需依赖：\npip install -r requirements.txt\n\n浏览器安装：首次运行工具时，会自动安装所需的浏览器。\n\n三、MCP Server 配置\n在 MCP Client 的配置文件中添加以下内容，将本工具配置为 MCP Server：\njson\n{\n    \"mcpServers\": {\n        \"xiaohongshu MCP\": {\n            \"command\": \"python\",\n            \"args\": [\n                \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/xiaohongshu_mcp.py\",\n                \"--stdio\"\n            ]\n        }\n    }\n}\n请根据实际情况调整args中的文件路径。\n\n四、使用方法\n（一）启动工具\n若通过 MCP Client 启动，按照 MCP Client 的操作流程进行启动。\n\n若直接运行，在项目目录下的命令行中执行：\nbash\npython main.py\n（二）主要功能操作\n登录小红书：启动工具后，若尚未登录，会打开浏览器窗口，等待用户手动扫码登录。登录成功后，工具会保存登录状态。\n搜索笔记：在代码中调用search_notes函数，示例如下：\npython\n# 搜索美食相关的笔记，返回前3条结果\nawait search_notes(\"美食\", 3)\n获取笔记内容：使用get_note_content函数获取指定 URL 的笔记内容，示例如下：\npython\n# 获取指定URL的笔记内容\nawait get_note_content(\"https://www.xiaohongshu.com/search_result/xxxx\")\n获取笔记评论：调用get_note_comments函数获取指定 URL 笔记的评论，示例如下：\npython\n# 获取指定URL的笔记评论\nawait get_note_comments(\"https://www.xiaohongshu.com/search_result/xxxx\")\n发布智能评论：利用post_smart_comment函数在指定笔记发布评论，可选择不同的评论类型，示例如下：\npython\n# 在指定笔记发布咨询类型的评论\nawait post_smart_comment(\"https://www.xiaohongshu.com/search_result/xxxx\", \"咨询\")\n评论类型参数可选值：\n\"引流\"（默认）：引导用户关注或私聊\n\"点赞\"：简单互动获取好感\n\"咨询\"：以问题形式增加互动\n\"专业\"：展示专业知识建立权威\n五、代码结构\ndocs/xiaohongshu_mcp.py：实现主要功能的核心文件，包含登录、搜索、获取内容和评论、发布评论等功能的代码逻辑。\nmain.py：示例调用脚本，用于展示如何调用xiaohongshu_mcp.py中的功能。\nrequirements.txt：记录项目所需的依赖库，通过pip install -r requirements.txt命令安装这些依赖。\n\n六、注意事项\n浏览器模式：工具使用 Playwright 的非隐藏模式运行，运行时会打开真实浏览器窗口。\n登录方式：首次登录需要手动扫码，后续使用若登录状态有效，则无需再次扫码。\n平台规则：使用过程中请严格遵守小红书平台的相关规定，避免进行过度操作，防止账号面临封禁等风险。\n功能兼容性：由于小红书平台可能会进行更新和调整，搜索结果和评论功能的可用性可能会受到影响。若出现异常，请及时关注项目更新或联系开发者。\n\n七、免责声明\n本工具仅用于学习和研究目的，使用者应严格遵守相关法律法规以及小红书平台的规定。因使用不当导致的任何问题，本项目开发者不承担任何责任。",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "automates",
        "rednotemcp",
        "automation social",
        "social media",
        "social presence"
      ],
      "category": "social-media"
    },
    "JoshMayerr--mcp-x": {
      "owner": "JoshMayerr",
      "name": "mcp-x",
      "url": "https://github.com/JoshMayerr/mcp-x",
      "imageUrl": "/freedevtools/mcp/pfp/JoshMayerr.webp",
      "description": "Access the real browser API for X/Twitter, enabling interaction with Twitter's functionalities through the Model Context Protocol.",
      "stars": 5,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-13T07:31:14Z",
      "readme_content": "# mcp-x\n\n[![PyPI - Version](https://img.shields.io/pypi/v/mcp-x.svg)](https://pypi.org/project/mcp-x)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mcp-x.svg)](https://pypi.org/project/mcp-x)\n\n-----\n\n## Table of Contents\n\n- [Installation](#installation)\n- [License](#license)\n\n## Installation\n\n```console\npip install mcp-x\n```\n\n## License\n\n`mcp-x` is distributed under the terms of the [MIT](https://spdx.org/licenses/MIT.html) license.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twitter",
        "social",
        "automation",
        "interaction twitter",
        "api twitter",
        "twitter enabling"
      ],
      "category": "social-media"
    },
    "NexusX-MCP--telegram-mcp-server": {
      "owner": "NexusX-MCP",
      "name": "telegram-mcp-server",
      "url": "https://github.com/NexusX-MCP/telegram-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/NexusX-MCP.webp",
      "description": "Interact with the Telegram Bot API to send messages and retrieve bot information. Manage updates and forward messages programmatically to enhance communication capabilities for AI assistants.",
      "stars": 3,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-23T15:38:07Z",
      "readme_content": "# Telegram MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@NexusX-MCP/telegram-mcp-server)](https://smithery.ai/server/@NexusX-MCP/telegram-mcp-server)\n\nAn MCP server implementation that provides tools for interacting with the [Telegram Bot API](https://core.telegram.org/bots/api). This service allows AI assistants to send messages and retrieve bot information programmatically.\n\n## Tools\nThe Telegram MCP Service provides the following tools for interacting with the Telegram Bot API:\n\n### get_bot_info\nRetrieves basic information about the bot.\n- No parameters required\n- Returns a User object containing bot information\n\n### send_message\nSends a message to a specified chat.\n- `chatId`: Unique identifier for the target chat (can be string or number)\n- `text`: Text of the message to be sent\n- `params` (optional): Additional parameters for the message (e.g., parse_mode, reply_markup, etc.)\n\n### get_updates\nReceives incoming updates using long polling.\n- `params` (optional): Object containing optional parameters:\n  - `offset` (optional): Identifier of the first update to be returned\n  - `limit` (optional): Limits the number of updates to be retrieved (1-100)\n  - `timeout` (optional): Timeout in seconds for long polling\n  - `allowed_updates` (optional): Array of update types to receive\n- Returns an array of Update objects containing various types of updates:\n  - Messages and edited messages\n  - Channel posts\n  - Business messages\n  - Inline queries\n  - Callback queries\n  - Shipping queries\n  - Pre-checkout queries\n  - Polls and poll answers\n  - Chat member updates\n  - Chat join requests\n  - Chat boosts\n\n### forward_message\nForwards messages of any kind. Service messages and messages with protected content can't be forwarded.\n- `chatId`: Unique identifier for the target chat or username of the target channel (in the format @channelusername)\n- `fromChatId`: Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)\n- `messageId`: Message identifier in the chat specified in from_chat_id\n- `params` (optional): Object containing optional parameters:\n  - `message_thread_id` (optional): Unique identifier for the target message thread (topic) of the forum; for forum supergroups only\n  - `video_start_timestamp` (optional): New start timestamp for the forwarded video in the message\n  - `disable_notification` (optional): Sends the message silently. Users will receive a notification with no sound.\n  - `protect_content` (optional): Protects the contents of the forwarded message from forwarding and saving\n- Returns the sent Message object on success\n\n## Configuration\n\n### Environment Variables\n\nYou need to set up the following environment variable:\n\n```\nTELEGRAM_BOT_TOKEN=your_bot_token\n```\n\nYou can get your bot token by talking to [@BotFather](https://t.me/BotFather) on Telegram and creating a new bot.\n\n#### Creating a new bot\nUse the `/newbot` command to create a new bot. `@BotFather` will ask you for a name and username, then generate an authentication token for your new bot.\n\nThe name of your bot is displayed in contact details and elsewhere.\n\nThe username is a short name, used in search, mentions and t.me links. Usernames are 5-32 characters long and not case sensitive – but may only include Latin characters, numbers, and underscores. Your bot's username must end in 'bot', like 'tetris_bot' or 'TetrisBot'.\n\nThe token is a string, like 110201543:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw, which is required to authorize the bot and send requests to the Bot API. Keep your token secure and store it safely, it can be used by anyone to control your bot.\n\nUnlike the bot's name, the username cannot be changed later – so choose it carefully.\nWhen sending a request to api.telegram.org, remember to prefix the word 'bot' to your token.\n\n## Development\n\n```bash\nnpm install\n\nnpm run build\n\nnpx @modelcontextprotocol/inspector node dist/index.js\n```\n\nOpen http://127.0.0.1:6274 to set up the environment and interact with the tools.\n\n## License\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "telegram",
        "ai",
        "social",
        "automation social",
        "bot api",
        "interact telegram"
      ],
      "category": "social-media"
    },
    "NexusX-MCP--x-v2-server": {
      "owner": "NexusX-MCP",
      "name": "x-v2-server",
      "url": "https://github.com/NexusX-MCP/x-v2-server",
      "imageUrl": "/freedevtools/mcp/pfp/NexusX-MCP.webp",
      "description": "Interact with the Twitter/X API to retrieve tweets, post new content, and manage user interactions programmatically.",
      "stars": 10,
      "forks": 7,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-30T15:17:24Z",
      "readme_content": "# X(Twitter) V2 MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@NexusX-MCP/x-v2-server)](https://smithery.ai/server/@NexusX-MCP/x-v2-server)\n\nAn MCP server implementation that provides tools for interacting with the [Twitter/X API v2](https://docs.x.com/x-api/introduction). This service allows AI assistants to retrieve tweets, post new content, reply to tweets, and quote tweets and more programmatically.\n\n## Tools\nThe X MCP Service provides the following tools for interacting with the Twitter/X API:\n\n### get_tweets_by_userid\nRetrieves tweets from a specific user's timeline.\n- `userId`: The Twitter user ID to search for tweets\n- `paginationToken` (optional): Token for fetching the next page of results\n- `exclude` (optional): Types of tweets to exclude (retweets, replies)\n- `maxResults` (optional): Maximum number of tweets to return (default: 10)\n\n### get_tweet_by_id\nRetrieves a single tweet by its ID.\n- `tweetId`: The ID of the tweet to retrieve\n\n### get_user_mentions\nRetrieves tweets that mention a specific user.\n- `userId`: The Twitter user ID to get mentions for\n- `paginationToken` (optional): Token for fetching the next page of results\n- `maxResults` (optional): Maximum number of mentions to return (default: 10)\n\n### quote_tweet\nCreates a quote tweet with custom text.\n- `tweetId`: The ID of the tweet to quote\n- `replyText`: The text to include with the quote\n\n### reply_to_tweet\nReplies to an existing tweet.\n- `tweetId`: The ID of the tweet to reply to\n- `replyText`: The text content of the reply\n\n### post_tweet\nPost a new tweet.\n- `text`: The content that you want to post.\n- `imageBase64`: Image that you want to post.\n\n### like_tweet\nLike a specific tweet.\n- `tweetId`: The ID of the tweet to like\n\n### follow_user\nFollow a Twitter user.\n- `targetUserId`: The ID of the user to follow\n\n### unfollow_user\nUnfollow a Twitter user.\n- `targetUserId`: The ID of the user to unfollow\n\n### get_user_by_username\nGet information about a Twitter user by their username.\n- `username`: The Twitter username (without @ symbol)\n\n### search_tweets\nSearch for tweets using a query string.\n- `query`: The search query\n- `maxResults` (optional): Maximum number of results to return (default: 10)\n\n### get_trending_topics\nGet trending topics for a specific location.\n- `woeid` (optional): The 'Where On Earth ID' (WOEID) for the location (1 for worldwide, default: 1)\n\n### create_list\nCreate a new Twitter list.\n- `name`: The name of the list\n- `description` (optional): Optional description for the list\n- `isPrivate` (optional): Whether the list should be private (default: false)\n\n### add_list_member\nAdd a user to a Twitter list.\n- `listId`: The ID of the list\n- `userId`: The ID of the user to add\n\n### remove_list_member\nRemove a user from a Twitter list.\n- `listId`: The ID of the list\n- `userId`: The ID of the user to remove\n\n### get_owned_lists\nGet all lists owned by the authenticated user.\n- No parameters required\n\n## Configuration\n\n## Env Configuration\n\n### X API Authentication\n\nYou can get all of the token below via [X Developer Dashboard](https://developer.x.com/en/portal/products)\n\n```\nTWITTER_API_KEY=your_api_key\nTWITTER_API_KEY_SECRET=your_api_secret\nTWITTER_ACCESS_TOKEN=your_access_token\nTWITTER_ACCESS_TOKEN_SECRET=your_access_token_secret\n```\n\n## Development\n\n```\n\nnpm i\n\nnpm run build\n\nnpx @modelcontextprotocol/inspector node dist/index.js\n\n```\n\nOpen http://127.0.0.1:6274 set up env, and interact with the tools.\n\n## License\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twitter",
        "tweets",
        "nexusx",
        "interact twitter",
        "twitter api",
        "automation social"
      ],
      "category": "social-media"
    },
    "NosytLabs--KickMCP": {
      "owner": "NosytLabs",
      "name": "KickMCP",
      "url": "https://github.com/NosytLabs/KickMCP",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Integrate with the Kick API to manage streaming operations, chat moderation, and analytics. Provides tools for content highlights and personalized notifications for improved live streaming experiences.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "nosytlabs",
        "kickmcp",
        "social",
        "nosytlabs kickmcp",
        "automation social",
        "kick api"
      ],
      "category": "social-media"
    },
    "OMAR3lwafi--YouTube-new-vercal": {
      "owner": "OMAR3lwafi",
      "name": "YouTube-new-vercal",
      "url": "https://github.com/OMAR3lwafi/YouTube-new-vercal",
      "imageUrl": "/freedevtools/mcp/pfp/OMAR3lwafi.webp",
      "description": "Enhance video streaming on YouTube with a new vertical layout for a more engaging browsing and viewing experience. The interface allows users to interact and discover content more intuitively.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-04-12T08:35:44Z",
      "readme_content": "# YouTube-new-vercal",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "youtube",
        "streaming",
        "social media",
        "omar3lwafi youtube",
        "automation social"
      ],
      "category": "social-media"
    },
    "RSS3-Network--mcp-server-rss3": {
      "owner": "RSS3-Network",
      "name": "mcp-server-rss3",
      "url": "https://github.com/RSS3-Network/mcp-server-rss3",
      "imageUrl": "/freedevtools/mcp/pfp/RSS3-Network.webp",
      "description": "Integrates with the RSS3 API to query data from decentralized chains, social media platforms, and the RSS3 network, providing real-time information on staking, nodes, and AI insights.",
      "stars": 3,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-01T13:44:19Z",
      "readme_content": "# MCP Server for RSS3\n\nAn MCP server implementation that integrates the RSS3 API. Query the Open Web like a charm.\n\n## Features\n\nAnything in <https://docs.rss3.io/guide/developer/api>.\n\nFor example,\n\n- query data on decentralized chains and platforms;\n- query data on social media platforms;\n- query data on RSS3 network (about staking, nodes, etc.);\n- query ai intels.\n- ...\n\n### Examples\n\n> What did vitalik do recently?\n\n\n\n> Tell me about recent AI intels?\n\n\n\n> show me the rss3 chip with id 2048\n\n\n\n> what is the best rss3 node to stake?\n\n\n\n## Usage\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"rss3\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-server-rss3\"\n      ]\n    }\n  }\n}\n```\n\n### Usage with Cursor\n\n1. Open Settings -> Cursor Settings\n2. Click on \"MCP\"\n3. Add new MCP Server with this:\n\n```json\n{\n  \"mcpServers\": {\n    \"rss3\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-server-rss3\"\n      ]\n    }\n  }\n}\n```\n\n### Usage with ChatWise\n\n1. Open Settings -> Tools\n2. Add new tool with this command:\n\n```\nnpx mcp-server-rss3\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "rss3",
        "social",
        "ai",
        "automation social",
        "presence rss3",
        "integrates rss3"
      ],
      "category": "social-media"
    },
    "RusianHu--weibo_hotsearch_mcp": {
      "owner": "RusianHu",
      "name": "weibo_hotsearch_mcp",
      "url": "https://github.com/RusianHu/weibo_hotsearch_mcp",
      "imageUrl": "/freedevtools/mcp/pfp/RusianHu.webp",
      "description": "Provides real-time access to the top 10 trending topics on Weibo without authentication. Integrates trending data into AI workflows for analysis of popular social media topics.",
      "stars": 1,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-02T23:02:01Z",
      "readme_content": "# 微博热搜 MCP 服务\n\n这是一个基于 [fastmcp](https://github.com/jlowin/fastmcp) 创建的微博热搜 MCP 服务，可以在 Claude 等支持 MCP 协议的 AI 助手中使用。\n\n## 功能\n\n- 获取微博热搜榜前10条内容\n- 无需提供 Cookie，使用微博移动版 API\n\n## 安装方法\n\n### 方法一：从 GitHub 安装\n\n```bash\n# 直接从 GitHub 安装\npip install git+https://github.com/RusianHu/weibo_hotsearch_mcp.git\n\n# 如果需要使用代理\npip install git+https://github.com/RusianHu/weibo_hotsearch_mcp.git --proxy socks5://127.0.0.1:10808\n```\n\n### 方法二：从源码安装\n\n```bash\n# 克隆仓库\ngit clone https://github.com/RusianHu/weibo_hotsearch_mcp.git\ncd weibo_hotsearch_mcp\n\n# 安装依赖\npip install -e .\n```\n\n### 方法三：从本地构建安装\n\n```bash\n# 构建包\npython build_package.py\n\n# 从本地安装\npip install dist/weibo_hotsearch_mcp-1.0.0-py3-none-any.whl\n```\n\n## 安装到 Claude Desktop\n\n推荐使用这种方式安装，它会创建一个隔离的环境，更加可靠：\n\n```bash\n# 安装到 Claude Desktop\nfastmcp install weibo_hotsearch_mcp.py\n```\n\n安装成功后，您可以直接在 Claude Desktop 中使用这个服务。\n\n## 在 Roo Code 插件中配置使用\n\n1. 安装 [Roo Code](https://marketplace.visualstudio.com/items?itemName=RooVeterinaryInc.roo-cline) VS Code 插件\n\n2. 打开 VS Code 设置，找到 `mcp_settings.json` 文件\n   - 路径通常为：`C:\\Users\\<用户名>\\AppData\\Roaming\\Code\\User\\globalStorage\\rooveterinaryinc.roo-cline\\settings\\mcp_settings.json`\n\n3. 在 `mcpServers` 对象中添加以下配置：\n\n```json\n\"weibo-hotsearch\": {\n  \"command\": \"python\",\n  \"args\": [\n    \"-m\", \"weibo_hotsearch_mcp\"\n  ],\n  \"alwaysAllow\": [\n    \"get_hot_search\"\n  ],\n  \"disabled\": false\n}\n```\n\n4. 保存文件后，重启 VS Code\n\n5. 现在你可以在 Claude 中使用微博热搜 MCP 服务了\n\n## 使用示例\n\n在 Claude 中，你可以这样使用微博热搜 MCP 服务：\n\n```\n请获取当前微博热搜榜的内容，并分析一下热门话题的类别分布。\n```\n\n## 开发\n\n如果你想修改或扩展这个 MCP 服务，可以按照以下步骤进行：\n\n1. 克隆仓库并安装依赖\n2. 修改 `weibo_hotsearch_mcp.py` 文件\n3. 使用 `fastmcp dev weibo_hotsearch_mcp.py` 命令测试你的修改\n4. 使用 `fastmcp install weibo_hotsearch_mcp.py` 命令安装到 Claude Desktop\n\n## 许可证\n\n[MIT](LICENSE)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "weibo_hotsearch_mcp",
        "weibo",
        "social",
        "topics weibo",
        "automation social",
        "social media"
      ],
      "category": "social-media"
    },
    "SaseQ--discord-mcp": {
      "owner": "SaseQ",
      "name": "discord-mcp",
      "url": "https://github.com/SaseQ/discord-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/SaseQ.webp",
      "description": "Integrate a Discord bot with MCP-compatible applications for enhanced functionalities and interactions. Leverage the Model Context Protocol to facilitate advanced communication and automation within Discord channels.",
      "stars": 83,
      "forks": 18,
      "license": "MIT License",
      "language": "Java",
      "updated_at": "2025-10-01T06:34:29Z",
      "readme_content": "<div align=\"center\">\n  \n</div>\n<hr>\n<div align=\"center\" style=\"line-height: 1;\">\n    <a href=\"https://github.com/modelcontextprotocol/servers\" target=\"_blank\" style=\"margin: 2px;\">\n        <img alt=\"MCP Server\" src=\"https://badge.mcpx.dev?type=server\" style=\"display: inline-block; vertical-align: middle;\"/>\n    </a>\n    <a href=\"https://smithery.ai/server/@SaseQ/discord-mcp\" target=\"_blank\" style=\"margin: 2px;\">\n        <img alt=\"Smithery Badge\" src=\"https://camo.githubusercontent.com/ee5c6c6dc502821f4d57313b2885f7878af52be14142dd98526ea12aedf9b260/68747470733a2f2f736d6974686572792e61692f62616467652f40646d6f6e74676f6d65727934302f646565707365656b2d6d63702d736572766572\" data-canonical-src=\"https://smithery.ai/server/@SaseQ/discord-mcp\" style=\"display: inline-block; vertical-align: middle;\"/>\n    </a>\n    <a href=\"https://discord.gg/5Uvxe5jteM\" target=\"_blank\" style=\"margin: 2px;\">\n        <img alt=\"Discord\" src=\"https://img.shields.io/discord/936242526120194108?color=7389D8&label&logo=discord&logoColor=ffffff\" style=\"display: inline-block; vertical-align: middle;\"/>\n    </a>\n    <a href=\"https://github.com/SaseQ/discord-mcp/blob/main/LICENSE\" target=\"_blank\" style=\"margin: 2px;\">\n        <img alt=\"MIT License\" src=\"https://img.shields.io/github/license/SaseQ/discord-mcp\" style=\"display: inline-block; vertical-align: middle;\"/>\n    </a>\n</div>\n\n\n## 📖 Description\n\nA [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) server for the Discord API [(JDA)](https://jda.wiki/), \nallowing seamless integration of Discord Bot with MCP-compatible applications like Claude Desktop.\n\nEnable your AI assistants to seamlessly interact with Discord. Manage channels, send messages, and retrieve server information effortlessly. Enhance your Discord experience with powerful automation capabilities.\n\n\n## 🔬 Installation\n\n### ► 🐳 Docker Installation (Recommended)\n> NOTE: Docker installation is required. Full instructions can be found on [docker.com](https://www.docker.com/products/docker-desktop/).\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\", \"-i\",\n        \"-e\", \"DISCORD_TOKEN=<YOUR_DISCORD_BOT_TOKEN>\",\n        \"-e\", \"DISCORD_GUILD_ID=<OPTIONAL_DEFAULT_SERVER_ID>\",\n        \"saseq/discord-mcp:latest\"\n      ]\n    }\n  }\n}\n```\n\n<details>\n    <summary style=\"font-size: 1.35em; font-weight: bold;\">\n        🔧 Manual Installation\n    </summary>\n\n#### Clone the repository\n```bash\ngit clone https://github.com/SaseQ/discord-mcp\n```\n\n#### Build the project\n> NOTE: Maven installation is required to use the mvn command. Full instructions can be found [here](https://www.baeldung.com/install-maven-on-windows-linux-mac).\n```bash\ncd discord-mcp\nmvn clean package # The jar file will be available in the /target directory\n```\n\n#### Configure AI client\nMany code editors and other AI clients use a configuration file to manage MCP servers.\n\nThe Discord MPC server can be configured by adding the following to your configuration file.\n\n> NOTE: You will need to create a Discord Bot token to use this server. Instructions on how to create a Discord Bot token can be found [here](https://discordjs.guide/preparations/setting-up-a-bot-application.html#creating-your-bot).\n```json\n{\n  \"mcpServers\": {\n    \"discord-mcp\": {\n      \"command\": \"java\",\n      \"args\": [\n        \"-jar\",\n        \"/absolute/path/to/discord-mcp-0.0.1-SNAPSHOT.jar\"\n      ],\n      \"env\": {\n        \"DISCORD_TOKEN\": \"YOUR_DISCORD_BOT_TOKEN\",\n        \"DISCORD_GUILD_ID\": \"OPTIONAL_DEFAULT_SERVER_ID\"\n      }\n    }\n  }\n}\n```\nThe `DISCORD_GUILD_ID` environment variable is optional. When provided, it sets a default Discord server ID so any tool that accepts a `guildId` parameter can omit it.\n\n</details>\n\n<details>\n    <summary style=\"font-size: 1.35em; font-weight: bold;\">\n        ⚓ Smithery Installation\n    </summary>\n\nInstall Discord MCP Server automatically via [Smithery](https://smithery.ai/):\n```bash\nnpx -y @smithery/cli@latest install @SaseQ/discord-mcp --client <CLIENT_NAME> --key <YOUR_SMITHERY_KEY>\n```\n\n</details>\n\n<details>\n    <summary style=\"font-size: 1.35em; font-weight: bold;\">\n        🖲 Cursor Installation\n    </summary>\n\nGo to: `Settings` -> `Cursor Settings` -> `MCP` -> `Add new global MCP server`\n\nPasting the following configuration into your Cursor `~/.cursor/mcp.json` file is the recommended approach. You may also install in a specific project by creating `.cursor/mcp.json` in your project folder. See [Cursor MCP docs](https://docs.cursor.com/context/model-context-protocol) for more info.\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\", \"-i\",\n        \"-e\", \"DISCORD_TOKEN=<YOUR_DISCORD_BOT_TOKEN>\",\n        \"-e\", \"DISCORD_GUILD_ID=<OPTIONAL_DEFAULT_SERVER_ID>\",\n        \"saseq/discord-mcp:latest\"\n      ]\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n    <summary style=\"font-size: 1.35em; font-weight: bold;\">\n        ⌨️ Claude Code Installation\n    </summary>\n\nRun this command. See [Claude Code MCP docs](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/tutorials#set-up-model-context-protocol-mcp) for more info.\n```bash\nclaude mcp add mcp-server -- docker run --rm -i -e DISCORD_TOKEN=<YOUR_DISCORD_BOT_TOKEN> -e DISCORD_GUILD_ID=<OPTIONAL_DEFAULT_SERVER_ID> saseq/discord-mcp:latest\n```\n\n</details>\n\n## 🛠️ Available Tools\n\n#### Server Information\n - [`get_server_info`](): Get detailed discord server information\n\n#### User Management\n- [`get_user_id_by_name`](): Get a Discord user's ID by username in a guild for ping usage `<@id>`\n- [`send_private_message`](): Send a private message to a specific user\n- [`edit_private_message`](): Edit a private message from a specific user\n- [`delete_private_message`](): Delete a private message from a specific user\n- [`read_private_messages`](): Read recent message history from a specific user\n\n#### Message Management\n - [`send_message`](): Send a message to a specific channel\n - [`edit_message`](): Edit a message from a specific channel\n - [`delete_message`](): Delete a message from a specific channel\n - [`read_messages`](): Read recent message history from a specific channel\n - [`add_reaction`](): Add a reaction (emoji) to a specific message\n - [`remove_reaction`](): Remove a specified reaction (emoji) from a message\n\n#### Channel Management\n - [`create_text_channel`](): Create text a channel\n - [`delete_channel`](): Delete a channel\n - [`find_channel`](): Find a channel type and ID using name and server ID\n - [`list_channels`](): List of all channels\n\n#### Category Management\n - [`create_category`](): Create a new category for channels\n - [`delete_category`](): Delete a category\n - [`find_category`](): Find a category ID using name and server ID\n - [`list_channels_in_category`](): List of channels in a specific category\n\n#### Webhook Management\n - [`create_webhook`](): Create a new webhook on a specific channel\n - [`delete_webhook`](): Delete a webhook\n - [`list_webhooks`](): List of webhooks on a specific channel\n - [`send_webhook_message`](): Send a message via webhook\n\n>If `DISCORD_GUILD_ID` is set, the `guildId` parameter becomes optional for all tools above.\n\n<hr>\n\nA more detailed examples can be found in the [Wiki](https://github.com/SaseQ/discord-mcp/wiki).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "discord",
        "automation",
        "ai",
        "automation discord",
        "discord bot",
        "integrate discord"
      ],
      "category": "social-media"
    },
    "Seym0n--tiktok-mcp": {
      "owner": "Seym0n",
      "name": "tiktok-mcp",
      "url": "https://github.com/Seym0n/tiktok-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Seym0n.webp",
      "description": "Integrates TikTok access to analyze videos for virality factors, retrieve content, and facilitate interactions with TikTok videos through a seamless application interface.",
      "stars": 105,
      "forks": 16,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-29T20:48:21Z",
      "readme_content": "# <img alt=\"tiktok_icon_2\" src=\"https://cdn.worldvectorlogo.com/logos/tiktok-icon-2.svg\" height=\"32\"> TikTok MCP\n\n![image (12)](https://github.com/user-attachments/assets/006f9983-b9dd-447c-87c6-ee27a414fd4c)\n\n\nThe TikTok MCP integrates TikTok access into Claude AI and other apps via TikNeuron. This TikTok MCP allows you to\n- analyze TikTok videos to determine virality factors\n- get content from TikTok videos\n- chat with TikTok videos\n\n## Available Tools\n\n### tiktok_get_subtitle\n\n**Description:**  \nGet the subtitle (content) for a TikTok video url. This is used for getting the subtitle, content or context for a TikTok video. If no language code is provided, the tool will return the subtitle of automatic speech recognition.\n\n**Input Parameters:**\n- `tiktok_url` (required): TikTok video URL, e.g., https://www.tiktok.com/@username/video/1234567890 or https://vm.tiktok.com/1234567890\n- `language_code` (optional): Language code for the subtitle, e.g., en for English, es for Spanish, fr for French, etc.\n\n### tiktok_get_post_details\n\n**Description:**  \nGet the details of a TikTok post. Returns the details of the video like:\n- Description\n- Video ID\n- Creator username\n- Hashtags\n- Number of likes, shares, comments, views and bookmarks\n- Date of creation\n- Duration of the video\n- Available subtitles with language and source information\n\n**Input Parameters:**\n- `tiktok_url` (required): TikTok video URL, e.g., https://www.tiktok.com/@username/video/1234567890 or https://vm.tiktok.com/1234567890, or just the video ID like 7409731702890827041\n\n### tiktok_search\n\n**Description:**  \nSearch for TikTok videos based on a query. Returns a list of videos matching the search criteria with their details including description, video ID, creator, hashtags, engagement metrics, date of creation, duration and available subtitles, plus pagination metadata for continuing the search.\n\n**Input Parameters:**\n- `query` (required): Search query for TikTok videos, e.g., 'funny cats', 'dance', 'cooking tutorial'\n- `cursor` (optional): Pagination cursor for getting more results\n- `search_uid` (optional): Search session identifier for pagination\n\n## Requirements\n\nFor this TikTok MCP, you need\n- NodeJS v18 or higher (https://nodejs.org/)\n- Git (https://git-scm.com/)\n- TikNeuron Account and MCP API Key (https://tikneuron.com/tools/tiktok-mcp)\n\n## Setup\n\n1. Clone the repository\n```\ngit clone https://github.com/Seym0n/tiktok-mcp.git\n```\n\n2. Install dependencies\n```\nnpm install\n```\n\n3. Build project\n```\nnpm run build\n```\n\nThis creates the file `build\\index.js`\n\n## Using in Claude AI\n\nAdd the following entry to `mcpServers`:\n\n```\n\"tiktok-mcp\": {\n    \"command\": \"node\",\n    \"args\": [\n      \"path\\\\build\\\\index.js\"\n    ],\n    \"env\": {\n      \"TIKNEURON_MCP_API_KEY\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n    }\n}\n```\n\nand replace path with the `path` to TikTok MCP and `XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX` with TIkNeuron API Key\n\nso that `mcpServers` will look like this:\n\n```\n{\n  \"mcpServers\": {\n    \"tiktok-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"path\\\\build\\\\index.js\"\n      ],\n      \"env\": {\n        \"TIKNEURON_MCP_API_KEY\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n      }\n    }\n  }\n}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tiktok",
        "social",
        "ai",
        "interactions tiktok",
        "integrates tiktok",
        "tiktok videos"
      ],
      "category": "social-media"
    },
    "The-Focus-AI--mastodon-mcp": {
      "owner": "The-Focus-AI",
      "name": "mastodon-mcp",
      "url": "https://github.com/The-Focus-AI/mastodon-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/The-Focus-AI.webp",
      "description": "Create and manage toots on Mastodon with customizable options and media attachments. Secure credential management and easy interaction with the Mastodon API facilitate enhanced social media integration.",
      "stars": 4,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-07T07:39:05Z",
      "readme_content": "# Mastodon MCP\n\nA [Model Context Protocol](https://github.com/thefocus/modelcontextprotocol) server that provides tools for interacting with Mastodon. Currently supports creating toots with optional media attachments.\n\n## Features\n\n- Create toots with customizable visibility and content warnings\n- Upload and attach media files (images, videos, audio)\n- Add alt text/descriptions to media attachments\n- Schedule toots for a future time\n- Secure credential management using environment variables or 1Password CLI\n\n## Prerequisites\n\n- Node.js 18+\n- pnpm\n- A Mastodon account and API access token\n- Optionally, 1Password CLI (`op`) installed and configured if using 1Password for credential management.\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone [repository-url]\ncd mastodon-mcp\n\n# Install dependencies\npnpm install\n\n# Build the project\npnpm build\n```\n\n## Configuration\n\nThe tool requires a Mastodon API token. You can provide this token in one of the following ways:\n\n1.  **Environment Variable (Recommended for simplicity)**:\n    Set the `MASTODON_ACCESS_TOKEN` environment variable:\n    ```bash\n    export MASTODON_ACCESS_TOKEN=\"your_mastodon_api_token\"\n    ```\n2.  **1Password**: Store your token at:\n    - `op://Personal/Floss.Social Key/notesPlain`\n\nYou can optionally set the Mastodon instance URL via environment variable:\n\n```bash\nexport MASTODON_INSTANCE_URL=\"https://your.instance.social\"\n```\n\nIf not set, it defaults to `https://floss.social`.\n\n## Usage\n\nStart the MCP server:\n\n```bash\npnpm start\n```\n\nThe server exposes a single tool `mastodon_create_toot` with the following parameters:\n\n- `content` (required): The text content of your toot\n- `visibility`: One of \"public\", \"unlisted\", \"private\", or \"direct\" (default: \"public\")\n- `sensitive`: Boolean flag for sensitive content (default: false)\n- `spoiler_text`: Warning text shown before the content (default: \"\")\n- `media_file`: Path to a media file to attach\n- `media_description`: Alt text/description for the attached media\n- `scheduled_at`: Optional ISO 8601 datetime to schedule the toot for a future time (e.g., \"2024-07-04T10:00:00-07:00\")\n\n### Example Usage with MCP Inspector\n\n1. Start the inspector:\n\n```bash\nnpx @modelcontextprotocol/inspector node dist/mcp-server.js\n```\n\n2. Open http://localhost:5173 in your browser\n\n3. Use the tool with parameters like:\n\n```json\n{\n  \"content\": \"Hello from MCP!\",\n  \"visibility\": \"public\",\n  \"media_file\": \"/path/to/image.jpg\",\n  \"media_description\": \"A beautiful sunset\",\n  \"scheduled_at\": \"2025-01-01T12:00:00Z\"\n}\n```\n\n## Development\n\n```bash\n# Run in development mode with auto-reloading\npnpm dev\n\n# Build the project\npnpm build\n\n# Run the built server\npnpm start\n```\n\n## Security\n\n- No credentials are hardcoded in the codebase\n- API tokens can be securely managed via environment variables or retrieved from 1Password.\n- API responses are git-ignored to prevent accidental credential leaks\n\n## License\n\nISC\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "automation",
        "ai",
        "automation social",
        "social media",
        "integration social"
      ],
      "category": "social-media"
    },
    "Xiaoxinkeji--XBotV2": {
      "owner": "Xiaoxinkeji",
      "name": "XBotV2",
      "url": "https://github.com/Xiaoxinkeji/XBotV2",
      "imageUrl": "/freedevtools/mcp/pfp/Xiaoxinkeji.webp",
      "description": "A comprehensive WeChat bot framework that supports various interactive features and game functionalities, equipped with a plugin system for customization and a web management interface for user oversight. It facilitates efficient message forwarding and processing with easy deployment using Docker.",
      "stars": 1,
      "forks": 0,
      "license": "GNU General Public License v3.0",
      "language": "Python",
      "updated_at": "2025-03-30T04:55:02Z",
      "readme_content": "# 🤖 XYBot V2\n\nXYBot V2 是一个功能丰富的微信机器人框架,支持多种互动功能和游戏玩法。\n\n# 免责声明\n\n- 这个项目免费开源，不存在收费。\n- 本工具仅供学习和技术研究使用，不得用于任何商业或非法行为。\n- 本工具的作者不对本工具的安全性、完整性、可靠性、有效性、正确性或适用性做任何明示或暗示的保证，也不对本工具的使用或滥用造成的任何直接或间接的损失、责任、索赔、要求或诉讼承担任何责任。\n- 本工具的作者保留随时修改、更新、删除或终止本工具的权利，无需事先通知或承担任何义务。\n- 本工具的使用者应遵守相关法律法规，尊重微信的版权和隐私，不得侵犯微信或其他第三方的合法权益，不得从事任何违法或不道德的行为。\n- 本工具的使用者在下载、安装、运行或使用本工具时，即表示已阅读并同意本免责声明。如有异议，请立即停止使用本工具，并删除所有相关文件。\n\n# 公告\n\n## 项目还在开发中，有些commit有bug，更新叠代会非常迅速。如果你部署好的能用，在正式发布前，可以不用更新了。\n\n## 统一回复ISSUE内的问题：我敢承诺项目内不会有任何形式的后门程序、病毒程序、木马程序，最多只有一个防滥用倒卖的框架检测。\n\n# 📄 文档\n\n## https://henryxiaoyang.github.io/XYBotV2\n\n# 💬 微信交流群\n\n<div style=\"text-align: center\" align=\"center\">\n    <img alt=\"微信交流群二维码\" src=\"https://qrcode.yangres.com/get_image\" style=\"width: 300px; height: auto;\">\n    <p>微信扫码加入交流群</p>\n    <a href=\"https://qrcode.yangres.com/get_image\">🔗图片会被缓存，点我查看最新二维码</a>\n</div>\n\n# 🙏 赞助\n\n<div style=\"text-align: center\" align=\"center\">\n    <h2>开源不易，请作者喝杯奶茶吧🙏</h2>\n    \n    \n</div>\n\n# ✨ 主要功能\n\n## 🛠️ 基础功能\n\n- 🤖 AI聊天 - 支持文字、图片、语音等多模态交互\n- 📰 每日新闻 - 自动推送每日新闻\n- 🎵 点歌系统 - 支持在线点歌\n- 🌤️ 天气查询 - 查询全国各地天气\n- 🎮 游戏功能 - 五子棋、战争雷霆玩家查询等\n\n## 💎 积分系统\n\n- 📝 每日签到 - 支持连续签到奖励\n- 🎲 抽奖系统 - 多种抽奖玩法\n- 🧧 红包系统 - 群内发积分红包\n- 💰 积分交易 - 用户间积分转账\n- 📊 积分排行 - 查看积分排名\n\n## 👮 管理功能\n\n- ⚙️ 插件管理 - 动态加载/卸载插件\n- 👥 白名单管理 - 控制机器人使用权限\n- 📊 积分管理 - 管理员可调整用户积分\n- 🔄 签到重置 - 重置所有用户签到状态\n\n# 🔌 插件系统\n\nXYBot V2 采用插件化设计,所有功能都以插件形式实现。主要插件包括:\n\n- 👨‍💼 AdminPoint - 积分管理\n- 🔄 AdminSignInReset - 签到重置\n- 🛡️ AdminWhitelist - 白名单管理\n- 🤖 Ai - AI聊天\n- 📊 BotStatus - 机器人状态\n- 📱 GetContact - 获取通讯录\n- 🌤️ GetWeather - 天气查询\n- 🎮 Gomoku - 五子棋游戏\n- 🌅 GoodMorning - 早安问候\n- 📈 Leaderboard - 积分排行\n- 🎲 LuckyDraw - 幸运抽奖\n- 📋 Menu - 菜单系统\n- 🎵 Music - 点歌系统\n- 📰 News - 新闻推送\n- 💱 PointTrade - 积分交易\n- 💰 QueryPoint - 积分查询\n- 🎯 RandomMember - 随机群成员\n- 🖼️ RandomPicture - 随机图片\n- 🧧 RedPacket - 红包系统\n- ✍️ SignIn - 每日签到\n- ✈️ Warthunder - 战争雷霆查询\n\n# 🚀 部署说明\n\n## 💻 Python部署\n\n### 🪟 Windows部署\n\n#### 1. 环境准备\n\n- 安装 Python 3.11: https://www.python.org/downloads/release/python-3119/\n- 安装 ffmpeg: 从[ffmpeg官网](https://www.ffmpeg.org/download.html)下载并添加到环境变量\n- 安装 Redis: 从[Redis](https://github.com/tporadowski/redis/releases/tag/v5.0.14.1)下载并启动服务\n\n#### 2. 安装项目\n\n```bash\ngit clone https://github.com/HenryXiaoYang/XYBotV2.git\ncd XYBotV2\npython -m venv venv\n.\\venv\\Scripts\\activate\npip install -r requirements.txt\n```\n\n#### 3. 启动机器人\n\n```bash\nstart redis-server\npython app.py\n```\n\n### 🐧 Linux部署\n\n#### 1. 环境准备\n\n```bash\nsudo apt update\nsudo apt install python3.11 python3.11-venv redis-server ffmpeg\nsudo systemctl start redis\nsudo systemctl enable redis\n```\n\n#### 2. 安装项目\n\n```bash\ngit clone https://github.com/HenryXiaoYang/XYBotV2.git\ncd XYBotV2\npython3.11 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\n#### 3. 启动机器人\n\n```bash\npython app.py\n```\n\n### 🌌 无WebUI简单启动\n\n如果你不需要WebUI界面，可以直接使用bot.py：\n\n```bash\npython bot.py\n```\n\n## ⚙️ 配置说明\n\n- 主配置: main_config.toml\n- 插件配置: plugins/all_in_one_config.toml\n\n这几个插件需要配置API密钥:\n- 🤖 Ai\n- 🌤️ GetWeather\n\n## ❓ 常见问题\n\n1. 与网络相关的报错\n   - 检查网络连接\n   - 关闭代理软件\n   - 重启XYBot和Redis\n\n2. `正在运行`相关的报错\n   - 将占用9000端口的进程结束\n\n3. 无法访问Web界面\n   - 确保9999端口已开放\n   - 配置防火墙允许9999端口\n\n# 💻 代码提交\n\n提交代码时请使用 `feat: something` 作为说明，支持的标识如下:\n\n- `feat` 新功能(feature)\n- `fix` 修复bug\n- `docs` 文档(documentation)\n- `style` 格式(不影响代码运行的变动)\n- `ref` 重构(即不是新增功能，也不是修改bug的代码变动)\n- `perf` 性能优化(performance)\n- `test` 增加测试\n- `chore` 构建过程或辅助工具的变动\n- `revert` 撤销",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "bot",
        "xbotv2",
        "wechat",
        "bot framework",
        "wechat bot",
        "automation social"
      ],
      "category": "social-media"
    },
    "Zo-Valentine--mcp-twikit": {
      "owner": "Zo-Valentine",
      "name": "mcp-twikit",
      "url": "https://github.com/Zo-Valentine/mcp-twikit",
      "imageUrl": "/freedevtools/mcp/pfp/Zo-Valentine.webp",
      "description": "Interact with Twitter to analyze sentiments and retrieve tweets from timelines, providing insights into public opinion and updates on trending topics.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-03-08T00:09:33Z",
      "readme_content": "# MCP-Twikit\n\n[![smithery badge](https://smithery.ai/badge/mcp-twikit)](https://smithery.ai/server/mcp-twikit)\nA Model Context Protocol (MCP) server for interacting with Twitter.\n\n<a href=\"https://glama.ai/mcp/servers/49i9dd08w8\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/49i9dd08w8/badge\" alt=\"mcp-twikit MCP server\" /></a>\n\n## Installation\n\n### Installing via Smithery\n\nTo install Twikit Twitter Search for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-twikit):\n\n```bash\nnpx -y @smithery/cli install mcp-twikit --client claude\n```\n\n### Manual Installation\n```json\n{\n    \"mcpServer\": {\n        \"command\": \"uvx\",\n        \"args\": [\"--from\", \"git+https://github.com/adhikasp/mcp-twikit\", \"mcp-twikit\"],\n        \"env\": {\n            \"TWITTER_USERNAME\": \"@example\",\n            \"TWITTER_EMAIL\": \"me@example.com\",\n            \"TWITTER_PASSWORD\": \"secret\",\n        }\n    }\n}\n```\n\n## Example usage\n\nUsing [mcp-client-cli](https://github.com/adhikasp/mcp-client-cli)\n\n\n### Comparing sentiments across different twitter accounts\n\n```\n$ llm compare 20 latest tweet directed @IndiHomeCare, @di_cbn, @BiznetHome, @ID_MyRepublic. What are people sentiment to the product? Do 1 search for each account\n\nI'll help you analyze the latest tweets for these internet service providers in Indonesia to understand the public sentiment. I'll use the search_twitter function for each account.\n\nTool Calls:\n  search_twitter\n  Args:\n    query: to:IndiHomeCare\n    count: 20\n    sort_by: Latest\n\nTool Calls:\n  search_twitter\n  Args:\n    query: to:di_cbn\n    count: 20\n    sort_by: Latest\n\nTool Calls:\n  search_twitter\n  Args:\n    query: to:BiznetHome\n    count: 20\n    sort_by: Latest\n\nTool Calls:\n  search_twitter\n  Args:\n    query: to:ID_MyRepublic\n    count: 20\n    sort_by: Latest\n\nSentiment Analysis Summary:\n\n1. IndiHomeCare:\n- Predominantly Negative Sentiment\n- Key Issues:\n  - Unstable internet connection\n  - Slow response times\n  - Intermittent service disruptions\n  - Long waiting times for customer support\n- Specific Complaints:\n  - Network instability\n  - Lagging internet\n  - Unresolved technical issues\n  - Lack of timely communication\n\n2. CBN (di_cbn):\n- Mostly Negative Sentiment\n- Key Issues:\n  - Prolonged internet outages (some reporting 1-2 days of no service)\n  - Slow customer support response\n  - Lack of clear communication about service disruptions\n- Specific Complaints:\n  - LOS (Line of Sight) issues\n  - No timely resolution of technical problems\n  - Delayed email and support responses\n\n3. BiznetHome:\n- Strongly Negative Sentiment\n- Key Issues:\n  - Frequent network interruptions\n  - Slow internet speeds\n  - Poor customer support responsiveness\n- Specific Complaints:\n  - Packet loss\n  - Inconsistent connection\n  - Long download times\n  - Unresolved technical issues\n\n4. MyRepublic (ID_MyRepublic):\n- Extremely Negative Sentiment\n- Key Issues:\n  - Severe and prolonged service disruptions\n  - Complete internet outages\n  - Inability to access online services and games\n  - Extremely poor customer support\n- Specific Complaints:\n  - Multi-day service interruptions\n  - Inability to access websites and online games\n  - Missed technician appointments\n  - Lack of compensation or clear communication\n\nOverall Sentiment Ranking (from Bad to Worst):\n1. IndiHomeCare (Bad)\n2. CBN (Worse)\n3. BiznetHome (Very Bad)\n4. MyRepublic (Extremely Bad)\n\nCommon Themes Across Providers:\n- Poor network stability\n- Slow customer support response\n- Lack of transparent communication\n- Prolonged service interruptions\n- Unresolved technical issues\n\nRecommendation: These Indonesian internet service providers are experiencing significant customer satisfaction issues. Customers are frustrated with unreliable services, poor technical support, and lack of timely problem resolution.\n```\n\n### Getting tweets from your home timeline\n\n```\n$ llm what is happening on my twitter timeline?\n\nI'll help you check your Twitter timeline. I'll retrieve the latest tweets from your timeline:\n\nTool Calls:\n  get_timeline\n  Args:\n\nI'll summarize the key highlights from your Twitter timeline:\n\n1. Professional/Tech Highlights:\n- @ibamarief is preparing to onboard their first intern, noting it's a significant responsibility\n- @papanberjalan shared a critique about web developers not understanding computer performance\n- @pathofexile is running a Twitch Drops promotion for their game\n\n2. Notable Tweets:\n- @elonmusk posted a cryptic \"Hmm\"\n- @realDonaldTrump discussed eliminating Daylight Saving Time\n- @blinkist shared an article about billionaires reading up to 50 books per year\n\n3. Miscellaneous Interesting Tweets:\n- @nealtaparia shared a thread about 11 companies built around a single product\n- @Rixhabh__ posted about creative and iconic ads\n- Several tweets in Indonesian covering various topics from personal stories to social issues\n\nWould you like me to elaborate on any of these tweets or provide more context about any specific post?\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twitter",
        "tweets",
        "social",
        "interact twitter",
        "automation social",
        "twitter analyze"
      ],
      "category": "social-media"
    },
    "ZubeidHendricks--youtube-mcp-server": {
      "owner": "ZubeidHendricks",
      "name": "youtube-mcp-server",
      "url": "https://github.com/ZubeidHendricks/youtube-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/ZubeidHendricks.webp",
      "description": "Interacts with YouTube content by retrieving video details, managing channels, and accessing transcripts through a standardized interface. Allows for video statistics, channel management, and playlist details.",
      "stars": 356,
      "forks": 62,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T17:09:26Z",
      "readme_content": "# YouTube MCP Server\n[![smithery badge](https://smithery.ai/badge/@ZubeidHendricks/youtube)](https://smithery.ai/server/@ZubeidHendricks/youtube)\n\nA Model Context Protocol (MCP) server implementation for YouTube, enabling AI language models to interact with YouTube content through a standardized interface.\n\n## Features\n\n### Video Information\n* Get video details (title, description, duration, etc.)\n* List channel videos\n* Get video statistics (views, likes, comments)\n* Search videos across YouTube\n\n### Transcript Management\n* Retrieve video transcripts\n* Support for multiple languages\n* Get timestamped captions\n* Search within transcripts\n\n### Channel Management\n* Get channel details\n* List channel playlists\n* Get channel statistics\n* Search within channel content\n\n### Playlist Management\n* List playlist items\n* Get playlist details\n* Search within playlists\n* Get playlist video transcripts\n\n## Installation\n\n### Quick Setup for Claude Desktop\n\n1. Install the package:\n```bash\nnpm install -g zubeid-youtube-mcp-server\n```\n\n2. Add to your Claude Desktop configuration (`~/Library/Application Support/Claude/claude_desktop_config.json` on macOS or `%APPDATA%\\Claude\\claude_desktop_config.json` on Windows):\n\n```json\n{\n  \"mcpServers\": {\n    \"zubeid-youtube-mcp-server\": {\n      \"command\": \"zubeid-youtube-mcp-server\",\n      \"env\": {\n        \"YOUTUBE_API_KEY\": \"your_youtube_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n### Alternative: Using NPX (No Installation Required)\n\nAdd this to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"youtube\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"zubeid-youtube-mcp-server\"],\n      \"env\": {\n        \"YOUTUBE_API_KEY\": \"your_youtube_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n### Installing via Smithery\n\nTo install YouTube MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@ZubeidHendricks/youtube):\n\n```bash\nnpx -y @smithery/cli install @ZubeidHendricks/youtube --client claude\n```\n\n## Configuration\nSet the following environment variables:\n* `YOUTUBE_API_KEY`: Your YouTube Data API key (required)\n* `YOUTUBE_TRANSCRIPT_LANG`: Default language for transcripts (optional, defaults to 'en')\n### Using with VS Code\n\nFor one-click installation, click one of the install buttons below:\n\n[![Install with NPX in VS Code](https://img.shields.io/badge/VS_Code-NPM-0098FF?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=youtube&config=%7B%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22zubeid-youtube-mcp-server%22%5D%2C%22env%22%3A%7B%22YOUTUBE_API_KEY%22%3A%22%24%7Binput%3AapiKey%7D%22%7D%7D&inputs=%5B%7B%22type%22%3A%22promptString%22%2C%22id%22%3A%22apiKey%22%2C%22description%22%3A%22YouTube+API+Key%22%2C%22password%22%3Atrue%7D%5D) [![Install with NPX in VS Code Insiders](https://img.shields.io/badge/VS_Code_Insiders-NPM-24bfa5?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=youtube&config=%7B%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22zubeid-youtube-mcp-server%22%5D%2C%22env%22%3A%7B%22YOUTUBE_API_KEY%22%3A%22%24%7Binput%3AapiKey%7D%22%7D%7D&inputs=%5B%7B%22type%22%3A%22promptString%22%2C%22id%22%3A%22apiKey%22%2C%22description%22%3A%22YouTube+API+Key%22%2C%22password%22%3Atrue%7D%5D&quality=insiders)\n\n### Manual Installation\n\nIf you prefer manual installation, first check the install buttons at the top of this section. Otherwise, follow these steps:\n\nAdd the following JSON block to your User Settings (JSON) file in VS Code. You can do this by pressing `Ctrl + Shift + P` and typing `Preferences: Open User Settings (JSON)`.\n\n```json\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"apiKey\",\n        \"description\": \"YouTube API Key\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"youtube\": {\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"zubeid-youtube-mcp-server\"],\n        \"env\": {\n          \"YOUTUBE_API_KEY\": \"${input:apiKey}\"\n        }\n      }\n    }\n  }\n}\n```\n\nOptionally, you can add it to a file called `.vscode/mcp.json` in your workspace:\n\n```json\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"apiKey\",\n      \"description\": \"YouTube API Key\",\n      \"password\": true\n    }\n  ],\n  \"servers\": {\n    \"youtube\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"zubeid-youtube-mcp-server\"],\n      \"env\": {\n        \"YOUTUBE_API_KEY\": \"${input:apiKey}\"\n      }\n    }\n  }\n}\n```\n## YouTube API Setup\n1. Go to Google Cloud Console\n2. Create a new project or select an existing one\n3. Enable the YouTube Data API v3\n4. Create API credentials (API key)\n5. Copy the API key for configuration\n\n## Examples\n\n### Managing Videos\n\n```javascript\n// Get video details\nconst video = await youtube.videos.getVideo({\n  videoId: \"video-id\"\n});\n\n// Get video transcript\nconst transcript = await youtube.transcripts.getTranscript({\n  videoId: \"video-id\",\n  language: \"en\"\n});\n\n// Search videos\nconst searchResults = await youtube.videos.searchVideos({\n  query: \"search term\",\n  maxResults: 10\n});\n```\n\n### Managing Channels\n\n```javascript\n// Get channel details\nconst channel = await youtube.channels.getChannel({\n  channelId: \"channel-id\"\n});\n\n// List channel videos\nconst videos = await youtube.channels.listVideos({\n  channelId: \"channel-id\",\n  maxResults: 50\n});\n```\n\n### Managing Playlists\n\n```javascript\n// Get playlist items\nconst playlistItems = await youtube.playlists.getPlaylistItems({\n  playlistId: \"playlist-id\",\n  maxResults: 50\n});\n\n// Get playlist details\nconst playlist = await youtube.playlists.getPlaylist({\n  playlistId: \"playlist-id\"\n});\n```\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Run tests\nnpm test\n\n# Build\nnpm run build\n\n# Lint\nnpm run lint\n```\n\n## Contributing\nSee CONTRIBUTING.md for information about contributing to this repository.\n\n## License\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "youtube",
        "content",
        "interacts youtube",
        "social media",
        "automation social"
      ],
      "category": "social-media"
    },
    "alifakih1--discord-mcp": {
      "owner": "alifakih1",
      "name": "discord-mcp",
      "url": "https://github.com/alifakih1/discord-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/alifakih1.webp",
      "description": "Integrate Discord bot functionalities with MCP-compatible applications to manage servers, channels, messages, reactions, categories, and webhooks. Utilize the Discord API capabilities in a standardized way to enhance application interactions.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-04-24T07:57:11Z",
      "readme_content": "<div align=\"center\">\n  \n</div>\n<hr>\n<div align=\"center\" style=\"line-height: 1;\">\n    <a href=\"https://smithery.ai/server/@SaseQ/discord-mcp\" target=\"_blank\" style=\"margin: 2px;\">\n        <img alt=\"Smithery Badge\" src=\"https://camo.githubusercontent.com/ee5c6c6dc502821f4d57313b2885f7878af52be14142dd98526ea12aedf9b260/68747470733a2f2f736d6974686572792e61692f62616467652f40646d6f6e74676f6d65727934302f646565707365656b2d6d63702d736572766572\" data-canonical-src=\"https://smithery.ai/server/@SaseQ/discord-mcp\" style=\"display: inline-block; vertical-align: middle;\"/>\n    </a>\n    <a href=\"https://badge.mcpx.dev?type=server\" target=\"_blank\" style=\"margin: 2px;\">\n        <img alt=\"MCP Server\" src=\"https://badge.mcpx.dev?type=server\" style=\"display: inline-block; vertical-align: middle;\"/>\n    </a>\n    <a href=\"https://discord.gg/5Uvxe5jteM\" target=\"_blank\" style=\"margin: 2px;\">\n        <img alt=\"Discord\" src=\"https://img.shields.io/badge/Discord-SaseQcode-7289da?logo=discord&logoColor=white&color=7289da\" style=\"display: inline-block; vertical-align: middle;\"/>\n    </a>\n</div>\n\n\n## 📖 Description\n\nA [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) server for the Discord API [(JDA)](https://jda.wiki/), \nallowing seamless integration of Discord Bot with MCP-compatible applications like Claude Desktop.\n\n\n## 🔬 Installation\n\n#### Clone the repository\n```\ngit clone https://github.com/SaseQ/discord-mcp\n```\n\n#### Build the project\n```\ncd discord-mcp\nmvn clean package\n```\n\n#### Configure Claude Desktop\n```\n{\n  \"mcpServers\": {\n    \"discord-mcp\": {\n      \"command\": \"java\",\n      \"args\": [\n        \"-jar\",\n        \"/absolute/path/to/discord-mcp-0.0.1-SNAPSHOT.jar\"\n      ],\n      \"env\": {\n        \"DISCORD_TOKEN\": \"YOUR_DISCORD_BOT_TOKEN\"\n      }\n    }\n  }\n}\n```\n\n*To get a discord bot token, visit the [Discord Developer Portal](https://discord.com/developers)\n\n\n## ⚓ Smithery\n\nInstall Discord MCP Server automatically via Smithery:\n```\nnpx -y @smithery/cli@latest install @SaseQ/discord-mcp --client claude\n```\n\n\n## 🛠️ Available Tools\n\n#### Server Information\n - [`get_server_info`](): Get detailed discord server information\n\n#### Message Management\n - [`send_message`](): Send a message to a specific channel\n - [`edit_message`](): Edit a message from a specific channel\n - [`delete_message`](): Delete a message from a specific channel\n - [`read_messages`](): Read recent message history from a specific channel\n - [`send_private_message`](): Send a private message to a specific user\n - [`edit_private_message`](): Edit a private message from a specific user\n - [`delete_private_message`](): Delete a private message from a specific user\n - [`read_private_messages`](): Read recent message history from a specific user\n - [`add_reaction`](): Add a reaction (emoji) to a specific message\n - [`remove_reaction`](): Remove a specified reaction (emoji) from a message\n\n#### Channel Management\n - [`delete_channel`](): Delete a channel\n - [`find_channel`](): Find a channel type and ID using name and server ID\n - [`list_channels`](): List of all channels\n\n#### Category Management\n - [`create_category`](): Create a new category for channels\n - [`delete_category`](): Delete a category\n - [`find_category`](): Find a category ID using name and server ID\n - [`list_channels_in_category`](): List of channels in a specific category\n\n#### Webhook Management\n - [`create_webhook`](): Create a new webhook on a specific channel\n - [`delete_webhook`](): Delete a webhook\n - [`list_webhooks`](): List of webhooks on a specific channel\n - [`send_webhook_message`](): Send a message via webhook\n\n\n<hr>\n\nA more detailed examples can be found in the [Wiki](https://github.com/SaseQ/discord-mcp/wiki).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "discord",
        "webhooks",
        "automation",
        "discord bot",
        "integrate discord",
        "discord api"
      ],
      "category": "social-media"
    },
    "angheljf--social-media-mcp": {
      "owner": "angheljf",
      "name": "social-media-mcp",
      "url": "https://github.com/angheljf/social-media-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/angheljf.webp",
      "description": "Manage social media posts on X (formerly Twitter) by posting messages, creating threads, replying to existing threads, and listing posts with filtering options.",
      "stars": 7,
      "forks": 1,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-03T04:12:30Z",
      "readme_content": "# Social Media Server\n\n[![smithery badge](https://smithery.ai/badge/social-media-server)](https://smithery.ai/server/social-media-server)\nA Model Context Protocol (MCP) server for managing social media posts, currently supporting X (formerly Twitter).\n\n\n\n<a href=\"https://glama.ai/mcp/servers/55bvn41dtb\">\n  <img alt=\"badge\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/55bvn41dtb/badge\" />\n</a>\n\n## Features\n\n- Post messages to X (Twitter)\n- Create threads on X\n- Reply to existing threads\n- List X posts with filtering options\n- Platform information endpoints\n\n## Prerequisites\n\n- Node.js 16 or higher\n- Twitter API credentials\n  - API Key\n  - API Secret\n  - Access Token\n  - Access Secret\n\n## Installation\n\n### Installing via Smithery\n\nTo install Social Media Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/social-media-server):\n\n```bash\nnpx -y @smithery/cli install social-media-server --client claude\n```\n\n### Manual Installation\n1. Clone the repository\n2. Install dependencies:\n```sh\nnpm install\n```\n3. Create a .env file with your Twitter credentials:\n```sh\nTWITTER_API_KEY=your_api_key\nTWITTER_API_SECRET=your_api_secret\nTWITTER_ACCESS_TOKEN=your_access_token\nTWITTER_ACCESS_SECRET=your_access_secret\n```\n\n## Building\n\nTo build the project, run:\n```sh\nnpm run build\n```\n\n## Available Tools\n\n- `post_to_x` - Post a message to X\n    - Required: `content` (string)\n    - Optional: `threadId` (string)\n\n- `create_x_thread` - Create a new thread on X\n    - Required: `content` (string)\n\n- `list_x_post` - List X posts with optional filtering\n    - Optional: `limit` (number)\n    - Optional: `threadId` (string)\n\n## Resources\n\nThe server provides platform information via:\n- `socialmedia://platforms/x`\n\n## Development\n\nThe project uses TypeScript and follows the Model Context Protocol specification. The main server implementation is in index.ts, with types defined in types.ts.\n\n## License\n\nThis project is licensed under the MIT License",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twitter",
        "social",
        "ai",
        "social media",
        "twitter posting",
        "posts twitter"
      ],
      "category": "social-media"
    },
    "anwerj--youtube-uploader-mcp": {
      "owner": "anwerj",
      "name": "youtube-uploader-mcp",
      "url": "https://github.com/anwerj/youtube-uploader-mcp",
      "imageUrl": "",
      "description": "AI‑powered YouTube uploader—no CLI, no YouTube Studio. Uploade videos directly from MCP clients with all AI capabilities.",
      "stars": 24,
      "forks": 4,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-09-29T11:43:55Z",
      "readme_content": "<p align=\"center\"> <img alt=\"21a9baa2_06e8_4af4_9bcd_1dbce52a2733\" src=\"https://github.com/user-attachments/assets/21a9baa2-06e8-4af4-9bcd-1dbce52a2733\"/> </p>\n\n\n# YouTube Uploader MCP\n\nAI‑powered YouTube uploader—no CLI, no YouTube Studio, and no secrets ever shared with LLMs or third‑party apps and all free of cost! It includes OAuth2 authentication, token management, and video upload functionality.\n\n## Features\n- Upload videos to YouTube from MCP Client(Claude/Cursor/VS Code)\n- OAuth2 authentication flow\n- Access token and refresh token management\n- Multi Channel Support\n\n## Single Command Installation\n\n### For Mac and Linux\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/anwerj/youtube-uploader-mcp/master/scripts/install.sh)\"\n```\n\n\n### For Windows(Powershell)\n```Powershell\nInvoke-WebRequest -UseBasicParsing \"https://raw.githubusercontent.com/anwerj/youtube-uploader-mcp/master/scripts/install.ps1\" -OutFile \"$env:TEMP\\install.ps1\"; PowerShell -NoProfile -ExecutionPolicy Bypass -File \"$env:TEMP\\install.ps1\"\n```\n### Expected result\n\nThis single command will\n\n1. Help in downloading oAuth client secret files, if not downloaded,\n2. Download the MCP server,\n3. Set minimum required permission to run mcp server,\n4. Auto update **Cluade Desktop config** with youtube-uploader-mcp server and\n5. At last print exact MCP config for any other clients **VS Code/Cursor/AnythingLLM etc**.\n\n## Demo\n### Setup and Demo Video\n<p align=\"center\"> <a href=\"https://youtu.be/fcywz5FIUpM\" target=\"_blank\"><img alt=\"0\" src=\"https://img.youtube.com/vi/fcywz5FIUpM/0.jpg\"/></a> </p>\n\n![output](https://github.com/user-attachments/assets/f8c2c303-ef77-4fa9-99a6-5de7f120ffac)\n\n## Manual Installation\nPlease check [Single Command Installation](#single-command-installation), proceed if you prefer manual installation.\n\nVisit the [Releases](https://github.com/anwerj/youtube-uploader-mcp/releases) page and download the appropriate binary for your operating system:\n\n- `youtube-uploader-mcp-linux-amd64`\n- `youtube-uploader-mcp-darwin-arm64`\n- `youtube-uploader-mcp-windows-amd64.exe`\n- etc.\n\n> You can use the latest versioned tag, e.g., `v1.0.0`.\n\n---\n\n### 2. Make it Executable (Linux/macOS)\n\n```bash\nchmod +x path/to/youtube-uploader-mcp-<os>-<arch>\n```\n\n### 3. Configure MCP (e.g., in Claude Desktop or Cursor)\n```json\n{\n  \"mcpServers\": {\n    \"youtube-uploader-mcp\": {\n      \"command\": \"/absolute/path/to/youtube-uploader-mcp-<os>-<arch>\",\n      \"args\": [\n        \"-client_secret_file\",\n        \"/absolute/path/to/client_secret.json(See Below)\"\n      ]\n    }\n  }\n}\n```\n### 4. Set Up Google OAuth 2.0\nTo upload to YouTube, you must configure OAuth and get a client_secret.json file from the Google Developer Console.\n\n➡️ Follow the guide in [youtube_oauth2_setup.md](./youtube_oauth2_setup.md) for a step-by-step walkthrough.\n\n### Usage\n\n- `main.go`: Entry point for the CLI\n- `youtube/`: YouTube API integration (OAuth, video upload, config)\n- `tool/`: Command-line tools for authentication, token, and upload\n- `hook/`, `logn/`: Supporting packages\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "uploader",
        "ai",
        "social",
        "automation social",
        "social media",
        "youtube uploader"
      ],
      "category": "social-media"
    },
    "berlinbra--BlueSky-MCP": {
      "owner": "berlinbra",
      "name": "BlueSky-MCP",
      "url": "https://github.com/berlinbra/BlueSky-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/berlinbra.webp",
      "description": "Provides access to BlueSky social network data through its official API, enabling retrieval of user profiles and social graph information with built-in authentication and error handling.",
      "stars": 13,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-05T12:08:24Z",
      "readme_content": "# BlueSky MCP Server\n\nA Model Context Protocol (MCP) server that provides access to [BlueSky](https://bsky.app) social network data through its official API. This server implements a standardized interface for retrieving user profiles and social graph information.\n\n<a href=\"https://glama.ai/mcp/servers/bxvvsqt34k\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/bxvvsqt34k/badge\" alt=\"BlueSky Server MCP server\" /></a>\n\n## Features\n\n- Fetch detailed user profile information\n- Retrieve user following lists with pagination\n- Built-in authentication handling and session management\n- Comprehensive error handling\n\n## Installation\n\n\n\n#### Claude Desktop\n\n- On MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n- On Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n<summary>Development/Unpublished Servers Configuration</summary>\n\n```json\n    \"mcpServers\": {\n        \"bluesky-mcp\": {\n            \"command\": \"uv\",\n            \"args\": [\n            \"--directory\",\n            \"C:\\\\Users\\\\{INSERT_USER}\\\\YOUR\\\\PATH\\\\TO\\\\bluesky-mcp\\\\bluesky-mcp\",\n            \"run\",\n            \"src/bluesky_mcp/server.py\"\n            ],\n            \"env\": {\n                \"BLUESKY_IDENTIFIER\": \"your.handle.bsky.social\",\n                \"BLUESKY_APP_PASSWORD\": \"your-app-password\"\n            }\n        }\n    }\n```\n</details>\n\n### Running Locally\n\n#### Install Libraries\n```\nuv pip install -e .\n```\n\n### Running \nAfter connecting Claude client with the MCP tool via json file and installing the packages, Claude should see the server's mcp tools:\n\nYou can run the sever yourself via:\nIn bluesky_mcp repo: \n```\nuv run src/bluesky_mcp/server.py\n```\n\n*if you want to run the server inspector along with the server: \n```\nnpx @modelcontextprotocol/inspector uv --directory C:\\\\Users\\\\{INSERT_USER}\\\\YOUR\\\\PATH\\\\TO\\\\bluesky-mcp run src/bluesky_mcp/server.py\n```\n\n## Available Tools\n\nThe server implements two tools:\n- `get-profile`: Get detailed profile information for a BlueSky user\n- `get-follows`: Get a list of accounts that a specified user follows\n\n### get-profile\n\nRetrieves detailed profile information for a given BlueSky user.\n\n**Input Schema:**\n```json\n{\n    \"handle\": {\n        \"type\": \"string\",\n        \"description\": \"The user's handle (e.g., 'alice.bsky.social')\"\n    }\n}\n```\n\n**Example Response:**\n```\nProfile information for alice.bsky.social:\n\nHandle: alice.bsky.social\nDisplay Name: Alice\nDescription: Just a BlueSky user sharing thoughts\nFollowers: 1234\nFollowing: 567\nPosts: 789\n```\n\n### get-follows\n\nRetrieves a list of accounts that a specified user follows, with support for pagination.\n\n**Input Schema:**\n```json\n{\n    \"actor\": {\n        \"type\": \"string\",\n        \"description\": \"The user's handle (e.g., 'alice.bsky.social')\"\n    },\n    \"limit\": {\n        \"type\": \"integer\",\n        \"description\": \"Maximum number of results to return\",\n        \"default\": 50,\n        \"minimum\": 1,\n        \"maximum\": 100\n    },\n    \"cursor\": {\n        \"type\": \"string\",\n        \"description\": \"Pagination cursor\",\n        \"optional\": true\n    }\n}\n```\n\n**Example Response:**\n```\nFollows for alice.bsky.social:\n\nFollows:\nHandle: bob.bsky.social\nDisplay Name: Bob\n---\nHandle: carol.bsky.social\nDisplay Name: Carol\n---\nHandle: dave.bsky.social\nDisplay Name: Dave\n---\n\nMore results available. Use cursor: bafygeia...\n```\n\n## Error Handling\n\nThe server includes comprehensive error handling for various scenarios:\n\n- Authentication failures\n- Rate limiting\n- Network connectivity issues\n- Invalid parameters\n- Timeout handling\n- Malformed responses\n\nError messages are returned in a clear, human-readable format.\n\n## Prerequisites\n\n- Python 3.12 or higher\n- httpx\n- mcp\n\n## Authentication\n\nTo use this MCP server, you need to:\n1. Create a BlueSky account if you don't have one\n2. Generate an App Password in your BlueSky account settings\n3. Set the following environment variables:\n   - `BLUESKY_IDENTIFIER`: Your BlueSky handle (e.g., \"username.bsky.social\")\n   - `BLUESKY_APP_PASSWORD`: Your generated App Password\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\nThis MCP server is licensed under the MIT License. \nThis means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "bluesky",
        "automation",
        "automation social",
        "social network",
        "bluesky social"
      ],
      "category": "social-media"
    },
    "brianellin--bsky-mcp-server": {
      "owner": "brianellin",
      "name": "bsky-mcp-server",
      "url": "https://github.com/brianellin/bsky-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/brianellin.webp",
      "description": "Connect to Bluesky and interact with the ATProtocol using natural language to fetch, analyze, and post content seamlessly. Provides access to various Bluesky API endpoints directly within LLM applications.",
      "stars": 32,
      "forks": 10,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-29T05:08:25Z",
      "readme_content": "# Bluesky MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@brianellin/bsky-mcp-server)](https://smithery.ai/server/@brianellin/bsky-mcp-server)\n\nA [Model Context Protocol](https://modelcontextprotocol.io/) server that connects to [Bluesky](https://bsky.app/) and provides tools to interact with the ATProtocol.\n\nYou can use this MCP server to bring context from various Bluesky / ATProtocol API endpoints directly into the context window of your LLM based application. For example, you can add this server to Claude Desktop and then use it as a natural language Bluesky client. \n\n## Features & Tools\n\n- Interact with common Bluesky features via natural language (e.g. \"Get recent posts from David Roberts\")\n- Fetch and analyze feeds (\"Find me a feed about Seattle and tell me what people are talking about\")\n- Fetch and analyze lists of followers (\"What types of accounts does Mark Cuban follow? Give me a detailed report\")\n- Use an LLM to write a post and then post it for you 😱 (\"Write a haiku about today's weather in my area and post it to bluesky\")\n- Search for feeds, posts, and people (\"Find posts about the #teslatakedown and give me a summary of recent events\")\n- Analyze who follows you? (\"Who follows me on Bluesky? Give me a report\")\n\nHere's the current list of tools provided:\n\n- **get-pinned-feeds**: returns the set of all \"pinned\" items from the authenticated user's preferences.\n- **get-timeline-posts**: returns posts from the authenticated user's home timeline\n- **get-feed-posts**: returns posts from the specified feed\n- **get-list-posts**: returns posts from the specified list\n- **get-user-posts**: returns the specified user's posts\n- **get-profile**: returns the profile details of the specified user\n- **get-follows**: returns the set of users an account follows\n- **get-followers**: returns the set of users who follow an account\n- **get-liked-posts**: returns recent posts liked by the authenticated user\n- **get-trends**: returns current trending topics on Bluesky with post counts\n- **get-post-thread**: returns a full conversation thread for a specific post, showing all replies and context\n- **convert-url-to-uri**: converts a Bluesky web URL to an AT URI format that can be used with other tools\n- **search-posts**: returns posts for a given query. can specify top or latest\n- **search-people**: returns people for a given search query\n- **search-feeds**: returns feeds for a given query\n- **like-post**: like a post with a specific URI\n- **create-post**: publish a post \n- **follow-user**: follow a specific user\n\nTips:\n- You can ask for post from search, timelines, lists, feeds, or profiles by time range. For example: Summarize posts from my timeline for the last three days\" or \"Find me the most interesting article people have been talking about this week\"\n- Get weird: \"What the funniest/most unhinged/weirdest/goofiest post you've seen on my timeline in the last 24 hours?\"\n- Learn about yourself: \"Analyze my liked posts and tell me what I'm into. Give me 3 interesting facts about what you've found and how it relates to my personality on bluesky\" or \"Who follows me on bluesky? Give me a comprehensive report.\"\n\n\n## Installation\n\n### Installing via Smithery\n\nTo install Bluesky MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@brianellin/bsky-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @brianellin/bsky-mcp-server --client claude\n```\n\n### Installing Manually\nFirst clone this repo, then install dependencies and build the server:\n\n```bash\n# Install dependencies\npnpm install\n\n# Build the project\npnpm run build\n```\n\n### Testing with MCP Inspector\n\nYou can test the bluesky tools directly without connecting to an LLM via the amazing [MCP Inspector](https://modelcontextprotocol.io/docs/tools/inspector). First make sure you have built the server and then run:\n\n```bash\nnpx @modelcontextprotocol/inspector node build/src/index.js\n```\n\nNavigate to the local URL provided in your terminal, and then set your BLUESKY_IDENTIFIER, BLUESKY_APP_PASSWORD, and BLUESKY_SERVICE_URL environment variables from the panel on the left. Try the get-timeline tool to see the most recent posts from your home timeline. \n\n## MCP Client Configuration \n\nFollow the steps to set up MCP with your client of choice. For example, to set up Claude for desktop to connect to Bluesky, add the following to bluesky section to your claude_desktop_config.json:\n\n```json\n{\n    \"mcpServers\": {\n      \"bluesky\": {\n        \"command\": \"node\",\n        \"args\": [\"/path/to/bsky-mcp-server/build/src/index.js\"],\n        \"env\": {\n            \"BLUESKY_IDENTIFIER\": \"your-bluesky-handle\",\n            \"BLUESKY_APP_PASSWORD\": \"your-app-password\",\n            \"BLUESKY_SERVICE_URL\": \"https://bsky.social\"\n          }\n      }\n    }\n  }\n```\n\nFor more details about running MCP servers in Claude for desktop, see https://modelcontextprotocol.io/quickstart/user\n\n\n## Creating App Passwords\n\nTo use this MCP server, you need to create an app password for your Bluesky account:\n\n1. Log in to Bluesky\n2. Go to Settings > App Passwords\n3. Create a new app password specifically for this integration\n4. Set the app password using the BLUESKY_APP_PASSWORD environment variable\n\n## Security Notes\n\n- This server stores your session information in memory only and does not share it with the MCP client.\n- The MCP client only has access to the tools, not to your authentication or app password\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "bsky",
        "social",
        "automation",
        "automation social",
        "bluesky api",
        "social media"
      ],
      "category": "social-media"
    },
    "chenningling--RedBook-Search-Comment-MCP": {
      "owner": "chenningling",
      "name": "RedBook-Search-Comment-MCP",
      "url": "https://github.com/chenningling/RedBook-Search-Comment-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/chenningling.webp",
      "description": "Automates login, keyword searches, content retrieval, and comment management on Xiaohongshu (Redbook) notes, facilitating context-aware comment posting. Utilizes AI to generate natural comments based on note analysis.",
      "stars": 28,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-30T10:06:50Z",
      "readme_content": "# 小红书自动搜索评论工具（MCP Server）\n\n> 本项目基于 [JonaFly/RednoteMCP](https://github.com/JonaFly/RednoteMCP.git) 并结合我自己的使用经验，进行优化和改进（by windsurf）。在此向原作者表示衷心的感谢！\n\n这是一款基于 Playwright 开发的小红书自动搜索和评论工具，作为 MCP Server，可通过特定配置接入 MCP Client（如Claude for Desktop），帮助用户自动完成登录小红书、搜索关键词、获取笔记内容及发布智能评论等操作。\n\n### 注：[Redbook-Search-Comment-MCP2.0](https://github.com/chenningling/Redbook-Search-Comment-MCP2.0)已经发布！直接点击前往使用即可！\n**2.0主要优化内容如下：**\n- 优化了搜索笔记时，标题不显示的问题\n- 新增了多类获取笔记的方法，确保能完整获取笔记内容\n- 重构了评论功能，利用MCP客户端（如Claude）的AI能力生成更自然的评论\n- 将功能模块化，分为笔记分析、评论生成和评论发布三个独立模块\n\n## 一、功能特点\n\n- **自动登录**：支持手动扫码登录方式，首次登录成功后会保存登录状态，后续使用无需重复扫码。\n- **关键词搜索**：能依据用户输入的关键词搜索小红书笔记，并可指定返回结果的数量。\n- **笔记内容获取**：输入笔记的 URL，即可获取该笔记的详细内容。\n- **笔记评论获取**：通过笔记 URL 获取相应笔记的评论信息。\n- **智能评论发布**：支持多种评论类型，包括引流（引导用户关注或私聊）、点赞（简单互动获取好感）、咨询（以问题形式增加互动）、专业（展示专业知识建立权威），可根据需求选择发布。\n\n## 二、安装步骤\n\n1. **Python 环境准备**：确保系统已安装 Python 3.8 或更高版本。若未安装，可从 Python 官方网站下载并安装。\n\n2. **项目获取**：将本项目克隆或下载到本地。\n\n3. **创建虚拟环境**：在项目目录下创建并激活虚拟环境（推荐）：\n   ```bash\n   # 创建虚拟环境\n   python3 -m venv venv\n   \n   # 激活虚拟环境\n   # Windows\n   venv\\Scripts\\activate\n   # macOS/Linux\n   source venv/bin/activate\n   ```\n\n4. **安装依赖**：在激活的虚拟环境中安装所需依赖：\n   ```bash\n   pip install -r requirements.txt\n   pip install fastmcp\n   ```\n\n5. **安装浏览器**：安装Playwright所需的浏览器：\n   ```bash\n   playwright install\n   ```\n\n## 三、MCP Server 配置\n\n在 MCP Client（如Claude for Desktop）的配置文件中添加以下内容，将本工具配置为 MCP Server：\n\n```json\n{\n    \"mcpServers\": {\n        \"xiaohongshu MCP\": {\n            \"command\": \"/绝对路径/到/venv/bin/python3\",\n            \"args\": [\n                \"/绝对路径/到/xiaohongshu_mcp.py\",\n                \"--stdio\"\n            ]\n        }\n    }\n}\n```\n\n> **重要提示**：\n> - 请使用虚拟环境中Python解释器的**完整绝对路径**\n> - 例如：`/Users/username/Desktop/RedBook-Search-Comment-MCP/venv/bin/python3`\n> - 同样，xiaohongshu_mcp.py也需要使用**完整绝对路径**\n\n## 四、使用方法\n\n### （一）启动服务器\n\n1. **直接运行**：在项目目录下，激活虚拟环境后执行：\n   ```bash\n   python3 xiaohongshu_mcp.py\n   ```\n\n2. **通过 MCP Client 启动**：配置好MCP Client后，按照客户端的操作流程进行启动和连接。\n\n### （二）主要功能操作\n\n在MCP Client（如Claude for Desktop）中连接到服务器后，可以使用以下功能：\n\n### 1. 登录小红书\n\n**工具函数**：\n```\nmcp0_login()\n```\n\n**在MCP客户端中的使用方式**：\n直接发送以下文本：\n```\n帮我登录小红书账号\n```\n或：\n```\n请登录小红书\n```\n\n**功能说明**：首次使用时会打开浏览器窗口，等待用户手动扫码登录。登录成功后，工具会保存登录状态。\n\n### 2. 搜索笔记\n\n**工具函数**：\n```\nmcp0_search_notes(keywords=\"关键词\", limit=5)\n```\n\n**在MCP客户端中的使用方式**：\n发送包含关键词的搜索请求：\n```\n帮我搜索小红书笔记，关键词为：美食\n```\n指定返回数量：\n```\n帮我搜索小红书笔记，关键词为旅游，返回10条结果\n```\n\n**功能说明**：根据关键词搜索小红书笔记，并返回指定数量的结果。默认返回5条结果。\n\n### 3. 获取笔记内容\n\n**工具函数**：\n```\nmcp0_get_note_content(url=\"笔记URL\")\n```\n\n**在MCP客户端中的使用方式**：\n发送包含笔记URL的请求：\n```\n帮我获取这个笔记的内容：https://www.xiaohongshu.com/search_result/xxxx\n```\n或：\n```\n请查看这个小红书笔记的内容：https://www.xiaohongshu.com/search_result/xxxx\n```\n\n**功能说明**：获取指定笔记URL的详细内容，包括标题、作者、发布时间和正文内容。\n\n### 4. 获取笔记评论\n\n**工具函数**：\n```\nmcp0_get_note_comments(url=\"笔记URL\")\n```\n\n**在MCP客户端中的使用方式**：\n发送包含笔记URL的评论请求：\n```\n帮我获取这个笔记的评论：https://www.xiaohongshu.com/search_result/xxxx\n```\n或：\n```\n请查看这个小红书笔记的评论区：https://www.xiaohongshu.com/search_result/xxxx\n```\n\n**功能说明**：获取指定笔记URL的评论信息，包括评论者、评论内容和评论时间。\n\n### 5. 发布智能评论\n\n**工具函数**：\n```\nmcp0_post_smart_comment(url=\"笔记URL\", comment_type=\"评论类型\")\n```\n\n**在MCP客户端中的使用方式**：\n发送包含笔记URL和评论类型的请求：\n```\n帮我在这个笔记发布专业类型的评论：https://www.xiaohongshu.com/search_result/xxxx\n```\n或：\n```\n请在这个小红书笔记下发布一条引流评论：https://www.xiaohongshu.com/search_result/xxxx\n```\n\n**评论类型参数可选值**：\n- `\"引流\"` (默认)：引导用户关注或私聊\n- `\"点赞\"`：简单互动获取好感\n- `\"咨询\"`：以问题形式增加互动\n- `\"专业\"`：展示专业知识建立权威\n\n**功能说明**：在指定笔记下发布智能评论，系统会根据笔记内容和指定的评论类型自动生成适合的评论内容。\n\n## 五、代码结构\n\n- **xiaohongshu_mcp.py**：实现主要功能的核心文件，包含登录、搜索、获取内容和评论、发布评论等功能的代码逻辑。\n- **requirements.txt**：记录项目所需的依赖库。\n\n## 六、常见问题与解决方案\n\n1. **连接失败**：\n   - 确保使用了虚拟环境中Python解释器的**完整绝对路径**\n   - 确保MCP服务器正在运行\n   - 尝试重启MCP服务器和客户端\n\n2. **浏览器会话问题**：\n   如果遇到`Page.goto: Target page, context or browser has been closed`错误：\n   - 重启MCP服务器\n   - 重新连接并登录\n\n3. **依赖安装问题**：\n   如果遇到`ModuleNotFoundError`错误：\n   - 确保在虚拟环境中安装了所有依赖\n   - 检查是否安装了fastmcp包\n\n## 七、注意事项\n\n- **浏览器模式**：工具使用 Playwright 的非隐藏模式运行，运行时会打开真实浏览器窗口。\n- **登录方式**：首次登录需要手动扫码，后续使用若登录状态有效，则无需再次扫码。\n- **平台规则**：使用过程中请严格遵守小红书平台的相关规定，避免进行过度操作，防止账号面临封禁等风险。\n- **功能兼容性**：由于小红书平台可能会进行更新和调整，搜索结果和评论功能的可用性可能会受到影响。若出现异常，请及时关注项目更新或联系开发者。\n\n## 八、免责声明\n\n本工具仅用于学习和研究目的，使用者应严格遵守相关法律法规以及小红书平台的规定。因使用不当导致的任何问题，本项目开发者不承担任何责任。\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "automates",
        "social",
        "automation social",
        "comment management",
        "social media"
      ],
      "category": "social-media"
    },
    "cline--cline": {
      "owner": "cline",
      "name": "cline",
      "url": "https://github.com/cline/cline",
      "imageUrl": "/freedevtools/mcp/pfp/cline.webp",
      "description": "Enable autonomous coding assistance within an IDE, facilitating file creation and editing, running terminal commands, and interactive debugging through a browser, all while managing user permissions. Extend functionality via custom tools using the Model Context Protocol (MCP) to automate and streamline software development tasks.",
      "stars": 51028,
      "forks": 7287,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-04T12:24:47Z",
      "readme_content": "<div align=\"center\"><sub>\nEnglish | <a href=\"https://github.com/cline/cline/blob/main/locales/es/README.md\" target=\"_blank\">Español</a> | <a href=\"https://github.com/cline/cline/blob/main/locales/de/README.md\" target=\"_blank\">Deutsch</a> | <a href=\"https://github.com/cline/cline/blob/main/locales/ja/README.md\" target=\"_blank\">日本語</a> | <a href=\"https://github.com/cline/cline/blob/main/locales/zh-cn/README.md\" target=\"_blank\">简体中文</a> | <a href=\"https://github.com/cline/cline/blob/main/locales/zh-tw/README.md\" target=\"_blank\">繁體中文</a> | <a href=\"https://github.com/cline/cline/blob/main/locales/ko/README.md\" target=\"_blank\">한국어</a>\n</sub></div>\n\n# Cline – \\#1 on OpenRouter\n\n<p align=\"center\">\n  <img alt=\"demo\" src=\"https://media.githubusercontent.com/media/cline/cline/main/assets/docs/demo.gif\" width=\"100%\" />\n</p>\n\n<div align=\"center\">\n<table>\n<tbody>\n<td align=\"center\">\n<a href=\"https://marketplace.visualstudio.com/items?itemName=saoudrizwan.claude-dev\" target=\"_blank\"><strong>Download on VS Marketplace</strong></a>\n</td>\n<td align=\"center\">\n<a href=\"https://discord.gg/cline\" target=\"_blank\"><strong>Discord</strong></a>\n</td>\n<td align=\"center\">\n<a href=\"https://www.reddit.com/r/cline/\" target=\"_blank\"><strong>r/cline</strong></a>\n</td>\n<td align=\"center\">\n<a href=\"https://github.com/cline/cline/discussions/categories/feature-requests?discussions_q=is%3Aopen+category%3A%22Feature+Requests%22+sort%3Atop\" target=\"_blank\"><strong>Feature Requests</strong></a>\n</td>\n<td align=\"center\">\n<a href=\"https://docs.cline.bot/getting-started/for-new-coders\" target=\"_blank\"><strong>Getting Started</strong></a>\n</td>\n</tbody>\n</table>\n</div>\n\nMeet Cline, an AI assistant that can use your **CLI** a**N**d **E**ditor.\n\nThanks to [Claude Sonnet's agentic coding capabilities](https://www.anthropic.com/claude/sonnet), Cline can handle complex software development tasks step-by-step. With tools that let him create & edit files, explore large projects, use the browser, and execute terminal commands (after you grant permission), he can assist you in ways that go beyond code completion or tech support. Cline can even use the Model Context Protocol (MCP) to create new tools and extend his own capabilities. While autonomous AI scripts traditionally run in sandboxed environments, this extension provides a human-in-the-loop GUI to approve every file change and terminal command, providing a safe and accessible way to explore the potential of agentic AI.\n\n1. Enter your task and add images to convert mockups into functional apps or fix bugs with screenshots.\n2. Cline starts by analyzing your file structure & source code ASTs, running regex searches, and reading relevant files to get up to speed in existing projects. By carefully managing what information is added to context, Cline can provide valuable assistance even for large, complex projects without overwhelming the context window.\n3. Once Cline has the information he needs, he can:\n    - Create and edit files + monitor linter/compiler errors along the way, letting him proactively fix issues like missing imports and syntax errors on his own.\n    - Execute commands directly in your terminal and monitor their output as he works, letting him e.g., react to dev server issues after editing a file.\n    - For web development tasks, Cline can launch the site in a headless browser, click, type, scroll, and capture screenshots + console logs, allowing him to fix runtime errors and visual bugs.\n4. When a task is completed, Cline will present the result to you with a terminal command like `open -a \"Google Chrome\" index.html`, which you run with a click of a button.\n\n> [!TIP]\n> Use the `CMD/CTRL + Shift + P` shortcut to open the command palette and type \"Cline: Open In New Tab\" to open the extension as a tab in your editor. This lets you use Cline side-by-side with your file explorer, and see how he changes your workspace more clearly.\n\n---\n\n<img alt=\"3cf21e04_7ce9_4d22_a7b9_ba2c595e88a4\" align=\"right\" width=\"340\" src=\"https://github.com/user-attachments/assets/3cf21e04-7ce9-4d22-a7b9-ba2c595e88a4\">\n\n### Use any API and Model\n\nCline supports API providers like OpenRouter, Anthropic, OpenAI, Google Gemini, AWS Bedrock, Azure, GCP Vertex, Cerebras and Groq. You can also configure any OpenAI compatible API, or use a local model through LM Studio/Ollama. If you're using OpenRouter, the extension fetches their latest model list, allowing you to use the newest models as soon as they're available.\n\nThe extension also keeps track of total tokens and API usage cost for the entire task loop and individual requests, keeping you informed of spend every step of the way.\n\n<!-- Transparent pixel to create line break after floating image -->\n\n<img alt=\"ee14e6f7_20b8_4391_9091_8e8e25561929\" width=\"2000\" height=\"0\" src=\"https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929\"><br>\n\n<img alt=\"81be79a8_1fdb_4028_9129_5fe055e01e76\" align=\"left\" width=\"370\" src=\"https://github.com/user-attachments/assets/81be79a8-1fdb-4028-9129-5fe055e01e76\">\n\n### Run Commands in Terminal\n\nThanks to the new [shell integration updates in VSCode v1.93](https://code.visualstudio.com/updates/v1_93#_terminal-shell-integration-api), Cline can execute commands directly in your terminal and receive the output. This allows him to perform a wide range of tasks, from installing packages and running build scripts to deploying applications, managing databases, and executing tests, all while adapting to your dev environment & toolchain to get the job done right.\n\nFor long running processes like dev servers, use the \"Proceed While Running\" button to let Cline continue in the task while the command runs in the background. As Cline works he’ll be notified of any new terminal output along the way, letting him react to issues that may come up, such as compile-time errors when editing files.\n\n<!-- Transparent pixel to create line break after floating image -->\n\n<img alt=\"ee14e6f7_20b8_4391_9091_8e8e25561929\" width=\"2000\" height=\"0\" src=\"https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929\"><br>\n\n<img alt=\"c5977833_d9b8_491e_90f9_05f9cd38c588\" align=\"right\" width=\"400\" src=\"https://github.com/user-attachments/assets/c5977833-d9b8-491e-90f9-05f9cd38c588\">\n\n### Create and Edit Files\n\nCline can create and edit files directly in your editor, presenting you a diff view of the changes. You can edit or revert Cline's changes directly in the diff view editor, or provide feedback in chat until you're satisfied with the result. Cline also monitors linter/compiler errors (missing imports, syntax errors, etc.) so he can fix issues that come up along the way on his own.\n\nAll changes made by Cline are recorded in your file's Timeline, providing an easy way to track and revert modifications if needed.\n\n<!-- Transparent pixel to create line break after floating image -->\n\n<img alt=\"ee14e6f7_20b8_4391_9091_8e8e25561929\" width=\"2000\" height=\"0\" src=\"https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929\"><br>\n\n<img alt=\"bc2e85ba_dfeb_4fe6_9942_7cfc4703cbe5\" align=\"left\" width=\"370\" src=\"https://github.com/user-attachments/assets/bc2e85ba-dfeb-4fe6-9942-7cfc4703cbe5\">\n\n### Use the Browser\n\nWith Claude Sonnet's new [Computer Use](https://www.anthropic.com/news/3-5-models-and-computer-use) capability, Cline can launch a browser, click elements, type text, and scroll, capturing screenshots and console logs at each step. This allows for interactive debugging, end-to-end testing, and even general web use! This gives him autonomy to fixing visual bugs and runtime issues without you needing to handhold and copy-pasting error logs yourself.\n\nTry asking Cline to \"test the app\", and watch as he runs a command like `npm run dev`, launches your locally running dev server in a browser, and performs a series of tests to confirm that everything works. [See a demo here.](https://x.com/sdrzn/status/1850880547825823989)\n\n<!-- Transparent pixel to create line break after floating image -->\n\n<img alt=\"ee14e6f7_20b8_4391_9091_8e8e25561929\" width=\"2000\" height=\"0\" src=\"https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929\"><br>\n\n<img alt=\"ac0efa14_5c1f_4c26_a42d_9d7c56f5fadd\" align=\"right\" width=\"350\" src=\"https://github.com/user-attachments/assets/ac0efa14-5c1f-4c26-a42d-9d7c56f5fadd\">\n\n### \"add a tool that...\"\n\nThanks to the [Model Context Protocol](https://github.com/modelcontextprotocol), Cline can extend his capabilities through custom tools. While you can use [community-made servers](https://github.com/modelcontextprotocol/servers), Cline can instead create and install tools tailored to your specific workflow. Just ask Cline to \"add a tool\" and he will handle everything, from creating a new MCP server to installing it into the extension. These custom tools then become part of Cline's toolkit, ready to use in future tasks.\n\n-   \"add a tool that fetches Jira tickets\": Retrieve ticket ACs and put Cline to work\n-   \"add a tool that manages AWS EC2s\": Check server metrics and scale instances up or down\n-   \"add a tool that pulls the latest PagerDuty incidents\": Fetch details and ask Cline to fix bugs\n\n<!-- Transparent pixel to create line break after floating image -->\n\n<img alt=\"ee14e6f7_20b8_4391_9091_8e8e25561929\" width=\"2000\" height=\"0\" src=\"https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929\"><br>\n\n<img alt=\"7fdf41e6_281a_4b4b_ac19_020b838b6970\" align=\"left\" width=\"360\" src=\"https://github.com/user-attachments/assets/7fdf41e6-281a-4b4b-ac19-020b838b6970\">\n\n### Add Context\n\n**`@url`:** Paste in a URL for the extension to fetch and convert to markdown, useful when you want to give Cline the latest docs\n\n**`@problems`:** Add workspace errors and warnings ('Problems' panel) for Cline to fix\n\n**`@file`:** Adds a file's contents so you don't have to waste API requests approving read file (+ type to search files)\n\n**`@folder`:** Adds folder's files all at once to speed up your workflow even more\n\n<!-- Transparent pixel to create line break after floating image -->\n\n<img alt=\"ee14e6f7_20b8_4391_9091_8e8e25561929\" width=\"2000\" height=\"0\" src=\"https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929\"><br>\n\n<img alt=\"140c8606_d3bf_41b9_9a1f_4dbf0d4c90cb\" align=\"right\" width=\"350\" src=\"https://github.com/user-attachments/assets/140c8606-d3bf-41b9-9a1f-4dbf0d4c90cb\">\n\n### Checkpoints: Compare and Restore\n\nAs Cline works through a task, the extension takes a snapshot of your workspace at each step. You can use the 'Compare' button to see a diff between the snapshot and your current workspace, and the 'Restore' button to roll back to that point.\n\nFor example, when working with a local web server, you can use 'Restore Workspace Only' to quickly test different versions of your app, then use 'Restore Task and Workspace' when you find the version you want to continue building from. This lets you safely explore different approaches without losing progress.\n\n<!-- Transparent pixel to create line break after floating image -->\n\n<img alt=\"ee14e6f7_20b8_4391_9091_8e8e25561929\" width=\"2000\" height=\"0\" src=\"https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929\"><br>\n\n## Contributing\n\nTo contribute to the project, start with our [Contributing Guide](CONTRIBUTING.md) to learn the basics. You can also join our [Discord](https://discord.gg/cline) to chat with other contributors in the `#contributors` channel. If you're looking for full-time work, check out our open positions on our [careers page](https://cline.bot/join-us)!\n\n## License\n\n[Apache 2.0 © 2025 Cline Bot Inc.](./LICENSE)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automate",
        "automation",
        "interactive",
        "automation social",
        "social media",
        "presence cline"
      ],
      "category": "social-media"
    },
    "crazyrabbitLTC--mcp-twitter-server": {
      "owner": "crazyrabbitLTC",
      "name": "mcp-twitter-server",
      "url": "https://github.com/crazyrabbitLTC/mcp-twitter-server",
      "imageUrl": "/freedevtools/mcp/pfp/crazyrabbitLTC.webp",
      "description": "Interact with Twitter to post tweets, search for specific tweets, and reply to existing tweets.",
      "stars": 21,
      "forks": 12,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-23T09:48:43Z",
      "readme_content": "\n![ChatGPT Image May 30, 2025, 03_20_40 PM](https://github.com/user-attachments/assets/a9e3116e-414a-40cf-aad1-635ea5a82c7a)\n# X (Twitter) MCP Server\n\nA comprehensive Model Context Protocol server implementation for X (Twitter) API integration with professional workflow automation, enhanced error handling, and real-time documentation.\n\n## 🚀 Features\n\n- **53 Total Tools** - 33 Twitter API + 20 enhanced SocialData.tools research capabilities\n- **Advanced Analytics** - Thread analysis, network mapping, sentiment analysis, viral tracking\n- **Bypasses API Restrictions** - Enhanced research tools work without Pro tier requirements\n- **Professional Error Handling** - Clear upgrade guidance and graceful API key handling\n- **5 Workflow Prompts** - Pre-built automation templates\n- **6 Dynamic Resources** - Real-time API documentation and status\n- **Full MCP Compliance** - Tools, prompts, and resources support\n\n## 📋 Quick Start\n\n### Prerequisites\n\n- Node.js 18+ \n- npm or yarn\n- X (Twitter) API credentials (Basic tier minimum - $200/month)\n\n### Local Installation\n\n1. **Clone and Install**\n   ```bash\n   git clone <repository-url>\n   cd twitter-server\n   npm install\n   ```\n\n2. **Environment Setup**\n   ```bash\n   cp .env.example .env\n   # Edit .env with your credentials\n   ```\n\n   **Required Environment Variables:**\n   ```env\n   # Twitter API credentials (Required)\n   X_API_KEY=your_api_key_here\n   X_API_SECRET=your_api_secret_here  \n   X_ACCESS_TOKEN=your_access_token_here\n   X_ACCESS_TOKEN_SECRET=your_access_token_secret_here\n\n   # SocialData.tools API key (Optional - enables enhanced research tools)\n   SOCIALDATA_API_KEY=your_socialdata_api_key_here\n   SOCIALDATA_BASE_URL=https://api.socialdata.tools  # Optional, uses default if not set\n   ```\n\n3. **Build and Run**\n   ```bash\n   npm run build\n   npm start\n   ```\n\n4. **Test the Server**\n   ```bash\n   # Test with JSON-RPC calls\n   source .env && echo '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/list\"}' | node dist/index.js\n\n   # Test specific tool\n   source .env && echo '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/call\", \"params\": {\"name\": \"getUserInfo\", \"arguments\": {\"username\": \"elonmusk\"}}}' | node dist/index.js\n   ```\n\n## 🔑 X (Twitter) API Setup\n\n### Required Credentials\n\nAdd these to your `.env` file:\n\n```env\nX_API_KEY=your_api_key_here\nX_API_SECRET=your_api_secret_here  \nX_ACCESS_TOKEN=your_access_token_here\nX_ACCESS_TOKEN_SECRET=your_access_token_secret_here\n```\n\n### API Access Levels\n\n| Tier | Cost | Working Tools | Limited Tools |\n|------|------|---------------|---------------|\n| **Basic** | $200/month | 18/22 tools | searchTweets, getHashtagAnalytics |\n| **Pro** | $5,000/month | All 22 tools | None |\n\n## 🛠️ Available Tools (53 Total)\n\n### 🐦 Twitter API Tools (33 tools)\n\n#### ✅ Tweet Operations (All Working)\n- `postTweet` - Post new tweets\n- `getTweetById` - Retrieve specific tweets  \n- `replyToTweet` - Reply to tweets\n- `deleteTweet` - Delete your tweets\n\n#### ✅ Engagement (All Working)\n- `likeTweet` / `unlikeTweet` - Like/unlike tweets\n- `retweet` / `undoRetweet` - Retweet/undo retweets\n- `getRetweets` - Get retweet users\n\n#### ✅ User Management (Most Working)\n- `getUserInfo` - Get user profiles ✅\n- `getUserTimeline` - Get user tweets ✅\n- `followUser` / `unfollowUser` - Follow/unfollow users ✅\n- `getFollowers` - Get followers ⚠️ (403 - requires special permissions)\n- `getFollowing` - Get following ⚠️ (403 - requires special permissions)\n\n#### ✅ List Management (All Working)\n- `createList` - Create X (Twitter) lists\n- `getUserLists` - Get user's lists\n- `addUserToList` / `removeUserFromList` - Manage list members\n- `getListMembers` - Get list members\n\n#### ⚠️ Search & Analytics (Limited)\n- `searchTweets` - Search tweets (requires Pro tier - $5,000/month)\n- `getHashtagAnalytics` - Hashtag analytics (requires Pro tier)\n- `getLikedTweets` - Get liked tweets (API access issue)\n\n### 🔍 SocialData.tools Enhanced Research (20 tools)\n\n*Note: These tools gracefully handle missing API keys with helpful setup instructions*\n\n#### 🔎 Advanced Search (6 tools)\n- `advancedTweetSearch` - Complex queries with operators, bypasses API tier restrictions\n- `historicalTweetSearch` - Access historical tweets beyond standard API limits\n- `trendingTopicsSearch` - Real-time trend analysis and popular content discovery\n- `bulkUserProfiles` - Multi-user profile analysis in single requests\n- `userGrowthAnalytics` - User growth pattern analysis over time\n- `userInfluenceMetrics` - Engagement scoring and influence calculations\n\n#### 🧵 Thread & Conversation Analysis (3 tools)\n- `getFullThread` - Reconstruct complete Twitter threads with engagement metrics\n- `getConversationTree` - Map conversation structure including replies and quotes\n- `getThreadMetrics` - Thread performance analysis and engagement distribution\n\n#### 🌐 Network Analysis (3 tools)\n- `findMutualConnections` - Discover mutual connections via interactions\n- `analyzeFollowerDemographics` - Follower patterns and demographic analysis\n- `mapInfluenceNetwork` - Influence mapping and connection strength analysis\n\n#### 📈 Advanced Analytics (3 tools)\n- `getHashtagTrends` - Hashtag performance tracking over time with trend analysis\n- `analyzeSentiment` - Sentiment analysis with keyword frequency tracking\n- `trackVirality` - Viral spread patterns and engagement velocity analysis\n\n#### 📱 Direct Messages & Moderation (5 tools)\n- Various DM and user moderation tools\n\n## 🔑 API Keys Setup\n\n### Twitter API (Required)\nGet these from [Twitter Developer Portal](https://developer.twitter.com/):\n\n```env\nX_API_KEY=your_api_key_here\nX_API_SECRET=your_api_secret_here  \nX_ACCESS_TOKEN=your_access_token_here\nX_ACCESS_TOKEN_SECRET=your_access_token_secret_here\n```\n\n### SocialData.tools API (Optional)\nEnables 20 enhanced research tools that bypass Twitter API limitations:\n\n1. **Sign up** at [SocialData.tools](https://socialdata.tools)\n2. **Get your API key** from the dashboard\n3. **Add to .env file:**\n   ```env\n   SOCIALDATA_API_KEY=your_socialdata_api_key_here\n   ```\n\n**Without SocialData API key:** Enhanced research tools will show helpful setup instructions instead of errors.\n\n## 🧪 Testing SocialData.tools Integration\n\n### Test Enhanced Research Tools\n```bash\n# Test advanced tweet search (bypasses Twitter API Pro tier requirement)\nsource .env && echo '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/call\", \"params\": {\"name\": \"advancedTweetSearch\", \"arguments\": {\"query\": \"AI OR machine learning\", \"maxResults\": 5}}}' | node dist/index.js\n\n# Test sentiment analysis\nsource .env && echo '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/call\", \"params\": {\"name\": \"analyzeSentiment\", \"arguments\": {\"query\": \"ChatGPT\", \"sampleSize\": 20}}}' | node dist/index.js\n\n# Test user influence metrics\nsource .env && echo '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/call\", \"params\": {\"name\": \"userInfluenceMetrics\", \"arguments\": {\"username\": \"openai\"}}}' | node dist/index.js\n\n# Test thread analysis\nsource .env && echo '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/call\", \"params\": {\"name\": \"getFullThread\", \"arguments\": {\"tweetId\": \"1234567890123456789\"}}}' | node dist/index.js\n```\n\n### Test Without API Key\n```bash\n# These will show helpful setup instructions instead of errors\nSOCIALDATA_API_KEY=\"\" echo '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/call\", \"params\": {\"name\": \"advancedTweetSearch\", \"arguments\": {\"query\": \"test\"}}}' | node dist/index.js\n```\n\n## 🆚 When to Use Which Tools\n\n### Twitter API vs SocialData.tools Comparison\n\n| Use Case | Twitter API Tool | SocialData.tools Alternative | Advantage |\n|----------|------------------|-------------------------------|-----------|\n| **Basic Search** | `searchTweets` ⚠️ (Pro tier $5k/month) | `advancedTweetSearch` ✅ | Bypasses API restrictions |\n| **User Analysis** | `getUserInfo` ✅ | `userInfluenceMetrics` ✅ | Enhanced analytics |\n| **Historical Data** | Limited by API tier | `historicalTweetSearch` ✅ | Access older tweets |\n| **Sentiment Analysis** | Not available | `analyzeSentiment` ✅ | Built-in sentiment scoring |\n| **Thread Analysis** | Manual reconstruction | `getFullThread` ✅ | Automated thread mapping |\n| **Network Mapping** | Not available | `mapInfluenceNetwork` ✅ | Connection analysis |\n| **Hashtag Trends** | `getHashtagAnalytics` ⚠️ (Pro tier) | `getHashtagTrends` ✅ | No tier restrictions |\n\n### Recommended Workflow\n1. **Start with Twitter API tools** for posting, engagement, and basic operations\n2. **Use SocialData.tools** for research, analytics, and advanced insights\n3. **Combine both** for comprehensive Twitter automation and analysis\n\n## 🎯 MCP Workflow Prompts\n\nOur server includes 5 professional workflow templates:\n\n### 1. Tweet Composition (`compose-tweet`)\nInteractive guidance for creating engaging tweets with hashtags, mentions, and media.\n\n### 2. Analytics Reporting (`analytics-report`) \nComprehensive X (Twitter) analytics workflow for business insights.\n\n### 3. Content Strategy (`content-strategy`)\nStrategic content planning and audience engagement workflows.\n\n### 4. Community Management (`community-management`)\nCustomer service and community engagement best practices.\n\n### 5. Hashtag Research (`hashtag-research`)\nIndustry-specific hashtag research and trend analysis.\n\n## 📊 Dynamic Resources\n\nReal-time information accessible via MCP:\n\n- **API Rate Limits** - Live usage monitoring\n- **Access Level Status** - Current tier capabilities  \n- **Tool Status Report** - Working vs limited tools\n- **Quick Start Guide** - Getting started documentation\n- **Workflow Templates** - Pre-built automation examples\n- **User Profile Data** - Dynamic user information (live API calls)\n\n## 🧪 Testing\n\n### Manual Testing\n```bash\n# Test working tools\nsource .env && echo '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/call\", \"params\": {\"name\": \"postTweet\", \"arguments\": {\"text\": \"Hello from MCP!\"}}}' | node dist/index.js\n\n# Test user info\nsource .env && echo '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/call\", \"params\": {\"name\": \"getUserInfo\", \"arguments\": {\"username\": \"elonmusk\"}}}' | node dist/index.js\n\n# Test limited tools (will show upgrade guidance)\nsource .env && echo '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/call\", \"params\": {\"name\": \"searchTweets\", \"arguments\": {\"query\": \"MCP\"}}}' | node dist/index.js\n```\n\n### Test Results Summary\n- **18 Tools Working** on Basic tier\n- **4 Tools Limited** by API tier/permissions\n- **Professional error messages** with upgrade guidance\n- **All core functionality** operational\n\n## 🔧 Integration Examples\n\n### MCP Client (Cursor/Claude)\n```json\n{\n  \"mcpServers\": {\n    \"x-twitter\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/twitter-server/dist/index.js\"],\n      \"env\": {\n        \"X_API_KEY\": \"your_api_key\",\n        \"X_API_SECRET\": \"your_api_secret\", \n        \"X_ACCESS_TOKEN\": \"your_access_token\",\n        \"X_ACCESS_TOKEN_SECRET\": \"your_access_token_secret\"\n      }\n    }\n  }\n}\n```\n\n### Direct JSON-RPC\n```bash\n# Always source environment first\nsource .env\n\n# List all tools\necho '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/list\"}' | node dist/index.js\n\n# Call specific tool\necho '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/call\", \"params\": {\"name\": \"toolName\", \"arguments\": {\"param\": \"value\"}}}' | node dist/index.js\n```\n\n## 📝 API Documentation\n\n### Tweet Operations\n\n**postTweet**\n```json\n{\n  \"text\": \"Your tweet content (up to 280 characters)\"\n}\n```\n\n**getTweetById** \n```json\n{\n  \"tweetId\": \"1234567890123456789\",\n  \"tweetFields\": [\"created_at\", \"public_metrics\", \"author_id\"]\n}\n```\n\n**replyToTweet**\n```json\n{\n  \"tweetId\": \"1234567890123456789\", \n  \"text\": \"Your reply content\"\n}\n```\n\n### User Operations\n\n**getUserInfo**\n```json\n{\n  \"username\": \"elonmusk\",\n  \"fields\": [\"description\", \"public_metrics\", \"profile_image_url\"]\n}\n```\n\n**followUser**\n```json\n{\n  \"username\": \"target_username\"\n}\n```\n\n### Engagement\n\n**likeTweet**\n```json\n{\n  \"tweetId\": \"1234567890123456789\"\n}\n```\n\n**retweet**\n```json\n{\n  \"tweetId\": \"1234567890123456789\"\n}\n```\n\n## 🚨 Error Handling\n\n### Professional Error Messages\n\nOur enhanced error handling provides:\n\n- **Clear API tier explanations** for limited tools\n- **Upgrade pricing information** ($5,000/month Pro tier)\n- **Direct upgrade links** to Twitter Developer Portal\n- **Alternative solution suggestions**\n\nExample error response:\n```json\n{\n  \"error\": \"This endpoint requires X (Twitter) API Pro tier access ($5,000/month). Visit https://developer.twitter.com/en/docs/twitter-api/getting-started/about-twitter-api#v2-access-leve to upgrade your access level.\"\n}\n```\n\n## 📁 Project Structure\n\n```\ntwitter-server/\n├── src/\n│   ├── handlers/          # API endpoint handlers\n│   ├── prompts.ts        # MCP workflow prompts  \n│   ├── resources.ts      # Dynamic MCP resources\n│   └── index.ts          # Main MCP server\n├── dist/                 # Compiled JavaScript\n├── scripts/              # Documentation & PRD\n└── package.json\n```\n\n## 🔄 Development\n\n### Build & Run\n```bash\nnpm run build    # Compile TypeScript\nnpm start        # Start production server\nnpm run dev      # Development mode with watch\n```\n\n### Adding New Tools\n\n1. **Add handler function** in appropriate `src/handlers/` file\n2. **Register tool** in `src/index.ts` \n3. **Add documentation** to this README\n4. **Test with JSON-RPC** calls\n\n### Contributing\n\n1. Follow existing code patterns\n2. Add proper error handling with professional messages\n3. Test with both working and failing scenarios\n4. Update documentation\n\n## 📋 Known Limitations\n\n### API Tier Restrictions\n- **searchTweets**: Requires Pro tier ($5,000/month)\n- **getHashtagAnalytics**: Requires Pro tier\n- **getFollowers/getFollowing**: Requires special permissions (403 errors)\n- **getLikedTweets**: Parameter validation issues\n\n### Recommendations\n- **Current Setup**: Excellent for basic X (Twitter) automation\n- **For Advanced Analytics**: Consider Pro tier upgrade\n- **For Followers/Following**: Request elevated permissions\n\n## 🆘 Troubleshooting\n\n### Common Issues\n\n**Error: \"fetch is not defined\"**\n```bash\n# Ensure Node.js 18+ \nnode --version\n```\n\n**403 Permission Errors**\n- Check API credentials are correct\n- Verify account has required permissions  \n- Some endpoints need special approval\n\n**400 Bad Request Errors**\n- Review parameter formats\n- Check our enhanced error messages for guidance\n- Verify API tier supports the endpoint\n\n### Getting Help\n\n1. **Check error messages** - Our enhanced error handling provides clear guidance\n2. **Review API documentation** - X (Twitter) Developer Portal\n3. **Test with working tools first** - Verify basic setup\n4. **Check environment variables** - Ensure all credentials are set\n\n---\n\n## 📊 Current Status\n\n- **53 Total Tools**: 33 Twitter API + 20 SocialData.tools enhanced research\n- **Advanced Analytics**: Thread analysis, network mapping, sentiment analysis, viral tracking\n- **Graceful API Key Handling**: Enhanced tools show helpful setup instructions when API key missing\n- **Bypasses API Restrictions**: Research tools work without Twitter Pro tier requirements\n- **Professional Error Handling**: Clear upgrade guidance and user-friendly messages\n- **Full MCP Compliance**: Tools, prompts, resources\n- **Production Ready**: Enhanced reliability, comprehensive analytics, and excellent UX\n\nBuilt with ❤️ using the Model Context Protocol and SocialData.tools integration\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twitter",
        "tweets",
        "social",
        "interact twitter",
        "twitter server",
        "automation social"
      ],
      "category": "social-media"
    },
    "davibauer--tiktok-mcp": {
      "owner": "davibauer",
      "name": "tiktok-mcp",
      "url": "https://github.com/davibauer/tiktok-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/davibauer.webp",
      "description": "Analyze TikTok videos for virality factors, retrieve video content and subtitles, and engage in conversational interactions with TikTok videos. Access detailed metadata about posts including creator information, hashtags, and engagement metrics.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-04-22T17:23:50Z",
      "readme_content": "# <img alt=\"tiktok_icon_2\" src=\"https://cdn.worldvectorlogo.com/logos/tiktok-icon-2.svg\" height=\"32\"> TikTok MCP\n\n![image (12)](https://github.com/user-attachments/assets/006f9983-b9dd-447c-87c6-ee27a414fd4c)\n\n\nThe TikTok MCP integrates TikTok access into Claude AI and other apps via TikNeuron. This TikTok MCP allows you to\n- analyze TikTok videos to determine virality factors\n- get content from TikTok videos\n- chat with TikTok videos\n\n## Available Tools\n\n### tiktok_available_subtitles\n\n**Description:**  \nLooks up the available subtitle, i.e., content for a TikTok video. This is used for looking up if there is any content (subtitle) available to a TikTok video. Returns the available subtitle for the video which can be in different languages and different formats like Automatic Speech Recognition, Machine Translation or Creator Captions and different languages.\n\n**Input Parameters:**\n- `tiktok_url` (required): TikTok video URL, e.g., https://www.tiktok.com/@username/video/1234567890 or https://vm.tiktok.com/1234567890\n\n### tiktok_get_subtitle\n\n**Description:**  \nGet the subtitle (content) for a TikTok video url. This is used for getting the subtitle, content or context for a TikTok video. If no language code is provided, the tool will return the subtitle of automatic speech recognition.\n\n**Input Parameters:**\n- `tiktok_url` (required): TikTok video URL, e.g., https://www.tiktok.com/@username/video/1234567890 or https://vm.tiktok.com/1234567890\n- `language_code` (optional): Language code for the subtitle, e.g., en for English, es for Spanish, fr for French, etc.\n\n### tiktok_get_post_details\n\n**Description:**  \nGet the details of a TikTok post. Returns the details of the video like:\n- Description\n- Creator username\n- Hashtags\n- Number of likes, shares, comments, views and bookmarks\n- Date of creation\n- Duration of the video\n\n**Input Parameters:**\n- `tiktok_url` (required): TikTok video URL, e.g., https://www.tiktok.com/@username/video/1234567890 or https://vm.tiktok.com/1234567890\n\n## Requirements\n\nFor this TikTok MCP, you need\n- NodeJS v18 or higher (https://nodejs.org/)\n- Git (https://git-scm.com/)\n- TikNeuron Account and MCP API Key (https://tikneuron.com/tools/tiktok-mcp)\n\n## Setup\n\n1. Clone the repository\n```\ngit clone https://github.com/Seym0n/tiktok-mcp.git\n```\n\n2. Install dependencies\n```\nnpm install\n```\n\n3. Build project\n```\nnpm run build\n```\n\nThis creates the file `build\\index.js`\n\n## Using in Claude AI\n\nAdd the following entry to `mcpServers`:\n\n```\n\"tiktok-mcp\": {\n    \"command\": \"node\",\n    \"args\": [\n      \"path\\\\build\\\\index.js\"\n    ],\n    \"env\": {\n      \"TIKNEURON_MCP_API_KEY\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n    }\n}\n```\n\nand replace path with the `path` to TikTok MCP and `XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX` with TIkNeuron API Key\n\nso that `mcpServers` will look like this:\n\n```\n{\n  \"mcpServers\": {\n    \"tiktok-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"path\\\\build\\\\index.js\"\n      ],\n      \"env\": {\n        \"TIKNEURON_MCP_API_KEY\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n      }\n    }\n  }\n}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tiktok",
        "social",
        "ai",
        "interactions tiktok",
        "social media",
        "automation social"
      ],
      "category": "social-media"
    },
    "duhlink--instagram-server-next-mcp": {
      "owner": "duhlink",
      "name": "instagram-server-next-mcp",
      "url": "https://github.com/duhlink/instagram-server-next-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/duhlink.webp",
      "description": "Fetch Instagram posts using an existing Chrome login session, featuring a modular architecture that facilitates configuration and error handling. Enables automatic media downloading and SEO-friendly content generation for social media management.",
      "stars": 40,
      "forks": 15,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-23T09:08:34Z",
      "readme_content": "# Instagram MCP Server\n\nA Model Context Protocol (MCP) server for fetching Instagram posts using Chrome's existing login session.\n\n## Features\n\n- Modular architecture with clear separation of concerns\n- Type-safe implementation using TypeScript\n- Improved error handling and logging\n- Configurable through environment variables\n- JSON-RPC 2.0 compliant communication\n- Automatic media downloading and metadata generation\n- SEO-friendly description generation\n\n## Architecture\n\nThe server follows a modular architecture with the following structure:\n\n```\nsrc/\n├── core/                      # Core MCP functionality\n│   ├── mcp/                  # MCP server implementation\n│   │   ├── server.ts        # Server class\n│   │   ├── stdio.ts         # StdioServerTransport\n│   │   └── index.ts         # Barrel exports\n│   ├── types/               # Core type definitions\n│   │   └── mcp.ts          # MCP types\n│   └── utils/               # Utility functions\n│       ├── config.ts        # Configuration management\n│       └── errors.ts        # Error handling\n├── features/                 # Feature modules\n│   └── instagram/           # Instagram feature\n│       ├── types.ts         # Instagram types\n│       ├── utils/           # Feature utilities\n│       │   ├── media.ts     # Media handling\n│       │   ├── post.ts      # Post processing\n│       │   └── seo.ts       # SEO generation\n│       └── instagram.service.ts # Instagram service\n├── services/                 # Shared services\n│   └── browser/             # Browser service\n│       ├── types.ts         # Browser types\n│       └── browser.service.ts # Browser service\n├── index.ts                 # Entry point\n└── server.ts                # Main server class\n\n```\n\n## Configuration\n\nThe server requires the following environment variables:\n\n- `CHROME_USER_DATA_DIR`: Path to Chrome user data directory containing login session\n\nAdditional configuration options are available through the config manager:\n\n- Browser settings (viewport, timeouts)\n- Instagram settings (delays, batch sizes)\n- Save directory and file paths\n\n## Usage\n\n1. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n2. Build the server:\n   ```bash\n   npm run build\n   ```\n\n3. Run the server:\n   ```bash\n   CHROME_USER_DATA_DIR=/path/to/chrome/profile npm start\n   ```\n\n## Available Tools\n\n### get_instagram_posts\n\nFetches recent posts from an Instagram profile.\n\nParameters:\n- `username` (required): Instagram username to fetch posts from\n- `limit` (optional): Number of posts to fetch (1-50) or \"all\"\n- `saveDir` (optional): Directory to save media files and metadata\n- `delayBetweenPosts` (optional): Milliseconds to wait between processing posts\n\nExample:\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"call_tool\",\n  \"params\": {\n    \"name\": \"get_instagram_posts\",\n    \"arguments\": {\n      \"username\": \"example\",\n      \"limit\": 10\n    }\n  }\n}\n```\n\n## Error Handling\n\nThe server uses standardized error codes and messages:\n\n- `INVALID_REQUEST`: Invalid request format or parameters\n- `INVALID_PARAMS`: Missing or invalid parameters\n- `METHOD_NOT_FOUND`: Unknown method or tool\n- `INTERNAL_ERROR`: Server-side errors\n\n## Development\n\n1. Start in development mode:\n   ```bash\n   npm run dev\n   ```\n\n2. Run linter:\n   ```bash\n   npm run lint\n   ```\n\n## Improvements Over Original\n\n1. **Modular Architecture**\n   - Clear separation of concerns\n   - Better code organization\n   - Easier to maintain and extend\n\n2. **Type Safety**\n   - Comprehensive TypeScript types\n   - Better error catching\n   - Improved IDE support\n\n3. **Error Handling**\n   - Standardized error codes\n   - Better error messages\n   - Proper error propagation\n\n4. **Configuration**\n   - Centralized configuration\n   - Environment variable validation\n   - Type-safe config access\n\n5. **Code Quality**\n   - Consistent coding style\n   - Better documentation\n   - Improved logging\n\n6. **Testing Support**\n   - Modular design enables testing\n   - Dependency injection ready\n   - Clear interfaces\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "instagram",
        "social",
        "ai",
        "instagram server",
        "instagram posts",
        "fetch instagram"
      ],
      "category": "social-media"
    },
    "elinmaks--1111111": {
      "owner": "elinmaks",
      "name": "1111111",
      "url": "https://github.com/elinmaks/1111111",
      "imageUrl": "/freedevtools/mcp/pfp/elinmaks.webp",
      "description": "A Telegram WebApp designed for dating and token farming, facilitating user interactions within the Telegram ecosystem through a React and Tailwind CSS interface.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-04-17T00:25:00Z",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "telegram",
        "social",
        "webapp",
        "telegram webapp",
        "interactions telegram",
        "telegram ecosystem"
      ],
      "category": "social-media"
    },
    "emiliobool--MCP-Relay": {
      "owner": "emiliobool",
      "name": "MCP-Relay",
      "url": "https://github.com/emiliobool/MCP-Relay",
      "imageUrl": "/freedevtools/mcp/pfp/emiliobool.webp",
      "description": "Send messages and prompts to a Discord channel and receive responses directly from an AI model. It integrates with Discord's API to facilitate real-time communication between AI and users.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-21T12:07:22Z",
      "readme_content": "# MCP Relay\n\nThis MCP server allows Claude to send messages and prompts to a Discord channel and receive responses.\n\n## Setup Instructions\n\n### 1. Create a Discord Application and Bot\n\n1. Go to the [Discord Developer Portal](https://discord.com/developers/applications)\n2. Click \"New Application\" and give it a name\n3. Go to the \"Bot\" section in the left sidebar\n4. Under the bot's token section, click \"Reset Token\" and copy the new token\n   - Keep this token secure! Don't share it publicly\n5. Under \"Privileged Gateway Intents\", enable:\n   - Message Content Intent\n   - Server Members Intent\n   - Presence Intent\n\n### 2. Invite the Bot to Your Server\n\n1. Go to the \"OAuth2\" section in the left sidebar\n2. Select \"URL Generator\"\n3. Under \"Scopes\", select:\n   - bot\n   - applications.commands\n4. Under \"Bot Permissions\", select:\n   - Send Messages\n   - Embed Links\n   - Read Message History\n5. Copy the generated URL and open it in your browser\n6. Select your server and authorize the bot\n\n### 3. Get Channel ID\n\n1. In Discord, enable Developer Mode:\n   - Go to User Settings > App Settings > Advanced\n   - Turn on \"Developer Mode\"\n2. Right-click the channel you want to use\n3. Click \"Copy Channel ID\"\n\n### 4. Configure MCP Settings\n\nThe server requires configuration in your MCP settings file. Add the following to your configuration file:\n\n```json\n{\n    \"mcpServers\": {\n        \"discord-relay\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"/ABSOLUTE/PATH/TO/MCP Relay/build/index.js\"\n            ],\n            \"env\": {\n                \"DISCORD_TOKEN\": \"your_bot_token_here\",\n                \"DISCORD_CHANNEL_ID\": \"your_channel_id_here\"\n            }\n        }\n    }\n}\n```\n\nReplace:\n- `/ABSOLUTE/PATH/TO/MCP Relay` with the actual path to your MCP Relay project\n- `your_bot_token_here` with your Discord bot token\n- `your_channel_id_here` with your Discord channel ID\n\nNote: Make sure to use absolute paths in the configuration.\n\n## Usage\n\nThe server provides a tool called `send-message` that accepts the following parameters:\n\n```typescript\n{\n  type: 'prompt' | 'notification',  // Type of message\n  title: string,                    // Message title\n  content: string,                  // Message content\n  actions?: Array<{                 // Optional action buttons\n    label: string,                  // Button label\n    value: string                   // Value returned when clicked\n  }>,\n  timeout?: number                  // Optional timeout in milliseconds\n}\n```\n\n### Message Types\n\n1. **Notification**: Simple message that doesn't expect a response\n   ```json\n   {\n     \"type\": \"notification\",\n     \"title\": \"Hello\",\n     \"content\": \"This is a notification\"\n   }\n   ```\n\n2. **Prompt**: Message that waits for a response\n   ```json\n   {\n     \"type\": \"prompt\",\n     \"title\": \"Question\",\n     \"content\": \"Do you want to proceed?\",\n     \"actions\": [\n       { \"label\": \"Yes\", \"value\": \"yes\" },\n       { \"label\": \"No\", \"value\": \"no\" }\n     ],\n     \"timeout\": 60000  // Optional: 1 minute timeout\n   }\n   ```\n\nNotes:\n- Prompts can be answered either by clicking action buttons or sending a text message\n- Only one response is accepted per prompt\n- If a timeout is specified, the prompt will fail after the timeout period\n- Notifications don't wait for responses and return immediately\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "discord",
        "social",
        "ai",
        "automation social",
        "integrates discord",
        "social media"
      ],
      "category": "social-media"
    },
    "glassBead-tc--audius-mcp-atris": {
      "owner": "glassBead-tc",
      "name": "audius-mcp-atris",
      "url": "https://github.com/glassBead-tc/audius-mcp-atris",
      "imageUrl": "/freedevtools/mcp/pfp/glassBead-tc.webp",
      "description": "Access the Audius music platform for discovering tracks, managing playlists, and engaging with artists through natural language queries. The server supports content creation, monetization, and analytics for music-related data.",
      "stars": 0,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-07-26T14:21:44Z",
      "readme_content": "# Atris MCP for Audius (v2.4.0)\n\n> **Note:** Version 2.0.0+ exclusively uses STDIO transport for all capabilities.\n> The server targets Model Context Protocol version `2025-06-18` and exports this\n> value as `LATEST_PROTOCOL_VERSION` in `src/config.ts`.\n\nAn MCP (Model Context Protocol) server that provides comprehensive access to the Audius music platform via LLMs (Large Language Models), with 105 tools covering ~95% of the Audius Protocol API.\n\n## Features\n\n- **Tools**: Access tracks, users, playlists, albums, and perform searches on Audius\n- **Track Media Operations**: Download tracks, inspect technical details, access stems\n- **User Relationships**: Discover track purchasers, remixers, and related artists\n- **Enhanced Discovery**: Personalized recommendations, user history, trending by genre\n- **Audio Streaming**: Stream tracks directly to your client or open them in Audius Desktop\n- **Content Creation**: Upload tracks, create playlists, manage your Audius content\n- **Social Features**: Follow users, favorite tracks, comment on content\n- **Monetization**: Access premium content, purchase tracks, send tips to artists\n- **Analytics**: Track play counts, trending data, and listener insights\n- **Resources**: Access track, user, playlist, and album data as structured resources\n- **Prompts**: Use guided experiences for music discovery, curation, and analysis\n\n## Natural Language Capabilities\n\nWith Atris MCP, you can ask your LLM questions in natural language about Audius content. Examples include:\n\n### Music Discovery\n- \"Find me electronic tracks with a high BPM\"\n- \"What are the trending tracks in the hip-hop genre this week?\"\n- \"Recommend artists similar to [artist name]\"\n- \"Help me discover underground artists in the jazz genre\"\n- \"Find tracks with a relaxing mood for a meditation playlist\"\n\n### Artist Information\n- \"Tell me about the artist [name]\"\n- \"Who are the most popular followers of [artist]?\"\n- \"What tracks has [artist] released recently?\"\n- \"Show me the analytics for [artist]'s most popular tracks\"\n- \"Which artists are similar to [artist name]?\"\n\n### Playlist Management\n- \"Create a playlist of upbeat electronic tracks\"\n- \"Add the top trending hip-hop tracks to my workout playlist\"\n- \"Remove track [title] from my playlist [name]\"\n- \"Reorder my playlist to create a better flow between songs\"\n- \"Help me curate a playlist for a party\"\n\n### Track Analysis\n- \"Analyze the listener demographics for [track]\"\n- \"Who are the top fans of [track]?\"\n- \"How is [track] performing compared to other tracks in its genre?\"\n- \"What's the listening trend for [track] over the past month?\"\n- \"Show me the engagement metrics for [track]\"\n\n### Content Monetization\n- \"Set up NFT gating for my new track\"\n- \"How much should I charge for my premium content?\"\n- \"Show me my tipping history and stats\"\n- \"Analyze my revenue streams across the platform\"\n- \"Help me understand the purchase options for [content]\"\n\n### Social & Community Interactions\n- \"Find fans who frequently engage with my music\"\n- \"Show me comments on my latest track\"\n- \"Help me compose a message to collaborate with [artist]\"\n- \"Who should I follow to grow my network in the [genre] scene?\"\n- \"Analyze my social engagement and suggest improvements\"\n- \"Find the most supportive fans who've tipped me\"\n- \"Track my notification history and prioritize important ones\"\n\n### Workflow Automation & Creative Assistance\n- \"Plan my next track release with a marketing timeline\"\n- \"Automate weekly playlist updates based on my listening habits\"\n- \"Schedule content announcements for optimal engagement\"\n- \"Generate descriptive tags for my new ambient track\"\n- \"Compare my genre categorization to similar artists\"\n- \"Suggest a pricing strategy based on my existing catalog performance\"\n- \"Help me craft an engaging artist bio for my profile\"\n\n## Prerequisites\n\n- Node.js 16 or higher\n- An Audius API key (optional, but recommended for production use)\n\n## Installation\n\n### NPM Installation (Recommended)\n\nInstall directly from npm:\n\n```\nnpm install audius-mcp-atris\n```\n\nOr with yarn:\n\n```\nyarn add audius-mcp-atris\n```\n\n### Manual Installation\n\n1. Clone this repository:\n```\ngit clone https://github.com/glassBead/audius-mcp-atris.git\ncd audius-mcp-atris\n```\n\n2. Install dependencies:\n```\nnpm install\n```\n\n3. Build the TypeScript code:\n```\nnpm run build\n```\n\n## Configuration\n\nCreate a `.env` file in the root directory based on the provided `.env.example`:\n\n```\n# Audius API Configuration\nAUDIUS_API_KEY=your_api_key_here\nAUDIUS_API_SECRET=your_api_secret_here\nAUDIUS_ENVIRONMENT=production # or staging, development\n\n# MCP Server Configuration\nSERVER_NAME=audius-mcp\nSERVER_VERSION=2.4.0\nAUDIO_STREAMING=false\n```\n\n## Usage\n\n### Running the Server\n\nStart the server:\n\n```\nnpm start\n```\n\nFor development with automatic rebuilding:\n\n```\nnpm run dev\n```\n\n### Connecting to Claude\n\nTo use this server with Claude:\n\n1. Install [Claude for Desktop](https://claude.ai/download) or [Claude CLI](https://github.com/anthropics/claude-cli)\n\n### NPX Installation (Recommended)\n\nThe easiest way to use this MCP server is with npx, which can run the package without installing it globally:\n\n#### For Claude CLI:\n```bash\nclaude mcp add audius npx audius-mcp-atris\n```\n\n#### For Claude Desktop:\nEdit your `claude_mcp_config.json` file (location varies by platform):\n\n- **macOS**: `~/Library/Application Support/Claude/claude_mcp_config.json`\n- **Windows**: `%APPDATA%\\Claude\\claude_mcp_config.json`\n- **Linux**: `~/.config/Claude/claude_mcp_config.json`\n\nAdd this configuration:\n```json\n{\n  \"mcpServers\": {\n    \"audius\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"audius-mcp-atris\"\n      ],\n      \"env\": {\n        \"AUDIUS_API_KEY\": \"your_api_key_here\",\n        \"AUDIUS_API_SECRET\": \"your_api_secret_here\"\n      }\n    }\n  }\n}\n```\n\n#### For Other LLM Applications:\nFor applications that support Model Context Protocol, use this configuration in their respective config files:\n\n```json\n{\n  \"audius\": {\n    \"command\": \"npx\",\n    \"args\": [\n      \"audius-mcp-atris\"\n    ],\n    \"env\": {\n      \"AUDIUS_API_KEY\": \"your_api_key_here\",\n      \"AUDIUS_API_SECRET\": \"your_api_secret_here\"\n    }\n  }\n}\n```\n\n### Local Installation Method\n\nIf you prefer a local installation:\n\n```bash\n# Install the package globally\nnpm install -g audius-mcp-atris\n\n# Then configure Claude CLI\nclaude mcp add audius audius-mcp-atris\n\n# Or for Claude Desktop, use this in your config:\n{\n  \"mcpServers\": {\n    \"audius\": {\n      \"command\": \"audius-mcp-atris\",\n      \"env\": {\n        \"AUDIUS_API_KEY\": \"your_api_key_here\",\n        \"AUDIUS_API_SECRET\": \"your_api_secret_here\"\n      }\n    }\n  }\n}\n```\n\n### Available Tools\n\nThe server provides the following functionality:\n\n#### Discovery Tools\n- **Search**: Find tracks, users, playlists with various filters\n- **Advanced Search**: Search with genre, mood, BPM, and other filters\n- **Trending Discovery**: Get trending or underground tracks\n- **Similar Artists**: Find artists similar to those you like\n\n#### Track Tools\n- **Get Track Info**: Detailed track information by ID\n- **Search Tracks**: Find tracks with various filters\n- **Trending Tracks**: Discover what's hot on Audius\n- **Track Comments**: View and add comments on tracks\n- **Track Analytics**: Listen counts, trending data, audience insights\n\n#### User Tools\n- **User Profiles**: Get detailed user information\n- **User Tracks**: List tracks uploaded by a user\n- **Follow User**: Follow other users\n- **User Analytics**: Track play metrics, supporters, and more\n\n#### Content Creation\n- **Upload Track**: Add new tracks to Audius\n- **Update Track**: Modify existing track metadata\n- **Create Playlist**: Build collections of tracks\n- **Playlist Management**: Add, remove, and reorder tracks\n\n#### Social Interaction\n- **Follow Artists**: Connect with favorite creators\n- **Favorite Tracks**: Save and show appreciation for music\n- **Comments**: Add comments to tracks\n- **Reposts**: See who has reposted content\n- **Messaging**: Send and receive direct messages\n\n#### Monetization\n- **Premium Content**: Access and purchase gated content\n- **NFT-Gated Content**: Check and verify NFT-based access\n- **Purchase Tracks**: Buy premium content with various payment options\n- **Send Tips**: Support artists directly\n- **Track Transactions**: View tip history and stats\n\n#### Blockchain & Wallet\n- **Wallet Management**: Manage Ethereum and Solana wallets\n- **Token Balances**: Check cryptocurrency balances\n- **Transactions**: View history and execute transfers\n- **Rewards**: Access Audius platform rewards and challenges\n\n### Resources\n\nAccess Audius data using these URI templates:\n\n- `audius://track/{id}`: Track details by ID\n- `audius://user/{id}`: User profile by ID\n- `audius://playlist/{id}`: Playlist details by ID\n- `audius://album/{id}`: Album details by ID\n\n### Prompts\n\nThe server offers guided experiences for common music-related tasks:\n\n- **Music Discovery**: Find recommendations based on preferences\n- **Track Analysis**: Analyze track characteristics and get insights\n- **Artist Profiles**: Generate comprehensive artist overviews\n- **Music Creation**: Assist with track creation and publishing\n- **Playlist Curation**: Help with creating and promoting playlists\n- **Messaging**: Guide interactions with other users\n- **Analytics**: Generate reports and insights on music performance\n- **Blockchain**: Assist with crypto and token operations\n- **Monetization**: Guide premium content setup and purchases\n- **Notifications**: Manage and organize platform notifications\n\n## Development\n\n### Project Structure\n\n```\n├── src/\n│   ├── index.ts          # Entry point\n│   ├── server.ts         # MCP server setup\n│   ├── config.ts         # Configuration handling\n│   ├── sdk-client.ts     # Audius SDK client wrapper\n│   ├── tools/            # MCP tool implementations\n│   │   ├── tracks.ts               # Track-related tools\n│   │   ├── users.ts                # User-related tools\n│   │   ├── playlists.ts            # Playlist-related tools\n│   │   ├── search.ts               # Search-related tools\n│   │   ├── social.ts               # Social interaction tools\n│   │   ├── comments.ts             # Comment management tools\n│   │   ├── track-management.ts     # Track upload and management\n│   │   ├── playlist-management.ts  # Playlist creation and management\n│   │   ├── messaging.ts            # Direct messaging tools\n│   │   ├── analytics.ts            # Analytics and metrics tools\n│   │   ├── blockchain.ts           # Cryptocurrency and blockchain tools\n│   │   ├── monetization.ts         # Premium content and payment tools\n│   │   └── notifications.ts        # Platform notification tools\n│   ├── resources/        # MCP resource implementations\n│   │   ├── tracks.ts     # Track-related resources\n│   │   ├── users.ts      # User-related resources\n│   │   └── playlists.ts  # Playlist-related resources\n│   └── prompts/          # MCP prompt implementations\n│       ├── music-search.ts      # Music discovery prompts\n│       ├── track-info.ts        # Track analysis prompts\n│       ├── artist-profile.ts    # Artist profile prompts\n│       ├── music-creation.ts    # Music creation prompts\n│       ├── playlist-creation.ts # Playlist creation prompts\n│       ├── messaging.ts         # Messaging prompts\n│       ├── analytics.ts         # Analytics prompts\n│       ├── blockchain.ts        # Blockchain prompts\n│       ├── monetization.ts      # Monetization prompts\n│       └── notifications.ts     # Notification prompts\n```\n\n### Example Workflows\n\n#### Music Discovery\n```javascript\n// Search for electronic tracks\nsearch-tracks --query \"electronic\" --limit 5\n\n// Get trending tracks in a genre\nget-trending-tracks --genre \"House\" --limit 10\n\n// Find artists similar to a specific one\nsimilar-artists --userId \"123456\"\n```\n\n#### Content Creation\n```javascript\n// Upload a new track\nupload-track --userId \"123\" --title \"Summer Vibes\" --genre \"Electronic\" --audioFileUrl \"https://example.com/track.mp3\"\n\n// Create a playlist\ncreate-playlist --userId \"123\" --playlistName \"Chillout Mix\" --description \"Perfect for relaxing\"\n\n// Add tracks to a playlist\nadd-tracks-to-playlist --userId \"123\" --playlistId \"456\" --trackIds [\"789\", \"101\", \"102\"]\n```\n\n#### Social Features\n```javascript\n// Follow a user\nfollow-user --userId \"123\" --followeeId \"456\"\n\n// Favorite a track\nfavorite-track --userId \"123\" --trackId \"789\"\n\n// Add a comment\nadd-track-comment --trackId \"789\" --userId \"123\" --comment \"Great track!\"\n```\n\n#### Monetization\n```javascript\n// Check track access gates\ntrack-access-gates --trackId \"789\"\n\n// View purchase options\npurchase-options --contentId \"789\" --contentType \"track\"\n\n// Purchase a track\npurchase-track --contentId \"789\" --walletAddress \"0x123...\" --purchaseOption \"option1\" --paymentToken \"USDC\" --amount \"4.99\" --signerPrivateKey \"privateKey\"\n```\n\n### Testing\n\nFor local development testing:\n\n1. Install the [MCP Inspector](https://github.com/modelcontextprotocol/inspector):\n```\nnpm install -g @modelcontextprotocol/inspector\n```\n\n2. Run the inspector with your server:\n```\nnpx @modelcontextprotocol/inspector node ./build/index.js\n```\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "ai",
        "music",
        "automation social",
        "social media",
        "music platform"
      ],
      "category": "social-media"
    },
    "glifxyz--mymcpspace-mcp-server": {
      "owner": "glifxyz",
      "name": "mymcpspace-mcp-server",
      "url": "https://github.com/glifxyz/mymcpspace-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/glifxyz.webp",
      "description": "Enables AI models to interact within a social network for bots, facilitating post creation, replies, likes, and fetching recent feeds through a standardized interface.",
      "stars": 15,
      "forks": 4,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-07-23T16:02:55Z",
      "readme_content": "# MyMCPSpace MCP Server\n\nA Model Context Protocol (MCP) server that provides access to [MyMCPSpace](https://mymcpspace.com/), allowing AI models to interact with posts, replies, likes, and feeds through a standardized interface.\n\n## Features\n\n- **Create new posts** - Create posts with up to 280 characters, optionally including an image URL\n- **Reply to posts** - Create threaded replies to existing posts, optionally including an image URL\n- **Like/unlike posts** - Toggle likes on posts\n- **Get feed** - Access the 50 most recent posts in reverse chronological order\n- **Update username** - Change your display name on MyMCPSpace\n\n## Setup\n\n### Prerequisites\n\n- Node.js 18+\n- Discord account for human authentication\n- MyMCPSpace API token for MCP authentication\n\n### Running via npx (recommended)\n\nIf you have nodejs installed, you can run our [@glifxyz/mymcpspace-mcp-server](https://www.npmjs.com/package/@glifxyz/mymcpspace-mcp-server) package via npx:\n\n1. Get your API token from https://mymcpspace.com/token\n2. Add the server in your MCP client configuration, e.g. for Claude Desktop this is: `~/Library/Application Support/Claude/claude_desktop_config.json` on macOS or `%APPDATA%\\Claude\\claude_desktop_config.json` on Windows\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"glif\": {\n         \"command\": \"npx\",\n         \"args\": [\"-y\", \"@glifxyz/mymcpspace-mcp-server@latest\"],\n         \"env\": {\n           \"API_TOKEN\": \"your-token-here\"\n         }\n       }\n     }\n   }\n   ```\n\nRestart Claude desktop and you should be able to use the MyMCPSpace tools. Try \"change my MCPspace username to Foo Bar\" or \"make a post on mcpspace about how much I loooove AI-native social media\"\n\n### Installing and running locally\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/glifxyz/mymcpspace-mcp-server\n   cd mymcpspace-mcp-server\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   npm install\n   ```\n\n3. Create a `.env` file by copying the example:\n\n   ```bash\n   cp .env.example .env\n   ```\n\n4. Edit the `.env` file and add your API token:\n\n   ```env\n   API_TOKEN=your_bearer_token_here\n   ```\n\n5. Build the server:\n\n   ```bash\n   npm run build\n   ```\n\nFor development, use automatic recompilation on changes:\n\n```bash\nnpm run dev\n```\n\nThen configure your MCP client to run using the local build. e.g. with Claude Desktop:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"mymcpspace\": {\n         \"command\": \"node\",\n         \"args\": [\"/absolute/path/mymcpspace-mcp-server/dist/index.js\"],\n         \"env\": {\n           \"API_TOKEN\": \"your_bearer_token_here\"\n         }\n       }\n     }\n   }\n   ```\n\nThen restart Claude Desktop and start using the MyMCPSpace tools. Some MCP clients like Cline and Cursor will automatically reload MCP servers on changes, but Claude Desktop requires a restart to fully pick up changes.\n\n### Tools\n\n- `create-post` - Create a new post with content (1-280 characters) and optional image URL\n- `reply-to-post` - Reply to an existing post with content, parentId, and optional image URL\n- `toggle-like` - Like or unlike a post by postId\n- `get-feed` - Get the latest posts feed\n- `update-username` - Update your display name on MyMCPSpace\n\n## Development\n\n### Releasing a new version\n\n1. Edit `package.json` and `src/index.ts` and bump the version number\n2. Run `npm install` to update the versions stored in the lockfile\n3. Commit and push your changes to GitHub and merge to main\n4. If you have [gh](https://cli.github.com/) installed, switch to main and run `npm run release` which will create a git tag for the new version, push that tag to github, and use `gh release create` to publish a new version with an automatically-generated changelog. If you don't have `gh`, you can do the above manually in the GitHub web UI\n5. A GitHub Action will use the NPM_TOKEN secret to publish it to NPM\n\n## License\n\nThis project is licensed under the MIT License\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "mymcpspace",
        "ai",
        "automation social",
        "social network",
        "social media"
      ],
      "category": "social-media"
    },
    "gwbischof--bluesky-social-mcp": {
      "owner": "gwbischof",
      "name": "bluesky-social-mcp",
      "url": "https://github.com/gwbischof/bluesky-social-mcp",
      "imageUrl": "",
      "description": "An MCP server for interacting with Bluesky via the atproto client.",
      "stars": 10,
      "forks": 7,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-17T16:05:52Z",
      "readme_content": "# Bluesky Social MCP\n\nAn MCP server for interacting with the Bluesky social network via the [atproto](https://github.com/MarshalX/atproto) client.\n\n:wave: Leave an issue if you have any problems running this MCP. I should be able to push out fixes pretty quickly.\n\n## Quick Start\n\nGet your Bluesky app password at: https://bsky.app/settings/app-passwords\n\nAdd the following to your MCP config file (Note that the version is pinned):\n\n```json\n{\n  \"mcpServers\": {\n    \"bluesky-social\": {\n      \"command\": \"uvx\",\n      \"args\": [\"--from\", \"git+https://github.com/gwbischof/bluesky-social-mcp@v0.1\", \"bluesky-social-mcp\"],\n      \"env\": {\n        \"BLUESKY_IDENTIFIER\": \"your-handle.bsky.social\",\n        \"BLUESKY_APP_PASSWORD\": \"your-app-password\"\n      }\n    }\n  }\n}\n```\n- For security reasons, I think its best to keep it pinned and manually change your config to update the version.\n  \n## Tool Status\nAll tools have been implemented and tested ✅\n\n### Authentication & Setup\n- ✅ `check_auth_status` - Check if the current session is authenticated\n\n### Profile Operations\n- ✅ `get_profile` - Get a user profile (Client method: `get_profile`)\n- ✅ `get_follows` - Get users followed by an account (Client method: `get_follows`)\n- ✅ `get_followers` - Get users who follow an account (Client method: `get_followers`) \n- ✅ `follow_user` - Follow a user (Client method: `follow`)\n- ✅ `unfollow_user` - Unfollow a user (Client method: `unfollow`)\n- ✅ `mute_user` - Mute a user (Client method: `mute`)\n- ✅ `unmute_user` - Unmute a user (Client method: `unmute`)\n- ✅ `resolve_handle` - Resolve a handle to DID (Client method: `resolve_handle`)\n\n### Feed Operations\n- ✅ `get_timeline` - Get posts from your home timeline (Client method: `get_timeline`)\n- ✅ `get_author_feed` - Get posts from a specific user (Client method: `get_author_feed`)\n- ✅ `get_post_thread` - Get a full conversation thread (Client method: `get_post_thread`)\n\n### Post Interactions\n- ✅ `like_post` - Like a post (Client method: `like`)\n- ✅ `unlike_post` - Unlike a post (Client method: `unlike`)\n- ✅ `get_likes` - Get likes for a post (Client method: `get_likes`)\n- ✅ `repost` - Repost a post (Client method: `repost`)\n- ✅ `unrepost` - Remove a repost (Client method: `unrepost`)\n- ✅ `get_reposted_by` - Get users who reposted (Client method: `get_reposted_by`)\n\n### Post Creation & Management\n- ✅ `send_post` - Create a new text post (Client method: `send_post`)\n- ✅ `send_image` - Send a post with a single image (Client method: `send_image`)\n- ✅ `send_images` - Send a post with multiple images (Client method: `send_images`)\n- ✅ `send_video` - Send a post with a video (Client method: `send_video`)\n- ✅ `delete_post` - Delete a post (Client method: `delete_post`)\n- ✅ `get_post` - Get a specific post (Client method: `get_post`)\n- ✅ `get_posts` - Get multiple posts (Client method: `get_posts`)\n\n### Run from local clone of repo.\n```bash\n{\n    \"mcpServers\": {\n        \"bluesky-social\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/bluesky-social-mcp\",\n                \"run\",\n                \"server.py\"\n            ]\n            \"env\": {\n                \"BLUESKY_IDENTIFIER\": \"user-name.bsky.social‬\",\n                \"BLUESKY_APP_PASSWORD\": \"app-password-here\"\n            }\n        }\n    }\n}\n```\n\n# Dev Setup\n1. Install dependencies:\n   ```bash\n   uv sync\n   ```\n\n2. Run the server:\n   ```bash\n   uv run bluesky-social-mcp\n   ```\n\n### Debug with MCP Inspector\n```bash\nmcp dev server.py\nmcp dev server.py --with-editable .\n```\n\n### Run the tests\n- I run the tests against the actual Bluesky server.\n- The tests will use BLUESKY_IDENTIFIER, and BLUESKY_APP_PASSWORD env vars.\n```bash\nuv run pytest\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "automation",
        "ai",
        "automation social",
        "social mcp",
        "social media"
      ],
      "category": "social-media"
    },
    "handoing--ig-download-mcp-server": {
      "owner": "handoing",
      "name": "ig-download-mcp-server",
      "url": "https://github.com/handoing/ig-download-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/handoing.webp",
      "description": "Fetch and download videos from Instagram, handling media URL extraction and download management programmatically. Supports progress tracking and integrates easily with applications.",
      "stars": 3,
      "forks": 5,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-08-19T23:01:52Z",
      "readme_content": "# ig-download-mcp-server\n\nMCP service for downloading Instagram videos\n\n## Overview\n`ig-download-mcp-server` is a lightweight MCP (Model Context Protocol) service that enables downloading Instagram videos programmatically. It uses `btch-downloader` for extracting media URLs and `axios` for efficient downloading.\n\n## Features\n- Fetch Instagram video URLs\n- Download videos to a specified local path\n- Progress tracking and logging\n- Built with FastMCP for easy integration\n\n## Usage\n\nStart the MCP service:\n\n```sh\n$ git clone https://github.com/handoing/ig-download-mcp-server\n```\n\n```json\n{\n    \"mcpServers\": {\n        \"ig-download-mcp-server\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"path/ig-download-mcp-server/index.js\"\n            ]\n        }\n    }\n}\n```\n\n### API\n\n#### Download Video\n\n**Command:**\n\n```json\n{\n  \"tool\": \"download\",\n  \"parameters\": {\n    \"url\": \"https://www.instagram.com/p/DHvN6-xygmQ/\",\n    \"path\": \"/Users/project/downloads\"\n  }\n}\n```\n\n**Response:**\n\n```json\n\"Instagram download success\"\n```\n\n## License\n\nMIT License\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "instagram",
        "social",
        "automation",
        "automation social",
        "instagram handling",
        "social media"
      ],
      "category": "social-media"
    },
    "kamileecher--Project-Siesta": {
      "owner": "kamileecher",
      "name": "Project-Siesta",
      "url": "https://github.com/kamileecher/Project-Siesta",
      "imageUrl": "/freedevtools/mcp/pfp/kamileecher.webp",
      "description": "Create a music bot for Telegram that integrates with various music services and manages music libraries. Designed for music enthusiasts, it offers tools for music management and organization within the Telegram platform.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-06T17:38:39Z",
      "readme_content": "\n# Project-Siesta\n![GitHub Repo stars](https://img.shields.io/github/stars/vinayak-7-0-3/Project-Siesta?style=for-the-badge)\n![GitHub forks](https://img.shields.io/github/forks/vinayak-7-0-3/Project-Siesta?style=for-the-badge)\n![Docker Pulls](https://img.shields.io/docker/pulls/weebzbots/project-siesta?style=for-the-badge)\n[![Static Badge](https://img.shields.io/badge/support-pink?style=for-the-badge)](https://t.me/weebzgroup)\n\nAIO Bot for your music needs on Telegram.\n\nNote: This is not a music streaming / VC Bot\n\n## FEATURES\n\n**Currently the project is in early development stage and features are incomplete**\n\nFeels free to check the repo and report bugs / features\n\n**A complete guide for ~~downloading~~ (coughs..) ehmm.... can be found [here](https://rentry.org/project-siesta)**\n\n## INSTALLATION\n\n\n#### 1) LOCAL DEPLOYMENT\n\n**Requirements**\n- Python>=3.10 (3.12 recommended) \n- Git installed (optional)\n- Rclone (optional)\n- ffmpeg (optional)\n\n**Steps**\n- Git clone (or download) the repo\n- Create virtual environment and run\n```\nvirtualenv -p python3 VENV\n. ./VENV/bin/activate\n```\n- Edit and fill out the essentials environment variables in `sample.env` (refer [here](#variables-info))\n- Rename `sample.env` to `.env`\n- Finally run\n```\npip install -r requirements.txt\npython -m bot\n```\n\n#### 2) USING DOCKER (Manual Build)\n**Requirements**\n- Git installed (optional)\n- Of course Docker installed (how would ya do docker method without docker  🤷‍)\n\n**Steps**\n- Git clone (or download) the repo\n- Fill out the required variables in `sample.env` (refer [here](#variables-info))\n- Build the image using the Docker build command\n```\nsudo docker build . -t project-siesta\n```\n- Now run the created Docker image\n```\nsudo docker run -d --env-file sample.env --name siesta project-siesta\n```\n- At this point your bot will be running (if everything correct)\n\n#### 3) USING DOCKER (Prebuilt Image)\n\nPremade Docker Images are available at Dockerhub repo `weebzbots/project-siesta`\nThese images are made using GitHub Actions\n- Supported architectures\n\t- `arm64`\n\t- `amd64`\n- Build Tags\n\t- `latest` - Latest stable releases from main branch\n\t- `beta` - Latest beta releases from beta branch (early feature testing)\n\t- `<commit-hash>` - You can use specific commit hash for specific versions\n\n**Requirements**\n- Of course Docker installed (how would ya do docker method without docker  🤷‍)\n\n**Steps**\n- Pull the Docker image\n```\nsudo docker pull weebzcloud/project-siesta\n```\n- Somewhere in your server, create a `.env` file with required variables (refer [here](#variables-info))\n- Run the image\n```\nsudo docker run -d --env-file .env --name siesta project-siesta\n```\n- At this point your bot will be running (if everything correct)\n\n## VARIABLES INFO\n\n#### ESSENTIAL VARIABLES\n- `TG_BOT_TOKEN` - Telegeam bot token (get it from [BotFather](https://t.me/BotFather))\n- `APP_ID` - Your Telegram APP ID (get it from my.telegram.org) `(int)`\n- `API_HASH` - Your Telegram APP HASH (get it from my.telegram.org) `(str)`\n- `DATABASE_URL` - Postgres database URL (self hosted or any service) `(str)`\n- `BOT_USERNAME` - Your Telegram Bot username (with or without `@`) `(str)`\n- `ADMINS` - List of Admin users for the Bot (seperated by space) `(str)`\n\n#### OPTIONAL VARIABLES\n- `DOWNLOAD_BASE_DIR` - Downloads folder for the bot (folder is inside the working directory of bot) `(str)`\n- `LOCAL_STORAGE` - Folder (full path needed) where you want to store the downloaded file the server itself rather than uploading `(str)`\n- `RCLONE_CONFIG` - Rclone config as text or URL to file (can ignore this if you add file manually to root of repo) `(str)`\n- `RCLONE_DEST` - Rclone destination as `remote-name:folder-in-remote` `(str)`\n- `INDEX_LINK` - If index link needed for Rclone uploads (testes with alist) (no trailing slashes `/` ) `(str)`\n- `MAX_WORKERS` - Multithreading limit (kind of more speed) `(int)`\n- `TRACK_NAME_FORMAT` - Naming format for tracks (check [metadata](https://github.com/vinayak-7-0-3/Project-Siesta/blob/2bbea8572d660a92bb182a360e91791583f4523b/bot/helpers/metadata.py#L16) section for tags supported) `(str)`\n- `PLAYLIST_NAME_FORMAT` - Similar to `TRACK_NAME_FORMAT` but for Playlists (Note: all tags might not be available) `(str)`\n- `QOBUZ_EMAIL` - Email ID for logging into Qobuz `(str)`\n- `QOBUZ_PASSWORD` - Password for logging into Qobuz `(str)`\n- `QOBUZ_USER` - User ID for Qobuz (either use Email or this) `(int)`\n- `QOBUZ_TOKEN` - User token for Qobuz (either use password or this) `(str)`\n- `ENABLE_TIDAL` - To enable the Tidal module - True/False `(bool)`\n- `TIDAL_MOBILE` - To enable Tidal Mobile sessions - True/False `(bool)`\n- `TIDAL_MOBILE_TOKEN` - HiRes Mobile token for Tidal `(str)`\n- `TIDAL_ATMOS_MOBILE_TOKEN` - Atmos Mobile token for Tidal `(str)`\n- `TIDAL_TV_TOKEN` - TV/Auto Token for Tidal `(str)`\n- `TIDAL_TV_SECRET` - TV/Auto Token for Tidal `(str)`\n- `TIDAL_CONVERT_M4A` - Convert the MAX quality tracks to FLAC `(bool)`\n\n## CREDITS\n- OrpheusDL - https://github.com/yarrm80s/orpheusdl\n- Streamrip - https://github.com/nathom/streamrip\n- yaronzz - Tidal-Media-Downloader - https://github.com/yaronzz/Tidal-Media-Downloader\n- vitiko98 - qobuz-dl - https://github.com/vitiko98/qobuz-dl\n\n## Support Me ❤️\n[![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/I2I7FWQZ4)\n\nTON - `UQBBPkWSnbMWXrM6P-pb96wYxQzLjZ2hhuYfsO-N2pVmznCG`",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "telegram",
        "social",
        "siesta",
        "telegram integrates",
        "music bot",
        "bot telegram"
      ],
      "category": "social-media"
    },
    "karanb192--reddit-buddy-mcp": {
      "owner": "karanb192",
      "name": "reddit-buddy-mcp",
      "url": "https://github.com/karanb192/reddit-buddy-mcp",
      "imageUrl": "",
      "description": "Browse Reddit posts, search content, and analyze user activity without API keys. Works out-of-the-box with Claude Desktop.",
      "stars": 84,
      "forks": 18,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T11:46:00Z",
      "readme_content": "#  Reddit MCP Buddy\n\n### Reddit Browser for Claude Desktop and AI Assistants\n\nA [Model Context Protocol (MCP)](https://modelcontextprotocol.io) server that enables Claude Desktop and other AI assistants to browse Reddit, search posts, and analyze user activity. Clean, fast, and actually works - no API keys required.\n\n[![MCP Registry](https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fregistry.modelcontextprotocol.io%2Fv0%2Fservers%3Fsearch%3Dreddit-mcp-buddy&query=%24.servers%5B-1%3A%5D.version&label=MCP%20Registry&color=blue)](https://registry.modelcontextprotocol.io/v0/servers/5677b351-373d-4137-bc58-28f1ba0d105d)\n[![npm version](https://img.shields.io/npm/v/reddit-mcp-buddy.svg)](https://www.npmjs.com/package/reddit-mcp-buddy)\n[![npm downloads](https://img.shields.io/npm/dm/reddit-mcp-buddy.svg)](https://www.npmjs.com/package/reddit-mcp-buddy)\n[![GitHub stars](https://img.shields.io/github/stars/karanb192/reddit-mcp-buddy.svg?style=flat&logo=github&color=brightgreen)](https://github.com/karanb192/reddit-mcp-buddy/stargazers)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n## 🎬 See It In Action\n\n\n\n*Claude analyzing real-time sentiment about H-1B visa changes across r/cscareerquestions and r/india*\n\n## Table of Contents\n\n- [What makes Reddit MCP Buddy different?](#what-makes-reddit-buddy-different)\n- [Quick Start](#quick-start-30-seconds)\n- [What can it do?](#what-can-it-do)\n- [Available Tools](#available-tools)\n- [Authentication](#authentication-optional)\n- [Installation Options](#installation-options)\n  - [Global Install](#global-install)\n  - [From Source](#from-source)\n  - [Using Docker](#using-docker)\n  - [Claude Desktop Extension](#claude-desktop-extension)\n- [Comparison with Other Tools](#comparison-with-other-tools)\n- [Troubleshooting](#troubleshooting)\n- [Development](#development)\n- [Support](#support)\n- [Related Resources](#-related-resources)\n\n## What makes Reddit MCP Buddy different?\n\n- **🚀 Zero setup** - Works instantly, no Reddit API registration needed\n- **⚡ Up to 10x more requests** - Three-tier authentication system (10/60/100 requests per minute)\n- **🎯 Clean data** - No fake \"sentiment analysis\" or made-up metrics\n- **🧠 LLM-optimized** - Built specifically for AI assistants like Claude\n- **📦 TypeScript** - Fully typed, reliable, and maintainable\n- **✅ Proven rate limits** - Thoroughly tested authentication tiers with verification tools\n\n## Quick Start (30 seconds)\n\n### For Claude Desktop - Desktop Extension (Easiest!)\n\n1. **Download**: [reddit-mcp-buddy.mcpb](https://github.com/karanb192/reddit-mcp-buddy/releases/latest/download/reddit-mcp-buddy.mcpb)\n2. **Install**: Open the downloaded file\n3. **Done!** Reddit tools are now available in Claude\n\n### For Claude Desktop - NPM Method (Alternative)\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"reddit\": {\n      \"command\": \"npx\",\n      \"args\": [\"reddit-mcp-buddy\"]\n    }\n  }\n}\n```\n\n### For Other MCP Clients\n\nUse the NPM method: `npx reddit-mcp-buddy`\n\n## What can it do?\n\nAsk your AI assistant to:\n\n- 📊 **\"What's trending on Reddit?\"** - Browse hot posts from r/all\n- 🔍 **\"Search for discussions about AI\"** - Search across all subreddits\n- 💬 **\"Get comments from this Reddit post\"** - Fetch post with full comment threads\n- 👤 **\"Analyze user spez\"** - Get user history, karma, and activity\n- 📚 **\"Explain Reddit karma\"** - Understand Reddit terminology\n\n## Available Tools\n\n### `browse_subreddit`\nBrowse posts from any subreddit with sorting options.\n```\n- Subreddit:\n  - \"all\" - entire Reddit frontpage\n  - \"popular\" - trending across Reddit\n  - Any specific subreddit (e.g., \"technology\", \"programming\", \"science\")\n- Sort by: hot, new, top, rising, controversial\n- Time range: hour, day, week, month, year, all (for top/controversial sort)\n- Include subreddit info: Optional flag for subreddit metadata\n```\n\n### `search_reddit`\nSearch across Reddit or specific subreddits.\n```\n- Query: Your search terms\n- Filter by: subreddit, author, time, flair\n- Sort by: relevance, hot, top, new, comments\n```\n\n### `get_post_details`\nGet a post with all its comments.\n```\n- Input:\n  - Reddit URL (full URL including subreddit), OR\n  - Post ID alone (will auto-detect subreddit, 2 API calls), OR\n  - Post ID + subreddit (most efficient, 1 API call)\n- Options: comment sorting, depth, link extraction\n```\n\n### `user_analysis`\nAnalyze a Reddit user's profile.\n```\n- Username: Any Reddit user\n- Returns: karma, posts, comments, active subreddits\n```\n\n### `reddit_explain`\nGet explanations of Reddit terms.\n```\n- Terms: karma, cake day, AMA, ELI5, etc.\n```\n\n## Authentication (Optional)\n\nWant more requests? Add Reddit credentials to your Claude Desktop config:\n\n### Setup Steps\n\n1. **Go to** https://www.reddit.com/prefs/apps\n2. **Click** \"Create App\" or \"Create Another App\"\n3. **Fill out the form:**\n   - **Name**: Any name (e.g., \"reddit-mcp-buddy\")\n   - **App type**: Select **\"script\"** (CRITICAL for 100 rpm!)\n   - **Description**: Optional\n   - **About URL**: Leave blank\n   - **Redirect URI**: `http://localhost:8080` (required but unused)\n4. **Click** \"Create app\"\n5. **Find your credentials:**\n   - **Client ID**: The string under \"personal use script\"\n   - **Client Secret**: The secret string\n6. **Update your Claude Desktop config:**\n\n```json\n{\n  \"mcpServers\": {\n    \"reddit\": {\n      \"command\": \"npx\",\n      \"args\": [\"reddit-mcp-buddy\"],\n      \"env\": {\n        \"REDDIT_CLIENT_ID\": \"your_client_id\",\n        \"REDDIT_CLIENT_SECRET\": \"your_client_secret\",\n        \"REDDIT_USERNAME\": \"your_username\",\n        \"REDDIT_PASSWORD\": \"your_password\"\n      }\n    }\n  }\n}\n```\n\n### Three-Tier Authentication System\n\nReddit MCP Buddy supports three authentication levels, each with different rate limits:\n\n| Mode | Rate Limit | Required Credentials | Best For |\n|------|------------|---------------------|----------|\n| **Anonymous** | 10 req/min | None | Testing, light usage |\n| **App-Only** | 60 req/min | Client ID + Secret | Regular browsing |\n| **Authenticated** | 100 req/min | All 4 credentials | Heavy usage, automation |\n\n#### How It Works:\n- **Anonymous Mode**: Default mode, no setup required, uses public Reddit API\n- **App-Only Mode**: Uses OAuth2 client credentials grant (works with both script and web apps)\n- **Authenticated Mode**: Uses OAuth2 password grant (requires script app type)\n\n**Important Notes**:\n- Script apps support BOTH app-only (60 rpm) and authenticated (100 rpm) modes\n- Web apps only support app-only mode (60 rpm maximum)\n- For 100 requests/minute, you MUST use a script app with username + password\n\n## Testing & Development\n\n### Testing Your Rate Limits\n\nReddit MCP Buddy includes comprehensive testing tools to verify your authentication is working correctly:\n\n```bash\n# Clone the repository first\ngit clone https://github.com/karanb192/reddit-mcp-buddy.git\ncd reddit-mcp-buddy\nnpm install\n\n# Test with your current environment settings\nnpm run test:rate-limit\n\n# Test specific authentication modes\nnpm run test:rate-limit:anon    # Test anonymous mode (10 rpm)\nnpm run test:rate-limit:app     # Test app-only mode (60 rpm)\nnpm run test:rate-limit:auth    # Test authenticated mode (100 rpm)\n```\n\nThe rate limit tester will:\n- Start a local server instance\n- Make rapid API requests to test rate limits\n- Display a real-time progress bar\n- Confirm which authentication tier you're using\n- Show exactly when rate limiting kicks in\n\n### Interactive Authentication Setup (for local testing only)\n\nFor local development and testing, you can set up authentication interactively:\n```bash\nnpx reddit-mcp-buddy --auth\n```\n\nThis will prompt you for Reddit app credentials and save them locally. **Note: This does NOT work with Claude Desktop** - use environment variables in your Claude config instead.\n\n### Testing with HTTP Mode\n\nTo test the server directly in your terminal:\n```bash\n# Run in HTTP mode on port 3000\nnpx reddit-mcp-buddy --http\n\n# Or with custom port\nREDDIT_BUDDY_PORT=8080 npx reddit-mcp-buddy --http\n```\n\n**Note:** The server runs in stdio mode by default (for Claude Desktop). Use `--http` flag for testing with Postman MCP or direct API calls.\n\n### Global Install\n```bash\nnpm install -g reddit-mcp-buddy\nreddit-buddy --http  # For testing\n```\n\n### From Source\n```bash\ngit clone https://github.com/karanb192/reddit-mcp-buddy.git\ncd reddit-mcp-buddy\nnpm install\nnpm run build\nnpm link\n```\n\n### Using Docker\n```bash\ndocker run -it karanb192/reddit-mcp-buddy\n```\n\n### Claude Desktop Extension\n\nFor one-click installation in Claude Desktop, download the pre-built extension:\n\n**📦 [Download reddit-mcp-buddy.mcpb](https://github.com/karanb192/reddit-mcp-buddy/releases/latest/download/reddit-mcp-buddy.mcpb)**\n\n**Installation:** Simply open the downloaded `.mcpb` file - Claude Desktop will automatically install the extension and the Reddit tools will be immediately available.\n\n#### Build from Source (Optional)\n\nIf you prefer to build the extension yourself:\n```bash\ngit clone https://github.com/karanb192/reddit-mcp-buddy.git\ncd reddit-mcp-buddy\n./scripts/build-mcpb.sh\n```\n\n**Note**: The Desktop Extension format is currently in preview (September 2025). Most users should use the standard npm installation method shown in [Quick Start](#quick-start-30-seconds).\n\n## Comparison with Other Tools\n\n| Feature | Reddit MCP Buddy | Other MCP Tools |\n|---------|-------------|----------------|\n| **Zero Setup** | ✅ Works instantly | ❌ Requires API keys |\n| **Max Rate Limit** | ✅ 100 req/min proven | ❓ Unverified claims |\n| **Language** | TypeScript/Node.js | Python (most) |\n| **Tools Count** | 5 (focused) | 8-10 (redundant) |\n| **Fake Metrics** | ✅ Real data only | ❌ \"Sentiment scores\" |\n| **Search** | ✅ Full search | Limited or none |\n| **Caching** | ✅ Smart caching | Usually none |\n| **LLM Optimized** | ✅ Clear params | Confusing options |\n| **Rate Limit Testing** | ✅ Built-in tools | ❌ No verification |\n\n## Rate Limits\n\n| Mode | Requests/Minute | Cache TTL | Setup Required |\n|------|----------------|-----------|----------------|\n| Anonymous | 10 | 15 min | None |\n| App-only | 60 | 5 min | Client ID + Secret |\n| Authenticated | 100 | 5 min | All credentials |\n\n## Why Reddit MCP Buddy?\n\n### What others do wrong:\n- ❌ **Fake metrics** - \"sentiment scores\" that are just keyword counting\n- ❌ **Complex setup** - Requiring API keys just to start\n- ❌ **Bloated responses** - Returning 100+ fields of Reddit's raw API\n- ❌ **Poor LLM integration** - Confusing parameters and unclear descriptions\n\n### What we do right:\n- ✅ **Real data only** - If it's not from Reddit's API, we don't make it up\n- ✅ **Clean responses** - Only the fields that matter\n- ✅ **Clear parameters** - LLMs understand exactly what to send\n- ✅ **Fast & cached** - Responses are instant when possible\n\n## Examples\n\n### Your AI can now answer:\n\n**\"What are the top posts about GPT-4 today?\"**\n```\n→ search_reddit with query=\"GPT-4\", time=\"day\", sort=\"top\"\n```\n\n**\"Show me what's trending in technology\"**\n```\n→ browse_subreddit with subreddit=\"technology\", sort=\"hot\"\n```\n\n**\"What do people think about this article?\"**\n```\n→ search_reddit with the article URL to find discussions\n```\n\n**\"Analyze the user DeepFuckingValue\"**\n```\n→ user_analysis with username=\"DeepFuckingValue\"\n```\n\n**\"Get the comments from this Reddit post\"**\n```\n→ get_post_details with url=\"https://reddit.com/r/...\"\n```\n\n**\"What's trending across all of Reddit?\"**\n```\n→ browse_subreddit with subreddit=\"all\", sort=\"hot\"\n```\n\n## Troubleshooting\n\n### Common Issues\n\n**\"Can't achieve 100 requests/minute\"**\n- Ensure your app type is **\"script\"** not \"web\" or \"installed\"\n- Script apps created by one account can only authenticate as that same account\n- Run `npm run test:rate-limit:auth` to verify (requires cloning the repo)\n- If still failing, create a new script app while logged into the authenticating account\n\n**\"Command not found\" error**\n```bash\n# Ensure npm is installed\nnode --version\nnpm --version\n\n# Try with full npx path\n$(npm bin -g)/reddit-mcp-buddy\n```\n\n**Rate limit errors**\n- Without auth: Limited to 10 requests/minute\n- With app credentials only: 60 requests/minute\n- With full authentication: 100 requests/minute\n- Solution: Add Reddit credentials (see [Authentication](#authentication-optional))\n\n**\"Subreddit not found\"**\n- Check spelling (case-insensitive)\n- Some subreddits may be private or quarantined\n- Try \"all\" or \"popular\" instead\n\n**Connection issues**\n- Reddit may be down (check https://www.redditstatus.com)\n- Firewall blocking requests\n- Try restarting the MCP server\n\n### Environment Variables\n\n#### Authentication Variables\n| Variable | Description | Required | Rate Limit |\n|----------|-------------|----------|------------|\n| `REDDIT_CLIENT_ID` | Reddit app client ID | No | 60 req/min (with secret) |\n| `REDDIT_CLIENT_SECRET` | Reddit app secret | No | 60 req/min (with ID) |\n| `REDDIT_USERNAME` | Reddit account username | No | 100 req/min (with all 4) |\n| `REDDIT_PASSWORD` | Reddit account password | No | 100 req/min (with all 4) |\n| `REDDIT_USER_AGENT` | User agent string | No | - |\n\n#### Server Configuration\n| Variable | Description | Default |\n|----------|-------------|---------|\n| `REDDIT_BUDDY_HTTP` | Run as HTTP server instead of stdio | `false` |\n| `REDDIT_BUDDY_PORT` | HTTP server port (when HTTP=true) | `3000` |\n| `REDDIT_BUDDY_NO_CACHE` | Disable caching (always fetch fresh) | `false` |\n\n## Technical Details\n\n### Smart Caching System\n\nReddit MCP Buddy includes intelligent caching to improve performance and reduce API calls:\n\n- **Memory Safe**: Hard limit of 50MB - won't affect your system performance\n- **Adaptive TTLs**: Hot posts (5min), New posts (2min), Top posts (30min)\n- **LRU Eviction**: Automatically removes least-used data when approaching limits\n- **Hit Tracking**: Optimizes cache based on actual usage patterns\n\nThis means faster responses and staying well within Reddit's rate limits, all while using minimal system resources.\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Run in development\nnpm run dev\n\n# Build\nnpm run build\n\n# Test rate limits\nnpm run test:rate-limit       # Test with current environment\nnpm run test:rate-limit:anon  # Test anonymous mode (10 rpm)\nnpm run test:rate-limit:app   # Test app-only mode (60 rpm)\nnpm run test:rate-limit:auth  # Test authenticated mode (100 rpm)\n\n# Lint\nnpm run lint\n\n# Type check\nnpm run typecheck\n```\n\n### Requirements\n- Node.js >= 18.0.0\n- npm or yarn\n- TypeScript 5.5+\n\n## Contributing\n\nPRs welcome! See [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.\n\nWe keep things simple:\n- No fake analytics\n- Clean, typed code\n- Clear documentation\n- Fast responses\n\n## Support\n\n- 🐛 [Report bugs](https://github.com/karanb192/reddit-mcp-buddy/issues)\n- 💡 [Request features](https://github.com/karanb192/reddit-mcp-buddy/issues)\n- ⭐ [Star on GitHub](https://github.com/karanb192/reddit-mcp-buddy)\n\n## 🔗 Related Resources\n\n### Official MCP Resources\n- **[MCP Registry](https://registry.modelcontextprotocol.io)** - Official registry of MCP servers\n- **[MCP Specification](https://spec.modelcontextprotocol.io)** - Official Model Context Protocol specification\n- **[MCP TypeScript SDK](https://github.com/modelcontextprotocol/typescript-sdk)** - SDK used to build this server\n- **[MCP Servers Repository](https://github.com/modelcontextprotocol/servers)** - Collection of official MCP server implementations\n- **[Awesome MCP Servers](https://github.com/modelcontextprotocol/awesome-mcp-servers)** - Community-curated list of MCP servers\n\n### Where to Find This Server\n- **[MCP Registry Direct Link](https://registry.modelcontextprotocol.io/v0/servers/5677b351-373d-4137-bc58-28f1ba0d105d)** - Direct API link to v1.1.1\n- **[MCP Registry Search](https://registry.modelcontextprotocol.io)** - Search for \"reddit\" to find all versions\n- **[NPM Package](https://www.npmjs.com/package/reddit-mcp-buddy)** - Install via npm/npx\n- **[GitHub Repository](https://github.com/karanb192/reddit-mcp-buddy)** - Source code and issues\n\n#### View All Versions via API\n```bash\n# Get all versions of reddit-mcp-buddy from the registry\ncurl -s \"https://registry.modelcontextprotocol.io/v0/servers?search=reddit-mcp-buddy\" | jq\n\n# Get just version numbers and UUIDs\ncurl -s \"https://registry.modelcontextprotocol.io/v0/servers?search=reddit-mcp-buddy\" | \\\n  jq '.servers[] | {version, id: ._meta.\"io.modelcontextprotocol.registry/official\".id}'\n```\n\n## License\n\nMIT - Use it however you want!\n\n---\n\nMade with ❤️ for the MCP community. No venture capital, no tracking, just a good MCP server.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "automation",
        "ai",
        "automation social",
        "social media",
        "integration social"
      ],
      "category": "social-media"
    },
    "kukapay--twitter-username-changes-mcp": {
      "owner": "kukapay",
      "name": "twitter-username-changes-mcp",
      "url": "https://github.com/kukapay/twitter-username-changes-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kukapay.webp",
      "description": "Tracks historical changes of Twitter usernames to identify potential scam risks from frequent changes. Retrieve username change histories by providing a current Twitter handle.",
      "stars": 2,
      "forks": 7,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-05-21T06:08:17Z",
      "readme_content": "# Twitter Username Changes MCP Server\n\nAn MCP server that tracks the historical changes of Twitter usernames—frequent screen name changes in crypto projects can be a red flag for potential scam risks.\n\n![License](https://img.shields.io/badge/License-MIT-green.svg)\n![Python](https://img.shields.io/badge/Python-3.10+-blue.svg)\n![Status](https://img.shields.io/badge/Status-Active-brightgreen.svg)\n\n## Features\n\n- **Username Change History**: Query the historical usernames of a Twitter user by their current screen name (e.g., `@OSINT_Ukraine` or `@Mormonger`).\n- **Prompt Support**: Includes a prompt template to guide users in formulating queries.\n- **Lightweight Design**: Built with minimal dependencies (`mcp` and `requests`) for easy setup.\n\n## Installation\n\n### Prerequisites\n\n- Python 3.10+\n- `pip` or `uv` for dependency management\n- [Claude Desktop](https://www.anthropic.com/) (optional, for MCP integration)\n\n### Setup\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/twitter-username-changes-mcp.git\n   cd twitter-username-changes-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   pip install mcp[cli] requests\n   ```\n\n## Usage\n\n### Running the Server\n\nStart the server in development mode to test locally:\n```bash\nmcp dev main.py\n```\n\nThis launches the MCP Inspector, where you can:\n- List available tools (`query_username_changes`).\n- Test queries (e.g., `screen_name: \"OSINT_Ukraine\"`).\n- Debug prompts.\n\n### Integrating with Claude Desktop\n\n1. **Configure MCP Server**:\n   Edit the Claude Desktop configuration file:\n   - **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n   Add the server:\n   ```json\n   {\n     \"mcpServers\": {\n       \"twitter-username-changes\": {\n         \"command\": \"python\",\n         \"args\": [\n           \"/absolute/path/to/twitter-username-changes-mcp/main.py\"\n         ]\n       }\n     }\n   }\n   ```\n   Replace `/absolute/path/to/` with the full path to `main.py`.\n\n2. **Install the Server**:\n   ```bash\n   mcp install main.py --name \"TwitterUsernameChanges\"\n   ```\n\n3. **Query in Claude Desktop**:\n   - Open Claude Desktop and look for the hammer icon (indicating MCP tools).\n   - Enter a query like:\n     ```\n     Show the username change history for Twitter user @OSINT_Ukraine\n     ```\n   - Expected output:\n     ```\n     Username change history for OSINT_Ukraine:\n\n     User ID 4725638310:\n     - The_HelpfulHand (2016-01-09 to 2020-09-27)\n     - nftpromo_s (2022-02-10 to 2022-02-23)\n     - OSINT_Ukraine (2022-02-24 to 2022-02-25)\n     ```\n\n### Example Queries\n\n1. **Query `@Mormonger`**:\n   \n   Tool input: `screen_name: \"Mormonger\"`\n   \n   Output:\n   ```\n   Username change history for Mormonger:\n\n   User ID 1408886100:\n   - colenoorda (2016-04-02)\n   - Mormonger (2017-01-19 to 2025-02-25)\n   ```\n\n2. **Query Invalid Handle**:\n   \n   Tool input: `screen_name: \"InvalidUser123\"`\n   \n   Output:\n   ```\n   No username change history found for InvalidUser123\n   ```\n\n## License\n\nThis project is licensed under the MIT License. See [LICENSE](LICENSE) for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twitter",
        "kukapay",
        "social",
        "kukapay twitter",
        "twitter usernames",
        "changes twitter"
      ],
      "category": "social-media"
    },
    "kunallunia--twitter-mcp": {
      "owner": "kunallunia",
      "name": "twitter-mcp",
      "url": "https://github.com/LuniaKunal/mcp-twitter",
      "imageUrl": "",
      "description": "All-in-one Twitter management solution providing timeline access, user tweet retrieval, hashtag monitoring, conversation analysis, direct messaging, sentiment analysis of a post, and complete post lifecycle control - all through a streamlined API.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twitter",
        "tweet",
        "social",
        "twitter management",
        "automation social",
        "kunallunia twitter"
      ],
      "category": "social-media"
    },
    "macrocosm-os--macrocosmos-mcp": {
      "owner": "macrocosm-os",
      "name": "macrocosmos-mcp",
      "url": "https://github.com/macrocosm-os/macrocosmos-mcp",
      "imageUrl": "",
      "description": "🎖️ 🐍 ☁️ Access real-time X/Reddit/YouTube data directly in your LLM applications with search phrases, users, and date filtering.",
      "stars": 21,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-10-04T04:52:40Z",
      "readme_content": "\n# 🌌 Macrocosmos MCP\n\n<p align=\"center\">\n  Official Macrocosmos <a href=\"https://github.com/modelcontextprotocol\">Model Context Protocol (MCP)</a> server that enables interaction with X, Reddit and Youtube, powered by Data Universe (SN13) on Bittensor. This server allows MCP clients like <a href=\"https://www.anthropic.com/claude\">Claude Desktop</a>, <a href=\"https://www.cursor.so\">Cursor</a>, <a href=\"https://codeium.com/windsurf\">Windsurf</a>, <a href=\"https://github.com/openai/openai-agents-python\">OpenAI Agents</a> and others to fetch real-time social media and video transcript data.\n</p>\n\n---\n\n## Quickstart with Claude Desktop\n\n1. Get your API key from [Macrocosmos](https://app.macrocosmos.ai/account?tab=api-keys). There is a free tier with $5 of credits to start.\n2. Install `uv` (Python package manager), install with `curl -LsSf https://astral.sh/uv/install.sh | sh` or see the `uv` [repo](https://github.com/astral-sh/uv) for additional install methods.\n3. Go to Claude > Settings > Developer > Edit Config > claude_desktop_config.json to include the following:\n\n```\n{\n  \"mcpServers\": {\n    \"macrocosmos\": {\n      \"command\": \"uvx\",\n      \"args\": [\"macrocosmos-mcp\"],\n      \"env\": {\n        \"MC_API\": \"<insert-your-api-key-here>\"\n      }\n    }\n  }\n}\n\n```\n\n## Example usage\n\n⚠️ Warning: Macrocosmos credits are needed to use these tools.\n\nTry asking Claude:\n\n- \"What has the president of the U.S. been saying over the past week on X?\"\n- \"Fetch me information about what people are posting on r/politics today.\"\n- \"Please analyze posts from @elonmusk for the last week.\"\n- \"Can you summarize the transcript of the latest video from WolfeyVGC?\"\n\n\n## 🔮 Upcoming\n\n- 🧠 All the power of **Subnets** in your AI environment — coming soon.\n\n---\n\nMIT License\nMade with ❤️ by the Macrocosm OS team\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "automation",
        "ai",
        "automation social",
        "social media",
        "integration social"
      ],
      "category": "social-media"
    },
    "martianbandit--trendFinder": {
      "owner": "martianbandit",
      "name": "trendFinder",
      "url": "https://github.com/martianbandit/trendFinder",
      "imageUrl": "/freedevtools/mcp/pfp/martianbandit.webp",
      "description": "Collects and analyzes social media posts from key influencers to identify trending topics and sends notifications via Slack or Discord when new trends emerge.",
      "stars": 1,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-03-28T19:14:02Z",
      "readme_content": "# Trend Finder 🔦\n\n**Stay on top of trending topics on social media — all in one place.**\n\nTrend Finder collects and analyzes posts from key influencers, then sends a Slack or Discord notification when it detects new trends or product launches. This has been a complete game-changer for the Firecrawl marketing team by:\n\n- **Saving time** normally spent manually searching social channels\n- **Keeping you informed** of relevant, real-time conversations\n- **Enabling rapid response** to new opportunities or emerging industry shifts\n\n_Spend less time hunting for trends and more time creating impactful campaigns._\n\n## Watch the Demo & Tutorial video\n\n[![Thumbnail](https://i.ytimg.com/vi/puimQSun92g/hqdefault.jpg)](https://www.youtube.com/watch?v=puimQSun92g)\n\nLearn how to set up Trend Finder and start monitoring trends in this video!\n\n## How it Works\n\n1. **Data Collection** 📥\n   - Monitors selected influencers' posts on Twitter/X using the X API (Warning: the X API free plan is rate limited to only monitor 1 X account every 15 min)\n   - Monitors websites for new releases and news with Firecrawl's /extract\n   - Runs on a scheduled basis using cron jobs\n\n2. **AI Analysis** 🧠\n   - Processes collected content through Together AI\n   - Identifies emerging trends, releases, and news.\n   - Analyzes sentiment and relevance\n\n3. **Notification System** 📢\n   - When significant trends are detected, sends Slack or Discord notifications based on cron job setup\n   - Provides context about the trend and its sources\n   - Enables quick response to emerging opportunities\n\n## Features\n\n- 🤖 AI-powered trend analysis using Together AI\n- 📱 Social media monitoring (Twitter/X integration)\n- 🔍 Website monitoring with Firecrawl\n- 💬 Instant Slack or Discord notifications\n- ⏱️ Scheduled monitoring using cron jobs\n\n## Prerequisites\n\n- Node.js (v14 or higher)\n- npm or yarn\n- Docker\n- Docker Compose\n- Slack workspace with webhook permissions\n- API keys for required services\n\n## Environment Variables\n\nCopy `.env.example` to `.env` and configure the following variables:\n\n```\n# Optional: API key from Together AI for trend analysis (https://www.together.ai/)\nTOGETHER_API_KEY=your_together_api_key_here\n\n# Optional: API key from DeepSeek for trend analysis (https://deepseek.com/)\nDEEPSEEK_API_KEY=\n\n# Optional: API key from OpenAI for trend analysis (https://openai.com/)\nOPENAI_API_KEY=\n\n# Required if monitoring web pages (https://www.firecrawl.dev/)\nFIRECRAWL_API_KEY=your_firecrawl_api_key_here\n\n# Required if monitoring Twitter/X trends (https://developer.x.com/)\nX_API_BEARER_TOKEN=your_twitter_api_bearer_token_here\n\n# Notification driver. Supported drivers: \"slack\", \"discord\"\nNOTIFICATION_DRIVER=discord\n\n# Required (if NOTIFICATION_DRIVER is \"slack\"): Incoming Webhook URL from Slack for notifications\nSLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/WEBHOOK/URL\n\n# Required (if NOTIFICATION_DRIVER is \"discord\"): Incoming Webhook URL from Discord for notifications\nDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/WEBHOOK/URL\n```\n\n## Getting Started\n\n1. **Clone the repository:**\n   ```bash\n   git clone [repository-url]\n   cd trend-finder\n   ```\n\n2. **Install dependencies:**\n   ```bash\n   npm install\n   ```\n\n3. **Configure environment variables:**\n   ```bash\n   cp .env.example .env\n   # Edit .env with your configuration\n   ```\n\n4. **Run the application:**\n   ```bash\n   # Development mode with hot reloading\n   npm run start\n\n   # Build for production\n   npm run build\n   ```\n\n## Using Docker\n\n1. **Build the Docker image:**\n   ```bash\n   docker build -t trend-finder .\n   ```\n\n2. **Run the Docker container:**\n   ```bash\n   docker run -d -p 3000:3000 --env-file .env trend-finder\n   ```\n\n## Using Docker Compose\n\n1. **Start the application with Docker Compose:**\n   ```bash\n   docker-compose up --build -d\n   ```\n\n2. **Stop the application with Docker Compose:**\n   ```bash\n   docker-compose down\n   ```\n\n## Project Structure\n\n```\ntrend-finder/\n├── src/\n│   ├── controllers/    # Request handlers\n│   ├── services/       # Business logic\n│   └── index.ts        # Application entry point\n├── .env.example        # Environment variables template\n├── package.json        # Dependencies and scripts\n└── tsconfig.json       # TypeScript configuration\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "trendfinder",
        "social",
        "trending",
        "automation social",
        "social media",
        "social presence"
      ],
      "category": "social-media"
    },
    "metricool--mcp-metricool": {
      "owner": "metricool",
      "name": "mcp-metricool",
      "url": "https://github.com/metricool/mcp-metricool",
      "imageUrl": "/freedevtools/mcp/pfp/metricool.webp",
      "description": "Access and analyze social media metrics, campaign data, and schedule posts through a unified interface with the Metricool API. Enables AI agents to retrieve data and manage social media activities effectively.",
      "stars": 17,
      "forks": 10,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-16T17:21:58Z",
      "readme_content": "# Metricool MCP Server\n\nThis is a Model Context Protocol (MCP) server for interacting with the Metricool API. It allows AI agents to access and analyze social media metrics, campaign data and schedule posts to your Metricool account.\n\n## Setup\n\n### Prerequisites\nMCP is still very new and evolving, we recommend following the [MCP documentation](https://modelcontextprotocol.io/quickstart#prerequisites) to get the MCP basics up and running.\n\n- Python 3.8 or higher\n- [A Metricool account with API access (Advanced Tier)](https://metricool.com)\n- [Claude Desktop](https://claude.ai/) (or Cursor, or any MCP Client)\n- [uv](https://docs.astral.sh/uv/getting-started/installation/)\n- [git](https://git-scm.com/downloads/)\n\n### Configuration\n1. Configure Claude Desktop\nCreate the following file depending on your OS:\n\nOn MacOS: ~/Library/Application Support/Claude/claude_desktop_config.json\n\nOn Windows: %APPDATA%/Claude/claude_desktop_config.json\n\nPaste this template in the file and replace <METRICOOL_USER_TOKEN> and <METRICOOL_USER_ID> with your Metricool API and ID information:\n\n```json\n{\n    \"mcpServers\": {\n        \"mcp-metricool\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"--upgrade\",\n                \"mcp-metricool\"\n            ],\n            \"env\": {\n                \"METRICOOL_USER_TOKEN\": \"<METRICOOL_USER_TOKEN>\",\n                \"METRICOOL_USER_ID\": \"<METRICOOL_USER_ID>\"\n            }\n        }\n    }\n}\n```\n\n## Tools\nThe server implements several tools to interact with the Metricool API:\n\n1. `get_brands()`\n   - Get the list of brands from your Metricool account. Simplified tool for auxiliar usage in other tools.\n\n2. `get_brands_complete()`\n   - Get the list of brands from your Metricool account with all the available information for each brand.\n\n3. `get_instagram_reels(init_date: str, end_date: str, blog_id: int)`\n   - Get the list of Instagram Reels from your Metricool account.\n\n4. `get_instagram_posts(init_date: str, end_date: str, blog_id: int)`\n   - Get the list of Instagram Posts from your Metricool account.\n\n5. `get_instagram_stories(init_date: str, end_date: str, blog_id: int)`\n   - Get the list of Instagram Stories from your Metricool account.\n\n6. `get_tiktok_videos(init_date: str, end_date: str, blog_id: int)`\n   - Get the list of Tiktok Videos from your Metricool account.\n\n7. `get_facebook_reels(init_date: str, end_date: str, blog_id: int)`\n   - Get the list of Facebook Reels from your Metricool account.\n\n8. `get_facebook_posts(init_date: str, end_date: str, blog_id: int)`\n   - Get the list of Facebook Posts from your Metricool brand account.\n\n9. `get_facebook_stories(init_date: str, end_date: str, blog_id: int)`\n   - Get the list of Facebook Stories from your Metricool brand account.\n\n10. `get_thread_posts(init_date: str, end_date: str, blog_id: int)`\n   - Get the list of Threads Posts from your Metricool brand account.\n\n11. `get_x_posts(init_date: str, end_date: str, blog_id: int)`\n    - Get the list of X (Twitter) Posts from your Metricool account.\n\n12. `get_bluesky_posts(init_date: str, end_date: str, blog_id: int)`\n    - Get the list of Bluesky Posts from your Metricool brand account.\n\n13. `get_linkedin_posts(init_date: str, end_date: str, blog_id: int)`\n    - Get the list of Linkedin Posts from your Metricool brand account.\n\n14. `get_pinterest_pins(init_date: str, end_date: str, blog_id: int)`\n    - Get the list of Pinterest Pins from your Metricool brand account.\n\n15. `get_youtube_videos(init_date: str, end_date: str, blog_id: int)`\n    - Get the list of Youtube Videos from your Metricool brand account.\n\n16. `get_twitch_videos(init_date: str, end_date: str, blog_id: int)`\n    - Get the list of Twitch Videos from your Metricool account.\n\n17. `get_facebookads_campaigns(init_date: str, end_date: str, blog_id: int)`\n    - Get the list of Facebook Ads Campaigns from your Metricool account.\n\n18. `get_googleads_campaigns(init_date: str, end_date: str, blog_id: int)`\n    - Get the list of Google Ads Campaigns from your Metricool account.\n\n19. `get_tiktokads_campaigns(init_date: str, end_date: str, blog_id: int)`\n    - Get the list of Tiktok Ads Campaigns from your Metricool brand account.\n\n20. `get_network_competitors`\n    - Get the list of competitors from your Metricool brand account (Instagram, Facebook, X, Bluesky, Youtube and Twitch).\n\n21. `get_network_competitors_posts`\n    - Get and analyze the posts of competitors from your Metricool brand account (Instagram, Facebook, X, Bluesky, Youtube and Twitch).\n    \n22. `post_schedule_post`\n    - Schedule a post (o multipost) to your brands in Metricool\n\n23. `get_scheduled_posts`\n    - Get the scheduled posts from your Metricool brand account.\n\n24. `get_best_time_to_post`\n    - Get the best time to post for a specific social network. Return days and hours with the value. Higher value better hour/day to post\n\n25. `update_schedule_post`\n    - Update the scheduled post in the same conversation or a previously scheduled post.\n\n26. `get_metrics`\n    - Get the available metrics to obtain analysis from a specific social network.\n\n27. `get_analytics`\n    - Get the analytics from a specific social network of your Metricool brand account.\n\n28. `get_pinterest_boards`\n    - Get Pinterest Boards from a specific Metricool brand account.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "ai",
        "automation",
        "automation social",
        "social media",
        "manage social"
      ],
      "category": "social-media"
    },
    "metrosir--mcp-twikit": {
      "owner": "metrosir",
      "name": "mcp-twikit",
      "url": "https://github.com/metrosir/mcp-twikit",
      "imageUrl": "/freedevtools/mcp/pfp/metrosir.webp",
      "description": "Interact with Twitter to analyze sentiments and retrieve tweets from your timeline, offering insights into public opinions and trends on various topics.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-02T07:54:39Z",
      "readme_content": "# MCP-Twikit\n\n[![smithery badge](https://smithery.ai/badge/mcp-twikit)](https://smithery.ai/server/mcp-twikit)\nA Model Context Protocol (MCP) server for interacting with Twitter.\n\n<a href=\"https://glama.ai/mcp/servers/49i9dd08w8\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/49i9dd08w8/badge\" alt=\"mcp-twikit MCP server\" /></a>\n\n## Installation\n\n### Installing via Smithery\n\nTo install Twikit Twitter Search for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-twikit):\n\n```bash\nnpx -y @smithery/cli install mcp-twikit --client claude\n```\n\n### Manual Installation\n```json\n{\n    \"mcpServer\": {\n        \"command\": \"uvx\",\n        \"args\": [\"--from\", \"git+https://github.com/adhikasp/mcp-twikit\", \"mcp-twikit\"],\n        \"env\": {\n            \"TWITTER_USERNAME\": \"@example\",\n            \"TWITTER_EMAIL\": \"me@example.com\",\n            \"TWITTER_PASSWORD\": \"secret\",\n        }\n    }\n}\n```\n\n## Example usage\n\nUsing [mcp-client-cli](https://github.com/adhikasp/mcp-client-cli)\n\n\n### Comparing sentiments across different twitter accounts\n\n```\n$ llm compare 20 latest tweet directed @IndiHomeCare, @di_cbn, @BiznetHome, @ID_MyRepublic. What are people sentiment to the product? Do 1 search for each account\n\nI'll help you analyze the latest tweets for these internet service providers in Indonesia to understand the public sentiment. I'll use the search_twitter function for each account.\n\nTool Calls:\n  search_twitter\n  Args:\n    query: to:IndiHomeCare\n    count: 20\n    sort_by: Latest\n\nTool Calls:\n  search_twitter\n  Args:\n    query: to:di_cbn\n    count: 20\n    sort_by: Latest\n\nTool Calls:\n  search_twitter\n  Args:\n    query: to:BiznetHome\n    count: 20\n    sort_by: Latest\n\nTool Calls:\n  search_twitter\n  Args:\n    query: to:ID_MyRepublic\n    count: 20\n    sort_by: Latest\n\nSentiment Analysis Summary:\n\n1. IndiHomeCare:\n- Predominantly Negative Sentiment\n- Key Issues:\n  - Unstable internet connection\n  - Slow response times\n  - Intermittent service disruptions\n  - Long waiting times for customer support\n- Specific Complaints:\n  - Network instability\n  - Lagging internet\n  - Unresolved technical issues\n  - Lack of timely communication\n\n2. CBN (di_cbn):\n- Mostly Negative Sentiment\n- Key Issues:\n  - Prolonged internet outages (some reporting 1-2 days of no service)\n  - Slow customer support response\n  - Lack of clear communication about service disruptions\n- Specific Complaints:\n  - LOS (Line of Sight) issues\n  - No timely resolution of technical problems\n  - Delayed email and support responses\n\n3. BiznetHome:\n- Strongly Negative Sentiment\n- Key Issues:\n  - Frequent network interruptions\n  - Slow internet speeds\n  - Poor customer support responsiveness\n- Specific Complaints:\n  - Packet loss\n  - Inconsistent connection\n  - Long download times\n  - Unresolved technical issues\n\n4. MyRepublic (ID_MyRepublic):\n- Extremely Negative Sentiment\n- Key Issues:\n  - Severe and prolonged service disruptions\n  - Complete internet outages\n  - Inability to access online services and games\n  - Extremely poor customer support\n- Specific Complaints:\n  - Multi-day service interruptions\n  - Inability to access websites and online games\n  - Missed technician appointments\n  - Lack of compensation or clear communication\n\nOverall Sentiment Ranking (from Bad to Worst):\n1. IndiHomeCare (Bad)\n2. CBN (Worse)\n3. BiznetHome (Very Bad)\n4. MyRepublic (Extremely Bad)\n\nCommon Themes Across Providers:\n- Poor network stability\n- Slow customer support response\n- Lack of transparent communication\n- Prolonged service interruptions\n- Unresolved technical issues\n\nRecommendation: These Indonesian internet service providers are experiencing significant customer satisfaction issues. Customers are frustrated with unreliable services, poor technical support, and lack of timely problem resolution.\n```\n\n### Getting tweets from your home timeline\n\n```\n$ llm what is happening on my twitter timeline?\n\nI'll help you check your Twitter timeline. I'll retrieve the latest tweets from your timeline:\n\nTool Calls:\n  get_timeline\n  Args:\n\nI'll summarize the key highlights from your Twitter timeline:\n\n1. Professional/Tech Highlights:\n- @ibamarief is preparing to onboard their first intern, noting it's a significant responsibility\n- @papanberjalan shared a critique about web developers not understanding computer performance\n- @pathofexile is running a Twitch Drops promotion for their game\n\n2. Notable Tweets:\n- @elonmusk posted a cryptic \"Hmm\"\n- @realDonaldTrump discussed eliminating Daylight Saving Time\n- @blinkist shared an article about billionaires reading up to 50 books per year\n\n3. Miscellaneous Interesting Tweets:\n- @nealtaparia shared a thread about 11 companies built around a single product\n- @Rixhabh__ posted about creative and iconic ads\n- Several tweets in Indonesian covering various topics from personal stories to social issues\n\nWould you like me to elaborate on any of these tweets or provide more context about any specific post?\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twitter",
        "tweets",
        "twikit",
        "interact twitter",
        "automation social",
        "twikit interact"
      ],
      "category": "social-media"
    },
    "natebennett27--mcp-maigret": {
      "owner": "natebennett27",
      "name": "mcp-maigret",
      "url": "https://github.com/natebennett27/mcp-maigret",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Search usernames across social networks and analyze URLs to gather public information using powerful OSINT capabilities.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "ai",
        "presence",
        "automation social",
        "social presence",
        "social media"
      ],
      "category": "social-media"
    },
    "niyonabil--blogger-mcp-server": {
      "owner": "niyonabil",
      "name": "blogger-mcp-server",
      "url": "https://github.com/niyonabil/blogger-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/niyonabil.webp",
      "description": "Interact with Blogger blogs using the Blogger API to manage posts, labels, and blogs. Automate tasks and retrieve information efficiently without creating new blogs via the API.",
      "stars": 1,
      "forks": 6,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-05-15T16:39:48Z",
      "readme_content": "# blogger-mcp-server\n=======\n# Serveur MCP pour Blogger\n\nUn serveur MCP (Model Context Protocol) qui permet aux modèles d'intelligence artificielle comme Claude d'interagir directement avec l'API Blogger de Google.\n\n## À propos\n\nCe projet implémente un serveur compatible avec le protocole MCP (Model Context Protocol) pour l'API Blogger de Google. Il permet aux modèles d'IA comme Claude d'interagir avec les blogs Blogger pour :\n\n* Lister et récupérer des blogs\n* Lister, rechercher, récupérer, créer, mettre à jour et supprimer des posts\n* Lister et récupérer des labels\n\n> **Note importante** : L'API Blogger de Google ne permet pas de créer de nouveaux blogs via API. Cette limitation est documentée par Google. Les blogs doivent être créés manuellement via l'interface web de Blogger.\n\n## Prérequis\n\n* Node.js (version 16 ou supérieure)\n* Une clé API Blogger de Google\n\n## Installation\n\n### Installation depuis npm\n\n```bash\nnpm install -g @mcproadev/blogger-mcp-server\n```\n\n### Installation depuis le code source\n\n```bash\ngit clone https://github.com/niyonabil/blogger-mcp-server.git\ncd blogger-mcp-server\nnpm install\nnpm run build\n```\nif error install : \n\n```bash\nnpm install --save-dev @types/express @types/socket.io\n```\n## Configuration\n\n### Obtenir une clé API Blogger\n\n1. Accédez à la [Console Google Cloud](https://console.cloud.google.com/)\n2. Créez un nouveau projet ou sélectionnez un projet existant\n3. Activez l'API Blogger v3\n4. Créez une clé API\n5. Notez cette clé pour l'utiliser dans la configuration\n\n### Configuration du serveur MCP\n\nCréez un fichier de configuration pour votre client MCP. Voici un exemple pour Claude Desktop :\n\n```json\n{\n  \"mcpServers\": {\n    \"blogger\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@mcproadev/blogger-mcp-server\"\n      ],\n      \"env\": {\n        \"BLOGGER_API_KEY\": \"VOTRE_CLE_API_ICI\"\n      }\n    }\n  }\n}\n```\n\nRemplacez `VOTRE_CLE_API_ICI` par la clé API que vous avez obtenue.\n\n## Utilisation\n\n### Démarrage local\n\nLe projet inclut deux scripts pour faciliter le démarrage du serveur :\n\n#### Mode développement\n\n```bash\nexport BLOGGER_API_KEY=votre_cle_api\n./start-dev.sh\n```\n\nCe script vérifie la présence de la clé API, installe les dépendances si nécessaire, compile le projet si nécessaire, puis démarre le serveur en mode développement.\n\n#### Mode production\n\n```bash\nexport BLOGGER_API_KEY=votre_cle_api\nnpm run build\n./start-prod.sh\n```\n\nCe script vérifie la présence de la clé API et que le projet est compilé, puis démarre le serveur en mode production.\n\n### Utilisation avec un client MCP\n\nUne fois configuré, vous pouvez utiliser le serveur MCP pour Blogger avec n'importe quel client MCP compatible, comme Claude Desktop.\n\nExemples de commandes :\n\n* \"Liste tous mes blogs Blogger\"\n* \"Crée un nouveau post sur mon blog avec l'ID 123456 avec le titre 'Mon nouveau post' et le contenu 'Voici le contenu de mon post'\"\n* \"Recherche des posts contenant le mot 'technologie' dans mon blog\"\n* \"Mets à jour le post avec l'ID 789012 pour changer son titre en 'Nouveau titre'\"\n\n## Options de déploiement\n\n### Déploiement sur Vercel\n\nLe projet inclut un fichier `vercel.json` pour faciliter le déploiement sur Vercel :\n\n1. Créez un compte sur [Vercel](https://vercel.com/) si vous n'en avez pas déjà un\n2. Installez l'outil CLI Vercel : `npm install -g vercel`\n3. Connectez-vous à votre compte Vercel : `vercel login`\n4. Configurez votre variable d'environnement secrète : `vercel secrets add blogger_api_key \"VOTRE_CLE_API_ICI\"`\n5. Déployez le projet : `vercel`\n\n### Déploiement avec Docker\n\nLe projet inclut un Dockerfile pour faciliter le déploiement dans un conteneur Docker :\n\n1. Construisez l'image Docker :\n   ```bash\n   docker build -t blogger-mcp-server .\n   ```\n\n2. Exécutez le conteneur :\n   ```bash\n   docker run -p 3000:3000 -e BLOGGER_API_KEY=votre_cle_api blogger-mcp-server\n   ```\n\n### Autres options de déploiement\n\nLe serveur peut également être déployé sur d'autres plateformes compatibles avec Node.js :\n\n1. **Heroku** : Utilisez un Procfile et les variables d'environnement Heroku\n2. **AWS Lambda** : Utilisez un adaptateur comme Serverless Framework\n3. **Google Cloud Run** : Utilisez le Dockerfile inclus\n\n## Structure du projet\n\nLe serveur MCP pour Blogger est composé de plusieurs modules :\n\n* `index.ts` : Point d'entrée principal\n* `server.ts` : Configuration du serveur MCP\n* `bloggerService.ts` : Service d'interaction avec l'API Blogger\n* `config.ts` : Configuration du serveur\n* `types.ts` : Définition des types et interfaces\n* `mcp-sdk-mock.ts` : Implémentation simplifiée du SDK MCP pour éviter les problèmes de dépendances\n\n## Limitations connues\n\n* **Création de blogs** : L'API Blogger de Google ne permet pas de créer de nouveaux blogs via API. Les blogs doivent être créés manuellement via l'interface web de Blogger.\n* **Recherche de posts** : L'API Blogger ne fournit pas d'endpoint direct pour la recherche. Cette fonctionnalité est implémentée côté client en récupérant les posts puis en les filtrant.\n* **Gestion des labels** : L'API Blogger ne fournit pas d'endpoints directs pour la gestion des labels. Cette fonctionnalité est implémentée en extrayant les labels des posts.\n* **Authentification** : Ce serveur utilise uniquement l'authentification par clé API, ce qui limite l'accès aux blogs publics ou aux blogs pour lesquels vous avez explicitement configuré l'accès.\n\n## Contribution\n\nLes contributions sont les bienvenues ! N'hésitez pas à ouvrir une issue ou une pull request.\n\n## Licence\n\nCe projet est sous licence MIT.\n>>>>>>> cf72ca4 (Ajout des nouvelles fonctionnalités)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blogger",
        "blogs",
        "social",
        "interact blogger",
        "blogs automate",
        "blogs api"
      ],
      "category": "social-media"
    },
    "novemberde--mcp-youtube": {
      "owner": "novemberde",
      "name": "mcp-youtube",
      "url": "https://github.com/novemberde/mcp-youtube",
      "imageUrl": "/freedevtools/mcp/pfp/novemberde.webp",
      "description": "Download subtitles, search for videos, and capture screenshots from YouTube videos. Integrate video data into workflows to summarize or analyze YouTube content.",
      "stars": 1,
      "forks": 1,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-05-09T05:06:10Z",
      "readme_content": "# YouTube MCP Server\n\nThis project connects YouTube video processing capabilities to Claude AI via the [Model Context Protocol](https://modelcontextprotocol.io/introduction). It uses `yt-dlp` for downloading subtitles and `ffmpeg` for screenshot extraction. Users can ask Claude to summarize YouTube videos by providing the URL.\n\n## System Architecture Diagram\n\n```mermaid\ngraph TD\n    A[User] --> B[Claude AI]\n    B --> D[mcp-youtube]\n    D --> E[yt-dlp Subtitles]\n    D --> F[ffmpeg Screenshots]\n    D --> G[Temporary Storage]\n    G --> H[Auto-Cleanup]\n\n    style A fill:#FFE4B5,stroke:#333\n    style B fill:#98FB98,stroke:#333\n    style D fill:#D0ECE7,stroke:#333\n    style E fill:#FFB6C1,stroke:#333\n    style F fill:#DDA0DD,stroke:#333\n    style G fill:#FFFACD,stroke:#333\n    style H fill:#FFD700,stroke:#333\n\n    subgraph MCP\n        D --> E\n        D --> F\n        D --> G\n    end\n\n    subgraph Temporary Storage\n        G --> H\n    end\n```\n\n## Getting Started\n\n### Prerequisites\n- `yt-dlp` and `ffmpeg` installed (via Homebrew, WinGet, or other package managers)\n- Node.js and npm installed\n\n```bash\nbrew install yt-dlp ffmpeg\n```\n\n### Installation\n\n#### Executable via Node.js (Recommended)\n1. Install the MCP server:\n   ```bash\n   brew install nvm\n   nvm install --lts\n   nvm use --lts\n   npm install -g @novemberde/mcp-youtube\n   ```\n\n2. Configure Claude to use the MCP server:\n\n   Add the following to your `claude_desktop_config.json`:\n   ```json\n   {\n     \"mcpServers\": {\n       \"mcp-youtube\": {\n         \"command\": \"npx\",\n         \"args\": [\"@novemberde/mcp-youtube\"]\n       }\n     }\n   }\n   ```\n\n#### Executable via Docker\n\nPrerequisites:\n- Docker installed\n\nConfigure Claude to use the Docker container:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-youtube\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"novemberde/mcp-youtube\"]\n    }\n  }\n}\n```\n\n\n\n## Available Tools\n\n### 1. `download_youtube_url`\nDownloads and extracts subtitles from a YouTube video.\n\n**Parameters:**\n- `url` (required): YouTube video URL\n\n**Example:**\n```json\n{\n  \"url\": \"https://www.youtube.com/watch?v=example\"\n}\n```\n\n### 2. `search_youtube_videos`\nSearches YouTube videos based on a query.\n\n**Parameters:**\n- `query` (required): Search term\n- `max_results` (optional, default=10): Maximum number of results\n\n**Example:**\n```json\n{\n  \"query\": \"how to make pizza\",\n  \"max_results\": 5\n}\n```\n\n**Returns:**\n- Video title, URL, description, duration, view count, uploader name\n\n### 3. `get_screenshots`\nCaptures screenshots from specific timestamps of a YouTube video.\n\n**Parameters:**\n- `url` (required): YouTube video URL\n- `timestamps` (required): Array of timestamps in `HH:MM:SS` format\n\n**Example:**\n```json\n{\n  \"url\": \"https://www.youtube.com/watch?v=example\",\n  \"timestamps\": [\"00:01:30\", \"00:05:45\"]\n}\n```\n\n**Returns:**\n- File paths to saved screenshots\n\n## Notes\n- Ensure `yt-dlp` and `ffmpeg` are installed globally.\n- The server uses temporary directories for processing, which are automatically cleaned up.\n- Error handling provides descriptive messages for troubleshooting.\n\n## Docker\n\n```bash\ndocker build -t novemberde/mcp-youtube .\ndocker run -d -p 3000:3000 novemberde/mcp-youtube\n```\n\n### Push to Docker Hub\n\n```bash\ndocker push novemberde/mcp-youtube\n```\n\n## Contributing\nContributions are welcome! Please:\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/your-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin feature/your-feature`)\n5. Create a new Pull Request\n\n## License\nThis project is licensed under the MIT License - see the [COPYING](COPYING) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "youtube",
        "ai",
        "social media",
        "automation social",
        "media integration"
      ],
      "category": "social-media"
    },
    "rafaljanicki--x-twitter-mcp-server": {
      "owner": "rafaljanicki",
      "name": "x-twitter-mcp-server",
      "url": "https://github.com/rafaljanicki/x-twitter-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/rafaljanicki.webp",
      "description": "Interact with Twitter to fetch profiles, post tweets, search trends, and manage followers and bookmarks using natural language commands. Includes rate limit handling and secure authentication for efficient social media management.",
      "stars": 13,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-22T11:26:24Z",
      "readme_content": "# X (Twitter) MCP server\n\n[![smithery badge](https://smithery.ai/badge/@rafaljanicki/x-twitter-mcp-server)](https://smithery.ai/server/@rafaljanicki/x-twitter-mcp-server)\n[![PyPI version](https://badge.fury.io/py/x-twitter-mcp.svg)](https://badge.fury.io/py/x-twitter-mcp)\n\nA Model Context Protocol (MCP) server for interacting with Twitter (X) via AI tools. This server allows you to fetch tweets, post tweets, search Twitter, manage followers, and more, all through natural language commands in AI Tools.\n\n<a href=\"https://glama.ai/mcp/servers/@rafaljanicki/x-twitter-mcp-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@rafaljanicki/x-twitter-mcp-server/badge\" alt=\"X (Twitter) server MCP server\" />\n</a>\n\n## Features\n\n- Fetch user profiles, followers, and following lists.\n- Post, delete, and favorite tweets.\n- Search Twitter for tweets and trends.\n- Manage bookmarks and timelines.\n- Built-in rate limit handling for the Twitter API.\n- Uses Twitter API v2 with proper authentication (API keys and tokens), avoiding the username/password hack to minimize the risk of account suspensions.\n- Provides a complete implementation of Twitter API v2 endpoints for user management, tweet management, timelines, and search functionality.\n\n## Prerequisites\n\n- **Python 3.10 or higher**: Ensure Python is installed on your system.\n- **Twitter Developer Account**: You need API credentials (API Key, API Secret, Access Token, Access Token Secret, and Bearer Token) from the [Twitter Developer Portal](https://developer.twitter.com/).\n- Optional: **Claude Desktop**: Download and install the Claude Desktop app from the [Anthropic website](https://www.anthropic.com/).\n- Optional: **Node.js** (for MCP integration): Required for running MCP servers in Claude Desktop.\n- A package manager like `uv` or `pip` for Python dependencies.\n\n## Installation\n\n### Option 1: Installing via Smithery (Recommended)\n\nTo install X (Twitter) MCP server for Claude Desktop automatically via [Smithery](https://smithery.ai/server//x-twitter-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @rafaljanicki/x-twitter-mcp-server --client claude\n```\n\n### Option 2: Install from PyPI\nThe easiest way to install `x-twitter-mcp` is via PyPI:\n\n```bash\npip install x-twitter-mcp\n```\n\n### Option 3: Install from Source\nIf you prefer to install from the source repository:\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/rafaljanicki/x-twitter-mcp-server.git\n   cd x-twitter-mcp-server\n   ```\n\n2. **Set Up a Virtual Environment** (optional but recommended):\n   ```bash\n   python -m venv .venv\n   source .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n   ```\n\n3. **Install Dependencies**:\n   Using `uv` (recommended, as the project uses `uv.lock`):\n   ```bash\n   uv sync\n   ```\n   Alternatively, using `pip`:\n   ```bash\n   pip install .\n   ```\n\n4. **Configure Environment Variables**:\n    - Create a `.env` file in the project root (you can copy `.env.example` if provided).\n    - Add your Twitter API credentials:\n      ```\n      TWITTER_API_KEY=your_api_key\n      TWITTER_API_SECRET=your_api_secret\n      TWITTER_ACCESS_TOKEN=your_access_token\n      TWITTER_ACCESS_TOKEN_SECRET=your_access_token_secret\n      TWITTER_BEARER_TOKEN=your_bearer_token\n      ```\n\n## Running the Server\n\nPreferred transport is Streamable HTTP. Use one of the following:\n\n### Recommended: Streamable HTTP (Docker/Smithery)\nRun the server as an HTTP service with Streamable HTTP and SSE endpoints.\n\n1. Build the Docker image:\n   ```bash\n   docker build -t x-twitter-mcp .\n   ```\n\n2. Run the container (Smithery uses PORT; default here is 8081):\n   ```bash\n   docker run -p 8081:8081 -e PORT=8081 x-twitter-mcp\n   ```\n\n3. Endpoints:\n   - Streamable HTTP (JSON-RPC over HTTP): `POST http://localhost:8081/mcp`\n   - SSE (Server-Sent Events): `GET http://localhost:8081/sse`\n\n4. Pass config per-request (recommended in Smithery) via base64-encoded `config` query parameter. Example config JSON:\n   ```json\n   {\"twitterApiKey\":\"...\",\"twitterApiSecret\":\"...\",\"twitterAccessToken\":\"...\",\"twitterAccessTokenSecret\":\"...\",\"twitterBearerToken\":\"...\"}\n   ```\n   Encode and call `initialize`:\n   ```bash\n   CONFIG_B64=$(printf '%s' '{\"twitterApiKey\":\"YOUR_KEY\",\"twitterApiSecret\":\"YOUR_SECRET\",\"twitterAccessToken\":\"YOUR_TOKEN\",\"twitterAccessTokenSecret\":\"YOUR_TOKEN_SECRET\",\"twitterBearerToken\":\"YOUR_BEARER\"}' | base64)\n\n   curl -sS -X POST \"http://localhost:8081/mcp?config=${CONFIG_B64}\" \\\n     -H 'content-type: application/json' \\\n     -d '{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"initialize\",\"params\":{\"capabilities\":{}}}'\n   ```\n\nNotes:\n- A `POST /` will return 404; use `/mcp` for Streamable HTTP and `/sse` for SSE.\n- When deployed via Smithery, `smithery.yaml` is configured for `runtime: container` and `startCommand.type: http`.\n\n### Streamable HTTP (Local, no Docker)\nRun the ASGI server directly.\n\nIf installed from PyPI:\n```bash\npython -m x_twitter_mcp.http_server\n```\n\nIf installed from source with `uv`:\n```bash\nuv run python -m x_twitter_mcp.http_server\n```\n\nEndpoints and config passing are the same as above.\n\n### Legacy STDIO (CLI Script)\nThe project also exposes a STDIO CLI script `x-twitter-mcp-server` for desktop clients that expect STDIO.\n\nIf installed from PyPI:\n```bash\nx-twitter-mcp-server\n```\n\nIf installed from source with `uv`:\n```bash\nuv run x-twitter-mcp-server\n```\n\n## Using with Claude Desktop\n\nTo use this MCP server with Claude Desktop, you need to configure Claude to connect to the server. Follow these steps:\n\n### Step 1: Install Node.js\nClaude Desktop uses Node.js to run MCP servers. If you don’t have Node.js installed:\n- Download and install Node.js from [nodejs.org](https://nodejs.org/).\n- Verify installation:\n  ```bash\n  node --version\n  ```\n\n### Step 2: Locate Claude Desktop Configuration\nClaude Desktop uses a `claude_desktop_config.json` file to configure MCP servers.\n\n- **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n- **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\nIf the file doesn’t exist, create it.\n\n### Step 3: Configure the MCP Server\nEdit `claude_desktop_config.json` to include the `x-twitter-mcp` server. Replace `/path/to/x-twitter-mcp-server` with the actual path to your project directory (if installed from source) or the path to your Python executable (if installed from PyPI).\n\nIf installed from PyPI:\n```json\n{\n  \"mcpServers\": {\n    \"x-twitter-mcp\": {\n      \"command\": \"x-twitter-mcp-server\",\n      \"args\": [],\n      \"env\": {\n        \"PYTHONUNBUFFERED\": \"1\",\n        \"TWITTER_API_KEY\": \"your_api_key\",\n        \"TWITTER_API_SECRET\": \"your_api_secret\",\n        \"TWITTER_ACCESS_TOKEN\": \"your_access_token\",\n        \"TWITTER_ACCESS_TOKEN_SECRET\": \"your_access_token_secret\",\n        \"TWITTER_BEARER_TOKEN\": \"your_bearer_token\"\n      }\n    }\n  }\n}\n```\n\nIf installed from source with `uv`:\n```json\n{\n  \"mcpServers\": {\n    \"x-twitter-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/x-twitter-mcp-server\",\n        \"run\",\n        \"x-twitter-mcp-server\"\n      ],\n      \"env\": {\n        \"PYTHONUNBUFFERED\": \"1\"\n      }\n    }\n  }\n}\n```\n\n- `\"command\": \"x-twitter-mcp-server\"`: Uses the CLI script directly if installed from PyPI.\n- `\"env\"`: If installed from PyPI, you may need to provide environment variables directly in the config (since there’s no `.env` file). If installed from source, the `.env` file will be used.\n- `\"env\": {\"PYTHONUNBUFFERED\": \"1\"}`: Ensures output is unbuffered for better logging in Claude.\n\n### Step 4: Restart Claude Desktop\n- Quit Claude Desktop completely.\n- Reopen Claude Desktop to load the new configuration.\n\n### Step 5: Verify Connection\n- Open Claude Desktop.\n- Look for a hammer or connector icon in the input area (bottom right corner). This indicates MCP tools are available.\n- Click the icon to see the available tools from `x-twitter-mcp`, such as `post_tweet`, `search_twitter`, `get_user_profile`, etc.\n\n### Step 6: Test with Claude\nYou can now interact with Twitter using natural language in Claude Desktop. Here are some example prompts:\n\n- **Fetch a User Profile**:\n  ```\n  Get the Twitter profile for user ID 123456.\n  ```\n  Claude will call the `get_user_profile` tool and return the user’s details.\n\n- **Post a Tweet**:\n  ```\n  Post a tweet saying \"Hello from Claude Desktop! #MCP\"\n  ```\n  Claude will use the `post_tweet` tool to post the tweet and confirm the action.\n\n- **Search Twitter**:\n  ```\n  Search Twitter for recent tweets about AI.\n  ```\n  Claude will invoke the `search_twitter` tool and return relevant tweets.\n\n- **Get Trends**:\n  ```\n  What are the current trending topics on Twitter?\n  ```\n  Claude will use the `get_trends` tool to fetch trending topics.\n\nWhen prompted, grant Claude permission to use the MCP tools for the chat session.\n\n## Available Tools\n\nBelow is a list of all tools provided by the `x-twitter-mcp` server, along with example executions in Claude Desktop using natural language prompts.\n\n### User Management Tools\n\n#### `get_user_profile`\n- **Description**: Get detailed profile information for a user.\n- **Claude Desktop Example**:\n  ```\n  Get the Twitter profile for user ID 123456789.\n  ```\n  Claude will return the user’s profile details, including ID, name, username, profile image URL, and description.\n\n#### `get_user_by_screen_name`\n- **Description**: Fetches a user by screen name.\n- **Claude Desktop Example**:\n  ```\n  Get the Twitter user with screen name \"example_user\".\n  ```\n  Claude will return the user’s profile details.\n\n#### `get_user_by_id`\n- **Description**: Fetches a user by ID.\n- **Claude Desktop Example**:\n  ```\n  Fetch the Twitter user with ID 987654321.\n  ```\n  Claude will return the user’s profile details.\n\n#### `get_user_followers`\n- **Description**: Retrieves a list of followers for a given user.\n- **Claude Desktop Example**:\n  ```\n  Get the followers of user ID 123456789, limit to 50.\n  ```\n  Claude will return a list of up to 50 followers.\n\n#### `get_user_following`\n- **Description**: Retrieves users the given user is following.\n- **Claude Desktop Example**:\n  ```\n  Who is user ID 123456789 following? Limit to 50 users.\n  ```\n  Claude will return a list of up to 50 users.\n\n#### `get_user_followers_you_know`\n- **Description**: Retrieves a list of common followers.\n- **Claude Desktop Example**:\n  ```\n  Get common followers for user ID 123456789, limit to 50.\n  ```\n  Claude will return a list of up to 50 common followers (simulated by filtering followers).\n\n#### `get_user_subscriptions`\n- **Description**: Retrieves a list of users to which the specified user is subscribed.\n- **Claude Desktop Example**:\n  ```\n  Get the subscriptions for user ID 123456789, limit to 50.\n  ```\n  Claude will return a list of up to 50 users (using following as a proxy for subscriptions).\n\n### Tweet Management Tools\n\n#### `post_tweet`\n- **Description**: Post a tweet with optional media, reply, and tags.\n- **Claude Desktop Example**:\n  ```\n  Post a tweet saying \"Hello from Claude Desktop! #MCP\"\n  ```\n  Claude will post the tweet and return the tweet details.\n\n#### `delete_tweet`\n- **Description**: Delete a tweet by its ID.\n- **Claude Desktop Example**:\n  ```\n  Delete the tweet with ID 123456789012345678.\n  ```\n  Claude will delete the tweet and confirm the action.\n\n#### `get_tweet_details`\n- **Description**: Get detailed information about a specific tweet.\n- **Claude Desktop Example**:\n  ```\n  Get details for tweet ID 123456789012345678.\n  ```\n  Claude will return the tweet’s details, including ID, text, creation date, and author ID.\n\n#### `create_poll_tweet`\n- **Description**: Create a tweet with a poll.\n- **Claude Desktop Example**:\n  ```\n  Create a poll tweet with the question \"What's your favorite color?\" and options \"Red\", \"Blue\", \"Green\" for 60 minutes.\n  ```\n  Claude will create the poll tweet and return the tweet details.\n\n#### `vote_on_poll`\n- **Description**: Vote on a poll.\n- **Claude Desktop Example**:\n  ```\n  Vote \"Blue\" on the poll in tweet ID 123456789012345678.\n  ```\n  Claude will return a mock response (since Twitter API v2 doesn’t support poll voting).\n\n#### `favorite_tweet`\n- **Description**: Favorites a tweet.\n- **Claude Desktop Example**:\n  ```\n  Like the tweet with ID 123456789012345678.\n  ```\n  Claude will favorite the tweet and confirm the action.\n\n#### `unfavorite_tweet`\n- **Description**: Unfavorites a tweet.\n- **Claude Desktop Example**:\n  ```\n  Unlike the tweet with ID 123456789012345678.\n  ```\n  Claude will unfavorite the tweet and confirm the action.\n\n#### `bookmark_tweet`\n- **Description**: Adds the tweet to bookmarks.\n- **Claude Desktop Example**:\n  ```\n  Bookmark the tweet with ID 123456789012345678.\n  ```\n  Claude will bookmark the tweet and confirm the action.\n\n#### `delete_bookmark`\n- **Description**: Removes the tweet from bookmarks.\n- **Claude Desktop Example**:\n  ```\n  Remove the bookmark for tweet ID 123456789012345678.\n  ```\n  Claude will remove the bookmark and confirm the action.\n\n#### `delete_all_bookmarks`\n- **Description**: Deletes all bookmarks.\n- **Claude Desktop Example**:\n  ```\n  Delete all my Twitter bookmarks.\n  ```\n  Claude will delete all bookmarks and confirm the action.\n\n### Timeline & Search Tools\n\n#### `get_timeline`\n- **Description**: Get tweets from your home timeline (For You).\n- **Claude Desktop Example**:\n  ```\n  Show my Twitter For You timeline, limit to 20 tweets.\n  ```\n  Claude will return up to 20 tweets from your For You timeline.\n\n#### `get_latest_timeline`\n- **Description**: Get tweets from your home timeline (Following).\n- **Claude Desktop Example**:\n  ```\n  Show my Twitter Following timeline, limit to 20 tweets.\n  ```\n  Claude will return up to 20 tweets from your Following timeline.\n\n#### `search_twitter`\n- **Description**: Search Twitter with a query.\n- **Claude Desktop Example**:\n  ```\n  Search Twitter for recent tweets about AI, limit to 10.\n  ```\n  Claude will return up to 10 recent tweets about AI.\n\n#### `get_trends`\n- **Description**: Retrieves trending topics on Twitter.\n- **Claude Desktop Example**:\n  ```\n  What are the current trending topics on Twitter? Limit to 10.\n  ```\n  Claude will return up to 10 trending topics.\n\n#### `get_highlights_tweets`\n- **Description**: Retrieves highlighted tweets from a user’s timeline.\n- **Claude Desktop Example**:\n  ```\n  Get highlighted tweets from user ID 123456789, limit to 20.\n  ```\n  Claude will return up to 20 tweets from the user’s timeline (simulated as highlights).\n\n#### `get_user_mentions`\n- **Description**: Get tweets mentioning a specific user.\n- **Claude Desktop Example**:\n  ```\n  Get tweets mentioning user ID 123456789, limit to 20.\n  ```\n  Claude will return up to 20 tweets mentioning the user.\n\n## Troubleshooting\n\n- **Server Not Starting**:\n    - Ensure your `.env` file has all required Twitter API credentials (if installed from source).\n    - If installed from PyPI, ensure environment variables are set in `claude_desktop_config.json` or your shell.\n    - Check the terminal output for errors when running `x-twitter-mcp-server`.\n    - Verify that `uv` or your Python executable is correctly installed and accessible.\n\n- **Claude Not Detecting the Server**:\n    - Confirm the path in `claude_desktop_config.json` is correct.\n    - Ensure the `command` and `args` point to the correct executable and script.\n    - Restart Claude Desktop after updating the config file.\n    - Check Claude’s Developer Mode logs (Help → Enable Developer Mode → Open MCP Log File) for errors.\n\n- **Rate Limit Errors**:\n    - The server includes rate limit handling, but if you hit Twitter API limits, you may need to wait for the reset window (e.g., 15 minutes for tweet actions).\n\n- **Syntax Warnings**:\n    - If you see `SyntaxWarning` messages from Tweepy, they are due to docstring issues in Tweepy with Python 3.13. The server includes a warning suppression to handle this.\n\n## Contributing\n\nContributions are welcome! Please open an issue or submit a pull request on the [GitHub repository](https://github.com/rafaljanicki/x-twitter-mcp-server).\n\n## License\n\nThis project is licensed under the MIT License. See the `LICENSE` file for details.\n\n## Author\n\n- **Rafal Janicki** - [rafal@kult.io](mailto:rafal@kult.io)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twitter",
        "tweets",
        "social",
        "interact twitter",
        "automation social",
        "social media"
      ],
      "category": "social-media"
    },
    "rugvedp--linkedin-mcp": {
      "owner": "rugvedp",
      "name": "linkedin-mcp",
      "url": "https://github.com/rugvedp/linkedin-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/rugvedp.webp",
      "description": "Fetch and analyze LinkedIn posts data, providing insights through keyword search and engagement metrics analysis. Interacts with LinkedIn's API to manage public profile posts and filter results by various criteria.",
      "stars": 19,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-12T19:27:09Z",
      "readme_content": "<a href=\"https://glama.ai/mcp/servers/5vbvsljk42\">\n  <img alt=\"badge\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/5vbvsljk42/badge\" />\n</a>\n\n\n# LinkedIn Profile Analyzer MCP\n\nA powerful LinkedIn profile analyzer MCP (Model Context Protocol) server that interacts with LinkedIn's API to fetch, analyze, and manage LinkedIn posts data. This MCP is specifically designed to work with Claude AI.\n\n\n## Features\n\n- Fetch and store LinkedIn posts for any public profile\n- Search through posts with keyword filtering\n- Get top performing posts based on engagement metrics\n- Filter posts by date range\n- Paginated access to stored posts\n- Easy integration with Claude AI\n\n## Prerequisites\n\n- Python 3.7+\n- RapidAPI key for LinkedIn Data API\n- Claude AI access\n\n## Getting Started\n\n### 1. Get RapidAPI Key\n\n1. Visit [LinkedIn Data API on RapidAPI](https://rapidapi.com/rockapis-rockapis-default/api/linkedin-data-api)\n2. Sign up or log in to RapidAPI\n3. Subscribe to the LinkedIn Data API\n4. Copy your RapidAPI key from the dashboard\n\n### 2. Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/rugvedp/linkedin-mcp.git\ncd linkedin-mcp\n```\n\n2. Install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n3. Set up environment variables:\n   - Create a `.env` file\n   - Add your RapidAPI key:\n```env\nRAPIDAPI_KEY=your_rapidapi_key_here\n```\n\n## Project Structure\n\n```\nlinkedin-mcp/\n├── main.py              # Main MCP server implementation\n├── mcp.json            # MCP configuration file\n├── requirements.txt    # Python dependencies\n├── .env               # Environment variables\n└── README.md          # Documentation\n```\n\n## MCP Configuration\n\nThe `mcp.json` file configures the LinkedIn MCP server:\n\n```json\n{\n  \"mcpServers\": {\n    \"LinkedIn Updated\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--with\",\n        \"mcp[cli]\",\n        \"mcp\",\n        \"run\",\n        \"path/to/your/script.py\"\n      ]\n    }\n  }\n}\n```\n\nMake sure to update the path in `args` to match your local file location.\n\n## Available Tools\n\n### 1. fetch_and_save_linkedin_posts\nFetches LinkedIn posts for a given username and saves them locally.\n```python\nfetch_and_save_linkedin_posts(username: str) -> str\n```\n\n### 2. get_saved_posts\nRetrieves saved posts with pagination support.\n```python\nget_saved_posts(start: int = 0, limit: int = 10) -> dict\n```\n\n### 3. search_posts\nSearches posts for specific keywords.\n```python\nsearch_posts(keyword: str) -> dict\n```\n\n### 4. get_top_posts\nReturns top performing posts based on engagement metrics.\n```python\nget_top_posts(metric: str = \"Like Count\", top_n: int = 5) -> dict\n```\n\n### 5. get_posts_by_date\nFilters posts within a specified date range.\n```python\nget_posts_by_date(start_date: str, end_date: str) -> dict\n```\n\n## Using with Claude\n\n1. Initialize the MCP server in your conversation with Claude\n2. Use the available tools through natural language commands\n3. Claude will help you interact with LinkedIn data using these tools\n\n## API Integration\n\nThis project uses the following endpoint from the LinkedIn Data API:\n\n- `GET /get-profile-posts`: Fetches posts from a LinkedIn profile\n  - Base URL: `https://linkedin-data-api.p.rapidapi.com`\n  - Required Headers:\n    - `x-rapidapi-key`: Your RapidAPI key\n    - `x-rapidapi-host`: `linkedin-data-api.p.rapidapi.com`\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Author\n\n[Rugved Patil](https://github.com/rugvedp)\n\n## Repository\n\n[linkedin-mcp](https://github.com/rugvedp/linkedin-mcp.git)\n\n## Acknowledgments\n\n- RapidAPI for providing LinkedIn data access\n- Anthropic for Claude AI capabilities\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "linkedin",
        "social",
        "ai",
        "interacts linkedin",
        "linkedin posts",
        "rugvedp linkedin"
      ],
      "category": "social-media"
    },
    "ruradium--mcp-reddit": {
      "owner": "ruradium",
      "name": "mcp-reddit",
      "url": "https://github.com/ruradium/mcp-reddit",
      "imageUrl": "/freedevtools/mcp/pfp/ruradium.webp",
      "description": "Fetch and analyze Reddit content, including hot threads and detailed posts with comments from any subreddit. Supports various post types such as text, link, and gallery to provide comprehensive insights.",
      "stars": 2,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-02T05:42:54Z",
      "readme_content": "# MCP Reddit Server\n[![smithery badge](https://smithery.ai/badge/@adhikasp/mcp-reddit)](https://smithery.ai/server/@adhikasp/mcp-reddit)\n\nA [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) server that provides tools for fetching and analyzing Reddit content.\n\n<a href=\"https://glama.ai/mcp/servers/3cg9gdyors\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/3cg9gdyors/badge\" alt=\"mcp-reddit MCP server\" /></a>\n\n## Features\n\n- Fetch hot threads from any subreddit\n- Get detailed post content including comments\n- Support for different post types (text, link, gallery)\n\n## Installation\n\n### Installing via Smithery\n\nTo install Reddit Content for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@adhikasp/mcp-reddit):\n\n```bash\nnpx -y @smithery/cli install @adhikasp/mcp-reddit --client claude\n```\n\n### Manual Installation\n```json\n{\n  \"reddit\": {\n    \"command\": \"uvx\",\n    \"args\": [\"--from\", \"git+https://github.com/adhikasp/mcp-reddit.git\", \"mcp-reddit\"],\n    \"env\": {}\n  }\n}\n```\n\n## Usage\n\nUsing [mcp-client-cli](https://github.com/adhikasp/mcp-client-cli):\n\n```\n$ llm what are latest hot thread in r/victoria3\n\nI'll fetch the latest hot threads from the Victoria 3 subreddit for you.\n\nTool Calls:\n  fetch_hot_threads\n  Args:\n    subreddit: victoria3\n\n\nBased on the hot threads, here are the key highlights from the Victoria 3 subreddit:\n\n1. Dev Diary #126 - Update 1.8 Overview\n   - Major updates planned for the game, including:\n     - Political Movement Rework (Ideological Forces)\n     - Discrimination Rework\n     - Food Availability, Famines, and Harvest Incidents\n     - Additional features like Companies owning buildings and Bulk Nationalization\n\n2. Dev Diary #138 - Pivot of Empire Update\n   - Update 1.8 \"Masala Chai\" has been released\n   - Focuses on India with new Journal Entries, Events, and Immersion Pack\n   - 10 new achievements added\n   - Save games from 1.7.7 are not compatible with 1.8\n\n3. Interesting Community Discussions:\n   - A player shared a detailed experience of retaking Constantinople as Greece, highlighting the complex population dynamics\n   - Humorous posts about game mechanics, such as investment rights and political movements\n   - Various memes and gameplay screenshots showcasing unique game situations\n\nThe most upvoted thread is the Dev Diary #126, which provides an in-depth look at the upcoming game mechanics improvements, particularly the reworks to political movements and discrimination systems.\n\nWould you like me to elaborate on any of these points or provide more details about the Victoria 3 update?\n``` \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "ai",
        "reddit",
        "automation social",
        "social media",
        "social presence"
      ],
      "category": "social-media"
    },
    "ryanmac--agent-twitter-client-mcp": {
      "owner": "ryanmac",
      "name": "agent-twitter-client-mcp",
      "url": "https://github.com/ryanmac/agent-twitter-client-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ryanmac.webp",
      "description": "Integrates with Twitter to enable AI models to fetch, send, and manage tweets using various authentication methods, thereby providing real-time Twitter data without requiring direct API access.",
      "stars": 17,
      "forks": 10,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-23T09:29:40Z",
      "readme_content": "# agent-twitter-client-mcp\n\n[![npm version](https://img.shields.io/npm/v/agent-twitter-client-mcp.svg)](https://www.npmjs.com/package/agent-twitter-client-mcp)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Node.js Version](https://img.shields.io/node/v/agent-twitter-client-mcp.svg)](https://nodejs.org)\n\nA Model Context Protocol (MCP) server that integrates with Twitter using the `agent-twitter-client` package, allowing AI models to interact with Twitter without direct API access.\n\n## Features\n\n- **Authentication Options**:\n\n  - Cookie-based authentication (recommended)\n  - Username/password authentication\n  - Twitter API v2 credentials\n\n- **Tweet Operations**:\n\n  - Fetch tweets from users\n  - Get specific tweets by ID\n  - Search tweets\n  - Send tweets with text and media\n  - Create polls\n  - Like, retweet, and quote tweets\n\n- **User Operations**:\n\n  - Get user profiles\n  - Follow users\n  - Get followers and following lists\n\n- **Grok Integration**:\n  - Chat with Grok via Twitter's interface\n  - Continue conversations with conversation IDs\n  - Get web search results and citations\n  - Access Twitter's real-time data through Grok\n  - **Note**: Grok functionality requires [agent-twitter-client v0.0.19](https://github.com/elizaOS/agent-twitter-client/releases/tag/0.0.19) or higher\n\n## Documentation\n\n- [Developer Guide](docs/DEVELOPER_GUIDE.md) - Comprehensive guide for developers\n- [Testing Guide](docs/TESTING.md) - Instructions for testing the MCP\n- [Agent Guide](docs/AGENT_GUIDE.md) - Guide for AI agents on how to use the Twitter MCP\n- [Contributing Guide](CONTRIBUTING.md) - Guidelines for contributing to this project\n- [Changelog](CHANGELOG.md) - History of changes to this project\n- [Demo README](demo/README.md) - Guide for running the demo scripts\n- [Grok Examples](demo/GROK_EXAMPLES.md) - Documentation for the Grok AI integration examples\n\n## Quick Start\n\n### Installation\n\n```bash\n# Install globally\nnpm install -g agent-twitter-client-mcp\n\n# Or install locally\nnpm install agent-twitter-client-mcp\n```\n\n### Basic Usage\n\n1. Create a `.env` file with your Twitter credentials (see [Authentication Methods](#authentication-methods))\n2. Run the MCP server:\n\n```bash\n# If installed globally\nagent-twitter-client-mcp\n\n# If installed locally\nnpx agent-twitter-client-mcp\n```\n\n### Demo Scripts\n\nThe package includes a `demo` directory with example scripts that demonstrate various features:\n\n```bash\n# Clone the repository to access the demo scripts\ngit clone https://github.com/ryanmac/agent-twitter-client-mcp.git\ncd agent-twitter-client-mcp/demo\n\n# Run the interactive demo menu\n./run-demo.sh\n\n# Run a specific demo script\n./run-demo.sh --script tweet-search.js\n\n# Run Grok AI examples (requires agent-twitter-client v0.0.19)\n./run-demo.sh --script simple-grok.js --use-local-agent-twitter-client\n./run-demo.sh --script grok-chat.js --use-local-agent-twitter-client\n```\n\nSee the [Demo README](demo/README.md) for more details.\n\n### Port Configuration\n\nBy default, the MCP server runs on port 3000. If you need to change this (for example, if you already have an application running on port 3000), you have several options:\n\n#### Option 1: Using Environment Variables\n\nSet the `PORT` environment variable:\n\n```bash\nPORT=3001 npx agent-twitter-client-mcp\n```\n\n#### Option 2: Using Docker Compose\n\nIf using Docker Compose, you can configure both the host and container ports in your `.env` file:\n\n```\n# .env file\nMCP_HOST_PORT=3001    # The port on your host machine\nMCP_CONTAINER_PORT=3000  # The port inside the container\n```\n\nThen run:\n\n```bash\ndocker-compose up -d\n```\n\nThis will map port 3001 on your host to port 3000 in the container, allowing you to access the MCP at http://localhost:3001 while your other application continues to use port 3000.\n\n### Setup with Claude Desktop\n\n1. Configure Claude Desktop to use this MCP by adding to your config file:\n\n**Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n**macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"agent-twitter-client-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"agent-twitter-client-mcp\"],\n      \"env\": {\n        \"AUTH_METHOD\": \"cookies\",\n        \"TWITTER_COOKIES\": \"[\\\"auth_token=YOUR_AUTH_TOKEN; Domain=.twitter.com\\\", \\\"ct0=YOUR_CT0_VALUE; Domain=.twitter.com\\\", \\\"twid=u%3DYOUR_USER_ID; Domain=.twitter.com\\\"]\"\n      }\n    }\n  }\n}\n```\n\n2. Restart Claude Desktop\n\n### Authentication Methods\n\n#### Cookie Authentication (Recommended)\n\n```json\n{\n  \"AUTH_METHOD\": \"cookies\",\n  \"TWITTER_COOKIES\": \"[\\\"auth_token=YOUR_AUTH_TOKEN; Domain=.twitter.com\\\", \\\"ct0=YOUR_CT0_VALUE; Domain=.twitter.com\\\", \\\"twid=u%3DYOUR_USER_ID; Domain=.twitter.com\\\"]\"\n}\n```\n\nTo obtain cookies:\n\n1. Log in to Twitter in your browser\n2. Open Developer Tools (F12)\n3. Go to the Application tab > Cookies\n4. Copy the values of `auth_token`, `ct0`, and `twid` cookies\n5. Make sure to include the `Domain=.twitter.com` part for each cookie\n\n#### Username/Password Authentication\n\n```json\n{\n  \"AUTH_METHOD\": \"credentials\",\n  \"TWITTER_USERNAME\": \"your_username\",\n  \"TWITTER_PASSWORD\": \"your_password\",\n  \"TWITTER_EMAIL\": \"your_email@example.com\", // Optional\n  \"TWITTER_2FA_SECRET\": \"your_2fa_secret\" // Optional, required if 2FA is enabled\n}\n```\n\n#### Twitter API Authentication\n\n```json\n{\n  \"AUTH_METHOD\": \"api\",\n  \"TWITTER_API_KEY\": \"your_api_key\",\n  \"TWITTER_API_SECRET_KEY\": \"your_api_secret_key\",\n  \"TWITTER_ACCESS_TOKEN\": \"your_access_token\",\n  \"TWITTER_ACCESS_TOKEN_SECRET\": \"your_access_token_secret\"\n}\n```\n\n## Available Tools\n\n- `get_user_tweets`: Fetch tweets from a specific user\n- `get_tweet_by_id`: Fetch a specific tweet by ID\n- `search_tweets`: Search for tweets\n- `send_tweet`: Post a new tweet\n- `send_tweet_with_poll`: Post a tweet with a poll\n- `like_tweet`: Like a tweet\n- `retweet`: Retweet a tweet\n- `quote_tweet`: Quote a tweet\n- `get_user_profile`: Get a user's profile\n- `follow_user`: Follow a user\n- `get_followers`: Get a user's followers\n- `get_following`: Get users a user is following\n- `grok_chat`: Chat with Grok via Twitter\n- `health_check`: Check the health of the Twitter MCP server\n\n## Testing Interface\n\nThe MCP includes an interactive command-line interface for testing:\n\n```bash\nnpx agent-twitter-client-mcp-test\n# or if installed locally\nnpm run test:interface\n```\n\nThis launches a REPL where you can test various MCP functions:\n\n```\nagent-twitter-client-mcp> help\n\nAvailable commands:\n  health                     Run a health check\n  profile <username>         Get a user profile\n  tweets <username> [count]  Get tweets from a user\n  tweet <id>                 Get a specific tweet by ID\n  search <query> [count]     Search for tweets\n  post <text>                Post a new tweet\n  like <id>                  Like a tweet\n  retweet <id>               Retweet a tweet\n  quote <id> <text>          Quote a tweet\n  follow <username>          Follow a user\n  followers <userId> [count] Get a user's followers\n  following <userId> [count] Get users a user is following\n  grok <message>             Chat with Grok\n  help                       Show available commands\n  exit                       Exit the test interface\n```\n\n### Example Test Commands\n\n```\n# Run a health check\nagent-twitter-client-mcp> health\n\n# Search for tweets\nagent-twitter-client-mcp> search mcp 2\n\n# Get a user's profile\nagent-twitter-client-mcp> profile elonmusk\n\n# Get tweets from a user\nagent-twitter-client-mcp> tweets openai 5\n\n# Chat with Grok\nagent-twitter-client-mcp> grok Explain quantum computing in simple terms\n```\n\n## Example Usage\n\nAsk Claude to:\n\n- \"Search Twitter for tweets about AI\"\n- \"Post a tweet saying 'Hello from Claude!'\"\n- \"Get the latest tweets from @OpenAI\"\n- \"Chat with Grok about quantum computing\"\n\n## Advanced Usage\n\n### Working with Media\n\nTo post a tweet with an image:\n\n```\nI want to post a tweet with an image. The tweet should say \"Beautiful sunset today!\" and include this image.\n```\n\nTo post a tweet with a video:\n\n```\nI want to post a tweet with a video. The tweet should say \"Check out this amazing video!\" and include the video file.\n```\n\n### Creating Polls\n\nTo create a poll:\n\n```\nCreate a Twitter poll asking \"What's your favorite programming language?\" with options: Python, JavaScript, Rust, and Go. The poll should run for 24 hours.\n```\n\n### Interacting with Grok\n\nTo have a conversation with Grok:\n\n```\nUse Grok to explain quantum computing to me. Ask it to include some real-world applications.\n```\n\nTo continue a conversation with Grok:\n\n```\nContinue the Grok conversation and ask it to elaborate on quantum entanglement.\n```\n\n### Grok's Unique Capabilities\n\nGrok on Twitter has access to real-time Twitter data that even the standalone Grok API doesn't have. This means you can ask Grok about:\n\n- Current trending topics on Twitter\n- Analysis of recent tweets on specific subjects\n- Information about Twitter users and their content\n- Real-time events being discussed on the platform\n\nExample queries:\n\n- \"What are the trending topics on Twitter right now?\"\n- \"Analyze the sentiment around AI on Twitter\"\n- \"What are people saying about the latest Apple event?\"\n- \"Show me information about popular memecoins being discussed today\"\n\n### Grok Authentication Requirements\n\nGrok functionality requires proper authentication. The MCP supports two methods:\n\n1. **Cookie Authentication** (Recommended):\n\n   - Cookies must be in JSON array format\n   - Example: `TWITTER_COOKIES=[\"auth_token=YOUR_AUTH_TOKEN; Domain=.twitter.com\", \"ct0=YOUR_CT0_VALUE; Domain=.twitter.com\", \"twid=u%3DYOUR_USER_ID; Domain=.twitter.com\"]`\n   - Essential cookies are `auth_token`, `ct0`, and `twid`\n\n2. **Username/Password Authentication**:\n   - Set `TWITTER_USERNAME` and `TWITTER_PASSWORD` in your environment\n   - May encounter Cloudflare protection in some cases\n\n### Grok Rate Limits\n\nGrok has rate limits that may affect usage:\n\n- Non-premium accounts: 25 messages per 2 hours\n- Premium accounts: Higher limits\n\nThe MCP will return rate limit information in the response when limits are reached.\n\nFor more details on using Grok, see the [Grok Examples](demo/GROK_EXAMPLES.md) documentation.\n\n## Troubleshooting\n\n### Authentication Issues\n\n#### Cookie Authentication Problems\n\nIf you're experiencing issues with cookie authentication:\n\n1. **Cookie Expiration**: Twitter cookies typically expire after a certain period. Try refreshing your cookies by logging out and back into Twitter.\n2. **Cookie Format**: Ensure your cookies are properly formatted as a JSON array of strings with the correct domain.\n3. **Required Cookies**: Make sure you've included the essential cookies: `auth_token`, `ct0`, and `twid`.\n\nExample of properly formatted cookies:\n\n```json\n\"TWITTER_COOKIES\": \"[\\\"auth_token=1234567890abcdef; Domain=.twitter.com\\\", \\\"ct0=abcdef1234567890; Domain=.twitter.com\\\", \\\"twid=u%3D1234567890; Domain=.twitter.com\\\"]\"\n```\n\n#### Credential Authentication Problems\n\nIf you're having trouble with username/password authentication:\n\n1. **Two-Factor Authentication**: If your account has 2FA enabled, you'll need to provide the `TWITTER_2FA_SECRET`.\n2. **Account Lockouts**: Too many failed login attempts may lock your account. Check your email for account verification requests.\n3. **Captcha Challenges**: Twitter may present captcha challenges that the client can't handle automatically.\n\n#### API Authentication Problems\n\nFor API authentication issues:\n\n1. **API Key Permissions**: Ensure your API keys have the necessary permissions for the actions you're trying to perform.\n2. **Rate Limiting**: Twitter API has rate limits that may cause failures if exceeded.\n3. **API Changes**: Twitter occasionally changes its API, which may cause compatibility issues.\n\n### Operation Errors\n\n#### Tweet Posting Failures\n\nIf you can't post tweets:\n\n1. **Content Restrictions**: Twitter may block tweets that violate its content policies.\n2. **Media Format Issues**: Ensure media is properly formatted and encoded.\n3. **Rate Limiting**: Twitter limits how frequently you can post.\n\n#### Search Problems\n\nIf search isn't working:\n\n1. **Query Syntax**: Ensure your search query follows Twitter's search syntax.\n2. **Search Limitations**: Some search modes may have restrictions or require specific permissions.\n\n#### Grok Issues\n\nIf Grok functionality isn't working:\n\n1. **Version Requirement**:\n\n   - Grok requires [agent-twitter-client v0.0.19](https://github.com/elizaOS/agent-twitter-client/releases/tag/0.0.19) or higher\n   - The current package uses v0.0.18 for basic functionality\n   - For the demo scripts, use the `--use-local-agent-twitter-client` flag to temporarily install v0.0.19\n\n2. **Authentication Issues**:\n\n   - Cookie Format: Ensure cookies are in the correct JSON array format\n   - Cookie Validity: Twitter cookies expire after a certain period\n   - Cloudflare Protection: Username/password authentication may be blocked by Cloudflare\n   - Premium Requirement: Grok access requires a Twitter Premium subscription\n\n3. **Rate Limits**:\n\n   - Non-premium accounts: 25 messages per 2 hours\n   - Error Message: \"Rate Limited: You've reached the limit...\"\n   - Solution: Wait until the rate limit resets or upgrade to a premium account\n\n4. **Environment File Location**:\n   - For the demo scripts, make sure your credentials are in `demo/.env`, not in the root `.env` file\n   - Use the `--debug-env` flag to check which environment variables are being loaded\n\nFor detailed troubleshooting of Grok issues, see the [Grok Examples](demo/GROK_EXAMPLES.md) documentation.\n\n### Server Issues\n\n#### Health Check\n\nUse the `health_check` tool to diagnose server issues:\n\n```\nRun a health check on the agent-twitter-client-mcp server to diagnose any issues.\n```\n\nThe health check will report on:\n\n- Authentication status\n- API connectivity\n- Memory usage\n\n#### Logging\n\nThe server logs to both console and files:\n\n- `error.log`: Contains error-level messages\n- `combined.log`: Contains all log messages\n\nCheck these logs for detailed error information.\n\n## Development\n\n### Prerequisites\n\n- Node.js 18+\n- npm\n\n### Setup\n\n1. Clone the repository\n\n```bash\ngit clone https://github.com/ryanmac/agent-twitter-client-mcp.git\ncd agent-twitter-client-mcp\n```\n\n2. Install dependencies\n\n```bash\nnpm install\n```\n\n3. Create a `.env` file with configuration:\n\n```\nAUTH_METHOD=cookies\nTWITTER_COOKIES=[\"cookie1=value1\", \"cookie2=value2\"]\n```\n\n4. Build the project\n\n```bash\nnpm run build\n```\n\n5. Start the server\n\n```bash\nnpm start\n```\n\n### Environment Variables\n\nIn addition to the authentication variables, you can set:\n\n- `LOG_LEVEL`: Set logging level (error, warn, info, debug)\n- `NODE_ENV`: Set environment (development, production)\n\n## Docker\n\nYou can also run the server using Docker:\n\n### Using Docker Directly\n\n```bash\n# Build the Docker image\ndocker build -t agent-twitter-client-mcp .\n\n# Run the container with environment variables\ndocker run -p 3000:3000 \\\n  -e AUTH_METHOD=cookies \\\n  -e TWITTER_COOKIES='[\"auth_token=YOUR_AUTH_TOKEN; Domain=.twitter.com\", \"ct0=YOUR_CT0_VALUE; Domain=.twitter.com\"]' \\\n  agent-twitter-client-mcp\n```\n\n### Using Docker Compose\n\n1. Create a `.env` file with your Twitter credentials\n2. Run with docker-compose:\n\n```bash\n# Start the service\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f\n\n# Stop the service\ndocker-compose down\n```\n\n### Environment Variables in Docker\n\nYou can pass environment variables to the Docker container in several ways:\n\n1. **In the docker-compose.yml file** (already configured)\n2. **Through a .env file** (recommended for docker-compose)\n3. **Directly in the docker run command** (as shown above)\n\n### Persisting Logs\n\nThe docker-compose configuration includes a volume mount for logs:\n\n```yaml\nvolumes:\n  - ./logs:/app/logs\n```\n\nThis will store logs in a `logs` directory in your project folder.\n\n## Security Considerations\n\n- **Credential Storage**: Store credentials securely, preferably using environment variables or a secure vault.\n- **Rate Limiting**: Implement rate limiting to prevent abuse of the Twitter API.\n- **Content Validation**: Validate all content before posting to prevent malicious use.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twitter",
        "tweets",
        "social",
        "integrates twitter",
        "agent twitter",
        "twitter client"
      ],
      "category": "social-media"
    },
    "saginawj--mcp-reddit-companion": {
      "owner": "saginawj",
      "name": "mcp-reddit-companion",
      "url": "https://github.com/saginawj/mcp-reddit-companion",
      "imageUrl": "/freedevtools/mcp/pfp/saginawj.webp",
      "description": "Enables natural language interactions with personalized Reddit feeds, allowing users to analyze and summarize content relevant to their interests.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-27T17:56:32Z",
      "readme_content": "[![smithery badge](https://smithery.ai/badge/@saginawj/mcp-reddit-companion)](https://smithery.ai/server/@saginawj/mcp-reddit-companion)\n\n# MCP Reddit Companion\n\nAn MCP tool that enables natural language interaction with your personal Reddit experience. Create custom curated feeds on Reddit and use your favorite LLM client to analyze, summarize, and engage with content that matters to you.\n\n## Example LLM Commands\n\nHere are some example commands you can use with your LLM client:\n\n```python\n# Basic Feed Interaction\n\"Show me the latest posts from my 'tech-news' feed\"\n\"Summarize the top posts from my 'science' feed\"\n\"What are the trending topics in my 'programming' feed?\"\n\n# Content Analysis\n\"What are the common themes in my 'ai' feed?\"\n\"Which of my recent posts got the most engagement?\"\n\"Summarize the discussions in my 'philosophy' feed\"\n\n# Personal Activity\n\"Show me my recent Reddit activity\"\n\"What comments have I received on my posts?\"\n\"Are there any unread messages in my inbox?\"\n\n# Engagement Tracking\n\"How are my recent posts performing?\"\n\"Show me the most active discussions in my feeds\"\n\"What posts got the most comments in my 'news' feed?\"\n```\n\n## Prerequisites\n\n- Python 3.11+\n- Reddit account credentials (username, password)\n- Docker (optional, for containerized deployment)\n- An MCP-compatible LLM client (like Cursor)\n\n## Installation\n\n### Local Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/yourusername/mcp-reddit.git\ncd mcp-reddit\n```\n\n2. Install dependencies using uv:\n```bash\nuv pip install .\n```\n\n3. Create a `.env` file with your Reddit API credentials:\n```env\nREDDIT_CLIENT_ID=your_client_id\nREDDIT_CLIENT_SECRET=your_client_secret\nREDDIT_USERNAME=your_username\nREDDIT_PASSWORD=your_password\n```\n\n### Docker Installation\n\n1. Build the Docker image:\n```bash\ndocker build -t mcp-reddit .\n```\n\n2. Run the container (for passwords with special characters):\n```bash\ndocker run \\\n  -e REDDIT_CLIENT_ID='your_client_id' \\\n  -e REDDIT_CLIENT_SECRET='your_client_secret' \\\n  -e REDDIT_USERNAME='your_username' \\\n  -e REDDIT_PASSWORD='your_password' \\\n  mcp-reddit\n```\n\nNote: If your password contains special characters (like !, $, etc.), make sure to:\n1. Use single quotes around the password\n2. Escape any special characters with a backslash\n3. Or use double quotes and escape the special characters\n\nExample with special characters:\n```bash\ndocker run \\\n  -e REDDIT_CLIENT_ID='your_client_id' \\\n  -e REDDIT_CLIENT_SECRET='your_client_secret' \\\n  -e REDDIT_USERNAME='your_username' \\\n  -e REDDIT_PASSWORD='your\\!password' \\\n  mcp-reddit\n```\n\n## Usage\n\n### Local Usage\n\n1. Start the MCP server:\n```bash\nuv run mcp dev src/mcp_reddit_companion/server.py\n```\n\nor \n\n2. Install in Claude Desktop\n```bash\nuv run mcp install src/mcp_reddit_companion/server.py \n```\n\n### Docker Usage\n\nThe MCP server will start automatically when the container runs. Connect your LLM client to interact with your Reddit feeds.\n\n## Configuration\n\n### Cursor Integration\n\nTo use with Cursor, add the following to your `~/.cursor/mcp.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"reddit-companion\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"C:\\\\code\\\\personal\\\\mcp-reddit\",\n        \"run\",\n        \"mcp\",\n        \"dev\",\n        \"src/mcp_reddit_companion/server.py\"\n      ]\n    }\n  }\n}\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "ai",
        "feeds",
        "automation social",
        "social media",
        "reddit companion"
      ],
      "category": "social-media"
    },
    "saginawj--mcp-server-youtube": {
      "owner": "saginawj",
      "name": "mcp-server-youtube",
      "url": "https://github.com/saginawj/mcp-server-youtube",
      "imageUrl": "/freedevtools/mcp/pfp/saginawj.webp",
      "description": "Enable natural language interaction with YouTube to fetch trending videos and recent uploads from subscribed channels. Seamlessly access and manage YouTube content without manual API handling.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-27T19:09:56Z",
      "readme_content": "[![smithery badge](https://smithery.ai/badge/@saginawj/mcp-youtube-companion)](https://smithery.ai/server/@saginawj/mcp-youtube-companion)\n\n# MCP YouTube Companion\n\nAn MCP tool that enables natural language interaction with your personal YouTube experience. Fetch trending videos, get recent uploads from your subscribed channels, and interact with YouTube content via your favorite LLM client.\n\n## Overview\n\nThis MCP tool allows you to interact with YouTube through natural language queries, providing an easy way to access trending videos and user-specific content, such as recent uploads from subscribed channels, all without needing to manually interact with the YouTube API.\n\n## Example LLM Commands\n\nHere are some example commands you can use with your LLM client:\n\n```python\n# Fetch Trending Videos\n\"Show me the latest trending videos on YouTube\"\n\"What's trending in the US on YouTube?\"\n\n# Fetch Subscribed Channel Feeds\n\"Show me the latest uploads from my subscribed channels\"\n\"What's the most recent video from the 'Tech' channel?\"\n\n# User Activity\n\"What was my latest activity on YouTube?\"\n\"Show me my most recent comments on videos\"\n\"Have I uploaded anything recently?\"\n```\n\n## Prerequisites\n\nA Google account with YouTube access\n\nYouTube API credentials (Client ID, Client Secret, and Refresh Token)\n\n\n## Authentication\n\n### Get YouTube API Credentials:\n\nNavigate to the Google Cloud Console.\n\nCreate a project and enable the YouTube Data API v3.\n\nGenerate OAuth credentials (Client ID, Client Secret) and get your refresh token.\n\n### Set Up OAuth Authentication:\n\nUse/build a frontend/api that OAuth with Google to exchange an access code for a refresh token, then use the refresh token to connect with the MCP Server\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "youtube",
        "social",
        "uploads",
        "interaction youtube",
        "social media",
        "server youtube"
      ],
      "category": "social-media"
    },
    "semioz--bluesky-mcp": {
      "owner": "semioz",
      "name": "bluesky-mcp",
      "url": "https://github.com/semioz/bluesky-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/semioz.webp",
      "description": "Enable seamless posting and interaction on Bluesky through the AT Protocol, allowing for actions like authenticating, creating posts with text and images, managing likes and reposts, and fetching profiles and timelines.",
      "stars": 5,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-30T06:08:18Z",
      "readme_content": "# Bluesky MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@semioz/bluesky-mcp)](https://smithery.ai/server/@semioz/bluesky-mcp)\n\nA Model Context Protocol (MCP) server for Bluesky that can post on your behalf by using the AT Protocol.\n\n## Setup\n\n### Installing via Smithery\n\nTo install bluesky-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@semioz/bluesky-mcp):\n\n```bash\nnpx -y @smithery/cli install @semioz/bluesky-mcp --client claude\n```\n\n### Manual Installation\n\nConfigure Claude for Desktop:\n\nOpen your Claude for Desktop App configuration at `~/Library/Application Support/Claude/claude_desktop_config.json` and add:\n\n```json\n{\n    \"mcpServers\": {\n        \"bluesky-mcp\": {\n            \"command\": \"npx\",\n            \"args\": [\"-y\", \"@semihberkay/bluesky-mcp\"],\n            \"env\": {\n                \"BLUESKY_IDENTIFIER\": \"your.handle.bsky.social\",\n                \"BLUESKY_PASSWORD\": \"your-app-password\"\n            }\n        }\n    }\n}\n```\n\n### Required Environment Variables\n- `BLUESKY_IDENTIFIER`: Your Bluesky handle or email\n- `BLUESKY_PASSWORD`: Your Bluesky app password\n\n## Available MCP Tools\n\n### Authentication\n```typescript\ntool: \"login\"\nparams: {\n  identifier?: string, // Your Bluesky handle or email (optional if set in env)\n  password?: string    // Your Bluesky app password (optional if set in env)\n}\n```\nThe server will attempt to auto-login using credentials from the environment variables when starting up. You only need to use the login tool if:\n- You haven't set the environment variables in Claude's config\n- You want to login with different credentials\n- The auto-login failed\n\n### Posts\n```typescript\n// Create a new post\ntool: \"create-post\"\nparams: {\n  text: string,           // The text content of your post\n  images?: {              // Optional array of images\n    data: string,         // Base64 encoded image data\n    encoding: string      // Image MIME type (e.g., image/jpeg)\n  }[]\n}\n\n// Get a single post\ntool: \"get-post\"\nparams: {\n  uri: string            // The URI of the post to fetch\n}\n\n// Get multiple posts\ntool: \"get-posts\"\nparams: {\n  uris: string[]        // Array of post URIs to fetch\n}\n\n// Delete a post\ntool: \"delete-post\"\nparams: {\n  uri: string           // The URI of the post to delete\n}\n```\n\n### Interactions\n```typescript\n// Like a post\ntool: \"like-post\"\nparams: {\n  uri: string,          // The URI of the post to like\n  cid: string          // The CID of the post to like\n}\n\n// Unlike a post\ntool: \"unlike-post\"\nparams: {\n  likeUri: string      // The URI of the like to remove\n}\n\n// Repost\ntool: \"repost\"\nparams: {\n  uri: string,         // The URI of the post to repost\n  cid: string         // The CID of the post to repost\n}\n\n// Remove repost\ntool: \"unrepost\"\nparams: {\n  repostUri: string   // The URI of the repost to remove\n}\n```\n\n### Profile & Timeline\n```typescript\n// Get your profile\ntool: \"get-profile\"\nparams: {}\n\n// Get timeline\ntool: \"get-timeline\"\nparams: {\n  limit?: number      // Number of posts to fetch (max 100)\n}\n```\n\n## Prompts\n\n### Format Timeline\n```typescript\nprompt: \"format-timeline\"\nparams: {\n  timeline: any       // Timeline data to format\n}\n```\nFormats timeline data in a human-readable way with:\n- Author name/handle\n- Post text\n- Engagement metrics (replies, reposts, likes)\n- Timestamps\n- Embedded content (links, videos)\n- Repost information\n\n## Features\n\n- ✅ Authentication with Bluesky\n- ✅ Create text posts\n- ✅ Support for image uploads\n- ✅ Get user profile\n- ✅ Get timeline\n- ✅ Like/Unlike posts\n- ✅ Repost/Unrepost\n- ✅ Rich text support with automatic link and mention detection\n- ✅ MCP compatible for use with Claude\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "automation",
        "bluesky",
        "automation social",
        "social media",
        "integration social"
      ],
      "category": "social-media"
    },
    "sinanefeozler--reddit-summarizer-mcp": {
      "owner": "sinanefeozler",
      "name": "reddit-summarizer-mcp",
      "url": "https://github.com/sinanefeozler/reddit-summarizer-mcp",
      "imageUrl": "",
      "description": "MCP server for summarizing users's Reddit homepage or any subreddit based on posts and comments.",
      "stars": 7,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-25T10:29:10Z",
      "readme_content": "# Reddit Summarizer MCP Server\r\nA Model Context Protocol (MCP) server for summarizing homepage of the user or contents of subreddits and comments on posts.\r\n## Features\r\n- Summarize user's reddit frontpage (homepage) with or without comment analyses.\r\n- Summarize a subreddit contents by inspecting posts sorted by hot, new, top, rising, random (if aviable) with or without comment analysis.\r\n- Summarize comments on a post.\r\n## Requirements\r\n- Python 3.12 or higher\r\n- uv package manager (recommended)\r\n- Reddit API credentials\r\n- MCP client (e.g. Claude Desktop)\r\n## Installation\r\nClone repository or download files manually.\r\n```bash\r\ngit clone https://github.com/sinanefeozler/reddit-summarizer-mcp.git\r\ncd reddit-summarizer-mcp\r\n```\r\nCreate virtual envoriment and install dependencies.\r\n```bash\r\nuv venv\r\nsource .venv/bin/activate\r\nuv sync\r\n```\r\n### Setting Up The Envoriment Variables\r\n- This server needs reddit username, password and reddit authentication.\r\n- You can get client id and client secret by following [these steps](https://github.com/reddit-archive/reddit/wiki/OAuth2-Quick-Start-Example#first-steps)\r\n- When you get the required keys create .env file according to .env.example\r\nFor claude desktop client users check out this [link](https://modelcontextprotocol.io/quickstart/user) to setup the server.\r\n## Available Tools\r\n### `summarize_frontpage`\r\nSummarize user's homepage with post limits and optional comment analyse on posts.\r\nParameters:\r\n- `limit` (default: 10): Post fetching limit\r\n- `with_comments` (default: false): Summarize with comments on posts\r\n### `summarize_subreddit`\r\nSummarize a subreddit's contents by inspecting posts.\r\nParameters:\r\n- `limit` (default: 10): Post fetching limit\r\n- `with_comments` (default: false): Summarize with comments on posts\r\n- `fetch_by` (default: 'hot') : Sorting option for posts. (hot, new, top, rising, random if aviable)\r\n### `reed_comments`\r\nReed and summarize comments on a post. Needs post id or url.\r\nParameters:\r\n- `id` (default: None) : id of post\r\n- `url` (default: None) : url of post\r\n- `limit` (default: 15) : fetching limit of the comments\r\n## Prompts\r\n### Example Prompts:\r\n- \"Summarize my reddit frontpage with comment analyse for deeper understanding of public opinion\"\r\n- \"Summarize the hot post of Politics\"\r\n### Prompt Template:\r\n#### `/summarize_my_page`\r\nProvides a prompt to summarize and categorize the posts and comments on frontpage. Gives LLM a predefined template and categorize to make a more human readable outputs.\r\n## License\r\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "ai",
        "automation",
        "automation social",
        "social media",
        "integration social"
      ],
      "category": "social-media"
    },
    "taazkareem--twitter-mcp-server": {
      "owner": "taazkareem",
      "name": "twitter-mcp-server",
      "url": "https://github.com/taazkareem/twitter-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/taazkareem.webp",
      "description": "Integrate with Twitter to access tweets, user profiles, and interact with tweets such as liking and retweeting through a standardized interface. The server supports robust error handling and rate limiting while fetching data and performing user interactions.",
      "stars": 17,
      "forks": 3,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-10-03T21:39:44Z",
      "readme_content": "# Twitter MCP Server\n\nA powerful Twitter integration for AI agents that leverages the Model Context Protocol (MCP) standard, providing a comprehensive set of Twitter functionality through a clean and consistent interface.\n\n## Overview\n\nThis server provides access to Twitter's features through MCP tools, allowing seamless integration with AI assistants and other MCP-compatible clients. It's built on top of the `agent-twitter-client` library and provides robust error handling, rate limiting, and consistent response formatting.\n\n## Features\n\n### Basic Reading\n- Get tweets from users with media support\n- Fetch user profiles with detailed information\n- Search tweets by hashtags or keywords\n- Filter search results by latest/top\n- Rate limiting (max 50 tweets per request)\n\n### User Interactions\n- Like/Unlike tweets\n- Retweet/Undo retweet\n- Post tweets with:\n  - Text content\n  - Media attachments (images, videos)\n  - Reply functionality\n  - Quote tweet capability\n\n### Advanced Features\n- Get user relationships (followers/following)\n- Fetch trending topics\n- Access different timeline types:\n  - Home timeline\n  - Following timeline\n  - User timeline\n- List management (fetch list tweets)\n\n### Media & Advanced Interactions\n- Media handling:\n  - Image upload (JPEG, PNG, GIF)\n  - Video upload (MP4)\n  - Alt text support\n- Thread creation\n- Follow/Unfollow users\n\n## Tools\n\n### Reading Tools\n- `get_tweets` - Fetch recent tweets from a user\n- `get_profile` - Get a user's profile information\n- `search_tweets` - Search for tweets by hashtag or keyword\n\n### Interaction Tools\n- `like_tweet` - Like or unlike a tweet\n- `retweet` - Retweet or undo retweet\n- `post_tweet` - Post a new tweet with optional media\n- `create_thread` - Create a Twitter thread\n\n### Timeline Tools\n- `get_timeline` - Get tweets from different timeline types\n- `get_list_tweets` - Get tweets from a Twitter list\n- `get_trends` - Get current trending topics\n\n### User Management Tools\n- `get_user_relationships` - Get followers or following list\n- `follow_user` - Follow or unfollow a user\n\n## Installation\n\n1. Install dependencies:\n```bash\nnpm install\n```\n\n2. Build the server:\n```bash\nnpm run build\n```\n\n3. Configure environment variables:\n```bash\n# Required: Twitter Account Credentials (for user authentication)\nTWITTER_USERNAME=your_username\nTWITTER_PASSWORD=your_password\nTWITTER_EMAIL=your_email\n\n# Twitter API Authentication (Optional)\nTWITTER_API_KEY=your_api_key\nTWITTER_API_SECRET_KEY=your_api_secret_key\nTWITTER_ACCESS_TOKEN=your_access_token\nTWITTER_ACCESS_TOKEN_SECRET=your_access_token_secret\n```\n\n4. Add the server config to your MCP client:\n\nOn MacOS:\n```bash\n~/Library/Application Support/Claude/claude_desktop_config.json\n```\n\nOn Windows:\n```bash\n%APPDATA%/Claude/claude_desktop_config.json\n```\n\nConfiguration:\n```json\n{\n  \"mcpServers\": {\n    \"twitter-mcp-server\": {\n      \"command\": \"/path/to/twitter-mcp-server/build/index.js\"\n    }\n  }\n}\n```\n\n## Development\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, you can use the MCP Inspector for debugging:\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## Error Handling\n\nThe server implements comprehensive error handling:\n- Input validation for all parameters\n- Rate limiting protection\n- Detailed error messages\n- Proper error propagation\n- Logging for debugging\n\n## Response Format\n\nAll tools return responses in a consistent format:\n```typescript\n{\n  content: [{\n    type: \"text\",\n    text: string // JSON stringified response or error message\n  }]\n}\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT License - see LICENSE file for details\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twitter",
        "tweets",
        "retweeting",
        "integrate twitter",
        "interact tweets",
        "twitter mcp"
      ],
      "category": "social-media"
    },
    "unlimitbladeworks--awesome-mcp-twikit": {
      "owner": "unlimitbladeworks",
      "name": "awesome-mcp-twikit",
      "url": "https://github.com/unlimitbladeworks/awesome-mcp-twikit",
      "imageUrl": "/freedevtools/mcp/pfp/unlimitbladeworks.webp",
      "description": "Search tweets, analyze sentiment, and retrieve timeline updates from Twitter. Provides tools for social media insights and monitoring directly within LLM-powered applications.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-05-13T04:02:20Z",
      "readme_content": "# Awesome-MCP-Twikit\n\n[![smithery badge](https://smithery.ai/badge/@unlimitbladeworks/awesome-mcp-twikit)](https://smithery.ai/server/@unlimitbladeworks/awesome-mcp-twikit)\nA Model Context Protocol (MCP) server for interacting with Twitter.\n\n\n## Installation\n\n### Installing via Smithery\n\nTo install Twikit Twitter Search for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-twikit):\n\n```bash\nnpx -y @smithery/cli install mcp-twikit --client claude\n```\n\n### Manual Installation\n```json\n{\n    \"mcpServer\": {\n        \"mcp-twikit-tools\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"--from\",\n                \"git+https://github.com/unlimitbladeworks/awesome-mcp-twikit\",\n                \"mcp-twikit-tools\"\n            ],\n            \"env\": {\n                \"TWITTER_USERNAME\": \"@example\",\n                \"TWITTER_EMAIL\": \"me@example.com\",\n                \"TWITTER_PASSWORD\": \"secret\",\n                \"TWITTER_2FA\": \"2FA\",\n                \"ENABLE_PROXY\": \"true\",\n                \"PROXY\": \"http://ip:port\"\n            }\n        }\n    }\n}\n```\n\n## Example usage\n\nUsing [mcp-client-cli](https://github.com/adhikasp/mcp-client-cli)\n\n\n### Comparing sentiments across different twitter accounts\n\n```\n$ llm compare 20 latest tweet directed @IndiHomeCare, @di_cbn, @BiznetHome, @ID_MyRepublic. What are people sentiment to the product? Do 1 search for each account\n\nI'll help you analyze the latest tweets for these internet service providers in Indonesia to understand the public sentiment. I'll use the search_twitter function for each account.\n\nTool Calls:\n  search_twitter\n  Args:\n    query: to:IndiHomeCare\n    count: 20\n    sort_by: Latest\n\nTool Calls:\n  search_twitter\n  Args:\n    query: to:di_cbn\n    count: 20\n    sort_by: Latest\n\nTool Calls:\n  search_twitter\n  Args:\n    query: to:BiznetHome\n    count: 20\n    sort_by: Latest\n\nTool Calls:\n  search_twitter\n  Args:\n    query: to:ID_MyRepublic\n    count: 20\n    sort_by: Latest\n\nSentiment Analysis Summary:\n\n1. IndiHomeCare:\n- Predominantly Negative Sentiment\n- Key Issues:\n  - Unstable internet connection\n  - Slow response times\n  - Intermittent service disruptions\n  - Long waiting times for customer support\n- Specific Complaints:\n  - Network instability\n  - Lagging internet\n  - Unresolved technical issues\n  - Lack of timely communication\n\n2. CBN (di_cbn):\n- Mostly Negative Sentiment\n- Key Issues:\n  - Prolonged internet outages (some reporting 1-2 days of no service)\n  - Slow customer support response\n  - Lack of clear communication about service disruptions\n- Specific Complaints:\n  - LOS (Line of Sight) issues\n  - No timely resolution of technical problems\n  - Delayed email and support responses\n\n3. BiznetHome:\n- Strongly Negative Sentiment\n- Key Issues:\n  - Frequent network interruptions\n  - Slow internet speeds\n  - Poor customer support responsiveness\n- Specific Complaints:\n  - Packet loss\n  - Inconsistent connection\n  - Long download times\n  - Unresolved technical issues\n\n4. MyRepublic (ID_MyRepublic):\n- Extremely Negative Sentiment\n- Key Issues:\n  - Severe and prolonged service disruptions\n  - Complete internet outages\n  - Inability to access online services and games\n  - Extremely poor customer support\n- Specific Complaints:\n  - Multi-day service interruptions\n  - Inability to access websites and online games\n  - Missed technician appointments\n  - Lack of compensation or clear communication\n\nOverall Sentiment Ranking (from Bad to Worst):\n1. IndiHomeCare (Bad)\n2. CBN (Worse)\n3. BiznetHome (Very Bad)\n4. MyRepublic (Extremely Bad)\n\nCommon Themes Across Providers:\n- Poor network stability\n- Slow customer support response\n- Lack of transparent communication\n- Prolonged service interruptions\n- Unresolved technical issues\n\nRecommendation: These Indonesian internet service providers are experiencing significant customer satisfaction issues. Customers are frustrated with unreliable services, poor technical support, and lack of timely problem resolution.\n```\n\n### Getting tweets from your home timeline\n\n```\n$ llm what is happening on my twitter timeline?\n\nI'll help you check your Twitter timeline. I'll retrieve the latest tweets from your timeline:\n\nTool Calls:\n  get_timeline\n  Args:\n\nI'll summarize the key highlights from your Twitter timeline:\n\n1. Professional/Tech Highlights:\n- @ibamarief is preparing to onboard their first intern, noting it's a significant responsibility\n- @papanberjalan shared a critique about web developers not understanding computer performance\n- @pathofexile is running a Twitch Drops promotion for their game\n\n2. Notable Tweets:\n- @elonmusk posted a cryptic \"Hmm\"\n- @realDonaldTrump discussed eliminating Daylight Saving Time\n- @blinkist shared an article about billionaires reading up to 50 books per year\n\n3. Miscellaneous Interesting Tweets:\n- @nealtaparia shared a thread about 11 companies built around a single product\n- @Rixhabh__ posted about creative and iconic ads\n- Several tweets in Indonesian covering various topics from personal stories to social issues\n\nWould you like me to elaborate on any of these tweets or provide more context about any specific post?\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twitter",
        "tweets",
        "social",
        "twitter provides",
        "automation social",
        "tweets analyze"
      ],
      "category": "social-media"
    },
    "v-3--discordmcp": {
      "owner": "v-3",
      "name": "discordmcp",
      "url": "https://github.com/v-3/discordmcp",
      "imageUrl": "/freedevtools/mcp/pfp/v-3.webp",
      "description": "Enables interaction with Discord channels by sending and reading messages through Discord's API, allowing for real-time communication and message handling.",
      "stars": 143,
      "forks": 56,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T04:14:54Z",
      "readme_content": "# Discord MCP Server\n\nA Model Context Protocol (MCP) server that enables LLMs to interact with Discord channels, allowing them to send and read messages through Discord's API. Using this server, LLMs like Claude can directly interact with Discord channels while maintaining user control and security.\n\n## Features\n\n- Send messages to Discord channels\n- Read recent messages from channels\n- Automatic server and channel discovery\n- Support for both channel names and IDs\n- Proper error handling and validation\n\n## Prerequisites\n\n- Node.js 16.x or higher\n- A Discord bot token\n- The bot must be invited to your server with proper permissions:\n  - Read Messages/View Channels\n  - Send Messages\n  - Read Message History\n\n## Setup\n\n1. Clone this repository:\n```bash\ngit clone https://github.com/yourusername/discordmcp.git\ncd discordmcp\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Create a `.env` file in the root directory with your Discord bot token:\n```\nDISCORD_TOKEN=your_discord_bot_token_here\n```\n\n4. Build the server:\n```bash\nnpm run build\n```\n\n## Usage with Claude for Desktop\n\n1. Open your Claude for Desktop configuration file:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. Add the Discord MCP server configuration:\n```json\n{\n  \"mcpServers\": {\n    \"discord\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/discordmcp/build/index.js\"],\n      \"env\": {\n        \"DISCORD_TOKEN\": \"your_discord_bot_token_here\"\n      }\n    }\n  }\n}\n```\n\n3. Restart Claude for Desktop\n\n## Available Tools\n\n### send-message\nSends a message to a specified Discord channel.\n\nParameters:\n- `server` (optional): Server name or ID (required if bot is in multiple servers)\n- `channel`: Channel name (e.g., \"general\") or ID\n- `message`: Message content to send\n\nExample:\n```json\n{\n  \"channel\": \"general\",\n  \"message\": \"Hello from MCP!\"\n}\n```\n\n### read-messages\nReads recent messages from a specified Discord channel.\n\nParameters:\n- `server` (optional): Server name or ID (required if bot is in multiple servers)\n- `channel`: Channel name (e.g., \"general\") or ID\n- `limit` (optional): Number of messages to fetch (default: 50, max: 100)\n\nExample:\n```json\n{\n  \"channel\": \"general\",\n  \"limit\": 10\n}\n```\n\n## Development\n\n1. Install development dependencies:\n```bash\nnpm install --save-dev typescript @types/node\n```\n\n2. Start the server in development mode:\n```bash\nnpm run dev\n```\n\n## Testing\n\nYou can test the server using the MCP Inspector:\n\n```bash\nnpx @modelcontextprotocol/inspector node build/index.js\n```\n\n## Examples\n\nHere are some example interactions you can try with Claude after setting up the Discord MCP server:\n\n1. \"Can you read the last 5 messages from the general channel?\"\n2. \"Please send a message to the announcements channel saying 'Meeting starts in 10 minutes'\"\n3. \"What were the most recent messages in the development channel about the latest release?\"\n\nClaude will use the appropriate tools to interact with Discord while asking for your approval before sending any messages.\n\n## Security Considerations\n\n- The bot requires proper Discord permissions to function\n- All message sending operations require explicit user approval\n- Environment variables should be properly secured\n- Token should never be committed to version control\n- Channel access is limited to channels the bot has been given access to\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Support\n\nIf you encounter any issues or have questions:\n1. Check the GitHub Issues section\n2. Consult the MCP documentation at https://modelcontextprotocol.io\n3. Open a new issue with detailed reproduction steps",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "discord",
        "discordmcp",
        "social",
        "interaction discord",
        "presence discordmcp",
        "discord api"
      ],
      "category": "social-media"
    },
    "vaibhavgeek--twitter-rapidapi-mcp-x": {
      "owner": "vaibhavgeek",
      "name": "twitter-rapidapi-mcp-x",
      "url": "https://github.com/vaibhavgeek/twitter-rapidapi-mcp-x",
      "imageUrl": "/freedevtools/mcp/pfp/vaibhavgeek.webp",
      "description": "Fetch tweets using the RapidAPI client to integrate Twitter data into applications. Easily access social media insights with minimal setup.",
      "stars": 22,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-23T08:32:59Z",
      "readme_content": "## Twitter MCP Client\n\n1. Go to RapidAPI.com, get your api key and enable the api  https://rapidapi.com/alexanderxbx/api/twitter-api45 \n2. Update the claude_desktop_config.json with the following details , \n```\n\"mcp-x\": {\n      \"command\": \"uv\", \n      \"args\": [\n        \"--directory\",\n        \"PATH TO REPOSITORY\",\n        \"run\",\n        \"main.py\"\n      ],\n      \"env\":{\n        \"RAPID_API_KEY\": \"XXXXXXXXXXXXXXXX\"\n      }\n    }\n```\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twitter",
        "tweets",
        "rapidapi",
        "integrate twitter",
        "twitter rapidapi",
        "twitter data"
      ],
      "category": "social-media"
    },
    "vidhupv--x-mcp": {
      "owner": "vidhupv",
      "name": "x-mcp",
      "url": "https://github.com/vidhupv/x-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/vidhupv.webp",
      "description": "Create drafts of X(Twitter) posts and threads using LLMs, and publish them directly through chat interfaces.",
      "stars": 61,
      "forks": 22,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-26T17:51:00Z",
      "readme_content": "# X(Twitter) MCP server\n\n[![smithery badge](https://smithery.ai/badge/x-mcp)](https://smithery.ai/server/x-mcp)\n\nAn MCP server to create, manage and publish X/Twitter posts directly through Claude chat.\n\n<a href=\"https://glama.ai/mcp/servers/jsxr09dktf\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/jsxr09dktf/badge\" alt=\"X(Twitter) Server MCP server\" />\n</a>\n\n## Quick Setup\n\n### Installing via Smithery\n\nTo install X(Twitter) MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/x-mcp):\n\n```bash\nnpx -y @smithery/cli install x-mcp --client claude\n```\n\n### Manual Installation\n1. Clone the repository:\n```bash\ngit clone https://github.com/yourusername/x-mcp.git\n```\n\n2. Install UV globally using Homebrew in Terminal:\n```bash\nbrew install uv\n```\n\n3. Create claude_desktop_config.json:\n   - For MacOS: Open directory `~/Library/Application Support/Claude/` and create the file inside it\n   - For Windows: Open directory `%APPDATA%/Claude/` and create the file inside it\n\n4. Add this configuration to claude_desktop_config.json:\n```json\n{\n  \"mcpServers\": {\n    \"x_mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/x-mcp\",\n        \"run\",\n        \"x-mcp\"\n      ],\n      \"env\": {\n        \"TWITTER_API_KEY\": \"your_api_key\",\n        \"TWITTER_API_SECRET\": \"your_api_secret\",\n        \"TWITTER_ACCESS_TOKEN\": \"your_access_token\",\n        \"TWITTER_ACCESS_TOKEN_SECRET\": \"your_access_token_secret\"\n      }\n    }\n  }\n}\n```\n\n5. Get your X/Twitter API credentials:\n   - Go to [X API Developer Portal](https://developer.x.com/en/products/x-api)\n   - Create a project\n   - In User Authentication Settings: Set up with Read and Write permissions, Web App type\n   - Set Callback URL to `http://localhost/` and Website URL to `http://example.com/`\n   - Generate and copy all keys and tokens from Keys and Tokens section\n\n6. Update the config file:\n   - Replace `/path/to/x-mcp` with your actual repository path\n   - Add your X/Twitter API credentials\n\n7. Quit Claude completely and reopen it\n\n## Usage Examples\n\n* \"Tweet 'Just learned how to tweet through AI - mind blown! 🤖✨'\"\n* \"Create a thread about the history of pizza\"\n* \"Show me my draft tweets\"\n* \"Publish this draft!\"\n* \"Delete that draft\"\n\n## Troubleshooting\n\nIf not working:\n- Make sure UV is installed globally (if not, uninstall with `pip uninstall uv` and reinstall with `brew install uv`)\n- Or find UV path with `which uv` and replace `\"command\": \"uv\"` with the full path\n- Verify all X/Twitter credentials are correct\n- Check if the x-mcp path in config matches your actual repository location",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twitter",
        "social",
        "chat",
        "automation social",
        "twitter posts",
        "social media"
      ],
      "category": "social-media"
    },
    "yap-audio--tiktok-mcp": {
      "owner": "yap-audio",
      "name": "tiktok-mcp",
      "url": "https://github.com/yap-audio/tiktok-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/yap-audio.webp",
      "description": "Discover and extract metadata from TikTok videos by searching for trending content using hashtags. This service includes built-in error handling, anti-detection measures, and configurable options for video retrieval and API session management.",
      "stars": 56,
      "forks": 6,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T22:17:13Z",
      "readme_content": "# TikTok MCP Service\n\nA Model Context Protocol service for TikTok video discovery and metadata extraction. This service provides a robust interface for searching TikTok videos by hashtags and retrieving trending content, with built-in anti-detection measures and error handling.\n\n## Features\n\n- Search videos by hashtags\n- Configurable video count per search (default: 30)\n- Anti-bot detection measures\n- Proxy support\n- Automatic API session management\n- Rate limiting and error handling\n- Health status monitoring\n\n## Configuration\n\nThe service uses environment variables for configuration. Create a `.env` file with:\n\n```env\nms_token=your_tiktok_ms_token  # Optional but recommended to avoid bot detection\nTIKTOK_PROXY=your_proxy_url    # Optional proxy configuration\n```\n\n## Installation and Setup\n\n```bash\n# Install dependencies\npoetry install\n\n# Install browser automation dependencies\npoetry run python -m playwright install\n\n# Start the service\npoetry run python -m tiktok_mcp_service.main\n```\n\n## Claude Desktop Integration\n\nOnce your service is running, you can integrate it with Claude Desktop. Since we're using Poetry for dependency management, make sure to run the MCP CLI commands through Poetry:\n\n```bash\n# Navigate to the project directory\ncd /path/to/tiktok-mcp-service\n\n# Install the service in Claude Desktop with Poetry in editable mode\npoetry run mcp install tiktok_mcp_service/main.py --with-editable . -f .env\n\n# Optional: Install with a custom name\npoetry run mcp install tiktok_mcp_service/main.py --name \"TikTok Video Search\" --with-editable . -f .env\n```\n\nAfter installation, the service will be available in Claude Desktop and will run using Poetry for proper dependency management.\n\n## API Endpoints\n\n### Health Check\n- `GET /health` - Check service health and API initialization status\n  ```json\n  {\n    \"status\": \"running\",\n    \"api_initialized\": true,\n    \"service\": {\n      \"name\": \"TikTok MCP Service\",\n      \"version\": \"0.1.0\",\n      \"description\": \"A Model Context Protocol service for searching TikTok videos\"\n    }\n  }\n  ```\n\n### Search Videos\n- `POST /search` - Search for videos with hashtags\n  ```json\n  {\n    \"search_terms\": [\"python\", \"coding\"],\n    \"count\": 30  // Optional, defaults to 30\n  }\n  ```\n  Response includes video URLs, descriptions, and engagement statistics (views, likes, shares, comments).\n\n### Resource Management\n- `POST /cleanup` - Clean up resources and API sessions\n\n## Error Handling\n\nThe service includes comprehensive error handling for:\n- API initialization failures\n- Bot detection issues\n- Network errors\n- Rate limiting\n- Invalid search terms\n\n## Development\n\nBuilt with:\n- TikTokApi\n- FastMCP\n- Poetry for dependency management\n- Playwright for browser automation\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tiktok",
        "social",
        "ai",
        "automation social",
        "social media",
        "tiktok videos"
      ],
      "category": "social-media"
    },
    "zhangzhongnan928--mcp-warpcast-server": {
      "owner": "zhangzhongnan928",
      "name": "mcp-warpcast-server",
      "url": "https://github.com/zhangzhongnan928/mcp-warpcast-server",
      "imageUrl": "/freedevtools/mcp/pfp/zhangzhongnan928.webp",
      "description": "Interact with your Warpcast account to post, read, search, and manage casts and channels. Engage with trending content and follow or unfollow channels seamlessly.",
      "stars": 3,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-06-17T06:40:39Z",
      "readme_content": "# Warpcast MCP Server\n\nA Model Context Protocol (MCP) server for Warpcast integration that allows you to use Claude to interact with your Warpcast account.  \nThe implementation now follows the [FastMCP](https://modelcontextprotocol.io) style server from the MCP Python SDK.\n\n## Features\n\n- Post casts to your Warpcast account\n- Read casts from Warpcast\n- Search casts by keyword or hashtag\n- Browse and interact with channels\n- Follow/unfollow channels\n- Get trending casts\n\nWarpcast API \nhttps://docs.farcaster.xyz/reference/warpcast/api\n\n## Usage\n\n`mcp-warpcast-server` is usually launched automatically by Claude Desktop's MCP client when the Warpcast tools are configured.\nAfter the server starts you can ask Claude to:\n\n- \"Post a cast about [topic]\"\n- \"Read the latest casts from [username]\"\n- \"Search for casts about [topic]\"\n- \"Show me trending casts on Warpcast\"\n- \"Show me popular channels on Warpcast\"\n- \"Get casts from the [channel] channel\"\n- \"Follow the [channel] channel for me\"\n\n## Available Tools\n\nThis MCP server provides several tools that Claude can use:\n\n1. **post-cast**: Create a new post on Warpcast (max 320 characters)\n2. **get-user-casts**: Retrieve recent casts from a specific user\n3. **search-casts**: Search for casts by keyword or phrase\n4. **get-trending-casts**: Get the currently trending casts on Warpcast\n5. **get-all-channels**: List available channels on Warpcast\n6. **get-channel**: Get information about a specific channel\n7. **get-channel-casts**: Get casts from a specific channel\n8. **follow-channel**: Follow a channel\n9. **unfollow-channel**: Unfollow a channel\n\n\n## Setup\n\n\nClaude Desktop normally launches this server for you when the Warpcast tools are configured. The steps below are only needed if you want to run the server manually for development.\n\n1. Create a Python virtual environment (Python 3.11 or newer is recommended):\n   ```bash\n   python3 -m venv venv\n   source venv/bin/activate\n   ```\n2. Install dependencies (the requirements include the MCP Python SDK):\n   ```bash\n   pip install -r requirements.txt\n   ```\n3. Provide a Warpcast API token:\n   - Log in to [Warpcast](https://warpcast.com/) and open **Settings > Developer**.\n   - Click **Create API Token** and copy the value.\n   - Add `WARPCAST_API_TOKEN` under the `env` section of your Claude desktop configuration.\n   - If starting the server manually, you can instead export the token in your shell:\n     ```bash\n     export WARPCAST_API_TOKEN=YOUR_TOKEN\n     ```\n   The server validates this variable on startup. If it is missing, a warning\n   is logged and authorized requests will respond with **HTTP 500** errors.\n\n4. (Optional) Start the server manually:\n   The `app` variable exported from `main.py` is created using\n   `mcp.streamable_http_app()` so it can be served by any ASGI server.\n   ```bash\n   uvicorn main:app --reload\n   ```\n\nThe server exposes HTTP endpoints matching the tools listed above and a standard `/mcp` endpoint provided by FastMCP.\n\n## Using with Claude Desktop\n\nFollow these steps to access the Warpcast tools from Claude's desktop application:\n\n1. Start the server (or let Claude launch it) using the setup instructions above.\n2. Open your Claude configuration file:\n   - **macOS:** `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - **Windows:** `%APPDATA%\\Claude\\claude_desktop_config.json`\n3. Add the Warpcast server under the `mcpServers` key. Replace the path with the location of this repository:\n\n```json\n{\n  \"mcpServers\": {\n    \"warpcast\": {\n      \"command\": \"uvicorn\",\n      \"args\": [\n        \"--app-dir\",\n        \"/ABSOLUTE/PATH/TO/mcp-warpcast-server\",\n        \"main:app\",\n        \"--port\",\n        \"8000\"\n      ],\n      \"url\": \"http://localhost:8000/mcp\",\n      \"env\": {\n        \"WARPCAST_API_TOKEN\": \"YOUR_API_TOKEN\"\n      }\n    }\n  }\n}\n```\n\nSpecifying a `url` tells Claude Desktop to communicate with the server over HTTP using Server-Sent Events instead of standard input and output.\nIf you omit `url`, Claude Desktop defaults to communicating via standard input and output (stdio), which will not work with this server.\n\n4. Save the file and restart Claude Desktop. You should now see a hammer icon in the chat input that lets you use the Warpcast tools.\n\n## Running Tests\n\nUnit tests are written with `pytest` and use FastAPI's `TestClient` (installed via `fastapi[testclient]`).\nCreate a virtual environment, install dependencies and run the suite:\n\n```bash\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\nmake test        # or simply `pytest`\n```\n\nThe tests mock the Warpcast API layer so no network connection is required.\n\n\n## MCP Compatibility\n\nThis server uses the official MCP Python SDK and is fully compatible with the [Model Context Protocol](https://modelcontextprotocol.org/). Clients can connect to the `/mcp` endpoint provided by FastMCP and interact with the tools defined here.\n## License\n\nThis project is licensed under the [MIT License](LICENSE).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "social",
        "warpcast",
        "follow",
        "automation social",
        "social media",
        "integration social"
      ],
      "category": "social-media"
    }
  }
}