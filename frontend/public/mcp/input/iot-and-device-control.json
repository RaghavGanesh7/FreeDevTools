{
  "category": "iot-and-device-control",
  "categoryDisplay": "IoT and Device Control",
  "description": "",
  "totalRepositories": 44,
  "repositories": {
    "CorefluxCommunity--Coreflux-MQTT-MCP-Server": {
      "owner": "CorefluxCommunity",
      "name": "Coreflux-MQTT-MCP-Server",
      "url": "https://github.com/CorefluxCommunity/Coreflux-MQTT-MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/CorefluxCommunity.webp",
      "description": "Connects to a Coreflux MQTT broker to access various Coreflux actions and commands, enabling integration with MCP-compatible AI assistants. Facilitates discovery and execution of commands, rules, and routes using MQTT protocols.",
      "stars": 3,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-04T02:13:02Z",
      "readme_content": "# Coreflux MQTT MCP Server\r\n\r\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\r\n[![Python](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)\r\n[![Docker](https://img.shields.io/badge/docker-ready-blue.svg)](https://www.docker.com/)\r\n[![Tests](https://img.shields.io/badge/tests-passing-green.svg)](https://github.com/CorefluxCommunity/Coreflux-MQTT-MCP-Server/actions)\r\n[![Code Quality](https://img.shields.io/badge/code%20quality-A-green.svg)](https://github.com/CorefluxCommunity/Coreflux-MQTT-MCP-Server)\r\n\r\nAn enterprise-grade Model Context Protocol (MCP) server that provides secure, scalable access to Coreflux MQTT brokers and comprehensive automation capabilities for Claude and other MCP-compatible AI assistants.\r\n\r\n## üöÄ Features\r\n\r\n### Core Functionality\r\n- üîå **MQTT Integration**: Seamless connection to Coreflux MQTT brokers with full TLS support\r\n- üõ†Ô∏è **Complete Coreflux API**: Full access to models, actions, rules, and routes\r\n- ü§ñ **AI Code Generation**: LOT (Language-of-Things) code generation via Coreflux Copilot API\r\n- üîç **Dynamic Discovery**: Automatic discovery and listing of available actions\r\n- üè• **Health Monitoring**: Comprehensive system health checks and monitoring\r\n\r\n### Enterprise Features\r\n- üîí **Production Security**: Comprehensive log sanitization, input validation, and security features\r\n- ‚ö° **Async Processing**: Non-blocking message processing with rate limiting and queue management\r\n- ÔøΩ **Enhanced Logging**: Structured logging with rotation, filtering, and security sanitization\r\n- ‚úÖ **Configuration Validation**: Comprehensive environment and file validation system\r\n- üß™ **Testing Framework**: Complete unit testing suite with mocking and coverage reporting\r\n\r\n### DevOps & Deployment\r\n- üê≥ **Container Ready**: Full Docker and Kubernetes deployment support with health checks\r\n- üîÑ **CI/CD Pipeline**: GitHub Actions with automated testing, security scanning, and quality checks\r\n- üì¶ **Development Tools**: Pre-commit hooks, code formatting, linting, and documentation generation\r\n- ‚öôÔ∏è **Easy Setup**: Interactive setup assistant with validation and testing\r\n- üìö **Rich Documentation**: API documentation, security guides, and deployment instructions\r\n\r\n## Quick Start\r\n\r\n### Docker Deployment (Recommended)\r\n\r\n1. **Clone and configure**:\r\n   ```bash\r\n   git clone https://github.com/CorefluxCommunity/Coreflux-MQTT-MCP-Server.git\r\n   cd Coreflux-MQTT-MCP-Server\r\n   cp .env.example .env\r\n   # Edit .env with your configuration\r\n   ```\r\n\r\n2. **Deploy with Docker**:\r\n   ```bash\r\n   docker-compose up -d\r\n   ```\r\n\r\n## üöÄ Quick Start\r\n\r\n### Prerequisites\r\n\r\n- Python 3.11 or higher\r\n- Docker (optional, for containerized deployment)\r\n- Access to a Coreflux MQTT broker\r\n- Coreflux Copilot API key (optional, for AI assistance)\r\n\r\n### Option 1: Docker Deployment (Recommended)\r\n\r\n1. **Clone and configure**:\r\n   ```bash\r\n   git clone https://github.com/CorefluxCommunity/Coreflux-MQTT-MCP-Server.git\r\n   cd Coreflux-MQTT-MCP-Server\r\n   cp .env.example .env\r\n   # Edit .env with your configuration\r\n   ```\r\n\r\n2. **Deploy with Docker**:\r\n   ```bash\r\n   docker-compose up -d\r\n   ```\r\n\r\n3. **Verify deployment**:\r\n   ```bash\r\n   docker-compose logs -f coreflux-mcp-server\r\n   ```\r\n\r\n### Option 2: Development Installation\r\n\r\n1. **Clone and setup**:\r\n   ```bash\r\n   git clone https://github.com/CorefluxCommunity/Coreflux-MQTT-MCP-Server.git\r\n   cd Coreflux-MQTT-MCP-Server\r\n   ```\r\n\r\n2. **Install dependencies**:\r\n   ```bash\r\n   pip install -r requirements.txt\r\n   # For development\r\n   pip install -r requirements-dev.txt\r\n   ```\r\n\r\n3. **Configure environment**:\r\n   ```bash\r\n   python setup_assistant.py  # Interactive configuration\r\n   # OR\r\n   cp .env.example .env && nano .env  # Manual configuration\r\n   ```\r\n\r\n4. **Validate and test**:\r\n   ```bash\r\n   make validate  # Validate configuration\r\n   make test      # Run tests\r\n   ```\r\n\r\n5. **Start the server**:\r\n   ```bash\r\n   python server.py\r\n   # OR\r\n   make run\r\n   ```\r\n\r\nFor detailed deployment instructions, see [DEPLOYMENT.md](DEPLOYMENT.md).\r\n\r\n## ‚öôÔ∏è Configuration\r\n\r\n### Interactive Setup Assistant\r\n\r\nThe server includes a comprehensive setup assistant that guides you through configuration:\r\n\r\n```bash\r\npython setup_assistant.py\r\n```\r\n\r\n**The assistant helps with:**\r\n- üîß MQTT broker connection settings\r\n- üîê TLS certificate configuration  \r\n- ü§ñ Coreflux Copilot API integration\r\n- üìù Logging and monitoring setup\r\n- ‚úÖ Configuration validation and testing\r\n\r\n**Use the setup assistant when:**\r\n- Creating initial configuration\r\n- Updating existing settings\r\n- Troubleshooting connection issues\r\n- Setting up TLS certificates\r\n- Migrating between environments\r\n\r\n### Environment Configuration\r\n\r\nCopy `.env.example` to `.env` and configure:\r\n\r\n```bash\r\n# MQTT Broker Configuration\r\nMQTT_BROKER=your-broker-host.com\r\nMQTT_PORT=8883\r\nMQTT_USER=your-username\r\nMQTT_PASSWORD=your-password\r\nMQTT_USE_TLS=true\r\n\r\n# TLS Configuration (when MQTT_USE_TLS=true)\r\nMQTT_CA_CERT=/path/to/ca.crt\r\nMQTT_CERT_FILE=/path/to/client.crt  \r\nMQTT_KEY_FILE=/path/to/client.key\r\n\r\n# Coreflux Copilot API\r\nDO_AGENT_API_KEY=your-api-key-here\r\n\r\n# Logging Configuration\r\nLOG_LEVEL=INFO\r\nLOG_FILE=/var/log/coreflux-mcp.log\r\n```\r\n\r\nFor detailed configuration options, see the [Configuration Guide](SECRET_MANAGEMENT.md).\r\n\r\n## üîå Connecting Claude to the MCP Server\r\n\r\n### Using Claude Desktop\r\n\r\n1. **Locate Claude Desktop config file**:\r\n   - macOS/Linux: `~/Library/Application Support/Claude/claude_desktop_config.json`\r\n   - Windows: `%USERPROFILE%\\AppData\\Roaming\\Claude\\claude_desktop_config.json`\r\n\r\n2. **Add server configuration**:\r\n   ```json\r\n   {\r\n     \"mcpServers\": {\r\n       \"coreflux\": {\r\n         \"command\": \"python\",\r\n         \"args\": [\"/path/to/your/server.py\"],\r\n         \"env\": {\r\n           \"MQTT_BROKER\": \"your-broker-host.com\",\r\n           \"MQTT_PORT\": \"8883\",\r\n           \"MQTT_USER\": \"your-username\", \r\n           \"MQTT_PASSWORD\": \"your-password\",\r\n           \"MQTT_USE_TLS\": \"true\",\r\n           \"DO_AGENT_API_KEY\": \"your-copilot-api-key\"\r\n         }\r\n       }\r\n     }\r\n   }\r\n   ```\r\n\r\n3. **Restart Claude Desktop**\r\n\r\n**Security Note**: For production deployments, store secrets in secure environment variables or secret management systems rather than the Claude config file.\r\n\r\n### Using Environment Variables\r\n\r\nFor better security, use environment variables instead of hardcoding credentials:\r\n\r\n```json\r\n{\r\n  \"mcpServers\": {\r\n    \"coreflux\": {\r\n      \"command\": \"python\",\r\n      \"args\": [\"/path/to/your/server.py\"],\r\n      \"env\": {\r\n        \"MQTT_BROKER\": \"${COREFLUX_MQTT_BROKER}\",\r\n        \"MQTT_PORT\": \"${COREFLUX_MQTT_PORT}\",\r\n        \"MQTT_USER\": \"${COREFLUX_MQTT_USER}\",\r\n        \"MQTT_PASSWORD\": \"${COREFLUX_MQTT_PASSWORD}\",\r\n        \"DO_AGENT_API_KEY\": \"${COREFLUX_API_KEY}\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Testing the Connection\r\n\r\nOnce configured, test the connection by asking Claude:\r\n\r\n```\r\nCan you check the health of the Coreflux MCP server and show me the broker information?\r\n```\r\n\r\nClaude should respond with system status and broker details if the connection is successful.\r\n\r\n## üõ†Ô∏è Available Tools\r\n\r\nThe server provides the following tools to Claude:\r\n\r\n### Core MQTT Tools\r\n- **`publish_to_coreflux`** - Publish messages to MQTT topics with QoS and retention options\r\n- **`get_broker_info`** - Get detailed information about the MQTT broker connection\r\n\r\n### AI Assistance Tools  \r\n- **`copilot_assist`** - Query the Coreflux Copilot AI for automation assistance and code generation\r\n\r\n### System Management Tools\r\n- **`comprehensive_health_check`** - Perform detailed health checks of all system components\r\n\r\nFor detailed API documentation, see [API_DOCUMENTATION.md](API_DOCUMENTATION.md).\r\n\r\n## üß™ Development & Testing\r\n\r\n### Development Setup\r\n\r\n1. **Install development dependencies**:\r\n   ```bash\r\n   pip install -r requirements-dev.txt\r\n   ```\r\n\r\n2. **Install pre-commit hooks**:\r\n   ```bash\r\n   pre-commit install\r\n   ```\r\n\r\n3. **Run the full development setup**:\r\n   ```bash\r\n   make dev-setup  # Complete development environment setup\r\n   ```\r\n\r\n### Testing\r\n\r\nRun the comprehensive test suite:\r\n\r\n```bash\r\n# Run all tests\r\nmake test\r\n\r\n# Run tests with coverage\r\nmake test-coverage\r\n\r\n# Run specific test categories\r\nmake test-unit        # Unit tests only\r\nmake test-integration # Integration tests only\r\n```\r\n\r\n### Code Quality\r\n\r\nMaintain code quality with automated tools:\r\n\r\n```bash\r\n# Format code\r\nmake format\r\n\r\n# Run linters\r\nmake lint\r\n\r\n# Security scanning\r\nmake security-check\r\n\r\n# Type checking\r\nmake type-check\r\n\r\n# Run all quality checks\r\nmake quality-check\r\n```\r\n\r\nAvailable development commands:\r\n\r\n```bash\r\n# Development workflow\r\nmake dev-setup     # Set up complete development environment\r\nmake validate      # Validate configuration and environment  \r\nmake run           # Start the server with validation\r\nmake run-debug     # Start server in debug mode\r\n\r\n# Testing and validation\r\nmake test          # Run all tests\r\nmake test-coverage # Run tests with coverage report\r\nmake test-unit     # Run unit tests only\r\nmake validate-config # Validate configuration files\r\n\r\n# Code quality\r\nmake format        # Format code with black and isort\r\nmake lint          # Run all linters (flake8, bandit, mypy)\r\nmake security-check # Run security scanning\r\nmake type-check    # Run type checking with mypy\r\n\r\n# Docker operations  \r\nmake docker-build  # Build Docker image\r\nmake docker-run    # Run in Docker container\r\nmake docker-test   # Run tests in Docker\r\n\r\n# Documentation\r\nmake docs          # Generate documentation\r\nmake docs-serve    # Serve documentation locally\r\n```\r\n\r\n## üîß System Architecture\r\n\r\n### Core Components\r\n\r\n- **`server.py`** - Main MCP server with tool implementations\r\n- **`config_validator.py`** - Configuration validation and environment checking\r\n- **`message_processor.py`** - Asynchronous MQTT message processing with rate limiting\r\n- **`enhanced_logging.py`** - Structured logging with rotation and security filtering\r\n- **`config_schema.py`** - Pydantic schemas for type-safe configuration\r\n- **`parser.py`** - Sanitization and parsing utilities\r\n\r\n### Security Features\r\n\r\n- **Input Sanitization** - All inputs are sanitized to prevent injection attacks\r\n- **Log Security** - Automatic sanitization of sensitive data in logs\r\n- **TLS Support** - Full TLS encryption for MQTT connections\r\n- **Configuration Validation** - Comprehensive validation of all configuration parameters\r\n- **Secret Management** - Secure handling of credentials and API keys\r\n\r\n### Performance Features\r\n\r\n- **Async Processing** - Non-blocking message processing\r\n- **Connection Pooling** - Efficient MQTT connection management\r\n- **Rate Limiting** - Configurable rate limits to prevent abuse\r\n- **Health Monitoring** - Real-time health checks and system monitoring\r\n\r\n## üìö Documentation\r\n\r\n- **[API Documentation](API_DOCUMENTATION.md)** - Complete API reference\r\n- **[Deployment Guide](DEPLOYMENT.md)** - Production deployment instructions\r\n- **[Secret Management](SECRET_MANAGEMENT.md)** - Security and secret management guide\r\n- **[Configuration Reference](.env.example)** - Complete configuration options\r\n\r\n## üê≥ Docker Deployment\r\n\r\n### Quick Start with Docker\r\n\r\n```bash\r\n# Clone and configure\r\ngit clone https://github.com/CorefluxCommunity/Coreflux-MQTT-MCP-Server.git\r\ncd Coreflux-MQTT-MCP-Server\r\n\r\n# Copy and edit environment file\r\ncp .env.example .env\r\nnano .env  # Configure your settings\r\n\r\n# Start with Docker Compose\r\ndocker-compose up -d\r\n\r\n# Check logs\r\ndocker-compose logs -f coreflux-mcp-server\r\n\r\n# Health check\r\ndocker-compose exec coreflux-mcp-server python -c \"\r\nimport os\r\nos.system('python server.py --health-check')\r\n\"\r\n```\r\n\r\n### Production Docker Deployment\r\n\r\nSee [DEPLOYMENT.md](DEPLOYMENT.md) for comprehensive production deployment instructions including:\r\n\r\n- Multi-stage Docker builds\r\n- Kubernetes deployments\r\n- Health checks and monitoring\r\n- Load balancing and scaling\r\n- Security configurations\r\n\r\n## üîë Coreflux Copilot Integration\r\n\r\nThe server includes powerful AI assistance through the Coreflux Copilot API:\r\n\r\n### Setup\r\n\r\n1. **Obtain API Key** from the Coreflux Copilot dashboard\r\n2. **Configure the key**:\r\n   ```bash\r\n   # Option 1: Environment file\r\n   echo \"DO_AGENT_API_KEY=your_api_key_here\" >> .env\r\n   \r\n   # Option 2: Environment variable\r\n   export DO_AGENT_API_KEY=your_api_key_here\r\n   ```\r\n\r\n### Features\r\n\r\n- **LOT Code Generation** - Generate Language-of-Things code from natural language\r\n- **Automation Assistance** - Get help with Coreflux automation tasks\r\n- **Best Practices** - Receive guidance on optimal implementations\r\n- **Troubleshooting** - Get assistance with debugging and optimization\r\n\r\n### Usage Examples\r\n\r\nAsk Claude to help with Coreflux automation:\r\n\r\n```\r\nGenerate LOT code for a temperature monitoring system that triggers an alert when the temperature exceeds 75¬∞F\r\n```\r\n\r\n```\r\nHelp me create a rule that processes sensor data and stores it in a database\r\n```\r\n\r\n## üöÄ Advanced Features\r\n\r\n### Asynchronous Message Processing\r\n\r\nThe server includes a robust async message processor that:\r\n\r\n- **Prevents Blocking** - Handles messages without blocking the main thread\r\n- **Rate Limiting** - Configurable limits to prevent system overload  \r\n- **Queue Management** - Intelligent queue handling with backpressure\r\n- **Statistics** - Real-time processing metrics and monitoring\r\n\r\n### Enhanced Logging System\r\n\r\nComprehensive logging with enterprise features:\r\n\r\n- **Structured Logging** - JSON formatted logs for easy parsing\r\n- **Log Rotation** - Automatic log file rotation to manage disk space\r\n- **Security Filtering** - Automatic sanitization of sensitive information\r\n- **Multiple Outputs** - Console, file, and syslog support\r\n\r\n### Configuration Validation\r\n\r\nRobust validation system that checks:\r\n\r\n- **Environment Variables** - Validates all required configuration\r\n- **File Permissions** - Ensures certificate files are accessible\r\n- **Network Connectivity** - Tests MQTT broker connectivity\r\n- **API Availability** - Validates Copilot API access\r\n\r\n## üõ°Ô∏è Security & Compliance\r\n\r\n### Security Features\r\n\r\n- **Input Sanitization** - All inputs validated and sanitized\r\n- **TLS Encryption** - Full TLS support for MQTT connections\r\n- **Secret Management** - Secure credential handling\r\n- **Audit Logging** - Comprehensive security event logging\r\n- **Non-root Execution** - Runs with minimal privileges\r\n\r\n### Compliance Support\r\n\r\nThe server supports various compliance requirements:\r\n\r\n- **SOC 2** - Security controls and monitoring\r\n- **GDPR** - Data protection and privacy\r\n- **HIPAA** - Healthcare data protection (when properly configured)\r\n\r\nFor detailed security information, see [SECRET_MANAGEMENT.md](SECRET_MANAGEMENT.md).\r\n\r\n## üìä Monitoring & Health Checks\r\n\r\n### Health Check Tool\r\n\r\nComprehensive health monitoring with the `comprehensive_health_check` tool:\r\n\r\n```bash\r\n# Manual health check\r\npython server.py --health-check\r\n\r\n# Or ask Claude:\r\n# \"Please run a comprehensive health check on the Coreflux MCP server\"\r\n```\r\n\r\n### Monitoring Metrics\r\n\r\nThe server provides detailed metrics:\r\n\r\n- **Connection Status** - MQTT broker connectivity\r\n- **Message Processing** - Queue size and processing rates\r\n- **System Resources** - Memory and CPU usage\r\n- **Error Rates** - Failed operations and error statistics\r\n- **API Status** - Copilot API availability and response times\r\n\r\n### Alerting\r\n\r\nConfigure alerts for:\r\n\r\n- Connection failures\r\n- High error rates\r\n- Resource exhaustion\r\n- Security events\r\n\r\n## ü§ù Contributing\r\n\r\nWe welcome contributions! Please see our contribution guidelines:\r\n\r\n### Development Process\r\n\r\n1. **Fork** the repository\r\n2. **Create** a feature branch: `git checkout -b feature/amazing-feature`\r\n3. **Install** development dependencies: `pip install -r requirements-dev.txt`\r\n4. **Setup** pre-commit hooks: `pre-commit install`\r\n5. **Make** your changes with tests\r\n6. **Run** quality checks: `make quality-check`\r\n7. **Commit** your changes: `git commit -am 'Add amazing feature'`\r\n8. **Push** to the branch: `git push origin feature/amazing-feature`\r\n9. **Create** a Pull Request\r\n\r\n### Code Standards\r\n\r\n- **Python 3.11+** compatibility\r\n- **Type hints** for all functions\r\n- **Comprehensive tests** with >90% coverage\r\n- **Security scanning** with bandit\r\n- **Code formatting** with black and isort\r\n- **Documentation** for all public APIs\r\n\r\n## üìÑ License\r\n\r\nThis project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.\r\n\r\n## üÜò Support & Troubleshooting\r\n\r\n### Common Issues\r\n\r\n**Connection Refused**\r\n```\r\nError: MQTT connection failed\r\n```\r\n- Check broker hostname and port\r\n- Verify network connectivity\r\n- Confirm TLS configuration\r\n\r\n**Authentication Failed**\r\n```\r\nError: Authentication failed\r\n```\r\n- Verify username/password\r\n- Check API key validity\r\n- Confirm broker permissions\r\n\r\n**TLS Handshake Failed**\r\n```\r\nError: TLS handshake failed\r\n```\r\n- Verify certificate paths\r\n- Check certificate validity\r\n- Confirm TLS version compatibility\r\n\r\n### Debug Mode\r\n\r\nEnable detailed logging for troubleshooting:\r\n\r\n```bash\r\nexport LOG_LEVEL=DEBUG\r\npython server.py\r\n```\r\n\r\n### Getting Help\r\n\r\n- **GitHub Issues**: [Report bugs and request features](https://github.com/CorefluxCommunity/Coreflux-MQTT-MCP-Server/issues)\r\n- **Discussions**: [Community support and questions](https://github.com/CorefluxCommunity/Coreflux-MQTT-MCP-Server/discussions)\r\n- **Documentation**: [Complete documentation](./API_DOCUMENTATION.md)\r\n- **Security Issues**: Report to security@coreflux.org\r\n\r\n## üó∫Ô∏è Roadmap\r\n\r\n### Current Status: v1.0.0 ‚úÖ\r\n\r\n- ‚úÖ Core MQTT functionality\r\n- ‚úÖ Copilot API integration\r\n- ‚úÖ Enterprise security features\r\n- ‚úÖ Comprehensive testing\r\n- ‚úÖ Production deployment support\r\n\r\n### Upcoming Features\r\n\r\n- **v1.1.0** - Enhanced monitoring and metrics\r\n- **v1.2.0** - Additional Coreflux API endpoints\r\n- **v1.3.0** - WebSocket support for real-time data\r\n- **v2.0.0** - Multi-broker support and federation\r\n\r\n---\r\n\r\n## üìã Quick Reference\r\n\r\n### Essential Commands\r\n\r\n```bash\r\n# Setup and configuration\r\npython setup_assistant.py    # Interactive setup\r\nmake validate                 # Validate configuration\r\n\r\n# Development\r\nmake dev-setup               # Complete dev environment\r\nmake test                    # Run all tests\r\nmake quality-check           # Run all quality checks\r\n\r\n# Deployment\r\ndocker-compose up -d         # Docker deployment\r\nmake docker-build           # Build Docker image\r\n\r\n# Monitoring\r\nmake health-check           # System health check\r\ndocker-compose logs -f      # View logs\r\n```\r\n\r\n### Key Files\r\n\r\n- **`server.py`** - Main MCP server\r\n- **`.env`** - Configuration file\r\n- **`requirements.txt`** - Python dependencies\r\n- **`docker-compose.yml`** - Docker deployment\r\n- **`Makefile`** - Development commands\r\n\r\n---\r\n\r\n**Built with ‚ù§Ô∏è by the Coreflux Community**\r\n- `remove_action`: Remove an action event/function\r\n- `run_action`: Run an action event/function\r\n- `remove_all_models`: Remove all models\r\n- `remove_all_actions`: Remove all actions\r\n- `remove_all_routes`: Remove all routes\r\n- `list_discovered_actions`: List all discovered Coreflux actions\r\n- `request_lot_code`: Generate LOT code using Coreflux Copilot API based on natural language prompts\r\n\r\n## Debugging and Troubleshooting\r\n\r\nThe MCP server now starts even if the MQTT broker is not available, allowing you to troubleshoot and configure connections through the MCP tools.\r\n\r\n### Connection Status and Recovery\r\n\r\n- The server will start successfully even if the MQTT broker is unreachable\r\n- Use the `get_connection_status` tool to check connection health and get troubleshooting guidance\r\n- Use the `setup_mqtt_connection` tool to configure a new broker connection without restarting\r\n- Use the `check_broker_health` or `reconnect_mqtt` tools to test and retry connections\r\n\r\n### Available Tools for Connection Management\r\n\r\n- `get_connection_status`: Get detailed connection status with troubleshooting guidance\r\n- `setup_mqtt_connection`: Configure a new MQTT broker connection dynamically\r\n- `mqtt_connect`: Connect to a specific MQTT broker with custom parameters\r\n- `check_broker_health`: Test broker connectivity and attempt reconnection\r\n- `reconnect_mqtt`: Force reconnection to the configured broker\r\n\r\n### Traditional Troubleshooting Steps\r\n\r\nIf you encounter issues:\r\n\r\n1. Verify your MQTT broker credentials in your Claude configuration\r\n2. Ensure the broker is accessible \r\n3. Run the setup assistant to verify or update your configuration:\r\n   ```bash\r\n   python setup_assistant.py\r\n   ```\r\n4. Check Claude Desktop logs:\r\n   ```bash\r\n   # Check Claude's logs for errors (macOS/Linux)\r\n   tail -n 20 -f ~/Library/Logs/Claude/mcp*.log\r\n   # Windows PowerShell\r\n   Get-Content -Path \"$env:USERPROFILE\\AppData\\Roaming\\Claude\\Logs\\mcp*.log\" -Tail 20 -Wait\r\n   ```\r\n5. Run the server with debug logging:\r\n   ```bash\r\n   # Direct execution with debug logging\r\n   python server.py --mqtt-host localhost --mqtt-port 1883 --log-level DEBUG\r\n   ```\r\n\r\n## References and Documentation\r\n\r\n- **[DEPLOYMENT.md](DEPLOYMENT.md)** - Production deployment guide\r\n- **[SECURITY.md](SECURITY.md)** - Security guidelines and best practices\r\n- **[MCP Documentation](https://modelcontextprotocol.io/)** - Official MCP documentation\r\n- **[Coreflux Platform](https://coreflux.org/)** - Coreflux automation platform\r\n\r\n## Contributing\r\n\r\nContributions are welcome! Please read our contributing guidelines and submit pull requests to the `development` branch.\r\n\r\n## License\r\n\r\nThis project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.\r\n\r\n## Support\r\n\r\n- üìñ Documentation: Check the README, DEPLOYMENT.md, and SECURITY.md files\r\n- üêõ Issues: Report bugs and feature requests on GitHub\r\n- üí¨ Community: Join the Coreflux community for discussions\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mqtt",
        "corefluxcommunity",
        "iot",
        "coreflux mqtt",
        "mqtt protocols",
        "using mqtt"
      ],
      "category": "iot-and-device-control"
    },
    "Cyreslab-AI--shodan-mcp-server": {
      "owner": "Cyreslab-AI",
      "name": "shodan-mcp-server",
      "url": "https://github.com/Cyreslab-AI/shodan-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Cyreslab-AI.webp",
      "description": "Provides access to Shodan's API for querying detailed information about internet-connected devices and services, enhancing cybersecurity research and threat intelligence. Features include host information retrieval, advanced search capabilities, network scanning, SSL certificate data, and IoT device searches.",
      "stars": 30,
      "forks": 5,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-02T00:42:45Z",
      "readme_content": "# Shodan MCP Server\n\nA Model Context Protocol (MCP) server that provides access to Shodan API functionality and CVE database, allowing AI assistants to query information about internet-connected devices, services, and vulnerabilities.\n\n## Features\n\n### Network Intelligence\n\n- **Host Information**: Get detailed information about specific IP addresses\n- **Search Capabilities**: Search Shodan's database for devices and services\n- **Network Scanning**: Scan network ranges (CIDR notation) for devices\n- **SSL Certificate Information**: Get SSL certificate details for domains\n- **IoT Device Search**: Find specific types of IoT devices\n\n### Vulnerability Intelligence\n\n- **CVE Lookup**: Get detailed information about specific vulnerabilities\n- **Vulnerability Search**: Search CVEs with advanced filters (product, KEV status, EPSS scores)\n- **CPE Information**: Get Common Platform Enumeration data for products\n- **Latest Vulnerabilities**: Access newest CVEs and Known Exploited Vulnerabilities\n- **Exploit Prediction**: Get CVEs sorted by EPSS exploit prediction scores\n\n## Installation\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/Cyreslab-AI/shodan-mcp-server.git\n   cd shodan-mcp-server\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   npm install\n   ```\n\n3. Build the server:\n\n   ```bash\n   npm run build\n   ```\n\n4. Set up your Shodan API key:\n\n   ```bash\n   export SHODAN_API_KEY=\"your-api-key-here\"\n   ```\n\n5. Start the server:\n   ```bash\n   npm start\n   ```\n\n## MCP Integration\n\nThis server can be integrated with Claude or other MCP-compatible AI assistants. To add it to Claude Desktop or Claude.app:\n\n1. Add the server to your MCP settings:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"shodan\": {\n         \"command\": \"node\",\n         \"args\": [\"/path/to/shodan-mcp-server/build/index.js\"],\n         \"env\": {\n           \"SHODAN_API_KEY\": \"your-api-key-here\"\n         }\n       }\n     }\n   }\n   ```\n\n2. Restart Claude to load the new MCP server.\n\n## Available Tools\n\n### Search & Host Information Tools\n\n#### get_host_info\n\nGet detailed information about a specific IP address.\n\n**Parameters:**\n\n- `ip` (required): IP address to look up\n- `max_items` (optional): Maximum number of items to include in arrays (default: 5)\n- `fields` (optional): List of fields to include in the results (e.g., ['ip_str', 'ports', 'location.country_name'])\n\n#### search_shodan\n\nSearch Shodan's database for devices and services.\n\n**Parameters:**\n\n- `query` (required): Shodan search query (e.g., 'apache country:US')\n- `page` (optional): Page number for results pagination (default: 1)\n- `facets` (optional): List of facets to include in the search results (e.g., ['country', 'org'])\n- `max_items` (optional): Maximum number of items to include in arrays (default: 5)\n- `fields` (optional): List of fields to include in the results (e.g., ['ip_str', 'ports', 'location.country_name'])\n- `summarize` (optional): Whether to return a summary of the results instead of the full data (default: false)\n\n#### get_host_count\n\nGet the count of hosts matching a search query without consuming query credits.\n\n**Parameters:**\n\n- `query` (required): Shodan search query to count hosts for\n- `facets` (optional): List of facets to include in the count results (e.g., ['country', 'org'])\n\n#### scan_network_range\n\nScan a network range (CIDR notation) for devices.\n\n**Parameters:**\n\n- `cidr` (required): Network range in CIDR notation (e.g., 192.168.1.0/24)\n- `max_items` (optional): Maximum number of items to include in results (default: 5)\n- `fields` (optional): List of fields to include in the results (e.g., ['ip_str', 'ports', 'location.country_name'])\n\n#### search_iot_devices\n\nSearch for specific types of IoT devices.\n\n**Parameters:**\n\n- `device_type` (required): Type of IoT device to search for (e.g., 'webcam', 'router', 'smart tv')\n- `country` (optional): Optional country code to limit search (e.g., 'US', 'DE')\n- `max_items` (optional): Maximum number of items to include in results (default: 5)\n\n### SSL & Certificate Tools\n\n#### get_ssl_info\n\nGet SSL certificate information for a domain.\n\n**Parameters:**\n\n- `domain` (required): Domain name to look up SSL certificates for (e.g., example.com)\n\n### DNS Tools\n\n#### dns_lookup\n\nResolve hostnames to IP addresses using DNS lookup.\n\n**Parameters:**\n\n- `hostnames` (required): List of hostnames to resolve (e.g., ['google.com', 'facebook.com'])\n\n#### reverse_dns_lookup\n\nGet hostnames for IP addresses using reverse DNS lookup.\n\n**Parameters:**\n\n- `ips` (required): List of IP addresses to lookup (e.g., ['8.8.8.8', '1.1.1.1'])\n\n#### get_domain_info\n\nGet comprehensive domain information including subdomains and DNS records.\n\n**Parameters:**\n\n- `domain` (required): Domain name to lookup (e.g., 'google.com')\n- `history` (optional): Include historical DNS data (default: false)\n- `type` (optional): DNS record type filter (A, AAAA, CNAME, NS, SOA, MX, TXT)\n- `page` (optional): Page number for pagination (default: 1)\n\n### Search Utility Tools\n\n#### list_search_facets\n\nList all available search facets that can be used with Shodan queries.\n\n**Parameters:** None\n\n#### list_search_filters\n\nList all available search filters that can be used in Shodan queries.\n\n**Parameters:** None\n\n#### parse_search_tokens\n\nParse a search query to understand which filters and parameters are being used.\n\n**Parameters:**\n\n- `query` (required): Shodan search query to parse and analyze\n\n### Infrastructure Tools\n\n#### list_ports\n\nList all ports that Shodan crawls on the Internet.\n\n**Parameters:** None\n\n#### list_protocols\n\nList all protocols that can be used when performing on-demand Internet scans.\n\n**Parameters:** None\n\n### CVE & Vulnerability Tools\n\n#### get_cve_info\n\nGet detailed information about a specific CVE.\n\n**Parameters:**\n\n- `cve_id` (required): CVE ID to look up (e.g., 'CVE-2021-44228')\n\n#### search_cves\n\nSearch for vulnerabilities with various filters.\n\n**Parameters:**\n\n- `cpe23` (optional): CPE 2.3 string to search for (e.g., 'cpe:2.3:a:apache:log4j:\\*')\n- `product` (optional): Product name to search for vulnerabilities (e.g., 'apache', 'windows')\n- `is_kev` (optional): Filter for Known Exploited Vulnerabilities only\n- `sort_by_epss` (optional): Sort results by EPSS score (Exploit Prediction Scoring System)\n- `start_date` (optional): Start date for filtering CVEs (YYYY-MM-DD format)\n- `end_date` (optional): End date for filtering CVEs (YYYY-MM-DD format)\n- `limit` (optional): Maximum number of results to return (default: 10)\n- `skip` (optional): Number of results to skip for pagination (default: 0)\n\n#### get_cpes\n\nGet Common Platform Enumeration (CPE) information for products.\n\n**Parameters:**\n\n- `product` (optional): Product name to search for (e.g., 'apache', 'windows')\n- `vendor` (optional): Vendor name to filter by (e.g., 'microsoft', 'apache')\n- `version` (optional): Version to filter by (e.g., '2.4.1')\n- `limit` (optional): Maximum number of results to return (default: 10)\n- `skip` (optional): Number of results to skip for pagination (default: 0)\n\n#### get_newest_cves\n\nGet the newest vulnerabilities from the CVE database.\n\n**Parameters:**\n\n- `limit` (optional): Maximum number of results to return (default: 10)\n\n#### get_kev_cves\n\nGet Known Exploited Vulnerabilities (KEV) from CISA.\n\n**Parameters:**\n\n- `limit` (optional): Maximum number of results to return (default: 10)\n\n#### get_cves_by_epss\n\nGet CVEs sorted by EPSS score (Exploit Prediction Scoring System).\n\n**Parameters:**\n\n- `limit` (optional): Maximum number of results to return (default: 10)\n\n### Account & Utility Tools\n\n#### get_api_info\n\nGet information about your API plan including credits and limits.\n\n**Parameters:** None\n\n#### get_account_profile\n\nGet account profile information including membership status and credits.\n\n**Parameters:** None\n\n#### get_my_ip\n\nGet your current IP address as seen from the Internet.\n\n**Parameters:** None\n\n## Available Resources\n\n- `shodan://host/{ip}`: Information about a specific IP address\n\n## API Limitations\n\nSome Shodan API endpoints require a paid membership. The following features are only available with a paid Shodan API key:\n\n- Search functionality (search_shodan, scan_network_range, get_ssl_info, search_iot_devices, get_host_count, get_domain_info)\n- Network scanning\n- SSL certificate lookup\n- IoT device search\n\n**Note**: CVE database functionality (get_cve_info, search_cves, get_cpes, get_newest_cves, get_kev_cves, get_cves_by_epss) is completely free and does not require a paid Shodan subscription.\n\n## License\n\nMIT\n\n## Developed by\n\n[Cyreslab.ai](https://cyreslab.ai)\n\n## Citation\nIf you use this project in your research or publications, please cite it as follows:\n\n```bibtex @misc{shodanmcp2025, \nauthor = {Bassem Abidi and Moudather Chelbi},\ntitle = {Shodan MCP Server},\nyear = {2025},\nhowpublished = {https://github.com/Cyreslab-AI/shodan-mcp-server},\nnote = {Accessed: 2025-06-29}",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iot",
        "shodan",
        "cyreslab",
        "shodan api",
        "access shodan",
        "iot device"
      ],
      "category": "iot-and-device-control"
    },
    "DMontgomery40--mcp-3D-printer-server": {
      "owner": "DMontgomery40",
      "name": "mcp-3D-printer-server",
      "url": "https://github.com/DMontgomery40/mcp-3D-printer-server",
      "imageUrl": "/freedevtools/mcp/pfp/DMontgomery40.webp",
      "description": "Connect with various 3D printer management systems to control and manipulate prints, enabling tasks such as monitoring print status and managing print files.",
      "stars": 100,
      "forks": 22,
      "license": "GNU General Public License v2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-03T22:32:17Z",
      "readme_content": "\n\n# MCP 3D Printer Server\n\n[![npm version](https://img.shields.io/npm/v/mcp-3d-printer-server.svg)](https://www.npmjs.com/package/mcp-3d-printer-server)\n[![License: GPL-2.0](https://img.shields.io/badge/License-GPL%20v2-blue.svg)](https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html)\n[![TypeScript](https://img.shields.io/badge/TypeScript-4.9%2B-blue)](https://www.typescriptlang.org/)\n[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://github.com/yourusername/mcp-3d-printer-server/graphs/commit-activity)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://makeapullrequest.com)\n[![Node.js Version](https://img.shields.io/badge/node-%3E%3D%2018.0.0-green.svg)](https://nodejs.org/en/download/)\n[![Downloads](https://img.shields.io/npm/dm/mcp-3d-printer-server.svg)](https://www.npmjs.com/package/mcp-3d-printer-server)\n[![GitHub stars](https://img.shields.io/github/stars/dmontgomery40/mcp-3d-printer-server.svg?style=social&label=Star)](https://github.com/yourusername/mcp-3d-printer-server)\n\n\n<a href=\"https://glama.ai/mcp/servers/7f6v2enbgk\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/7f6v2enbgk/badge\" alt=\"3D Printer Server MCP server\" />\n</a>\n\n<details>\n<summary><strong>‚ú® What's New / Significant Updates (as of last session)</strong></summary>\n\n- **Bambu `.3mf` Printing:** Added the `print_3mf` tool specifically for Bambu Lab printers. This uploads the `.3mf` file and sends the print command directly via MQTT based on OpenBambuAPI specs.\n- **Direct MQTT Communication (Bambu):** Refactored Bambu command handling (`print_3mf`, `cancelJob`) to use direct MQTT (TLS port 8883) instead of relying solely on `bambu-js` for commands.\n- **`.3mf` File Parsing:** Implemented a parser (`src/3mf_parser.ts`) to read metadata and Bambu-specific slicer settings (from `project_settings.config`) within `.3mf` files.\n- **Bambu Preset Resources:** Added support for reading Bambu Studio preset files (`machine`, `filament`, `process`) as MCP resources (e.g., `preset://bambu/process/MyPreset`) if `BAMBU_STUDIO_CONFIG_PATH` is set.\n- **OrcaSlicer Integration:** Added support for using OrcaSlicer via its command-line interface for the `slice_stl` tool.\n- **New STL Manipulation Tools:** Added `merge_vertices`, `center_model`, and `lay_flat` tools for basic model preparation using `three.js`.\n- **Configuration Update:** Added `BAMBU_STUDIO_CONFIG_PATH` environment variable for preset loading.\n- **FTP Usage Note:** Acknowledged in documentation that file operations for Bambu currently use potentially unsecured FTP via `bambu-js`.\n\n</details>\n\n<details>\n<summary><strong>üó∫Ô∏è Roadmap / TODO</strong></summary>\n\n- **Achieve Feature Parity:** Bring functionality (status detail, file operations, direct printing where possible, preset handling) for OctoPrint, Klipper, Duet, Repetier, Prusa Connect, and Creality Cloud up to the level of robustness planned for the Bambu implementation.\n- **Implement Full Bambu MQTT Status:** Refactor `getStatus` for Bambu to subscribe to MQTT reports and maintain real-time state.\n- **Implement Robust AMS Mapping:** Replace placeholder logic; correctly parse and use AMS mapping from `.3mf` slicer config or user overrides for the MQTT print command.\n- **Implement `.3mf` Print Overrides:** Add logic to the `print_3mf` tool to handle user-provided overrides (e.g., calibration flags) and potentially common slicer settings if feasible via MQTT/G-code.\n- **Calculate MD5 Hash:** Add logic to calculate and include the MD5 hash of the `.3mf` file in the MQTT print command (optional but recommended by protocol).\n- **Refactor Bambu File Ops:** Investigate replacing `bambu-js` FTP operations (`getFiles`, `uploadFile`) with direct MQTT methods if possible/stable, or contribute FTPS support to `bambu-js`.\n- **Add Preset Discovery Logic:** Improve preset resource listing (currently lists based on potential filenames, could parse index files if they exist).\n- **Expand `.3mf` Support:** Add `.3mf` printing support for other printer types where applicable.\n- **Error Handling & Reporting:** Enhance MQTT error handling and reporting of print progress/completion.\n- **Testing:** Conduct thorough runtime testing of all new Bambu features.\n\n</details>\n\n<details>\n<summary>Click to expand Table of Contents</summary>\n\n## Table of Contents\n\n- [Description](#description)\n- [Features](#features)\n- [Installation](#installation)\n  - [Prerequisites](#prerequisites)\n  - [Install from npm](#install-from-npm)\n  - [Install from source](#install-from-source)\n  - [Running with Docker](#running-with-docker)\n    - [Using Slicers with Docker](#using-slicers-with-docker)\n- [Configuration](#configuration)\n- [Usage with Claude Desktop](#usage-with-claude-desktop)\n- [Supported Printer Management Systems](#supported-printer-management-systems)\n  - [OctoPrint](#octoprint)\n  - [Klipper (via Moonraker)](#klipper-via-moonraker)\n  - [Duet](#duet)\n  - [Repetier](#repetier)\n  - [Bambu Labs](#bambu-labs)\n    - [Finding Your Bambu Printer's Serial Number and Access Token](#finding-your-bambu-printers-serial-number-and-access-token)\n    - [Bambu Communication Notes (MQTT & FTP)](#bambu-communication-notes-mqtt--ftp)\n  - [Prusa Connect](#prusa-connect)\n    - [Setting up Prusa Connect](#setting-up-prusa-connect)\n  - [Creality Cloud](#creality-cloud)\n    - [Setting up Creality Cloud](#setting-up-creality-cloud)\n- [Available Tools](#available-tools)\n  - [STL Manipulation Tools](#stl-manipulation-tools)\n  - [Printer Control Tools](#printer-control-tools)\n  - [Bambu-Specific Tools](#bambu-specific-tools)\n- [Available Resources](#available-resources)\n  - [Printer Resources](#printer-resources)\n  - [Bambu Preset Resources](#bambu-preset-resources)\n- [Example Commands for LLM](#example-commands-for-claude)\n- [Bambu Lab Printer Limitations](#bambu-lab-printer-limitations)\n- [Limitations and Considerations](#limitations-and-considerations)\n  - [Memory Usage](#memory-usage)\n  - [STL Manipulation Limitations](#stl-manipulation-limitations)\n  - [Visualization Limitations](#visualization-limitations)\n  - [Performance Considerations](#performance-considerations)\n  - [Testing Recommendations](#testing-recommendations)\n- [Badges](#badges)\n- [License](#license)\n\n</details>\n\n## Description\n\nThis is a server that allows MCP users to connect with the API endpoints of these 3D Printers: \n\n- OctoPrint\n- Klipper (Moonraker)\n- Duet\n- Repetier\n- Bambu Labs\n- Prusa Connect\n- Creality/Ender\n\nThis server is a Model Context Protocol (MCP) server for connecting Claude with 3D printer management systems. It allows MCP to interact with 3D printers through the APIs of various printer management systems such as OctoPrint, Klipper (via Moonraker), Duet, Repetier, and Bambu Labs printers.\n\n**Note on Resource Usage**: This MCP server includes advanced 3D model manipulation features that can be memory-intensive when working with large STL files. Please see the \"Limitations and Considerations\" section for important information about memory usage and performance.\n\n## Features\n\n- Get printer status (temperatures, print progress, etc.)\n- List files on the printer\n- Upload G-code files to the printer\n- Start, cancel, and monitor print jobs\n- Set printer temperatures\n- Advanced STL file manipulation:\n  - Extend base for better adhesion\n  - Scale models uniformly or along specific axes\n  - Rotate models around any axis\n  - Translate (move) models\n  - Modify specific sections of STL files (top, bottom, center, or custom)\n- Comprehensive STL analysis with detailed model information\n- Generate multi-angle SVG visualizations of STL files\n- Real-time progress reporting for long operations\n- Error handling with detailed diagnostics\n- Slice STL files to generate G-code\n- Confirm temperature settings in G-code files\n- Complete end-to-end workflow from STL modification to printing\n- Print `.3mf` files directly on Bambu Lab printers (via MQTT command)\n- Read Bambu Studio preset files (printer, filament, process) as resources\n\n## Installation\n\n### Prerequisites\n\n- Node.js 18 or higher\n- npm or yarn\n\n### Install from npm\n\n```bash\nnpm install -g mcp-3d-printer-server\n```\n\n### Install from source\n\n```bash\ngit clone https://github.com/dmontgomery40/mcp-3d-printer-server.git\ncd mcp-3d-printer-server\nnpm install\nnpm link  # Makes the command available globally\n```\n\n### Running with Docker\n\nYou can also run the server using Docker and Docker Compose for a containerized environment.\n\n1.  Ensure you have Docker and Docker Compose installed.\n2.  Copy `.env.example` to `.env` and configure your settings.\n3.  Build and run the container:\n    ```bash\n    docker-compose up --build -d\n    ```\n\n#### Using Slicers with Docker\n\nPlease note that the default Docker setup **cannot directly use a slicer installed on your host machine**. Mounting the slicer executable directly from the host into the container is unreliable due to operating system and library differences between your host and the container.\n\nThe recommended approach is to **install your preferred slicer *inside* the Docker image**. This makes the container self-sufficient.\n\nTo do this, you will need to modify the `Dockerfile`. Here's a conceptual example of how you might add PrusaSlicer or OrcaSlicer (specific commands may vary depending on the slicer, its dependencies, and current Alpine packages):\n\n```dockerfile\n# ... other Dockerfile commands ...\n\n# Example: Install PrusaSlicer or OrcaSlicer (adjust command as needed)\n# Check Alpine package repositories first (e.g., apk add prusaslicer or apk add orcaslicer)\n# If not available, download and install manually (e.g., AppImage):\n# RUN apk add --no-cache fuse # FUSE might be needed for AppImages\n# RUN wget https://example.com/path/to/OrcaSlicer_Linux_Vxxxx.AppImage -O /usr/local/bin/orcaslicer && \\\n#     chmod +x /usr/local/bin/orcaslicer\n\n# Set the SLICER_PATH env var accordingly in docker-compose.yml or when running\n# Example for installed executable:\nENV SLICER_PATH=/usr/local/bin/orcaslicer \n\n# ... rest of Dockerfile ...\n```\n\nAfter modifying the `Dockerfile`, rebuild your image (`docker-compose build`). You'll also need to ensure the `SLICER_PATH` environment variable in your `.env` file or `docker-compose.yml` points to the correct path *inside the container* (e.g., `/usr/local/bin/orcaslicer`). Set `SLICER_TYPE` to `orcaslicer` as well.\n\nApologies for not including a specific slicer out-of-the-box, but given the wide variety of slicers (PrusaSlicer, OrcaSlicer, Cura, etc.) and configurations available, pre-installing one would unnecessarily bloat the image for many users. If a particular slicer becomes a very common request, I can certainly look into adding official support for it in a future version.\n\n## Configuration\n\nCreate a `.env` file in the directory where you'll run the server or set environment variables:\n\n```env\n# Required for authentication with your printer management system\nAPI_KEY=your_api_key_here\n\n# Default printer connection settings\nPRINTER_HOST=localhost\nPRINTER_PORT=80 # Port for non-Bambu HTTP APIs\nPRINTER_TYPE=octoprint  # Options: octoprint, klipper, duet, repetier, bambu, prusa, creality\n\n# Optional: Directory for temporary files\nTEMP_DIR=/path/to/temp/dir\n\n# Bambu Labs specific configuration\nBAMBU_SERIAL=your_printer_serial # REQUIRED for Bambu\nBAMBU_TOKEN=your_access_token    # REQUIRED for Bambu\n\n# Slicer configuration (for slice_stl tool)\nSLICER_TYPE=prusaslicer  # Options: prusaslicer, cura, slic3r, orcaslicer\nSLICER_PATH=/path/to/slicer/executable\nSLICER_PROFILE=/path/to/slicer/profile\n\n# Optional: Path to Bambu Studio user config dir (for loading presets)\n# Example macOS: /Users/your_user/Library/Application Support/BambuStudio/user/YOUR_USER_ID\n# Example Windows: C:\\Users\\your_user\\AppData\\Roaming\\BambuStudio\\user\\YOUR_USER_ID\n# Example Linux: /home/your_user/.config/BambuStudio/user/YOUR_USER_ID\nBAMBU_STUDIO_CONFIG_PATH=\n```\n\n## Usage with Claude Desktop\n\n1. Edit your Claude Desktop configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"3dprint\": {\n      \"command\": \"mcp-3d-printer-server\",\n      \"env\": {\n        \"API_KEY\": \"your_api_key_here\",\n        \"PRINTER_HOST\": \"your_printer_ip\",\n        \"PRINTER_TYPE\": \"octoprint\"\n      }\n    }\n  }\n}\n```\n\n2. For Bambu Labs printers:\n\n```json\n{\n  \"mcpServers\": {\n    \"3dprint\": {\n      \"command\": \"mcp-3d-printer-server\",\n      \"env\": {\n        \"PRINTER_HOST\": \"your_printer_ip\",\n        \"PRINTER_TYPE\": \"bambu\",\n        \"BAMBU_SERIAL\": \"your_printer_serial\",\n        \"BAMBU_TOKEN\": \"your_access_token\"\n      }\n    }\n  }\n}\n```\n\n3. Restart Claude Desktop\n4. Connect to your printer through Claude\n\n## Supported Printer Management Systems\n\n### OctoPrint\n\nOctoPrint is a popular web interface for 3D printers. It provides a REST API for controlling the printer.\n\n- Default port: 80 (http) or 443 (https)\n- Authentication: API key required\n\n### Klipper (via Moonraker)\n\nKlipper is a firmware for 3D printers that works with the Moonraker API server.\n\n- Default port: 7125\n- Authentication: Depends on your Moonraker configuration\n\n### Duet\n\nDuet is a control board for 3D printers with its own web interface (DuetWebControl).\n\n- Default port: 80 (http) or 443 (https)\n- Authentication: Depends on your Duet configuration\n\n### Repetier\n\nRepetier-Server is a host software for 3D printers.\n\n- Default port: 3344\n- Authentication: API key required\n\n### Bambu Labs\n\nBambu Lab printers use MQTT for status and control and FTP for file operations.\n\n- Authentication: Serial number and access token required (set `BAMBU_SERIAL` and `BAMBU_TOKEN`)\n- Requirements: Printer must be on the same network or have cloud connection enabled\n- Compatible with: X1C, P1S, P1P, A1, and other Bambu Lab printers\n\n#### Finding Your Bambu Printer's Serial Number and Access Token\n\nTo connect to your Bambu Lab printer, you need two things:\n\n1. **Printer Serial Number**: \n   - Look on the back or bottom of your printer for a sticker with a serial number (typically starts with \"01P\" or \"01A\" followed by numbers/letters)\n   - Alternatively, open Bambu Studio, connect to your printer, go to Device > Device Management, and view your printer's information\n\n2. **Access Token**: \n   - The access token is a security code needed to connect directly to your printer\n   - For P1 Series printers: Go to the touchscreen, select Settings > Network > LAN Mode, and you'll see the access code\n   - For X1 Series printers: Go to the touchscreen, select Settings > Network > LAN Mode, and enable LAN Mode to see the access code\n   - For A1 Mini: Use the Bambu Handy app to connect to your printer, then go to Settings > Network > LAN Mode\n\n**Note**: If your printer is not on the same local network or you can't find the access token, you may need to update your printer's firmware to the latest version to enable LAN Mode.\n\n#### Bambu Communication Notes (MQTT & FTP)\n\n- **MQTT:** This server uses the local MQTT protocol (port 8883, TLS) based on community findings (e.g., [OpenBambuAPI](https://github.com/Doridian/OpenBambuAPI)) to send commands like starting prints and cancelling jobs.\n- **FTP:** File listing and uploading currently rely on the FTP server running on the printer (via the `bambu-js` library helper). **Note:** This FTP connection might be **unsecured (plain FTP)** based on current library limitations. Use with awareness of your network security.\n\n### Prusa Connect\n\nPrusa Connect is Prusa's own cloud-based solution for managing their printers.\n\n- Default port: 80 (http) or 443 (https)\n- Authentication: API key required\n- Compatible with: Prusa MK4, Prusa Mini, Prusa XL, and other Prusa printers with Prusa Connect\n\n#### Setting up Prusa Connect\n\n1. Make sure your Prusa printer is updated to the latest firmware\n2. Connect your printer to your Wi-Fi network\n3. Create a Prusa Connect account and register your printer\n4. Generate an API key from the Prusa Connect web interface under Settings > API Access\n\n### Creality Cloud\n\nCreality Cloud is Creality's management system for their printers.\n\n- Default port: 80 (http) or 443 (https)\n- Authentication: Bearer token required\n- Compatible with: Ender series, CR series, and other Creality printers with network capabilities\n\n#### Setting up Creality Cloud\n\n1. Install the Creality Cloud app on your mobile device\n2. Create an account and add your printer\n3. Enable local network access for your printer\n4. Generate a token from the Creality Cloud app under Settings > Developer Options\n\n## Available Tools\n\n<details>\n<summary>Click to expand STL Manipulation Tools</summary>\n\n### STL Manipulation Tools\n\n> **Memory Usage Warning**: The following STL manipulation tools load entire 3D models into memory. For large or complex STL files (>10MB), these operations can consume significant memory. When using these tools within the MCP environment, be mindful of memory constraints.\n\n#### get_stl_info\n\nGet detailed information about an STL file, including dimensions, vertex count, and bounding box.\n\n```json\n{\n  \"stl_path\": \"/path/to/file.stl\"\n}\n```\n\n#### extend_stl_base\n\nExtend the base of an STL file by a specified amount.\n\n```json\n{\n  \"stl_path\": \"/path/to/file.stl\",\n  \"extension_inches\": 2\n}\n```\n\n#### scale_stl\n\nScale an STL model uniformly or along specific axes.\n\n```json\n{\n  \"stl_path\": \"/path/to/file.stl\",\n  \"scale_factor\": 1.5\n}\n```\n\nOr for non-uniform scaling:\n\n```json\n{\n  \"stl_path\": \"/path/to/file.stl\",\n  \"scale_x\": 1.2,\n  \"scale_y\": 1.0,\n  \"scale_z\": 1.5\n}\n```\n\n#### rotate_stl\n\nRotate an STL model around specific axes (in degrees).\n\n```json\n{\n  \"stl_path\": \"/path/to/file.stl\",\n  \"rotate_x\": 45,\n  \"rotate_y\": 0,\n  \"rotate_z\": 90\n}\n```\n\n#### translate_stl\n\nMove an STL model along specific axes (in millimeters).\n\n```json\n{\n  \"stl_path\": \"/path/to/file.stl\",\n  \"translate_x\": 10,\n  \"translate_y\": 5,\n  \"translate_z\": 0\n}\n```\n\n#### merge_vertices\n\nMerge vertices that are closer than a specified tolerance. Helps close small gaps and can slightly simplify the mesh.\n\n```json\n{\n  \"stl_path\": \"/path/to/model.stl\",\n  \"tolerance\": 0.01 // Optional, default = 0.01mm\n}\n```\n\n#### center_model\n\nTranslate the model so the center of its bounding box is at the world origin (0,0,0).\n\n```json\n{\n  \"stl_path\": \"/path/to/model.stl\"\n}\n```\n\n#### lay_flat\n\nAttempt to identify the largest flat surface of the model (that isn't already facing directly up or down) and rotate the model so this face is oriented downwards on the XY plane (Z=0). Useful for orienting models for printing.\n\n```json\n{\n  \"stl_path\": \"/path/to/model.stl\"\n}\n```\n\n#### modify_stl_section\n\nApply a specific transformation to a selected section of an STL file. This allows for detailed modifications of specific parts of a model.\n\n```json\n{\n  \"stl_path\": \"/path/to/file.stl\",\n  \"section\": \"top\",\n  \"transformation_type\": \"scale\",\n  \"value_x\": 1.5,\n  \"value_y\": 1.5, \n  \"value_z\": 1.5\n}\n```\n\nFor custom section bounds:\n\n```json\n{\n  \"stl_path\": \"/path/to/file.stl\",\n  \"section\": \"custom\",\n  \"transformation_type\": \"rotate\",\n  \"value_x\": 0,\n  \"value_y\": 0, \n  \"value_z\": 45,\n  \"custom_min_x\": -10,\n  \"custom_min_y\": 0,\n  \"custom_min_z\": -10,\n  \"custom_max_x\": 10,\n  \"custom_max_y\": 20,\n  \"custom_max_z\": 10\n}\n```\n\n#### generate_stl_visualization\n\nGenerate an SVG visualization of an STL file from multiple angles (front, side, top, and isometric views).\n\n```json\n{\n  \"stl_path\": \"/path/to/file.stl\",\n  \"width\": 400,\n  \"height\": 400\n}\n```\n\n#### slice_stl\n\nSlice an STL file to generate G-code.\n\n```json\n{\n  \"stl_path\": \"/path/to/file.stl\",\n  \"slicer_type\": \"prusaslicer\",\n  \"slicer_path\": \"/path/to/prusaslicer\",\n  \"slicer_profile\": \"/path/to/profile.ini\"\n}\n```\n\n#### confirm_temperatures\n\nConfirm temperature settings in a G-code file.\n\n```json\n{\n  \"gcode_path\": \"/path/to/file.gcode\",\n  \"extruder_temp\": 200,\n  \"bed_temp\": 60\n}\n```\n\n#### process_and_print_stl\n\nProcess an STL file (extend base), slice it, confirm temperatures, and start printing.\n\n```json\n{\n  \"stl_path\": \"/path/to/file.stl\",\n  \"extension_inches\": 2,\n  \"extruder_temp\": 200,\n  \"bed_temp\": 60,\n  \"host\": \"192.168.1.100\",\n  \"type\": \"octoprint\",\n  \"api_key\": \"YOUR_API_KEY\"\n}\n```\n\n**Note:** Automatic orientation for optimal printing (minimizing supports, etc.) is a complex task typically handled by slicer GUIs (like OrcaSlicer or PrusaSlicer) and is not implemented in this server.\n\n</details>\n\n<details>\n<summary>Click to expand Printer Control Tools</summary>\n\n### Printer Control Tools\n\n#### get_printer_status\n\nGet the current status of the 3D printer.\n\n```json\n{\n  \"host\": \"192.168.1.100\",\n  \"type\": \"octoprint\",\n  \"api_key\": \"YOUR_API_KEY\"\n}\n```\n\nFor Bambu printers, this currently only confirms MQTT connection.\n\n#### list_printer_files\n\nList files available on the printer.\n\n```json\n{\n  \"host\": \"192.168.1.100\",\n  \"type\": \"octoprint\",\n  \"api_key\": \"YOUR_API_KEY\"\n}\n```\n\nFor Bambu printers, lists files in the `gcodes` directory via FTP.\n\n#### upload_gcode\n\nUpload a G-code file to the printer.\n\n```json\n{\n  \"host\": \"192.168.1.100\",\n  \"type\": \"octoprint\",\n  \"api_key\": \"YOUR_API_KEY\",\n  \"filename\": \"my_print.gcode\",\n  \"gcode\": \"G28\\nG1 X100 Y100 Z10 F3000\\n...\",\n  \"print\": true\n}\n```\n\nFor Bambu printers, uploads to the `gcodes` directory via FTP. Cannot start print automatically.\n\n#### start_print\n\nStart printing a file that is already on the printer.\n\n```json\n{\n  \"host\": \"192.168.1.100\",\n  \"type\": \"octoprint\",\n  \"api_key\": \"YOUR_API_KEY\",\n  \"filename\": \"my_print.gcode\"\n}\n```\n\n**Not recommended for Bambu printers.** Use `print_3mf` for Bambu `.3mf` files.\n\n#### cancel_print\n\nCancel the current print job.\n\n```json\n{\n  \"host\": \"192.168.1.100\",\n  \"type\": \"octoprint\",\n  \"api_key\": \"YOUR_API_KEY\"\n}\n```\n\nFor Bambu printers, sends the `stop_print` command via MQTT.\n\n#### set_printer_temperature\n\nSet the temperature of a printer component.\n\n```json\n{\n  \"host\": \"192.168.1.100\",\n  \"type\": \"octoprint\",\n  \"api_key\": \"YOUR_API_KEY\",\n  \"component\": \"extruder\",\n  \"temperature\": 200\n}\n```\n\n**Not supported for Bambu printers** via direct MQTT commands.\n\n</details>\n\n<details open>\n<summary>Click to expand Bambu-Specific Tools</summary>\n\n### Bambu-Specific Tools\n\n#### print_3mf\n\nUploads a `.3mf` file to a Bambu printer via FTP and initiates the print job via an MQTT command. Allows overriding some print parameters like AMS mapping.\n\n```json\n{\n  \"three_mf_path\": \"/path/to/your_model.3mf\",\n  \"host\": \"your_bambu_ip\", // Optional if default is set\n  \"bambu_serial\": \"YOUR_SERIAL\", // Optional if default is set\n  \"bambu_token\": \"YOUR_TOKEN\", // Optional if default is set\n  // Optional Overrides:\n  \"use_ams\": true, // Default: true\n  \"ams_mapping\": [0, 1, 2, 3], // Array of AMS slot indices to use\n  \"bed_leveling\": true, // Default: true\n  \"flow_calibration\": false, // Default: false\n  \"vibration_calibration\": false, // Default: false\n  \"timelapse\": false // Default: false\n}\n```\n\n**Note:** Overriding slicer settings like layer height or temperature via this tool is not supported by the printer's MQTT command. Apply those changes before generating the `.3mf` file.\n\n</details>\n\n## Available Resources\n\n<details>\n<summary>Click to expand Printer Resources</summary>\n\n### Printer Resources\n\n- `printer://{host}/status` - Current status of the 3D printer (limited for Bambu currently)\n- `printer://{host}/files` - List of files available on the 3D printer (FTP for Bambu)\n- `printer://{host}/file/{filename}` - Content of a specific G-code file (checks existence only for Bambu)\n\n</details>\n\n<details open>\n<summary>Click to expand Bambu Preset Resources</summary>\n\n### Bambu Preset Resources\n\nIf the `BAMBU_STUDIO_CONFIG_PATH` environment variable is set to your Bambu Studio user settings directory, you can read your saved presets.\n\n- `preset://bambu/machine/{preset_name}` - Reads a machine preset file (e.g., `Bambu Lab P1S 0.4 nozzle.json`)\n- `preset://bambu/filament/{preset_name}` - Reads a filament preset file (e.g., `Generic PLA.json`)\n- `preset://bambu/process/{preset_name}` - Reads a process preset file (e.g., `0.20mm Standard @BBL P1S.json`)\n\n**Example Usage:**\n\"Read the content of my Bambu process preset named '0.16mm Optimal @BBL P1S'\"\n(Claude would call ReadResource with `preset://bambu/process/0.16mm%20Optimal%20%40BBL%20P1S`)\n\n</details>\n\n## Example Commands for Claude\n\nHere are some example commands you can give to Claude after connecting the MCP server:\n\n### Printer Control\n- \"What's the current status of my 3D printer?\"\n- \"Show me the list of files on my printer.\"\n- \"Upload this G-code to my printer: [G-code content]\"\n- \"Start printing the file named 'benchy.gcode'.\"\n- \"Cancel the current print job.\"\n- \"Set the extruder temperature to 200¬∞C.\"\n- \"Set the bed temperature to 60¬∞C.\"\n\n### STL Manipulation and Printing\n- \"Take this STL file and extend the base by 2 inches, then send to slicer and queue up in my printer.\"\n- \"Extend the base of model.stl by 1.5 inches.\"\n- \"Scale this STL file by 150% uniformly.\"\n- \"Scale model.stl to be twice as wide but keep the same height.\"\n- \"Rotate this model 90 degrees around the Z axis.\"\n- \"Move this STL model up by 5mm to create a gap underneath.\"\n- \"Can you modify just the top part of this model to make it 20% larger?\"\n- \"Analyze this STL file and tell me its dimensions and details.\"\n- \"Generate a visualization of this STL file so I can see what it looks like.\"\n- \"Create SVG visualizations of my model from different angles.\"\n- \"Make the base of this model wider without changing its height.\"\n- \"Slice the modified STL file using PrusaSlicer.\"\n- \"Confirm that the temperatures in the G-code are 200¬∞C for the extruder and 60¬∞C for the bed.\"\n- \"Process this STL file, make the base 2 inches longer, slice it, and start printing, but confirm the temperatures first.\"\n- \"Print `~/Downloads/my_model.3mf` on the Bambu printer.\"\n- \"Upload `~/Desktop/calibration_cube.3mf` to the Bambu printer using AMS slots 0 and 2, and turn off bed leveling.\"\n- \"Cancel the print job on my Bambu P1S.\"\n- \"What are the settings in my Bambu filament preset 'Generic PETG'?\"\n- \"Show me my Bambu process presets.\"\n\n## Bambu Lab Printer Limitations\n\nDue to the nature of the Bambu Lab printer API, there are some limitations:\n\n1. **Starting prints**: Starting a print requires the 3MF project file path, gcode file name, print name, and MD5 hash. The simplified API in this server doesn't support this fully yet.\n\n2. **Temperature control**: The Bambu API doesn't provide direct methods to set temperatures. This would require custom G-code commands.\n\n3. **File management**: Files must be uploaded to the \"gcodes\" directory on the printer.\n\n4. **FTP Security:** File operations currently use the printer's FTP server, which may be unsecured (plain FTP).\n\n5. **Parameter Overrides:** Only parameters supported by the MQTT `project_file` command can be overridden via the `print_3mf` tool (e.g., AMS usage, calibration flags). Slicer settings like layer height or temperature cannot be changed at print time via this command.\n\n6. **Status Updates:** Full real-time status monitoring via MQTT needs further implementation.\n\n## Limitations and Considerations\n\n### Memory Usage\n- **Large STL Files**: Processing large or complex STL files can consume significant memory. The entire STL geometry is loaded into memory during operations.\n- **Multiple Operations**: Running multiple STL operations in sequence (especially on large files) may cause memory to accumulate if garbage collection doesn't keep up.\n- **MCP Environment**: Since this runs as an MCP server, be aware that Claude's MCP environment has memory constraints. Complex operations on very large STL files may cause out-of-memory issues.\n\n### STL Manipulation Limitations\n- **Section Modification**: The section-specific modification feature works best on simpler geometries. Complex or non-manifold meshes may produce unexpected results.\n- **Base Extension**: The base extension algorithm works by adding a new geometry underneath the model. For models with complex undersides, results may not be perfect.\n- **Error Handling**: While we've added robust error handling, some edge cases in complex STL files might still cause issues.\n\n### Visualization Limitations\n- **SVG Representation**: The SVG visualization is a simplified schematic representation, not a true 3D render.\n- **Complex Models**: For very complex models, the visualization may not accurately represent all details.\n\n### Performance Considerations\n- **Slicing Operations**: External slicer processes can be CPU-intensive and may take considerable time for complex models.\n- **Progress Reporting**: For large files, progress updates may appear to stall at certain processing stages.\n\n### Testing Recommendations\n- Start with smaller STL files (< 10MB) to test functionality\n- Monitor memory usage when processing large files\n- Test modifications on simple geometries before attempting complex ones\n- Consider running on a system with at least 4GB of available RAM for larger operations\n\n## Badges\n\n| Badge | Description |\n|-------|-------------|\n| [![npm version](https://img.shields.io/npm/v/mcp-3d-printer-server.svg)](https://www.npmjs.com/package/mcp-3d-printer-server) | The current version of the package on npm |\n| [![License: GPL-2.0](https://img.shields.io/badge/License-GPL%20v2-blue.svg)](https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html) | This project is licensed under GPL-2.0 |\n| [![TypeScript](https://img.shields.io/badge/TypeScript-4.9%2B-blue)](https://www.typescriptlang.org/) | This project is written in TypeScript 4.9+ |\n| [![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://github.com/yourusername/mcp-3d-printer-server/graphs/commit-activity) | This project is actively maintained |\n| [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://makeapullrequest.com) | We welcome contributions via Pull Requests |\n| [![Node.js Version](https://img.shields.io/badge/node-%3E%3D%2018.0.0-green.svg)](https://nodejs.org/en/download/) | Requires Node.js 18.0.0 or higher |\n| [![Downloads](https://img.shields.io/npm/dm/mcp-3d-printer-server.svg)](https://www.npmjs.com/package/mcp-3d-printer-server) | Number of downloads per month from npm |\n| [![GitHub stars](https://img.shields.io/github/stars/dmontgomery40/mcp-3d-printer-server.svg?style=social&label=Star)](https://github.com/yourusername/mcp-3d-printer-server) | Number of GitHub stars this project has received |\n\n## License\n\nGPL-2.0\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "printer",
        "prints",
        "iot",
        "printer management",
        "printer server",
        "3d printer"
      ],
      "category": "iot-and-device-control"
    },
    "GitDzreal93--uiautomator2-mcp": {
      "owner": "GitDzreal93",
      "name": "uiautomator2-mcp",
      "url": "https://github.com/GitDzreal93/uiautomator2-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/GitDzreal93.webp",
      "description": "Provides automation capabilities for Android devices, including command execution, app management, and UI interactions such as clicks and text inputs. Supports seamless control of Android devices or emulators with integrated OCR and device management features.",
      "stars": 10,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-23T08:40:13Z",
      "readme_content": "# UIAutomator2 MCP Server\n\nÂü∫‰∫éFastMCPÊ°ÜÊû∂ÂÆûÁé∞ÁöÑUIAutomator2 MCPÊúçÂä°Âô®,Êèê‰æõAndroidËÆæÂ§áËá™Âä®ÂåñÊéßÂà∂ËÉΩÂäõ„ÄÇ\n\n## ÂäüËÉΩÁâπÊÄß\n\n- AndroidËÆæÂ§áÁÆ°ÁêÜ\n  - ADBÂëΩ‰ª§ÊâßË°å\n  - Â∫îÁî®ÂåÖÁÆ°ÁêÜ\n  - Â±èÂπïÊà™Âõæ\n\n- UIËá™Âä®ÂåñÊìç‰Ωú\n  - ÂÖÉÁ¥†ÁÇπÂáª\n  - ÊñáÊú¨ËæìÂÖ•\n  - Â±èÂπïÊªëÂä®\n  - ÂÖÉÁ¥†Á≠âÂæÖ\n  - È°µÈù¢ÊªöÂä®\n\n- Â∫îÁî®ÁÆ°ÁêÜ\n  - Â∫îÁî®ÂêØÂä®/ÂÅúÊ≠¢\n  - ÂΩìÂâçÂ∫îÁî®‰ø°ÊÅØ\n  - UIAutomator2ÊúçÂä°ÁÆ°ÁêÜ\n\n## ÁéØÂ¢ÉË¶ÅÊ±Ç\n\n- Python 3.10+\n- ADBÂ∑•ÂÖ∑\n- AndroidËÆæÂ§áÊàñÊ®°ÊãüÂô®\n\n## ÂÆâË£Ö\n\n1. ÂÖãÈöÜÈ°πÁõÆ\n```bash\ngit clone https://github.com/yourusername/uiautomator2-mcp.git\ncd uiautomator2-mcp\n```\n\n2. ÂÆâË£Ö‰æùËµñ\n```bash\npip install -e .\n```\n\n## MCPÈÖçÁΩÆ\n\n### 1. ÈÖçÁΩÆmcp.json\n\nÂú®Claude DesktopÁöÑÈÖçÁΩÆÁõÆÂΩï‰∏ãÂàõÂª∫ÊàñÁºñËæë`mcp.json`Êñá‰ª∂ÔºàÈÄöÂ∏∏Âú®`~/.cursor/mcp.json`Êàñ`%APPDATA%\\Cursor\\mcp.json`ÔºâÔºö\n\n```json\n{\n  \"mcpServers\": {\n    \"android\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/uiautomator2-mcp\",  // ÊõøÊç¢‰∏∫‰Ω†ÁöÑÈ°πÁõÆË∑ØÂæÑ\n        \"run\",\n        \"src/server.py\"\n      ]\n    }\n  }\n}\n```\n\nÈÖçÁΩÆËØ¥ÊòéÔºö\n- `android`: MCPÊúçÂä°Âô®ÁöÑÂîØ‰∏ÄÊ†áËØÜÁ¨¶\n- `command`: Áî®‰∫éËøêË°åPythonÁöÑÂëΩ‰ª§ÔºàËøôÈáå‰ΩøÁî®uvÔºå‰πüÂèØ‰ª•‰ΩøÁî®pythonÔºâ\n- `args`: ÂëΩ‰ª§Ë°åÂèÇÊï∞\n  - `--directory`: È°πÁõÆÁõÆÂΩïË∑ØÂæÑ\n  - `run`: uvÁöÑËøêË°åÂëΩ‰ª§\n  - `src/server.py`: ÊúçÂä°Âô®ÂÖ•Âè£Êñá‰ª∂Ë∑ØÂæÑ\n\n### 2. ÈÖçÁΩÆÈÄâÈ°π\n\n‰Ω†ÂèØ‰ª•Ê†πÊçÆÈúÄË¶ÅË∞ÉÊï¥‰ª•‰∏ãÈÖçÁΩÆÔºö\n\n1. ‰ΩøÁî®PythonÁõ¥Êé•ËøêË°åÔºö\n```json\n{\n  \"mcpServers\": {\n    \"android\": {\n      \"command\": \"python\",\n      \"args\": [\n        \"/path/to/uiautomator2-mcp/src/server.py\"\n      ]\n    }\n  }\n}\n```\n\n2. ‰ΩøÁî®ËôöÊãüÁéØÂ¢ÉÔºö\n```json\n{\n  \"mcpServers\": {\n    \"android\": {\n      \"command\": \"/path/to/venv/bin/python\",\n      \"args\": [\n        \"/path/to/uiautomator2-mcp/src/server.py\"\n      ]\n    }\n  }\n}\n```\n\n3. Ê∑ªÂä†ÁéØÂ¢ÉÂèòÈáèÔºö\n```json\n{\n  \"mcpServers\": {\n    \"android\": {\n      \"command\": \"python\",\n      \"args\": [\n        \"/path/to/uiautomator2-mcp/src/server.py\"\n      ],\n      \"env\": {\n        \"PYTHONPATH\": \"/path/to/uiautomator2-mcp\",\n        \"ANDROID_HOME\": \"/path/to/android-sdk\"\n      }\n    }\n  }\n}\n```\n\n### 3. Â§öÊúçÂä°Âô®ÈÖçÁΩÆ\n\n‰Ω†ÂèØ‰ª•Âú®Âêå‰∏ÄÈÖçÁΩÆÊñá‰ª∂‰∏≠ÂÆö‰πâÂ§ö‰∏™MCPÊúçÂä°Âô®Ôºö\n\n```json\n{\n  \"mcpServers\": {\n    \"android\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/uiautomator2-mcp\",\n        \"run\",\n        \"src/server.py\"\n      ]\n    },\n    \"android-debug\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/uiautomator2-mcp\",\n        \"run\",\n        \"src/server.py\",\n        \"--debug\"\n      ]\n    }\n  }\n}\n```\n\n## ‰ΩøÁî®Â∑•ÂÖ∑\n\nÈÖçÁΩÆÂÆåÊàêÂêéÔºå‰Ω†ÂèØ‰ª•Âú®Claude‰∏≠Áõ¥Êé•‰ΩøÁî®ÊâÄÊúâÂèØÁî®ÁöÑÂ∑•ÂÖ∑Ôºö\n\n```python\n# ÂàùÂßãÂåñUIAutomator2\nawait mcp.call_tool(\"mcp_android_init_uiautomator2\", {})\n\n# ÂêØÂä®Â∫îÁî®\nawait mcp.call_tool(\"mcp_android_start_app\", {\n    \"package_name\": \"com.example.app\"\n})\n\n# ÁÇπÂáªÂÖÉÁ¥†\nawait mcp.call_tool(\"mcp_android_click_element\", {\n    \"text\": \"ÁôªÂΩï\"\n})\n```\n\n## ÂºÄÂèë\n\n1. ÂÆâË£ÖÂºÄÂèë‰æùËµñ\n```bash\npip install -e \".[dev]\"\n```\n\n2. ËøêË°åÊµãËØï\n```bash\npytest\n```\n\n## Ë¥°ÁåÆ\n\nÊ¨¢ËøéÊèê‰∫§IssueÂíåPull Request„ÄÇ\n\n## ËÆ∏ÂèØËØÅ\n\nMIT License",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iot",
        "android",
        "devices",
        "uiautomator2 mcp",
        "control android",
        "iot device"
      ],
      "category": "iot-and-device-control"
    },
    "Here-and-Tomorrow-LLC--audio-player-mcp": {
      "owner": "Here-and-Tomorrow-LLC",
      "name": "audio-player-mcp",
      "url": "https://github.com/Here-and-Tomorrow-LLC/audio-player-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Here-and-Tomorrow-LLC.webp",
      "description": "Control audio playback on a computer, manage audio files, and ensure secure access through directory isolation.",
      "stars": 4,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-14T05:30:33Z",
      "readme_content": "\n# Audio Player MCP Server\n\nA Model Context Protocol (MCP) server that allows Claude to control audio playback on your computer.\n\n## Features\n\n- Play MP3, WAV, and OGG audio files.\n- List available audio files in your music directory.\n- Stop audio playback.\n- Secure file access with directory isolation.\n\n## Requirements\n\n- Python 3.10 or higher.\n- [Claude Desktop](https://claude.ai/download) (latest version).\n\n## Installation\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/Here-and-Tomorrow-LLC/audio-player-mcp.git\n   ```\n\n2. Navigate to the repository directory:\n   ```bash\n   cd audio-player-mcp\n   ```\n\n3. Install the package in editable mode:\n   ```bash\n   pip install -e .\n   ```\n\n## Setup with Claude Desktop\n\n1. Open Claude Desktop settings and navigate to:  \n   `Developer > Edit Config`\n\n2. Locate your configuration file:  \n   - **Mac**: `~/Library/Application Support/Claude/claude_desktop_config.json`  \n   - **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n3. Add the following configuration based on your operating system:\n\n   **Mac/Linux:**\n   ```json\n   {\n     \"mcpServers\": {\n       \"audio-player\": {\n         \"command\": \"/path/to/your/venv/bin/python\",\n         \"args\": [\n           \"/path/to/your/audio-player-mcp/src/audio_player_mcp/player.py\"\n         ],\n         \"env\": {\n           \"AUDIO_PLAYER_DIR\": \"/path/to/your/audio/files\"\n         }\n       }\n     }\n   }\n   ```\n\n   **Windows:**\n   ```json\n   {\n     \"mcpServers\": {\n       \"audio-player\": {\n         \"command\": \"C:\\path\\to\\your\\venv\\Scripts\\python.exe\",\n         \"args\": [\n           \"C:\\path\\to\\your\\audio-player-mcp\\src\\audio_player_mcp\\player.py\"\n         ],\n         \"env\": {\n           \"AUDIO_PLAYER_DIR\": \"C:\\path\\to\\your\\audio\\files\"\n         }\n       }\n     }\n   }\n   ```\n\n   **Note:** If `AUDIO_PLAYER_DIR` is not set, the server will default to using the `Music` folder in your home directory.\n\n4. Restart Claude Desktop.\n\n## Usage\n\nYou can now control audio playback by asking Claude:\n\n- \"What audio files do I have?\"\n- \"Play song.mp3.\"\n- \"Stop the music.\"\n\n## Troubleshooting\n\nIf something isn't working, check Claude's logs:\n\n- **Mac:**\n  ```bash\n  tail -f ~/Library/Logs/Claude/mcp*.log\n  ```\n\n- **Windows:**\n  ```bash\n  type \"%APPDATA%\\Claude\\logs\\mcp*.log\"\n  ```\n\n## Development\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/yourusername/audio-player-mcp.git\n   ```\n\n2. Navigate to the repository directory:\n   ```bash\n   cd audio-player-mcp\n   ```\n\n3. Install development dependencies:\n   ```bash\n   pip install -e \".[dev]\"\n   ```\n\n4. Run the MCP server in development mode:\n   ```bash\n   mcp dev src/audio_player_mcp/player.py\n   ```\n\n## License\n\nThis project is licensed under the [MIT License](LICENSE).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iot",
        "audio",
        "playback",
        "manage audio",
        "device control",
        "control audio"
      ],
      "category": "iot-and-device-control"
    },
    "JoshuaRileyDev--simulator-mcp-server": {
      "owner": "JoshuaRileyDev",
      "name": "simulator-mcp-server",
      "url": "https://github.com/JoshuaRileyDev/simulator-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/JoshuaRileyDev.webp",
      "description": "Programmatic control over iOS simulators, enabling the listing of available simulators, booting and shutting down simulators, installing .app bundles, and launching apps by their bundle ID.",
      "stars": 45,
      "forks": 9,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-18T11:48:34Z",
      "readme_content": "# iOS Simulator MCP Server\n\nA Model Context Protocol (MCP) server that provides programmatic control over iOS simulators. This server implements the MCP specification to expose simulator functionality through a standardized interface.\n\n## Features\n\n- List available iOS simulators\n- Boot and shutdown simulators\n- Install .app bundles on simulators\n- Launch installed apps by bundle ID\n\n## Installation\nAdd the following to your Claude Config JSON file\n```\n{\n  \"mcpServers\": {\n    \"simulator\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"y\",\n        \"@joshuarileydev/simulator-mcp-server\"\n      ]\n    }\n  }\n}\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "simulator",
        "simulators",
        "iot",
        "joshuarileydev simulator",
        "ios simulators",
        "simulator mcp"
      ],
      "category": "iot-and-device-control"
    },
    "RhombusSystems--rhombus-node-mcp": {
      "owner": "RhombusSystems",
      "name": "rhombus-node-mcp",
      "url": "https://github.com/RhombusSystems/rhombus-node-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/RhombusSystems.webp",
      "description": "Integrate with the Rhombus API to access and manage security data and services through conversational agents. Enable features like monitoring smart cameras, controlling access systems, and managing IoT sensors via chat interfaces.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T22:21:09Z",
      "readme_content": "# üöÄ Rhombus MCP Server - Supercharge Your AI Tools!\n[![smithery badge](https://smithery.ai/badge/@RhombusSystems/rhombus-node-mcp1)](https://smithery.ai/server/@RhombusSystems/rhombus-node-mcp1)\n\nUnleash the power of the Rhombus API with this cutting-edge MCP server implementation! Transform your chatbot experience with advanced security and surveillance capabilities at your fingertips.\n\n## üîç About Rhombus\n\nRhombus is the #1 rated commercial security system, built to protect and designed to adapt! We deliver enterprise-grade physical security with a cybersecurity focus, combining:\n\n* üí° **Smart Cameras** - Innovative dome, fisheye, bullet, and multisensor security cameras\n* üö™ **Access Control** - Secure door controllers, readers, and intercoms with mobile, card, and fob access\n* üì° **IoT Sensors** - Advanced audio, environmental, motion, entry, and multipurpose panic sensors\n* üîí **Alarm Monitoring** - TMA 5-diamond certified live agent verification and dispatch\n\nOur platform is powered by actionable AI insights that help you respond faster with real-time detections, all while being rooted in strong cybersecurity principles.\n\n## üß™ Join Our Beta Test!\n\n**We're thrilled to be part of the AI Generation!** Help us shape the future of AI-powered security by testing our MCP server implementation and providing valuable feedback.\n\nüëâ **[Fill out our beta test form here](https://rhmbs.link/beta_test)** üëà\n\nYour insights will directly influence our development roadmap and help us create the most powerful AI security tools on the market!\n\n## üîß Quick Setup\n\n### Step 1: Give Your Rhombus Console Superpowers\n\n1. Login to your Rhombus Console  - [Login Here](https://console.rhombus.com)! üîê\n2. Generate your magic key at [API Key Settings](https://console.rhombus.com/settings/api-management) ‚ú®\n3. Activate your powers by setting `RHOMBUS_API_KEY` in your environment üí™\n\n### Step 2: Supercharge Claude Desktop\n\n1. Grab the incredible Claude desktop [right here](https://claude.ai/download)! üì•\n\n2. Unleash the magic by adding this to your `claude_desktop_config.json`:\n\n### DOCKER\n\n```json\n{\n  \"mcpServers\": {\n    \"rhombus\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"RHOMBUS_API_KEY=YOUR_API_KEY_HERE\",\n        \"rhombussystems/mcp-server-rhombus\"\n      ],\n      \"env\": {\n        \"RHOMBUS_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"rhombus\": {\n      \"command\": \"npx\",\n      \"args\": [\"--yes\", \"--package\", \"rhombus-node-mcp\", \"mcp-server-rhombus\"],\n      \"env\": {\n        \"RHOMBUS_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\nYou can access the file using:\n\n```bash\nvim ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n### Step 3: Take It For A Spin! üé°\n\nTime to see the magic happen! Let's verify that Claude for Desktop is detecting our awesome `rhombus` server tools:\n\n1. Look for the powerful hammer icon in Claude's interface ‚öíÔ∏è\n2. Click it to reveal your new arsenal of tools\n3. Spot the Filesystem MCP Server tools in the list\n\nIf they're visible, YOU'VE DONE IT! üéâ Your integration is live and ready to rock! Claude can now communicate directly with Rhombus systems, giving you the same incredible capabilities as the Rhombus web app, but with the added power of Claude's intelligence!\n\n## üöÄ Running Locally: Unleash Your Inner Developer!\n\nWant to get hands-on and test out the Rhombus MCP server right on your machine? Follow these steps to build and run a local Docker image, then connect it to your MCP client of choice!\n\n### 1. Build Your Local Docker Image üõ†Ô∏è\nFirst, let's get that Docker image built. This will allow you to run the MCP server in a local environment.\n\n```bash\nnpm install\ndocker build -t mcp-server-rhombus .\n```\n\n### 2. Update Your Claude Config for Local Use ‚ö°\nNow, you'll need to adjust your `claude_desktop_config.json` to point to your newly built local Docker image.\n\n> ***Note:*** When running locally, the Docker image name changes to `mcp-server-rhombus` from `rhombussystems/mcp-server-rhombus`. Make sure to update this in your configuration!\n\n```json\n{\n  \"mcpServers\": {\n    \"rhombus\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"RHOMBUS_API_KEY=YOUR_API_KEY_HERE\",\n        \"mcp-server-rhombus\"\n      ],\n      \"env\": {\n        \"RHOMBUS_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n## Creating a new tool\n\nWe've written a script that you can run to get kickstarted on developing a new tool in addition to our existing tool set. You can simply call:\n\n```sh\nnpm run create:tool\n```\n\n## Hitting a Snag? We've Got You! üõü\n\nCheck out Claude's fantastic [troubleshooting guide](https://modelcontextprotocol.io/docs/tools/debugging) for quick fixes! Still stuck? Our team of experts is ready to help!\n\n* Email us: developer@rhombus.com üìß\n* Share your feedback via our [beta test form](https://rhmbs.link/beta_test) üåü\n\nWe're committed to making your experience absolutely seamless and are SUPER excited to hear what amazing applications you're building with our tools!\n\n## ü§ù We Want Your Feedback!\n\nAs pioneers in the AI Generation, we're passionate about pushing the boundaries of what's possible when combining advanced physical security with cutting-edge AI tools. Your feedback is invaluable as we continue to innovate and improve.\n\n* What features would make your workflow even better?\n* How are you using our MCP server in your projects?\n* What integrations would you like to see next?\n\nShare your thoughts, ideas, and success stories with us! Together, we're creating the future of intelligent security.\n\n## üìú License\n\nThis awesome MCP server comes with the freedom of the MIT License! ‚úÖ Use it, ‚úÖ modify it, ‚úÖ share it - the possibilities are endless! Just remember to follow the MIT License terms and conditions. Check out the LICENSE file in our repository for all the details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "rhombussystems",
        "iot",
        "rhombus",
        "rhombus api",
        "control rhombussystems",
        "rhombus node"
      ],
      "category": "iot-and-device-control"
    },
    "SecretiveShell--mcp-windows": {
      "owner": "SecretiveShell",
      "name": "mcp-windows",
      "url": "https://github.com/SecretiveShell/mcp-windows",
      "imageUrl": "/freedevtools/mcp/pfp/SecretiveShell.webp",
      "description": "Control and interact with various Windows system features including media playback, notifications, window management, and clipboard operations through a standardized MCP interface. This server enables automation of complex Windows tasks with simple command executions.",
      "stars": 18,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T22:32:32Z",
      "readme_content": "# mcp-windows\r\n\r\nMCP server for the windows API.\r\n\r\n## Installation\r\n\r\nadd this to your claude mcp config:\r\n\r\n```json\r\n{\r\n  \"mcpServers\": {\r\n    \"windows\": {\r\n      \"command\": \"uvx\",\r\n      \"args\": [\r\n        \"mcp-windows\"\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nor locally:\r\n\r\n```json\r\n{\r\n  \"mcpServers\": {\r\n    \"windows\": {\r\n      \"command\": \"uv\",\r\n      \"args\": [\r\n        \"--directory\",\r\n        \"C:\\\\Users\\\\{name}\\\\Documents\\\\mcp-windows\",\r\n        \"run\",\r\n        \"mcp-windows\"\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Features\r\n\r\n### Media\r\n\r\n- get_media_sessions\r\n- pause\r\n- play\r\n- next\r\n- previous\r\n\r\n### Notifications\r\n\r\n- send_toast\r\n\r\n### Window Management\r\n\r\n- get_foreground_window_info\r\n- get_window_list\r\n- focus_window\r\n- close_window\r\n- minimize_window\r\n\r\n### screenshot\r\n\r\n- screenshot_window\r\n\r\n### Monitors\r\n\r\n- sleep_monitors\r\n- wake_monitors\r\n\r\n### Theme\r\n\r\n- set_theme_mode (light, dark)\r\n- get_theme_mode\r\n\r\n### Start Menu\r\n\r\n- open_file\r\n- open_url\r\n\r\n### Clipboard\r\n\r\n- get_clipboard\r\n- set_clipboard\r\n\r\n## License\r\n\r\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iot",
        "mcp",
        "automation",
        "mcp windows",
        "mcp interface",
        "iot device"
      ],
      "category": "iot-and-device-control"
    },
    "ThingsPanel--thingspanel-mcp": {
      "owner": "ThingsPanel",
      "name": "thingspanel-mcp",
      "url": "https://github.com/ThingsPanel/thingspanel-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ThingsPanel.webp",
      "description": "Integrates IoT devices with AI models for natural language control and data analysis. Simplifies connection to IoT infrastructure through a standardized interface.",
      "stars": 39,
      "forks": 11,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-12T08:01:19Z",
      "readme_content": "# ThingsPanel MCP [![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](LICENSE) [![Python Version](https://img.shields.io/pypi/pyversions/thingspanel-mcp.svg)](https://pypi.org/project/thingspanel-mcp/) [![PyPI version](https://badge.fury.io/py/thingspanel-mcp.svg)](https://badge.fury.io/py/thingspanel-mcp)\n<a href=\"https://glama.ai/mcp/servers/@ThingsPanel/thingspanel-mcp\">\n  <img alt=\"badge\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@ThingsPanel/thingspanel-mcp/badge\" />\n</a>\n\n[ThingsPanel](http://thingspanel.io/) IoT Platform's MCP (Model Context Protocol) Server.\n\n[English](README.md) | [‰∏≠Êñá](README_CN.md)\n\n## üöÄ Project Overview\n\nThingsPanel MCP Server is an innovative intelligent interface that enables you to:\n\n- Interact with IoT devices using natural language\n- Easily retrieve device information\n- Monitor device performance and status in real-time\n- Simplify device control commands\n- Analyze platform-wide statistical data and trends\n\n## Target Audience\n\n### Intended Users\n\n- **IoT Solution Developers**: Engineers and developers building solutions on the ThingsPanel IoT platform and seeking AI integration capabilities\n- **AI Integration Experts**: Professionals looking to connect AI models with IoT systems\n- **System Administrators**: IT personnel managing IoT infrastructure and wanting to enable AI-driven analysis and control\n- **Product Teams**: Teams building products that combine IoT and AI functionality\n\n### Problems Addressed\n\n- **Integration Complexity**: Eliminates the need to create custom integrations between AI models and IoT platforms\n- **Standardized Access**: Provides a consistent interface for AI models to interact with IoT data and devices\n- **Security Control**: Manages authentication and authorization for AI access to IoT systems\n- **Lowered Technical Barriers**: Reduces technical obstacles to adding AI capabilities to existing IoT deployments\n\n### Ideal Application Scenarios\n\n- **Natural Language IoT Control**: Enable users to control devices through AI assistants using natural language\n- **Intelligent Data Analysis**: Allow AI models to access and analyze IoT sensor data for insights\n- **Anomaly Detection**: Connect AI models to device data streams for real-time anomaly detection\n- **Predictive Maintenance**: Enable AI-driven predictive maintenance by providing device history access\n- **Automated Reporting**: Create systems that can generate IoT data reports and visualizations on demand\n- **Operational Optimization**: Use AI to optimize device operations based on historical patterns\n\n## ‚ú® Core Features\n\n- üó£Ô∏è Natural Language Querying\n- üìä Comprehensive Device Insights\n- üå°Ô∏è Real-time Telemetry Data\n- üéÆ Convenient Device Control\n- üìà Platform-wide Analytics\n\n## üõ†Ô∏è Prerequisites\n\n- Python 3.8+\n- ThingsPanel Account\n- ThingsPanel API Key\n\n## üì¶ Installation\n\n### Option 1: Pip Installation\n\n```bash\npip install thingspanel-mcp\n```\n\n### Option 2: Source Code Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/ThingsPanel/thingspanel-mcp.git\n\n# Navigate to project directory\ncd thingspanel-mcp\n\n# Install the project\npip install -e .\n```\n\n## üîê Configuration\n\n### Configuration Methods (Choose One)\n\n#### Method 1: Direct Command Line Configuration (Recommended)\n\n```bash\nthingspanel-mcp --api-key \"Your API Key\" --base-url \"Your ThingsPanel Base URL\"\n```\n\n#### Method 2: Environment Variable Configuration\n\nIf you want to avoid repeated input, set environment variables:\n\n```bash\n# Add to ~/.bashrc, ~/.zshrc, or corresponding shell config file\nexport THINGSPANEL_API_KEY=\"Your API Key\"\nexport THINGSPANEL_BASE_URL=\"Your ThingsPanel Base URL\"\n\n# Then run\nsource ~/.bashrc  # or source ~/.zshrc\n```\n\nüí° Tips:\n\n- API keys are typically obtained from the API KEY management in the ThingsPanel platform\n- Base URL refers to your ThingsPanel platform address, e.g., `http://demo.thingspanel.cn/`\n- Command-line configuration is recommended to protect sensitive information\n\n## üñ•Ô∏è Claude Desktop Integration\n\nAdd the following to your Claude desktop configuration file (`claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"thingspanel\": {\n      \"command\": \"thingspanel-mcp\",\n      \"args\": [\n        \"--api-key\", \"Your API Key\",\n        \"--base-url\", \"Your Base URL\"\n      ]\n    }\n  }\n}\n```\n\n## ü§î Interaction Examples\n\nUsing the ThingsPanel MCP Server, you can now make natural language queries such as:\n\n- \"What is the current temperature of my sensor?\"\n- \"List all active devices\"\n- \"Turn on the automatic sprinkler system\"\n- \"Show device activity for the last 24 hours\"\n\n## üõ°Ô∏è Security\n\n- Secure credential management\n- Uses ThingsPanel official API\n- Supports token-based authentication\n\n## License\n\nApache License 2.0\n\n## üåü Support Us\n\nIf this project helps you, please give us a star on GitHub! ‚≠ê\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iot",
        "thingspanel",
        "interface",
        "control thingspanel",
        "thingspanel mcp",
        "thingspanel thingspanel"
      ],
      "category": "iot-and-device-control"
    },
    "Volt23--mcp-arduino-server": {
      "owner": "Volt23",
      "name": "mcp-arduino-server",
      "url": "https://github.com/Volt23/mcp-arduino-server",
      "imageUrl": "/freedevtools/mcp/pfp/Volt23.webp",
      "description": "Expose Arduino CLI functionality to manage sketches, boards, libraries, and files. Generate AI-powered circuit diagrams from natural language to enhance hardware development workflows.",
      "stars": 3,
      "forks": 4,
      "license": "Other",
      "language": "Python",
      "updated_at": "2025-09-26T21:45:42Z",
      "readme_content": "# MCP Arduino Server (mcp-arduino-server)\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![PyPI version](https://img.shields.io/pypi/v/mcp-arduino-server.svg)](https://pypi.org/project/mcp-arduino-server/)\n\nA FastMCP-powered bridge exposing `arduino-cli` functionality via the Model Context Protocol (MCP). Manage sketches, boards, libraries, files, plus generate WireViz schematics from YAML or natural language.\n\n## Requirements\n\n- **Python¬†‚â•3.10**\n- **arduino-cli** in¬†`PATH`\n- **MCP SDK** (`mcp[cli]`)\n- **WireViz** (optional; for diagram generation)\n- **OPENAI_API_KEY** (for AI‚Äëpowered WireViz)\n- **thefuzz[speedup]** (optional; enables fuzzy local library search)\n\n## Installation\n\n**From PyPI**:\n```bash\npip install mcp-arduino-server\n```\n\n**From source**:\n```bash\ngit clone https://github.com/Volt23/mcp-arduino-server.git\ncd mcp-arduino-server\npip install .\n```\n\n## Configuration\n\nEnvironment variables override defaults:\n\n| Variable             | Default / Description                              |\n|----------------------|-----------------------------------------------------|\n| ARDUINO_CLI_PATH     | auto-detected                                       |\n| WIREVIZ_PATH         | auto-detected                                       |\n| MCP_SKETCH_DIR       | `~/Documents/Arduino_MCP_Sketches/`                 |\n| LOG_LEVEL            | `INFO`                                              |\n| OPENAI_API_KEY       | your OpenAI API key (required for AI‚Äëpowered WireViz)|\n| OPENROUTER_API_KEY   | optional alternative to `OPENAI_API_KEY`            |\n\n## Quick Start\n\n```bash\nmcp-arduino-server\n```\n\nServer listens on STDIO for JSON-RPC MCP calls. Key methods:\n\n### Sketches\n- `create_new_sketch(name)`\n- `list_sketches()`\n- `read_file(path)`\n- `write_file(path, content[, board_fqbn])` _(auto-compiles & opens `.ino`)_\n\n### Build & Deploy\n- `verify_code(sketch, board_fqbn)`\n- `upload_sketch(sketch, port, board_fqbn)`\n\n### Libraries\n- `lib_search(name[, limit])`\n- `lib_install(name)`\n- `list_library_examples(name)`\n\n### Boards\n- `list_boards()`\n- `board_search(query)`\n\n### File Ops\n- `rename_file(src, dest)`\n- `remove_file(path)` _(destructive; operations sandboxed to home & sketch directories)_\n\n### WireViz Diagrams\n- `generate_circuit_diagram_from_description(desc, sketch=\"\", output_base=\"circuit\")` _(AI‚Äëpowered; requires `OPENAI_API_KEY`, opens PNG automatically)_\n\n## MCP Client Configuration\n\nTo integrate with MCP clients (e.g., Claude Desktop), set your OpenAI API key in the environment (or alternatively `OPENROUTER_API_KEY` for OpenRouter):\n\n```json\n{\n  \"mcpServers\": {\n    \"arduino\": {\n      \"command\": \"/path/to/mcp-arduino-server\",\n      \"args\": [],\n      \"env\": {\n        \"WIREVIZ_PATH\": \"/path/to/wireviz\",\n        \"OPENAI_API_KEY\": \"<your-openai-api-key>\"\n      }\n    }\n  }\n}\n```\n\n## Troubleshooting\n\n- Set `LOG_LEVEL=DEBUG` for verbose logs.\n- Verify file and serial-port permissions.\n- Install missing cores: `arduino-cli core install <spec>`.\n- Run `arduino-cli` commands manually to debug.\n\n## License\n\nMIT\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iot",
        "cli",
        "arduino",
        "arduino cli",
        "iot device",
        "cli functionality"
      ],
      "category": "iot-and-device-control"
    },
    "Zalmotek--jetson-mcp": {
      "owner": "Zalmotek",
      "name": "jetson-mcp",
      "url": "https://github.com/Zalmotek/jetson-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Zalmotek.webp",
      "description": "Enables monitoring and remote control of Nvidia Jetson boards through natural language commands via network clients. Accesses hardware and software information using SSE transport for efficient management.",
      "stars": 7,
      "forks": 0,
      "license": "No License",
      "language": "Shell",
      "updated_at": "2025-07-13T13:38:49Z",
      "readme_content": "# jetson-mcp\n\nA MCP (Model Context Protocol) server for using natural language to monitor and remotely control a Nvidia Jetson board from clients on the same network.\n\n<p align=\"center\">\n  \n</p>\n\nThis project uses the [FastMCP](https://github.com/jlowin/fastmcp) library to create the server.\n\n**MCP Server Connected:**\n\n<p align=\"center\">\n  \n</p>\n\n## Features\n\n*   Provides MCP tools accessible by network clients using the SSE (Server-Sent Events) transport.\n*   **`get_jetson_hw_info`**: Reads `/etc/nv_boot_control.conf` to identify module/carrier board info.\n*   **`get_jetson_sw_info`**: Reads `/etc/nv_tegra_release` (for Jetpack version) and `/proc/version` (for Linux kernel version).\n*   Includes scripts for easy installation and systemd service setup.\n\n## Setup and Installation (on the Jetson)\n\n1.  **Clone the repository:**\n    ```bash\n    git clone https://github.com/Zalmotek/jetson-mcp\n    cd jetson-mcp\n    ```\n2.  **Run the installation script:**\n    This script creates a Python virtual environment (`venv/`) and installs dependencies from `requirements.txt`.\n    ```bash\n    chmod +x install.sh\n    ./install.sh\n    ```\n\n## Running the Server (on the Jetson)\n\nThe recommended way to run the server is as a background service managed by systemd.\n\n1.  **(Optional) Find Jetson IP/Hostname:**\n    You'll need the Jetson's IP address or hostname to connect from other devices. Use commands like `ip addr` or `hostname -I`.\n\n2.  **Run the service setup script:**\n    This script creates and enables a systemd service file (`/etc/systemd/system/jetson-mcp.service`) configured to run the server as the user who invoked the script, listening on port 8000.\n    ```bash\n    chmod +x setup_service.sh\n    sudo ./setup_service.sh\n    ```\n3.  **Start the service:**\n    ```bash\n    sudo systemctl start jetson-mcp.service\n    ```\n4.  **Verify Service:**\n    ```bash\n    sudo systemctl status jetson-mcp.service\n    # Check logs for errors\n    sudo journalctl -u jetson-mcp.service -f\n    ```\n5.  **Firewall**: Ensure your Jetson's firewall (if active, e.g., `ufw`) allows incoming connections on port 8000 (or your chosen port). Example for `ufw`:\n    ```bash\n    sudo ufw allow 8000/tcp\n    ```\n\n### Running Manually (for testing)\n\nThe server is best run directly using the Python interpreter, which will invoke the `mcp.run()` method configured within the script:\n\n```bash\nsource venv/bin/activate\n# The script itself now calls mcp.run() with SSE, host, and port settings\npython app/main.py\n```\n\n## Connecting from a Remote Client\n\nOnce the server is running on the Jetson and accessible on the network (port 8000 allowed through firewall):\n\n1.  **Identify the Server Address**: Find the Jetson's IP address (e.g., `192.168.1.105`) or its hostname (e.g., `jetson-nano.local`) on your LAN.\n2.  **Configure Your Client**: In your MCP client application (which could be a custom script, a UI like MCP Inspector, or potentially Cursor/Claude if they support network endpoints), configure it to connect to the MCP server at its network address.\n    *   The specific connection method depends on the client, but it will likely involve specifying a URL for the SSE endpoint:\n        *   `http://<jetson_ip_or_hostname>:8000/sse` (Common pattern for SSE)\n\n\n*Note: Cursor's `mcp.json` file is primarily designed for launching local servers via `stdio` transport. Connecting Cursor to this networked SSE server might require different configuration steps or might not be directly supported without a proxy.* Consult your specific client's documentation for how to connect to a network MCP SSE endpoint.\n\n## Examples / Screenshots\n\n**Hardware Info Tool:**\n\n<p align=\"center\">\n  \n</p>\n\n**Software Info Tool:**\n\n<p align=\"center\">\n  \n</p>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iot",
        "jetson",
        "nvidia",
        "nvidia jetson",
        "iot device",
        "zalmotek jetson"
      ],
      "category": "iot-and-device-control"
    },
    "amanasmuei--mcp-server-nodemcu": {
      "owner": "amanasmuei",
      "name": "mcp-server-nodemcu",
      "url": "https://github.com/amanasmuei/mcp-server-nodemcu",
      "imageUrl": "/freedevtools/mcp/pfp/amanasmuei.webp",
      "description": "Manage NodeMCU (ESP8266) IoT devices by monitoring their status, sending commands, and updating configurations in real-time. Integrates with AI tools through a standard RESTful API/WebSocket interface while implementing the Model Context Protocol.",
      "stars": 1,
      "forks": 3,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-04-04T00:39:55Z",
      "readme_content": "# NodeMCU MCP (Model Context Protocol) Service\n\n<p align=\"center\">\n  \n</p>\n\n\n[![GitHub license](https://img.shields.io/github/license/amanasmuei/nodemcu-mcp)](https://github.com/amanasmuei/nodemcu-mcp/blob/main/LICENSE)\n[![npm version](https://badge.fury.io/js/nodemcu-mcp.svg)](https://badge.fury.io/js/nodemcu-mcp)\n[![smithery badge](https://smithery.ai/badge/@amanasmuei/nodemcu-mcp)](https://smithery.ai/server/@amanasmuei/nodemcu-mcp)\n\n\nA Model Context Protocol (MCP) service for managing NodeMCU devices. This service provides both a standard RESTful API/WebSocket interface and implements the [Model Context Protocol](https://modelcontextprotocol.io) for integration with AI tools like Claude Desktop.\n\n## Overview\n\nNodeMCU MCP provides a management solution for ESP8266/NodeMCU IoT devices with these key capabilities:\n- Monitor device status and telemetry\n- Send commands to devices remotely\n- Update device configurations\n- Integration with AI assistants through MCP protocol\n\n## Visualizations\n\n<p align=\"center\">\n  \n  <br><em>System Architecture Overview</em>\n</p>\n\n<p align=\"center\">\n  \n  <br><em>Data Flow Between Components</em>\n</p>\n\n<p align=\"center\">\n  \n  <br><em>How Claude Desktop Interacts with NodeMCU Devices</em>\n</p>\n\n## Features\n\n- üîå **Device Management**: Register, monitor, and control NodeMCU devices\n- üìä **Real-time Communication**: WebSocket interface for real-time updates\n- ‚öôÔ∏è **Configuration Management**: Update device settings remotely\n- üîÑ **Command Execution**: Send restart, update, status commands remotely\n- üì° **Telemetry Collection**: Gather sensor data and device metrics\n- üîê **Authentication**: Secure API access with JWT authentication\n- üß† **AI Integration**: Work with Claude Desktop and other MCP-compatible AI tools\n\n## Quick Start\n\n### Prerequisites\n\n- Node.js 16.x or higher\n- npm or yarn\n- For the NodeMCU client: Arduino IDE with ESP8266 support\n\n### Installation\n\n#### Installing via Smithery\n\nTo install NodeMCU Manager for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@amanasmuei/nodemcu-mcp):\n\n```bash\nnpx -y @smithery/cli install @amanasmuei/nodemcu-mcp --client claude\n```\n\n#### From npm (once published)\n\n```bash\n# Global installation (recommended for MCP integration)\nnpm install -g nodemcu-mcp\n\n# Local installation\nnpm install nodemcu-mcp\n```\n\n#### From source\n\n```bash\n# Clone the repository\ngit clone https://github.com/amanasmuei/nodemcu-mcp.git\ncd nodemcu-mcp\n\n# Install dependencies\nnpm install\n\n# Optional: Install globally for MCP integration\nnpm install -g .\n```\n\n### Configuration\n\n1. Create a `.env` file based on the example:\n   ```\n   cp .env.example .env\n   ```\n\n2. Update the `.env` file with your settings:\n   ```\n   # Server Configuration\n   PORT=3000\n   HOST=localhost\n\n   # Security\n   JWT_SECRET=your_strong_random_secret_key\n\n   # Log Level (error, warn, info, debug)\n   LOG_LEVEL=info\n   ```\n\n## Usage\n\n### Running as API Server\n\nDevelopment mode with auto-restart:\n```bash\nnpm run dev\n```\n\nProduction mode:\n```bash\nnpm start\n```\n\n### Running as MCP Server\n\nFor integration with Claude Desktop or other MCP clients:\n```bash\nnpm run mcp\n```\n\nIf installed globally:\n```bash\nnodemcu-mcp --mode=mcp\n```\n\n### Command Line Options\n\n```\nUsage: nodemcu-mcp [options]\n\nOptions:\n  -m, --mode   Run mode (mcp, api, both)  [string] [default: \"both\"]\n  -p, --port   Port for API server        [number] [default: 3000]\n  -h, --help   Show help                  [boolean]\n  --version    Show version number        [boolean]\n```\n\n## MCP Integration\n\nThis project now uses the official Model Context Protocol (MCP) TypeScript SDK to provide integration with Claude for Desktop and other MCP clients.\n\n### MCP Tools\n\nThe following tools are available through the MCP interface:\n\n- **list-devices**: List all registered NodeMCU devices and their status\n- **get-device**: Get detailed information about a specific NodeMCU device\n- **send-command**: Send a command to a NodeMCU device\n- **update-config**: Update the configuration of a NodeMCU device\n\n### Using with Claude for Desktop\n\nTo use this server with Claude for Desktop:\n\n1. Install Claude for Desktop from [https://claude.ai/desktop](https://claude.ai/desktop)\n2. Configure Claude for Desktop by editing `~/Library/Application Support/Claude/claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"nodemcu\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/ABSOLUTE/PATH/TO/YOUR/PROJECT/mcp_server_sdk.js\"\n      ]\n    }\n  }\n}\n```\n\n3. Restart Claude for Desktop\n4. You should now see the NodeMCU tools in the Claude for Desktop interface\n\n### Running the MCP Server Standalone\n\nTo run the MCP server directly:\n\n```bash\nnpm run mcp\n```\n\nOr using the CLI:\n\n```bash\n./bin/cli.js --mode=mcp\n```\n\n## API Documentation\n\n### Authentication\n\n- **POST /api/auth/login** - Login and get JWT token\n  ```json\n  {\n    \"username\": \"admin\",\n    \"password\": \"admin123\"\n  }\n  ```\n  \n  Response:\n  ```json\n  {\n    \"message\": \"Login successful\",\n    \"token\": \"your.jwt.token\",\n    \"user\": {\n      \"id\": 1,\n      \"username\": \"admin\",\n      \"role\": \"admin\"\n    }\n  }\n  ```\n\n- **POST /api/auth/validate** - Validate JWT token\n  ```json\n  {\n    \"token\": \"your.jwt.token\"\n  }\n  ```\n\n### Devices API\n\nAll device endpoints require authentication with a JWT token:\n```\nAuthorization: Bearer your.jwt.token\n```\n\n#### List Devices\n\n```\nGET /api/devices\n```\n\nResponse:\n```json\n{\n  \"count\": 1,\n  \"devices\": [\n    {\n      \"id\": \"nodemcu-001\",\n      \"name\": \"Living Room Sensor\",\n      \"type\": \"ESP8266\",\n      \"status\": \"online\",\n      \"ip\": \"192.168.1.100\",\n      \"firmware\": \"1.0.0\",\n      \"lastSeen\": \"2023-05-15T14:30:45.123Z\"\n    }\n  ]\n}\n```\n\n#### Get Device Details\n\n```\nGET /api/devices/:id\n```\n\nResponse:\n```json\n{\n  \"id\": \"nodemcu-001\",\n  \"name\": \"Living Room Sensor\",\n  \"type\": \"ESP8266\",\n  \"status\": \"online\",\n  \"ip\": \"192.168.1.100\",\n  \"firmware\": \"1.0.0\",\n  \"lastSeen\": \"2023-05-15T14:30:45.123Z\",\n  \"config\": {\n    \"reportInterval\": 30,\n    \"debugMode\": false,\n    \"ledEnabled\": true\n  },\n  \"lastTelemetry\": {\n    \"temperature\": 23.5,\n    \"humidity\": 48.2,\n    \"uptime\": 3600,\n    \"heap\": 35280,\n    \"rssi\": -68\n  }\n}\n```\n\n#### Send Command to Device\n\n```\nPOST /api/devices/:id/command\n```\n\nRequest:\n```json\n{\n  \"command\": \"restart\",\n  \"params\": {}\n}\n```\n\nResponse:\n```json\n{\n  \"message\": \"Command sent to device\",\n  \"command\": \"restart\",\n  \"params\": {},\n  \"response\": {\n    \"success\": true,\n    \"message\": \"Device restarting\"\n  }\n}\n```\n\n## WebSocket Protocol\n\nThe WebSocket server is available at the root path: `ws://your-server:3000/`\n\nFor details on the WebSocket protocol messages, refer to the code or the examples directory.\n\n## NodeMCU Client Setup\n\nRefer to the Arduino sketch in the `examples` directory for a complete client implementation.\n\n### Key Steps\n\n1. Install required libraries in Arduino IDE:\n   - ESP8266WiFi\n   - WebSocketsClient\n   - ArduinoJson\n\n2. Configure the sketch with your WiFi and server settings:\n   ```cpp\n   // WiFi credentials\n   const char* ssid = \"YOUR_WIFI_SSID\";\n   const char* password = \"YOUR_WIFI_PASSWORD\";\n\n   // MCP Server settings\n   const char* mcpHost = \"your-server-ip\";\n   const int mcpPort = 3000;\n   ```\n\n3. Upload the sketch to your NodeMCU device\n\n## Development\n\n### Project Structure\n\n```\nnodemcu-mcp/\n‚îú‚îÄ‚îÄ assets/             # Logo and other static assets\n‚îú‚îÄ‚îÄ bin/                # CLI scripts\n‚îú‚îÄ‚îÄ examples/           # Example client code\n‚îú‚îÄ‚îÄ middleware/         # Express middleware\n‚îú‚îÄ‚îÄ routes/             # API routes\n‚îú‚îÄ‚îÄ services/           # Business logic\n‚îú‚îÄ‚îÄ .env.example        # Environment variables example\n‚îú‚îÄ‚îÄ index.js            # API server entry point\n‚îú‚îÄ‚îÄ mcp_server.js       # MCP protocol implementation\n‚îú‚îÄ‚îÄ mcp-manifest.json   # MCP manifest\n‚îî‚îÄ‚îÄ package.json        # Project configuration\n```\n\n### Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\nMIT License is a permissive license that allows you to:\n- Use the software commercially\n- Modify the software\n- Distribute the software\n- Use and modify the software privately\n\nThe only requirement is that the license and copyright notice must be included with the software.\n\n## Acknowledgments\n\n- [Model Context Protocol](https://modelcontextprotocol.io) for the integration specification\n- [NodeMCU](https://nodemcu.com) for the amazing IoT platform\n- [Anthropic](https://anthropic.com) for Claude Desktop",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "nodemcu",
        "iot",
        "esp8266",
        "nodemcu manage",
        "manage nodemcu",
        "server nodemcu"
      ],
      "category": "iot-and-device-control"
    },
    "apache--iotdb": {
      "owner": "apache",
      "name": "iotdb",
      "url": "https://github.com/apache/iotdb",
      "imageUrl": "/freedevtools/mcp/pfp/apache.webp",
      "description": "Manage and analyze time series data efficiently with a database optimized for industrial IoT applications. Integrates seamlessly with Hadoop and Spark for enhanced data handling using SQL-like commands.",
      "stars": 6198,
      "forks": 1088,
      "license": "Apache License 2.0",
      "language": "Java",
      "updated_at": "2025-10-03T22:06:29Z",
      "readme_content": "<!--\n\n    Licensed to the Apache Software Foundation (ASF) under one\n    or more contributor license agreements.  See the NOTICE file\n    distributed with this work for additional information\n    regarding copyright ownership.  The ASF licenses this file\n    to you under the Apache License, Version 2.0 (the\n    \"License\"); you may not use this file except in compliance\n    with the License.  You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing,\n    software distributed under the License is distributed on an\n    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n    KIND, either express or implied.  See the License for the\n    specific language governing permissions and limitations\n    under the License.\n\n-->\n[English](./README.md) | [‰∏≠Êñá](./README_ZH.md)\n\n# IoTDB\n[![Unit-Test](https://github.com/apache/iotdb/actions/workflows/unit-test.yml/badge.svg)](https://github.com/apache/iotdb/actions/workflows/unit-test.yml)\n[![codecov](https://codecov.io/github/apache/iotdb/graph/badge.svg?token=ejF3UGk0Nv)](https://codecov.io/github/apache/iotdb)\n[![GitHub release](https://img.shields.io/github/release/apache/iotdb.svg)](https://github.com/apache/iotdb/releases)\n[![License](https://img.shields.io/badge/license-Apache%202-4EB1BA.svg)](https://www.apache.org/licenses/LICENSE-2.0.html)\n\n![total](https://img.shields.io/github/downloads/apache/iotdb/total.svg)\n![platform_win_macos_linux_yellow](https://img.shields.io/badge/platform-win%20%7C%20macos%20%7C%20linux-yellow.svg)\n![java_language_1_8_11_17_blue](https://img.shields.io/badge/java--language-1.8%20%7C%2011%20%7C%2017-blue.svg)\n[![IoTDB Website](https://img.shields.io/website-up-down-green-red/https/shields.io.svg?label=iotdb-website)](https://iotdb.apache.org/)\n[![Maven Version](https://maven-badges.herokuapp.com/maven-central/org.apache.iotdb/iotdb-parent/badge.svg)](http://search.maven.org/#search|gav|1|g:\"org.apache.iotdb\")\n[![Gitpod Ready-to-Code](https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/apache/iotdb)\n[![Slack Status](https://img.shields.io/badge/slack-join_chat-white.svg?logo=slack&style=social)](https://join.slack.com/t/apacheiotdb/shared_invite/zt-qvso1nj8-7715TpySZtZqmyG5qXQwpg)\n\n# Overview\n\nIoTDB (Internet of Things Database) is a data management system for time series data, which provides users with specific services, including data collection, storage and analysis. Due to its lightweight structure, high performance and usable features, together with its seamless integration with the Hadoop and Spark ecosystem, IoTDB meets the requirements of massive dataset storage, high throughput data input, and complex data analysis in the industrial IoT field.\n\n[Click for More Information](https://www.timecho.com/archives/shi-xu-shu-ju-ku-iotdb-gong-neng-xiang-jie-yu-xing-ye-ying-yong)\n\nIoTDB depends on [TsFile](https://github.com/apache/tsfile) which is a columnar storage file format designed for time series data. The branch `iotdb` of TsFile project is used to deploy SNAPSHOT version for IoTDB project.\n\n# Main Features\n\nThe main features of IoTDB are as follows:\n\n1. Flexible deployment strategy. IoTDB provides users with a one-click installation tool on either the cloud platform or the terminal devices, and a data synchronization tool bridging the data on cloud platform and terminals.\n2. Low cost on hardware. IoTDB can reach a high compression ratio of disk storage.\n3. Efficient directory structure. IoTDB supports efficient organization for complex time series data structures from intelligent networking devices, organization for time series data from devices of the same type, and fuzzy searching strategy for massive and complex directory of time series data.\n4. High-throughput read and write. IoTDB supports millions of low-power devices' strong connection data access, high-speed data read and write for intelligent networking devices and mixed devices mentioned above.\n5. Rich query semantics. IoTDB supports time alignment for time series data across devices and measurements, computation in time series field (frequency domain transformation) and rich aggregation function support in time dimension.\n6. Easy to get started. IoTDB supports SQL-like language, JDBC standard API and import/export tools which are easy to use.\n7. Seamless integration with state-of-the-practice Open Source Ecosystem. IoTDB supports analysis ecosystems, such as Hadoop and Spark, as well as visualization tools, such as Grafana.\n\nFor the latest information about IoTDB, please visit [IoTDB official website](https://iotdb.apache.org/). If you encounter any problems or identify any bugs while using IoTDB, please report an issue in [Jira](https://issues.apache.org/jira/projects/IOTDB/issues).\n\n<!-- TOC -->\n\n## Outline\n\n- [IoTDB](#iotdb)\n- [Overview](#overview)\n- [Main Features](#main-features)\n  - [Outline](#outline)\n- [Quick Start](#quick-start)\n  - [Prerequisites](#prerequisites)\n  - [Installation](#installation)\n    - [Build from source](#build-from-source)\n    - [Configurations](#configurations)\n  - [Start](#start)\n    - [Start IoTDB](#start-iotdb)\n    - [Use IoTDB](#use-iotdb)\n      - [Use Cli](#use-cli)\n      - [Basic commands for IoTDB](#basic-commands-for-iotdb)\n    - [Stop IoTDB](#stop-iotdb)\n  - [Only build server](#only-build-server)\n  - [Only build cli](#only-build-cli)\n  - [Usage of CSV Import and Export Tool](#usage-of-csv-import-and-export-tool)\n\n<!-- /TOC -->\n\n# Quick Start\n\nThis short guide will walk you through the basic process of using IoTDB. For a more detailed introduction, please visit our website's [User Guide](https://iotdb.apache.org/UserGuide/latest/QuickStart/QuickStart.html).\n\n## Prerequisites\n\nTo use IoTDB, you need to have:\n\n1. Java >= 1.8 (1.8, 11 to 17 are verified. Please make sure the environment path has been set accordingly).\n2. Maven >= 3.6 (If you want to compile and install IoTDB from source code).\n3. Set the max open files num as 65535 to avoid the \"too many open files\" error.\n4. (Optional) Set the somaxconn as 65535 to avoid \"connection reset\" error when the system is under high load.\n    ```\n    # Linux\n    > sudo sysctl -w net.core.somaxconn=65535\n   \n    # FreeBSD or Darwin\n    > sudo sysctl -w kern.ipc.somaxconn=65535\n    ```\n### Linux\n\n(This guide is based on an installation of Ubuntu 22.04.)\n\n#### Git\n\nMake sure `Git` is installed, if it's missing, simply install it via:\n\n    sudo apt install git\n\n#### Java\n\nMake sure `Java` is installed, if it's missing, simply install it via:\n\n    sudo apt install default-jdk\n\n#### Flex\n\n    sudo apt install flex\n\n#### Bison\n\n    sudo apt install bison\n\n#### Boost\n\n    sudo apt install libboost-all-dev\n\n#### OpenSSL header files\n\nUsually OpenSSL is already installed, however it's missing the header files we need to compile.\nSo ensure these are installed:\n\n    sudo apt install libssl-dev\n\n### Mac OS\n\n#### Git\n\nFirst ensure `git` works.\n\nUsually on a new Mac, as soon as you simply type `git` in a `Terminal` window, a popup will come up and ask if you want to finish installing the Mac developer tools. \nJust say yes.\nAs soon as this is finished, you are free to use `git`.\n\n#### Homebrew\n\nThen install `Homebrew` - If this hasn't been installed yet, as we are going to be installing everything using `Homebrew`.\n\n    /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n#### Java\n\nAs soon as that's done install `Java`, if this hasn't been installed yet:\n\n    brew install java\n\nDepending on your version of Homebrew, it will tell you to do one of the following (depending on the type of processor in your device).\n\nMainly on the Intel-based models:\n\n    sudo ln -sfn /usr/local/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk\n\nMainly on the ARM-based models:\n\n    sudo ln -sfn /opt/homebrew/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk\n\n#### CPP Prerequisites \n\nBuilding `Thrift` requires us to add two more dependencies to the picture.\n\nThis however is only needed when enabling the `with-cpp` profile:\n\n    brew install boost\n    brew install bison\n    brew install openssl\n\n### Windows\n\n#### Chocolatey\n\nThen install `Chocolatey` - If this hasn't been installed yet, as we are going to be installing everything using `Chocolatey`.\n\nhttps://chocolatey.org/install\n\n#### Git\n\n    choco install git.install\n\n#### Java\n\n    choco install openjdk\n\n#### Visual Studio 19 2022\n\n    choco install visualstudio2022community\n    choco install visualstudio2022buildtools\n    choco install visualstudio2022-workload-nativedesktop\n\n#### Flex / Bison\n\n    choco install winflexbison\n\n#### Boost\n\n    choco install boost-msvc-14.2\n\n#### OpenSSL\n\n    choco install openssl\n\n## Installation\n\nIoTDB provides three installation methods, you can refer to the following suggestions, choose the one fits you best:\n\n* Installation from source code. If you need to modify the code yourself, you can use this method.\n* Installation from binary files. Download the binary files from the official website. This is the recommended method, in which you will get a binary released package which is out-of-the-box.\n* Using DockerÔºöThe path to the dockerfile is [here](https://github.com/apache/iotdb/tree/master/docker/src/main).\n\n\nHere in the Quick Start, we give a brief introduction of using source code to install IoTDB. For further information, please refer to [User Guide](https://iotdb.apache.org/UserGuide/latest/QuickStart/QuickStart.html).\n\n## Build from source\n\n### Prepare Thrift compiler\n\nSkip this chapter if you are using Windows. \n\nAs we use Thrift for our RPC module (communication and\nprotocol definition), we involve Thrift during the compilation, so Thrift compiler 0.13.0 (or\nhigher) is required to generate Thrift Java code. Thrift officially provides binary compiler for\nWindows, but unfortunately, they do not provide that for Unix OSs. \n\nIf you have permission to install new software, use `apt install` or `yum install` or `brew install`\nto install the Thrift compiler. (If you already have installed the thrift compiler, skip this step.)\nThen, you may add the following parameter\nwhen running Maven: `-Dthrift.download-url=http://apache.org/licenses/LICENSE-2.0.txt -Dthrift.exec.absolute.path=<YOUR LOCAL THRIFT BINARY FILE>`.\n\nIf not, then you have to compile the thrift compiler, and it requires you install a boost library first.\nTherefore, we compiled a Unix compiler ourselves and put it onto GitHub, and with the help of a\nmaven plugin, it will be downloaded automatically during compilation. \nThis compiler works fine with gcc8 or later, Ubuntu MacOS, and CentOS, but previous versions \nand other OSs are not guaranteed.\n\nIf you can not download the thrift compiler automatically because of a network problem, you can download \nit by yourself, and then either:\nrename your thrift file to `{project_root}\\thrift\\target\\tools\\thrift_0.12.0_0.13.0_linux.exe`;\nor, add Maven commands:\n`-Dthrift.download-url=http://apache.org/licenses/LICENSE-2.0.txt -Dthrift.exec.absolute.path=<YOUR LOCAL THRIFT BINARY FILE>`.\n\n### Compile IoTDB\n\nYou can download the source code from:\n\n```\ngit clone https://github.com/apache/iotdb.git\n```\n\nThe default dev branch is the master branch, if you want to use a released version x.x.x:\n\n```\ngit checkout vx.x.x\n```\n\nOr checkout to the branch of a big version, e.g., the branch of 1.0 is rel/1.0.\n\n```\ngit checkout rel/x.x\n```\n\n### Build IoTDB from source\n\nUnder the root path of iotdb:\n\n```\n> mvn clean package -pl distribution -am -DskipTests\n```\n\nAfter being built, the IoTDB distribution is located at the folder: \"distribution/target\".\n\n\n### Only build cli\n\nUnder the iotdb/iotdb-client path:\n\n```\n> mvn clean package -pl cli -am -DskipTests\n```\n\nAfter being built, the IoTDB cli is located at the folder \"cli/target\".\n\n### Build Others\n\nUse `-P with-cpp` for compiling the cpp client. (For more details, read client-cpp's Readme file.)\n\n**NOTE: Directories \"`thrift/target/generated-sources/thrift`\", \"`thrift-sync/target/generated-sources/thrift`\",\n\"`thrift-cluster/target/generated-sources/thrift`\", \"`thrift-influxdb/target/generated-sources/thrift`\" \nand \"`antlr/target/generated-sources/antlr4`\" need to be added to sources roots to avoid compilation errors in the IDE.**\n\n**In IDEA, you just need to right click on the root project name and choose \"`Maven->Reload Project`\" after \nyou run `mvn package` successfully.**\n\n### Configurations\n\nConfiguration files are under the \"conf\" folder.\n\n  * environment config module (`datanode-env.bat`, `datanode-env.sh`),\n  * system config module (`iotdb-system.properties`)\n  * log config module (`logback.xml`).\n\nFor more information, please see [Config Manual](https://iotdb.apache.org/UserGuide/latest/Reference/DataNode-Config-Manual.html).\n\n## Start\n\nYou can go through the following steps to test the installation. If there is no error returned after execution, the installation is completed.\n\n### Start IoTDB\n\nUsers can start 1C1D IoTDB by the start-standalone script under the sbin folder.\n\n```\n# Unix/OS X\n> sbin/start-standalone.sh\n\n# Windows\n> sbin\\start-standalone.bat\n```\n\n### Use IoTDB\n\n#### Use Cli\n\nIoTDB offers different ways to interact with server, here we introduce the basic steps of using Cli tool to insert and query data.\n\nAfter installing IoTDB, there is a default user 'root', its default password is 'root'. Users can use this\ndefault user to login Cli to use IoTDB. The start-up script of Cli is the start-cli script in the folder sbin. When executing the script, user should assign\nIP, PORT, USER_NAME and PASSWORD. The default parameters are \"-h 127.0.0.1 -p 6667 -u root -pw root\".\n\nHere is the command for starting the Cli:\n\n```\n# Unix/OS X\n> sbin/start-cli.sh -h 127.0.0.1 -p 6667 -u root -pw root\n\n# Windows\n> sbin\\start-cli.bat -h 127.0.0.1 -p 6667 -u root -pw root\n```\n\nThe command line cli is interactive, so you should see the welcome logo and statements if everything is ready:\n\n```\n _____       _________  ______   ______\n|_   _|     |  _   _  ||_   _ `.|_   _ \\\n  | |   .--.|_/ | | \\_|  | | `. \\ | |_) |\n  | | / .'`\\ \\  | |      | |  | | |  __'.\n _| |_| \\__. | _| |_    _| |_.' /_| |__) |\n|_____|'.__.' |_____|  |______.'|_______/  version x.x.x\n\n\nIoTDB> login successfully\nIoTDB>\n```\n\n#### Basic commands for IoTDB\n\nNow, let us introduce the way of creating timeseries, inserting data and querying data.\n\nThe data in IoTDB is organized as timeseries. Each timeseries includes multiple data‚Äìtime pairs, and is owned by a database. Before defining a timeseries, we should define a database using CREATE DATABASE first, and here is an example:\n\n```\nIoTDB> CREATE DATABASE root.ln\n```\n\nWe can also use SHOW DATABASES to check the database being created:\n\n```\nIoTDB> SHOW DATABASES\n+-------------+\n|     Database|\n+-------------+\n|      root.ln|\n+-------------+\nTotal line number = 1\n```\n\nAfter the database is set, we can use CREATE TIMESERIES to create a new timeseries. When creating a timeseries, we should define its data type and the encoding scheme. Here we create two timeseries:\n\n```\nIoTDB> CREATE TIMESERIES root.ln.wf01.wt01.status WITH DATATYPE=BOOLEAN, ENCODING=PLAIN\nIoTDB> CREATE TIMESERIES root.ln.wf01.wt01.temperature WITH DATATYPE=FLOAT, ENCODING=RLE\n```\n\nIn order to query the specific timeseries, we can use SHOW TIMESERIES <Path>. <Path> represent the location of the timeseries. The default value is \"null\", which queries all the timeseries in the system (the same as using \"SHOW TIMESERIES root\"). Here are some examples:\n\n1. Querying all timeseries in the system:\n\n```\nIoTDB> SHOW TIMESERIES\n+-----------------------------+-----+-------------+--------+--------+-----------+----+----------+\n|                   Timeseries|Alias|Database|DataType|Encoding|Compression|Tags|Attributes|\n+-----------------------------+-----+-------------+--------+--------+-----------+----+----------+\n|root.ln.wf01.wt01.temperature| null|      root.ln|   FLOAT|     RLE|     SNAPPY|null|      null|\n|     root.ln.wf01.wt01.status| null|      root.ln| BOOLEAN|   PLAIN|     SNAPPY|null|      null|\n+-----------------------------+-----+-------------+--------+--------+-----------+----+----------+\nTotal line number = 2\n```\n\n2. Querying a specific timeseries (root.ln.wf01.wt01.status):\n\n```\nIoTDB> SHOW TIMESERIES root.ln.wf01.wt01.status\n+------------------------+-----+-------------+--------+--------+-----------+----+----------+\n|              timeseries|alias|database|dataType|encoding|compression|tags|attributes|\n+------------------------+-----+-------------+--------+--------+-----------+----+----------+\n|root.ln.wf01.wt01.status| null|      root.ln| BOOLEAN|   PLAIN|     SNAPPY|null|      null|\n+------------------------+-----+-------------+--------+--------+-----------+----+----------+\nTotal line number = 1\n```\n\nInserting timeseries data is a basic operation of IoTDB, you can use the ‚ÄòINSERT‚Äô command to finish this. Before insertion, you should assign the timestamp and the suffix path name:\n\n```\nIoTDB> INSERT INTO root.ln.wf01.wt01(timestamp,status) values(100,true);\nIoTDB> INSERT INTO root.ln.wf01.wt01(timestamp,status,temperature) values(200,false,20.71)\n```\n\nThe data that you have just inserted will be displayed as follows:\n\n```\nIoTDB> SELECT status FROM root.ln.wf01.wt01\n+------------------------+------------------------+\n|                    Time|root.ln.wf01.wt01.status|\n+------------------------+------------------------+\n|1970-01-01T00:00:00.100Z|                    true|\n|1970-01-01T00:00:00.200Z|                   false|\n+------------------------+------------------------+\nTotal line number = 2\n```\n\nYou can also query several timeseries data using one SQL statement:\n\n```\nIoTDB> SELECT * FROM root.ln.wf01.wt01\n+------------------------+-----------------------------+------------------------+\n|                    Time|root.ln.wf01.wt01.temperature|root.ln.wf01.wt01.status|\n+------------------------+-----------------------------+------------------------+\n|1970-01-01T00:00:00.100Z|                         null|                    true|\n|1970-01-01T00:00:00.200Z|                        20.71|                   false|\n+------------------------+-----------------------------+------------------------+\nTotal line number = 2\n```\n\nTo change the time zone in Cli, you can use the following SQL:\n\n```\nIoTDB> SET time_zone=+08:00\nTime zone has set to +08:00\nIoTDB> SHOW time_zone\nCurrent time zone: Asia/Shanghai\n```\n\nAdd then the query result will show using the new time zone.\n\n```\nIoTDB> SELECT * FROM root.ln.wf01.wt01\n+-----------------------------+-----------------------------+------------------------+\n|                         Time|root.ln.wf01.wt01.temperature|root.ln.wf01.wt01.status|\n+-----------------------------+-----------------------------+------------------------+\n|1970-01-01T08:00:00.100+08:00|                         null|                    true|\n|1970-01-01T08:00:00.200+08:00|                        20.71|                   false|\n+-----------------------------+-----------------------------+------------------------+\nTotal line number = 2\n```\n\nThe commands to exit the Cli are:\n\n```\nIoTDB> quit\nor\nIoTDB> exit\n```\n\nFor more information about the commands supported by IoTDB SQL, please see [User Guide](https://iotdb.apache.org/UserGuide/latest/QuickStart/QuickStart.html).\n\n### Stop IoTDB\n\nThe server can be stopped with \"ctrl-C\" or the following script:\n\n```\n# Unix/OS X\n> sbin/stop-standalone.sh\n\n# Windows\n> sbin\\stop-standalone.bat\n```\n\n# The use of Data Import and Export Tool\n\nsee [The use of Data Import Tool](https://iotdb.apache.org/UserGuide/latest/Tools-System/Data-Import-Tool.html)\nsee [The use of Data Export Tool](https://iotdb.apache.org/UserGuide/latest/Tools-System/Data-Export-Tool.html)\n\n\n# Frequent Questions for Compiling\nsee [Frequent Questions when Compiling the Source Code](https://iotdb.apache.org/Community/Development-Guide.html#frequently-asked-questions)\n\n# Contact Us\n\n### QQ Group\n\n* Apache IoTDB User Group: 659990460\n\n### Wechat Group\n\n* Add friend: `apache_iotdb`, and then we'll invite you to the group.\n\n### Slack\n\n* [Slack channel](https://join.slack.com/t/apacheiotdb/shared_invite/zt-qvso1nj8-7715TpySZtZqmyG5qXQwpg)\n\nsee [Join the community](https://github.com/apache/iotdb/issues/1995) for more!",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iotdb",
        "iot",
        "hadoop",
        "apache iotdb",
        "iotdb manage",
        "industrial iot"
      ],
      "category": "iot-and-device-control"
    },
    "atom2ueki--mcp-server-ios-simulator": {
      "owner": "atom2ueki",
      "name": "mcp-server-ios-simulator",
      "url": "https://github.com/atom2ueki/mcp-server-ios-simulator",
      "imageUrl": "/freedevtools/mcp/pfp/atom2ueki.webp",
      "description": "Programmatically control and manage iOS simulators, enabling functions such as starting, stopping, booting, and interacting with simulator instances. It supports app installation, launching, and screenshot capture through a standardized communication protocol.",
      "stars": 32,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-13T08:51:58Z",
      "readme_content": "# üì± MCP Server for iOS Simulator\n[![smithery badge](https://smithery.ai/badge/@atom2ueki/mcp-server-ios-simulator)](https://smithery.ai/server/@atom2ueki/mcp-server-ios-simulator)\n\nA server that implements the Model Context Protocol (MCP) for iOS simulators, built on top of [appium-ios-simulator](https://github.com/appium/appium-ios-simulator) and utilizing the [MCP TypeScript SDK](https://github.com/modelcontextprotocol/typescript-sdk).\n\n<a href=\"https://glama.ai/mcp/servers/@atom2ueki/mcp-server-ios-simulator\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@atom2ueki/mcp-server-ios-simulator/badge\" alt=\"Server for iOS Simulator MCP server\" />\n</a>\n\n## üìã Overview\n\nThis project provides a bridge between iOS simulators and the Model Context Protocol, allowing for standardized communication with iOS simulator instances. It enables programmatic control of iOS simulators while leveraging the MCP protocol for consistent interfaces across different environments. The server utilizes stdio as its transport mechanism, making it ideal for integration with Claude Desktop and other MCP-compatible clients.\n\n## üé¨ Demo\n\n\n\n*Demo showing how to boot an iOS simulator using Claude AI Desktop*\n\n## üèóÔ∏è Architecture\n\nThe server consists of three main components:\n\n1. **üîÑ Simulator Management Layer** - Handles iOS simulator lifecycle and interactions\n2. **üîå MCP Protocol Implementation** - Implements the Model Context Protocol using the TypeScript SDK with stdio transport\n3. **üìä Logger Component** - Provides file-based logging without interfering with the stdio transport\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  MCP Protocol   ‚îÇ     ‚îÇ     Stdio       ‚îÇ     ‚îÇ    Simulator    ‚îÇ\n‚îÇ  Implementation ‚îÇ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚î§    Transport    ‚îÇ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚î§   Management    ‚îÇ\n‚îÇ                 ‚îÇ     ‚îÇ                 ‚îÇ     ‚îÇ      Layer      ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n        ‚ñ≤                                                ‚ñ≤\n        ‚îÇ                                                ‚îÇ\n        ‚ñº                                                ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                             ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ   MCP Client    ‚îÇ                             ‚îÇ  iOS Simulator  ‚îÇ\n‚îÇ  (e.g. Claude)  ‚îÇ                             ‚îÇ                 ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                             ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n## ‚ú® Features\n\n- üöÄ Start, stop, and manage iOS simulator instances\n- üîå Boot and shutdown simulators\n- üì≤ Install and launch applications on simulators\n- üì∏ Take screenshots of simulator screens\n- üëÜ Perform taps on coordinates\n- üîÑ Support for multiple concurrent simulator sessions\n- üìù Comprehensive file-based logging without console output\n- üõ°Ô∏è Error-resilient operation\n\n## üìã Prerequisites\n\n- üü¢ Node.js (v16 or later)\n- üçé macOS (required for iOS simulators)\n- üõ†Ô∏è Xcode with iOS simulators installed\n- üìú TypeScript 4.5+\n\n## üîß Installation\n\n### Installing via Smithery\n\nTo install iOS Simulator Control Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@atom2ueki/mcp-server-ios-simulator):\n\n```bash\nnpx -y @smithery/cli install @atom2ueki/mcp-server-ios-simulator --client claude\n```\n\n### Manual Installation\n```bash\n# Clone the repository\ngit clone https://github.com/atom2ueki/mcp-server-ios-simulator.git\ncd mcp-server-ios-simulator\n\n# Install dependencies\nnpm install\n```\n\n## ‚öôÔ∏è Configuration\n\nConfiguration is handled through the `src/config.ts` file:\n\n```typescript\nconst config = {\n  simulator: {\n    defaultDevice: process.env.SIMULATOR_DEFAULT_DEVICE || 'iPhone 16',\n    defaultOS: process.env.SIMULATOR_DEFAULT_OS || '18.2',\n    timeout: parseInt(process.env.SIMULATOR_TIMEOUT || '30000', 10),\n  }\n};\n```\n\nYou can customize these settings by setting environment variables:\n\n```\nSIMULATOR_DEFAULT_DEVICE=iPhone 16\nSIMULATOR_DEFAULT_OS=18.2\nSIMULATOR_TIMEOUT=30000\n```\n\n## üöÄ Usage\n\n### üî® Building and Starting the Server\n\n```bash\n# Build the project\nnpm run build\n\n# Start the server\nnpm start\n```\n\n### üß∞ MCP Tools\n\nThe server provides two distinct approaches for controlling iOS simulators:\n\n#### üì± Direct Simulator Management (Recommended)\nThese tools work directly with simulator UDIDs and don't require maintaining sessions:\n\n- üìã `list-available-simulators` - List all available simulators with their UDIDs\n- ‚ñ∂Ô∏è `boot-simulator-by-udid` - Boot a simulator directly using its UDID\n- ‚èπÔ∏è `shutdown-simulator-by-udid` - Shutdown a simulator directly using its UDID\n- üìä `list-booted-simulators` - List all currently booted simulators\n\n**Use this approach when:** You just want to boot, use, and shut down simulators directly.\n\n#### üì± Session-Based Management (Advanced)\nThese tools use a session layer that tracks simulators with custom session IDs:\n\n- üìã `list-simulator-sessions` - List all active simulator sessions\n- ‚ûï `create-simulator-session` - Create a new simulator session\n- ‚ùå `terminate-simulator-session` - Terminate a session (shuts down simulator and cleans up)\n- üîÑ `create-and-boot-simulator` - Create a new simulator session and boot it\n- ‚ñ∂Ô∏è `boot-simulator` - Boot a simulator for an existing session\n- ‚èπÔ∏è `shutdown-simulator` - Shutdown a simulator for an existing session\n\n**Use this approach when:** You need to track simulator metadata, reference simulators by custom IDs, or use the more advanced management features.\n\n#### üì≤ Application Management\n- üì• `install-app` - Install an application on a simulator\n- üöÄ `launch-app` - Launch an application on a simulator\n- üõë `terminate-app` - Terminate a running application on a simulator\n\n#### üñ±Ô∏è Interaction Tools\n- üì∑ `take-screenshot` - Take a screenshot of the simulator screen\n- üëÜ `tap-coordinate` - Perform a tap at the specified coordinates\n\n### ü§ñ Example Usage with Claude Desktop\n\n1. Configure Claude Desktop to use this server as an MCP tool:\n   - Open Claude Desktop\n   - Go to Settings > Advanced\n   - Add the following configuration to the \"MCP Servers\" section:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"simulator\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"/path/to/your/mcp-server-ios-simulator/dist/index.js\"\n         ]\n       }\n     }\n   }\n   ```\n\n   - Replace `/path/to/your` with the actual path to where you've installed this repository\n   - Save the settings and restart Claude Desktop\n\n2. Use the provided tools to control iOS simulators directly from Claude Desktop:\n   \n   **Direct UDID Approach (Recommended):**\n   1. First, ask Claude to list available simulators:\n      ```\n      \"Show me all available iOS simulators\"\n      ```\n   \n   2. Then use the UDID to boot a specific simulator:\n      ```\n      \"Boot the iOS simulator with UDID 5272EA61-5796-4372-86FE-3B33831D5CC1\"\n      ```\n   \n   3. When finished, shut it down using the same UDID:\n      ```\n      \"Shut down the simulator with UDID 5272EA61-5796-4372-86FE-3B33831D5CC1\"\n      ```\n   \n   The direct UDID approach is simpler and more reliable for most use cases.\n   \n   **Session-Based Approach (Advanced):**\n   Only use this approach if you need the advanced features of session tracking:\n   ```\n   \"Create a new simulator session for iPhone 16 Pro with iOS 18.2\"\n   \"Boot the simulator for session abc-123\"\n   \"Take a screenshot of the simulator for session abc-123\"\n   \"Terminate the simulator session abc-123\"\n   ```\n\n## üë®‚Äçüíª Development\n\n### üìÅ Project Structure\n\n```\nsrc/\n‚îú‚îÄ‚îÄ simulator/       # Simulator management layer\n‚îú‚îÄ‚îÄ mcp/             # MCP protocol implementation\n‚îú‚îÄ‚îÄ bridge/          # Bridge component\n‚îú‚îÄ‚îÄ utils/           # Utility functions including logger\n‚îú‚îÄ‚îÄ config.ts        # Configuration handling\n‚îî‚îÄ‚îÄ index.ts         # Entry point\n```\n\n### üî® Building the Project\n\n```bash\n# Install development dependencies\nnpm install\n\n# Run TypeScript compiler\nnpm run build\n```\n\n## üìú License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## üôè Acknowledgments\n\n- üì± [appium-ios-simulator](https://github.com/appium/appium-ios-simulator) for providing the iOS simulator interaction capabilities\n- üîå [Model Context Protocol](https://github.com/modelcontextprotocol/typescript-sdk) for the protocol specification and TypeScript SDK",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "simulator",
        "simulators",
        "ios",
        "ios simulators",
        "ios simulator",
        "simulators enabling"
      ],
      "category": "iot-and-device-control"
    },
    "cfrs2005--mcp-gs-robot": {
      "owner": "cfrs2005",
      "name": "mcp-gs-robot",
      "url": "https://github.com/cfrs2005/mcp-gs-robot",
      "imageUrl": "/freedevtools/mcp/pfp/cfrs2005.webp",
      "description": "Interact with Gausium robots through a standardized interface to access robot status, task reports, and maps. The server facilitates communication between AI models and Gausium's automation capabilities.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-02T09:43:25Z",
      "readme_content": "# ü§ñ Gausium OpenAPI MCP Server\n\n<div align=\"center\">\n\n[![Python Version](https://img.shields.io/badge/python-3.12+-blue.svg)](https://www.python.org/downloads/)\n[![PyPI Version](https://img.shields.io/pypi/v/mcp-gs-robot.svg)](https://pypi.org/project/mcp-gs-robot/)\n[![License](https://img.shields.io/badge/license-MIT-green.svg)](LICENSE)\n[![MCP Compatible](https://img.shields.io/badge/MCP-Compatible-purple.svg)](https://github.com/modelcontextprotocol)\n[![Claude Code](https://img.shields.io/badge/Claude_Code-Ready-orange.svg)](https://claude.ai/code)\n\n**üîß A powerful MCP server bridging AI models with Gausium robots**\n\n*Control and monitor Gausium cleaning robots through Claude, Cursor, and other AI assistants*\n\n[üöÄ Quick Start](https://github.com/cfrs2005/mcp-gs-robot#-quick-start) ‚Ä¢ [üìñ Documentation](https://github.com/cfrs2005/mcp-gs-robot#-documentation) ‚Ä¢ [üõ†Ô∏è Installation](https://github.com/cfrs2005/mcp-gs-robot#-installation-1) ‚Ä¢ [üéØ Examples](https://github.com/cfrs2005/mcp-gs-robot#-examples) ‚Ä¢ [üá®üá≥ ‰∏≠ÊñáÊñáÊ°£](https://github.com/cfrs2005/mcp-gs-robot/blob/main/README_CN.md)\n\n</div>\n\n---\n\n## üåü What is this?\n\nThis MCP (Model Control Protocol) server enables seamless interaction between AI models and Gausium cleaning robots through a standardized interface. Perfect for building intelligent automation workflows with Claude Code, Cursor, and other MCP-compatible AI tools.\n\n**üîó Repository:** [https://github.com/cfrs2005/mcp-gs-robot](https://github.com/cfrs2005/mcp-gs-robot)\n\n### üéØ Key Benefits\n\n- ü§ñ **AI-First Design**: Built specifically for AI assistant integration\n- üîÑ **Real-time Control**: Monitor and command robots instantly\n- üìä **Rich Data Access**: Get detailed status, maps, and task reports\n- üõ°Ô∏è **Secure**: OAuth-based authentication with environment variables\n- üåê **Universal**: Works with Claude, Cursor, and any MCP client\n\n## üèóÔ∏è Architecture\n\nThe server follows a layered architecture that separates concerns and promotes maintainability:\n\n![Architecture Diagram](https://github.com/cfrs2005/mcp-gs-robot/raw/main/docs/images/architecture.svg)\n\n### üîÑ MCP Protocol Flow\n\nThe diagram below shows how AI models interact with Gausium robots through the MCP protocol:\n\n![MCP Protocol Flow](https://github.com/cfrs2005/mcp-gs-robot/raw/main/docs/images/mcp-flow.svg)\n\n## ‚ú® Features\n\n### üõ†Ô∏è Core MCP Tools\n\n| Tool | Description | Status |\n|------|-------------|--------|\n| ü§ñ `list_robots` | List all accessible robots | ‚úÖ Ready |\n| üìä `get_robot_status` | Get detailed robot status and position | ‚úÖ Ready |\n| üìã `list_robot_task_reports` | Retrieve cleaning task reports with filtering | ‚úÖ Ready |\n| üó∫Ô∏è `list_robot_maps` | Get available maps for robot navigation | ‚úÖ Ready |\n| üéØ `create_robot_command` | Send commands to robots (start/pause/stop) | ‚úÖ Ready |\n| üè¢ `get_site_info` | Get building and floor information | ‚úÖ Ready |\n| üìç `get_map_subareas` | Get detailed area information for tasks | ‚úÖ Ready |\n| üöÄ `submit_temp_task` | Submit temporary cleaning tasks | ‚úÖ Ready |\n\n### üß† Smart Routing Tools (Enhanced in v0.1.12)\n\n| Tool | Description | Status |\n|------|-------------|--------|\n| üéØ `get_robot_status_smart` | Auto-select V1/V2 API based on robot series | ‚úÖ Ready |\n| üìä `get_task_reports_smart` | Intelligent task report API routing | ‚úÖ Ready |\n| üîç `get_robot_capabilities` | Show supported APIs for specific robot | ‚úÖ Ready |\n\n### üîß Advanced Workflows\n\n- üéõÔ∏è **Automated Task Execution**: Complete workflows from status ‚Üí task selection ‚Üí execution\n- üìà **Batch Operations**: Handle multiple robots simultaneously\n- üó∫Ô∏è **Map Management**: Upload, download, and manage robot maps\n- üìä **Report Generation**: Generate PNG maps from task reports\n- üèóÔ∏è **Site-based Tasks**: Advanced task creation with building/floor context\n\n### ü§ù Supported Robot Lines\n\n#### M-line Robots (Traditional Cleaning Robots)\n- **OMNIE** (OMNIE series) - Multi-purpose cleaning robot\n- **Vacuum 40** (40 series) - Vacuum cleaning robot\n- **Scrubber 50** (50 series) - Floor scrubbing robot\n- **Scrubber 75** (75 series) - Heavy-duty floor scrubbing robot\n\n#### S-line Robots (Advanced Smart Robots, including SW series)\n- **Phantas** (S series) - Phantom intelligent cleaning robot\n- **BEETLE** (SW series) - Beetle smart cleaning robot\n\n## üìÅ Project Structure\n\nThe project follows a structured layout optimized for MCP development:\n\n```\nüóÇÔ∏è mcp-gs-robot/\n‚îú‚îÄ‚îÄ üì¶ src/gs_openapi/           # Main package\n‚îÇ   ‚îú‚îÄ‚îÄ üîå api/                  # Direct API integrations\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ü§ñ robots.py         # Robot management APIs\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üó∫Ô∏è maps.py           # Map management APIs\n‚îÇ   ‚îú‚îÄ‚îÄ üîê auth/                 # Authentication layer\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üé´ token_manager.py  # OAuth token lifecycle\n‚îÇ   ‚îú‚îÄ‚îÄ ‚öôÔ∏è config.py             # Configuration management\n‚îÇ   ‚îú‚îÄ‚îÄ üîß core/                 # Core functionality\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üì° client.py         # HTTP client wrapper\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üõ£Ô∏è endpoints.py      # API endpoint definitions\n‚îÇ   ‚îú‚îÄ‚îÄ üîå mcp/                  # MCP server implementation\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üåâ gausium_mcp.py    # Main MCP bridge\n‚îÇ   ‚îî‚îÄ‚îÄ üîÑ workflows/            # Automated workflows\n‚îÇ       ‚îî‚îÄ‚îÄ üéØ task_engine.py    # Task automation engine\n‚îú‚îÄ‚îÄ üìö docs/                     # Documentation\n‚îÇ   ‚îú‚îÄ‚îÄ üñºÔ∏è images/               # Visual documentation\n‚îÇ   ‚îú‚îÄ‚îÄ üìñ apis.md              # API documentation\n‚îÇ   ‚îî‚îÄ‚îÄ üß™ TESTING_GUIDE.md     # Testing instructions\n‚îú‚îÄ‚îÄ üöÄ main.py                  # Application entry point\n‚îî‚îÄ‚îÄ üìã pyproject.toml           # Package configuration\n```\n\n### üîç Key Components\n\n| Component | Purpose | Icon |\n|-----------|---------|------|\n| **config.py** | Base URLs, API paths, environment variables | ‚öôÔ∏è |\n| **token_manager.py** | OAuth token acquisition and refresh | üîê |\n| **api/robots.py** | Robot status, commands, task reports | ü§ñ |\n| **api/maps.py** | Map listing, upload, download | üó∫Ô∏è |\n| **gausium_mcp.py** | MCP server integration layer | üåâ |\n| **task_engine.py** | Automated workflow orchestration | üéØ |\n| **main.py** | Server initialization and tool registration | üöÄ |\n\n## üöÄ Quick Start\n\n### üì¶ Installation\n\n#### Option 1: Install from PyPI (Recommended)\n\n```bash\npip install mcp-gs-robot\n```\n\n#### Option 2: Install from Source\n\n```bash\n# Clone repository\ngit clone https://github.com/cfrs2005/mcp-gs-robot.git\ncd mcp-gs-robot\n\n# Setup with uv (recommended)\nuv venv\nsource .venv/bin/activate  # Windows: .venv\\Scripts\\activate\nuv pip install -e .\n```\n\n### üîß Configuration\n\n**Set up your Gausium API credentials:**\n\n```bash\n# Required environment variables\nexport GS_CLIENT_ID=\"your_client_id\"\nexport GS_CLIENT_SECRET=\"your_client_secret\" \nexport GS_OPEN_ACCESS_KEY=\"your_access_key\"\n```\n\n> üîë **Get credentials from [Gausium Developer Portal](https://developer.gs-robot.com/)**\n\n### üèÉ‚Äç‚ôÇÔ∏è Running the Server\n\n```bash\n# Start MCP server (stdio mode)\npython -m gs_openapi.main\n# or if installed via pip:\nmcp-gs-robot\n```\n\n‚úÖ Server starts using `stdio` transport (perfect for Claude Code)\n\n### üîå Claude Code Integration\n\n**Method 1: Automatic installation with environment setup**\n\n```bash\n# Add MCP server with environment variables\nclaude mcp add mcp-gs-robot \\\n  --env GS_CLIENT_ID=\"your_client_id\" \\\n  --env GS_CLIENT_SECRET=\"your_client_secret\" \\\n  --env GS_OPEN_ACCESS_KEY=\"your_access_key\"\n```\n\n**Method 2: Manual configuration**\n\nAdd to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-gs-robot\": {\n      \"command\": \"mcp-gs-robot\",\n      \"env\": {\n        \"GS_CLIENT_ID\": \"your_client_id\",\n        \"GS_CLIENT_SECRET\": \"your_client_secret\", \n        \"GS_OPEN_ACCESS_KEY\": \"your_access_key\"\n      }\n    }\n  }\n}\n```\n\n**Method 3: Using environment file**\n\nIf you prefer to use a `.env` file:\n\n```bash\n# Set global environment variables\nexport GS_CLIENT_ID=\"your_client_id\"\nexport GS_CLIENT_SECRET=\"your_client_secret\"\nexport GS_OPEN_ACCESS_KEY=\"your_access_key\"\n\n# Simple MCP installation\nclaude mcp add mcp-gs-robot\n```\n\n> üí° **Note**: This MCP server uses `stdio` transport (not SSE), which is perfect for Claude Code integration\n\n## üéØ Examples\n\n### üì± Claude Code Usage\n\n```python\n# In Claude Code, you can now use natural language:\n\n\"List all my robots\"\n# ‚Üí Calls mcp__mcp-gs-robot__list_robots\n\n\"Get status of robot GS101-0100-V1P-B001\" \n# ‚Üí Calls mcp__mcp-gs-robot__get_robot_status\n\n\"Start cleaning task for robot in building 5\"\n# ‚Üí Orchestrates site info ‚Üí map selection ‚Üí task creation\n```\n\n### üñ•Ô∏è IDE Integration\n\n**Cursor Configuration:**\n\n![Cursor Usage Screenshot](https://github.com/cfrs2005/mcp-gs-robot/raw/main/docs/images/cursor_usage_screenshot.png)\n\n**Cherry Studio Configuration:**\n\n![Cherry Studio Configuration](https://github.com/cfrs2005/mcp-gs-robot/raw/main/docs/images/cherrystudio.png)\n\n### üêõ Debugging\n\nMonitor server logs for troubleshooting:\n\n![MCP Debug Screenshot](https://github.com/cfrs2005/mcp-gs-robot/raw/main/docs/images/mcp_debug_screenshot.png)\n\n## üìñ Documentation\n\n| Document | Purpose |\n|----------|----------|\n| üéØ [Claude Code Integration](docs/CLAUDE_CODE_INTEGRATION.md) | Complete Claude Code setup guide |\n| üìã [API Reference](docs/apis.md) | Complete API documentation |\n| üß™ [Testing Guide](docs/TESTING_GUIDE.md) | How to test the MCP server |\n| üîß [Configuration](docs/README.md) | Detailed setup instructions |\n\n## ü§ù Contributing\n\nWe welcome contributions! Please:\n\n1. üç¥ Fork the repository\n2. üåø Create a feature branch\n3. ‚úÖ Add tests for your changes\n4. üìù Update documentation\n5. üîÑ Submit a pull request\n\n## üìÑ License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n\n## üÜò Support\n\n- üìù [Issues](https://github.com/cfrs2005/mcp-gs-robot/issues)\n- üìß [Email](mailto:cfrs2005@gmail.com)\n- üìö [Gausium Developer Docs](https://developer.gs-robot.com/)\n\n---\n\n<div align=\"center\">\n\n**Made with ‚ù§Ô∏è for the Claude Code community**\n\n*Enabling AI-powered robot automation, one task at a time* ü§ñ‚ú®\n\n</div>\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "robot",
        "robots",
        "gausium",
        "gausium robots",
        "gausium automation",
        "gs robot"
      ],
      "category": "iot-and-device-control"
    },
    "claude-did-this--MCPControl": {
      "owner": "claude-did-this",
      "name": "MCPControl",
      "url": "https://github.com/claude-did-this/MCPControl",
      "imageUrl": "/freedevtools/mcp/pfp/claude-did-this.webp",
      "description": "A Windows control server utilizing nut.js and MCP, enabling functionalities like mouse and keyboard control, window management, and screen capture operations.",
      "stars": 238,
      "forks": 33,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T22:31:58Z",
      "readme_content": "# MCPControl\n\n<p align=\"center\">\n  <img src=\"https://github.com/user-attachments/assets/1c577e56-7b8d-49e9-aaf5-b8550cc6cfc0\" alt=\"MCPControl Logo\" width=\"250\">\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/Cheffromspace/MCPControl/releases/tag/v0.2.0\">\n    <img src=\"https://img.shields.io/badge/release-v0.2.0-blue.svg\" alt=\"Latest Release\">\n  </a>\n</p>\n\nWindows control server for the [Model Context Protocol](https://modelcontextprotocol.io/), providing programmatic control over system operations including mouse, keyboard, window management, and screen capture functionality.\n\n> **Note**: This project currently supports Windows only.\n\n## üî• Why MCPControl?\n\nMCPControl bridges the gap between AI models and your desktop, enabling secure, programmatic control of:\n\n- üñ±Ô∏è **Mouse movements and clicks**\n- ‚å®Ô∏è **Keyboard input and shortcuts**\n- ü™ü **Window management**\n- üì∏ **Screen capture and analysis**\n- üìã **Clipboard operations**\n\n## üîå Quick Start\n\n### Prerequisites\n\n1. **Install Build Tools (including VC++ workload)**\n   ```powershell\n   # Run as Administrator - may take a few minutes to complete\n   winget install Microsoft.VisualStudio.2022.BuildTools --override \"--wait --passive --add Microsoft.VisualStudio.Workload.VCTools --includeRecommended\"\n   ```\n\n2. **Install Python** (if not already installed)\n   ```powershell\n   # Install Python (required for node-gyp)\n   winget install Python.Python.3.12\n   ```\n\n3. **Install Node.js**\n   ```powershell\n   # Install latest LTS version\n   winget install OpenJS.NodeJS\n   ```\n\n### Installation\n\n1. **Install MCPControl Package**\n   ```powershell\n   npm install -g mcp-control\n   ```\n\n### Configuration\n\nMCPControl works best in a **virtual machine at 1280x720 resolution** for optimal click accuracy.\n\nConfigure your Claude client to connect to MCPControl via SSE transport:\n\n#### Option 1: Direct SSE Connection\n\nFor connecting to an MCPControl server running on a VM or remote machine:\n\n```json\n{\n  \"mcpServers\": {\n    \"MCPControl\": {\n      \"transport\": \"sse\",\n      \"url\": \"http://192.168.1.100:3232/mcp\"\n    }\n  }\n}\n```\n\nReplace `192.168.1.100:3232` with your server's IP address and port.\n\n#### Option 2: Local Launch with SSE\n\nTo launch MCPControl locally with SSE transport:\n\n```json\n{\n  \"mcpServers\": {\n    \"MCPControl\": {\n      \"command\": \"mcp-control\",\n      \"args\": [\"--sse\"]\n    }\n  }\n}\n```\n\n### Starting the Server\n\nFirst, start the MCPControl server on your VM or local machine:\n\n```bash\nmcp-control --sse\n```\n\nThe server will display:\n- Available network interfaces and their IP addresses\n- The port number (default: 3232)\n- Connection status messages\n\n### VM Setup Example\n\n1. **Start your Windows VM** with 1280x720 resolution\n2. **Install MCPControl** on the VM:\n   ```bash\n   npm install -g mcp-control\n   ```\n3. **Run the server** with SSE transport:\n   ```bash\n   mcp-control --sse\n   ```\n4. **Note the VM's IP address** (e.g., `192.168.1.100`)\n5. **Configure Claude** with the SSE URL:\n   ```json\n   {\n     \"mcpServers\": {\n       \"MCPControl\": {\n         \"transport\": \"sse\",\n         \"url\": \"http://192.168.1.100:3232/mcp\"\n       }\n     }\n   }\n   ```\n6. **Restart Claude** and MCPControl will appear in your MCP menu!\n\n## üîß CLI Options\n\nMCPControl supports several command-line flags for advanced configurations:\n\n```bash\n# Run with SSE transport on default port (3232)\nmcp-control --sse\n\n# Run with SSE on custom port\nmcp-control --sse --port 3000\n\n# Run with HTTPS/TLS (required for production deployments)\nmcp-control --sse --https --cert /path/to/cert.pem --key /path/to/key.pem\n\n# Run with HTTPS on custom port\nmcp-control --sse --https --port 8443 --cert /path/to/cert.pem --key /path/to/key.pem\n```\n\n### Command Line Arguments\n\n- `--sse` - Enable SSE (Server-Sent Events) transport for network access\n- `--port [number]` - Specify custom port (default: 3232)\n- `--https` - Enable HTTPS/TLS (required for remote deployments per MCP spec)\n- `--cert [path]` - Path to TLS certificate file (required with --https)\n- `--key [path]` - Path to TLS private key file (required with --https)\n\n### Security Note\n\nAccording to the MCP specification, HTTPS is **mandatory** for all HTTP-based transports in production environments. When deploying MCPControl for remote access, always use the `--https` flag with valid TLS certificates.\n\n## üöÄ Popular Use Cases\n\n### Assisted Automation\n\n- **Application Testing**: Delegate repetitive UI testing to Claude, allowing AI to navigate through applications and report issues\n- **Workflow Automation**: Have Claude operate applications on your behalf, handling repetitive tasks while you focus on creative work\n- **Form Filling**: Let Claude handle data entry tasks with your supervision\n\n### AI Experimentation\n\n- **AI Gaming**: Watch Claude learn to play simple games through visual feedback\n- **Visual Reasoning**: Test Claude's ability to navigate visual interfaces and solve visual puzzles\n- **Human-AI Collaboration**: Explore new interaction paradigms where Claude can see your screen and help with complex tasks\n\n### Development and Testing\n\n- **Cross-Application Integration**: Bridge applications that don't normally communicate\n- **UI Testing Framework**: Create robust testing scenarios with visual validation\n- **Demo Creation**: Automate the creation of product demonstrations\n\n## ‚ö†Ô∏è IMPORTANT DISCLAIMER\n\n**THIS SOFTWARE IS EXPERIMENTAL AND POTENTIALLY DANGEROUS**\n\nBy using this software, you acknowledge and accept that:\n\n- Giving AI models direct control over your computer through this tool is inherently risky\n- This software can control your mouse, keyboard, and other system functions which could potentially cause unintended consequences\n- You are using this software entirely at your own risk\n- The creators and contributors of this project accept NO responsibility for any damage, data loss, or other consequences that may arise from using this software\n- This tool should only be used in controlled environments with appropriate safety measures in place\n\n**USE AT YOUR OWN RISK**\n\n## üåü Features\n\n<table>\n  <tr>\n    <td>\n      <h3>ü™ü Window Management</h3>\n      <ul>\n        <li>List all windows</li>\n        <li>Get active window info</li>\n        <li>Focus, resize & reposition</li>\n      </ul>\n    </td>\n    <td>\n      <h3>üñ±Ô∏è Mouse Control</h3>\n      <ul>\n        <li>Precision movement</li>\n        <li>Click & drag operations</li>\n        <li>Scrolling & position tracking</li>\n      </ul>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <h3>‚å®Ô∏è Keyboard Control</h3>\n      <ul>\n        <li>Text input & key combos</li>\n        <li>Key press/release control</li>\n        <li>Hold key functionality</li>\n      </ul>\n    </td>\n    <td>\n      <h3>üì∏ Screen Operations</h3>\n      <ul>\n        <li>High-quality screenshots</li>\n        <li>Screen size detection</li>\n        <li>Active window capture</li>\n      </ul>\n    </td>\n  </tr>\n</table>\n\n## üîß Automation Providers\n\nMCPControl supports multiple automation providers for different use cases:\n\n- **keysender** (default) - Native Windows automation with high reliability\n- **powershell** - Windows PowerShell-based automation for simpler operations\n- **autohotkey** - AutoHotkey v2 scripting for advanced automation needs\n\n### Provider Configuration\n\nYou can configure the automation provider using environment variables:\n\n```bash\n# Use a specific provider for all operations\nexport AUTOMATION_PROVIDER=autohotkey\n\n# Configure AutoHotkey executable path (if not in PATH)\nexport AUTOHOTKEY_PATH=\"C:\\Program Files\\AutoHotkey\\v2\\AutoHotkey.exe\"\n```\n\nOr use modular configuration for specific operations:\n\n```bash\n# Mix and match providers for different operations\nexport AUTOMATION_KEYBOARD_PROVIDER=autohotkey\nexport AUTOMATION_MOUSE_PROVIDER=keysender\nexport AUTOMATION_SCREEN_PROVIDER=keysender  \nexport AUTOMATION_CLIPBOARD_PROVIDER=powershell\n```\n\nSee provider-specific documentation:\n- [AutoHotkey Provider](src/providers/autohotkey/README.md)\n\n## üõ†Ô∏è Development Setup\n\nIf you're interested in contributing or building from source, please see [CONTRIBUTING.md](CONTRIBUTING.md) for detailed instructions.\n\n### Development Requirements\n\nTo build this project for development, you'll need:\n\n1. Windows operating system (required for the keysender dependency)\n2. Node.js 18 or later (install using the official Windows installer which includes build tools)\n3. npm package manager\n4. Native build tools:\n   - node-gyp: `npm install -g node-gyp`\n   - cmake-js: `npm install -g cmake-js`\n\nThe keysender dependency relies on Windows-specific native modules that require these build tools.\n\n## üìã Project Structure\n\n- `/src`\n  - `/handlers` - Request handlers and tool management\n  - `/tools` - Core functionality implementations\n  - `/types` - TypeScript type definitions\n  - `index.ts` - Main application entry point\n\n## üîñ Repository Branches\n\n- **`main`** - Main development branch with the latest features and changes\n- **`release`** - Stable release branch that mirrors the latest stable tag (currently v0.2.0)\n\n### Version Installation\n\nYou can install specific versions of MCPControl using npm:\n\n```bash\n# Install the latest stable release (from release branch)\nnpm install mcp-control\n\n# Install a specific version\nnpm install mcp-control@0.1.22\n```\n\n## üìö Dependencies\n\n- [@modelcontextprotocol/sdk](https://www.npmjs.com/package/@modelcontextprotocol/sdk) - MCP SDK for protocol implementation\n- [keysender](https://www.npmjs.com/package/keysender) - Windows-only UI automation library\n- [clipboardy](https://www.npmjs.com/package/clipboardy) - Clipboard handling\n- [sharp](https://www.npmjs.com/package/sharp) - Image processing\n- [uuid](https://www.npmjs.com/package/uuid) - UUID generation\n\n## üöß Known Limitations\n\n- Window minimize/restore operations are currently unsupported\n- Multiple screen functions may not work as expected, depending on setup\n- The get_screenshot utility does not work with the VS Code Extension Cline. See [GitHub issue #1865](https://github.com/cline/cline/issues/1865)\n- Some operations may require elevated permissions depending on the target application\n- Only Windows is supported\n- MCPControl works best at 1280x720 resolution, single screen. Click accuracy is optimized for this resolution. We're working on an offset/scaling bug and looking for testers or help creating testing tools\n\n## üë• Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## ‚öñÔ∏è License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## üìñ References\n\n- [Model Context Protocol Documentation](https://modelcontextprotocol.github.io/)\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/cheffromspace-mcpcontrol-badge.png)](https://mseep.ai/app/cheffromspace-mcpcontrol)\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcpcontrol",
        "iot",
        "mcp",
        "mcpcontrol windows",
        "iot device",
        "mcp enabling"
      ],
      "category": "iot-and-device-control"
    },
    "cyanheads--toolkit-mcp-server": {
      "owner": "cyanheads",
      "name": "toolkit-mcp-server",
      "url": "https://github.com/cyanheads/toolkit-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/cyanheads.webp",
      "description": "Provides LLM Agents with access to various system utilities and tools, enabling functionalities such as IP geolocation, network diagnostics, system monitoring, cryptographic operations, and QR code generation.",
      "stars": 13,
      "forks": 6,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-09-30T12:04:53Z",
      "readme_content": "# toolkit-mcp-server\n\n[![TypeScript](https://img.shields.io/badge/TypeScript-5.3-blue.svg)](https://www.typescriptlang.org/)\n[![Model Context Protocol](https://img.shields.io/badge/MCP-1.4.0-green.svg)](https://modelcontextprotocol.io/)\n[![Version](https://img.shields.io/badge/Version-1.0.1-blue.svg)]()\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Status](https://img.shields.io/badge/Status-Stable-blue.svg)]()\n[![GitHub](https://img.shields.io/github/stars/cyanheads/toolkit-mcp-server?style=social)](https://github.com/cyanheads/toolkit-mcp-server)\n\nA Model Context Protocol server providing LLM Agents with system utilities and tools, including IP geolocation, network diagnostics, system monitoring, cryptographic operations, and QR code generation.\n\n## Model Context Protocol\n\nThe Model Context Protocol (MCP) enables communication between:\n\n- **Clients**: Claude Desktop, IDEs, and other MCP-compatible clients\n- **Servers**: Tools and resources for task management and automation\n- **LLM Agents**: AI models that leverage the server's capabilities\n\n## Table of Contents\n\n- [Features](#features)\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Tools](#tools)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Features\n\n### Network & Geolocation\n- IP geolocation with intelligent caching\n- Network connectivity testing\n- Ping and traceroute utilities\n- Public IP detection\n- Rate limiting (45 requests/minute)\n\n### System Utilities\n- System information retrieval\n- Resource monitoring\n- Load average tracking\n- Network interface details\n\n### Security Tools\n- Cryptographic hash generation (MD5, SHA-1, SHA-256, SHA-512)\n- Constant-time hash comparison\n- UUID generation\n\n### Generator Tools\n- QR code generation\n  - Terminal output\n  - SVG format\n  - Base64 encoded images\n\n## Installation\n\n```bash\n# Using npm (recommended)\nnpm install @cyanheads/toolkit-mcp-server\n\n# Or install from source\ngit clone git@github.com:cyanheads/toolkit-mcp-server.git\ncd toolkit-mcp-server\nnpm install\nnpm run build\n```\n\n## Configuration\n\nAdd to your MCP client settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"toolkit\": {\n      \"command\": \"node\",\n      \"args\": [\"node_modules/@cyanheads/toolkit-mcp-server/build/index.js\"],\n      \"env\": {\n        \"NODE_ENV\": \"production\"\n      }\n    }\n  }\n}\n```\n\n## Tools\n\n### Network Operations\n```typescript\n// Get geolocation data\nconst geo = await mcp.use('toolkit-mcp-server', 'geolocate', {\n  query: '8.8.8.8'\n});\n\n// Check connectivity\nconst conn = await mcp.use('toolkit-mcp-server', 'checkConnectivity', {\n  host: 'example.com',\n  port: 443\n});\n```\n\n### System Operations\n```typescript\n// Get system information\nconst sysInfo = await mcp.use('toolkit-mcp-server', 'getSystemInfo', {});\n\n// Get load average\nconst load = await mcp.use('toolkit-mcp-server', 'getLoadAverage', {});\n```\n\n### Security Operations\n```typescript\n// Generate hash\nconst hash = await mcp.use('toolkit-mcp-server', 'hashData', {\n  input: 'test data',\n  algorithm: 'sha256'\n});\n\n// Generate UUID\nconst uuid = await mcp.use('toolkit-mcp-server', 'generateUUID', {});\n```\n\n### Generator Operations\n```typescript\n// Generate QR code\nconst qr = await mcp.use('toolkit-mcp-server', 'generateQRCode', {\n  data: 'https://example.com',\n  type: 'svg'\n});\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nApache License 2.0. See [LICENSE](LICENSE) for more information.\n\n---\n\n<div align=\"center\">\nBuilt with the Model Context Protocol\n</div>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iot",
        "llm",
        "toolkit",
        "toolkit mcp",
        "iot device",
        "cyanheads toolkit"
      ],
      "category": "iot-and-device-control"
    },
    "davidlin2k--onos-mcp-server": {
      "owner": "davidlin2k",
      "name": "onos-mcp-server",
      "url": "https://github.com/davidlin2k/onos-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/davidlin2k.webp",
      "description": "Manage and control network resources using ONOS's SDN capabilities, providing access to network devices, topology information, flow rules, and comprehensive analytics through a structured API interface.",
      "stars": 4,
      "forks": 2,
      "license": "GNU General Public License v3.0",
      "language": "Python",
      "updated_at": "2025-07-16T07:37:40Z",
      "readme_content": "# ONOS MCP Server\n\n## Overview\nA Model Context Protocol (MCP) server implementation that provides network control and management capabilities through the ONOS SDN controller. This server enables AI assistants to access ONOS network management, OpenFlow device control, and comprehensive analytics through a structured API interface. The server is ideal for educational environments, network operations, SDN research, and AI-assisted network management.\n\n## Features\n\n### Network Resources\nThe server provides access to ONOS REST API endpoints, including:\n\n- Network devices, links, and hosts\n- Topology information\n- Flow rules and intents\n- Applications and services\n- Statistics and metrics\n- System and cluster health\n\n### Analytics Tools\n\n- **Network Summary**: Get a comprehensive overview of devices, links, hosts, and clusters with detailed device information\n- **Network Analytics**: Analyze performance metrics, traffic patterns, and utilization statistics\n- **System Health**: Monitor memory usage, cluster status, and component health\n- **Application Management**: Install, activate, deactivate, and uninstall ONOS applications\n- **Flow Configuration**: Create and manage flow rules and intents\n- **Path Computation**: Find optimal paths between network endpoints\n\n### Specialized Prompts\n\n- **Network Diagnostics**: Troubleshoot connectivity issues and service degradation\n- **Intent-Based Configuration**: Implement connectivity objectives and policies\n- **Network Health Analysis**: Generate comprehensive status reports\n- **QoS Configuration**: Set up traffic prioritization and service levels\n- **Performance Optimization**: Improve resource allocation and scalability\n\n## Requirements\n\n- Python 3.7+\n- [uv](https://docs.astral.sh/uv/getting-started/installation/#standalone-installer) for dependency management\n- Running ONOS controller\n- httpx library\n- mcp library\n\n## Configuration\n\nConfigure the server using environment variables:\n\n- `ONOS_API_BASE`: Base URL for ONOS API (default: http://localhost:8181/onos/v1)\n- `ONOS_USERNAME`: Username for ONOS API authentication (default: onos)\n- `ONOS_PASSWORD`: Password for ONOS API authentication (default: rocks)\n\n## Usage with Claude Desktop\n\n```json\n{\n  \"mcpServers\": {\n    \"onos\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"parent_of_servers_repo/servers/src/onos-mcp-server\",\n        \"run\",\n        \"server.py\"\n      ],\n      \"env\": {\n        \"ONOS_API_BASE\": \"http://localhost:8181/onos/v1\",\n        \"ONOS_USERNAME\": \"onos\",\n        \"ONOS_PASSWORD\": \"rocks\"\n      }\n    }\n  }\n}\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit pull requests, report bugs, or suggest new features.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iot",
        "sdn",
        "onos",
        "onos sdn",
        "sdn capabilities",
        "iot device"
      ],
      "category": "iot-and-device-control"
    },
    "davidlin2k--pox-mcp-server": {
      "owner": "davidlin2k",
      "name": "pox-mcp-server",
      "url": "https://github.com/davidlin2k/pox-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/davidlin2k.webp",
      "description": "Automate network analysis and manage OpenFlow devices using a Python-based interface while tracking active components, network topology, and flow rules.",
      "stars": 1,
      "forks": 6,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-03-24T01:03:23Z",
      "readme_content": "# POX MCP Server\n\n## Overview\nA Model Context Protocol (MCP) server implementation that provides network control and management capabilities through the POX SDN controller. This server enables Python-based network programming, OpenFlow device management, and automated network analysis through POX's modular architecture. Perfect for educational environments, network prototyping, and SDN research.\n\n## Components\n\n### Resources\nThe server exposes two dynamic resources:\n- `pox://network-config`: A comprehensive POX controller configuration memo\n  - Tracks active POX components and their configurations\n  - Records network topology and flow rules\n  - Maintains discovered network insights\n- `pox://topology`: Real-time network topology view\n  - Shows active OpenFlow datapaths (switches)\n  - Maps host locations and connections\n  - Displays link status and port mappings\n\n### Prompts\nThe server provides three specialized prompts:\n- `pox-network-manager`: Interactive prompt for POX controller management\n  - Required argument: `topic` - The network control aspect to focus on\n  - Helps configure POX components and modules\n  - Guides through network policy implementation\n  - Integrates with network configuration memo\n\n- `simple-hub`: Basic L2 hub implementation using POX\n  - Required argument: `dpid` - The datapath identifier\n  - Demonstrates POX's event-driven programming\n  - Shows basic packet handling and flooding\n  - Explains POX's core mechanisms\n\n- `learning-switch`: L2 learning switch implementation\n  - Required argument: `dpid` - The datapath identifier\n  - Showcases POX's table management\n  - Implements MAC learning and forwarding\n  - Demonstrates POX's packet handling capabilities\n\n### Tools\nThe server offers five core tools:\n\n#### Datapath Management Tools\n- `get_switches`\n   - List all connected OpenFlow datapaths\n   - No input required\n   - Returns: Array of active POX-controlled switches\n   - Includes connection status and capabilities\n\n- `get_switch_desc`\n   - Get detailed datapath information\n   - Input:\n     - `dpid` (string): Datapath identifier\n   - Returns: POX-managed switch details and features\n\n#### Flow Management Tools\n- `get_flow_stats`\n   - Retrieve POX flow statistics\n   - Input:\n     - `dpid` (string): Datapath identifier\n     - `match` (object, optional): POX match structure\n     - `table_id` (string, optional): OpenFlow table ID\n     - `out_port` (string, optional): Output port filter\n   - Returns: POX flow statistics including packet counts\n\n- `set_table`\n   - Configure POX flow tables\n   - Input:\n     - `dpid` (string): Datapath identifier\n     - `flows` (array): POX flow specifications\n   - Returns: Flow table update confirmation\n\n#### Analysis Tools\n- `append_insight`\n   - Add network insights to POX configuration memo\n   - Input:\n     - `insight` (string): Network observation or analysis\n   - Returns: Insight addition confirmation\n   - Updates pox://network-config resource\n\n## Usage with Claude Desktop\n\n### uv\n\n```json\n{\n  \"mcpServers\": {\n    \"pox\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"parent_of_servers_repo/servers/src/mcp_server_pox\",\n        \"run\",\n        \"server.py\"\n      ],\n      \"env\": {\n        \"POX_SERVER_URL\": \"http://localhost:8000\"\n      }\n    }\n  }\n}\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit pull requests, report bugs, or suggest new features.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "openflow",
        "iot",
        "network",
        "openflow devices",
        "manage openflow",
        "automate network"
      ],
      "category": "iot-and-device-control"
    },
    "diegobit--aranet4-mcp-server": {
      "owner": "diegobit",
      "name": "aranet4-mcp-server",
      "url": "https://github.com/diegobit/aranet4-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/diegobit.webp",
      "description": "Manage Aranet4 CO2 sensor data by scanning devices, collecting measurements, and storing them in a local database for historical querying and visualization. Provides assistance for configuration and automates data updates for ongoing monitoring.",
      "stars": 4,
      "forks": 5,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-15T20:10:58Z",
      "readme_content": "# aranet4-mcp-server\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/3beee758-1666-4c1f-a702-bf278a1874b1)\n\nMCP server to manage your Aranet4 CO2 sensor. Built upon [Aranet4-Python](https://github.com/Anrijs/Aranet4-Python).\n\n> [!TIP]\n> For the standalone python version without MCP logic, see [aranet4-archiver](https://github.com/diegobit/aranet4-archiver?tab=readme-ov-file).\n\n\n\n## Features:\n- Scan for nearby devices.\n- Fetch new data from embedded device memory and save to a local sqlite db for tracking and later viewing. For automatic updates, see at the bottom.\n- Ask questions about recent measurements or about a specific past date.\n- *[For MCP clients that support images]* Ask data to be plotted to also have a nice visualization!\n- **Assisted configuration!** üí´ After installation, just ask `init aranet4` in your client to set up everything for the mcp server to work with your device.\n\n## Requirements\n\nAn Aranet4 device already paired. The device uses BLE, so it won't be shown in regular bluetooth search. On MacOS, one way is to install LightBlue from the App Store.\n\n## Installation\n\n1. Clone repo:\n\n    ```\n    git clone git@github.com:diegobit/aranet4-mcp-server.git`\n    cd aranet4-mcp-server\n    ```\n\n2. Prepare environment:\n\n    - **Recommended (with [uv](https://docs.astral.sh/uv/))**: Nothing to do. The provided `pyproject.toml` handles dependencied and virtual environments.\n    - **Alternative (with pip)**: install with `pip install .`\n\n3. Add to MCP client configuration:\n\n    ```json\n    \"aranet4\": {\n      \"command\": \"{{PATH_TO_UV}}\", // run `which uv`\n        \"args\": [\n          \"--directory\",\n          \"{{PATH_TO_SRC}}/aranet4-mcp-server/\",\n          \"run\",\n          \"src/server.py\"\n        ]\n    }\n    ```\n\n    - Claude Desktop MacOS config file path: `~/Library/Application Support/Claude/claude_desktop_config.json`\n    - Cursor MacOS config file path: `~/.cursor/mcp.json`\n\n4. Configure:\n\n    - **Recommended (AI assisted config!):** start your client and ask `init aranet4` to get a guided configuration.\n    - **Alternative (manual):** edit file `config.yaml`. You need to provide the mac address and the device name. You can get the mac address with `aranetctl --scan` from [Aranet4-Python](https://github.com/Anrijs/Aranet4-Python) (installed with this repo dependencies).\n\n## Dockerfile\n\nDockerfile is available. Remember to pass env variables or update `config.yaml`.\n\n## List of tools\n\n**Configuration and utils**:\n- `init_aranet4_config`: assisted configuration of device.\n- `scan_devices`: scan nearby bluetooth aranet4 devices.\n- `get_configuration_and_db_stats`: get current config.yaml and general stats from the local sqlite3 db.\n- `set_configuration`: set values in config.yaml.\n\n**To update historical data**:\n- `fetch_new_data`: fetch new data from configured nearby aranet4 device and save to local db.\n\n**To query historical data**:\n- `get_recent_data`: get recent data from local db. Can specify how many measurements. \n- `get_data_by_timerange`: get data in specific timerange from local db. Can specify how many measurements (careful, if the range is big and the limit is low, datapoints will be skipped).\n\n  For both, ask to receive a plot to have it generated and displayed.\n\n## Automatic data fetch job\n\nIf you want your local db to always be updated, you can setup a cronjob or a launch agent that fetches data automatically every few hours. In MacOS, do as follows:\n\n1. Configure absolute paths in `com.diegobit.aranet4-fetch.plist`.\n2. Install LaunchAgent:\n   ```bash\n   cp com.diegobit.aranet4-fetch.plist ~/Library/LaunchAgents/\n   launchctl load ~/Library/LaunchAgents/com.diegobit.aranet4-fetch.plist\n   ```\n\nFor other platforms, just run `fetch-job.py` periodically however you prefer.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iot",
        "aranet4",
        "sensor",
        "iot device",
        "aranet4 co2",
        "manage aranet4"
      ],
      "category": "iot-and-device-control"
    },
    "douglaszuqueto--mqtt-mcp-server": {
      "owner": "douglaszuqueto",
      "name": "mqtt-mcp-server",
      "url": "https://github.com/douglaszuqueto/mqtt-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/douglaszuqueto.webp",
      "description": "Integrates with the MQTT messaging protocol to facilitate dynamic interaction with AI models via messaging. Enables communication and resource management for LLM applications utilizing MQTT.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-04-26T22:26:31Z",
      "readme_content": "# MQTT MCP Server\n\nMQTT MCP Server\n\n**Development in progress**\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mqtt",
        "iot",
        "messaging",
        "mqtt messaging",
        "utilizing mqtt",
        "integrates mqtt"
      ],
      "category": "iot-and-device-control"
    },
    "genm--switchbot-mcp": {
      "owner": "genm",
      "name": "switchbot-mcp",
      "url": "https://github.com/genm/switchbot-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/genm.webp",
      "description": "Provides control capabilities for SwitchBot devices, enabling users to list devices, check their status, and manage settings. Supports device control, scene management, and status monitoring.",
      "stars": 3,
      "forks": 5,
      "license": "ISC License",
      "language": "JavaScript",
      "updated_at": "2025-07-11T02:01:43Z",
      "readme_content": "# @genm/switchbot-mcp\n\nA Model Context Protocol server that provides SwitchBot device control capabilities to AI assistants.\n[![smithery badge](https://smithery.ai/badge/@genm/switchbot-mcp)](https://smithery.ai/server/@genm/switchbot-mcp)\n\n[Êó•Êú¨Ë™û](./README.ja.md)\n\n<a href=\"https://glama.ai/mcp/servers/k8m7mttrur\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/k8m7mttrur/badge\" alt=\"SwitchBot Server MCP server\" /></a>\n\n## Features\n\n- List devices\n- Get device status\n- Control devices (on/off)\n- Change device settings\n- Scene control\n- Device status monitoring\n\n## Installation\n\n### Installing via Smithery\n\nTo install SwitchBot MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@genm/switchbot-mcp):\n\n```bash\nnpx -y @smithery/cli install @genm/switchbot-mcp --client claude\n```\n\n### Manual Installation\n```bash\nnpm install @genm/switchbot-mcp\n```\n\n## Setup\n\n### 1. SwitchBot API Configuration\n\n1. Install the SwitchBot app\n2. Create an account and sign in\n3. Go to Profile > Settings > Developer Options\n4. Get both the token and secret key\n\n### 2. MCP Server Configuration\n\nAdd the following to `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"switchbot\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/switchbot-mcp/build/index.js\"],\n      \"env\": {\n        \"SWITCHBOT_TOKEN\": \"your_token\",\n        \"SWITCHBOT_SECRET\": \"your_secret\"\n      }\n    }\n  }\n}\n```\n\n### 3. Environment Variables\n\n```env\nSWITCHBOT_TOKEN=your_token\nSWITCHBOT_SECRET=your_secret\n```\n\n## Supported Devices\n\n- Plug\n  - Living Room Floor Lamp\n  - Office PC Power Supply\n- Bot\n  - Kitchen Coffee Maker\n  - Living Room Air Purifier\n- Curtain\n  - Bedroom Window Curtain\n  - Study Room Blackout Curtain\n- Air Conditioner\n  - Living Room AC\n  - Bedroom AC\n- Humidifier\n  - Bedroom Humidifier\n  - Study Room Humidifier\n- Light\n  - Kitchen Ceiling Light\n  - Bedroom Night Light\n- Remote Control\n  - Living Room TV\n  - Study Room Fan\n\n## Device Name Examples\n\nIt's recommended to give descriptive names to your devices for easier control by AI assistants. Examples:\n\n- \"Bedroom Curtain\" instead of just \"Curtain\"\n- \"Living Room AC\" instead of just \"Air Conditioner\"\n- \"Kitchen Coffee Maker\" instead of just \"Bot\"\n\nThis naming convention helps AI assistants understand the context and location of each device.\n\n## Supported Operations\n\n### Device Management\n- List devices\n- Get device status\n- Turn devices on/off\n- Change device settings\n\n### Scene Management\n- List scenes\n- Execute scenes\n\n### Sensor Information\n- Temperature\n- Humidity\n- Brightness\n- Motion\n\n## Development\n\n```bash\n# Build\nnpm run build\n\n# Development mode (TypeScript)\nnpm run dev\n\n# Start\nnpm start\n```\n\n## Troubleshooting\n\n### Device Not Responding\n\n1. Verify the device is within Bluetooth range\n2. Check device battery status\n3. Verify SwitchBot hub connection status\n\n### Authentication Errors\n\n1. Check token and secret key expiration\n2. Regenerate token and secret key\n3. Update environment variables\n\n## License\n\nISC\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "switchbot",
        "iot",
        "mcp",
        "genm switchbot",
        "switchbot devices",
        "switchbot mcp"
      ],
      "category": "iot-and-device-control"
    },
    "github-hewei--mcp-android-adb-server": {
      "owner": "github-hewei",
      "name": "mcp-android-adb-server",
      "url": "https://github.com/github-hewei/mcp-android-adb-server",
      "imageUrl": "/freedevtools/mcp/pfp/github-hewei.webp",
      "description": "Manage Android devices using ADB commands for installing, uninstalling, and controlling applications. Perform screen operations and input actions, with added support for visual model integration to generate screen descriptions.",
      "stars": 12,
      "forks": 1,
      "license": "GNU General Public License v3.0",
      "language": "Go",
      "updated_at": "2025-09-29T06:14:36Z",
      "readme_content": "[![English](https://img.shields.io/badge/Language-English-blue.svg)](./README.md)\n[![ÁÆÄ‰Ωì‰∏≠Êñá](https://img.shields.io/badge/ËØ≠Ë®Ä-ÁÆÄ‰Ωì‰∏≠Êñá-red.svg)](./README.zh-CN.md)\n\n## üöÄ mcp-android-adb-server\n\n[![smithery badge](https://smithery.ai/badge/@github-hewei/mcp-android-adb-server)](https://smithery.ai/server/@github-hewei/mcp-android-adb-server)\n\nAn MCP service for operating Android devices via ADB.\n\n2025-04-01: Added support for obtaining screen description content using visual models like `qwen2.5-vl`.\n\n### Manual Installation\n\n```sh\n# clone the repo and build\ngit clone https://github.com/github-hewei/mcp-android-adb-server.git\ncd mcp-android-adb-server\ngo build\n```\n\n### Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-android-adb-server\": {\n      \"command\": \"D:\\\\www\\\\golang\\\\mcp-android-adb-server\\\\mcp-android-adb-server.exe\",\n      \"env\": {\n        \"DEVICE_ID\": \"xxxxx\",\n        \"SCREEN_LOCK_PASSWORD\": \"123456\",\n        \"VISUAL_MODEL_ON\": \"true\",\n        \"VISUAL_MODEL_API_KEY\": \"sk-or-xxxxxxxxxxxxxxxxxxx\",\n        \"VISUAL_MODEL_BASE_URL\": \"https://openrouter.ai/api/v1/\",\n        \"VISUAL_MODEL_NAME\": \"qwen/qwen2.5-vl-72b-instruct:free\"\n      }\n    }\n  }\n}\n```\n\n### Environment Variables\n\n- DEVICE_ID : Required. The ID of the Android device, obtainable via the `adb devices` command.\n- SCREEN_LOCK_PASSWORD : Optional. The screen lock password of the device, used to unlock the screen.\n- VISUAL_MODEL_ON : Optional. Whether to enable the visual model, defaults to false.\n- VISUAL_MODEL_API_KEY : API Key.\n- VISUAL_MODEL_BASE_URL : API Base URL.\n- VISUAL_MODEL_NAME : Model name.\n\n### Features and Tools\n\nApplication Management\n- install_app : Install an application on the Android device\n- uninstall_app : Uninstall an application from the Android device\n- terminate_app : Terminate a running application on the Android device\n- launch_app : Launch an application on the Android device\n- list_app : List all installed applications on the Android device\n- is_app_installed : Check if a specific application is installed\n\nScreen Control\n- unlock_screen : Unlock the Android device screen\n- lock_screen : Lock the Android device screen\n- is_screen_locked : Check if the Android device screen is locked\n- is_screen_active : Check if the Android device screen is active\n\nInput Control\n\n- input_text : Input text on the Android device\n- input_key : Input key press on the Android device\n- tap : Perform a tap operation on the screen at a specified position\n- long_tap : Perform a long press operation on the screen at a specified position\n- back : Perform a back operation\n\nGesture Control\n\n- swipe_up : Perform a swipe up gesture on the Android device screen\n- swipe_down : Perform a swipe down gesture on the Android device screen\n- swipe_left : Perform a swipe left gesture on the Android device screen\n- swipe_right : Perform a swipe right gesture on the Android device screen\n\nDevice Information\n\n- screen_size : Get the screen size of the Android device\n- screen_dpi : Get the screen DPI of the Android device\n- screenshot_description : Get the Android device screenshot description\n- system_info : Get system information of the Android device\n\nOther Functions\n- shell_command : Execute a shell command on the Android device\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "android",
        "iot",
        "devices",
        "mcp android",
        "manage android",
        "android adb"
      ],
      "category": "iot-and-device-control"
    },
    "greenhandBen--Easycontrol_For_Car": {
      "owner": "greenhandBen",
      "name": "Easycontrol_For_Car",
      "url": "https://github.com/greenhandBen/Easycontrol_For_Car",
      "imageUrl": "/freedevtools/mcp/pfp/greenhandBen.webp",
      "description": "Mirrors a smartphone's screen to a car's display, enabling the seamless transfer of mobile applications onto vehicle systems. It is designed for Android-based car platforms and requires ADB debugging to function.",
      "stars": 0,
      "forks": 0,
      "license": "GNU General Public License v3.0",
      "language": "",
      "updated_at": "2025-01-21T19:03:05Z",
      "readme_content": "# ÊòìÊéßËΩ¶Êú∫Áâà(Easycontrol_For_Car)\n[![GitHub license](https://img.shields.io/github/license/eiyooooo/Easycontrol_For_Car.svg)](https://github.com/eiyooooo/Easycontrol_For_Car/blob/main/LICENSE)\n[![GitHub release](https://img.shields.io/github/release/eiyooooo/Easycontrol_For_Car.svg)](https://GitHub.com/eiyooooo/Easycontrol_For_Car/releases/)\n[![Github all releases](https://img.shields.io/github/downloads/eiyooooo/Easycontrol_For_Car/total.svg)](https://GitHub.com/eiyooooo/Easycontrol_For_Car/releases/)\n\n## Ê≥®ÊÑè\n\n#### ‚ÄúÊòìÊéßËΩ¶Êú∫Áâà‚Äù**Ê∞∏‰πÖÂÖçË¥π**Ôºå‰∏ç‰ºöÊî∂Âèñ‰ªª‰ΩïË¥πÁî®Ôºå‰πü‰∏ç‰ºöÂº∫Âà∂Ë¶ÅÊ±ÇÊçêËµ†„ÄÇËØ∑ÂãøÁõ∏‰ø°‰ªª‰ΩïÊî∂Ë¥πÁöÑ‚ÄúÊòìÊéßËΩ¶Êú∫Áâà‚ÄùÔºå‰ª•ÂÖç‰∏äÂΩìÂèóÈ™ó\n\n#### Êú¨ËΩØ‰ª∂ÂºÄÊ∫êËÆ∏ÂèØËØÅ‰∏∫**GPL-3.0**Ôºå‰ªª‰Ωï‰∫∫ÂèØ‰ª•ÂÖçË¥π‰ΩøÁî®„ÄÅ‰øÆÊîπ„ÄÅÂàÜÂèëÔºå‰ΩÜËØ∑ÈÅµÂÆàÂºÄÊ∫êËÆ∏ÂèØËØÅÁöÑËßÑÂÆö\n\n#### Êú¨È°πÁõÆÂîØ‰∏ÄÂú∞ÂùÄ‰∏∫(<https://github.com/eiyooooo/Easycontrol_For_Car>)\n\n#### ÂèçÈ¶àÈóÆÈ¢òËØ∑Âà∞[Issues](https://github.com/eiyooooo/Easycontrol_For_Car/issues)ÔºåÂäüËÉΩÂª∫ËÆÆËØ∑Âà∞[Discussions](https://github.com/eiyooooo/Easycontrol_For_Car/discussions)\n\n## ÁÆÄ‰ªã\nÊú¨ËΩØ‰ª∂ÂèØÂÆûÁé∞ÊâãÊú∫Â±èÂπïÈïúÂÉèÂà∞ËΩ¶Êú∫„ÄÅÊâãÊú∫Â∫îÁî®ÊµÅËΩ¨Âà∞ËΩ¶Êú∫\n\nËΩ¶Êú∫ÊîØÊåÅÔºöËÉΩÂ§üÂÆâË£ÖÁ¨¨‰∏âÊñπËΩØ‰ª∂„ÄÅÂü∫‰∫éÂÆâÂçìÁ≥ªÁªüÁöÑËΩ¶Êú∫\n\nÊâãÊú∫ÊîØÊåÅÔºöËÉΩÂ§üÊâìÂºÄÂºÄÂèëËÄÖË∞ÉËØï(ADB)ÂäüËÉΩ„ÄÅÂü∫‰∫éÂÆâÂçìÁ≥ªÁªüÁöÑÊâãÊú∫\n\n## ÂÆâË£ÖÂåÖÂèäÊõ¥Êñ∞Êó•Âøó\n- [ÁÇπÂáªÊ≠§Â§ÑÂâçÂæÄ](https://github.com/eiyooooo/Easycontrol_For_Car/releases)\n\n## ‰ΩøÁî®ËØ¥Êòé\n- Âª∫ËÆÆÂú®ËΩØ‰ª∂ÂÜÖÈòÖËØª\n  - È¶ñÊ¨°ÊâìÂºÄËΩØ‰ª∂Â∞Ü‰ºöÊòæÁ§∫\n  - ‰∫¶ÂèØÂú®ËΩØ‰ª∂ËÆæÁΩÆ‰∏≠ÂÜçÊ¨°ÊâìÂºÄ\n- [ÁÇπÂáªÊ≠§Â§ÑÂâçÂæÄ](HOW_TO_USE.md)\n\n## ÂÖ≥‰∫éÂºÄÂèëÁâàÊú¨ÁºñËØë\nÂ¶ÇÊúâÈúÄË¶ÅÂºÄÂèëÁâàÊú¨ËØ∑Ëá™Ë°å[ÁºñËØë](HOW_TO_BUILD.md)\n\n## Êà™Âõæ\n\n\n\n\n\n## ÊçêËµ†ÈºìÂä±\n\nÂ¶ÇÊûúÊÇ®ËßâÂæóÊàëÁöÑËΩØ‰ª∂ÂØπÊÇ®ÊúâÂ∏ÆÂä©ÔºåÂèØ‰ª•ËµûÂä©ÊàëÔºåÂçÅÂàÜÊÑüË∞¢ÔºÅ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "easycontrol_for_car",
        "smartphone",
        "iot",
        "greenhandben easycontrol_for_car",
        "mirrors smartphone",
        "easycontrol_for_car mirrors"
      ],
      "category": "iot-and-device-control"
    },
    "hao-cyber--phone-mcp": {
      "owner": "hao-cyber",
      "name": "phone-mcp",
      "url": "https://github.com/hao-cyber/phone-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/hao-cyber.webp",
      "description": "Control an Android phone using ADB commands for tasks such as making calls, sending messages, managing contacts, and automating various phone operations directly from a computer.",
      "stars": 167,
      "forks": 24,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-03T17:22:12Z",
      "readme_content": "# üì± Phone MCP Plugin\n![Downloads](https://pepy.tech/badge/phone-mcp)\n\nüåü A powerful MCP plugin that lets you control your Android phone with ease through ADB commands.\n\n## Example\n- Based on today's weather by browser, automatically select and play netease music, no confirmation needed\n![play_mucic_x2](https://github.com/user-attachments/assets/58a39b26-6e8b-4f00-8073-3881f657aa5c)\n\n\n- Call Hao from the contacts. If he doesn't answer, send a text message telling him to come to Meeting Room 101.\n![call_sms_x2](https://github.com/user-attachments/assets/9a155e7c-6dde-4248-b499-0444f19448d0)\n\n\n[‰∏≠ÊñáÊñáÊ°£](README_zh.md)\n\n## ‚ö° Quick Start\n\n### üì• Installation\n```bash\n# Run directly with uvx (recommended, part of uv, no separate installation needed)\nuvx phone-mcp\n\n# Or install with uv\nuv pip install phone-mcp\n\n# Or install with pip\npip install phone-mcp\n```\n\n\n### üîß Configuration\n\n#### AI Assistant Configuration\nConfigure in your AI assistant configuration (Cursor, Trae, Claude, etc.):\n\n```json\n{\n    \"mcpServers\": {\n        \"phone-mcp\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"phone-mcp\"\n            ]\n        }\n    }\n}\n```\n\nAlternatively, if you installed with pip:\n```json\n{\n    \"mcpServers\": {\n        \"phone-mcp\": {\n            \"command\": \"/usr/local/bin/python\",\n            \"args\": [\n                \"-m\",\n                \"phone_mcp\"\n            ]\n        }\n    }\n}\n```\n\n> **Important**: The path `/usr/local/bin/python` in the configuration above is the path to the Python interpreter. You need to modify it according to the actual Python installation location on your system. Here's how to find the Python path on different operating systems:\n>\n> **Linux/macOS**:\n> Run the following command in terminal:\n> ```bash\n> which python3\n> ```\n> or\n> ```bash\n> which python\n> ```\n>\n> **Windows**:\n> Run in Command Prompt (CMD):\n> ```cmd\n> where python\n> ```\n> Or in PowerShell:\n> ```powershell\n> (Get-Command python).Path\n> ```\n>\n> Make sure to replace `/usr/local/bin/python` in the configuration with the full path, for example on Windows it might be `C:\\Python39\\python.exe`\n\n> **Note**: For Cursor, place this configuration in `~/.cursor/mcp.json`\n\nUsage:\n- Use commands directly in Claude conversation, for example:\n  ```\n  Please call contact hao\n  ```\n\n‚ö†Ô∏è Before using, ensure:\n- ADB is properly installed and configured\n- USB debugging is enabled on your Android device\n- Device is connected to computer via USB\n\n## üéØ Key Features\n\n- üìû **Call Functions**: Make calls, end calls, receive incoming calls\n- üí¨ **Messaging**: Send and receive SMS, get raw messages\n- üë• **Contacts**: Access phone contacts, create new contacts with automated UI interaction\n- üì∏ **Media**: Screenshots, screen recording, media control\n- üì± **Apps**: Launch applications, launch specific activities with intents, list installed apps, terminate apps\n- üîß **System**: Window info, app shortcuts\n- üó∫Ô∏è **Maps**: Search POIs with phone numbers\n- üñ±Ô∏è **UI Interaction**: Tap, swipe, type text, press keys\n- üîç **UI Inspection**: Find elements by text, ID, class or description\n- ü§ñ **UI Automation**: Wait for elements, scroll to find elements\n- üß† **Screen Analysis**: Structured screen information and unified interaction\n- üåê **Web Browser**: Open URLs in device's default browser\n- üîÑ **UI Monitoring**: Monitor UI changes and wait for specific elements to appear or disappear\n\n## üõ†Ô∏è Requirements\n\n- Python 3.7+\n- Android device with USB debugging enabled\n- ADB tools\n\n## üìã Basic Commands\n\n### Device & Connection\n```bash\n# Check device connection\nphone-cli check\n\n# Get screen size\nphone-cli screen-interact find method=clickable\n```\n\n### Communication\n```bash\n# Make a call\nphone-cli call 1234567890\n\n# End current call\nphone-cli hangup\n\n# Send SMS\nphone-cli send-sms 1234567890 \"Hello\"\n\n# Get received messages (with pagination)\nphone-cli messages --limit 10\n\n# Get sent messages (with pagination)\nphone-cli sent-messages --limit 10\n\n# Get contacts (with pagination)\nphone-cli contacts --limit 20\n\n# Create a new contact with UI automation\nphone-cli create-contact \"John Doe\" \"1234567890\"\n```\n\n### Media & Apps\n```bash\n# Take screenshot\nphone-cli screenshot\n\n# Record screen\nphone-cli record --duration 30\n\n# Launch app (may not work on all devices)\nphone-cli app camera\n\n# Alternative app launch method using open_app (if app command doesn't work)\nphone-cli open_app camera\n\n# Close app\nphone-cli close-app com.android.camera\n\n# List installed apps (basic info, faster)\nphone-cli list-apps\n\n# List apps with pagination\nphone-cli list-apps --page 1 --page-size 10\n\n# List apps with detailed info (slower)\nphone-cli list-apps --detailed\n\n# Launch specific activity (reliable method for all devices)\nphone-cli launch com.android.settings/.Settings\n\n# Launch app by package name (may not work on all devices)\nphone-cli app com.android.contacts\n\n# Alternative launch by package name (if app command doesn't work)\nphone-cli open_app com.android.contacts\n\n# Launch app by package and activity (most reliable method)\nphone-cli launch com.android.dialer/com.android.dialer.DialtactsActivity\n\n# Open URL in default browser\nphone-cli open-url google.com\n```\n\n### Screen Analysis & Interaction\n```bash\n# Analyze current screen with structured information\nphone-cli analyze-screen\n\n# Unified interaction interface\nphone-cli screen-interact <action> [parameters]\n\n# Tap at coordinates\nphone-cli screen-interact tap x=500 y=800\n\n# Tap element by text\nphone-cli screen-interact tap element_text=\"Login\"\n\n# Tap element by content description\nphone-cli screen-interact tap element_content_desc=\"Calendar\"\n\n# Swipe gesture (scroll down)\nphone-cli screen-interact swipe x1=500 y1=1000 x2=500 y2=200 duration=300\n\n# Press key\nphone-cli screen-interact key keycode=back\n\n# Input text\nphone-cli screen-interact text content=\"Hello World\"\n\n# Find elements\nphone-cli screen-interact find method=text value=\"Login\" partial=true\n\n# Wait for element\nphone-cli screen-interact wait method=text value=\"Success\" timeout=10\n\n# Scroll to find element\nphone-cli screen-interact scroll method=text value=\"Settings\" direction=down max_swipes=5\n\n# Monitor UI for changes\nphone-cli monitor-ui --interval 0.5 --duration 30\n\n# Monitor UI until specific text appears\nphone-cli monitor-ui --watch-for text_appears --text \"Welcome\"\n\n# Monitor UI until specific element ID appears\nphone-cli monitor-ui --watch-for id_appears --id \"login_button\"\n\n# Monitor UI until specific element class appears\nphone-cli monitor-ui --watch-for class_appears --class-name \"android.widget.Button\"\n\n# Monitor UI changes with output as raw JSON\nphone-cli monitor-ui --raw\n```\n\n### Location & Maps\n```bash\n# Search nearby POIs with phone numbers\nphone-cli get-poi 116.480053,39.987005 --keywords restaurant --radius 1000\n```\n\n## üìö Advanced Usage\n\n### App and Activity Launch\n\nThe plugin provides multiple ways to launch apps and activities:\n\n1. **By App Name** (Two Methods): \n   ```bash\n   # Method 1: Using app command (may not work on all devices)\n   phone-cli app camera\n   \n   # Method 2: Using open_app command (alternative if app command fails)\n   phone-cli open_app camera\n   ```\n\n2. **By Package Name** (Two Methods): \n   ```bash\n   # Method 1: Using app command (may not work on all devices)\n   phone-cli app com.android.contacts\n   \n   # Method 2: Using open_app command (alternative if app command fails)\n   phone-cli open_app com.android.contacts\n   ```\n\n3. **By Package and Activity** (Most Reliable Method):\n   ```bash\n   # This method works on all devices\n   phone-cli launch com.android.dialer/com.android.dialer.DialtactsActivity\n   ```\n\n> **Note**: If you encounter issues with the `app` or `open_app` commands, always use the `launch` command with the full component name (package/activity) for the most reliable operation.\n\n### Contact Creation with UI Automation\n\nThe plugin provides a way to create contacts through UI interaction:\n\n```bash\n# Create a new contact with UI automation\nphone-cli create-contact \"John Doe\" \"1234567890\"\n```\n\nThis command will:\n1. Open the contacts app\n2. Navigate to the contact creation interface\n3. Fill in the name and phone number fields\n4. Save the contact automatically\n\n### Screen-Based Automation\n\nThe unified screen interaction interface allows intelligent agents to easily:\n\n1. **Analyze screens**: Get structured analysis of UI elements and text\n2. **Make decisions**: Based on detected UI patterns and available actions\n3. **Execute interactions**: Through a consistent parameter system\n\n### UI Monitoring and Automation\n\nThe plugin provides powerful UI monitoring capabilities to detect interface changes:\n\n1. **Basic UI monitoring**:\n   ```bash\n   # Monitor any UI changes with custom interval (seconds)\n   phone-cli monitor-ui --interval 0.5 --duration 30\n   ```\n\n2. **Wait for specific elements to appear**:\n   ```bash\n   # Wait for text to appear (useful for automated testing)\n   phone-cli monitor-ui --watch-for text_appears --text \"Login successful\"\n   \n   # Wait for specific ID to appear\n   phone-cli monitor-ui --watch-for id_appears --id \"confirmation_dialog\"\n   ```\n\n3. **Monitor elements disappearing**:\n   ```bash\n   # Wait for text to disappear\n   phone-cli monitor-ui --watch-for text_disappears --text \"Loading...\"\n   ```\n\n4. **Get detailed UI change reports**:\n   ```bash\n   # Get raw JSON data with all UI change information\n   phone-cli monitor-ui --raw\n   ```\n\n> **Tip**: UI monitoring is especially useful for automation scripts to wait for loading screens to complete or confirm that actions have taken effect in the UI.\n\n## üìö Detailed Documentation\n\nFor complete documentation and configuration details, visit our [GitHub repository](https://github.com/hao-cyber/phone-mcp).\n\n## üß∞ Tool Documentation\n\n### Screen Interface API\n\nThe plugin provides a powerful screen interface with comprehensive APIs for interacting with the device. Below are the key functions and their parameters:\n\n#### interact_with_screen\n```python\nasync def interact_with_screen(action: str, params: Dict[str, Any] = None) -> str:\n    \"\"\"Execute screen interaction actions\"\"\"\n```\n- **Parameters:**\n  - `action`: Type of action (\"tap\", \"swipe\", \"key\", \"text\", \"find\", \"wait\", \"scroll\")\n  - `params`: Dictionary with parameters specific to each action type\n- **Returns:** JSON string with operation results\n\n**Examples:**\n```python\n# Tap by coordinates\nresult = await interact_with_screen(\"tap\", {\"x\": 100, \"y\": 200})\n\n# Tap by element text\nresult = await interact_with_screen(\"tap\", {\"element_text\": \"Login\"})\n\n# Swipe down\nresult = await interact_with_screen(\"swipe\", {\"x1\": 500, \"y1\": 300, \"x2\": 500, \"y2\": 1200, \"duration\": 300})\n\n# Input text\nresult = await interact_with_screen(\"text\", {\"content\": \"Hello world\"})\n\n# Press back key\nresult = await interact_with_screen(\"key\", {\"keycode\": \"back\"})\n\n# Find element by text\nresult = await interact_with_screen(\"find\", {\"method\": \"text\", \"value\": \"Settings\", \"partial\": True})\n\n# Wait for element to appear\nresult = await interact_with_screen(\"wait\", {\"method\": \"text\", \"value\": \"Success\", \"timeout\": 10, \"interval\": 0.5})\n\n# Scroll to find element\nresult = await interact_with_screen(\"scroll\", {\"method\": \"text\", \"value\": \"Privacy Policy\", \"direction\": \"down\", \"max_swipes\": 8})\n```\n\n#### analyze_screen\n```python\nasync def analyze_screen(include_screenshot: bool = False, max_elements: int = 50) -> str:\n    \"\"\"Analyze the current screen and provide structured information about UI elements\"\"\"\n```\n- **Parameters:**\n  - `include_screenshot`: Whether to include base64-encoded screenshot in result\n  - `max_elements`: Maximum number of UI elements to process\n- **Returns:** JSON string with detailed screen analysis\n\n#### create_contact\n```python\nasync def create_contact(name: str, phone: str) -> str:\n    \"\"\"Create a new contact with the given name and phone number\"\"\"\n```\n- **Parameters:**\n  - `name`: The contact's full name\n  - `phone`: The phone number for the contact\n- **Returns:** JSON string with operation result\n- **Location:** This function is found in the 'contacts.py' module and implements UI automation to create contacts\n\n#### launch_app_activity\n```python\nasync def launch_app_activity(package_name: str, activity_name: Optional[str] = None) -> str:\n    \"\"\"Launch an app using package name and optionally an activity name\"\"\"\n```\n- **Parameters:**\n  - `package_name`: The package name of the app to launch\n  - `activity_name`: The specific activity to launch (optional)\n- **Returns:** JSON string with operation result\n- **Location:** This function is found in the 'apps.py' module\n\n#### launch_intent\n```python\nasync def launch_intent(intent_action: str, intent_type: Optional[str] = None, extras: Optional[Dict[str, str]] = None) -> str:\n    \"\"\"Launch an activity using Android intent system\"\"\"\n```\n- **Parameters:**\n  - `intent_action`: The action to perform\n  - `intent_type`: The MIME type for the intent (optional)\n  - `extras`: Extra data to pass with the intent (optional)\n- **Returns:** JSON string with operation result\n- **Location:** This function is found in the 'apps.py' module\n\n## üìÑ License\n\nApache License, Version 2.0\n\n# Contact Creation Tool\n\nThis tool provides a simple way to create contacts on an Android device using ADB.\n\n## Prerequisites\n\n- Python 3.x\n- ADB (Android Debug Bridge) installed and configured\n- Android device connected and authorized for ADB\n\n## Usage\n\n### Basic Usage\n\nSimply run the script:\n\n```bash\npython create_contact.py\n```\n\nThis will create a contact with default values:\n- Account name: \"‰Ω†ÁöÑË¥¶Êà∑Âêç\"\n- Account type: \"com.google\"\n\n### Advanced Usage\n\nYou can provide custom account name and type using a JSON string:\n\n```bash\npython create_contact.py '{\"account_name\": \"your_account\", \"account_type\": \"com.google\"}'\n```\n\n### Output\n\nThe script outputs a JSON object with:\n- `success`: boolean indicating if the operation was successful\n- `message`: any output or error message from the command\n\nExample success output:\n```json\n{\"success\": true, \"message\": \"\"}\n```\n\n## Error Handling\n\n- If ADB is not available or device is not connected, the script will return an error\n- Invalid JSON input will result in an error message\n- Any ADB command errors will be captured and returned in the message field\n\n## Notes\n\n- Make sure your Android device is connected and authorized for ADB use\n- The device screen should be unlocked when running the command\n- Some devices might require additional permissions to modify contacts\n\n### Apps & Shortcuts\n```bash\n# Get app shortcuts (with pagination)\nphone-cli shortcuts --package \"com.example.app\"\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iot",
        "android",
        "device",
        "phone mcp",
        "iot device",
        "control android"
      ],
      "category": "iot-and-device-control"
    },
    "hyperb1iss--droidmind": {
      "owner": "hyperb1iss",
      "name": "droidmind",
      "url": "https://github.com/hyperb1iss/droidmind",
      "imageUrl": "/freedevtools/mcp/pfp/hyperb1iss.webp",
      "description": "DroidMind enables control of Android devices using AI through natural language commands. It facilitates tasks such as debugging, system analysis, and app management in an integrated environment with the Model Context Protocol.",
      "stars": 244,
      "forks": 36,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-03T06:02:33Z",
      "readme_content": "<div align=\"center\">\n\n# ü§ñ DroidMind üß†\n\n\n\n[![Python 3.13+](https://img.shields.io/badge/python-3.13+-9D00FF.svg?style=for-the-badge&logo=python&logoColor=white)](https://www.python.org/downloads/)\n[![License](https://img.shields.io/badge/license-Apache_2.0-FF00FF.svg?style=for-the-badge&logo=apache&logoColor=white)](LICENSE)\n[![Status](https://img.shields.io/badge/status-active_development-39FF14.svg?style=for-the-badge&logo=githubactions&logoColor=white)](docs/plan.md)\n[![Code Style](https://img.shields.io/badge/code_style-ruff-00FFFF.svg?style=for-the-badge&logo=ruff&logoColor=white)](https://github.com/astral-sh/ruff)\n[![Type Check](https://img.shields.io/badge/type_check-pyright-FFBF00.svg?style=for-the-badge&logo=typescript&logoColor=white)](https://github.com/microsoft/pyright)\n[![MCP](https://img.shields.io/badge/protocol-MCP-E6E6FA.svg?style=for-the-badge&logo=anthropic&logoColor=white)](https://modelcontextprotocol.io/)\n[![Android](https://img.shields.io/badge/platform-android-A4C639.svg?style=for-the-badge&logo=android&logoColor=white)](https://www.android.com/)\n[![Docs](https://img.shields.io/badge/docs-online-FF9E80.svg?style=for-the-badge&logo=gitbook&logoColor=white)](https://hyperb1iss.github.io/droidmind/)\n\n**Control Android devices with AI through the Model Context Protocol**\n\n</div>\n\nDroidMind is a powerful bridge between AI assistants and Android devices, enabling control, debugging, and system analysis through natural language. By implementing the Model Context Protocol (MCP), DroidMind allows AI models to directly interact with Android devices via ADB in a secure, structured way. When used as part of an agentic coding workflow, DroidMind can enable your assistant to build and debug with your device directly in the loop.\n\n## üí´ Core Features\n\nDroidMind empowers AI assistants to:\n\n- üì± **Manage Devices**: Connect via USB/TCP-IP, list devices, view properties, and reboot.\n- üìä **Analyze Systems**: Access logs (logcat, ANR, crash, battery), capture bug reports, and dump heap.\n- üìÇ **Handle Files**: Browse, read, write, push, pull, delete, and manage device files/directories.\n- üì¶ **Control Apps**: Install, uninstall, start, stop, clear data, and inspect app details (manifest, permissions, activities).\n- üñºÔ∏è **Automate UI**: Perform taps, swipes, text input, and key presses.\n- üêö **Execute Shell Commands**: Run ADB shell commands with a security-conscious framework.\n- üîí **Operate Securely**: Benefit from command validation, risk assessment, and sanitization.\n- üí¨ **Integrate Seamlessly**: Connect with any MCP-compatible client (Claude, Cursor, Cline, etc.).\n\nFor a detailed list of capabilities, see the **[User Manual](docs/user_manual/index.md)** and **[MCP Reference](docs/mcp-reference.md)**.\n\n## üöÄ Getting Started\n\n### Quickstart for IDEs (Zero Install with `uvx`)\n\nFor the fastest way to integrate DroidMind with an MCP-compatible IDE (like Cursor), you can configure it to run DroidMind directly from its GitHub repository using `uvx`. This method **does not require you to manually clone or install DroidMind first**.\n\nAdd the following to your IDE's MCP configuration (e.g., `.cursor/mcp.json` for Cursor):\n\n```json\n{\n  \"mcpServers\": {\n    \"droidmind\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--from\",\n        \"git+https://github.com/hyperb1iss/droidmind\",\n        \"droidmind\",\n        \"--transport\",\n        \"stdio\" // The default and preferred mode for most IDE integrations\n      ]\n    }\n  }\n}\n```\n\nYour IDE will be configured to launch DroidMind on demand. Full instructions for this setup are in the **[Quick Start Guide](docs/quickstart.md#1-configure-your-ide-to-run-droidmind-via-uvx)**.\n\n### Prerequisites\n\n- Python 3.13 or higher\n- `uv` (Python package manager)\n- Android device with USB debugging enabled\n- ADB (Android Debug Bridge) installed and in your system's PATH\n\n### Installation\n\nFor detailed instructions on setting up DroidMind, including the quick IDE integration with `uvx` (covered in the Quick Start), manual installation from source, or using Docker, please see our comprehensive **[Installation Guide](docs/installation.md)**.\n\n### Running DroidMind\n\nHow you run DroidMind depends on your setup:\n\n- **IDE Integration (via `uvx`)**: Your IDE automatically manages running DroidMind as configured in its MCP settings (e.g., `mcp.json`). See the [Quick Start Guide](docs/quickstart.md).\n- **Manual Installation**: After installing from source, you can run DroidMind directly.\n  - **Stdio (for direct terminal interaction or some IDE setups):**\n    ```bash\n    droidmind --transport stdio\n    ```\n  - **SSE (for web UIs or AI assistants like Claude Desktop):**\n    ```bash\n    droidmind --transport sse\n    ```\n    This usually starts a server at `sse://localhost:4256/sse`.\n- **Docker**: Refer to the [Docker Guide](docs/docker.md) for commands to run DroidMind in a container.\n\nRefer to the **[Installation Guide](docs/installation.md)** for more details on running DroidMind in different environments.\n\n## üê≥ Running with Docker\n\nDroidMind can also be run using Docker for a consistent, containerized environment. This is particularly useful for deployment and isolating dependencies.\n\nFor comprehensive instructions on building the Docker image and running DroidMind in a container with `stdio` or `SSE` transport, including notes on ADB device access, please refer to our **[Docker Guide](docs/docker.md)**.\n\n## üîÆ Example AI Assistant Queries\n\nWith an AI assistant connected to DroidMind, you can make requests like:\n\n- \"List all connected Android devices and show their properties.\"\n- \"Take a screenshot of my Pixel.\"\n- \"Install this APK on `emulator-5554`.\"\n- \"Show me the recent crash logs from `your_device_serial`.\"\n- \"Tap the 'Next' button on the current screen of `emulator-5554`.\"\n\nFor more inspiration, check out our **[Example Queries and Workflows](docs/user_manual/example_queries.md)** in the User Manual.\n\n## üîí Security\n\nDroidMind incorporates a security framework to protect your devices:\n\n- **Command Validation & Sanitization**\n- **Risk Assessment Categorization**\n- **Protected Path Operations**\n- **Comprehensive Logging**\n\nHigh-risk operations are flagged, and critical ones are blocked by default. Learn more in our **[Security Considerations](docs/user_manual/security.md)** chapter.\n\n## üíª Development\n\nDroidMind uses `uv` for dependency management and development workflows.\n\n```bash\n# Install/update dependencies (after cloning and activating .venv)\nuv pip install -e .[dev,sse]\n\n# Run tests\npytest\n\n# Run linting\nruff check .\n\n# Run type checking\npyright # Ensure pyright is installed or use ruff's type checking capabilities\n```\n\n## ü§ù Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1.  Fork the repository.\n2.  Create your feature branch (`git checkout -b feature/amazing-feature`).\n3.  Set up your development environment with `uv`.\n4.  Make your changes.\n5.  Run tests, linting, and type checking.\n6.  Commit your changes (`git commit -m 'Add some amazing feature'`).\n7.  Push to the branch (`git push origin feature/amazing-feature`).\n8.  Open a Pull Request.\n\n## üìù License\n\nThis project is licensed under the Apache License - see the [LICENSE](LICENSE) file for details.\n\n---\n\n<div align=\"center\">\n\nCreated by [Stefanie Jane üå†](https://github.com/hyperb1iss)\n\nIf you find DroidMind useful, [buy me a Monster Ultra Violet ‚ö°Ô∏è](https://ko-fi.com/hyperb1iss)\n\n</div>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "droidmind",
        "iot",
        "android",
        "droidmind enables",
        "hyperb1iss droidmind",
        "droidmind droidmind"
      ],
      "category": "iot-and-device-control"
    },
    "jiantao88--android-mcp-server": {
      "owner": "jiantao88",
      "name": "android-mcp-server",
      "url": "https://github.com/jiantao88/android-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/jiantao88.webp",
      "description": "Interact with Android devices to manage applications, files, and device settings directly from a development environment. Provides functionality for listing connected devices, installed packages, and inputting text on devices.",
      "stars": 14,
      "forks": 3,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-05-26T05:49:50Z",
      "readme_content": "# ADB MCP ÊúçÂä°Âô®\n\nËøôÊòØ‰∏Ä‰∏™Áî®‰∫é Android Debug Bridge (ADB) ÁöÑ MCP ÊúçÂä°Âô®Ôºå‰Ωø Claude ËÉΩÂ§ü‰∏é Android ËÆæÂ§áËøõË°å‰∫§‰∫í„ÄÇ\n\n## ÊäÄÊúØÊñáÁ´†\n\n- [‰ªé 0 Âà∞ 1 ÂºÄÂèë‰∏Ä‰∏™ Android MCP ÊúçÂä°ÔºöÁêÜËß£ MCP ÂçèËÆÆ‰∏é ADB ÈõÜÊàê](https://juejin.cn/post/7480747396454563874)\n\n## Â∑•ÂÖ∑ÂàóË°®\n\n1. `get-devices`\n\n   - ÂàóÂá∫Â∑≤ËøûÊé•ÁöÑ Android ËÆæÂ§á\n   - ÂèØÈÄâÂèÇÊï∞Ôºö\n     - `showDetails` (Â∏ÉÂ∞îÂÄº, ÈªòËÆ§: true): ÊòæÁ§∫ËÆæÂ§áËØ¶ÁªÜ‰ø°ÊÅØ (-l)\n\n2. `list-packages`\n\n   - ÂàóÂá∫ËÆæÂ§á‰∏äÂ∑≤ÂÆâË£ÖÁöÑËΩØ‰ª∂ÂåÖ\n   - ÂèØÈÄâÂèÇÊï∞Ôºö\n     - `showPath` (Â∏ÉÂ∞îÂÄº, ÈªòËÆ§: false): ÊòæÁ§∫ APK Êñá‰ª∂Ë∑ØÂæÑ (-f)\n     - `showDisabled` (Â∏ÉÂ∞îÂÄº, ÈªòËÆ§: false): ‰ªÖÊòæÁ§∫Â∑≤Á¶ÅÁî®ÁöÑÂåÖ (-d)\n     - `showEnabled` (Â∏ÉÂ∞îÂÄº, ÈªòËÆ§: false): ‰ªÖÊòæÁ§∫Â∑≤ÂêØÁî®ÁöÑÂåÖ (-e)\n     - `showSystem` (Â∏ÉÂ∞îÂÄº, ÈªòËÆ§: false): ‰ªÖÊòæÁ§∫Á≥ªÁªüÂåÖ (-s)\n     - `showThirdParty` (Â∏ÉÂ∞îÂÄº, ÈªòËÆ§: false): ‰ªÖÊòæÁ§∫Á¨¨‰∏âÊñπÂåÖ (-3)\n     - `showInstaller` (Â∏ÉÂ∞îÂÄº, ÈªòËÆ§: false): ÊòæÁ§∫ÂåÖÂÆâË£ÖÁ®ãÂ∫è (-i)\n     - `includeUninstalled` (Â∏ÉÂ∞îÂÄº, ÈªòËÆ§: false): ÂåÖÂê´Â∑≤Âç∏ËΩΩÁöÑÂåÖ (-u)\n\n3. `input-text`\n\n   - ÂêëËÆæÂ§áËæìÂÖ•ÊñáÊú¨\n   - ÂøÖÈúÄÂèÇÊï∞Ôºö\n     - `text` (Â≠óÁ¨¶‰∏≤): Ë¶ÅËæìÂÖ•ÁöÑÊñáÊú¨\n\n4. `install-apk`\n\n   - ÂÆâË£Ö APK Êñá‰ª∂Âà∞ËÆæÂ§á\n   - ÂøÖÈúÄÂèÇÊï∞Ôºö\n     - `apkPath` (Â≠óÁ¨¶‰∏≤): APK Êñá‰ª∂Ë∑ØÂæÑ\n   - ÂèØÈÄâÂèÇÊï∞Ôºö\n     - `allowReinstall` (Â∏ÉÂ∞îÂÄº, ÈªòËÆ§: true): ÂÖÅËÆ∏ÈáçÊñ∞ÂÆâË£Ö (-r)\n     - `allowTestPackages` (Â∏ÉÂ∞îÂÄº, ÈªòËÆ§: true): ÂÖÅËÆ∏ÊµãËØïÂåÖ (-t)\n     - `allowDowngrade` (Â∏ÉÂ∞îÂÄº, ÈªòËÆ§: true): ÂÖÅËÆ∏ÈôçÁ∫ß (-d)\n     - `grantPermissions` (Â∏ÉÂ∞îÂÄº, ÈªòËÆ§: false): Êéà‰∫àÊâÄÊúâÊùÉÈôê (-g)\n\n5. `uninstall-apk`\n\n   - Âç∏ËΩΩÂ∫îÁî®Á®ãÂ∫è\n   - ÂøÖÈúÄÂèÇÊï∞Ôºö\n     - `packageName` (Â≠óÁ¨¶‰∏≤): Ë¶ÅÂç∏ËΩΩÁöÑÂåÖÂêç\n   - ÂèØÈÄâÂèÇÊï∞Ôºö\n     - `keepData` (Â∏ÉÂ∞îÂÄº, ÈªòËÆ§: false): ‰øùÁïôÂ∫îÁî®Êï∞ÊçÆÂíåÁºìÂ≠ò (-k)\n\n6. `clear-app-data`\n\n   - Ê∏ÖÈô§Â∫îÁî®Á®ãÂ∫èÊï∞ÊçÆ\n   - ÂøÖÈúÄÂèÇÊï∞Ôºö\n     - `packageName` (Â≠óÁ¨¶‰∏≤): Ë¶ÅÊ∏ÖÈô§Êï∞ÊçÆÁöÑÂåÖÂêç\n\n7. `pull`\n\n   - ‰ªéËÆæÂ§áÊãâÂèñÊñá‰ª∂\n   - ÂøÖÈúÄÂèÇÊï∞Ôºö\n     - `remotePath` (Â≠óÁ¨¶‰∏≤): ËÆæÂ§á‰∏äÁöÑÊñá‰ª∂Ë∑ØÂæÑ\n   - ÂèØÈÄâÂèÇÊï∞Ôºö\n     - `localPath` (Â≠óÁ¨¶‰∏≤): Êú¨Âú∞ÁõÆÊ†áË∑ØÂæÑ\n\n8. `push`\n\n   - Êé®ÈÄÅÊñá‰ª∂Âà∞ËÆæÂ§á\n   - ÂøÖÈúÄÂèÇÊï∞Ôºö\n     - `localPath` (Â≠óÁ¨¶‰∏≤): Êú¨Âú∞Êñá‰ª∂Ë∑ØÂæÑ\n     - `remotePath` (Â≠óÁ¨¶‰∏≤): ËÆæÂ§á‰∏äÁöÑÁõÆÊ†áË∑ØÂæÑ\n\n9. `screencap`\n\n   - Êà™ÂèñÂ±èÂπïÊà™Âõæ\n   - ÂøÖÈúÄÂèÇÊï∞Ôºö\n     - `remotePath` (Â≠óÁ¨¶‰∏≤): Âú®ËÆæÂ§á‰∏ä‰øùÂ≠òÊà™ÂõæÁöÑË∑ØÂæÑÔºà‰æãÂ¶ÇÔºö/sdcard/screenshot.pngÔºâ\n   - ÂèØÈÄâÂèÇÊï∞Ôºö\n     - `usePng` (Â∏ÉÂ∞îÂÄº, ÈªòËÆ§: true): ‰øùÂ≠ò‰∏∫ PNG Ê†ºÂºè (-p)\n\n10. `rm`\n\n    - ‰ªé Android ËÆæÂ§áÂà†Èô§Êñá‰ª∂\n    - ÂøÖÈúÄÂèÇÊï∞Ôºö\n      - `path` (Â≠óÁ¨¶‰∏≤): Ë¶ÅÂà†Èô§ÁöÑËÆæÂ§á‰∏äÁöÑÊñá‰ª∂Ë∑ØÂæÑ\n    - ÂèØÈÄâÂèÇÊï∞Ôºö\n      - `force` (Â∏ÉÂ∞îÂÄº, ÈªòËÆ§: false): Âº∫Âà∂Âà†Èô§ (-f)\n      - `recursive` (Â∏ÉÂ∞îÂÄº, ÈªòËÆ§: false): ÈÄíÂΩíÂà†Èô§ (-r)\n\n11. `reset-permissions`\n\n    - ÈáçÁΩÆÂ∫îÁî®ÁöÑÊâÄÊúâÊùÉÈôê\n    - ÂøÖÈúÄÂèÇÊï∞Ôºö\n      - `packageName` (Â≠óÁ¨¶‰∏≤): ÁõÆÊ†áÂåÖÂêç\n\n12. `grant-permission`\n    - Êéà‰∫àÁâπÂÆöÊùÉÈôê\n    - ÂøÖÈúÄÂèÇÊï∞Ôºö\n      - `packageName` (Â≠óÁ¨¶‰∏≤): ÁõÆÊ†áÂåÖÂêç\n      - `permission` (Â≠óÁ¨¶‰∏≤): Ë¶ÅÊéà‰∫àÁöÑÊùÉÈôê\n\n## ËÆæÁΩÆËØ¥Êòé\n\n1. ÂÆâË£Ö ADB:\n\n   - ‰∏ãËΩΩ Android SDK Platform Tools\n   - Â∞Ü ADB Ê∑ªÂä†Âà∞Á≥ªÁªüÁéØÂ¢ÉÂèòÈáè\n   - ‰ΩøÁî® `adb version` È™åËØÅÂÆâË£Ö\n\n2. ÂêØÁî® USB Ë∞ÉËØï:\n   - Âú® Android ËÆæÂ§á‰∏äÔºåËøõÂÖ•ËÆæÁΩÆ > ÂÖ≥‰∫éÊâãÊú∫\n   - ÁÇπÂáªÁâàÊú¨Âè∑ 7 Ê¨°‰ª•ÂêØÁî®ÂºÄÂèëËÄÖÈÄâÈ°π\n   - Âú®ÂºÄÂèëËÄÖÈÄâÈ°π‰∏≠ÂêØÁî® USB Ë∞ÉËØï\n\n### ÂÆâË£ÖÊúçÂä°Âô®\n\n```shell\n# ÂÖãÈöÜ‰ªìÂ∫ì\ngit clone [repository-url]\ncd mcp-server-adb\n\n# ÂÆâË£Ö‰æùËµñ\nnpm install\n\n# ÊûÑÂª∫È°πÁõÆ\nnpm run build\n```\n\n### Âú® Claude Desktop ‰∏≠‰ΩøÁî®\n\nÂú®‰Ω†ÁöÑ `claude_desktop_config.json` ‰∏≠Ê∑ªÂä†‰ª•‰∏ãÂÜÖÂÆπÔºö\n\n```json\n{\n  \"mcpServers\": {\n    \"adb\": {\n      \"command\": \"node\",\n      \"args\": [\"-y\", \"/path/to/mcp-server-adb/build/index.js\", \"/path/to/adb\"]\n    }\n  }\n}\n```\n\nËØ∑Â∞Ü /path/to/adb ÊõøÊç¢‰∏∫‰Ω†ÂÆûÈôÖÁöÑ ADB ÂèØÊâßË°åÊñá‰ª∂Ë∑ØÂæÑ„ÄÇ\n\n### Âú® Windsurf ‰∏≠‰ΩøÁî®\n\n1. È¶ñÂÖàÁ°Æ‰øùÂ∑≤ÁªèÂÆâË£Ö‰∫Ü Node.js Âíå ADB\n\n2. ÂÖãÈöÜÂπ∂ÊûÑÂª∫È°πÁõÆÔºö\n\n   ```shell\n   git clone https://github.com/jiantao88/android-mcp-server.git\n   cd android-mcp-server\n   npm install\n   npm run build\n   ```\n\n   ÊàñËÄÖÁõ¥Êé•‰ΩøÁî®Â∑≤ÁªèÂÖãÈöÜÁöÑÈ°πÁõÆÔºö\n\n   ```shell\n   cd /path/to/android-mcp-server\n   npm install\n   npm run build\n   ```\n\n3. Âú® Windsurf ÁöÑËÆæÁΩÆ‰∏≠Ê∑ªÂä† MCP ÈÖçÁΩÆÔºö\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"adb\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"/path/to/android-mcp-server/build/index.js\",\n           \"/usr/local/bin/adb\"\n         ]\n       }\n     }\n   }\n   ```\n\n   Ê≥®ÊÑèÔºö\n\n   - Â∞ÜË∑ØÂæÑ‰∏≠ÁöÑË∑ØÂæÑÊõøÊç¢‰∏∫‰Ω†ÁöÑÂÆûÈôÖË∑ØÂæÑ\n   - `/usr/local/bin/adb` ÊòØ ADB ÁöÑÈªòËÆ§ÂÆâË£ÖË∑ØÂæÑÔºåÂ¶ÇÊûú‰Ω†ÁöÑ ADB ÂÆâË£ÖÂú®ÂÖ∂‰ªñ‰ΩçÁΩÆÔºåËØ∑Áõ∏Â∫î‰øÆÊîπ\n   - Á°Æ‰øùÊâÄÊúâË∑ØÂæÑÈÉΩ‰ΩøÁî®ÁªùÂØπË∑ØÂæÑ\n\n4. ÈáçÂêØ Windsurf ‰ΩøÈÖçÁΩÆÁîüÊïà\n\n## ËÆ∏ÂèØËØÅ\n\nÊú¨È°πÁõÆÈááÁî® MIT ËÆ∏ÂèØËØÅ - ËØ¶ËßÅ [LICENSE](./LICENSE) Êñá‰ª∂„ÄÇ\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iot",
        "android",
        "devices",
        "android mcp",
        "iot device",
        "jiantao88 android"
      ],
      "category": "iot-and-device-control"
    },
    "kennethreitz--mcp-applemusic": {
      "owner": "kennethreitz",
      "name": "mcp-applemusic",
      "url": "https://github.com/kennethreitz/mcp-applemusic",
      "imageUrl": "/freedevtools/mcp/pfp/kennethreitz.webp",
      "description": "Control Apple Music on macOS through AppleScript commands, managing playback, searching for songs, and handling playlists efficiently.",
      "stars": 59,
      "forks": 14,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T12:27:42Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/kennethreitz-mcp-applemusic-badge.png)](https://mseep.ai/app/kennethreitz-mcp-applemusic)\n\n# MCP-AppleMusic\n\nA FastMCP server implementation for controlling Apple Music (formerly iTunes) on macOS through AppleScript commands.\n\n## Requirements\n\n- Python 3.13+\n- macOS with Apple Music app installed\n- MCP library ‚â•1.2.1\n\n## Installation\n\nFirst, ensure you have uv installed:\n```bash\n$ brew install uv\n```\n\nThen, with **Claude Desktop**, add the following to `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"iTunesControlServer\": {\n      \"command\": \"uvx\",\n      \"args\": [\"-p\", \"3.13\", \"-n\", \"mcp-applemusic\"]\n    }\n  }\n}\n```\n\n## Available Commands\n\nThe following commands are available through the MCP server:\n\n```python\nitunes_play()         # Start playback\nitunes_pause()        # Pause playback\nitunes_next()         # Skip to next track\nitunes_previous()     # Go to previous track\nitunes_search(query)  # Search library for tracks\nitunes_play_song(song)  # Play specific song\nitunes_create_playlist(name, songs)  # Create new playlist\nitunes_library()      # Get library statistics\n```\n\n## Usage\n\nStart the server:\n\n```bash\npython server.py\n```\n\nExample interactions:\n\n```python\n# Search for a song\nresults = itunes_search(\"Hey Jude\")\n\n# Create a new playlist\nitunes_create_playlist(\"Beatles Favorites\", [\"Yesterday\", \"Hey Jude\", \"Let It Be\"])\n\n# Play a specific song\nitunes_play_song(\"Hey Jude\")\n```\n\n## Development\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/yourusername/mcp-applemusic.git\ncd mcp-applemusic\n```\n\n2. Install development dependencies:\n```bash\npip install -e \".[dev]\"\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Notes\n\n- This tool only works on macOS systems due to its AppleScript dependency\n- Requires Apple Music (formerly iTunes) to be installed\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "applemusic",
        "playlists",
        "iot",
        "applemusic control",
        "mcp applemusic",
        "music macos"
      ],
      "category": "iot-and-device-control"
    },
    "kmwebnet--MCP-Server-for-sensor-device": {
      "owner": "kmwebnet",
      "name": "MCP-Server-for-sensor-device",
      "url": "https://github.com/kmwebnet/MCP-Server-for-sensor-device",
      "imageUrl": "/freedevtools/mcp/pfp/kmwebnet.webp",
      "description": "Simulates and interacts with a CO2 sensor device, providing real-time monitoring of CO2 levels and device connectivity management. Supports both simulation and real modes, with JSON-RPC for device interaction and data publishing.",
      "stars": 2,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-04-02T04:44:53Z",
      "readme_content": "# MCP Server for sensor device\n\nThis project is a Node.js application designed for use with Claude Desktop. It simulates a CO2 sensor device and provides a JSON-RPC server to interact with the device. The application can run in both simulation mode and real mode, where it connects to a Raspberry Pi Pico via USB to read CO2 levels.\n\n## Features\n\n- Simulates a CO2 sensor device with random CO2 levels in simulation mode.\n- Connects to a Raspberry Pi Pico via USB to read real CO2 levels.\n- Provides device information, sensor data, and network status via JSON-RPC.\n- Supports commands to publish data to MQTT, reconnect WiFi, and reconnect MQTT (some functionalities are mocked).\n\n## Installation\n\nYou need to have Node.js installed on your machine to run this application. If you don't have Node.js installed, you can download it from the [official website](https://nodejs.org/).\n1. Clone the repository.\n2. Install the dependencies using npm:\n\n   ```sh\n   npm install\n   ```\n\n## Configuration\n\nEnsure that the `claude_desktop_config.json` file is correctly configured to run the server. Example configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"CO2 sensor\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"...mcp-server-for-sensor-device/index.js\"\n      ],\n      \"env\": {}\n    }\n  }\n}\n```\n\n## Usage\n\nTo start the server, run the following command:\n\n```sh\nnode index.js\n```\n\n## JSON-RPC Methods\n\n### `initialize`\n\nInitializes the server and returns server capabilities.\n\n### `shutdown`\n\nShuts down the server.\n\n### `resources/list`\n\nLists available resources.\n\n### `resources/read`\n\nReads the specified resource.\n\n### `tools/list`\n\nLists available tools.\n\n### `tools/call`\n\nCalls the specified tool.\n\n## DeviceState Class\n\nThe `DeviceState` class simulates the device state and provides methods to get device information, sensor data, and network status. It also handles the connection to the Raspberry Pi Pico and reads CO2 levels.\n\n### Methods\n\n- `getDeviceInfo()`: Returns device information.\n- `getSensorData()`: Returns sensor data.\n- `getNetworkStatus()`: Returns network status (mocked functionality).\n- `publishToMQTT()`: Simulates publishing data to MQTT (mocked functionality).\n- `reconnectWiFi()`: Simulates reconnecting to WiFi (mocked functionality).\n- `reconnectMQTT()`: Simulates reconnecting to MQTT (mocked functionality).\n\n## Logging\n\nThe application logs CO2 levels and other information to a log file located in the user's home directory (`co2_level.log`).\n\n## License\n\nThis project is licensed under the MIT License.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iot",
        "kmwebnet",
        "sensor",
        "iot device",
        "server sensor",
        "kmwebnet mcp"
      ],
      "category": "iot-and-device-control"
    },
    "landicefu--android-adb-mcp-server": {
      "owner": "landicefu",
      "name": "android-adb-mcp-server",
      "url": "https://github.com/landicefu/android-adb-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/landicefu.webp",
      "description": "Interact with Android devices to automate development and testing operations, execute commands, manage applications, and transfer files. Integrates AI capabilities with Android device management for improved functionality.",
      "stars": 27,
      "forks": 6,
      "license": "ISC License",
      "language": "JavaScript",
      "updated_at": "2025-09-25T00:27:43Z",
      "readme_content": "# Android ADB MCP Server\n\nA Model Context Protocol (MCP) server that enables AI assistants to interact with Android devices through the Android Debug Bridge (ADB). This server bridges the gap between AI capabilities and Android device management, allowing for seamless automation of Android development and testing operations.\n\n## ‚öôÔ∏è Quick Setup\n\nAdd the server to your MCP configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"android-adb\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@landicefu/android-adb-mcp-server\"],\n      \"env\": {},\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n  }\n}\n```\n\n### Configuration Locations\n\n- **Claude Desktop**: `~/Library/Application Support/Claude/claude_desktop_config.json` (macOS)\n- **Cline/Roo Code**: `~/Library/Application Support/Code/User/globalStorage/rooveterinaryinc.roo-cline/settings/cline_mcp_settings.json` (macOS)\n- For Windows/Linux, check the equivalent application support directories\n\nAfter configuring, restart your AI assistant to load the new server configuration.\n\n## üìã Prerequisites\n\n- **ADB (Android Debug Bridge)** must be installed and available in your system PATH\n  - [Install ADB on Windows, macOS, or Linux](https://developer.android.com/tools/adb)\n  - Verify installation by running `adb version` in your terminal\n- For clipboard functionality:\n  - **macOS**: `osascript` (built-in)\n  - **Windows**: PowerShell (built-in)\n  - **Linux**: `xclip` (install via `apt-get install xclip` or equivalent)\n- Node.js 16.x or higher\n\n## üöÄ Features\n\n- Connect to and manage multiple Android devices\n- Execute shell commands on Android devices\n- Install and uninstall applications\n- Push and pull files between local system and Android devices\n- Launch applications on Android devices\n- Take screenshots and save them locally or copy to clipboard\n- Smart device selection when multiple devices are connected\n\n## üõ†Ô∏è Available Tools\n\n| Tool | Description | Required Parameters | Optional Parameters |\n|------|-------------|---------------------|---------------------|\n| `adb_devices` | List connected devices | None | None |\n| `adb_shell` | Execute shell commands | `command` | `device_id` |\n| `adb_install` | Install APK files | `path` | `device_id` |\n| `adb_uninstall` | Uninstall applications | `package_name` | `device_id` |\n| `adb_list_packages` | List installed packages | None | `device_id`, `filter` |\n| `adb_pull` | Pull files from device | `remote_path`, `local_path` | `device_id` |\n| `adb_push` | Push files to device | `local_path`, `remote_path` | `device_id` |\n| `launch_app` | Launch an application | `package_name` | `device_id` |\n| `take_screenshot_and_save` | Take and save screenshot | `output_path` | `device_id`, `format` |\n| `take_screenshot_and_copy_to_clipboard` | Take screenshot to clipboard | None | `device_id`, `format` |\n\n### Device Management\n\nThe server intelligently handles device selection:\n- If only one device is connected, it will be used automatically\n- If multiple devices are connected, you must specify a `device_id` parameter\n- If no devices are connected, an error will be returned\n\n### Screenshot Path Resolution\n\nWhen specifying the `output_path` for saving screenshots, the path is resolved as follows:\n- Absolute paths are used as-is\n- Paths starting with `~` are expanded to the user's home directory\n- Relative paths are resolved relative to the user's home directory\n\nThis ensures that screenshots are saved to a location where the MCP server has write permissions.\n\n## üîç Troubleshooting\n\n### Common Issues\n\n1. **\"ADB is not available\" error**\n   - Ensure ADB is installed and in your system PATH\n   - Verify by running `adb version` in your terminal\n\n2. **\"No Android devices connected\" error**\n   - Check if your device is properly connected with `adb devices`\n   - Ensure USB debugging is enabled on your device\n   - Try restarting ADB with `adb kill-server` followed by `adb start-server`\n\n3. **\"Multiple devices connected\" error**\n   - Specify the `device_id` parameter in your tool call\n   - Get the list of available devices with the `adb_devices` tool\n\n4. **Screenshot to clipboard not working**\n   - Ensure the required platform-specific tools are installed\n\n## üîß Alternative Installation Methods\n\n### Option 1: Install from npm\n\n```bash\n# Install globally\nnpm install -g @landicefu/android-adb-mcp-server\n\n# Or install locally in your project\nnpm install @landicefu/android-adb-mcp-server\n```\n\n### Option 2: Manual Installation from Source\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/landicefu/android-adb-mcp-server.git\n   cd android-adb-mcp-server\n   ```\n\n2. Install dependencies and build:\n   ```bash\n   npm install\n   npm run build\n   ```\n\n3. Configure with direct path:\n   ```json\n   {\n     \"mcpServers\": {\n       \"android-adb\": {\n         \"command\": \"node\",\n         \"args\": [\"/path/to/android-adb-mcp-server/build/index.js\"],\n         \"env\": {},\n         \"disabled\": false,\n         \"alwaysAllow\": []\n       }\n     }\n   }\n   ```\n\n## üìÑ License\n\nThis project is licensed under the ISC License - see the LICENSE file for details.\n\n## ü§ù Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iot",
        "android",
        "devices",
        "iot device",
        "android device",
        "landicefu android"
      ],
      "category": "iot-and-device-control"
    },
    "magiczn--anypixel": {
      "owner": "magiczn",
      "name": "anypixel",
      "url": "https://github.com/magiczn/anypixel",
      "imageUrl": "/freedevtools/mcp/pfp/magiczn.webp",
      "description": "Create large, interactive displays using web technologies by leveraging customizable hardware and software components. AnyPixel provides a straightforward framework to turn spaces into engaging visual experiences with interactive elements.",
      "stars": 0,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "C",
      "updated_at": "2016-07-17T15:54:59Z",
      "readme_content": "![img](https://github.com/googlecreativelab/anypixel/blob/master/header.png)\n\n[AnyPixel.js](http://googlecreativelab.github.io/anypixel) is an open-source software and hardware library that makes it possible to use the web to create big, unusual, interactive displays. Anyone can fork the code and the schematics to create their own display at any scale.\n\nThe first display using this platform is in the 8th Avenue lobby at the Google NYC office. To create this installation, we used 5880 off-the-shelf arcade buttons with LEDs inside them as our pixels. AnyPixel.js‚Äô straightforward hardware/software framework makes it easy to build any display where each pixel is an interactive element.\n\n![buttonwall](https://github.com/googlecreativelab/anypixel/blob/master/buttonwall.jpg)\n\n## What You'll Find\n- **/hardware** - EAGLE schematics, board layouts, CAD files, wiring diagrams, and blueprints.\n- **/firmware** - microcontroller code, written for the STM32 family of devices.\n- **/backend** - node.js and chrome applications for communicating with the hardware.\n- **/frontend** - the app framework, an in-browser previewer, and 12 example apps written by Googlers and friends worldwide.\n\n## Getting Started\n\n### Check out the examples \nWe've included 12 example apps written by Googlers and friends for the 8th Avenue lobby display in NYC. To check them out, install the [previewer](https://github.com/googlecreativelab/anypixel/tree/master/frontend/previewer) and run one of the [examples](https://github.com/googlecreativelab/anypixel/tree/master/frontend/examples).\n\n### Build your own app \nBuilding your own app is easy with the Anypixel framework. To get started, check out the [framework documentation](https://github.com/googlecreativelab/anypixel/tree/master/frontend/framework) and the [example app](https://github.com/googlecreativelab/anypixel/tree/master/frontend/examples/getting-started):\n\n```js\nvar anypixel = require('anypixel'); \nvar ctx = anypixel.canvas.getContext2D();\n\nvar colors = ['#F00', '#0F0', '#00F'];\n\n/**  \n * * Listen for onButtonDown events and draw a 2x2 rectangle at the event site\n */\ndocument.addEventListener('onButtonDown', function(event) {   \n\tctx.fillStyle = colors[Math.floor(Math.random() * colors.length)];\n\tctx.fillRect(event.detail.x - 1, event.detail.y - 1, 2, 2);\n}); \n```\n\n## Contributors\n- [Jeremy Abel](https://github.com/jeremyabel)\n- [Kyle Phillips](https://github.com/hapticdata)\n- [Nick Fox-Gieg](https://github.com/n1ckfg)\n- [Jeramy Morrill](https://github.com/theceremony)\n- [Manny Tan](https://github.com/mannytan)\n- [Felix Woitzel](https://github.com/flexi23)\n- [Anders Hoff](https://github.com/inconvergent)\n- [Dimitry Bentsionov](https://github.com/dimitry)\n- [Nick Stahlnecker](https://github.com/Stahlneckr)\n\n\n## Note\nThird party directories may have different (non-Apache 2.0) licenses.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "anypixel",
        "iot",
        "magiczn",
        "magiczn anypixel",
        "anypixel provides",
        "anypixel create"
      ],
      "category": "iot-and-device-control"
    },
    "mathd--govee_mcp_server": {
      "owner": "mathd",
      "name": "govee_mcp_server",
      "url": "https://github.com/mathd/govee_mcp_server",
      "imageUrl": "/freedevtools/mcp/pfp/mathd.webp",
      "description": "Control Govee LED devices using the Govee API, enabling management of lighting functionalities such as color changes and brightness adjustments.",
      "stars": 3,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-06T14:03:02Z",
      "readme_content": "# Govee MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@mathd/govee_mcp_server)](https://smithery.ai/server/@mathd/govee_mcp_server)\n\nAn MCP server for controlling Govee LED devices through the Govee API.\n\n## Setup\n\n### Environment Variables\n\nCreate a `.env` file in the root directory with the following variables:\n\n```bash\nGOVEE_API_KEY=your_api_key_here\nGOVEE_DEVICE_ID=your_device_id_here\nGOVEE_SKU=your_device_sku_here\n```\n\nTo get these values:\n1. Get your API key from the Govee Developer Portal\n2. Use the Govee Home app to find your device ID and SKU\n\n## Installation\n\n### Installing via Smithery\n\nTo install Govee MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@mathd/govee_mcp_server):\n\n```bash\nnpx -y @smithery/cli install @mathd/govee_mcp_server --client claude\n```\n\n### Manual Installation\n\n```bash\n# Install with pip\npip install .\n\n# For development (includes test dependencies)\npip install -e \".[test]\"\n```\n\n## Usage\n\n### MCP Server\n\nThe MCP server provides tools for controlling Govee devices through the Model Context Protocol. It can be used with Cline or other MCP clients.\n\nAvailable tools:\n- `turn_on_off`: Turn the LED on or off\n- `set_color`: Set the LED color using RGB values\n- `set_brightness`: Set the LED brightness level\n\n### Command Line Interface\n\nA CLI is provided for direct control of Govee devices:\n\n```bash\n# Turn device on/off\ngovee-cli power on\ngovee-cli power off\n\n# Set color using RGB values (0-255)\ngovee-cli color 255 0 0  # Red\ngovee-cli color 0 255 0  # Green\ngovee-cli color 0 0 255  # Blue\n\n# Set brightness (0-100)\ngovee-cli brightness 50\n```\n\nRun `govee-cli --help` for full command documentation.\n\n## Development\n\n### Running Tests\n\nTo run the test suite:\n\n```bash\n# Install test dependencies\npip install -e \".[test]\"\n\n# Run all tests\npytest tests/\n\n# Run specific test files\npytest tests/test_server.py  # Server tests (mocked API calls)\npytest tests/test_cli.py    # CLI tests (real API calls)\n\n# Run tests with verbose output\npytest tests/ -v\n```\n\nNote: The CLI tests make real API calls to your Govee device and will actually control it. Make sure your device is powered and connected before running these tests.\n\n### Project Structure\n\n```\n.\n‚îú‚îÄ‚îÄ src/govee_mcp_server/\n‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ   ‚îú‚îÄ‚îÄ server.py    # MCP server implementation\n‚îÇ   ‚îî‚îÄ‚îÄ cli.py       # Command-line interface\n‚îú‚îÄ‚îÄ tests/\n‚îÇ   ‚îú‚îÄ‚îÄ test_server.py  # Server tests (with mocked API)\n‚îÇ   ‚îî‚îÄ‚îÄ test_cli.py     # CLI tests (real API calls)\n‚îî‚îÄ‚îÄ pyproject.toml      # Project configuration\n```\n\n### Test Coverage\n\n- Server tests cover:\n  - Environment initialization\n  - Govee API client methods\n  - Server tools and utilities\n  - Error handling\n\n- CLI tests perform real-world integration testing by executing actual API calls to control your Govee device.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iot",
        "govee",
        "govee_mcp_server",
        "control govee",
        "govee api",
        "govee_mcp_server control"
      ],
      "category": "iot-and-device-control"
    },
    "mcp2everything--mcp2mqtt": {
      "owner": "mcp2everything",
      "name": "mcp2mqtt",
      "url": "https://github.com/mcp2everything/mcp2mqtt",
      "imageUrl": "/freedevtools/mcp/pfp/mcp2everything.webp",
      "description": "Connects IoT devices to AI models through MQTT, enabling natural language control and real-time interaction with physical hardware. Integrates the Model Context Protocol (MCP) for seamless communication between devices and AI.",
      "stars": 327,
      "forks": 62,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T23:36:45Z",
      "readme_content": "# mcp2mqtt: ËøûÊé•Áâ©ÁêÜ‰∏ñÁïå‰∏éAIÂ§ßÊ®°ÂûãÁöÑÊ°•Ê¢Å \n\n[English](README_EN.md) | ÁÆÄ‰Ωì‰∏≠Êñá\n\n<div align=\"center\">\n    \n    <p>ÈÄöËøáËá™ÁÑ∂ËØ≠Ë®ÄÊéßÂà∂Á°¨‰ª∂ÔºåÂºÄÂêØÁâ©ËÅîÁΩëÊñ∞Á∫™ÂÖÉ</p>\n</div>\n\n## Á≥ªÁªüÊû∂ÊûÑ\n\n<div align=\"center\">\n    \n    <p>mcp2mqtt Á≥ªÁªüÊû∂ÊûÑÂõæ</p>\n</div>\n\n## Â∑•‰ΩúÊµÅÁ®ã\n\n<div align=\"center\">\n    \n    <p>mcp2mqtt Â∑•‰ΩúÊµÅÁ®ãÂõæ</p>\n</div>\n\n## È°πÁõÆÊÑøÊôØ\n\nmcp2mqtt ÊòØ‰∏Ä‰∏™Â∞ÜÁâ©ËÅîÁΩëËÆæÂ§áÊé•ÂÖ•AIÂ§ßÊ®°ÂûãÁöÑÈ°πÁõÆÔºåÂÆÉÈÄöËøá Model Context Protocol (MCP) Âíå MQTT ÂçèËÆÆÂ∞ÜÁâ©ÁêÜ‰∏ñÁïå‰∏é AI Â§ßÊ®°ÂûãÊó†ÁºùËøûÊé•„ÄÇÊúÄÁªàÂÆûÁé∞Ôºö\n- Áî®Ëá™ÁÑ∂ËØ≠Ë®ÄÊéßÂà∂‰Ω†ÁöÑÁ°¨‰ª∂ËÆæÂ§á\n- AI ÂÆûÊó∂ÂìçÂ∫îÂπ∂Ë∞ÉÊï¥Áâ©ÁêÜÂèÇÊï∞\n- ËÆ©‰Ω†ÁöÑËÆæÂ§áÂÖ∑Â§áÁêÜËß£ÂíåÊâßË°åÂ§çÊùÇÊåá‰ª§ÁöÑËÉΩÂäõ\n- ÈÄöËøáMQTTÂçèËÆÆÂÆûÁé∞ËÆæÂ§áÈó¥ÁöÑ‰∫íËÅî‰∫íÈÄö\n\n## ‰∏ªË¶ÅÁâπÊÄß\n\n- **Êô∫ËÉΩMQTTÈÄö‰ø°**\n  - ÊîØÊåÅMQTTÂçèËÆÆÁöÑÂèëÂ∏É/ËÆ¢ÈòÖÊ®°Âºè\n  - ÊîØÊåÅÂ§öÁßçMQTTÊúçÂä°Âô®ÔºàÂ¶ÇMosquitto„ÄÅEMQ XÁ≠âÔºâ\n  - ÊîØÊåÅQoSÊúçÂä°Ë¥®Èáè‰øùËØÅ\n  - ÊîØÊåÅ‰∏ªÈ¢òËøáÊª§ÂíåÊ∂àÊÅØË∑ØÁî±\n  - ÂÆûÊó∂Áä∂ÊÄÅÁõëÊéßÂíåÈîôËØØÂ§ÑÁêÜ\n\n- **MCP ÂçèËÆÆÈõÜÊàê**\n  - ÂÆåÊï¥ÊîØÊåÅ Model Context Protocol\n  - ÊîØÊåÅËµÑÊ∫êÁÆ°ÁêÜÂíåÂ∑•ÂÖ∑Ë∞ÉÁî®\n  - ÁÅµÊ¥ªÁöÑÊèêÁ§∫ËØçÁ≥ªÁªü\n  - ÈÄöËøáMQTTÂÆûÁé∞ÂëΩ‰ª§ÁöÑÂèëÂ∏É‰∏éÂìçÂ∫î\n\n## ÈÖçÁΩÆËØ¥Êòé\n\n### MQTTÈÖçÁΩÆ\n```yaml\nmqtt:\n  broker: \"localhost\"  # MQTTÊúçÂä°Âô®Âú∞ÂùÄ\n  port: 1883  # MQTTÊúçÂä°Âô®Á´ØÂè£\n  client_id: \"mcp2mqtt_client\"  # MQTTÂÆ¢Êà∑Á´ØID\n  username: \"mqtt_user\"  # MQTTÁî®Êà∑Âêç\n  password: \"mqtt_password\"  # MQTTÂØÜÁ†Å\n  keepalive: 60  # ‰øùÊåÅËøûÊé•Êó∂Èó¥\n  topics:\n    command:\n      publish: \"mcp/command\"  # ÂèëÈÄÅÂëΩ‰ª§ÁöÑ‰∏ªÈ¢ò\n      subscribe: \"mcp/response\"  # Êé•Êî∂ÂìçÂ∫îÁöÑ‰∏ªÈ¢ò\n    status:\n      publish: \"mcp/status\"  # ÂèëÈÄÅÁä∂ÊÄÅÁöÑ‰∏ªÈ¢ò\n      subscribe: \"mcp/control\"  # Êé•Êî∂ÊéßÂà∂ÂëΩ‰ª§ÁöÑ‰∏ªÈ¢ò\n```\n\n### ÂëΩ‰ª§ÈÖçÁΩÆ\n```yaml\ncommands:\n  set_pwm:\n    command: \"CMD_PWM {frequency}\"\n    need_parse: false\n    data_type: \"ascii\"\n    prompts:\n      - \"ÊääPWMË∞ÉÂà∞ÊúÄÂ§ß\"\n      - \"ÊääPWMË∞ÉÂà∞ÊúÄÂ∞è\"\n    mqtt_topic: \"mcp/pwm\"  # MQTTÂèëÂ∏É‰∏ªÈ¢ò\n    response_topic: \"mcp/pwm/response\"  # MQTTÂìçÂ∫î‰∏ªÈ¢ò\n```\n\n## MQTT ÂëΩ‰ª§ÂíåÂìçÂ∫î\n\n### ÂëΩ‰ª§Ê†ºÂºè\n\nÂëΩ‰ª§‰ΩøÁî®ÁÆÄÂçïÁöÑÊñáÊú¨Ê†ºÂºèÔºö\n\n1. PWM ÊéßÂà∂Ôºö\n   - ÂëΩ‰ª§Ôºö`PWM {ÂÄº}`\n   - Á§∫‰æãÔºö\n     - `PWM 100`ÔºàÊúÄÂ§ßÂÄºÔºâ\n     - `PWM 0`ÔºàÂÖ≥Èó≠Ôºâ\n     - `PWM 50`Ôºà50%Ôºâ\n   - ÂìçÂ∫îÔºö`CMD PWM {ÂÄº} OK`\n\n2. LED ÊéßÂà∂Ôºö\n   - ÂëΩ‰ª§Ôºö`LED {Áä∂ÊÄÅ}`\n   - Á§∫‰æãÔºö\n     - `LED on`ÔºàÊâìÂºÄÔºâ\n     - `LED off`ÔºàÂÖ≥Èó≠Ôºâ\n   - ÂìçÂ∫îÔºö`CMD LED {Áä∂ÊÄÅ} OK`\n\n3. ËÆæÂ§á‰ø°ÊÅØÔºö\n   - ÂëΩ‰ª§Ôºö`INFO`\n   - ÂìçÂ∫îÔºö`CMD INFO {ËÆæÂ§á‰ø°ÊÅØ}`\n\n### ÈîôËØØÂìçÂ∫î\n\nÂ¶ÇÊûúÂèëÁîüÈîôËØØÔºåÂìçÂ∫îÊ†ºÂºèÂ∞Ü‰∏∫Ôºö\n`ERROR: {ÈîôËØØ‰ø°ÊÅØ}`\n\n## ÊîØÊåÅÁöÑÂÆ¢Êà∑Á´Ø\n\nmcp2mqtt ÊîØÊåÅÊâÄÊúâÂÆûÁé∞‰∫Ü MCP ÂçèËÆÆÁöÑÂÆ¢Êà∑Á´ØÔºå‰ª•ÂèäÊîØÊåÅMQTTÂçèËÆÆÁöÑÁâ©ËÅîÁΩëËÆæÂ§áÔºö\n\n| ÂÆ¢Êà∑Á´ØÁ±ªÂûã | ÁâπÊÄßÊîØÊåÅ | ËØ¥Êòé |\n|--------|----------|------|\n| Claude Desktop | ÂÆåÊï¥ÊîØÊåÅ | Êé®Ëçê‰ΩøÁî®ÔºåÊîØÊåÅÊâÄÊúâ MCP ÂäüËÉΩ |\n| Continue | ÂÆåÊï¥ÊîØÊåÅ | ‰ºòÁßÄÁöÑÂºÄÂèëÂ∑•ÂÖ∑ÈõÜÊàê |\n| Cline | ËµÑÊ∫ê+Â∑•ÂÖ∑ | ÊîØÊåÅÂ§öÁßç AI Êèê‰æõÂïÜ |\n| MQTTËÆæÂ§á | ÂèëÂ∏É/ËÆ¢ÈòÖ | ÊîØÊåÅÊâÄÊúâMQTTÂçèËÆÆÁöÑÁâ©ËÅîÁΩëËÆæÂ§á |\n\n## Âø´ÈÄüÂºÄÂßã\n\n### 1. ÂÆâË£Ö\n\n#### WindowsÁî®Êà∑\n‰∏ãËΩΩ [install.py](https://raw.githubusercontent.com/mcp2everything/mcp2mqtt/main/install.py) \n```bash\npython install.py\n```\n#### macOSÁî®Êà∑\n```bash\n# ‰∏ãËΩΩÂÆâË£ÖËÑöÊú¨\ncurl -O https://raw.githubusercontent.com/mcp2everything/mcp2mqtt/main/install_macos.py\n\n# ËøêË°åÂÆâË£ÖËÑöÊú¨\npython3 install_macos.py\n```\n\n#### Ubuntu/Raspberry PiÁî®Êà∑\n```bash\n# ‰∏ãËΩΩÂÆâË£ÖËÑöÊú¨\ncurl -O https://raw.githubusercontent.com/mcp2everything/mcp2mqtt/main/install_ubuntu.py\n\n# ËøêË°åÂÆâË£ÖËÑöÊú¨\npython3 install_ubuntu.py\n```\n\nÂÆâË£ÖËÑöÊú¨‰ºöËá™Âä®ÂÆåÊàê‰ª•‰∏ãÊìç‰ΩúÔºö\n- Ê£ÄÊü•Á≥ªÁªüÁéØÂ¢É\n- ÂÆâË£ÖÂøÖË¶ÅÁöÑ‰æùËµñ\n- ÂàõÂª∫ÈªòËÆ§ÈÖçÁΩÆÊñá‰ª∂\n- ÈÖçÁΩÆClaudeÊ°åÈù¢ÁâàÔºàÂ¶ÇÊûúÂ∑≤ÂÆâË£ÖÔºâ\n\n### ÊâãÂä®ÂàÜÊ≠•ÂÆâË£Ö‰æùËµñ\n```bash\nwindows\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\nMacOS\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n‰∏ªË¶Å‰æùËµñuvÂ∑•ÂÖ∑ÔºåÊâÄ‰ª•ÂΩìpythonÂíåuv‰ª•ÂèäClaudeÊàñClineÂÆâË£ÖÂ•ΩÂêéÂ∞±ÂèØ‰ª•‰∫Ü„ÄÇ\n\n### Âü∫Êú¨ÈÖçÁΩÆ\nÂú®‰Ω†ÁöÑ MCP ÂÆ¢Êà∑Á´ØÔºàÂ¶Ç Claude Desktop Êàñ ClineÔºâÈÖçÁΩÆÊñá‰ª∂‰∏≠Ê∑ªÂä†‰ª•‰∏ãÂÜÖÂÆπÔºö\nÊ≥®ÊÑèÔºöÂ¶ÇÊûú‰ΩøÁî®ÁöÑËá™Âä®ÂÆâË£ÖÈÇ£‰πà‰ºöËá™Âä®ÈÖçÁΩÆCalude DesktopÊó†ÈúÄÊ≠§Ê≠•„ÄÇ\n‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆÊñá‰ª∂Ôºö\n```json\n{\n    \"mcpServers\": {\n        \"mcp2mqtt\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"mcp2mqtt\"\n            ]\n        }\n    }\n}\n```\n> Ê≥®ÊÑèÔºö‰øÆÊîπÈÖçÁΩÆÂêéÈúÄË¶ÅÈáçÂêØClineÊàñËÄÖClaudeÂÆ¢Êà∑Á´ØËΩØ‰ª∂\n## ÈÖçÁΩÆËØ¥Êòé\n### ÈÖçÁΩÆÊñá‰ª∂‰ΩçÁΩÆ\nÂ§çÂà∂ÈÖçÁΩÆÊñá‰ª∂Ôºà`config.yaml`ÔºâÂèØ‰ª•ÊîæÂú®‰ΩçÁΩÆÔºö\nÁî®Êà∑‰∏ªÁõÆÂΩïÔºàÊé®Ëçê‰∏™‰∫∫‰ΩøÁî®Ôºâ\n```bash\n# WindowsÁ≥ªÁªü\nC:\\Users\\Áî®Êà∑Âêç\\.mcp2mqtt\\config.yaml\n\n# macOSÁ≥ªÁªü\n/Users/Áî®Êà∑Âêç/.mcp2mqtt/config.yaml\n\n# LinuxÁ≥ªÁªü\n/home/Áî®Êà∑Âêç/.mcp2mqtt/config.yaml\n```\n- ÈÄÇÁî®Âú∫ÊôØÔºö‰∏™‰∫∫ÈÖçÁΩÆ\n- ÈúÄË¶ÅÂàõÂª∫ `.mcp2mqtt` ÁõÆÂΩïÔºö\n  ```bash\n  # WindowsÁ≥ªÁªüÔºàÂú®ÂëΩ‰ª§ÊèêÁ§∫Á¨¶‰∏≠Ôºâ\n  mkdir \"%USERPROFILE%\\.mcp2mqtt\"\n  \n  # macOS/LinuxÁ≥ªÁªü\n  mkdir -p ~/.mcp2mqtt\n  ```\n \nÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂Ôºö\nÊØîÂ¶ÇÊåáÂÆöÂä†ËΩΩPicoÈÖçÁΩÆÊñá‰ª∂ÔºöPico_config.yaml\n```json\n{\n    \"mcpServers\": {\n        \"mcp2mqtt\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"mcp2mqtt\",\n                \"--config\",\n                \"Pico\"  //ÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂ÂêçÔºå‰∏çÈúÄË¶ÅÊ∑ªÂä†_config.yamlÂêéÁºÄ\n            ]\n        }\n    }\n}\n```\n‰∏∫‰∫ÜËÉΩ‰ΩøÁî®Â§ö‰∏™mqttÔºåÊàë‰ª¨ÂèØ‰ª•Êñ∞Â¢ûÂ§ö‰∏™mcp2mqttÁöÑÊúçÂä° ÊåáÂÆö‰∏çÂêåÁöÑÈÖçÁΩÆÊñá‰ª∂ÂêçÂç≥ÂèØ„ÄÇ\nÂ¶ÇÊûúË¶ÅÊé•ÂÖ•Â§ö‰∏™ËÆæÂ§áÔºåÂ¶ÇÊúâË¶ÅËøûÊé•Á¨¨‰∫å‰∏™ËÆæÂ§áÔºö\nÊåáÂÆöÂä†ËΩΩPico2ÈÖçÁΩÆÊñá‰ª∂ÔºöPico2_config.yaml\n```json\n{\n    \"mcpServers\": {\n        \"mcp2mqtt2\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"mcp2mqtt\",\n                \"--config\",\n                \"Pico2\"  //ÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂ÂêçÔºå‰∏çÈúÄË¶ÅÊ∑ªÂä†_config.yamlÂêéÁºÄ\n            ]\n        }\n    }\n}\n```\n\n### Á°¨‰ª∂ËøûÊé•\n1. Â∞Ü‰Ω†ÁöÑËÆæÂ§áÈÄöËøáÁΩëÁªúËøûÊé•Âà∞mqttÊúçÂä°Âô®\n2. ‰πüÂèØ‰ª•Áî®testsÁõÆÂΩï‰∏ãÁöÑresponder.pyÊù•Ê®°ÊãüËÆæÂ§á\n\n## ËøêË°åÊµãËØï\n\n### ÂêØÂä®ËÆæÂ§áÊ®°ÊãüÂô®\n\nÈ°πÁõÆÂú® `tests` ÁõÆÂΩï‰∏≠ÂåÖÂê´‰∫Ü‰∏Ä‰∏™ËÆæÂ§áÊ®°ÊãüÂô®„ÄÇÂÆÉÂèØ‰ª•Ê®°Êãü‰∏Ä‰∏™Á°¨‰ª∂ËÆæÂ§áÔºåËÉΩÂ§üÔºö\n- ÂìçÂ∫î PWM ÊéßÂà∂ÂëΩ‰ª§\n- Êèê‰æõËÆæÂ§á‰ø°ÊÅØ\n- ÊéßÂà∂ LED Áä∂ÊÄÅ\n\nÂêØÂä®Ê®°ÊãüÂô®Ôºö\n```bash\npython tests/responder.py\n```\n\n‰Ω†Â∫îËØ•ËÉΩÁúãÂà∞Ê®°ÊãüÂô®Ê≠£Âú®ËøêË°åÂπ∂Â∑≤ËøûÊé•Âà∞ MQTT ÊúçÂä°Âô®ÁöÑËæìÂá∫‰ø°ÊÅØ„ÄÇ\n\n### ÂêØÂä®ÂÆ¢Êà∑Á´ØClaude Ê°åÈù¢ÁâàÊàñCline\n<div align=\"center\">\n    \n    <p>Example in Cline</p>\n</div>\n\n### ‰ªéÊ∫êÁ†ÅÂø´ÈÄüÂºÄÂßã\n1. ‰ªéÊ∫êÁ†ÅÂÆâË£Ö\n```bash\n# ÈÄöËøáÊ∫êÁ†ÅÂÆâË£ÖÔºö\ngit clone https://github.com/mcp2everything/mcp2mqtt.git\ncd mcp2mqtt\n\n# ÂàõÂª∫ËôöÊãüÁéØÂ¢É\nuv venv .venv\n\n# ÊøÄÊ¥ªËôöÊãüÁéØÂ¢É\n# Windows:\n.venv\\Scripts\\activate\n# Linux/macOS:\nsource .venv/bin/activate\n\n# ÂÆâË£ÖÂºÄÂèë‰æùËµñ\nuv pip install --editable .\n```\n\n### MCPÂÆ¢Êà∑Á´ØÈÖçÁΩÆ\nÂú®‰ΩøÁî®ÊîØÊåÅMCPÂçèËÆÆÁöÑÂÆ¢Êà∑Á´ØÔºàÂ¶ÇClaude DesktopÊàñClineÔºâÊó∂ÔºåÈúÄË¶ÅÂú®ÂÆ¢Êà∑Á´ØÁöÑÈÖçÁΩÆÊñá‰ª∂‰∏≠Ê∑ªÂä†‰ª•‰∏ãÂÜÖÂÆπÔºö\nÁõ¥Êé•Ëá™Âä®ÂÆâË£ÖÁöÑÈÖçÁΩÆÊñπÂºè\nÊ∫êÁ†ÅÂºÄÂèëÁöÑÈÖçÁΩÆÊñπÂºè\n#### ‰ΩøÁî®ÈªòËÆ§ÊºîÁ§∫ÂèÇÊï∞Ôºö\n```json\n{\n    \"mcpServers\": {\n        \"mcp2mqtt\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"‰Ω†ÁöÑÂÆûÈôÖË∑ØÂæÑ/mcp2mqtt\",  // ‰æãÂ¶Ç: \"C:/Users/Administrator/Documents/develop/my-mcp-server/mcp2mqtt\"\n                \"run\",\n                \"mcp2mqtt\"\n            ]\n        }\n    }\n}\n```\n#### ÊåáÂÆöÂèÇÊï∞Êñá‰ª∂Âêç\n```json\n{\n    \"mcpServers\": {\n        \"mcp2mqtt\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"‰Ω†ÁöÑÂÆûÈôÖË∑ØÂæÑ/mcp2mqtt\",  // ‰æãÂ¶Ç: \"C:/Users/Administrator/Documents/develop/my-mcp-server/mcp2mqtt\"\n                \"run\",\n                \"mcp2mqtt\",\n                \"--config\", // ÂèØÈÄâÂèÇÊï∞ÔºåÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂Âêç\n                \"Pico\"  // ÂèØÈÄâÂèÇÊï∞ÔºåÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂ÂêçÔºå‰∏çÈúÄË¶ÅÊ∑ªÂä†_config.yamlÂêéÁºÄ\n            ]\n        }\n    }\n}\n```\n<div align=\"center\">\n    \n    <p>Example in Cline</p>\n</div>\n### ÈÖçÁΩÆÊñá‰ª∂‰ΩçÁΩÆ\nÈÖçÁΩÆÊñá‰ª∂Ôºà`config.yaml`ÔºâÂèØ‰ª•ÊîæÂú®‰∏çÂêå‰ΩçÁΩÆÔºåÁ®ãÂ∫è‰ºöÊåâ‰ª•‰∏ãÈ°∫Â∫èÊü•ÊâæÔºö\n#### 1. ÂΩìÂâçÂ∑•‰ΩúÁõÆÂΩïÔºàÈÄÇÂêàÂºÄÂèëÊµãËØïÔºâ\n- Ë∑ØÂæÑÔºö`./config.yaml`\n- Á§∫‰æãÔºöÂ¶ÇÊûú‰Ω†Âú® `C:\\Projects` ËøêË°åÁ®ãÂ∫èÔºåÂÆÉ‰ºöÊü•Êâæ `C:\\Projects\\config.yaml`\n- ÈÄÇÁî®Âú∫ÊôØÔºöÂºÄÂèëÂíåÊµãËØï\n- ‰∏çÈúÄË¶ÅÁâπÊÆäÊùÉÈôê\n\n#### 2. Áî®Êà∑‰∏ªÁõÆÂΩïÔºàÊé®Ëçê‰∏™‰∫∫‰ΩøÁî®Ôºâ\n```bash\n# WindowsÁ≥ªÁªü\nC:\\Users\\Áî®Êà∑Âêç\\.mcp2mqtt\\config.yaml\n\n# macOSÁ≥ªÁªü\n/Users/Áî®Êà∑Âêç/.mcp2mqtt/config.yaml\n\n# LinuxÁ≥ªÁªü\n/home/Áî®Êà∑Âêç/.mcp2mqtt/config.yaml\n```\n- ÈÄÇÁî®Âú∫ÊôØÔºö‰∏™‰∫∫ÈÖçÁΩÆ\n- ÈúÄË¶ÅÂàõÂª∫ `.mcp2mqtt` ÁõÆÂΩïÔºö\n  ```bash\n  # WindowsÁ≥ªÁªüÔºàÂú®ÂëΩ‰ª§ÊèêÁ§∫Á¨¶‰∏≠Ôºâ\n  mkdir \"%USERPROFILE%\\.mcp2mqtt\"\n  \n  # macOS/LinuxÁ≥ªÁªü\n  mkdir -p ~/.mcp2mqtt\n  ```\n\n#### 3. Á≥ªÁªüÁ∫ßÈÖçÁΩÆÔºàÈÄÇÂêàÂ§öÁî®Êà∑ÁéØÂ¢ÉÔºâ\n```bash\n# WindowsÁ≥ªÁªüÔºàÈúÄË¶ÅÁÆ°ÁêÜÂëòÊùÉÈôêÔºâ\nC:\\ProgramData\\mcp2mqtt\\config.yaml\n\n# macOS/LinuxÁ≥ªÁªüÔºàÈúÄË¶ÅrootÊùÉÈôêÔºâ\n/etc/mcp2mqtt/config.yaml\n```\n- ÈÄÇÁî®Âú∫ÊôØÔºöÂ§öÁî®Êà∑ÂÖ±‰∫´ÈÖçÁΩÆ\n- ÂàõÂª∫ÁõÆÂΩïÂπ∂ËÆæÁΩÆÊùÉÈôêÔºö\n  ```bash\n  # WindowsÁ≥ªÁªüÔºà‰ª•ÁÆ°ÁêÜÂëòË∫´‰ªΩËøêË°åÔºâ\n  mkdir \"C:\\ProgramData\\mcp2mqtt\"\n  \n  # macOS/LinuxÁ≥ªÁªüÔºà‰ª•rootË∫´‰ªΩËøêË°åÔºâ\n  sudo mkdir -p /etc/mcp2mqtt\n  sudo chown root:root /etc/mcp2mqtt\n  sudo chmod 755 /etc/mcp2mqtt\n  ```\n\nÁ®ãÂ∫è‰ºöÊåâÁÖß‰∏äËø∞È°∫Â∫èÊü•ÊâæÈÖçÁΩÆÊñá‰ª∂Ôºå‰ΩøÁî®ÊâæÂà∞ÁöÑÁ¨¨‰∏Ä‰∏™ÊúâÊïàÈÖçÁΩÆÊñá‰ª∂„ÄÇÊ†πÊçÆ‰Ω†ÁöÑÈúÄÊ±ÇÈÄâÊã©ÂêàÈÄÇÁöÑ‰ΩçÁΩÆÔºö\n- ÂºÄÂèëÊµãËØïÔºö‰ΩøÁî®ÂΩìÂâçÁõÆÂΩï\n- ‰∏™‰∫∫‰ΩøÁî®ÔºöÂª∫ËÆÆ‰ΩøÁî®Áî®Êà∑‰∏ªÁõÆÂΩïÔºàÊé®ËçêÔºâ\n- Â§öÁî®Êà∑ÁéØÂ¢ÉÔºö‰ΩøÁî®Á≥ªÁªüÁ∫ßÈÖçÁΩÆÔºàProgramDataÊàñ/etcÔºâ\n\n3. ËøêË°åÊúçÂä°Âô®Ôºö\n```bash\n# Á°Æ‰øùÂ∑≤ÊøÄÊ¥ªËôöÊãüÁéØÂ¢É\n.venv\\Scripts\\activate\n\n# ËøêË°åÊúçÂä°Âô®Ôºà‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆconfig.yaml Ê°à‰æã‰∏≠Áî®ÁöÑLOOP_BACK Ê®°Êãü‰∏≤Âè£ÔºåÊó†ÈúÄÁúüÂÆû‰∏≤Âè£Âíå‰∏≤Âè£ËÆæÂ§áÔºâ\nuv run src/mcp2mqtt/server.py\nÊàñ\nuv run mcp2mqtt\n# ËøêË°åÊúçÂä°Âô®Ôºà‰ΩøÁî®ÊåáÂÆöÈÖçÁΩÆPico_config.yamlÔºâ\nuv run src/mcp2mqtt/server.py --config Pico\nÊàñ\nuv run mcp2mqtt --config Pico\n```\n\n\n## ÊñáÊ°£\n\n- [ÂÆâË£ÖÊåáÂçó](./docs/zh/installation.md)\n- [APIÊñáÊ°£](./docs/zh/api.md)\n- [ÈÖçÁΩÆËØ¥Êòé](./docs/zh/configuration.md)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp2mqtt",
        "iot",
        "mqtt",
        "mcp2mqtt connects",
        "iot device",
        "connects iot"
      ],
      "category": "iot-and-device-control"
    },
    "mcp2everything--mcp2serial": {
      "owner": "mcp2everything",
      "name": "mcp2serial",
      "url": "https://github.com/mcp2everything/mcp2serial",
      "imageUrl": "/freedevtools/mcp/pfp/mcp2everything.webp",
      "description": "Connects hardware devices to AI models using natural language commands, enabling seamless control and real-time adjustments of physical parameters through intelligent responses.",
      "stars": 33,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-30T19:17:52Z",
      "readme_content": "# MCP2Serial: ËøûÊé•Áâ©ÁêÜ‰∏ñÁïå‰∏éAIÂ§ßÊ®°ÂûãÁöÑÊ°•Ê¢Å \n\n[English](README_EN.md) | ÁÆÄ‰Ωì‰∏≠Êñá\n\n<div align=\"center\">\n    \n    <p>ÈÄöËøáËá™ÁÑ∂ËØ≠Ë®ÄÊéßÂà∂Á°¨‰ª∂ÔºåÂºÄÂêØÁâ©ËÅîÁΩëÊñ∞Á∫™ÂÖÉ</p>\n</div>\n\n## Á≥ªÁªüÊû∂ÊûÑ\n\n<div align=\"center\">\n    \n    <p>MCP2Serial Á≥ªÁªüÊû∂ÊûÑÂõæ</p>\n</div>\n\n## Â∑•‰ΩúÊµÅÁ®ã\n\n<div align=\"center\">\n    \n    <p>MCP2Serial Â∑•‰ΩúÊµÅÁ®ãÂõæ</p>\n</div>\n\n## È°πÁõÆÊÑøÊôØ\n\nMCP2Serial Â∞Ü‰∏≤Âè£ËÆæÂ§áÊé•ÂÖ•AIÂ§ßÊ®°ÂûãÁöÑÈ°πÁõÆÔºåÂÆÉÈÄöËøá Model Context Protocol (MCP) Â∞ÜÁâ©ÁêÜ‰∏ñÁïå‰∏é AI Â§ßÊ®°ÂûãÊó†ÁºùËøûÊé•„ÄÇÊúÄÁªàÂÆûÁé∞Ôºö\n- Áî®Ëá™ÁÑ∂ËØ≠Ë®ÄÊéßÂà∂‰Ω†ÁöÑÁ°¨‰ª∂ËÆæÂ§á\n- AI ÂÆûÊó∂ÂìçÂ∫îÂπ∂Ë∞ÉÊï¥Áâ©ÁêÜÂèÇÊï∞\n- ËÆ©‰Ω†ÁöÑËÆæÂ§áÂÖ∑Â§áÁêÜËß£ÂíåÊâßË°åÂ§çÊùÇÊåá‰ª§ÁöÑËÉΩÂäõ\n\n## ‰∏ªË¶ÅÁâπÊÄß\n\n- **Êô∫ËÉΩ‰∏≤Âè£ÈÄö‰ø°**\n  - Ëá™Âä®Ê£ÄÊµãÂíåÈÖçÁΩÆ‰∏≤Âè£ËÆæÂ§á Áî®Êà∑‰πüÂèØÊåáÂÆö‰∏≤Âè£Âè∑\n  - ÊîØÊåÅÂ§öÁßçÊ≥¢ÁâπÁéáÔºàÈªòËÆ§ 115200Ôºâ\n  - ÂÆûÊó∂Áä∂ÊÄÅÁõëÊéßÂíåÈîôËØØÂ§ÑÁêÜ\n\n- **MCP ÂçèËÆÆÈõÜÊàê**\n  - ÂÆåÊï¥ÊîØÊåÅ Model Context Protocol\n  - ÊîØÊåÅËµÑÊ∫êÁÆ°ÁêÜÂíåÂ∑•ÂÖ∑Ë∞ÉÁî®\n  - ÁÅµÊ¥ªÁöÑÊèêÁ§∫ËØçÁ≥ªÁªü\n\n## ÊîØÊåÅÁöÑÂÆ¢Êà∑Á´Ø\n\nMCP2Serial ÊîØÊåÅÊâÄÊúâÂÆûÁé∞‰∫Ü MCP ÂçèËÆÆÁöÑÂÆ¢Êà∑Á´ØÔºåÂåÖÊã¨Ôºö\n\n| ÂÆ¢Êà∑Á´Ø | ÁâπÊÄßÊîØÊåÅ | ËØ¥Êòé |\n|--------|----------|------|\n| Claude Desktop | ÂÆåÊï¥ÊîØÊåÅ | Êé®Ëçê‰ΩøÁî®ÔºåÊîØÊåÅÊâÄÊúâ MCP ÂäüËÉΩ |\n| Continue | ÂÆåÊï¥ÊîØÊåÅ | ‰ºòÁßÄÁöÑÂºÄÂèëÂ∑•ÂÖ∑ÈõÜÊàê |\n| Cline | ËµÑÊ∫ê+Â∑•ÂÖ∑ | ÊîØÊåÅÂ§öÁßç AI Êèê‰æõÂïÜ |\n| Zed | Âü∫Á°ÄÊîØÊåÅ | ÊîØÊåÅÊèêÁ§∫ËØçÂëΩ‰ª§ |\n| Sourcegraph Cody | ËµÑÊ∫êÊîØÊåÅ | ÈÄöËøá OpenCTX ÈõÜÊàê |\n| Firebase Genkit | ÈÉ®ÂàÜÊîØÊåÅ | ÊîØÊåÅËµÑÊ∫êÂàóË°®ÂíåÂ∑•ÂÖ∑ |\n\n## ÊîØÊåÅÁöÑ AI Ê®°Âûã\n\nÂæóÁõä‰∫éÁÅµÊ¥ªÁöÑÂÆ¢Êà∑Á´ØÊîØÊåÅÔºåMCP2Serial ÂèØ‰ª•‰∏éÂ§öÁßç AI Ê®°ÂûãÂçèÂêåÂ∑•‰ΩúÔºö\n\n### ‰∫ëÁ´ØÊ®°Âûã\n- OpenAI (GPT-4, GPT-3.5)\n- Anthropic Claude\n- Google Gemini\n- AWS Bedrock\n- Azure OpenAI\n- Google Cloud Vertex AI\n\n### Êú¨Âú∞Ê®°Âûã\n- LM Studio ÊîØÊåÅÁöÑÊâÄÊúâÊ®°Âûã\n- Ollama ÊîØÊåÅÁöÑÊâÄÊúâÊ®°Âûã\n- ‰ªª‰ΩïÂÖºÂÆπ OpenAI API ÁöÑÊ®°Âûã\n\n### ÂáÜÂ§á\nPython3.11 ÊàñÊõ¥È´òÁâàÊú¨\nClaude Desktop Êàñ Cline\n\n\n## Âø´ÈÄüÂºÄÂßã\n\n### 1. ÂÆâË£Ö\n\n#### WindowsÁî®Êà∑\n‰∏ãËΩΩ [install.py](https://raw.githubusercontent.com/mcp2everything/mcp2serial/main/install.py) \n```bash\npython install.py\n```\n#### macOSÁî®Êà∑\n```bash\n# ‰∏ãËΩΩÂÆâË£ÖËÑöÊú¨\ncurl -O https://raw.githubusercontent.com/mcp2everything/mcp2serial/main/install_macos.py\n\n# ËøêË°åÂÆâË£ÖËÑöÊú¨\npython3 install_macos.py\n```\n\n#### Ubuntu/Raspberry PiÁî®Êà∑\n```bash\n# ‰∏ãËΩΩÂÆâË£ÖËÑöÊú¨\ncurl -O https://raw.githubusercontent.com/mcp2everything/mcp2serial/main/install_ubuntu.py\n\n# ËøêË°åÂÆâË£ÖËÑöÊú¨\npython3 install_ubuntu.py\n```\n\nÂÆâË£ÖËÑöÊú¨‰ºöËá™Âä®ÂÆåÊàê‰ª•‰∏ãÊìç‰ΩúÔºö\n- ‚úÖ Ê£ÄÊü•Á≥ªÁªüÁéØÂ¢É\n- ‚úÖ ÂÆâË£ÖÂøÖË¶ÅÁöÑ‰æùËµñ\n- ‚úÖ ÂàõÂª∫ÈªòËÆ§ÈÖçÁΩÆÊñá‰ª∂\n- ‚úÖ ÈÖçÁΩÆClaudeÊ°åÈù¢ÁâàÔºàÂ¶ÇÊûúÂ∑≤ÂÆâË£ÖÔºâ\n- ‚úÖ Ê£ÄÊü•‰∏≤Âè£ËÆæÂ§á\n\n### ÊâãÂä®ÂàÜÊ≠•ÂÆâË£Ö‰æùËµñ\n```bash\nwindows\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\nMacOS\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n‰∏ªË¶Å‰æùËµñuvÂ∑•ÂÖ∑ÔºåÊâÄ‰ª•ÂΩìpythonÂíåuv‰ª•ÂèäClaudeÊàñClineÂÆâË£ÖÂ•ΩÂêéÂ∞±ÂèØ‰ª•‰∫Ü„ÄÇ\n\n### Âü∫Êú¨ÈÖçÁΩÆ\nÂú®‰Ω†ÁöÑ MCP ÂÆ¢Êà∑Á´ØÔºàÂ¶Ç Claude Desktop Êàñ ClineÔºâÈÖçÁΩÆÊñá‰ª∂‰∏≠Ê∑ªÂä†‰ª•‰∏ãÂÜÖÂÆπÔºö\nÊ≥®ÊÑèÔºöÂ¶ÇÊûú‰ΩøÁî®ÁöÑËá™Âä®ÂÆâË£ÖÈÇ£‰πà‰ºöËá™Âä®ÈÖçÁΩÆCalude DesktopÊó†ÈúÄÊ≠§Ê≠•„ÄÇ\n‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆÊñá‰ª∂Ôºö\n```json\n{\n    \"mcpServers\": {\n        \"mcp2serial\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"mcp2serial\"\n            ]\n        }\n    }\n}\n```\n> Ê≥®ÊÑèÔºö‰øÆÊîπÈÖçÁΩÆÂêéÈúÄË¶ÅÈáçÂêØClineÊàñËÄÖClaudeÂÆ¢Êà∑Á´ØËΩØ‰ª∂\n\nÈÖçÁΩÆ‰∏≤Âè£ÂíåÂëΩ‰ª§Ôºö\nÊ≥®ÊÑè‰∏ãÈù¢ÁöÑÈÖçÁΩÆÈªòËÆ§‰∏∫COM11 ÈúÄË¶ÅÊ†πÊçÆÂÆûÈôÖËøõË°å‰øÆÊîπ\n```yaml\n# config.yaml\nserial:\n  port: COM11  # ÊàñËá™Âä®Ê£ÄÊµã\n  baud_rate: 115200  # ÂèØÈÄâÔºåÈªòËÆ§ 115200\n  timeout: 1.0  # ÂèØÈÄâÔºåÈªòËÆ§ 1.0\n  read_timeout: 1.0  # ËØªÂèñË∂ÖÊó∂Êó∂Èó¥Ôºå1ÁßíÂÜÖ‰∏çÂ∫îÁ≠îÂàôÊä•Èîô\n  response_start_string: OK  # ÂèØÈÄâÔºå‰∏≤Âè£Â∫îÁ≠îÁöÑÂºÄÂßãÂ≠óÁ¨¶‰∏≤ÔºåÈªòËÆ§‰∏∫OK\n\ncommands:\n  set_pwm:\n    command: \"PWM {frequency}\\n\"\n    need_parse: false\n    prompts:\n      - \"ÊääPWMË∞ÉÂà∞{value}\"\n```\n## ÈÖçÁΩÆËØ¥Êòé\n### ÈÖçÁΩÆÊñá‰ª∂‰ΩçÁΩÆ\n\nÈÖçÁΩÆÊñá‰ª∂Ôºà`config.yaml`ÔºâÂèØ‰ª•ÊîæÂú®‰∏çÂêå‰ΩçÁΩÆÔºåÁ®ãÂ∫è‰ºöÊåâ‰ª•‰∏ãÈ°∫Â∫èÊü•ÊâæÔºö\n\n#### 1. ÂΩìÂâçÂ∑•‰ΩúÁõÆÂΩïÔºàÈÄÇÂêàÂºÄÂèëÊµãËØïÔºâ\n- Ë∑ØÂæÑÔºö`./config.yaml`\n- Á§∫‰æãÔºöÂ¶ÇÊûú‰Ω†Âú® `C:\\Projects` ËøêË°åÁ®ãÂ∫èÔºåÂÆÉ‰ºöÊü•Êâæ `C:\\Projects\\config.yaml`\n- ÈÄÇÁî®Âú∫ÊôØÔºöÂºÄÂèëÂíåÊµãËØï\n- ‰∏çÈúÄË¶ÅÁâπÊÆäÊùÉÈôê\n\n#### 2. Áî®Êà∑‰∏ªÁõÆÂΩïÔºàÊé®Ëçê‰∏™‰∫∫‰ΩøÁî®Ôºâ\n```bash\n# WindowsÁ≥ªÁªü\nC:\\Users\\Áî®Êà∑Âêç\\.mcp2serial\\config.yaml\n\n# macOSÁ≥ªÁªü\n/Users/Áî®Êà∑Âêç/.mcp2serial/config.yaml\n\n# LinuxÁ≥ªÁªü\n/home/Áî®Êà∑Âêç/.mcp2serial/config.yaml\n```\n- ÈÄÇÁî®Âú∫ÊôØÔºö‰∏™‰∫∫ÈÖçÁΩÆ\n- ÈúÄË¶ÅÂàõÂª∫ `.mcp2serial` ÁõÆÂΩïÔºö\n  ```bash\n  # WindowsÁ≥ªÁªüÔºàÂú®ÂëΩ‰ª§ÊèêÁ§∫Á¨¶‰∏≠Ôºâ\n  mkdir \"%USERPROFILE%\\.mcp2serial\"\n  \n  # macOS/LinuxÁ≥ªÁªü\n  mkdir -p ~/.mcp2serial\n  ```\n\n#### 3. Á≥ªÁªüÁ∫ßÈÖçÁΩÆÔºàÈÄÇÂêàÂ§öÁî®Êà∑ÁéØÂ¢ÉÔºâ\n```bash\n# WindowsÁ≥ªÁªüÔºàÈúÄË¶ÅÁÆ°ÁêÜÂëòÊùÉÈôêÔºâ\nC:\\ProgramData\\mcp2serial\\config.yaml\n\n# macOS/LinuxÁ≥ªÁªüÔºàÈúÄË¶ÅrootÊùÉÈôêÔºâ\n/etc/mcp2serial/config.yaml\n```\n- ÈÄÇÁî®Âú∫ÊôØÔºöÂ§öÁî®Êà∑ÂÖ±‰∫´ÈÖçÁΩÆ\n- ÂàõÂª∫ÁõÆÂΩïÂπ∂ËÆæÁΩÆÊùÉÈôêÔºö\n  ```bash\n  # WindowsÁ≥ªÁªüÔºà‰ª•ÁÆ°ÁêÜÂëòË∫´‰ªΩËøêË°åÔºâ\n  mkdir \"C:\\ProgramData\\mcp2serial\"\n  \n  # macOS/LinuxÁ≥ªÁªüÔºà‰ª•rootË∫´‰ªΩËøêË°åÔºâ\n  sudo mkdir -p /etc/mcp2serial\n  sudo chown root:root /etc/mcp2serial\n  sudo chmod 755 /etc/mcp2serial\n  ```\n\nÁ®ãÂ∫è‰ºöÊåâÁÖß‰∏äËø∞È°∫Â∫èÊü•ÊâæÈÖçÁΩÆÊñá‰ª∂Ôºå‰ΩøÁî®ÊâæÂà∞ÁöÑÁ¨¨‰∏Ä‰∏™ÊúâÊïàÈÖçÁΩÆÊñá‰ª∂„ÄÇÊ†πÊçÆ‰Ω†ÁöÑÈúÄÊ±ÇÈÄâÊã©ÂêàÈÄÇÁöÑ‰ΩçÁΩÆÔºö\n- ÂºÄÂèëÊµãËØïÔºö‰ΩøÁî®ÂΩìÂâçÁõÆÂΩï\n- ‰∏™‰∫∫‰ΩøÁî®ÔºöÂª∫ËÆÆ‰ΩøÁî®Áî®Êà∑‰∏ªÁõÆÂΩïÔºàÊé®ËçêÔºâ\n- Â§öÁî®Êà∑ÁéØÂ¢ÉÔºö‰ΩøÁî®Á≥ªÁªüÁ∫ßÈÖçÁΩÆÔºàProgramDataÊàñ/etcÔºâ\n\n### ‰∏≤Âè£ÈÖçÁΩÆ ÂëΩ‰ª§ÈÖçÁΩÆËøõÈò∂\nÂú® `config.yaml` ‰∏≠Ê∑ªÂä†Ëá™ÂÆö‰πâÂëΩ‰ª§Ôºö\nÈªòËÆ§‰∏ç‰ΩøÁî®ÁúüÂÆû‰∏≤Âè£ Áî®Ê®°Êãü‰∏≤Âè£Êù•ÊºîÁ§∫ÂàôÊó†ÈúÄ‰øÆÊîπ\n```yaml\nserial:\n  # ‰∏≤Âè£ÈÖçÁΩÆ\n  port: LOOP_BACK  # ÂèØÈÄâÔºåÂ¶ÇÊûú‰∏çÊåáÂÆöÂàôËá™Âä®Êü•Êâæ„ÄÇËÆæÁΩÆ‰∏∫LOOP_BACKÊó∂ÂêØÁî®ÂõûÁéØÊ®°ÂºèÔºåÂèëÈÄÅ‰ªÄ‰πàÂ∞±Êé•Êî∂‰ªÄ‰πà\n  baud_rate: 115200  # ÂèØÈÄâÔºåÈªòËÆ§ 115200\n  timeout: 1.0  # ÂèØÈÄâÔºåÈªòËÆ§ 1.0\n  read_timeout: 1.0  # ËØªÂèñË∂ÖÊó∂Êó∂Èó¥Ôºå1ÁßíÂÜÖ‰∏çÂ∫îÁ≠îÂàôÊä•Èîô\n  response_start_string: CMD  # ÂèØÈÄâÔºå‰∏≤Âè£Â∫îÁ≠îÁöÑÂºÄÂßãÂ≠óÁ¨¶‰∏≤ÔºåÈªòËÆ§‰∏∫OK\n\ncommands:\n  # PWMÊéßÂà∂ÂëΩ‰ª§\n  set_pwm:\n    command: \"CMD_PWM {frequency}\"  # ÂÆûÈôÖÂèëÈÄÅÁöÑÂëΩ‰ª§Ê†ºÂºèÔºåserver‰ºöËá™Âä®Ê∑ªÂä†\\r\\n\n    need_parse: false  # ‰∏çÈúÄË¶ÅËß£ÊûêÂìçÂ∫îÂÜÖÂÆπ\n    prompts:\n      - \"ÊääPWMË∞ÉÂà∞ÊúÄÂ§ß\"\n      - \"ÊääPWMË∞ÉÂà∞ÊúÄÂ∞è\"\n      - \"ËØ∑Â∞ÜPWMËÆæÁΩÆ‰∏∫{value}\"\n      - \"ÂÖ≥Èó≠PWM\"\n      - \"ÊääPWMË∞ÉÂà∞‰∏ÄÂçä\"\n```\n\n‰ΩøÁî®ÁúüÂÆû‰∏≤Âè£\n```yaml\n# config.yaml\nserial:\n  port: COM11  # ÊàñËá™Âä®Ê£ÄÊµã\n  baud_rate: 115200  # ÂèØÈÄâÔºåÈªòËÆ§ 115200\n  timeout: 1.0  # ÂèØÈÄâÔºåÈªòËÆ§ 1.0\n  read_timeout: 1.0  # ËØªÂèñË∂ÖÊó∂Êó∂Èó¥Ôºå1ÁßíÂÜÖ‰∏çÂ∫îÁ≠îÂàôÊä•Èîô\n  response_start_string: OK  # ÂèØÈÄâÔºå‰∏≤Âè£Â∫îÁ≠îÁöÑÂºÄÂßãÂ≠óÁ¨¶‰∏≤ÔºåÈªòËÆ§‰∏∫OK\n\ncommands:\n  set_pwm:\n    command: \"PWM {frequency}\\n\"\n    need_parse: false\n    prompts:\n      - \"ÊääPWMË∞ÉÂà∞{value}\"\n```\nÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂Ôºö\nÊØîÂ¶ÇÊåáÂÆöÂä†ËΩΩPicoÈÖçÁΩÆÊñá‰ª∂ÔºöPico_config.yaml\n```json\n{\n    \"mcpServers\": {\n        \"mcp2serial\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"mcp2serial\",\n                \"--config\",\n                \"Pico\"  //ÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂ÂêçÔºå‰∏çÈúÄË¶ÅÊ∑ªÂä†_config.yamlÂêéÁºÄ\n            ]\n        }\n    }\n}\n```\n‰∏∫‰∫ÜËÉΩ‰ΩøÁî®Â§ö‰∏™‰∏≤Âè£ÔºåÊàë‰ª¨ÂèØ‰ª•Êñ∞Â¢ûÂ§ö‰∏™mcp2serialÁöÑÊúçÂä° ÊåáÂÆö‰∏çÂêåÁöÑÈÖçÁΩÆÊñá‰ª∂ÂêçÂç≥ÂèØ„ÄÇ\nÂ¶ÇÊûúË¶ÅÊé•ÂÖ•Â§ö‰∏™ËÆæÂ§áÔºåÂ¶ÇÊúâË¶ÅËøûÊé•Á¨¨‰∫å‰∏™ËÆæÂ§áÔºö\nÊåáÂÆöÂä†ËΩΩPico2ÈÖçÁΩÆÊñá‰ª∂ÔºöPico2_config.yaml\n```json\n{\n    \"mcpServers\": {\n        \"mcp2serial2\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"mcp2serial\",\n                \"--config\",\n                \"Pico2\"  //ÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂ÂêçÔºå‰∏çÈúÄË¶ÅÊ∑ªÂä†_config.yamlÂêéÁºÄ\n            ]\n        }\n    }\n}\n```\n\n### ÂìçÂ∫îËß£ÊûêËØ¥Êòé\n\n1. ÁÆÄÂçïÂìçÂ∫îÔºà`need_parse: false`ÔºâÔºö\n   - ËÆæÂ§áËøîÂõû \"OK\" ÂºÄÂ§¥ÁöÑÊ∂àÊÅØË°®Á§∫ÊàêÂäü\n   - ÂÖ∂‰ªñÂìçÂ∫îÂ∞ÜË¢´ËßÜ‰∏∫ÈîôËØØ\n\n2. ÈúÄË¶ÅËß£ÊûêÁöÑÂìçÂ∫îÔºà`need_parse: true`ÔºâÔºö\n   - ÂÆåÊï¥ÂìçÂ∫îÂ∞ÜÂú® `result.raw` Â≠óÊÆµ‰∏≠ËøîÂõû\n   - ÂèØ‰ª•Âú®Â∫îÁî®Â±ÇËøõË°åËøõ‰∏ÄÊ≠•Ëß£Êûê\n\n\n### Á°¨‰ª∂ËøûÊé•\n\n1. Â∞Ü‰Ω†ÁöÑËÆæÂ§áÈÄöËøáUSBËøûÊé•Âà∞ÁîµËÑë\n2. ÊâìÂºÄËÆæÂ§áÁÆ°ÁêÜÂô®ÔºåËÆ∞‰∏ãËÆæÂ§áÁöÑCOMÁ´ØÂè£Âè∑\n3. Âú®`config.yaml`‰∏≠ÈÖçÁΩÆÊ≠£Á°ÆÁöÑÁ´ØÂè£Âè∑ÂíåÊ≥¢ÁâπÁéá\n\n<div align=\"center\">\n    \n    <p>Á°¨‰ª∂ËøûÊé•ÂíåCOMÁ´ØÂè£ÈÖçÁΩÆ</p>\n</div>\n\n### ÂêØÂä®ÂÆ¢Êà∑Á´ØClaude Ê°åÈù¢ÁâàÊàñCline\n\n<div align=\"center\">\n    \n    <p> Example in Claude</p>\n</div>\n<div align=\"center\">\n    \n    <p>Example in Cline</p>\n</div>\n\n### Á°¨‰ª∂ÁºñÁ®ã\nfirmwareÂèØ‰ª•Âú®È°πÁõÆ‰ªìÂ∫ì‰∏≠‰∏ãËΩΩÔºåÁõÆÂâçÊºîÁ§∫ÁöÑÊòØPicoÁöÑmicropython‰ª£Á†ÅÊ°à‰æã„ÄÇÂè¶Â≠òÂà∞PicoÂºÄÂèëÊùøËøêË°åÂç≥ÂèØ„ÄÇ\n\n### ‰ªéÊ∫êÁ†ÅÂø´ÈÄüÂºÄÂßã\n1. ‰ªéÊ∫êÁ†ÅÂÆâË£Ö\n```bash\n# ÈÄöËøáÊ∫êÁ†ÅÂÆâË£ÖÔºö\ngit clone https://github.com/mcp2everything/mcp2serial.git\ncd mcp2serial\n\n# ÂàõÂª∫ËôöÊãüÁéØÂ¢É\nuv venv .venv\n\n# ÊøÄÊ¥ªËôöÊãüÁéØÂ¢É\n# Windows:\n.venv\\Scripts\\activate\n# Linux/macOS:\nsource .venv/bin/activate\n\n# ÂÆâË£ÖÂºÄÂèë‰æùËµñ\nuv pip install --editable .\n```\n\n2. ÈÖçÁΩÆ‰∏≤Âè£ÂíåÂëΩ‰ª§Ôºö\nÈªòËÆ§‰∏ç‰ΩøÁî®ÁúüÂÆû‰∏≤Âè£ Áî®Ê®°Êãü‰∏≤Âè£Êù•ÊºîÁ§∫\nÂ¶ÇÊûú‰Ω†ÁöÑÁîµËÑëÊ≤°Êúâ‰∏≤Âè£ÊàñËÄÖÁõÆÂâçÊ≤°Êúâ‰∏≤Âè£ÂèØÁî®\nÂèØ‰ª•Â∞ÜportÂèÇÊï∞ËÆæÁΩÆ‰∏∫LOOP_BACKÔºåËøôÊ†∑Â∞±ÂèØ‰ª•Âú®ÂëΩ‰ª§Ë°åÁõ¥Êé•ÂèëÈÄÅÂëΩ‰ª§‰∫Ü\n‰ΩÜÂêåÊó∂ËØ∑‰øÆÊîπÂ∫îÁ≠îOKÁöÑÂëΩ‰ª§ÁöÑËµ∑ÂßãÁ¨¶ÈúÄË¶ÅÂíåÂèëÈÄÅÁöÑÂëΩ‰ª§‰∏ÄÊ†∑„ÄÇ\nÊØîÂ¶ÇÂèëÈÄÅLED_ON\nÈÇ£‰πàÂ∫îÁ≠îËµ∑ÂßãÁ¨¶‰πüÊòØLED_ON\n```yaml\nserial:\n  # ‰∏≤Âè£ÈÖçÁΩÆ\n  port: LOOP_BACK  # ÂèØÈÄâÔºåÂ¶ÇÊûú‰∏çÊåáÂÆöÂàôËá™Âä®Êü•Êâæ„ÄÇËÆæÁΩÆ‰∏∫LOOP_BACKÊó∂ÂêØÁî®ÂõûÁéØÊ®°ÂºèÔºåÂèëÈÄÅ‰ªÄ‰πàÂ∞±Êé•Êî∂‰ªÄ‰πà\n  baud_rate: 115200  # ÂèØÈÄâÔºåÈªòËÆ§ 115200\n  timeout: 1.0  # ÂèØÈÄâÔºåÈªòËÆ§ 1.0\n  read_timeout: 1.0  # ËØªÂèñË∂ÖÊó∂Êó∂Èó¥Ôºå1ÁßíÂÜÖ‰∏çÂ∫îÁ≠îÂàôÊä•Èîô\n  response_start_string: CMD  # ÂèØÈÄâÔºå‰∏≤Âè£Â∫îÁ≠îÁöÑÂºÄÂßãÂ≠óÁ¨¶‰∏≤ÔºåÈªòËÆ§‰∏∫OK\n\ncommands:\n  # PWMÊéßÂà∂ÂëΩ‰ª§\n  set_pwm:\n    command: \"CMD_PWM {frequency}\"  # ÂÆûÈôÖÂèëÈÄÅÁöÑÂëΩ‰ª§Ê†ºÂºèÔºåserver‰ºöËá™Âä®Ê∑ªÂä†\\r\\n\n    need_parse: false  # ‰∏çÈúÄË¶ÅËß£ÊûêÂìçÂ∫îÂÜÖÂÆπ\n    prompts:\n      - \"ÊääPWMË∞ÉÂà∞ÊúÄÂ§ß\"\n      - \"ÊääPWMË∞ÉÂà∞ÊúÄÂ∞è\"\n      - \"ËØ∑Â∞ÜPWMËÆæÁΩÆ‰∏∫{value}\"\n      - \"ÂÖ≥Èó≠PWM\"\n      - \"ÊääPWMË∞ÉÂà∞‰∏ÄÂçä\"\n```\n\nÂ¶ÇÊûú‰ΩøÁî®ÁúüÂÆû‰∏≤Âè£\n```yaml\n# config.yaml\nserial:\n  port: COM11  # ÊàñËá™Âä®Ê£ÄÊµã\n  baud_rate: 115200  # ÂèØÈÄâÔºåÈªòËÆ§ 115200\n  timeout: 1.0  # ÂèØÈÄâÔºåÈªòËÆ§ 1.0\n  read_timeout: 1.0  # ËØªÂèñË∂ÖÊó∂Êó∂Èó¥Ôºå1ÁßíÂÜÖ‰∏çÂ∫îÁ≠îÂàôÊä•Èîô\n  response_start_string: OK  # ÂèØÈÄâÔºå‰∏≤Âè£Â∫îÁ≠îÁöÑÂºÄÂßãÂ≠óÁ¨¶‰∏≤ÔºåÈªòËÆ§‰∏∫OK\n\ncommands:\n  set_pwm:\n    command: \"PWM {frequency}\\n\"\n    need_parse: false\n    prompts:\n      - \"ÊääPWMË∞ÉÂà∞{value}\"\n```\n\n\n\n### MCPÂÆ¢Êà∑Á´ØÈÖçÁΩÆ\n\nÂú®‰ΩøÁî®ÊîØÊåÅMCPÂçèËÆÆÁöÑÂÆ¢Êà∑Á´ØÔºàÂ¶ÇClaude DesktopÊàñClineÔºâÊó∂ÔºåÈúÄË¶ÅÂú®ÂÆ¢Êà∑Á´ØÁöÑÈÖçÁΩÆÊñá‰ª∂‰∏≠Ê∑ªÂä†‰ª•‰∏ãÂÜÖÂÆπÔºö\nÁõ¥Êé•Ëá™Âä®ÂÆâË£ÖÁöÑÈÖçÁΩÆÊñπÂºè\nÊ∫êÁ†ÅÂºÄÂèëÁöÑÈÖçÁΩÆÊñπÂºè\n#### ‰ΩøÁî®ÈªòËÆ§ÊºîÁ§∫ÂèÇÊï∞Ôºö\n```json\n{\n    \"mcpServers\": {\n        \"mcp2serial\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"‰Ω†ÁöÑÂÆûÈôÖË∑ØÂæÑ/mcp2serial\",  // ‰æãÂ¶Ç: \"C:/Users/Administrator/Documents/develop/my-mcp-server/mcp2serial\"\n                \"run\",\n                \"mcp2serial\"\n            ]\n        }\n    }\n}\n```\n#### ÊåáÂÆöÂèÇÊï∞Êñá‰ª∂Âêç\n```json\n{\n    \"mcpServers\": {\n        \"mcp2serial\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"‰Ω†ÁöÑÂÆûÈôÖË∑ØÂæÑ/mcp2serial\",  // ‰æãÂ¶Ç: \"C:/Users/Administrator/Documents/develop/my-mcp-server/mcp2serial\"\n                \"run\",\n                \"mcp2serial\",\n                \"--config\", // ÂèØÈÄâÂèÇÊï∞ÔºåÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂Âêç\n                \"Pico\"  // ÂèØÈÄâÂèÇÊï∞ÔºåÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂ÂêçÔºå‰∏çÈúÄË¶ÅÊ∑ªÂä†_config.yamlÂêéÁºÄ\n            ]\n        }\n    }\n}\n```\n\n3. ËøêË°åÊúçÂä°Âô®Ôºö\n```bash\n# Á°Æ‰øùÂ∑≤ÊøÄÊ¥ªËôöÊãüÁéØÂ¢É\n.venv\\Scripts\\activate\n\n# ËøêË°åÊúçÂä°Âô®Ôºà‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆconfig.yaml Ê°à‰æã‰∏≠Áî®ÁöÑLOOP_BACK Ê®°Êãü‰∏≤Âè£ÔºåÊó†ÈúÄÁúüÂÆû‰∏≤Âè£Âíå‰∏≤Âè£ËÆæÂ§áÔºâ\nuv run src/mcp2serial/server.py\nÊàñ\nuv run mcp2serial\n# ËøêË°åÊúçÂä°Âô®Ôºà‰ΩøÁî®ÊåáÂÆöÈÖçÁΩÆPico_config.yamlÔºâ\nuv run src/mcp2serial/server.py --config Pico\nÊàñ\nuv run mcp2serial --config Pico\n```\n\n\n## ÊñáÊ°£\n\n- [ÂÆâË£ÖÊåáÂçó](./docs/zh/installation.md)\n- [APIÊñáÊ°£](./docs/zh/api.md)\n- [ÈÖçÁΩÆËØ¥Êòé](./docs/zh/configuration.md)\n\n\n## Â∫îÁî®Âú∫ÊôØ\n\n1. **Êô∫ËÉΩÂÆ∂Â±ÖËá™Âä®Âåñ**\n   - ÈÄöËøáËá™ÁÑ∂ËØ≠Ë®ÄÊéßÂà∂ÁÅØÂÖâ„ÄÅÈ£éÊâáÁ≠âËÆæÂ§á\n   - AI Ê†πÊçÆÁéØÂ¢ÉËá™Âä®Ë∞ÉËäÇËÆæÂ§áÂèÇÊï∞\n\n2. **Â∑•‰∏öËá™Âä®Âåñ**\n   - Êô∫ËÉΩÊéßÂà∂Áîü‰∫ßÁ∫øËÆæÂ§á\n   - ÂÆûÊó∂ÁõëÊéßÂíåË∞ÉÊï¥Â∑•Ëâ∫ÂèÇÊï∞\n\n3. **ÊïôËÇ≤ÂíåÁ†îÁ©∂**\n   - Áâ©ËÅîÁΩëÊïôÂ≠¶ÊºîÁ§∫\n   - Á°¨‰ª∂ÊéßÂà∂ÂÆûÈ™åÂπ≥Âè∞\n\n4. **ÂéüÂûãÂºÄÂèë**\n   - Âø´ÈÄüÈ™åËØÅÁ°¨‰ª∂ÊéßÂà∂ÊñπÊ°à\n   - ÁÆÄÂåñÂºÄÂèëÊµÅÁ®ã\n\n## üöÄ È°πÁõÆÂèëÂ±ïËßÑÂàí\n\n### Á¨¨‰∏ÄÈò∂ÊÆµÔºöÂçèËÆÆÊâ©Â±ï\n- **Â∑•‰∏öÂçèËÆÆÊîØÊåÅ**\n  - MODBUS RTU/TCP\n  - OPC UA\n  - MQTT\n  - CoAP\n  - TCP/IP Socket\n  \n- **Á°¨‰ª∂Êé•Âè£Êâ©Â±ï**\n  - I2C\n  - SPI\n  - CAN\n  - 1-Wire\n  - GPIO\n\n### Á¨¨‰∫åÈò∂ÊÆµÔºöMCP2Anything Âπ≥Âè∞\n- **Áªü‰∏ÄÈõÜÊàêÂπ≥Âè∞**\n  - ÂèØËßÜÂåñÈÖçÁΩÆÁïåÈù¢\n  - ‰∏ÄÈîÆÂêØÁî®ÂêÑÁ±ªÂçèËÆÆ\n  - ÂÆûÊó∂ÁõëÊéß‰ª™Ë°®Áõò\n  - ËÆæÂ§áÁÆ°ÁêÜÁ≥ªÁªü\n\n- **Êô∫ËÉΩÂäüËÉΩ**\n  - ÂçèËÆÆËá™Âä®Ê£ÄÊµã\n  - ËÆæÂ§áËá™Âä®ÂèëÁé∞\n  - ÂèÇÊï∞Êô∫ËÉΩ‰ºòÂåñ\n  - ÂºÇÂ∏∏È¢ÑË≠¶Á≥ªÁªü\n\n### Á¨¨‰∏âÈò∂ÊÆµÔºöÁîüÊÄÅÁ≥ªÁªüÂª∫ËÆæ\n- **Êèí‰ª∂Â∏ÇÂú∫**\n  - ÂçèËÆÆÊèí‰ª∂\n  - ËÆæÂ§áÈ©±Âä®\n  - Ëá™ÂÆö‰πâÂäüËÉΩÊ®°Âùó\n  - Á§æÂå∫Ë¥°ÁåÆÈõÜÊàê\n\n- **‰∫ëÊúçÂä°ÈõÜÊàê**\n  - ËÆæÂ§á‰∫ëÁÆ°ÁêÜ\n  - ËøúÁ®ãÊéßÂà∂\n  - Êï∞ÊçÆÂàÜÊûê\n  - AI ËÆ≠ÁªÉÂπ≥Âè∞\n\n### Á¨¨ÂõõÈò∂ÊÆµÔºöË°å‰∏öËß£ÂÜ≥ÊñπÊ°à\n- **ÂûÇÁõ¥È¢ÜÂüüÈÄÇÈÖç**\n  - Â∑•‰∏öËá™Âä®Âåñ\n  - Êô∫ËÉΩÂª∫Á≠ë\n  - ÂÜú‰∏öÁâ©ËÅîÁΩë\n  - Êô∫ÊÖßÂüéÂ∏Ç\n\n- **ÂÆöÂà∂ÂåñÊúçÂä°**\n  - Ë°å‰∏öÂçèËÆÆÈÄÇÈÖç\n  - ‰∏ì‰∏öÊäÄÊúØÊîØÊåÅ\n  - Ëß£ÂÜ≥ÊñπÊ°àÂí®ËØ¢\n  - ÂüπËÆ≠ÊúçÂä°\n\n## üîÆ ÊÑøÊôØÂ±ïÊúõ\n\nMCP2Serial Ê≠£Âú®ÂºÄÂêØÁâ©ËÅîÁΩëÁöÑÊñ∞ÁØáÁ´†Ôºö\n\n- **ÂçèËÆÆÁªü‰∏Ä**: ÈÄöËøá MCP2Anything Âπ≥Âè∞ÂÆûÁé∞ÂÖ®ÂçèËÆÆÊîØÊåÅ\n- **Âç≥ÊèíÂç≥Áî®**: ‰∏ÄÈîÆÈÖçÁΩÆÔºåËá™Âä®ÂèëÁé∞ÔºåÈõ∂Èó®Êßõ‰ΩøÁî®\n- **AI ËµãËÉΩ**: Ê∑±Â∫¶ÈõÜÊàê AI ËÉΩÂäõÔºåÂÆûÁé∞Êô∫ËÉΩÂÜ≥Á≠ñ\n- **ÂºÄÊîæÁîüÊÄÅ**: Âª∫Á´ãÊ¥ªË∑ÉÁöÑÂºÄÂèëËÄÖÁ§æÂå∫ÂíåÊèí‰ª∂Â∏ÇÂú∫\n\n## Êú™Êù•Â±ïÊúõ\n\nMCP2Serial Ê≠£Âú®ÂºÄÂêØÁâ©ËÅîÁΩëÁöÑÊñ∞ÁØáÁ´†Ôºö\n\n- **Â§öÂçèËÆÆÊîØÊåÅ**: ËÆ°ÂàíÊîØÊåÅÊõ¥Â§öÈÄö‰ø°ÂçèËÆÆÔºàI2C„ÄÅSPIÁ≠âÔºâ\n- **ËÆæÂ§áÁîüÊÄÅ**: Âª∫Á´ãÂºÄÊîæÁöÑËÆæÂ§áÊîØÊåÅÁîüÊÄÅÁ≥ªÁªü\n- **AI Â¢ûÂº∫**: ÈõÜÊàêÊõ¥Â§ö AI ËÉΩÂäõÔºåÊèê‰æõÊõ¥Êô∫ËÉΩÁöÑÊéßÂà∂ÈÄªËæë\n- **ÂèØËßÜÂåñ**: ÂºÄÂèëÁõ¥ËßÇÁöÑÁõëÊéßÂíåÈÖçÁΩÆÁïåÈù¢\n\n## Áõ∏ÂÖ≥ËµÑÊ∫ê\n\n- [MCP ÂçèËÆÆËßÑËåÉ](https://modelcontextprotocol.io/)\n- [È°πÁõÆÊñáÊ°£](docs/)\n- [Á§∫‰æã‰ª£Á†Å](examples/)\n- [Â∏∏ËßÅÈóÆÈ¢ò](docs/FAQ.md)\n\n## ÂèÇ‰∏éË¥°ÁåÆ\n\nÊàë‰ª¨Ê¨¢ËøéÂêÑÁßçÂΩ¢ÂºèÁöÑË¥°ÁåÆÔºåÊó†ËÆ∫ÊòØÊñ∞ÂäüËÉΩ„ÄÅÊñáÊ°£ÊîπËøõËøòÊòØÈóÆÈ¢òÊä•Âëä„ÄÇÊü•Áúã [Ë¥°ÁåÆÊåáÂçó](CONTRIBUTING.md) ‰∫ÜËß£Êõ¥Â§ö‰ø°ÊÅØ„ÄÇ\n\n## ËÆ∏ÂèØËØÅ\n\nÊú¨È°πÁõÆÈááÁî® MIT ËÆ∏ÂèØËØÅ - ËØ¶ËßÅ [LICENSE](LICENSE) Êñá‰ª∂",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp2serial",
        "mcp2everything",
        "iot",
        "devices ai",
        "mcp2everything mcp2serial",
        "control mcp2everything"
      ],
      "category": "iot-and-device-control"
    },
    "mcp2everything--mcp2tcp": {
      "owner": "mcp2everything",
      "name": "mcp2tcp",
      "url": "https://github.com/mcp2everything/mcp2tcp",
      "imageUrl": "/freedevtools/mcp/pfp/mcp2everything.webp",
      "description": "Connects hardware devices with AI models using natural language commands, enabling real-time control and understanding of complex instructions. Integrates seamlessly with the Model Context Protocol (MCP) for resource management and tool invocation.",
      "stars": 6,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-03T08:28:23Z",
      "readme_content": "# mcp2tcp: ËøûÊé•Áâ©ÁêÜ‰∏ñÁïå‰∏éAIÂ§ßÊ®°ÂûãÁöÑÊ°•Ê¢Å \n\n[English](README_EN.md) | ÁÆÄ‰Ωì‰∏≠Êñá\n\n<div align=\"center\">\n    \n    <p>ÈÄöËøáËá™ÁÑ∂ËØ≠Ë®ÄÊéßÂà∂Á°¨‰ª∂ÔºåÂºÄÂêØÁâ©ËÅîÁΩëÊñ∞Á∫™ÂÖÉ</p>\n</div>\n\n## Á≥ªÁªüÊû∂ÊûÑ\n\n<div align=\"center\">\n    \n    <p>mcp2tcp Á≥ªÁªüÊû∂ÊûÑÂõæ</p>\n</div>\n\n## Â∑•‰ΩúÊµÅÁ®ã\n\n<div align=\"center\">\n    \n    <p>mcp2tcp Â∑•‰ΩúÊµÅÁ®ãÂõæ</p>\n</div>\n\n## È°πÁõÆÊÑøÊôØ\n\nmcp2tcp Â∞ÜTCPËÆæÂ§áÊé•ÂÖ•AIÂ§ßÊ®°ÂûãÁöÑÈ°πÁõÆÔºåÂÆÉÈÄöËøá Model Context Protocol (MCP) Â∞ÜÁâ©ÁêÜ‰∏ñÁïå‰∏é AI Â§ßÊ®°ÂûãÊó†ÁºùËøûÊé•„ÄÇÊúÄÁªàÂÆûÁé∞Ôºö\n- Áî®Ëá™ÁÑ∂ËØ≠Ë®ÄÊéßÂà∂‰Ω†ÁöÑÁ°¨‰ª∂ËÆæÂ§á\n- AI ÂÆûÊó∂ÂìçÂ∫îÂπ∂Ë∞ÉÊï¥Áâ©ÁêÜÂèÇÊï∞\n- ËÆ©‰Ω†ÁöÑËÆæÂ§áÂÖ∑Â§áÁêÜËß£ÂíåÊâßË°åÂ§çÊùÇÊåá‰ª§ÁöÑËÉΩÂäõ\n\n## ‰∏ªË¶ÅÁâπÊÄß\n\n- **Êô∫ËÉΩTCPÈÄö‰ø°**\n  - Ëá™Âä®Ê£ÄÊµãÂíåÈÖçÁΩÆTCPËÆæÂ§á Áî®Êà∑‰πüÂèØÊåáÂÆöTCPÂè∑\n  - ÊîØÊåÅÂ§öÁßçÊ≥¢ÁâπÁéáÔºàÈªòËÆ§ 115200Ôºâ\n  - ÂÆûÊó∂Áä∂ÊÄÅÁõëÊéßÂíåÈîôËØØÂ§ÑÁêÜ\n\n- **MCP ÂçèËÆÆÈõÜÊàê**\n  - ÂÆåÊï¥ÊîØÊåÅ Model Context Protocol\n  - ÊîØÊåÅËµÑÊ∫êÁÆ°ÁêÜÂíåÂ∑•ÂÖ∑Ë∞ÉÁî®\n  - ÁÅµÊ¥ªÁöÑÊèêÁ§∫ËØçÁ≥ªÁªü\n\n## ÊîØÊåÅÁöÑÂÆ¢Êà∑Á´Ø\n\nmcp2tcp ÊîØÊåÅÊâÄÊúâÂÆûÁé∞‰∫Ü MCP ÂçèËÆÆÁöÑÂÆ¢Êà∑Á´ØÔºåÂåÖÊã¨Ôºö\n\n| ÂÆ¢Êà∑Á´Ø | ÁâπÊÄßÊîØÊåÅ | ËØ¥Êòé |\n|--------|----------|------|\n| Claude Desktop | ÂÆåÊï¥ÊîØÊåÅ | Êé®Ëçê‰ΩøÁî®ÔºåÊîØÊåÅÊâÄÊúâ MCP ÂäüËÉΩ |\n| Continue | ÂÆåÊï¥ÊîØÊåÅ | ‰ºòÁßÄÁöÑÂºÄÂèëÂ∑•ÂÖ∑ÈõÜÊàê |\n| Cline | ËµÑÊ∫ê+Â∑•ÂÖ∑ | ÊîØÊåÅÂ§öÁßç AI Êèê‰æõÂïÜ |\n| Zed | Âü∫Á°ÄÊîØÊåÅ | ÊîØÊåÅÊèêÁ§∫ËØçÂëΩ‰ª§ |\n| Sourcegraph Cody | ËµÑÊ∫êÊîØÊåÅ | ÈÄöËøá OpenCTX ÈõÜÊàê |\n| Firebase Genkit | ÈÉ®ÂàÜÊîØÊåÅ | ÊîØÊåÅËµÑÊ∫êÂàóË°®ÂíåÂ∑•ÂÖ∑ |\n\n## ÊîØÊåÅÁöÑ AI Ê®°Âûã\n\nÂæóÁõä‰∫éÁÅµÊ¥ªÁöÑÂÆ¢Êà∑Á´ØÊîØÊåÅÔºåmcp2tcp ÂèØ‰ª•‰∏éÂ§öÁßç AI Ê®°ÂûãÂçèÂêåÂ∑•‰ΩúÔºö\n\n### ‰∫ëÁ´ØÊ®°Âûã\n- OpenAI (GPT-4, GPT-3.5)\n- Anthropic Claude\n- Google Gemini\n- AWS Bedrock\n- Azure OpenAI\n- Google Cloud Vertex AI\n\n### Êú¨Âú∞Ê®°Âûã\n- LM Studio ÊîØÊåÅÁöÑÊâÄÊúâÊ®°Âûã\n- Ollama ÊîØÊåÅÁöÑÊâÄÊúâÊ®°Âûã\n- ‰ªª‰ΩïÂÖºÂÆπ OpenAI API ÁöÑÊ®°Âûã\n\n### ÂáÜÂ§á\nPython3.11 ÊàñÊõ¥È´òÁâàÊú¨\nClaude Desktop Êàñ Cline\n\n\n## Âø´ÈÄüÂºÄÂßã\n\n### 1. ÂÆâË£Ö\n\n#### WindowsÁî®Êà∑\n‰∏ãËΩΩ [install.py](https://raw.githubusercontent.com/mcp2everything/mcp2tcp/main/install.py) \n```bash\npython install.py\n```\n#### macOSÁî®Êà∑\n```bash\n# ‰∏ãËΩΩÂÆâË£ÖËÑöÊú¨\ncurl -O https://raw.githubusercontent.com/mcp2everything/mcp2tcp/main/install_macos.py\n\n# ËøêË°åÂÆâË£ÖËÑöÊú¨\npython3 install_macos.py\n```\n\n#### Ubuntu/Raspberry PiÁî®Êà∑\n```bash\n# ‰∏ãËΩΩÂÆâË£ÖËÑöÊú¨\ncurl -O https://raw.githubusercontent.com/mcp2everything/mcp2tcp/main/install_ubuntu.py\n\n# ËøêË°åÂÆâË£ÖËÑöÊú¨\npython3 install_ubuntu.py\n```\n\nÂÆâË£ÖËÑöÊú¨‰ºöËá™Âä®ÂÆåÊàê‰ª•‰∏ãÊìç‰ΩúÔºö\n- ‚úÖ Ê£ÄÊü•Á≥ªÁªüÁéØÂ¢É\n- ‚úÖ ÂÆâË£ÖÂøÖË¶ÅÁöÑ‰æùËµñ\n- ‚úÖ ÂàõÂª∫ÈªòËÆ§ÈÖçÁΩÆÊñá‰ª∂\n- ‚úÖ ÈÖçÁΩÆClaudeÊ°åÈù¢ÁâàÔºàÂ¶ÇÊûúÂ∑≤ÂÆâË£ÖÔºâ\n- ‚úÖ Ê£ÄÊü•TCPËÆæÂ§á\n\n### ÊâãÂä®ÂàÜÊ≠•ÂÆâË£Ö‰æùËµñ\n```bash\nwindows\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\nMacOS\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n‰∏ªË¶Å‰æùËµñuvÂ∑•ÂÖ∑ÔºåÊâÄ‰ª•ÂΩìpythonÂíåuv‰ª•ÂèäClaudeÊàñClineÂÆâË£ÖÂ•ΩÂêéÂ∞±ÂèØ‰ª•‰∫Ü„ÄÇ\n\n### Âü∫Êú¨ÈÖçÁΩÆ\nÂú®‰Ω†ÁöÑ MCP ÂÆ¢Êà∑Á´ØÔºàÂ¶Ç Claude Desktop Êàñ ClineÔºâÈÖçÁΩÆÊñá‰ª∂‰∏≠Ê∑ªÂä†‰ª•‰∏ãÂÜÖÂÆπÔºö\nÊ≥®ÊÑèÔºöÂ¶ÇÊûú‰ΩøÁî®ÁöÑËá™Âä®ÂÆâË£ÖÈÇ£‰πà‰ºöËá™Âä®ÈÖçÁΩÆCalude DesktopÊó†ÈúÄÊ≠§Ê≠•„ÄÇ\n‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆÊñá‰ª∂Ôºö\n```json\n{\n    \"mcpServers\": {\n        \"mcp2tcp\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"mcp2tcp\"\n            ]\n        }\n    }\n}\n```\n> Ê≥®ÊÑèÔºö‰øÆÊîπÈÖçÁΩÆÂêéÈúÄË¶ÅÈáçÂêØClineÊàñËÄÖClaudeÂÆ¢Êà∑Á´ØËΩØ‰ª∂\n\nÈÖçÁΩÆTCPÂíåÂëΩ‰ª§Ôºö\nÊ≥®ÊÑè‰∏ãÈù¢ÁöÑÈÖçÁΩÆÈªòËÆ§‰∏∫COM11 ÈúÄË¶ÅÊ†πÊçÆÂÆûÈôÖËøõË°å‰øÆÊîπ\n```yaml\n# config.yaml\ntcp:\n  # TCPÊúçÂä°Âô®ÈÖçÁΩÆ\n  remote_ip: \"127.0.0.1\"  # ËøúÁ´ØIPÂú∞ÂùÄ\n  port: 9999  # Á´ØÂè£Âè∑\n  connect_timeout: 3.0  # ËøûÊé•Ë∂ÖÊó∂Êó∂Èó¥ÔºåÂçï‰Ωç‰∏∫Áßí\n  receive_timeout: 2.0  # Êé•Êî∂Ë∂ÖÊó∂Êó∂Èó¥ÔºåÂçï‰Ωç‰∏∫Áßí\n  communication_type: \"client\"  # ÈÄö‰ø°Á±ªÂûãÔºåclientÊàñserver\n  response_start_string: \"CMD\"  # ÂèØÈÄâÔºåTCPÂ∫îÁ≠îÁöÑÂºÄÂßãÂ≠óÁ¨¶‰∏≤ÔºåÈªòËÆ§‰∏∫OK\n\ncommands:\n  # PWMÊéßÂà∂ÂëΩ‰ª§\n  set_pwm:\n    command: \"CMD_PWM {frequency}\"  # frequency‰∏∫0-100ÁöÑÊï¥Êï∞ÔºåË°®Á§∫PWMÂç†Á©∫ÊØî\n    need_parse: false  # ‰∏çÈúÄË¶ÅËß£ÊûêÂìçÂ∫îÂÜÖÂÆπ\n    data_type: \"ascii\"  # Êï∞ÊçÆÁ±ªÂûãÔºåasciiÊàñhex\n    parameters:\n      - name: \"frequency\"\n        type: \"integer\"\n        description: \"PWM frequency value (0-100)\"\n        required: true\n    prompts:\n      - \"ÊääPWMË∞ÉÂà∞ÊúÄÂ§ß (frequency=100)\"\n      - \"ÊääPWMË∞ÉÂà∞ÊúÄÂ∞è (frequency=0)\"\n      - \"ËØ∑Â∞ÜPWMËÆæÁΩÆ‰∏∫{frequency} (0-100ÁöÑÊï¥Êï∞)\"\n      - \"ÂÖ≥Èó≠PWM (frequency=0)\"\n      - \"ÊääPWMË∞ÉÂà∞‰∏ÄÂçä (frequency=50)\"\n```\n## ÈÖçÁΩÆËØ¥Êòé\n### ÈÖçÁΩÆÊñá‰ª∂‰ΩçÁΩÆ\nÈÖçÁΩÆÊñá‰ª∂Ôºà`config.yaml`ÔºâÂèØ‰ª•ÊîæÂú®‰ΩçÁΩÆÔºö\nÁî®Êà∑‰∏ªÁõÆÂΩïÔºàÊé®Ëçê‰∏™‰∫∫‰ΩøÁî®Ôºâ\n```bash\n# WindowsÁ≥ªÁªü\nC:\\Users\\Áî®Êà∑Âêç\\.mcp2tcp\\config.yaml\n\n# macOSÁ≥ªÁªü\n/Users/Áî®Êà∑Âêç/.mcp2tcp/config.yaml\n\n# LinuxÁ≥ªÁªü\n/home/Áî®Êà∑Âêç/.mcp2tcp/config.yaml\n```\n- ÈÄÇÁî®Âú∫ÊôØÔºö‰∏™‰∫∫ÈÖçÁΩÆ\n- ÈúÄË¶ÅÂàõÂª∫ `.mcp2tcp` ÁõÆÂΩïÔºö\n  ```bash\n  # WindowsÁ≥ªÁªüÔºàÂú®ÂëΩ‰ª§ÊèêÁ§∫Á¨¶‰∏≠Ôºâ\n  mkdir \"%USERPROFILE%\\.mcp2tcp\"\n  \n  # macOS/LinuxÁ≥ªÁªü\n  mkdir -p ~/.mcp2tcp\n  ```\n\n### TCPÈÖçÁΩÆ ÂëΩ‰ª§ÈÖçÁΩÆËøõÈò∂\nÂú® `config.yaml` ‰∏≠Ê∑ªÂä†Ëá™ÂÆö‰πâÂëΩ‰ª§Ôºö\n\n\n‰ΩøÁî®ÁúüÂÆûTCP\n```yaml\n# config.yaml\n # PICO‰ø°ÊÅØÊü•ËØ¢ÂëΩ‰ª§\n  get_pico_info:\n    command: \"CMD_PICO_INFO\"  # ÂÆûÈôÖÂèëÈÄÅÁöÑÂëΩ‰ª§Ê†ºÂºèÔºåserver‰ºöËá™Âä®Ê∑ªÂä†\\r\\n\n    need_parse: true  # ÈúÄË¶ÅËß£ÊûêÂìçÂ∫îÂÜÖÂÆπ\n    data_type: \"ascii\"  # Êï∞ÊçÆÁ±ªÂûãÔºåasciiÊàñhex\n    prompts:\n      - \"Êü•ËØ¢PicoÊùø‰ø°ÊÅØ\"\n      - \"ÊòæÁ§∫ÂºÄÂèëÊùøÁä∂ÊÄÅ\"\n```\nÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂Ôºö\nÊØîÂ¶ÇÊåáÂÆöÂä†ËΩΩPicoÈÖçÁΩÆÊñá‰ª∂ÔºöPico_config.yaml\n```json\n{\n    \"mcpServers\": {\n        \"mcp2tcp\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"mcp2tcp\",\n                \"--config\",\n                \"Pico\"  //ÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂ÂêçÔºå‰∏çÈúÄË¶ÅÊ∑ªÂä†_config.yamlÂêéÁºÄ\n            ]\n        }\n    }\n}\n```\n‰∏∫‰∫ÜËÉΩ‰ΩøÁî®Â§ö‰∏™TCPÔºåÊàë‰ª¨ÂèØ‰ª•Êñ∞Â¢ûÂ§ö‰∏™mcp2tcpÁöÑÊúçÂä° ÊåáÂÆö‰∏çÂêåÁöÑÈÖçÁΩÆÊñá‰ª∂ÂêçÂç≥ÂèØ„ÄÇ\nÂ¶ÇÊûúË¶ÅÊé•ÂÖ•Â§ö‰∏™ËÆæÂ§áÔºåÂ¶ÇÊúâË¶ÅËøûÊé•Á¨¨‰∫å‰∏™ËÆæÂ§áÔºö\nÊåáÂÆöÂä†ËΩΩPico2ÈÖçÁΩÆÊñá‰ª∂ÔºöPico2_config.yaml\n```json\n{\n    \"mcpServers\": {\n        \"mcp2tcp2\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"mcp2tcp\",\n                \"--config\",\n                \"Pico2\"  //ÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂ÂêçÔºå‰∏çÈúÄË¶ÅÊ∑ªÂä†_config.yamlÂêéÁºÄ\n            ]\n        }\n    }\n}\n```\n\n\n## ÊµãËØï\n\nÂú®ÂºÄÂßã‰ΩøÁî®‰πãÂâçÔºåÂª∫ËÆÆÂÖàËøõË°åÊµãËØï‰ª•Á°Æ‰øù‰∏ÄÂàáÊ≠£Â∏∏Â∑•‰Ωú„ÄÇ\n\n#### 1. ÂêØÂä®ÊµãËØïÊúçÂä°Âô®\n\nÈ¶ñÂÖàÔºåÂêØÂä®ÊµãËØïÁõÆÂΩï‰∏ãÁöÑ TCP ÊúçÂä°Âô®Êù•Ê®°ÊãüÁ°¨‰ª∂ËÆæÂ§áÔºö\n\n```bash\n# ËøõÂÖ•È°πÁõÆÁõÆÂΩï\ncd tests\n\n# ÂêØÂä®ÊµãËØïÊúçÂä°Âô®\npython tcp_server.py\n```\n\nÊúçÂä°Âô®Â∞ÜÂú®Êú¨Âú∞ÂêØÂä®ÔºåÁõëÂê¨Á´ØÂè£ 9999„ÄÇ‰Ω†‰ºöÁúãÂà∞Á±ª‰ººËøôÊ†∑ÁöÑËæìÂá∫Ôºö\n```\nTCP server started on 127.0.0.1:9999\nWaiting for connections...\n```\n\n\n### ÂêØÂä®ÂÆ¢Êà∑Á´ØClaude Ê°åÈù¢ÁâàÊàñCline\n<div align=\"center\">\n    \n    <p>Example in Cline</p>\n</div>\n\n### ‰ªéÊ∫êÁ†ÅÂø´ÈÄüÂºÄÂßã\n1. ‰ªéÊ∫êÁ†ÅÂÆâË£Ö\n```bash\n# ÈÄöËøáÊ∫êÁ†ÅÂÆâË£ÖÔºö\ngit clone https://github.com/mcp2everything/mcp2tcp.git\ncd mcp2tcp\n\n# ÂàõÂª∫ËôöÊãüÁéØÂ¢É\nuv venv .venv\n\n# ÊøÄÊ¥ªËôöÊãüÁéØÂ¢É\n# Windows:\n.venv\\Scripts\\activate\n# Linux/macOS:\nsource .venv/bin/activate\n\n# ÂÆâË£ÖÂºÄÂèë‰æùËµñ\nuv pip install --editable .\n```\n\n\nÂ¶ÇÊûú‰ΩøÁî®ÁúüÂÆûTCP\n```yaml\n# config.yaml\ntcp:\n  # TCPÊúçÂä°Âô®ÈÖçÁΩÆ\n  remote_ip: \"127.0.0.1\"  # ËøúÁ´ØIPÂú∞ÂùÄ\n  port: 9999  # Á´ØÂè£Âè∑\n  connect_timeout: 3.0  # ËøûÊé•Ë∂ÖÊó∂Êó∂Èó¥ÔºåÂçï‰Ωç‰∏∫Áßí\n  receive_timeout: 2.0  # Êé•Êî∂Ë∂ÖÊó∂Êó∂Èó¥ÔºåÂçï‰Ωç‰∏∫Áßí\n  communication_type: \"client\"  # ÈÄö‰ø°Á±ªÂûãÔºåclientÊàñserver\n  response_start_string: \"CMD\"  # ÂèØÈÄâÔºåTCPÂ∫îÁ≠îÁöÑÂºÄÂßãÂ≠óÁ¨¶‰∏≤ÔºåÈªòËÆ§‰∏∫OK\n\ncommands:\n  # PWMÊéßÂà∂ÂëΩ‰ª§\n  set_pwm:\n    command: \"CMD_PWM {frequency}\"  # frequency‰∏∫0-100ÁöÑÊï¥Êï∞ÔºåË°®Á§∫PWMÂç†Á©∫ÊØî\n    need_parse: false  # ‰∏çÈúÄË¶ÅËß£ÊûêÂìçÂ∫îÂÜÖÂÆπ\n    data_type: \"ascii\"  # Êï∞ÊçÆÁ±ªÂûãÔºåasciiÊàñhex\n    parameters:\n      - name: \"frequency\"\n        type: \"integer\"\n        description: \"PWM frequency value (0-100)\"\n        required: true\n    prompts:\n      - \"ÊääPWMË∞ÉÂà∞ÊúÄÂ§ß (frequency=100)\"\n      - \"ÊääPWMË∞ÉÂà∞ÊúÄÂ∞è (frequency=0)\"\n      - \"ËØ∑Â∞ÜPWMËÆæÁΩÆ‰∏∫{frequency} (0-100ÁöÑÊï¥Êï∞)\"\n      - \"ÂÖ≥Èó≠PWM (frequency=0)\"\n      - \"ÊääPWMË∞ÉÂà∞‰∏ÄÂçä (frequency=50)\"\n```\n\n\n\n### MCPÂÆ¢Êà∑Á´ØÈÖçÁΩÆ\n\nÂú®‰ΩøÁî®ÊîØÊåÅMCPÂçèËÆÆÁöÑÂÆ¢Êà∑Á´ØÔºàÂ¶ÇClaude DesktopÊàñClineÔºâÊó∂ÔºåÈúÄË¶ÅÂú®ÂÆ¢Êà∑Á´ØÁöÑÈÖçÁΩÆÊñá‰ª∂‰∏≠Ê∑ªÂä†‰ª•‰∏ãÂÜÖÂÆπÔºö\nÁõ¥Êé•Ëá™Âä®ÂÆâË£ÖÁöÑÈÖçÁΩÆÊñπÂºè\nÊ∫êÁ†ÅÂºÄÂèëÁöÑÈÖçÁΩÆÊñπÂºè\n#### ‰ΩøÁî®ÈªòËÆ§ÊºîÁ§∫ÂèÇÊï∞Ôºö\n```json\n{\n    \"mcpServers\": {\n        \"mcp2tcp\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"‰Ω†ÁöÑÂÆûÈôÖË∑ØÂæÑ/mcp2tcp\",  // ‰æãÂ¶Ç: \"C:/Users/Administrator/Documents/develop/my-mcp-server/mcp2tcp\"\n                \"run\",\n                \"mcp2tcp\"\n            ]\n        }\n    }\n}\n```\n#### ÊåáÂÆöÂèÇÊï∞Êñá‰ª∂Âêç\n```json\n{\n    \"mcpServers\": {\n        \"mcp2tcp\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"‰Ω†ÁöÑÂÆûÈôÖË∑ØÂæÑ/mcp2tcp\",  // ‰æãÂ¶Ç: \"C:/Users/Administrator/Documents/develop/my-mcp-server/mcp2tcp\"\n                \"run\",\n                \"mcp2tcp\",\n                \"--config\", // ÂèØÈÄâÂèÇÊï∞ÔºåÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂Âêç\n                \"Pico\"  // ÂèØÈÄâÂèÇÊï∞ÔºåÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂ÂêçÔºå‰∏çÈúÄË¶ÅÊ∑ªÂä†_config.yamlÂêéÁºÄ\n            ]\n        }\n    }\n}\n```\n### ÈÖçÁΩÆÊñá‰ª∂‰ΩçÁΩÆ\nÈÖçÁΩÆÊñá‰ª∂Ôºà`config.yaml`ÔºâÂèØ‰ª•ÊîæÂú®‰∏çÂêå‰ΩçÁΩÆÔºåÁ®ãÂ∫è‰ºöÊåâ‰ª•‰∏ãÈ°∫Â∫èÊü•ÊâæÔºö\n\n#### 1. ÂΩìÂâçÂ∑•‰ΩúÁõÆÂΩïÔºàÈÄÇÂêàÂºÄÂèëÊµãËØïÔºâ\n- Ë∑ØÂæÑÔºö`./config.yaml`\n- Á§∫‰æãÔºöÂ¶ÇÊûú‰Ω†Âú® `C:\\Projects` ËøêË°åÁ®ãÂ∫èÔºåÂÆÉ‰ºöÊü•Êâæ `C:\\Projects\\config.yaml`\n- ÈÄÇÁî®Âú∫ÊôØÔºöÂºÄÂèëÂíåÊµãËØï\n- ‰∏çÈúÄË¶ÅÁâπÊÆäÊùÉÈôê\n\n#### 2. Áî®Êà∑‰∏ªÁõÆÂΩïÔºàÊé®Ëçê‰∏™‰∫∫‰ΩøÁî®Ôºâ\n```bash\n# WindowsÁ≥ªÁªü\nC:\\Users\\Áî®Êà∑Âêç\\.mcp2tcp\\config.yaml\n\n# macOSÁ≥ªÁªü\n/Users/Áî®Êà∑Âêç/.mcp2tcp/config.yaml\n\n# LinuxÁ≥ªÁªü\n/home/Áî®Êà∑Âêç/.mcp2tcp/config.yaml\n```\n- ÈÄÇÁî®Âú∫ÊôØÔºö‰∏™‰∫∫ÈÖçÁΩÆ\n- ÈúÄË¶ÅÂàõÂª∫ `.mcp2tcp` ÁõÆÂΩïÔºö\n  ```bash\n  # WindowsÁ≥ªÁªüÔºàÂú®ÂëΩ‰ª§ÊèêÁ§∫Á¨¶‰∏≠Ôºâ\n  mkdir \"%USERPROFILE%\\.mcp2tcp\"\n  \n  # macOS/LinuxÁ≥ªÁªü\n  mkdir -p ~/.mcp2tcp\n  ```\n\n#### 3. Á≥ªÁªüÁ∫ßÈÖçÁΩÆÔºàÈÄÇÂêàÂ§öÁî®Êà∑ÁéØÂ¢ÉÔºâ\n```bash\n# WindowsÁ≥ªÁªüÔºàÈúÄË¶ÅÁÆ°ÁêÜÂëòÊùÉÈôêÔºâ\nC:\\ProgramData\\mcp2tcp\\config.yaml\n\n# macOS/LinuxÁ≥ªÁªüÔºàÈúÄË¶ÅrootÊùÉÈôêÔºâ\n/etc/mcp2tcp/config.yaml\n```\n- ÈÄÇÁî®Âú∫ÊôØÔºöÂ§öÁî®Êà∑ÂÖ±‰∫´ÈÖçÁΩÆ\n- ÂàõÂª∫ÁõÆÂΩïÂπ∂ËÆæÁΩÆÊùÉÈôêÔºö\n  ```bash\n  # WindowsÁ≥ªÁªüÔºà‰ª•ÁÆ°ÁêÜÂëòË∫´‰ªΩËøêË°åÔºâ\n  mkdir \"C:\\ProgramData\\mcp2tcp\"\n  \n  # macOS/LinuxÁ≥ªÁªüÔºà‰ª•rootË∫´‰ªΩËøêË°åÔºâ\n  sudo mkdir -p /etc/mcp2tcp\n  sudo chown root:root /etc/mcp2tcp\n  sudo chmod 755 /etc/mcp2tcp\n  ```\n\nÁ®ãÂ∫è‰ºöÊåâÁÖß‰∏äËø∞È°∫Â∫èÊü•ÊâæÈÖçÁΩÆÊñá‰ª∂Ôºå‰ΩøÁî®ÊâæÂà∞ÁöÑÁ¨¨‰∏Ä‰∏™ÊúâÊïàÈÖçÁΩÆÊñá‰ª∂„ÄÇÊ†πÊçÆ‰Ω†ÁöÑÈúÄÊ±ÇÈÄâÊã©ÂêàÈÄÇÁöÑ‰ΩçÁΩÆÔºö\n- ÂºÄÂèëÊµãËØïÔºö‰ΩøÁî®ÂΩìÂâçÁõÆÂΩï\n- ‰∏™‰∫∫‰ΩøÁî®ÔºöÂª∫ËÆÆ‰ΩøÁî®Áî®Êà∑‰∏ªÁõÆÂΩïÔºàÊé®ËçêÔºâ\n- Â§öÁî®Êà∑ÁéØÂ¢ÉÔºö‰ΩøÁî®Á≥ªÁªüÁ∫ßÈÖçÁΩÆÔºàProgramDataÊàñ/etcÔºâ\n\n3. ËøêË°åÊúçÂä°Âô®Ôºö\n```bash\n# Á°Æ‰øùÂ∑≤ÊøÄÊ¥ªËôöÊãüÁéØÂ¢É\n.venv\\Scripts\\activate\n\n# ËøêË°åÊúçÂä°Âô®Ôºà‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆconfig.yaml Ê°à‰æã‰∏≠Áî®ÁöÑLOOP_BACK Ê®°ÊãüTCPÔºåÊó†ÈúÄÁúüÂÆûTCPÂíåTCPËÆæÂ§áÔºâ\nuv run src/mcp2tcp/server.py\nÊàñ\nuv run mcp2tcp\n# ËøêË°åÊúçÂä°Âô®Ôºà‰ΩøÁî®ÊåáÂÆöÈÖçÁΩÆPico_config.yamlÔºâ\nuv run src/mcp2tcp/server.py --config Pico\nÊàñ\nuv run mcp2tcp --config Pico\n```\n\n\n## ÊñáÊ°£\n\n- [ÂÆâË£ÖÊåáÂçó](./docs/zh/installation.md)\n- [APIÊñáÊ°£](./docs/zh/api.md)\n- [ÈÖçÁΩÆËØ¥Êòé](./docs/zh/configuration.md)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iot",
        "mcp2tcp",
        "mcp2everything",
        "protocol mcp",
        "control mcp2everything",
        "mcp2everything mcp2tcp"
      ],
      "category": "iot-and-device-control"
    },
    "minhalvp--android-mcp-server": {
      "owner": "minhalvp",
      "name": "android-mcp-server",
      "url": "https://github.com/minhalvp/android-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/minhalvp.webp",
      "description": "Control Android devices programmatically by executing ADB commands, capturing screenshots, analyzing UI layouts, and managing device packages. Integrates seamlessly into development workflows for Android device management.",
      "stars": 554,
      "forks": 50,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-03T19:04:58Z",
      "readme_content": "# Android MCP Server\n\nAn MCP (Model Context Protocol) server that provides programmatic control over\nAndroid devices through ADB (Android Debug Bridge). This server exposes\nvarious Android device management capabilities that can be accessed by MCP\nclients like [Claude desktop](https://modelcontextprotocol.io/quickstart/user)\nand Code editors\n(e.g. [Cursor](https://docs.cursor.com/context/model-context-protocol))\n\n## Features\n\n- üîß ADB Command Execution\n- üì∏ Device Screenshot Capture\n- üéØ UI Layout Analysis\n- üì± Device Package Management\n\n## Prerequisites\n\n- Python 3.x\n- ADB (Android Debug Bridge) installed and configured\n- Android device or emulator (not tested)\n\n## Installation\n\n1. Clone the repository:\n\n```bash\ngit clone https://github.com/minhalvp/android-mcp-server.git\ncd android-mcp-server\n```\n\n2. Install dependencies:\nThis project uses [uv](https://github.com/astral-sh/uv) for project\nmanagement via various methods of\n[installation](https://docs.astral.sh/uv/getting-started/installation/).\n\n```bash\nuv python install 3.11\nuv sync\n```\n\n## Configuration\n\nThe server supports flexible device configuration with multiple usage scenarios.\n\n### Device Selection Modes\n\n**1. Automatic Selection (Recommended for single device)**\n\n- No configuration file needed\n- Automatically connects to the only connected device\n- Perfect for development with a single test device\n\n**2. Manual Device Selection**\n\n- Use when you have multiple devices connected\n- Specify exact device in configuration file\n\n### Configuration File (Optional)\n\nThe configuration file (`config.yaml`) is **optional**. If not present, the server will automatically select the device if only one is connected.\n\n#### For Automatic Selection\n\nSimply ensure only one device is connected and run the server - no configuration needed!\n\n#### For Manual Selection\n\n1. Create a configuration file:\n\n```bash\ncp config.yaml.example config.yaml\n```\n\n2. Edit `config.yaml` and specify your device:\n\n```yaml\ndevice:\n  name: \"your-device-serial-here\" # Device identifier from 'adb devices'\n```\n\n**For auto-selection**, you can use any of these methods:\n\n```yaml\ndevice:\n  name: null              # Explicit null (recommended)\n  # name: \"\"              # Empty string  \n  # name:                 # Or leave empty/comment out\n```\n\n### Finding Your Device Serial\n\nTo find your device identifier, run:\n\n```bash\nadb devices\n```\n\nExample output:\n\n```\nList of devices attached\n13b22d7f        device\nemulator-5554   device\n```\n\nUse the first column value (e.g., `13b22d7f` or `emulator-5554`) as the device name.\n\n### Usage Scenarios\n\n| Scenario | Configuration Required | Behavior |\n|----------|----------------------|----------|\n| Single device connected | None | ‚úÖ Auto-connects to the device |\n| Multiple devices, want specific one | `config.yaml` with `device.name` | ‚úÖ Connects to specified device |\n| Multiple devices, no config | None | ‚ùå Shows error with available devices |\n| No devices connected | N/A | ‚ùå Shows \"no devices\" error |\n\n**Note**: If you have multiple devices connected and don't specify which one to use, the server will show an error message listing all available devices.\n\n## Usage\n\nAn MCP client is needed to use this server. The Claude Desktop app is an example\nof an MCP client. To use this server with Claude Desktop:\n\n1. Locate your Claude Desktop configuration file:\n\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n2. Add the Android MCP server configuration to the `mcpServers` section:\n\n```json\n{\n  \"mcpServers\": {\n    \"android\": {\n      \"command\": \"path/to/uv\",\n      \"args\": [\"--directory\", \"path/to/android-mcp-server\", \"run\", \"server.py\"]\n    }\n  }\n}\n```\n\nReplace:\n\n- `path/to/uv` with the actual path to your `uv` executable\n- `path/to/android-mcp-server` with the absolute path to where you cloned this\nrepository\n\n<https://github.com/user-attachments/assets/c45bbc17-f698-43e7-85b4-f1b39b8326a8>\n\n### Available Tools\n\nThe server exposes the following tools:\n\n```python\ndef get_packages() -> str:\n    \"\"\"\n    Get all installed packages on the device.\n    Returns:\n        str: A list of all installed packages on the device as a string\n    \"\"\"\n```\n\n```python\ndef execute_adb_command(command: str) -> str:\n    \"\"\"\n    Executes an ADB command and returns the output.\n    Args:\n        command (str): The ADB command to execute\n    Returns:\n        str: The output of the ADB command\n    \"\"\"\n```\n\n```python\ndef get_uilayout() -> str:\n    \"\"\"\n    Retrieves information about clickable elements in the current UI.\n    Returns a formatted string containing details about each clickable element,\n    including their text, content description, bounds, and center coordinates.\n\n    Returns:\n        str: A formatted list of clickable elements with their properties\n    \"\"\"\n```\n\n```python\ndef get_screenshot() -> Image:\n    \"\"\"\n    Takes a screenshot of the device and returns it.\n    Returns:\n        Image: the screenshot\n    \"\"\"\n```\n\n```python\ndef get_package_action_intents(package_name: str) -> list[str]:\n    \"\"\"\n    Get all non-data actions from Activity Resolver Table for a package\n    Args:\n        package_name (str): The name of the package to get actions for\n    Returns:\n        list[str]: A list of all non-data actions from the Activity Resolver\n        Table for the package\n    \"\"\"\n```\n\n## Contributing\n\nContributions are welcome!\n\n## Acknowledgments\n\n- Built with\n[Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "android",
        "iot",
        "devices",
        "android mcp",
        "minhalvp android",
        "android devices"
      ],
      "category": "iot-and-device-control"
    },
    "mobile-next--mobile-mcp": {
      "owner": "mobile-next",
      "name": "mobile-mcp",
      "url": "https://github.com/mobile-next/mobile-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/mobile-next.webp",
      "description": "Automates mobile applications across iOS and Android platforms using structured accessibility data and coordinate-based actions. Enables interaction with native apps, facilitating testing and data-entry workflows via LLMs for complex user journeys.",
      "stars": 2153,
      "forks": 204,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-04T09:19:35Z",
      "readme_content": "# Mobile Next - MCP server for Mobile Development and Automation | iOS, Android, Simulator, Emulator, and Real Devices\n\nThis is a [Model Context Protocol (MCP) server](https://github.com/modelcontextprotocol) that enables scalable mobile automation, development through a platform-agnostic interface, eliminating the need for distinct iOS or Android knowledge. You can run it on emulators, simulators, and real devices (iOS and Android).\nThis server allows Agents and LLMs to interact with native iOS/Android applications and devices through structured accessibility snapshots or coordinate-based taps based on screenshots.\n\n<h4 align=\"center\">\n  <a href=\"https://github.com/mobile-next/mobile-mcp\">\n    <img src=\"https://img.shields.io/github/stars/mobile-next/mobile-mcp\" alt=\"Mobile Next Stars\" />\n  </a>\n  <a href=\"https://github.com/mobile-next/mobile-mcp\">\n    <img src=\"https://img.shields.io/github/contributors/mobile-next/mobile-mcp?color=green\" alt=\"Mobile Next Downloads\" />\n  </a>\n  <a href=\"https://www.npmjs.com/package/@mobilenext/mobile-mcp\">\n    <img src=\"https://img.shields.io/npm/dm/@mobilenext/mobile-mcp?logo=npm&style=flat&color=red\" alt=\"npm\" />\n  </a>\n  <a href=\"https://github.com/mobile-next/mobile-mcp/releases\">\n    <img alt=\"mobile_mcp\" src=\"https://img.shields.io/github/release/mobile-next/mobile-mcp\" />\n  </a>\n  <a href=\"https://github.com/mobile-next/mobile-mcp/blob/main/LICENSE\">\n    <img src=\"https://img.shields.io/badge/license-Apache 2.0-blue.svg\" alt=\"Mobile MCP is released under the Apache-2.0 License\" />\n  </a>\n  <a href=\"https://insiders.vscode.dev/redirect?url=vscode%3Amcp%2Finstall%3F%7B%22name%22%3A%22mobile-mcp%22%2C%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22%40mobilenext%2Fmobile-mcp%40latest%22%5D%7D\">\n    <img src=\"https://img.shields.io/badge/VS_Code-VS_Code?style=flat-square&label=Install%20Server&color=0098FF\" alt=\"Install in VS Code\" />\n  </a>\n</h4>\n\n<h4 align=\"center\">\n  <a href=\"https://github.com/mobile-next/mobile-mcp/wiki\">\n    <img src=\"https://img.shields.io/badge/documentation-wiki-blue\" alt=\"wiki\" />\n  </a>\n  <a href=\"http://mobilenexthq.com/join-slack\">\n    <img src=\"https://img.shields.io/badge/join-Slack-blueviolet?logo=slack&style=flat\" alt=\"join on Slack\" />\n  </a>\n</h4>\n\nhttps://github.com/user-attachments/assets/c4e89c4f-cc71-4424-8184-bdbc8c638fa1\n\n<p align=\"center\">\n    <a href=\"https://github.com/mobile-next/\">\n        <img alt=\"mobile-mcp\" src=\"https://raw.githubusercontent.com/mobile-next/mobile-next-assets/refs/heads/main/mobile-mcp-banner.png\" width=\"600\" />\n    </a>\n</p>\n\n### üöÄ Mobile MCP Roadmap: Building the Future of Mobile\n\nJoin us on our journey as we continuously enhance Mobile MCP!\nCheck out our detailed roadmap to see upcoming features, improvements, and milestones. Your feedback is invaluable in shaping the future of mobile automation.\n\nüëâ [Explore the Roadmap](https://github.com/orgs/mobile-next/projects/3)\n\n\n### Main use cases\n\nHow we help to scale mobile automation:\n\n- üì≤ Native app automation (iOS and Android) for testing or data-entry scenarios.\n- üìù Scripted flows and form interactions without manually controlling simulators/emulators or real devices (iPhone, Samsung, Google Pixel etc)\n- üß≠ Automating multi-step user journeys driven by an LLM\n- üëÜ General-purpose mobile application interaction for agent-based frameworks\n- ü§ñ Enables agent-to-agent communication for mobile automation usecases, data extraction\n\n## Main Features\n\n- üöÄ **Fast and lightweight**: Uses native accessibility trees for most interactions, or screenshot based coordinates where a11y labels are not available.\n- ü§ñ **LLM-friendly**: No computer vision model required in Accessibility (Snapshot).\n- üßø **Visual Sense**: Evaluates and analyses what‚Äôs actually rendered on screen to decide the next action. If accessibility data or view-hierarchy coordinates are unavailable, it falls back to screenshot-based analysis.\n- üìä **Deterministic tool application**: Reduces ambiguity found in purely screenshot-based approaches by relying on structured data whenever possible.\n- üì∫ **Extract structured data**: Enables you to extract structred data from anything visible on screen.\n\n## üèóÔ∏è Mobile MCP Architecture\n\n<p align=\"center\">\n    <a href=\"https://raw.githubusercontent.com/mobile-next/mobile-next-assets/refs/heads/main/mobile-mcp-arch-1.png\">\n        <img alt=\"mobile-mcp\" src=\"https://raw.githubusercontent.com/mobile-next/mobile-next-assets/refs/heads/main/mobile-mcp-arch-1.png\" width=\"600\">\n    </a>\n</p>\n\n\n## üìö Wiki page\n\nMore details in our [wiki page](https://github.com/mobile-next/mobile-mcp/wiki) for setup, configuration and debugging related questions.\n\n\n## Installation and configuration\n\nSetup our MCP with Cline, Cursor, Claude, VS Code, Github Copilot:\n\n```json\n{\n  \"mcpServers\": {\n    \"mobile-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@mobilenext/mobile-mcp@latest\"]\n    }\n  }\n}\n\n```\n[Cline:](https://docs.cline.bot/mcp/configuring-mcp-servers) To setup Cline, just add the json above to your MCP settings file.\n[More in our wiki](https://github.com/mobile-next/mobile-mcp/wiki/Cline)\n\n[Claude Code:](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview)\n\n```\nclaude mcp add mobile -- npx -y @mobilenext/mobile-mcp@latest\n```\n\n[Gemini CLI:](https://cloud.google.com/gemini/docs/codeassist/gemini-cli)\n\n```\ngemini mcp add mobile npx -y @mobilenext/mobile-mcp@latest\n```\n\n[Read more in our wiki](https://github.com/mobile-next/mobile-mcp/wiki)! üöÄ\n\n\n### üõ†Ô∏è How to Use üìù\n\nAfter adding the MCP server to your IDE/Client, you can instruct your AI assistant to use the available tools.\nFor example, in Cursor's agent mode, you could use the prompts below to quickly validate, test and iterate on UI intereactions, read information from screen, go through complex workflows.\nBe descriptive, straight to the point.\n\n### ‚ú® Example Prompts\n\n#### Workflows\n\nYou can specifiy detailed workflows in a single prompt, verify business logic, setup automations. You can go crazy:\n\n**Search for a video, comment, like and share it.**\n```\nFind the video called \" Beginner Recipe for Tonkotsu Ramen\" by Way of\nRamen, click on like video, after liking write a comment \" this was\ndelicious, will make it next Friday\", share the video with the first\ncontact in your whatsapp list.\n```\n\n**Download a successful step counter app, register, setup workout and 5-star the app**\n```\nFind and Download a free \"Pomodoro\" app that has more than 1k stars.\nLaunch the app, register with my email, after registration find how to\nstart a pomodoro timer. When the pomodoro timer started, go back to the\napp store and rate the app 5 stars, and leave a comment how useful the\napp is.\n```\n\n**Search in Substack, read, highlight, comment and save an article**\n```\nOpen Substack website, search for \"Latest trends in AI automation 2025\",\nopen the first article, highlight the section titled \"Emerging AI trends\",\nand save article to reading list for later review, comment a random\nparagraph summary.\n```\n\n**Reserve a workout class, set timer**\n```\nOpen ClassPass, search for yoga classes tomorrow morning within 2 miles,\nbook the highest-rated class at 7 AM, confirm reservation,\nsetup a timer for the booked slot in the phone\n```\n\n**Find a local event, setup calendar event**\n```\nOpen Eventbrite, search for AI startup meetup events happening this\nweekend in \"Austin, TX\", select the most popular one, register and RSVP\nyes to the event, setup a calendar event as a reminder.\n```\n\n**Check weather forecast and send a Whatsapp/Telegram/Slack message**\n```\nOpen Weather app, check tomorrow's weather forecast for \"Berlin\", and\nsend the summary via Whatsapp/Telegram/Slack to contact \"Lauren Trown\",\nthumbs up their response.\n```\n\n- **Schedule a meeting in Zoom and share invite via email**\n```\nOpen Zoom app, schedule a meeting titled \"AI Hackathon\" for tomorrow at\n10AM with a duration of 1 hour, copy the invitation link, and send it via\nGmail to contacts \"team@example.com\".\n```\n[More prompt examples can be found here.](https://github.com/mobile-next/mobile-mcp/wiki/Prompt-Example-repo-list)\n\n## Prerequisites\n\nWhat you will need to connect MCP with your agent and mobile devices:\n\n- [Xcode command line tools](https://developer.apple.com/xcode/resources/)\n- [Android Platform Tools](https://developer.android.com/tools/releases/platform-tools)\n- [node.js](https://nodejs.org/en/download/) v22+\n- [MCP](https://modelcontextprotocol.io/introduction) supported foundational models or agents, like [Claude MCP](https://modelcontextprotocol.io/quickstart/server), [OpenAI Agent SDK](https://openai.github.io/openai-agents-python/mcp/), [Copilot Studio](https://www.microsoft.com/en-us/microsoft-copilot/blog/copilot-studio/introducing-model-context-protocol-mcp-in-copilot-studio-simplified-integration-with-ai-apps-and-agents/)\n\n### Simulators, Emulators, and Real Devices\n\nWhen launched, Mobile MCP can connect to:\n- iOS Simulators on macOS/Linux\n- Android Emulators on Linux/Windows/macOS\n- iOS or Android real devices (requires proper platform tools and drivers)\n\nMake sure you have your mobile platform SDKs (Xcode, Android SDK) installed and configured properly before running Mobile Next Mobile MCP.\n\n### Running in \"headless\" mode on Simulators/Emulators\n\nWhen you do not have a real device connected to your machine, you can run Mobile MCP with an emulator or simulator in the background.\n\nFor example, on Android:\n1. Start an emulator (avdmanager / emulator command).\n2. Run Mobile MCP with the desired flags\n\nOn iOS, you'll need Xcode and to run the Simulator before using Mobile MCP with that simulator instance.\n- `xcrun simctl list`\n- `xcrun simctl boot \"iPhone 16\"`\n\n# Thanks to all contributors ‚ù§Ô∏è\n\n### We appreciate everyone who has helped improve this project.\n\n  <a href = \"https://github.com/mobile-next/mobile-mcp/graphs/contributors\">\n   <img src = \"https://contrib.rocks/image?repo=mobile-next/mobile-mcp\"/>\n </a>\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iot",
        "mobile",
        "apps",
        "mobile mcp",
        "mobile applications",
        "automates mobile"
      ],
      "category": "iot-and-device-control"
    },
    "nacal--mcp-minecraft-remote": {
      "owner": "nacal",
      "name": "mcp-minecraft-remote",
      "url": "https://github.com/nacal/mcp-minecraft-remote",
      "imageUrl": "/freedevtools/mcp/pfp/nacal.webp",
      "description": "Connect and control a Minecraft player using an AI assistant to navigate, mine, build, and interact with the Minecraft world. It supports advanced movement and inventory management features, as well as communication with other players on remote servers.",
      "stars": 9,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-05T07:40:31Z",
      "readme_content": "[![smithery badge](https://smithery.ai/badge/@nacal/mcp-minecraft-remote)](https://smithery.ai/server/@nacal/mcp-minecraft-remote)\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/nacal-mcp-minecraft-remote-badge.png)](https://mseep.ai/app/nacal-mcp-minecraft-remote)\n\n# MCP Minecraft Remote\n\n> This project is inspired by [mcp-minecraft](https://github.com/arjunkmrm/mcp-minecraft) by arjunkmrm. While the original only supported local Minecraft server connections, this project was newly created from scratch to add support for connecting to remote Minecraft servers.\n\nMinecraft Remote Control using MCP (Model Context Protocol).\n\n## Features\n\n- Connect to and control a Minecraft player via an AI assistant\n- Navigate, mine, build, and interact with the Minecraft world\n- Chat with other players on the server\n- Check inventory, player position, and server information\n- Advanced movement control including jumping, sneaking, and sprinting\n- Entity interaction including attacking and following\n- Container usage (chests, furnaces, etc.)\n- Item crafting and villager trading\n- Detailed inventory management\n\n## Installation\n\n### Installing via Smithery\n\nTo install Minecraft Remote Control for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@nacal/mcp-minecraft-remote):\n\n```bash\nnpx -y @smithery/cli install @nacal/mcp-minecraft-remote --client claude\n```\n\n### Quick Install (Recommended)\n\n```bash\nnpx -y @smithery/cli install mcp-minecraft-remote --client claude\n```\n\nFollow the CLI prompts to complete the setup.\n\n### Manual Installation\n\n```bash\n# Install from npm\nnpm install -g mcp-minecraft-remote\n\n# Or clone the repository\ngit clone https://github.com/nacal/mcp-minecraft-remote.git\ncd mcp-minecraft-remote\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Usage\n\n### Using with Claude Desktop\n\n1. Navigate to Claude Desktop configuration file:\n\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Linux: `~/.config/Claude/claude_desktop_config.json`\n\n2. Add the Minecraft Remote MCP configuration to your configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"minecraft-remote\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-minecraft-remote@latest\"]\n    }\n  }\n}\n```\n\nIf you've installed it globally:\n\n```json\n{\n  \"mcpServers\": {\n    \"minecraft-remote\": {\n      \"command\": \"mcp-minecraft-remote\"\n    }\n  }\n}\n```\n\nIf you've cloned the repository locally:\n\n```json\n{\n  \"mcpServers\": {\n    \"minecraft-remote\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/mcp-minecraft-remote/build/index.js\"]\n    }\n  }\n}\n```\n\n3. Save the file and restart Claude Desktop\n4. Start a new conversation with Claude and begin using the Minecraft control commands\n\n### Important Server Requirements\n\n- **Server Online Mode**: The Minecraft server must have `online-mode=false` set in the server.properties file. This allows the bot to connect without authentication against Minecraft's session servers.\n- If using a server with authentication, you'll need to provide valid premium account credentials when connecting.\n\n### Available Tools\n\n#### Core Functionality\n\n- `connectToServer`: Connect to a Minecraft server with specified credentials\n- `disconnectFromServer`: Disconnect from the Minecraft server\n- `sendChat`: Send a chat message to the server\n- `getServerInfo`: Get information about the connected server\n\n#### Movement\n\n- `getPosition`: Get current player position\n- `moveTo`: Move to specific coordinates\n- `moveControl`: Basic movement controls (forward, back, left, right, jump, sprint, sneak, stop)\n- `lookAt`: Make the player look in a specific direction or at coordinates\n\n#### World Interaction\n\n- `digBlock`: Mine a block at specific coordinates\n- `placeBlock`: Place a block at specific coordinates\n\n#### Inventory Management\n\n- `checkInventory`: Basic inventory check\n- `inventoryDetails`: Get detailed information about inventory items\n- `equipItem`: Equip an item from inventory to hand or armor slot\n- `tossItem`: Throw items from inventory\n\n#### Entity Interaction\n\n- `getNearbyPlayers`: Get list of nearby players\n- `getNearbyEntities`: Get a list of all entities nearby\n- `attackEntity`: Attack a specific entity\n- `useOnEntity`: Use held item on a specific entity\n- `followEntity`: Follow a specific entity\n\n#### Container Interaction\n\n- `openContainer`: Open a container (chest, furnace, etc.) at specific coordinates\n- `withdrawItem`: Take items from an open container\n- `depositItem`: Put items into an open container\n- `closeContainer`: Close the currently open container\n\n#### Crafting\n\n- `getRecipes`: Get a list of available crafting recipes\n- `craftItem`: Craft an item using available materials\n\n#### Trading\n\n- `listTrades`: List available trades from a nearby villager\n- `tradeWithVillager`: Trade with a nearby villager\n\n### Example Prompts\n\n#### Basic Controls\n\n- \"Connect to the Minecraft server at play.example.com with the username player1\"\n- \"What is my current position in the game?\"\n- \"Move me to coordinates x=100, y=64, z=-200\"\n- \"Make me walk forward for 3 seconds\"\n- \"Make me jump and sprint toward that mountain\"\n\n#### Inventory & Items\n\n- \"Check what's in my inventory in detail\"\n- \"Equip my diamond sword to my hand\"\n- \"Throw 5 dirt blocks from my inventory\"\n\n#### Block Interaction\n\n- \"Dig the block at coordinates x=10, y=65, z=20\"\n- \"Place a stone block at coordinates x=11, y=65, z=20\"\n\n#### Entity Interaction\n\n- \"Are there any other players nearby?\"\n- \"What entities are within 20 blocks of me?\"\n- \"Attack the zombie with ID 12345\"\n- \"Follow the player named Steve\"\n\n#### Container Usage\n\n- \"Open the chest at coordinates x=100, y=64, z=200\"\n- \"Take 10 iron ingots from the chest\"\n- \"Put 5 cobblestone in the chest\"\n- \"Close the container\"\n\n#### Crafting & Trading\n\n- \"What recipes do I have available for a wooden pickaxe?\"\n- \"Craft 4 sticks using the wood in my inventory\"\n- \"Check what trades the nearby villager offers\"\n- \"Trade with the villager to get 10 emeralds\"\n\n#### Communication\n\n- \"Send a hello message to the chat\"\n- \"Tell everyone that I found diamonds\"\n\n## Requirements\n\n- Node.js 18+\n- An AI assistant that supports MCP (like Claude)\n- A Minecraft Java Edition server (version 1.8 or later)\n\n**Note**: This tool has been tested and verified to work specifically with vanilla Minecraft 1.21. While it may function with other versions or modded servers, compatibility is not guaranteed.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iot",
        "minecraft",
        "mcp",
        "minecraft remote",
        "mcp minecraft",
        "control minecraft"
      ],
      "category": "iot-and-device-control"
    },
    "recursechat--mcp-server-apple-shortcuts": {
      "owner": "recursechat",
      "name": "mcp-server-apple-shortcuts",
      "url": "https://github.com/recursechat/mcp-server-apple-shortcuts",
      "imageUrl": "/freedevtools/mcp/pfp/recursechat.webp",
      "description": "Connects AI assistants to Apple Shortcuts automations, enabling task automation on macOS through user-defined shortcuts in a safe manner.",
      "stars": 241,
      "forks": 28,
      "license": "Apache License 2.0",
      "language": "JavaScript",
      "updated_at": "2025-10-03T22:32:00Z",
      "readme_content": "# Apple Shortcuts MCP Server ü§ñ\n\nA Model Context Protocol (MCP) server that lets AI assistants like Claude control Apple Shortcuts automations. This enables AI models to trigger shortcuts and automate tasks on macOS in a safe and controlled way.\n\n<a href=\"https://www.npmjs.com/package/mcp-server-apple-shortcuts\"><img alt=\"mcp_server_apple_shortcuts\" src=\"https://img.shields.io/npm/v/mcp-server-apple-shortcuts\"/></a>\n\n<a href=\"https://glama.ai/mcp/servers/15z6abk6p2\"><img alt=\"badge\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/15z6abk6p2/badge\" /></a>\n\n## What is MCP? ü§î\n\nThe Model Context Protocol (MCP) is a system that lets AI apps, like Claude Desktop, connect to external tools and data sources. It gives a clear and safe way for AI assistants to work with local services and APIs while keeping the user in control.\n\n## What does this server do? üöÄ\n\nThe Apple Shortcuts MCP server:\n- Enables AI assistants to list available shortcuts\n- Allows running shortcuts by name with optional input parameters \n- Provides a simple interface for automation control\n\n## Prerequisites üìã\n\nBefore you begin, ensure you have:\n\n- [Node.js](https://nodejs.org/) (v18 or higher)\n- [Claude Desktop](https://claude.ai/download) installed\n- macOS with Shortcuts app configured\n\n## Configuration to use Apple Shortcuts Server ‚öôÔ∏è\n\nHere's the Claude Desktop configuration to use the Apple Shortcuts server:\n```json\n{\n  \"mcpServers\": {\n    \"apple-shortcuts\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-server-apple-shortcuts\"]\n    }\n  }\n}\n```\n\n## Build Apple Shortcuts Server and run locally üõ†Ô∏è\n\n1. Clone this repository:\n\n```sh\ngit clone git@github.com:recursechat/mcp-server-apple-shortcuts.git\n```\n\n2. Install dependencies:\n```sh\nnpm install\n```\n\n3. Build project\n```sh\nnpm run build\n```\n\nHere's the Claude Desktop configuration to use the Apple Shortcuts server with a local build:\n```json\n{\n  \"mcpServers\": {\n    \"apple-shortcuts\": {\n      \"command\": \"npx\",\n      \"args\": [\"/path/to/mcp-server-apple-shortcuts/build/index.js\"],\n    }\n  }\n}\n```\n\n<!--\n```json\n{\n  \"mcpServers\": {\n    \"apple-shortcuts\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-server-apple-shortcuts\"]\n    }\n  }\n}\n```\n-->\n\n## Usage üéØ\n\nYou can ask Claude \"list shortcuts\" or run a specific shortcut with the shortcut name, for example \"get word of the day\" or \"play a song\".\n\n## License ‚öñÔ∏è\n\nApache-2.0\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "shortcuts",
        "iot",
        "automations",
        "apple shortcuts",
        "shortcuts automations",
        "assistants apple"
      ],
      "category": "iot-and-device-control"
    },
    "sandst1--mcp-server-midi": {
      "owner": "sandst1",
      "name": "mcp-server-midi",
      "url": "https://github.com/sandst1/mcp-server-midi",
      "imageUrl": "/freedevtools/mcp/pfp/sandst1.webp",
      "description": "Connects AI models to MIDI-compatible software or hardware by sending MIDI sequences and control messages, while providing virtual MIDI output ports for integration with digital audio workstations and synthesizers.",
      "stars": 10,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-18T08:02:43Z",
      "readme_content": "# MCP MIDI Server\n\nA FastMCP Server which allows an LLM to send MIDI sequences into any software that supports MIDI input.\n\n## Features\n\n- Creates a virtual MIDI output port\n- Sends MIDI Note On/Off messages\n- Sends Control Change (CC) messages\n- Sequences MIDI events with precise timing\n- Can be used as a MIDI input device in any application that supports MIDI\n\n## Requirements\n\n- Python 3.7+\n- rtmidi\n- fastmcp\n- python-dotenv\n- asyncio\n\n## Installation\n\n1. Clone the repository:\n   ```\n   git clone <repository-url>\n   cd mcp-server-midi\n   ```\n\n2. Create a virtual env, activate it and install dependencies:\n   ```\n   python -m venv .venv\n   source .venv/bin/activate\n\n   pip install -r requirements.txt\n   ```\n\n3. Create a `.env` file with your configuration:\n   ```\n   PORT=8123\n   ```\n\n## Usage\n\nRun the server:\n\n```\npython mcp_midi_server.py\n```\n\nThe server creates a virtual MIDI port named \"MCP MIDI Out\" that can be used as a MIDI input device in other applications. This means you can:\n\n- Connect digital audio workstations (DAWs) like Ableton Live, Logic Pro, or FL Studio to receive MIDI from this server\n- Use the server to control hardware synthesizers through your computer's MIDI interface\n- Connect to any other software that accepts MIDI input (virtual instruments, lighting controllers, etc.)\n\nSimply select \"MCP MIDI Out\" as a MIDI input device in your preferred MIDI-compatible application.\n\n## MCP Config\n\nThe server uses Server-Sent Events (SSE), this is how to config it in Cursor:\n```\n{\n  \"mcpServers\": {\n      \"midi\": {\n          \"url\": \"http://localhost:8123/sse\"\n      }\n   }\n}\n```\n\n## API Methods\n\n### Send Note On\n\nSends a MIDI Note On message.\n\nParameters:\n- `note`: MIDI note number (0-127)\n- `velocity`: Note velocity (0-127, default 127)\n- `channel`: MIDI channel (0-15, default 0)\n\n### Send Note Off\n\nSends a MIDI Note Off message.\n\nParameters:\n- `note`: MIDI note number (0-127)\n- `velocity`: Note off velocity (0-127, default 64)\n- `channel`: MIDI channel (0-15, default 0)\n\n### Send Control Change\n\nSends a MIDI Control Change (CC) message.\n\nParameters:\n- `controller`: CC controller number (0-127)\n- `value`: CC value (0-127)\n- `channel`: MIDI channel (0-15, default 0)\n\n### Send MIDI Sequence\n\nSends a sequence of MIDI Note On/Off messages with specified durations.\n\nParameters:\n- `events`: A list of event dictionaries. Each dictionary must contain:\n  - `note`: MIDI note number (0-127)\n  - `velocity`: Note velocity (0-127, default 127)\n  - `channel`: MIDI channel (0-15, default 0)\n  - `duration`: Time in seconds to hold the note before sending Note Off\n  - `start_time`: Time in seconds when to start the note, relative to sequence start (default 0)\n\n## Example\n\nUsing the API to play a C major chord:\n\n```python\nevents = [\n    {\"note\": 60, \"velocity\": 100, \"duration\": 1.0, \"start_time\": 0.0},  # C4\n    {\"note\": 64, \"velocity\": 100, \"duration\": 1.0, \"start_time\": 0.0},  # E4\n    {\"note\": 67, \"velocity\": 100, \"duration\": 1.0, \"start_time\": 0.0},  # G4\n]\n# Send to the MCP MIDI Server API\n```\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "midi",
        "iot",
        "sandst1",
        "server midi",
        "virtual midi",
        "midi connects"
      ],
      "category": "iot-and-device-control"
    },
    "sbarbett--pihole-mcp-server": {
      "owner": "sbarbett",
      "name": "pihole-mcp-server",
      "url": "https://github.com/sbarbett/pihole-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/sbarbett.webp",
      "description": "Expose Pi-hole functionality through a standardized protocol that enables management and querying of DNS settings and metrics. Integrates multiple Pi-hole instances and facilitates detailed data retrieval for enhanced DNS administration.",
      "stars": 3,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-22T10:24:58Z",
      "readme_content": "# üçì pihole-mcp-serer\n\nA Model Context Protocol (MCP) server for Pi-hole. This server exposes Pi-hole functionality as tools that can be used by AI assistants.\n\n## Dependencies\n\n### Docker\n\n- [Docker install guide](https://docs.docker.com/engine/install/)\n\n### `uv` (Optional, for Development)\n\nIf you want to run the application locally, use `uv`. Install it with your package manager of choice.\n\n## Environment\n\nCreate a `.env` file in the project root with your Pi-hole credentials:\n\n```\n# Primary Pi-hole (required)\nPIHOLE_URL=https://your-pihole.local/\nPIHOLE_PASSWORD=your-admin-password\n#PIHOLE_NAME=Primary        # optional, defaults to URL if unset\n\n# Secondary Pi-hole (optional)\n#PIHOLE2_URL=https://secondary-pihole.local/\n#PIHOLE2_PASSWORD=password2\n#PIHOLE2_NAME=Secondary     # optional\n\n# Up to 4 Pi-holes:\n#PIHOLE3_URL=...\n#PIHOLE3_PASSWORD=...\n#PIHOLE3_NAME=...\n\n#PIHOLE4_URL=...\n#PIHOLE4_PASSWORD=...\n#PIHOLE4_NAME=...\n```\n\n## Project Structure\n\nThe project follows a modular organization for better maintainability:\n\n```\n/\n‚îú‚îÄ‚îÄ main.py                # Main application entry point\n‚îú‚îÄ‚îÄ tools/                 # Pi-hole tools organized by functionality\n‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ   ‚îú‚îÄ‚îÄ config.py          # Configuration-related tools (DNS settings)\n‚îÇ   ‚îî‚îÄ‚îÄ metrics.py         # Metrics and query-related tools\n‚îú‚îÄ‚îÄ resources/             # MCP resources\n‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ   ‚îî‚îÄ‚îÄ common.py          # Common resources (piholes://, version://)\n‚îú‚îÄ‚îÄ docker-compose.yml     # Docker Compose configuration for production\n‚îú‚îÄ‚îÄ docker-compose.dev.yml # Docker Compose for development with volume mounts\n‚îî‚îÄ‚îÄ Dockerfile             # Docker build configuration\n```\n\nThis structure separates the code into logical components while maintaining compatibility with all run modes.\n\n## Running the Server\n\nThere are several ways to run the Pi-hole MCP server:\n\n### Using Docker (Recommended for Production)\n\n```bash\n# Standard deployment\ndocker-compose up -d\n```\n\nThe server will be available at `http://localhost:8383`\n\n### Development Mode with Docker\n\nFor development, use the dev compose file which builds locally:\n\n```bash\ndocker-compose -f docker-compose.dev.yml up\n```\n\n### MCP Inspector\n\nYou can run the MCP inspector using `uv` and the `mcp` CLI:\n\n```bash\nuv run mcp dev main.py\n```\n\nThis will start an interactive interface at `http://localhost:6274` where you can test tools and resources.\n\n## API\n\nThis MCP server exposes the following resources and tools:\n\n### Resources\n\n- `piholes://`: Returns information about all configured Pi-holes\n- `version://`: Returns the MCP server version\n- `list-tools://`: Returns a list of tool categories\n  - `list-tools://{category}`: Returns a list of tools within a specific category\n\n### Tools\n\nEach tool call returns results as a list of dictionaries with the following structure:\n```\n[\n  {\n    \"pihole\": \"Pi-hole Name\",\n    \"data\": [...]  # Result data from this Pi-hole\n  },\n  ...\n]\n```\n\n#### Configuration\n\n- `list_local_dns`: Lists all local DNS settings from Pi-hole(s)\n- `add_local_a_record`: Adds a local A record to Pi-hole(s).\n- `add_local_cname_record`: Adds a local CNAME record to Pi-hole(s).\n- `remove_local_a_record`: Removes all A records for a hostname.\n- `remove_local_cname_record`: Removes all CNAME records for a hostname.\n\n#### Metrics\n\n- `list_queries`: Fetches the recent DNS query history from Pi-hole(s)\n- `list_query_suggestions`: Get query filter suggestions\n- `list_query_history`: Get activity graph data for queries over time\n\n## Testing in `goose`\n\nGoose is a CLI LLM client that's useful for testing and development. Follow their install instructions [here](https://block.github.io/goose/docs/quickstart/).\n\nThe following assumes you've completed the initial setup with `goose configure`.\n\n### Configure Extension\n\n1. Type `goose configure` to open the configuration menu.\n2. Select **Add Extension**\n3. Select **Remote Extension**\n4. It will ask for a name. It doesn't matter what you name it. I called mine `pihole-mcp`.\n5. When it asks _\"What is the SSE endpoint URI?\"_ enter `http://localhost:8383/sse`.\n6. Enter a timeout.\n7. Add a description if you'd like.\n8. Select **No** when it asks about environment variables.\n   \n\n### Start a Session\n\nOnce the server is installed, start a chat session.\n\n```sh\ngoose session\n```\n\nTry asking it: _\"What are my local DNS records?\"_\n\n\n\n...or telling it: _\"Show me my recent DNS queries.\"_\n\n\n\n## Claude Desktop\n\nClaude's desktop client currently only support's the STDIO protocol, however you can use a proxy to communicate with the SSE endpoint.\n\nAdd the following to your `claude_desktop_config.json` file.\n\n```json\n{\n  \"mcpServers\": {\n    \"pihole\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"http://localhost:8383/sse\"\n      ]\n    }\n  }\n}\n```\n\nIf you're connecting to a different host on your local network and using an unsecured connection, you'll need to explicitly allow it with the `--allow-http` argument. For example:\n\n```json\n{\n  \"mcpServers\": {\n    \"pihole\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"http://192.168.1.255:8383/sse\",\n        \"--allow-http\"\n      ]\n    }\n  }\n}\n```\n\nAfterwards, completely restart the application and try it out.\n\n\n\n\n\n## License\n\n[MIT](./LICENSE)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "dns",
        "pihole",
        "iot",
        "sbarbett pihole",
        "enhanced dns",
        "pi hole"
      ],
      "category": "iot-and-device-control"
    },
    "scald--tesla-mcp": {
      "owner": "scald",
      "name": "tesla-mcp",
      "url": "https://github.com/scald/tesla-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/scald.webp",
      "description": "Connects to the Tesla Fleet API to control Tesla vehicles, providing functionality to wake up vehicles, retrieve vehicle information, and access real-time updates and debugging tools.",
      "stars": 9,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-01T13:02:58Z",
      "readme_content": "# Tesla MCP Server\n\nA Model Context Protocol (MCP) server that connects to the Tesla Fleet API, allowing you to control your Tesla vehicle using Claude and other AI assistants that support MCP.\n\n<a href=\"https://glama.ai/mcp/servers/t0ako8h64j\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/t0ako8h64j/badge\" alt=\"Tesla Server MCP server\" />\n</a>\n\n## Features\n\n- **Wake up vehicles**: Wake up your Tesla from sleep mode\n- **Vehicle information**: Get detailed information about your Tesla vehicles\n- **Real-time updates**: Refresh vehicle data on demand\n- **Debugging tools**: Access detailed vehicle information to help with troubleshooting\n\n## Requirements\n\n- Node.js 18+\n- pnpm (preferred) or npm\n- Tesla account with at least one vehicle\n- Tesla API credentials (Client ID and Client Secret)\n- Ngrok (for development and registration)\n\n## Security Best Practices\n\nThis project handles sensitive Tesla API credentials. Please follow these security practices:\n\n- **Never commit credentials**: The `.gitignore` file excludes `.env` and `keys/` but always double-check\n- **Use the security checker**: Run `./check-secrets.sh` before committing to detect potentially leaked credentials\n- **Protect your private keys**: Keep the contents of the `keys/` directory secure\n- **Review code before sharing**: Make sure no credentials are hardcoded in any source files\n\nWhen forking or sharing this project:\n\n1. Make sure the `.env` file is not included\n2. Check that no private keys are committed\n3. Verify the `.gitignore` file is properly set up\n\n## Quick Start\n\n1. **Clone the repository**\n\n   ```bash\n   git clone https://github.com/yourusername/tesla-mcp.git\n   cd tesla-mcp\n   ```\n\n2. **Install dependencies**\n\n   ```bash\n   pnpm install\n   ```\n\n3. **Set up environment variables**\n   Create a `.env` file in the root directory:\n\n   ```\n   TESLA_CLIENT_ID=your_client_id\n   TESLA_CLIENT_SECRET=your_client_secret\n   TESLA_REFRESH_TOKEN=your_refresh_token\n   ```\n\n4. **Get a refresh token** (if you don't have one)\n\n   ```bash\n   pnpm get-token\n   ```\n\n5. **Register your application** with Tesla's API\n\n   ```bash\n   pnpm register\n   ```\n\n   Follow the instructions provided by the script\n\n6. **Build the server**\n\n   ```bash\n   pnpm build\n   ```\n\n7. **Run the server**\n   ```bash\n   pnpm start\n   ```\n\n## Authentication & Registration\n\nThis project uses the official Tesla Fleet API OAuth 2.0 authentication flow to securely connect to your Tesla account. The full process involves two steps:\n\n1. **Authentication**: Obtaining a refresh token through the OAuth 2.0 flow\n2. **Registration**: Registering your application with Tesla via the Partner Accounts API\n\n### Authentication\n\nAuthentication requires:\n\n- Client ID and Client Secret from the [Tesla Developer Portal](https://developer.tesla.com/)\n- A refresh token obtained through the OAuth 2.0 authorization code flow\n\nThe included `pnpm get-token` utility simplifies this process by:\n\n- Opening a browser for you to log in with your Tesla account credentials\n- Performing the OAuth PKCE (Proof Key for Code Exchange) flow\n- Exchanging the authorization code for refresh and access tokens\n- Storing the refresh token in your `.env` file\n\n### Registration\n\nThe Tesla Fleet API requires applications to be registered before they can access vehicle data. The registration server (`pnpm register`) automates this process:\n\n- Generates the required EC key pair\n- Uses ngrok to create a temporary public URL for development\n- Hosts the public key at the required path\n- Handles the registration API call with Tesla\n\n#### Ngrok Setup (Required for Registration)\n\n1. Install ngrok from [ngrok.com/download](https://ngrok.com/download)\n2. Create a free account at [ngrok.com](https://ngrok.com/)\n3. Get your auth token from the [ngrok dashboard](https://dashboard.ngrok.com/get-started/your-authtoken)\n4. Authenticate ngrok:\n   ```bash\n   ngrok authtoken YOUR_AUTH_TOKEN\n   ```\n\n## Available MCP Tools\n\nThe server provides the following tools that Claude can use:\n\n- **`wake_up`**: Wakes up a Tesla vehicle from sleep mode\n\n  - Takes `vehicle_id` as a required parameter\n  - Returns the current state of the vehicle\n\n- **`refresh_vehicles`**: Refreshes the list of Tesla vehicles\n\n  - No parameters required\n  - Updates the internal cache of vehicles\n\n- **`debug_vehicles`**: Shows detailed information about available vehicles\n  - No parameters required\n  - Returns ID, vehicle_id, VIN, and state information\n\n## Setting Up Claude to Use the MCP Server\n\n1. Create the Claude configuration directory:\n\n   ```bash\n   mkdir -p ~/Library/Application\\ Support/Claude\n   ```\n\n2. Create or edit the configuration file:\n\n   ```bash\n   nano ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n   ```\n\n3. Add the following configuration (adjust the path as needed):\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"tesla-mcp-server\": {\n         \"command\": \"/absolute/path/to/tesla-mcp/run-mcp.js\"\n       }\n     }\n   }\n   ```\n\n4. Make the run-mcp.js script executable:\n\n   ```bash\n   chmod +x run-mcp.js\n   ```\n\n5. Restart Claude completely\n\n## Using the MCP Server with Claude\n\nOnce the server is running and Claude is configured, you can ask Claude to:\n\n- \"What Tesla vehicles do I have?\"\n- \"Can you wake up my Tesla?\"\n- \"Show me debug information about my Tesla vehicles\"\n\n## Troubleshooting\n\nIf you encounter issues:\n\n### Environment Variables\n\n- Ensure your `.env` file contains valid credentials\n- Run `pnpm get-token` to refresh your token if needed\n\n### Server Connection\n\n- Check that the server is running (`pnpm start`)\n- Verify Claude's configuration points to the correct file path\n\n### Vehicle Connectivity\n\n- Vehicle might be offline or asleep\n- Try waking up the vehicle first with the `wake_up` command\n\n### Debug Mode\n\n- Use the `debug_vehicles` command to get detailed information about your vehicles\n- Check the server logs in the terminal where you're running the MCP server\n\n## Command Line Tools\n\nThe server includes several helpful scripts:\n\n- `pnpm build`: Compile the TypeScript code\n- `pnpm start`: Run the server using the run-mcp.js script\n- `pnpm register`: Register your app with Tesla's API\n- `pnpm get-token`: Get a refresh token from Tesla\n- `pnpm test-api`: Test your connection to the Tesla API\n- `pnpm inspector`: Run the server with the MCP Inspector for debugging\n\n## API Limitations\n\nAs of 2023-10-09, Tesla has deprecated many vehicle command endpoints in their REST API. Commands like honking the horn now require the [Tesla Vehicle Command Protocol](https://github.com/teslamotors/vehicle-command) instead of the REST API. This MCP server currently supports only REST API endpoints that remain functional.\n\n## Future Enhancements\n\nPossible future improvements include:\n\n- Integration with Tesla's Vehicle Command Protocol for additional commands\n- Support for more vehicle information endpoints\n- User interface for configuration and monitoring\n\n## License\n\n[MIT License](LICENSE)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tesla",
        "iot",
        "api",
        "control tesla",
        "scald tesla",
        "tesla mcp"
      ],
      "category": "iot-and-device-control"
    },
    "zcking--mcp-server-unifi": {
      "owner": "zcking",
      "name": "mcp-server-unifi",
      "url": "https://github.com/zcking/mcp-server-unifi",
      "imageUrl": "/freedevtools/mcp/pfp/zcking.webp",
      "description": "Manage and control UniFi network devices using natural language through AI agents. Interact with your network by leveraging the UniFi Network API for intuitive device management.",
      "stars": 5,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-04T01:42:49Z",
      "readme_content": "# MCP Server UniFi\n\nA server implementation for managing and controlling UniFi network devices through MCP (Management Control Protocol). This server enables natural language interactions with your UniFi network using AI agents like Goose and Claude by wrapping the UniFi Network API.\n\n## Features\n\n- Query UniFi sites and devices using natural language through AI agents\n- Local server implementation that connects to your UniFi Network application\n- Compatible with both Goose AI and Claude Desktop\n- Secure API key-based authentication\n\n## Prerequisites\n\n- Python 3.8 or higher\n- `uv` package manager\n- UniFi Network application\n- UniFi API key (obtained from UniFi console)\n\n## Setup\n\n1. Create an API key:\n   - Go to your UniFi console at https://unifi.ui.com\n   - Navigate to Settings ¬ª Control Plane ¬ª Integrations\n   - Click \"Create API Key\"\n\n2. Clone and set up the repository:\n```bash\ngit clone https://github.com/zcking/mcp-server-unifi\ncd mcp-server-unifi\nuv venv\nsource .venv/bin/activate  # On Unix/macOS\n# or\n.venv\\Scripts\\activate  # On Windows\n```\n\n3. Install dependencies:\n```bash\nuv sync\n```\n\n4. Configure environment variables:\n```bash\nexport UNIFI_API_KEY=\"your_api_key_here\"\n```\n\n## Running the Server\n\nStart the MCP development server:\n\n```bash\nuv run mcp dev main.py\n```\n\nThe MCP Inspector will be available at http://localhost:5173 for testing and debugging.\n\n## AI Agent Integration\n\n### Goose AI Setup\n\n1. Open Goose and go to Settings ¬ª Extensions ¬ª Add custom extension\n2. Configure the extension:\n   - ID: unifi\n   - Name: unifi\n   - Description: Get information about your UniFi network\n   - Command: `/Users/username/.local/bin/uv --directory /path/to/mcp-server-unifi run main.py`\n   - Environment Variables: Set UNIFI_API_KEY to your API key\n\n### Claude Desktop Setup\n\n1. Open Claude and go to Settings ¬ª Developer ¬ª Edit Config\n2. Add to your `claude_desktop_config.json`:\n```json\n{\n    \"mcpServers\": {\n        \"unifi\": {\n            \"command\": \"/Users/username/.local/bin/uv\",\n            \"args\": [\n                \"--directory\",\n                \"/path/to/mcp-server-unifi\",\n                \"run\",\n                \"main.py\"\n            ]\n        }\n    }\n}\n```\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iot",
        "ai",
        "devices",
        "iot device",
        "device management",
        "unifi network"
      ],
      "category": "iot-and-device-control"
    },
    "zerubeus--elektron-mcp": {
      "owner": "zerubeus",
      "name": "elektron-mcp",
      "url": "https://github.com/zerubeus/elektron-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/zerubeus.webp",
      "description": "Facilitates real-time MIDI control and programmatic sound design for Elektron Digitone synthesizers, enabling interactions through AI models. Generate and modify various sound designs using the Digitone's capabilities.",
      "stars": 86,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-19T15:26:14Z",
      "readme_content": "# Elektron MCP\n\nA Model Context Protocol (MCP) server that allows Claude and other MCP-compatible LLMs to interact with and control Elektron synthesizers via MIDI.\n\n#### If you have a Moog Sub37/Subsequent37, check out our dedicated MCP server for it at [moog-sub37-mcp](https://github.com/zerubeus/moog-sub37-mcp).\n\n#### A web-based version of this MCP server can be found at [senthgenie.com](https://www.synthgenie.com/). (You can ask for API key for free on discord)\n\n#### If you want help or would like to contribute to development, please join our [Discord community](https://discord.gg/ZFuSuegBMS).\n\n# Prompt examples\n\n```\n\"Use Digitone MCP to design an evolving dark pad using the Wavetone machine on track 1.\"\n\"Use Digitone MPC to design a Dark thick pad using Wavetone machine on track 1.\"\n```\n\nOnly Wavetone machine is supported for now, other machines will be added soon, stay tuned!\n\n## Features\n\n- [x] Complete MIDI control interface for the Elektron Digitone synthesizer\n- [x] Structured controllers for all Digitone sound engines:\n  - [x] Wavetone (waveshaping synthesis)\n  - [ ] FM Tone (FM synthesis)\n  - [ ] FM Drum (percussive FM synthesis)\n  - [ ] Swarmer (unison/swarm synthesis)\n- [x] Comprehensive parameter control for:\n  - [x] All filter types\n    - [x] MultiMode\n    - [ ] Lowpass4\n    - [ ] Equalizer\n    - [ ] LegacyLpHp\n    - [ ] CombMinus\n    - [ ] CombPlus\n    - [ ] BaseWidth\n  - [x] Amplitude and envelope settings\n  - [x] Effects processing (delay, reverb, chorus, bit reduction, etc.)\n  - [x] LFOs control\n- [x] MCP server exposing all synth parameters as tools for LLMs\n- [x] Type-safe parameter validation using Pydantic\n- [x] Modular architecture for easy extension to other Elektron devices\n\n## Demo\n\nWatch Claude control the Elektron Digitone synthesizer in real-time:\n\n[![Claude controlling Elektron Digitone](https://img.youtube.com/vi/EXf6lOTjla8/0.jpg)](https://www.youtube.com/watch?v=EXf6lOTjla8)\n\n## Installation and Usage\n\n### Prerequisites\n\n- Python 3.10+\n- [uv](https://github.com/astral-sh/uv) for package management\n- An Elektron Digitone connected via USB\n- Claude Desktop app (for full integration)\n\n### Installing Dependencies\n\nuv is mandatory for this project so start by installing it:\n\n#### For macOS:\n\n```bash\nbrew install uv\n```\n\n#### For Windows:\n\nFollow the instructions [here](https://docs.astral.sh/uv/getting-started/installation/)\n\n### 3. Installing with Claude Desktop\n\nTo use with Claude AI, add the MCP server configuration in Claude Desktop:\n\n‚ö†Ô∏è **Important**: You don't need to clone the repository or install the packages, all you need is to add the MCP server configuration to your claude_desktop_config.json file the MPC server is already published on pypi.\n\nGo to Claude > Settings > Developer > Edit Config > claude_desktop_config.json to include the following:\n\n```json\n{\n  \"mcpServers\": {\n    \"Digitone 2\": {\n      \"command\": \"uvx\",\n      \"args\": [\"elektron-mcp\"]\n    }\n  }\n}\n```\n\n## Architecture\n\n- **Base Controllers**: Common functionality abstracted into base classes\n- **Specialized Controllers**: Dedicated controllers for each synth engine and module\n- **MCP Tools**: Direct interface between LLMs and the synth's parameters\n- **MIDI Interface**: Reliable communication with Digitone hardware\n\n## Implementation Details\n\nThis library uses:\n\n- **FastMCP**: For exposing synth controls to LLMs\n- **Pydantic models**: For data validation, serialization, and type safety\n- **mido**: For MIDI communication\n\n## Use Cases\n\n- Allow Claude and other LLMs to create and modify sounds on the Digitone\n- Programmatically control Digitone parameters for automated sound design\n- Bridge between AI-generated music and hardware synthesis\n\n## Future Extensions\n\n- Support for additional Elektron devices (Analog Four, Octatrack, etc.)\n- Pattern sequencing and automation\n- Sound preset management\n- Additional synthesis parameters\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "midi",
        "synthesizers",
        "iot",
        "midi control",
        "synthesizers enabling",
        "digitone synthesizers"
      ],
      "category": "iot-and-device-control"
    }
  }
}