{
  "category": "location-services",
  "categoryDisplay": "Location Services",
  "description": "Location-based services and mapping tools. Enables AI models to work with geographic data, weather information, and location-based analytics.",
  "totalRepositories": 12,
  "repositories": {
    "cqtrinv--trinvmcp": {
      "owner": "cqtrinv",
      "name": "trinvmcp",
      "url": "https://github.com/cqtrinv/trinvmcp",
      "imageUrl": "",
      "description": "Explore French communes and cadastral parcels based on name and surface",
      "stars": 1,
      "forks": 1,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-17T18:48:24Z",
      "readme_content": "# mcp-trinv-server, un serveur MCP pour TRINV\n\n`mcp-trinv-server` (ou MCPTRINV) est un serveur de type MCP (Model\nContext Protocol) qui est utilisé pour augmenter les ressources\nd'assistant d'Intelligence Artificielle comme Claude ou Gemini.\n\nMCPTRINV permet de rechercher des communes à partir d'un fragment de\nleur nom puis de rechercher des parcelles cadastrales dans une commune\nayant une surface donnée.\nIl s'appuie sur le site [TRINV](https://trinv.fr).\n\n## Outils\n\n- **trinv-chercher-commune**: chercher des communes \n- **trinv-chercher-parcelle**: chercher des parcelles cadastrales\n\n## Installation\n\n```bash\nnpm install mcp-trinv-server\n```\n\nIl faut ensuite déclarer ce serveur dans votre assistant ce qui\ndépend, entre autres, de l'assistant que vous utilisez, du système\nd'exploitation sur lequel vous êtes, du répertoire où vous êtes.\n\n### Installation dans Claude\n\nAjouter dans `~/.config/Claude/claude_desktop_config.json` ou (sur Mac) \ndans `~/Library/'Application Support'/Claude/claude_desktop_config.json`\n\n``` json\n{\n    \"mcpServers\": {\n        \"trinv-server\": {\n            \"command\": \"/usr/bin/node\",\n            \"args\": [\n                \".../dist/index.js\"]\n        }\n    }\n}\n\n```\n\n### Installation dans Gemini\n\nAjouter dans `~/.gemini/settings.json` \n\n``` json\n{\n    \"mcpServers\": {\n        \"trinv-server\": {\n            \"command\": \"/usr/bin/node\",\n            \"args\": [\n                \".../dist/index.js\"]\n        }\n    }\n}\n\n```\n\n\n## Usage\n\nVoici un [exemple de conversation](https://youtu.be/Q7Q4PMpnmSw) mené\navec `mcp-trinv-server` et Claude.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "geographic",
        "services",
        "mapping",
        "location services",
        "location based",
        "services mapping"
      ],
      "category": "location-services"
    },
    "devilcoder01--weather-mcp-server": {
      "owner": "devilcoder01",
      "name": "weather-mcp-server",
      "url": "https://github.com/devilcoder01/weather-mcp-server",
      "imageUrl": "",
      "description": "Access real-time weather data for any location using the WeatherAPI.com API, providing detailed forecasts and current conditions.",
      "stars": 16,
      "forks": 16,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-28T09:06:46Z",
      "readme_content": "# Weather MCP Server\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/devilcoder01/weather-mcp-server)](https://archestra.ai/mcp-catalog/devilcoder01__weather-mcp-server)\n[![smithery badge](https://smithery.ai/badge/@devilcoder01/weather-mcp-server)](https://smithery.ai/server/@devilcoder01/weather-mcp-server)\n\nA Model Context Protocol (MCP) server for weather data, built with FastAPI and the MCP framework. This server provides various weather-related tools that can be used by AI assistants to retrieve current weather conditions, forecasts, air quality data, and more.\n\n## Features\n\n- Current weather conditions\n- Weather forecasts (1-14 days)\n- Historical weather data\n- Weather alerts\n- Air quality information\n- Astronomy data (sunrise, sunset, moon phases)\n- Location search\n- Timezone information\n- Sports events\n\n## Requirements\n\n- Python 3.13+\n- [uv](https://github.com/astral-sh/uv) package manager\n- [WeatherAPI](https://www.weatherapi.com/) API key\n\n## Installation\n\n### Installing via Smithery\n\nTo install Weather Data Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@devilcoder01/weather-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @devilcoder01/weather-mcp-server --client claude\n```\n\n### Manual Installation\n1. Clone this repository:\n   ```\n   git clone https://github.com/yourusername/Weather_mcp_server.git\n   cd Weather_mcp_server\n   ```\n\n2. Install dependencies using uv:\n   ```\n   uv venv\n   uv pip install -e .\n   ```\n\n3. Create a `.env` file in the project root with your WeatherAPI key:\n   ```\n   WEATHER_API_KEY=your_api_key_here\n   ```\n\n## Usage\n\nRun the server:\n\n```\npython main.py\n```\n\nThe server will start on http://localhost:8000 by default.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "weatherapi",
        "api",
        "geographic",
        "location services",
        "weather data",
        "location based"
      ],
      "category": "location-services"
    },
    "ip2location--mcp-ip2location-io": {
      "owner": "ip2location",
      "name": "mcp-ip2location-io",
      "url": "https://github.com/ip2location/mcp-ip2location-io",
      "imageUrl": "",
      "description": "Official IP2Location.io MCP server to obtain the geolocation, proxy and network information of an IP address utilizing IP2Location.io API.",
      "stars": 11,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-30T01:37:39Z",
      "readme_content": "# IP2Location.io MCP server\n\nThis is a simple Model Context Protocol (MCP) server implementation for IP2Location.io API. It will return a detailed geolocation information for any given IPv4 or IPv6 address.\n\n<a href=\"https://glama.ai/mcp/servers/@ip2location/mcp-ip2location-io\">\n  <img alt=\"badge\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@ip2location/mcp-ip2location-io/badge\" />\n</a>\n\n# Features\n\n- **Comprehensive Geolocation Data**: Retrieves a wide range of information, including country, region, city, latitude, longitude, ZIP code, time zone, and more.\n- **Network Details**: Provides network-related data such as ASN, ISP, domain, and network speed.\n- **Security Insights**: Detects proxy information, including proxy type and provider.\n- **Simple Integration**: Built as a `FastMCP` tool, allowing for easy integration into compatible systems.\n- **Asynchronous**: Utilizes `httpx` for non-blocking asynchronous API requests.\n\n# Requirement\n\nThis MCP server supports to query without an API key, with a limitation of 1,000 queries per day. You can also [sign up](https://www.ip2location.io/sign-up) for a free API key and enjoy up to 50,000 queries per month.\n\nThe setup also use `uv`, which can be install by following [the guide](https://modelcontextprotocol.io/quickstart/server#set-up-your-environment).\n\n# Setup\n\nFollow the steps to use this MCP server with Claude Desktop:\n 1. Download the repository to your local.\n 2. Setup the `uv` package manager, you can once again refer to [the guide](https://modelcontextprotocol.io/quickstart/server#set-up-your-environment) to do so.\n 3. Make sure you have installed the Claude Desktop, if you haven't, kindly download from [here](https://claude.ai/download) for Windows and MacOS users, or follow [this guide](https://modelcontextprotocol.io/quickstart/client) for Linux user.\n 4. Open the `claude_desktop_config.json` in your choice of editor, if you do not having one yet, follow [this guide](https://modelcontextprotocol.io/quickstart/server#testing-your-server-with-claude-for-desktop) to create one.\n 5. Add the following to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"ip2locationio\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/ip2locationio/src\",\n        \"run\",\n        \"server.py\"\n      ],\n      \"env\": {\n        \"IP2LOCATION_API_KEY\": \"<YOUR API key HERE>\"\n      }\n    }\n  }\n}\n```\n 6. Remember to replace the `/path/to/ip2locationio`  path with your actual path to IP2Location.io MCP server in local.\n 7. To get your API key, just [login](https://www.ip2location.io/log-in) to your dashboard and get it from there. Replaced the `<YOUR API key HERE>` in above with your actual API key.\n 8. Restart the Claude Desktop after save the changes, and you should see it appear in the `Search and tools` menu.\n\n# Usage\n\nJust enter your query about the IP in a chat in Claude Desktop. Some of the example query will be:\n\n- Where is the location of (IP)?\n- Where is (IP) located?\n- What is the coordinate of (IP)?\n\nFor instance, below is the result of the IP 8.8.8.8:\n\n\n\nIn Claude Desktop, the model will automatically generate the output based on the result returned by IP2Location.io MCP server.\n\n# Environment Variable\n\n`IP2LOCATION_API_KEY`\n\nThe IP2Location.io API key, which allows you to query up to 50,000 per month and more details of the IP address. You can [sign up](https://www.ip2location.io/sign-up) for a free API key, or [subscribe](https://www.ip2location.io/pricing) to a plan to enjoy more benefits.\n\n# Tool\n\n`get_geolocation`\n\n**Description**\nFetch geolocation for the given IP address. It helps users to retrieve detailed information such as country, region, city, latitude, longitude, ZIP code, time zone, ASN, and proxy information for any IPv4 or IPv6 address.\n\n**Arguments**\nip (str): The IP address (IPv4 or IPv6) to analyze.\n\n**Returns**\nA JSON string containing the geolocation data. The result may include the following fields, depending on your API plan:\n\n- Location & Geography: Country, region, district, city, ZIP code, latitude & longitude, time zone.\n- Network & Connectivity: ASN (Autonomous System Number), ISP (Internet Service Provider), domain, net speed, IDD code, area code, address type, usage type.\n- Mobile Information: MNC (Mobile Network Code), MCC (Mobile Country Code), Mobile Brand.\n- Currency & Language: currency code, currency name, currency symbol, language code, language name.\n- Proxy & Security: proxy type, last seen, threat level/type, proxy provider, fraud score.\n- Others: IAB category, weather, elevation, population, and more.\n\nIf the request fails or the IP address is invalid, the tool will return an error message as a string.\n# License\n\nSee the LICENSE file.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ip2location",
        "geolocation",
        "geographic",
        "ip2location io",
        "location services",
        "analytics ip2location"
      ],
      "category": "location-services"
    },
    "ipfind--ipfind-mcp-server": {
      "owner": "ipfind",
      "name": "ipfind-mcp-server",
      "url": "https://github.com/ipfind/ipfind-mcp-server",
      "imageUrl": "",
      "description": "IP Address location service using the [IP Find](https://ipfind.com) API",
      "stars": 1,
      "forks": 5,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-08-14T14:18:19Z",
      "readme_content": "# IP Find MCP Server\n\nA Model Context Protocol server that enables AI assistants to use IP Find. \n\n## How It Works\n\nThe MCP server:\n\n-   Connects to your IP Find API and allows AI Assistants to get locations of IP Addresses.\n\n## Usage with Claude Desktop\n\n### Prerequisites\n\n-   NodeJS\n-   MCP Client (like Claude Desktop App)\n-   IP Find API Key\n\n### Installation\n\nTo use this server with the Claude Desktop app, add the following configuration to the \"mcpServers\" section of your `claude_desktop_config.json`:\n\n```json\n{\n    \"mcpServers\": {\n        \"ipfind\": {\n            \"command\": \"npx\",\n            \"args\": [\"-y\", \"@ipfind/ipfind-mcp-server\"],\n            \"env\": {\n                \"IPFIND_API_KEY\": \"<API KEY GOES HERE>\"\n            }\n        }\n    }\n}\n```\n\n-   `IPFIND_API_KEY` - You can generate an API key at IPfind.com.\n\n\nCertified by [MCPHub](https://mcphub.com/mcp-servers/ipfind/ipfind-mcp-server)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ipfind",
        "ip",
        "api",
        "location services",
        "location service",
        "analytics ipfind"
      ],
      "category": "location-services"
    },
    "ipfred--aiwen-mcp-server-geoip": {
      "owner": "ipfred",
      "name": "aiwen-mcp-server-geoip",
      "url": "https://github.com/ipfred/aiwen-mcp-server-geoip",
      "imageUrl": "",
      "description": "[iplocate/mcp-server-iplocate](https://github.com/iplocate/mcp-server-iplocate) 🎖️ 📇 🏠 - Look up IP address geolocation, network information, detect proxies and VPNs, and find abuse contact details using IPLocate.io",
      "stars": 4,
      "forks": 3,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-08-13T21:06:01Z",
      "readme_content": "# 埃文IP定位 MCP Server\n\n## 介绍\n[埃文科技](https://www.ipplus360.com/) 是全球IP地址高精准实时定位技术领航者 全球网络空间地图大数据服务提供商\n\n埃文科技IP定位API已全面兼容MCP协议\n\nMCP Server for the Aiwen IP Location API\n\n## 工具介绍\n\n1. IP定位 `aiwen_ip_location`\n    - 描述：IP定位 根据IP地址获取IP位置(支持城市、区县、街道三种精度)、经纬度、所属机构、运营商、精度等信息。\n    - 参数： `ip`：IP地址，支持IPv4、IPv6\n    - 输出：位置信息，大洲`continent`,国家`country` 所属机构`owner`,运营商`isp`,邮编`zipcode`,时区`timezone`，精度`accuracy`，国家编码`areacode`,AS号`asnumber`,纬度`lat`,经度`lng`,省份`prov`,城市`city`,区县`district`,街道级地址`address`\n\n> 1. IP定位产品分三个定位精度：通过环境变量配置(见下方环境变量配置)\n> 2. 城市级：最大定位精度返回到城市 city\n> 3. 区县级：最大定位精度返回到区县 district\n> 4. 街道级：最大定位精度返回到街道 address \n\n2. 获取当前网络IP地址和位置信息 `user_network_ip`\n    - 描述：获取当前网络IP地址和IP位置信息(支持城市、区县、街道三种精度),支持IPv4和IPv6\n    - 参数 无\n    - 输出结果 同上\n\n3. IP应用场景 `ip_usage_scene`\n    - 描述：IP应用场景 根据IP地址获取IP应用场景 输出包括保留IP、未分配IP、组织机构、移动网络、家庭宽带、数据中心、企业专线、CDN、卫星通信、交换中心、Anycast等网络应用场景\n    - 参数： `ip`：IP地址，支持IPv4、IPv6\n    - 输出：应用场景 `scene`\n\n4. IP Whois `ip_whois_info`\n    - 描述：whois信息 根据IP地址查询Whois注册信息 获取IP所属网段范围、所属机构名称、技术联系人、管理员等信息\n    - 参数： `ip`：IP地址，支持IPv4\n    - 输出：Whois注册信息，`netname`,`status`,`owner`,`techinfo`,`admininfo`等\n\n5. AS Whois `ip_as_mapping`\n    - 描述：查询IP地址AS号(自治域号)信息\n    - 参数： `ip`：IP地址，支持IPv4\n    - 输出：AS 相关信息，`asname`,`asn`,`allocated`，`type`,`industry`等\n\n6. IP宿主信息 `ip_host_info`\n    - 描述：IP宿主信息 根据IP地址查询IP的自治域编号(AS Number)、AS名称、运营商、所属机构等归属属性\n    - 参数： `ip`：IP地址，支持IPv4\n    - 输出：AS 相关信息，`asname`,`asnumber`,`isp`，`owner`等\n\n7. IP风险画像 `ip_risk_portrait`\n    - 描述：IP风险画像 根据IP地址获取IP风险画像 识别VPN、代理、秒拨、数据中心、Tor节点、端口扫描、暴力破解等高风险行为,输出风险评分、分级结果、IP位置等信息\n    - 参数：`ip`：IP地址，支持IPv4\n    - 输出：风险标签`tag`, 风险等级`level`, 风险分数`score`, 位置场景信息`continent`,`country`,`prov`,`city`,`scene`等\n\n8. IP真假人 `ip_identity_check`\n    - 描述：IP真假人 根据IP地址判断访问者是否为真实用户或机器流量 返回真人概率(real_person_rate)、秒播概率(mb_rate)\n    - 参数：`ip`：IP地址，支持IPv4\n    - 输出：真人概率`real_person_rate`, 秒播概率`mb_rate`, 自治域编号`asnumber`,运营商`isp`\n\n9. IPv4行业 `ip_industry_classify`\n    - 描述：IPv4行业 查询IP地址行业分类\n    - 参数：`ip`：IP地址，支持IPv4\n    - 输出：IPv4 所属行业`industry`\n\n> 接口的详细返回数据，参考官方的API文档\n\n## 快速使用\n\n### 获取API KEY\n通过埃文科技官网 [获取KEY](https://mall.ipplus360.com/pros/IPVFourGeoAPI?source=mcp)\n\n### 环境变量配置\n\n环境变量说明：\n1. **`AIWEN_API_KEY`** 产品的API KEY\n2. **`IPV4_ACCURACY`**（默认值：`city`）用于配置IPv4定位精度，根据所购API版本选择一个值：  \n可选值：`city`（城市级）、`district`（区级）、`street`（街道级）\n3. **`IPV6_ACCURACY`**（默认值：`city`）用于配置IPv6定位精度，根据所购API版本选择一个值：  \n可选值：`city`（城市级）、`district`（区级）、`street`（街道级）\n\n\n### MCP HOST中配置使用\n#### cursor\n\n\n\n```json\n{\n    \"mcpServers\": {\n        \"aiwen-iplocation\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"-y\",\n                \"aiwen-mcp-server-geoip\"\n            ],\n            \"env\": {\n                \"AIWEN_API_KEY\": \"xxxxxx\",\n                \"IPV4_ACCURACY\": \"city\",\n                \"IPV6_ACCURACY\": \"city\",\n            }\n        }\n    }\n}\n```\n#### vscode\n```json\n{\n    \"mcpServers\": {\n        \"aiwen-iplocation\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"-y\",\n                \"aiwen-mcp-server-geoip\"\n            ],\n            \"env\": {\n                \"AIWEN_API_KEY\": \"xxxxxx\",\n                \"IPV4_ACCURACY\": \"city\",\n                \"IPV6_ACCURACY\": \"city\",\n            }\n        }\n    }\n}\n```\n\n## 应用场景\n\n- 需要快速查询 IP 地址地理位置的应用  \n- 网络安全和访问控制 ，验证IP来源\n- IP地理位置相关的数据分析，科学研究\n- 获取 IP 场景数据的应用\n- 获取 IP whois信息的应用\n- 获取 IP AS信息的应用\n- 获取 IP 宿主信息的应用\n- 获取 IP 风险画像的应用\n- 获取 IP 真假人信息的应用\n- 获取 IP 行业信息的应用",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "geoip",
        "geolocation",
        "iplocate",
        "location services",
        "geoip iplocate",
        "server geoip"
      ],
      "category": "location-services"
    },
    "jagan-shanmugam--open-streetmap-mcp": {
      "owner": "jagan-shanmugam",
      "name": "open-streetmap-mcp",
      "url": "https://github.com/jagan-shanmugam/open-streetmap-mcp",
      "imageUrl": "",
      "description": "An OpenStreetMap MCP server with location-based services and geospatial data.",
      "stars": 117,
      "forks": 27,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-30T21:32:54Z",
      "readme_content": "# OpenStreetMap (OSM) MCP Server\n\nAn OpenStreetMap MCP server implementation that enhances LLM capabilities with location-based services and geospatial data.\n\n## Demo\n\n### Meeting Point Optimization\n\n\n### Neighborhood Analysis\n\n\n### Parking Search\n\n\n\n## Installation\n\n### In MCP Hosts like Claude Desktop, Cursor, Windsurf, etc.\n- `osm-mcp-server`: The main server, available for public use.\n  \n  ```json\n  \"mcpServers\": {\n    \"osm-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"osm-mcp-server\"\n      ]\n    }\n  }\n  ```\n\n## Features\n\nThis server provides LLMs with tools to interact with OpenStreetMap data, enabling location-based applications to:\n\n- Geocode addresses and place names to coordinates\n- Reverse geocode coordinates to addresses\n- Find nearby points of interest\n- Get route directions between locations\n- Search for places by category within a bounding box\n- Suggest optimal meeting points for multiple people\n- Explore areas and get comprehensive location information\n- Find schools and educational institutions near a location\n- Analyze commute options between home and work\n- Locate EV charging stations with connector and power filtering\n- Perform neighborhood livability analysis for real estate\n- Find parking facilities with availability and fee information\n\n## Components\n\n### Resources\n\nThe server implements location-based resources:\n- `location://place/{query}`: Get information about places by name or address\n- `location://map/{style}/{z}/{x}/{y}`: Get styled map tiles at specified coordinates\n\n### Tools\n\nThe server implements several geospatial tools:\n- `geocode_address`: Convert text to geographic coordinates\n- `reverse_geocode`: Convert coordinates to human-readable addresses\n- `find_nearby_places`: Discover points of interest near a location\n- `get_route_directions`: Get turn-by-turn directions between locations\n- `search_category`: Find places of specific categories in an area\n- `suggest_meeting_point`: Find optimal meeting spots for multiple people\n- `explore_area`: Get comprehensive data about a neighborhood\n- `find_schools_nearby`: Locate educational institutions near a specific location\n- `analyze_commute`: Compare transportation options between home and work\n- `find_ev_charging_stations`: Locate EV charging infrastructure with filtering\n- `analyze_neighborhood`: Evaluate neighborhood livability for real estate\n- `find_parking_facilities`: Locate parking options near a destination\n\n\n## Local Testing\n\n### Running the Server\n\nTo run the server locally:\n\n1. Install the package in development mode:\n\n```bash\npip install -e .\n```\n\n2. Start the server:\n\n```bash\nosm-mcp-server\n```\n\n3. The server will start and listen for MCP requests on the standard input/output.\n\n### Testing with Example Clients\n\nThe repository includes two example clients in the `examples/` directory:\n\n#### Basic Client Example\n\n`client.py` demonstrates basic usage of the OSM MCP server:\n\n```bash\npython examples/client.py\n```\n\nThis will:\n- Connect to the locally running server\n- Get information about San Francisco\n- Search for restaurants in the area\n- Retrieve comprehensive map data with progress tracking\n\n#### LLM Integration Example\n\n`llm_client.py` provides a helper class designed for LLM integration:\n\n```bash\npython examples/llm_client.py\n```\n\nThis example shows how an LLM can use the Location Assistant to:\n- Get location information from text queries\n- Find nearby points of interest\n- Get directions between locations\n- Find optimal meeting points\n- Explore neighborhoods\n\n### Writing Your Own Client\n\nTo create your own client:\n\n1. Import the MCP client:\n```python\nfrom mcp.client import Client\n```\n\n2. Initialize the client with your server URL:\n```python\nclient = Client(\"http://localhost:8000\")\n```\n\n3. Invoke tools or access resources:\n```python\n# Example: Geocode an address\nresults = await client.invoke_tool(\"geocode_address\", {\"address\": \"New York City\"})\n```\n\n#### Claude Desktop config for local server\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  \n  ```json\n  \"mcpServers\": {\n    \"osm-mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/osm-mcp-server\",\n        \"run\",\n        \"osm-mcp-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags.\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /path/to/osm-mcp-server run osm-mcp-server\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "openstreetmap",
        "streetmap",
        "mapping",
        "location services",
        "mcp openstreetmap",
        "openstreetmap mcp"
      ],
      "category": "location-services"
    },
    "kukapay--nearby-search-mcp": {
      "owner": "kukapay",
      "name": "nearby-search-mcp",
      "url": "https://github.com/kukapay/nearby-search-mcp",
      "imageUrl": "",
      "description": "An MCP server for nearby place searches with IP-based location detection.",
      "stars": 17,
      "forks": 6,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-29T11:38:51Z",
      "readme_content": "# NearbySearch MCP Server\n\nAn MCP server for nearby place searches with IP-based location detection.\n\n![GitHub License](https://img.shields.io/github/license/kukapay/nearby-search-mcp) \n![GitHub Last Commit](https://img.shields.io/github/last-commit/kukapay/nearby-search-mcp) \n![Python Version](https://img.shields.io/badge/python-3.10%2B-blue)\n\n## Features\n\n- **IP-based Location Detection**: Uses ipapi.co to determine your current location\n- **Google Places Integration**: Searches for nearby places based on keywords and optional type filters\n- **Simple Interface**: Single tool endpoint with customizable radius\n\n## Requirements\n\n- Python 3.10+\n- Google Cloud Platform API Key with Places API enabled\n- Internet connection\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/kukapay/nearby-search-mcp.git\ncd nearby-search-mcp\n```\n\n2. Install dependencies:\n```bash\n# Using uv (recommended)\nuv add \"mcp[cli]\" httpx python-dotenv\n\n# Or using pip\npip install mcp httpx python-dotenv\n```\n\n3. Client Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"nearby-search\": {\n      \"command\": \"uv\",\n      \"args\": [\"--directory\", \"path/to/nearby-search-mcp\", \"run\", \"main.py\"],\n      \"env\": {\n        \"GOOGLE_API_KEY\": \"your google api key\"\n      }\n    }\n  }\n}\n````\n\n## Usage\n\n### Running the Server\n\n- **Development Mode** (with MCP Inspector):\n```bash\nmcp dev main.py\n```\n\n- **Install in Claude Desktop**:\n```bash\nmcp install main.py --name \"NearbySearch\"\n```\n\n- **Direct Execution**:\n```bash\npython main.py\n```\n\n### Available Endpoints\n\n**Tool: `search_nearby`**\n - Searches for places near your current location\n - Parameters:\n   - `keyword` (str): What to search for (e.g., \"coffee shop\")\n   - `radius` (int, optional): Search radius in meters (default: 1500)\n   - `type` (str, optional): Place type (e.g., \"restaurant\", \"cafe\")\n\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "location",
        "geographic",
        "nearby",
        "location services",
        "location based",
        "location detection"
      ],
      "category": "location-services"
    },
    "mahdin75--geoserver-mcp": {
      "owner": "mahdin75",
      "name": "geoserver-mcp",
      "url": "https://github.com/mahdin75/geoserver-mcp",
      "imageUrl": "",
      "description": "[mahdin75/gis-mcp](https://github.com/mahdin75/gis-mcp) 🏠 – A Model Context Protocol (MCP) server implementation that connects Large Language Models (LLMs) to GIS operations using GIS libraries, enabling AI assistants to perform accurate geospatial operations and transformations.",
      "stars": 39,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-04T02:57:37Z",
      "readme_content": "# GeoServer MCP Server\n\n<p align=\"center\">\n  <img alt=\"badge_mcpx_dev_type_server\" src=\"https://badge.mcpx.dev?type=server\" title=\"MCP Server\"/>\nA Model Context Protocol (MCP) server implementation that connects Large Language Models (LLMs) to the GeoServer REST API, enabling AI assistants to interact with geospatial data and services.\n\n</p>\n\n<div align=\"center\">\n  \n</div>\n\n> ![Alpha](https://img.shields.io/badge/Version-0.3.0--Alpha-green)\n>\n> Version 0.4.0 (Alpha) is under active development and will be released shortly. We are open to contributions and welcome developers to join us in building this project.\n\n## 🎥 Demo\n\n<div align=\"center\">\n  \n</div>\n\n## 📋 Table of Contents\n\n- [Features](#-features)\n- [Prerequisites](#-prerequisites)\n- [Installation](#️-installation)\n  - [Docker Installation](#️-installation-docker)\n  - [pip Installation](#️-installation-pip)\n  - [Development Installation](#️-development-installation)\n- [Available Tools](#️-available-tools)\n  - [Workspace and Layer Management](#️-workspace-and-layer-management)\n  - [Data Operations](#️-data-operations)\n  - [Visualization](#️-visualization)\n- [Client Development](#️-client-development)\n  - [List Workspaces](#list-workspaces)\n  - [Get Layer Information](#get-layer-information)\n  - [Query Features](#query-features)\n  - [Generate Map](#generate-map)\n- [Planned Features](#-planned-features)\n- [Contributing](#-contributing)\n- [License](#-license)\n- [Related Projects](#-related-projects)\n- [Support](#-support)\n- [Badges](#-badges)\n\n## 🚀 Features\n\n- 🔍 Query and manipulate GeoServer workspaces, layers, and styles\n- 🗺️ Execute spatial queries on vector data\n- 🎨 Generate map visualizations\n- 🌐 Access OGC-compliant web services (WMS, WFS)\n- 🛠️ Easy integration with MCP-compatible clients\n\n## 📋 Prerequisites\n\n- Python 3.10 or higher\n- Running GeoServer instance with REST API enabled\n- MCP-compatible client (like Claude Desktop or Cursor)\n- Internet connection for package installation\n\n## 🛠️ Installation\n\nChoose the installation method that best suits your needs:\n\n### Installing via Smithery\n\nTo install GeoServer MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@mahdin75/geoserver-mcp):\n\n```bash\nnpx -y @smithery/cli install @mahdin75/geoserver-mcp --client claude\n```\n\n### 🛠️ Installation (Docker)\n\nThe Docker installation is the quickest and most isolated way to run the GeoServer MCP server. It's ideal for:\n\n- Quick testing and evaluation\n- Production deployments\n- Environments where you want to avoid Python dependencies\n- Consistent deployment across different systems\n\n1. Run geoserver-mcp:\n\n```bash\ndocker pull mahdin75/geoserver-mcp\ndocker run -d mahdin75/geoserver-mcp\n```\n\n2. Configure the clients:\n\nIf you are using Claude Desktop, edit `claude_desktop_config.json`\nIf you are using Cursor, Create `.cursor/mcp.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"geoserver-mcp\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GEOSERVER_URL=http://localhost:8080/geoserver\",\n        \"-e\",\n        \"GEOSERVER_USER=admin\",\n        \"-e\",\n        \"GEOSERVER_PASSWORD=geoserver\",\n        \"-p\",\n        \"8080:8080\",\n        \"mahdin75/geoserver-mcp\"\n      ]\n    }\n  }\n}\n```\n\n### 🛠️ Installation (pip)\n\nThe pip installation is recommended for most users who want to run the server directly on their system. This method is best for:\n\n- Regular users who want to run the server locally\n- Systems where you have Python 3.10+ installed\n- Users who want to customize the server configuration\n- Development and testing purposes\n\n1. Install uv package manager.\n\n```bash\npip install uv\n```\n\n2. Create the Virtual Environment (Python 3.10+):\n\n**Linux/Mac:**\n\n```bash\nuv venv --python=3.10\n```\n\n**Windows PowerShell:**\n\n```bash\nuv venv --python=3.10\n```\n\n3. Install the package using pip:\n\n```bash\nuv pip install geoserver-mcp\n```\n\n4. Configure GeoServer connection:\n\n**Linux/Mac:**\n\n```bash\nexport GEOSERVER_URL=\"http://localhost:8080/geoserver\"\nexport GEOSERVER_USER=\"admin\"\nexport GEOSERVER_PASSWORD=\"geoserver\"\n```\n\n**Windows PowerShell:**\n\n```powershell\n$env:GEOSERVER_URL=\"http://localhost:8080/geoserver\"\n$env:GEOSERVER_USER=\"admin\"\n$env:GEOSERVER_PASSWORD=\"geoserver\"\n```\n\n5. Start the server:\n\nIf you are going to use Claude desktop you don't need this step. For cursor or your own custom client you should run the following code.\n\n**Linux:**\n\n```bash\nsource .venv/bin/activate\n\ngeoserver-mcp\n```\n\nor\n\n```bash\nsource .venv/bin/activate\n\ngeoserver-mcp --url http://localhost:8080/geoserver --user admin --password geoserver --debug\n```\n\n**Windows PowerShell:**\n\n```bash\n.\\.venv\\Scripts\\activate\ngeoserver-mcp\n```\n\nor\n\n```bash\n.\\.venv\\Scripts\\activate\ngeoserver-mcp --url http://localhost:8080/geoserver --user admin --password geoserver --debug\n```\n\n6. Configure Clients:\n\nIf you are using Claude Desktop, edit `claude_desktop_config.json`\nIf you are using Cursor, Create `.cursor/mcp.json`\n\n**Windows:**\n\n```json\n{\n  \"mcpServers\": {\n    \"geoserver-mcp\": {\n      \"command\": \"C:\\\\path\\\\to\\\\geoserver-mcp\\\\.venv\\\\Scripts\\\\geoserver-mcp\",\n      \"args\": [\n        \"--url\",\n        \"http://localhost:8080/geoserver\",\n        \"--user\",\n        \"admin\",\n        \"--password\",\n        \"geoserver\"\n      ]\n    }\n  }\n}\n```\n\n**Linux:**\n\n```json\n{\n  \"mcpServers\": {\n    \"geoserver-mcp\": {\n      \"command\": \"/path/to/geoserver-mcp/.venv/bin/geoserver-mcp\",\n      \"args\": [\n        \"--url\",\n        \"http://localhost:8080/geoserver\",\n        \"--user\",\n        \"admin\",\n        \"--password\",\n        \"geoserver\"\n      ]\n    }\n  }\n}\n```\n\n### 🛠️ Development installation\n\nThe development installation is designed for contributors and developers who want to modify the codebase. This method is suitable for:\n\n- Developers contributing to the project\n- Users who need to modify the source code\n- Testing new features\n- Debugging and development purposes\n\n1. Install uv package manager.\n\n```bash\npip install uv\n```\n\n2. Create the Virtual Environment (Python 3.10+):\n\n```bash\nuv venv --python=3.10\n```\n\n3. Install the package using pip:\n\n```bash\nuv pip install -e .\n```\n\n4. Configure GeoServer connection:\n\n**Linux/Mac:**\n\n```bash\nexport GEOSERVER_URL=\"http://localhost:8080/geoserver\"\nexport GEOSERVER_USER=\"admin\"\nexport GEOSERVER_PASSWORD=\"geoserver\"\n```\n\n**Windows PowerShell:**\n\n```powershell\n$env:GEOSERVER_URL=\"http://localhost:8080/geoserver\"\n$env:GEOSERVER_USER=\"admin\"\n$env:GEOSERVER_PASSWORD=\"geoserver\"\n```\n\n5. Start the server:\n\nIf you are going to use Claude desktop you don't need this step. For cursor or your own custom client you should run the following code.\n\n**Linux:**\n\n```bash\nsource .venv/bin/activate\n\ngeoserver-mcp\n```\n\nor\n\n```bash\nsource .venv/bin/activate\n\ngeoserver-mcp --url http://localhost:8080/geoserver --user admin --password geoserver --debug\n```\n\n**Windows PowerShell:**\n\n```bash\n.\\.venv\\Scripts\\activate\ngeoserver-mcp\n```\n\nor\n\n```bash\n.\\.venv\\Scripts\\activate\ngeoserver-mcp --url http://localhost:8080/geoserver --user admin --password geoserver --debug\n```\n\n6. Configure Clients:\n\nIf you are using Claude Desktop, edit `claude_desktop_config.json`\nIf you are using Cursor, Create `.cursor/mcp.json`\n\n**Windows:**\n\n```json\n{\n  \"mcpServers\": {\n    \"geoserver-mcp\": {\n      \"command\": \"C:\\\\path\\\\to\\\\geoserver-mcp\\\\.venv\\\\Scripts\\\\geoserver-mcp\",\n      \"args\": [\n        \"--url\",\n        \"http://localhost:8080/geoserver\",\n        \"--user\",\n        \"admin\",\n        \"--password\",\n        \"geoserver\"\n      ]\n    }\n  }\n}\n```\n\n**Linux:**\n\n```json\n{\n  \"mcpServers\": {\n    \"geoserver-mcp\": {\n      \"command\": \"/path/to/geoserver-mcp/.venv/bin/geoserver-mcp\",\n      \"args\": [\n        \"--url\",\n        \"http://localhost:8080/geoserver\",\n        \"--user\",\n        \"admin\",\n        \"--password\",\n        \"geoserver\"\n      ]\n    }\n  }\n}\n```\n\n## 🛠️ Available Tools\n\n### 🛠️ Workspace and Layer Management\n\n| Tool               | Description                 |\n| ------------------ | --------------------------- |\n| `list_workspaces`  | Get available workspaces    |\n| `create_workspace` | Create a new workspace      |\n| `get_layer_info`   | Get detailed layer metadata |\n| `list_layers`      | List layers in a workspace  |\n| `create_layer`     | Create a new layer          |\n| `delete_resource`  | Remove resources            |\n\n### 🛠️ Data Operations\n\n| Tool              | Description                        |\n| ----------------- | ---------------------------------- |\n| `query_features`  | Execute CQL queries on vector data |\n| `update_features` | Modify feature attributes          |\n| `delete_features` | Remove features based on criteria  |\n\n### 🛠️ Visualization\n\n| Tool           | Description                     |\n| -------------- | ------------------------------- |\n| `generate_map` | Create styled map images        |\n| `create_style` | Define new SLD styles           |\n| `apply_style`  | Apply existing styles to layers |\n\n## 🛠️ Client Development\n\nIf you're planning to develop your own client to interact with the GeoServer MCP server, you can find inspiration in the example client implementation at `examples/client.py`. This example demonstrates:\n\n- How to establish a connection with the MCP server\n- How to send requests and handle responses\n- Basic error handling and connection management\n- Example usage of various tools and operations\n\nThe example client serves as a good starting point for understanding the protocol and implementing your own client applications.\n\nAlso, here is the example usgage:\n\n### List Workspaces\n\n```\n\nTool: list_workspaces\nParameters: {}\nResponse: [\"default\", \"demo\", \"topp\", \"tiger\", \"sf\"]\n\n```\n\n### Get Layer Information\n\n```\n\nTool: get_layer_info\nParameters: {\n\"workspace\": \"topp\",\n\"layer\": \"states\"\n}\n\n```\n\n### Query Features\n\n```\n\nTool: query_features\nParameters: {\n\"workspace\": \"topp\",\n\"layer\": \"states\",\n\"filter\": \"PERSONS > 10000000\",\n\"properties\": [\"STATE_NAME\", \"PERSONS\"]\n}\n\n```\n\n### Generate Map\n\n```\n\nTool: generate_map\nParameters: {\n\"layers\": [\"topp:states\"],\n\"styles\": [\"population\"],\n\"bbox\": [-124.73, 24.96, -66.97, 49.37],\n\"width\": 800,\n\"height\": 600,\n\"format\": \"png\"\n}\n\n```\n\n## 🔮 Planned Features\n\n- [ ] Coverage and raster data management\n- [ ] Security and access control\n- [ ] Advanced styling capabilities\n- [ ] WPS processing operations\n- [ ] GeoWebCache integration\n\n## 🤝 Contributing\n\nWe welcome contributions! Here's how you can help:\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\nPlease ensure your PR description clearly describes the problem and solution. Include the relevant issue number if applicable.\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🔗 Related Projects\n\n- [Model Context Protocol](https://github.com/modelcontextprotocol/python-sdk) - The core MCP implementation\n- [GeoServer REST API](https://docs.geoserver.org/latest/en/user/rest/index.html) - Official GeoServer REST documentation\n- [GeoServer REST Python Client](https://github.com/gicait/geoserver-rest) - Python client for GeoServer REST API\n\n## 📞 Support\n\nFor support, please Open an [issue](https://github.com/mahdin75/geoserver-mcp/issues)\n\n## 🏆 Badges\n\n<div align=\"center\">\n  <a href=\"https://glama.ai/mcp/servers/@mahdin75/geoserver-mcp\">\n    <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@mahdin75/geoserver-mcp/badge\" alt=\"GeoServer Server MCP server\" />\n  </a>\n  <br/><br/><br/>\n  <a href=\"https://mcp.so/server/Geoserver%20MCP%20Server/mahdin75\">\n    <img src=\"https://mcp.so/logo.png\" alt=\"MCP.so Badge\" width=\"150\"/>\n  </a>\n  <br/><br/><br/>\n\n  [![MseeP.ai Security Assessment Badge](https://mseep.net/pr/mahdin75-geoserver-mcp-badge.png)](https://mseep.ai/app/mahdin75-geoserver-mcp)\n</div>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gis",
        "geoserver",
        "geographic",
        "location services",
        "geoserver mcp",
        "gis mcp"
      ],
      "category": "location-services"
    },
    "modelcontextprotocol--server-google-maps": {
      "owner": "modelcontextprotocol",
      "name": "server-google-maps",
      "url": "https://github.com/modelcontextprotocol/servers-archived/tree/main/src/google-maps",
      "imageUrl": "",
      "description": "Google Maps integration for location services, routing, and place details",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "maps",
        "services",
        "google",
        "location services",
        "maps google",
        "google maps"
      ],
      "category": "location-services"
    },
    "stadiamaps--stadiamaps-mcp-server-ts": {
      "owner": "stadiamaps",
      "name": "stadiamaps-mcp-server-ts",
      "url": "https://github.com/stadiamaps/stadiamaps-mcp-server-ts",
      "imageUrl": "",
      "description": "A MCP server for Stadia Maps' Location APIs - Lookup addresses, places with geocoding, find time zones, create routes and static maps",
      "stars": 17,
      "forks": 5,
      "license": "BSD 3-Clause \"New\" or \"Revised\" License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T05:15:31Z",
      "readme_content": "# Stadia Maps MCP Server (TypeScript)\n\nThis is a Model Context Protocol (MCP) server\nthat provides AI assistants with access to Stadia Maps APIs for location services, geocoding, routing, and mapping capabilities.\n\n<a href=\"https://glama.ai/mcp/servers/@stadiamaps/stadiamaps-mcp-server-ts\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@stadiamaps/stadiamaps-mcp-server-ts/badge\" alt=\"Stadia Maps Location API Server MCP server\" />\n</a>\n\n## Capabilities\n\n- Time information anywhere on earth\n  - Current time\n  - Time zone info (ID, UTC offset, and whether a special offset like daylight saving/summer time is in effect)\n- Geocoding\n  - Address lookup\n  - Place search (POIs like restaurants, cafes, etc.)\n- Static map image generation (including markers and route overlays)\n- Routing & travel time\n- Isochrones (reachable range; both time and distance contours)\n\n### Use cases\n\nHere are just a few of the ways you can prompt an LLM\nto make use of the tools:\n\n- \"What time is it in Tokyo?\"\n- \"Make me a map showing the walking route from Depoo Turg to the Põhjala Tap Room.\"\n- \"Is the Põhjala Tap Room open right now? Use Stadia Maps to get this information.\"\n- \"Geocode the addresses in the attached spreadsheet.\"\n\n## Quickstart\n\n## Building\n\nWe'll use `bun` for all of our instructions,\nbut you can use `npm` too.\n\n1. Run `bun install` to fetch the dependencies.\n2. Then, execute the build script: `bun run build`.\n\nThe built code should be in the `build` directory now.\n\n### Configuration\n\nThis MCP server requires a Stadia Maps API key.\nFollow the directions [here](https://docs.stadiamaps.com/authentication/#api-keys) to get your free key.\nThen, set the `API_KEY` environment variable when running the server.\n\n## Integration Examples\n\nAPI key in hand, here are a few ways you can use the MCP server.\n\n### Claude Desktop\n\nSee [Claude Desktop Setup](claude-desktop-setup.md) for detailed instructions\non configuring this MCP server with Claude Desktop.\nClaude Desktop is a great tool for testing out workflows.\n\n### Warp\n\nSee [Warp Setup](warp-setup.md) for detailed instructions\non setting up Warp with this MCP server.\nWarp is a powerful agentic environment that uses LLMs to do things on your behalf.\nWhereas you would need to upload a file to Claude,\nWarp can directly access files,\nwrite code, and execute programs on your computer.\n\nPaired with the Stadia Maps MCP, it's a powerful tool for tasks like bulk geocoding,\nspatially filtering datasets, and more.\n\n### Programmatic Integration with Anthropic SDK\n\nFor developers who want to integrate the MCP server programmatically into their TypeScript applications,\nwe have an [Anthropic SDK Integration Example](examples/README.md#anthropic-sdk-demo).\nThis example demonstrates how to:\n\n- Connect to the MCP server from your code\n- Integrate with Claude's API for natural language queries\n- Enhance Claude with spatial intelligence using the Stadia Maps APIs via an MCP server\n\n## Tips and Tricks\n\nLLMs are far from perfect,\nand sometimes you need to put some thought into crafting prompts\nto get good results.\n\n### When possible, be specific about which tool(s) to use\n\nSometimes the model needs a nudge to use the right tool.\nFor example, if you ask for opening hours,\nmany models will try to search the web.\nThis information isn't always easily available for the model to find online.\n\nFor example, watch what a model does here:\n\n\n\nYou can nudge the model to use the tools in this MCP like so:\n\n\n\n### Get creative\n\nLLMs are capable of a lot, but they can't always do everything.\nAs an example, let's look at one way to bulk geocode addresses in a spreadsheet.\n\nFirst, attach an Excel sheet in Claude Desktop which has a few addresses in a column.\n\n**Prompt:** Geocode all the addresses in this spreadsheet. Add the geocoded latitude and longitude as new columns in the sheet.\n\nAt the time of this writing, Claude cannot generate a spreadsheet attachment\ndirectly, but it _can_ generate an HTML page or other code which generates it for you!\nIn fact, Claude Desktop may actually ask you if you want an Excel sheet download,\nbut it will just go ahead and generate this for you instead.\n\nThis sort of creativity is necessary, particularly when interacting with current\ngeneration LLMs through the usual user interfaces.\nA lot of the power of MCPs\nis that you can interact with them through code,\nwhich can overcome some of these limitations to provide a delightful user experience.\n\n### Customize it!\n\nJust like a human, LLMs do better when given the right tools for the job.\nAnd just like a master craftsman, you'll probably need _some_ expert knowledge\nto know how best to combine the right tools and materials.\n\nAdditionally, models have a context limit.\nWhile there are advanced techniques to squeeze more out of this,\nyou can only benefit by tailoring the MCP to the specific API functionality you need.\nNot to mention, it will be _much_ cheaper for you to operate with just the tools you need\nfor a specific context.\n**Tool schemas are vast majority of the context cost, in a simple demo!**\nIf you build the suite out to ~10 tools, you can end up with tens of thousands of input tokens.\n\n**This project is a starting point**,\nand we've left comments throughout [`index.ts`](src/index.ts) noting our approach to building tools,\nand how you can tailor them for your use case.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "stadiamaps",
        "maps",
        "services",
        "location services",
        "location apis",
        "analytics stadiamaps"
      ],
      "category": "location-services"
    },
    "trackmage--trackmage-mcp-server": {
      "owner": "trackmage",
      "name": "trackmage-mcp-server",
      "url": "https://github.com/trackmage/trackmage-mcp-server",
      "imageUrl": "",
      "description": "Shipment tracking api and logistics management capabilities through the [TrackMage API] (https://trackmage.com/)",
      "stars": 1,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-06-09T13:56:15Z",
      "readme_content": "# TrackMage MCP Server - Shipment Tracking API & Logistics API Integration\n\nA Model Context Protocol (MCP) server for shipment tracking api, package monitoring, and logistics management using the TrackMage API. Supports tracking across 1600+ carriers worldwide.\n\n## Features\n\n- **Carrier Support**: Track packages across 1600+ carriers worldwide ([full list](https://trackmage.com/carriers/))\n- **Resources**: Workspaces, shipments, orders, carriers, tracking statuses\n- **Tools**: Create shipments/orders, get shipment checkpoints, carrier detection\n- **Authentication**: OAuth with client credentials\n\n## ⚠️ Data Privacy Notice\n\n**Data sharing with your LLM provider**: This MCP server provides data to whichever LLM you're using (Claude, ChatGPT, etc.). While this is the expected behavior for MCP servers, please ensure you're comfortable sharing logistics data including tracking numbers, customer emails, addresses, and shipment details with your chosen LLM provider.\n\n**Best practices:**\n- Only use with non-sensitive or test data if you have privacy concerns\n- Check your LLM provider's data handling policies\n- Consider opting out of training data programs if available\n- Ensure compliance with your organization's data policies\n\n## Prerequisites\n\n- Node.js v18+\n- TrackMage account\n\n## Getting Credentials\n\n1. Register and log into [TrackMage](https://app.trackmage.com).\n2. Go to **Settings > API KEYS**.\n3. Enter an **App Name** (e.g., \"MCP\") and **App URL** (e.g., `http://localhost:3000`).\n4. Click **Generate** and copy your **Client ID** and **Client Secret**.\n5. Note your **Workspace ID** from the dashboard URL.\n\n## Installation\n\n### Option 1: Local Setup\n\n```bash\ngit clone https://github.com/yourusername/trackmage-mcp-server.git\ncd trackmage-mcp-server\nnpm install\ncp .env.example .env\n# Edit .env with your credentials\nnpm start\n```\n\n## Configuration\n\nEdit `.env`:\n\n```\nTRACKMAGE_CLIENT_ID=your_client_id_here\nTRACKMAGE_CLIENT_SECRET=your_client_secret_here\nTRACKMAGE_WORKSPACE_ID=your_workspace_id_here\n```\n\n## Usage\n\nRun the server:\n\n```bash\nnpm start\n```\nand then use\n```\n{\n  \"mcpServers\": {\n    \"trackmage\": {\n      \"transport\": {\n        \"type\": \"http\",\n        \"host\": \"localhost\",\n        \"port\": 3000\n      }\n    }\n  }\n}\n\n```\nor using file process:\n```\n{\n  \"mcpServers\": {\n\n    \"trackmage\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/trackmage-mcp-server/index.js\"],\n      \"env\": {\n        \"TRACKMAGE_CLIENT_ID\": \"your_client_id_here\",\n        \"TRACKMAGE_CLIENT_SECRET\": \"your_client_secret_here\",\n        \"TRACKMAGE_WORKSPACE_ID\": \"your_workspace_id_here\"\n      }\n    }\n\n  }\n}\n```\n\n### MCP Resources\n\n- `trackmage:///workspaces/{id}`\n- `trackmage:///shipments/{id}`\n- `trackmage:///orders/{id}`\n- `trackmage:///carriers/{id}`\n- `trackmage:///tracking_statuses/{id}`\n\n### MCP Tools\n\n#### Shipment Management\n\n- **`create_shipment`**: Create a new shipment\n  - Parameters: `{ trackingNumber, originCarrier?, email?, workspaceId? }`\n  - Returns: Created shipment object\n\n- **`update_shipment`**: Update an existing shipment\n  - Parameters: `{ shipmentId, trackingNumber?, originCarrier?, email?, status? }`\n  - Returns: Updated shipment object\n\n- **`list_shipments`**: List shipments from workspace\n  - Parameters: `{ workspaceId?, page?, itemsPerPage? }`\n  - Returns: Array of shipment objects\n\n- **`get_shipment_checkpoints`**: Get tracking checkpoints for a shipment\n  - Parameters: `{ shipmentId }`\n  - Returns: Array of tracking checkpoint events\n\n- **`retrack_shipments`**: Retrack multiple shipments by tracking numbers\n  - Parameters: `{ trackingNumbers: [{ number, originCarrier? }], workspaceId? }`\n  - Returns: Retracking results\n\n#### Order Management\n\n- **`create_order`**: Create a new order\n  - Parameters: `{ orderNumber, email?, workspaceId? }`\n  - Returns: Created order object\n\n- **`update_order`**: Update an existing order\n  - Parameters: `{ orderId, orderNumber?, email?, status? }`\n  - Returns: Updated order object\n\n- **`list_orders`**: List orders from workspace\n  - Parameters: `{ workspaceId?, page?, itemsPerPage? }`\n  - Returns: Array of order objects\n\n#### Carrier Management\n\n- **`list_carriers`**: List available carriers\n  - Parameters: `{ page?, itemsPerPage? }`\n  - Returns: Array of carrier objects with codes and names\n\n- **`detect_carrier`**: Detect possible carriers for a tracking number\n  - Parameters: `{ trackingNumber }`\n  - Returns: Array of possible carrier matches\n\n## Testing\n\n```bash\nnpm test\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tracking",
        "trackmage",
        "logistics",
        "location services",
        "tracking api",
        "trackmage api"
      ],
      "category": "location-services"
    },
    "webcoderz--MCP-Geo": {
      "owner": "webcoderz",
      "name": "MCP-Geo",
      "url": "https://github.com/webcoderz/MCP-Geo",
      "imageUrl": "",
      "description": "Geocoding MCP server for nominatim, ArcGIS, Bing",
      "stars": 26,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-30T22:06:47Z",
      "readme_content": "# MCP-Geo\nGeocoding MCP server with GeoPY!\n\n\n<a href=\"https://glama.ai/mcp/servers/ujss4qy5fs\">\n  <img alt=\"badge_v_1\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/ujss4qy5fs/badge?v=1\" />\n</a>\n\n## 📋 System Requirements\n\n\n- Python 3.6+\n\n## 📦 Dependencies\n\nInstall all required dependencies:\n\n```bash\n# Using uv\nuv sync\n```\n\n### Required Packages\n- **fastmcp**: Framework for building Model Context Protocol servers\n- **geoPy**: Python library for accessing and geocoding/reverse geocoding locations.\n\n\nAll dependencies are specified in `requirements.txt` for easy installation.\n\n## 📑 Table of Contents\n- [System Requirements](#-system-requirements)\n- [Dependencies](#-dependencies)\n- [MCP Tools](#%EF%B8%8F-mcp-tools)\n- [Getting Started](#-getting-started)\n- [Installation Options](#-installation-options)\n  - [Claude Desktop](#option-1-install-for-claude-desktop)\n  - [Elsewhere](#option-2-install-elsewhere)\n- [Safety Features](#-safety-features)\n- [Development Documentation](#-development-documentation)\n- [Environment Variables](#%EF%B8%8F-environment-variables)\n\n## 🛠️ MCP Tools\n\nThis MCP server provides the following geocoding tools to Large Language Models (LLMs):\n\n### geocode_location\n\n- Takes a user-provided address or place name and returns the best match’s latitude, longitude, and formatted address.\n\n- Handles errors gracefully and returns None if the location is not found or if an error occurs.\n\n### reverse_geocode\n\n- Takes a latitude and longitude and returns the nearest address.\n- Useful for finding descriptive information about a point on the map.\n\n### geocode_with_details\n\n- Similar to geocode_location but returns additional data such as bounding boxes and more detailed address info, if supported by the geocoder.\n\n### geocode_multiple_locations\n\n- Accepts a list of address strings and returns a list of geocoding results (lat/lon/address) for each address.\n- Rate-limited to avoid hitting geocoding service quotas.\n\n### reverse_geocode_multiple_locations\n\n- Accepts a list of [lat, lon] pairs to perform reverse geocoding for each.\n- Returns a list of dictionaries containing lat, lon, and address or None for unsuccessful lookups, also rate-limited.\n\n### distance_between_addresses\n\n- Calculate the distance between two addresses or place names.\n- accepts 2 addresses and a unit of measurement (miles/kilometer)\n- Returns the distance in the specified unit, or None if either address could not be geocoded.\n\n### distance_between_coords\n\n- Calculate the distance between two lat/lon pairs.\n- accepts 2 pairs of latitude and longitude and a unit of measurement (kilometer/miles)\n- Returns the distance in the specified unit.\n\n\n## 🚀 Getting Started\n\nClone the repository:\n\n```bash\ngit clone https://github.com/webcoderz/MCP-Geo.git\ncd MCP-Geo\n```\n\n\n## 📦 Installation Options\n\nYou can install this MCP server in either Claude Desktop or elsewhere. Choose the option that best suits your needs.\n\n### Option 1: Install for Claude Desktop\n\nInstall using FastMCP:\n\n```bash\nfastmcp install geo.py --name \"MCP Geo\"\n```\n\n### Option 2: Install elsewhere\n\nTo use this server anywhere else:\n\n\n1. Add the following configuration to the settings file:\n\n```json\n{\n    \"mcp-geo\": {\n        \"command\": \"uv\",\n        \"args\": [\n          \"--directory\",\n          \"MCP-Geo\",\n          \"run\",\n          \"geo.py\"\n        ],\n        \"env\": {\n        \"NOMINATIM_URL\": \"${NOMINATIM_URL}\",\n        \"SCHEME\": \"http\",\n        \"GEOCODER_PROVIDER\": \"nominatim\"\n        }\n    }\n}\n```\n\n\n🔒 Safety Features\n\t•\tRate Limiting: Each geocoding call is rate-limited (e.g., 1-second delay) to avoid excessive requests that violate usage limits.\n\t•\tError Handling: Catches geopy exceptions (timeouts, service errors) and returns safe None results instead of crashing.\n\n📚 Development Documentation\n\nIf you’d like to extend or modify this server:\n\t•\tCheck geo.py for how each tool is implemented and how geopy is integrated.\n\t•\tAdjust environment variables to switch providers (Nominatim, ArcGIS, Bing, etc.).\n\t•\tLook at geopy’s official docs for advanced usage like bounding boxes, language settings, or advanced data extraction.\n\n⚙️ Environment Variables\n\nConfigure the server using environment variables:\n\n| Variable             | Description                              | Default            |\n |----------------------|------------------------------------------|--------------------|\n| `GEOCODER_PROVIDER` (optional)   | \"nominatim\", \"arcgis\", or \"bing\"     | nominatim          |\n| `NOMINATIM_URL` (optional)       | Domain for Nominatim | nominatim.openstreetmap.org       |\n| `SCHEME` (optional)              | http/https    | http               |\n| `ARC_USERNAME` (optional for ArcGIS)        | ArcGIS username            | None               |\n| `ARC_PASSWORD` (optional for ArcGIS)        | ArcGIS password      | None               |\n| `BING_API_KEY` (required for Bing)        | Your Bing Maps key.      | None               |\n\nThese can be set in your shell or in the MCP settings file for your environment. If more are needed just edit geo.py and add them in to whichever geocoder you are using.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "geocoding",
        "geo",
        "geographic",
        "location services",
        "location based",
        "services mapping"
      ],
      "category": "location-services"
    }
  }
}