{
  "category": "devops-and-cicd",
  "categoryDisplay": "DevOps and CI/CD",
  "description": "",
  "totalRepositories": 17,
  "repositories": {
    "10164367--sonic-buildimage": {
      "owner": "10164367",
      "name": "sonic-buildimage",
      "url": "https://github.com/10164367/sonic-buildimage",
      "imageUrl": "/freedevtools/mcp/pfp/10164367.webp",
      "description": "SONiC Buildimage is a server that helps create installation images for network switches, making it easier to deploy and customize software for different hardware. It supports various tools for debugging and managing network device images efficiently.",
      "stars": 0,
      "forks": 0,
      "license": "Other",
      "language": "",
      "updated_at": "2022-01-21T03:21:56Z",
      "readme_content": "*static analysis*:\n\n[](https://lgtm.com/projects/g/Azure/sonic-buildimage/alerts/)\n[](https://lgtm.com/projects/g/Azure/sonic-buildimage/context:python)\n\n\n*master builds*:\n\n[![Barefoot](https://dev.azure.com/mssonic/build/_apis/build/status/barefoot/Azure.sonic-buildimage.official.barefoot?branchName=master&label=Barefoot)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=146&branchName=master)\n[![Broadcom](https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=master&label=Broadcom)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&branchName=master)\n[![Centec](https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=master&label=Centec)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&branchName=master)\n[![Centec(arm64)](https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=master&label=Centec-arm64)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&branchName=master)\n[![Innovium](https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=master&label=Innovium)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&branchName=master)\n[![Mellanox](https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=master&label=Mellanox)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&branchName=master)\n[![Marvell(armhf)](https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-armhf?branchName=master&label=Marvell-armhf)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&branchName=master)\n[![Nephos](https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=master&label=Nephos)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&branchName=master)\n[![P4](https://sonic-jenkins.westus2.cloudapp.azure.com/job/p4/job/buildimage-p4-all/badge/icon?subject=P4)](https://sonic-jenkins.westus2.cloudapp.azure.com/job/p4/job/buildimage-p4-all)\n[![VS](https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=master&label=VS)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&branchName=master)\n\n*202012 builds*:\n\n[![Barefoot](https://dev.azure.com/mssonic/build/_apis/build/status/barefoot/Azure.sonic-buildimage.official.barefoot?branchName=202012&label=Barefoot)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=146&branchName=202012)\n[![Broadcom](https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=202012&label=Broadcom)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&branchName=202012)\n[![Centec](https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec?branchName=202012&label=Centec)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=143&branchName=202012)\n[![Centec(arm64)](https://dev.azure.com/mssonic/build/_apis/build/status/centec/Azure.sonic-buildimage.official.centec-arm64?branchName=202012&label=Centec-arm64)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=140&branchName=202012)\n[![Innovium](https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=202012&label=Innovium)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&branchName=202012)\n[![Marvell(armhf)](https://dev.azure.com/mssonic/build/_apis/build/status/marvell/Azure.sonic-buildimage.official.marvell-armhf?branchName=202012&label=Marvell-armhf)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=141&branchName=202012)\n[![Mellanox](https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=202012&label=Mellanox)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&branchName=202012)\n[![Nephos](https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=202012&label=Nephos)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&branchName=202012)\n[![VS](https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=202012&label=VS)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&branchName=202012)\n\n*201911 builds*:\n\n[![Barefoot](https://dev.azure.com/mssonic/build/_apis/build/status/barefoot/Azure.sonic-buildimage.official.barefoot?branchName=201911&label=Barefoot)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=146&branchName=201911)\n[![Broadcom](https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=201911&label=Broadcom)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&branchName=201911)\n[![Innovium](https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=201911&label=Innovium)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&branchName=201911)\n[![Mellanox](https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=201911&label=Mellanox)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&branchName=201911)\n[![Nephos](https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=201911&label=Nephos)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&branchName=201911)\n[![VS](https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=201911&label=VS)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&branchName=201911)\n\n*201811 builds*:\n\n[![Broadcom](https://dev.azure.com/mssonic/build/_apis/build/status/broadcom/Azure.sonic-buildimage.official.broadcom?branchName=201811&label=Broadcom)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=138&branchName=201811)\n[![Mellanox](https://dev.azure.com/mssonic/build/_apis/build/status/mellanox/Azure.sonic-buildimage.official.mellanox?branchName=201811&label=Mellanox)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=139&branchName=201811)\n[![Innovium](https://dev.azure.com/mssonic/build/_apis/build/status/innovium/Azure.sonic-buildimage.official.innovium?branchName=201811&label=Innovium)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=148&branchName=201811)\n[![Nephos](https://dev.azure.com/mssonic/build/_apis/build/status/nephos/Azure.sonic-buildimage.official.nephos?branchName=201811&label=Nephos)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=149&branchName=201811)\n[![VS](https://dev.azure.com/mssonic/build/_apis/build/status/vs/Azure.sonic-buildimage.official.vs?branchName=201811&label=VS)](https://dev.azure.com/mssonic/build/_build/latest?definitionId=142&branchName=201811)\n\n*201807 builds*:\n\n[![Broadcom](https://sonic-jenkins.westus2.cloudapp.azure.com/job/broadcom/job/buildimage-brcm-201807/badge/icon?subject=Broadcom)](https://sonic-jenkins.westus2.cloudapp.azure.com/job/broadcom/job/buildimage-brcm-201807/)\n[![Barefoot](https://sonic-jenkins.westus2.cloudapp.azure.com/job/barefoot/job/buildimage-bf-201807/badge/icon?subject=Barefoot)](https://sonic-jenkins.westus2.cloudapp.azure.com/job/barefoot/job/buildimage-bf-201807/)\n\n*201803 builds*:\n\n[![Broadcom](https://sonic-jenkins.westus2.cloudapp.azure.com/job/broadcom/job/buildimage-brcm-201803/badge/icon?subject=Broadcom)](https://sonic-jenkins.westus2.cloudapp.azure.com/job/broadcom/job/buildimage-brcm-201803/)\n[![Nephos](https://sonic-jenkins.westus2.cloudapp.azure.com/job/nephos/job/buildimage-nephos-201803/badge/icon?subject=Nephos)](https://sonic-jenkins.westus2.cloudapp.azure.com/job/nephos/job/buildimage-nephos-201803/)\n[![Marvell](https://sonic-jenkins.westus2.cloudapp.azure.com/job/marvell/job/buildimage-mrvl-201803/badge/icon?subject=Marvell)](https://sonic-jenkins.westus2.cloudapp.azure.com/job/marvell/job/buildimage-mrvl-201803/)\n[![Mellanox](https://sonic-jenkins.westus2.cloudapp.azure.com/job/mellanox/job/buildimage-mlnx-201803/badge/icon?subject=Mellanox)](https://sonic-jenkins.westus2.cloudapp.azure.com/job/mellanox/job/buildimage-mlnx-201803/)\n\n# sonic-buildimage\n\n## Build SONiC Switch Images\n\n# Description\n\nFollowing is the instruction on how to build an [(ONIE)](https://github.com/opencomputeproject/onie) compatible network operating system (NOS) installer image for network switches, and also how to build docker images running inside the NOS. Note that SONiC image are build per ASIC platform. Switches using the same ASIC platform share a common image. For a list of supported switches and ASIC, please refer to this [list](https://github.com/Azure/SONiC/wiki/Supported-Devices-and-Platforms)\n\n# Hardware\n\nAny server can be a build image server as long as it has:\n\n  * Multiple cores to increase build speed\n  * Plenty of RAM (less than 8 GiB is likely to cause issues)\n  * 300G of free disk space\n\nA good choice of OS for building SONiC is currently Ubuntu 20.04.\n\n## Prerequisites\n\n * Install pip and jinja in host build machine, execute below commands if j2/j2cli is not available:\n\n```\nsudo apt install -y python3-pip\nsudo pip3 install j2cli\n```\n\n * Install [Docker](https://docs.docker.com/engine/install/) and configure your system to allow running the 'docker' command without 'sudo':\n    * Add current user to the docker group: `sudo gpasswd -a ${USER} docker`\n    * Log out and log back in so that your group membership is re-evaluated\n\n## Clone or fetch the code repository with all git submodules\nTo clone the code repository recursively, assuming git version 1.9 or newer:\n\n    git clone https://github.com/Azure/sonic-buildimage.git\n\n## Usage\n\nTo build SONiC installer image and docker images, run the following commands:\n\n    # Ensure the 'overlay' module is loaded on your development system\n    sudo modprobe overlay\n\n    # Enter the source directory\n    cd sonic-buildimage\n\n    # (Optional) Checkout a specific branch. By default, it uses master branch. For example, to checkout the branch 201911, use \"git checkout 201911\"\n    git checkout [branch_name]\n\n    # Execute make init once after cloning the repo, or after fetching remote repo with submodule updates\n    make init\n\n    # Execute make configure once to configure ASIC\n    make configure PLATFORM=[ASIC_VENDOR]\n\n    # Build SONiC image with 4 jobs in parallel.\n    # Note: You can set this higher, but 4 is a good number for most cases\n    # and is well-tested.\n    make SONIC_BUILD_JOBS=4 all\n\n The supported ASIC vendors are:\n\n- PLATFORM=broadcom\n- PLATFORM=marvell\n- PLATFORM=mellanox\n- PLATFORM=cavium\n- PLATFORM=centec\n- PLATFORM=nephos\n- PLATFORM=innovium\n- PLATFORM=p4\n- PLATFORM=vs\n\n## Usage for ARM Architecture\nTo build Arm32 bit for (ARMHF) platform\n    ARM build has dependency in docker version 18,\n    if docker version is 19, downgrade to 18 as below\n    sudo apt-get install --allow-downgrades  -y docker-ce=5:18.09.0~3-0~ubuntu-xenial\n    sudo apt-get install --allow-downgrades  -y docker-ce-cli=5:18.09.0~3-0~ubuntu-xenial\n\n    # Execute make configure once to configure ASIC and ARCH\n\n    make configure PLATFORM=[ASIC_VENDOR] PLATFORM_ARCH=armhf\n\n    make target/sonic-[ASIC_VENDER]-armhf.bin\n\n    # example:\n\n    make configure PLATFORM=marvell-armhf PLATFORM_ARCH=armhf\n\n    make target/sonic-marvell-armhf.bin\n\n\n\nTo build Arm64 bit for platform\n\n    # Execute make configure once to configure ASIC and ARCH\n\n    make configure PLATFORM=[ASIC_VENDOR] PLATFORM_ARCH=arm64\n\n    # example:\n\n    make configure PLATFORM=marvell-arm64 PLATFORM_ARCH=arm64\n\n\n **NOTE**:\n\n- Recommend reserving at least 100G free space to build one platform with a single job. The build process will use more disk if you are setting `SONIC_BUILD_JOBS` to more than 1.\n- If Docker's workspace folder, `/var/lib/docker`, resides on a partition without sufficient free space, you may encounter an error like the following during a Docker container build job:\n\n    `/usr/bin/tar: /path/to/sonic-buildimage/<some_file>: Cannot write: No space left on device`\n\n    The solution is to [move the directory](https://linuxconfig.org/how-to-move-docker-s-default-var-lib-docker-to-another-directory-on-ubuntu-debian-linux) to a partition with more free space.\n- Use `http_proxy=[your_proxy] https_proxy=[your_proxy] no_proxy=[your_no_proxy] make` to enable http(s) proxy in the build process.\n- Add your user account to `docker` group and use your user account to make. `root` or `sudo` are not supported.\n\nThe SONiC installer contains all docker images needed. SONiC uses one image for all devices of a same ASIC vendor.\n\nFor Broadcom ASIC, we build ONIE and EOS image. EOS image is used for Arista devices, ONIE image is used for all other Broadcom ASIC based devices.\n\n    make configure PLATFORM=broadcom\n    # build debian stretch required targets\n    BLDENV=stretch make stretch\n    # build ONIE image\n    make target/sonic-broadcom.bin\n    # build EOS image\n    make target/sonic-aboot-broadcom.swi\n\nYou may find the rules/config file useful. It contains configuration options for the build process, like adding more verbosity or showing dependencies, username and password for base image etc.\n\nEvery docker image is built and saved to target/ directory.\nSo, for instance, to build only docker-database, execute:\n\n    make target/docker-database.gz\n\nSame goes for debian packages, which are under target/debs/:\n\n    make target/debs/swss_1.0.0_amd64.deb\n\nEvery target has a clean target, so in order to clean swss, execute:\n\n    make target/debs/swss_1.0.0_amd64.deb-clean\n\nIt is recommended to use clean targets to clean all packages that are built together, like dev packages for instance. In order to be more familiar with build process and make some changes to it, it is recommended to read this short [Documentation](README.buildsystem.md).\n\n## Build debug dockers and debug SONiC installer image:\nSONiC build system supports building dockers and ONIE-image with debug tools and debug symbols, to help with live & core debugging. For details refer to [(SONiC Buildimage Guide)](https://github.com/Azure/sonic-buildimage/blob/master/README.buildsystem.md).\n\n## SAI Version\nPlease refer to [SONiC roadmap](https://github.com/Azure/SONiC/wiki/Sonic-Roadmap-Planning) on the SAI version for each SONiC release.\n\n## Notes:\n- If you are running make for the first time, a sonic-slave-${USER} docker image will be built automatically.\nThis may take a while, but it is a one-time action, so please be patient.\n\n- The root user account is disabled. However, the created user can `sudo`.\n\n- The target directory is `./target`, containing the NOS installer image and docker images.\n  - sonic-generic.bin: SONiC switch installer image (ONIE compatible)\n  - sonic-aboot.bin: SONiC switch installer image (Aboot compatible)\n  - docker-base.gz: base docker image where other docker images are built from, only used in build process (gzip tar archive)\n  - docker-database.gz: docker image for in-memory key-value store, used as inter-process communication (gzip tar archive)\n  - docker-fpm.gz: docker image for quagga with fpm module enabled (gzip tar archive)\n  - docker-orchagent.gz: docker image for SWitch State Service (SWSS) (gzip tar archive)\n  - docker-syncd-brcm.gz: docker image for the daemon to sync database and Broadcom switch ASIC (gzip tar archive)\n  - docker-syncd-cavm.gz: docker image for the daemon to sync database and Cavium switch ASIC (gzip tar archive)\n  - docker-syncd-mlnx.gz: docker image for the daemon to sync database and Mellanox switch ASIC (gzip tar archive)\n  - docker-syncd-nephos.gz: docker image for the daemon to sync database and Nephos switch ASIC (gzip tar archive)\n  - docker-syncd-invm.gz: docker image for the daemon to sync database and Innovium switch ASIC (gzip tar archive)\n  - docker-sonic-p4.gz: docker image for all-in-one for p4 software switch (gzip tar archive)\n  - docker-sonic-vs.gz: docker image for all-in-one for software virtual switch (gzip tar archive)\n  - docker-sonic-mgmt.gz: docker image for [managing, configuring and monitoring SONiC](https://github.com/Azure/sonic-mgmt) (gzip tar archive)\n\n## Contribution Guide\n\nAll contributors must sign a contribution license agreement before contributions can be accepted.  Contact [sonic-cla-agreements@microsoft.com](mailto:sonic-cla-agreements@microsoft.com).\n\n## GitHub Workflow\n\nWe're following basic GitHub Flow. If you have no idea what we're talking about, check out [GitHub's official guide](https://guides.github.com/introduction/flow/). Note that merge is only performed by the repository maintainer.\n\nGuide for performing commits:\n\n* Isolate each commit to one component/bugfix/issue/feature\n* Use a standard commit message format:\n\n>     [component/folder touched]: Description intent of your changes\n>\n>     [List of changes]\n>\n> \t  Signed-off-by: Your Name your@email.com\n\nFor example:\n\n>     swss-common: Stabilize the ConsumerTable\n>\n>     * Fixing autoreconf\n>     * Fixing unit-tests by adding checkers and initialize the DB before start\n>     * Adding the ability to select from multiple channels\n>     * Health-Monitor - The idea of the patch is that if something went wrong with the notification channel,\n>       we will have the option to know about it (Query the LLEN table length).\n>\n>       Signed-off-by: user@dev.null\n\n\n* Each developer should fork this repository and [add the team as a Contributor](https://help.github.com/articles/adding-collaborators-to-a-personal-repository)\n* Push your changes to your private fork and do \"pull-request\" to this repository\n* Use a pull request to do code review\n* Use issues to keep track of what is going on\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "buildimage",
        "devops",
        "sonic",
        "sonic buildimage",
        "buildimage sonic",
        "devops cicd"
      ],
      "category": "devops-and-cicd"
    },
    "Bigsy--shadow-cljs-mcp": {
      "owner": "Bigsy",
      "name": "shadow-cljs-mcp",
      "url": "https://github.com/Bigsy/shadow-cljs-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Bigsy.webp",
      "description": "Monitors shadow-cljs builds and provides real-time updates on build status, errors, and metrics after editing ClojureScript files. Integrates seamlessly with development environments for enhanced workflow efficiency.",
      "stars": 1,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-04-15T19:46:36Z",
      "readme_content": "# shadow-cljs-mcp\n\n[![npm version](https://badge.fury.io/js/shadow-cljs-mcp.svg)](https://badge.fury.io/js/shadow-cljs-mcp)\n\nA Model Context Protocol (MCP) server that monitors shadow-cljs builds and provides real-time build status updates.\n\n## Installation\n\nAdd the following to your Cline/Cursor/Claude whatever settings:\n```json\n{\n  \"mcpServers\": {\n    \"shadow-cljs-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"shadow-cljs-mcp\"\n      ],\n      \"disabled\": false,\n      \"autoApprove\": [],\n      \"timeout\": 60\n    }\n  }\n}\n```\nWith optional server location\n```json\n{\n  \"mcpServers\": {\n    \"shadow-cljs-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"shadow-cljs-mcp\",\n        \"--host\",\n        \"localhost\",\n        \"--port\",\n        \"9630\"\n      ],\n      \"disabled\": false,\n      \"autoApprove\": [],\n      \"timeout\": 60\n    }\n  }\n}\n```\n\nThe `--host` and `--port` arguments are optional. If not provided, the server will default to connecting to `localhost:9630`.\n\n## Overview\n\nThis MCP server connects to a running shadow-cljs instance and tracks build progress, failures, and completions. It provides an MCP tool that LLMs can use to verify build status after making changes to ClojureScript files.\n\n## LLM Integration\n\n### Adding to Your LLM Notes\n\nAdd the following to your LLM's notes file (e.g., CLAUDE.md, cursorrules.md):\n\n```markdown\nAfter any edits to ClojureScript files, use the shadow-cljs-mcp server's get_last_build_status tool to verify the build succeeded:\n\n<use_mcp_tool>\n<server_name>shadow-cljs-mcp</server_name>\n<tool_name>get_last_build_status</tool_name>\n<arguments>\n{}\n</arguments>\n</use_mcp_tool>\n\nThis will show:\n- Build status (completed/failed)\n- Which files were compiled\n- Any errors or warnings\n- Build duration and metrics\n```\n\n## Example Tool Response\n\nSuccessful build:\n```json\n{\n  \"status\": \"completed\",\n  \"resources\": 317,\n  \"compiled\": 1,\n  \"warnings\": 0,\n  \"duration\": 0.609,\n  \"compiledFiles\": [\n    \"path/to/your/file.cljs (505ms)\"\n  ]\n}\n```\n\nFailed build:\n```json\n{\n  \"status\": \"failed\",\n  \"message\": \"Build failed\",\n  \"details\": {\n    // Error information\n  }\n}\n```\n\n## Usage Notes\n\n- LLMs should call get_last_build_status after each ClojureScript file edit\n- Compilation errors will be shown in detail for easy debugging\n- Successful builds show which files were compiled and how long they took\n- Make sure shadow-cljs is running before starting this server\n\n## Requirements\n- Running shadow-cljs instance (defaults to localhost:9630 if not configured otherwise)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "clojurescript",
        "cljs",
        "devops",
        "shadow cljs",
        "cljs builds",
        "devops cicd"
      ],
      "category": "devops-and-cicd"
    },
    "CircleCI-Public--mcp-server-circleci": {
      "owner": "CircleCI-Public",
      "name": "mcp-server-circleci",
      "url": "https://github.com/CircleCI-Public/mcp-server-circleci",
      "imageUrl": "/freedevtools/mcp/pfp/CircleCI-Public.webp",
      "description": "Facilitates natural language interactions with CircleCI functionality, enabling retrieval of build logs, analysis of failures, and management of CI/CD processes directly from IDEs. Integrates CircleCI commands into the development workflow for enhanced efficiency.",
      "stars": 65,
      "forks": 37,
      "license": "Other",
      "language": "TypeScript",
      "updated_at": "2025-10-01T15:32:33Z",
      "readme_content": "# CircleCI MCP Server\n\n[![GitHub](https://img.shields.io/github/license/CircleCI-Public/mcp-server-circleci)](https://github.com/CircleCI-Public/mcp-server-circleci/blob/main/LICENSE)\n[![CircleCI](https://dl.circleci.com/status-badge/img/gh/CircleCI-Public/mcp-server-circleci/tree/main.svg?style=svg)](https://dl.circleci.com/status-badge/redirect/gh/CircleCI-Public/mcp-server-circleci/tree/main)\n[![npm](https://img.shields.io/npm/v/@circleci/mcp-server-circleci?logo=npm)](https://www.npmjs.com/package/@circleci/mcp-server-circleci)\n\nModel Context Protocol (MCP) is a [new, standardized protocol](https://modelcontextprotocol.io/introduction) for managing context between large language models (LLMs) and external systems. In this repository, we provide an MCP Server for [CircleCI](https://circleci.com).\n\nThis lets you use Cursor IDE, Windsurf, Copilot, or any MCP supported Client, to use natural language to accomplish things with CircleCI, e.g.:\n\n- `Find the latest failed pipeline on my branch and get logs`\n  https://github.com/CircleCI-Public/mcp-server-circleci/wiki#circleci-mcp-server-with-cursor-ide\n\nhttps://github.com/user-attachments/assets/3c765985-8827-442a-a8dc-5069e01edb74\n\n## Requirements\n\n- CircleCI Personal API Token - you can generate one through the CircleCI. [Learn more](https://circleci.com/docs/managing-api-tokens/) or [click here](https://app.circleci.com/settings/user/tokens) for quick access.\n\nFor NPX installation:\n\n- pnpm package manager - [Learn more](https://pnpm.io/installation)\n- Node.js >= v18.0.0\n\nFor Docker installation:\n\n- Docker - [Learn more](https://docs.docker.com/get-docker/)\n\n## Installation\n\n### Cursor\n\n#### Using NPX in a local MCP Server\n\nAdd the following to your cursor MCP config:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@circleci/mcp-server-circleci@latest\"],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"your-circleci-token\",\n        \"CIRCLECI_BASE_URL\": \"https://circleci.com\" // Optional - required for on-prem customers only\n      }\n    }\n  }\n}\n```\n\n\n#### Using Docker in a local MCP Server\n\nAdd the following to your cursor MCP config:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci-mcp-server\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\",\n        \"CIRCLECI_TOKEN\",\n        \"-e\",\n        \"CIRCLECI_BASE_URL\",\n        \"circleci:mcp-server-circleci\"\n      ],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"your-circleci-token\",\n        \"CIRCLECI_BASE_URL\": \"https://circleci.com\" // Optional - required for on-prem customers only\n      }\n    }\n  }\n}\n```\n\n#### Using a Self-Managed Remote MCP Server\n\nAdd the following to your cursor MCP config:\n\n```json\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"circleci-token\", \n      \"description\": \"CircleCI API Token\",\n      \"password\": true\n    }\n  ],\n  \"servers\": {\n    \"circleci-mcp-server-remote\": {\n      \"url\": \"http://your-circleci-remote-mcp-server-endpoint:8000/mcp\"\n    }\n  }\n}\n```\n\n### VS Code\n\n#### Using NPX in a local MCP Server\n\nTo install CircleCI MCP Server for VS Code in `.vscode/mcp.json`:\n\n```json\n{\n  // 💡 Inputs are prompted on first server start, then stored securely by VS Code.\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"circleci-token\",\n      \"description\": \"CircleCI API Token\",\n      \"password\": true\n    },\n    {\n      \"type\": \"promptString\",\n      \"id\": \"circleci-base-url\",\n      \"description\": \"CircleCI Base URL\",\n      \"default\": \"https://circleci.com\"\n    }\n  ],\n  \"servers\": {\n    // https://github.com/ppl-ai/modelcontextprotocol/\n    \"circleci-mcp-server\": {\n      \"type\": \"stdio\",\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@circleci/mcp-server-circleci@latest\"],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"${input:circleci-token}\",\n        \"CIRCLECI_BASE_URL\": \"${input:circleci-base-url}\"\n      }\n    }\n  }\n}\n```\n\n#### Using Docker in a local MCP Server\n\nTo install CircleCI MCP Server for VS Code in `.vscode/mcp.json` using Docker:\n\n```json\n{\n  // 💡 Inputs are prompted on first server start, then stored securely by VS Code.\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"circleci-token\",\n      \"description\": \"CircleCI API Token\",\n      \"password\": true\n    },\n    {\n      \"type\": \"promptString\",\n      \"id\": \"circleci-base-url\",\n      \"description\": \"CircleCI Base URL\",\n      \"default\": \"https://circleci.com\"\n    }\n  ],\n  \"servers\": {\n    // https://github.com/ppl-ai/modelcontextprotocol/\n    \"circleci-mcp-server\": {\n      \"type\": \"stdio\",\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\",\n        \"CIRCLECI_TOKEN\",\n        \"-e\",\n        \"CIRCLECI_BASE_URL\",\n        \"circleci:mcp-server-circleci\"\n      ],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"${input:circleci-token}\",\n        \"CIRCLECI_BASE_URL\": \"${input:circleci-base-url}\"\n      }\n    }\n  }\n}\n```\n\n#### Using a Self-Managed Remote MCP Server\n\nTo install CircleCI MCP Server for VS Code in `.vscode/mcp.json` using a self-managed remote MCP server:\n\n```json\n{\n  \"servers\": {\n    \"circleci-mcp-server-remote\": {\n      \"type\": \"sse\",\n      \"url\": \"http://your-circleci-remote-mcp-server-endpoint:8000/mcp\"\n    }\n  }\n}\n```\n\n### Claude Desktop\n\n#### Using NPX in a local MCP Server\n\nAdd the following to your claude_desktop_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@circleci/mcp-server-circleci@latest\"],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"your-circleci-token\",\n        \"CIRCLECI_BASE_URL\": \"https://circleci.com\" // Optional - required for on-prem customers only\n      }\n    }\n  }\n}\n```\nTo locate this file:\n\nmacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n\nWindows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n[Claude Desktop setup](https://modelcontextprotocol.io/quickstart/user)\n\n\n#### Using Docker in a local MCP Server\n\nAdd the following to your claude_desktop_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci-mcp-server\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\",\n        \"CIRCLECI_TOKEN\",\n        \"-e\",\n        \"CIRCLECI_BASE_URL\",\n        \"circleci:mcp-server-circleci\"\n      ],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"your-circleci-token\",\n        \"CIRCLECI_BASE_URL\": \"https://circleci.com\" // Optional - required for on-prem customers only\n      }\n    }\n  }\n}\n```\n\nTo find/create this file, first open your claude desktop settings. Then click on \"Developer\" in the left-hand bar of the Settings pane, and then click on \"Edit Config\"\n\nThis will create a configuration file at:\n\n- macOS: ~/Library/Application Support/Claude/claude_desktop_config.json\n- Windows: %APPDATA%\\Claude\\claude_desktop_config.json\n\nSee the guide below for more information on using MCP servers with Claude Desktop:\nhttps://modelcontextprotocol.io/quickstart/user\n\n#### Using a Self-Managed Remote MCP Server\n\nCreate a wrapper script first\n\nCreate a script file such as 'circleci-remote-mcp.sh':\n\n```bash\n#!/bin/bash\nexport CIRCLECI_TOKEN=\"your-circleci-token\"\nnpx mcp-remote http://your-circleci-remote-mcp-server-endpoint:8000/mcp --allow-http \n```\n\nMake it executable:\n\n```bash\nchmod +x circleci-remote-mcp.sh\n```\n\nThen add the following to your claude_desktop_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci-remote-mcp-server\": {\n      \"command\": \"/full/path/to/circleci-remote-mcp.sh\"\n    }\n  }\n}\n```\n\nTo find/create this file, first open your Claude Desktop settings. Then click on \"Developer\" in the left-hand bar of the Settings pane, and then click on \"Edit Config\"\n\nThis will create a configuration file at:\n\n- macOS: ~/Library/Application Support/Claude/claude_desktop_config.json\n- Windows: %APPDATA%\\Claude\\claude_desktop_config.json\n\nSee the guide below for more information on using MCP servers with Claude Desktop:\nhttps://modelcontextprotocol.io/quickstart/user\n\n### Claude Code\n\n#### Using NPX in a local MCP Server\n\nAfter installing Claude Code, run the following command:\n\n```bash\nclaude mcp add circleci-mcp-server -e CIRCLECI_TOKEN=your-circleci-token -- npx -y @circleci/mcp-server-circleci@latest\n```\n\n#### Using Docker in a local MCP Server\n\nAfter installing Claude Code, run the following command:\n\n```bash\nclaude mcp add circleci-mcp-server -e CIRCLECI_TOKEN=your-circleci-token -e CIRCLECI_BASE_URL=https://circleci.com -- docker run --rm -i -e CIRCLECI_TOKEN -e CIRCLECI_BASE_URL circleci:mcp-server-circleci\n```\n\nSee the guide below for more information on using MCP servers with Claude Code:\nhttps://docs.anthropic.com/en/docs/agents-and-tools/claude-code/tutorials#set-up-model-context-protocol-mcp\n\n#### Using Self-Managed Remote MCP Server\n\nAfter installing Claude Code, run the following command:\n\n```bash\nclaude mcp add circleci-mcp-server -e CIRCLECI_TOKEN=your-circleci-token -- npx mcp-remote http://your-circleci-remote-mcp-server-endpoint:8000/mcp --allow-http\n```\n\nSee the guide below for more information on using MCP servers with Claude Code:\nhttps://docs.anthropic.com/en/docs/agents-and-tools/claude-code/tutorials#set-up-model-context-protocol-mcp\n\n### Windsurf\n\n#### Using NPX in a local MCP Server\n\nAdd the following to your windsurf mcp_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@circleci/mcp-server-circleci@latest\"],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"your-circleci-token\",\n        \"CIRCLECI_BASE_URL\": \"https://circleci.com\" // Optional - required for on-prem customers only\n      }\n    }\n  }\n}\n```\n\n#### Using Docker in a local MCP Server\n\nAdd the following to your windsurf mcp_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci-mcp-server\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\",\n        \"CIRCLECI_TOKEN\",\n        \"-e\",\n        \"CIRCLECI_BASE_URL\",\n        \"circleci:mcp-server-circleci\"\n      ],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"your-circleci-token\",\n        \"CIRCLECI_BASE_URL\": \"https://circleci.com\" // Optional - required for on-prem customers only\n      }\n    }\n  }\n}\n```\n\n#### Using Self-Managed Remote MCP Server\n\nAdd the following to your windsurf mcp_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"http://your-circleci-remote-mcp-server-endpoint:8000/mcp\",\n        \"--allow-http\"\n      ],\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n  }\n}\n```\n\nSee the guide below for more information on using MCP servers with windsurf:\nhttps://docs.windsurf.com/windsurf/mcp\n\n### Installing via Smithery\n\nTo install CircleCI MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@CircleCI-Public/mcp-server-circleci):\n\n```bash\nnpx -y @smithery/cli install @CircleCI-Public/mcp-server-circleci --client claude\n```\n\n### Amazon Q Developer CLi\n\nMCP client configuration in Amazon Q Developer is stored in JSON format, in a file named mcp.json.\n\nAmazon Q Developer CLI supports two levels of MCP configuration:\n\nGlobal Configuration: ~/.aws/amazonq/mcp.json - Applies to all workspaces\n\nWorkspace Configuration: .amazonq/mcp.json - Specific to the current workspace\n\nBoth files are optional; neither, one, or both can exist. If both files exist, Amazon Q Developer reads MCP configuration from both and combines them, taking the union of their contents. If there is a conflict (i.e., a server defined in the global config is also present in the workspace config), a warning is displayed and only the server entry in the workspace config is used.\n\n#### Using NPX in a local MCP Server\n\nEdit your global configuration file ~/.aws/amazonq/mcp.json or create a new one in the current workspace .amazonq/mcp.json with the following content:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci-local\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@circleci/mcp-server-circleci@latest\"\n      ],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"YOUR_CIRCLECI_TOKEN\",\n        \"CIRCLECI_BASE_URL\": \"https://circleci.com\" // Optional - required for on-prem customers only\n      },\n      \"timeout\": 60000\n    }\n  }\n}\n```\n\n#### Using a Self-Managed Remote MCP Server\n\nCreate a wrapper script first\n\nCreate a script file such as 'circleci-remote-mcp.sh':\n\n```bash\n#!/bin/bash\nexport CIRCLECI_TOKEN=\"your-circleci-token\"\nnpx mcp-remote http://your-circleci-remote-mcp-server-endpoint:8000/mcp --allow-http\n```\n\nMake it executable:\n\n```bash\nchmod +x circleci-remote-mcp.sh\n```\n\nThen add it:\n\n```bash\nq mcp add --name circleci --command \"/full/path/to/circleci-remote-mcp.sh\"\n```\n\n### Amazon Q Developer in the IDE\n\n#### Using NPX in a local MCP Server\n\nEdit your global configuration file ~/.aws/amazonq/mcp.json or create a new one in the current workspace .amazonq/mcp.json with the following content:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci-local\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@circleci/mcp-server-circleci@latest\"\n      ],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"YOUR_CIRCLECI_TOKEN\",\n        \"CIRCLECI_BASE_URL\": \"https://circleci.com\" // Optional - required for on-prem customers only\n      },\n      \"timeout\": 60000\n    }\n  }\n}\n```\n\n#### Using a Self-Managed Remote MCP Server\n\nCreate a wrapper script first\n\nCreate a script file such as 'circleci-remote-mcp.sh':\n\n```bash\n#!/bin/bash\nnpx mcp-remote http://your-circleci-remote-mcp-server-endpoint:8000/mcp --allow-http\n```\n\nMake it executable:\n\n```bash\nchmod +x circleci-remote-mcp.sh\n```\n\nThen add it to the Q Developer in your IDE:\n\nAccess the MCP configuration UI (https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/mcp-ide.html#mcp-ide-configuration-access-ui).\n\nChoose the plus (+) symbol.\n\nSelect the scope: global or local.\n\nIf you select global scope, the MCP server configuration is stored in ~/.aws/amazonq/mcp.json and available across all your projects. If you select local scope, the configuration is stored in .amazonq/mcp.json within your current project.\n\nIn the Name field, enter the name of the CircleCI remote MCP server (e.g. circleci-remote-mcp).\n\nSelect the transport protocol (stdio).\n\nIn the Command field, enter the shell command created previously that the MCP server will run when it initializes (e.g. /full/path/to/circleci-remote-mcp.sh).\n\nClick the Save button.\n\n# Features\n\n## Supported Tools\n\n- `get_build_failure_logs`\n\n  Retrieves detailed failure logs from CircleCI builds. This tool can be used in three ways:\n\n  1. Using Project Slug and Branch (Recommended Workflow):\n\n     - First, list your available projects:\n       - Use the list_followed_projects tool to get your projects\n       - Example: \"List my CircleCI projects\"\n       - Then choose the project, which has a projectSlug associated with it\n       - Example: \"Lets use my-project\"\n     - Then ask to retrieve the build failure logs for a specific branch:\n       - Example: \"Get build failures for my-project on the main branch\"\n\n  2. Using CircleCI URLs:\n\n     - Provide a failed job URL or pipeline URL directly\n     - Example: \"Get logs from https://app.circleci.com/pipelines/github/org/repo/123\"\n\n  3. Using Local Project Context:\n     - Works from your local workspace by providing:\n       - Workspace root path\n       - Git remote URL\n       - Branch name\n     - Example: \"Find the latest failed pipeline on my current branch\"\n\n  The tool returns formatted logs including:\n\n  - Job names\n  - Step-by-step execution details\n  - Failure messages and context\n\n  This is particularly useful for:\n\n  - Debugging failed builds\n  - Analyzing test failures\n  - Investigating deployment issues\n  - Quick access to build logs without leaving your IDE\n\n- `find_flaky_tests`\n\n  Identifies flaky tests in your CircleCI project by analyzing test execution history. This leverages the flaky test detection feature described here: https://circleci.com/blog/introducing-test-insights-with-flaky-test-detection/#flaky-test-detection\n\n  This tool can be used in three ways:\n\n  1. Using Project Slug (Recommended Workflow):\n\n     - First, list your available projects:\n       - Use the list_followed_projects tool to get your projects\n       - Example: \"List my CircleCI projects\"\n       - Then choose the project, which has a projectSlug associated with it\n       - Example: \"Lets use my-project\"\n     - Then ask to retrieve the flaky tests:\n       - Example: \"Get flaky tests for my-project\"\n\n  2. Using CircleCI Project URL:\n\n     - Provide the project URL directly from CircleCI\n     - Example: \"Find flaky tests in https://app.circleci.com/pipelines/github/org/repo\"\n\n  3. Using Local Project Context:\n     - Works from your local workspace by providing:\n       - Workspace root path\n       - Git remote URL\n     - Example: \"Find flaky tests in my current project\"\n\n  The tool can be used in two ways:\n  1. Using text output mode (default):\n     - This will return the flaky tests and their details in a text format\n  2. Using file output mode: (requires the `FILE_OUTPUT_DIRECTORY` environment variable to be set)\n     - This will create a directory with the flaky tests and their details\n\n  The tool returns detailed information about flaky tests, including:\n\n  - Test names and file locations\n  - Failure messages and contexts\n\n  This helps you:\n\n  - Identify unreliable tests in your test suite\n  - Get detailed context about test failures\n  - Make data-driven decisions about test improvements\n\n- `get_latest_pipeline_status`\n\n  Retrieves the status of the latest pipeline for a given branch. This tool can be used in three ways:\n\n  1. Using Project Slug and Branch (Recommended Workflow):\n\n     - First, list your available projects:\n       - Use the list_followed_projects tool to get your projects\n       - Example: \"List my CircleCI projects\"\n       - Then choose the project, which has a projectSlug associated with it\n       - Example: \"Lets use my-project\"\n     - Then ask to retrieve the latest pipeline status for a specific branch:\n       - Example: \"Get the status of the latest pipeline for my-project on the main branch\"\n\n  2. Using CircleCI Project URL:\n\n     - Provide the project URL directly from CircleCI\n     - Example: \"Get the status of the latest pipeline for https://app.circleci.com/pipelines/github/org/repo\"\n\n  3. Using Local Project Context:\n     - Works from your local workspace by providing:\n       - Workspace root path\n       - Git remote URL\n       - Branch name\n     - Example: \"Get the status of the latest pipeline for my current project\"\n\n  The tool returns a formatted status of the latest pipeline:\n\n  - Workflow names and their current status\n  - Duration of each workflow\n  - Creation and completion timestamps\n  - Overall pipeline health\n\n  Example output:\n\n  ```\n  ---\n  Workflow: build\n  Status: success\n  Duration: 5 minutes\n  Created: 4/20/2025, 10:15:30 AM\n  Stopped: 4/20/2025, 10:20:45 AM\n  ---\n  Workflow: test\n  Status: running\n  Duration: unknown\n  Created: 4/20/2025, 10:21:00 AM\n  Stopped: in progress\n  ```\n\n  This is particularly useful for:\n\n  - Checking the status of the latest pipeline\n  - Getting the status of the latest pipeline for a specific branch\n  - Quickly checking the status of the latest pipeline without leaving your IDE\n\n- `get_job_test_results`\n\n  Retrieves test metadata for CircleCI jobs, allowing you to analyze test results without leaving your IDE. This tool can be used in three ways:\n\n  1. Using Project Slug and Branch (Recommended Workflow):\n\n     - First, list your available projects:\n       - Use the list_followed_projects tool to get your projects\n       - Example: \"List my CircleCI projects\"\n       - Then choose the project, which has a projectSlug associated with it\n       - Example: \"Lets use my-project\"\n     - Then ask to retrieve the test results for a specific branch:\n       - Example: \"Get test results for my-project on the main branch\"\n\n  2. Using CircleCI URL:\n\n     - Provide a CircleCI URL in any of these formats:\n       - Job URL: \"https://app.circleci.com/pipelines/github/org/repo/123/workflows/abc-def/jobs/789\"\n       - Workflow URL: \"https://app.circleci.com/pipelines/github/org/repo/123/workflows/abc-def\"\n       - Pipeline URL: \"https://app.circleci.com/pipelines/github/org/repo/123\"\n     - Example: \"Get test results for https://app.circleci.com/pipelines/github/org/repo/123/workflows/abc-def\"\n\n  3. Using Local Project Context:\n     - Works from your local workspace by providing:\n       - Workspace root path\n       - Git remote URL\n       - Branch name\n     - Example: \"Get test results for my current project on the main branch\"\n\n  The tool returns detailed test result information:\n\n  - Summary of all tests (total, successful, failed)\n  - Detailed information about failed tests including:\n    - Test name and class\n    - File location\n    - Error messages\n    - Runtime duration\n  - List of successful tests with timing information\n  - Filter by tests result\n\n  This is particularly useful for:\n\n  - Quickly analyzing test failures without visiting the CircleCI web UI\n  - Identifying patterns in test failures\n  - Finding slow tests that might need optimization\n  - Checking test coverage across your project\n  - Troubleshooting flaky tests\n\n  Note: The tool requires that test metadata is properly configured in your CircleCI config. For more information on setting up test metadata collection, see:\n  https://circleci.com/docs/collect-test-data/\n\n- `config_helper`\n\n  Assists with CircleCI configuration tasks by providing guidance and validation. This tool helps you:\n\n  1. Validate CircleCI Config:\n     - Checks your .circleci/config.yml for syntax and semantic errors\n     - Example: \"Validate my CircleCI config\"\n\n  The tool provides:\n\n  - Detailed validation results\n  - Configuration recommendations\n\n  This helps you:\n\n  - Catch configuration errors before pushing\n  - Learn CircleCI configuration best practices\n  - Troubleshoot configuration issues\n  - Implement CircleCI features correctly\n\n- `create_prompt_template`\n\n  Helps generate structured prompt templates for AI-enabled applications based on feature requirements. This tool:\n\n  1. Converts Feature Requirements to Structured Prompts:\n     - Transforms user requirements into optimized prompt templates\n     - Example: \"Create a prompt template for generating bedtime stories by age and topic\"\n\n  The tool provides:\n\n  - A structured prompt template\n  - A context schema defining required input parameters\n\n  This helps you:\n\n  - Create effective prompts for AI applications\n  - Standardize input parameters for consistent results\n  - Build robust AI-powered features\n\n- `recommend_prompt_template_tests`\n\n  Generates test cases for prompt templates to ensure they produce expected results. This tool:\n\n  1. Provides Test Cases for Prompt Templates:\n     - Creates diverse test scenarios based on your prompt template and context schema\n     - Example: \"Generate tests for my bedtime story prompt template\"\n\n  The tool provides:\n\n  - An array of recommended test cases\n  - Various parameter combinations to test template robustness\n\n  This helps you:\n\n  - Validate prompt template functionality\n  - Ensure consistent AI responses across inputs\n  - Identify edge cases and potential issues\n  - Improve overall AI application quality\n\n- `list_followed_projects`\n\n  Lists all projects that the user is following on CircleCI. This tool:\n\n  1. Retrieves and Displays Projects:\n     - Shows all projects the user has access to and is following\n     - Provides the project name and projectSlug for each entry\n     - Example: \"List my CircleCI projects\"\n\n  The tool returns a formatted list of projects, example output:\n\n  ```\n  Projects followed:\n  1. my-project (projectSlug: gh/organization/my-project)\n  2. another-project (projectSlug: gh/organization/another-project)\n  ```\n\n  This is particularly useful for:\n\n  - Identifying which CircleCI projects are available to you\n  - Obtaining the projectSlug needed for other CircleCI tools\n  - Selecting a project for subsequent operations\n\n  Note: The projectSlug (not the project name) is required for many other CircleCI tools, and will be used for those tool calls after a project is selected.\n\n- `run_pipeline`\n\n  Triggers a pipeline to run. This tool can be used in three ways:\n\n  1. Using Project Slug and Branch (Recommended Workflow):\n\n     - First, list your available projects:\n       - Use the list_followed_projects tool to get your projects\n       - Example: \"List my CircleCI projects\"\n       - Then choose the project, which has a projectSlug associated with it\n       - Example: \"Lets use my-project\"\n     - Then ask to run the pipeline for a specific branch:\n       - Example: \"Run the pipeline for my-project on the main branch\"\n\n  2. Using CircleCI URL:\n\n     - Provide a CircleCI URL in any of these formats:\n       - Job URL: \"https://app.circleci.com/pipelines/github/org/repo/123/workflows/abc-def/jobs/789\"\n       - Workflow URL: \"https://app.circleci.com/pipelines/github/org/repo/123/workflows/abc-def\"\n       - Pipeline URL: \"https://app.circleci.com/pipelines/github/org/repo/123\"\n       - Project URL with branch: \"https://app.circleci.com/projects/github/org/repo?branch=main\"\n     - Example: \"Run the pipeline for https://app.circleci.com/pipelines/github/org/repo/123/workflows/abc-def\"\n\n  3. Using Local Project Context:\n     - Works from your local workspace by providing:\n       - Workspace root path\n       - Git remote URL\n       - Branch name\n     - Example: \"Run the pipeline for my current project on the main branch\"\n\n  The tool returns a link to monitor the pipeline execution.\n\n  This is particularly useful for:\n\n  - Quickly running pipelines without visiting the CircleCI web UI\n  - Running pipelines from a specific branch\n\n- `run_rollback_pipeline`\n\n  This tool allows for triggering a rollback for a project.\n  It requires the following parameters;\n\n  - `project_id` - The ID of the CircleCI project (UUID)\n  - `environmentName` - The environment name\n  - `componentName` - The component name\n  - `currentVersion` - The current version\n  - `targetVersion` - The target version\n  - `namespace` - The namespace of the component\n  - `reason` - The reason for the rollback (optional)\n  - `parameters` - The extra parameters for the rollback pipeline (optional)\n\n  If not all the parameters are provided right away, the toll will make use of other tools to try and retrieve all the required info.\n  The rollback can be performed in two different way, depending on whether a rollback pipeline definition has been configured for the project:\n\n  - Pipeline Rollback: will trigger the rollback pipeline.\n  - Workflow Rerun: will trigger the rerun of a previous workflow.\n\n  A typical interaction with this tool will follow this pattern:\n\n  1. Project Selection - Retrieve list of followed projects and prompt user to select one\n  2. Environment Selection - List available environments and select target (auto-select if only one exists)\n  3. Component Selection - List available components and select target (auto-select if only one exists)\n  4. Version Selection - Display available versions, user selects non-live version for rollback\n  5. Rollback Mode Detection - Check if rollback pipeline is configured for the selected project\n  6. Execute Rollback - Two options available:\n    - Pipeline Rollback: Prompt for optional reason, execute rollback pipeline\n    - Workflow Rerun**: Rerun workflow using selected version's workflow ID\n  7. Confirmation - Summarize rollback request and confirm before execution\n\n- `rerun_workflow`\n\n  Reruns a workflow from its start or from the failed job.\n\n  The tool returns the ID of the newly-created workflow, and a link to monitor the new workflow.\n\n  This is particularly useful for:\n\n  - Quickly rerunning a workflow from its start or from the failed job without visiting the CircleCI web UI\n\n- `analyze_diff`\n\n  Analyzes git diffs against cursor rules to identify rule violations.\n\n  This tool can be used by providing:\n\n  1. Git Diff Content:\n\n     - Staged changes: `git diff --cached`\n     - Unstaged changes: `git diff`\n     - All changes: `git diff HEAD`\n     - Example: \"Analyze my staged changes against the cursor rules\"\n\n  2. Repository Rules:\n     - Rules from `.cursorrules` file in your repository root\n     - Rules from `.cursor/rules` directory\n     - Multiple rule files combined with `---` separator\n     - Example: \"Check my diff against the TypeScript coding standards\"\n\n  The tool provides:\n\n  - Detailed violation reports with confidence scores\n  - Specific explanations for each rule violation\n\n  Example usage scenarios:\n\n  - \"Analyze my staged changes for any rule violations\"\n  - \"Check my unstaged changes against rules\"\n\n  This is particularly useful for:\n\n  - Pre-commit code quality checks\n  - Ensuring consistency with team coding standards\n  - Catching rule violations before code review\n\n  The tool integrates with your existing cursor rules setup and provides immediate feedback on code quality, helping you catch issues early in the development process.\n\n- `list_component_versions`\n\n  Lists all versions for a specific CircleCI component in an environment. This tool retrieves version history including deployment status, commit information, and timestamps for a component.\n  The tool will prompt the user to select the component and environment from a list if not provided.\n\n  Example output:\n\n  ```\n  Versions for the component: {\n    \"items\": [\n      {\n        \"name\": \"v1.2.0\",\n        \"namespace\": \"production\",\n        \"environment_id\": \"env-456def\",\n        \"is_live\": true,\n        \"pipeline_id\": \"12345678-1234-1234-1234-123456789abc\",\n        \"workflow_id\": \"87654321-4321-4321-4321-cba987654321\",\n        \"job_id\": \"11111111-1111-1111-1111-111111111111\",\n        \"job_number\": 42,\n        \"last_deployed_at\": \"2023-01-01T00:00:00Z\"\n      },\n      {\n        \"name\": \"v1.1.0\",\n        \"namespace\": \"production\", \n        \"environment_id\": \"env-456def\",\n        \"is_live\": false,\n        \"pipeline_id\": \"22222222-2222-2222-2222-222222222222\",\n        \"workflow_id\": \"33333333-3333-3333-3333-333333333333\",\n        \"job_id\": \"44444444-4444-4444-4444-444444444444\",\n        \"job_number\": 38,\n        \"last_deployed_at\": \"2023-01-03T00:00:00Z\"\n      }\n    ]\n  }\n  ```\n\n  This is useful for:\n\n  - Identifying which versions were deployed for a component\n  - Finding the currently live version in an environment\n  - Selecting target versions for rollback operations\n  - Getting deployment details like pipeline, workflow, and job information\n  - Listing all environments\n  - Listing all components\n\n- `download_usage_api_data`\n\n  Downloads usage data from the CircleCI Usage API for a given organization. Accepts flexible, natural language date input (e.g., \"March 2025\" or \"last month\"). Cloud-only feature.\n\n  This tool can be used in one of two ways:\n\n  1) Start a new export job for a date range (max 32 days) by providing:\n  - orgId: Organization ID\n  - startDate: Start date (YYYY-MM-DD or natural language)\n  - endDate: End date (YYYY-MM-DD or natural language)\n  - outputDir: Directory to save the CSV file\n\n  2) Check/download an existing export job by providing:\n  - orgId: Organization ID\n  - jobId: Usage export job ID\n  - outputDir: Directory to save the CSV file\n\n  The tool provides:\n  - A csv containing the CircleCI Usage API data from the specified time frame\n\n  This is useful for:\n  - Downloading detailed CircleCI usage data for reporting or analysis\n  - Feeding usage data into the `find_underused_resource_classes` tool\n\n  Example usage scenarios:\n- Scenario 1:\n  1. \"Download usage data for org abc123 from June into ~/Downloads\"\n  2. \"Check status\"\n\n- Scenario 2:\n  1. \"Download usage data for org abc123 for last month to my Downloads folder\"\n  2. \"Check usage download status\"\n  3. \"Check status again\"\n\n- Scenario 3:\n  1. \"Check my usage export job usage-job-9f2d7c and download it if ready\"\n\n- `find_underused_resource_classes`\n\n  Analyzes a CircleCI usage data CSV file to find jobs/resource classes with average or max CPU/RAM usage below a given threshold (default 40%).\n\n  This tool can be used by providing:\n  - A csv containing CircleCI Usage API data, which can be obtained by using the `download_usage_api_data` tool.\n\n  The tool provides:\n  - A markdown list of all jobs that are below the threshold, delineated by project and workflow.\n\n  This is useful for:\n  - Finding jobs that are using less than half of the compute provided to them on average\n  - Generating a list of low hanging cost optimizations\n\n  Example usage scenarios:\n  - Scenario 1:\n    1. \"Find underused resource classes in the file you just downloaded\"\n  - Scenario 2:\n    1. \"Find underused resource classes in ~/Downloads/usage-data-2025-06-01_2025-06-30.csv\"\n  - Scenario 3:\n    1. \"Analyze /Users/you/Projects/acme/usage-data-job-9f2d7c.csv with threshold 30\"\n\n## Troubleshooting\n\n### Quick Fixes\n\n**Most Common Issues:**\n\n1. **Clear package caches:**\n   ```bash\n   npx clear-npx-cache\n   npm cache clean --force\n   ```\n\n2. **Force latest version:** Add `@latest` to your config:\n   ```json\n   \"args\": [\"-y\", \"@circleci/mcp-server-circleci@latest\"]\n   ```\n\n3. **Restart your IDE completely** (not just reload window)\n\n## Authentication Issues\n\n* **Invalid token errors:** Verify your `CIRCLECI_TOKEN` in Personal API Tokens\n* **Permission errors:** Ensure token has read access to your projects\n* **Environment variables not loading:** Test with `echo $CIRCLECI_TOKEN` (Mac/Linux) or `echo %CIRCLECI_TOKEN%` (Windows)\n\n## Connection and Network Issues\n\n* **Base URL:** Confirm `CIRCLECI_BASE_URL` is `https://circleci.com`\n* **Corporate networks:** Configure npm proxy settings if behind firewall\n* **Firewall blocking:** Check if security software blocks package downloads\n\n## System Requirements\n\n* **Node.js version:** Ensure ≥ 18.0.0 with `node --version`\n* **Update Node.js:** Consider latest LTS if experiencing compatibility issues\n* **Package manager:** Verify npm/pnpm is working: `npm --version`\n\n## IDE-Specific Issues\n\n* **Config file location:** Double-check path for your OS\n* **Syntax errors:** Validate JSON syntax in config file\n* **Console logs:** Check IDE developer console for specific errors\n* **Try different IDE:** Test config in another supported editor to isolate issue\n\n## Process Issues\n\n* **Hanging processes:** Kill existing MCP processes:\n  ```bash\n  # Mac/Linux: \n  pkill -f \"mcp-server-circleci\"\n  \n  # Windows: \n  taskkill /f /im node.exe\n\n* **Port conflicts:** Restart IDE if connection seems blocked\n\n## Advanced Debugging\n\n* **Test package directly:** `npx @circleci/mcp-server-circleci@latest --help`\n* **Verbose logging:** `DEBUG=* npx @circleci/mcp-server-circleci@latest`\n* **Docker fallback:** Try Docker installation if npx fails consistently\n\n## Still Need Help?\n\n1. Check GitHub issues for similar problems\n2. Include your OS, Node version, and IDE when reporting issues\n3. Share relevant error messages from IDE console\n\n# Development\n\n## Getting Started\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/CircleCI-Public/mcp-server-circleci.git\n   cd mcp-server-circleci\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   pnpm install\n   ```\n\n3. Build the project:\n   ```bash\n   pnpm build\n   ```\n\n## Building Docker Container\n\nYou can build the Docker container locally using:\n\n```bash\ndocker build -t circleci:mcp-server-circleci .\n```\n\nThis will create a Docker image tagged as `circleci:mcp-server-circleci` that you can use with any MCP client.\n\nTo run the container locally:\n\n```bash\ndocker run --rm -i -e CIRCLECI_TOKEN=your-circleci-token -e CIRCLECI_BASE_URL=https://circleci.com circleci:mcp-server-circleci\n```\n\nTo run the container as a self-managed remote MCP server you need to add the environment variable `start=remote` to the docker run command. You can also define the port to use with the environment variable `port=<port>` or else the default port `8000` will be used:\n\n```bash\ndocker run --rm -i -e CIRCLECI_TOKEN=your-circleci-token -e CIRCLECI_BASE_URL=https://circleci.com circleci:mcp-server-circleci -e start=remote -e port=8000\n```\n\n## Development with MCP Inspector\n\nThe easiest way to iterate on the MCP Server is using the MCP inspector. You can learn more about the MCP inspector at https://modelcontextprotocol.io/docs/tools/inspector\n\n1. Start the development server:\n\n   ```bash\n   pnpm watch # Keep this running in one terminal\n   ```\n\n2. In a separate terminal, launch the inspector:\n\n   ```bash\n   pnpm inspector\n   ```\n\n3. Configure the environment:\n   - Add your `CIRCLECI_TOKEN` to the Environment Variables section in the inspector UI\n   - The token needs read access to your CircleCI projects\n   - Optionally you can set your CircleCI Base URL. Defaults to `https//circleci.com`\n\n## Testing\n\n- Run the test suite:\n\n  ```bash\n  pnpm test\n  ```\n\n- Run tests in watch mode during development:\n  ```bash\n  pnpm test:watch\n  ```\n\nFor more detailed contribution guidelines, see [CONTRIBUTING.md](CONTRIBUTING.md)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "circleci",
        "devops",
        "cicd",
        "devops cicd",
        "circleci commands",
        "circleci functionality"
      ],
      "category": "devops-and-cicd"
    },
    "PatrickKalkman--encoding-devops": {
      "owner": "PatrickKalkman",
      "name": "encoding-devops",
      "url": "https://github.com/PatrickKalkman/encoding-devops",
      "imageUrl": "/freedevtools/mcp/pfp/PatrickKalkman.webp",
      "description": "Streamlines video encoding workflows using AI for real-time analysis, error translation, and automated email drafts for issue management. Provides continuous monitoring of encoding jobs to ensure efficient operations.",
      "stars": 1,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-03-24T23:26:21Z",
      "readme_content": "# 🎬 Encoding DevOps MCP Server: AI-Powered Video Encoding Assistant\n\n[![GitHub stars](https://img.shields.io/github/stars/PatrickKalkman/encoding-devops)](https://github.com/PatrickKalkman/encoding-devops/stargazers)\n[![GitHub contributors](https://img.shields.io/github/contributors/PatrickKalkman/encoding-devops)](https://github.com/PatrickKalkman/encoding-devops/graphs/contributors)\n[![GitHub last commit](https://img.shields.io/github/last-commit/PatrickKalkman/encoding-devops)](https://github.com/PatrickKalkman/encoding-devops)\n[![open issues](https://img.shields.io/github/issues/PatrickKalkman/encoding-devops)](https://github.com/PatrickKalkman/encoding-devops/issues)\n[![Python Version](https://img.shields.io/badge/python-3.9%2B-blue)](https://www.python.org/downloads/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://makeapullrequest.com)\n\nEver been woken up at 3 AM by a failed encoding job? Say goodbye to those late-night troubleshooting sessions! This Model Context Protocol (MCP) server connects Anthropic's Claude directly to your encoding workflow, making video encoding issues a breeze to handle.\n\n## ✨ What's Cool About This?\n\n- **Smart Error Translation**: Turns cryptic \"moov atom not found\" messages into plain English\n- **Real-time Analysis**: Connects directly to your encoding workflow and database\n- **Human-Friendly Responses**: Generates clear, actionable solutions for your team\n- **Auto-Email Draft**: Creates professional client communications with context\n- **Always On Guard**: Monitors your encoding jobs 24/7\n- **Keeps You in Control**: Suggests actions but lets you make the final call\n\n## 🚀 Getting Started\n\n### You'll Need\n\n- Python 3.11 or higher\n- Claude Desktop\n- Your encoding workflow API credentials\n- OMDB API key (optional, for movie metadata)\n\n### Quick Setup\n\n1. **Install the package using UV**:\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nuv pip install encoding-devops\n```\n\n2. **Set up your environment**:\n```bash\n# Copy the example config\ncp .env.example .env\n\n# Add your API keys\nnano .env\n```\n\n3. **Register with Claude Desktop**:\n```bash\nuv run mcp install ./src/encoding_devops/main.py\n```\n\n## 💡 How to Use It\n\n```bash\n# Start the MCP server\nuv run mcp dev ./src/encoding_devops/main.py\n\n# In Claude Desktop, you can now ask things like:\n\"What's wrong with job XYZ-123?\"\n\"Draft an email about the failed encoding job\"\n\"Check the encoding cluster status\"\n```\n\n## 🔧 Under the Hood\n\nThe MCP server uses three main components to help you:\n\n1. **Resources**: Email templates, error guides, and documentation\n2. **Tools**: Job status checks, log analysis, and email drafting\n3. **Prompts**: Instructions that help Claude understand encoding issues\n\n## 🤝 Want to Help?\n\nWe'd love your input! Here's how you can contribute:\n\n1. Fork it\n2. Create your feature branch (`git checkout -b feature/awesome-feature`)\n3. Commit your changes (`git commit -m 'Add awesome feature'`)\n4. Push to the branch (`git push origin feature/awesome-feature`)\n5. Open a Pull Request\n\n## 📋 Coming Soon\n\n- Integration with more encoding workflow systems\n- Advanced log analysis patterns\n- Automated health checks\n- Slack notifications\n- Custom email templates\n\n## 📝 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙌 Thanks To\n\n- Anthropic team for the MCP framework\n- All our contributors\n- The DevOps community for feedback and suggestions\n\n---\n\n💤 Built by a developer who wanted to sleep through the night. If this helps you too, give us a star!\n\n*Read the full story behind this project in my [Medium article about using MCP to handle encoding fires](https://medium.com/p/dedab6dc182b).*",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "devops",
        "encoding",
        "workflows",
        "encoding devops",
        "encoding workflows",
        "devops streamlines"
      ],
      "category": "devops-and-cicd"
    },
    "ProgrammerAgua--jenkins-mcp-server": {
      "owner": "ProgrammerAgua",
      "name": "jenkins-mcp-server",
      "url": "https://github.com/ProgrammerAgua/jenkins-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/ProgrammerAgua.webp",
      "description": "Manage Jenkins jobs through a unified API interface, facilitating job creation, triggering builds, retrieving job information, and updating configurations.",
      "stars": 0,
      "forks": 3,
      "license": "Apache License 2.0",
      "language": "Java",
      "updated_at": "2025-04-09T02:51:56Z",
      "readme_content": "English | [中文](README.zh-CN.md)\n# Jenkins API MCP Server\n\nThis is a MCP Server service based on Spring AI for Jenkins Rest API calls, providing common operation interfaces for Jenkins jobs.\n\n## Features\n\n- Job Management: Create, delete, enable/disable, rename jobs\n- Job Building: Trigger builds, build with parameters, stop builds\n- Job Information: Get job info, build info, build logs\n- Job Configuration: Get and update job configurations\n\n## Technology Stack\n\n- Spring Boot 3.3.6\n- Jenkins REST API Client\n- Spring AI MCP Server\n\n## Quick Start\n\n### Requirements\n\n- JDK 17+\n- Maven 3.6+\n- Jenkins server (with \"Remote Access API\" enabled)\n\n### Build Project\n\nClone the repository and navigate to the project directory:\n\n```bash\ngit clone [repository-url]\ncd jenkins-mcp-server\n```\n\nBefore running the project, you need to package it using Maven:\n\n```bash\nmvn package\n```\nAfter a successful build, a file named `mcp-jenkins-server-0.0.1-SNAPSHOT.jar` will be generated in the `/target` directory. Use the full path to this file in your `mcp.json` configuration:\n\n```bash\n{your_path}\\\\mcp-jenkins-server-0.0.1-SNAPSHOT.jar\n ```\n\n### mcp.json Configuration\n```yaml\n{\n  \"mcpServers\": {\n    \"jenkins-mcp\": {\n      \"command\": \"java\",\n      \"args\": [\n        \"-jar\",\n        \"{your_path}\\\\mcp-jenkins-server-0.0.1-SNAPSHOT.jar\"\n      ],\n      \"env\": {\n        \"JENKINS_API_SERVER_URI\": \"jenkins-uri\",\n        \"JENKINS_API_USERNAME\": \"username\", \n        \"JENKINS_API_TOKEN\": \"password/token\"\n      }\n    }\n  }\n}\n```\n\n## API Documentation\n### Job Management\n- createJob : Create a new Jenkins job\n- deleteJob : Delete an existing Jenkins job\n- enableJob : Enable a disabled Jenkins job\n- disableJob : Disable an enabled Jenkins job\n- renameJob : Rename an existing Jenkins job\n### Job Building\n- buildJob : Trigger a build for a Jenkins job\n- buildJobWithParams : Trigger a build with parameters\n- killJob : Stop a running build\n### Job Information\n- getJobInfo : Get detailed information about a job\n- getBuildInfo : Get information about a specific build\n- getBuildLog : Get the console output of a build\n- getLastBuildNumber : Get the last build number\n- getLastBuildTimestamp : Get the timestamp of the last build\n### Job Configuration\n- getJobConfig : Get the configuration XML of a job\n- updateJobConfig : Update the configuration of a job",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "devops",
        "jenkins",
        "mcp",
        "devops cicd",
        "manage jenkins",
        "jenkins jobs"
      ],
      "category": "devops-and-cicd"
    },
    "TaichiHo--k8s-interactive-mcp": {
      "owner": "TaichiHo",
      "name": "k8s-interactive-mcp",
      "url": "https://github.com/TaichiHo/k8s-interactive-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/TaichiHo.webp",
      "description": "Run Kubernetes commands using a specified kubeconfig path and provide interpretations of those commands. This server supports custom kubeconfig paths, automatic kubectl installation checks, and includes error handling features.",
      "stars": 4,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-04T07:37:07Z",
      "readme_content": "# k8s-interactive-mcp\n\nA MCP server that can run Kubernetes commands with a given kubeconfig path and provide interpretation of the commands.\n\n<a href=\"https://glama.ai/mcp/servers/gwvs0s78be\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/gwvs0s78be/badge\" alt=\"k8s-interactive-mcp MCP server\" /></a>\n\n## Result\n\n\n\n## Features\n\n- Run kubectl commands through MCP tools\n- Flexible command line piping\n- Automatic kubectl installation check\n- Support for custom kubeconfig paths\n- Error handling and helpful messages\n\n## Usage\n\n1. Install dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"k8s-interactive\": {\n      \"command\": \"/path/to/k8s-interactive/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kubeconfig",
        "kubernetes",
        "kubectl",
        "kubernetes commands",
        "run kubernetes",
        "kubeconfig path"
      ],
      "category": "devops-and-cicd"
    },
    "Tiberriver256--mcp-server-azure-devops": {
      "owner": "Tiberriver256",
      "name": "mcp-server-azure-devops",
      "url": "https://github.com/Tiberriver256/mcp-server-azure-devops",
      "imageUrl": "/freedevtools/mcp/pfp/Tiberriver256.webp",
      "description": "Interact with Azure DevOps APIs to manage projects, work items, and repositories using natural language commands. Facilitate secure execution of common DevOps workflows and access repository content through standardized URIs.",
      "stars": 298,
      "forks": 88,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-30T12:06:23Z",
      "readme_content": "# ℹ️ DISCUSSION: [Microsoft launched an official ADO MCP Server! 🎉🎉🎉](https://github.com/Tiberriver256/mcp-server-azure-devops/discussions/237)\n\n# Azure DevOps MCP Server\n\nA Model Context Protocol (MCP) server implementation for Azure DevOps, allowing AI assistants to interact with Azure DevOps APIs through a standardized protocol.\n\n## Overview\n\nThis server implements the [Model Context Protocol (MCP)](https://modelcontextprotocol.io/) for Azure DevOps, enabling AI assistants like Claude to interact with Azure DevOps resources securely. The server acts as a bridge between AI models and Azure DevOps APIs, providing a standardized way to:\n\n- Access and manage projects, work items, repositories, and more\n- Create and update work items, branches, and pull requests\n- Execute common DevOps workflows through natural language\n- Access repository content via standardized resource URIs\n- Safely authenticate and interact with Azure DevOps resources\n\n## Server Structure\n\nThe server is structured around the Model Context Protocol (MCP) for communicating with AI assistants. It provides tools for interacting with Azure DevOps resources including:\n\n- Projects\n- Work Items\n- Repositories\n- Pull Requests\n- Branches\n- Pipelines\n\n### Core Components\n\n- **AzureDevOpsServer**: Main server class that initializes the MCP server and registers tools\n- **Feature Modules**: Organized by feature area (work-items, projects, repositories, etc.)\n- **Request Handlers**: Each feature module provides request identification and handling functions\n- **Tool Handlers**: Modular functions for each Azure DevOps operation\n- **Configuration**: Environment-based configuration for organization URL, PAT, etc.\n\nThe server uses a feature-based architecture where each feature area (like work-items, projects, repositories) is encapsulated in its own module. This makes the codebase more maintainable and easier to extend with new features.\n\n## Getting Started\n\n### Prerequisites\n\n- Node.js (v16+)\n- npm or yarn\n- Azure DevOps account with appropriate access\n- Authentication credentials (see [Authentication Guide](docs/authentication.md) for details):\n  - Personal Access Token (PAT), or\n  - Azure Identity credentials, or\n  - Azure CLI login\n\n### Running with NPX\n\n### Usage with Claude Desktop/Cursor AI\n\nTo integrate with Claude Desktop or Cursor AI, add one of the following configurations to your configuration file.\n\n#### Azure Identity Authentication\n\nBe sure you are logged in to Azure CLI with `az login` then add the following:\n\n```json\n{\n  \"mcpServers\": {\n    \"azureDevOps\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@tiberriver256/mcp-server-azure-devops\"],\n      \"env\": {\n        \"AZURE_DEVOPS_ORG_URL\": \"https://dev.azure.com/your-organization\",\n        \"AZURE_DEVOPS_AUTH_METHOD\": \"azure-identity\",\n        \"AZURE_DEVOPS_DEFAULT_PROJECT\": \"your-project-name\"\n      }\n    }\n  }\n}\n```\n\n#### Personal Access Token (PAT) Authentication\n\n```json\n{\n  \"mcpServers\": {\n    \"azureDevOps\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@tiberriver256/mcp-server-azure-devops\"],\n      \"env\": {\n        \"AZURE_DEVOPS_ORG_URL\": \"https://dev.azure.com/your-organization\",\n        \"AZURE_DEVOPS_AUTH_METHOD\": \"pat\",\n        \"AZURE_DEVOPS_PAT\": \"<YOUR_PAT>\",\n        \"AZURE_DEVOPS_DEFAULT_PROJECT\": \"your-project-name\"\n      }\n    }\n  }\n}\n```\n\nFor detailed configuration instructions and more authentication options, see the [Authentication Guide](docs/authentication.md).\n\n## Authentication Methods\n\nThis server supports multiple authentication methods for connecting to Azure DevOps APIs. For detailed setup instructions, configuration examples, and troubleshooting tips, see the [Authentication Guide](docs/authentication.md).\n\n### Supported Authentication Methods\n\n1. **Personal Access Token (PAT)** - Simple token-based authentication\n2. **Azure Identity (DefaultAzureCredential)** - Flexible authentication using the Azure Identity SDK\n3. **Azure CLI** - Authentication using your Azure CLI login\n\nExample configuration files for each authentication method are available in the [examples directory](docs/examples/).\n\n## Environment Variables\n\nFor a complete list of environment variables and their descriptions, see the [Authentication Guide](docs/authentication.md#configuration-reference).\n\nKey environment variables include:\n\n| Variable                       | Description                                                                        | Required                     | Default          |\n| ------------------------------ | ---------------------------------------------------------------------------------- | ---------------------------- | ---------------- |\n| `AZURE_DEVOPS_AUTH_METHOD`     | Authentication method (`pat`, `azure-identity`, or `azure-cli`) - case-insensitive | No                           | `azure-identity` |\n| `AZURE_DEVOPS_ORG_URL`         | Full URL to your Azure DevOps organization                                         | Yes                          | -                |\n| `AZURE_DEVOPS_PAT`             | Personal Access Token (for PAT auth)                                               | Only with PAT auth           | -                |\n| `AZURE_DEVOPS_DEFAULT_PROJECT` | Default project if none specified                                                  | No                           | -                |\n| `AZURE_DEVOPS_API_VERSION`     | API version to use                                                                 | No                           | Latest           |\n| `AZURE_TENANT_ID`              | Azure AD tenant ID (for service principals)                                        | Only with service principals | -                |\n| `AZURE_CLIENT_ID`              | Azure AD application ID (for service principals)                                   | Only with service principals | -                |\n| `AZURE_CLIENT_SECRET`          | Azure AD client secret (for service principals)                                    | Only with service principals | -                |\n| `LOG_LEVEL`                    | Logging level (debug, info, warn, error)                                           | No                           | info             |\n\n## Troubleshooting Authentication\n\nFor detailed troubleshooting information for each authentication method, see the [Authentication Guide](docs/authentication.md#troubleshooting-authentication-issues).\n\nCommon issues include:\n\n- Invalid or expired credentials\n- Insufficient permissions\n- Network connectivity problems\n- Configuration errors\n\n## Authentication Implementation Details\n\nFor technical details about how authentication is implemented in the Azure DevOps MCP server, see the [Authentication Guide](docs/authentication.md) and the source code in the `src/auth` directory.\n\n## Available Tools\n\nThe Azure DevOps MCP server provides a variety of tools for interacting with Azure DevOps resources. For detailed documentation on each tool, please refer to the corresponding documentation.\n\n### User Tools\n\n- `get_me`: Get details of the authenticated user (id, displayName, email)\n\n### Organization Tools\n\n- `list_organizations`: List all accessible organizations\n\n### Project Tools\n\n- `list_projects`: List all projects in an organization\n- `get_project`: Get details of a specific project\n- `get_project_details`: Get comprehensive details of a project including process, work item types, and teams\n\n### Repository Tools\n\n- `list_repositories`: List all repositories in a project\n- `get_repository`: Get details of a specific repository\n- `get_repository_details`: Get detailed information about a repository including statistics and refs\n- `get_file_content`: Get content of a file or directory from a repository\n\n### Work Item Tools\n\n- `get_work_item`: Retrieve a work item by ID\n- `create_work_item`: Create a new work item\n- `update_work_item`: Update an existing work item\n- `list_work_items`: List work items in a project\n- `manage_work_item_link`: Add, remove, or update links between work items\n\n### Search Tools\n\n- `search_code`: Search for code across repositories in a project\n- `search_wiki`: Search for content across wiki pages in a project\n- `search_work_items`: Search for work items across projects in Azure DevOps\n\n### Pipelines Tools\n\n- `list_pipelines`: List pipelines in a project\n- `get_pipeline`: Get details of a specific pipeline\n- `trigger_pipeline`: Trigger a pipeline run with customizable parameters\n\n### Wiki Tools\n\n- `get_wikis`: List all wikis in a project\n- `get_wiki_page`: Get content of a specific wiki page as plain text\n\n### Pull Request Tools\n\n- [`create_pull_request`](docs/tools/pull-requests.md#create_pull_request) - Create a new pull request\n- [`list_pull_requests`](docs/tools/pull-requests.md#list_pull_requests) - List pull requests in a repository\n- [`add_pull_request_comment`](docs/tools/pull-requests.md#add_pull_request_comment) - Add a comment to a pull request\n- [`get_pull_request_comments`](docs/tools/pull-requests.md#get_pull_request_comments) - Get comments from a pull request\n- [`update_pull_request`](docs/tools/pull-requests.md#update_pull_request) - Update an existing pull request (title, description, status, draft state, reviewers, work items)\n\nFor comprehensive documentation on all tools, see the [Tools Documentation](docs/tools/).\n\n## Contributing\n\nContributions are welcome! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for contribution guidelines.\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=tiberriver256/mcp-server-azure-devops&type=Date)](https://www.star-history.com/#tiberriver256/mcp-server-azure-devops&Date)\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "devops",
        "azure",
        "repositories",
        "azure devops",
        "devops cicd",
        "devops apis"
      ],
      "category": "devops-and-cicd"
    },
    "Tsuchijo--sandbox-mcp": {
      "owner": "Tsuchijo",
      "name": "sandbox-mcp",
      "url": "https://github.com/Tsuchijo/sandbox-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Tsuchijo.webp",
      "description": "Isolated Docker environments for executing code in various programming languages, managing package installations, and running commands within containers.",
      "stars": 11,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-08T02:58:03Z",
      "readme_content": "# Sandbox MCP Server\n\nAn MCP server that provides isolated Docker environments for code execution. This server allows you to:\n- Create containers with any Docker image\n- Write and execute code in multiple programming languages\n- Install packages and set up development environments\n- Run commands in isolated containers\n\n## Prerequisites\n\n- Python 3.9 or higher\n- Docker installed and running\n- uv package manager (recommended)\n- Docker MCP server (recommended)\n\n## Installation\n\n1. Clone this repository:\n```bash\ngit clone <your-repo-url>\ncd sandbox_server\n```\n\n2. Create and activate a virtual environment with uv:\n```bash\nuv venv\nsource .venv/bin/activate  # On Unix/MacOS\n# Or on Windows:\n# .venv\\Scripts\\activate\n```\n\n3. Install dependencies:\n```bash\nuv pip install .\n```\n\n## Integration with Claude Desktop\n\n1. Open Claude Desktop's configuration file:\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. Add the sandbox server configuration:\n```json\n{\n    \"mcpServers\": {\n        \"sandbox\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/absolute/path/to/sandbox_server\",\n                \"run\",\n                \"sandbox_server.py\"\n            ],\n            \"env\": {\n                \"PYTHONPATH\": \"/absolute/path/to/sandbox_server\"\n            }\n        }\n    }\n}\n```\n\nReplace `/absolute/path/to/sandbox_server` with the actual path to your project directory.\n\n3. Restart Claude Desktop\n\n## Usage Examples\n\n### Basic Usage\n\nOnce connected to Claude Desktop, you can:\n\n1. Create a Python container:\n```\nCould you create a Python container and write a simple hello world program?\n```\n\n2. Run code in different languages:\n```\nCould you create a C program that calculates the fibonacci sequence and run it?\n```\n\n3. Install packages and use them:\n```\nCould you create a Python script that uses numpy to generate and plot some random data?\n```\n\n### Saving and Reproducing Environments\n\nThe server provides several ways to save and reproduce your development environments:\n\n#### Creating Persistent Containers\n\nWhen creating a container, you can make it persistent:\n```\nCould you create a persistent Python container with numpy and pandas installed?\n```\n\nThis will create a container that:\n- Stays running after Claude Desktop closes\n- Can be accessed directly through Docker\n- Preserves all installed packages and files\n\nThe server will provide instructions for:\n- Accessing the container directly (`docker exec`)\n- Stopping and starting the container\n- Removing it when no longer needed\n\n#### Saving Container State\n\nAfter setting up your environment, you can save it as a Docker image:\n```\nCould you save the current container state as an image named 'my-ds-env:v1'?\n```\n\nThis will:\n1. Create a new Docker image with all your:\n   - Installed packages\n   - Created files\n   - Configuration changes\n2. Provide instructions for reusing the environment\n\nYou can then share this image or use it as a starting point for new containers:\n```\nCould you create a new container using the my-ds-env:v1 image?\n```\n\n#### Generating Dockerfiles\n\nTo make your environment fully reproducible, you can generate a Dockerfile:\n```\nCould you export a Dockerfile that recreates this environment?\n```\n\nThe generated Dockerfile will include:\n- Base image specification\n- Created files\n- Template for additional setup steps\n\nYou can use this Dockerfile to:\n1. Share your environment setup with others\n2. Version control your development environment\n3. Modify and customize the build process\n4. Deploy to different systems\n\n#### Recommended Workflow\n\nFor reproducible development environments:\n\n1. Create a persistent container:\n```\nCreate a persistent Python container for data science work\n```\n\n2. Install needed packages and set up the environment:\n```\nInstall numpy, pandas, and scikit-learn in the container\n```\n\n3. Test your setup:\n```\nCreate and run a test script to verify the environment\n```\n\n4. Save the state:\n```\nSave this container as 'ds-workspace:v1'\n```\n\n5. Export a Dockerfile:\n```\nGenerate a Dockerfile for this environment\n```\n\nThis gives you multiple options for recreating your environment:\n- Use the saved Docker image directly\n- Build from the Dockerfile with modifications\n- Access the original container if needed\n\n## Security Notes\n\n- All code executes in isolated Docker containers\n- Containers are automatically removed after use\n- File systems are isolated between containers\n- Host system access is restricted\n\n## Project Structure\n\n```\nsandbox_server/\n├── sandbox_server.py     # Main server implementation\n├── pyproject.toml        # Project configuration\n└── README.md            # This file\n```\n\n## Available Tools\n\nThe server provides three main tools:\n\n1. `create_container_environment`: Creates a new Docker container with specified image\n2. `create_file_in_container`: Creates a file in a container\n3. `execute_command_in_container`: Runs commands in a container\n4. `save_container_state`: Saves the container state to a persistent container\n5. `export_dockerfile`: exports a docker file to create a persistant environment\n6. `exit_container`: closes a container to cleanup environment when finished\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "docker",
        "devops",
        "containers",
        "docker environments",
        "isolated docker",
        "commands containers"
      ],
      "category": "devops-and-cicd"
    },
    "fyp312572116--devops-java-sample": {
      "owner": "fyp312572116",
      "name": "devops-java-sample",
      "url": "https://github.com/fyp312572116/devops-java-sample",
      "imageUrl": "/freedevtools/mcp/pfp/fyp312572116.webp",
      "description": "Streamline development processes by creating and managing CI/CD pipelines using a Jenkins-based system integrated within a SpringBoot demo project.",
      "stars": 0,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "Java",
      "updated_at": "2024-04-15T08:53:46Z",
      "readme_content": "> **_NOTICE:_**  Give [some historic reasons](https://github.com/kubesphere/devops-java-sample/issues/76), this repo has been archived. Please move forward to [devops-maven-sample](https://github.com/kubesphere/devops-maven-sample) if you want to help us improve the sample project.\n\n\n## Repo Introduction\n\n> English | [中文](README_zh.md)\n\nKubeSphere provides a Jenkins-based DevOps system [with various features](https://kubesphere.io/docs/devops-user-guide/understand-and-manage-devops-projects/overview/#features). This repository is used for a SpringBoot demo for DevOps on KubeSphere. For example, you can find a file of `Jenkinsfile-online` in the root directory, and you can use it to create a pipeline through the **Jenkinsfile in SCM** method.\n\nFor more information about how to use the KubeSphere DevOps system, you can refer to the following list of KubeSphere official documents. \n\n## Document List\n\n- [Create a Pipeline Using a Jenkinsfile](https://kubesphere.io/docs/devops-user-guide/how-to-use/create-a-pipeline-using-jenkinsfile/)\n- [Create a Pipeline Using Graphical Editing Panels](https://kubesphere.io/docs/devops-user-guide/how-to-use/create-a-pipeline-using-graphical-editing-panel/)\n- [Build and Deploy a Maven Project](https://kubesphere.io/docs/devops-user-guide/examples/a-maven-project/)\n- [Source to Image: Publish an App without a Dockerfile](https://kubesphere.io/docs/project-user-guide/image-builder/source-to-image/)\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "devops",
        "jenkins",
        "pipelines",
        "devops cicd",
        "devops java",
        "using jenkins"
      ],
      "category": "devops-and-cicd"
    },
    "kaznak--shell-command-mcp": {
      "owner": "kaznak",
      "name": "shell-command-mcp",
      "url": "https://github.com/kaznak/shell-command-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kaznak.webp",
      "description": "Execute shell commands securely within an isolated Docker container environment. It supports both synchronous and asynchronous execution with multiple notification modes, while also integrating Kubernetes tools.",
      "stars": 5,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-06-19T05:00:58Z",
      "readme_content": "# *OBSOLETE*\n\nI recommend using Claude Code by running `claude mcp serve` instead of this MCP server.\nI have created [ai-agent-workspace](https://github.com/kaznak/container-images/tree/main/ai-agent-workspace) as a container to run Claude Code.\nPlease use it as needed.\n\n# Shell Command MCP Server\n\nThis is an MCP (Model Context Protocol) server that allows executing shell commands within a Docker container. It provides a secure and isolated workspace for running commands without giving access to the host Docker daemon.\n\n## Features\n\n- Run shell scripts through a simple MCP interface\n  - synchronous execution\n  - asynchronous execution with 4 different modes\n    - complete: notify when the command is completed\n    - line: notify on each line of output\n    - chunk: notify on each chunk of output\n    - character: notify on each character of output\n- Kubernetes tools included: kubectl, helm, kustomize, hemfile\n- Isolated Docker container environment with non-root user\n  - host-container userid/groupid mapping implemented. this allows the container to run as the same user as the host, ensuring that files created by the container have the same ownership and permissions as those created by the host.\n  - mount a host directory to the container /home/mcp directory for persistence. it become the home directory the AI works in.\n  - if the host directory is empty, the initial files will be copied form the backup in the container.\n\n## Design Philosophy\n\nThis MCP server provides AI with a workspace similar to that of a human.\nAuthorization is limited not by MCP functions, but by container isolation and external authorization restrictions.\n\nIt provides more general tools such as shell script execution, so that they can be used without specialized knowledge of tool use.\n\nThe server implementation is kept as simple as possible to facilitate code auditing.\n\n## Getting Started\n\n### Prerequisites\n\n- Docker\n\n### Usage with Claude for Desktop\n\nAdd the following configuration to your Claude for Desktop configuration file.\n\nMacOS:\n\n```json\n\"shell-command\": {\n  \"command\": \"docker\",\n  \"args\": [\n    \"run\",\n    \"--rm\",\n    \"-i\",\n    \"--mount\",\n    \"type=bind,src=/Users/user-name/MCPHome,dst=/home/mcp\",\n    \"ghcr.io/kaznak/shell-command-mcp:latest\"\n  ]\n}\n```\n\nReplace `/Users/user-name/ClaudeWorks` with the directory you want to make available to the container.\n\nWindows:\n\n```json\n\"shell-command\": {\n   \"command\": \"docker\",\n   \"args\": [\n      \"run\",\n      \"--rm\",\n      \"-i\",\n      \"--mount\",\n      \"type=bind,src=\\\\\\\\wsl.localhost\\\\Ubuntu\\\\home\\\\user-name\\\\MCPHome,dst=/home/mcp\",\n      \"ghcr.io/kaznak/shell-command-mcp:latest\"\n   ]\n}\n```\n\n### Feed some prompts\n\nTo Operate the files in the mounted directory.\n\n## Available MCP Tools\n\n- [execute-bash-script-sync](./src/execute-bash-script-sync.ts)\n- [execute-bash-script-async](./src/execute-bash-script-async.ts)\n\n## Security Considerations\n\n- The MCP server runs as a non-root user within the container\n- The container does not have access to the host Docker daemon\n- User workspace is mounted from the host for persistence\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "docker",
        "kubernetes",
        "devops",
        "kaznak shell",
        "docker container",
        "kubernetes tools"
      ],
      "category": "devops-and-cicd"
    },
    "kjozsa--jenkins-mcp": {
      "owner": "kjozsa",
      "name": "jenkins-mcp",
      "url": "https://github.com/kjozsa/jenkins-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kjozsa.webp",
      "description": "Manage Jenkins operations efficiently, facilitating build and deployment processes.",
      "stars": 8,
      "forks": 10,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-05-25T14:00:51Z",
      "readme_content": "# Jenkins MCP\n[![smithery badge](https://smithery.ai/badge/@kjozsa/jenkins-mcp)](https://smithery.ai/server/@kjozsa/jenkins-mcp)\nMCP server for managing Jenkins operations.\n\n<a href=\"https://glama.ai/mcp/servers/7j3zk84u5p\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/7j3zk84u5p/badge\" alt=\"Jenkins MCP server\" />\n</a>\n\n## Installation\n### Installing via Smithery\n\nTo install Jenkins MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kjozsa/jenkins-mcp):\n\n```bash\nnpx -y @smithery/cli install @kjozsa/jenkins-mcp --client claude\n```\n\n### Installing Manually\n```bash\nuvx install jenkins-mcp\n```\n\n## Configuration\nAdd the MCP server using the following JSON configuration snippet:\n\n```json\n{\n  \"mcpServers\": {\n    \"jenkins-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\"jenkins-mcp\"],\n      \"env\": {\n        \"JENKINS_URL\": \"https://your-jenkins-server/\",\n        \"JENKINS_USERNAME\": \"your-username\",\n        \"JENKINS_PASSWORD\": \"your-password\",\n        \"JENKINS_USE_API_TOKEN\": \"false\"\n      }\n    }\n  }\n}\n```\n\n## CSRF Crumb Handling\n\nJenkins implements CSRF protection using \"crumbs\" - tokens that must be included with POST requests. This MCP server handles CSRF crumbs in two ways:\n\n1. **Default Mode**: Automatically fetches and includes CSRF crumbs with build requests\n   - Uses session cookies to maintain the web session\n   - Handles all the CSRF protection behind the scenes\n\n2. **API Token Mode**: Uses Jenkins API tokens which are exempt from CSRF protection\n   - Set `JENKINS_USE_API_TOKEN=true`\n   - Set `JENKINS_PASSWORD` to your API token instead of password\n   - Works with Jenkins 2.96+ which doesn't require crumbs for API token auth\n\nYou can generate an API token in Jenkins at: User → Configure → API Token → Add new Token\n\n## Features\n- List Jenkins jobs\n- Trigger builds with optional parameters\n- Check build status\n- CSRF crumb handling for secure API access\n\n## Development\n```bash\n# Install dependencies\nuv pip install -r requirements.txt\n\n# Run in dev mode with Inspector\nmcp dev jenkins_mcp/server.py\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "jenkins",
        "devops",
        "deployment",
        "manage jenkins",
        "jenkins operations",
        "devops cicd"
      ],
      "category": "devops-and-cicd"
    },
    "lanbaoshen--mcp-jenkins": {
      "owner": "lanbaoshen",
      "name": "mcp-jenkins",
      "url": "https://github.com/lanbaoshen/mcp-jenkins",
      "imageUrl": "/freedevtools/mcp/pfp/lanbaoshen.webp",
      "description": "Connects Jenkins with AI language models to automate and manage CI/CD pipelines, facilitating secure interaction with Jenkins tools and simplifying job management and build monitoring.",
      "stars": 48,
      "forks": 18,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T08:28:57Z",
      "readme_content": "# MCP Jenkins\n![PyPI Version](https://img.shields.io/pypi/v/mcp-jenkins)\n[![PyPI Downloads](https://static.pepy.tech/badge/mcp-jenkins)](https://pepy.tech/projects/mcp-jenkins)\n[![test](https://github.com/lanbaoshen/mcp-jenkins/actions/workflows/test.yml/badge.svg)](https://github.com/lanbaoshen/mcp-jenkins/actions/workflows/test.yml/badge.svg)\n![License](https://img.shields.io/github/license/lanbaoshen/mcp-jenkins)\n\nThe Model Context Protocol (MCP) is an open-source implementation that bridges Jenkins with AI language models following Anthropic's MCP specification. This project enables secure, contextual AI interactions with Jenkins tools while maintaining data privacy and security.\n\n\n## Cursor Demo\n![cursor demo](https://github.com/user-attachments/assets/ba954a67-e9ca-4d38-b962-19fb8856bdde)\n\n\n## Setup Guide\n\n### Installation\nChoose one of these installation methods:\n```\n# Using uv (recommended)\npip install uv\nuvx mcp-jenkins\n\n# Using pip\npip install mcp-jenkins\n\n# Using Smithery\nnpx -y @smithery/cli@latest install @lanbaoshen/mcp-jenkins --client claude\n```\n\n### Configuration and Usage\n\n#### Cursor\n1. Open Cursor Settings\n2. Navigate to MCP\n3. Click + Add new global MCP server\n\nThis will create or edit the ~/.cursor/mcp.json file with your MCP server configuration.\n```shell\n{\n  \"mcpServers\": {\n    \"mcp-jenkins\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-jenkins\",\n        \"--jenkins-url=xxx\",\n        \"--jenkins-username=xxx\",\n        \"--jenkins-password=xxx\"\n      ]\n    }\n  }\n}\n```\n\n**Note: You can set your Jenkins token to password too!**\n\n#### VSCode Copilot Chat\n1. Create `.vscode` folder with `mcp.json` file in you workspace for local setup or edit `settings.json` trough settings menù.\n2. Insert the following configuration:\n```json\n{\n    \"servers\": {\n        \"jenkins\": {\n            \"url\": \"http://localhost:3000/sse\",\n            \"type\": \"sse\"\n        }\n    }\n}\n```\n3. Run the Jenkins MCP server with the following command:\n```shell\nuvx mcp-jenkins \\\n  --jenkins-url http://localhost:3000 \\\n  --jenkins-username your_username  \\\n  --jenkins-password your_password_or_token \\\n  --transport sse --port 3000\n```\n\n#### line arguments\n```shell\n# Stdio Mode\nuvx mcp-jenkins --jenkins-url xxx --jenkins-username xxx --jenkins-password xxx --read-only\n\n# SSE Mode\nuvx mcp-jenkins --jenkins-url xxx --jenkins-username xxx --jenkins-password xxx --transport sse --port 9887\n```\n\n#### AutoGen\n<details>\n<summary>Install and exec</summary>\n\nInstall autogen:\n```shell\npip install \"autogen-ext[azure,ollama,openai,mcp]\" autogen-chat\n```\n\nRun python scripts:\n```python\nimport asyncio\n\nfrom autogen_ext.tools.mcp import StdioMcpToolAdapter, StdioServerParams\nfrom autogen_agentchat.agents import AssistantAgent\nfrom autogen_agentchat.ui import Console\nfrom autogen_core import CancellationToken\n\n\nasync def main() -> None:\n    # Create server params for the remote MCP service\n    server_params = StdioServerParams(\n        command='uvx',\n        args=[\n            'mcp-jenkins',\n            '--jenkins-username',\n            'xxx',\n            '--jenkins-password',\n            'xxx',\n            '--jenkins-url',\n            'xxx'\n        ],\n    )\n\n    # Get the translation tool from the server\n    adapter = await StdioMcpToolAdapter.from_server_params(server_params, 'get_all_jobs')\n\n    # Create an agent that can use the translation tool\n    agent = AssistantAgent(\n        name='jenkins_assistant',\n        model_client=[Replace_with_your_model_client],\n        tools=[adapter],\n    )\n\n    # Let the agent translate some text\n    await Console(\n        agent.run_stream(task='Get all jobs', cancellation_token=CancellationToken())\n    )\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n</details>\n\n## Available Tools\n| Tool                      | Description                                                                     |\n|---------------------------|---------------------------------------------------------------------------------|\n| get_all_jobs              | Get all jobs                                                                    |\n| get_job_config            | Get job config                                                                  |\n| search_jobs               | Search job by specific field                                                    |\n| get_running_builds        | Get running builds                                                              |\n| stop_build                | Stop running build                                                              |\n| get_build_info            | Get build info                                                                  |\n| get_build_sourcecode      | Get the pipeline source code of a specific build in Jenkins\n| get_job_info              | Get job info                                                                    |\n| build_job                 | Build a job with param                                                          |\n| get_build_logs            | Get build logs                                                                  |\n| get_all_nodes             | Get nodes                                                                       |\n| get_node_config           | Get the config of node                                                          |\n| get_all_queue_items       | Get all queue items                                                             |\n| get_queue_item            | Get queue item info                                                             |\n| cancel_queue_item         | Cancel queue item                                                               |\n| get_multibranch_jobs      | Get all multibranch pipeline jobs from Jenkins, optionally filtered by patterns |\n| get_multibranch_branches  | Get all branches for a specific multibranch pipeline job                        |\n| scan_multibranch_pipeline | Trigger a scan of a multibranch pipeline to discover new branches               |\n\n\n## Development & Debugging\n```shell\n# Using MCP Inspector\n# For installed package\nnpx @modelcontextprotocol/inspector uvx mcp-jenkins --jenkins-url xxx --jenkins-username xxx --jenkins-password xxx\n\n# For local development version\nnpx @modelcontextprotocol/inspector uv --directory /path/to/your/mcp-jenkins run mcp-jenkins --jenkins-url xxx --jenkins-username xxx --jenkins-password xxx\n```\n\n### Pre-Commit Hook\n```shell\n# Install Dependency\nuv sync --all-extras --dev\npre-commit install\n\n# Manually execute\npre-commit run --all-files\n```\n\n### UT\n```\n# Install Dependency\nuv sync --all-extras --dev\n\n# Execute UT\nuv run pytest --cov=mcp_jenkins\n```\n\n\n## License\nLicensed under MIT - see [LICENSE](LICENSE) file. This is not an official Jenkins product.\n\n\n## MCP-Jenkins in MCP Registries\n- https://mcpreview.com/mcp-servers/lanbaoshen/mcp-jenkins\n- https://smithery.ai/server/@lanbaoshen/mcp-jenkins\n- https://glama.ai/mcp/servers/@lanbaoshen/mcp-jenkins\n- https://mseep.ai/app/lanbaoshen-mcp-jenkins\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=lanbaoshen/mcp-jenkins&type=Date)](https://www.star-history.com/#lanbaoshen/mcp-jenkins&Date)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "jenkins",
        "devops",
        "automate",
        "jenkins tools",
        "jenkins ai",
        "mcp jenkins"
      ],
      "category": "devops-and-cicd"
    },
    "lieee1995--mcp-jenkins-server": {
      "owner": "lieee1995",
      "name": "mcp-jenkins-server",
      "url": "https://github.com/lieee1995/mcp-jenkins-server",
      "imageUrl": "/freedevtools/mcp/pfp/lieee1995.webp",
      "description": "Integrates with a Jenkins server to manage jobs, retrieve build information, and trigger builds. Provides direct access to Jenkins data for enhanced automation and CI/CD processes.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-31T07:44:10Z",
      "readme_content": "﻿# MCP Jenkins Server\r\n\r\nA Model Context Protocol (MCP) server that provides Jenkins integration tools.\r\n\r\n## Features\r\n\r\n- Get Jenkins server information\r\n- List and inspect Jenkins jobs\r\n- Get build information and console output\r\n- Manage Jenkins views\r\n- Trigger specific job builds\r\n\r\n## Requirements\r\n\r\n- Python 3.10+\r\n- Jenkins server with API access\r\n- Jenkins API token for authentication\r\n\r\n## Installation\r\n\r\n1. Clone this repository\r\n2. Install dependencies:\r\n   ```bash\r\n   pip install -r requirements.txt\r\n   ```\r\n\r\n## Configuration\r\n\r\nCreate a `.env` file with your Jenkins credentials:\r\n\r\n```ini\r\nJENKINS_URL=https://your-jenkins-server\r\nJENKINS_USER=your-username\r\nJENKINS_TOKEN=your-api-token\r\n```\r\n\r\n## CLI Configuration\r\n\r\nTo add this MCP server to your CLI, use the following configuration:\r\n\r\n```json\r\n{\r\n  \"mcpServers\": {\r\n    \"mcp-jenkins-server\": {\r\n      \"command\": \"uv\",\r\n      \"args\": [\r\n        \"--directory\", \r\n        \"C:\\\\Users\\\\Dean.Li\\\\Documents\\\\Cline\\\\MCP\\\\mcp-jenkins-server\",\r\n        \"run\",\r\n        \"server.py\"\r\n      ],\r\n      \"env\": {\r\n        \"JENKINS_URL\": \"https://your-jenkins-server/\",\r\n        \"JENKINS_USERNAME\": \"your-username\",\r\n        \"JENKINS_PASSWORD\": \"your-password\"\r\n      },\r\n      \"disabled\": false,\r\n      \"autoApprove\": []\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Available Tools\r\n\r\nThis MCP server provides the following tools:\r\n\r\n### `get_jenkins_info`\r\nGet Jenkins server information\r\n\r\n### `list_jobs`\r\nList all Jenkins jobs\r\n\r\n### `get_job_info`\r\nGet information about a specific job\r\n- Parameters:\r\n  - `job_name`: Name of the job to inspect\r\n\r\n### `get_build_info`\r\nGet information about a specific build\r\n- Parameters:\r\n  - `job_name`: Name of the job\r\n  - `build_number`: Build number to inspect\r\n\r\n### `get_build_console_output`\r\nGet console output for a specific build\r\n- Parameters:\r\n  - `job_name`: Name of the job\r\n  - `build_number`: Build number to inspect\r\n\r\n### `get_views`\r\nList all Jenkins views\r\n\r\n### `trriger_llm_demo_job_build`\r\nTrigger the \"LLM_Demo\" job build\r\n- Parameters:\r\n  - `user`: User name to pass as build parameter\r\n\r\n## Example Usage\r\n\r\n```python\r\nfrom mcp.client import Client\r\n\r\nclient = Client(\"http://localhost:8000\")  # MCP server URL\r\nresponse = client.call_tool(\"list_jobs\")\r\nprint(response)\r\n```\r\n\r\n## License\r\n\r\nMIT\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "jenkins",
        "devops",
        "mcp",
        "devops cicd",
        "integrates jenkins",
        "mcp jenkins"
      ],
      "category": "devops-and-cicd"
    },
    "lumix-labs--swift": {
      "owner": "lumix-labs",
      "name": "swift",
      "url": "https://github.com/lumix-labs/swift",
      "imageUrl": "/freedevtools/mcp/pfp/lumix-labs.webp",
      "description": "Transforms legacy systems to enhance deployment speed and minimize incidents by enabling incremental modernization without extensive rewrites. Facilitates faster deployment cycles from weeks to days while reducing technical debt.",
      "stars": 4,
      "forks": 3,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-06-23T07:11:41Z",
      "readme_content": "# Swift by Lumix Labs\n[![smithery badge](https://smithery.ai/badge/@lumix-labs/swift)](https://smithery.ai/server/@lumix-labs/swift)\n\n> Ship legacy code 5x faster. No rewrites. No regressions.  \n> Built by ex-Meta, OVO, and Paytm engineers.  \n> Used by growing teams to scale deployment velocity and slash production incidents.\n\nCurrent Version: [v0.x] – Early Access  \nTry it → [https://lumix-labs.github.io/swift](https://lumix-labs.github.io/swift)\n\n## About\n\nSwift by Lumix Labs helps engineering leaders transform legacy systems from innovation bottlenecks to competitive advantages. Deploy faster, reduce incidents, and modernize incrementally without risky rewrites or expensive consultants.\n\n## Key Features\n\n- Accelerate legacy deployment cycles from weeks to days\n- Reduce technical debt costs by up to 40%\n- Zero-disruption implementation\n- Cut legacy system incidents by 60%\n- Analyze repository composition with language and code quality metrics\n- Identify technical debt hotspots for targeted modernization\n\n## Setup Guide for Engineers\n\n### Prerequisites\n\n- [Docker Desktop](https://www.docker.com/products/docker-desktop/)\n- [Claude membership](https://claude.ai/)\n- Git\n\n### Installation Steps\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/lumix-labs/swift.git\n   cd swift/mcp-server\n   ```\n\n2. Build the Docker image:\n   ```bash\n   ./build.sh\n   ```\n   This will create a Docker image named `lumix-labs/mcp-server` that you can see in Docker Desktop.\n\n### Connecting Claude to Swift\n\n1. Open Claude Desktop application\n2. Go to Settings → Developer → Edit Config\n3. Add the following configuration block:\n\n   ```json\n   {\n    \"mcpServers\": {\n     \"swift-mcp-server\": {\n       \"command\": \"docker\",\n       \"args\": [\n         \"run\",\n         \"-i\",\n         \"--rm\",\n         \"-v\",\n         \"/path/to/your/repo1:/repo1\",\n         \"-v\",\n         \"/path/to/your/repo2:/repo2\",\n         \"-w\",\n         \"/\",\n         \"lumixlabs/mcp-server\"\n       ]\n     }\n    }\n   }\n   ```\n\n4. Replace the paths in the `-v` arguments with the absolute paths to your local repositories:\n   - The format is: `/your/local/path:/mounted/path`\n   - For simplicity, the right side (mounted path) should be a simple name at the root level\n   - Example:\n     ```\n     \"-v\",\n     \"/Users/username/projects/my-app:/my-app\",\n     ```\n\n5. Save and restart Claude\n\nNow Claude is connected to your MCP server and can access your local repositories!\n\n## Available Tools\n\n- **Repo Analyzer**: Analyzes repository structure showing language distribution and code quality metrics\n- **Security Analyzer**: Scans for vulnerabilities and security issues in your codebase\n- **UUID Generator**: Generates UUIDs in various formats\n\n## Usage Examples\n\nAsk Claude to analyze a repository:\n```\nCan you analyze the repository at /my-repo using repo-analyzer with language analysis and code quality metrics?\n```\n\nScan for security vulnerabilities:\n```\nCan you scan /my-repo for security vulnerabilities focusing on credential detection and OWASP Top 10?\n```\n\nGenerate a UUID:\n```\nCan you generate a UUID for me?\n```\n\n## Contributing\n\nWe welcome contributions to Swift! Here's how you can help:\n\n### Setting Up Development Environment\n\n1. Fork the repository\n2. Clone your fork:\n   ```bash\n   git clone https://github.com/YOUR-USERNAME/swift.git\n   cd swift\n   ```\n\n3. Test locally:\n   ```bash\n   cd mcp-server\n   ./build.sh\n   ```\n\n### Development Workflow\n\n1. Create a feature branch:\n   ```bash\n   git checkout -b feature/your-feature-name\n   ```\n\n2. Make your changes and test locally\n3. Submit a pull request with:\n   - Clear description of changes\n   - Any relevant issue numbers\n   - Testing details\n\n### Project Areas Needing Help\n\n- Tool development (new analyzers or utilities)\n- Documentation improvements\n- Testing and quality assurance\n- Performance optimizations\n\n## Troubleshooting\n\nCommon issues and solutions:\n\n- **Docker build fails**: Ensure Docker Desktop is running and you have sufficient permissions\n- **Claude can't connect to Swift**: Verify your config.json syntax and restart Claude\n- **Repository not found**: Check the path mappings in your Claude configuration\n- **Permission denied errors**: Verify Docker has access to the mapped directories\n\n## Documentation\n\nVisit our [GitHub Pages site](https://lumix-labs.github.io/swift/) for complete documentation and guides.\n\n## 🚀 Get Cracked at Lumix\n\nWant to work on real problems, ship fast, and grow like you're at Meta—without the red tape?\n\nWe don’t do resumes. We do velocity.  \nJoin Swift as a contributor and become a cracked engineer.\n\n### What You Get\n- Contribute to real production systems\n- Mentorship from Ashwani (ex-Meta, Ovo)\n- Ship into prod from day 1\n- Get paid for high-impact work\n- Potential full-time roles\n\n### How to Start\n1. Visit the [issues page](https://github.com/lumix-labs/swift/issues)\n2. Pick one tagged `good-first-crack` or suggest your own\n3. Open a PR or comment on the issue\n4. If it ships, we talk 🚀\n\n🧠 Read more: [https://lumix-labs.github.io/swift/cracked](https://lumix-labs.github.io/swift/cracked)\n\n## 🛠 Contributors\n\nThis project is made better by every contributor.  \nWant your name here? [Get cracked](https://lumix-labs.github.io/swift/cracked) and make your first PR.\n\n- 🧑‍💻 Ashwani Karoriwal - Founder @ Lumix Labs\n\n## License\n\nSee the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "devops",
        "deployment",
        "swift",
        "devops cicd",
        "legacy systems",
        "enhance deployment"
      ],
      "category": "devops-and-cicd"
    },
    "mrrobotke--django-migrations-mcp": {
      "owner": "mrrobotke",
      "name": "django-migrations-mcp",
      "url": "https://github.com/mrrobotke/django-migrations-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/mrrobotke.webp",
      "description": "Manage Django migrations in distributed environments through MCP endpoints, simplifying migration processes with validations and safety checks for CI/CD integration.",
      "stars": 5,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-07-17T09:12:29Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/mrrobotke-django-migrations-mcp-badge.png)](https://mseep.ai/app/mrrobotke-django-migrations-mcp)\n\n# Django Migrations MCP Service\n\nA Model Context Protocol (MCP) service for managing Django migrations in distributed environments. This service wraps Django's migration commands and exposes them as MCP endpoints, making it easy to manage migrations across multiple services and integrate with CI/CD pipelines.\n\n## Features\n\n- Check migration status (equivalent to `showmigrations`)\n- Create new migrations with validation (equivalent to `makemigrations`)\n- Apply migrations with safety checks (equivalent to `migrate`)\n- Additional validation and safety checks:\n  - Sequential migration order verification\n  - Conflict detection\n  - Dependency validation\n  - Safety analysis of migration operations\n\n## Installation\n\n### Local Development\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/mrrobotke/django-migrations-mcp.git\ncd django-migrations-mcp\n```\n\n2. Install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n## Configuration\n\nSet the following environment variables:\n\n```bash\nexport DJANGO_SETTINGS_MODULE=\"your_project.settings\"\nexport MCP_SERVICE_PORT=8000  # Optional, defaults to 8000\n```\n\n## Usage\n\n### Running the Service\n\n1. Directly with Python:\n```bash\npython -m migrations_mcp.service\n```\n\n2. Using Docker:\n```bash\ndocker build -t django-migrations-mcp .\ndocker run -e DJANGO_SETTINGS_MODULE=your_project.settings \\\n          -v /path/to/your/django/project:/app/project \\\n          -p 8000:8000 \\\n          django-migrations-mcp\n```\n\n### MCP Endpoints\n\n1. Show Migrations:\n```python\nfrom mcp import MCPClient\n\nclient = MCPClient()\nmigrations = await client.call(\"show_migrations\")\n```\n\n2. Make Migrations:\n```python\nresult = await client.call(\"make_migrations\", {\n    \"app_labels\": [\"myapp\"],  # Optional\n    \"dry_run\": True  # Optional\n})\n```\n\n3. Apply Migrations:\n```python\nresult = await client.call(\"migrate\", {\n    \"app_label\": \"myapp\",  # Optional\n    \"migration_name\": \"0001\",  # Optional\n    \"fake\": False,  # Optional\n    \"plan\": True  # Optional\n})\n```\n\n## CI/CD Integration\n\nExample GitHub Actions workflow:\n\n```yaml\nname: Django Migrations Check\n\non:\n  pull_request:\n    paths:\n      - '*/migrations/*.py'\n      - '*/models.py'\n\njobs:\n  check-migrations:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v2\n    \n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.11'\n    \n    - name: Install dependencies\n      run: |\n        pip install -r requirements.txt\n    \n    - name: Start MCP service\n      run: |\n        python -m migrations_mcp.service &\n    \n    - name: Check migrations\n      run: |\n        python ci/check_migrations.py\n```\n\nExample check_migrations.py script:\n\n```python\nimport asyncio\nfrom mcp import MCPClient\n\nasync def check_migrations():\n    client = MCPClient()\n    \n    # Check current status\n    migrations = await client.call(\"show_migrations\")\n    \n    # Try making migrations\n    result = await client.call(\"make_migrations\", {\"dry_run\": True})\n    if not result.success:\n        print(f\"Error: {result.message}\")\n        exit(1)\n    \n    print(\"Migration check passed!\")\n\nif __name__ == \"__main__\":\n    asyncio.run(check_migrations())\n```\n\n## Development\n\n### Running Tests\n\n```bash\npytest migrations_mcp/tests/\n```\n\n### Code Style\n\nThe project follows PEP 8 guidelines. Format your code using:\n\n```bash\nblack migrations_mcp/\nisort migrations_mcp/\n```\n\n## License\n\nMIT License. See LICENSE file for details.\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## Docker Usage\n\nThe project includes a `docker-commands.json` file that provides structured commands for different deployment scenarios. You can use these commands directly or parse them in your scripts.\n\n### Available Docker Configurations\n\n1. **Redis MCP Server**\n```bash\n# Run Redis MCP server\ndocker run -i --rm mcp/redis redis://host.docker.internal:6379\n```\n\n2. **Django Migrations MCP Server**\n```bash\n# Basic setup\ndocker run -d \\\n  --name django-migrations-mcp \\\n  -e DJANGO_SETTINGS_MODULE=your_project.settings \\\n  -e MCP_SERVICE_PORT=8000 \\\n  -v /path/to/your/django/project:/app/project \\\n  -p 8000:8000 \\\n  django-migrations-mcp\n\n# With Redis integration\ndocker run -d \\\n  --name django-migrations-mcp \\\n  -e DJANGO_SETTINGS_MODULE=your_project.settings \\\n  -e MCP_SERVICE_PORT=8000 \\\n  -e REDIS_URL=redis://host.docker.internal:6379 \\\n  -v /path/to/your/django/project:/app/project \\\n  -p 8000:8000 \\\n  --network host \\\n  django-migrations-mcp\n```\n\n3. **Development Environment**\n```bash\n# Using docker-compose\ndocker-compose up -d --build\n```\n\n4. **Testing Environment**\n```bash\n# Run tests in container\ndocker run --rm \\\n  -e DJANGO_SETTINGS_MODULE=your_project.settings \\\n  -e PYTHONPATH=/app \\\n  -v ${PWD}:/app \\\n  django-migrations-mcp \\\n  pytest\n```\n\n5. **Production Environment**\n```bash\n# Production setup with health check\ndocker run -d \\\n  --name django-migrations-mcp \\\n  -e DJANGO_SETTINGS_MODULE=your_project.settings \\\n  -e MCP_SERVICE_PORT=8000 \\\n  -e REDIS_URL=redis://your-redis-host:6379 \\\n  -v /path/to/your/django/project:/app/project \\\n  -p 8000:8000 \\\n  --restart unless-stopped \\\n  --network your-network \\\n  django-migrations-mcp\n```\n\n### Using the Commands Programmatically\n\nYou can parse and use the commands programmatically:\n\n```python\nimport json\nimport subprocess\n\n# Load commands\nwith open('docker-commands.json') as f:\n    commands = json.load(f)\n\n# Run Redis MCP server\nredis_config = commands['mcpServers']['redis']\nsubprocess.run([redis_config['command']] + redis_config['args'])\n\n# Run Django Migrations MCP server\ndjango_config = commands['mcpServers']['djangoMigrations']\nsubprocess.run([django_config['command']] + django_config['args'])\n```\n\n### Network Setup\n\n1. **Development Network**\n```bash\ndocker network create mcp-dev-network\n```\n\n2. **Production Network**\n```bash\ndocker network create --driver overlay --attachable mcp-prod-network\n```\n\n### Using MCP Tools\n\nThe service exposes several endpoints that can be accessed via curl or any HTTP client:\n\n1. **Show Migrations**\n```bash\ncurl -X POST http://localhost:8000/mcp \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"method\": \"show_migrations\"}'\n```\n\n2. **Make Migrations**\n```bash\ncurl -X POST http://localhost:8000/mcp \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"method\": \"make_migrations\", \"params\": {\"apps\": [\"your_app\"]}}'\n```\n\n3. **Apply Migrations**\n```bash\ncurl -X POST http://localhost:8000/mcp \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"method\": \"migrate\", \"params\": {\"app\": \"your_app\"}}'\n``` ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "migrations",
        "devops",
        "django",
        "django migrations",
        "migrations mcp",
        "migrations distributed"
      ],
      "category": "devops-and-cicd"
    },
    "punprapor--punprapor": {
      "owner": "punprapor",
      "name": "punprapor",
      "url": "https://github.com/punprapor/punprapor",
      "imageUrl": "/freedevtools/mcp/pfp/punprapor.webp",
      "description": "Connect with a community focused on enhancing DevOps skills through practical insights and collaborative opportunities. Engage with like-minded individuals to foster growth in various tech initiatives.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2022-03-31T07:58:47Z",
      "readme_content": "- 👋 Hi, I’m Dmitry from Belarus.\n- 👀 I’m interested in DevOps, SEO, Marketing and Project Management.\n- 🌱 I’m currently learning DevOps Fundamentals EPAM course and reaching B1 English level.\n- 💞️ I want to collaborate with people who want to change this world like me.\n- 📫 The better way to reach me - is to send me an email (punprapor@gmail.com), it might be weird, but messengers are overloaded nowadays 🤯. By this nickname you also can find me on Skype, and by the reverse nickname 🙃 (from \"r\" to \"p\") - in Telegram if you want.\n\n<!---\npunprapor/punprapor is a ✨ special ✨ repository because its `README.md` (this file) appears on your GitHub profile.\nYou can click the Preview link to take a look at your changes.\n--->\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "devops",
        "tech",
        "punprapor",
        "devops skills",
        "devops cicd",
        "enhancing devops"
      ],
      "category": "devops-and-cicd"
    },
    "yupengfei1209--coding_devops_mcp_server": {
      "owner": "yupengfei1209",
      "name": "coding_devops_mcp_server",
      "url": "https://github.com/yupengfei1209/coding_devops_mcp_server",
      "imageUrl": "/freedevtools/mcp/pfp/yupengfei1209.webp",
      "description": "Manage projects and work items on the CODING platform through a standardized interface, including functionalities to list, search, create, and delete projects and issues.",
      "stars": 1,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-04-23T03:46:39Z",
      "readme_content": "# CODING DevOps MCP Server\n\nCODING DevOps MCP Server 是一个基于 Model Context Protocol (MCP) 的服务器实现，用于与 CODING DevOps 平台进行交互。它提供了一套标准化的接口，使得用户可以方便地管理 CODING 平台上的项目和工作项。\n\n## 功能特性\n\n- 项目管理\n  - 列出用户可访问的项目\n  - 按项目名称搜索项目\n- 工作项（Issues）管理\n  - 创建工作项\n  - 列出工作项\n  - 删除工作项\n  - 支持工作项类型、优先级等属性设置\n\n## 安装\n\n1. Clone this repository:\n```bash\ngit clone https://github.com/yupengfei1209/coding_devops_mcp_server.git\ncd coding_devops_mcp_server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the server:\n```bash\nnpm run build\n```\n\n## 配置\n\n服务器需要以下配置项：\n\n1. CODING Personal Access Token (必需)\n2. 项目名称 (可选)\n\n\n### 添加到 MCP Client\n\n```json\n{\n  \"mcpServers\": {\n    \"coding-devops\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/your_path/coding_devops_mcp_server/build/index.js\"\n      ],\n      \"env\": {\n        \"CODING_TOKEN\": \"coding-token\",\n        \"PROJECT\": \"default project\" // 默认项目,可选配置\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    },\n  }\n}\n```\n\n\n\n## 功能\n\n### 项目管理\n\n- `list_projects`: 列出用户可访问的项目\n  ```typescript\n  // 可选参数\n  {\n    projectName?: string; // 按项目名称筛选\n  }\n  ```\n\n### 工作项管理\n\n- `list_work_items`: 列出工作项\n  ```typescript\n  // 参数\n  {\n    projectName: string;\n    issueType?: string;\n    limit?: string;\n    offset?: string;\n    sortKey?: string;\n    sortValue?: string;\n  }\n  ```\n\n- `create_work_item`: 创建工作项\n  ```typescript\n  // 参数\n  {\n    projectName: string;\n    name: string;\n    type: string;\n    priority: string;\n    description: string;\n  }\n  ```\n\n- `delete_work_item`: 删除工作项\n  ```typescript\n  // 参数\n  {\n    projectName: string;\n    issueCode: number;\n  }\n  ```\n\n## 开发\n\n### 项目结构\n\n```\nsrc/\n├── api/               # API 实现\n├── config/            # 配置相关\n├── tools/            # 工具实现\n│   ├── issue/        # 工作项相关功能\n│   └── project/      # 项目相关功能\n├── errors.ts         # 错误定义\n└── index.ts         # 主入口文件\n```\n\n## 许可证\n\n本项目采用 MIT 许可证。详见 [LICENSE](LICENSE) 文件。",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "coding_devops_mcp_server",
        "devops",
        "cicd",
        "yupengfei1209 coding_devops_mcp_server",
        "coding_devops_mcp_server manage",
        "devops cicd"
      ],
      "category": "devops-and-cicd"
    }
  }
}