{
  "category": "weather-and-location-data",
  "categoryDisplay": "Weather and Location Data",
  "description": "",
  "totalRepositories": 96,
  "repositories": {
    "1259187996--mcp-time": {
      "owner": "1259187996",
      "name": "mcp-time",
      "url": "https://github.com/1259187996/mcp-time",
      "imageUrl": "/freedevtools/mcp/pfp/1259187996.webp",
      "description": "The MCP-Time server is a Node.js application that provides accurate time and date information, allowing users to query the current time in various time zones, calculate date differences, and format time displays.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-23T09:04:55Z",
      "readme_content": "# MCP-Time 服务器\n\n## 项目介绍\nMCP-Time 是一个基于模型上下文协议（Model Context Protocol，简称 MCP）的 Node.js 服务器，专门用于处理时间相关的查询。当大语言模型（如 Claude）在对话中遇到时间相关的问题时，它会调用这个 MCP 服务器来获取准确的时间信息。\n\n## 功能特点\n- 获取当前时间（不同时区）\n- 获取当前日期\n- 计算日期差异\n- 格式化时间显示\n- 支持世界各地主要时区\n\n## 技术栈\n- Node.js\n- @modelcontextprotocol/sdk - 官方 MCP SDK\n- 其他时间处理库\n\n## 使用方法\n1. 安装依赖：`npm install`\n2. 启动服务器：`npm start`\n\n## 示例查询\n- \"现在几点了？\"\n- \"北京时间是几点？\"\n- \"纽约和东京的时差是多少？\"\n- \"三天后是几月几号？\"\n- \"2023年1月1日是星期几？\"\n\n## 项目结构\n- `index.js` - 主入口文件\n- `timeUtils.js` - 时间处理工具函数\n- `package.json` - 项目配置和依赖\n- `Dockerfile` - Docker 构建配置\n- `smithery.yaml` - Smithery.ai 部署配置\n\n## Smithery.ai 部署说明\n本项目已配置为可在 Smithery.ai 平台上部署。部署配置包括：\n\n### Dockerfile\n使用 Node.js 18 Alpine 镜像构建轻量级容器。\n\n### smithery.yaml\n配置文件定义了服务启动方式和配置选项：\n- `defaultTimezone`: 可配置默认时区，默认值为 \"Asia/Shanghai\"\n\n### 部署步骤\n1. 在 Smithery.ai 上创建新的 MCP 服务\n2. 连接到此 GitHub 仓库\n3. 触发部署流程\n4. 在配置中设置所需的默认时区\n\n## 开发者\n本项目由 Claude 3.7 Sonnet 协助开发 ",
      "npm_url": "https://www.npmjs.com/package/mcp-time",
      "npm_downloads": 610,
      "keywords": [
        "mcp",
        "node",
        "time",
        "time mcp",
        "mcp time",
        "time server"
      ],
      "category": "weather-and-location-data"
    },
    "AIAnytime--Awesome-MCP-Server": {
      "owner": "AIAnytime",
      "name": "Awesome-MCP-Server",
      "url": "https://github.com/AIAnytime/Awesome-MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/AIAnytime.webp",
      "description": "Fetch real-time weather details and forecasts, as well as retrieve LinkedIn profile data via external APIs. Also enables retrieval of articles from PubMed based on queries.",
      "stars": 57,
      "forks": 29,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T08:41:15Z",
      "readme_content": "# Awesome-MCP-Server 🚀  \n\nThis repository contains **MCP (Model Context Protocol) servers** . Each folder represents a different MCP server implementation.  \n\n## 📂 Server Implementations  \n\n1. **Weather Server** 🌦️  \n   - Fetches real-time weather details and forecasts.  \n   - Can be integrated with MCP clients like **Claude for Desktop**.  \n\n2. **LinkedIn Profile Server** 🔗  \n   - Retrieves LinkedIn profile data via an external API from RapidAPI.  \n   - Enables AI models to process professional profile insights.\n  \n3. **Fetch PubMed Article Server** 🔗  \n   - Retrieves articles from PubMed given a query.  \n\n## 🛠️ How to Use  \n\n1. Clone the repository:  \n   ```bash\n   git clone https://github.com/AIAnytime/MCP-Servers.git\n   cd MCP-Servers\n   ```\n2. Navigate to the desired server folder. Follow the respective README.md file for instructions.\n3. Watch the MCP Playlist on AI Anytime YT Channel if you face any problem.\n\n## 📢 Contribute  \nFeel free to open issues, submit pull requests, or suggest improvements!  \n\n## 📜 License  \nThis project is open-source under the **MIT License**.  \n\n---\n\n🔔 **Like this project?** Give it a ⭐ on GitHub!  \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "linkedin",
        "apis",
        "aianytime",
        "data aianytime",
        "retrieve linkedin",
        "forecasts retrieve"
      ],
      "category": "weather-and-location-data"
    },
    "AidenYangX--mapbox-mcp-server": {
      "owner": "AidenYangX",
      "name": "mapbox-mcp-server",
      "url": "https://github.com/AidenYangX/mapbox-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/AidenYangX.webp",
      "description": "Provides navigation and mapping functionalities through the Mapbox API, enabling users to obtain directions between coordinates or places with various transportation profiles.",
      "stars": 12,
      "forks": 10,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-06-20T00:57:51Z",
      "readme_content": "<!--\n * @Author: AidenYangX\n * @Email: xscs709560271@gmail.com\n * @Date: 2024-12-21 23:30:55\n * @Description: Mapbox MCP Server\n-->\n\n# Mapbox MCP Server\n\nMCP Server for the Mapbox API.\n\n## Features\n\n### Navigation Tools\n\n1. `mapbox_directions`\n\n   - Get directions between coordinates\n   - Inputs:\n     - `coordinates` ({latitude: number, longitude: number}[])\n     - `profile` (optional): \"driving-traffic\", \"driving\", \"walking\", \"cycling\"\n   - Returns: route details with steps, distance, duration\n\n2. `mapbox_directions_by_places`\n\n   - Get directions between places using their names\n   - Inputs:\n     - `places` (string[]): Array of place names\n     - `profile` (optional): \"driving-traffic\", \"driving\", \"walking\", \"cycling\"\n     - `language` (optional): Two-letter language code (e.g., \"zh\", \"en\")\n   - Returns:\n     - Geocoding results for each place\n     - Route details with steps, distance, duration\n     - Any errors that occurred during processing\n\n3. `mapbox_matrix`\n\n   - Calculate travel time and distance matrices between coordinates\n   - Inputs:\n     - `coordinates` ({latitude: number, longitude: number}[])\n     - `profile` (optional): \"driving\", \"walking\", \"cycling\"\n     - `annotations` (optional): \"duration\", \"distance\", \"duration,distance\"\n     - `sources` (optional): Indices of source coordinates\n     - `destinations` (optional): Indices of destination coordinates\n   - Returns: Matrix of durations and/or distances between points\n\n4. `mapbox_matrix_by_places`\n   - Calculate travel time and distance matrices between places using their names\n   - Inputs:\n     - `places` (string[]): Array of place names (2-25 places)\n     - `profile` (optional): \"driving\", \"walking\", \"cycling\"\n     - `annotations` (optional): \"duration\", \"distance\", \"duration,distance\"\n     - `language` (optional): Two-letter language code\n     - `sources` (optional): Indices of source places\n     - `destinations` (optional): Indices of destination places\n   - Returns:\n     - Geocoding results for each place\n     - Matrix of durations and/or distances\n     - Any errors that occurred during processing\n\n### Search Tools\n\n1. `mapbox_geocoding`\n   - Search for places and convert addresses into coordinates\n   - Inputs:\n     - `searchText` (string): The place or address to search for\n     - `limit` (optional): Maximum number of results (1-10)\n     - `types` (optional): Filter by place types (country, region, place, etc.)\n     - `language` (optional): Two-letter language code\n     - `fuzzyMatch` (optional): Enable/disable fuzzy matching\n   - Returns: Detailed location information including coordinates and properties\n\n## Claude Desktop Integration\n\nAdd this configuration to your Claude Desktop config file (typically located at `~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"mapbox-mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/mapbox-mcp-server/build/index.js\"],\n      \"env\": {\n        \"MAPBOX_ACCESS_TOKEN\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\n## Setup\n\n### Prerequisites\n\n- Node.js 16 or higher\n- TypeScript 4.5 or higher\n- A valid Mapbox API key\n\n### API Key\n\nGet a Mapbox API key by following the instructions [here](https://console.mapbox.com/account/access-tokens/).\n\nSet your API key as an environment variable:\n\n```bash\nexport MAPBOX_ACCESS_TOKEN=your_api_key_here\n```\n\n## Rate Limits\n\n- Directions API: 300 requests per minute\n- Matrix API:\n  - 60 requests per minute for driving/walking/cycling\n  - 30 requests per minute for driving-traffic\n- Geocoding API: 600 requests per minute\n\n## Deployment\n\n### Structure\n\nIn mapbox-mcp-server, we use the following structure to manage the server's handlers:\n\n- `src/server/handlers/base.ts`: Base class for all handlers\n- `src/server/registry.ts`: Registry for all handlers\n- `src/server/main.ts`: Main entry point for the server\n\nEach feature module follows this structure:\n\n```plaintext\nsrc/\n├── types/          # Type definitions\n├── schemas/        # Zod schemas for validation\n├── tools/\n│   ├── definitions/  # Tool definitions\n│   └── handlers/     # Tool implementations\n└── server/\n    └── handlers/     # Handler classes\n```\n\n---\n\n**Class Diagram**:\n![mapbox-mcp-server-class-diagram](./assets/MapboxMCPServerClass.png)\n\n---\n\n**Process Diagram**:\n![mapbox-mcp-server-process-diagram](./assets/MapboxMCPServerProcess.png)\n\n## Error Handling\n\nAll tools implement comprehensive error handling:\n\n- Input validation errors\n- API request failures\n- Rate limit errors\n- Service-specific errors (e.g., no routes found, invalid coordinates)\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mapbox",
        "mcp",
        "mapping",
        "aidenyangx mapbox",
        "mapbox mcp",
        "mapbox api"
      ],
      "category": "weather-and-location-data"
    },
    "AnCode666--aemet-mcp": {
      "owner": "AnCode666",
      "name": "aemet-mcp",
      "url": "https://github.com/AnCode666/aemet-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/AnCode666.webp",
      "description": "Provides access to historical and current meteorological data from Spain's State Meteorological Agency, enabling retrieval of climate summaries, daily weather values, and beach condition reports through natural language queries with date and location filters.",
      "stars": 2,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-27T18:35:19Z",
      "readme_content": "# AEMET-MCP. Integration via MCP with the AEMET API\n\n[![en](https://img.shields.io/badge/lang-en-red.svg)](README.md)\n[![es](https://img.shields.io/badge/lang-es-yellow.svg)](README_es.md)\n\n## DESCRIPTION\n\n**AEMET is the State Meteorological Agency of Spain.**\n\n**Aemet-mcp** allows you to retrieve historical climate data and meteorological information from the AEMET API directly from Claude AI and other MCP compatible clients, using the **Model Context Protocol (MCP)**.\n\nAemet-mcp is an MCP server that exposes tools enabling LLMs to query data from weather stations across Spain.\n\nIt includes secure handling of API keys and resource JSON files for using supporting data.\n\n## KEY FEATURES\n\n- Query for **historical daily values** (temperature, wind, precipitation, etc.)\n- Access to **monthly climate summaries** by station.\n- Filtering by year, month, and AEMET station code.\n- Query beach conditions, including ultraviolet radiation indices.\n- **Rainfall data analysis prompt** for Spanish municipalities with historical precipitation data\n- Responses ready for use in JSON format.\n\n## INSTALLATION\n\n### Installing via Smithery\n\nTo install AEMET Weather Data Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@AnCode666/aemet-mcp):\n\n```bash\nnpx -y @smithery/cli install @AnCode666/aemet-mcp --client claude\n```\n\n### Install with uv\n\n### Prerequisites\n\n- Python 3.10 or higher.\n- [uv](https://docs.astral.sh/uv/getting-started/installation/) package manager.\n\n### Installing uv\n\nThe first step is to install `uv`, a package manager for Python.  \n**It can be installed from the command line**.\n\nOn macOS and Linux:\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\nOn Windows:  \n\n```bash\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\nYou can also install it with pip:  \n\n```bash\npip install uv\n```\n\nFor more information about installing uv, visit the [uv documentation](https://docs.astral.sh/uv/getting-started/installation/).\n\n### Install with Docker\n\nYou can also run AEMET-MCP using Docker:\n\n#### Prerequisites\n\n- [Docker](https://docs.docker.com/get-docker/) installed on your system\n\n#### Steps\n\n1. **Build the Docker image:**\n\n```bash\ndocker build -t aemet-mcp .\n```\n\n2. **Run the container:**\n\n```bash\ndocker run -e AEMET_API_KEY=YOUR_AEMET_API_KEY aemet-mcp\n```\n\nReplace `YOUR_AEMET_API_KEY` with your actual API key from AEMET.\n\n#### Integration with Claude Desktop using Docker\n\nTo use the Docker version with Claude Desktop, add this configuration to your `claude_desktop_config.json`:\n\n```json\n\"aemet_mcp_docker\": {\n    \"command\": \"docker\",\n    \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"AEMET_API_KEY=YOUR_AEMET_API_KEY\",\n        \"aemet-mcp\"\n    ]\n}\n```\n\n## INTEGRATION WITH CLIENTS LIKE CLAUDE DESKTOP\n\nOnce **uv** is installed, you can use the MCP server from any compatible client such as Claude for Desktop, in which case the steps to follow are:\n\n1. Go to **Claude > Settings > Developer > Edit Config > `claude_desktop_config.json`**\n2. Add the following block inside `\"mcpServers\"`:\n\n```json\n\"aemet_mcp_\": {\n    \"command\": \"uvx\",\n    \"args\": [\n        \"aemet_mcp\"\n    ],\n    \"env\": {\n        \"AEMET_API_KEY\": \"YOUR_AEMET_API_KEY\"\n    }\n}\n```\n\n3. Get a free API key from AEMET at: <https://opendata.aemet.es/centrodedescargas/altaUsuario>\n4. Replace `YOUR_AEMET_API_KEY` with your actual API key (leave the quotes).\n5. If you already have another MCP server configured, separate each with a comma `,`.\n\nIn general, to integrate it into any other MCP-compatible client such as Cursor, CODEGPT, or Roo Code, simply go to the MCP server configuration of your client and add the same code block.\n\n## USAGE EXAMPLES\n\nOnce properly configured, you can ask things like:\n\n- \"What's the weather like in Seville?\"\n- \"Give me a list of the beaches in the province of Málaga\"\n- \"Tell me the radiation levels at Maspalomas beach for tomorrow\"\n- \"Give me the historical rainfall data for Albacete between January 1st, 2020 and February 1st, 2020\"\n- \"Give me a list of the weather stations within a 50 km radius from the coordinates lat:40.4165, lon:-3.70256\"\n\n### Rainfall Data Analysis\n\nThe server includes a specialized prompt for analyzing historical precipitation data for Spanish municipalities. Use the `obtener_datos_lluvia_municipio` prompt with:\n\n```\nobtener_datos_lluvia_municipio(\"Madrid\", \"2023-01-01\", \"2023-12-31\")\n```\n\nThis prompt provides structured guidance for meteorological analysis, including:\n- Municipality code search and validation\n- Nearest weather station identification\n- Historical precipitation data retrieval\n- Statistical analysis and trend identification\n- Climate pattern analysis with seasonal variations\n- Data visualization recommendations\n\n## DISTRIBUTIONS\n\n### Smithery\n\n[![smithery badge](https://smithery.ai/badge/@AnCode666/aemet-mcp)](https://smithery.ai/server/@AnCode666/aemet-mcp)\n\n### Glama\n\n<a href=\"https://glama.ai/mcp/servers/@AnCode666/aemet-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@AnCode666/aemet-mcp/badge\" alt=\"AEMET-MCP MCP server\" />\n</a>\n\n### MseeP\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/ancode666-aemet-mcp-badge.png)](https://mseep.ai/app/ancode666-aemet-mcp)\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/ancode666-aemet-mcp)\n\n### MCP Review\n\n[MCP review certified](https://mcpreview.com/mcp-servers/ancode666/aemet-mcp)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "meteorological",
        "weather",
        "climate",
        "meteorological data",
        "weather location",
        "data spain"
      ],
      "category": "weather-and-location-data"
    },
    "AtulanZaman--adk_mcp_gmap": {
      "owner": "AtulanZaman",
      "name": "adk_mcp_gmap",
      "url": "https://github.com/AtulanZaman/adk_mcp_gmap",
      "imageUrl": "/freedevtools/mcp/pfp/AtulanZaman.webp",
      "description": "Enable interactive chat capabilities with Google Maps data through a streaming agent that integrates with the Google ADK and Maps toolset for location-based information.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-28T00:48:07Z",
      "readme_content": "# ADK MCP Agent\n\nA streaming chat agent using Google ADK and the Model Context Protocol (MCP) Google Maps toolset.\n\n## Local Development\n\n1. Install dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n2. Set up `.env` in `app/` with your API keys.\n\n3. Run locally:\n   ```bash\n   export SSL_CERT_FILE=$(python -m certifi)\n   uvicorn app.main:app --reload\n   ```\n\n## Project Structure\n\n```\nadk-mcp-agent/\n├── app/\n│   ├── main.py\n│   ├── static/\n│   │   └── index.html\n│   └── .env\n├── agent/\n│   └── agents.py\n├── requirements.txt\n├── Dockerfile\n├── README.md\n└── .gitignore\n```\n\n- The agent logic is in the `agent/` directory (`agent/agents.py`).\n- The FastAPI app and UI are in the `app/` directory.\n\n## Deployment\n\nTo test and run the app locally with the UI:\n\n1. **Install dependencies:**\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n2. **Set up environment variables:**\n   - Create a `.env` file inside the `app/` directory with your API keys:\n     ```env\n     GOOGLE_GENAI_USE_VERTEXAI=FALSE\n     GOOGLE_API_KEY=your_genai_api_key\n     GOOGLE_MAPS_API_KEY=your_google_maps_api_key\n     ```\n\n3. **Run the FastAPI app:**\n   ```bash\n   export SSL_CERT_FILE=$(python -m certifi)\n   uvicorn app.main:app --reload\n   ```\n\n4. **Access the UI:**\n   - Open your browser and go to [http://localhost:8000](http://localhost:8000)\n   - You can now interact with the chat interface and test the agent locally.\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "adk_mcp_gmap",
        "maps",
        "chat",
        "google maps",
        "location data",
        "google adk"
      ],
      "category": "weather-and-location-data"
    },
    "CaChiJ--kakao-navigation-mcp-server": {
      "owner": "CaChiJ",
      "name": "kakao-navigation-mcp-server",
      "url": "https://github.com/CaChiJ/kakao-navigation-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/CaChiJ.webp",
      "description": "Provides location search and route finding services using Kakao's mapping API, enabling geocoding of addresses and optimal path calculation across various transportation modes with consideration for real-time traffic data.",
      "stars": 9,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-25T00:00:12Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/cachij-kakao-navigation-mcp-server-badge.png)](https://mseep.ai/app/cachij-kakao-navigation-mcp-server)\n\n# Kakao Mobility & Kakao Map MCP Server\n\n[![MCP](https://img.shields.io/badge/MCP-Compliant-blue)](https://github.com/cursor-ai/model-context-protocol)\n[![smithery badge](https://smithery.ai/badge/@CaChiJ/kakao-mobility-mcp-server)](https://smithery.ai/server/@CaChiJ/kakao-mobility-mcp-server)\n\n## 소개\n\n본 레포지토리는 Model Context Protocol (MCP)을 준수하여 카카오 모빌리티 및 카카오맵 API와 연동되는 서버를 제공합니다. 국내 환경에 적합한 길찾기 서비스를 제공하는 것을 목표로 합니다.\n\n## 주요 기능\n\n### 1. 위치 검색 (지오코딩)\n- 주소나 장소명을 좌표(위도/경도)로 변환\n- 정확한 위치 정보 제공\n\n### 2. 길찾기 서비스\n- 출발지에서 목적지까지의 최적 경로 검색\n- 도보, 자동차 등 다양한 이동 수단 지원\n- 실시간 교통 정보 반영\n\n## 시작하기\n1. [kakao developers](https://developers.kakao.com/)에 로그인합니다.\n2. 애플리케이션 생성\n  - '내 애플리케이션' > '애플리케이션 추가하기' > 애플리케이션 정보 입력 후 '저장'\n3. 카카오 맵 API 활성화\n  - 사이드바에서 '카카오 맵' 선택 > '활성화 설정' ON\n4. REST API Key 발급\n  - 사이드바에서 '앱 키' 선택 > 'REST API 키' 복사해 사용\n\n## 제공 도구\n\n본 서버는 다음과 같은 MCP 도구들을 제공합니다:\n\n- `geocode`: 주소를 좌표 정보로 지오코딩\n- `direction_search_by_names`: 출발지와 목적지 주소로 길찾기\n- `direction_search_by_coordinates`: 출발지와 목적지 좌표로 길찾기\n- `future_direction_search_by_coordinates`: 출발지와 목적지 좌표로 미래 특정 시점의 길찾기\n- `address_search_by_place_name`: 장소 이름으로 주소 찾기\n\n## 배포 정보\n\n본 서버의 배포 정보 및 최신 업데이트는 Smithery에서 확인하실 수 있습니다.\n\n---\nMade with ❤️ using Model Context Protocol\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "geocoding",
        "kakao",
        "cachij",
        "kakao navigation",
        "kakao mapping",
        "location data"
      ],
      "category": "weather-and-location-data"
    },
    "CodeByWaqas--weather-mcp-server": {
      "owner": "CodeByWaqas",
      "name": "weather-mcp-server",
      "url": "https://github.com/CodeByWaqas/weather-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/CodeByWaqas.webp",
      "description": "Retrieve real-time weather data including temperature, humidity, and wind speed using the OpenWeatherMap API. Provides detailed insights and weather descriptions in metric units.",
      "stars": 2,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-06-24T14:05:18Z",
      "readme_content": "# Weather MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@CodeByWaqas/weather-mcp-server)](https://smithery.ai/server/@CodeByWaqas/weather-mcp-server)\n\nA Modern Code Protocol (MCP) server that provides weather information using the OpenWeatherMap API.\n\n## Features\n\n- Real-time weather data retrieval\n- Metric units for temperature\n- Detailed weather information including:\n  - Temperature\n  - Humidity\n  - Wind Speed\n  - Sunrise/Sunset times\n  - Weather description\n\n## Prerequisites\n\n- Python 3.12 or higher\n- OpenWeatherMap API key\n\n## Installation\n\n### Installing via Smithery\n\nTo install Weather MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@CodeByWaqas/weather-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @CodeByWaqas/weather-mcp-server --client claude\n```\n\n### Manual Installation\n1. Clone the repository\n2. Create a virtual environment:\n```bash\npython -m venv .venv\nsource .venv/bin/activate  # On Windows use: .venv\\Scripts\\activate\n```\n3. Install dependencies:\n```bash\npip install -e .\n```\n\n## Setup Intructions\n\n### Setup with Claude Desktop\n```json\n# claude_desktop_config.json\n# Can find location through:\n# Claude -> Settings -> Developer -> Edit Config\n{\n  \"mcpServers\": {\n      \"mcp-weather-project\": {\n          \"command\": \"uv\",\n          \"args\": [\n              \"--directory\",\n              \"/<absolute-path>/weather-mcp-server/src/resources\",\n              \"run\",\n              \"server.py\"\n          ],\n          \"env\": {\n            \"WEATHER_API_KEY\": \"YOUR_API_KEY\"\n          }\n      }\n  }\n}\n```\n## Local/Dev Setup Instructions\n### Clone repo\n`git clone https://github.com/CodeByWaqas/weather-mcp-server`\n### Install dependencies\nInstall MCP server dependencies:\n```bash\ncd weather-mcp-server\n\n# Create virtual environment and activate it\nuv venv\n\nsource .venv/bin/activate # MacOS/Linux\n# OR\n.venv/Scripts/activate # Windows\n\n# Install dependencies\nuv add \"mcp[cli]\" python-dotenv requests httpx\n```\n\n## Configuration\n\n1. Copy `src/resources/env.example` to `src/resources/.env`\n2. Add your OpenWeatherMap API key to the `.env` file:\n```\nWEATHER_API_KEY=your_api_key_here\n```\n\n## Usage\n\nRun the Claude Desktop and use LLM to retrieve weather info\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
      "npm_url": "https://www.npmjs.com/package/weather-mcp-server",
      "npm_downloads": 405,
      "keywords": [
        "openweathermap",
        "weather",
        "api",
        "weather data",
        "openweathermap api",
        "using openweathermap"
      ],
      "category": "weather-and-location-data"
    },
    "Curtains415--0xbot-weather": {
      "owner": "Curtains415",
      "name": "0xbot-weather",
      "url": "https://github.com/Curtains415/0xbot-weather",
      "imageUrl": "/freedevtools/mcp/pfp/Curtains415.webp",
      "description": "Provides real-time weather information and forecasts through a standardized interface, enabling applications to seamlessly query weather data for various locations.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-18T02:03:49Z",
      "readme_content": "# Weather MCP Server\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "weather",
        "curtains415",
        "forecasts",
        "weather data",
        "weather information",
        "query weather"
      ],
      "category": "weather-and-location-data"
    },
    "Cyreslab-AI--flightradar-mcp-server": {
      "owner": "Cyreslab-AI",
      "name": "flightradar-mcp-server",
      "url": "https://github.com/Cyreslab-AI/flightradar-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Cyreslab-AI.webp",
      "description": "Access real-time flight tracking and status information, retrieve detailed flight data, and search for flights based on various criteria such as airline or airports.",
      "stars": 6,
      "forks": 1,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-25T11:19:06Z",
      "readme_content": "# FlightRadar MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@Cyreslab-AI/flightradar-mcp-server)](https://smithery.ai/server/@Cyreslab-AI/flightradar-mcp-server)\n\nA Model Context Protocol (MCP) server that provides real-time flight tracking and status information using the AviationStack API.\n\n<a href=\"https://glama.ai/mcp/servers/@Cyreslab-AI/flightradar-mcp-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@Cyreslab-AI/flightradar-mcp-server/badge\" alt=\"FlightRadar Server MCP server\" />\n</a>\n\n## Features\n\nThis MCP server provides three main tools:\n\n1. **get_flight_data**: Get detailed information about a specific flight by its IATA or ICAO code\n2. **search_flights**: Search for flights by various criteria like airline, departure/arrival airports, and status\n3. **get_flight_status**: Get a human-readable status summary for a specific flight\n\n## Installation\n\n### Installing via Smithery\n\nTo install flightradar-mcp-server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@Cyreslab-AI/flightradar-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @Cyreslab-AI/flightradar-mcp-server --client claude\n```\n\n### Prerequisites\n\n- Node.js (v14 or higher)\n- npm (v6 or higher)\n- An AviationStack API key (get one at [aviationstack.com](https://aviationstack.com/))\n\n### Setup\n\n1. Clone this repository:\n\n   ```bash\n   git clone https://github.com/Cyreslab-AI/flightradar-mcp-server.git\n   cd flightradar-mcp-server\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   npm install\n   ```\n\n3. Build the server:\n\n   ```bash\n   npm run build\n   ```\n\n4. Configure the server in your MCP settings file:\n\n   For Claude VSCode extension, add to `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"flightradar\": {\n         \"command\": \"node\",\n         \"args\": [\"/path/to/flightradar-mcp-server/build/index.js\"],\n         \"env\": {\n           \"AVIATIONSTACK_API_KEY\": \"YOUR_API_KEY_HERE\"\n         },\n         \"disabled\": false,\n         \"autoApprove\": []\n       }\n     }\n   }\n   ```\n\n   For Claude desktop app, add to `~/Library/Application Support/Claude/claude_desktop_config.json` (macOS) or similar path on other platforms.\n\n## Usage Examples\n\nOnce the server is configured, you can use it with Claude to get flight information:\n\n### Get Flight Status\n\n```\nUser: What's the status of flight BA855?\n\nClaude: Flight BA855 (British Airways) is currently landed.\n\nDeparture: Prague Vaclav Havel Airport (PRG), Terminal 1, Gate B5\nScheduled: 3/25/2025, 11:50:00 AM\nEstimated: 3/25/2025, 11:50:00 AM\n\nArrival: Heathrow (LHR), Terminal 3\nScheduled: 3/25/2025, 1:10:00 PM\n```\n\n### Search Flights\n\n```\nUser: Find British Airways flights\n\nClaude: I found 3212 British Airways flights. Here are the first 3:\n\n1. BA5719: Tucson (TUS) to Dallas/Fort Worth (DFW)\n   Status: scheduled\n   Departure: 3/25/2025, 5:00:00 AM\n\n2. BA6096: Prague (PRG) to Helsinki (HEL)\n   Status: scheduled\n   Departure: 3/25/2025, 11:40:00 AM\n\n3. BA855: Prague (PRG) to London Heathrow (LHR)\n   Status: landed\n   Departure: 3/25/2025, 10:50:00 AM\n```\n\n### Get Flight Details\n\n```\nUser: Get detailed information about flight BA855\n\nClaude: Here are the details for flight BA855:\n\nFlight: BA855 (BAW855)\nAirline: British Airways\nAircraft: Airbus A320 (Registration: G-EUUH)\n\nDeparture:\n- Airport: Prague Vaclav Havel Airport (PRG/LKPR)\n- Terminal: 1, Gate: B5\n- Scheduled: 3/25/2025, 10:50:00 AM\n\nArrival:\n- Airport: London Heathrow (LHR/EGLL)\n- Terminal: 3\n- Scheduled: 3/25/2025, 12:10:00 PM\n\nStatus: landed\n```\n\n## API Key Configuration\n\nThis server requires an AviationStack API key to function. You can get a free API key (100 requests/month) at [aviationstack.com](https://aviationstack.com/).\n\nThe API key should be provided as an environment variable named `AVIATIONSTACK_API_KEY` in your MCP settings configuration.\n\n## License\n\nMIT",
      "npm_url": "https://www.npmjs.com/package/flightradar-mcp-server",
      "npm_downloads": 47837,
      "keywords": [
        "flightradar",
        "flights",
        "airline",
        "flight data",
        "flight tracking",
        "flightradar mcp"
      ],
      "category": "weather-and-location-data"
    },
    "GongRzhe--TRAVEL-PLANNER-MCP-Server": {
      "owner": "GongRzhe",
      "name": "TRAVEL-PLANNER-MCP-Server",
      "url": "https://github.com/GongRzhe/TRAVEL-PLANNER-MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/GongRzhe.webp",
      "description": "Enables interaction with Google Maps and travel planning services for tasks including location search, place details lookup, and travel time calculations.",
      "stars": 86,
      "forks": 28,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-01T15:16:59Z",
      "readme_content": "# Travel Planner MCP Server (@gongrzhe/server-travelplanner-mcp)\n[![smithery badge](https://smithery.ai/badge/@GongRzhe/TRAVEL-PLANNER-MCP-Server)](https://smithery.ai/server/@GongRzhe/TRAVEL-PLANNER-MCP-Server)\n\nA Travel Planner Model Context Protocol (MCP) server implementation for interacting with Google Maps and travel planning services. This server enables LLMs to perform travel-related tasks such as location search, place details lookup, and travel time calculations.\n\n<a href=\"https://glama.ai/mcp/servers/y3u6yjiiq1\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/y3u6yjiiq1/badge\" alt=\"Travel Planner Server MCP server\" />\n</a>\n\n## Installation & Usage\n### Installing via Smithery\n\nTo install Travel Planner for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@GongRzhe/TRAVEL-PLANNER-MCP-Server):\n\n```bash\nnpx -y @smithery/cli install @GongRzhe/TRAVEL-PLANNER-MCP-Server --client claude\n```\n\n### Installing Manually\n```bash\n# Using npx (recommended)\nnpx @gongrzhe/server-travelplanner-mcp\n\n# With environment variable for Google Maps API\nGOOGLE_MAPS_API_KEY=your_api_key npx @gongrzhe/server-travelplanner-mcp\n```\n\nOr install globally:\n\n```bash\n# Install globally\nnpm install -g @gongrzhe/server-travelplanner-mcp\n\n# Run after global installation\nGOOGLE_MAPS_API_KEY=your_api_key @gongrzhe/server-travelplanner-mcp\n```\n\n## Components\n\n### Tools\n\n- **searchPlaces**\n  - Search for places using Google Places API\n  - Input:\n    - `query` (string): Search query for places\n    - `location` (optional): Latitude and longitude to bias results\n    - `radius` (optional): Search radius in meters\n\n- **getPlaceDetails**\n  - Get detailed information about a specific place\n  - Input:\n    - `placeId` (string): Google Place ID to retrieve details for\n\n- **calculateRoute**\n  - Calculate route between two locations\n  - Input:\n    - `origin` (string): Starting location\n    - `destination` (string): Ending location\n    - `mode` (optional): Travel mode (driving, walking, bicycling, transit)\n\n- **getTimeZone**\n  - Get timezone information for a location\n  - Input:\n    - `location`: Latitude and longitude coordinates\n    - `timestamp` (optional): Timestamp for time zone calculation\n\n## Configuration\n\n### Usage with Claude Desktop\n\nTo use this server with the Claude Desktop app, add the following configuration to the \"mcpServers\" section of your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"travel-planner\": {\n      \"command\": \"npx\",\n      \"args\": [\"@gongrzhe/server-travelplanner-mcp\"],\n      \"env\": {\n        \"GOOGLE_MAPS_API_KEY\": \"your_google_maps_api_key\"\n      }\n    }\n  }\n}\n```\n\nAlternatively, you can use the node command directly if you have the package installed:\n\n```json\n{\n  \"mcpServers\": {\n    \"travel-planner\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/dist/index.js\"],\n      \"env\": {\n        \"GOOGLE_MAPS_API_KEY\": \"your_google_maps_api_key\"\n      }\n    }\n  }\n}\n```\n\n## Development\n\n### Building from Source\n\n1. Clone the repository\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n\n### Environment Variables\n\n- `GOOGLE_MAPS_API_KEY` (required): Your Google Maps API key with the following APIs enabled:\n  - Places API\n  - Directions API\n  - Geocoding API\n  - Time Zone API\n\n## License\n\nThis MCP server is licensed under the MIT License. For more details, please see the LICENSE file in the project repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "planner",
        "mcp",
        "planning",
        "planner mcp",
        "location data",
        "travel planner"
      ],
      "category": "weather-and-location-data"
    },
    "GreatAuk--mcp-weather": {
      "owner": "GreatAuk",
      "name": "mcp-weather",
      "url": "https://github.com/GreatAuk/mcp-weather",
      "imageUrl": "/freedevtools/mcp/pfp/GreatAuk.webp",
      "description": "Build and deploy a Model Context Protocol server that provides access to weather data, allowing for integration with various AI models. Utilizes TypeScript for server implementation and includes features for fast development and automated version management.",
      "stars": 4,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-05-11T13:49:59Z",
      "readme_content": "# MCP Server Starter\n\n[![smithery badge](https://smithery.ai/badge/@GreatAuk/mcp-weather)](https://smithery.ai/server/@GreatAuk/mcp-weather)\n\nA production-ready starter template for building Model Context Protocol (MCP) servers with TypeScript.\n\n<a href=\"https://glama.ai/mcp/servers/rlkcxdr2y9\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/rlkcxdr2y9/badge\" alt=\"Server Starter MCP server\" /></a>\n\n## 🚀 Quick Start\n\n1. Clone the repository\n2. Install dependencies:\n   ```bash\n   bun install\n   ```\n\n## ✨ Key Features\n\n- Bun for fast testing and development\n- Biome for linting and formatting\n- Automated version management with standard-version\n- Clean, maintainable project structure\n\n## 📂 Project Structure\n\n```\nmcp-starter/\n├── src/\n│   ├── tools/          # MCP tools implementation\n│   ├── utils/          # Shared utilities\n│   ├── main.ts         # Server entry point\n│   └── types.ts        # Shared type definitions\n├── tests/              # Test files\n├── biome.json          # Linting configuration\n├── tsconfig.json       # TypeScript configuration\n└── package.json        # Project dependencies\n```\n\n## ⚙️ Configuration\n\n### Creating New Tools\n\nThe project includes a script to help create new MCP tools:\n\n```bash\nbun run scripts/create-tool.ts <tool-name>\n```\n\nThis will:\n1. Create a new tool directory under `src/tools/<tool-name>`\n2. Generate the basic tool structure including:\n   - index.ts (main implementation)\n   - schema.ts (JSON schema for tool parameters)\n   - test.ts (test file)\n3. Update the tools index file to export the new tool\n\nExample:\n```bash\nbun run scripts/create-tool.ts weather\n```\n\n## 🛠️ Development\n\n- **Run tests**: `bun test`\n- **Format code**: `bun run format`\n- **Lint code**: `bun run lint`\n- **Build project**: `bun run build`\n\nTo add your development MCP server to Claude Desktop:\n\n1. Build the project:\n   ```bash\n   bun run build\n   ```\n2. Add to your Claude Desktop config:\n   ```json\n   // You only need the argument if you need to pass arguments to your server\n   {\n     \"mcpServers\": {\n       \"your-server-name\": {\n         \"command\": \"node\",\n         \"args\": [\"/path/to/your/project/dist/main.js\", \"some_argument\"]\n       }\n     }\n   }\n   ```\n\n## 📜 Version Management\n\nThis project uses [standard-version](https://github.com/conventional-changelog/standard-version) for automated version management. Run `bun run release` to create a new version.\n\n### Commit Message Format\n- `feat`: New feature (bumps minor version)\n- `fix`: Bug fix (bumps patch version)\n- `BREAKING CHANGE`: Breaking change (bumps major version)\n\n## 📦 Publishing to npm\n\n1. Ensure you're logged in to npm:\n   ```bash\n   npm login\n   ```\n2. Build the project:\n   ```bash\n   bun run build\n   ```\n3. Publish the package:\n   ```bash\n   npm publish\n   ```\nRemember to update the version number using `bun run release` before publishing new versions.\n\n## Installing via Smithery\n\nTo install Weather MCP Server Starter for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@GreatAuk/mcp-weather):\n\n```bash\nnpx -y @smithery/cli install @GreatAuk/mcp-weather --client claude\n```\n\n## Installing from npm (after publishing)\n\nAdd to your Claude Desktop config:\n```json\n// You only need the argument if you need to pass arguments to your server\n{\n  \"mcpServers\": {\n    \"your-server-name\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"your-package-name\", \"some_argument\"]\n    }\n  }\n}\n",
      "npm_url": "https://www.npmjs.com/package/mcp-weather",
      "npm_downloads": 219,
      "keywords": [
        "protocol",
        "weather",
        "typescript",
        "weather data",
        "access weather",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "JackKuo666--Weather-MCP-Server": {
      "owner": "JackKuo666",
      "name": "Weather-MCP-Server",
      "url": "https://github.com/JackKuo666/Weather-MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/JackKuo666.webp",
      "description": "Retrieve real-time weather information using the National Weather Service API, including alerts and forecasts for specific locations based on latitude and longitude.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-18T08:53:50Z",
      "readme_content": "# Weather MCP Server\n\nThis is a Model Context Protocol (MCP) server that provides weather information using the National Weather Service (NWS) API.\n\n## Features\n\n- Get weather alerts for a US state\n- Get weather forecast for a specific location (using latitude and longitude)\n\n## Requirements\n\n- Python 3.10+\n- FastMCP\n- httpx\n\n## Installation\n\n1. Clone this repository\n2. Set up a virtual environment:\n   ```\n   python -m venv .venv\n   source .venv/bin/activate  # On Windows, use `.venv\\Scripts\\activate`\n   ```\n3. Install the required packages using uv:\n   ```\n   uv add \"mcp[cli]\" httpx\n   ```\n\n## Configuration\n\nThe server uses a configuration file `config.py` with the following settings:\n\n- `NWS_API_BASE`: The base URL for the National Weather Service API\n- `USER_AGENT`: The User-Agent string used when making requests to the NWS API\n- `LOG_LEVEL`: The logging level (e.g., \"INFO\", \"DEBUG\")\n- `LOG_FORMAT`: The format string for log messages\n- `REQUEST_TIMEOUT`: The timeout for API requests in seconds\n\nYou can modify these settings in the `config.py` file to customize the server behavior.\n\n## Usage\n\n### Running the server standalone\n\nTo run the server standalone:\n\n1. Activate the virtual environment if not already activated:\n   ```\n   source .venv/bin/activate  # On Windows, use `.venv\\Scripts\\activate`\n   ```\n2. Run the server:\n   ```\n   python weather.py\n   ```\n\n### Using with Cline\n\nThe Weather MCP Server has been added to the Cline configuration. To use it within Cline:\n\n1. Ensure that Cline is properly set up and running.\n2. The Weather MCP Server will be available as a tool named \"weather\".\n3. You can use the following tools within Cline:\n\n   a. `get_alerts(state: str)`: Get weather alerts for a US state (use two-letter state code, e.g., \"CA\" for California)\n   b. `get_forecast(latitude: float, longitude: float)`: Get weather forecast for a specific location\n\nExample usage in Cline:\n\n```\n# Get alerts for California\nresult = await mcp.call_tool(\"weather.get_alerts\", state=\"CA\")\nprint(result)\n\n# Get forecast for San Francisco (approximate coordinates)\nresult = await mcp.call_tool(\"weather.get_forecast\", latitude=37.7749, longitude=-122.4194)\nprint(result)\n```\n\nNote: The exact syntax for calling MCP tools may vary depending on your Cline setup. Refer to Cline documentation for the most up-to-date usage instructions.\n\n## Error Handling and Logging\n\nThe server includes improved error handling for API requests and logging. If an error occurs during a request, the server will log the error and return an appropriate error message. Logs are printed to the console with the configured log level and format.\n\n## Testing\n\n### Unit Tests\n\nTo run the unit tests:\n\n```\npython -m unittest test_weather.py\n```\n\nThese tests cover the basic functionality of the `get_alerts` and `get_forecast` tools.\n\n### Manual Testing\n\nTo manually test the server, you can use the MCP client to call the provided tools. Here are some example commands:\n\n```python\n# Get alerts for California\nresult = await mcp.call_tool(\"get_alerts\", state=\"CA\")\nprint(result)\n\n# Get forecast for San Francisco (approximate coordinates)\nresult = await mcp.call_tool(\"get_forecast\", latitude=37.7749, longitude=-122.4194)\nprint(result)\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is open source and available under the [MIT License](LICENSE).\n",
      "npm_url": "https://www.npmjs.com/package/weather-mcp-server",
      "npm_downloads": 405,
      "keywords": [
        "jackkuo666",
        "weather",
        "forecasts",
        "jackkuo666 weather",
        "weather information",
        "weather service"
      ],
      "category": "weather-and-location-data"
    },
    "Kryzo--mcp-sncf": {
      "owner": "Kryzo",
      "name": "mcp-sncf",
      "url": "https://github.com/Kryzo/mcp-sncf",
      "imageUrl": "/freedevtools/mcp/pfp/Kryzo.webp",
      "description": "Access real-time train schedules, detailed station information, and monitor service disruptions across France. Enables intelligent journey planning for an enhanced travel experience.",
      "stars": 10,
      "forks": 5,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-22T14:30:07Z",
      "readme_content": "# SNCF API MCP Server\n\nThis project provides a modular Python wrapper for the SNCF API, with an MCP server interface that integrates seamlessly with Claude Desktop for intelligent journey planning and train information retrieval across France.\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Features](#features)\n- [Installation](#installation)\n- [Getting an API Key](#getting-an-api-key)\n- [Configuration](#configuration)\n  - [Setting Up Claude Desktop](#setting-up-claude-desktop)\n  - [Environment Variables](#environment-variables)\n- [Available MCP Tools](#available-mcp-tools)\n  - [Journey Planning](#journey-planning)\n  - [Station Information](#station-information)\n  - [Disruption Monitoring](#disruption-monitoring)\n- [Usage Examples](#usage-examples)\n- [Troubleshooting](#troubleshooting)\n- [Advanced Features](#advanced-features)\n\n## Overview\n\nThe SNCF MCP Server provides a comprehensive interface to the French National Railway's (SNCF) API services, allowing you to:\n\n- Plan train journeys between cities in France\n- Get detailed information about train stations\n- Check schedules for departures and arrivals\n- Monitor service disruptions\n- Find nearby places and transport options\n\nThe structure is organized as follows:\n\n- `sncf_api/` - The main package for SNCF API interaction\n  - `__init__.py` - Package initialization\n  - `config.py` - Configuration settings\n  - `client.py` - Base API client\n  - `api.py` - Main API interface combining all modules\n  - `search.py` - Search-related endpoints\n  - `journey.py` - Journey planning endpoints\n  - `stations.py` - Station-related endpoints\n  - `networks.py` - Network and transport mode endpoints\n  - `disruptions.py` - Disruption-related endpoints\n  - `station_finder.py` - Efficient station lookup by coordinates\n  - `csv_station_finder.py` - Station lookup using CSV database\n  - `vehicle_journey.py` - Detailed train journey information\n- `sncf_server.py` - MCP server implementation with all tool endpoints\n- `train_stations_europe.csv` - Database of European train stations with coordinates\n\n## Features\n\n- **Intelligent Journey Planning**: Plan trips between any cities in France with automatic station selection\n- **Comprehensive Station Details**: Get detailed information about stations including:\n  - Available transport types (trains, buses, trams)\n  - Nearby places and points of interest\n  - Coordinates and accessibility information\n- **Real-time Schedules**: Access up-to-date departure and arrival information\n- **Disruption Monitoring**: Stay informed about service disruptions\n- **Smart Station Finding**: Locate stations by city name, station name, or coordinates\n- **Fallback Mechanisms**: Hardcoded coordinates for major cities ensure reliability even when API searches fail\n- **Detailed Logging**: Comprehensive logging for debugging and monitoring\n\n## Installation\n\n### Prerequisites\n\n- Python 3.6+\n- pip (Python package manager)\n\n### Step 1: Clone the Repository\n\n```bash\ngit clone https://github.com/yourusername/sncf-mcp-new.git\ncd sncf-mcp-new\n```\n\n### Step 2: Install Dependencies\n\n```bash\npip install -r requirements.txt\n```\n\nIf the requirements.txt file is missing, install the following packages:\nrequests\nmcp\n\n```bash\npip install requests pandas mcp\n```\n\n## Getting an API Key\n\nBefore using this server, you need to obtain an API key from SNCF:\n\n1. Visit the [SNCF API Portal](https://www.digital.sncf.com/startup/api)\n2. Create an account or log in\n3. Subscribe to the \"Navitia\" API service\n4. Complete the registration process\n5. Once approved, you'll receive your API key in your account dashboard\n\nThe API key looks like a UUID string (e.g., `01293485-3NS3-3242-23AZ-3241324512`).\n\n## Configuration\n\n### Setting Up Claude Desktop\n\nTo integrate the SNCF MCP tools with Claude Desktop:\n\n1. **Install Claude Desktop** if you haven't already\n2. **Open Claude Desktop Configuration**:\n   - Navigate to the Claude Desktop settings\n   - Open the configuration file (usually located at `%APPDATA%\\Claude\\claude_desktop_config.json`)\n\n```json\n{\n \"sncf\": {\n  \"command\": \"py\",\n  \"args\": [\n    \"c:\\\\Users\\\\ChristianELHAJJ\\\\sncf-mcp-new\\\\sncf_server.py\",\n    \"--api-key={YOUR-API-KEY}\"\n  ],\n  \"cwd\": \"c:\\\\Users\\\\ChristianELHAJJ\\\\sncf-mcp-new\"\n},\n```\n\nReplace `path/to/sncf-mcp-new` with the actual path to your installation directory.\n\n3. **Save the Configuration File** and restart Claude Desktop\n\n## Available MCP Tools\n\nOnce configured, the following tools will be available to Claude Desktop:\n\n### Journey Planning\n\n#### `plan_journey_by_city_names`\n\nPlan a journey between two cities in France.\n\n**Parameters:**\n- `from_city`: Departure city name (e.g., \"Paris\")\n- `to_city`: Destination city name (e.g., \"Marseille\")\n- `datetime`: Optional departure or arrival time (format: YYYYMMDDTHHMMSS)\n- `datetime_represents`: \"departure\" or \"arrival\" (default: \"departure\")\n- `include_station_details`: Whether to include detailed station information\n\n**Example prompt for Claude:**\n```\nPlan a train journey from Paris to Lyon tomorrow morning at 8 AM.\n```\n\n### Station Information\n\n#### `get_station_details`\n\nGet comprehensive details about train stations in a city.\n\n**Parameters:**\n- `city_name`: Name of the city to search for stations\n- `station_name`: Optional specific station name\n- `station_id`: Optional direct station ID\n- `include_transport_types`: Whether to include transport type analysis\n- `include_nearby_places`: Whether to include nearby places information\n- `nearby_distance`: Search radius in meters for nearby places\n- `nearby_count`: Maximum number of nearby places to return\n\n**Example prompt for Claude:**\n```\nWhat transport options are available at the main train station in Grenoble?\n```\n\n#### `get_station_schedule`\n\nGet departure and arrival schedules for a station.\n\n**Parameters:**\n- `city_name`: Name of the city to search for stations\n- `station_name`: Optional specific station name\n- `station_id`: Optional direct station ID\n- `count`: Number of departures/arrivals to return\n- `datetime`: Optional datetime to start from\n- `duration`: Optional duration in seconds\n- `data_freshness`: Data freshness level (realtime or base_schedule)\n\n**Example prompt for Claude:**\n```\nShow me the next 5 train departures from Paris Gare de Lyon.\n```\n\n### Disruption Monitoring\n\n#### `check_disruptions`\n\nCheck for current disruptions in the SNCF transport network.\n\n**Parameters:**\n- `coverage`: The coverage area (default: \"sncf\")\n- `count`: Maximum number of disruptions to return\n- `station_id`: Optional filter for a specific station\n- `line_id`: Optional filter for a specific line\n- `since`: Only disruptions valid after this date\n- `until`: Only disruptions valid before this date\n- `fetch_train_details`: Whether to fetch additional details about affected trains\n\n**Example prompt for Claude:**\n```\nAre there any current disruptions affecting trains to Marseille?\n```\n\n## Usage Examples\n\n### Planning a Journey\n\nYou can ask Claude to plan a journey between any two cities in France:\n\n```\nI need to travel from Paris to Nice next Friday at 2 PM. Can you find me a train?\n```\n\nClaude will use the `plan_journey_by_city_names` tool to:\n1. Find the main stations in both cities\n2. Plan the optimal journey between them\n3. Present you with departure/arrival times, durations, and connection details\n\n### Getting Station Information\n\nTo get detailed information about a station:\n\n```\nWhat facilities and transport options are available at Gare de Lyon in Paris?\n```\n\nClaude will use the `get_station_details` tool to provide:\n1. Basic station information (name, ID, coordinates)\n2. Available transport types (trains, buses, trams)\n3. Nearby places and points of interest\n\n### Checking Train Schedules\n\nTo check upcoming departures or arrivals:\n\n```\nWhen are the next trains leaving from Bordeaux to Paris today?\n```\n\nClaude will use the `get_station_schedule` tool to show:\n1. Upcoming departures from Bordeaux\n2. Destination information\n3. Platform details when available\n4. Real-time status updates\n\n### Monitoring Disruptions\n\nTo check for service disruptions:\n\n```\nAre there any disruptions affecting the Paris to Lyon route today?\n```\n\nClaude will use the `check_disruptions` tool to:\n1. Find relevant disruptions\n2. Explain the impact on services\n3. Provide additional details about affected trains\n\n## Troubleshooting\n\n### Common Issues\n\n#### \"No API key provided\"\n- Ensure you've added your SNCF API key to the Claude Desktop configuration\n- Check that the environment variable is correctly referenced in the MCP server configuration\n\n#### \"No stations found for city\"\n- Try using a more specific city name\n- For smaller cities, try using the name of a nearby larger city\n- The system has hardcoded coordinates for major French cities which should work reliably\n\n#### \"Failed to connect to SNCF API\"\n- Check your internet connection\n- Verify that your API key is valid and not expired\n- The SNCF API may be experiencing downtime; try again later\n\n#### \"Error initializing CSV station finder\"\n- Ensure the train_stations_europe.csv file is in the correct location\n- Check file permissions to ensure the file is readable\n\n## Advanced Features\n\n### Hardcoded Coordinates\n\nThe system includes hardcoded coordinates for major French cities to ensure reliability even when the API search fails:\n\n- Paris (48.853, 2.348)\n- Marseille (43.303, 5.380)\n- Lyon (45.760, 4.860)\n- Toulouse (43.611, 1.454)\n- Nice (43.704, 7.262)\n- Nantes (47.217, -1.542)\n- Strasbourg (48.585, 7.735)\n- Bordeaux (44.826, -0.556)\n- Lille (50.638, 3.072)\n- Rennes (48.103, -1.672)\n- Grenoble (45.192, 5.716)\n\n### Transport Type Analysis\n\nThe `get_station_details` tool can analyze and categorize the types of transport available at a station:\n\n- Long-distance trains (TGV, Intercités)\n- Regional trains (TER)\n- Local transit (buses, trams, metros)\n- Other services (taxis, bike sharing)\n\n### Nearby Places Search\n\nThe station details tool can find points of interest near a station:\n\n- Other transport stops\n- Public facilities\n- Points of interest\n- Address points\n\nThis feature is particularly useful for travelers planning their onward journey from a station.\n\n---\n\n## Contributing\n\nContributions to improve the SNCF MCP Server are welcome! Please feel free to submit pull requests or open issues for bugs and feature requests.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgments\n\n- SNCF for providing the API\n- The Navitia team for their comprehensive public transport API\n- Claude AI for intelligent integration capabilities\n\n\ncreated by Christian delage (dr.christian.delage@gmail.com)\n",
      "npm_url": "https://www.npmjs.com/package/mcp-sncf",
      "npm_downloads": 314,
      "keywords": [
        "schedules",
        "kryzo",
        "sncf",
        "train schedules",
        "journey planning",
        "location data"
      ],
      "category": "weather-and-location-data"
    },
    "MrCare--mcp_tool": {
      "owner": "MrCare",
      "name": "mcp_tool",
      "url": "https://github.com/MrCare/mcp_tool",
      "imageUrl": "/freedevtools/mcp/pfp/MrCare.webp",
      "description": "Check global weather with natural language queries in both Chinese and English, providing accurate forecasts for major cities worldwide. Seamlessly integrates with the Cursor editor for easy use.",
      "stars": 20,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-07T06:04:39Z",
      "readme_content": "<!--\n * @Author: Mr.Car\n * @Date: 2025-03-20 17:40:04\n-->\n<div align=\"center\">\n  <img src=\"https://images.unsplash.com/photo-1504608524841-42fe6f032b4b?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w3MjU5MDl8MHwxfHNlYXJjaHwxfHxiZWF1dGlmdWwlMjB3ZWF0aGVyJTIwbGFuZHNjYXBlfGVufDB8fHx8MTc0MjU0NzkxN3ww&ixlib=rb-4.0.3&q=80&w=1080\" alt=\"Weather MCP Tool\" width=\"100%\">\n  <h1>Weather MCP Tool</h1>\n  <p>A minimalist weather query tool that lets you check global weather with just one sentence, perfectly integrated with Cursor editor.</p>\n  \n  [![smithery badge](https://smithery.ai/badge/@MrCare/mcp_tool)](https://smithery.ai/server/@MrCare/mcp_tool)\n  [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n  [![Python Version](https://img.shields.io/badge/python-3.8%2B-blue)](https://www.python.org/downloads/)\n  \n  [English](README.md) | [中文](README_zh.md)\n</div>\n\n<div align=\"center\">\n  <img src=\"real_en.gif\" alt=\"Weather MCP Tool Demo\" width=\"100%\">\n  <p><i>Watch how easy it is to query weather with natural language</i></p>\n</div>\n\n## ✨ Features\n\n- 💡 **Minimalist**: One-line weather query\n- 🤖 **Smart**: Natural language support in Chinese/English\n- 🌏 **Global**: Support for all major cities\n- 🔌 **Plug & Play**: Perfect Cursor integration\n- 🚀 **High Performance**: Async processing, quick response\n- 🎨 **Beautiful**: Clear and intuitive weather display\n\n## 🚀 Quick Start\n\n### 1. Get API Key\n\n> 🔑 Before starting, please [Get OpenWeather API Key](https://home.openweathermap.org/api_keys)\n\n### 2. One-Click Installation (Recommended)\n\nInstall and configure with Smithery in one command:\n\n```bash\nnpx -y @smithery/cli@latest install @MrCare/mcp_tool --client cursor --config \"{\\\"openweathermapApiKey\\\":\\\"your_api_key_here\\\",\\\"port\\\":8000}\"\n```\n\n> For WindSurf and Cine installation, please visit our [Smithery repository](https://smithery.ai/server/@MrCare/mcp_tool).\n\n### 3. Manual Installation\n\n#### 3.1 Clone and Install\n\n```bash\ngit clone https://github.com/yourusername/weather-server.git && cd weather-server && pip install -e .\n```\n\n#### 3.2 Configure API Key\n\n**Method 1: Using Configuration File (Recommended)**\n\nCopy the example configuration file and modify it:\n```bash\ncp env.example .env\n```\nThen edit the `.env` file, replace `your_api_key_here` with your API Key.\n\n**Method 2: Using Environment Variables**\n\nmacOS/Linux:\n```bash\nexport OPENWEATHERMAP_API_KEY=\"your_api_key\"\n```\n\nWindows:\n```cmd\nset OPENWEATHERMAP_API_KEY=your_api_key\n```\n\n#### 3.3 Enable Tool\n\nEdit `~/.cursor/mcp.json` (Windows: `%USERPROFILE%\\.cursor\\mcp.json`):\n```json\n{\n    \"weather_fastmcp\": {\n        \"command\": \"python\",\n        \"args\": [\"-m\", \"weather_server.server\"]\n    }\n}\n```\n\nRestart Cursor and you're ready to go!\n\n## 📝 Usage Examples\n\nSimply type in Cursor:\n```\nShow me the weather in Tokyo\nWhat's the forecast for London?\nHow's the weather in New York?\nWill it rain tomorrow in Paris?\n```\n\nThat's it!\n\n## ⚙️ Parameters\n\nFor more precise queries, you can specify these parameters:\n\n| Parameter | Description | Default |\n|-----------|-------------|---------|\n| city | City name (Chinese/English) | Required |\n| days | Forecast days (1-5) | 5 |\n| units | Temperature unit (metric: Celsius, imperial: Fahrenheit) | metric |\n| lang | Response language (zh_cn: Chinese, en: English) | zh_cn |\n\n## ❓ FAQ\n\n1. **Not Working?**\n   - Ensure API Key is set correctly\n   - Restart Cursor\n   - Check Python environment\n\n2. **City Not Found?**\n   - Try using English name\n   - Check spelling\n   - Use complete city name\n\n## 👨‍💻 Author\n\n- Mr.Car\n- Email: 534192336car@gmail.com\n\n## 🙏 Acknowledgments\n\n- [FastMCP](https://github.com/microsoft/fastmcp)\n- [OpenWeatherMap](https://openweathermap.org/)\n- [Cursor](https://cursor.sh/)\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_tool",
        "mrcare",
        "weather",
        "mrcare mcp_tool",
        "data mrcare",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "RyanCardin15--NOAA-TidesAndCurrents-MCP": {
      "owner": "RyanCardin15",
      "name": "NOAA-TidesAndCurrents-MCP",
      "url": "https://github.com/RyanCardin15/NOAA-TidesAndCurrents-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/RyanCardin15.webp",
      "description": "Access real-time and historical data for water levels, tides, and currents, as well as meteorological and moon phase information from NOAA's Tides and Currents API.",
      "stars": 4,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-26T10:21:26Z",
      "readme_content": "# 🌊 NOAA Tides & Currents MCP Server\n\n<div align=\"center\">\n\n[![npm version](https://img.shields.io/npm/v/@ryancardin/noaa-tides-currents-mcp-server?style=for-the-badge&logo=npm&color=blue)](https://www.npmjs.com/package/@ryancardin/noaa-tides-currents-mcp-server)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg?style=for-the-badge)](https://opensource.org/licenses/MIT)\n[![TypeScript](https://img.shields.io/badge/TypeScript-007ACC?style=for-the-badge&logo=typescript&logoColor=white)](https://www.typescriptlang.org/)\n[![MCP](https://img.shields.io/badge/MCP-Model_Context_Protocol-green?style=for-the-badge)](https://modelcontextprotocol.io/)\n\n[![smithery badge](https://smithery.ai/badge/@RyanCardin15/noaa-tidesandcurrents-mcp)](https://smithery.ai/server/@RyanCardin15/noaa-tidesandcurrents-mcp)\n\n**🚀 Lightning-fast access to NOAA's oceanic and atmospheric data through MCP**\n\n*Your one-stop solution for tides, currents, weather, astronomy, and climate data*\n\n[📦 Quick Start](#-quick-start) • [🛠️ Tools](#️-available-tools) • [📖 Examples](#-usage-examples) • [🏗️ Advanced](#️-advanced-usage)\n\n</div>\n\n---\n\n## ✨ What Makes This Awesome\n\n🌊 **25+ Specialized Tools** - From basic tide data to advanced climate projections  \n⚡ **Lightning Fast** - Built on FastMCP for optimal performance  \n🎯 **Zero Config** - Works out of the box with Claude Desktop  \n🌍 **Comprehensive Data** - Water levels, currents, weather, moon phases, sun data  \n📊 **Climate Research Ready** - Sea level trends, flooding projections, extreme events  \n🚀 **NPX Ready** - Install and run with a single command  \n\n---\n\n## 🚀 Quick Start\n\n### ⚡ NPX Installation (Recommended)\n\n```bash\n# Install and run immediately - no setup required!\nnpx @ryancardin/noaa-tides-currents-mcp-server\n\n# Or use the shorter alias\nnpx noaa-mcp\n```\n\n#### 🔌 Transport Modes\n\n**STDIO Mode (Default - MCP Protocol)**\n```bash\n# Standard MCP server for Claude Desktop integration\nnpx @ryancardin/noaa-tides-currents-mcp-server\n\n# Or use the shorter alias\nnpx noaa-mcp\n```\n\n**HTTP Streamable Mode (Web Integration)**\n```bash\n# Start HTTP server on default port 3000\nnpx @ryancardin/noaa-tides-currents-mcp-server --http\n\n# Specify custom port\nnpx @ryancardin/noaa-tides-currents-mcp-server --http --port 8080\n\n# Using shorter alias\nnpx noaa-mcp --http --port 8080\n\n# Access via Server-Sent Events\ncurl http://localhost:3000/sse\n```\n\n### 🎯 Claude Desktop Integration\n\nInstall directly to Claude Desktop via [Smithery](https://smithery.ai/server/@RyanCardin15/tidesandcurrents):\n\n```bash\nnpx -y @smithery/cli install @RyanCardin15/tidesandcurrents --client claude\n```\n\n### 🔧 Manual Development Setup\n\n```bash\n# Clone and build\ngit clone https://github.com/RyanCardin15/NOAA-Tides-And-Currents-MCP.git\ncd NOAA-Tides-And-Currents-MCP\nnpm install && npm run build\n\n# Start the server\nnpm start\n\n# Test with FastMCP\nnpx fastmcp dev dist/index.js\n```\n\n---\n\n## 🛠️ Available Tools\n\n<details>\n<summary><strong>🌊 Water Data Tools (6 tools)</strong></summary>\n\n### Water Levels & Tides\n- **`get_water_levels`** - Real-time and historical water level data\n- **`get_tide_predictions`** - High/low tide predictions and continuous data\n- **`get_currents`** - Real-time and historical current measurements  \n- **`get_current_predictions`** - Current speed and direction forecasts\n- **`get_meteorological_data`** - Wind, air temp, water temp, pressure, etc.\n\n### Station Information\n- **`get_stations`** - Search and list monitoring stations\n- **`get_station_details`** - Detailed station metadata and capabilities\n\n</details>\n\n<details>\n<summary><strong>🔬 Climate & Research Tools (9 tools)</strong></summary>\n\n### Sea Level Analysis\n- **`get_sea_level_trends`** - Long-term sea level rise trends and rates\n- **`get_extreme_water_levels`** - Statistical analysis of extreme events\n\n### High Tide Flooding Analysis\n- **`get_high_tide_flooding_daily`** - Daily flood event counts\n- **`get_high_tide_flooding_monthly`** - Monthly flooding patterns\n- **`get_high_tide_flooding_seasonal`** - Seasonal flood analysis\n- **`get_high_tide_flooding_annual`** - Yearly flooding trends\n- **`get_high_tide_flooding_projections`** - Future flood risk scenarios\n- **`get_high_tide_flooding_likelihoods`** - Daily flood probability\n\n### Historical Extremes\n- **`get_top_ten_water_levels`** - Highest/lowest water levels on record\n\n</details>\n\n<details>\n<summary><strong>🌙 Astronomy Tools (7 tools)</strong></summary>\n\n### Moon Phase Calculations\n- **`get_moon_phase`** - Current moon phase and illumination\n- **`get_moon_phases_range`** - Moon phases over date ranges\n- **`get_next_moon_phase`** - Find next new/full/quarter moons\n\n### Solar Calculations  \n- **`get_sun_times`** - Sunrise, sunset, dawn, dusk times\n- **`get_sun_times_range`** - Solar times over date ranges\n- **`get_sun_position`** - Real-time sun azimuth and elevation\n- **`get_next_sun_event`** - Next sunrise, sunset, or solar noon\n\n</details>\n\n<details>\n<summary><strong>⚙️ Configuration Tools (1 tool)</strong></summary>\n\n### API Parameters\n- **`get_parameter_definitions`** - Valid values for all API parameters\n\n</details>\n\n---\n\n## 📖 Usage Examples\n\n### 🌊 Get Current Tide Conditions\n\n```bash\n# Get latest water levels for Boston Harbor\nget_water_levels station=\"8443970\" date=\"latest\"\n\n# Get today's tide predictions for Miami\nget_tide_predictions station=\"8723214\" begin_date=\"today\" end_date=\"today\" interval=\"hilo\"\n```\n\n### 🌀 Hurricane Preparedness \n\n```bash\n# Get extreme water level statistics for storm planning\nget_extreme_water_levels station=\"8518750\" units=\"english\"\n\n# Check flooding likelihood for tomorrow\nget_high_tide_flooding_likelihoods station=\"8518750\" date=\"2024-12-16\" threshold=\"minor\"\n```\n\n### 🔬 Climate Research\n\n```bash\n# Analyze 30-year sea level trends\nget_sea_level_trends station=\"8518750\" affiliation=\"US\"\n\n# Get high tide flooding projections for 2050s under intermediate sea level rise\nget_high_tide_flooding_projections station=\"8518750\" scenario=\"intermediate\" decade=\"2050s\"\n```\n\n### 🌙 Astronomy & Navigation\n\n```bash\n# Get tonight's moon phase for navigation\nget_moon_phase date=\"2024-12-15\" latitude=\"42.3601\" longitude=\"-71.0589\"\n\n# Calculate sunrise/sunset for sailing\nget_sun_times date=\"2024-12-15\" latitude=\"25.7617\" longitude=\"-80.1918\" timezone=\"America/New_York\"\n```\n\n### 🎣 Fishing & Recreation\n\n```bash\n# Best fishing times with current predictions\nget_current_predictions station=\"ACT0446\" date=\"today\" interval=\"MAX_SLACK\"\n\n# Wind and weather conditions\nget_meteorological_data station=\"8443970\" product=\"wind\" date=\"today\"\n```\n\n---\n\n## 🏗️ Advanced Usage\n\n### 🔧 Development & Testing\n\n```bash\n# Run in development mode (stdio)\nnpm run dev\n\n# Development with HTTP transport\nnpm run dev:http\n\n# Production builds with different transports\nnpm start                    # STDIO mode (default)\nnpm run start:http          # HTTP on port 3000\nnpm run start:http:3001     # HTTP on port 3001\nnpm run start:http:8080     # HTTP on port 8080\n\n# Inspect server capabilities\nnpx fastmcp inspect dist/index.js\n```\n\n### 🌐 HTTP Stream Integration\n\nWhen running in HTTP mode, the server provides Server-Sent Events (SSE) at `/sse`:\n\n```bash\n# Start HTTP server\nnpx @ryancardin/noaa-tides-currents-mcp-server --http --port 3000\n\n# Test the endpoint\ncurl -N http://localhost:3000/sse\n\n# Or integrate with web applications\nfetch('http://localhost:3000/sse')\n  .then(response => response.body.getReader())\n  .then(reader => {\n    // Handle streaming MCP responses\n  });\n```\n\n**Use Cases for HTTP Mode:**\n- 🌐 **Web Applications** - Integrate with React, Vue, Angular apps\n- 📱 **Mobile Apps** - REST-like access from mobile applications  \n- 🔗 **API Gateways** - Proxy through load balancers or API gateways\n- 🧪 **Testing** - Easy curl-based testing and debugging\n\n### 📊 Data Formats & Export\n\nAll tools support multiple output formats:\n- **JSON** (default) - Perfect for programmatic use\n- **XML** - Legacy system integration  \n- **CSV** - Direct spreadsheet import\n\n### 🌍 Global Station Coverage\n\n- **13,000+ stations** worldwide\n- **Real-time data** from NOAA's CO-OPS network\n- **Historical records** dating back decades\n- **Global tide predictions** and current forecasts\n\n---\n\n## 🚦 API Endpoints\n\nThis server integrates with three NOAA APIs:\n\n| API | Purpose | Base URL |\n|-----|---------|----------|\n| **Data API** | Real-time observations & predictions | `api.tidesandcurrents.noaa.gov/api/prod/` |\n| **Metadata API** | Station information & capabilities | `api.tidesandcurrents.noaa.gov/mdapi/prod/` |\n| **Derived Products API** | Climate analysis & research data | `api.tidesandcurrents.noaa.gov/dpapi/prod/` |\n\n---\n\n## 🛠️ Technical Details\n\n### Architecture\n- **🚀 FastMCP Framework** - High-performance MCP server\n- **📝 TypeScript** - Full type safety and IntelliSense\n- **🔧 Zod Validation** - Runtime parameter validation\n- **⚡ Axios HTTP Client** - Reliable API communication\n- **🌙 SunCalc Integration** - Precise astronomical calculations\n\n### Transport Options\n- **📡 STDIO Transport** - Standard MCP protocol for desktop clients\n- **🌐 HTTP Stream Transport** - Server-Sent Events for web integration\n- **🔄 Dual Mode Support** - Switch between transports via command-line flags\n\n### System Requirements\n- **Node.js** 18+ \n- **NPM** 8+\n- **MCP Client** (Claude Desktop, etc.)\n\n### Package Size\n- **📦 Bundled**: 43.9 KB\n- **📂 Installed**: 286.2 KB\n- **⚡ Load Time**: <100ms\n\n---\n\n## 🐛 Troubleshooting\n\n<details>\n<summary><strong>Common Issues & Solutions</strong></summary>\n\n### Server Won't Start\n```bash\n# Check Node.js version\nnode --version  # Should be 18+\n\n# Rebuild TypeScript\nnpm run build\n```\n\n### API Errors\n- **Invalid Station ID**: Use `get_stations` to find valid stations\n- **Date Format Issues**: Use YYYYMMDD or MM/DD/YYYY formats\n- **Rate Limiting**: NOAA APIs have usage limits - space out requests\n\n### MCP Connection Issues\n- Ensure Claude Desktop MCP settings are configured correctly\n- Check that the server binary has execute permissions: `chmod +x dist/index.js`\n\n</details>\n\n---\n\n## 📈 Roadmap\n\n- [ ] 🌊 **Real-time Alerts** - Webhook support for tide/weather alerts\n- [ ] 📱 **Mobile SDK** - React Native integration\n- [ ] 🗺️ **GIS Integration** - Shapefile and KML export\n- [ ] 🤖 **AI Insights** - Automated pattern recognition\n- [ ] ⚡ **GraphQL API** - Modern query interface\n- [ ] 🌐 **Multi-language** - I18n support\n\n---\n\n## 🤝 Contributing\n\nWe love contributions! Here's how to get started:\n\n1. **🍴 Fork** the repository\n2. **🌿 Branch** for your feature (`git checkout -b amazing-feature`)\n3. **💻 Code** your improvements\n4. **✅ Test** with `npm test`\n5. **📤 Submit** a pull request\n\n### Development Commands\n```bash\nnpm run build    # Build TypeScript\nnpm run dev      # Development mode  \nnpm run test     # Run test suite\nnpm run format   # Format with Prettier\n```\n\n---\n\n## 📄 License\n\n**MIT License** - see [LICENSE](LICENSE) file for details.\n\nBuilt with ❤️ by [Ryan Cardin](https://github.com/RyanCardin15)\n\n---\n\n## 🔗 Links & Resources\n\n- **📦 NPM Package**: [@ryancardin/noaa-tides-currents-mcp-server](https://www.npmjs.com/package/@ryancardin/noaa-tides-currents-mcp-server)\n- **🏪 Smithery**: [Auto-install for Claude Desktop](https://smithery.ai/server/@RyanCardin15/noaa-tidesandcurrents-mcp)  \n- **🌊 NOAA CO-OPS**: [Official NOAA Data Portal](https://tidesandcurrents.noaa.gov/)\n- **🤖 MCP Protocol**: [Model Context Protocol Docs](https://modelcontextprotocol.io/)\n- **⚡ FastMCP**: [FastMCP Framework](https://github.com/jlowin/fastmcp)\n\n<div align=\"center\">\n\n**⭐ Star this repo if it helped you!**\n\nMade possible by NOAA's commitment to open oceanic data 🌊\n\n</div>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tidesandcurrents",
        "tides",
        "noaa",
        "noaa tidesandcurrents",
        "noaa tides",
        "tidesandcurrents mcp"
      ],
      "category": "weather-and-location-data"
    },
    "SaintDoresh--Weather-MCP-ClaudeDesktop": {
      "owner": "SaintDoresh",
      "name": "Weather-MCP-ClaudeDesktop",
      "url": "https://github.com/SaintDoresh/Weather-MCP-ClaudeDesktop",
      "imageUrl": "/freedevtools/mcp/pfp/SaintDoresh.webp",
      "description": "Provides real-time weather data, forecasts, and historical weather information using the OpenWeatherMap API. It includes features for air quality information and weather alerts.",
      "stars": 8,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-01T15:36:44Z",
      "readme_content": "# Weather MCP Tool for Claude Desktop\n\nAn MCP (Model Context Protocol) tool that provides real-time weather data, forecasts, and historical weather information using the OpenWeatherMap API, specifically designed for Claude Desktop.\n\n## Tutorial\n\nFor a detailed guide on setting up and using this tool, check out our comprehensive Medium tutorial:\n[Tutorial: Using Claude Desktop with Weather MCP Tool to Access Real-Time Weather Data Worldwide](https://medium.com/@saintdoresh/tutorial-using-claude-desktop-with-weather-mcp-tool-to-access-real-time-weather-data-worldwide-a0b811fc5cdf)\n\n## Features\n\n- Real-time weather conditions for any location\n- Weather forecasts (up to 5 days)\n- Historical weather data (last 5 days)\n- Air quality information\n- Weather alerts and warnings\n- Location search functionality\n\n## Setup\n\n1. Ensure you have Python 3.10 or higher installed\n\n2. Install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n3. Get an API key from [OpenWeatherMap](https://openweathermap.org/api) (free tier available)\n   - Note: New API keys may take up to 24 hours to activate\n\n4. Set up environment variables for API key (recommended method):\n   - Create a `.env` file in the project directory\n   - Add your API key to the file:\n   ```\n   OPENWEATHER_API_KEY=your_openweathermap_api_key\n   ```\n   - Add `.env` to your `.gitignore` file to prevent committing sensitive data\n\n5. Update `main.py` to use the environment variable:\n   ```python\n   # Add these imports at the top\n   import os\n   from dotenv import load_dotenv\n   \n   # Load environment variables\n   load_dotenv()\n   \n   # Replace the API_KEY line with\n   API_KEY = os.getenv(\"OPENWEATHER_API_KEY\")\n   ```\n\n## Integration with Claude Desktop\n\n1. Configure your MCP settings in Claude Desktop by adding the following to your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"weather-mcp\": {\n      \"command\": \"py\",\n      \"args\": [\"-3.13\", \"C:\\\\Path\\\\To\\\\Your\\\\Weather-MCP-ClaudeDesktop\\\\main.py\"]\n    }\n  }\n}\n```\n\n2. Replace the path with the full path to your main.py file\n3. Run the server using:\n```bash\npy -3.13 main.py\n```\n4. Keep the server running while using Claude Desktop\n\n## Available Tools\n\n### 1. get_current_weather\nGet real-time weather conditions for a location:\n```json\n{\n    \"location\": {\n        \"name\": \"New York\",\n        \"country\": \"US\",\n        \"lat\": 40.7128,\n        \"lon\": -74.006\n    },\n    \"temperature\": {\n        \"current\": 25.6,\n        \"feels_like\": 26.2,\n        \"min\": 23.4,\n        \"max\": 27.8\n    },\n    \"weather_condition\": {\n        \"main\": \"Clear\",\n        \"description\": \"clear sky\",\n        \"icon\": \"01d\"\n    },\n    \"wind\": {\n        \"speed\": 3.6,\n        \"deg\": 220\n    },\n    \"clouds\": 5,\n    \"humidity\": 65,\n    \"pressure\": 1015,\n    \"visibility\": 10000,\n    \"sunrise\": \"2025-03-16T06:12:34\",\n    \"sunset\": \"2025-03-16T18:04:23\",\n    \"timestamp\": \"2025-03-16T14:30:00\"\n}\n```\n\n### 2. get_weather_forecast\nGet weather forecast for a location:\n```json\n{\n    \"location\": {\n        \"name\": \"London\",\n        \"country\": \"GB\",\n        \"lat\": 51.5074,\n        \"lon\": -0.1278\n    },\n    \"forecast\": [\n        {\n            \"datetime\": \"2025-03-16T15:00:00\",\n            \"temperature\": {\n                \"temp\": 18.2,\n                \"feels_like\": 17.8,\n                \"min\": 17.5,\n                \"max\": 19.1\n            },\n            \"weather_condition\": {\n                \"main\": \"Rain\",\n                \"description\": \"light rain\",\n                \"icon\": \"10d\"\n            },\n            \"wind\": {\n                \"speed\": 4.2,\n                \"deg\": 180\n            },\n            \"clouds\": 75,\n            \"humidity\": 82,\n            \"pressure\": 1010,\n            \"visibility\": 8000,\n            \"pop\": 0.4\n        }\n        // ... more forecast items\n    ],\n    \"days\": 5\n}\n```\n\n### 3. get_air_quality\nGet air quality data for a location:\n```json\n{\n    \"location\": {\n        \"name\": \"Beijing\",\n        \"country\": \"CN\",\n        \"lat\": 39.9042,\n        \"lon\": 116.4074\n    },\n    \"air_quality_index\": 3,\n    \"air_quality_level\": \"Moderate\",\n    \"components\": {\n        \"co\": 250.34,\n        \"no\": 0.5,\n        \"no2\": 15.2,\n        \"o3\": 140.8,\n        \"so2\": 5.1,\n        \"pm2_5\": 8.2,\n        \"pm10\": 12.3,\n        \"nh3\": 0.7\n    },\n    \"timestamp\": \"2025-03-16T14:30:00\"\n}\n```\n\n### 4. get_historical_weather\nGet historical weather data for a specific date:\n```json\n{\n    \"location\": {\n        \"name\": \"Paris\",\n        \"country\": \"FR\",\n        \"lat\": 48.8566,\n        \"lon\": 2.3522\n    },\n    \"date\": \"2025-03-14\",\n    \"temperature\": {\n        \"temp\": 20.3,\n        \"feels_like\": 19.8\n    },\n    \"weather_condition\": {\n        \"main\": \"Clouds\",\n        \"description\": \"scattered clouds\",\n        \"icon\": \"03d\"\n    },\n    \"wind\": {\n        \"speed\": 2.8,\n        \"deg\": 150\n    },\n    \"clouds\": 45,\n    \"humidity\": 60,\n    \"pressure\": 1012,\n    \"visibility\": 10000,\n    \"sunrise\": \"2025-03-14T06:30:45\",\n    \"sunset\": \"2025-03-14T18:15:22\",\n    \"timestamp\": \"2025-03-14T12:00:00\"\n}\n```\n\n### 5. search_location\nSearch for locations by name:\n```json\n{\n    \"results\": [\n        {\n            \"name\": \"Tokyo\",\n            \"state\": \"\",\n            \"country\": \"JP\",\n            \"lat\": 35.6762,\n            \"lon\": 139.6503\n        },\n        {\n            \"name\": \"Tokyo\",\n            \"state\": \"Tokyo\",\n            \"country\": \"JP\",\n            \"lat\": 35.6895,\n            \"lon\": 139.6917\n        }\n        // ... more results\n    ]\n}\n```\n\n### 6. get_weather_alerts\nGet weather alerts for a location:\n```json\n{\n    \"location\": {\n        \"name\": \"Miami\",\n        \"country\": \"US\",\n        \"lat\": 25.7617,\n        \"lon\": -80.1918\n    },\n    \"alerts\": [\n        {\n            \"sender\": \"NWS Miami\",\n            \"event\": \"Heat Advisory\",\n            \"start\": \"2025-03-16T12:00:00\",\n            \"end\": \"2025-03-16T20:00:00\",\n            \"description\": \"Heat index values between 105 and 110 expected\",\n            \"tags\": [\"Extreme temperature value\"]\n        }\n        // ... more alerts if any\n    ],\n    \"alert_count\": 1\n}\n```\n\n## Sample Queries\n\nYou can ask Claude Desktop questions like:\n- \"What's the current weather in New York?\"\n- \"Show me the 5-day forecast for London\"\n- \"What's the air quality like in Beijing today?\"\n- \"How was the weather in Paris on March 14th?\"\n- \"Search for locations named 'Tokyo'\"\n- \"Are there any weather alerts for Miami?\"\n- \"Compare the current weather in Chicago, Miami, and Seattle\"\n- \"Show me a comparison of air quality in Beijing, Los Angeles, and Delhi\"\n\n## Error Handling\n\nAll tools include proper error handling and will return an error message if something goes wrong:\n```json\n{\n    \"error\": \"Failed to fetch current weather for InvalidLocation: Location not found\"\n}\n```\n\n## Troubleshooting\n\nIf the MCP server is not working in Claude Desktop:\n1. Make sure the server is running - you should see output when you start the script\n2. Verify the path in your settings is correct and absolute\n3. Make sure Python 3.10+ is in your system PATH\n4. Check that all dependencies are installed\n5. Try restarting Claude Desktop\n6. Check logs for any error messages\n\n### Common API Issues\n- **API Key Activation**: New OpenWeatherMap API keys may take up to 24 hours to activate\n- **Invalid API Key Error**: If you get a 401 error, verify your API key is correct and active\n- **Rate Limiting**: Free tier allows up to 60 calls per minute, which might be exceeded during heavy usage\n\n## Rate Limits\n\nThis tool uses the OpenWeatherMap API which has rate limits. The free tier allows up to 60 calls per minute, which should be sufficient for personal use. Please be aware that very frequent requests may be throttled by the API.\n\n## License\n\nMIT License",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "openweathermap",
        "saintdoresh",
        "weather",
        "saintdoresh weather",
        "weather information",
        "using openweathermap"
      ],
      "category": "weather-and-location-data"
    },
    "Shengwenhao-manbo--weather": {
      "owner": "Shengwenhao-manbo",
      "name": "weather",
      "url": "https://github.com/Shengwenhao-manbo/weather",
      "imageUrl": "/freedevtools/mcp/pfp/Shengwenhao-manbo.webp",
      "description": "Provide weather information through an MCP server interface, enabling queries for weather data within LLM applications. Supports integration of real-time weather context to enhance responses and decision-making.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-22T01:41:36Z",
      "readme_content": "# weather\n",
      "npm_url": "https://www.npmjs.com/package/weather",
      "npm_downloads": 5901,
      "keywords": [
        "weather",
        "manbo",
        "data",
        "weather data",
        "weather information",
        "queries weather"
      ],
      "category": "weather-and-location-data"
    },
    "Sunwood-ai-labs--mcp-weather-service-server": {
      "owner": "Sunwood-ai-labs",
      "name": "mcp-weather-service-server",
      "url": "https://github.com/Sunwood-ai-labs/mcp-weather-service-server",
      "imageUrl": "/freedevtools/mcp/pfp/Sunwood-ai-labs.webp",
      "description": "A simple note management system that allows users to add new notes and generate summaries of stored notes with customizable detail levels. Access individual notes using a custom URI scheme.",
      "stars": 5,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-27T03:05:59Z",
      "readme_content": "<div align=\"center\">\n\n![](aseets/header.svg)\n\n## 🌦️ weather_service MCP サーバー\n\n</div>\n\n## 🧩 コンポーネント\n\n### 📚 リソース\n\nこのサーバーは、シンプルなノート保存システムを実装しています：\n- カスタム note:// URIスキームで個別のノートにアクセス\n- 各ノートリソースには、名前、説明、text/plainのマイムタイプがあります\n\n### 💡 プロンプト\n\nサーバーは単一のプロンプトを提供します：\n- summarize-notes：保存されている全てのノートの要約を作成\n  - オプションの\"style\"引数で詳細レベルを制御（brief/detailed）\n  - 全ての現在のノートとスタイル設定を組み合わせてプロンプトを生成\n\n### 🛠️ ツール\n\nサーバーは1つのツールを実装しています：\n- add-note：新しいノートをサーバーに追加\n  - \"name\"と\"content\"を必須の文字列引数として受け取り\n  - サーバーの状態を更新し、リソースの変更をクライアントに通知\n\n\n## 🚀 クイックスタート\n\n### 📥 インストール\n\n#### Claude Desktop\n\nMacOSの場合: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nWindowsの場合: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>開発/未公開サーバーの設定</summary>\n  ```\n  \"mcpServers\": {\n    \"weather_service\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"C:\\Prj\\weather_service\",\n        \"run\",\n        \"weather_service\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>公開サーバーの設定</summary>\n  ```\n  \"mcpServers\": {\n    \"weather_service\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"weather_service\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## 👨‍💻 開発\n\n### 🏗️ ビルドと公開\n\nパッケージを配布用に準備するには：\n\n1. 依存関係を同期しロックファイルを更新：\n```bash\nuv sync\n```\n\n2. パッケージのディストリビューションをビルド：\n```bash\nuv build\n```\n\nこれにより、`dist/`ディレクトリにソースとホイールのディストリビューションが作成されます。\n\n3. PyPIに公開：\n```bash\nuv publish\n```\n\n注意：PyPIの認証情報は環境変数またはコマンドフラグで設定する必要があります：\n- トークン：`--token`または`UV_PUBLISH_TOKEN`\n- またはユーザー名/パスワード：`--username`/`UV_PUBLISH_USERNAME`と`--password`/`UV_PUBLISH_PASSWORD`\n\n### 🔍 デバッグ\n\nMCPサーバーはstdioを介して実行されるため、デバッグが難しい場合があります。最適なデバッグ体験のために、[MCP Inspector](https://github.com/modelcontextprotocol/inspector)の使用を強く推奨します。\n\n[`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)を使用して、次のコマンドでMCP Inspectorを起動できます：\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory C:\\Prj\\weather_service run weather-service\n```\n\n起動時、InspectorはブラウザでアクセスできるURLを表示し、デバッグを開始できます。\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sunwood",
        "service",
        "notes",
        "weather service",
        "data sunwood",
        "note management"
      ],
      "category": "weather-and-location-data"
    },
    "TencentEdgeOne--mcp-geo": {
      "owner": "TencentEdgeOne",
      "name": "mcp-geo",
      "url": "https://github.com/TencentEdgeOne/mcp-geo",
      "imageUrl": "/freedevtools/mcp/pfp/TencentEdgeOne.webp",
      "description": "Provides real-time geolocation data integration with AI models, enabling contextual understanding based on user locations. Facilitates the retrieval and use of geolocation information in language model workflows through the Model Context Protocol.",
      "stars": 20,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-15T06:07:24Z",
      "readme_content": "# EdgeOne Pages MCP: Geo Location Service\n\nThis project demonstrates how to use EdgeOne Pages Functions to retrieve user geolocation information and integrate it with large language models through MCP (Model Context Protocol).\n\n## Demo\n\n![](https://cloudcache.tencent-cloud.com/qcloud/ui/static/static_source_business/f180b5ae-0e9c-40a8-a76a-b8f2a5e6108f.gif)\n\n## Deploy\n\n[![Deploy with EdgeOne Pages](https://cdnstatic.tencentcs.com/edgeone/pages/deploy.svg)](https://edgeone.ai/pages/new?template=mcp-geo)\n\nMore Templates: [EdgeOne Pages](https://edgeone.ai/pages/templates)\n\n## Components\n\n### 1. EdgeOne Pages Functions: Geolocation\n\nThe project includes an EdgeOne Pages Function that retrieves user geolocation information:\n\n* Uses the EdgeOne request context to access geolocation data\n* Returns location information in a JSON format\n* Located in `functions/get_geo.ts`\n\n### 2. MCP Server Integration\n\nThe MCP server component provides an interface for large language models to access geolocation data:\n\n* Implements the Model Context Protocol (MCP)\n* Exposes a `get_geolocation` tool that can be used by AI models\n* Uses the EdgeOne Pages Function to fetch geolocation data\n* Located in `mcp-server/index.ts`\n\n## MCP Configuration\n\nTo use the MCP server with large language models, add the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"edgeone-geo-mcp-server\": {\n      \"command\": \"tsx\",\n      \"args\": [\"path/to/mcp-server/index.ts\"]\n    }\n  }\n}\n```\n\n## Learn More\n\n* [EdgeOne Pages](https://edgeone.ai/products/pages)\n* [EdgeOne Pages Functions documentation](https://edgeone.ai/document/162227908259442688)\n* [Model Context Protocol (MCP)](https://modelcontextprotocol.github.io) - Learn about integrating AI models with external tools and services\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "geolocation",
        "geo",
        "contextual",
        "geolocation information",
        "geolocation data",
        "use geolocation"
      ],
      "category": "weather-and-location-data"
    },
    "TimLukaHorstmann--mcp-weather": {
      "owner": "TimLukaHorstmann",
      "name": "mcp-weather",
      "url": "https://github.com/TimLukaHorstmann/mcp-weather",
      "imageUrl": "/freedevtools/mcp/pfp/TimLukaHorstmann.webp",
      "description": "Provides hourly weather forecasts using real-time data from the AccuWeather API, delivering accurate temperature and weather conditions for any location.",
      "stars": 26,
      "forks": 9,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-28T08:59:43Z",
      "readme_content": "# MCP Weather Server\n\n[![npm version](https://img.shields.io/npm/v/@timlukahorstmann/mcp-weather)](https://www.npmjs.com/package/@timlukahorstmann/mcp-weather)\n[![license](https://img.shields.io/github/license/TimLukaHorstmann/mcp-weather)](https://github.com/TimLukaHorstmann/mcp-weather/blob/main/LICENSE)\n[![node version](https://img.shields.io/node/v/@timlukahorstmann/mcp-weather)](https://www.npmjs.com/package/@timlukahorstmann/mcp-weather)\n[![issues](https://img.shields.io/github/issues/TimLukaHorstmann/mcp-weather)](https://github.com/TimLukaHorstmann/mcp-weather/issues)\n[![weekly downloads](https://img.shields.io/npm/dm/@timlukahorstmann/mcp-weather)](https://www.npmjs.com/package/@timlukahorstmann/mcp-weather)\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/TimLukaHorstmann/mcp-weather)](https://archestra.ai/mcp-catalog/timlukahorstmann__mcp-weather)\n\n<p align=\"center\">\n  <img src=\"logo.png\" alt=\"MCP Weather Server Logo\" width=\"250\"/>\n  <a href=\"https://glama.ai/mcp/servers/@TimLukaHorstmann/mcp-weather\">\n    <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@TimLukaHorstmann/mcp-weather/badge\" alt=\"Weather MCP server\" />\n  </a>\n</p>\n\nA Model Context Protocol (MCP) server that provides hourly and daily weather forecasts using the AccuWeather API.\n\n---\n\n## Quick Start\n\nYou need an AccuWeather API key (free tier available).  \n[Sign up here](https://developer.accuweather.com/) and create an app to get your key.\n\nExport your API key as an environment variable:\n\n```bash\nexport ACCUWEATHER_API_KEY=your_api_key_here\n```\n\nThen run the MCP Weather server directly with:\n\n```bash\nnpx -y @timlukahorstmann/mcp-weather\n```\n\nOr, for HTTP/REST access via [supergateway](https://github.com/supercorp-ai/supergateway):\n\n```bash\nnpx -y supergateway --stdio \"npx -y @timlukahorstmann/mcp-weather\" \\\n  --port 4004 \\\n  --baseUrl http://127.0.0.1:4004 \\\n  --ssePath /messages \\\n  --messagePath /message \\\n  --cors \"*\" \\\n  --env ACCUWEATHER_API_KEY=\"$ACCUWEATHER_API_KEY\"\n```\n\n---\n\n## MCP Server Config Example\n\nFor integration with Claude Desktop or other MCP-compatible clients, add this to your config (e.g. `claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"weather\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@timlukahorstmann/mcp-weather\"],\n      \"env\": {\n        \"ACCUWEATHER_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n---\n\n## Overview\n\nThis MCP server allows large language models (like Claude) to access real-time weather data. When integrated with an LLM, it enables the model to:\n\n- Fetch accurate, up-to-date weather forecasts\n- Provide hourly weather data for the next 12 hours\n- Access daily weather forecasts for up to 15 days\n- Display data in both metric (°C) and imperial (°F) units\n- View temperature, conditions, precipitation information, and other weather details\n\n## Available Tools\n\n### Hourly Weather Forecast\n- Tool name: `weather-get_hourly`\n- Provides hourly forecasts for the next 12 hours\n- Parameters:\n  - `location` (required): City or location name\n  - `units` (optional): \"metric\" (Celsius, default) or \"imperial\" (Fahrenheit)\n\n### Daily Weather Forecast\n- Tool name: `weather-get_daily`\n- Provides daily forecasts for up to 15 days\n- Parameters:\n  - `location` (required): City or location name\n  - `days` (optional): Number of forecast days (1, 5, 10, or 15; default is 5)\n  - `units` (optional): \"metric\" (Celsius, default) or \"imperial\" (Fahrenheit)\n\n## Prerequisites\n\n- Node.js ≥18  \n- An AccuWeather API key (set via `.env` or your shell)\n\n## Setup\n\n1. **Clone this repository:**\n   ```bash\n   git clone https://github.com/TimLukaHorstmann/mcp-weather.git\n   cd mcp-weather\n   ```\n\n2. **Install dependencies:**\n   ```bash\n   npm install\n   ```\n\n3. **Get an AccuWeather API key:**\n   - Register at [AccuWeather API](https://developer.accuweather.com/)\n   - Create a new app and obtain an API key\n\n4. **Create a `.env` file with your API key:**\n   ```\n   ACCUWEATHER_API_KEY=your_api_key_here\n   ```\n\n5. **Build the project:**\n   ```bash\n   npm run build\n   ```\n\n## Usage with Claude Desktop\n\n1. Configure Claude Desktop to use this MCP server:\n   - Open Claude Desktop\n   - Go to Settings > Developer > Edit Config\n   - Add the following to your `claude_desktop_config.json`:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"weather\": {\n         \"command\": \"npx\",\n         \"args\": [\"-y\", \"@timlukahorstmann/mcp-weather\"],\n         \"env\": {\n           \"ACCUWEATHER_API_KEY\": \"your_api_key_here\"\n         }\n       }\n     }\n   }\n   ```\n\n2. Restart Claude Desktop\n\n3. In a new conversation, enable the MCP server by clicking the plug icon and selecting \"weather\"\n\n4. Now you can ask Claude for weather forecasts, such as:\n   - \"What's the hourly weather forecast for New York City?\"\n   - \"Give me the 5-day forecast for London.\"\n   - \"What will the weather be like in Tokyo this week in Fahrenheit?\"\n   - \"Will it rain in San Francisco tomorrow?\"\n\n## Development\n\n- Install dev dependencies: `npm install`\n- Lint your code:           `npm run lint`  \n- Build:                    `npm run build`  \n- Run tests:                `npm test`\n- Start in dev mode:        `npm run dev`\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## Future Enhancements\n\nWe're always looking to improve the MCP Weather Server. Here are some features we're considering for future releases:\n\n- **Extended Hourly Forecasts:** Beyond 12 hours, e.g., 24 or 48 hours.\n- **Weather Alerts:** Integration with AccuWeather's severe weather alerts API.\n- **Location Autocomplete:** Improved location searching with autocomplete suggestions.\n- **Historical Weather Data:** Access to past weather conditions.\n\nIf you have ideas for other features, feel free to open an issue!\n\n## Changelog\n\n### 0.4.0\n- Removed `sessionId` requirement from all tools as it was not used for anything internally\n- This simplifies integrations and reduces confusion for LLM usage\n\n### 0.3.0 and earlier\n- Initial releases with basic functionality\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "https://www.npmjs.com/package/mcp-weather",
      "npm_downloads": 219,
      "keywords": [
        "timlukahorstmann",
        "weather",
        "accuweather",
        "weather location",
        "weather forecasts",
        "mcp weather"
      ],
      "category": "weather-and-location-data"
    },
    "aaasoulmate--mcp-weather": {
      "owner": "aaasoulmate",
      "name": "mcp-weather",
      "url": "https://github.com/aaasoulmate/mcp-weather",
      "imageUrl": "/freedevtools/mcp/pfp/aaasoulmate.webp",
      "description": "Enhances Large Language Models with real-time weather data by connecting to external weather APIs for accurate and up-to-date information. Provides LLMs with the capability to access and utilize dynamic weather data for improved contextual responses.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-30T05:02:00Z",
      "readme_content": "# MCP-Augmented LLM for Reaching Weather Information\r\n\r\n## Overview\r\nThis system enhances Large Language Models (LLMs) with weather data capabilities using the Model Context Protocol (MCP) framework.\r\n\r\n## Demo\r\n![A demo](./images/demo1.png)\r\n\r\n### Components\r\n- **MCP Client**: Store LLms\r\n- **MCP Server**: Intermediate agent connecting external tools / resources\r\n\r\n## Configuration\r\n\r\n### DeepSeek Platform\r\n```env\r\nBASE_URL=https://api.deepseek.com\r\nMODEL=deepseek-chat\r\nOPENAI_API_KEY=<your_api_key_here>\r\n```\r\n\r\n### OpenWeather Platform\r\n```env\r\nOPENWEATHER_API_BASE=https://api.openweathermap.org/data/2.5/weather\r\nUSER_AGENT=weather-app/1.0\r\nAPI_KEY=<your_openweather_api_key>\r\n```\r\n\r\n## Installation & Execution\r\n\r\n1. Initialize project:\r\n```bash\r\nuv init weather_mcp\r\ncd weather_mcp\r\n```\r\nwhere weather_mcp is the project file name.\r\n\r\n2. Install dependencies:\r\n```bash\r\nuv add mcp httpx\r\n```\r\n\r\n3. Launch system:\r\n```bash\r\ncd ./utils\r\npython client.py server.py\r\n```\r\n\r\n> Note: Replace all `<your_api_key_here>` placeholders with actual API keys\r\n",
      "npm_url": "https://www.npmjs.com/package/mcp-weather",
      "npm_downloads": 219,
      "keywords": [
        "weather",
        "apis",
        "contextual",
        "weather apis",
        "weather data",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "acxelerator--mcp-tenki": {
      "owner": "acxelerator",
      "name": "mcp-tenki",
      "url": "https://github.com/acxelerator/mcp-tenki",
      "imageUrl": "/freedevtools/mcp/pfp/acxelerator.webp",
      "description": "Provides weather updates specifically for locations in Japan, allowing users to access real-time meteorological data.",
      "stars": 0,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-01-13T06:14:43Z",
      "readme_content": "# mcp-tenki\n\nA MCP server with weather of Japan\n\n<a href=\"https://glama.ai/mcp/servers/jbl3sfsi9r\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/jbl3sfsi9r/badge\" alt=\"Tenki MCP server\" /></a>\n\n# Setup\n\n```\n$ uv sync\n```\n\n# Running Server \n\n\nRun without clone\n\n```json\n{\n    \"mcpServers\": {\n        \"tenki\": {\n            \"command\": \"uvx\",\n            \"args\": [\"--from\", \"git+https://github.com/acxelerator/mcp-tenki.git\", \"mcp-tenki\"]\n        }\n    }\n}\n```\n\nRun with clone\n\n```json\n{\n    \"mcpServers\": {\n        \"tenki\": {\n            \"command\": \"uv\",\n            \"args\": [\"--directory\", \"/PATH/TO/REPOSITORY/mcp_tenki\", \"run\", \"main.py\"]\n        }\n    }\n}\n```\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "meteorological",
        "tenki",
        "acxelerator",
        "weather updates",
        "meteorological data",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "adarshem--mcp-server-learn": {
      "owner": "adarshem",
      "name": "mcp-server-learn",
      "url": "https://github.com/adarshem/mcp-server-learn",
      "imageUrl": "/freedevtools/mcp/pfp/adarshem.webp",
      "description": "Provides real-time weather alerts and forecasts for US locations using data from the National Weather Service, enabling applications to retrieve accurate weather information through tool calls.",
      "stars": 1,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-29T07:52:07Z",
      "readme_content": "# MCP Weather Server\n\n[![smithery badge](https://smithery.ai/badge/@adarshem/mcp-server-learn)](https://smithery.ai/server/@adarshem/mcp-server-learn)\n\nThis project is a demo implementation of a Model Context Protocol (MCP) server that provides weather-related tools. The server exposes two tools:\n\n1. **get-alerts**: Fetches active weather alerts for a given US state.\n2. **get-forecast**: Provides a weather forecast for a specific location based on latitude and longitude.\n\n<a href=\"https://glama.ai/mcp/servers/@adarshem/mcp-server-learn\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@adarshem/mcp-server-learn/badge\" alt=\"Weather Server MCP server\" />\n</a>\n\n## Features\n- Built using Node.js.\n- Implements MCP tools for weather data retrieval.\n- Uses the US National Weather Service API for accurate and up-to-date weather information.\n\n## Prerequisites\n- Node.js installed on your system.\n- Familiarity with MCP concepts and tools.\n\n## Setup\n\n### Installing via Smithery\n\nTo install mcp-server-learn for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@adarshem/mcp-server-learn):\n\n```bash\nnpx -y @smithery/cli install @adarshem/mcp-server-learn --client claude\n```\n\n### Manual Installation\n1. Clone the repository:\n   ```bash\n   git clone <repository-url>\n   cd weather\n   ```\n\n2. Install dependencies using `pnpm` (as configured in the project):\n   ```bash\n   pnpm install\n   ```\n\n3. Build the project:\n   ```bash\n   pnpm build\n   ```\n\n## Configuration\n\nUpdate your `settings.json` file of VSCode to add this MCP server\n\n```json\n{\n    \"mcpServers\": {\n        \"weather\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather/build/index.js\"\n            ]\n        }\n    }\n}\n```\n\n## Resources\n- [MCP Quickstart Guide](https://modelcontextprotocol.io/quickstart/server)\n- [US National Weather Service API](https://www.weather.gov/documentation/services-web-api)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "adarshem",
        "weather",
        "forecasts",
        "weather information",
        "data adarshem",
        "weather service"
      ],
      "category": "weather-and-location-data"
    },
    "adhikasp--mcp-weather": {
      "owner": "adhikasp",
      "name": "mcp-weather",
      "url": "https://github.com/adhikasp/mcp-weather",
      "imageUrl": "/freedevtools/mcp/pfp/adhikasp.webp",
      "description": "Provides hourly weather forecasts by utilizing the AccuWeather API to fetch and deliver weather data for specified locations.",
      "stars": 19,
      "forks": 20,
      "license": "The Unlicense",
      "language": "Python",
      "updated_at": "2025-09-29T22:33:52Z",
      "readme_content": "# MCP Weather Server\n\nA simple MCP server that provides hourly weather forecasts using the AccuWeather API.\n\n## Setup\n\n1. Install dependencies using `uv`:\n```bash\nuv venv\nuv sync\n```\n\n2. Create a `.env` file with your AccuWeather API key:\n```\nACCUWEATHER_API_KEY=your_api_key_here\n```\n\nYou can get an API key by registering at [AccuWeather API](https://developer.accuweather.com/).\n\n## Running the Server\n\n```json\n{\n    \"mcpServers\": {\n        \"weather\": {\n            \"command\": \"uvx\",\n            \"args\": [\"--from\", \"git+https://github.com/adhikasp/mcp-weather.git\", \"mcp-weather\"],\n            \"env\": {\n                \"ACCUWEATHER_API_KEY\": \"your_api_key_here\"\n            }\n        }\n    }\n}\n```\n\n## API Usage\n\n### Get Hourly Weather Forecast\n\nResponse:\n```json\n{\n    \"location\": \"Jakarta\",\n    \"location_key\": \"208971\",\n    \"country\": \"Indonesia\",\n    \"current_conditions\": {\n        \"temperature\": {\n            \"value\": 32.2,\n            \"unit\": \"C\"\n        },\n        \"weather_text\": \"Partly sunny\",\n        \"relative_humidity\": 75,\n        \"precipitation\": false,\n        \"observation_time\": \"2024-01-01T12:00:00+07:00\"\n    },\n    \"hourly_forecast\": [\n        {\n            \"relative_time\": \"+1 hour\",\n            \"temperature\": {\n                \"value\": 32.2,\n                \"unit\": \"C\"\n            },\n            \"weather_text\": \"Partly sunny\",\n            \"precipitation_probability\": 40,\n            \"precipitation_type\": \"Rain\",\n            \"precipitation_intensity\": \"Light\"\n        }\n    ]\n}\n```\n\nThe API provides:\n- Current weather conditions including temperature, weather description, humidity, and precipitation status\n- 12-hour forecast with hourly data including:\n  - Relative time from current time\n  - Temperature in Celsius\n  - Weather description\n  - Precipitation probability, type, and intensity",
      "npm_url": "https://www.npmjs.com/package/mcp-weather",
      "npm_downloads": 219,
      "keywords": [
        "adhikasp",
        "weather",
        "accuweather",
        "weather data",
        "mcp weather",
        "hourly weather"
      ],
      "category": "weather-and-location-data"
    },
    "aitiwari--weather": {
      "owner": "aitiwari",
      "name": "weather",
      "url": "https://github.com/aitiwari/weather",
      "imageUrl": "/freedevtools/mcp/pfp/aitiwari.webp",
      "description": "Fetch real-time weather alerts and forecasts for any location in the US, providing up-to-date weather information to enhance LLMs' environmental awareness.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-05-01T22:00:03Z",
      "readme_content": "# Model Context Protocol (MCP)\n\n[🚀 Why Is Everyone – Suddenly! – Obsessed With MCP/Servers? (Spoiler: It’s Redefining AI Orchestration)](https://www.linkedin.com/pulse/why-everyone-suddenly-obsessed-mcpservers-spoiler-its-sachin-tiwari-7qpnc/?trackingId=Gh6SLtQkP48VXXPdJQ5p%2Fw%3D%3D)\n\nModel Context Protocol (MCP) is an open standard developed by Anthropic in late 2024 to address a critical challenge in AI integration: connecting AI assistants with real-world data sources and systems[1][3]. MCP serves as a standardized interface for AI models to interact with external tools, databases, and APIs, similar to how USB-C functions as a universal port for devices[4][7].\n\n## Key Features and Benefits\n\n1. **Standardized Integration:** MCP eliminates the need for custom integrations, allowing developers to connect AI models to various data sources using a single protocol.\n\n2. **Dynamic Discovery:** AI agents can automatically detect and utilize available MCP servers and their capabilities without hard-coded integration.\n\n3. **Enhanced Security:** MCP enables developers to implement security measures within servers, ensuring AI agents only access permitted data or actions.\n\n4. **Flexibility:** The protocol is model-agnostic, allowing any AI model (e.g., Claude, GPT-4, open-source LLMs) to use MCP-enabled tools.\n\n5. **Ecosystem Growth:** Since its introduction, MCP has gained significant traction, with over 1,000 community-built MCP servers available by February 2025.\n\n## Impact on AI Development\n\nMCP is transforming the AI landscape by:\n\n1. **Simplifying Integration:** Reducing the complexity of connecting AI models to external systems from an \"N×M\" problem to an \"N+M\" problem.\n\n2. **Enabling Complex Workflows:** Facilitating multi-step, cross-system operations for AI agents, such as event planning that involves multiple platforms.\n\n3. **Fostering Collaboration:** Providing a shared workspace for multi-agent systems, allowing specialized AI agents to coordinate tasks efficiently.\n\n4. **Enhancing Personalization:** Enabling secure integration of personal AI assistants with users' data and applications.\n\n5. **Improving Enterprise Governance:** Standardizing AI access to internal tools and enabling better monitoring and control of AI interactions.\n\nAs of March 2025, MCP has become a significant topic in the AI community, with many viewing it as a crucial component for developing more integrated and context-aware AI systems. Its open nature and backing by a major AI player have contributed to its rapid adoption and evolution, positioning MCP as a potential de facto standard for AI-world integration.\n\n---\n\nModel Context Protocol (MCP) - weather quick start :\n=======\n\n## Overview\n\nThis document provides a comprehensive guide to building a simple Model Context Protocol (MCP) weather server and connecting it to a host, Claude for Desktop. The server exposes two tools: `get-alerts` and `get-forecast`, which fetch weather alerts and forecasts using the National Weather Service API.\n\n## Table of Contents\n\n1.  [Introduction](#introduction)\n2.  [Prerequisites](#prerequisites)\n3.  [System Requirements](#system-requirements)\n4.  [Setup](#setup)\n5.  [Building the Server](#building-the-server)\n    - [Importing Packages and Setting Up the Instance](#importing-packages-and-setting-up-the-instance)\n    - [Helper Functions](#helper-functions)\n    - [Implementing Tool Execution](#implementing-tool-execution)\n    - [Running the Server](#running-the-server)\n6.  [Testing with Claude for Desktop](#testing-your-server-with-claude-for-desktop)\n    - [Configuration](#configuration)\n    - [Test with Commands](#test-with-commands)\n7.  [Under the Hood](#what’s-happening-under-the-hood)\n8.  [Troubleshooting](#troubleshooting)\n\n\n## Introduction\n\nThis guide walks you through creating an MCP server to enhance LLMs (like Claude) with real-time weather data. The server utilizes the MCP framework to expose tools for fetching weather alerts and forecasts, addressing the LLM's lack of native environmental awareness.\n\n## Prerequisites\n\nBefore starting, ensure you have:\n\n- Familiarity with Python\n- Understanding of LLMs like Claude\n\n## System Requirements\n\n- Python 3.10 or higher\n- MCP SDK 1.2.0 or higher\n\n## Setup\n\n1.  **Install `uv`:**\n\n    window\n    ```\n    powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n    ```\n    macos/linux\n     ```\n    curl -LsSf https://astral.sh/uv/install.sh | sh\n    ```\n\n\n    Restart your terminal to ensure the `uv` command is recognized.\n\n2.  **Create and Set Up Project:**\n\n    window(cd to your dev repo_path run below command in powershell/..)\n\n    ```\n    # Create a new directory for our project\n      uv init weather\n      cd weather\n\n      # Create virtual environment and activate it\n      uv venv\n      .venv\\Scripts\\activate\n\n      # Install dependencies\n      uv add mcp[cli] httpx\n\n      # Create our server file\n      new-item weather.py\n    ```\n    macos/linux\n      ```\n      # Create a new directory for our project\n      uv init weather\n      cd weather\n\n      # Create virtual environment and activate it\n      uv venv\n      source .venv/bin/activate\n\n      # Install dependencies\n      uv add \"mcp[cli]\" httpx\n\n      # Create our server file\n      touch weather.py\n\n    ```\n\n## Building the Server\n\n### Importing Packages and Setting Up the Instance\n\nAdd the following code to the top of your `weather.py` file:\n```\nfrom typing import Any\nimport httpx\nfrom mcp.server.fastmcp import FastMCP\n\n\n# Initialize FastMCP server\nmcp = FastMCP(\"weather\")\n\n# Constants\nNWS_API_BASE = \"https://api.weather.gov\"\nUSER_AGENT = \"weather-app/1.0\"\n\n\n#helper function\nasync def make_nws_request(url: str) -> dict[str, Any] | None:\n    \"\"\"Make a request to the NWS API with proper error handling.\"\"\"\n    headers = {\n        \"User-Agent\": USER_AGENT,\n        \"Accept\": \"application/geo+json\"\n    }\n    async with httpx.AsyncClient() as client:\n        try:\n            response = await client.get(url, headers=headers, timeout=30.0)\n            response.raise_for_status()\n            return response.json()\n        except Exception:\n            return None\n\ndef format_alert(feature: dict) -> str:\n    \"\"\"Format an alert feature into a readable string.\"\"\"\n    props = feature[\"properties\"]\n    return f\"\"\"\nEvent: {props.get('event', 'Unknown')}\nArea: {props.get('areaDesc', 'Unknown')}\nSeverity: {props.get('severity', 'Unknown')}\nDescription: {props.get('description', 'No description available')}\nInstructions: {props.get('instruction', 'No specific instructions provided')}\n\"\"\"\n\n\n@mcp.tool()\nasync def get_alerts(state: str) -> str:\n    \"\"\"Get weather alerts for a US state.\n\n    Args:\n        state: Two-letter US state code (e.g. CA, NY)\n    \"\"\"\n    url = f\"{NWS_API_BASE}/alerts/active/area/{state}\"\n    data = await make_nws_request(url)\n\n    if not data or \"features\" not in data:\n        return \"Unable to fetch alerts or no alerts found.\"\n\n    if not data[\"features\"]:\n        return \"No active alerts for this state.\"\n\n    alerts = [format_alert(feature) for feature in data[\"features\"]]\n    return \"\\n---\\n\".join(alerts)\n\n@mcp.tool()\nasync def get_forecast(latitude: float, longitude: float) -> str:\n    \"\"\"Get weather forecast for a location.\n\n    Args:\n        latitude: Latitude of the location\n        longitude: Longitude of the location\n    \"\"\"\n    # First get the forecast grid endpoint\n    points_url = f\"{NWS_API_BASE}/points/{latitude},{longitude}\"\n    points_data = await make_nws_request(points_url)\n\n    if not points_data:\n        return \"Unable to fetch forecast data for this location.\"\n\n    # Get the forecast URL from the points response\n    forecast_url = points_data[\"properties\"][\"forecast\"]\n    forecast_data = await make_nws_request(forecast_url)\n\n    if not forecast_data:\n        return \"Unable to fetch detailed forecast.\"\n\n    # Format the periods into a readable forecast\n    periods = forecast_data[\"properties\"][\"periods\"]\n    forecasts = []\n    for period in periods[:5]:  # Only show next 5 periods\n        forecast = f\"\"\"\n                    {period['name']}:\n                    Temperature: {period['temperature']}°{period['temperatureUnit']}\n                    Wind: {period['windSpeed']} {period['windDirection']}\n                    Forecast: {period['detailedForecast']}\n                    \"\"\"\n        forecasts.append(forecast)\n\n    return \"\\n---\\n\".join(forecasts)\n\n\nif __name__ == \"__main__\":\n    # Initialize and run the server\n    mcp.run(transport='stdio')\n```\n\n### Running the Server\nTo verify your server, run:\n\n```\nuv run weather.py\n\n```\n\n## Testing Your Server with Claude for Desktop\n\n### Configuration\n\n1.  **Install/Update Claude for Desktop:** Ensure you have the latest version installed.\n2.  **Configure MCP Servers:** Open or create the configuration file at `~/Library/Application Support/Claude/claude_desktop_config.json`.\n\n![alt text](screenshot/edit_config.png)\n\n  -> **RESTART THE SYSTEM IF NOT WORKS**\n\n3.  **Add Server Configuration:**\n\n    ```\n    {\n      \"mcpServers\": {\n        \"weather\": {\n          \"command\": \"uv\",\n          \"args\": [\n            \"--directory\",\n            \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather\",# S:\\\\Dev\\\\weather\n            \"run\",\n            \"weather.py\"\n          ]\n        }\n      }\n    }\n    ```\n\n    Replace `/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather` with the correct absolute path to your project directory. You may need to provide the full path to the `uv` executable in the `command` field (use `which uv` on MacOS/Linux or `where uv` on Windows to find it).\n\n4.  **Restart Claude for Desktop.**\n\n\n### Test with Commands\n\n1.  **Verify Tool Detection:** Look for the hammer icon in Claude for Desktop. Clicking it should list the `get_alerts` and `get_forecast` tools.\n\n![alt text](screenshot/tools_added.png)\n2.  **Run Test Queries:**\n\n    - \"What’s the weather in Sacramento?\"\n    - \"What are the active weather alerts in Texas?\"\n\n    Note: These queries work for US locations only, as they use the US National Weather Service.\n\n## What’s Happening Under the Hood\n\n1.  The client sends your question to Claude.\n2.  Claude analyzes available tools and decides which to use.\n3.  The client executes the chosen tool(s) through the MCP server.\n4.  Results are sent back to Claude.\n5.  Claude formulates and displays a natural language response.\n\n## Troubleshooting\n\n- **Getting logs from Claude for Desktop**\n\n  - `mcp.log`: General MCP connections and failures.\n  - `mcp-server-SERVERNAME.log`: Error logs from the named server.\n\n  ```\n  tail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n  ```\n\n- **Server not showing up in Claude**\n  - Check `claude_desktop_config.json` file syntax.\n  - Ensure the project path is absolute.\n  - Restart Claude for Desktop completely.\n- **Tool calls failing silently**\n  - Check Claude’s logs for errors.\n  - Verify your server builds and runs without errors.\n  - Try restarting Claude for Desktop.\n- **None of this is working. What do I do?**\n  - Refer to the [debugging guide](https://modelcontextprotocol.io/debugging).\n- **Error: Failed to retrieve grid point data**\n\n  - Coordinates outside the US\n  - NWS API issues\n  - Rate limiting\n\n  Fix:\n\n  - Verify US coordinates\n  - Add a small delay between requests\n  - Check the [NWS API status page](https://www.weather.gov/help/status)\n\n- **Error: No active alerts for \\[STATE]**\n  - No current weather alerts for that state. Try a different state.\n\nFor more advanced troubleshooting, check out the [Debugging MCP guide](https://modelcontextprotocol.io/debugging).\n\n## MCP Inspector\n```\nnpx @modelcontextprotocol/inspector uv run weather.py\n\n```\n\n![alt text](screenshot/inspector_script.png)\n\n![alt text](screenshot/inspector_run.png)\n\ndone with local test\n\n## Published in Github\n[🔗 Github - aitiwari/weather ](https://github.com/aitiwari/weather)\n \n",
      "npm_url": "https://www.npmjs.com/package/weather",
      "npm_downloads": 5901,
      "keywords": [
        "forecasts",
        "aitiwari",
        "weather",
        "weather information",
        "aitiwari weather",
        "weather alerts"
      ],
      "category": "weather-and-location-data"
    },
    "ajeetraina--bengaluru-bmtc-mcp": {
      "owner": "ajeetraina",
      "name": "bengaluru-bmtc-mcp",
      "url": "https://github.com/ajeetraina/bengaluru-bmtc-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ajeetraina.webp",
      "description": "Provides real-time transit data including live bus locations, route details, stop information, and ETA calculations for Bangalore Metropolitan Transport Corporation buses through a standardized API.",
      "stars": 3,
      "forks": 2,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-05T21:03:49Z",
      "readme_content": "# Bengaluru BMTC MCP Server\n\nAn implementation of a Model Context Protocol (MCP) server for Bangalore Metropolitan Transport Corporation (BMTC) bus services.\n\n## Architecture\n\n\nThe BMTC MCP server follows a modular, layered architecture. The system is designed to handle real-time transit data from Bangalore Metropolitan Transport Corporation buses and provide it through a standardized API.\n\n### Core Components\n\n1. **API Layer**: RESTful endpoints for authentication, routes, stops, bus locations, and ETA information\n2. **Service Layer**: Business logic, data transformation, and ETA calculations\n3. **Data Access Layer**: MongoDB integration via Mongoose ODM\n4. **Caching Layer**: Redis-based caching for improved performance\n5. **External Integration Layer**: BMTC API integration\n\n[Read the full architecture documentation](docs/architecture.md)\n\n## Features\n\nHere're the list of things that you can find using MCP Client or chat window:\n\n- Real-time bus location tracking \n- Route information and scheduling \n- Stop details and ETA (Estimated Time of Arrival) \n- Support for over 2,200 bus routes and 8,400+ bus stops in Bengaluru\n- Authentication and authorization\n- Data caching and optimization\n- GeoSpatial queries for nearby stops and buses\n\n## Prerequisites\n\n- Node.js (v14 or later)\n- npm or yarn\n- MongoDB\n- Redis (optional, for caching)\n- Git\n\n## Installation and Setup\n\n### Method 1: Standard Installation\n\n1. **Clone the repository**\n\n```bash\ngit clone https://github.com/ajeetraina/bengaluru-bmtc-mcp.git\ncd bengaluru-bmtc-mcp\n```\n\n2. **Install dependencies**\n\n```bash\nnpm install\n```\n\n3. **Configure environment variables**\n\n```bash\ncp .env.example .env\n```\n\nEdit the `.env` file with your configuration:\n\n```\nPORT=3000\nNODE_ENV=development\nMONGO_URI=mongodb://localhost:27017/bmtc-mcp\nREDIS_URI=redis://localhost:6379\nAPI_KEY=your_api_key_here\nJWT_SECRET=your_jwt_secret_here\nJWT_EXPIRES_IN=86400\nBMTC_API_ENDPOINT=https://bmtc-api-endpoint.example\nBMTC_API_KEY=your_bmtc_api_key_here\nCACHE_DURATION=300\nLOG_LEVEL=info\n```\n\n4. **Seed the database with mock data (optional)**\n\n```bash\nnode src/scripts/seed.js\n```\n\n5. **Start the server**\n\n```bash\nnpm start\n```\n\nFor development with auto-restart:\n\n```bash\nnpm run dev\n```\n\n### Method 2: Using Docker Compose\n\n1. **Clone the repository**\n\n```bash\ngit clone https://github.com/ajeetraina/bengaluru-bmtc-mcp.git\ncd bengaluru-bmtc-mcp\n```\n\n2. **Configure environment variables (optional)**\n\nYou can modify the environment variables directly in the `docker-compose.yml` file or create a `.env` file:\n\n```bash\ncp .env.example .env\n```\n\n3. **Build and start the containers**\n\n```bash\ndocker-compose up -d\n```\n\nThis will start three containers:\n- `bmtc-mcp-api`: The Node.js API server\n- `bmtc-mcp-mongo`: MongoDB database\n- `bmtc-mcp-redis`: Redis cache server\n\n4. **Seed the database with mock data (optional)**\n\n```bash\ndocker-compose exec api node src/scripts/seed.js\n```\n\n5. **View logs**\n\n```bash\ndocker-compose logs -f api\n```\n\n6. **Stop the containers**\n\n```bash\ndocker-compose down\n```\n\nTo remove volumes as well:\n\n```bash\ndocker-compose down -v\n```\n\n## Using the API\n\nOnce the server is running, you can access the API at:\n\n```\nhttp://localhost:3000/api/v1\n```\n\nFor API documentation, visit:\n\n```\nhttp://localhost:3000/api-docs\n```\n\n### Example API Endpoints\n\n```\n# Authentication\nPOST /api/v1/auth/login\nGET /api/v1/auth/me\n\n# Routes\nGET /api/v1/routes\nGET /api/v1/routes/:routeId\nGET /api/v1/routes/search?source=Kempegowda&destination=Electronic\n\n# Stops\nGET /api/v1/stops\nGET /api/v1/stops/:stopId\nGET /api/v1/stops/near?lat=12.9767&lng=77.5713&radius=500\nGET /api/v1/stops/search?query=Lalbagh\n\n# Bus Locations\nGET /api/v1/bus-locations\nGET /api/v1/bus-locations/:busId\nGET /api/v1/bus-locations/near?lat=12.9767&lng=77.5713&radius=1000\n\n# ETA\nGET /api/v1/eta/:stopId\nGET /api/v1/eta/:stopId/:routeId\n```\n\n## API Keys\n\n### JWT Secret\n\nThe JWT secret is used for signing authentication tokens. Generate a secure random string:\n\n```bash\nnode -e \"console.log(require('crypto').randomBytes(32).toString('hex'))\"\n```\n\nAdd this to your `.env` file:\n\n```\nJWT_SECRET=your_generated_secret_here\n```\n\n### BMTC API Key\n\nFor development, you can use mock data without an actual BMTC API key:\n\n```\nBMTC_API_ENDPOINT=https://bmtc-api-endpoint.example\nBMTC_API_KEY=your_bmtc_api_key_here\n```\n\nFor production, you would need to contact BMTC directly to request official API access.\n\n## Development\n\n### Testing\n\nRun the tests:\n\n```bash\nnpm test\n```\n\nRun tests with coverage:\n\n```bash\nnpm run test:coverage\n```\n\n### Linting\n\nCheck code style:\n\n```bash\nnpm run lint\n```\n\nFix code style issues:\n\n```bash\nnpm run lint:fix\n```\n\n### Project Structure\n\n```\nbengaluru-bmtc-mcp/\n├── .env.example            # Environment variables template\n├── .eslintrc.json          # ESLint configuration\n├── .github/                # GitHub configuration\n│   └── workflows/          # GitHub Actions workflows\n├── .gitignore              # Git ignore file\n├── CONTRIBUTING.md         # Contribution guidelines\n├── Dockerfile              # Docker configuration\n├── LICENSE                 # MIT License\n├── README.md               # Project documentation\n├── docker-compose.yml      # Docker Compose configuration\n├── docs/                   # Documentation\n│   ├── api.md              # API documentation\n│   └── setup.md            # Setup guide\n├── jest.config.js          # Jest configuration\n├── package.json            # Project dependencies\n└── src/                    # Source code\n    ├── config/             # Configuration files\n    ├── controllers/        # Request handlers\n    ├── index.js            # Application entry point\n    ├── middlewares/        # Express middlewares\n    ├── models/             # MongoDB models\n    ├── public/             # Static files\n    ├── routes/             # API routes\n    ├── scripts/            # Utility scripts\n    ├── services/           # External service integrations\n    ├── tests/              # Test files\n    └── utils/              # Utility functions\n```\n\n## Contributing\n\nPlease read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgements\n\n- [Bangalore Metropolitan Transport Corporation (BMTC)](https://mybmtc.karnataka.gov.in)\n- [Singapore LTA MCP Implementation](https://github.com/arjunkmrm/mcp-sg-lta) for inspiration\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "bmtc",
        "bangalore",
        "bus",
        "bengaluru bmtc",
        "bmtc mcp",
        "transit data"
      ],
      "category": "weather-and-location-data"
    },
    "akaramanapp--weather-mcp-server": {
      "owner": "akaramanapp",
      "name": "weather-mcp-server",
      "url": "https://github.com/akaramanapp/weather-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/akaramanapp.webp",
      "description": "Provides real-time weather information and alerts for any US location using data from the National Weather Service API. Delivers detailed forecasts including temperature, wind conditions, and short descriptions of the weather.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-29T11:33:36Z",
      "readme_content": "# Weather MCP Server\n\nA Model Context Protocol (MCP) server that provides weather information and alerts for US locations using the National Weather Service (NWS) API. This server is designed to be used by AI agents through the Model Context Protocol.\n\n## Features\n\n- Tool for getting weather alerts for any US state\n- Tool for getting detailed weather forecasts for any US location using coordinates\n- Supports temperature, wind conditions, and short forecast descriptions\n- Real-time data from the National Weather Service\n\n## Prerequisites\n\n- Node.js (v16 or higher)\n- npm or yarn package manager\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/akaramanapp/weather-mcp-server.git\ncd weather-mcp-server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the application:\n```bash\nnpm run build\n```\n\n## MCP Tools\n\nThe server provides two MCP tools that can be used by AI agents:\n\n### get-alerts\n\nGet weather alerts for a specific US state.\n\nParameters:\n- `state`: Two-letter state code (e.g., CA, NY)\n\nExample response:\n```json\n{\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"Active alerts for CA: ...\"\n    }\n  ]\n}\n```\n\n### get-forecast\n\nGet weather forecast for a specific location using coordinates.\n\nParameters:\n- `latitude`: Latitude of the location (-90 to 90)\n- `longitude`: Longitude of the location (-180 to 180)\n\nExample response:\n```json\n{\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"Morning: Temperature: 72°F, Wind: 5mph NW, Partly cloudy...\"\n    }\n  ]\n}\n```\n\n## Project Structure\n\n```\nweather/\n├── src/\n│   └── index.ts    # Main server code with MCP tool implementations\n├── build/          # Compiled JavaScript files\n├── package.json    # Project dependencies and scripts\n└── tsconfig.json   # TypeScript configuration\n```\n\n## Technical Details\n\n- Built with TypeScript\n- Implements Model Context Protocol (MCP) server\n- Uses @modelcontextprotocol/sdk for MCP server implementation\n- Interfaces with the National Weather Service (NWS) API\n- ES2022 target with Node16 module resolution\n\n## Development\n\nTo modify or extend the server:\n\n1. Make changes in the `src/index.ts` file\n2. Rebuild the application:\n```bash\nnpm run build\n```\n\n## Dependencies\n\n- @modelcontextprotocol/sdk: MCP server implementation framework\n- zod: Runtime type checking and validation for tool parameters\n- TypeScript: Development dependency for type safety\n\n## License\n\nISC\n\n## Notes\n\n- This server only works for US locations as it uses the National Weather Service API\n- API requests are rate-limited and require a User-Agent header\n- All coordinates should be in decimal degrees format\n- This is not a standalone CLI application, but rather a server that provides tools for AI agents through the Model Context Protocol ",
      "npm_url": "https://www.npmjs.com/package/weather-mcp-server",
      "npm_downloads": 405,
      "keywords": [
        "akaramanapp",
        "weather",
        "forecasts",
        "akaramanapp weather",
        "weather information",
        "data akaramanapp"
      ],
      "category": "weather-and-location-data"
    },
    "akramsheriff5--MCP-Server": {
      "owner": "akramsheriff5",
      "name": "MCP-Server",
      "url": "https://github.com/akramsheriff5/MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/akramsheriff5.webp",
      "description": "Provides real-time weather alerts and detailed forecasts for US states, along with capabilities for support ticket creation. Offers intraday stock market data, technical analysis, and trade recommendations through integrated APIs.",
      "stars": 2,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-05-06T12:22:08Z",
      "readme_content": "## Features\nLightweight programs that each expose specific capabilities through the standardized Model Context Protocol\n\n\n### Weather Server\n- **Weather Alerts**: Fetch active weather alerts for a specific US state.\n- **Weather Forecast**: Retrieve detailed weather forecasts for a given location.\n- **Freshdesk Integration**: Create support tickets in Freshdesk.\n\n### Finance Module\n- **Intraday Market Data**: Fetch intraday stock market data using the AlphaVantage API.\n- **Technical Analysis**:\n  - Calculate moving averages (short and long periods).\n  - Compute Relative Strength Index (RSI).\n- **Trade Recommendations**: Generate comprehensive trade recommendations based on technical indicators.\n\n## Installation\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/your-username/mcp-weather-server.git\n   cd mcp-weather-server\n   ```\n\n2. Set up a Python virtual environment:\n   ```bash\n   python -m venv venv\n   source venv/bin/activate  # On Windows: venv\\Scripts\\activate\n   ```\n\n3. Install dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n4. Navigate to the `finance` module and install its dependencies:\n   ```bash\n   cd finance\n   pip install -r requirements.txt\n   ```\n\n## Running the Project\n\n### Weather Server\nRun the weather server:\n```bash\npython main.py\n```\n\n### Finance Server\nRun the finance server:\n```bash\ncd finance\npython finance_server.py\n```\n\n### Weather Demo\nRun the weather demo server:\n```bash\npython weather-demo.py\n```",
      "npm_url": "https://www.npmjs.com/package/mcp-server",
      "npm_downloads": 29732,
      "keywords": [
        "akramsheriff5",
        "mcp",
        "forecasts",
        "akramsheriff5 mcp",
        "mcp server",
        "weather alerts"
      ],
      "category": "weather-and-location-data"
    },
    "amanasmuei--mcp-server-malaysia-prayer-time": {
      "owner": "amanasmuei",
      "name": "mcp-server-malaysia-prayer-time",
      "url": "https://github.com/amanasmuei/mcp-server-malaysia-prayer-time",
      "imageUrl": "/freedevtools/mcp/pfp/amanasmuei.webp",
      "description": "Retrieve accurate Islamic prayer times for various locations in Malaysia, list available zones, and check current prayer statuses.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-21T01:47:09Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/amanasmuei-mcp-server-malaysia-prayer-time-badge.png)](https://mseep.ai/app/amanasmuei-mcp-server-malaysia-prayer-time)\n\n<div align=\"center\">\n  <img src=\"public/images/banner.svg\" alt=\"Malaysia Prayer Time MCP Server\" width=\"800\">\n</div>\n\n<p align=\"center\">\n  <a href=\"#features\">Features</a> •\n  <a href=\"#installation\">Installation</a> •\n  <a href=\"#configuration\">Configuration</a> •\n  <a href=\"#usage\">Usage</a> •\n  <a href=\"#api-reference\">API Reference</a> •\n  <a href=\"#troubleshooting\">Troubleshooting</a> •\n  <a href=\"#contributing\">Contributing</a> •\n  <a href=\"#license\">License</a>\n</p>\n\n---\n\n## Overview\n\nMalaysia Prayer Time MCP Server provides accurate Islamic prayer times for locations throughout Malaysia. This server implements the Model Context Protocol (MCP) to seamlessly integrate with Claude Desktop, delivering real-time prayer schedules directly through your AI assistant.\n\nThe server utilizes the waktusolat.app API to retrieve JAKIM-verified prayer times and supports searching by city, zone code, or coordinates.\n\n## Features\n\n✅ **Location-Based Times**: Get prayer times for any city or district in Malaysia  \n✅ **Coordinate Support**: Find prayer times using latitude and longitude coordinates  \n✅ **Zone Code Access**: Directly query using JAKIM zone codes (e.g., `SGR03` for Kuala Lumpur)  \n✅ **Complete Prayer Schedule**: Retrieve all daily prayer times (Fajr, Sunrise, Dhuhr, Asr, Maghrib, Isha)  \n✅ **Current Prayer Status**: Determine the current and next prayer times  \n✅ **Robust Error Handling**: Graceful handling of network issues and API changes  \n✅ **Seamless Claude Integration**: Clean integration with Claude Desktop via MCP  \n\n## Installation\n\n### Prerequisites\n\n- Python 3.10 or higher\n- Claude Desktop (latest version)\n- `pip` or `uv` package manager\n\n### Option 1: Installation from GitHub\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/mcp-server-malaysia-prayer-time.git\ncd mcp-server-malaysia-prayer-time\n\n# Create and activate a virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\npip install -e .\n```\n\n### Option 2: Using uv (Recommended)\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/mcp-server-malaysia-prayer-time.git\ncd mcp-server-malaysia-prayer-time\n\n# Create and activate a virtual environment using uv\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\nuv pip install -e .\n```\n\n## Configuration\n\n### Configure Claude Desktop\n\n1. Create or edit the Claude Desktop configuration file:\n\n**macOS**:\n```bash\nmkdir -p ~/Library/Application\\ Support/Claude/\nnano ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n**Windows**:\n```bash\nmkdir -p %APPDATA%\\Claude\nnotepad %APPDATA%\\Claude\\claude_desktop_config.json\n```\n\n2. Add the following configuration (adjust paths according to your setup):\n\n```json\n{\n    \"mcpServers\": {\n        \"malaysia-prayer-time\": {\n            \"command\": \"/absolute/path/to/your/.venv/bin/python\",\n            \"args\": [\n                \"main.py\"\n            ],\n            \"cwd\": \"/absolute/path/to/mcp-server-malaysia-prayer-time\"\n        }\n    }\n}\n```\n\n3. Restart Claude Desktop completely\n\n## Usage\n\nOnce configured, you can interact with prayer times through Claude Desktop using natural language queries:\n\n### Examples\n\n#### Get Prayer Times by City/Zone\n\n- \"What are the prayer times for Kuala Lumpur today?\"\n- \"Show prayer times for Ipoh, Malaysia\"\n- \"Get prayer times for PRK02\" (using zone code)\n\n#### Get Prayer Times by Coordinates\n\n- \"What are the prayer times at coordinates 3.1390, 101.6869?\"\n- \"Show prayer schedule for location 5.4141, 100.3288\"\n\n#### List Available Zones\n\n- \"List all prayer time zones in Malaysia\"\n- \"Show me all available JAKIM zone codes\"\n\n## API Reference\n\n### Available Tools\n\nThe MCP server exposes the following tools to Claude:\n\n#### `get_prayer_times`\n\nRetrieves prayer times for a specific city or zone code in Malaysia.\n\n**Parameters**:\n- `city` (string, default: \"kuala lumpur\"): City name or zone code (e.g., \"SGR03\")\n- `country` (string, default: \"malaysia\"): Currently only supports \"malaysia\"\n- `date` (string, default: \"today\"): Date in YYYY-MM-DD format or \"today\"\n\n#### `get_prayer_times_by_coordinates`\n\nRetrieves prayer times based on geographic coordinates.\n\n**Parameters**:\n- `latitude` (float): Latitude coordinate\n- `longitude` (float): Longitude coordinate\n- `date` (string, default: \"today\"): Date in YYYY-MM-DD format or \"today\"\n\n#### `list_zones`\n\nLists all available prayer time zones in Malaysia with their corresponding codes.\n\n### Prayer Time Information\n\nThe server provides these prayer times:\n- Imsak (pre-dawn meal time, if available)\n- Fajr (dawn prayer)\n- Syuruk/Sunrise\n- Dhuhr (noon prayer)\n- Asr (afternoon prayer)\n- Maghrib (sunset prayer)\n- Isha (night prayer)\n\n## Zone Coverage\n\nThe server currently supports all JAKIM zones in Malaysia. The coordinate-based lookup supports these major areas:\n\n- Kuala Lumpur/Selangor: SGR01-SGR04\n- Perak: PRK01-PRK04\n- Penang: PNG01\n- Johor: JHR01\n- Kedah: KDH01\n- Terengganu: TRG01\n- Kelantan: KTN01\n- Melaka: MLK01\n\n## Troubleshooting\n\n### Common Issues\n\n#### Claude Cannot Connect to the Server\n\n1. Verify configuration paths are absolute and correct\n2. Check Claude logs:\n   ```bash\n   # macOS\n   tail -f ~/Library/Logs/Claude/mcp*.log\n   \n   # Windows\n   type %APPDATA%\\Claude\\Logs\\mcp*.log\n   ```\n\n3. Test the server directly:\n   ```bash\n   cd /path/to/mcp-server-malaysia-prayer-time\n   python main.py\n   ```\n\n#### No Prayer Times Available\n\n1. Verify internet connectivity\n2. Check if the zone code is valid (use `list_zones`)\n3. The API may be temporarily unavailable - try again later\n\n#### City Not Found\n\nTry using a different spelling, a nearby major city, or the appropriate zone code\n\n## Contributing\n\nContributions are welcome! Here's how you can contribute:\n\n1. Fork the repository\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\n3. Commit your changes: `git commit -m 'Add some amazing feature'`\n4. Push to the branch: `git push origin feature/amazing-feature`\n5. Open a Pull Request\n\n### Development Setup\n\n```bash\n# Clone your fork\ngit clone https://github.com/yourusername/mcp-server-malaysia-prayer-time.git\ncd mcp-server-malaysia-prayer-time\n\n# Set up development environment\npython -m venv .venv\nsource .venv/bin/activate\npip install -e \".[dev]\"  # Installs dev dependencies\n\n# Run tests\npytest\n```\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgments\n\n- [waktusolat.app](https://waktusolat.app/) - For providing the prayer time data API\n- [Model Context Protocol](https://modelcontextprotocol.io/) - For the MCP framework\n- JAKIM - For the official prayer times\n- Claude Desktop - For the AI integration platform\n\n---\n\n<div align=\"center\">\n  <p>Created by <a href=\"https://github.com/amanasmuei\">abdul rahman m asmuei</a></p>\n  <p>amanasmuei@gmail.com</p>\n</div>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "malaysia",
        "amanasmuei",
        "prayer",
        "malaysia prayer",
        "malaysia list",
        "server malaysia"
      ],
      "category": "weather-and-location-data"
    },
    "asifdotpy--MCP-Weather-Server": {
      "owner": "asifdotpy",
      "name": "MCP-Weather-Server",
      "url": "https://github.com/asifdotpy/MCP-Weather-Server",
      "imageUrl": "/freedevtools/mcp/pfp/asifdotpy.webp",
      "description": "Fetch real-time weather alerts and forecasts for any location in the United States using state codes or geographic coordinates. Access detailed weather information with structured logging and robust error handling.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-07-24T04:24:09Z",
      "readme_content": "# Weather Information Service\n\nThis project provides a service to fetch weather information, including alerts and forecasts, from the National Weather Service (NWS) API.\n\n## Project Structure\n\n*   `main.py`: A simple entry point for the project. (Currently, it only prints a hello message).\n*   `weather.py`: This is the core of the project. It implements the `WeatherService` which uses the `FastMCP` framework to expose tools for fetching weather data. It includes structured JSON logging and communicates with the NWS API.\n*   `smithery.yaml`: This is a configuration file for Smithery, a tool used to define how to run and interact with the `WeatherService`.\n*   `Dockerfile`: Suggests that the project can be containerized using Docker.\n*   `pyproject.toml`: Defines project metadata and dependencies for Python projects.\n*   `.gitignore`: Specifies intentionally untracked files that Git should ignore.\n*   `.python-version`: Specifies the Python version for the project (likely for use with tools like `pyenv`).\n*   `uv.lock`: A lock file generated by the `uv` Python package installer and resolver, ensuring reproducible builds.\n\n(Further sections on WeatherService tools, running the project, and logging will be added in subsequent steps).\n\n## WeatherService Tools\n\nThe `weather.py` script provides a `WeatherService` with the following tools:\n\n### `get_alerts(state: str) -> str`\n\n*   **Purpose:** Fetches active weather alerts for a given US state.\n*   **Arguments:**\n    *   `state` (str): A two-letter US state code (e.g., `CA`, `NY`).\n*   **Output:** A string containing formatted weather alerts, or a message if no alerts are found or an error occurs.\n    *   **Example (successful alert fetch):**\n        ```\n        Event: Special Weather Statement\n        Area: San Francisco Bay Shoreline\n        Severity: Minor\n        Description: ...\n        Instructions: ...\n        ---\n        Event: Coastal Flood Advisory\n        Area: North Bay Interior Valleys\n        Severity: Moderate\n        Description: ...\n        Instructions: ...\n        ```\n    *   **Example (no alerts):**\n        ```\n        No active alerts for this state.\n        ```\n    *   **Example (error):**\n        ```\n        Unable to fetch alerts or no alerts found.\n        ```\n\n### `get_forecast(latitude: float, longitude: float) -> str`\n\n*   **Purpose:** Fetches the weather forecast for a specific geographical location.\n*   **Arguments:**\n    *   `latitude` (float): The latitude of the location.\n    *   `longitude` (float): The longitude of the location.\n*   **Output:** A string containing the formatted weather forecast for the next 5 periods, or a message if the forecast cannot be fetched.\n    *   **Example (successful forecast fetch):**\n        ```\n        Tonight:\n        Temperature: 55°F\n        Wind: 5 to 10 mph W\n        Forecast: Mostly clear, with a low around 55. West wind 5 to 10 mph.\n        ---\n        Wednesday:\n        Temperature: 70°F\n        Wind: 5 to 15 mph W\n        Forecast: Sunny, with a high near 70. West wind 5 to 15 mph, with gusts as high as 20 mph.\n        ... (up to 5 periods)\n        ```\n    *   **Example (error):**\n        ```\n        Unable to fetch forecast data for this location.\n        ```\n\n## Running the Project\n\nThe project is designed to be run as a service, likely using the `FastMCP` framework and the provided `smithery.yaml` configuration.\n\n1.  **Prerequisites:**\n    *   Python 3.x\n    *   The `httpx` library (and other dependencies as defined in `pyproject.toml`). You can typically install these using pip:\n        ```bash\n        pip install httpx\n        # Or, if using a full project setup with pyproject.toml\n        pip install .\n        ```\n\n2.  **Running the Service:**\n    The `weather.py` script can be executed directly to start the service. Given the `smithery.yaml` file, the intended way to run this is likely:\n    ```bash\n    python weather.py\n    ```\n    This will start the `FastMCP` server, which will listen for requests (e.g., via stdio as configured in `smithery.yaml`).\n\n    If you have Smithery installed, you might also be able to run it using Smithery commands, but running `weather.py` directly should work for local development and testing.\n\n    The `main.py` script is a simple entry point and does not run the main weather service.\n\n## Logging\n\nThe `WeatherService` in `weather.py` uses structured JSON logging. This is particularly useful for production environments where logs might be ingested by log management systems.\n\nKey features of the logging implementation:\n\n*   **JSON Format (Production):** When the `ENV` environment variable is set to `production`, logs are output in JSON format. Each log entry includes:\n    *   `timestamp`\n    *   `level` (e.g., INFO, ERROR)\n    *   `logger` (logger name, e.g., `WeatherService`)\n    *   `message`\n    *   `correlation_id` (tracks a logical operation or flow)\n    *   `request_id` (tracks individual requests)\n    *   `user_id`\n    *   `file` and `lineno` (source of the log)\n    *   `function` (function name where the log occurred)\n    *   `process` and `thread`\n    *   `environment` (from `ENV` variable)\n    *   `app_version` (from `APP_VERSION` variable)\n    *   `host` (from `HOSTNAME` variable)\n    *   `duration` (for operations, if applicable)\n    *   `error_details` (stack trace if an exception occurred)\n*   **Readable Format (Development):** If `ENV` is not set to `production` (or is set to something else like `development`), logs are output in a more human-readable, plain text format.\n*   **Configurable Log Level:** The log level can be configured using the `LOG_LEVEL` environment variable (e.g., `INFO`, `DEBUG`, `ERROR`). The default is `INFO`.\n*   **Contextual Information:** Logging includes `correlation_id`, `request_id`, and `user_id` to help trace operations through the system.\n\n### Environment Variables for Logging:\n\n*   `LOG_LEVEL`: Sets the logging verbosity (e.g., `DEBUG`, `INFO`, `WARNING`, `ERROR`). Defaults to `INFO`.\n*   `ENV`: Set to `production` for JSON logging. Defaults to `development` for readable logs.\n*   `APP_VERSION`: Sets the application version in logs. Defaults to `0.1.0`.\n*   `HOSTNAME`: Sets the hostname in logs. Defaults to `localhost`.\n",
      "npm_url": "https://www.npmjs.com/package/mcp-weather-server",
      "npm_downloads": 362,
      "keywords": [
        "weather",
        "mcp",
        "forecasts",
        "weather server",
        "weather information",
        "mcp weather"
      ],
      "category": "weather-and-location-data"
    },
    "baranwang--mcp-tung-shing": {
      "owner": "baranwang",
      "name": "mcp-tung-shing",
      "url": "https://github.com/baranwang/mcp-tung-shing",
      "imageUrl": "/freedevtools/mcp/pfp/baranwang.webp",
      "description": "Provides calculations for traditional Chinese almanac, including lunar calendar conversions and daily auspicious activities. Offers detailed information on Chinese metaphysics elements to assist in decision-making.",
      "stars": 31,
      "forks": 10,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-20T12:36:25Z",
      "readme_content": "# 通胜 MCP 服务\n\n[![smithery badge](https://smithery.ai/badge/@baranwang/mcp-tung-shing)](https://smithery.ai/server/@baranwang/mcp-tung-shing)\n[![NPM Version](https://img.shields.io/npm/v/mcp-tung-shing.svg)](https://www.npmjs.com/package/mcp-tung-shing)\n[![License](https://img.shields.io/npm/l/mcp-tung-shing.svg)](https://github.com/baranwang/mcp-tung-shing/blob/main/LICENSE)\n\n简体中文 | [English](./README.en.md)\n\n> 中国传统黄历（通胜）计算服务，基于 Model Context Protocol (MCP)\n\n## ✨ 功能特点\n\n- 📅 **公历农历转换** - 支持公历与农历日期的相互转换\n- 🍀 **每日宜忌** - 提供每日吉凶、宜忌活动的详细信息\n- 🕐 **时辰信息** - 十二时辰（子、丑、寅等）的吉凶宜忌\n- 🔮 **命理元素** - 五行、神煞、星宿等传统命理学详细数据\n\n## 🚀 安装与使用\n\n在你的 MCP 配置文件中添加以下内容：\n\n```json\n{\n  \"mcpServers\": {\n    \"tung-shing\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-tung-shing@latest\"]\n    }\n  }\n}\n```\n\n## ⚙️ 工具\n\n### get-tung-shing\n\n获取指定日期的黄历信息\n\n**参数:**\n\n| 参数名         | 类型             | 必填 | 默认值 | 描述                                  |\n| -------------- | ---------------- | ---- | ------ | ------------------------------------- |\n| `startDate`    | string           | 否   | 当天   | 开始日期，格式：\"YYYY-MM-DD\"          |\n| `days`         | number           | 否   | 1      | 获取天数                              |\n| `includeHours` | boolean          | 否   | false  | 是否包含时辰信息                      |\n| `tabooFilters` | array            | 否   | -      | 筛选宜忌事项类型，条件之间为或关系     |\n| `tabooFilters[].type`   | 1 \\| 2  | 是   | -      | 过滤类型：宜(1)、忌(2)                |\n| `tabooFilters[].value`  | string  | 是   | -      | 要筛选的宜忌事项                      |\n\n## 🤝 贡献\n\n欢迎提交 Issues 和 Pull Requests 来完善此项目。\n",
      "npm_url": "https://www.npmjs.com/package/mcp-tung-shing",
      "npm_downloads": 1510,
      "keywords": [
        "shing",
        "almanac",
        "lunar",
        "chinese almanac",
        "lunar calendar",
        "tung shing"
      ],
      "category": "weather-and-location-data"
    },
    "blake365--usgs-quakes-mcp": {
      "owner": "blake365",
      "name": "usgs-quakes-mcp",
      "url": "https://github.com/blake365/usgs-quakes-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/blake365.webp",
      "description": "Access real-time earthquake data from the USGS API, enabling users to query earthquake information based on various parameters and retrieve details about specific events.",
      "stars": 1,
      "forks": 5,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-10T23:31:07Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/blake365-usgs-quakes-mcp-badge.png)](https://mseep.ai/app/blake365-usgs-quakes-mcp)\n\n# usgs-quakes-mcp\n[![smithery badge](https://smithery.ai/badge/@blake365/usgs-quakes-mcp)](https://smithery.ai/server/@blake365/usgs-quakes-mcp)\nClaude MCP server for USGS Quakes API\n\nAn MCP server implementation for providing access to the [USGS Quakes API](https://earthquake.usgs.gov/fdsnws/event/1/) within [Claude Desktop](https://claude.ai/download).\n\n## Overview\n\nThis Model Context Protocol (MCP) server enables AI assistants and applications to:\n\n- Get earthquake data through a wide variety of search parameters\n- Get details about a specific earthquake\n\nUsers can run queries using natural language.\n\n## Sample Output\n\n**Q: find earthquakes over 2 magnitude in florida over the last 20 years**\n\n**A:** I'll help you search for earthquakes in Florida with a magnitude greater than 2.0 over the past 20 years.\n\nView Result from find-earthquakes from usgs-quakes (local)\n\n```json\n{\n  \"endTime\": \"2024-12-28T23:59:59\",\n  \"startTime\": \"2004-12-28T00:00:00\",\n  \"maxLatitude\": 31.000888,\n  \"minLatitude\": 24.396308,\n  \"maxLongitude\": -80.031362,\n  \"minLongitude\": -87.634896,\n  \"minmagnitude\": 2\n}\n```\n\nBased on the USGS earthquake data, there have been three notable earthquakes in or near Florida over the past 20 years:\n\n1. A magnitude 5.9 earthquake in the Gulf of Mexico on September 10, 2006\nLocated offshore at coordinates 26.319°N, 86.606°W\nDepth: 14 km\nThis was the largest earthquake in the region during this period\nIt was widely felt, with 5,763 people reporting feeling the quake\n\n2. A magnitude 2.8 earthquake near Jay, Florida on March 6, 2019\nLocated at coordinates 30.9718°N, 87.1719°W\nDepth: 5 km\n49 people reported feeling this earthquake\n\n\n3. A magnitude 2.7 earthquake near Century, Florida on March 24, 2019\nLocated at coordinates 30.9622°N, 87.2384°W\nDepth: 5 km\n4 people reported feeling this earthquake\n\nIt's worth noting that Florida experiences relatively few earthquakes compared to more seismically active regions of the United States. The two 2019 earthquakes occurred in the Florida panhandle, while the larger 2006 event was offshore in the Gulf of Mexico.\n\n**Q: get the details of the Jay Florida earthquake**\n\n**A:** I'll get the detailed information about the magnitude 2.8 earthquake that occurred near Jay, Florida.\n\nView Result from find-earthquake-details from usgs-quakes (local)\n\n```json\n{\n  \"eventid\": \"us1000jbw4\"\n}\n```\n\nHere are the key details about the Jay, Florida earthquake:\nDate and Time: March 7, 2019, at 04:45:52 UTC\nLocation: 2 km (1.2 miles) Northwest of Jay, Florida\nCoordinates: 30.9718°N, 87.1719°W\nDepth: 5 kilometers (3.1 miles)\nMagnitude: 2.8 mb_lg (body wave magnitude)\n\nAdditional details:\n- 49 people reported feeling the earthquake\n- The Community Internet Intensity Map (CIIM) showed a maximum intensity of 2.7\n- There was no tsunami generated\n- The earthquake was reviewed and confirmed by USGS scientists\n- The location had a horizontal error margin of about 6.2 km\n- The magnitude calculation used data from 11 seismic stations\n- The earthquake was also detected by the New Mexico seismic network (NM), which calculated a slightly different magnitude of 2.63\n\nTechnical measurements:\n\n- Azimuthal gap: 243 degrees (indicates moderate coverage by seismic stations)\n- RMS error: 0.59 (indicates reasonable quality of the location estimate)\n- Minimum distance to nearest station: 0.222 degrees\n- Standard error for magnitude: 0.154\n\nThis was a relatively minor earthquake, but notable for Florida which rarely experiences seismic activity. The fact that it was felt by 49 people suggests it was noticeable to residents in the immediate area, though no significant damage would be expected from an earthquake of this magnitude.\n\n## Installation\n\n### Installing via Smithery\n\nTo install USGS Earthquake Data for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@blake365/usgs-quakes-mcp):\n\n```bash\nnpx -y @smithery/cli install @blake365/usgs-quakes-mcp --client claude\n```\n\n### Manual Installation\nInstalling this might be tricky if you're not familiar with Node.js and the MCP protocol.\n\n1. Install [Node.js](https://nodejs.org/en/download)\n2. Clone this repository to a folder on your local machine\n3. The server is already built so you can skip the build step.\n\n### Extra Steps\n\nIf you want to make changes to the server you can do so by editing the `src/index.ts` file.\n- Run `npm install` to install dependencies\n- Run `npm run build` to build the server\n- Quit and restart Claude Desktop after making changes\n\n\n## Connecting with Claude Desktop\n\n1. Open your Claude Desktop configuration at:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. Add the server configuration:\n```json \n{\n    \"mcpServers\": {\n        \"usgs-quakes\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"/Full/Route/to/Folder/usgs-quakes/build/index.js\"\n            ]\n        }\n    }\n}\n```\n\n3. Close/Quit then restart Claude Desktop\n\nOnce you restart you should see a small hammer icon in the lower right corner of the textbox. If you hover over the icon you'll see the number of MCP tools available.\n\n## Troubleshooting\n\nIf you get errors when running the server you may need to provide the full path to the `node` command. For example, on macOS: `/usr/local/bin/node`\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "quakes",
        "earthquake",
        "api",
        "earthquake data",
        "earthquake information",
        "usgs quakes"
      ],
      "category": "weather-and-location-data"
    },
    "briandconnelly--mcp-server-ipinfo": {
      "owner": "briandconnelly",
      "name": "mcp-server-ipinfo",
      "url": "https://github.com/briandconnelly/mcp-server-ipinfo",
      "imageUrl": "/freedevtools/mcp/pfp/briandconnelly.webp",
      "description": "Retrieve detailed information about an IP address to determine geographic location and network details using the IPInfo API.",
      "stars": 34,
      "forks": 12,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-20T20:12:21Z",
      "readme_content": "# IP Geolocation MCP Server\n\nThis is a simple [Model Context Protocol](https://modelcontextprotocol.io) server that uses the [ipinfo.io](https://ipinfo.io) API to get detailed information about an IP address.\nThis can be used to determine where the user is located (approximately) and what network they are used.\n\n<a href=\"https://glama.ai/mcp/servers/pll7u5ak1h\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/pll7u5ak1h/badge\" alt=\"IP Geolocation Server MCP server\" />\n</a>\n\n![Example conversation using mcp-server-ipinfo](demo.png)\n\n\n## Installation\n\nYou'll need to create a token to use the IPInfo API.\nIf you don't already have one, you can sign up for a free account at https://ipinfo.io/signup.\n\nWhile each client has its own way of specifying, you'll generally use the following values:\n\n| Field | Value |\n|-------|-------|\n| **Command** | `uvx` |\n| **Arguments** | `mcp-server-ipinfo` |\n| **Environment** | `IPINFO_API_TOKEN` = `<YOUR TOKEN>` |\n\n\n### Development Version\n\nIf you'd like to use the latest and greatest, the server can be pulled straight from GitHub.\nJust add an additional `--from` argument:\n\n\n| Field | Value |\n|-------|-------|\n| **Command** | `uvx` |\n| **Arguments** | `--from`, `git+https://github.com/briandconnelly/mcp-server-ipinfo`, `mcp-server-ipinfo` |\n| **Environment** | `IPINFO_API_TOKEN` = `<YOUR TOKEN>` |\n\n\n## Components\n\n### Tools\n\n- `get_ip_details`: This tool is used to get detailed information about an IP address.\n    - **Input:** `ip`: The IP address to get information about.\n    - **Output:** `IPDetails`: A Pydantic model containing detailed information about the IP, including location, organization, and country details.\n\n### Resources   \n\n_No custom resources are included_\n\n### Prompts\n\n_No custom prompts are included_\n\n\n## License\n\nMIT License - See [LICENSE](LICENSE) file for details.\n\n## Disclaimer\n\nThis project is not affiliated with [IPInfo](https://ipinfo.io).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ipinfo",
        "ip",
        "mcp",
        "ipinfo retrieve",
        "ipinfo api",
        "using ipinfo"
      ],
      "category": "weather-and-location-data"
    },
    "burningion--geoapify-mcp": {
      "owner": "burningion",
      "name": "geoapify-mcp",
      "url": "https://github.com/burningion/geoapify-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/burningion.webp",
      "description": "Convert addresses into GPS coordinates and generate images of those locations using the Geoapify API. Easily create GeoJSON and visualize the mapped locations.",
      "stars": 4,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-16T20:14:07Z",
      "readme_content": "# Geoapify MCP Server\n\nConvert addresses into GPS coordinates for mapping, and optionally create an image of those coordinates using the Geoapify server.\n\n![Example Map](./temp_map.png)\n\n## Installation\n\nYou'll need to get an API key from [Geoapify](https://www.geoapify.com/), and set it as an environment variable named `GEO_APIKEY`.\n\nYour `claude_desktop_config.json` will look like this after:\n\n```json\n\"MCP Map Demo\": {\n      \"command\": \"uv\",\n      \"args\": [\n\t\"--directory\",\n        \"/PATH/TO/THIS/REPO\",\n        \"run\",\n        \"--with\",\n        \"fastmcp\",\n        \"--with\",\n        \"requests\",\n        \"--with\",\n        \"folio\",\n        \"--with\",\n        \"selenium\",\n        \"--with\",\n        \"pillow\",\n        \"fastmcp\",\n        \"run\",\n        \"/PATH/TO/THIS/REPO/server.py\"\n      ],\n      \"env\": {\n        \"GEO_APIKEY\": \"YOURAPIKEY\"\n      }\n    }\n```\n\nYou'll notice we include all the dependencies in our `args`.\n\n## Tools\n\n`get_gps_coordinates`\n\nUsed to get GPS coordinates from the API for creating GEOJSON, etc.\n\n`create_map_from_geojson`\n\nCreate a map image and show it. (Showing only works on MacOS for now.)\n\n\n## Example Usage\n\n**Get GPS Coordinates** \n\n```\ncan you create a geojson of the following locations including their gps coordinates: 179 avenue du Général Leclerc, côté Rive Gauche\n158 avenue du Général Leclerc, côté Rive Droite à l'angle de la rue Jules Herbron\n112 avenue du Général Leclerc, côté Rive Droite\n34 avenue du Général Leclerc, côté Rive Droite\nEn face du 57 rue Gaston Boissier, à côté de la borne\nRoute du Pavé de Meudon - à côté du chêne de la Vierge\n6 avenue de Versailles (près du centre aquatique des Bertisettes)\n3 places sur parking de la rue Costes et Bellonte\nRue Joseph Chaleil\n18 rue des Sables – à côté de la crèche\n25 sente de la Procession\n33 rue Joseph Bertrand\nPlace Saint Paul\nPlace de la bataille de Stalingrad\nPlacette croisement avenue Pierre Grenier / avenue Robert Hardouin\n107 avenue Gaston Boissier (en face de la caserne des pompiers)\n```\n\n**Result:** [Attached JSON file](./geo.json)\n\nReturns a GeoJSON file.\n\n**Create a Map Image**\n\n```\ncan you create a map from my attached geojson file?\n```\n[Attached JSON file](./geo.json)\n\n**Result:** ![temp map](./temp_map.png)\n\n## LICENSE\n\nMIT\n",
      "npm_url": "https://www.npmjs.com/package/geoapify-mcp-server",
      "npm_downloads": 167,
      "keywords": [
        "geoapify",
        "gps",
        "geojson",
        "geoapify mcp",
        "using geoapify",
        "geoapify api"
      ],
      "category": "weather-and-location-data"
    },
    "cablate--mcp-google-map": {
      "owner": "cablate",
      "name": "mcp-google-map",
      "url": "https://github.com/cablate/mcp-google-map",
      "imageUrl": "/freedevtools/mcp/pfp/cablate.webp",
      "description": "Provides integration with Google Maps API for location searches, geocoding addresses, calculating distances, retrieving directions, and obtaining elevation data. Enables applications to access rich geographic data and travel information efficiently.",
      "stars": 113,
      "forks": 40,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-01T02:14:53Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/cablate-mcp-google-map-badge.png)](https://mseep.ai/app/cablate-mcp-google-map)\n\n<a href=\"https://glama.ai/mcp/servers/@cablate/mcp-google-map\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@cablate/mcp-google-map/badge\" alt=\"Google Map Server MCP server\" />\n</a>\n\n# MCP Google Map Server\n\nA powerful Model Context Protocol (MCP) server providing comprehensive Google Maps API integration with streamable HTTP transport support and LLM processing capabilities.\n\n## 🙌 Special Thanks\n\nThis project has received contributions from the community.  \nSpecial thanks to [@junyinnnn](https://github.com/junyinnnn) for helping add support for `streamablehttp`.\n\n## ✅ Testing Status\n\n**This MCP server has been tested and verified to work correctly with:**\n\n- Claude Desktop\n- Dive Desktop\n- MCP protocol implementations\n\nAll tools and features are confirmed functional through real-world testing.\n\n## Features\n\n### 🗺️ Google Maps Integration\n\n- **Location Search**\n\n  - Search for places near a specific location with customizable radius and filters\n  - Get detailed place information including ratings, opening hours, and contact details\n\n- **Geocoding Services**\n\n  - Convert addresses to coordinates (geocoding)\n  - Convert coordinates to addresses (reverse geocoding)\n\n- **Distance & Directions**\n\n  - Calculate distances and travel times between multiple origins and destinations\n  - Get detailed turn-by-turn directions between two points\n  - Support for different travel modes (driving, walking, bicycling, transit)\n\n- **Elevation Data**\n  - Retrieve elevation data for specific locations\n\n### 🚀 Advanced Features\n\n- **Streamable HTTP Transport**: Latest MCP protocol with real-time streaming capabilities\n- **Session Management**: Stateful sessions with UUID-based identification\n- **Multiple Connection Support**: Handle multiple concurrent client connections\n- **Echo Service**: Built-in testing tool for MCP server functionality\n\n## Installation\n\n> ⚠️ **Important Notice**: This server uses HTTP transport, not stdio. Direct npx usage in MCP Server Settings is **NOT supported**.\n\n### Method 1: Global Installation (Recommended)\n\n```bash\n# Install globally\nnpm install -g @cablate/mcp-google-map\n\n# Run the server\nmcp-google-map --port 3000 --apikey \"your_api_key_here\"\n\n# Using short options\nmcp-google-map -p 3000 -k \"your_api_key_here\"\n```\n\n### Method 2: Using npx (Quick Start)\n\n> ⚠️ **Warning**: Cannot be used directly in MCP Server Settings with stdio mode\n\n**Step 1: Launch HTTP Server in Terminal**\n\n```bash\n# Run in a separate terminal\nnpx @cablate/mcp-google-map --port 3000 --apikey \"YOUR_API_KEY\"\n\n# Or with environment variable\nGOOGLE_MAPS_API_KEY=YOUR_API_KEY npx @cablate/mcp-google-map\n```\n\n**Step 2: Configure MCP Client to Use HTTP**\n\n```json\n{\n  \"mcp-google-map\": {\n    \"transport\": \"http\",\n    \"url\": \"http://localhost:3000/mcp\"\n  }\n}\n```\n\n### ❌ Common Mistake to Avoid\n\n```json\n// This WILL NOT WORK - stdio mode not supported with npx\n{\n  \"mcp-google-map\": {\n    \"command\": \"npx\",\n    \"args\": [\"@cablate/mcp-google-map\"]\n  }\n}\n```\n\n### Server Information\n\n- **Endpoint**: `http://localhost:3000/mcp`\n- **Transport**: HTTP (not stdio)\n- **Tools**: 8 Google Maps tools available\n\n### API Key Configuration\n\nAPI keys can be provided in three ways (priority order):\n\n1. **HTTP Headers** (Highest priority)\n\n   ```json\n   // MCP Client config\n   {\n     \"mcp-google-map\": {\n       \"transport\": \"streamableHttp\",\n       \"url\": \"http://localhost:3000/mcp\",\n       // if your MCP Client support 'headers'\n       \"headers\": {\n         \"X-Google-Maps-API-Key\": \"YOUR_API_KEY\" \n       }\n     }\n   }\n   ```\n\n2. **Command Line**\n\n   ```bash\n   mcp-google-map --apikey YOUR_API_KEY\n   ```\n\n3. **Environment Variable** (.env file or command line)\n   ```env\n   GOOGLE_MAPS_API_KEY=your_api_key_here\n   MCP_SERVER_PORT=3000\n   ```\n\n## Available Tools\n\nThe server provides the following tools:\n\n### Google Maps Tools\n\n1. **search_nearby** - Search for nearby places based on location, with optional filtering by keywords, distance, rating, and operating hours\n2. **get_place_details** - Get detailed information about a specific place including contact details, reviews, ratings, and operating hours\n3. **maps_geocode** - Convert addresses or place names to geographic coordinates (latitude and longitude)\n4. **maps_reverse_geocode** - Convert geographic coordinates to a human-readable address\n5. **maps_distance_matrix** - Calculate travel distances and durations between multiple origins and destinations\n6. **maps_directions** - Get detailed turn-by-turn navigation directions between two locations\n7. **maps_elevation** - Get elevation data (height above sea level) for specific geographic locations\n\n## Development\n\n### Local Development\n\n```bash\n# Clone the repository\ngit clone https://github.com/cablate/mcp-google-map.git\ncd mcp-google-map\n\n# Install dependencies\nnpm install\n\n# Set up environment variables\ncp .env.example .env\n# Edit .env with your API key\n\n# Build the project\nnpm run build\n\n# Start the server\nnpm start\n\n# Or run in development mode\nnpm run dev\n```\n\n### Project Structure\n\n```\nsrc/\n├── cli.ts                    # Main CLI entry point\n├── config.ts                 # Server configuration\n├── index.ts                  # Package exports\n├── core/\n│   └── BaseMcpServer.ts     # Base MCP server with streamable HTTP\n└── tools/\n    └── maps/                # Google Maps tools\n        ├── toolclass.ts     # Google Maps API client\n        ├── searchPlaces.ts  # Maps service layer\n        ├── searchNearby.ts  # Search nearby places\n        ├── placeDetails.ts  # Place details\n        ├── geocode.ts       # Geocoding\n        ├── reverseGeocode.ts # Reverse geocoding\n        ├── distanceMatrix.ts # Distance matrix\n        ├── directions.ts    # Directions\n        └── elevation.ts     # Elevation data\n```\n\n## Tech Stack\n\n- **TypeScript** - Type-safe development\n- **Node.js** - Runtime environment\n- **Google Maps Services JS** - Google Maps API integration\n- **Model Context Protocol SDK** - MCP protocol implementation\n- **Express.js** - HTTP server framework\n- **Zod** - Schema validation\n\n## Security Considerations\n\n- API keys are handled server-side for security\n- DNS rebinding protection available for production\n- Input validation using Zod schemas\n- Error handling and logging\n\n## License\n\nMIT\n\n## Contributing\n\nCommunity participation and contributions are welcome! Here's how you can contribute:\n\n- ⭐️ Star the project if you find it helpful\n- 🐛 Submit Issues: Report bugs or provide suggestions\n- 🔧 Create Pull Requests: Submit code improvements\n- 📖 Documentation: Help improve documentation\n\n## Contact\n\nIf you have any questions or suggestions, feel free to reach out:\n\n- 📧 Email: [reahtuoo310109@gmail.com](mailto:reahtuoo310109@gmail.com)\n- 💻 GitHub: [CabLate](https://github.com/cablate/)\n- 🤝 Collaboration: Welcome to discuss project cooperation\n- 📚 Technical Guidance: Sincere welcome for suggestions and guidance\n\n## Changelog\n\n### v0.0.18 (Latest)\n\n- **Error response improvements**: Now all error messages are in English with more detailed information (previously in Chinese)\n\n### v0.0.17\n\n- **Added HTTP Header Authentication**: Support for passing API keys via `X-Google-Maps-API-Key` header in MCP Client config\n- **Fixed Concurrent User Issues**: Each session now uses its own API key without conflicts\n- **Fixed npx Execution**: Resolved module bundling issues\n- **Improved Documentation**: Clearer setup instructions\n\n### v0.0.14\n\n- Added streamable HTTP transport support\n- Improved CLI interface with emoji indicators\n- Enhanced error handling and logging\n- Added comprehensive tool descriptions for LLM integration\n- Updated to latest MCP SDK version\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=cablate/mcp-google-map&type=Date)](https://www.star-history.com/#cablate/mcp-google-map&Date)\n",
      "npm_url": "https://www.npmjs.com/package/@cablate/mcp-google-map",
      "npm_downloads": 10167,
      "keywords": [
        "geocoding",
        "maps",
        "map",
        "google maps",
        "google map",
        "maps api"
      ],
      "category": "weather-and-location-data"
    },
    "cgoinglove--mcp-server-kakao-map": {
      "owner": "cgoinglove",
      "name": "mcp-server-kakao-map",
      "url": "https://github.com/cgoinglove/mcp-server-kakao-map",
      "imageUrl": "/freedevtools/mcp/pfp/cgoinglove.webp",
      "description": "Provides location-based recommendations for various places in South Korea using the Kakao Map API. It can suggest restaurants, shops, public facilities, and tourist attractions based on user queries in Korean.",
      "stars": 11,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-29T08:17:04Z",
      "readme_content": "Kakao Map MCP Server\n\n한국어 | [English](./docs/en.md)\n\n카카오맵 API를 활용하여 대한민국 내 위치 기반 장소 추천을 제공하는 MCP 서버입니다. 한국어 쿼리에 최적화되어 있습니다.\n\n![img](./docs/image.png)\n\n## Tool: kakao_map_place_recommender\n\n설명: 사용자 질의에 따라 대한민국 내 다양한 관련 장소(예: 식당, 상점, 공공시설, 관광명소)를 추천합니다. 카카오맵 API 키워드 검색을 사용합니다.\n\n- `query` (필수): 장소 유형 및 위치를 설명하는 한국어 키워드. 예시: '이태원 맛집', '서울 병원', '강남역 근처 카페'.\n\n## Configuration\n\n### 환경 변수\n\n- `KAKAO_API_KEY`: 카카오 API 키 (필수)\n\n1.  **애플리케이션 등록**: [카카오 디벨로퍼스](https://developers.kakao.com/)에 로그인하고, 아직 애플리케이션이 없다면 [새로 만듭니다](https://developers.kakao.com/docs/latest/ko/getting-started/quick-start#create).\n2.  **REST API 키 확인**: 애플리케이션 설정(`[내 애플리케이션] > [앱 설정] > [요약 정보]`)으로 이동합니다. 제공된 여러 키 중에서 **REST API 키**를 찾아 복사합니다. 이 도구에는 이 특정 키가 필요합니다.\n3.  **카카오맵 API 활성화**: 애플리케이션에 카카오맵 API가 활성화되어 있는지 확인합니다. `[내 애플리케이션] > [카카오맵] > [활성화 설정]`으로 이동하여 `[상태]`를 `ON`으로 설정합니다. (_참고: 기존 앱에 API를 추가하는 경우, 추가적인 권한 신청 및 승인이 필요할 수 있습니다._)\n4.  **참고**: 자세한 내용은 공식 문서를 참조하세요: [카카오 로컬 API 공통 가이드](https://developers.kakao.com/docs/latest/ko/local/common).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kakao",
        "korea",
        "korean",
        "kakao map",
        "server kakao",
        "location data"
      ],
      "category": "weather-and-location-data"
    },
    "daniel8824-del--forest-fire-mcp": {
      "owner": "daniel8824-del",
      "name": "forest-fire-mcp",
      "url": "https://github.com/daniel8824-del/forest-fire-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/daniel8824-del.webp",
      "description": "Collect and analyze wildfire occurrence data, providing regional information and risk analysis, along with map visualizations to enhance awareness and response strategies.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-08T02:03:52Z",
      "readme_content": "# 산불 정보 시각화 MCP 서버\n\n## 소개\n이 프로젝트는 산불 발생 데이터를 수집, 분석하고 지도에 시각화하는 Python 기반 MCP 서버입니다. \n사용자는 지역별 산불 발생 정보, 위험도 분석, 지도 시각화 등 다양한 기능을 이용할 수 있습니다.\n_______________________________________________________________________________________\n\n## 폴더 구조\n```\nMCP/\n├── README.md                    # 프로젝트 설명 문서\n├── forest_fire_mcp_server.py    # MCP 서버 메인 파일\n├── forest_fire_data.py          # 데이터 처리 모듈\n├── forest_fire_data.json        # 산불 데이터 파일\n├── claude_desktop_config.json   # Claude 설정 파일\n├── data/                        # 산불 데이터 저장 폴더\n└── venv/                        # 가상환경 폴더(필요 시)\n```\n_______________________________________________________________________________________\n\n## 설치 요구사항\n\n### Python 설치하기\n파이썬이 설치되어 있지 않은 경우 다음 단계를 따라 설치하세요:\n\n1. [Python 공식 웹사이트](https://www.python.org/downloads/)에 접속합니다.\n2. 페이지 상단의 노란색 버튼 \"Download Python X.X.X\"를 클릭하여 최신 버전을 다운로드합니다.\n3. 다운로드된 설치 프로그램을 실행합니다.\n4. 설치 화면에서 가장 중요한 부분은 **\"Add Python.exe to PATH\"** 옵션입니다.\n   - 이 옵션을 반드시 체크해주세요! (화면 하단의 체크박스)\n   - 이 설정은 명령 프롬프트에서 Python을 실행할 수 있게 해줍니다.\n5. \"Install Now\"를 클릭하여 설치를 진행합니다.\n6. 설치가 완료되면 \"Close\" 버튼을 클릭합니다.\n_______________________________________________________________________________________\n\n### Python 설치 확인하기\n1. 키보드의 `Windows 키 + R`을 누릅니다.\n2. 실행 창에 `cmd`를 입력하고 확인을 클릭합니다.\n3. 열린 명령 프롬프트 창에 다음 명령어를 입력하고 Enter를 누릅니다:\n   ```\n   python --version\n   ```\n4. Python 버전이 표시되면 설치가 성공적으로 완료된 것입니다.\n   예시: `Python 3.12.0`\n_______________________________________________________________________________________\n\n### 필요한 패키지 설치하기\nPython이 설치되었다면, 필요한 패키지들을 설치해야 합니다:\n\n1. Cursor AI 메뉴 터미널에서 New Terminal을 클릭합니다.\n2. 다음 명령어를 입력하고 Enter를 누릅니다:\n   ```\n   pip install mcp httpx requests\n   ```\n3. 설치가 진행되는 동안 기다립니다. \n4. 만약 오류가 발생하면, 다음 명령어를 대신 시도해보세요:\n   ```\n   pip install --user mcp httpx requests\n   ```\n_______________________________________________________________________________________\n\n### Python 인터프리터 설정하기\n만약 패키지 설치 후에도 오류가 발생한다면, Python 인터프리터 설정을 확인해보세요:\n\n1. `Ctrl + Shift + P`를 눌러 명령 팔레트를 엽니다.\n2. \"Python: Select Interpreter\" 입력 후 선택합니다.\n3. 가상환경 인터프리터를 선택합니다:\n   - `./venv/Scripts/python.exe`\n_______________________________________________________________________________________\n\n## 프로젝트 파일 설정하기\n\n### 프로젝트 파일 준비\n1. 이 저장소의 모든 파일을 컴퓨터의 원하는 위치에 다운로드합니다.\n2. 예: `C:\\Users\\사용자이름\\Desktop\\MCP` 폴더 생성 후 파일 복사\n\n### 데이터 파일 확인\n1. `forest_fire_data.json` 파일이 폴더 안에 있는지 확인합니다.\n2. 이 파일은 산불 데이터를 포함하고 있는 중요한 파일입니다.\n\n### 서버 설정 파일 수정\n1. `forest_fire_mcp_server.py` 파일을 메모장으로 엽니다.\n2. `FOREST_FIRE_DATA_PATH` 변수를 찾아 실제 경로로 수정합니다:\n```python\n# 예시:\nFOREST_FIRE_DATA_PATH = \"C:/Users/사용자이름/Desktop/MCP/forest_fire_data.json\"\n```\n3. 파일을 저장하고 닫습니다.\n_______________________________________________________________________________________\n\n## 서버 실행하기\n\n### 실행 방법 1: 코드 옆 실행 버튼 사용\n1. `forest_fire_mcp_server.py` 파일을 엽니다.\n2. 파일 내용 왼쪽에 표시되는 ▶️ (실행) 버튼을 클릭합니다.\n   - Cursor AI가 자동으로 Python 스크립트를 실행합니다.\n   - 별도의 명령어 입력이 필요 없습니다.\n\n### 실행 방법 2: 터미널에서 직접 실행\n1. Cursor AI 메뉴 터미널에서 New Terminal을 클릭합니다.\n2. 다음 명령어를 입력하고 Enter를 누릅니다:\n   ```\n   python forest_fire_mcp_server.py\n   ```\n\n### 서버 실행 확인\n1. 다음과 같은 메시지가 표시되면 성공:\n```\n산불정보 시각화 MCP 서버가 시작되었습니다.\n```\n2. 이 터미널을 닫지 마세요! 서버가 실행 중인 상태를 유지해야 합니다.\n_______________________________________________________________________________________\n\n## Claude 데스크톱 앱 설정하기\n\n### Claude 데스크톱 앱 설치\n1. [Claude 데스크톱 앱 다운로드 페이지](https://claude.ai/desktop)에서 설치 파일을 다운로드합니다.\n2. 다운로드된 설치 파일을 실행합니다.\n3. 설치 마법사의 지시를 따라 설치를 완료합니다.\n\n### Claude MCP 설정하기\n1. Claude 앱을 실행합니다.\n2. 우측 상단의 파일 메뉴에서 설정(⚙️) 아이콘을 클릭합니다.\n3. 왼쪽 메뉴에서 '개발자' 탭을 선택합니다.\n4. '설정 편집'을 클릭하여 `C:/Users/사용자이름/Desktop/MCP/claude_desktop_config.json` 파일을 지정합니다.\n\n### Claude 데스크톱 앱 재시작\n1. Claude 데스크톱 앱을 완전히 종료했다가 다시 실행합니다.\n2. 우측 상단에 망치 🔨 아이콘이 표시되면 MCP 서버와 연결이 성공한 것입니다.\n   - 망치 아이콘이 회색이면 MCP 서버가 실행되지 않은 상태입니다.\n   - 망치 아이콘이 파란색이면 MCP 서버가 정상적으로 연결된 상태입니다.\n_______________________________________________________________________________________\n\n## 주요 기능 사용하기\nClaude 앱에서 다음과 같은 명령어를 입력하여 서버의 기능을 사용할 수 있습니다:\n\n1. **산불 데이터 조회**:\n   ```\n   강원도의 2021년 산불 데이터를 알려줘\n   ```\n2. **산불 위험도 분석**:\n   ```\n   강원도 고성 지역의 산불 위험도는 어떻게 되나요?\n   ```\n3. **지도에서 확인**:\n   ```\n   강원도 고성의 산불 위치를 지도에서 보여줘\n   ```\n_________________________________________________________________________________\n\n## 추가 정보\n### **카카오맵 API 키**: 기본적으로 설정되어 있으므로 수정할 필요가 없습니다.\n### **지도 시각화**: 자동으로 웹 브라우저에서 열립니다.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "wildfire",
        "visualizations",
        "forest",
        "analyze wildfire",
        "wildfire occurrence",
        "map visualizations"
      ],
      "category": "weather-and-location-data"
    },
    "danilat--mcp-dndzgz": {
      "owner": "danilat",
      "name": "mcp-dndzgz",
      "url": "https://github.com/danilat/mcp-dndzgz",
      "imageUrl": "/freedevtools/mcp/pfp/danilat.webp",
      "description": "Provides real-time transit information for Zaragoza, including arrival estimations for trams, bus details, and public bicycle rental services. Includes Google Maps links for easy navigation to transit points.",
      "stars": 9,
      "forks": 3,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-06-08T15:30:55Z",
      "readme_content": "# DNDzgz MCP Server\n\nThis is an MCP (Model Context Protocol) server that provides information about the Zaragoza tram system, including real-time tram arrival estimations and station information using the [DNDzgz](https://www.dndzgz.com/) API.\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/danilat/mcp-dndzgz.git\ncd mcp-dndzgz\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n## Running the Application\n\nAdd a the environment variable with a valid google maps api key and run it with the http transport\n```bash\nGOOGLE_MAPS_API_KEY=your-api-key npm start:http\n```\nThe server will start you should configure yout MCP client to connect.\n\nOr start the server using stdio trasport:\nConfigure in your MCP client using `npx`, for example:\n```json\n{\n    \"mcpServers\": {\n      \"dndzgz\": {\n        \"command\": \"npx @dndzgz/mcp\",\n        \"env\": {\n          \"GOOGLE_MAPS_API_KEY\": \"your-api-key\"\n        }\n      }\n    }\n}\n```\nThe server will start and connect to the MCP server.\n\n## Available Tools\n\nThe server provides the following tools:\n\n1. `zaragoza-tram-estimations`: Get real-time arrival estimations for a specific tram station\n   - Parameters: \n     - `station` (number): ID of the tram station\n   - Returns: JSON with estimated arrival times for both directions\n\n2. `zaragoza-tram-stations`: Get a list of all tram stations in Zaragoza\n   - Parameters: \n     - `latitude` (number): Latitude to sort stations by proximity\n     - `longitude` (number): Longitude to sort stations by proximity\n   - Returns: JSON with station information including location, name, and ID\n\n3. `zaragoza-bus-stops`: Get all bus stops in Zaragoza\n   - Parameters: \n     - `latitude` (number): Latitude to sort stops by proximity\n     - `longitude` (number): Longitude to sort stops by proximity\n   - Returns: JSON with bus stop locations, names, IDs, and lines\n\n4. `zaragoza-bus-estimations`: Get real-time arrival estimations for a specific bus stop\n   - Parameters: \n     - `stop` (number): ID of the bus stop\n   - Returns: JSON with estimated arrival times for each line serving that stop\n\n5. `zaragoza-bizi-stations`: Get all Bizi stations in Zaragoza (public bicycle rental service)\n   - Parameters: \n     - `latitude` (number): Latitude to sort stations by proximity\n     - `longitude` (number): Longitude to sort stations by proximity\n   - Returns: JSON with Bizi station locations, names, and IDs\n\n6. `zaragoza-bizi-estimations`: Get real-time availability of bikes and free slots in a Bizi station\n   - Parameters: \n     - `station` (number): ID of the Bizi station\n   - Returns: JSON with bikes and parking slot availability\n\n7. `google-maps-link`: Get a Google Maps link for a specific location\n   - Parameters: \n     - `latitude` (number): Latitude of the location\n     - `longitude` (number): Longitude of the location\n   - Returns: Google Maps URL showing the specified location\n\n8. `geolocation-from-address`: Get the geolocation (latitude and longitude) from an address and the formatted address that was found\n   - Parameters:\n     - `address` (string): The address to geolocate (e.g., \"Plaza de San Francisco, Zaragoza, Spain\")\n   - Returns: JSON with latitude, longitude, confidence level, and formatted address\n\n## Dependencies\n\n- @modelcontextprotocol/sdk: ^1.9.0\n\n\n## Example\n\nThere is an screenshot with example using Claude Desktop\n\n![Screenshot of an example using Claude Desktop, asking in spanish to get the tram estimations for Romareda station](./docs/sample.png)",
      "npm_url": "https://www.npmjs.com/package/mcp-dndzgz",
      "npm_downloads": 0,
      "keywords": [
        "zaragoza",
        "transit",
        "dndzgz",
        "information zaragoza",
        "zaragoza including",
        "transit information"
      ],
      "category": "weather-and-location-data"
    },
    "datalayer--earthdata-mcp-server": {
      "owner": "datalayer",
      "name": "earthdata-mcp-server",
      "url": "https://github.com/datalayer/earthdata-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/datalayer.webp",
      "description": "Enables efficient discovery and retrieval of NASA Earth Data datasets and granules, facilitating geospatial analysis and data exploration. Integrates with workflows for AI-powered analysis of Earthdata datasets.",
      "stars": 21,
      "forks": 6,
      "license": "BSD 3-Clause \"New\" or \"Revised\" License",
      "language": "Python",
      "updated_at": "2025-09-19T09:33:45Z",
      "readme_content": "<!--\n  ~ Copyright (c) 2023-2024 Datalayer, Inc.\n  ~\n  ~ BSD 3-Clause License\n-->\n\n[![Datalayer](https://assets.datalayer.tech/datalayer-25.svg)](https://datalayer.io)\n\n[![Become a Sponsor](https://img.shields.io/static/v1?label=Become%20a%20Sponsor&message=%E2%9D%A4&logo=GitHub&style=flat&color=1ABC9C)](https://github.com/sponsors/datalayer)\n\n# 🪐 ✨ Earthdata MCP Server\n\n[![PyPI - Version](https://img.shields.io/pypi/v/earthdata-mcp-server)](https://pypi.org/project/earthdata-mcp-server)\n[![smithery badge](https://smithery.ai/badge/@datalayer/earthdata-mcp-server)](https://smithery.ai/server/@datalayer/earthdata-mcp-server)\n\nEarthdata MCP Server is a [Model Context Protocol](https://modelcontextprotocol.io/introduction) (MCP) server implementation that provides tools to interact with [NASA Earth Data](https://www.earthdata.nasa.gov/). It enables efficient dataset discovery, retrieval and analysis for Geospatial analysis.\n\n🚀 **NEW**: This server now includes all [Jupyter MCP Server](https://github.com/datalayer/jupyter-mcp-server) tools through composition, providing a unified interface for both Earth data discovery and analysis in Jupyter Notebooks.\n\n## 🚀 Key Features\n\n- **Efficient Data Retrieval**: Search and download Earthdata datasets\n- **Unified Interface**: Combines Earthdata research and Jupyter notebook manipulation tools for analysis\n\nThe following demo uses this MCP server to search for datasets and data granules on NASA Earthdata, download the data in Jupyter and run further analysis.\n\n<div>\n  <a href=\"https://www.loom.com/share/c2b5b05f548d4f1492d5c107f0c48dbc\">\n    <p>Analyzing Sea Level Rise with AI-Powered Geospatial Tools and Jupyter - Watch Video</p>\n  </a>\n  <a href=\"https://www.loom.com/share/c2b5b05f548d4f1492d5c107f0c48dbc\">\n    <img style=\"max-width:100%;\" src=\"https://cdn.loom.com/sessions/thumbnails/c2b5b05f548d4f1492d5c107f0c48dbc-598a84f02de7e74e-full-play.gif\">\n  </a>\n</div>\n\n## 🏁 Getting Started\n\nFor comprehensive setup instructions—including `Streamable HTTP` transport and advanced configuration—check out [the Jupyter MCP Server documentation](https://jupyter-mcp-server.datalayer.tech/). Or, get started quickly with `JupyterLab` and `stdio` transport here below.\n\n### 1. Set Up Your Environment\n\n```bash\npip install jupyterlab==4.4.1 jupyter-collaboration==4.0.2 ipykernel\npip uninstall -y pycrdt datalayer_pycrdt\npip install datalayer_pycrdt==0.12.17\n```\n\n### 2. Start JupyterLab\n\n```bash\n# make jupyterlab\njupyter lab --port 8888 --IdentityProvider.token MY_TOKEN --ip 0.0.0.0\n```\n\n### 3. Configure Your Preferred MCP Client\n\n> [!NOTE]\n>\n> Ensure the `port` of the `DOCUMENT_URL` and `RUNTIME_URL` match those used in the `jupyter lab` command.\n>\n> The `DOCUMENT_ID` which is the path to the notebook you want to connect to, should be relative to the directory where JupyterLab was started.\n>\n> In a basic setup, `DOCUMENT_URL` and `RUNTIME_URL` are the same. `DOCUMENT_TOKEN`, and `RUNTIME_TOKEN` are also the same and is actually the Jupyter Token.\n\n> [!NOTE]\n> \n> The `EARTHDATA_USERNAME` and `EARTHDATA_PASSWORD` environment variables are used for NASA Earthdata authentication to download datasets via the `earthaccess` library. See [NASA Earthdata Authentication](./docs/authentication.md) for more details.\n\n#### MacOS and Windows\n\n```json\n{\n  \"mcpServers\": {\n    \"earthdata\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"DOCUMENT_URL\",\n        \"-e\",\n        \"DOCUMENT_TOKEN\",\n        \"-e\",\n        \"DOCUMENT_ID\",\n        \"-e\",\n        \"RUNTIME_URL\",\n        \"-e\",\n        \"RUNTIME_TOKEN\",\n        \"datalayer/earthdata-mcp-server:latest\"\n      ],\n      \"env\": {\n        \"DOCUMENT_URL\": \"http://host.docker.internal:8888\",\n        \"DOCUMENT_TOKEN\": \"MY_TOKEN\",\n        \"DOCUMENT_ID\": \"notebook.ipynb\",\n        \"RUNTIME_URL\": \"http://host.docker.internal:8888\",\n        \"RUNTIME_TOKEN\": \"MY_TOKEN\",\n        \"EARTHDATA_USERNAME\": \"your_username\",\n        \"EARTHDATA_PASSWORD\": \"your_password\"\n      }\n    }\n  }\n}\n```\n\n#### Linux\n\n```json\n{\n  \"mcpServers\": {\n    \"earthdata\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"DOCUMENT_URL\",\n        \"-e\",\n        \"DOCUMENT_TOKEN\",\n        \"-e\",\n        \"DOCUMENT_ID\",\n        \"-e\",\n        \"RUNTIME_URL\",\n        \"-e\",\n        \"RUNTIME_TOKEN\",\n        \"--network=host\",\n        \"datalayer/earthdata-mcp-server:latest\"\n      ],\n      \"env\": {\n        \"DOCUMENT_URL\": \"http://localhost:8888\",\n        \"DOCUMENT_TOKEN\": \"MY_TOKEN\",\n        \"DOCUMENT_ID\": \"notebook.ipynb\",\n        \"RUNTIME_URL\": \"http://localhost:8888\",\n        \"RUNTIME_TOKEN\": \"MY_TOKEN\",\n        \"EARTHDATA_USERNAME\": \"your_username\",\n        \"EARTHDATA_PASSWORD\": \"your_password\"\n      }\n    }\n  }\n}\n```\n\n## Tools\n\nThe server offers **15 tools total**: 3 Earthdata-specific tools plus 12 Jupyter notebook manipulation tools.\n\n### Earthdata Tools\n\n#### `search_earth_datasets`\n\n- Search for datasets on NASA Earthdata.\n- Input:\n  - search_keywords (str): Keywords to search for in the dataset titles.\n  - count (int): Number of datasets to return.\n  - temporal (tuple): (Optional) Temporal range in the format (date_from, date_to).\n  - bounding_box (tuple): (Optional) Bounding box in the format (lower_left_lon, lower_left_lat, upper_right_lon, upper_right_lat).\n- Returns: List of dataset abstracts.\n\n#### `search_earth_datagranules`\n\n- Search for data granules on NASA Earthdata.\n- Input:\n  - short_name (str): Short name of the dataset.\n  - count (int): Number of data granules to return.\n  - temporal (tuple): (Optional) Temporal range in the format (date_from, date_to).\n  - bounding_box (tuple): (Optional) Bounding box in the format (lower_left_lon, lower_left_lat, upper_right_lon, upper_right_lat).\n- Returns: List of data granules.\n\n#### `download_earth_data_granules`\n\n- Download Earth data granules from NASA Earth Data and integrate with Jupyter notebooks.\n- This tool combines earthdata search capabilities with jupyter notebook manipulation to create a seamless download workflow.\n- **Authentication**: Requires NASA Earthdata Login credentials (see [Authentication section](#nasa-earthdata-authentication))\n- Input:\n  - folder_name (str): Local folder name to save the data.\n  - short_name (str): Short name of the Earth dataset to download.\n  - count (int): Number of data granules to download.\n  - temporal (tuple): (Optional) Temporal range in the format (date_from, date_to).\n  - bounding_box (tuple): (Optional) Bounding box in the format (lower_left_lon, lower_left_lat, upper_right_lon, upper_right_lat).\n- Returns: Success message with download code preparation details.\n\n### Jupyter Tools (Composed)\n\nThe following Jupyter notebook manipulation tools are available:\n\n- **`append_markdown_cell`**: Add markdown cells to notebooks\n- **`insert_markdown_cell`**: Insert markdown cells at specific positions\n- **`overwrite_cell_source`**: Modify existing cell content\n- **`append_execute_code_cell`**: Add and execute code cells\n- **`insert_execute_code_cell`**: Insert and execute code cells at specific positions\n- **`execute_cell_with_progress`**: Execute cells with progress monitoring\n- **`execute_cell_simple_timeout`**: Execute cells with timeout\n- **`execute_cell_streaming`**: Execute cells with streaming output\n- **`read_all_cells`**: Read all notebook cells\n- **`read_cell`**: Read specific notebook cells\n- **`get_notebook_info`**: Get notebook metadata\n- **`delete_cell`**: Delete notebook cells\n\nFor detailed documentation of the Jupyter tools, see the [Jupyter MCP Server documentation](https://github.com/datalayer/jupyter-mcp-server).\n\n## Prompts\n\n1. `download_analyze_global_sea_level` 🆕\n   - Generate a comprehensive workflow for downloading and analyzing Global Mean Sea Level Trend dataset.\n   - Uses both earthdata download tools and jupyter analysis capabilities.\n   - Returns: Detailed prompt for complete sea level analysis workflow.\n\n2. `sealevel_rise_dataset`\n   - Search for datasets related to sea level rise worldwide.\n   - Input:\n     - `start_year` (int): Start year to consider.\n      - `end_year` (int): End year to consider.\n   - Returns: Prompt correctly formatted.\n\n3. `ask_datasets_format`\n    - To ask about the format of the datasets.\n    - Returns: Prompt correctly formatted.\n\n## Building\n\n```bash\n# or run `docker build -t datalayer/earthdata-mcp-server .`\nmake build-docker\n```\n\nIf you prefer, you can pull the prebuilt images.\n\n```bash\nmake pull-docker\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "earthdata",
        "datalayer",
        "datasets",
        "earthdata mcp",
        "earth data",
        "earthdata datasets"
      ],
      "category": "weather-and-location-data"
    },
    "edgego--mcp-geo-pub": {
      "owner": "edgego",
      "name": "mcp-geo-pub",
      "url": "https://github.com/edgego/mcp-geo-pub",
      "imageUrl": "/freedevtools/mcp/pfp/edgego.webp",
      "description": "Provides real-time user geolocation data to AI models by integrating EdgeOne Pages Functions with the Model Context Protocol, enhancing context-aware interactions.",
      "stars": 1,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-05-03T06:19:16Z",
      "readme_content": "# MCP with Pages Functions ：Geo Location Demo \n\nThis project demonstrates how to use EdgeOne Pages Functions to retrieve user geolocation information and integrate it with large language models through MCP (Model Context Protocol).\n\n## Demo\n\n![](https://cloudcache.tencent-cloud.com/qcloud/ui/static/static_source_business/f180b5ae-0e9c-40a8-a76a-b8f2a5e6108f.gif)\n\n## Deploy\n\n[![Deploy with EdgeOne Pages](https://cdnstatic.tencentcs.com/edgeone/pages/deploy.svg)](https://edgeone.ai/pages/new?template=mcp-geo)\n\nMore Templates: [EdgeOne Pages](https://edgeone.ai/pages/templates)\n\n## Components\n\n### 1. EdgeOne Pages Functions: Geolocation\n\nThe project includes an EdgeOne Pages Function that retrieves user geolocation information:\n\n* Uses the EdgeOne request context to access geolocation data\n* Returns location information in a JSON format\n* Located in `functions/get_geo.ts`\n\n### 2. MCP Server Integration\n\nThe MCP server component provides an interface for large language models to access geolocation data:\n\n* Implements the Model Context Protocol (MCP)\n* Exposes a `get_geolocation` tool that can be used by AI models\n* Uses the EdgeOne Pages Function to fetch geolocation data\n* Located in `mcp-server/index.ts`\n\n## MCP Configuration\n\nTo use the MCP server with large language models, add the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"edgeone-geo-mcp-server\": {\n      \"command\": \"tsx\",\n      \"args\": [\"path/to/mcp-server/index.ts\"]\n    }\n  }\n}\n```\n\n## Learn More\n\n* [EdgeOne Pages](https://edgeone.ai/products/pages)\n* [EdgeOne Pages Functions documentation](https://edgeone.ai/document/162227908259442688)\n* [Model Context Protocol (MCP)](https://modelcontextprotocol.github.io) - Learn about integrating AI models with external tools and services\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "geolocation",
        "edgego",
        "geo",
        "geolocation data",
        "user geolocation",
        "location data"
      ],
      "category": "weather-and-location-data"
    },
    "eternachen--mcp-playground": {
      "owner": "eternachen",
      "name": "mcp-playground",
      "url": "https://github.com/eternachen/mcp-playground",
      "imageUrl": "/freedevtools/mcp/pfp/eternachen.webp",
      "description": "Fetches and displays real-time weather information for any specified city, providing details such as temperature, humidity, wind speed, and weather conditions. Connects to an MCP server to access and update weather data seamlessly.",
      "stars": 1,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-29T03:37:15Z",
      "readme_content": "# Weather Query MCP Server/Client Example\n\nThis project is a weather query client that interacts with an MCP (Model-Client-Protocol) server to fetch and display weather information for a specified city.\n\n## Features\n\n- Connects to an MCP server to list available tools.\n- Queries weather information for a specified city.\n- Displays formatted weather information including temperature, humidity, wind speed, and weather description.\n\n## Requirements\n\n- Python 3.8+\n- `openai` library\n- `dotenv` library\n- `mcp` library\n\n## Setup\n\n1. Clone the repository:\n    ```sh\n    git clone <repository_url>\n    cd <repository_directory>\n    ```\n\n2. Create a virtual environment and activate it:\n    ```sh\n    python -m venv .venv\n    source .venv/bin/activate  # On Windows use `.venv\\Scripts\\activate`\n    ```\n\n3. Install the required dependencies:\n    ```sh\n    pip install -r requirements.txt\n    ```\n\n4. Create a `.env` file in the root directory and add your OpenAI API key and other configurations:\n    ```env\n    OPENAI_API_KEY=<your_openai_api_key>\n    BASE_URL=<your_base_url>\n    MODEL=<your_model>\n    ```\n\n## Usage\n\n1. Start the MCP server:\n    ```sh\n    python server.py\n    ```\n\n2. Run the client and connect to the server:\n    ```sh\n    python client.py <path_to_server_script>\n    ```\n\n3. Interact with the client:\n    - Type the name of the city in English to get the weather information.\n    - Type `quit` to exit the client.\n\n## Project Structure\n\n- `server.py`: Contains the MCP server implementation and weather query tool.\n- `client.py`: Contains the MCP client implementation to interact with the server.\n- `.env`: Environment variables for API keys and configurations.\n- `.gitignore`: Specifies files and directories to be ignored by git.\n- `README.md`: Project documentation.\n\n## License\n\nThis project is licensed under the MIT License.",
      "npm_url": "https://www.npmjs.com/package/mcp-playground",
      "npm_downloads": 240,
      "keywords": [
        "mcp",
        "weather",
        "playground",
        "weather data",
        "weather information",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "finack--aviation-mcp": {
      "owner": "finack",
      "name": "aviation-mcp",
      "url": "https://github.com/finack/aviation-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/finack.webp",
      "description": "Fetches real-time aviation weather data, including METARs, TAFs, and PIREPs, through a type-safe API for enhanced decision-making in aviation contexts.",
      "stars": 1,
      "forks": 0,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-05-21T09:23:29Z",
      "readme_content": "# Aviation Weather MCP Server\n\nThis is a Model Context Protocol (MCP) server that provides aviation weather information for flight planning. It connects to the Aviation Weather API to fetch METARs, TAFs, PIREPs, and other data.\n\n## DISCLAIMER\n\nDO NOT USE THIS TOOL FOR FLIGHT PLANNING OR IN-FLIGHT DECISION MAKING.\n\n**IMPORTANT DISCLAIMER**:\nThis Aviation Weather MCP server provides weather data sourced from aviationweather.gov for informational purposes only. The information provided by this tool should NEVER be used as the sole source for flight planning or in-flight decision making.\n\nWeather data may be incomplete, delayed, or inaccurate. Additionally, the large language model interpreting this data may misunderstand or incorrectly represent critical information. Always consult official aviation weather sources and obtain a proper weather briefing from authorized providers before any flight.\n\nThis tool is not FAA-approved, is not a replacement for certified weather services, and should be used only as a supplementary reference. The developers assume no liability for decisions made based on information provided by this tool.\n\nALWAYS verify critical weather information through official channels.\n\n## Features\n\n- **Type-safe API client** automatically generated from the official Aviation Weather API Swagger definition\n- **MCP tools for weather data**:\n  - `get-metar`: Get current weather observations\n  - `get-taf`: Get terminal aerodrome forecasts\n  - `get-pireps`: Get pilot reports near an airport\n  - `get-route-weather`: Get comprehensive weather for a route between two airports\n\n## Setup\n\n### Prerequisites\n\n- Node.js 18 or higher\n- npm or yarn\n- curl (for fetching the Swagger YAML)\n\n### Installation\n\n1. Clone this repository:\n\n   ```bash\n   git clone https://github.com/yourusername/aviation-weather-mcp-server.git\n   cd aviation-weather-mcp-server\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   npm install\n   ```\n\n3. Build the server (this will fetch the latest Swagger definition, generate the API client, and compile the TypeScript):\n\n   ```bash\n   npm run build\n   ```\n\n4. Start the server:\n\n   ```bash\n   npm start\n   ```\n\n## Using with Claude for Desktop\n\nTo use this server with Claude for Desktop:\n\n1. Edit your Claude for Desktop configuration file:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. Add the server to the configuration:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"aviation-weather\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"/absolute/path/to/aviation-weather-mcp-server/build/index.js\"\n         ]\n       }\n     }\n   }\n   ```\n\n3. Restart Claude for Desktop\n\n## Example Queries\n\nOnce connected to Claude, you can ask questions like:\n\n- \"What's the current weather at KJFK?\"\n- \"Is there a TAF available for KORD?\"\n- \"I'm planning to fly from KBOS to KPHL tomorrow. What's the weather looking like?\"\n- \"Are there any PIREPs near KDEN?\"\n\n## Development\n\n### Project Structure\n\n- `src/index.ts`: Main server code\n- `packages/aviation-weath-api`: Autogenerate API client for Aviation Weather .gov\n\n### Building the aviation weather client\n\nThe build process follows these steps:\n\n1. `npm run aviation-weather-api:clean`: delete the existing client\n1. `npm run aviation-weather-api:fetch`: Fetches the latest Swagger definition from aviationweather.gov\n2. `npm run aviation-weather-api:generate`: Generates a typed TypeScript client from the Swagger definition\n\n### Building and running the app\n\n1. `npm run build`: Build the javascript client\n1. `npm run start`: Run the MCP server\n\n### Adding More Tools\n\nTo add new tools to the server, follow this pattern:\n\n```typescript\nserver.tool(\n  \"tool-name\",\n  {\n    // Zod schema for parameters\n    param1: z.string().describe(\"Parameter description\"),\n    param2: z.number().optional().describe(\"Optional parameter\")\n  },\n  async ({ param1, param2 }) => {\n    try {\n      // Implementation\n      return {\n        content: [{\n          type: \"text\",\n          text: \"Response text\"\n        }]\n      };\n    } catch (error) {\n      return {\n        content: [{\n          type: \"text\",\n          text: `Error: ${error.message}`\n        }],\n        isError: true\n      };\n    }\n  }\n);\n```\n\n## How It Works\n\n1. The server fetches the latest Swagger definition from aviationweather.gov\n2. The OpenAPI Generator creates a type-safe client from this definition\n3. The server uses this client to make API calls with proper typing\n4. Error handling and response formatting ensure a smooth experience\n\n## License\n\nMIT\n",
      "npm_url": "https://www.npmjs.com/package/aviation-mcp",
      "npm_downloads": 1175,
      "keywords": [
        "metars",
        "aviation",
        "tafs",
        "aviation mcp",
        "weather data",
        "data finack"
      ],
      "category": "weather-and-location-data"
    },
    "guilhermelirio--brazilian-cep-mcp": {
      "owner": "guilhermelirio",
      "name": "brazilian-cep-mcp",
      "url": "https://github.com/guilhermelirio/brazilian-cep-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/guilhermelirio.webp",
      "description": "Retrieve comprehensive address details in Brazil using postal codes (CEPs) to obtain complete street, neighborhood, city, and state information.",
      "stars": 1,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-05-21T23:09:32Z",
      "readme_content": "﻿# brazilian-cep-mcp\r\n\r\n## Descrição\r\n\r\nEste é um servidor MCP (Model Context Protocol) que fornece ferramentas para consulta de informações de Códigos de Endereçamento Postal (CEP) brasileiros. O servidor utiliza a API ViaCEP para obter dados detalhados de endereços a partir do CEP informado.\r\n\r\n## Funcionalidades\r\n\r\n- Consulta de endereços completos através do CEP\r\n- Retorno de informações como logradouro, bairro, cidade, estado, região, DDD e código IBGE\r\n- Implementação do protocolo MCP para integração com agentes de IA\r\n\r\n## Instalação\r\n\r\n```bash\r\n# Clone o repositório\r\ngit clone https://github.com/guilhermelirio/brazilian-cep-mcp.git\r\ncd brazilian-cep-mcp\r\n\r\n# Instale as dependências\r\nnpm install\r\n```\r\n\r\n## Como usar\r\n\r\n### Compilação do projeto\r\n\r\nPara compilar o código TypeScript:\r\n\r\n```bash\r\nnpm run build\r\n```\r\n\r\n### Execução do servidor\r\n\r\nPara iniciar o servidor em modo de desenvolvimento:\r\n\r\n```bash\r\nnpm run dev\r\n```\r\n\r\nPara iniciar o servidor após compilação:\r\n\r\n```bash\r\nnpm start\r\n```\r\n\r\n### Consultando um CEP\r\n\r\nO servidor disponibiliza a ferramenta `consultar-cep` que aceita um parâmetro:\r\n\r\n- `cep`: Código postal no formato de 8 dígitos numéricos (obrigatório)\r\n\r\nExemplo de uso:\r\n\r\n```json\r\n{\r\n  \"cep\": \"01001000\"\r\n}\r\n```\r\n\r\nResposta:\r\n\r\n```\r\nEndereço encontrado:\r\nCEP: 01001-000\r\nLogradouro: Praça da Sé\r\nComplemento: lado ímpar\r\nBairro: Sé\r\nCidade: São Paulo\r\nEstado: SP (São Paulo)\r\nRegião: Sudeste\r\nDDD: 11\r\nIBGE: 3550308\r\n```\r\n\r\n## Tecnologias utilizadas\r\n\r\n- TypeScript\r\n- Node.js\r\n- Axios para requisições HTTP\r\n- Zod para validação de esquemas\r\n- SDK do Model Context Protocol\r\n\r\n## Configuração Smithery\r\n\r\nEste projeto está configurado para funcionar com a plataforma Smithery.ai, que facilita a distribuição e execução de servidores MCP.\r\n\r\n## Estrutura do projeto\r\n\r\n```\r\nbrazilian-cep-mcp/\r\n├── src/\r\n│   └── index.ts       # Código-fonte principal\r\n├── dist/              # Código compilado\r\n├── node_modules/      # Dependências\r\n├── smithery.yaml      # Configuração do Smithery\r\n├── package.json       # Configuração do projeto\r\n├── tsconfig.json      # Configuração do TypeScript\r\n└── README.md          # Este arquivo\r\n```\r\n\r\n## Autor\r\n\r\nGuilherme Lirio Tomasi de Oliveira\r\n\r\n## Licença\r\n\r\nEste projeto está licenciado sob a licença MIT - veja o arquivo [LICENSE](LICENSE) para mais detalhes.\r\n\r\n## Contribuições\r\n\r\nContribuições são bem-vindas! Sinta-se à vontade para abrir issues ou enviar pull requests.\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ceps",
        "brazilian",
        "postal",
        "brazilian cep",
        "location data",
        "details brazil"
      ],
      "category": "weather-and-location-data"
    },
    "hafizrahman--wp-mcp": {
      "owner": "hafizrahman",
      "name": "wp-mcp",
      "url": "https://github.com/hafizrahman/wp-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/hafizrahman.webp",
      "description": "Provides access to weather alerts and forecasts alongside recent WordPress blog content through a command-line interface, enabling integration of weather information with blog entries.",
      "stars": 0,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-05-06T11:05:50Z",
      "readme_content": "# wp-mcp\n\n`wp-mcp` is a weather and WordPress integration tool built using the [Model Context Protocol (MCP)](https://github.com/modelcontextprotocol/sdk). This project provides two primary features:\n\n1. **Weather Alerts & Forecasts** using the [National Weather Service API](https://www.weather.gov/documentation/services-web-api).\n2. **Various contents** from a personal WordPress blog (`hafiz.blog`).\n\nThe project exposes these features as tools within a MCP server, allowing easy access through a command-line interface.\n\n## Features\n\n### Weather Tools\n- **Get Active Alerts**: Fetch current weather alerts for a U.S. state.\n- **Get Forecast**: Get weather forecasts based on geographical coordinates (latitude and longitude).\n\n### WordPress Tools\n- **Get Latest Posts**: Retrieve the 10 most recent posts from a WordPress blog (specifically, my personal blog [hafiz.blog](https://hafiz.blog)).\n- **Get Categories**: Retrieve all categories in the site.\n- **Get Posts by Category**: Retrieve posts from a specific category by providing the category slug.\n\n### Combine them!\nTo demo Claude using both tools at once, you can try some clever prompt like: \n- \"Get the date from the latest post on hafiz.blog, and check the weather in San Francisco on that date.\"\n- \"Check all the categories in hafiz.blog, find one that's likely written in Indonesian, and then make me an poem in Indonesian language based on a post from that category.\"\n\n## Installation\n\n### Prerequisites\n- [Node.js](https://nodejs.org/en/) (v14.x or above)\n- [npm](https://www.npmjs.com/)\n\n### Steps:\n\n1. `npm run build`\n2. Connect the server with Claude Desktop, which needs to be installed locally. [Follow the instruction here.](https://modelcontextprotocol.io/quickstart/server#test-with-commands)\n3. Once Claude Desktop detects the MCP server, try various prompts to check weather, or get latest posts on hafiz.blog, or do a combo prompt as mentioned above.",
      "npm_url": "https://www.npmjs.com/package/wp-mcp",
      "npm_downloads": 0,
      "keywords": [
        "weather",
        "blog",
        "wp",
        "weather information",
        "weather alerts",
        "access weather"
      ],
      "category": "weather-and-location-data"
    },
    "haichaozheng--weather-mcp": {
      "owner": "haichaozheng",
      "name": "weather-mcp",
      "url": "https://github.com/haichaozheng/weather-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/haichaozheng.webp",
      "description": "Provides real-time weather forecasts and alerts for the US, allowing users to query active weather alerts by state code or obtain detailed weather forecasts based on geographic coordinates. Integrates with applications via a simple MCP interface for up-to-date weather information.",
      "stars": 4,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-07-20T12:38:29Z",
      "readme_content": "# 天气信息与多源工具集成系统\r\n\r\n这个项目展示了如何整合多种工具来源（自定义工具、本地MCP服务和第三方API）到一个统一的AI代理中，使用LangGraph框架和MCP协议，实现一个功能丰富的智能助手系统。\r\n\r\n## 项目组件\r\n\r\n### 1. 天气服务器 (weather.py)\r\n\r\n提供天气相关API工具：\r\n- `get_alerts`: 获取美国州级天气警报\r\n- `get_forecast`: 根据经纬度获取天气预报\r\n\r\n基于MCP协议实现的本地服务，提供实时天气信息访问。\r\n\r\n### 2. 自定义工具 (langgraph_tools.py)\r\n\r\n提供一系列基础工具：\r\n- **数学工具**：加法、减法、乘法、除法、平方根、幂运算\r\n- **字符串工具**：字符串连接、转大写、转小写\r\n\r\n这些工具使用LangChain的`@tool`装饰器定义，可以被AI代理调用。\r\n\r\n### 3. 第三方MCP工具 (mcp_third_party.py)\r\n\r\n集成第三方MCP服务：\r\n- **智谱Web搜索工具**：通过智谱AI提供的MCP接口获取实时Web搜索能力\r\n- 提供了通用的MCP工具加载函数，便于扩展更多第三方服务\r\n\r\n### 4. MCP客户端 (mcp_client.py)\r\n\r\n连接到天气服务器并使用其提供的工具。通过SSE（Server-Sent Events）协议与服务器通信，处理连接和重试逻辑。\r\n\r\n### 5. 综合代理 (agent_with_diverse_tools.py)\r\n\r\n核心组件，整合所有来源的工具：\r\n- **自定义本地工具**：数学计算、字符串处理\r\n- **本地MCP服务工具**：天气查询服务\r\n- **第三方MCP工具**：智谱Web搜索\r\n- 使用LangGraph的React Agent架构\r\n- 基于Moonshot API实现\r\n\r\n## 使用方法\r\n\r\n### 安装依赖\r\n\r\n```bash\r\npip install -r requirements.txt\r\n```\r\n\r\n### 环境配置\r\n\r\n在`.env`文件中设置以下变量：\r\n- `MOONSHOT_API_KEY`: Moonshot API密钥（用于LLM）\r\n- `ZHIPU_API_KEY`: 智谱API密钥（用于Web搜索服务）\r\n\r\n### 启动服务\r\n\r\n1. **启动天气服务器**\r\n```bash\r\npython weather/weather.py\r\n```\r\n\r\n2. **运行综合代理测试**\r\n```bash\r\npython weather/agent_with_diverse_tools.py\r\n```\r\n\r\n3. **测试智谱Web搜索工具**\r\n```bash\r\npython weather/mcp_third_party.py\r\n```\r\n\r\n## 示例查询\r\n\r\n综合代理可以处理多种类型的查询：\r\n\r\n- **数学计算**：\r\n  - \"计算 23 + 45 的结果\"\r\n  - \"计算 16 的平方根\" \r\n  - \"计算 7 * 8 然后减去 10\"\r\n\r\n- **字符串处理**：\r\n  - \"将 'hello world' 转换为大写\"\r\n  - \"将 ['我', '爱', '中国'] 用空格连接起来\"\r\n\r\n- **天气信息**：\r\n  - \"纽约州有什么天气警报？\"\r\n  - \"旧金山的天气预报是什么？\"\r\n  - \"加利福尼亚州有什么严重天气警报？\"\r\n\r\n- **Web搜索**：\r\n  - \"中国最近的航天成就有哪些？\"\r\n  - \"2024年世界经济论坛的主要议题是什么？\"\r\n  - \"最新的人工智能研究进展有哪些？\"\r\n\r\n- **混合查询**：\r\n  - \"计算 7 * 8 然后减去 10，并查询一下上海的天气预报\"\r\n\r\n## 系统特点\r\n\r\n- **模块化设计**：各个工具源相互独立，便于维护和扩展\r\n- **容错能力**：即使某个服务不可用，系统仍能使用其他可用工具\r\n- **可扩展性**：容易添加新的工具源和功能\r\n- **多源整合**：将不同来源和类型的工具统一到一个代理中\r\n\r\n## 扩展方向\r\n\r\n- 添加更多第三方MCP服务\r\n- 实现工具调用的可视化界面\r\n- 增加用户交互模式（如对话模式）\r\n- 添加更多领域的专业工具\r\n\r\n## 注意事项\r\n\r\n- 确保在运行代理前先启动天气服务器\r\n- 服务器默认在`localhost:8000`上运行\r\n- 天气数据来自美国国家气象局(NWS)API\r\n- 智谱Web搜索需要有效的API密钥\r\n\r\n## 系统架构\r\n\r\n## 技术栈\r\n\r\n- Python 3.11+\r\n- MCP (Model Control Protocol)\r\n- FastMCP 服务器\r\n- LangGraph + LangChain\r\n- SSE (Server-Sent Events) 传输\r\n\r\n## 安装\r\n\r\n1. 克隆仓库：\r\n   ```bash\r\n   git clone https://github.com/haichaozheng/weather-mcp.git\r\n   cd weather-mcp\r\n   ```\r\n\r\n2. 创建虚拟环境：\r\n   ```bash\r\n   # 使用 Python 标准库\r\n   python -m venv weather_venv\r\n   \r\n   # 激活虚拟环境（Windows）\r\n   weather_venv\\Scripts\\activate\r\n   \r\n   # 激活虚拟环境（Linux/Mac）\r\n   source weather_venv/bin/activate\r\n   ```\r\n\r\n3. 安装依赖：\r\n   ```bash\r\n   pip install -r requirements.txt\r\n   ```\r\n\r\n4. 配置环境变量：\r\n   - 创建 `.env` 文件，参考 `.env.example` 文件格式\r\n   - 添加必要的 API 密钥\r\n\r\n## 项目结构\r\nweather-mcp/\r\n├── weather/\r\n│ ├── weather.py # 主服务器文件\r\n│ ├── mcp_client.py # 客户端测试文件\r\n├── requirements.txt # 项目依赖\r\n├── .env.example # 环境变量示例\r\n└── README.md # 本文档\r\n```\r\n\r\n## 环境变量配置\r\n\r\n项目使用 `.env` 文件存储环境变量和敏感信息。请按照以下步骤设置：\r\n\r\n1. 复制环境变量模板文件：\r\n   ```bash\r\n   cp .env.example .env\r\n   ```\r\n\r\n2. 编辑 `.env` 文件，填入您的实际配置：\r\n   ```\r\n   MOONSHOT_API_KEY=your_actual_api_key\r\n   ```\r\n\r\n3. 确保 `.env` 文件不会被提交到版本控制系统中\r\n\r\n## 环境变量\r\n\r\n在`.env`文件中设置以下变量：\r\n- `MOONSHOT_API_KEY`: Moonshot API密钥\r\n\r\n## 注意事项\r\n\r\n- 确保在运行代理前先启动天气服务器\r\n- 服务器默认在`localhost:8000`上运行\r\n- 天气数据来自美国国家气象局(NWS)API",
      "npm_url": "https://www.npmjs.com/package/weather-mcp",
      "npm_downloads": 226,
      "keywords": [
        "haichaozheng",
        "weather",
        "forecasts",
        "haichaozheng weather",
        "weather information",
        "weather alerts"
      ],
      "category": "weather-and-location-data"
    },
    "handsomegentlemen--mcp-geo": {
      "owner": "handsomegentlemen",
      "name": "mcp-geo",
      "url": "https://github.com/handsomegentlemen/mcp-geo",
      "imageUrl": "/freedevtools/mcp/pfp/handsomegentlemen.webp",
      "description": "Provides geolocation data to AI models by retrieving user location information in real-time through an API. Integrates seamlessly with EdgeOne Pages Functions to enhance applications with location-aware capabilities.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-04-18T02:44:25Z",
      "readme_content": "# MCP with Pages Functions ：Geo Location Demo \n\nThis project demonstrates how to use EdgeOne Pages Functions to retrieve user geolocation information and integrate it with large language models through MCP (Model Context Protocol).\n\n## Demo\n\n![](https://cloudcache.tencent-cloud.com/qcloud/ui/static/static_source_business/f180b5ae-0e9c-40a8-a76a-b8f2a5e6108f.gif)\n\n## Deploy\n\n[![Deploy with EdgeOne Pages](https://cdnstatic.tencentcs.com/edgeone/pages/deploy.svg)](https://edgeone.ai/pages/new?template=mcp-geo)\n\nMore Templates: [EdgeOne Pages](https://edgeone.ai/pages/templates)\n\n## Components\n\n### 1. EdgeOne Pages Functions: Geolocation\n\nThe project includes an EdgeOne Pages Function that retrieves user geolocation information:\n\n* Uses the EdgeOne request context to access geolocation data\n* Returns location information in a JSON format\n* Located in `functions/get_geo.ts`\n\n### 2. MCP Server Integration\n\nThe MCP server component provides an interface for large language models to access geolocation data:\n\n* Implements the Model Context Protocol (MCP)\n* Exposes a `get_geolocation` tool that can be used by AI models\n* Uses the EdgeOne Pages Function to fetch geolocation data\n* Located in `mcp-server/index.ts`\n\n## MCP Configuration\n\nTo use the MCP server with large language models, add the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"edgeone-geo-mcp-server\": {\n      \"command\": \"tsx\",\n      \"args\": [\"path/to/mcp-server/index.ts\"]\n    }\n  }\n}\n```\n\n## Learn More\n\n* [EdgeOne Pages](https://edgeone.ai/products/pages)\n* [EdgeOne Pages Functions documentation](https://edgeone.ai/document/162227908259442688)\n* [Model Context Protocol (MCP)](https://modelcontextprotocol.github.io) - Learn about integrating AI models with external tools and services\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "geolocation",
        "geo",
        "api",
        "geolocation data",
        "provides geolocation",
        "location data"
      ],
      "category": "weather-and-location-data"
    },
    "harimkang--mcp-korea-tourism-api": {
      "owner": "harimkang",
      "name": "mcp-korea-tourism-api",
      "url": "https://github.com/harimkang/mcp-korea-tourism-api",
      "imageUrl": "/freedevtools/mcp/pfp/harimkang.webp",
      "description": "Access information about South Korea's tourism attractions, including festivals, temples, restaurants, and accommodations through an API powered by the Korea Tourism Organization.",
      "stars": 6,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-12T06:18:19Z",
      "readme_content": "# Korea Tourism API MCP Server ✈️\n\n<!-- Badges -->\n\n[![smithery badge](https://smithery.ai/badge/@harimkang/mcp-korea-tourism-api)](https://smithery.ai/interface/@harimkang/mcp-korea-tourism-api)\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/85b16552-af4c-4029-9d47-a4586438ec02)\n[![PyPI version](https://badge.fury.io/py/mcp-korea-tourism-api.svg)](https://badge.fury.io/py/mcp-korea-tourism-api)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![CI Tests](https://github.com/harimkang/mcp-korea-tourism-api/actions/workflows/ci.yml/badge.svg)](https://github.com/harimkang/mcp-korea-tourism-api/actions/workflows/ci.yml)\n\nUnlock the wonders of South Korean tourism directly within your AI assistant! This project provides a Model Context Protocol (MCP) server powered by the official Korea Tourism Organization (KTO) API. Equip your AI with the ability to discover vibrant festivals, serene temples, delicious restaurants, comfortable accommodations, and much more across Korea.\n\n**Links:**\n\n- **PyPI Package:** [https://pypi.org/project/mcp-korea-tourism-api/](https://pypi.org/project/mcp-korea-tourism-api/)\n- **GitHub Repository:** [https://github.com/harimkang/mcp-korea-tourism-api](https://github.com/harimkang/mcp-korea-tourism-api)\n- **Releases:** [https://github.com/harimkang/mcp-korea-tourism-api/releases](https://github.com/harimkang/mcp-korea-tourism-api/releases)\n\n## ✨ Features\n\n- **Comprehensive Search:** Find tourist spots, cultural sites, events, food, lodging, and shopping via keywords, area, or location.\n- **Rich Details:** Access descriptions, operating hours, admission fees, photos, addresses, and contact information.\n- **Location-Aware:** Discover attractions near specific GPS coordinates.\n- **Timely Information:** Find festivals and events based on date ranges.\n- **Multilingual Support:** Get information in various languages supported by the KTO API (including English).\n  - **Supported Languages**: English, Japanese, Simplified Chinese, Traditional Chinese, Russian, Spanese, German, French\n- **Efficient & Resilient:**\n  - **Response Caching:** Uses time-to-live (TTL) caching to store results and reduce redundant API calls, improving speed.\n  - **Rate Limiting:** Respects API usage limits to prevent errors.\n  - **Automatic Retries:** Automatically retries requests in case of temporary network or server issues.\n- **MCP Standard:** Seamlessly integrates with AI assistants supporting the Model Context Protocol.\n\n## ⚠️ Prerequisites\n\nBefore you begin, you **must** obtain an API key from the **Korea Tourism Organization (KTO) Data Portal**.\n\n1.  Visit the [KTO Data Portal](https://www.data.go.kr/) (or the specific portal for the tourism API if available).\n2.  Register and request an API key for the \"TourAPI\" services (you might need to look for services providing information like `areaBasedList`, `searchKeyword`, `detailCommon`, etc.).\n3.  Keep your **Service Key (API Key)** safe. It will be required during installation or runtime.\n\n> You need to apply for the API below to make a request for each language.\n>\n> - English: https://www.data.go.kr/data/15101753/openapi.do\n> - Japanese: https://www.data.go.kr/data/15101760/openapi.do\n> - Simplified Chinese: https://www.data.go.kr/data/15101764/openapi.do\n> - Traditional Chinese: https://www.data.go.kr/data/15101769/openapi.do\n> - Russian: https://www.data.go.kr/data/15101831/openapi.do\n> - Spanese: https://www.data.go.kr/data/15101811/openapi.do\n> - German: https://www.data.go.kr/data/15101805/openapi.do\n> - French: https://www.data.go.kr/data/15101808/openapi.do\n\n## 🚀 Installation & Running\n\nYou can run this MCP server using either `uv` (a fast Python package installer and runner) or `Docker`.\n\n### Installing via Smithery\n\nTo install Korea Tourism API MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@harimkang/mcp-korea-tourism-api):\n\n```bash\nnpx -y @smithery/cli install @harimkang/mcp-korea-tourism-api --client claude\n```\n\n### Option 1: Using `uv` (Recommended for local development)\n\n1.  **Clone the repository:**\n    ```bash\n    git clone https://github.com/harimkang/mcp-korea-tourism-api.git\n    cd mcp-korea-tourism-api\n    ```\n2.  **Set the API Key Environment Variable:**\n    Replace `\"YOUR_KTO_API_KEY\"` with the actual key you obtained.\n\n    ```bash\n    # On macOS/Linux\n    export KOREA_TOURISM_API_KEY=\"YOUR_KTO_API_KEY\"\n\n    # On Windows (Command Prompt)\n    # set KOREA_TOURISM_API_KEY=\"YOUR_KTO_API_KEY\"\n\n    # On Windows (PowerShell)\n    # $env:KOREA_TOURISM_API_KEY=\"YOUR_KTO_API_KEY\"\n    ```\n\n    _Note: For persistent storage, add this line to your shell's configuration file (e.g., `.zshrc`, `.bashrc`, or use system environment variable settings)._\n\n3.  **Install dependencies and run the server:**\n    This command uses `uv` to install dependencies based on `uv.lock` (if available) or `pyproject.toml` and then runs the server module.\n\n    ```bash\n    # Install Dependency with uv\n    uv sync\n\n    # Default: stdio transport (for MCP clients)\n    uv run -m mcp_tourism.server\n\n    # HTTP transport for web applications\n    uv run -m mcp_tourism.server --transport streamable-http --host 127.0.0.1 --port 8000\n\n    # SSE transport for real-time applications\n    uv run -m mcp_tourism.server --transport sse --host 127.0.0.1 --port 8080\n\n    # Using environment variables\n    export MCP_TRANSPORT=streamable-http\n    export MCP_HOST=0.0.0.0\n    export MCP_PORT=3000\n    uv run -m mcp_tourism.server\n    ```\n\n    The server will start and listen for MCP requests via the specified transport protocol.\n\n### Option 2: Using Docker (Recommended for isolated environment/deployment)\n\n1.  **Clone the repository:**\n    ```bash\n    git clone https://github.com/harimkang/mcp-korea-tourism-api.git\n    cd mcp-korea-tourism-api\n    ```\n2.  **Build the Docker Image:**\n    You can build the image with different transport configurations:\n\n    ```bash\n    # Default build (stdio transport)\n    docker build -t mcp-korea-tourism-api .\n\n    # Build with HTTP transport configuration\n    docker build -t mcp-korea-tourism-api \\\n      --build-arg MCP_TRANSPORT=streamable-http \\\n      --build-arg MCP_HOST=0.0.0.0 \\\n      --build-arg MCP_PORT=8000 \\\n      --build-arg MCP_PATH=/mcp \\\n      --build-arg MCP_LOG_LEVEL=INFO \\\n      .\n\n    # Build with SSE transport configuration\n    docker build -t mcp-korea-tourism-api \\\n      --build-arg MCP_TRANSPORT=sse \\\n      --build-arg MCP_HOST=0.0.0.0 \\\n      --build-arg MCP_PORT=8080 \\\n      .\n    ```\n\n3.  **Run the Docker Container:**\n    You can run the container with different transport configurations:\n    - **Stdio Transport (Default - for MCP clients):**\n\n      ```bash\n      docker run --rm -it \\\n        -e KOREA_TOURISM_API_KEY=\"YOUR_KTO_API_KEY\" \\\n        mcp-korea-tourism-api\n      ```\n\n    - **HTTP Transport (for web applications):**\n\n      ```bash\n      # Using runtime environment variables\n      docker run --rm -p 8000:8000 \\\n        -e KOREA_TOURISM_API_KEY=\"YOUR_KTO_API_KEY\" \\\n        -e MCP_TRANSPORT=streamable-http \\\n        -e MCP_HOST=0.0.0.0 \\\n        -e MCP_PORT=8000 \\\n        mcp-korea-tourism-api\n\n      # Check health: curl http://localhost:8000/health\n      ```\n\n    - **SSE Transport (for real-time applications):**\n\n      ```bash\n      docker run --rm -p 8080:8080 \\\n        -e KOREA_TOURISM_API_KEY=\"YOUR_KTO_API_KEY\" \\\n        -e MCP_TRANSPORT=sse \\\n        -e MCP_HOST=0.0.0.0 \\\n        -e MCP_PORT=8080 \\\n        mcp-korea-tourism-api\n      ```\n\n    - **Using Docker Compose (Recommended):**\n\n      ```bash\n      # Copy and configure environment variables\n      cp docker.env.example .env\n      # Edit .env file with your API key and preferred settings\n\n      # Run with HTTP transport (default profile)\n      docker-compose up mcp-tourism-http\n\n      # Run with SSE transport\n      docker-compose --profile sse up mcp-tourism-sse\n\n      # Run development setup with debug logging\n      docker-compose --profile dev up mcp-tourism-dev\n      ```\n\n## 🔧 Transport Configuration\n\nThe Korea Tourism API MCP Server supports multiple transport protocols to accommodate different use cases:\n\n### Available Transports\n\n1. **`stdio`** (Default): Standard input/output transport for direct MCP client integration\n   - Best for: Claude Desktop, Cursor, and other MCP-compatible AI assistants\n   - Configuration: No additional setup required\n\n2. **`streamable-http`**: HTTP-based transport for web applications\n   - Best for: Web applications, REST API integration, load balancers\n   - Features: HTTP endpoints, health checks, JSON responses\n   - Default endpoint: `http://localhost:8000/mcp`\n\n3. **`sse`**: Server-Sent Events transport for real-time applications\n   - Best for: Real-time web applications, event-driven architectures\n   - Features: Real-time streaming, persistent connections\n   - Default endpoint: `http://localhost:8080/mcp`\n\n### Configuration Options\n\nYou can configure the server using command line arguments or environment variables:\n\n| Setting   | CLI Argument  | Environment Variable | Default     | Description                      |\n| --------- | ------------- | -------------------- | ----------- | -------------------------------- |\n| Transport | `--transport` | `MCP_TRANSPORT`      | `stdio`     | Transport protocol to use        |\n| Host      | `--host`      | `MCP_HOST`           | `127.0.0.1` | Host address for HTTP transports |\n| Port      | `--port`      | `MCP_PORT`           | `8000`      | Port for HTTP transports         |\n| Path      | `--path`      | `MCP_PATH`           | `/mcp`      | Path for HTTP endpoints          |\n| Log Level | `--log-level` | `MCP_LOG_LEVEL`      | `INFO`      | Logging level                    |\n\n### Command Line Examples\n\n```bash\n# Get help for all available options\npython -m mcp_tourism.server --help\n\n# Run with HTTP transport on custom port\npython -m mcp_tourism.server --transport streamable-http --port 3000 --log-level DEBUG\n\n# Run with SSE transport\npython -m mcp_tourism.server --transport sse --host 0.0.0.0 --port 8080\n```\n\n### Environment Variable Examples\n\n```bash\n# Set environment variables\nexport MCP_TRANSPORT=streamable-http\nexport MCP_HOST=0.0.0.0\nexport MCP_PORT=8000\nexport MCP_LOG_LEVEL=INFO\nexport KOREA_TOURISM_API_KEY=\"your_api_key_here\"\n\n# Run the server\npython -m mcp_tourism.server\n```\n\n### Health Check\n\nFor HTTP and SSE transports, a health check endpoint is available at `/health`:\n\n```bash\n# Check server health\ncurl http://localhost:8000/health\n\n# Example response\n{\n  \"status\": \"healthy\",\n  \"service\": \"Korea Tourism API MCP Server\",\n  \"transport\": \"streamable-http\",\n  \"timestamp\": 1640995200.0\n}\n```\n\n## 🛠️ Integrating with Cursor\n\nTo use this MCP server within Cursor:\n\n1.  **Ensure the Docker container is runnable:** Follow the Docker installation steps above to build the image (`mcp-korea-tourism-api`). You don't need to manually run the container; Cursor will do that.\n2.  **Locate your `mcp.json` file:** This file configures MCP tools for Cursor. You can usually find it via Cursor's settings or potentially in a path like `~/.cursor/mcp.json` or similar.\n3.  **Add or Update the MCP Configuration:** Add the following JSON object to the list within your `mcp.json` file. If you already have an entry for this tool, update its `command`. Replace `\"YOUR_KTO_API_KEY\"` with your actual key.\n    ![cursor_integrations](images/cursor_integration.png)\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"korea-tourism\": {\n          \"command\": \"docker\",\n          \"args\": [\n            \"run\",\n            \"--rm\",\n            \"-i\",\n            \"-e\",\n            \"KOREA_TOURISM_API_KEY=YOUR_KTO_API_KEY\",\n            \"mcp-korea-tourism-api\"\n          ]\n        }\n      }\n    }\n    ```\n\n    OR Use uv [local directory]\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"korea-tourism\": {\n          \"command\": \"uv\",\n          \"args\": [\n            \"--directory\",\n            \"{LOCAL_PATH}/mcp-korea-tourism-api\",\n            \"run\",\n            \"-m\",\n            \"mcp_tourism.server\"\n          ],\n          \"env\": {\n            \"KOREA_TOURISM_API_KEY\": \"YOUR_KTO_API_KEY\"\n          }\n        }\n      }\n    }\n    ```\n\n4.  **Save `mcp.json`**.\n5.  **Restart Cursor or Reload MCP Tools:** Cursor should now detect the tool and use Docker to run it when needed.\n\n## 🛠️ MCP Tools Provided\n\nThis server exposes the following tools for AI assistants:\n\n1.  `search_tourism_by_keyword`: Search for tourism information using keywords (e.g., \"Gyeongbokgung\", \"Bibimbap\"). Filter by content type, area code.\n    ![search_tourism_by_keyword](images/search_tourism_by_keyword.png)\n2.  `get_tourism_by_area`: Browse tourism information by geographic area codes (e.g., Seoul='1'). Filter by content type, district code.\n    ![get_tourism_by_area](images/get_tourism_by_area.png)\n3.  `find_nearby_attractions`: Discover tourism spots near specific GPS coordinates (longitude, latitude). Filter by radius and content type.\n    ![find_nearby_attractions](images/find_nearby_attractions.png)\n4.  `search_festivals_by_date`: Find festivals occurring within a specified date range (YYYYMMDD). Filter by area code.\n    ![search_festivals_by_date](images/search_festivals_by_date.png)\n5.  `find_accommodations`: Search for hotels, guesthouses, etc. Filter by area and district code.\n    ![find_accommodations](images/find_accommodations.png)\n6.  `get_detailed_information`: Retrieve comprehensive details (overview, usage time, parking, etc.) for a specific item using its Content ID. Filter by content type.\n    ![get_detailed_information](images/get_detailed_information.png)\n7.  `get_tourism_images`: Get image URLs associated with a specific tourism item using its Content ID.\n    ![get_tourism_images](images/get_tourism_images.png)\n8.  `get_area_codes`: Retrieve area codes (for cities/provinces) and optionally sub-area (district) codes.\n    ![get_area_codes](images/get_area_codes.png)\n\n## ⚙️ Requirements (for `uv` method)\n\n- Python 3.12+\n- `uv` installed (`pip install uv`)\n\n## Example Usage\n\nAn AI assistant integrated with this MCP could handle queries like:\n\n- \"Find restaurants near Myeongdong station.\"\n- \"Show me pictures of Bulguksa Temple.\"\n- \"Are there any festivals in Busan next month?\"\n- \"Tell me more about Gyeongbokgung Palace, content ID 264337.\"\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/harimkang-mcp-korea-tourism-api-badge.png)](https://mseep.ai/app/harimkang-mcp-korea-tourism-api)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "korea",
        "harimkang",
        "mcp",
        "korea tourism",
        "mcp korea",
        "harimkang mcp"
      ],
      "category": "weather-and-location-data"
    },
    "harshil1712--berlin-transport-mcp": {
      "owner": "harshil1712",
      "name": "berlin-transport-mcp",
      "url": "https://github.com/harshil1712/berlin-transport-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/harshil1712.webp",
      "description": "Access real-time public transport data for Berlin-Brandenburg, including stop searches, upcoming departures, and journey planning between stops. Integrate local transit information into applications using the VBB API.",
      "stars": 5,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-08-11T23:06:24Z",
      "readme_content": "# Berlin Transport MCP Server\n\nAn MCP server that provides access to Berlin's public transport data through the VBB (Verkehrsverbund Berlin-Brandenburg) API. This server wraps the [v6.vbb.transport.rest](https://v6.vbb.transport.rest/) API.\n\n## Available Tools\n\n### 1. search_stops\nSearch for public transport stops in Berlin-Brandenburg.\n\n**Parameters:**\n- `query` (string): Search query for stops\n\n### 2. get_departures\nGet upcoming departures for a specific stop.\n\n**Parameters:**\n- `stop_id` (string): Stop ID to get departures for\n- `results` (number, optional): Number of results to return\n\n### 3. get_journeys\nGet journey options from one stop to another.\n\n**Parameters:**\n- `from` (string): Origin stop ID\n- `to` (string): Destination stop ID\n- `departure` (string, optional): Departure time (e.g. \"tomorrow 2pm\")\n- `results` (number, optional): Number of results to return\n\n## Connect Claude Desktop to your MCP server\n\nYou can also connect to your remote MCP server from local MCP clients, by using the [mcp-remote proxy](https://www.npmjs.com/package/mcp-remote). \n\nTo connect to your MCP server from Claude Desktop, follow [Anthropic's Quickstart](https://modelcontextprotocol.io/quickstart/user) and within Claude Desktop go to Settings > Developer > Edit Config.\n\nUpdate with this configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"calculator\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"https://berlin-transport.mcp-tools.app/sse\"  // or if local http://localhost:8787/sse\n      ]\n    }\n  }\n}\n```\n\nRestart Claude and you should see the tools become available.\n\n## API Documentation\nFor more details about the underlying API, visit [v6.vbb.transport.rest/getting-started.html](https://v6.vbb.transport.rest/getting-started.html).\n\n## Get started: \n\n[![Deploy to Workers](https://deploy.workers.cloudflare.com/button)](https://deploy.workers.cloudflare.com/?url=https://github.com/cloudflare/ai/tree/main/demos/remote-mcp-authless)\n\nThis will deploy your MCP server to a URL like: `remote-mcp-server-authless.<your-account>.workers.dev/sse`\n\nAlternatively, you can use the command line below to get the remote MCP Server created on your local machine:\n```bash\nnpm create cloudflare@latest -- my-mcp-server --template=cloudflare/ai/demos/remote-mcp-authless\n```\n\n## Customizing your MCP Server\n\nTo add your own [tools](https://developers.cloudflare.com/agents/model-context-protocol/tools/) to the MCP server, define each tool inside the `init()` method of `src/index.ts` using `this.server.tool(...)`.\n\n## Connect to Cloudflare AI Playground\n\nYou can connect to your MCP server from the Cloudflare AI Playground, which is a remote MCP client:\n\n1. Go to https://playground.ai.cloudflare.com/\n2. Enter your deployed MCP server URL (`remote-mcp-server-authless.<your-account>.workers.dev/sse`)\n3. You can now use your MCP tools directly from the playground!\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "berlin",
        "brandenburg",
        "transit",
        "data berlin",
        "berlin transport",
        "harshil1712 berlin"
      ],
      "category": "weather-and-location-data"
    },
    "isdaniel--mcp_weather_server": {
      "owner": "isdaniel",
      "name": "mcp_weather_server",
      "url": "https://github.com/isdaniel/mcp_weather_server",
      "imageUrl": "/freedevtools/mcp/pfp/isdaniel.webp",
      "description": "Retrieve real-time weather information for any city using the Open-Meteo API without requiring an API key. Provides accurate weather updates through simple commands or API calls.",
      "stars": 19,
      "forks": 14,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-01T18:52:45Z",
      "readme_content": "[![smithery badge](https://smithery.ai/badge/@isdaniel/mcp_weather_server)](https://smithery.ai/server/@isdaniel/mcp_weather_server)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/mcp-weather-server)](https://pypi.org/project/mcp-weather-server/)\n[![PyPI - Version](https://img.shields.io/pypi/v/mcp-weather-server)](https://pypi.org/project/mcp-weather-server/)\n\n<a href=\"https://glama.ai/mcp/servers/@isdaniel/mcp_weather_server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@isdaniel/mcp_weather_server/badge\" />\n</a>\n\n# Weather MCP Server\n\nA Model Context Protocol (MCP) server that provides weather information using the Open-Meteo API.\n\n## Features\n\n* Get current weather information for a specified city.\n\n## Installation\n\nPip Installation and Usage, This package can be installed using pip:\n\n```bash\npip install mcp_weather_server\n```\n\nThis server is designed to be installed manually by adding its configuration to the `cline_mcp_settings.json` file.\n\n1.  Add the following entry to the `mcpServers` object in your `cline_mcp_settings.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"weather\": {\n      \"command\": \"python\",\n      \"args\": [\n        \"-m\",\n        \"mcp_weather_server\"\n      ],\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n2. Save the `cline_mcp_settings.json` file.\n\n## Configuration\n\nThis server does not require an API key. It uses the Open-Meteo API, which is free and open-source.\n\n## Usage\n\nThis server provides several tools: `get_weather`, `get_weather_by_datetime_range`, and `get_current_datetime`.\n\n### `get_weather`\n\nRetrieves the current weather information for a given city.\n\n**Parameters:**\n\n*   `city` (string, required): The name of the city.\n\n**Example:**\n\nTo get the weather in Taipei, you would use the tool like this:\n\n```\n<use_mcp_tool>\n<server_name>weather</server_name>\n<tool_name>get_weather</tool_name>\n<arguments>\n{\n  \"city\": \"Taipei\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n### `get_weather_by_datetime_range`\n\nRetrieves weather information for a specified city between start and end dates.\n\n**Parameters:**\n\n*   `city` (string, required): The name of the city.\n*   `start_date` (string, required): Start date in format YYYY-MM-DD (ISO 8601).\n*   `end_date` (string, required): End date in format YYYY-MM-DD (ISO 8601).\n\n**Example:**\n\nTo get the weather in London between 2024-01-01 and 2024-01-07, you would use the tool like this:\n\n```\n<use_mcp_tool>\n<server_name>weather</server_name>\n<tool_name>get_weather_by_datetime_range</tool_name>\n<arguments>\n{\n  \"city\": \"London\",\n  \"start_date\": \"2024-01-01\",\n  \"end_date\": \"2024-01-07\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n### `get_current_datetime`\n\nRetrieves the current time in a specified timezone.\n\n**Parameters:**\n\n*   `timezone_name` (string, required): IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use UTC timezone if no timezone provided by the user.\n\n**Example:**\n\nTo get the current time in New York, you would use the tool like this:\n\n```\n<use_mcp_tool>\n<server_name>weather</server_name>\n<tool_name>get_current_datetime</tool_name>\n<arguments>\n{\n  \"timezone_name\": \"America/New_York\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n## For developers\n\nChange Working Directory Before Running Python\n\n```\npython -m mcp_weather_server\n```\n\nOr if you want Python to find your package no matter where you run from, you can set PYTHONPATH:\n\n```\nset PYTHONPATH=C:\\xxx\\mcp_weather_server\\src\npython -m mcp_weather_server\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_weather_server",
        "weather",
        "api",
        "isdaniel mcp_weather_server",
        "mcp_weather_server retrieve",
        "weather information"
      ],
      "category": "weather-and-location-data"
    },
    "ivanbtrujillo--mcp-server-spike": {
      "owner": "ivanbtrujillo",
      "name": "mcp-server-spike",
      "url": "https://github.com/ivanbtrujillo/mcp-server-spike",
      "imageUrl": "/freedevtools/mcp/pfp/ivanbtrujillo.webp",
      "description": "Provides real-time weather information and alerts, enabling applications to integrate and display up-to-date forecasts and weather data.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-24T13:56:01Z",
      "readme_content": "\n# MCP Server Example\n\nThis project is a very basic MCP server ready to be consumed by Cursor or other tools.\n\nModify index.ts and add any tools you want, or keep the default ones.\n\nThen build the project:\n\n```bash\npnpm run build\n```\n\nAnd run it:\n\n```bash\npnpm run start\n```\n\nNow add a .cursor/mcp.json file in your project, and paste the following;\n\n```\n{\n    \"mcpServers\":{\n        \"weather\":{\n            \"command\": \"node\",\n            \"args\": [\"[path]/build/index.js\"]\n        }     \n    }\n}\n```\nReplace [path] with the absolute path to this project. Run pwd in the project folder for that. For example, in my case it is:\n```\n{\n    \"mcpServers\":{\n        \"weather\":{\n            \"command\": \"node\",\n            \"args\": [\"/Users/ivanbtrujillo/Development/mcp-server-spike/build/index.js\"]\n        }     \n    }\n}\n```\nNow go to \"Settings\" in cursor. You should be able to see the MCP server there. Enable it (click on the top right)\n![MCP Server Cursor](./docs/mcp-server.png)\n\nNow go to the chat, switch to Agent mode and select claude-3.7-sonnet as your model.\n\nType the following: \n```\nWhat is the weather in Texas?\n```\n\nIt will use the MCP to get first the weather alerts, and then the forecast\nHere is an example of how the chat interface looks when querying the weather in Texas:\n\n![Chat Interface](./docs/chat.png)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "forecasts",
        "spike",
        "data",
        "weather data",
        "weather information",
        "server spike"
      ],
      "category": "weather-and-location-data"
    },
    "jikime--py-mcp-ko-weather": {
      "owner": "jikime",
      "name": "py-mcp-ko-weather",
      "url": "https://github.com/jikime/py-mcp-ko-weather",
      "imageUrl": "/freedevtools/mcp/pfp/jikime.webp",
      "description": "Access accurate and up-to-date weather forecasts for South Korean regions using official meteorological data. Retrieve detailed short-term weather forecasts by querying location grid coordinates for efficient planning and decision-making.",
      "stars": 4,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-28T12:44:38Z",
      "readme_content": "# Korea Weather MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@jikime/py-mcp-ko-weather)](https://smithery.ai/server/@jikime/py-mcp-ko-weather) ![](https://badge.mcpx.dev?type=server 'MCP Server') ![Version](https://img.shields.io/badge/version-1.1.10-green) ![License](https://img.shields.io/badge/license-MIT-blue)\n\nThis MCP (Multi-platform Communication Protocol) server provides access to Korea Meteorological Administration (KMA) APIs, allowing AI agents to retrieve weather forecast information for locations in South Korea.\n\n## Overview\n\n- Retrieve precise grid coordinates for Korean administrative regions\n- Get detailed short-term weather forecasts for any location in Korea\n- Support for all Korean administrative divisions (city, district, neighborhood)\n- Structured text responses optimized for LLM consumption\n- Comprehensive weather data including temperature, precipitation, sky condition, humidity, wind direction, and wind speed\n\n## Table of Contents\n\n- [Prerequisites](#prerequisites)\n- [Installation](#installation)\n- [Configure MCP Settings](#configure-mcp-settings)\n- [API Reference](#api-reference)\n- [Acknowledgements](#acknowledgements)\n- [License](#license)\n\n## Setup\n\n### Prerequisites\n\n- Python 3.12+\n- Korea Meteorological Administration API credentials\n- You can obtain the API credentials by signing up at the [Public Data Portal](https://www.data.go.kr/) and requesting access to the \"기상청_단기예보 ((구)_동네예보) 조회서비스\" API.\n\n### Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/jikime/py-mcp-ko-weather.git\ncd py-mcp-ko-weather\n```\n\n2. uv installation\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n3. Create a virtual environment and install dependencies:\n```bash\nuv venv -p 3.12\nsource .venv/bin/activate\nuv pip install -r requirements.txt\n```\n\n4. Create a `.env` file with your KMA API credentials:\n```\ncp env.example .env\nvi .env\n\nKO_WEATHER_API_KEY=your_api_key_here\n```\n\n5. Migrate the grid coordinates data from Excel to SQLite:\n```bash\nuv run src/migrate.py\n```\n\n#### Using Docker\n\n1. Build the Docker image:\n```bash\ndocker build -t py-mcp-ko-weather .\n```\n\n2. Run the container:\n```bash\ndocker run py-mcp-ko-weather\n```\n\n#### Using Local\n\n1. Run the server:\n```bash\nmcp run src/server.py\n```\n2. Run the MCP Inspector\n```bash\nmcp dev server.py\n```\n\n## Configure MCP Settings\nAdd the server configuration to your MCP settings file:\n\n#### Claude desktop app \n1. To install automatically via [Smithery](https://smithery.ai/server/@jikime/py-mcp-ko-weather):\n\n```bash\nnpx -y @smithery/cli install @jikime/py-mcp-ko-weather --client claude\n```\n\n2. To install manually\nopen `~/Library/Application Support/Claude/claude_desktop_config.json`\n\nAdd this to the `mcpServers` object:\n```json\n{\n  \"mcpServers\": {\n    \"Google Toolbox\": {\n      \"command\": \"/path/to/bin/uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/py-mcp-ko-weather\",\n        \"run\",\n        \"src/server.py\"\n      ]\n    }\n  }\n}\n```\n\n#### Cursor IDE \nopen `~/.cursor/mcp.json`\n\nAdd this to the `mcpServers` object:\n```json\n{\n  \"mcpServers\": {\n    \"Google Toolbox\": {\n      \"command\": \"/path/to/bin/uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/py-mcp-ko-weather\",\n        \"run\",\n        \"src/server.py\"\n      ]\n    }\n  }\n}\n```\n\n#### for Docker\n```json\n{\n  \"mcpServers\": {\n    \"Google Toolbox\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"py-mcp-ko-weather\"\n      ]\n    }\n  }\n}\n```\n\n### Using with Claude\n\nOnce configured, you can ask Claude questions like:\n- \"서울특별시 서초구 양재1동의 날씨는?\"\n- \"부산광역시 해운대구 우동의 날씨 예보를 알려줘\"\n- \"경기도 성남시 분당구의 현재 기온은?\"\n\n## API Reference\n\n### Tools\n\n#### Get Grid Location\n```\nget_grid_location(city: str, gu: str, dong: str) -> dict\n```\nRetrieves the grid coordinates (nx, ny) used by the Korea Meteorological Administration API for the specified location. \nThis tool searches the database for the exact coordinates based on city/province, district/county, and neighborhood/town information.\n\n#### Get Forecast\n```\nget_forecast(city: str, gu: str, dong: str, nx: int, ny: int) -> str\n```\nCalls the KMA's ultra-short-term forecast API to provide weather forecast information for a specific location.\nReturns comprehensive weather data including temperature, precipitation, sky condition, humidity, wind direction, and wind speed.\n\n### Resources\n\n#### Weather Instructions\n```\nGET weather://instructions\n```\nProvides detailed documentation on how to use the Korea Weather MCP server, including tool workflows and response formats.\n\n### Prompts\n\n#### Weather Query\nThe server includes a structured prompt template for guiding conversations about weather queries, ensuring efficient information gathering and clear presentation of forecast data.\n\n## Response Format\n\nWeather forecast responses are provided in structured text format, optimized for LLM processing:\n\n```\nWeather forecast for 서울특별시 서초구 양재1동 (coordinates: nx=61, ny=125)\nDate: 2025-05-01\nTime: 15:00\n\nCurrent conditions:\nTemperature: 22.3°C\nSky condition: Mostly clear\nPrecipitation type: None\nPrecipitation probability: 0%\nHumidity: 45%\nWind direction: Northwest\nWind speed: 2.3 m/s\n\nHourly forecast:\n16:00 - Temperature: 21.8°C, Sky: Clear, Precipitation: None\n17:00 - Temperature: 20.5°C, Sky: Clear, Precipitation: None\n18:00 - Temperature: 19.2°C, Sky: Clear, Precipitation: None\n...\n```\n\n## Acknowledgements\n\n- [Korea Meteorological Administration](https://www.kma.go.kr/)\n- [Public Data Portal](https://www.data.go.kr/)\n- [MCP Protocol](https://github.com/mcp-foundation/mcp-spec)\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "meteorological",
        "korean",
        "jikime",
        "weather location",
        "korean regions",
        "data jikime"
      ],
      "category": "weather-and-location-data"
    },
    "jorekai--db-timetable-mcp": {
      "owner": "jorekai",
      "name": "db-timetable-mcp",
      "url": "https://github.com/jorekai/db-timetable-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/jorekai.webp",
      "description": "Access real-time train schedules, track changes, and search for stations using Deutsche Bahn's timetable data. Integrate robust functionality for up-to-date travel information in applications.",
      "stars": 7,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-12T19:03:17Z",
      "readme_content": "[![smithery badge](https://smithery.ai/badge/@jorekai/db-timetable-mcp)](https://smithery.ai/server/@jorekai/db-timetable-mcp)\n# DB Timetable MCP Server\n\nEin Model Context Protocol (MCP) Server für die Deutsche Bahn Timetable API. Der Server bietet MCP-Tools und -Ressourcen, um auf Fahrplandaten, Stationsinformationen und Zugänderungen zuzugreifen.\n\n**Pflicht zur Namensnennung:**  \n\nDieses Projekt stellt die Fahrplandaten der Deutschen Bahn bereit, die unter der [Creative Commons Attribution 4.0 International Lizenz (CC BY 4.0)](https://creativecommons.org/licenses/by/4.0/) öffentlich einsehbar sind.\n\nWeitere Infos zur API und Lizenzbedingungen findest du unter [developers.deutschebahn.com](https://developers.deutschebahn.com/). API Requests unterliegen den Bedingungen der Lizenz.\n\n\n## Funktionen\n\n- **Aktuelle Fahrplände**: Abrufen aktueller Fahrplandaten für eine Station\n- **Fahrplanänderungen**: Tracking der neuesten Änderungen\n- **Geplante Fahrpläne**: Zugriff auf geplante Fahrplandaten für einen bestimmten Zeitpunkt\n- **Stationssuche**: Suche nach Bahnhofsstationen anhand von Namen oder Codes\n\n## Voraussetzungen\n\n- Node.js 18 oder höher\n- API-Zugangsdaten für die DB Timetable API (Client-ID und Client-Secret)\n\n## Installation\n\n1. Repository klonen:\n   ```\n   git clone <repository-url>\n   cd db-mcp\n   ```\n\n2. Abhängigkeiten installieren:\n   ```\n   npm install\n   ```\n\n3. TypeScript-Code kompilieren:\n   ```\n   npm run build\n   ```\n\n## Konfiguration\n\nErstelle eine `.env`-Datei im Root-Verzeichnis des Projekts mit folgenden Umgebungsvariablen:\n\n```\nDB_TIMETABLE_CLIENT_ID=deine-client-id\nDB_TIMETABLE_CLIENT_SECRET=dein-client-secret\nTRANSPORT_TYPE=stdio\nPORT=8080\nSSE_ENDPOINT=/sse\nLOG_LEVEL=info\n```\n\n### Konfigurationsoptionen\n\n- `DB_TIMETABLE_CLIENT_ID`: Client-ID für die DB API (erforderlich)\n- `DB_TIMETABLE_CLIENT_SECRET`: Client-Secret für die DB API (erforderlich)\n- `TRANSPORT_TYPE`: Transporttyp für den MCP-Server (`stdio` oder `sse`, Standard: `stdio`)\n- `PORT`: Port für den SSE-Server (Standard: `8080`)\n- `SSE_ENDPOINT`: Endpunkt für SSE-Verbindungen (Standard: `/sse`)\n- `LOG_LEVEL`: Logging-Level (`debug`, `info`, `warn`, `error`, Standard: `info`)\n\n## Verwendung\n\n### Server starten\n\nIm stdio-Modus (für CLI-Tests und Debugging):\n\n```bash\nnpm start\n```\n\nIm SSE-Modus (für Webclients):\n\n```bash\nTRANSPORT_TYPE=sse npm start\n```\n\n### Mit Inspect-Modus testen\n\nDer Server kann mit dem FastMCP Inspector getestet werden:\n\n```bash\nnpx fastmcp inspect path/to/index.js\n```\n\n### MCP-Tools\n\nDer Server stellt folgende Tools bereit:\n\n1. **getCurrentTimetable**: Ruft aktuelle Fahrplandaten für eine Station ab\n   - Parameter: `evaNo` - EVA-Nummer der Station (z.B. 8000105 für Frankfurt Hbf)\n\n2. **getRecentChanges**: Ruft aktuelle Änderungen für eine Station ab\n   - Parameter: `evaNo` - EVA-Nummer der Station (z.B. 8000105 für Frankfurt Hbf)\n\n3. **getPlannedTimetable**: Ruft geplante Fahrplandaten für eine Station ab\n   - Parameter: \n     - `evaNo` - EVA-Nummer der Station (z.B. 8000105 für Frankfurt Hbf)\n     - `date` - Datum im Format YYMMDD (z.B. 230401 für 01.04.2023)\n     - `hour` - Stunde im Format HH (z.B. 14 für 14 Uhr)\n\n4. **findStations**: Sucht nach Stationen anhand eines Suchmusters\n   - Parameter: `pattern` - Suchmuster (z.B. \"Frankfurt\" oder \"BLS\")\n\n### MCP-Ressourcen\n\nDer Server stellt folgende Ressourcen bereit:\n\n1. **Aktuelle Fahrplandaten**: `db-api:timetable/current/{evaNo}`\n2. **Aktuelle Fahrplanänderungen**: `db-api:timetable/changes/{evaNo}`\n3. **Geplante Fahrplandaten**: `db-api:timetable/planned/{evaNo}/{date}/{hour}`\n4. **Stationssuche**: `db-api:station/{pattern}`\n\n## Entwicklung\n\n### Projekt-Struktur\n\n```\ndb-mcp/\n├── src/\n│   ├── api/             # API-Client und Typen\n│   ├── tools/           # MCP-Tools\n│   ├── resources/       # MCP-Ressourcen\n│   ├── utils/           # Hilfsfunktionen\n│   ├── config.ts        # Konfiguration\n│   └── index.ts         # Haupteinstiegspunkt\n├── dist/                # Kompilierte Dateien\n├── .env                 # Umgebungsvariablen\n├── package.json\n├── tsconfig.json\n└── README.md\n```\n\n### NPM-Skripte\n\n- `npm run build`: Kompiliert den TypeScript-Code\n- `npm start`: Startet den Server\n- `npm run dev`: Startet den Server im Entwicklungsmodus mit automatischem Neuladen\n- `npm test`: Führt Tests aus\n\n## Erweiterbarkeit\n\nPotenzielle Erweiterungen\n1. Datenverarbeitung und -anreicherung\n   - Semantische Fahrplandatenverarbeitung: XML zu strukturiertem JSON mit semantischer Anreicherung\n   - Historische Datenanalyse für Verspätungen und Betriebsstörungen\n   - Integration multimodaler Verkehrsverbindungen\n2. Erweiterte MCP-Tools\n   - Routenplanung zwischen Stationen\n   - KI-basierte Verspätungs- und Auslastungsprognosen\n   - Reisestörungsanalyse\n   - Barrierefreiheitscheck für Stationen und Verbindungen\n\n## Lizenz\n\nMCP Server: [MIT Lizenz](LICENSE)\n\nDB Timetable API: [Creative Commons Namensnennung 4.0 International Lizenz](https://developers.deutschebahn.com/db-api-marketplace/apis/product/timetables)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "timetable",
        "bahn",
        "track",
        "bahn timetable",
        "train schedules",
        "timetable data"
      ],
      "category": "weather-and-location-data"
    },
    "juhemcp--jweather-mcp-server": {
      "owner": "juhemcp",
      "name": "jweather-mcp-server",
      "url": "https://github.com/juhemcp/jweather-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/juhemcp.webp",
      "description": "Provides real-time weather forecasts for various cities and regions, enabling queries for local weather conditions based on city or region names. It retrieves accurate weather data for application enhancement.",
      "stars": 0,
      "forks": 6,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-19T05:29:17Z",
      "readme_content": "# Juhe Weather MCP Server\n\n一个提供全国天气预报查询功能的模型上下文协议（Model Context Protocol）服务器。该服务器使大型语言模型（LLMs）能够获取全国城市、地区的天气预报情况。\n\n## Components\n\n### Tools\n\n服务器实现了一个工具:\n\n- query_weather: 根据城市、地区、区县名称查询当地实时天气预报情况.\n  - 需要传入 \"city\"（城市、区县等名称）作为必须的字符串参数。\n```\nasync def query_weather(\n    city: str = Field(description=\"查询的城市名称，如北京、上海、广州、深圳、泰顺等；城市或区县或地区名使用简写，严格按照规范填写，否则会导致查询失败\")\n) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:\n```\n\n\n## Install\nThis server requires Python 3.10 or higher. Install dependencies using uv (recommended) or pip\n\n### Using uv (recommended)\nWhen using [uv](https://docs.astral.sh/uv/) no specific installation is needed. We will use [uvx](https://docs.astral.sh/uv/guides/tools/) to directly run jweather-mcp-server.\n\n```bash\nuvx jweather-mcp-server\n```\n\n### Using PIP\nAlternatively you can install jweather-mcp-server via pip:\n```\npip install jweather-mcp-server\n```\nAfter installation, you can run it as a script using:\n```\npython -m jweather_mcp_server\n```\n\n### Configuration\n\n#### Environment Variables\n`JUHE_WEATHER_API_KEY`: 聚合数据的天气预报查询API密钥。获取：[https://www.juhe.cn/docs/api/id/73](https://www.juhe.cn/docs/api/id/73)\n\n```\nJUHE_WEATHER_API_KEY=your_api_key\n```\n\n#### Configure For CLINE\n\n<details>\n  <summary>Using uvx</summary>\n\n  ```\n  \"mcpServers\": {\n    \"jweather-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"jweather-mcp-server\"\n      ],\n      \"env\": {\n        \"JUHE_WEATHER_API_KEY\": \"your_api_key\"\n      }\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Using pip installation</summary>\n\n  ```\n  \"mcpServers\": {\n    \"jweather-mcp-server\": {\n      \"command\": \"python\",\n      \"args\": [\n        \"-m\",\n        \"jmobile_location_mcp_server\"\n      ],\n      \"env\": {\n        \"JUHE_WEATHER_API_KEY\": \"your_api_key\"\n      }\n    }\n  }\n  ```\n</details>\n\n## Debugging\nYou can use the MCP inspector to debug the server. For uvx installations:\n\n```bash\nnpx @modelcontextprotocol/inspector uvx jweather-mcp-server \n```\n\nOr if you've installed the package in a specific directory or are developing on it:\n\n```bash\ncd path/to/servers/src/jweather-mcp-server\nnpx @modelcontextprotocol/inspector uv run jweather-mcp-server\n```\n\n## Examples of Questions for Cline\n1. \"查询下苏州的天气\"\n2. \"今天上海的天气如何？\"",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "weather",
        "juhemcp",
        "jweather",
        "weather data",
        "weather location",
        "juhemcp jweather"
      ],
      "category": "weather-and-location-data"
    },
    "kennyckk--mcp_hkbus": {
      "owner": "kennyckk",
      "name": "mcp_hkbus",
      "url": "https://github.com/kennyckk/mcp_hkbus",
      "imageUrl": "/freedevtools/mcp/pfp/kennyckk.webp",
      "description": "Provides real-time access to bus arrival information and route details for KMB and Long Win Bus services in Hong Kong, including queries for bus routes, stops, and estimated arrival times. Supports both English and Traditional Chinese for broader accessibility.",
      "stars": 3,
      "forks": 3,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-07T06:24:22Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/kennyckk-mcp-hkbus-badge.png)](https://mseep.ai/app/kennyckk-mcp-hkbus)\n\n# KMB Bus MCP Server\n[![smithery badge](https://smithery.ai/badge/@kennyckk/mcp_hkbus)](https://smithery.ai/server/@kennyckk/mcp_hkbus)\n\nA Model Context Protocol (MCP) server that provides real-time access to Hong Kong's KMB (九龍巴士) and Long Win Bus (龍運巴士) route information and arrival times. This server enables Language Models to query Hong Kong bus service information to answer user questions about bus routes, stops, and estimated arrival times.\n\n<a href=\"https://glama.ai/mcp/servers/@kennyckk/mcp_hkbus\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@kennyckk/mcp_hkbus/badge\" alt=\"KMB Bus Server MCP server\" />\n</a>\n\n## Features\n\n- Real-time bus arrival information (ETA)\n- Comprehensive bus route queries\n- Bus stop information and searches\n- Route-stop mapping\n- Caching system to optimize API calls\n- Bilingual support (English and Traditional Chinese)\n\n## Data Source\n\nThis project utilizes the official KMB/LWB Open Data API:\n\n- Base URL: https://data.etabus.gov.hk/v1/transport/kmb\n- [KMB Open Data API Documentation](https://data.etabus.gov.hk/documentation/overview)\n\n## Prerequisites\n\n- Python 3.10 or higher\n- uv package manager\n\n## Installation\n\n### Installing via Smithery\n\nTo install KMB Bus MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kennyckk/mcp_hkbus):\n\n```bash\nnpx -y @smithery/cli install @kennyckk/mcp_hkbus --client claude\n```\n\n### Manual Installation\n\n1. First, install uv if you haven't already:\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n2. Clone the repository:\n\n```bash\ngit clone git@github.com:kennyckk/mcp_hkbus.git\ncd mcp_hkbus\n```\n\n3. Use uv to handle the python package:\n\n```bash\nuv sync #using uv.lock\n```\n\n## Usage\n\n1. Edit the Config in your MCP Client (e.g. Claude Desktop):\n\n```json\n{\n  \"mcpServers\": {\n    \"bus_service\": {\n      \"command\": \"path/to/uv.exe\",\n      \"args\": [\"--directory\", \"path/to/kmb_bus\", \"run\", \"kmb_mcp.py\"],\n      \"background\": true\n    }\n  }\n}\n```\n\n2. The server provides several tools that can be used by Language Models to query bus information:\n\n- `get_route_list()`: Get a list of all bus routes\n- `get_stop_list()`: Get a list of all bus stops\n- `get_route_stops()`: Get stops for a specific route\n- `find_stops_by_name()`: Search for bus stops by name\n- `get_all_routes_at_stop()`: Get all routes serving a specific stop\n- `get_eta()`: Get estimated arrival times\n\n## Testing\n\nRun the test suite using pytest:\n\n```bash\npytest test/kmb-mcp-tests.py\n```\n\n## Dependencies\n\n- `httpx`: For async HTTP requests\n- `fastmcp`: For MCP server implementation\n- `pytest`: For testing (development only)\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## Acknowledgments\n\n- KMB/LWB for providing the open data API\n- The MCP protocol developers\n\n## Note\n\nThis service relies on the KMB/LWB Open Data API. Please be mindful of API rate limits and implement appropriate error handling in production environments.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_hkbus",
        "kmb",
        "bus",
        "mcp_hkbus provides",
        "kennyckk mcp_hkbus",
        "details kmb"
      ],
      "category": "weather-and-location-data"
    },
    "kentstudy0922--coolWeatherTest": {
      "owner": "kentstudy0922",
      "name": "coolWeatherTest",
      "url": "https://github.com/kentstudy0922/coolWeatherTest",
      "imageUrl": "/freedevtools/mcp/pfp/kentstudy0922.webp",
      "description": "Provides real-time weather data and forecasts for applications. Enables seamless integration of accurate weather information to support user decision-making.",
      "stars": 0,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "",
      "updated_at": "2021-10-26T07:40:39Z",
      "readme_content": "# coolWeatherTest",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "coolweathertest",
        "weather",
        "forecasts",
        "weather data",
        "weather information",
        "kentstudy0922 coolweathertest"
      ],
      "category": "weather-and-location-data"
    },
    "kentstudy0922--weather-mcp": {
      "owner": "kentstudy0922",
      "name": "weather-mcp",
      "url": "https://github.com/kentstudy0922/weather-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kentstudy0922.webp",
      "description": "Fetches real-time weather data and integrates weather information into applications, providing accurate forecasts to enhance user experience.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-04-14T07:03:49Z",
      "readme_content": "# weather-mcp\n一个获取天气的测试mcp server\n",
      "npm_url": "https://www.npmjs.com/package/weather-mcp",
      "npm_downloads": 226,
      "keywords": [
        "weather",
        "forecasts",
        "mcp",
        "weather data",
        "weather information",
        "kentstudy0922 weather"
      ],
      "category": "weather-and-location-data"
    },
    "kevinkelin--mcp-gaodeweather-server": {
      "owner": "kevinkelin",
      "name": "mcp-gaodeweather-server",
      "url": "https://github.com/kevinkelin/mcp-gaodeweather-server",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Fetches current weather information for specified cities using the Gaode Map API, enabling integration of real-time weather data into applications.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gaodeweather",
        "weather",
        "api",
        "weather data",
        "gaodeweather server",
        "weather information"
      ],
      "category": "weather-and-location-data"
    },
    "kinglionsz--mcp-geo": {
      "owner": "kinglionsz",
      "name": "mcp-geo",
      "url": "https://github.com/kinglionsz/mcp-geo",
      "imageUrl": "/freedevtools/mcp/pfp/kinglionsz.webp",
      "description": "Provides real-time user geolocation data by integrating with EdgeOne Pages Functions using the Model Context Protocol. Enhances location-aware interactions for AI models by simplifying access to geolocation information.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-05-03T02:46:28Z",
      "readme_content": "# MCP with Pages Functions ：Geo Location Demo \n\nThis project demonstrates how to use EdgeOne Pages Functions to retrieve user geolocation information and integrate it with large language models through MCP (Model Context Protocol).\n\n## Demo\n\n![](https://cloudcache.tencent-cloud.com/qcloud/ui/static/static_source_business/f180b5ae-0e9c-40a8-a76a-b8f2a5e6108f.gif)\n\n## Deploy\n\n[![Deploy with EdgeOne Pages](https://cdnstatic.tencentcs.com/edgeone/pages/deploy.svg)](https://edgeone.ai/pages/new?template=mcp-geo)\n\nMore Templates: [EdgeOne Pages](https://edgeone.ai/pages/templates)\n\n## Components\n\n### 1. EdgeOne Pages Functions: Geolocation\n\nThe project includes an EdgeOne Pages Function that retrieves user geolocation information:\n\n* Uses the EdgeOne request context to access geolocation data\n* Returns location information in a JSON format\n* Located in `functions/get_geo.ts`\n\n### 2. MCP Server Integration\n\nThe MCP server component provides an interface for large language models to access geolocation data:\n\n* Implements the Model Context Protocol (MCP)\n* Exposes a `get_geolocation` tool that can be used by AI models\n* Uses the EdgeOne Pages Function to fetch geolocation data\n* Located in `mcp-server/index.ts`\n\n## MCP Configuration\n\nTo use the MCP server with large language models, add the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"edgeone-geo-mcp-server\": {\n      \"command\": \"tsx\",\n      \"args\": [\"path/to/mcp-server/index.ts\"]\n    }\n  }\n}\n```\n\n## Learn More\n\n* [EdgeOne Pages](https://edgeone.ai/products/pages)\n* [EdgeOne Pages Functions documentation](https://edgeone.ai/document/162227908259442688)\n* [Model Context Protocol (MCP)](https://modelcontextprotocol.github.io) - Learn about integrating AI models with external tools and services\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "geolocation",
        "geo",
        "location",
        "geolocation data",
        "geolocation information",
        "user geolocation"
      ],
      "category": "weather-and-location-data"
    },
    "kukapay--whattimeisit-mcp": {
      "owner": "kukapay",
      "name": "whattimeisit-mcp",
      "url": "https://github.com/kukapay/whattimeisit-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kukapay.webp",
      "description": "Get the current time based on your IP address in ISO 8601 format. Integrate time-checking capabilities into applications using this lightweight MCP server powered by World Time.",
      "stars": 8,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-05-07T17:25:30Z",
      "readme_content": "# WhatTimeIsIt MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@kukapay/whattimeisit-mcp)](https://smithery.ai/server/@kukapay/whattimeisit-mcp)\nA lightweight mcp server that tells you exactly what time is it, powered by [World Time](http://worldtimeapi.org/).\n\n![GitHub](https://img.shields.io/github/license/kukapay/whattimeisit-mcp) \n![GitHub last commit](https://img.shields.io/github/last-commit/kukapay/whattimeisit-mcp)\n\n## Installation\n\n### Installing via Smithery\n\nTo install WhatTimeIsIt for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kukapay/whattimeisit-mcp):\n\n```bash\nnpx -y @smithery/cli install @kukapay/whattimeisit-mcp --client claude\n```\n\n### Manual Installation\n1. **Clone the Repository**\n   ```bash\n   git clone https://github.com/kukapay/whattimeisit-mcp.git\n   ```\n\n2. **Client Configuration**\n    ```json\n    {\n      \"mcpServers\": {\n        \"whattimeisit\": {\n          \"command\": \"uv\",\n          \"args\": [\"--directory\", \"path/to/whattimeisit-mcp\", \"run\", \"main.py\"]\n        }\n      }\n    }\n    ```\n   \n## Usage\n\n\n### MCP Tool\nThe server provides a single tool:\n- **Tool Name**: `what_time_is_it`\n- **Description**: Returns the current time string based on the your current IP.\n- **Output**: A string in ISO 8601 format (e.g., `\"2025-03-17T03:17:00+11:00\"`).\n\n## License\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kukapay",
        "whattimeisit",
        "mcp",
        "kukapay whattimeisit",
        "whattimeisit mcp",
        "data kukapay"
      ],
      "category": "weather-and-location-data"
    },
    "kukapay--whereami-mcp": {
      "owner": "kukapay",
      "name": "whereami-mcp",
      "url": "https://github.com/kukapay/whereami-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kukapay.webp",
      "description": "Retrieve precise geolocation information based on the current IP address with detailed reports and error handling capabilities. Supports dynamic queries for specific data types such as IP, country, and city.",
      "stars": 3,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-26T10:37:31Z",
      "readme_content": "# WhereAmI MCP Server\n\n![Python](https://img.shields.io/badge/Python-3.10+-blue.svg)\n![License](https://img.shields.io/badge/License-MIT-green.svg)\n![Status](https://img.shields.io/badge/Status-Active-brightgreen.svg)\n\nA lightweight mcp server that tells you exactly where you are based on your current IP, powered by [ipapi.co](https://ipapi.co/). \n\n## Features\n\n- **Dynamic Resources**: Fetch specific data (e.g., IP, country, city) via `location://{type}`.\n- **Detailed Tool**: Generate a comprehensive location report with `get_location()`.\n- **Natural Language Prompt**: Ask \"Where am I?\" to get detailed results.\n- **Robust Error Handling**: Gracefully manages API and network issues.\n- **Minimal Dependencies**: Requires only `mcp` and `httpx`.\n\n## Installation\n\n### Prerequisites\n- Python 3.10+\n- `pip`\n\n### Setup\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/kukapay/whereami-mcp.git\n   cd whereami-mcp\n   ```\n2. Install dependencies:\n   ```bash\n   pip install mcp httpx\n   ```\n3. (Optional) Install as an MCP service:\n   ```bash\n   mcp install whereami_mcp.py --name \"WhereAmI\"\n   ```\n\n## Usage\n\n### Running the Server\n- Direct execution:\n  ```bash\n  python whereami_mcp.py\n  ```\n- Development mode:\n  ```bash\n  mcp dev whereami_mcp.py\n  ```\n\n### Components\n\n#### Resource: `location://{type}`\nReturns a specific location detail based on `{type}`.\n- **Supported Types**: `ip`, `country`, `country_code`, `region`, `city`, `latitude`, `longitude`, `timezone`, `isp`, `asn`\n- **Examples**:\n  - `@location://ip` → `\"8.8.8.8\"`\n  - `@location://city` → `\"Mountain View\"`\n  - `@location://country` → `\"United States\"`\n\n#### Tool: `get_location()`\nGenerates a detailed Markdown table of geolocation data.\n- **Fields**:\n  - IP\n  - Country\n  - Country Code\n  - Region\n  - City\n  - Latitude\n  - Longitude\n  - Timezone\n  - ISP\n  - ASN\n- **Sample Output**:\n  ```\n  | Field          | Value             |\n  |----------------|-------------------|\n  | IP            | 8.8.8.8           |\n  | Country       | United States     |\n  | Country Code  | US                |\n  | Region        | California        |\n  | City          | Mountain View     |\n  | Latitude      | 37.4223           |\n  | Longitude     | -122.0848         |\n  | Timezone      | America/Los_Angeles |\n  | ISP           | GOOGLE            |\n  | ASN           | AS15169           |\n  ```\n\n#### Prompt: `where_am_i_prompt`\nPredefined query: \"Please tell me where I am based on my current IP address.\" Triggers `get_location()`.\n\n### Examples in Claude Desktop\n1. Install the server:\n   ```bash\n   mcp install whereami_mcp.py --name \"WhereAmI\"\n   ```\n2. Query data:\n   - \"My IP is `@location://ip`\"\n   - \"I’m in `@location://city`, `@location://country`\"\n3. Get full report:\n   - \"Where am I?\"\n   - `get_location()`\n\n## License\n\nMIT License. See [LICENSE](LICENSE) for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "geolocation",
        "kukapay",
        "whereami",
        "geolocation information",
        "location data",
        "precise geolocation"
      ],
      "category": "weather-and-location-data"
    },
    "kwenhwang--hrfco-service": {
      "owner": "kwenhwang",
      "name": "hrfco-service",
      "url": "https://github.com/kwenhwang/hrfco-service",
      "imageUrl": "/freedevtools/mcp/pfp/kwenhwang.webp",
      "description": "Retrieve real-time hydrological data such as water levels, rainfall, and dam discharge. Access detailed observation station information and filter time series data for statistics and location details.",
      "stars": 1,
      "forks": 1,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-02T04:50:37Z",
      "readme_content": "# 🌊 HRFCO Intelligent Water Search System\n\nAI-friendly Korean water data search system with natural language processing.\n\n## 🚀 Features\n\n- **Natural Language Search**: \"한강 수위\", \"서울 강우량\" → Automatic station discovery\n- **Smart Matching**: 16 regions + river name mapping + similarity scoring\n- **Response Optimization**: All responses < 1KB (prevents LLM token overflow)\n- **OpenAI Compatible**: Ready for ChatGPT Function Calling integration\n\n## 📡 API Endpoints\n\n- `/.netlify/functions/search-station` - Search stations by location name\n- `/.netlify/functions/get-water-info` - One-stop water information query\n- `/.netlify/functions/recommend-stations` - Recommend nearby stations\n- `/.netlify/functions/openai-functions` - OpenAI Function definitions\n\n## 🔧 Environment Variables\n\n```\nHRFCO_API_KEY=your-api-key-here\n```\n\n## 🧪 Test Examples\n\n```bash\n# Search stations\ncurl -X POST https://your-site.netlify.app/.netlify/functions/search-station \\\n  -d '{\"location_name\": \"한강\", \"limit\": 3}'\n\n# Get water info\ncurl -X POST https://your-site.netlify.app/.netlify/functions/get-water-info \\\n  -d '{\"query\": \"서울 수위\", \"limit\": 5}'\n```\n\n## 📊 Performance\n\n- **Data Source**: 1,366 water level + 742 rainfall observatories\n- **Response Size**: 346-522 bytes (optimized for LLM)\n- **Search Accuracy**: 90%+ for Korean location names\n- **Response Time**: < 3 seconds\n\nBuilt with TypeScript + Netlify Functions\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hydrological",
        "hrfco",
        "kwenhwang",
        "kwenhwang hrfco",
        "hydrological data",
        "data kwenhwang"
      ],
      "category": "weather-and-location-data"
    },
    "le-yo--weather-mcp": {
      "owner": "le-yo",
      "name": "weather-mcp",
      "url": "https://github.com/le-yo/weather-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/le-yo.webp",
      "description": "Provides current weather information for any location using the wttr.in service, enabling real-time weather data fetching without the need for API keys.",
      "stars": 1,
      "forks": 2,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-04-19T18:59:27Z",
      "readme_content": "# MCP Weather Server\n\nA simple Model Context Protocol (MCP) server that provides weather information for any location.\n\n## What is MCP?\n\nThe Model Context Protocol (MCP) is a standardized way for AI applications and agents to connect with data sources and tools. It allows AI models like Claude to interact with your local system, external services, and custom tools through a standardized interface.\n\n## Features\n\n- Get current weather information for any location\n- Compatible with Claude Desktop and other MCP clients\n- Uses the free wttr.in weather API (no API key required)\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone <your-repo-url>\ncd mcp-weather-server\n\n# Install dependencies\nnpm install\n```\n\n## Usage\n\n### Running the server\n\n```bash\nnode index.js\n```\n\n### Connecting to Claude Desktop\n\n1. Open Claude Desktop\n2. Go to Settings > MCP Servers\n3. Add a new server\n4. Select \"Custom\" and enter the path to your server executable\n5. Set the command to: `node /Users/le-yo/CascadeProjects/mcp-weather-server/index.js`\n6. Save and restart Claude Desktop\n\n### Example prompts for Claude\n\nOnce connected, you can ask Claude to use the weather tool:\n\n- \"What's the current weather in New York?\"\n- \"Tell me the temperature in London right now.\"\n- \"Is it raining in Tokyo?\"\n\n## How it works\n\nThis server implements the Model Context Protocol to provide a tool that fetches weather data from the wttr.in API. When Claude or another MCP client connects to this server, they can use the `get_weather` tool to retrieve current weather conditions for any location.\n\n## Extending the server\n\nYou can extend this server by:\n\n1. Adding more weather-related tools (forecast, historical data, etc.)\n2. Implementing other MCP features like resources or prompts\n3. Using a different weather API with more features\n\n## License\n\nMIT\n",
      "npm_url": "https://www.npmjs.com/package/weather-mcp",
      "npm_downloads": 226,
      "keywords": [
        "weather",
        "wttr",
        "api",
        "weather data",
        "weather information",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "liuwanglei-tal--nasa-mcp": {
      "owner": "liuwanglei-tal",
      "name": "nasa-mcp",
      "url": "https://github.com/liuwanglei-tal/nasa-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/liuwanglei-tal.webp",
      "description": "Access a variety of NASA data through natural language queries, including astronomical images, Mars rover photos, Earth satellite images, near-Earth object data, and space weather information.",
      "stars": 2,
      "forks": 0,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-05-10T14:15:58Z",
      "readme_content": "# NASA MCP Service\n\n一个功能丰富的 NASA 数据查询 MCP 工具，支持多种 NASA API 服务和自然语言查询。\n\n## 功能特点\n\n- 天文图片服务 (APOD)\n  - 获取 NASA 每日天文图片\n  - 支持历史日期查询\n  - 返回图片标题、描述、URL等信息\n\n- 火星探测器照片 (Mars Rovers)\n  - 支持多个火星探测器：好奇号(Curiosity)、机遇号(Opportunity)、勇气号(Spirit)、毅力号(Perseverance)\n  - 按日期查询火星照片\n  - 获取不同相机拍摄的图片\n\n- 地球卫星图像 (Earth)\n  - 根据经纬度获取卫星图像\n  - 支持历史图像查询\n  - 提供高分辨率卫星照片\n\n- 近地天体数据 (NEO - Near Earth Objects)\n  - 获取特定日期的近地小行星信息\n  - 包含小行星大小、距离、速度等数据\n  - 危险系数评估\n\n- 太空天气数据 (Space Weather)\n  - 太阳耀斑事件信息\n  - 日冕物质抛射数据\n  - 实时太空天气状况\n\n## Cursor 安装\n\n1. 打开 Cursor IDE\n2. 在命令面板中输入：\n```bash\n/mcp install @cursor/nasa-mcp\n```\n\n## 配置\n\n1. 访问 [NASA API 门户](https://api.nasa.gov/)\n2. 获取你的 API key\n3. 设置环境变量 `NASA_API_KEY` 或在使用时通过参数传入\n\n## 使用方法\n\n### 在 Cursor 中使用\n\n```bash\n# 获取今天的天文图片\n今天的天文图\n\n# 获取火星照片\n火星 好奇号 2024年3月18日\n\n# 获取地球卫星图像\n地球 39.9042,116.4074\n\n# 获取近地天体数据\n近地小行星 2024年3月18日\n\n# 获取太空天气信息\n太空天气 今天\n```\n\n### 在 Node.js 中使用\n\n```javascript\nconst client = require('@smithery/client');\n\nasync function main() {\n  // 获取火星照片\n  const marsPhotos = await client.call('@cursor/nasa-mcp', '火星 好奇号 今天');\n  \n  // 获取近地天体数据\n  const neoData = await client.call('@cursor/nasa-mcp', '近地小行星 今天');\n  \n  console.log(marsPhotos);\n  console.log(neoData);\n}\n\nmain();\n```\n\n### 命令行使用\n\n```bash\n# 使用环境变量中的 API key\necho \"火星 好奇号 今天\" | NASA_API_KEY=your_api_key node nasa-mcp.js\n\n# 使用自定义 API key\necho \"地球 39.9042,116.4074\" | node nasa-mcp.js --api_key=your-api-key\n```\n\n## 返回数据格式\n\n### 天文图片 (APOD)\n```json\n{\n  \"标题\": \"图片标题\",\n  \"日期\": \"2024-03-19\",\n  \"说明\": \"详细解释\",\n  \"图片链接\": \"图片URL\",\n  \"媒体类型\": \"image\",\n  \"版权\": \"版权信息\"\n}\n```\n\n### 火星照片\n```json\n{\n  \"火星车\": \"curiosity\",\n  \"日期\": \"2024-03-19\",\n  \"照片数量\": 5,\n  \"照片列表\": [\n    {\n      \"id\": 1234567,\n      \"拍摄时间\": \"2024-03-19\",\n      \"相机\": \"NAVCAM\",\n      \"图片链接\": \"https://...\"\n    }\n  ]\n}\n```\n\n### 近地天体数据\n```json\n{\n  \"日期\": \"2024-03-19\",\n  \"小行星数量\": 5,\n  \"小行星列表\": [\n    {\n      \"名称\": \"小行星名称\",\n      \"直径\": {\n        \"最小\": 100,\n        \"最大\": 200\n      },\n      \"是否危险\": \"否\",\n      \"最近距离\": \"1000000 公里\",\n      \"相对速度\": \"50000 公里/小时\"\n    }\n  ]\n}\n```\n\n### 太空天气数据\n```json\n{\n  \"日期\": \"2024-03-19\",\n  \"太阳耀斑\": [\n    {\n      \"开始时间\": \"2024-03-19T10:00:00Z\",\n      \"结束时间\": \"2024-03-19T11:00:00Z\",\n      \"等级\": \"M2.5\",\n      \"位置\": \"N30W60\"\n    }\n  ],\n  \"日冕物质抛射\": [\n    {\n      \"时间\": \"2024-03-19T12:00:00Z\",\n      \"速度\": \"800 km/s\",\n      \"类型\": \"CME\"\n    }\n  ]\n}\n```\n\n## 许可证\n\nMIT\n\n## 作者\n\nsimon liu",
      "npm_url": "https://www.npmjs.com/package/nasa-mcp",
      "npm_downloads": 0,
      "keywords": [
        "nasa",
        "data",
        "liuwanglei",
        "nasa data",
        "data liuwanglei",
        "nasa mcp"
      ],
      "category": "weather-and-location-data"
    },
    "marcusbai--caiyun-weather-mcp": {
      "owner": "marcusbai",
      "name": "caiyun-weather-mcp",
      "url": "https://github.com/marcusbai/caiyun-weather-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/marcusbai.webp",
      "description": "Provides real-time weather data including temperature, humidity, wind speed, and atmospheric pressure, along with minute-by-minute precipitation forecasts, hourly and daily weather forecasts, and weather alert information. Supports address-based weather queries and offers multi-language and unit system options.",
      "stars": 6,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-08-06T03:08:51Z",
      "readme_content": "# 彩云天气 MCP 服务器\n[![smithery badge](https://smithery.ai/badge/@marcusbai/caiyun-weather-mcp)](https://smithery.ai/server/@marcusbai/caiyun-weather-mcp)\n\n基于彩云天气 API 的 Model Context Protocol (MCP) 服务器，提供天气数据查询功能。\n\n## 功能特点\n\n- **实时天气数据**：温度、湿度、风速、气压等\n- **分钟级降水预报**：未来2小时的降水情况\n- **小时级天气预报**：未来24小时或更长时间的天气预报\n- **每日天气预报**：未来多天的天气预报\n- **天气预警信息**：各类天气预警\n- **地址查询**：支持通过地址查询天气（需配置高德地图API）\n- **多语言支持**：支持中文和英文\n- **单位制选择**：支持公制和英制\n\n## 安装\n\n### 安装 Smithery\n\n通过 [Smithery](https://smithery.ai/server/@pepperai/caiyun-weather-mcp) 安装 彩云天气 对于Claude的桌面应用：\n\n```bash\nnpm install @smithery/cli -g\nsmithery install @pepperai/caiyun-weather-mcp\n```\n\n### 通过 NPX 使用\n\n您可以直接通过 NPX 运行：\n\n```bash\nnpx caiyun-weather-mcp --api-key=您的彩云天气API密钥\n```\n\n或者设置环境变量：\n\n```bash\nCAIYUN_API_KEY=您的密钥 npx caiyun-weather-mcp\n```\n\n### 从源码安装\n\n1. 克隆仓库：\n\n```bash\ngit clone https://github.com/marcusbai/caiyun-weather-mcp.git\ncd caiyun-weather-mcp\n```\n\n2. 安装依赖：\n\n```bash\nnpm install\n```\n\n> **注意**：本项目依赖于 Model Context Protocol (MCP) SDK，该SDK需要在运行环境中可用。MCP SDK通常由Claude或其他支持MCP的应用程序提供。\n\n3. 构建项目：\n\n```bash\nnpm run build\n```\n\n## 配置\n\n在使用前，需要配置彩云天气API密钥。如果需要地址查询功能，还需要配置高德地图API密钥。\n\n### 彩云天气API密钥\n\n1. 访问 [彩云天气开发者中心](https://dashboard.caiyunapp.com/)\n2. 注册并登录账号\n3. 创建应用并获取API密钥\n\n### 高德地图API密钥（可选）\n\n1. 访问 [高德开放平台](https://lbs.amap.com/)\n2. 注册并登录账号\n3. 创建应用并获取API密钥，需要启用\"地理编码\"服务\n\n## 配置MCP设置\n\n编辑MCP设置文件，添加彩云天气MCP服务器配置：\n\n```json\n{\n  \"mcpServers\": {\n    \"caiyun-weather\": {\n      \"command\": \"node\",\n      \"args\": [\"完整路径/caiyun-weather-mcp/dist/index.js\"],\n      \"env\": {\n        \"CAIYUN_API_KEY\": \"您的彩云天气API密钥\",\n        \"AMAP_API_KEY\": \"您的高德地图API密钥（可选）\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n如果您通过 NPX 安装了本服务，可以使用以下配置：\n\n```json\n{\n  \"mcpServers\": {\n    \"caiyun-weather\": {\n      \"command\": \"npx\",\n      \"args\": [\"caiyun-weather-mcp\"],\n      \"env\": {\n        \"CAIYUN_API_KEY\": \"您的彩云天气API密钥\",\n        \"AMAP_API_KEY\": \"您的高德地图API密钥（可选）\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n## 使用示例\n\n### 根据经纬度获取天气信息\n\n```\n<use_mcp_tool>\n<server_name>caiyun-weather</server_name>\n<tool_name>get_weather_by_location</tool_name>\n<arguments>\n{\n  \"longitude\": 116.3976,\n  \"latitude\": 39.9075,\n  \"daily_steps\": 5,\n  \"hourly_steps\": 24,\n  \"language\": \"zh_CN\",\n  \"unit\": \"metric\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n### 根据地址获取天气信息\n\n```\n<use_mcp_tool>\n<server_name>caiyun-weather</server_name>\n<tool_name>get_weather_by_address</tool_name>\n<arguments>\n{\n  \"address\": \"北京市海淀区\",\n  \"daily_steps\": 5,\n  \"hourly_steps\": 24,\n  \"language\": \"zh_CN\",\n  \"unit\": \"metric\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n### 获取实时天气数据\n\n```\n<use_mcp_tool>\n<server_name>caiyun-weather</server_name>\n<tool_name>get_realtime_weather</tool_name>\n<arguments>\n{\n  \"longitude\": 116.3976,\n  \"latitude\": 39.9075,\n  \"language\": \"zh_CN\",\n  \"unit\": \"metric\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n### 获取分钟级降水预报\n\n```\n<use_mcp_tool>\n<server_name>caiyun-weather</server_name>\n<tool_name>get_minutely_forecast</tool_name>\n<arguments>\n{\n  \"longitude\": 116.3976,\n  \"latitude\": 39.9075,\n  \"language\": \"zh_CN\",\n  \"unit\": \"metric\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n### 获取小时级天气预报\n\n```\n<use_mcp_tool>\n<server_name>caiyun-weather</server_name>\n<tool_name>get_hourly_forecast</tool_name>\n<arguments>\n{\n  \"longitude\": 116.3976,\n  \"latitude\": 39.9075,\n  \"hourly_steps\": 24,\n  \"language\": \"zh_CN\",\n  \"unit\": \"metric\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n### 获取每日天气预报\n\n```\n<use_mcp_tool>\n<server_name>caiyun-weather</server_name>\n<tool_name>get_daily_forecast</tool_name>\n<arguments>\n{\n  \"longitude\": 116.3976,\n  \"latitude\": 39.9075,\n  \"daily_steps\": 5,\n  \"language\": \"zh_CN\",\n  \"unit\": \"metric\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n### 获取天气预警信息\n\n```\n<use_mcp_tool>\n<server_name>caiyun-weather</server_name>\n<tool_name>get_weather_alert</tool_name>\n<arguments>\n{\n  \"longitude\": 116.3976,\n  \"latitude\": 39.9075,\n  \"language\": \"zh_CN\",\n  \"unit\": \"metric\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n## 参数说明\n\n### 通用参数\n\n- `longitude`：经度\n- `latitude`：纬度\n- `address`：地址（仅用于 `get_weather_by_address`）\n- `daily_steps`：每日预报天数（1-15，默认5）\n- `hourly_steps`：小时预报数量（1-360，默认24）\n- `language`：语言（`zh_CN` 或 `en_US`，默认 `zh_CN`）\n- `unit`：单位制（`metric` 或 `imperial`，默认 `metric`）\n\n## 许可证\n\nMIT\n",
      "npm_url": "https://www.npmjs.com/package/caiyun-weather-mcp",
      "npm_downloads": 0,
      "keywords": [
        "weather",
        "caiyun",
        "precipitation",
        "weather data",
        "weather queries",
        "caiyun weather"
      ],
      "category": "weather-and-location-data"
    },
    "mattmarcin--aqicn-mcp": {
      "owner": "mattmarcin",
      "name": "aqicn-mcp",
      "url": "https://github.com/mattmarcin/aqicn-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/mattmarcin.webp",
      "description": "Fetch real-time air quality data for cities and coordinates worldwide based on the World Air Quality Index (AQICN) project.",
      "stars": 1,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-23T16:14:34Z",
      "readme_content": "# AQICN MCP Server\n[![smithery badge](https://smithery.ai/badge/@mattmarcin/aqicn-mcp)](https://smithery.ai/server/@mattmarcin/aqicn-mcp)\n\nThis is a Model Context Protocol (MCP) server that provides air quality data tools from the World Air Quality Index (AQICN) project. It allows LLMs to fetch real-time air quality data for cities and coordinates worldwide.\n\n## Installation\n\n### Installing via Smithery\n\nTo install AQICN MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@mattmarcin/aqicn-mcp):\n\n```bash\nnpx -y @smithery/cli install @mattmarcin/aqicn-mcp --client claude\n```\n\n### Installing via recommended uv (manual)\n\nWe recommend using [uv](https://docs.astral.sh/uv/) to manage your Python environment:\n\n```bash\n# Install the package and dependencies\nuv pip install -e .\n```\n\n## Environment Setup\n\nCreate a `.env` file in the project root (you can copy from `.env.example`):\n```bash\n# .env\nAQICN_API_KEY=your_api_key_here\n```\n\nAlternatively, you can set the environment variable directly:\n```bash\n# Linux/macOS\nexport AQICN_API_KEY=your_api_key_here\n\n# Windows\nset AQICN_API_KEY=your_api_key_here\n```\n\n## Running the Server\n\n### Development Mode\nThe fastest way to test and debug your server is with the MCP Inspector:\n\n```bash\nmcp dev aqicn_server.py\n```\n\n### Claude Desktop Integration\nOnce your server is ready, install it in Claude Desktop:\n\n```bash\nmcp install aqicn_server.py\n```\n\n### Direct Execution\nFor testing or custom deployments:\n\n```bash\npython aqicn_server.py\n```\n\n## Available Tools\n\n### 1. city_aqi\nGet air quality data for a specific city.\n\n```python\n@mcp.tool()\ndef city_aqi(city: str) -> AQIData:\n    \"\"\"Get air quality data for a specific city.\"\"\"\n```\n\n**Input:**\n- `city`: Name of the city to get air quality data for\n\n**Output:** `AQIData` with:\n- `aqi`: Air Quality Index value\n- `station`: Station name\n- `dominant_pollutant`: Main pollutant (if available)\n- `time`: Timestamp of the measurement\n- `coordinates`: Latitude and longitude of the station\n\n### 2. geo_aqi\nGet air quality data for a specific location using coordinates.\n\n```python\n@mcp.tool()\ndef geo_aqi(latitude: float, longitude: float) -> AQIData:\n    \"\"\"Get air quality data for a specific location using coordinates.\"\"\"\n```\n\n**Input:**\n- `latitude`: Latitude of the location\n- `longitude`: Longitude of the location\n\n**Output:** Same as `city_aqi`\n\n### 3. search_station\nSearch for air quality monitoring stations by keyword.\n\n```python\n@mcp.tool()\ndef search_station(keyword: str) -> list[StationInfo]:\n    \"\"\"Search for air quality monitoring stations by keyword.\"\"\"\n```\n\n**Input:**\n- `keyword`: Keyword to search for stations (city name, station name, etc.)\n\n**Output:** List of `StationInfo` with:\n- `name`: Station name\n- `station_id`: Unique station identifier\n- `coordinates`: Latitude and longitude of the station\n\n## Example Usage\n\nUsing the MCP Python client:\n\n```python\nfrom mcp import Client\n\nasync with Client() as client:\n    # Get air quality data for Beijing\n    beijing_data = await client.city_aqi(city=\"beijing\")\n    print(f\"Beijing AQI: {beijing_data.aqi}\")\n\n    # Get air quality data by coordinates (Tokyo)\n    geo_data = await client.geo_aqi(latitude=35.6762, longitude=139.6503)\n    print(f\"Tokyo AQI: {geo_data.aqi}\")\n\n    # Search for stations\n    stations = await client.search_station(keyword=\"london\")\n    for station in stations:\n        print(f\"Station: {station.name} ({station.coordinates})\")\n```\n\n## Contributing\n\nFeel free to open issues and pull requests. Please ensure your changes include appropriate tests and documentation.\n\n## License\n\nThis project is licensed under the MIT License.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "aqicn",
        "cities",
        "data",
        "aqicn project",
        "air quality",
        "index aqicn"
      ],
      "category": "weather-and-location-data"
    },
    "mcp-examples--weather": {
      "owner": "mcp-examples",
      "name": "weather",
      "url": "https://github.com/mcp-examples/weather",
      "imageUrl": "/freedevtools/mcp/pfp/mcp-examples.webp",
      "description": "Provides real-time weather information, including forecasts and current conditions, for seamless integration into applications.",
      "stars": 0,
      "forks": 0,
      "license": "Creative Commons Attribution 4.0 International",
      "language": "TypeScript",
      "updated_at": "2025-03-20T00:47:21Z",
      "readme_content": "# mcp-examples/weather\n\n[![smithery badge](https://smithery.ai/badge/@mcp-examples/weather)](https://smithery.ai/server/@mcp-examples/weather)\n\nAdapted from Anthropic's MCP Server Quickstart documentation.\n\n* https://modelcontextprotocol.io/quickstart/server\n* https://github.com/modelcontextprotocol/docs/blob/main/quickstart/server.mdx\n",
      "npm_url": "https://www.npmjs.com/package/weather",
      "npm_downloads": 5901,
      "keywords": [
        "weather",
        "forecasts",
        "mcp",
        "weather information",
        "examples weather",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "nexusconnects--TRAVEL-PLANNER-MCP-Server": {
      "owner": "nexusconnects",
      "name": "TRAVEL-PLANNER-MCP-Server",
      "url": "https://github.com/nexusconnects/TRAVEL-PLANNER-MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/nexusconnects.webp",
      "description": "Facilitate travel-related tasks by connecting to Google Maps services for location searches, retrieving place details, calculating routes, and obtaining timezone information.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-04-17T05:13:21Z",
      "readme_content": "# Travel Planner MCP Server (@gongrzhe/server-travelplanner-mcp)\n[![smithery badge](https://smithery.ai/badge/@GongRzhe/TRAVEL-PLANNER-MCP-Server)](https://smithery.ai/server/@GongRzhe/TRAVEL-PLANNER-MCP-Server)\n\nA Travel Planner Model Context Protocol (MCP) server implementation for interacting with Google Maps and travel planning services. This server enables LLMs to perform travel-related tasks such as location search, place details lookup, and travel time calculations.\n\n<a href=\"https://glama.ai/mcp/servers/y3u6yjiiq1\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/y3u6yjiiq1/badge\" alt=\"Travel Planner Server MCP server\" />\n</a>\n\n## Installation & Usage\n### Installing via Smithery\n\nTo install Travel Planner for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@GongRzhe/TRAVEL-PLANNER-MCP-Server):\n\n```bash\nnpx -y @smithery/cli install @GongRzhe/TRAVEL-PLANNER-MCP-Server --client claude\n```\n\n### Installing Manually\n```bash\n# Using npx (recommended)\nnpx @gongrzhe/server-travelplanner-mcp\n\n# With environment variable for Google Maps API\nGOOGLE_MAPS_API_KEY=your_api_key npx @gongrzhe/server-travelplanner-mcp\n```\n\nOr install globally:\n\n```bash\n# Install globally\nnpm install -g @gongrzhe/server-travelplanner-mcp\n\n# Run after global installation\nGOOGLE_MAPS_API_KEY=your_api_key @gongrzhe/server-travelplanner-mcp\n```\n\n## Components\n\n### Tools\n\n- **searchPlaces**\n  - Search for places using Google Places API\n  - Input:\n    - `query` (string): Search query for places\n    - `location` (optional): Latitude and longitude to bias results\n    - `radius` (optional): Search radius in meters\n\n- **getPlaceDetails**\n  - Get detailed information about a specific place\n  - Input:\n    - `placeId` (string): Google Place ID to retrieve details for\n\n- **calculateRoute**\n  - Calculate route between two locations\n  - Input:\n    - `origin` (string): Starting location\n    - `destination` (string): Ending location\n    - `mode` (optional): Travel mode (driving, walking, bicycling, transit)\n\n- **getTimeZone**\n  - Get timezone information for a location\n  - Input:\n    - `location`: Latitude and longitude coordinates\n    - `timestamp` (optional): Timestamp for time zone calculation\n\n## Configuration\n\n### Usage with Claude Desktop\n\nTo use this server with the Claude Desktop app, add the following configuration to the \"mcpServers\" section of your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"travel-planner\": {\n      \"command\": \"npx\",\n      \"args\": [\"@gongrzhe/server-travelplanner-mcp\"],\n      \"env\": {\n        \"GOOGLE_MAPS_API_KEY\": \"your_google_maps_api_key\"\n      }\n    }\n  }\n}\n```\n\nAlternatively, you can use the node command directly if you have the package installed:\n\n```json\n{\n  \"mcpServers\": {\n    \"travel-planner\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/dist/index.js\"],\n      \"env\": {\n        \"GOOGLE_MAPS_API_KEY\": \"your_google_maps_api_key\"\n      }\n    }\n  }\n}\n```\n\n## Development\n\n### Building from Source\n\n1. Clone the repository\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n\n### Environment Variables\n\n- `GOOGLE_MAPS_API_KEY` (required): Your Google Maps API key with the following APIs enabled:\n  - Places API\n  - Directions API\n  - Geocoding API\n  - Time Zone API\n\n## License\n\nThis MCP server is licensed under the MIT License. For more details, please see the LICENSE file in the project repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "nexusconnects",
        "planner",
        "mcp",
        "data nexusconnects",
        "nexusconnects travel",
        "planner mcp"
      ],
      "category": "weather-and-location-data"
    },
    "ngoiyaeric--earthdata-mcp-server": {
      "owner": "ngoiyaeric",
      "name": "earthdata-mcp-server",
      "url": "https://github.com/ngoiyaeric/earthdata-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/ngoiyaeric.webp",
      "description": "Enables efficient dataset discovery and retrieval for geospatial analysis using NASA Earth Data. Facilitates seamless interaction with datasets and data granules to enhance data-driven projects.",
      "stars": 0,
      "forks": 0,
      "license": "BSD 3-Clause \"New\" or \"Revised\" License",
      "language": "Python",
      "updated_at": "2025-09-02T12:18:47Z",
      "readme_content": "<!--\n  ~ Copyright (c) 2023-2024 Datalayer, Inc.\n  ~\n  ~ BSD 3-Clause License\n-->\n\n[![Datalayer](https://assets.datalayer.tech/datalayer-25.svg)](https://datalayer.io)\n\n[![Become a Sponsor](https://img.shields.io/static/v1?label=Become%20a%20Sponsor&message=%E2%9D%A4&logo=GitHub&style=flat&color=1ABC9C)](https://github.com/sponsors/datalayer)\n\n# 🪐 ✨ Earthdata MCP Server\n\n[![Github Actions Status](https://github.com/datalayer/earthdata-mcp-server/workflows/Build/badge.svg)](https://github.com/datalayer/earthdata-mcp-server/actions/workflows/build.yml)\n[![PyPI - Version](https://img.shields.io/pypi/v/earthdata-mcp-server)](https://pypi.org/project/earthdata-mcp-server)\n[![smithery badge](https://smithery.ai/badge/@datalayer/earthdata-mcp-server)](https://smithery.ai/server/@datalayer/earthdata-mcp-server)\n\nEarthdata MCP Server is a [Model Context Protocol](https://modelcontextprotocol.io/introduction) (MCP) server implementation that provides tools to interact with [NASA Earth Data](https://www.earthdata.nasa.gov/). It enables efficient dataset discovery and retrieval for Geospatial analysis.\n\n🚀 **NEW**: This server now includes all [Jupyter MCP Server](https://github.com/datalayer/jupyter-mcp-server) tools through composition, providing a unified interface for both Earth data discovery and Jupyter notebook manipulation.\n\nThe following demo uses this MCP server to search for datasets and data granules on NASA Earthdata, the [jupyter-earth-mcp-server](https://github.com/datalayer/jupyter-earth-mcp-server) to download the data in Jupyter and the [jupyter-mcp-server](https://github.com/datalayer/jupyter-mcp-server) to run further analysis.\n\n<div>\n  <a href=\"https://www.loom.com/share/c2b5b05f548d4f1492d5c107f0c48dbc\">\n    <p>Analyzing Sea Level Rise with AI-Powered Geospatial Tools and Jupyter - Watch Video</p>\n  </a>\n  <a href=\"https://www.loom.com/share/c2b5b05f548d4f1492d5c107f0c48dbc\">\n    <img style=\"max-width:100%;\" src=\"https://cdn.loom.com/sessions/thumbnails/c2b5b05f548d4f1492d5c107f0c48dbc-598a84f02de7e74e-full-play.gif\">\n  </a>\n</div>\n\n## Use with Claude Desktop\n\nTo use this with Claude Desktop, add the following to your `claude_desktop_config.json`.\n\n```json\n{\n  \"mcpServers\": {\n    \"earthdata\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"datalayer/earthdata-mcp-server:latest\"\n      ]\n    }\n  }\n}\n```\n\nIf you are using Linux, start Claude with the following command.\n\n```bash\nmake claude-linux\n```\n\n## Tools\n\nThe server offers **15 tools total**: 3 Earthdata-specific tools plus 12 Jupyter notebook manipulation tools (prefixed with `jupyter_`).\n\n### Earthdata Tools\n\n#### `search_earth_datasets`\n\n- Search for datasets on NASA Earthdata.\n- Input:\n  - search_keywords (str): Keywords to search for in the dataset titles.\n  - count (int): Number of datasets to return.\n  - temporal (tuple): (Optional) Temporal range in the format (date_from, date_to).\n  - bounding_box (tuple): (Optional) Bounding box in the format (lower_left_lon, lower_left_lat, upper_right_lon, upper_right_lat).\n- Returns: List of dataset abstracts.\n\n#### `search_earth_datagranules`\n\n- Search for data granules on NASA Earthdata.\n- Input:\n  - short_name (str): Short name of the dataset.\n  - count (int): Number of data granules to return.\n  - temporal (tuple): (Optional) Temporal range in the format (date_from, date_to).\n  - bounding_box (tuple): (Optional) Bounding box in the format (lower_left_lon, lower_left_lat, upper_right_lon, upper_right_lat).\n- Returns: List of data granules.\n\n#### `download_earth_data_granules` 🆕\n\n- Download Earth data granules from NASA Earth Data and integrate with Jupyter notebooks.\n- This tool combines earthdata search capabilities with jupyter notebook manipulation to create a seamless download workflow.\n- Input:\n  - folder_name (str): Local folder name to save the data.\n  - short_name (str): Short name of the Earth dataset to download.\n  - count (int): Number of data granules to download.\n  - temporal (tuple): (Optional) Temporal range in the format (date_from, date_to).\n  - bounding_box (tuple): (Optional) Bounding box in the format (lower_left_lon, lower_left_lat, upper_right_lon, upper_right_lat).\n- Returns: Success message with download code preparation details.\n- **Integration**: Uses composed jupyter tools to add download code to notebooks for interactive execution.\n\n### Jupyter Tools (Composed)\n\nThe following Jupyter notebook manipulation tools are available with the `jupyter_` prefix:\n\n- **`jupyter_append_markdown_cell`**: Add markdown cells to notebooks\n- **`jupyter_insert_markdown_cell`**: Insert markdown cells at specific positions\n- **`jupyter_overwrite_cell_source`**: Modify existing cell content\n- **`jupyter_append_execute_code_cell`**: Add and execute code cells\n- **`jupyter_insert_execute_code_cell`**: Insert and execute code cells at specific positions\n- **`jupyter_execute_cell_with_progress`**: Execute cells with progress monitoring\n- **`jupyter_execute_cell_simple_timeout`**: Execute cells with timeout\n- **`jupyter_execute_cell_streaming`**: Execute cells with streaming output\n- **`jupyter_read_all_cells`**: Read all notebook cells\n- **`jupyter_read_cell`**: Read specific notebook cells\n- **`jupyter_get_notebook_info`**: Get notebook metadata\n- **`jupyter_delete_cell`**: Delete notebook cells\n\nFor detailed documentation of the Jupyter tools, see the [Jupyter MCP Server documentation](https://github.com/datalayer/jupyter-mcp-server).\n\n## Architecture: Server Composition\n\nThis server uses a **composition pattern** to combine tools from multiple MCP servers into a single unified interface. The implementation:\n\n1. **Imports the Jupyter MCP Server** at runtime\n2. **Merges tool definitions** from the Jupyter server into the Earthdata server\n3. **Prefixes Jupyter tools** with `jupyter_` to avoid naming conflicts\n4. **Preserves all functionality** from both servers\n\nThis approach provides several benefits:\n- ✅ **Unified Interface**: Single MCP server for both Earth data and Jupyter operations\n- ✅ **No Duplication**: Reuses existing Jupyter MCP Server code without copying\n- ✅ **Namespace Safety**: Prefixed tools prevent naming conflicts  \n- ✅ **Graceful Degradation**: Falls back to Earthdata-only if Jupyter server unavailable\n- ✅ **Maintainability**: Changes to Jupyter MCP Server are automatically included\n\n### Implementation Details\n\nThe composition is implemented in the `_compose_jupyter_tools()` function, which:\n\n```python\n# Simplified version of the composition logic\ndef _compose_jupyter_tools():\n    jupyter_mcp_module = importlib.import_module(\"jupyter_mcp_server.server\")\n    jupyter_mcp_instance = jupyter_mcp_module.mcp\n    \n    # Add jupyter tools with prefixed names\n    for tool_name, tool in jupyter_mcp_instance._tool_manager._tools.items():\n        prefixed_name = f\"jupyter_{tool_name}\"\n        mcp._tool_manager._tools[prefixed_name] = tool\n```\n\nThis pattern can be extended to compose additional MCP servers as needed.\n\n## Prompts\n\n1. `download_analyze_global_sea_level` 🆕\n   - Generate a comprehensive workflow for downloading and analyzing Global Mean Sea Level Trend dataset.\n   - Uses both earthdata download tools and jupyter analysis capabilities.\n   - Returns: Detailed prompt for complete sea level analysis workflow.\n\n2. `sealevel_rise_dataset`\n   - Search for datasets related to sea level rise worldwide.\n   - Input:\n     - `start_year` (int): Start year to consider.\n      - `end_year` (int): End year to consider.\n   - Returns: Prompt correctly formatted.\n\n3. `ask_datasets_format`\n    - To ask about the format of the datasets.\n    - Returns: Prompt correctly formatted.\n\n## Building\n\n```bash\n# or run `docker build -t datalayer/earthdata-mcp-server .`\nmake build-docker\n```\n\nIf you prefer, you can pull the prebuilt images.\n\n```bash\nmake pull-docker\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "earthdata",
        "datasets",
        "dataset",
        "earth data",
        "earthdata mcp",
        "ngoiyaeric earthdata"
      ],
      "category": "weather-and-location-data"
    },
    "ngoiyaeric--mapbox-mcp-server": {
      "owner": "ngoiyaeric",
      "name": "mapbox-mcp-server",
      "url": "https://github.com/ngoiyaeric/mapbox-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/ngoiyaeric.webp",
      "description": "Integrate navigation and geocoding services using the Mapbox API to access directions, travel matrices, and real-time mapping functionalities.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-04-08T07:40:49Z",
      "readme_content": "<!--\n * @Author: AidenYangX\n * @Email: xscs709560271@gmail.com\n * @Date: 2024-12-21 23:30:55\n * @Description: Mapbox MCP Server\n-->\n\n# Mapbox MCP Server\n\n[![smithery badge](https://smithery.ai/badge/mapbox-mcp-server)](https://smithery.ai/server/mapbox-mcp-server)\n\nMCP Server for the Mapbox API.\n\n## Features\n\n### Navigation Tools\n\n1. `mapbox_directions`\n\n   - Get directions between coordinates\n   - Inputs:\n     - `coordinates` ({latitude: number, longitude: number}[])\n     - `profile` (optional): \"driving-traffic\", \"driving\", \"walking\", \"cycling\"\n   - Returns: route details with steps, distance, duration\n\n2. `mapbox_directions_by_places`\n\n   - Get directions between places using their names\n   - Inputs:\n     - `places` (string[]): Array of place names\n     - `profile` (optional): \"driving-traffic\", \"driving\", \"walking\", \"cycling\"\n     - `language` (optional): Two-letter language code (e.g., \"zh\", \"en\")\n   - Returns:\n     - Geocoding results for each place\n     - Route details with steps, distance, duration\n     - Any errors that occurred during processing\n\n3. `mapbox_matrix`\n\n   - Calculate travel time and distance matrices between coordinates\n   - Inputs:\n     - `coordinates` ({latitude: number, longitude: number}[])\n     - `profile` (optional): \"driving\", \"walking\", \"cycling\"\n     - `annotations` (optional): \"duration\", \"distance\", \"duration,distance\"\n     - `sources` (optional): Indices of source coordinates\n     - `destinations` (optional): Indices of destination coordinates\n   - Returns: Matrix of durations and/or distances between points\n\n4. `mapbox_matrix_by_places`\n   - Calculate travel time and distance matrices between places using their names\n   - Inputs:\n     - `places` (string[]): Array of place names (2-25 places)\n     - `profile` (optional): \"driving\", \"walking\", \"cycling\"\n     - `annotations` (optional): \"duration\", \"distance\", \"duration,distance\"\n     - `language` (optional): Two-letter language code\n     - `sources` (optional): Indices of source places\n     - `destinations` (optional): Indices of destination places\n   - Returns:\n     - Geocoding results for each place\n     - Matrix of durations and/or distances\n     - Any errors that occurred during processing\n\n### Search Tools\n\n1. `mapbox_geocoding`\n   - Search for places and convert addresses into coordinates\n   - Inputs:\n     - `searchText` (string): The place or address to search for\n     - `limit` (optional): Maximum number of results (1-10)\n     - `types` (optional): Filter by place types (country, region, place, etc.)\n     - `language` (optional): Two-letter language code\n     - `fuzzyMatch` (optional): Enable/disable fuzzy matching\n   - Returns: Detailed location information including coordinates and properties\n\n## Claude Desktop Integration\n\nAdd this configuration to your Claude Desktop config file (typically located at `~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"mapbox-mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/mapbox-mcp-server/build/index.js\"],\n      \"env\": {\n        \"MAPBOX_ACCESS_TOKEN\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\n## Setup\n\n### Installing via Smithery\n\nTo install mapbox-mcp-server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@ngoiyaeric/mapbox-mcp-server):\n\n```bash\nnpx -y @smithery/cli install mapbox-mcp-server --client claude\n```\n\n### Prerequisites\n\n- Node.js 16 or higher\n- TypeScript 4.5 or higher\n- A valid Mapbox API key\n\n### API Key\n\nGet a Mapbox API key by following the instructions [here](https://console.mapbox.com/account/access-tokens/).\n\nSet your API key as an environment variable:\n\n```bash\nexport MAPBOX_ACCESS_TOKEN=your_api_key_here\n```\n\n## Rate Limits\n\n- Directions API: 300 requests per minute\n- Matrix API:\n  - 60 requests per minute for driving/walking/cycling\n  - 30 requests per minute for driving-traffic\n- Geocoding API: 600 requests per minute\n\n## Deployment\n\n### Structure\n\nIn mapbox-mcp-server, we use the following structure to manage the server's handlers:\n\n- `src/server/handlers/base.ts`: Base class for all handlers\n- `src/server/registry.ts`: Registry for all handlers\n- `src/server/main.ts`: Main entry point for the server\n\nEach feature module follows this structure:\n\n```plaintext\nsrc/\n├── types/          # Type definitions\n├── schemas/        # Zod schemas for validation\n├── tools/\n│   ├── definitions/  # Tool definitions\n│   └── handlers/     # Tool implementations\n└── server/\n    └── handlers/     # Handler classes\n```\n\n---\n\n**Class Diagram**:\n![mapbox-mcp-server-class-diagram](./assets/MapboxMCPServerClass.png)\n\n---\n\n**Process Diagram**:\n![mapbox-mcp-server-process-diagram](./assets/MapboxMCPServerProcess.png)\n\n## Error Handling\n\nAll tools implement comprehensive error handling:\n\n- Input validation errors\n- API request failures\n- Rate limit errors\n- Service-specific errors (e.g., no routes found, invalid coordinates)\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mapbox",
        "geocoding",
        "navigation",
        "ngoiyaeric mapbox",
        "mapbox api",
        "using mapbox"
      ],
      "category": "weather-and-location-data"
    },
    "ngoiyaeric--osm-mcp": {
      "owner": "ngoiyaeric",
      "name": "osm-mcp",
      "url": "https://github.com/ngoiyaeric/osm-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ngoiyaeric.webp",
      "description": "Query and visualize map data using a web interface with real-time map interactions. Integrates PostgreSQL/PostGIS for OpenStreetMap data management and supports server-to-client communication.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-04-08T07:42:32Z",
      "readme_content": "# MCP-OSM: OpenStreetMap Integration for MCP\n\nThis package provides OpenStreetMap integration for MCP, allowing users to query\nand visualize map data through an MCP interface.\n\n[![MCP-OSM Screenshot](osm-mcp-s.webp)](osm-mcp.webp)\n\n## Features\n\n- Web-based map viewer using Leaflet and OpenStreetMap\n- Server-to-client communication via Server-Sent Events (SSE)\n- MCP tools for map control (adding markers, polygons, setting view, getting view)\n- PostgreSQL/PostGIS query interface for OpenStreetMap data\n\n## Installation\n\nThis is my `claude_desktop_config.json`:\n```json\n{\n  \"mcpServers\": {\n    \"OSM PostgreSQL Server\": {\n      \"command\": \"/Users/wiseman/.local/bin/uv\",\n      \"args\": [\n        \"run\",\n        \"--env-file\",\n        \".env\",\n        \"--with\",\n        \"mcp[cli]\",\n        \"--with\",\n        \"psycopg2\",\n        \"--with-editable\",\n        \"/Users/wiseman/src/mcp-osm\",\n        \"--directory\",\n        \"/Users/wiseman/src/mcp-osm\",\n        \"mcp\",\n        \"run\",\n        \"mcp.py\"\n      ]\n    }\n  }\n}\n```\n\nWhen the MCP server starts it also starts a web server at http://localhost:8889/\nthat has the map interface.\n\n### Environment Variables\n\nThe following environment variables can be used to configure the MCP:\n\n- `FLASK_HOST` - Host for the Flask server (default: 127.0.0.1)\n- `FLASK_PORT` - Port for the Flask server (default: 8889)\n- `PGHOST` - PostgreSQL host (default: localhost)\n- `PGPORT` - PostgreSQL port (default: 5432)\n- `PGDB` - PostgreSQL database name (default: osm)\n- `PGUSER` - PostgreSQL username (default: postgres)\n- `PGPASSWORD` - PostgreSQL password (default: postgres)\n\n### MCP Tools\n\nThe following MCP tools are available:\n\n- `get_map_view` - Get the current map view\n- `set_map_view` - Set the map view to specific coordinates or bounds\n- `set_map_title` - Set the title displayed at the bottom right of the map\n- `add_map_marker` - Add a marker at specific coordinates\n- `add_map_line` - Add a line defined by a set of coordinates\n- `add_map_polygon` - Add a polygon defined by a set of coordinates\n- `query_osm_postgres` - Execute a SQL query against the OpenStreetMap database\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "openstreetmap",
        "postgis",
        "osm",
        "openstreetmap data",
        "postgis openstreetmap",
        "location data"
      ],
      "category": "weather-and-location-data"
    },
    "ohhan777--korea_weather": {
      "owner": "ohhan777",
      "name": "korea_weather",
      "url": "https://github.com/ohhan777/korea_weather",
      "imageUrl": "/freedevtools/mcp/pfp/ohhan777.webp",
      "description": "Collects weather data from the Korea Meteorological Administration's short-term forecast API and provides it in MCP format for use by various clients like Claude and Cursor. Designed for integration with diverse weather application services.",
      "stars": 6,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-21T05:47:13Z",
      "readme_content": "# Korea Weather MCP Server\r\n\r\n[![smithery badge](https://smithery.ai/badge/@ohhan777/korea_weather)](https://smithery.ai/server/@ohhan777/korea_weather)\r\n\r\n본 MCP 서버는 **기상청 단기예보 조회서비스 API**를 기반으로 동작하는 MCP 서버입니다.\r\n\r\n## 소개\r\n\r\n**Korea Weather MCP Server**는 기상청의 날씨 정보를 수집하여, MCP 프로토콜을 통해 Claude나 Cursor와 같은 MCP 클라이언트(Host)에 제공합니다.  \r\n이 서버는 기상 정보를 활용하는 다양한 응용 서비스에 쉽게 연동될 수 있습니다.\r\n\r\n![MCP Example](assets/mcp_example.png)\r\n\r\n## 주요 기능\r\n\r\n- 기상청 단기예보 API 연동\r\n- MCP 형식의 기상 정보 제공\r\n\r\n## 설치 및 사용 방법\r\n\r\n### Smithery를 이용한 간편 설치\r\n\r\n1. [data.go.kr](https://www.data.go.kr/)에서 **기상청 단기예보 API**를 신청하고 API 키를 발급받습니다.  \r\n2. 다음 명령어를 사용해 [Smithery](https://smithery.ai/server/@ohhan777/korea_weather)에서 서버를 설치하고 Claude Desktop에 등록합니다.  \r\n   설치 과정에서 API 키 입력을 요구하면 발급받은 키를 입력합니다.\r\n   ```bash\r\n   npx -y @smithery/cli install @ohhan777/korea_weather --client claude\r\n3. Claude Desktop을 재시작하여 사용하면 됩니다.\r\n\r\n### Github에서 직접 설치하는 방법\r\n1. [data.go.kr](https://www.data.go.kr/)에서 기상청 단기예보 API 활용 신청 후 API 키를 발급받습니다.\r\n2. [github](https://github.com/ohhan777/korea_weather)에서 소스코드를 다운받아 실행해봅니다.\r\n   ```\r\n   git clone https://github.com/ohhan777/korea_weather.git\r\n   cd korea_weather\r\n   uv run korea_weather.py\r\n   ```\r\n3. MCP 클라이언트(Host)에 서버를 등록합니다.  \r\n\r\n   - **Claude Desktop**의 설정 파일은 보통 아래 경로에 위치합니다.  \r\n     `C:\\Users\\[사용자 이름]\\AppData\\Roaming\\Claude\\claude_desktop_config.json`  \r\n     (파일이 없다면 새로 생성)\r\n\r\n   - **Cursor**의 경우: 상단의 톱니바퀴 아이콘(⚙️) → **MCP → Add new global MCP server** 선택\r\n\r\n   아래 예시와 같은 형식으로 설정 파일을 작성합니다. (디렉토리 경로와 API 키는 환경에 맞게 수정)\r\n\r\n   ```json\r\n   {\r\n     \"mcpServers\": {\r\n       \"korea_weather\": {\r\n         \"command\": \"uv\",\r\n         \"args\": [\r\n           \"--directory\",\r\n           \"C:\\\\ai\\\\PyProjects\\\\korea_weather\",  \r\n           \"run\",\r\n           \"korea_weather.py\"\r\n         ],\r\n         \"env\": {\r\n           \"KOREA_WEATHER_API_KEY\": \"Input Your API Key Here!\"\r\n         }\r\n       }\r\n     }\r\n   }\r\n   ```\r\n### 프롬프트 예제\r\n```\r\n>> 제주 국제 공항 현재 날씨를 알려줘.\r\n>> 내일 오후에 서울 남대문에 놀러가려고 하는데 우산을 챙겨야할까?\r\n>> 오늘 오후에 세차하기에 괜찮은 날씨일까?\r\n```\r\n\r\n## 의존성\r\n\r\n`pyproject.toml` 참고\r\n\r\n## 라이선스\r\n\r\n본 프로젝트는 내부 시험용으로 개발되었으며, 별도의 라이선스 규정 없이 자유롭게 배포 및 수정이 가능합니다.\r\n\r\n## 문의\r\n\r\n개발자: 한국항공우주연구원 오한 (ohhan@kari.re.kr)\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "korea_weather",
        "meteorological",
        "weather",
        "ohhan777 korea_weather",
        "korea_weather collects",
        "korea meteorological"
      ],
      "category": "weather-and-location-data"
    },
    "overstarry--qweather-mcp": {
      "owner": "overstarry",
      "name": "qweather-mcp",
      "url": "https://github.com/overstarry/qweather-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/overstarry.webp",
      "description": "Provides access to real-time weather information and multi-day forecasts through a simple command-line interface, enabling the retrieval of city details and current weather conditions.",
      "stars": 3,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-10T14:22:49Z",
      "readme_content": "# qweather-mcp\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/ae24a36c-f029-49b3-9c42-fc111021add0)\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/overstarry-qweather-mcp-badge.png)](https://mseep.ai/app/overstarry-qweather-mcp)\n[![smithery badge](https://smithery.ai/badge/@overstarry/qweather-mcp)](https://smithery.ai/server/@overstarry/qweather-mcp)\n\nEnglish | [简体中文](./README.zh-CN.md)\n\n> MCP server for [QWeather](https://www.qweather.com/) API, providing comprehensive weather information query capabilities through Model Context Protocol (MCP).\n\n## ✨ Features\n\n- 🌤️ Real-time weather queries\n- 📅 Multi-day weather forecasts (3/7/10/15/30 days)\n- 🔑 Simple API key configuration\n- 🔌 Custom API base URL support\n- 🛠️ Complete tool integration\n\n## 📦 Installation\n\n### Via Smithery\n\nRecommended: Install automatically for Claude Desktop using [Smithery](https://smithery.ai/server/@overstarry/qweather-mcp):\n\n```bash\nnpx -y @smithery/cli install @overstarry/qweather-mcp --client claude\n```\n\n### Manual Configuration\n\n1. First, get your API Key from the [QWeather Console](https://console.qweather.com/).\n\n2. Start the server:\n\n```bash\n# stdio server\nnpx -y qweather-mcp\n```\n\n3. Configure environment variables:\n\n```bash\nQWEATHER_API_BASE=https://api.qweather.com\nQWEATHER_API_KEY=<your-api-key>\n```\n\n### JSON Configuration\n\nAdd to your configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"qweather\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"qweather-mcp\"],\n      \"env\": {\n        \"QWEATHER_API_BASE\": \"<your-api-url>\",\n        \"QWEATHER_API_KEY\": \"<your-api-key>\"\n      }\n    }\n  }\n}\n```\n\n## 🛠️ Available Tools\n\n### get-weather-now\n\nGet current weather information for a specified location.\n\n### get-weather-forecast\n\nGet weather forecast information for a specified location with customizable forecast days:\n- 3-day forecast\n- 7-day forecast\n- 10-day forecast\n- 15-day forecast\n- 30-day forecast\n\nForecast data includes:\n- Temperature range (min/max)\n- Day/night weather conditions\n- Sunrise/sunset times\n- Precipitation\n- Humidity\n- Wind conditions\n- UV index\n\n### get-minutely-precipitation\n\nProvides minute-by-minute precipitation forecast for the next 2 hours, including:\n- Precipitation type (rain/snow)\n- Precipitation amount per minute\n- Precise time predictions\n- Real-time forecast descriptions\n\n### get-hourly-forecast\n\nProvides hourly weather forecasts for 24, 72, or 168 hours, including:\n- Temperature changes\n- Weather conditions\n- Wind direction and force\n- Relative humidity\n- Atmospheric pressure\n- Precipitation probability\n- Cloud coverage\n\n### get-weather-warning\n\nProvides real-time weather warning information, including:\n- Warning issuing authority\n- Warning level and type\n- Detailed warning content\n- Warning validity period\n- Related recommendations\n\n### get-weather-indices\n\nProvides weather life indices information, supporting various index types:\n- Sports index\n- Car wash index\n- Dressing index\n- Fishing index\n- UV index\n- Tourism index\n- Allergy index\nand 16 other life indices\n\n### get-air-quality\n\nProvides real-time air quality data, including:\n- AQI index\n- Air quality level\n- Primary pollutants\n- Health advice\n- Pollutant concentrations\n\n### get-air-quality-hourly\n\nProvides hourly air quality forecast for the next 24 hours:\n- Hourly AQI predictions\n- Pollutant concentration changes\n- Health impact assessment\n- Protection recommendations\n\n### get-air-quality-daily\n\nProvides air quality forecast for the next 3 days:\n- Daily AQI predictions\n- Primary pollutant forecasts\n- Air quality level changes\n- Health protection advice\n\n## 🤝 Contributing\n\nIssues and improvements are welcome! Please check our contribution guidelines.\n\n## 📄 License\n\nMIT\n\n## 🔗 Related Links\n\n- [QWeather Official Website](https://www.qweather.com/)\n- [API Documentation](https://dev.qweather.com/)\n- [Console](https://console.qweather.com/)\n",
      "npm_url": "https://www.npmjs.com/package/qweather-mcp",
      "npm_downloads": 0,
      "keywords": [
        "weather",
        "forecasts",
        "qweather",
        "weather information",
        "weather location",
        "qweather mcp"
      ],
      "category": "weather-and-location-data"
    },
    "piddlingtuna--tfnsw-realtime-alerts-mcp-server": {
      "owner": "piddlingtuna",
      "name": "tfnsw-realtime-alerts-mcp-server",
      "url": "https://github.com/piddlingtuna/tfnsw-realtime-alerts-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/piddlingtuna.webp",
      "description": "Access real-time transport alerts and information, including current disruptions and planned works across the NSW transport network. Retrieve and filter alerts by transport mode for efficient management of transport-related data.",
      "stars": 7,
      "forks": 3,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-04-18T18:49:26Z",
      "readme_content": "# TfNSW Realtime Alerts MCP Server\n\nA Model Context Protocol server for Transport for NSW's (TfNSW) Realtime Alerts API. This server provides tools to access and interact with real-time transport alerts and information via Large Language Models.\n\n## Overview\n\nThis TypeScript-based MCP server implements integration with Transport for NSW's Realtime Alerts system. It enables AI assistants to access up-to-date information about transport disruptions, planned works, and other important alerts across the NSW transport network.\n\n## Features\n\n### Resources\n- List and access transport alerts via `nsw-transport://` URIs\n- Filter alerts by transport mode (buses, trains, ferries, etc.)\n- Plain text format for easy consumption by AI assistants\n\n### Tools\n- `get-transport-alerts` - Retrieve current transport alerts\n  - Filter by transport mode\n  - Returns formatted alert information including affected routes, time periods, and impact details\n\n### Prompts\n- `transport-disruption-summary` - Generate a summary of current transport alerts\n  - Includes relevant alert details as embedded resources\n  - Returns structured prompt for LLM summarisation of major disruptions\n\n## Transport Modes\n\nThe following transport modes are supported:\n\n- `all` - All transport modes\n- `buses` - Sydney Metro and Outer Metro Bus services\n- `ferries` - Sydney Ferries and Newcastle Transport ferries\n- `lightrail` - Light Rail services\n- `metro` - Sydney Metro\n- `nswtrains` - NSW Trains regional trains and coaches\n- `regionbuses` - Regional Bus services\n- `sydneytrains` - Sydney Trains suburban and intercity network\n\n## Authentication\n\nThis server requires authentication with the TfNSW Open Data API. You will need to register for an API key at the [TfNSW Open Data Hub](https://opendata.transport.nsw.gov.au/).\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"tfnsw-realtime-alerts\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"tfnsw-realtime-alerts-mcp-server\"\n      ],\n      \"env\": {\n        \"NSW_TRANSPORT_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\nReplace `\"your_api_key_here\"` with your TfNSW API key from the [TfNSW Open Data Hub](https://opendata.transport.nsw.gov.au/).\n\n## Development\n\nConfigure your API key as an environment variable in your `.env` file:\n\n```\nNSW_TRANSPORT_API_KEY=\"your_api_key_here\"\n```\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n### Debugging\n\nYou can use the [MCP Inspector](https://github.com/modelcontextprotocol/inspector) for debugging, which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
      "npm_url": "https://www.npmjs.com/package/tfnsw-realtime-alerts-mcp-server",
      "npm_downloads": 293,
      "keywords": [
        "alerts",
        "tfnsw",
        "transport",
        "transport alerts",
        "alerts transport",
        "nsw transport"
      ],
      "category": "weather-and-location-data"
    },
    "pinnaclesoft-ko--be-node-seoul-data-mcp": {
      "owner": "pinnaclesoft-ko",
      "name": "be-node-seoul-data-mcp",
      "url": "https://github.com/pinnaclesoft-ko/be-node-seoul-data-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/pinnaclesoft-ko.webp",
      "description": "Access public data from Seoul, including subway ridership statistics and cultural event information through the Seoul Public Data API. Integrate this data into applications for real-time insights on transportation and cultural events.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-24T00:04:20Z",
      "readme_content": "\n# 서울 공공데이터 MCP 서버 예제\n\n서울 공공데이터 API를 사용하여 서울시의 다양한 공공 데이터를 제공하는 MCP 서버 예제입니다. \n\n## 예제 목록\n\n- 서울시 지하철호선별 역별 승하차 인원 정보\n- 서울시 문화행사 정보 \n\n\n## 설정방법\n\n### 서울 공공데이터 API 키 설정\n\n#### 서울시 지하철호선별 역별 승하차 인원 정보\n파일 `modules/KoreaSeoulCulturalEventInfo.ts`에 다음 {API 키}를 추가한다.\n\n```typescript\nimport {\n    Tool,\n} from \"@modelcontextprotocol/sdk/types.js\";\n\nconst API_URL = \"http://openapi.seoul.go.kr:8088/{authKey}/json/culturalEventInfo/{StartIndex}/{EndIndex}\";\nconst API_KEY = \"{API 키}\";\n```\n\n#### 서울시 문화행사 정보\n파일 `modules/KoreaSeoulSubwayStatus.ts`에 다음 {API 키}를 추가한다.\n\n```typescript\nimport {\n    Tool,\n} from \"@modelcontextprotocol/sdk/types.js\";\n\nconst API_URL = \"http://openapi.seoul.go.kr:8088/{authKey}/json/culturalEventInfo/{StartIndex}/{EndIndex}\";\nconst API_KEY = \"{API 키}\";\n```\n\n## 빌드하기\n\n```bash\nnpm i; npm run build\n```\n\n#### Claude Desktop 에 MCP 설정 추가하기 \n`claude_desktop_config.json` 파일에 다음을 추가한다.\n{빌드된 경로}는 자신에 맞게 추가해야 함.\n\n```json\n{\n  \"mcpServers\": {\n    \"KoreaSeoulData\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"{빌드된 경로}/seoul_korea/dist/index.js\"\n      ]\n    }\n  }\n}\n```\n\n\n## 사용예제\n\n### 서울시 지하철호선별 역별 승하차 인원 정보\n\n![image](docs/images/ex_001.png)\n\n\n### 서울시 문화행사 정보\n\n![image](docs/images/ex_002.png)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "seoul",
        "data",
        "transportation",
        "seoul data",
        "data seoul",
        "information seoul"
      ],
      "category": "weather-and-location-data"
    },
    "puran1218--arcgis-location-services-mcp": {
      "owner": "puran1218",
      "name": "arcgis-location-services-mcp",
      "url": "https://github.com/puran1218/arcgis-location-services-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Provides geocoding, reverse geocoding, and routing services to enhance applications with location-based features. Access detailed location data and nearby points of interest effectively.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "geocoding",
        "arcgis",
        "mcp",
        "location services",
        "location data",
        "provides geocoding"
      ],
      "category": "weather-and-location-data"
    },
    "qing-turnaround--mcp-ip-geo": {
      "owner": "qing-turnaround",
      "name": "mcp-ip-geo",
      "url": "https://github.com/qing-turnaround/mcp-ip-geo",
      "imageUrl": "/freedevtools/mcp/pfp/qing-turnaround.webp",
      "description": "Provides IP geolocation lookup services including country, region, and city information using the ip-api.com service.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-05-08T09:30:56Z",
      "readme_content": "<h1 align=\"center\">\n  mcp-ip-geo\n</h1>\n\n<div align=\"center\">\n  <a href=\"./README-zh_CN.md\">简体中文</a>\n</div>\n\n---\n\n`mcp-ip-geo` is an MCP server that provides IP geolocation lookup (country, region, city, etc.) using the ip-api.com service.\n\n# Building from Source\n\n## Build Locally\n\n### Using Go Command\n\n```bash\n# On Unix-based systems (Linux/macOS)\ngo build -o mcp-ip-geo ./cmd/mcp-ip-geo\n\n# On Windows\ngo build -o mcp-ip-geo.exe .\\cmd\\mcp-ip-geo\n```\n\n### Using Docker\n\n1. Build the Docker image:\n\n    ```bash\n    docker build -t mcp-ip-geo-server .\n    ```\n\n2. Run the Docker container:\n\n    ```bash\n    docker run -d --name mcp-ip-geo-server -p 8000:8000 mcp-ip-geo-server\n    ```\n\n## Install Prebuilt Binary\n\nInstall the server using Go:\n\n```bash\ngo install github.com/chenmingyong0423/mcp-ip-geo/cmd/mcp-ip-geo@latest\n```\n\n# MCP Integration\n\nYou can integrate `mcp-ip-geo` in one of the following ways:\n\n## 🖥 Executable Integration (run a local binary)\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-ip-geo\": {\n      \"command\": \"/path/to/mcp-ip-geo\"\n    }\n  }\n}\n```\n\n## 🌐 HTTP Integration (connect to a running instance via HTTP)\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-ip-geo\": {\n      \"url\": \"http://host:port/sse\"\n    }\n  }\n}\n```\n\n# License\n> ⚠ **Notice**: This project uses the free version of [ip-api.com](https://ip-api.com/), which is **strictly limited to non-commercial use**. If you intend to use this project for commercial purposes, please make sure to comply with their terms of service or purchase a commercial license: [ip-api.com](https://ip-api.com/)\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "geolocation",
        "geo",
        "ip",
        "ip geolocation",
        "ip geo",
        "geolocation lookup"
      ],
      "category": "weather-and-location-data"
    },
    "ravinahp--surf-mcp": {
      "owner": "ravinahp",
      "name": "surf-mcp",
      "url": "https://github.com/ravinahp/surf-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ravinahp.webp",
      "description": "Fetch tide information for any location and date, providing detailed data on high and low tides along with station information and automatic time zone handling. Ideal for obtaining precise tide forecasts to optimize surfing conditions.",
      "stars": 15,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-25T00:02:17Z",
      "readme_content": "# Surf MCP Server\n\nMCP server for people who surf waves and the web.\n\n## Diagram\n![Letter Dot Grid - 5 dpi](https://github.com/user-attachments/assets/6a065a75-4ac4-4cae-965b-4990d6bd970a)\n\n\n\n## Video Demo\nhttps://github.com/user-attachments/assets/0a4453e2-66df-4bf5-8366-8538cda366ed\n\n\n## Features\n\n- Fetch tide information for any location using latitude and longitude\n- Support for date-specific tide queries\n- Detailed tide data including high/low tides and station information\n- Automatic time zone handling (UTC)\n\n## Prerequisites\n\n- Python 3.x\n- Storm Glass API key\n\n## Getting Your Storm Glass API Key\n\n1. Visit [Storm Glass](https://stormglass.io/)\n2. Click \"Try for Free\" or \"Sign In\" to create an account\n3. Once registered, you'll receive your API key\n\nNote on API Usage Limits:\n- Free tier: 10 requests per day\n- Paid plans available:\n  - Small: 500 requests/day (€19/month)\n  - Medium: 5000 requests/day (€49/month)\n  - Large: 25,000 requests/day (€129/month)\n  - Enterprise: Custom plans available\n\nChoose a plan based on your usage requirements. The free tier is suitable for testing and personal use.\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/ravinahp/surf-mcp.git\ncd surf-mcp\n```\n\n2. Install dependencies using uv:\n```bash\nuv sync\n```\n\nNote: We use `uv` instead of pip since the project uses `pyproject.toml` for dependency management.\n\n## Configure as MCP Server\n\nTo add this tool as an MCP server, you'll need to modify your Claude desktop configuration file. This configuration includes your Storm Glass API key, so you won't need to set it up separately.\n\nThe configuration file location depends on your operating system:\n\n- MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\nAdd the following configuration to your JSON file:\n\n```json\n{\n    \"surf-mcp\": {\n        \"command\": \"uv\",\n        \"args\": [\n            \"--directory\",\n            \"/Users/YOUR_USERNAME/Code/surf-mcp\",\n            \"run\",\n            \"surf-mcp\"\n        ],\n        \"env\": {\n            \"STORMGLASS_API_KEY\": \"your_api_key_here\"\n        }\n    }\n}\n```\n\n⚠️ IMPORTANT: \n1. Replace `YOUR_USERNAME` with your actual system username\n2. Replace `your_api_key_here` with your actual Storm Glass API key\n3. Make sure the directory path matches your local installation\n\n## Deployment\n\n### Building\n\nTo prepare the package:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package:\n```bash\nuv build\n```\nThis will create distributions in the `dist/` directory.\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging experience, we strongly recommend using the MCP Inspector.\n\nYou can launch the MCP Inspector with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /path/to/surf-mcp run surf-mcp\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\nThe Inspector provides:\n- Real-time request/response monitoring\n- Input/output validation\n- Error tracking\n- Performance metrics\n\n## Usage\n\nThe service provides a FastMCP tool for getting tide information:\n\n```python\n@mcp.tool()\nasync def get_tides(latitude: float, longitude: float, date: str) -> str:\n    \"\"\"Get tide information for a specific location and date.\"\"\"\n```\n\n### Parameters:\n- `latitude`: Float value representing the location's latitude\n- `longitude`: Float value representing the location's longitude\n- `date`: Date string in YYYY-MM-DD format\n\n### Example Response:\n```\nTide Times:\nTime: 2024-01-20T00:30:00+00:00 (UTC)\nType: HIGH tide\nHeight: 1.52m\n\nTime: 2024-01-20T06:45:00+00:00 (UTC)\nType: LOW tide\nHeight: 0.25m\n\nStation Information:\nName: Sample Station\nDistance: 20.5km from requested location\n```\n\n## Use Cases\n\n### Example #1: Finding the Best Surf Time\n\nYou can use this tool to determine the optimal surfing time at your favorite beach & the closest station. Generally, the best surfing conditions are during incoming (rising) tides, about 2 hours before high tide. \n\nExample prompt to Claude:\n\n<img width=\"693\" alt=\"Screenshot 2025-01-07 at 12 55 47 PM\" src=\"https://github.com/user-attachments/assets/f605494a-9842-40b9-a9f2-cfcfae0cb908\" />\n\nNote: Different beaches may have different optimal tide conditions based on their specific geography and break type. This tool also provides station distance information which should be considered alongside tide information. (ie. longer station distance means higher change of innacuracy - you can ask Claude for this as well when prompting). \n\n## Error Handling\n\nThe service includes robust error handling for:\n- API request failures\n- Invalid coordinates\n- Missing or invalid API keys\n- Network timeouts\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tides",
        "surf",
        "tide",
        "tide information",
        "tide forecasts",
        "tides station"
      ],
      "category": "weather-and-location-data"
    },
    "ropon--mcp_weather": {
      "owner": "ropon",
      "name": "mcp_weather",
      "url": "https://github.com/ropon/mcp_weather",
      "imageUrl": "/freedevtools/mcp/pfp/ropon.webp",
      "description": "Provides real-time weather forecasts and city information queries, offering accurate weather data for the next 24 hours based on city names or coordinates.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-04-07T12:27:43Z",
      "readme_content": "# Weather MCP Server\n\n一个提供天气预报和城市信息查询功能的Model Context Protocol服务器。该服务器允许LLMs获取未来24小时的天气信息，并支持通过城市名称、经纬度等方式查询城市信息。\n\n### 可用工具\n\n- `get_24h_weather` - 获取未来24小时的天气预报。\n  - 必需参数：\n    - `location` (string): 城市名称或经纬度（例如，北京或116.41,39.92）\n\n## 安装\n\n### 使用uv（推荐）\n\n使用[`uv`](https://docs.astral.sh/uv/)时无需特定安装。我们将使用[`uvx`](https://docs.astral.sh/uv/guides/tools/)直接运行*mcp-server-weather*。\n\n### 使用PIP\n\n或者，你可以通过pip安装`mcp-server-weather`：\n\n```bash\npip install mcp-server-weather\n```\n\n安装后，你可以使用以下命令作为脚本运行：\n\n```bash\npython -m mcp_server_weather\n```\n\n## 配置\n\n### 配置Claude.app\n\n在Claude设置中添加：\n\n<details>\n<summary>使用uvx</summary>\n\n```json\n\"mcpServers\": {\n  \"weather\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-weather\"]\n  }\n}\n```\n</details>\n\n<details>\n<summary>使用docker</summary>\n\n```json\n\"mcpServers\": {\n  \"weather\": {\n    \"command\": \"docker\",\n    \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/weather\"]\n  }\n}\n```\n</details>\n\n<details>\n<summary>使用pip安装</summary>\n\n```json\n\"mcpServers\": {\n  \"weather\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_weather\"]\n  }\n}\n```\n</details>\n\n### 配置Zed\n\n在Zed的settings.json中添加：\n\n<details>\n<summary>使用uvx</summary>\n\n```json\n\"context_servers\": [\n  \"mcp-server-weather\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-weather\"]\n  }\n],\n```\n</details>\n\n<details>\n<summary>使用pip安装</summary>\n\n```json\n\"context_servers\": {\n  \"mcp-server-weather\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_weather\"]\n  }\n},\n```\n</details>\n\n## 示例交互\n\n1. 获取未来24小时天气：\n```json\n{\n  \"name\": \"get_24h_weather\",\n  \"arguments\": {\n    \"location\": \"广州 天河\"\n  }\n}\n```\n响应：\n```json\n{\n  \"location\": \"广州 天河\",\n  \"forecast\": \"未来24小时的天气信息...\"\n}\n```\n\n## 调试\n\n你可以使用MCP inspector来调试服务器。对于uvx安装：\n\n```bash\nnpx @modelcontextprotocol/inspector uvx mcp-server-weather\n```\n\n或者如果你在特定目录中安装了包或正在开发：\n\n```bash\ncd path/to/servers/src/weather\nnpx @modelcontextprotocol/inspector uv run mcp-server-weather\n```\n\n## 构建\n\nDocker 构建:\n\n```bash\ndocker build -t mcp/weather .\n```\n\n## 贡献\n\n我们鼓励对mcp-server-weather的贡献，以帮助扩展和改进其功能。无论是添加新的天气相关工具、增强现有功能，还是改进文档，你的输入都很有价值。\n\n有关其他MCP服务器和实现模式的示例，请参见：\nhttps://github.com/modelcontextprotocol/servers\n\n欢迎提交拉取请求！随时贡献新想法、错误修复或增强功能，以使mcp-server-weather更加强大和实用。\n\n## 许可证\n\nmcp-server-weather根据MIT许可证授权。这意味着你可以自由使用、修改和分发软件，但需遵守MIT许可证的条款和条件。有关详细信息，请参阅项目存储库中的LICENSE文件。\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_weather",
        "weather",
        "forecasts",
        "ropon mcp_weather",
        "mcp_weather provides",
        "weather data"
      ],
      "category": "weather-and-location-data"
    },
    "rossshannon--weekly-weather-mcp": {
      "owner": "rossshannon",
      "name": "weekly-weather-mcp",
      "url": "https://github.com/rossshannon/weekly-weather-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/rossshannon.webp",
      "description": "Provides global weather forecasts and current conditions using the OpenWeatherMap One Call API, offering detailed 8-day forecasts and hourly updates.",
      "stars": 5,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-20T20:13:45Z",
      "readme_content": "# 🌦️ Weekly Weather MCP Server\n\nA weather forecast MCP (Model Context Protocol) server providing **8-day global weather forecasts** and current weather conditions using the [OpenWeatherMap](https://openweathermap.org) [One Call API 3.0](https://openweathermap.org/api/one-call-3).\n\n> This project builds upon an earlier project by [Zippland](https://github.com/Zippland/weather-mcp), with modifications to support full week forecasts and additional time-of-day data points.\n\n<div align=\"center\">\n  <img src=\"https://rossshannon.github.io/weekly-weather-mcp/images/weather-mcp-thinking.gif\" alt=\"Claude calling MCP server\" width=\"800\">\n  <p><em>Animation showing Claude Desktop processing the weather data from the MCP Server</em></p>\n</div>\n<br>\n<div align=\"center\">\n  <img src=\"https://rossshannon.github.io/weekly-weather-mcp/images/weather-forecast-example.png\" alt=\"Claude displaying weather forecast\" width=\"700\">\n  <p><em>Claude Desktop showing a detailed weather forecast with lawn mowing recommendations</em></p>\n</div>\n\n## Features\n\n- 🌍 Support for querying weather conditions anywhere in the world\n- 🌤️ Hourly forecasts for the next 48 hours\n- 📅 Provides detailed 8-day forecasts (today + following 7 days), with morning, afternoon, and evening data points\n- 🌧️ Weather summaries and precipitation probabilities\n- 🌡️ Detailed weather information including temperature, humidity, wind speed, etc.\n- 📍 Support for reporting results in different time zones\n- 🗂️ No separate configuration file needed; API key can be passed directly through environment variables or parameters\n\n## Usage\n\n### 1. Get an OpenWeatherMap API Key with One Call API 3.0 Access (free)\n\n1. Visit [OpenWeatherMap](https://openweathermap.org/) and register an account\n2. Subscribe to the “One Call API 3.0” plan (offers 1,000 API calls per day for free)\n3. Wait for API key activation (this can take up to an hour)\n\n#### About the One Call API 3.0\n\nThe One Call API 3.0 provides comprehensive weather data:\n- Current weather conditions\n- Minute forecast for 1 hour\n- Hourly forecast for 48 hours\n- Daily forecast for 8 days (including today)\n- National weather alerts\n- Historical weather data\n\n#### API Usage and Limits\n\n- **Free tier**: 1,000 API calls per day\n- **Default limit**: 2,000 API calls per day (can be adjusted in your account)\n- **Billing**: Any calls beyond the free 1,000/day will be charged according to OpenWeatherMap pricing\n- **Usage cap**: You can set a call limit in your account to prevent exceeding your budget (including capping your usage at the free tier limit so no costs can be incurred)\n- If you reach your limit, you’ll receive a HTTP 429 error response\n\n> **Note**: API key activation can take several minutes up to an hour. If you receive authentication errors shortly after subscribing or generating a new key, wait a bit and try again later.\n\n### 2. Clone the Repository and Install Dependencies\n\n```bash\n# Clone the repository\ngit clone https://github.com/rossshannon/weekly-weather-mcp.git\ncd weekly-weather-mcp\n\n# Create a virtual environment (recommended)\npython3 -m venv venv\nsource venv/bin/activate  # Linux/Mac\n# OR\nvenv\\Scripts\\activate  # Windows\n\n# Install dependencies\npip3 install -r requirements.txt\n```\n\nThis will install all the necessary dependencies to run the server and development tools.\n\n### 3. Run the Server\n\nThere are two ways to provide the API key:\n\n#### Method 1: Using Environment Variables\n\n```bash\n# Set environment variables\nexport OPENWEATHER_API_KEY=\"your_api_key\"  # Linux/Mac\nset OPENWEATHER_API_KEY=your_api_key  # Windows\n\n# Run the server\npython weather_mcp_server.py\n```\n\n#### Method 2: Provide When Calling the Tool\n\nRun directly without setting environment variables:\n\n```bash\npython weather_mcp_server.py\n```\n\nWhen calling the tool, you’ll need to provide the `api_key` parameter.\n\n### 4. Use in MCP Client Configuration\n\nAdd the following configuration to your MCP-supported client (e.g., [Claude Desktop](https://www.anthropic.com/claude-desktop) ([instructions](https://modelcontextprotocol.io/quickstart/user)), [Cursor](https://www.cursor.com/)):\n\n```json\n{\n  \"weather_forecast\": {\n    \"command\": \"python3\",\n    \"args\": [\n      \"/full_path/weather_mcp_server.py\"\n    ],\n    \"env\": {\n      \"OPENWEATHER_API_KEY\": \"your_openweathermap_key_here\"\n    },\n    \"disabled\": false,\n    \"autoApprove\": [\"get_weather\", \"get_current_weather\"]\n  }\n}\n```\n\nIf you’re using a virtual environment, your configuration should include the full path to the Python executable in the virtual environment:\n\n```json\n{\n  \"weather_forecast\": {\n    \"command\": \"/full_path/venv/bin/python3\",\n    \"args\": [\n      \"/full_path/weather_mcp_server.py\"\n    ],\n    \"env\": {\n      \"OPENWEATHER_API_KEY\": \"your_openweathermap_key_here\"\n    },\n    \"disabled\": false,\n    \"autoApprove\": [\"get_weather\", \"get_current_weather\"]\n  }\n}\n```\n\n### 5. Available Tools\n\nThe server exposes two tools, `get_weather` and `get_current_weather`. Both tools accept the same parameters:\n\n- `location`: Location name as a string, e.g., “Beijing”, “New York”, “Tokyo”. The tool will handle geocoding this to a latitude/longitude coordinate.\n- `api_key`: OpenWeatherMap API key (optional, will read from environment variable if not provided)\n- `timezone_offset`: Timezone offset in hours, e.g., 8 for Beijing, -4 for New York. Default is 0 (UTC time). Times in the returned data will be accurate for this timezone.\n\n#### get_weather\n\nGet comprehensive weather data for a location including current weather (next 48 hours) and 8-day forecast with detailed information.\n\nReturns:\n- Current weather information\n- Hourly forecasts for the next 48 hours\n- Daily forecasts for 8 days (today + 7 days ahead)\n- Morning (9 AM), afternoon (3 PM), and evening (8 PM) data points for each day\n- Weather summaries and precipitation probabilities\n- Detailed weather information including temperature, humidity, wind speed, etc.\n\nPerfect for use cases like:\n- “🏃‍♂️ Which days this week should I go for a run?”\n- “🪴 When’s the best evening to work in my garden this week?”\n- “🪁 What’s the windiest day coming up soon for flying a kite?”\n- “💧 Will I need to water my garden this week or will rain take care of it?”\n\n#### get_current_weather\n\nGet current weather for a specified location.\n\nReturns:\n- A simplified subset of the data returned by `get_weather`\n- Only the current weather information (temperature, feels like, weather condition, humidity, wind, etc.); no forecast data for future time periods\n- Useful for quick queries about present conditions only\n\n##### Location Lookup Details\n\nThe `location` parameter uses OpenWeatherMap’s geocoding to convert location names to geographic coordinates:\n\n- Simple location names work: “Paris”, “Tokyo”, “New York”\n- For better accuracy, include country codes: “Paris,FR”, “London,GB”, “Portland,US”\n- For US cities, you can include state: “Portland,OR,US” or “Portland,ME,US”\n- The API supports any location on Earth that OpenWeatherMap can geocode\n- Location names are converted to latitude/longitude coordinates internally\n\nIf a location can’t be found, the API will return an error. In case of ambiguous locations, try adding country or state codes for more precise results.\n\n## Usage Examples\n\n### Example 1: Current Weather\n\n```\nUser: What’s the weather like in New York right now?\n\nAI: Let me check the current weather in New York for you.\n[Calling get_current_weather(\"New York\", timezone_offset=-4)]\n\nCurrent weather in New York: 5°C, few clouds, humidity 42%, wind speed 4.1m/s.\n```\n\n### Example 2: Weekly Planning\n\n```\nUser: I need to mow my lawn this week in Boston. Which day would be best?\n\nAI: Let me check the weather forecast for Boston to find the best day for lawn mowing.\n[Calling get_weather(\"Boston\", timezone_offset=-4)]\n\nLooking at the Boston forecast for the week:\n- Today (Monday): Light rain (28% chance), 5°C\n- Tuesday: Clear, sunny, 10°C\n- Wednesday: Light rain (100% chance), 9°C\n- Thursday: Moderate rain (100% chance), 10°C\n- Friday: Moderate rain (100% chance), 11°C\n- Saturday: Partly cloudy, 13°C\n- Sunday: Scattered clouds, 17°C\n\nTuesday would be your best option for mowing the lawn. It will be clear and sunny with no chance of rain, and the temperature will be comfortable at around 10°C.\n```\n\nYou can combine this MCP server with others to achieve multi-step workflows. For example, once the weather has been checked, you can also tell Claude to add that as an event in your calendar to remind yourself of those plans.\n\n<div align=\"center\">\n  <img src=\"https://rossshannon.github.io/weekly-weather-mcp/images/calendar-integration-example.png\" alt=\"Calendar event created by Claude\" width=\"365\">\n  <p><em>Calendar event created by Claude based on the weather forecast</em></p>\n</div>\n\n## Troubleshooting\n\n### API Key Issues\n\nIf you encounter an “Invalid API key” or authorization error:\n1. Make sure you’ve subscribed to the “One Call API 3.0” plan. You’ll need a debit or credit card to enable your account, but you’ll only be charged if you exceed the free tier limit.\n2. Remember that API key activation can take up to an hour\n3. Verify you have set the `OPENWEATHER_API_KEY` correctly in environment variables, or check that you’re providing the correct `api_key` parameter when calling the tools\n\n### Other Common Issues\n\n- **“Location not found” error**:\n  - Check for typos in location names\n  - Some very small or remote locations might not be in OpenWeatherMap’s database\n\n- **Incorrect location returned**:\n  - Try using a more accurate city name or add a country code, e.g., “Beijing,CN” or “Porto,PT”\n  - For US cities with common names, specify the state: “Springfield,IL,US” or “Portland,OR,US”\n  - For cities with the same name in different countries, always include the country code and state if applicable: “Paris,FR” for Paris, France vs “Paris,TX,US” for Paris, Texas, USA.\n\n- **Rate limiting (429 error)**: You’ve exceeded your API call limit. Check your OpenWeatherMap account settings.\n\n## Development and Testing\n\n### Testing\n\nThis project includes unit tests, integration tests, and mock client test files to validate the MCP server functionality. The server has been manually tested to ensure it works correctly with Claude Desktop, Cursor, and other MCP clients.\n\n#### Manual Client Testing\n\nBefore configuring the server with Claude Desktop or other MCP clients, you can use the included test script to verify your API key and installation:\n\n1. Set your OpenWeatherMap API key:\n   ```bash\n   export OPENWEATHER_API_KEY=\"your_api_key\"\n   ```\n\n2. Run the test client:\n   ```bash\n   python3 test_mcp_client.py\n   ```\n\nThe test script directly calls the weather functions to check the current weather in New York and displays the results. This helps verify that:\n1. Your API key is working properly\n2. The OpenWeatherMap API is accessible\n3. The weather data functions are operational\n\nIf the test shows current weather data, you’re ready to configure the server with Claude Desktop, Cursor, or other MCP clients!\n\n<div align=\"center\">\n  <img src=\"https://rossshannon.github.io/weekly-weather-mcp/images/weather-mcp-test-client.png\" alt=\"Running local test client\" width=\"800\">\n  <p><em>Running local test client to verify API key and installation</em></p>\n</div>\n\n#### Automated Tests\n\nThe repository includes unit and integration test files that:\n- Test API key handling and validation\n- Validate data parsing and formatting\n- Verify error handling for API failures\n- Test both exposed MCP tools: `get_weather` and `get_current_weather`\n\nThese tests require proper setup of the development environment with all dependencies installed. They’re provided as reference for future development.\n\nTo run the automated tests:\n\n```bash\n# Run unit tests\npython test_weather_mcp.py\n\n# Run integration tests\npython test_mcp_integration.py\n```\n\nThe tests use a sample API response (`test_weather_response.json`) to simulate responses from the OpenWeatherMap API, so they can be run without an API key or internet connection.\n\nThese tests are provided as reference for future development and to ensure the MCP server continues to function correctly after any modifications.\n\n## Credits\n\nThis project is adapted from an original [Weather MCP](https://github.com/Zippland/weather-mcp) by Zippland. The modifications include:\n\n- Integration with OpenWeatherMap One Call API 3.0\n- Extended forecast data from 2 days to 8 days (today + 7 days)\n- Addition of morning, afternoon and evening data points for each day\n- Hourly forecasts for the next 48 hours\n- Inclusion of weather summaries, wind speed, and precipitation probabilities\n- Unit tests, integration tests, and mock client test files\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "openweathermap",
        "forecasts",
        "weather",
        "using openweathermap",
        "weather forecasts",
        "openweathermap api"
      ],
      "category": "weather-and-location-data"
    },
    "sarunasdaujotis--vilnius-transport-mcp-server": {
      "owner": "sarunasdaujotis",
      "name": "vilnius-transport-mcp-server",
      "url": "https://github.com/sarunasdaujotis/vilnius-transport-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/sarunasdaujotis.webp",
      "description": "Provides access to real-time Vilnius public transport data, allowing integration with large language models for transport-related queries and functionality.",
      "stars": 1,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-01-23T15:18:07Z",
      "readme_content": "# Vilnius Transport MCP Server\n\nA Model Context Protocol (MCP) server implementation that provides Vilnius public transport data access capabilities to Large Language Models (LLMs). This project demonstrates how to extend LLM capabilities with real-time transport data using the MCP standard.\n\nThe [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) is a standard that enables Large Language Models (LLMs) to securely access external tools and data. MCP allows LLMs to:\n- Access real-time or local data\n- Call external functions [claude_desktop_config.json](../../../Library/Application%20Support/Claude/claude_desktop_config.json)\n- Interact with system resources\n- Maintain consistent tool interfaces\n\nThis project implements an MCP server that provides Vilnius public transport data tools to LLMs, enabling them to answer queries about public transport stops and routes.\n\nThe server exposes the following MCP tools:\n\n- `find_stops`: Search for public transport stops by name\n  ```json\n  {\n    name: string;  // Full or partial name of the stop to search for\n  }\n- `find_closest_stop`: Find the closest public transport stop to given coordinates\n  ```json\n  { \n    coordinates: string;  // Format: \"latitude, longitude\" (e.g., \"54.687157, 25.279652\")\n  }\n  ```\nTo add the MCP server to your Claude development environment, add the following configuration to your claude_desktop_config.json file:\n  ```json\n     {\n      \"mcpServers\": {\n        \"vilnius_transport\": {\n          \"command\": \"uv\",\n          \"args\": [\n              \"--directory\",\n              \"path/vilnius-transport-mcp-server/src/vilnius_transport_mcp\",\n              \"run\",\n              \"transport.py\"\n          ]\n        }\n      }\n     }\n ```\nNote: Make sure to adjust the directory path to match your local installation.\n\nTo run the client:\n```commandline\nuv run client.py path/src/vilnius_transport_mcp/transport.py\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "vilnius",
        "transport",
        "data",
        "vilnius transport",
        "transport data",
        "sarunasdaujotis vilnius"
      ],
      "category": "weather-and-location-data"
    },
    "sjanaX01--weather-mcp-server": {
      "owner": "sjanaX01",
      "name": "weather-mcp-server",
      "url": "https://github.com/sjanaX01/weather-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/sjanaX01.webp",
      "description": "Provides comprehensive weather information including current conditions, forecasts, historical data, air quality, and astronomy details while enabling location searches and weather alerts.",
      "stars": 16,
      "forks": 16,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-28T09:06:46Z",
      "readme_content": "# Weather MCP Server\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/devilcoder01/weather-mcp-server)](https://archestra.ai/mcp-catalog/devilcoder01__weather-mcp-server)\n[![smithery badge](https://smithery.ai/badge/@devilcoder01/weather-mcp-server)](https://smithery.ai/server/@devilcoder01/weather-mcp-server)\n\nA Model Context Protocol (MCP) server for weather data, built with FastAPI and the MCP framework. This server provides various weather-related tools that can be used by AI assistants to retrieve current weather conditions, forecasts, air quality data, and more.\n\n## Features\n\n- Current weather conditions\n- Weather forecasts (1-14 days)\n- Historical weather data\n- Weather alerts\n- Air quality information\n- Astronomy data (sunrise, sunset, moon phases)\n- Location search\n- Timezone information\n- Sports events\n\n## Requirements\n\n- Python 3.13+\n- [uv](https://github.com/astral-sh/uv) package manager\n- [WeatherAPI](https://www.weatherapi.com/) API key\n\n## Installation\n\n### Installing via Smithery\n\nTo install Weather Data Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@devilcoder01/weather-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @devilcoder01/weather-mcp-server --client claude\n```\n\n### Manual Installation\n1. Clone this repository:\n   ```\n   git clone https://github.com/yourusername/Weather_mcp_server.git\n   cd Weather_mcp_server\n   ```\n\n2. Install dependencies using uv:\n   ```\n   uv venv\n   uv pip install -e .\n   ```\n\n3. Create a `.env` file in the project root with your WeatherAPI key:\n   ```\n   WEATHER_API_KEY=your_api_key_here\n   ```\n\n## Usage\n\nRun the server:\n\n```\npython main.py\n```\n\nThe server will start on http://localhost:8000 by default.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "https://www.npmjs.com/package/weather-mcp-server",
      "npm_downloads": 405,
      "keywords": [
        "sjanax01",
        "weather",
        "mcp",
        "sjanax01 weather",
        "weather information",
        "data sjanax01"
      ],
      "category": "weather-and-location-data"
    },
    "stephen9412--roc-cwa-mcp": {
      "owner": "stephen9412",
      "name": "roc-cwa-mcp",
      "url": "https://github.com/stephen9412/roc-cwa-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/stephen9412.webp",
      "description": "Access real-time and forecast weather data for Taiwan, including 3-day and 1-week forecasts and historical rainfall data. Utilize a simplified API interface for reliable weather information specific to Taiwan's regions.",
      "stars": 5,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-31T13:51:28Z",
      "readme_content": "# Taiwan Central Weather Administration MCP Server\n\nThis project provides a Model Context Protocol (MCP) server that interfaces with the Taiwan Central Weather Administration (CWA) API, allowing you to easily access weather data for Taiwan.\n\n[中文版](README_ZH.md)\n\n## CWA API Resources\n\nTo use this project, you need to obtain an API key from the Central Weather Administration:\n\n- CWA Open Data Platform: https://opendata.cwa.gov.tw/index\n- API Documentation: https://opendata.cwa.gov.tw/dist/opendata-swagger.html\n- API Key Application Guide: https://www.hlbh.hlc.edu.tw/resource/openfid.php?id=38959\n\n## Features\n\n- Get 3-day weather forecast data for Taiwan counties and cities\n- Get 1-week weather forecast data for Taiwan counties and cities\n- Get historical rainfall data for the past three days\n- Automatic data cleaning and format conversion\n- Simplified API output with only essential information\n\n## System Requirements\n\n- Python 3.10+\n- MCP CLI 1.6.0+\n- uv package manager\n\n## Installation\n\n1. Ensure you have Python 3.10 or higher installed\n\n2. Install dependencies using uv:\n\n```bash\n# Install project dependencies using uv\nuv pip install -e .\n```\n\n## Usage\n\n### Starting the Server\n\n#### Windows Users\n\n```bash\n# Execute in Command Prompt or PowerShell\nuv --directory your_project_path run src/server.py your_API_key\n```\n\n#### Mac and Linux Users\n\n```bash\n# Execute in Terminal\nuv --directory your_project_path run src/server.py your_API_key\n```\n\n### Available MCP Tools\n\nThis server provides the following three main tools:\n\n#### 1. get_3_days_weather\n\nGet 3-day weather forecast data for a specified county or city.\n\nParameters:\n\n- `location_name` (string): County or city name, must be a valid Taiwan county or city name\n\nValid county/city names include: Yilan County, Hualien County, Taitung County, Penghu County, Kinmen County, Lienchiang County, Taipei City, New Taipei City, Taoyuan City, Taichung City, Tainan City, Kaohsiung City, Keelung City, Hsinchu County, Hsinchu City, Miaoli County, Changhua County, Nantou County, Yunlin County, Chiayi County, Chiayi City, Pingtung County\n\n#### 2. get_1_week_weather\n\nGet 1-week weather forecast data for a specified county or city.\n\nParameters:\n\n- `location_name` (string): County or city name, must be a valid Taiwan county or city name\n\n#### 3. get_historical_rainfall\n\nGet rainfall data for the past three days.\n\nNo parameters required.\n\n### Data Format\n\n#### Weather Forecast Data Format\n\n```json\n[\n  {\n    \"ElementName\": \"Temperature\",\n    \"Time\": [\n      [\"2025-04-11T00:00\", \"21\"],\n      [\"2025-04-11T01:00\", \"21\"],\n      ...\n    ]\n  },\n  {\n    \"ElementName\": \"Relative Humidity\",\n    \"Time\": [\n      [\"2025-04-11T00:00\", \"90\"],\n      [\"2025-04-11T01:00\", \"89\"],\n      ...\n    ]\n  },\n  ...\n]\n```\n\n#### Rainfall Data Format\n\n```json\n{\n  \"rain_labels\": [\"Now\", \"Past10Min\", \"Past1hr\", \"Past3hr\", \"Past6Hr\", \"Past12hr\", \"Past24hr\", \"Past2days\", \"Past3days\"],\n  \"stations\": [\n    {\n      \"name\": \"Station Name\",\n      \"time\": \"Observation Time\",\n      \"loc\": \"County,Town\",\n      \"geo\": [latitude, longitude],\n      \"rain\": [current, past10min, past1hr, past3hr, past6hr, past12hr, past24hr, past2days, past3days]\n    },\n    ...\n  ]\n}\n```\n\n### Supported Weather Elements\n\n#### 3-Day Forecast\n\n- Temperature\n- Relative Humidity\n- Apparent Temperature\n- Comfort Index\n- Wind Direction\n- Wind Speed\n- 3-hour Precipitation Probability\n- Weather Phenomenon\n- Comprehensive Weather Description\n\n#### 1-Week Forecast\n\n- Average Temperature\n- Maximum Temperature\n- Minimum Temperature\n- Average Relative Humidity\n- Maximum Apparent Temperature\n- Minimum Apparent Temperature\n- Maximum Comfort Index\n- Minimum Comfort Index\n- Wind Speed\n- Wind Direction\n- 12-hour Precipitation Probability\n- UV Index\n- Weather Phenomenon\n- Comprehensive Weather Description\n\n## API Data Sources\n\nThis project uses the following open data APIs from the Taiwan Central Weather Administration:\n\n- 3-Day Forecast: Taiwan Township Weather Forecast - 3-Day Forecast (3-hour intervals)\n- 1-Week Forecast: Taiwan Township Weather Forecast - 1-Week Weather Forecast\n- Rainfall Data: Automatic Rainfall Station - Rainfall Observation Data\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "forecasts",
        "forecast",
        "taiwan",
        "weather data",
        "weather information",
        "data taiwan"
      ],
      "category": "weather-and-location-data"
    },
    "sunholdshen--mymcp": {
      "owner": "sunholdshen",
      "name": "mymcp",
      "url": "https://github.com/sunholdshen/mymcp",
      "imageUrl": "/freedevtools/mcp/pfp/sunholdshen.webp",
      "description": "Provides real-time weather information for cities around the world through a simple API, allowing applications to query current weather conditions easily.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-04-17T05:25:59Z",
      "readme_content": "# 天气查询 MCP 服务\n\n这是一个简单的天气查询MCP（Model Completion Plugin）服务，可以让你通过Cursor AI助手查询全球城市的天气状况。\n\n## 准备工作\n\n1. 注册并获取OpenWeatherMap API密钥：\n   - 访问 [OpenWeatherMap](https://openweathermap.org/) 网站\n   - 注册一个免费账户\n   - 获取API密钥\n\n2. 配置环境变量：\n   - 在项目根目录中找到`.env`文件\n   - 将你的API密钥填入`OPENWEATHER_API_KEY=your_api_key_here`\n\n## 本地运行\n\n1. 安装依赖：\n```\nnpm install\n```\n\n2. 启动服务：\n```\nnpm start\n```\n\n或者使用开发模式（自动重启）：\n```\nnpm run dev\n```\n\n3. 服务将在 http://localhost:3001 上运行\n   - MCP清单: http://localhost:3001/mcp-manifest.json\n   - OpenAPI规范: http://localhost:3001/openapi.json\n\n## 部署到公网\n\n为了让Cursor能够使用这个MCP服务，你需要将其部署到公网可访问的地址。以下是几种简单的方法：\n\n### 使用ngrok进行临时公开（开发测试用）\n\n1. 安装ngrok：\n   - 访问 [ngrok.com](https://ngrok.com/) 注册并下载\n   - 按照官方指南设置ngrok\n\n2. 在本地启动你的服务：\n```\nnpm start\n```\n\n3. 在另一个终端窗口启动ngrok：\n```\nngrok http 3001\n```\n\n4. ngrok会提供一个公开URL（例如 `https://abc123.ngrok.io`）\n   - 使用这个URL来配置Cursor中的MCP服务\n\n### 部署到Render.com（免费方案）\n\n1. 注册 [Render.com](https://render.com/) 账户\n\n2. 创建新的Web服务：\n   - 连接你的GitHub仓库\n   - 设置构建命令：`npm install`\n   - 设置启动命令：`npm start`\n   - 添加环境变量：`OPENWEATHER_API_KEY`\n\n3. 部署完成后，Render会提供一个类似于 `https://your-service-name.onrender.com` 的URL\n   - 使用这个URL来配置Cursor中的MCP服务\n\n## 在Cursor中配置MCP服务\n\n1. 打开Cursor编辑器\n2. 点击设置图标\n3. 选择\"MCP服务\"\n4. 点击\"添加MCP服务\"\n5. 输入你的MCP清单URL（例如`https://your-service.onrender.com/mcp-manifest.json`）\n6. 保存设置\n\n现在你可以通过Cursor AI助手查询天气了，例如：\n- \"北京今天的天气怎么样？\"\n- \"查询上海的气温\"\n- \"纽约现在的天气状况\"\n\n## API使用\n\n如果你想直接调用API，可以使用以下端点：\n\n```\nGET /weather?city={城市名}\n```\n\n示例响应：\n```json\n{\n  \"city\": \"北京\",\n  \"temperature\": 25.6,\n  \"description\": \"晴\",\n  \"humidity\": 45,\n  \"wind_speed\": 5.7\n}\n```\n\n## 许可证\n\nMIT ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mymcp",
        "weather",
        "sunholdshen",
        "weather information",
        "weather location",
        "data sunholdshen"
      ],
      "category": "weather-and-location-data"
    },
    "sunsetcoder--flightradar24-mcp-server": {
      "owner": "sunsetcoder",
      "name": "flightradar24-mcp-server",
      "url": "https://github.com/sunsetcoder/flightradar24-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/sunsetcoder.webp",
      "description": "Track flights in real-time using Flightradar24 data, providing information on specific flight times and airport statuses, and monitoring emergency flights.",
      "stars": 45,
      "forks": 7,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-30T05:20:17Z",
      "readme_content": "# Flightradar24 MCP Server 🛩️\n\nA Claude Desktop MCP server that helps you track flights in real-time using Flightradar24 data. Perfect for aviation enthusiasts, travel planners, or anyone curious about flights overhead!\n\n## What Can This Do? ✨\n\n- 🔍 Track any flight in real-time\n- ⏰ Get arrival and departure times for specific flights\n- 🌉 View the status of flights at an airport\n- 🚨 Monitor emergency flights\n\n<img width=\"1466\" alt=\"Anthropic Claude MCP Hackathon - FlightRadar24 MCP server\" src=\"https://github.com/user-attachments/assets/719444ae-2c8b-4441-84f8-5150337d871f\" />\n\n## Setup Guide 🚀\n\n### 1. Prerequisites\n- [Claude Desktop](https://claude.ai/desktop) installed on your computer\n- A Flightradar24 API key (get one from [Flightradar24's website](https://www.flightradar24.com/premium))*\n\n### 2. Installation\n\n1. Clone this repository somewhere on your computer:\n   ```bash\n   git clone https://github.com/sunsetcoder/flightradar24-mcp-server.git\n   ```\n\n2. Install dependencies & build the project:\n   ```bash\n   cd flightradar24-mcp-server\n   npm install\n   npm run build\n   ```\n\n### 3. Integration with Claude Desktop\n\n1. Open your Claude Desktop configuration file:\n   ```\n   # On Mac:\n   ~/Library/Application Support/Claude/claude_desktop_config.json\n   \n   # On Windows:\n   %APPDATA%/Claude/claude_desktop_config.json\n   ```\n\n2. Add the following to the `mcpServers` object in your config:\n   ```json\n   {\n     \"mcpServers\": {\n       \"flightradar24-server\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"/Users/<username>/<FULL_PATH...>/flightradar24-mcp-server/dist/index.js\"\n         ],\n         \"env\": {\n           \"FR24_API_KEY\": \"your_api_key_here\",\n           \"FR24_API_URL\": \"https://fr24api.flightradar24.com\"\n         }\n       }\n     }\n   }\n   ```\n\n3. Important Steps:\n   - Replace `/FULL/PATH/TO/flightradar24-mcp-server` with the actual full path to where you cloned the repository\n   - Add your Flightradar24 API key in the `env` section\n   - Make sure to use forward slashes (`/`) in the path, even on Windows\n\n4. Restart Claude Desktop for the changes to take effect\n\n## Environment Setup\n\n1. Copy `.env.example` to `.env`:\n   ```bash\n   cp .env.example .env\n   ```\n\n2. Update the `.env` file with your actual Flightradar24 API key:\n   ```env\n   FR24_API_KEY=your_actual_api_key_here\n   ```\n\nNote: Never commit your actual API key to version control. The `.env` file is ignored by git for security reasons.\n\n## Let's Try It Out! 🎮\n\nOnce the server is configured, you can ask Claude questions like:\n\n1. \"What's the ETA for United Airlines flight UA123?\"\n2. \"Show me all flights currently at SFO\"\n3. \"Are there any emergency flights in the area?\"\n4. \"Show me all international flights arriving at SFO in the next 2 hours\"\n5. \"How many commercial flights are currently over the Pacific Ocean?\"\n6. \"Identify any flights that have declared an emergency in the California region\"\n\nExample conversation with Claude:\n```\nYou: What's the status of flight UA123?\nClaude: Let me check that for you...\n[Claude will use the MCP server to fetch real-time flight information]\n```\n\n## Common Questions & Troubleshooting 🤔\n\n### \"Claude can't connect to the server\"\n- Check if the path in `claude_desktop_config.json` is correct\n- Make sure you're using the full absolute path\n- Verify your API key is correct\n- Try restarting Claude Desktop\n\n### \"The server isn't responding\"\n- Make sure your Flightradar24 API key is valid\n- Check if the API URL is correct\n- Look for any error messages in server logs\n\n### FlightRadar API Access\n- Note: Using Flightradar24's API requires a [subscription](https://fr24api.flightradar24.com/subscriptions-and-credits)\n\n## Need More Help? 🆘\n\n1. Make sure Claude Desktop is properly installed\n2. Verify your Flightradar24 API key is active\n3. Check the path in your configuration file is correct\n4. Look for error messages in MCP server logs\n\n## License 📄\n\nMIT\n\n---\n\nMade with ❤️ for aviation enthusiasts\n",
      "npm_url": "https://www.npmjs.com/package/flightradar24-mcp-server",
      "npm_downloads": 967,
      "keywords": [
        "flightradar24",
        "sunsetcoder",
        "flights",
        "flightradar24 mcp",
        "sunsetcoder flightradar24",
        "flightradar24 data"
      ],
      "category": "weather-and-location-data"
    },
    "swonixs--weatherapi-mcp": {
      "owner": "swonixs",
      "name": "weatherapi-mcp",
      "url": "https://github.com/swonixs/weatherapi-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/swonixs.webp",
      "description": "Fetches real-time weather data and air quality information for any city, allowing integration with various MCP clients to provide up-to-date environmental insights.",
      "stars": 1,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-08-23T22:38:37Z",
      "readme_content": "# WeatherAPI MCP Server\n\nAn MCP server that provides current weather and air quality data using WeatherAPI.\n\n## Features\n\n- Get current weather data for any city\n- Air quality information (optional)\n- Dynamic URI support for weather resources\n- Easy integration with n8n, Claude Desktop App, Windsurf IDE,Cursor IDE, and other MCP clients\n\n## Getting Started\n\n### Get WeatherAPI Key\n\n1. Go to [WeatherAPI.com](https://www.weatherapi.com)\n2. Sign up for a free account\n3. After signing in, go to your dashboard\n4. Copy your API key from the \"API Keys\" section\n\n### MCP Configuration\n\nAdd the following configuration to your Windsurf MCP config file:\n\n```json\n{\n  \"mcpServers\": {\n    \"weather\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@swonixs/weatherapi-mcp\"],\n      \"env\": {\n        \"WEATHER_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\nReplace `YOUR_API_KEY_HERE` with the API key you obtained from WeatherAPI.com.\n\n### Tools\n\n#### get_weather\n\nGet current weather data for a specified city.\n\nParameters:\n- `location` (string): City name\n\nExample response:\n```json\n{\n  \"location\": \"London\",\n  \"country\": \"United Kingdom\",\n  \"temp_c\": 15.0,\n  \"condition\": \"Partly cloudy\",\n  \"humidity\": 71,\n  \"wind_kph\": 14.4,\n  \"air_quality\": {\n    \"co\": 230.3,\n    \"no2\": 13.5,\n    \"o3\": 52.9,\n    \"pm2_5\": 8.5,\n    \"pm10\": 12.1,\n    \"us-epa-index\": 1\n  }\n}\n```\n\n### Repository\n\n[WeatherAPI MCP Server](https://github.com/swonixs/weatherapi-mcp)\n\n## License\n\nMIT\n",
      "npm_url": "https://www.npmjs.com/package/@swonixs/weatherapi-mcp",
      "npm_downloads": 5000,
      "keywords": [
        "weatherapi",
        "weather",
        "swonixs",
        "weatherapi mcp",
        "weather data",
        "swonixs weatherapi"
      ],
      "category": "weather-and-location-data"
    },
    "szypetike--weather-mcp-server": {
      "owner": "szypetike",
      "name": "weather-mcp-server",
      "url": "https://github.com/szypetike/weather-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/szypetike.webp",
      "description": "Retrieve real-time weather information including temperature, humidity, and wind conditions for cities worldwide, with an option to fallback on mock data if the API request fails.",
      "stars": 3,
      "forks": 2,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-18T11:06:47Z",
      "readme_content": "# Weather MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@szypetike/weather-mcp-server)](https://smithery.ai/server/@szypetike/weather-mcp-server)\n\nA Model Context Protocol (MCP) server that provides weather information for cities around the world.\n\n## Features\n\n- Get current weather for any city\n- Provides temperature, weather conditions, humidity, wind information, and more\n- Fallback to mock data if API request fails\n\n## Requirements\n\n- Node.js (v14 or higher)\n- npm or yarn\n- OpenWeather API key (optional - will use mock data if not provided)\n\n## Installation\n\n1. Clone this repository\n2. Install dependencies:\n   ```\n   npm install\n   ```\n3. Build the server:\n   ```\n   npm run build\n   ```\n\n## Usage\n\n### Running locally\n\n```\nnpm start\n```\n\n### Using with Claude or other MCP-compatible AI assistants\n\nAdd the following configuration to your MCP settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"weather-server\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/weather-server/build/index.js\"],\n      \"env\": {\n        \"OPENWEATHER_API_KEY\": \"your-api-key-here\" // Optional - will use mock data if not provided\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n### API Key and Mock Data\n\nThis server can operate in two modes:\n\n1. **With API Key**: When an OpenWeather API key is provided via the `OPENWEATHER_API_KEY` environment variable, the server will fetch real-time weather data from the OpenWeather API.\n\n2. **Without API Key**: If no API key is provided, the server will automatically use mock data for a set of predefined cities (London, New York, Tokyo, Paris, Sydney). For other cities, it will use default mock data.\n\nTo get an OpenWeather API key:\n1. Sign up at [OpenWeather](https://openweathermap.org/)\n2. Navigate to your account's \"API keys\" section\n3. Generate a new API key or use an existing one\n\nThe mock data mode is useful for development, testing, or when you don't need real-time weather data.\n\n## Available Tools\n\n### get_current_weather\n\nGet current weather information for a specified city.\n\n**Input Schema:**\n```json\n{\n  \"city\": \"string\" // City name (e.g., \"London\", \"New York\", \"Tokyo\")\n}\n```\n\n**Example Response:**\n```json\n{\n  \"location\": \"London, GB\",\n  \"date\": \"Monday, March 24, 2025\",\n  \"time\": \"7:30:00 PM\",\n  \"temperature\": {\n    \"current\": \"12°C\",\n    \"feelsLike\": \"10°C\"\n  },\n  \"weather\": {\n    \"main\": \"Cloudy\",\n    \"description\": \"Overcast clouds\",\n    \"icon\": \"https://openweathermap.org/img/wn/04d@2x.png\"\n  },\n  \"details\": {\n    \"humidity\": \"75%\",\n    \"pressure\": \"1012 hPa\",\n    \"windSpeed\": \"4.5 m/s\",\n    \"windDirection\": \"230°\",\n    \"cloudiness\": \"90%\",\n    \"sunrise\": \"6:45 AM\",\n    \"sunset\": \"7:30 PM\"\n  },\n  \"source\": \"OpenWeather API\" // or \"Mock Data (No API key provided)\" or \"Mock Data (API request failed)\"\n}\n```\n\nThe `source` field in the response indicates where the data came from:\n- `\"OpenWeather API\"`: Real-time data from the OpenWeather API\n- `\"Mock Data (No API key provided)\"`: Mock data used because no API key was provided\n- `\"Mock Data (API request failed)\"`: Mock data used because the API request failed\n\n## License\n\nMIT\n",
      "npm_url": "https://www.npmjs.com/package/weather-mcp-server",
      "npm_downloads": 405,
      "keywords": [
        "weather",
        "api",
        "humidity",
        "weather information",
        "weather location",
        "weather mcp"
      ],
      "category": "weather-and-location-data"
    },
    "tinjyuu--mcp-jr-east-delay": {
      "owner": "tinjyuu",
      "name": "mcp-jr-east-delay",
      "url": "https://github.com/tinjyuu/mcp-jr-east-delay",
      "imageUrl": "/freedevtools/mcp/pfp/tinjyuu.webp",
      "description": "Provides real-time delay information for JR East trains through the \"getDelays\" tool, facilitating access to up-to-date train delay data via a standardized MCP interface.",
      "stars": 4,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-06-20T05:27:08Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/tinjyuu-mcp-jr-east-delay-badge.png)](https://mseep.ai/app/tinjyuu-mcp-jr-east-delay)\n\n# JR東日本 遅延情報 MCPサーバー\n\n## セットアップ\n\n```sh\nnpm install\n```\n\n## ビルド\n\n```sh\nnpm run build\n```\n\n## テスト\n\n```sh\nnpx vitest run\n```\n\n## サーバーの起動\n\n```sh\nnode build/index.js\n```\n\nまたは、package.jsonのbin設定により\n\n```sh\nnpx jr-east-delay\n```\n\nでコマンドとしても実行できます。\n\n## MCPクライアントからの利用\n\nClaude DesktopやMCP InspectorなどのMCPクライアントから「getDelays」ツールを呼び出すことで、JR東日本の遅延情報を取得できます。\n\n### MCPクライアント設定例\n\nClaude DesktopやMCP Inspector等のクライアントで本サーバーを利用する場合、設定ファイル（例: `claude_desktop_config.json`）に以下のように記述してください。\n\n#### 例1: `node` コマンドがパスに通っている場合\n\n```json\n\"jr-east-delay\": {\n  \"command\": \"node\",\n  \"args\": [\"/Users/your-path/mcp-jr-east-delay/build/index.js\"]\n}\n```\n\n#### 例2: `node` の絶対パスを指定する場合\n\n```json\n\"jr-east-delay\": {\n  \"command\": \"/Users/your-username/.nodebrew/current/bin/node\",\n  \"args\": [\"/Users/your-path/mcp-jr-east-delay/build/index.js\"]\n}\n```\n\n- `your-username` の部分はご自身の環境に合わせて変更してください。\n- `your-path` の部分はご自身の環境に合わせて変更してください。\n- `node` コマンドがパスに通っていない場合は絶対パスで指定してください。\n\n---\n\n### 開発用メモ\n- テストは `src/index.test.ts` に記述\n- MCPプロトコルの通信テストはMCP Inspector等のクライアントを利用\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tinjyuu",
        "delay",
        "trains",
        "train delay",
        "tinjyuu mcp",
        "delay data"
      ],
      "category": "weather-and-location-data"
    },
    "variflight--variflight-mcp": {
      "owner": "variflight",
      "name": "variflight-mcp",
      "url": "https://github.com/variflight/variflight-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/variflight.webp",
      "description": "Provides real-time flight information including searches, transfer options, comfort metrics, aircraft tracking, and weather forecasts. Enables access to detailed flight data and purchasing options for enhanced travel planning.",
      "stars": 16,
      "forks": 6,
      "license": "No License",
      "language": "",
      "updated_at": "2025-09-29T10:41:43Z",
      "readme_content": "# Variflight MCP Server\n\nA Model Context Protocol (MCP) server implementation for VariFlight flight information services. This server provides various tools to query flight information, weather data, and flight comfort metrics.\n\n# Variflight API Key\n\nTo use the Variflight MCP server, you need to have a Variflight API key. You can get it from [here](https://mcp.variflight.com).\n\n## Installation\n\n```json\n{\n    \"mcpServers\": {\n        \"variflight\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"-y\",\n                \"@variflight-ai/variflight-mcp\"\n            ],\n            \"env\": {\n                \"VARIFLIGHT_API_KEY\": \"your_api_key_here\"\n            }\n        }\n    }\n}\n```\n\n## Available Tools\n\n### 1. Search Flights by Departure and Arrival\nSearch flights between airports using IATA codes:\n```typescript\nsearchFlightsByDepArr({\n  dep: \"PEK\",  // Beijing\n  arr: \"SHA\",  // Shanghai\n  date: \"2024-03-20\"\n})\n```\n\n### 2. Search Flights by Number\nSearch flights using flight number:\n```typescript\nsearchFlightsByNumber({\n  fnum: \"MU2157\",\n  date: \"2024-03-20\"\n})\n```\n\n### 3. Get Flight Transfer Information\nFind transfer options between cities:\n```typescript\ngetFlightTransferInfo({\n  depcity: \"BJS\",\n  arrcity: \"LAX\",\n  depdate: \"2024-03-20\"\n})\n```\n\n### 4. Flight Happiness Index\nGet detailed flight comfort metrics:\n```typescript\nflightHappinessIndex({\n  fnum: \"MU2157\",\n  date: \"2024-03-20\"\n})\n```\n\n### 5. Real-time Aircraft Location\nTrack aircraft location using registration number:\n```typescript\ngetRealtimeLocationByAnum({\n  anum: \"B2021\"\n})\n```\n\n### 6. Airport Weather Forecast\nGet 3-day weather forecast for airports:\n```typescript\ngetFutureWeatherByAirport({\n  airport: \"PEK\"\n})\n```\n\n### 7. Search Flight Itineraries\nSearch for purchasable flight options and get the lowest prices:\n```typescript\nsearchFlightItineraries({\n  depCityCode: \"BJS\",  // Beijing\n  arrCityCode: \"SHA\",  // Shanghai\n  depDate: \"2025-04-20\"\n})\n```\n\n## License\n\nISC License - See [LICENSE](LICENSE) for details.\n\n## Author\n\nVariflight (https://mcp.variflight.com)\n\n## Version\n\nCurrent version: 0.0.2\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "variflight",
        "mcp",
        "planning",
        "variflight mcp",
        "data variflight",
        "variflight variflight"
      ],
      "category": "weather-and-location-data"
    },
    "webdevtodayjason--slim-MCP": {
      "owner": "webdevtodayjason",
      "name": "slim-MCP",
      "url": "https://github.com/webdevtodayjason/slim-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/webdevtodayjason.webp",
      "description": "Modular API service that integrates various tools for AI agents and automated workflows, featuring functions for weather updates, task management, and email sending through a consistent RESTful interface.",
      "stars": 1,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-20T02:26:55Z",
      "readme_content": "# Slim-MCP: Claude Tools 🤖\n\n[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![GitHub stars](https://img.shields.io/github/stars/webdevtodayjason/slim-MCP?style=social)](https://github.com/webdevtodayjason/slim-MCP/stargazers)\n[![Twitter Follow](https://img.shields.io/twitter/follow/webdevtodayjason?style=social)](https://twitter.com/webdevtodayjason)\n\n> 🚀 Supercharge Claude with powerful Python-based tools via the MCP protocol\n\n## ✨ Features\n\n- 🧮 **Calculator**: Perform complex math calculations\n- 🌦️ **Weather**: Get current weather forecasts and alerts\n- 🕒 **DateTime**: Access current time in local and UTC formats\n- 🔌 **Extensible**: Easily add custom tools with simple Python functions\n- 💻 **Desktop Integration**: Seamless integration with Claude Desktop app\n- 🖱️ **Cursor IDE**: Native integration with Cursor IDE for developers\n\n## 📋 Table of Contents\n\n- [Installation](#-installation)\n- [Usage](#-usage)\n- [Integrations](#-integrations)\n- [Development](#-development)\n- [Contributing](#-contributing)\n- [License](#-license)\n\n## 🚀 Installation\n\n### Prerequisites\n\n- Python 3.11+\n- Conda (recommended)\n\n### Setup with Conda (Recommended)\n\n```bash\n# Create conda environment with Python 3.11\nconda create -n mcp-tools python=3.11\n\n# Activate environment\nconda activate mcp-tools\n\n# Clone the repository\ngit clone https://github.com/webdevtodayjason/slim-MCP.git\ncd slim-MCP\n\n# Install with uv (preferred)\nuv pip install -e .\n\n# OR install with standard pip\npip install -e .\n```\n\n## 🎮 Usage\n\n### Configure Claude\n\nAdd this to your Claude configuration file:\n\n```json\n{\n    \"mcpServers\": {\n        \"claude-tools\": {\n            \"command\": \"/path/to/conda/envs/mcp-tools/bin/python\",\n            \"args\": [\"-m\", \"claude_tools.main\"]\n        }\n    }\n}\n```\n\n### Configure Cursor IDE\n\n```\nNAME: claude-tools\nTYPE: command\nCOMMAND: /path/to/conda/envs/mcp-tools/bin/python -m claude_tools.main\n```\n\n### Example Prompts\n\n```\nCan you calculate 25^3 + sqrt(196)?\n\nWhat's the current time in UTC?\n\nWhat's the weather like in Austin, TX?\n```\n\n## 🔌 Integrations\n\n- **Claude AI Desktop**: Primary integration via MCP protocol\n- **Cursor IDE**: Direct integration for development workflows\n- **Claude Web**: Compatible with Claude Web through configuration\n\n## 💻 Development\n\n### Project Structure\n\n```\nslim-MCP/\n├── src/\n│   └── claude_tools/\n│       ├── __init__.py\n│       ├── calculator.py     # Math calculation tool\n│       ├── datetime_tool.py  # Date and time utilities\n│       ├── main.py           # Entry point\n│       └── weather.py        # Weather forecasting tool\n├── http_server.py            # HTTP server for MCP\n├── pyproject.toml            # Project configuration\n├── .gitignore                # Git ignore file\n└── LICENSE                   # MIT License\n```\n\n### Creating a New Tool\n\n1. Create a new Python file in `src/claude_tools/`:\n\n```python\n# src/claude_tools/my_tool.py\ndef my_awesome_function(param: str) -> str:\n    \"\"\"Description of what this tool does.\n    \n    Args:\n        param: Description of the parameter\n        \n    Returns:\n        A string with the result\n    \"\"\"\n    result = f\"Processed: {param}\"\n    return result\n    \ndef register_my_tools(mcp):\n    \"\"\"Register all my tools with the MCP server.\"\"\"\n    mcp.tool()(my_awesome_function)\n```\n\n2. Import and register your tool in `__init__.py`:\n\n```python\n# In src/claude_tools/__init__.py\nfrom .calculator import register_calculator_tools\nfrom .datetime_tool import register_datetime_tools\nfrom .weather import register_weather_tools\nfrom .my_tool import register_my_tools  # Add this line\n\ndef register_all_tools(mcp):\n    register_calculator_tools(mcp)\n    register_datetime_tools(mcp)\n    register_weather_tools(mcp)\n    register_my_tools(mcp)  # Add this line\n```\n\n3. Restart the server and your new tool is ready to use!\n\n## 👥 Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n---\n\n<p align=\"center\">\n  Made with ❤️ by <a href=\"https://github.com/webdevtodayjason\">Jason Brashear</a>\n</p>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "api",
        "webdevtodayjason",
        "modular",
        "modular api",
        "webdevtodayjason slim",
        "data webdevtodayjason"
      ],
      "category": "weather-and-location-data"
    },
    "wolkwork--knmi-mcp": {
      "owner": "wolkwork",
      "name": "knmi-mcp",
      "url": "https://github.com/wolkwork/knmi-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/wolkwork.webp",
      "description": "Fetches real-time weather data from KNMI weather stations in the Netherlands, providing measurements such as temperature, humidity, wind speed, precipitation, visibility, and air pressure. Supports natural language interpretation for understanding weather conditions and includes a location search feature.",
      "stars": 3,
      "forks": 6,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-27T14:36:32Z",
      "readme_content": "# KNMI Weather MCP\n\nA FastMCP server that provides real-time weather data from KNMI (Royal Netherlands Meteorological Institute) weather stations. This application fetches the latest 10-minute measurements from the nearest weather station to any location in the Netherlands.\n\n<a href=\"https://glama.ai/mcp/servers/xanerdcjsm\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/xanerdcjsm/badge\" alt=\"KNMI Weather MCP server\" />\n</a>\n\n## Features\n\n- Get weather data for any location in the Netherlands\n- Automatically finds the nearest KNMI weather station\n- Provides real-time measurements including:\n  - Temperature\n  - Humidity\n  - Wind speed and direction\n  - Precipitation\n  - Visibility\n  - Air pressure\n- Natural language interpretation of weather conditions\n- Location search functionality\n- Detailed logging\n\n## Prerequisites\n\n- Python 3.10 or higher\n- KNMI API Key (get one from [KNMI Data Platform](https://dataplatform.knmi.nl/))\n- `uv` package manager\n\n## Installation\n\n1. Clone the repository:\n\n   ```bash\n   git clone <repository-url>\n   cd knmi-mcp\n   ```\n\n2. Create a `.env` file in the project root:\n   ```bash\n   KNMI_API_KEY=your_api_key_here\n   ```\n\n## Running the Server\n\n### Using Claude AI\n\nTo use this application with Claude AI, run the following command in the folder of the project:\n\n```bash\nuv run fastmcp install src/knmi_weather_mcp/server.py\n```\n\nThis will add the following configuration to your Claude configuration file (typically located at `~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n    \"KNMI Weather\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--with\",\n        \"fastmcp\",\n        \"--with\",\n        \"httpx\",\n        \"--with\",\n        \"netCDF4\",\n        \"--with\",\n        \"numpy\",\n        \"--with\",\n        \"pandas\",\n        \"--with\",\n        \"pydantic\",\n        \"--with\",\n        \"python-dotenv\",\n        \"--with\",\n        \"xarray\",\n        \"fastmcp\",\n        \"run\",\n        \"/Users/<username>/<git location>/knmi-mcp/src/knmi_weather_mcp/server.py\"\n      ]\n    }\n}\n```\n\nNote: If you see an error like this:\n\n```\nspawn uv ENOENT\n```\n\nReplace the `uv` command with the full path to the `uv` command. On *nix systems this can be found with the command `which uv`.\n\n\n### Manual Running\n\nFor development or standalone usage:\n\n```bash\nuv run fastmcp run src/knmi_weather_mcp/server.py\n```\n\n## Available Tools\n\n### 1. what_is_the_weather_like_in\n\nGet a natural language interpretation of current weather conditions for any location in the Netherlands.\n\nExample:\n\n```python\nawait what_is_the_weather_like_in(\"Amsterdam\")\n```\n\n### 2. get_location_weather\n\nGet raw weather data for a location.\n\nExample:\n\n```python\nawait get_location_weather(\"Rotterdam\")\n```\n\n### 3. search_location\n\nSearch for locations in the Netherlands.\n\nExample:\n\n```python\nawait search_location(\"Utrecht\")\n```\n\n### 4. get_nearest_station\n\nFind the nearest KNMI weather station to given coordinates.\n\nExample:\n\n```python\nawait get_nearest_station(52.3676, 4.9041)\n```\n\n## Logging\n\nThe application logs are stored in the `logs/knmi_weather.log` file, providing detailed information about:\n\n- API requests and responses\n- Weather data processing\n- Error messages\n- Debug information\n\n## Data Sources\n\nThis application uses the KNMI Data Platform API to fetch data from the \"Actuele10mindataKNMIstations\" dataset, which provides 10-minute interval measurements from all KNMI weather stations in the Netherlands.\n\n## Error Handling\n\nThe application includes robust error handling for:\n\n- Invalid locations\n- API authentication issues\n- Network problems\n- Data parsing errors\n- Missing measurements",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "knmi",
        "weather",
        "precipitation",
        "knmi weather",
        "weather data",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "wpnbos--buienradar-mcp-server": {
      "owner": "wpnbos",
      "name": "buienradar-mcp-server",
      "url": "https://github.com/wpnbos/buienradar-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/wpnbos.webp",
      "description": "Fetches precipitation forecasts for specified latitude and longitude using Buienradar, providing data for the next two hours.",
      "stars": 0,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-02-17T19:10:22Z",
      "readme_content": "# Buienradar MCP Server\n[![smithery badge](https://smithery.ai/badge/@wpnbos/buienradar-mcp-server)](https://smithery.ai/server/@wpnbos/buienradar-mcp-server)\n\n## Overview\n\nThis is an MCP server that fetches precipitation data for a given latitude and longitude using Buienradar. It exposes a single MCP tool, `get_precipitation_for`, which provides precipitation forecasts for the next two hours.\n\n### Installing via Smithery\n\nTo install Buienradar MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@wpnbos/buienradar-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @wpnbos/buienradar-mcp-server --client claude\n```\n\n## Configuration\n\nFirst, make sure you have `uv` (and Python) installed.\n\nTo integrate this server with `Claude for Desktop`, update your configuration file at:\n\nMacOS/Linux\n```\n~/Library/Application Support/Claude/claude_desktop_config.json\n```\n\nWindows\n```\ncode $env:AppData\\Claude\\claude_desktop_config.json\n```\n\nExample configuration:\n\n```json\n{\n    \"mcpServers\": {\n        \"precipitation\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/buienradar-mcp-server\",\n                \"run\",\n                \"server.py\"\n            ]\n        }\n    }\n}\n```\n\nReplace `/ABSOLUTE/PATH/TO/PARENT/FOLDER/buienradar-mcp-server` with the actual path where your server is located.\n\nRestart Claude for Desktop for the tool to become available.\n\nYou might have to provide the full path for `uv` instead of just `uv`.\nTo find the full path for your `uv` executable, on MacOS/Linux execute `which uv`.\n\n## Usage\n\nIf all went well, you should be able to ask Claude about any upcoming precipitation.\n\n```\n> Will there be any rain soon in Amsterdam?\n\n> No rain predicted in Amsterdam for the next 2 hours.\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "forecasts",
        "precipitation",
        "buienradar",
        "wpnbos buienradar",
        "precipitation forecasts",
        "fetches precipitation"
      ],
      "category": "weather-and-location-data"
    },
    "xixilidao--osgearth": {
      "owner": "xixilidao",
      "name": "osgearth",
      "url": "https://github.com/xixilidao/osgearth",
      "imageUrl": "/freedevtools/mcp/pfp/xixilidao.webp",
      "description": "Add geospatially accurate 3D maps to C++ applications, enabling developers to integrate and display complex geographical data visually.",
      "stars": 0,
      "forks": 0,
      "license": "Other",
      "language": "",
      "updated_at": "2024-10-07T03:14:53Z",
      "readme_content": "![Windows](https://github.com/gwaldron/osgearth/actions/workflows/windows.yml/badge.svg)\n![Linux](https://github.com/gwaldron/osgearth/actions/workflows/linux.yml/badge.svg)\n![OSX](https://github.com/gwaldron/osgearth/actions/workflows/macos.yml/badge.svg)\n\n\n## Welcome to osgEarth!\n\nosgEarth adds geospatially accurate 3D maps to your C++ application.\n\n<img src=\"https://github.com/user-attachments/assets/a0b1c650-442a-4e6d-88e6-42a5c92083b8\" width=\"200\" height=\"140\"/>\n<img src=\"https://github.com/user-attachments/assets/08d0f8c0-49e1-41a8-8b97-d663337f1cbb\" width=\"200\" height=\"140\"/>\n<img src=\"https://github.com/user-attachments/assets/575315e1-e2ae-43ec-8a97-83bafcfa9131\" width=\"200\" height=\"140\"/>\n<img src=\"https://github.com/user-attachments/assets/24971c79-f93c-48eb-ab79-161bb35beae4\" width=\"200\" height=\"140\"/>\n<img src=\"https://github.com/user-attachments/assets/cf40e4a9-429d-4cac-9464-f9825149e7f2\" width=\"200\" height=\"140\"/>\n<img src=\"https://github.com/user-attachments/assets/1cd49290-9b2d-42ec-a8c3-9c1c38eb673c\" width=\"200\" height=\"140\"/>\n<img src=\"https://github.com/user-attachments/assets/bfd869fd-32b5-48b5-a037-4951f812b757\" width=\"200\" height=\"140\"/>\n<img src=\"https://github.com/user-attachments/assets/1876fffb-e683-4fa9-9521-cdd9795dea85\" width=\"200\" height=\"140\"/>\n\nosgEarth builds on trusted open source technologies like OpenSceneGraph and GDAL to give you high-performance, accurate terrain and map rendering. It supports a myriad of geospatial data formats and map projections.\n\n## Install the SDK\n\nWindows users can install the latest version of osgEarth through `vcpkg`:\n```bat\ngit clone https://github.com/microsoft/vcpkg.git\ncd vcpkg && bootstrap-vcpkg.bat\nvcpkg install osgearth:x64-windows\n```\nThis will take a while the first time as vcpkg builds osgEarth and its dependencies.\n\n## Check out some examples\n\n`osgearth_imgui` is the main command-line viewer. `osgearth_viewer` is a stripped-down viewer without any GUI.\nBoth of these read \"earth files\", XML files that describe the contents of a map.\n\nYou can find example earth files in the `tests` folder of the repo.\n\n```bat\n:: Online imagery and elevation:\nosgearth_imgui tests\\readymap.earth\n\n:: OpenStreetMap:\nosgearth_imgui tests\\osm.earth\n\n:: Local GeoTIFFs:\nosgearth_imgui tests\\simple.earth \n```\n\n## Integrate it into your project\n\nCMakeLists.txt\n```cmake\ncmake_minimum_required(VERSION 3.20)\nproject(myApp)\nfind_package(osgEarth CONFIG REQUIRED)\nadd_executable(myApp main.cpp)\ntarget_link_libraries(myApp PRIVATE osgEarth::osgEarth)\ninstall(TARGETS myApp RUNTIME DESTINATION bin)\n```\nmain.cpp\n```c++\n#include <osgEarth/MapNode>\n#include <osgEarth/TMS>\n#include <osgEarth/EarthManipulator>\n#include <osg/ArgumentParser>\n#include <osgViewer/Viewer>\n\nint main(int argc, char** argv)\n{\n    osgEarth::initialize();\n    \n    osg::ArgumentParser args(&argc, argv);\n    osgViewer::Viewer viewer(args);\n    \n    auto imagery = new osgEarth::TMSImageLayer();\n    imagery->setURL(\"https://readymap.org/readymap/tiles/1.0.0/7/\");\n    \n    auto mapNode = new osgEarth::MapNode();\n    mapNode->getMap()->addLayer(imagery);\n    \n    viewer.setSceneData(mapNode);\n    viewer.setCameraManipulator(new osgEarth::EarthManipulator(args));\n    \n    return viewer.run();\n}\n```\n\n## Resources\n\n* [Documentation](http://docs.osgearth.org/en/latest/)\n* [Gallery](https://www.pelicanmapping.com/home-1/opensource)\n* [Custom Software Development](https://www.pelicanmapping.com/software)\n\n---\n© Copyright [Pelican Mapping](http://pelicanmapping.com)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "maps",
        "geospatially",
        "3d",
        "geographical data",
        "maps applications",
        "3d maps"
      ],
      "category": "weather-and-location-data"
    },
    "xuezhijian--mcp_weather": {
      "owner": "xuezhijian",
      "name": "mcp_weather",
      "url": "https://github.com/xuezhijian/mcp_weather",
      "imageUrl": "/freedevtools/mcp/pfp/xuezhijian.webp",
      "description": "Provides real-time weather forecasts and city information queries, allowing access to up-to-date weather data for the next 24 hours using city names or geographic coordinates.",
      "stars": 2,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-21T23:51:17Z",
      "readme_content": "# Weather MCP Server\n\n一个提供天气预报和城市信息查询功能的Model Context Protocol服务器。该服务器允许LLMs获取未来24小时的天气信息，并支持通过城市名称、经纬度等方式查询城市信息。\n\n### 可用工具\n\n- `get_24h_weather` - 获取未来24小时的天气预报。\n  - 必需参数：\n    - `location` (string): 城市名称或经纬度（例如，北京或116.41,39.92）\n\n## 安装\n\n### 使用uv（推荐）\n\n使用[`uv`](https://docs.astral.sh/uv/)时无需特定安装。我们将使用[`uvx`](https://docs.astral.sh/uv/guides/tools/)直接运行*mcp-server-weather*。\n\n### 使用PIP\n\n或者，你可以通过pip安装`mcp-server-weather`：\n\n```bash\npip install mcp-server-weather\n```\n\n安装后，你可以使用以下命令作为脚本运行：\n\n```bash\npython -m mcp_server_weather\n```\n\n## 配置\n\n### 配置Claude.app\n\n在Claude设置中添加：\n\n<details>\n<summary>使用uvx</summary>\n\n```json\n\"mcpServers\": {\n  \"weather\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-weather\"]\n  }\n}\n```\n</details>\n\n<details>\n<summary>使用docker</summary>\n\n```json\n\"mcpServers\": {\n  \"weather\": {\n    \"command\": \"docker\",\n    \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/weather\"]\n  }\n}\n```\n</details>\n\n<details>\n<summary>使用pip安装</summary>\n\n```json\n\"mcpServers\": {\n  \"weather\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_weather\"]\n  }\n}\n```\n</details>\n\n### 配置Zed\n\n在Zed的settings.json中添加：\n\n<details>\n<summary>使用uvx</summary>\n\n```json\n\"context_servers\": [\n  \"mcp-server-weather\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-weather\"]\n  }\n],\n```\n</details>\n\n<details>\n<summary>使用pip安装</summary>\n\n```json\n\"context_servers\": {\n  \"mcp-server-weather\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_weather\"]\n  }\n},\n```\n</details>\n\n## 示例交互\n\n1. 获取未来24小时天气：\n```json\n{\n  \"name\": \"get_24h_weather\",\n  \"arguments\": {\n    \"location\": \"广州 天河\"\n  }\n}\n```\n响应：\n```json\n{\n  \"location\": \"广州 天河\",\n  \"forecast\": \"未来24小时的天气信息...\"\n}\n```\n\n## 调试\n\n你可以使用MCP inspector来调试服务器。对于uvx安装：\n\n```bash\nnpx @modelcontextprotocol/inspector uvx mcp-server-weather\n```\n\n或者如果你在特定目录中安装了包或正在开发：\n\n```bash\ncd path/to/servers/src/weather\nnpx @modelcontextprotocol/inspector uv run mcp-server-weather\n```\n\n## 构建\n\nDocker 构建:\n\n```bash\ndocker build -t mcp/weather .\n```\n\n## 贡献\n\n我们鼓励对mcp-server-weather的贡献，以帮助扩展和改进其功能。无论是添加新的天气相关工具、增强现有功能，还是改进文档，你的输入都很有价值。\n\n有关其他MCP服务器和实现模式的示例，请参见：\nhttps://github.com/modelcontextprotocol/servers\n\n欢迎提交拉取请求！随时贡献新想法、错误修复或增强功能，以使mcp-server-weather更加强大和实用。\n\n## 许可证\n\nmcp-server-weather根据MIT许可证授权。这意味着你可以自由使用、修改和分发软件，但需遵守MIT许可证的条款和条件。有关详细信息，请参阅项目存储库中的LICENSE文件。\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_weather",
        "weather",
        "forecasts",
        "xuezhijian mcp_weather",
        "mcp_weather provides",
        "weather data"
      ],
      "category": "weather-and-location-data"
    },
    "yoyooyooo--mcp-weather-server": {
      "owner": "yoyooyooo",
      "name": "mcp-weather-server",
      "url": "https://github.com/yoyooyooo/mcp-weather-server",
      "imageUrl": "/freedevtools/mcp/pfp/yoyooyooo.webp",
      "description": "Provides real-time weather data and forecasts for any location using the 和风天气 (QWeather) API. Offers current conditions, hourly forecasts, and city information with customizable options for units and language.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-13T11:21:05Z",
      "readme_content": "[English](README.md) | [中文](README.zh.md)\n\n# Weather API MCP Server\n\nA Model Context Protocol (MCP) server implementation for weather information, providing current weather data and forecasts using the 和风天气 (QWeather) API.\n\n## Features\n\n- **Current Weather**: Get current weather data for any location\n- **Weather Forecast**: Get 3-day to 30-day weather forecasts\n- **Hourly Forecast**: Get 24-hour weather forecasts\n- **City Lookup**: Look up city information and IDs for more precise weather data\n- **Customizable Options**: Configure units, language, and additional details\n- **Powered by QWeather**: Integrates with the 和风天气 (QWeather) API for accurate weather data\n\n## Installation\n\n```bash\nnpm install mcp-weather-api\n```\n\nOr use it directly with npx:\n\n```bash\nnpx mcp-weather-api\n```\n\n## API Reference\n\n### Weather Tools\n\nThe server provides four weather tools that can be called through MCP:\n\n#### 1. Get Current Weather\n\n```typescript\n// Tool name: getWeather\n{\n  location: \"New York, NY\",  // Can be city name, coordinates like \"119.98,30.24\", or QWeather location ID\n  options: {\n    units: \"metric\",        // \"metric\" (Celsius) or \"imperial\" (Fahrenheit)\n    language: \"en\",         // Language code (en, zh, etc.)\n  }\n}\n```\n\n#### 2. Get Weather Forecast\n\n```typescript\n// Tool name: getWeatherForecast\n{\n  location: \"London, UK\",   // Can be city name, coordinates like \"119.98,30.24\", or QWeather location ID\n  options: {\n    units: \"imperial\",      // \"metric\" (Celsius) or \"imperial\" (Fahrenheit)\n    days: 3,                // Supports 3, 7, 10, 15, or 30 days\n    language: \"en\"          // Language code (en, zh, etc.)\n  }\n}\n```\n\n#### 3. Get Hourly Weather Forecast\n\n```typescript\n// Tool name: getHourlyWeather\n{\n  location: \"Tokyo, Japan\", // Can be city name, coordinates like \"119.98,30.24\", or QWeather location ID\n  options: {\n    units: \"metric\",        // \"metric\" (Celsius) or \"imperial\" (Fahrenheit)\n    hours: 24,              // Number of hours (default: 24, max: 24)\n    language: \"ja\"          // Language code (en, zh, ja, etc.)\n  }\n}\n```\n\n#### 4. City Lookup\n\n```typescript\n// Tool name: lookupCity\n{\n  location: \"Beijing\",      // City name or coordinates like \"119.98,30.24\"\n  options: {\n    language: \"en\"          // Language code (en, zh, etc.)\n  }\n}\n```\n\n### Weather Options\n\nCurrent weather tool options:\n\n```typescript\ninterface WeatherOptions {\n  units?: \"metric\" | \"imperial\"; // Temperature units (default: metric)\n  language?: string; // Response language code\n}\n```\n\nForecast tool options:\n\n```typescript\ninterface ForecastOptions {\n  units?: \"metric\" | \"imperial\"; // Temperature units (default: metric)\n  days?: number; // Number of days (default: 3)\n  language?: string; // Response language code\n}\n```\n\nHourly forecast tool options:\n\n```typescript\ninterface HourlyForecastOptions {\n  units?: \"metric\" | \"imperial\"; // Temperature units (default: metric)\n  hours?: number; // Number of hours (default: 24, max: 24)\n  language?: string; // Response language code\n}\n```\n\nCity lookup tool options:\n\n```typescript\ninterface CityLookupOptions {\n  language?: string; // Response language code\n}\n```\n\n## Response Format\n\nAll tools return responses in the following format:\n\n```typescript\n{\n  content: Array<{\n    type: \"text\";\n    text: string;\n  }>;\n}\n```\n\n### Sample Responses\n\n#### Current Weather Response\n\n```\nWeather for New York:\n\nObservation Time: 2023-11-15T12:30+08:00\nCurrent Conditions: Partly Cloudy (Icon: 101)\nTemperature: 18.5°C\nFeels Like: 19.2°C\n\nWind Information:\n- Direction: Northeast (45°)\n- Scale: 3\n- Speed: 15 km/h\n\nOther Information:\n- Humidity: 65%\n- Precipitation: 0.0 mm\n- Pressure: 1013 hPa\n- Visibility: 25 km\n- Cloud Cover: 30%\n- Dew Point: 12.1°C\n\nUpdated: 2023-11-15T12:35+08:00\n\nData Sources: QWeather\nLicense: QWeather Developers License\n```\n\n#### Weather Forecast Response\n\n```\nWeather Forecast for London:\n\n2023-11-15:\nTime Information:\n- Sunrise: 07:12, Sunset: 16:30\n- Moonrise: 15:40, Moonset: 03:25\n- Moon Phase: Waxing Gibbous (Icon: 802)\n\nDay Weather:\n- Conditions: Rain (Icon: 305)\n- Temperature Range: 12.0°F / 7.0°F\n- Wind: Northwest (315°)\n- Wind Scale: 3, Speed: 18 km/h\n\nNight Weather:\n- Conditions: Cloudy (Icon: 101)\n- Wind: North (0°)\n- Wind Scale: 2, Speed: 10 km/h\n\nOther Information:\n- Humidity: 75%\n- Precipitation: 5.2 mm\n- Pressure: 1008 hPa\n- Visibility: 10 km\n- Cloud Cover: 85%\n- UV Index: 2\n\n...additional days...\n\nData Sources: QWeather\nLicense: QWeather Developers License\n```\n\n#### City Lookup Response\n\n```\nLocation Information:\n\n1. Beijing (ID: 101010100)\n   Location: 39.90499, 116.40529\n   Region: Beijing, Beijing, China\n   Timezone: Asia/Shanghai (UTC +8.0)\n   Type: city, Rank: 10\n\n2. Beijing Shi (ID: 101010000)\n   Location: 39.90998, 116.40529\n   Region: Beijing, Beijing, China\n   Timezone: Asia/Shanghai (UTC +8.0)\n   Type: city, Rank: 10\n\nNote: Use the ID (e.g., \"101010100\") in other weather tools to get weather information for this location.\n\nData Sources: QWeather\nLicense: QWeather Developers License\n```\n\n## Usage with MCP\n\nAdd the Weather MCP server to your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"weather\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-weather-api\"]\n    }\n  }\n}\n```\n\n## QWeather API\n\nThis server uses the 和风天气 (QWeather) API to fetch weather data. The API key is included in the package for demo purposes. For production use, you should obtain your own API key from [QWeather](https://dev.qweather.com/).\n\n### API Endpoints Used\n\n1. **Current Weather** - `/weather/now`\n\n   - Returns the current weather conditions\n   - Response includes a `now` object with temperature, humidity, etc.\n   - [API Documentation](https://dev.qweather.com/docs/api/weather/weather-now/)\n\n2. **Weather Forecast** - `/weather/3d`, `/weather/7d`, `/weather/10d`, `/weather/15d`, `/weather/30d`\n\n   - Returns weather forecast for different periods\n   - Response includes a `daily` array with daily forecast data\n   - [API Documentation](https://dev.qweather.com/docs/api/weather/weather-daily-forecast/)\n\n3. **Hourly Weather Forecast** - `/weather/24h`\n\n   - Returns hourly weather forecast for the next 24 hours\n   - Response includes an `hourly` array with hourly forecast data\n   - [API Documentation](https://dev.qweather.com/docs/api/weather/weather-hourly-forecast/)\n\n4. **City Lookup** - `/city/lookup`\n   - Looks up city information by name or coordinates\n   - Returns city IDs and other location information\n   - [API Documentation](https://dev.qweather.com/docs/api/geoapi/city-lookup/)\n\n### API Response Structure\n\n#### Current Weather (`/weather/now`)\n\n```json\n{\n  \"code\": \"200\",\n  \"updateTime\": \"2021-11-15T16:35+08:00\",\n  \"now\": {\n    \"temp\": \"22.5\",\n    \"humidity\": \"65\",\n    \"text\": \"Partly cloudy\",\n    \"windSpeed\": \"10.2\",\n    \"windDir\": \"East\",\n    \"feelsLike\": \"24.0\",\n    \"pressure\": \"1012\",\n    \"vis\": \"10\",\n    \"cloud\": \"30\",\n    \"dew\": \"15.5\"\n  }\n}\n```\n\n#### Weather Forecast (`/weather/3d`)\n\n```json\n{\n  \"code\": \"200\",\n  \"updateTime\": \"2021-11-15T16:35+08:00\",\n  \"fxLink\": \"http://hfx.link/2ax1\",\n  \"daily\": [\n    {\n      \"fxDate\": \"2021-11-15\",\n      \"sunrise\": \"06:58\",\n      \"sunset\": \"16:59\",\n      \"moonrise\": \"15:16\",\n      \"moonset\": \"03:40\",\n      \"moonPhase\": \"盈凸月\",\n      \"moonPhaseIcon\": \"803\",\n      \"tempMax\": \"12\",\n      \"tempMin\": \"-1\",\n      \"iconDay\": \"101\",\n      \"textDay\": \"多云\",\n      \"iconNight\": \"150\",\n      \"textNight\": \"晴\",\n      \"wind360Day\": \"45\",\n      \"windDirDay\": \"东北风\",\n      \"windScaleDay\": \"1-2\",\n      \"windSpeedDay\": \"3\",\n      \"wind360Night\": \"0\",\n      \"windDirNight\": \"北风\",\n      \"windScaleNight\": \"1-2\",\n      \"windSpeedNight\": \"3\",\n      \"humidity\": \"65\",\n      \"precip\": \"0.0\",\n      \"pressure\": \"1020\",\n      \"vis\": \"25\",\n      \"cloud\": \"4\",\n      \"uvIndex\": \"3\"\n    }\n    // Additional days...\n  ]\n}\n```\n\n#### Hourly Weather Forecast (`/weather/24h`)\n\n```json\n{\n  \"code\": \"200\",\n  \"updateTime\": \"2021-11-15T16:35+08:00\",\n  \"fxLink\": \"http://hfx.link/2ax1\",\n  \"hourly\": [\n    {\n      \"fxTime\": \"2021-11-15T17:00+08:00\",\n      \"temp\": \"11\",\n      \"icon\": \"150\",\n      \"text\": \"晴\",\n      \"wind360\": \"335\",\n      \"windDir\": \"西北风\",\n      \"windScale\": \"3-4\",\n      \"windSpeed\": \"20\",\n      \"humidity\": \"73\",\n      \"pop\": \"7\",\n      \"precip\": \"0.0\",\n      \"pressure\": \"1013\",\n      \"cloud\": \"10\",\n      \"dew\": \"7\"\n    }\n    // Additional hours...\n  ]\n}\n```\n\n#### City Lookup (`/city/lookup`)\n\n```json\n{\n  \"code\": \"200\",\n  \"location\": [\n    {\n      \"name\": \"Beijing\",\n      \"id\": \"101010100\",\n      \"lat\": \"39.90499\",\n      \"lon\": \"116.40529\",\n      \"adm2\": \"Beijing\",\n      \"adm1\": \"Beijing\",\n      \"country\": \"China\",\n      \"tz\": \"Asia/Shanghai\",\n      \"utcOffset\": \"+08:00\",\n      \"isDst\": \"0\",\n      \"type\": \"city\",\n      \"rank\": \"10\",\n      \"fxLink\": \"http://hfx.link/2ax1\"\n    }\n    // Additional locations...\n  ]\n}\n```\n\n## Configuration\n\nYou can configure various options through environment variables:\n\n```bash\n# API Configuration\nexport QWEATHER_API_KEY=your-api-key\nexport QWEATHER_API_URL=https://devapi.qweather.com/v7\nexport QWEATHER_GEO_API_URL=https://geoapi.qweather.com/v2\nexport WEATHER_DEFAULT_LOCATION=101010100  # Default location code or coordinates\n\n# Default Options\nexport WEATHER_DEFAULT_UNITS=metric     # or 'imperial'\nexport WEATHER_DEFAULT_LANGUAGE=en      # language code\nexport WEATHER_INCLUDE_DETAILS=true     # or 'false'\nexport WEATHER_FORECAST_DAYS=3          # number of days (max 30)\n```\n\nOr in your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"weather\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-weather-api\"],\n      \"env\": {\n        \"QWEATHER_API_KEY\": \"your-api-key\",\n        \"QWEATHER_API_URL\": \"https://devapi.qweather.com/v7\",\n        \"QWEATHER_GEO_API_URL\": \"https://geoapi.qweather.com/v2\",\n        \"WEATHER_DEFAULT_LOCATION\": \"101010100\",\n        \"WEATHER_DEFAULT_UNITS\": \"imperial\",\n        \"WEATHER_DEFAULT_LANGUAGE\": \"zh\",\n        \"WEATHER_INCLUDE_DETAILS\": \"true\",\n        \"WEATHER_FORECAST_DAYS\": \"7\"\n      }\n    }\n  }\n}\n```\n\n## Location Formats\n\nYou can specify locations in three formats:\n\n1. **City name**: e.g., \"New York\", \"London\", \"Beijing\"\n2. **Coordinates**: e.g., \"119.98,30.24\" (longitude,latitude)\n3. **QWeather location ID**: e.g., \"101010100\" (Beijing)\n\nWhen using coordinates, the format must be `longitude,latitude` (e.g., \"119.98,30.24\"), which will be passed directly to the QWeather API.\n\nUse the `lookupCity` tool to find the appropriate location ID for more precise targeting.\n\n### China City Location Codes\n\nFor Chinese cities, you can use the QWeather location ID which provides more precise location targeting. The complete list of Chinese city codes can be found in the [QWeather LocationList repository](https://github.com/qwd/LocationList/blob/master/China-City-List-latest.csv).\n\nThis CSV file contains location IDs for Chinese cities in the format:\n\n## Development\n\n### Prerequisites\n\n- Node.js 16 or higher\n- npm or yarn\n\n### Setup\n\n1. Clone the repository\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n### Building\n\n```bash\nnpm run build\n```\n\n### Running in Development\n\n```bash\nnpm run dev\n```\n",
      "npm_url": "https://www.npmjs.com/package/mcp-weather-server",
      "npm_downloads": 362,
      "keywords": [
        "weather",
        "yoyooyooo",
        "forecasts",
        "weather server",
        "weather data",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "yting27--weather-my-mcp": {
      "owner": "yting27",
      "name": "weather-my-mcp",
      "url": "https://github.com/yting27/weather-my-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/yting27.webp",
      "description": "Retrieve real-time weather forecasts, flood warnings, and earthquake reports from Malaysia's official open data portal, providing reliable environmental data and hazard alerts.",
      "stars": 1,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-05-02T09:57:33Z",
      "readme_content": "# Weather MCP Server\n\nA basic Model Context Protocol (MCP) server that provides weather information retrieved from Open API of Malaysia's official open data portal. This server enables LLMs to get weather forecast, warnings, water level associated with flood, and earthquake reports.\n\n<a href=\"https://glama.ai/mcp/servers/@yting27/weather-my-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@yting27/weather-my-mcp/badge\" alt=\"Weather MY MCP server\" />\n</a>\n\nAPI Documentation: [data.gov.my](https://developer.data.gov.my/)\n\n## Components\n\n### Tools\n\n1. get_water_level_condition\n    - Retrieve the water level conditions associated with flood warnings for a specified district or state.\n        If both district and state are provided, the district takes precedence.\n        If district or state is not specified, use an empty string for that field.\n\n    - Args:\n        - district: The name of the district within the specified state for which to retrieve flood warning conditions.\n        - state: The name of the state in Malaysia for which to retrieve flood warning conditions.\n\n2. get_warning\n    - Retrieve general weather warnings issued within a specified date range.\n\n    - Args:\n        - datetime_start: The earliest timestamp in the form of `YYYY-MM-DD HH:MM:SS` (inclusive) from which to retrieve weather warnings. If omitted, defaults to the current date.\n        - datetime_end: The latest timestamp in the form of `YYYY-MM-DD HH:MM:SS` (inclusive) to stop retrieving the weather warnings. If omitted, defaults to the current date.\n\n3. get_weather_forecast\n    - Retrieve a weather forecast for a specific location within a given date range.\n\n    - Args:\n        - location_name: The name or identifier of the location for which the forecast is retrieved.\n        - date_start: The earliest date (inclusive) to begin retrieving the weather forecast. If omitted, defaults to the current date.\n        - date_end: The latest date (inclusive) to stop retrieving the weather forecast. If omitted, defaults to the current date.\n\n4. get_earthquake_news\n    - Fetch earthquake news for a given location within a specified date range.\n\n    - Args:\n        - location: Name or identifier of the place where the earthquake(s) occurred.\n        - date_start: The earliest date (inclusive) to start searching for earthquake news. If omitted, defaults to the current date.\n        - date_end: The latest date (inclusive) to stop searching for earthquake news. If omitted, defaults to the current date.\n\n## Claude Desktop configuration\n\nAdd the following into `claude_desktop_config.json` file. For more information, refer to [For Claude Desktop Users](https://modelcontextprotocol.io/quickstart/user).\n\n### Using `uv`\n\n```json\n{\n    \"mcpServers\": {\n        \"weather\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"weather-my-mcp\",\n                \"run\",\n                \"weather.py\"\n            ]\n        }\n    }\n}\n```\n\n### Using Docker\n\n1. Create docker image\n\n    ```bash\n    docker build . --tag weather-my-mcp\n    ```\n\n2. Edit `claude_desktop_config.json` file as follows:\n\n    ```json\n    {\n        \"mcpServers\": {\n            \"weather\": {\n                \"command\": \"docker\",\n                \"args\": [\n                    \"run\",\n                    \"-i\",\n                    \"--rm\",\n                    \"weather-my-mcp\"\n                ]\n            }\n        }\n    }\n    ```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "data",
        "malaysia",
        "forecasts",
        "location data",
        "weather forecasts",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "yunkee-lee--mcp-tmap": {
      "owner": "yunkee-lee",
      "name": "mcp-tmap",
      "url": "https://github.com/yunkee-lee/mcp-tmap",
      "imageUrl": "/freedevtools/mcp/pfp/yunkee-lee.webp",
      "description": "Connect to the TMAP API for public transit route information and location geocoding services. Retrieve transit routes and perform full text geocoding with ease.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-05-05T01:33:43Z",
      "readme_content": "# MCP TMAP\n\nThe MCP connects to the TMAP API.\n\nIt currently supports the following APIs:\n* [Public Transit API](https://openapi.sk.com/products/detail?svcSeq=59&menuSeq=394)\n  * Transit route\n* [Location API](https://openapi.sk.com/products/detail?svcSeq=4&menuSeq=10)\n  * Full text geocoding\n\n## Prerequisites\n\nBefore you begin, ensure you have the following installed:\n\n* **Python:** Version 3.13 or higher\n* **uv:** You can find installation instructions [here](https://github.com/astral-sh/uv).\n* **SK Open API:** You need API credentials (app key) from the [SK open API](https://openapi.sk.com/).\n\n## Configuration\n\n1. **Create a `.env` file:**  Create a file in the project root.\n\n2. **Add API Credentials:** Edit the `.env` file and add your SK open API credentials.\n    ```.env\n    SK_OPEN_API_APP_KEY=\"YOUR_APP_KEY_HERE\"\n    ```\n    Please verify the exact environment variable names required by checking `src/mcp_tmap/tmap_client.py`.\n\n## Running the MCP\n\n1. **Sync Dependencies:** Navigate to the project root directory in your terminal and run the following command. This will create a virtual environment (if one doesn't exist) and install all dependencies specified in `pyproject.toml`.\n    ```bash\n    uv sync\n    ```\n\n2. **Run:**: You can run the MCP server using `uv`.\n    ```bash\n    uv run src/mcp_tmap\n    ```\n\n    For development,\n    ```bash\n    source .venv/bin/activate\n    mcp dev src/mcp_tmap/server.py\n    ```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tmap",
        "geocoding",
        "transit",
        "tmap api",
        "tmap connect",
        "connect tmap"
      ],
      "category": "weather-and-location-data"
    }
  }
}