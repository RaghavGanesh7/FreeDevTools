{
  "category": "file-conversion",
  "categoryDisplay": "File Conversion",
  "description": "",
  "totalRepositories": 7,
  "repositories": {
    "KorigamiK--markitdown_mcp_server": {
      "owner": "KorigamiK",
      "name": "markitdown_mcp_server",
      "url": "https://github.com/KorigamiK/markitdown_mcp_server",
      "imageUrl": "/freedevtools/mcp/pfp/KorigamiK.webp",
      "description": "Converts various file formats to Markdown, utilizing the MarkItDown utility to handle documents, images, and audio files.",
      "stars": 56,
      "forks": 12,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-30T06:48:21Z",
      "readme_content": "# MarkItDown MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@KorigamiK/markitdown_mcp_server)](https://smithery.ai/server/@KorigamiK/markitdown_mcp_server)\n\nA Model Context Protocol (MCP) server that converts various file formats to Markdown using the MarkItDown utility.\n\n<a href=\"https://glama.ai/mcp/servers/sbc6bljjg5\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/sbc6bljjg5/badge\" alt=\"MarkItDown Server MCP server\" /></a>\n\n## Supported Formats\n\n- PDF\n- PowerPoint\n- Word\n- Excel\n- Images (EXIF metadata and OCR)\n- Audio (EXIF metadata and speech transcription)\n- HTML\n- Text-based formats (CSV, JSON, XML)\n- ZIP files (iterates over contents)\n\n## Installation\n\n### Installing via Smithery\n\nTo install MarkItDown MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@KorigamiK/markitdown_mcp_server):\n\n```bash\nnpx -y @smithery/cli install @KorigamiK/markitdown_mcp_server --client claude\n```\n\n### Manual Installation\n\n1. Clone this repository\n2. Install dependencies:\n```bash\nuv install\n```\n\n## Usage\n\n### As MCP Server\n\nThe server can be integrated with any MCP client. Here are some examples:\n\n#### Zed Editor\n\nAdd the following to your `settings.json`:\n\n```json\n\"context_servers\": {\n  \"markitdown_mcp\": {\n    \"settings\": {},\n    \"command\": {\n      \"path\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/markitdown_mcp_server\",\n        \"run\",\n        \"markitdown\"\n      ]\n    }\n  }\n}\n```\n\n### Commands\n\nThe server responds to the following MCP commands:\n\n- `/md <file>` - Convert the specified file to Markdown\n\nExample:\n```bash\n/md document.pdf\n```\n\n## Supported MCP Clients\n\nWorks with any MCP-compliant client listed at [modelcontextprotocol.io/clients](https://modelcontextprotocol.io/clients), including:\n\n- Zed Editor\n- Any other MCP-compatible editors and tools\n\n## License\n\nMIT License. See [LICENSE](LICENSE) for details.\n\n## Acknowledgements\n\nhttps://github.com/microsoft/markitdown#readme\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "markitdown_mcp_server",
        "markitdown",
        "markdown",
        "korigamik markitdown_mcp_server",
        "formats markdown",
        "markitdown_mcp_server converts"
      ],
      "category": "file-conversion"
    },
    "MaitreyaM--FILE-CONVERTER-MCP": {
      "owner": "MaitreyaM",
      "name": "FILE-CONVERTER-MCP",
      "url": "https://github.com/MaitreyaM/FILE-CONVERTER-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/MaitreyaM.webp",
      "description": "Convert documents between various formats using Pandoc, enabling seamless integration and automation in workflows. Supports a wide range of formats including Markdown, DOCX, HTML, PDF, and EPUB.",
      "stars": 5,
      "forks": 5,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-09T18:03:55Z",
      "readme_content": "# Pandoc MCP Server\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) <!-- Optional: Add a license badge -->\n[![smithery badge](https://smithery.ai/badge/@MaitreyaM/file-converter-mcp)](https://smithery.ai/server/@MaitreyaM/file-converter-mcp)\n\nA Python-based MCP (Model Context Protocol) server that provides powerful document conversion capabilities via Pandoc. This server allows AI agents (like Claude via LangChain/LangGraph) to request file conversions between various formats such as Markdown, DOCX, HTML, PDF, EPUB, and many more.\n\nThis project uses:\n\n*   **[FastMCP](https://github.com/model-context-protocol/mcp-py/blob/main/docs/fastmcp.md):** A Python library for easily creating MCP servers.\n*   **[pypandoc](https://github.com/NicklasTegner/pypandoc):** A Python wrapper around the Pandoc command-line tool.\n*   **[Pandoc](https://pandoc.org/):** The universal document converter.\n*   **(Optional) Docker:** For containerized deployment, bundling all dependencies (Python, Pandoc, LaTeX).\n\n## Features\n\n*   Exposes a single MCP tool: `convert_document`.\n*   Supports a wide range of input and output formats handled by Pandoc.\n*   Allows specifying input format (if auto-detection fails) and output format.\n*   Supports passing extra command-line arguments to Pandoc for advanced control (e.g., Table of Contents, PDF margins, standalone files).\n*   Includes Docker configuration (`Dockerfile`) for creating a self-contained server environment including Pandoc and necessary LaTeX components for PDF generation.\n*   Designed for integration with MCP clients, particularly LangChain/LangGraph agents.\n\n## Exposed MCP Tool\n\n### `convert_document`\n\nConverts a document from one format to another using Pandoc.\n\n**Arguments:**\n\n*   `input_file_path` (str, **required**): The path *accessible by the server* to the input document file. If running in Docker with a volume mount, this should be the path *inside the container* (e.g., `/data/my_doc.docx`).\n*   `output_file_path` (str, **required**): The path *accessible by the server* where the converted output file should be saved. If running in Docker, this should be the path *inside the container* (e.g., `/data/my_output.pdf`). The directory will be created if it doesn't exist within the server's accessible filesystem.\n*   `to_format` (str, **required**): The target format for the conversion (e.g., 'markdown', 'docx', 'pdf', 'html', 'rst', 'epub'). See [Pandoc documentation](https://pandoc.org/MANUAL.html#general-options) for a full list (`--list-output-formats`).\n*   `from_format` (str, *optional*): The format of the input file. If `None`, pandoc will try to guess from the file extension. Specify if the extension is ambiguous or missing (e.g., 'md', 'docx', 'html'). Defaults to `None`.\n*   `extra_args` (List[str], *optional*): A list of additional command-line arguments to pass directly to pandoc (e.g., `['--toc']`, `['-V', 'geometry:margin=1.5cm']`, `['--standalone']`). Defaults to `None`.\n\n**Returns:**\n\n*   (str): A message indicating success (e.g., \"Successfully converted document to '/data/my_output.pdf'\") or an error message (e.g., \"Error: Input file not found...\", \"Error during conversion: Pandoc died...\").\n\n## Setup and Running\n\nYou can run this server either locally (requires manual installation of dependencies) or using the provided Docker configuration (recommended for ease of use and deployment).\n\n### Installing via Smithery\n\nTo install Pandoc Document Converter for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@MaitreyaM/file-converter-mcp):\n\n```bash\nnpx -y @smithery/cli install @MaitreyaM/file-converter-mcp --client claude\n```\n\n### Option 1: Running with Docker (Recommended)\n\nThis method bundles Python, Pandoc, LaTeX, and required libraries into a container. **You only need Docker Desktop installed locally.**\n\n1.  **Install Docker:** Download and install [Docker Desktop](https://www.docker.com/products/docker-desktop/) for your operating system. Start Docker Desktop.\n2.  **Clone Repository:** Get the project files:\n    ```bash\n    git clone https://github.com/your-username/pandoc-mcp-server.git # Replace with your repo URL\n    cd pandoc-mcp-server\n    ```\n3.  **Build the Docker Image:** This command builds the image using the `Dockerfile`. It installs Pandoc, a capable TeX Live distribution (for PDF support), and Python dependencies inside the image. This step might take several minutes the first time.\n    ```bash\n    docker build -t pandoc-converter-server .\n    ```\n4.  **Run the Container:** This starts the server inside the container.\n    *   **Choose a directory on your host machine** to share with the container for input/output files (e.g., the current project directory).\n    *   Run the container, mapping the host directory to `/data` inside the container and mapping port 8000. **Replace `/path/to/your/local/project` with the actual absolute path to the project directory on your machine.**\n    ```bash\n    # Example using the current directory (.) as the host path:\n    docker run -it --rm -p 8000:8000 -v \"$(pwd)\":/data pandoc-converter-server\n\n    # Or using an absolute path (replace):\n    # docker run -it --rm -p 8000:8000 -v \"/path/to/your/local/project\":/data pandoc-converter-server\n    ```\n    *   `-it`: Runs interactively (shows logs, allows Ctrl+C).\n    *   `--rm`: Removes the container when stopped.\n    *   `-p 8000:8000`: Maps port 8000 on your host to port 8000 in the container.\n    *   `-v \"$(pwd)\":/data`: Mounts the current working directory on your host to `/data` inside the container. Files placed in your local project directory will appear in `/data` inside the container, and files saved to `/data` by the server will appear in your local project directory.\n    *   `pandoc-converter-server`: The name of the image you built.\n5.  **Server is Running:** You should see logs indicating the server started and is listening on SSE (`http://0.0.0.0:8000`). It's ready to accept connections from your MCP client (like the LangChain agent).\n6.  **Connecting from Client:** Configure your MCP client (e.g., `MultiServerMCPClient`) to connect to `http://127.0.0.1:8000/sse` with `transport: \"sse\"`.\n7.  **Using the Tool:** When interacting with your agent/client, refer to files using their path *inside the container*, prefixed with `/data/`. For example: `convert /data/my_input.docx to pdf at /data/my_output.pdf`. The output file will appear in your local project directory due to the volume mapping.\n\n### Option 2: Running Locally (Manual Dependency Installation)\n\nThis requires you to install Python, Pandoc, and a LaTeX distribution directly onto your host machine.\n\n1.  **Install Python:** Ensure you have Python >= 3.10 installed.\n2.  **Install Pandoc:** Install the Pandoc command-line tool for your OS. Follow instructions at [pandoc.org/installing.html](https://pandoc.org/installing.html). Verify by running `pandoc --version` in a new terminal.\n3.  **Install LaTeX:** For PDF generation, install a TeX distribution.\n    *   **macOS:** `brew install --cask mactex-no-gui` (Recommended via Homebrew)\n    *   **Debian/Ubuntu:** `sudo apt-get update && sudo apt-get install texlive-latex-base texlive-fonts-recommended texlive-latex-extra texlive-fonts-extra` (or `texlive-full` for everything, but large).\n    *   **Windows:** Install [MiKTeX](https://miktex.org/) or [TeX Live](https://www.tug.org/texlive/). Ensure the `bin` directory containing `pdflatex.exe` is added to your system's PATH.\n    *   Verify by running `pdflatex --version` in a new terminal.\n4.  **Clone Repository:**\n    ```bash\n    git clone https://github.com/your-username/pandoc-mcp-server.git # Replace with your repo URL\n    cd pandoc-mcp-server\n    ```\n5.  **Create Virtual Environment (Recommended):**\n    ```bash\n    python -m venv venv\n    source venv/bin/activate # Linux/macOS\n    # venv\\Scripts\\activate # Windows\n    ```\n    *(Or use Conda: `conda create --name pandoc-env python=3.11 && conda activate pandoc-env`)*\n6.  **Install Python Dependencies:**\n    ```bash\n    pip install -r requirements.txt\n    ```\n7.  **Run the Server:**\n    ```bash\n    python pandoc_mcp_server.py\n    ```\n8.  **Server is Running:** It will listen on `http://127.0.0.1:8000/sse`.\n9.  **Connecting from Client:** Configure your MCP client to connect to `http://127.0.0.1:8000/sse`.\n10. **Using the Tool:** Refer to files using their regular paths on your local machine (e.g., `convert my_input.docx to pdf at my_output.pdf`, assuming files are in the same directory, or use absolute paths).\n\n## Example Agent Interaction (Running Server in Docker)\n\nAssuming the server container is running with the volume mount:\n\n```\nYou: convert /data/report.md to pdf\n\nAgent: Thinking...\n[Agent calls convert_document tool with input='/data/report.md', output='/data/report.pdf', to='pdf']\nAgent: Successfully converted document to '/data/report.pdf'\n[The bot may then attempt to upload report.pdf from the local project directory]\n```\n\n## Files\n\n*   `pandoc_mcp_server.py`: The main Python script for the MCP server.\n*   `Dockerfile`: Instructions for building the Docker container image.\n*   `requirements.txt`: Python dependencies needed inside the Docker container (or local venv).\n*   `.gitignore`: Specifies intentionally untracked files for Git.\n*   `README.md`: This file.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request or open an Issue.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "formats",
        "pandoc",
        "docx",
        "using pandoc",
        "convert documents",
        "file conversion"
      ],
      "category": "file-conversion"
    },
    "canlgz--markitdown_mcp_server": {
      "owner": "canlgz",
      "name": "markitdown_mcp_server",
      "url": "https://github.com/canlgz/markitdown_mcp_server",
      "imageUrl": "/freedevtools/mcp/pfp/canlgz.webp",
      "description": "Converts various file formats to Markdown using the MarkItDown utility, enabling seamless processing of PDFs, Office documents, images, audio, HTML, and more into Markdown format.",
      "stars": 1,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-04-25T08:20:50Z",
      "readme_content": "# MarkItDown MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@KorigamiK/markitdown_mcp_server)](https://smithery.ai/server/@KorigamiK/markitdown_mcp_server)\n\nA Model Context Protocol (MCP) server that converts various file formats to Markdown using the MarkItDown utility.\n\n<a href=\"https://glama.ai/mcp/servers/sbc6bljjg5\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/sbc6bljjg5/badge\" alt=\"MarkItDown Server MCP server\" /></a>\n\n## Supported Formats\n\n- PDF\n- PowerPoint\n- Word\n- Excel\n- Images (EXIF metadata and OCR)\n- Audio (EXIF metadata and speech transcription)\n- HTML\n- Text-based formats (CSV, JSON, XML)\n- ZIP files (iterates over contents)\n\n## Installation\n\n### Installing via Smithery\n\nTo install MarkItDown MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@KorigamiK/markitdown_mcp_server):\n\n```bash\nnpx -y @smithery/cli install @KorigamiK/markitdown_mcp_server --client claude\n```\n\n### Manual Installation\n\n1. Clone this repository\n2. Install dependencies:\n```bash\nuv install\n```\n\n## Usage\n\n### As MCP Server\n\nThe server can be integrated with any MCP client. Here are some examples:\n\n#### Zed Editor\n\nAdd the following to your `settings.json`:\n\n```json\n\"context_servers\": {\n  \"markitdown_mcp\": {\n    \"settings\": {},\n    \"command\": {\n      \"path\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/markitdown_mcp_server\",\n        \"run\",\n        \"markitdown\"\n      ]\n    }\n  }\n}\n```\n\n### Commands\n\nThe server responds to the following MCP commands:\n\n- `/md <file>` - Convert the specified file to Markdown\n\nExample:\n```bash\n/md document.pdf\n```\n\n## Supported MCP Clients\n\nWorks with any MCP-compliant client listed at [modelcontextprotocol.io/clients](https://modelcontextprotocol.io/clients), including:\n\n- Zed Editor\n- Any other MCP-compatible editors and tools\n\n## License\n\nMIT License. See [LICENSE](LICENSE) for details.\n\n## Acknowledgements\n\nhttps://github.com/microsoft/markitdown#readme\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "markitdown_mcp_server",
        "markitdown",
        "markdown",
        "canlgz markitdown_mcp_server",
        "formats markdown",
        "markitdown_mcp_server converts"
      ],
      "category": "file-conversion"
    },
    "convertguru--file-convert-mcp": {
      "owner": "convertguru",
      "name": "file-convert-mcp",
      "url": "https://github.com/convertguru/file-convert-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/convertguru.webp",
      "description": "Converts files between various formats including images, documents, audio, video, and data files to popular formats like PDF, JPG, MP4, and HTML. Utilizes AI and other detection methods for accurate file type recognition and conversion.",
      "stars": 3,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-27T10:50:50Z",
      "readme_content": "# File Convert MCP Server\n[![smithery badge](https://smithery.ai/badge/@convertguru/file-convert-mcp)](https://smithery.ai/server/@convertguru/file-convert-mcp)\n\nA Model Context Protocol (MCP) server for converting files between various formats.\n\nFile Convert is an MCP server designed to handle the conversion of a wide array of file formats, including images, office documents, audio, video, text, and data files. It aims to provide seamless transformation into popular formats such as PDF, JPG, MP4, and HTML, among others. This server offers a set of powerful tools to convert diverse file types into easily accessible and widely compatible formats like PDF, JPG, PNG, TXT.\n\n## ✨ Features\n\n- **Intelligent File Type Detection:** Employs a combination of AI, TrID, and magic bytes for accurate file type identification.\n- **Versatile File Conversion:** Supports conversion between numerous file types and the following popular formats:\n    - **Images:** Handles a vast range of formats, including many legacy ones. Converts to PDF, JPG, PNG.\n    - **Office Documents:** Converts to PDF, TXT, HTML.\n    - **Audio/Video:** Converts to MP3, MP4.\n    - **Databases:** Converts to CSV.\n    - **Various Files:** Offers conversion capabilities for other file types as well.\n\n## 🛠️ Requirements\n\n1. **Python:** Version 3.12 or higher is required.\n2. **uv Tool:** Install the [Python uv tool](https://docs.astral.sh/uv/getting-started/installation/) for efficient dependency management and easy execution of the MCP server.\n3. **API Key (Development):** As of May 2025, the MCP is in its testing phase, and **no API key is currently required** for development. For future production use, please [contact the Convert.Guru team](https://convert.guru/contact) to obtain an API key.\n\n## 🚀 Usage with Desktop App\n\nTo integrate this server with your desktop application, add the following configuration to your app's server settings. If necessary, adjust the absolute path to the `uv`/`uvx` executables (or `uv.exe`/`uvx.exe` on Windows).\n\n**Using `uvx` (recommended):**\n\n```json\n{\n  \"mcpServers\": {\n    \"file-convert\": {\n      \"command\": \"uvx\",\n      \"args\": [\"--from\", \"git+https://github.com/convertguru/file-convert-mcp.git\", \"file-convert-mcp\"],\n      \"env\": {\n        \"CONVERT_GURU_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n**If you have cloned the repository locally (adjust paths as needed):**\n\n```json\n{\n  \"mcpServers\": {\n    \"file-convert\": {\n      \"command\": \"/home/User/.local/bin/uv\",\n      \"args\": [\"--directory\", \"/home/User/file-convert-mcp/src/file_convert_mcp\", \"run\", \"server.py\"],\n      \"env\": {\n        \"CONVERT_GURU_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n**Using local `uvx`:**\n\n```json\n{\n  \"mcpServers\": {\n    \"file-convert\": {\n      \"command\": \"uvx\",\n      \"args\": [\"--from\", \"/home/User/file-convert-mcp\", \"file-convert-mcp\"],\n      \"env\": {\n        \"CONVERT_GURU_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n### Environment Variables\n\nThe MCP server supports the following environment variables:\n\n- **`CONVERT_GURU_API_KEY`**: Your Convert.Guru API key (optional for development)\n- **`TRANSPORT`**: Transport method for the MCP server\n  - `\"stdio\"` (default): Standard input/output transport\n  - `\"http\"`: HTTP transport (streamable) with REST API endpoints\n- **`PORT`**: Port number for HTTP transport (default: 8000, only used when `TRANSPORT=http`)\n\nWhen using HTTP transport, the server provides additional endpoints:\n- `GET /health` - Health check endpoint\n- `GET /tools` - List of available MCP tools\n\nAlso, see this guide on how to [set up MCP tools in Claude Desktop](https://modelcontextprotocol.io/quickstart/user#for-claude-desktop-users).\n\n### Installing via Smithery\n\nTo install file-convert-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@convertguru/file-convert-mcp):\n\n```bash\nnpx -y @smithery/cli install @convertguru/file-convert-mcp --client claude\n```\n\n## 🛠️ Development\n\nGet started with local development by following these steps:\n\n**1. Clone the repository:**\n\n```bash\ngit clone https://github.com/convertguru/file-convert-mcp.git\n```\n\n**2. Fetch and cache Python dependencies (optional, `uvx` handles this automatically):**\n\n```bash\ncd file-convert-mcp\nuv sync\ncd ..\n```\n\n**3. Create .env file with your (optional for now) API key:**\n\n```bash\necho \"CONVERT_GURU_API_KEY=your_api_key_here\" > file-convert-mcp/.env\n```\n\n**4. Run the MCP server locally using various `uv` commands:**\n\n```bash\n# Using uvx with .env file from the local directory\ncd file-convert-mcp\nUV_ENV_FILE=.env uvx --from ./file-convert-mcp file-convert-mcp\n\n# OR using uv directly to run the server script\nuv run file-convert-mcp/src/file_convert_mcp/server.py\n\n# OR specifying the directory for uv\nuv --directory file-convert-mcp/src/file_convert_mcp run server.py\n\n# OR navigating into the server directory\ncd file-convert-mcp/src/file_convert_mcp\nuv run server.py\n\n# OR using uvx to fetch the core from the GitHub repository + local .env file\nUV_ENV_FILE=.env uvx --from git+https://github.com/convertguru/file-convert-mcp.git file-convert-mcp\n\n# OR run with HTTP transport on custom port\nTRANSPORT=http PORT=9000 uv run file-convert-mcp/src/file_convert_mcp/server.py\n\n# OR run with stdio transport (default)\nTRANSPORT=stdio uv run file-convert-mcp/src/file_convert_mcp/server.py\n```\n\n**5. Create .env file with your configuration (optional for now):**\n\n```bash\n# Basic configuration\necho \"CONVERT_GURU_API_KEY=your_api_key_here\" > file-convert-mcp/.env\n\n# OR with transport configuration\necho \"CONVERT_GURU_API_KEY=your_api_key_here\" > file-convert-mcp/.env\necho \"TRANSPORT=http\" >> file-convert-mcp/.env\necho \"PORT=8000\" >> file-convert-mcp/.env\n```\n\n**6. Modify the server logic if needed:**\nEdit the main server file located at `src/file_convert_mcp/server.py.`\n\n**7. Clearing the `uv` Cache (if needed):**\nIf `uv` has cached an older version of the code in `~/.cache/uv`, you might need to clear the cache. Alternatively, use `uv` with the `-n` or `--no-cache` option to bypass it.\n\n## ⚙️ Available Tools\n\nThe MCP server provides the following tools:\n\n* `detect_file_type`: Analyzes the first 200 bytes of an uploaded file and uses the Convert.Guru API to determine its type.\n* `convert_file`: Converts a given file to a specified output format. The desired file extension should be passed as the `ext_out` parameter.\n\n## 📜 License\n\nVisit us [https://convert.guru](https://convert.guru/)\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for complete details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "convertguru",
        "formats",
        "mcp",
        "file conversion",
        "file convert",
        "converts files"
      ],
      "category": "file-conversion"
    },
    "longbowzz--svg2png_mcp": {
      "owner": "longbowzz",
      "name": "svg2png_mcp",
      "url": "https://github.com/longbowzz/svg2png_mcp",
      "imageUrl": "/freedevtools/mcp/pfp/longbowzz.webp",
      "description": "Convert SVG code into PNG images utilizing two conversion methods: CairoSVG for fast, simple transformations and Inkscape for full SVG feature support and improved font rendering. Integrated with MCP protocol for seamless client connectivity.",
      "stars": 3,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-07-08T10:47:50Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/longbowzz-svg2png-mcp-badge.png)](https://mseep.ai/app/longbowzz-svg2png-mcp)\n\n# SVG to PNG MCP Server\n[![smithery badge](https://smithery.ai/badge/@longbowzz/svg2png_mcp)](https://smithery.ai/server/@longbowzz/svg2png_mcp)\n\n这是一个基于Model Context Protocol (MCP)的SVG转PNG工具服务器。\n\n## 功能特点\n\n- 将SVG代码转换为PNG图片\n- 支持指定工作目录\n- 基于MCP协议，可与其他MCP客户端集成\n\n## SVG转PNG方案说明\n\n目前支持两种SVG转PNG的转换方案：\n\n1. CairoSVG方案（当前使用）\n   - 使用`cairosvg`库进行转换\n   - 优点：\n     - 转换速度快\n     - 依赖少，安装简单\n     - 适合简单的SVG图形转换\n   - 缺点：\n     - 中文字体支持需要特殊处理\n     - 某些复杂SVG特性支持有限\n\n2. Inkscape方案（备选）\n   - 使用Inkscape命令行工具进行转换\n   - 优点：\n     - 完整支持SVG所有特性\n     - 更好的字体渲染支持\n     - 转换效果更准确\n   - 缺点：\n     - 需要安装Inkscape软件\n     - 转换速度相对较慢\n     - 系统依赖较多\n\n注意：当前版本默认使用CairoSVG方案，如果遇到字体渲染问题或复杂SVG转换问题，可以考虑切换到Inkscape方案。\n\n## 项目结构\n\n```\nsvg2png_mcp/\n├── src/\n│   ├── server.py          # MCP服务器实现\n│   ├── svg2png.py         # SVG转PNG的业务逻辑\n│   └── test_client.py     # 测试客户端\n├── servers_config.example.json    # MCP服务器配置示例\n└── requirements.txt       # 依赖文件\n```\n\n## 安装\n\n### Installing via Smithery\n\nTo install SVG to PNG MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@longbowzz/svg2png_mcp):\n\n```bash\nnpx -y @smithery/cli install @longbowzz/svg2png_mcp --client claude\n```\n\n1. 创建并激活虚拟环境：\n```bash\n# 创建虚拟环境\npython -m venv venv\n\n# 激活虚拟环境\n# 在 macOS/Linux 上：\nsource venv/bin/activate\n# 在 Windows 上：\n.\\venv\\Scripts\\activate\n```\n\n2. 安装依赖：\n```bash\npip install -r requirements.txt\n```\n\n## 配置\n\n1. 复制配置文件示例：\n```bash\ncp servers_config.example.json servers_config.json\n```\n\n2. 编辑 `servers_config.json`，**必须使用绝对路径**：\n```json\n{\n    \"mcpServers\": {\n        \"svg2png\": {\n            \"command\": \"/absolute/path/to/venv/bin/python\",\n            \"args\": [\n                \"/absolute/path/to/svg2png_mcp/src/server.py\"\n            ]\n        }\n    }\n}\n```\n\n⚠️ **重要说明**：\n- `command` 必须是虚拟环境中 Python 解释器的**绝对路径**\n- `args` 中的 `server.py` 路径必须是**绝对路径**\n- 这是为了确保其他 MCP 客户端能够正确找到并启动服务器\n\n获取路径的方法：\n```bash\n# 获取Python解释器的绝对路径（在虚拟环境中运行）\nwhich python  # macOS/Linux\nwhere python  # Windows\n\n# 获取项目根目录的绝对路径\npwd  # macOS/Linux\ncd   # Windows\n```\n\n示例（macOS/Linux）：\n```json\n{\n    \"mcpServers\": {\n        \"svg2png\": {\n            \"command\": \"/Users/username/projects/svg2png_mcp/venv/bin/python\",\n            \"args\": [\n                \"/Users/username/projects/svg2png_mcp/src/server.py\"\n            ]\n        }\n    }\n}\n```\n\n示例（Windows）：\n```json\n{\n    \"mcpServers\": {\n        \"svg2png\": {\n            \"command\": \"C:\\\\Users\\\\username\\\\projects\\\\svg2png_mcp\\\\venv\\\\Scripts\\\\python.exe\",\n            \"args\": [\n                \"C:\\\\Users\\\\username\\\\projects\\\\svg2png_mcp\\\\src\\\\server.py\"\n            ]\n        }\n    }\n}\n```\n\n## 使用方法\n\n运行测试客户端：\n```bash\n# 确保虚拟环境已激活\nsource venv/bin/activate  # macOS/Linux\n# 运行客户端\npython src/test_client.py\n```\n\n如果运行正常，将在test_output目录生成一张名为output.png的图片。\n\n将servers_config.json中的内容填入Cursor、Claude desktop等MCP客户端即可使用。\n\n\n注意：\n- MCP客户端会自动根据 `servers_config.json` 中的配置启动服务器\n- 确保 `servers_config.json` 中使用了正确的绝对路径\n- 确保在运行客户端时已激活虚拟环境\n\n## 技术实现\n\n### 服务器架构\n- 使用 FastMCP 框架实现 MCP 服务器\n- 提供 `svg_to_png` 工具接口\n- 支持异步操作和错误处理\n\n### 核心功能\n- SVG 到 PNG 的转换使用 cairosvg 库\n- 支持自定义工作目录\n- 提供完整的错误处理和日志记录\n\n### 客户端集成\n- 支持标准 MCP 客户端接入\n- 提供测试客户端示例\n- 支持工具发现和异步调用\n\n## 依赖\n\n- mcp：MCP 协议实现\n- cairosvg：SVG 转换核心库\n- Pillow：图像处理支持 ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "svg2png_mcp",
        "svg",
        "png",
        "svg2png_mcp convert",
        "longbowzz svg2png_mcp",
        "convert svg"
      ],
      "category": "file-conversion"
    },
    "vivekVells--mcp-pandoc": {
      "owner": "vivekVells",
      "name": "mcp-pandoc",
      "url": "https://github.com/vivekVells/mcp-pandoc",
      "imageUrl": "/freedevtools/mcp/pfp/vivekVells.webp",
      "description": "Facilitates document format conversion using pandoc, enabling transformation between various document types while maintaining formatting and structure.",
      "stars": 420,
      "forks": 54,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T14:01:54Z",
      "readme_content": "[![Downloads](https://img.shields.io/pypi/dm/mcp-pandoc.svg)](https://pypi.python.org/pypi/mcp-pandoc)\n[![CI](https://github.com/vivekVells/mcp-pandoc/actions/workflows/ci.yml/badge.svg)](https://github.com/vivekVells/mcp-pandoc/actions/workflows/ci.yml)\n<br />\n\n![image](https://github.com/user-attachments/assets/10f18317-58e7-430e-9aec-b706b60fe2c6)\n\n<!-- [![Downloads](https://static.pepy.tech/badge/mcp-pandoc/month)](https://pepy.tech/project/mcp-pandoc) -->\n<!-- ![PyPI - Downloads](https://img.shields.io/pypi/dm/mcp-pandoc?style=social) -->\n\n<!--\n[![Downloads](https://img.shields.io/pypi/dm/mcp-pandoc.svg)](https://pypi.python.org/pypi/mcp-pandoc)\n[![CI](https://github.com/vivekVells/mcp-pandoc/actions/workflows/ci.yml/badge.svg)](https://github.com/vivekVells/mcp-pandoc/actions/workflows/ci.yml)\n<a href=\"https://smithery.ai/server/mcp-pandoc\"><img alt=\"Smithery Badge\" src=\"https://smithery.ai/badge/mcp-pandoc\"></a> <a href=\"https://glama.ai/mcp/servers/xyzzgaj9bk\"><img alt=\"badge\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/xyzzgaj9bk/badge\" /></a> \n-->\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/vivekvells-mcp-pandoc-badge.png)](https://mseep.ai/app/vivekvells-mcp-pandoc)\n<a href=\"https://glama.ai/mcp/servers/xyzzgaj9bk\"><img alt=\"badge\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/xyzzgaj9bk/badge\" />\n\n# mcp-pandoc: A Document Conversion MCP Server\n\n> Officially included in the [Model Context Protocol servers](https://github.com/modelcontextprotocol/servers/blob/main/README.md) open-source project. 🎉\n\n## Overview\n\nA Model Context Protocol server for document format conversion using [pandoc](https://pandoc.org/index.html). This server provides tools to transform content between different document formats while preserving formatting and structure.\n\nPlease note that mcp-pandoc is currently in early development. PDF support is under development, and the functionality and available tools are subject to change and expansion as we continue to improve the server.\n\nCredit: This project uses the [Pandoc Python package](https://pypi.org/project/pandoc/) for document conversion, forming the foundation for this project.\n\n## 📋 Quick Reference\n\n**New to mcp-pandoc?** Check out **[📖 CHEATSHEET.md](CHEATSHEET.md)** for\n\n- ⚡ Copy-paste examples for all formats\n- 🔄 Bidirectional conversion matrix\n- 🎯 Common workflows and pro tips\n- 🌟 Reference document styling guide\n\n_Perfect for quick lookups and getting started fast!_\n\n## Demo\n\n[![mcp-pandoc - v1: Seamless Document Format Conversion for Claude using MCP server](https://img.youtube.com/vi/vN3VOb0rygM/maxresdefault.jpg)](https://youtu.be/vN3VOb0rygM)\n\n> 🎥 [Watch on YouTube](https://youtu.be/vN3VOb0rygM)\n\n<details>\n<summary>Screenshots</summary>\n\n<img width=\"2407\" alt=\"Screenshot 2024-12-26 at 3 33 54 PM\" src=\"https://github.com/user-attachments/assets/ce3f5396-252a-4bba-84aa-65b2a06b859e\" />\n<img width=\"2052\" alt=\"Screenshot 2024-12-26 at 3 38 24 PM\" src=\"https://github.com/user-attachments/assets/8c525ad1-b184-41ca-b068-7dd34b60b85d\" />\n<img width=\"1498\" alt=\"Screenshot 2024-12-26 at 3 40 51 PM\" src=\"https://github.com/user-attachments/assets/a1e0682d-fe44-40b6-9988-bf805627beeb\" />\n<img width=\"760\" alt=\"Screenshot 2024-12-26 at 3 41 20 PM\" src=\"https://github.com/user-attachments/assets/1d7f5998-6d7f-48fa-adcf-fc37d0521213\" />\n<img width=\"1493\" alt=\"Screenshot 2024-12-26 at 3 50 27 PM\" src=\"https://github.com/user-attachments/assets/97992c5d-8efc-40af-a4c3-94c51c392534\" />\n</details>\n\nMore to come...\n\n## Tools\n\n1. `convert-contents`\n   - Transforms content between supported formats\n   - Inputs:\n     - `contents` (string): Source content to convert (required if input_file not provided)\n     - `input_file` (string): Complete path to input file (required if contents not provided)\n     - `input_format` (string): Source format of the content (defaults to markdown)\n     - `output_format` (string): Target format (defaults to markdown)\n     - `output_file` (string): Complete path for output file (required for pdf, docx, rst, latex, epub formats)\n     - `reference_doc` (string): Path to a reference document to use for styling (supported for docx output format)\n     - `defaults_file` (string): Path to a Pandoc defaults file (YAML) containing conversion options\n     - `filters` (array): List of Pandoc filter paths to apply during conversion\n   - Supported input/output formats:\n     - markdown\n     - html\n     - pdf\n     - docx\n     - rst\n     - latex\n     - epub\n     - txt\n     - ipynb\n     - odt\n   - Note: For advanced formats (pdf, docx, rst, latex, epub), an output_file path is required\n\n### 🔧 Advanced Features\n\n#### Defaults Files (YAML Configuration)\n\nUse defaults files to create reusable conversion templates with consistent formatting:\n\n```yaml\n# academic-paper.yaml\nfrom: markdown\nto: pdf\nnumber-sections: true\ntoc: true\nmetadata:\n  title: \"Academic Paper\"\n  author: \"Research Team\"\n```\n\nExample usage: `\"Convert paper.md to PDF using defaults academic-paper.yaml and save as paper.pdf\"`\n\n#### Pandoc Filters\n\nApply custom filters for enhanced processing:\n\nExample usage: `\"Convert docs.md to HTML with filters ['/path/to/mermaid-filter.py'] and save as docs.html\"`\n\n> 💡 **For comprehensive examples and workflows**, see **[CHEATSHEET.md](CHEATSHEET.md)**\n\n## 📊 Supported Formats & Conversions\n\n### Bidirectional Conversion Matrix\n\n| From\\To      | MD  | HTML | TXT | DOCX | PDF | RST | LaTeX | EPUB | IPYNB | ODT |\n| ------------ | --- | ---- | --- | ---- | --- | --- | ----- | ---- | ----- | --- |\n| **Markdown** | ✅  | ✅   | ✅  | ✅   | ✅  | ✅  | ✅    | ✅   | ✅    | ✅  |\n| **HTML**     | ✅  | ✅   | ✅  | ✅   | ✅  | ✅  | ✅    | ✅   | ✅    | ✅  |\n| **TXT**      | ✅  | ✅   | ✅  | ✅   | ✅  | ✅  | ✅    | ✅   | ✅    | ✅  |\n| **DOCX**     | ✅  | ✅   | ✅  | ✅   | ✅  | ✅  | ✅    | ✅   | ✅    | ✅  |\n| **RST**      | ✅  | ✅   | ✅  | ✅   | ✅  | ✅  | ✅    | ✅   | ✅    | ✅  |\n| **LaTeX**    | ✅  | ✅   | ✅  | ✅   | ✅  | ✅  | ✅    | ✅   | ✅    | ✅  |\n| **EPUB**     | ✅  | ✅   | ✅  | ✅   | ✅  | ✅  | ✅    | ✅   | ✅    | ✅  |\n| **IPYNB**    | ✅  | ✅   | ✅  | ✅   | ✅  | ✅  | ✅    | ✅   | ✅    | ✅  |\n| **ODT**      | ✅  | ✅   | ✅  | ✅   | ✅  | ✅  | ✅    | ✅   | ✅    | ✅  |\n\n### A Note on PDF Support\n\nThis tool uses `pandoc` for conversions, which allows for generating PDF files from the formats listed above. However, converting _from_ a PDF to other formats is not supported. Therefore, PDF should be considered an **output-only** format.\n\n### Format Categories\n\n| Category     | Formats                     | Requirements                    |\n| ------------ | --------------------------- | ------------------------------- |\n| **Basic**    | MD, HTML, TXT, IPYNB, ODT   | None                            |\n| **Advanced** | DOCX, PDF, RST, LaTeX, EPUB | Must specify `output_file` path |\n| **Styled**   | DOCX with reference doc     | Custom template support ⭐      |\n\n### Requirements by Format\n\n- **PDF (.pdf)** - requires TeX Live installation\n- **DOCX (.docx)** - supports custom styling via reference documents\n- **All others** - no additional requirements\n\nNote: For advanced formats:\n\n1. Complete file paths with filename and extension are required\n2. **PDF conversion requires TeX Live installation** (see Critical Requirements section -> For macOS: `brew install texlive`)\n3. When no output path is specified:\n   - Basic formats: Displays converted content in the chat\n   - Advanced formats: May save in system temp directory (/tmp/ on Unix systems)\n\n## Usage & configuration\n\n**NOTE: Ensure to complete installing required packages mentioned below under \"Critical Requirements\".**\n\nTo use the published one\n\n```bash\n{\n  \"mcpServers\": {\n    \"mcp-pandoc\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-pandoc\"]\n    }\n  }\n}\n```\n\n**💡 Quick Start**: See **[CHEATSHEET.md](CHEATSHEET.md)** for copy-paste examples and common workflows.\n\n### ⚠️ Important Notes\n\n#### Critical Requirements\n\n1. **Pandoc Installation**\n\n- **Required**: Install `pandoc` - the core document conversion engine\n- Installation:\n\n  ```bash\n  # macOS\n  brew install pandoc\n\n  # Ubuntu/Debian\n  sudo apt-get install pandoc\n\n  # Windows\n  # Download installer from: https://pandoc.org/installing.html\n  ```\n\n- **Verify**: `pandoc --version`\n\n2. **UV package installation**\n\n- **Required**: Install `uv` package (includes `uvx` command)\n- Installation:\n\n  ```bash\n  # macOS\n  brew install uv\n\n  # Windows/Linux\n  pip install uv\n  ```\n\n- **Verify**: `uvx --version`\n\n3. **PDF Conversion Prerequisites:** Only needed if you need to convert & save pdf\n\n- TeX Live must be installed before attempting PDF conversion\n- Installation commands:\n\n  ```bash\n  # Ubuntu/Debian\n  sudo apt-get install texlive-xetex\n\n  # macOS\n  brew install texlive\n\n  # Windows\n  # Install MiKTeX or TeX Live from:\n  # https://miktex.org/ or https://tug.org/texlive/\n  ```\n\n4. **File Path Requirements**\n\n- When saving or converting files, you MUST provide complete file paths including filename and extension\n- The tool does not automatically generate filenames or extensions\n\n#### Examples\n\n✅ Correct Usage:\n\n```bash\n# Converting content to PDF\n\"Convert this text to PDF and save as /path/to/document.pdf\"\n\n# Converting between file formats\n\"Convert /path/to/input.md to PDF and save as /path/to/output.pdf\"\n\n# Converting to DOCX with a reference document template\n\"Convert input.md to DOCX using template.docx as reference and save as output.docx\"\n\n# Step-by-step reference document workflow\n\"First create a reference document: pandoc -o custom-reference.docx --print-default-data-file reference.docx\" or if you already have one, use that\n\"Then convert with custom styling: Convert this text to DOCX using /path/to/custom-reference.docx as reference and save as /path/to/styled-output.docx\"\n```\n\n❌ Incorrect Usage:\n\n```bash\n# Missing filename and extension\n\"Save this as PDF in /documents/\"\n\n# Missing complete path\n\"Convert this to PDF\"\n\n# Missing extension\n\"Save as /documents/story\"\n```\n\n#### Common Issues and Solutions\n\n1. **PDF Conversion Fails**\n\n   - Error: \"xelatex not found\"\n   - Solution: Install TeX Live first (see installation commands above)\n\n2. **File Conversion Fails**\n\n   - Error: \"Invalid file path\"\n   - Solution: Provide complete path including filename and extension\n   - Example: `/path/to/document.pdf` instead of just `/path/to/`\n\n3. **Format Conversion Fails**\n\n   - Error: \"Unsupported format\"\n   - Solution: Use only supported formats:\n     - Basic: txt, html, markdown\n     - Advanced: pdf, docx, rst, latex, epub\n\n4. **Reference Document Issues**\n   - Error: \"Reference document not found\"\n   - Solution: Ensure the reference document path exists and is accessible\n   - Note: Reference documents only work with DOCX output format\n   - How to create: `pandoc -o reference.docx --print-default-data-file reference.docx`\n\n## Quickstart\n\n<!-- Uncomment after smithery fix\n### Install\n\n#### Option 1: Installing manually via claude_desktop_config.json config file\n-->\n\n### Installing manually via claude_desktop_config.json config file\n\n- On MacOS: `open ~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n- On Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\na) Only for local development & contribution to this repo\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n\nℹ️ Replace <DIRECTORY> with your locally cloned project path\n\n```bash\n\"mcpServers\": {\n  \"mcp-pandoc\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"--directory\",\n      \"<DIRECTORY>/mcp-pandoc\",\n      \"run\",\n      \"mcp-pandoc\"\n    ]\n  }\n}\n```\n\n</details>\n\nb) Published Servers Configuration - Consumers should use this config\n\n```bash\n\"mcpServers\": {\n  \"mcp-pandoc\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"mcp-pandoc\"\n    ]\n  }\n}\n```\n\n<!-- Uncomment after smithery cli fix\n#### Option 2: To install Published Servers Configuration automatically via Smithery\n\nRun the following bash command to install **published** [mcp-pandoc pypi](https://pypi.org/project/mcp-pandoc) for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-pandoc):\n\n```bash\nnpx -y @smithery/cli install mcp-pandoc --client claude\n```\n-->\n\n- If you face any issue, use the \"Published Servers Configuration\" above directly instead of this cli.\n\n**Note**: To use locally configured mcp-pandoc, follow \"Development/Unpublished Servers Configuration\" step above.\n\n## Development\n\n### Testing\n\nTo run the comprehensive test suite and validate all supported bidirectional conversions, use the following command:\n\n```bash\nuv run pytest tests/test_conversions.py\n```\n\nThis ensures backward compatibility and verifies the tool's core functionality.\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n\n```bash\nuv sync\n```\n\n2. Build package distributions:\n\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/vivekvells/Desktop/code/ai/mcp-pandoc run mcp-pandoc\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n---\n\n## Contributing\n\nWe welcome contributions to enhance mcp-pandoc! Here's how you can get involved:\n\n1. **Report Issues**: Found a bug or have a feature request? Open an issue on our [GitHub Issues](https://github.com/vivekVells/mcp-pandoc/issues) page.\n2. **Submit Pull Requests**: Improve the codebase or add features by creating a pull request.\n\n---\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "pandoc",
        "format",
        "conversion",
        "using pandoc",
        "pandoc facilitates",
        "file conversion"
      ],
      "category": "file-conversion"
    },
    "wowyuarm--file-converter-mcp": {
      "owner": "wowyuarm",
      "name": "file-converter-mcp",
      "url": "https://github.com/wowyuarm/file-converter-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/wowyuarm.webp",
      "description": "Convert various document and image formats such as DOCX to PDF, PDF to DOCX, and multiple image formats (JPG, PNG, WebP, etc.). Provides reliable and flexible file handling to meet diverse conversion needs.",
      "stars": 19,
      "forks": 11,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-24T18:57:24Z",
      "readme_content": "# File Converter MCP Server\n\n[简体中文](README_CN.md) | English\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Python 3.10+](https://img.shields.io/badge/python-3.10+-blue.svg)](https://www.python.org/downloads/)\n\nThis MCP server provides multiple file conversion tools for converting various document and image formats. This project is built using the [Model Context Protocol (MCP)](https://modelcontextprotocol.io) and is designed to serve AI agents that need file conversion capabilities.\n\n## Features\n\n  - **DOCX to PDF**: Convert Microsoft Word documents to PDF\n  - **PDF to DOCX**: Convert PDF documents to Microsoft Word format\n  - **Image Format Conversion**: Convert between various image formats (JPG, PNG, WebP, etc.)\n  - **Excel to CSV**: Convert Excel spreadsheets to CSV format\n  - **HTML to PDF**: Convert HTML files to PDF format\n  - **Markdown to PDF**: Convert Markdown documents to PDF with proper styling\n  - **Generic Conversion**: A versatile tool that attempts to handle various format conversions\n\n## Technologies\n\n- Python 3.10+\n- [Model Context Protocol (MCP) Python SDK](https://pypi.org/project/mcp/)\n- Various conversion libraries:\n  - [docx2pdf](https://pypi.org/project/docx2pdf/) - for DOCX to PDF conversion\n  - [pdf2docx](https://pypi.org/project/pdf2docx/) - for PDF to DOCX conversion\n  - [Pillow](https://pypi.org/project/Pillow/) - for image format conversions\n  - [pandas](https://pypi.org/project/pandas/) - for Excel to CSV conversion\n  - [pdfkit](https://pypi.org/project/pdfkit/) - for HTML to PDF conversion\n  - [markdown](https://pypi.org/project/markdown/) - for Markdown to HTML conversion\n\n## Installation\n\n1. **Clone the Repository**\n\n   ```bash\n   git clone https://github.com/wowyuarm/file-converter-mcp.git\n   cd file-converter-mcp\n   ```\n\n2. **Create a Virtual Environment (optional but recommended)**\n\n   ```bash\n   python -m venv venv\n   source venv/bin/activate      # On Unix-based systems\n   venv\\Scripts\\activate         # On Windows\n   ```\n\n3. **Install Dependencies**\n\n   Install the required packages using pip:\n\n   ```bash\n   pip install mcp docx2pdf pdf2docx pillow pandas pdfkit markdown\n   ```\n\n   Alternatively, if you are using [uv](https://docs.astral.sh/uv/):\n\n   ```bash\n   uv add \"mcp[cli]\" docx2pdf pdf2docx pillow pandas pdfkit markdown\n   ```\n\n   Note: Some conversion libraries may have additional system dependencies. Please check their documentation for details.\n\n## Usage\n\n### Running the Server in Development Mode\n\nTo test the server, run:\n\n```bash\nmcp dev file_converter_server.py\n```\n\n### Installing for Claude Desktop\n\nOptionally, you can install the server on Claude Desktop with:\n\n```bash\nmcp install file_converter_server.py --name \"File Converter\"\n```\n\n### API / Tools\n\nThe MCP server exposes the following tools:\n\n#### Path-Based Tools (Also Support Content Input)\n\n##### docx2pdf\nCommand: `docx2pdf`\n- **Input Option 1**: Path to a .docx file\n  ```\n  input_file: path/to/document.docx\n  ```\n- **Input Option 2**: Base64 encoded content of the DOCX file\n  ```\n  file_content_base64: [base64 encoded string]\n  ```\n- **Output**: Base64 encoded string of the converted PDF file\n\n##### pdf2docx\nCommand: `pdf2docx`\n- **Input Option 1**: Path to a PDF file\n  ```\n  input_file: path/to/document.pdf\n  ```\n- **Input Option 2**: Base64 encoded content of the PDF file\n  ```\n  file_content_base64: [base64 encoded string]\n  ```\n- **Output**: Base64 encoded string of the converted DOCX file\n\n##### convert_image\nCommand: `convert_image`\n- **Input Option 1**: \n  ```\n  input_file: path/to/image.png\n  output_format: jpg\n  ```\n- **Input Option 2**:\n  ```\n  file_content_base64: [base64 encoded string]\n  input_format: png\n  output_format: jpg\n  ```\n- **Output**: Base64 encoded string of the converted image\n\n##### excel2csv\nCommand: `excel2csv`\n- **Input**: Path to an Excel file (.xls or .xlsx)\n- **Output**: Base64 encoded string of the converted CSV file\n\n##### html2pdf\nCommand: `html2pdf`\n- **Input**: Path to an HTML or Markdown file (.html, .md, .markdown)\n- **Output**: Base64 encoded string of the converted PDF file\n\n##### convert_file (Generic Converter)\nCommand: `convert_file`\n- **Input Option 1**: \n  ```\n  input_file: path/to/file.docx\n  input_format: docx\n  output_format: pdf\n  ```\n- **Input Option 2**:\n  ```\n  file_content_base64: [base64 encoded string]\n  input_format: docx\n  output_format: pdf\n  ```\n- **Output**: Base64 encoded string of the converted file\n\n#### Content-Based Tools (Legacy)\n\nThese are maintained for backward compatibility. All main tools now support content-based input directly.\n\n##### convert_content (Generic Content Converter)\nCommand: `convert_content`\n- **Input**:\n  - Base64 encoded content of the input file\n  - Source format (e.g., \"docx\", \"pdf\", \"md\")\n  - Target format (e.g., \"pdf\", \"docx\")\n- **Output**: Base64 encoded string of the converted file\n\n##### docx2pdf_content\nCommand: `docx2pdf_content`\n- **Input**: Base64 encoded content of the DOCX file\n- **Output**: Base64 encoded string of the converted PDF file\n\n##### pdf2docx_content\nCommand: `pdf2docx_content`\n- **Input**: Base64 encoded content of the PDF file\n- **Output**: Base64 encoded string of the converted DOCX file\n\n##### markdown2pdf_content\nCommand: `markdown2pdf_content`\n- **Input**: Base64 encoded content of the Markdown file\n- **Output**: Base64 encoded string of the converted PDF file\n\n## File Handling\n\nThe server includes robust file path handling that:\n- Uses a multi-stage search strategy to find files\n- Searches for uploaded files in common locations (temp directories, current directory)\n- Tries multiple filename variations (case-insensitive, with/without extensions)\n- Provides detailed logs to help troubleshoot file location issues\n- Works seamlessly with files uploaded via Claude chat interface\n- Supports relative and absolute file paths\n- Automatically detects file formats when possible\n\n### Dual-Mode Input\n\nAll conversion tools now support two methods of input:\n\n1. **Path-Based Conversion** (traditional approach)\n   ```\n   @File Converter\n   docx2pdf\n   input_file: file.docx\n   ```\n\n2. **Content-Based Conversion** (works even when path lookup fails)\n   ```\n   @File Converter\n   docx2pdf\n   file_content_base64: [base64 encoded string]\n   ```\n\nThis dual-mode approach provides maximum flexibility and reliability:\n- When in doubt, use content-based input for guaranteed processing\n- All intermediate files are created with unique names in temporary directories\n- Temporary files are automatically cleaned up after processing\n\n### Handling Claude-Specific File Uploads\n\nWhen using with Claude, if a file upload fails to be found:\n\n1. Try using the original filename with a preceding path:\n   ```\n   @File Converter\n   docx2pdf\n   input_file: /tmp/file.docx\n   ```\n\n2. If that fails, obtain the file content directly from Claude:\n   ```\n   @File Converter\n   docx2pdf\n   file_content_base64: [base64 content obtained from Claude]\n   ```\n\n## Error Handling\n\n- Each tool validates file existence using multiple search strategies\n- Detailed error messages are returned in a structured JSON format: `{\"success\": false, \"error\": \"error message\"}`\n- Successful conversions return: `{\"success\": true, \"data\": \"base64 encoded file content\"}`\n- The server includes comprehensive logging for troubleshooting\n- The server gracefully handles exceptions and returns informative error messages\n\n## Contributing\n\nContributions are welcome! If you'd like to contribute, please follow the guidelines in [CONTRIBUTING.md](CONTRIBUTING.md) (中文版: [贡献指南](CONTRIBUTING.md), English: [Contributing Guidelines](CONTRIBUTING_EN.md)).\n\n## License\n\nThis project is licensed under the MIT License – see the [LICENSE](LICENSE) file for details.\n\n## GitHub Repository\n\nVisit the GitHub repository at: https://github.com/wowyuarm/file-converter-mcp\n\n## MCP Server Configuration\n\nThis project can be used as a Model Context Protocol (MCP) server, providing file conversion tools to AI agents.\n\n### Quick Start\n\n1. **Install dependencies:**\n   ```bash\n   python -m pip install -e .\n   ```\n\n2. **Start the MCP server:**\n   ```bash\n   python start_mcp_server.py\n   ```\n\n3. **Configure your MCP client** (e.g., Claude Desktop, Cursor) with the following configuration:\n\n   **Recommended configuration** (`cursor-mcp.config.json`):\n   ```json\n   {\n     \"mcpServers\": {\n       \"file-converter\": {\n         \"command\": \"python\",\n         \"args\": [\"file_converter_server.py\"],\n         \"cwd\": \".\"\n       }\n     }\n   }\n   ```\n\n   **Alternative configuration** (`mcp.config.json`):\n   ```json\n   {\n     \"mcpServers\": {\n       \"file-converter\": {\n         \"command\": \"python\",\n         \"args\": [\"file_converter_server.py\"],\n         \"cwd\": \".\"\n       }\n     }\n   }\n   ```\n\n### Important Notes\n\n- **stdio mode is recommended** - This is the most reliable way to connect MCP servers\n- **Use `cursor-mcp.config.json`** for the simplest configuration\n- **Make sure the server is running** before connecting from Cursor\n\n### Available Tools\n\nThe MCP server provides the following tools:\n\n- **`docx2pdf`**: Convert Word documents to PDF\n- **`pdf2docx`**: Convert PDF to Word documents  \n- **`convert_image`**: Convert between image formats (PNG, JPG, WEBP, etc.)\n- **`excel2csv`**: Convert Excel files to CSV\n- **`html2pdf`**: Convert HTML/Markdown to PDF\n- **`convert_file`**: Generic file conversion between supported formats\n- **`convert_content`**: Convert files from base64 content\n\n### Usage Examples\n\nOnce configured, you can use the tools in your AI agent:\n\n```\nConvert this Word document to PDF: [upload file]\nConvert this image from PNG to JPG: [upload file]\nConvert this Excel file to CSV: [upload file]\n``` ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "formats",
        "docx",
        "converter",
        "formats docx",
        "file conversion",
        "file converter"
      ],
      "category": "file-conversion"
    }
  }
}