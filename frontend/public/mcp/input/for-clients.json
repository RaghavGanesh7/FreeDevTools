{
  "category": "for-clients",
  "categoryDisplay": "For clients",
  "description": "",
  "totalRepositories": 15,
  "repositories": {
    "StacklokLabs--toolhive": {
      "owner": "StacklokLabs",
      "name": "toolhive",
      "url": "https://github.com/StacklokLabs/toolhive",
      "imageUrl": "/freedevtools/mcp/pfp/StacklokLabs.webp",
      "description": "A lightweight utility designed to simplify the deployment and management of MCP servers, ensuring ease of use, consistency, and security through containerization",
      "stars": 1254,
      "forks": 121,
      "license": "Apache License 2.0",
      "language": "Go",
      "updated_at": "2025-10-04T05:06:05Z",
      "readme_content": "<p float=\"left\">\n  <picture>\n    <img src=\"docs/images/toolhive-icon-1024.png\" alt=\"ToolHive Studio logo\" height=\"100\" align=\"middle\" />\n  </picture>\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"docs/images/toolhive-wordmark-white.png\">\n    <img src=\"docs/images/toolhive-wordmark-black.png\" alt=\"ToolHive wordmark\" width=\"500\" align=\"middle\" hspace=\"20\" />\n  </picture>\n  <picture>\n    <img src=\"docs/images/toolhive.png\" alt=\"ToolHive mascot\" width=\"125\" align=\"middle\"/>\n  </picture>\n</p>\n\n[![Release][release-img]][release] [![Build status][ci-img]][ci]\n[![Coverage Status][coveralls-img]][coveralls]\n[![License: Apache 2.0][license-img]][license]\n[![Star on GitHub][stars-img]][stars] [![Discord][discord-img]][discord]\n\n# ToolHive - simplify and secure MCP servers\n\n**Run any Model Context Protocol (MCP) server ‚Äî securely, instantly, anywhere.**\n\nToolHive is the easiest way to discover, deploy, and manage MCP servers. Launch\nany MCP server in a locked-down container with a single command. No manual\nsetup, no security headaches, no runtime hassles.\n\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"docs/images/toolhive-diagram-dark.svg\">\n  <img src=\"docs/images/toolhive-diagram-light.svg\" alt=\"ToolHive diagram\" width=\"800\" style=\"padding: 20px 0\" />\n</picture>\n\n---\n\n<table>\n<tr>\n<td width=\"50%\">\n\n## Why ToolHive?\n\n- **Instant deployment:** Start any MCP server with one click or command, using\n  Docker or Kubernetes.\n- **Secure by default:** Every server runs in an isolated container with only\n  the permissions it needs. Secrets are managed securely, never in plaintext.\n- **Works everywhere:** Use the UI and CLI for local development, or the\n  Kubernetes Operator for production and scale.\n- **Seamless integration:** ToolHive auto-configures popular clients like GitHub\n  Copilot, Cursor, and more.\n\nToolHive is available as a GUI desktop app, CLI, and Kubernetes Operator.\n\n<br>\n</td>\n<td width=\"50%\" align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"docs/images/toolhive-sources-dark.svg\">\n    <img src=\"docs/images/toolhive-sources-light.svg\" alt=\"ToolHive sources diagram\" width=\"400px\" />\n  </picture>\n</td>\n</tr>\n</table>\n\n## Quick links\n\n- üìö [Documentation](https://docs.stacklok.com/toolhive/)\n- üöÄ Quickstart guides:\n  - [Desktop app](https://docs.stacklok.com/toolhive/tutorials/quickstart-ui)\n  - [CLI](https://docs.stacklok.com/toolhive/tutorials/quickstart-cli)\n  - [Kubernetes Operator](https://docs.stacklok.com/toolhive/tutorials/quickstart-k8s)\n- üí¨ [Discord](https://discord.gg/stacklok)\n\n---\n\n## Contributing\n\nWe welcome contributions and feedback from the community!\n\n- üêõ [Report issues](https://github.com/stacklok/toolhive/issues)\n- üí¨ [Join our Discord](https://discord.gg/stacklok)\n\nIf you have ideas, suggestions, or want to get involved, check out our\ncontributing guide or open an issue. Join us in making ToolHive even better!\n\nContribute to the CLI, API, and Kubernetes Operator:\n\n- ü§ù [Contributing guide](./CONTRIBUTING.md)\n- üìñ [Developer guide](./docs/README.md)\n\nContribute to the desktop UI:\n\n- üñ•Ô∏è [Desktop UI repository](https://github.com/stacklok/toolhive-studio)\n\nContribute to the documentation:\n\n- üìö [Documentation repository](https://github.com/stacklok/docs-website)\n\n---\n\n## License\n\nThis project is licensed under the [Apache 2.0 License](./LICENSE).\n\n<!-- Badge links -->\n<!-- prettier-ignore-start -->\n[release-img]: https://img.shields.io/github/v/release/stacklok/toolhive?style=flat&label=Latest%20version\n[release]: https://github.com/stacklok/toolhive/releases/latest\n[ci-img]: https://img.shields.io/github/actions/workflow/status/stacklok/toolhive/run-on-main.yml?style=flat&logo=github&label=Build\n[ci]: https://github.com/stacklok/toolhive/actions/workflows/run-on-main.yml\n[coveralls-img]: https://coveralls.io/repos/github/stacklok/toolhive/badge.svg?branch=main\n[coveralls]: https://coveralls.io/github/stacklok/toolhive?branch=main\n[license-img]: https://img.shields.io/badge/License-Apache2.0-blue.svg?style=flat\n[license]: https://opensource.org/licenses/Apache-2.0\n[stars-img]: https://img.shields.io/github/stars/stacklok/toolhive.svg?style=flat&logo=github&label=Stars\n[stars]: https://github.com/stacklok/toolhive\n[discord-img]: https://img.shields.io/discord/1184987096302239844?style=flat&logo=discord&logoColor=white&label=Discord\n[discord]: https://discord.gg/stacklok\n<!-- prettier-ignore-end -->\n\n<!-- markdownlint-disable-file first-line-heading no-inline-html -->\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "containerization",
        "stackloklabs",
        "mcp servers",
        "clients stackloklabs",
        "management mcp"
      ],
      "category": "for-clients"
    },
    "appcypher--awesome-mcp-servers": {
      "owner": "appcypher",
      "name": "awesome-mcp-servers",
      "url": "https://github.com/appcypher/awesome-mcp-servers",
      "imageUrl": "/freedevtools/mcp/pfp/appcypher.webp",
      "description": "A curated list of MCP servers",
      "stars": 4724,
      "forks": 440,
      "license": "No License",
      "language": "",
      "updated_at": "2025-10-04T09:50:22Z",
      "readme_content": "# Awesome MCP Servers ![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)\n\nA curated list of awesome Model Context Protocol (MCP) servers. MCP is an open protocol that enables AI models to securely interact with local and remote resources through standardized server implementations. This list focuses on production-ready and experimental MCP servers that extend AI capabilities through file access, database connections, API integrations, and other contextual services.\n\n<br />\n\n## ‚ö†Ô∏è Security Warning\n\n> [!WARNING]\n>  When running MCP servers without proper sandboxing, they can execute arbitrary code on your system with the same permissions as the host process. This creates significant security risks.\n>\n> **Security Risks:**\n> - **System Access**: Full access to files, network, and system resources\n> - **Code Execution**: Can run any command on your machine\n> - **Prompt Injection**: Malicious prompts could trigger unintended server actions\n> - **Data Exposure**: Sensitive data may be accessed or leaked\n>\n> **Best Practices:**\n> - Use official implementations (marked with ‚≠ê) when available\n> - Run servers in VMs or isolated environments\n> - Review code before installation\n> - Limit permissions to minimum required\n> - Monitor server activity\n\n<br />\n\n## Examples of Supported Clients\n\n|                                                                                                                                                                                          | MCP Host                                                                    | Documentation                                                                                       |\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- |\n| [<div align=\"center\"><img src=\"https://github.com/user-attachments/assets/b0ea1e57-df16-4b04-9276-1980e17ab6ec\" height=\"20\"/></div>](https://www.claudedesktop.com/)                                                                       | [Claude Desktop](https://claude.ai)                            | [Claude x MCP](https://modelcontextprotocol.io/quickstart)                                           |\n| [<div align=\"center\"><img src=\"https://zed.dev/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Flogo_icon.d67dc948.webp&w=64&q=100\" height=\"20\"/></div>](https://zed.dev/)                                                          | [Zed Editor](https://zed.dev/)                                              | [Zed x MCP](https://zed.dev/blog/mcp)                                                      |\n| [<div align=\"center\"><img src=\"https://storage.googleapis.com/sourcegraph-assets/docs/images/cody/cody-logomark-default.svg\" height=\"20\"/></div>](https://sourcegraph.com/cody)          | [Sourcegraph Cody](https://sourcegraph.com/cody)                            | [Cody x MCP](https://sourcegraph.com/blog/cody-supports-anthropic-model-context-protocol) |\n| [<div align=\"center\"><img src=\"https://cdn.prod.website-files.com/663e06c56841363663ffbbcf/664c918ec47bacdd3acdc167_favicon%408x.png\" height=\"20\"/></div>](https://sourcegraph.com/cody) | [Continue](https://www.continue.dev/)                                       | [Continue x MCP](https://blog.continue.dev/model-context-protocol)                                  |\n| [<div align=\"center\"><img src=\"https://github.com/user-attachments/assets/211d0c2b-04de-471e-b1ed-97da94a58d82\" height=\"20\"/></div>](https://github.com/Upsonic/gpt-computer-assistant)  | [GPT Computer Assistant](https://github.com/Upsonic/gpt-computer-assistant) | [GCA x MCP](https://github.com/Upsonic/gpt-computer-assistant)                                      |\n| [<div align=\"center\"><img src=\"https://raw.githubusercontent.com/danny-avila/LibreChat/0855677a36d76cafa5e064b7e346eb3f74c6af2a/client/public/assets/logo.svg\" height=\"20\"/></div>](https://www.librechat.ai/) | [LibreChat](https://www.librechat.ai/) | [LibreChat Agents x MCP](https://www.librechat.ai/docs/features/agents#model-context-protocol-mcp) |\n| [<div align=\"center\"><img src=\"https://cursor.com/favicon.ico\" height=\"20\"/></div>](https://www.cursor.com/) | [Cursor](https://www.cursor.com/) | [Cursor x MCP](https://docs.cursor.com/advanced/model-context-protocol) |\n| [<div align=\"center\"><img src=\"https://www.enconvo.com/favicon.ico\" height=\"20\"/></div>](https://www.enconvo.com/) | [Enconvo](https://www.enconvo.com/) | [Enconvo x MCP](https://docs.enconvo.com/docs/features/model-context-protocol) |\n| [<div align=\"center\"><img src=\"https://block.github.io/goose/img/logo_light.png\" height=\"20\"/></div>](https://block.github.io/goose/) | [Goose](https://block.github.io/goose/) | [Goose x MCP](https://block.github.io/goose/docs/getting-started/using-extensions) | \n| [<div align=\"center\"><img src=\"https://raw.githubusercontent.com/evilsocket/search/refs/heads/main/logo.png\" height=\"20\"/></div>](https://github.com/evilsocket/nerve) | [Nerve](https://github.com/evilsocket/nerve) | [Nerve x MCP](https://github.com/evilsocket/nerve/blob/main/docs/index.md#%EF%B8%8F-adding-tools) | \n| [<div align=\"center\"><img src=\"https://raw.githubusercontent.com/mcp-router/mcp-router/refs/heads/main/static/img/logo.svg\" height=\"20\"/></div>](https://mcp-router.net) | [MCP Router](https://github.com/mcp-router/mcp-router) | [MCP Router x MCP](https://mcp-router.net) |\n| [<div align=\"center\"><img src=\"https://raw.githubusercontent.com/pietrozullo/mcp-use/refs/heads/main/docs/favicon.svg\" height=\"20\"/></div>](https://github.com/pietrozullo/mcp-use) | [mcp-use](https://github.com/pietrozullo/mcp-use) | [mcp-use x MCP](https://docs.mcp-use.io/introduction) |\n| [<div align=\"center\"><img src=\"https://wassist.app/whatsmcp.png\" height=\"20\"/></div>](https://wassist.app/mcp/) | [WhatsMCP](https://wassist.app/mcp/) | [WhatsApp x MCP](https://wassist.app/mcp/) |\n| [<div align=\"center\"><img src=\"https://github.com/user-attachments/assets/7d5442e5-4542-4942-afde-a55d5288a40c\" height=\"20\"/></div>](https://code.visualstudio.com/) | [Visual Studio Code](https://code.visualstudio.com/) | [VS Code x MCP](https://code.visualstudio.com/docs/copilot/chat/mcp-servers) |\n\n<br />\n\n## Server Implementations\n\n- üìÇ - [File Systems](#file-systems)\n- üì¶ - [Sandbox & Virtualization](#virtualization)\n- üîÑ - [Version Control](#version-control)\n- ‚òÅÔ∏è - [Cloud Storage](#cloud-storage)\n- üóÑÔ∏è - [Databases](#databases)\n- üí¨ - [Communication](#communication)\n- üìà - [Monitoring](#monitoring)\n- üîç - [Search & Web](#search-web)\n- üó∫Ô∏è - [Location Services](#location-services)\n- üéØ - [Marketing](#marketing)\n- üìù - [Note Taking](#note-taking)\n- ‚ö° - [Cloud Platforms](#cloud-platforms)\n- ‚öôÔ∏è - [Workflow Automation](#workflow-automation)\n- ü§ñ - [System Automation](#system-automation)\n- üì± - [Social Media](#social-media)\n- üéÆ - [Gaming](#gaming)\n- üíπ - [Finance](#finance)\n- üß¨ - [Research & Data](#research-data)\n- ü§ù - [AI Services](#ai-services)\n- üíª - [Development Tools](#development-tools)\n- üìä - [Data Visualization](#data-visualization)\n- üÜî - [Identity](#identity)\n- üîó - [Aggregators](#aggregators)\n- üí¨ - [Language & Translation](#language)\n- üîí - [Security](#security)\n- üîå - [IoT](#iot)\n- üßë‚Äçüé® - [Art & Literature](#art-literature)\n- üõí - [E-Commerce](#e-commerce)\n- üì¶ - [Data Platforms](#data-platforms)\n- ü§ñ - [Robotics & Physical AI](#robotics)\n\n<sup><details>\n\n<summary>Legend</summary>\n\n- <sup>‚≠ê</sup> Official protocol implementation\n- <sup>1</sup> First implementation (when multiple implementations exist)\n- <sup>2</sup> Second implementation\n- <sup>3</sup> Third implementation\n- <sup>n</sup> Subsequent implementations\n</details></sup>\n\n<br />\n\n## Tools & Utilities\n\nSee [Helpful Tools & Utilities](#helpful-tools-&-utilities) section for tools to help manage, configure, and work with MCP servers.\n\n<br />\n\n## üìÇ <a name=\"file-systems\"></a>File Systems\n\n> Provides direct access to local file systems with configurable permissions. Enables AI models to read, write, and manage files within specified directories.\n- <img src=\"https://cdn.simpleicons.org/files/4CAF50\" height=\"14\"/> [Backup](https://github.com/hexitex/MCP-Backup-Server) - Provides file and folder backup and restoration capabilities for AI agents and code editing tools\n- <img src=\"https://cdn.simpleicons.org/files/9AD1ED\" height=\"14\"/> [FileStash](https://github.com/mickael-kerjean/filestash/tree/master/server/plugin/plg_handler_mcp) - Remote Storage Access: SFTP, S3, FTP, SMB, NFS, WebDAV, GIT, FTPS, gcloud, azure blob, sharepoint, etc... \n- <img src=\"https://cdn.simpleicons.org/files/2196F3\" height=\"14\"/> [FileSystem](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem)<sup><sup>1</sup></sup> - Direct local file system access\n- <img src=\"https://cdn.simpleicons.org/files/4A90E2\" height=\"14\"/> [FileSystem](https://github.com/mark3labs/mcp-filesystem-server)<sup><sup>2</sup></sup> - Golang implementation for local file system access\n- <img src=\"https://cdn.simpleicons.org/files/4CAF50\" height=\"14\"/> [Everything Search](https://github.com/mamertofabian/mcp-everything-search) - Lightning-fast Windows file search powered by Everything SDK\n- <img src=\"https://cdn.simpleicons.org/files/4CAF50\" height=\"14\"/> [fast-filesystem-mcp](https://github.com/efforthye/fast-filesystem-mcp) - Advanced filesystem operations with large file handling capabilities and Claude-optimized features. Provides fast file reading/writing, sequential reading for large files, directory operations, file search, and streaming writes with backup & recovery.\n- <img src=\"https://cdn.simpleicons.org/files/4CAF50\" height=\"14\"/> [llm-context](https://github.com/cyberchitta/llm-context.py) - Share code context with LLMs via Model Context Protocol or clipboard\n\n<br />\n\n## üì¶ <a name=\"virtualization\"></a>Sandbox & Virtualization\n\n> Secure sandbox environments for code execution and testing. Enables safe execution of code snippets and development workflows.\n\n- <img src=\"https://docs.microsandbox.dev/favicon.ico\" height=\"14\"/> [Microsandbox](https://github.com/microsandbox/microsandbox)<sup><sup>‚≠ê</sup></sup> - Self-hosted platform for secure execution of AI code. Great for Code Interpreter, Data Analysis, Browser Use.\n- <img src=\"https://e2b.dev/favicon.ico\" height=\"14\"/> [E2B](https://github.com/e2b-dev/mcp-server)<sup><sup>‚≠ê</sup></sup> - Secure cloud development environments for AI agents. Enables safe code execution and testing in isolated containers.\n- <img src=\"https://cdn.simpleicons.org/docker/0db7ed\" height=\"14\"/> [Docker](https://github.com/QuantGeekDev/docker-mcp) - An MCP server for Docker operations, enabling seamless container and compose stack management.\n\n<br />\n\n## üîÑ <a name=\"version-control\"></a>Version Control\n\n> Interact with Git repositories and version control platforms. Enables repository management, code analysis, pull request handling, issue tracking, and other version control operations through standardized APIs.\n\n- <img src=\"https://cdn.simpleicons.org/github/8A8A8A\" height=\"14\"/> [GitHub](https://github.com/github/github-mcp-server)<sup><sup>1</sup></sup> - GitHub API integration for repository management, PRs, issues, and more\n- <img src=\"https://cdn.simpleicons.org/github/8A8A8A\" height=\"14\"/> [GitHub](https://github.com/kurdin/github-repos-manager-mcp)<sup><sup>2</sup></sup> - Token-based GitHub automation management. No Docker for optimal performance, Flexible configuration for fine-grained control, 80+ tools with direct API integration.\n- <img src=\"https://cdn.simpleicons.org/gitlab/FC6D26\" height=\"14\"/> [GitLab](https://github.com/modelcontextprotocol/servers/tree/main/src/gitlab) - GitLab platform integration for project management and CI/CD operations\n- <img src=\"https://cdn.simpleicons.org/git/F05032\" height=\"14\"/> [Git](https://github.com/modelcontextprotocol/servers/tree/main/src/git) - Direct Git repository operations including reading, searching, and analyzing local repositories\n- <img src=\"https://cdn.simpleicons.org/phabricator/5865F2\" height=\"14\"/> [Phabricator](https://github.com/baba786/phabricator-mcp-server) - Phabricator API integration for repository and project management\n- <img src=\"https://cdn.simpleicons.org/git/F05032\" height=\"14\"/> [Gitingest-MCP](https://github.com/puravparab/Gitingest-MCP) - Gitingest integration providing prompt friendly summmaries of Github repos\n\n\n<br />\n\n## ‚òÅ <a name=\"cloud-storage\"></a>Cloud Storage\n\n> Access and manage files stored in cloud storage platforms. Enables searching, reading, and organizing cloud-stored documents and data.\n\n- <img src=\"https://cdn.simpleicons.org/googledrive/4285F4\" height=\"14\"/> [Google Drive](https://github.com/modelcontextprotocol/servers/tree/main/src/gdrive) - Google Drive integration for file access, search, and management\n- <img src=\"https://www.box.com/themes/custom/box/favicons/favicon.ico\" height=\"14\"/> [Box](https://developer.box.com/guides/box-mcp/)<sup><sup>‚≠ê</sup></sup> - Box MCP Server allows third party AI agents from platforms like Copilot Studio, Cursor, Claude for Desktop to access Box content seamlessly. It extends the agent's capabilities by allowing it to perform actions related to content stored in Box.\n- <img src=\"https://framerusercontent.com/images/ijlYG00LOcMD6zR1XLMxHbAwZkM.png\" height=\"14\" /> [VideoDB](https://github.com/video-db/agent-toolkit/tree/main/modelcontextprotocol)<sup><sup>‚≠ê</sup></sup> - A serverless video database to easily store, index, search, and stream videos. VideoDB uses AI to automatically tag scenes, generate accurate transcriptions, and quickly retrieve video moments with simple queries.\n- <img src=\"https://www.microsoft.com/favicon.ico\" height=\"14\"/> [Microsoft 365](https://github.com/softeria/ms-365-mcp-server) - MCP server that connects to the whole Microsoft 365 suite (Microsoft Office, Outlook, etc.) using Graph API (including mail, files, Excel, calendar)\n\n<br />\n\n## üóÑÔ∏è <a name=\"databases\"></a>Databases\n\n> Secure database access with schema inspection capabilities. Enables querying and analyzing data while maintaining read-only safety by default.\n\n- <img src=\"https://cdn.simpleicons.org/postgresql/5865F2\" height=\"14\"/> [PostgreSQL](https://github.com/modelcontextprotocol/servers/tree/main/src/postgres) - PostgreSQL database integration with schema inspection and query capabilities\n- <img src=\"https://cdn.simpleicons.org/sqlite/0F80CC\" height=\"14\"/> [SQLite](https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite) - SQLite database operations with built-in analysis features\n- <img src=\"https://cdn.simpleicons.org/duckdb/FDC000\" height=\"14\"/> [DuckDB](https://github.com/ktanaka101/mcp-server-duckdb) - DuckDB database integration with schema inspection and query capabilities\n- <img src=\"https://cdn.simpleicons.org/libreoffice/18A303\" height=\"14\"/> [Excel](https://github.com/haris-musa/excel-mcp-server) - Excel workbook manipulation including data reading/writing, worksheet management, formatting, charts, and pivot tables\n- <img src=\"https://cdn.simpleicons.org/googlebigquery/669DF6\" height=\"14\"/> [BigQuery](https://github.com/LucasHild/mcp-server-bigquery)<sup><sup>1</sup></sup> - BigQuery database integration with schema inspection and query capabilities\n- <img src=\"https://cdn.simpleicons.org/googlebigquery/669DF6\" height=\"14\"/> [BigQuery](https://github.com/ergut/mcp-bigquery-server)<sup><sup>2</sup></sup> - A BigQuery MCP server for read-only SQL queries and schema exploration (available on npm)\n- <img src=\"https://neon.tech/favicon.ico\" height=\"14\"/> [Neon](https://github.com/neondatabase/mcp-server-neon)<sup><sup>‚≠ê</sup></sup> - Neon MCP Server. Allows natural language interactions with Neon for database management.\n- <img src=\"https://qdrant.tech/img/brand-resources-logos/logomark.svg\" height=\"14\"/> [Qdrant](https://github.com/qdrant/mcp-server-qdrant/)<sup><sup>‚≠ê</sup></sup> - A Qdrant MCP server for keeping and retrieving memories in the Qdrant vector search engine.\n- <img src=\"https://cdn.simpleicons.org/mongodb/47A248\" height=\"14\"/> [MongoDB](https://github.com/kiliczsh/mcp-mongo-server) - A Model Context Protocol Server for querying and analyzing MongoDB collections.\n- <img src=\"https://cdn.simpleicons.org/mongodb/47A248\" height=\"14\"/> [MongoDB Lens](https://github.com/furey/mongodb-lens) - Full featured MCP Server for MongoDB databases.\n- <img src=\"https://cdn.simpleicons.org/mysql\" height=\"14\"/> [MySQL](https://github.com/designcomputer/mysql_mcp_server) - MySQL database integration with configurable access controls and schema inspection\n- <img src=\"https://cdn.simpleicons.org/airtable\" height=\"14\"/> [Airtable](https://github.com/domdomegg/airtable-mcp-server) - Read and write access to Airtable databases, with schema inspection.\n- <img src=\"https://cdn.simpleicons.org/snowflake\" height=\"14\"/> [Snowflake](https://github.com/isaacwasserman/mcp-snowflake-server) - Snowflake database integration with read/write capabilities and insight tracking.\n- <img src=\"https://jiejue.obs.ap-southeast-1.myhuaweicloud.com/20250209205317622.webp\" height=\"14\"/> [DBUtils](https://github.com/donghao1393/mcp-dbutils) - A unified database access service for MCP that seamlessly integrates PostgreSQL and SQLite with a clean abstraction layer.\n- <img src=\"https://www.pingcap.com/favicon.ico\" height=\"14\"/> [TiDB](https://github.com/c4pt0r/mcp-server-tidb) - MCP server implementation for TiDB (serverless) database.\n- <img src=\"https://cdn.nocodb.com/marketing-site/20250120104552/images/favicon.png\" height=\"14\"/> [NocoDB](https://github.com/edwinbernadus/nocodb-mcp-server) - Read and write access to NocoDB database.\n- <img src=\"https://www.couchbase.com/wp-content/uploads/2023/10/couchbase-favicon.svg\" height=\"14\"/> [Couchbase](https://github.com/Couchbase-Ecosystem/mcp-server-couchbase)<sup><sup>‚≠ê</sup></sup> - MCP server to interact with the data stored in Couchbase clusters including natural language querying. \n- <img src=\"https://avatars.githubusercontent.com/u/1529926?s=48&v=4\" height=\"14\"/> [Redis](https://github.com/redis/mcp-redis)<sup><sup>‚≠ê</sup></sup> - A natural language interface designed for agentic applications to efficiently manage and search data in Redis.\n- <img src=\"https://framerusercontent.com/images/ijlYG00LOcMD6zR1XLMxHbAwZkM.png\" height=\"14\" /> [VideoDB Director](https://github.com/video-db/agent-toolkit/tree/main/modelcontextprotocol)<sup><sup>‚≠ê</sup></sup> - Create AI-powered video workflows including automatic editing, content moderation, voice cloning, highlight generation, and searchable video moments‚Äîall accessible via simple APIs and intuitive chat-based interfaces.\n\n<br />\n\n## üí¨ <a name=\"communication\"></a>Communication\n\n> Integration with communication platforms for message management and channel operations. Enables AI models to interact with team communication tools.\n\n- <img src=\"https://cdn.simpleicons.org/slack/E01E5A\" height=\"14\"/> [Slack](https://github.com/korotovsky/slack-mcp-server) - The most powerful MCP Slack Server with Stdio and SSE transports, Proxy support and no permission requirements on Slack Workspace.\n- <img src=\"https://www.line.me/favicon-32x32.png\" height=\"14\" /> [LINE Official Account](https://github.com/line/line-bot-mcp-server)<sup><sup>‚≠ê</sup></sup> - Integrates the LINE Messaging API to connect an AI Agent to the LINE Official Account.\n- <img src=\"https://cdn.simpleicons.org/linear/5E6AD2\" height=\"14\"/> [Linear](https://github.com/jerhadf/linear-mcp-server) - Linear MCP Server. Provides integration with Linear's issue tracking system through MCP.\n- <img src=\"https://cdn.simpleicons.org/atlassian/0052CC\" height=\"14\"/> [Atlassian](https://github.com/sooperset/mcp-atlassian) - Comprehensive integration with Atlassian suite including Confluence for documentation management and Jira for issue tracking.\n- <img src=\"https://carbonvoice.app/favicon.ico\" height=\"14\"/> [Carbon Voice](https://github.com/PhononX/cv-mcp-server)<sup><sup>‚≠ê</sup></sup> - MCP Server that connects AI Agents to [Carbon Voice](https://getcarbon.app). Create, manage, and interact with voice messages, conversations, direct messages, folders, voice memos, AI actions and more in [Carbon Voice](https://getcarbon.app).\n- <img src=\"https://m2tg1pnwn0.ufs.sh/f/GMqNN8nd9I8l9tUbmif1CnFX8Baqr7mHeicYu0AULDyNVWJE\" height=\"14\"/> [ntfy](https://github.com/gitmotion/ntfy-me-mcp) - An ntfy MCP server for sending/fetching ntfy notifications to your self-hosted ntfy.sh server from AI Agents üì§ (supports secure token auth & more - use with npx or docker!)\n\n<br />\n\n## üìà <a name=\"monitoring\"></a>Monitoring\n\n> Access and analyze application monitoring data. Enables AI models to review error reports and performance metrics.\n\n- <img src=\"https://metoro.io/static/images/logos/Metoro.svg\" height=\"14\"/> [Metoro](https://github.com/metoro-io/metoro-mcp-server) - Query and interact with kubernetes environments monitored by Metoro\n- <img src=\"https://raygun.com/favicon.ico\" height=\"14\"/> [Raygun](https://github.com/MindscapeHQ/mcp-server-raygun) - Raygun API V3 integration for crash reporting and real user monitoring\n- <img src=\"https://cdn.simpleicons.org/sentry/546E7A\" height=\"14\"/> [Sentry](https://github.com/modelcontextprotocol/servers/tree/main/src/sentry) - Sentry.io integration for error tracking and performance monitoring\n- <img src=\"https://cdn.simpleicons.org/letsencrypt/003A70\" height=\"14\"/> [sslmon](https://github.com/firesh/sslmon-mcp) - Domain/HTTPS/SSL domain registration information and SSL certificate monitoring capabilities. Query domain registration and expiration information, and SSL certificate information and validity status for any domain.\n- <img src=\"https://aiops.drdroid.io/favicon.ico\" height=\"14\"/> [Signoz](https://github.com/DrDroidLab/signoz-mcp-server) - Comprehensive integration with [Signoz APIs](https://signoz.io/docs/userguide/apis/) and [documentation](https://signoz.io/docs/) for monitoring, observability, and debugging tasks related to your Signoz instances.\n- <img src=\"https://avatars.githubusercontent.com/u/174736222?s=200&v=4\" height=\"14\"/> [VictoriaMetrics](https://github.com/VictoriaMetrics-Community/mcp-victoriametrics) - Comprehensive integration with [VictoriaMetrics APIs](https://docs.victoriametrics.com/victoriametrics/url-examples/) and [documentation](https://docs.victoriametrics.com/) for monitoring, observability, and debugging tasks related to your VictoriaMetrics instances.\n\n<br />\n\n## üîç <a name=\"search-web\"></a>Search & Web\n\n> Web content access and automation capabilities. Enables searching, scraping, and processing web content in AI-friendly formats.\n\n- <img src=\"https://cdn.simpleicons.org/puppeteer/00D8A2\" height=\"14\"/> [Puppeteer](https://github.com/modelcontextprotocol/servers/tree/main/src/puppeteer) - Browser automation for web scraping and interaction\n- <img src=\"https://cdn.simpleicons.org/brave/FB542B\" height=\"14\"/> [Brave Search](https://github.com/modelcontextprotocol/servers/tree/main/src/brave-search) - Web search capabilities using Brave's Search API\n- <img src=\"https://github.com/user-attachments/assets/5d9346e8-7821-4202-80cd-25e0678d3400\" height=\"14\"/> [Bright Data](https://github.com/luminati-io/brightdata-mcp) - Discover, extract, and interact with the web - one interface powering automated access across the public internet.\n- <img src=\"https://avatars.githubusercontent.com/u/204530939?s=200&v=4\" height=\"14\"/> [Dumpling AI](https://github.com/Dumpling-AI/mcp-server-dumplingai) - Access data, web scraping, and document conversion APIs by [Dumpling AI](https://www.dumplingai.com/)\n- <img src=\"https://cdn.simpleicons.org/curl/00ADD8\" height=\"14\"/> [Fetch](https://github.com/modelcontextprotocol/servers/tree/main/src/fetch) - Efficient web content fetching and processing for AI consumption\n- <img src=\"https://cdn.simpleicons.org/kagi/4173FF\" height=\"14\"/> [Kagi Search](https://github.com/ac3xx/mcp-servers-kagi) - TypeScript-based MCP server that integrates the Kagi Search API\n- <img src=\"https://www.tryleap.ai/assets/integrations/exa.svg\" height=\"14\"/> [Exa Search](https://github.com/exa-labs/exa-mcp-server)<sup><sup>‚≠ê</sup></sup> - Integration with Exa AI Search API for real-time web information retrieval\n- <img src=\"https://cdn.simpleicons.org/newyorktimes/E34234\" height=\"14\"/> [NYTimes](https://github.com/angheljf/nyt) - Search articles using the NYTimes API\n- <img src=\"https://cdn.simpleicons.org/googlenews/4285F4\" height=\"14\"/> [Google News](https://github.com/ChanMeng666/server-google-news) - Google News search with automatic categorization, multi-language support, and comprehensive search options\n- <img src=\"https://avatars.githubusercontent.com/u/175926811?v=4\" height=\"14\"/> [Scrapeless](https://github.com/scrapeless-ai/scrapeless-mcp-server) - The Scrapeless Model Context Protocol service acts as an MCP server connector to the Google SERP API, enabling web search within the MCP ecosystem without leaving it. \n- <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/7e/Vector_search_icon.svg/800px-Vector_search_icon.svg.png\" height=\"14\"/> [Search1API](https://github.com/fatwang2/search1api-mcp) - Search via search1api (requires paid API key)\n- <img src=\"https://github.com/user-attachments/assets/3c1cb503-11cc-4172-ac4e-73497b5eb3b8\" height = \"14\"> [RivalSearchMCP](https://github.com/damionrashford/RivalSearchMCP) - A powerful MCP server providing a suite of tools for web search, content discovery, and automated research workflows.\n- <img src=\"https://tavily.com/favicon.ico\" height=\"14\"/> [Tavily](https://github.com/Tomatio13/mcp-server-tavily) - Tavily AI search API integration\n- <img src=\"https://cdn.simpleicons.org/arxiv/B31B1B\" height=\"14\"/> [ArXiv](https://github.com/blazickjp/arxiv-mcp-server) - Search ArXiv research papers\n- <img src=\"https://github.com/user-attachments/assets/6f9c9a70-01c8-4255-abbe-66faf146970e\" height=\"14\"> [PapersWithCode](https://github.com/hbg/mcp-paperswithcode) - Search research papers, conferences, and codebases through PapersWithCode API\n- <img src=\"https://playwright.dev/img/playwright-logo.svg\" height=\"14\"/> [Playwright](https://github.com/executeautomation/mcp-playwright) - A Model Context Protocol server that provides browser automation capabilities using Playwright.\n- <img src=\"https://cdn.simpleicons.org/searxng\" height=\"14\"/> [Websearch](https://github.com/mnhlt/WebSearch-MCP) - Self-hosted Websearch service.\n- <img src=\"https://cdn.simpleicons.org/firefoxbrowser\" height=\"14\"/> [Browser Control](https://github.com/eyalzh/browser-control-mcp) - An MCP server paired with a browser extension allowing local browser control. \n- <img src=\"https://blog.apify.com/content/images/2025/02/Apify_logo.png\" height=\"14\"/> [Apify Actors](https://github.com/apify/actors-mcp-server) - Use 4,000+ pre-built cloud tools, known as Actors, to extract data from websites, e-commerce, social media, search engines, maps, and more.\n- <img src=\"https://blog.apify.com/content/images/2025/02/Apify_logo.png\" height=\"14\"/> [RAG Web Browser](https://github.com/apify/mcp-server-rag-web-browser) - An MCP server for Apify's open-source RAG Web Browser Actor to perform web searches, scrape URLs, and return content in Markdown.\n- <img src=\"https://framerusercontent.com/images/0Bw7GwbNXUBxOAp9pyM0VPOlphg.png\" height=\"14\" /> [Skyvern](https://github.com/Skyvern-AI/skyvern/tree/main/integrations/mcp) - MCP to let Claude or your own LLM control your browser\n- <img src=\"https://searx.space/favicon.png\" height=\"14\" /> [Ihor-Sokoliuk/MCP-SearXNG](https://github.com/ihor-sokoliuk/mcp-searxng) - A Model Context Protocol Server for [SearXNG](https://docs.searxng.org)\n- <img src=\"https://pragmar.com/media/static/images/mcp-server-webcrawl/favicon.png\" height=\"14\" /> [mcp-server-webcrawl](https://github.com/pragmar/mcp-server-webcrawl) - Advanced search and retrieval for web crawler data. Supports WARC, wget, Katana, SiteOne, and InterroBot crawlers.\n\n<br />\n\n## üó∫Ô∏è <a name=\"location-services\"></a>Location Services\n\n> Geographic and location-based services integration. Enables access to mapping data, directions, and place information.\n\n- <img src=\"https://campertunity.com/assets/icon/favicon.ico\" height=\"14\"/> [Campertunity](https://github.com/campertunity/mcp-server) - Search campgrounds around the world on campertunity, check availability, and provide booking links\n- <img src=\"https://cdn.simpleicons.org/googlemaps/4285F4\" height=\"14\"/> [Google Maps](https://github.com/modelcontextprotocol/servers/tree/main/src/google-maps) - Google Maps integration for location services, routing, and place details\n- <img src=\"https://static.iplocate.io/custom/logo-square-rounded.png\" height=\"14\"/> [IPLocate](https://github.com/iplocate/mcp-server-iplocate) - Look up IP address geolocation, network information, detect proxies and VPNs, and find abuse contact details using IPLocate.io\n- <img src=\"https://www.ip2location.io/favicon.ico\" height=\"14\"/> [IP2Location.io](https://github.com/ip2location/mcp-ip2location-io) - IP2Location.io API integration to retrieve the geolocation information for an IP address.\n- <img src=\"https://www.qgis.org/styleguide/visual/qgis-logo.svg\" height=\"14\"/> [QGIS](https://github.com/jjsantos01/qgis_mcp) - connects QGIS Desktop to Claude AI through the MCP. This integration enables prompt-assisted project creation, layer loading, code execution, and more.\n\n\n<br />\n\n## üéØ <a name=\"marketing\"></a>Marketing\n\n> Tools that help marketers write better content and run better campaigns.\n\n- <img src=\"https://cdn.simpleicons.org/analytics/4285F4\" height=\"14\"/> [Agent Mindshare](https://agentmindshare.com) - Track and monitor AI agent mindshare across platforms - measure brand visibility in AI conversations.\n- <img src=\"https://openstrategypartners.com/fileadmin/Bilder/logo/OSP_logo_colors_green1.png\" height=\"14\"/> [Open Strategy Partners Marketing Tools](https://github.com/open-strategy-partners/osp_marketing_tools)<sup><sup>‚≠ê</sup></sup> - a standardized editing code system, writing guidelines, web metadata generator, and product communication framework.\n- <img src=\"https://cdn.simpleicons.org/fathom/9187FF\" height=\"14\"/> [Fathom Analytics](https://github.com/mackenly/mcp-fathom-analytics) - Access Fathom Analytics data and reports about your sites\n- <img src=\"https://static.xx.fbcdn.net/rsrc.php/y9/r/tL_v571NdZ0.svg\" height=\"14\"/> [Facebook Ads](https://github.com/gomarble-ai/facebook-ads-mcp-server) - MCP server acting as an interface to the Facebook Ads, enabling programmatic access to Facebook Ads data and management features.\n- <img src=\"https://img.icons8.com/?size=48&id=ui4CTPMMDCFh&format=png\" height=\"14\"/> [Google Ads](https://github.com/gomarble-ai/google-ads-mcp-server) - MCP server acting as an interface to the Google Ads, enabling programmatic access to Google Ads data and management features.\n<br />\n\n## üìù <a name=\"note-taking\"></a>Note Taking\n\n> Integration with note-taking applications and personal knowledge management tools. Enables access to notes, documents, and personal information stores.\n- <img src=\"https://static.wikia.nocookie.net/logopedia/images/2/25/Apple_Books_%28iOS%29_2024_dark.svg/revision/latest?cb=20240616234654\" height=\"14\"/> [Apple Books](https://github.com/vgnshiyer/apple-books-mcp) - Transform your Apple Books to a queryable knowledge base.\n- <img src=\"https://github.com/onebirdrocks/ebook-mcp/raw/refs/heads/main/favicon.png\" alt=\"ebook-mcp Logo\" height=\"14\" /> [eBook-mcp](https://github.com/onebirdrocks/ebook-mcp) - A lightweight MCP server that allows LLMs to read and interact with your personal PDF and EPUB ebooks on your local machine. Ideal for building AI reading assistants or chat-based ebook interfaces.\n- <img src=\"https://cdn.simpleicons.org/obsidian/7C3AED\" height=\"14\"/> [Obsidian](https://github.com/MarkusPfundstein/mcp-obsidian)<sup><sup>1</sup></sup> - Obsidian vault integration with tools for file management, search, and content manipulation\n- <img src=\"https://cdn.simpleicons.org/obsidian/7C3AED\" height=\"14\"/> [Obsidian](https://github.com/calclavia/mcp-obsidian)<sup><sup>2</sup></sup> - Alternative implementation for reading and searching Markdown notes\n- <img src=\"https://cdn.simpleicons.org/notion/787878\" height=\"14\"/> [Notion](https://github.com/danhilse/notion_mcp)<sup><sup>1</sup></sup> - Notion API integration for managing personal todo lists and notes\n- <img src=\"https://cdn.simpleicons.org/notion/787878\" height=\"14\"/> [Notion](https://github.com/suekou/mcp-notion-server)<sup><sup>2</sup></sup> - Alternative implementation for Notion API integration\n- <img src=\"https://cdn.simpleicons.org/apple/999999\" height=\"14\"/> [Apple Notes](https://github.com/sirmews/apple-notes-mcp) - Read from local Apple Notes database (macOS only)\n- <img src=\"https://pipedream.com/s.v0/app_Noh9dw/logo/orig\" height=\"14\"/> [Slite](https://github.com/fajarmf/slite-mcp) - Model Context Protocol server for Slite integration. Search and retrieve notes, browse note hierarchies, and access content from your Slite workspace.\n- <img src=\"https://cdn.simpleicons.org/todoist/E44332\" height=\"14\"/> [Todoist](https://github.com/abhiz123/todoist-mcp-server) - An MCP server implementation for Todoist, enabling natural language task management.\n- <img src=\"https://cdn.simpleicons.org/googlekeep/FFBB00\" height=\"14\"/> [Google Keep](https://github.com/feuerdev/keep-mcp) - Read, create, update and delete Google Keep notes.\n\n<br />\n\n## ‚ö° <a name=\"cloud-platforms\"></a>Cloud Platforms\n\n> Cloud platform service integration. Enables management and interaction with cloud infrastructure and services.\n\n- <img src=\"https://cdn.simpleicons.org/cloudflare/F38020\" height=\"14\"/> [Cloudflare](https://github.com/cloudflare/mcp-server-cloudflare)<sup><sup>‚≠ê</sup></sup> - Integration with Cloudflare services including Workers, KV, R2, and D1\n- <img src=\"https://cdn.simpleicons.org/kubernetes/326CE5\" height=\"14\"/> [Kubernetes](https://github.com/strowk/mcp-k8s-go)<sup><sup>1</sup></sup> - Kubernetes cluster operations through MCP\n- <img src=\"https://cdn.simpleicons.org/kubernetes/326CE5\" height=\"14\"/> [Kubernetes](https://github.com/weibaohui/k8m)<sup><sup>2</sup></sup> - Kubernetes  multi-cluster  management and operations, featuring a management ui, logging, and nearly 50 built-in tools covering common DevOps and development scenarios. Supports both standard and CRD resources.\n- <img src=\"https://cdn.simpleicons.org/kubernetes/326CE5\" height=\"14\"/> [MKP](https://github.com/StacklokLabs/mkp)<sup><sup>3</sup></sup> - Model Kontext Protocol Server for Kubernetes with native Go implementation, direct API integration, and comprehensive resource management\n- <img src=\"https://tinybird.co/favicon.ico\" height=\"14\"/> [Tinybird](https://github.com/tinybirdco/mcp-tinybird)<sup><sup>‚≠ê</sup></sup> - Interact with a Tinybird Workspace from any MCP client.\n\n<br />\n\n## ‚öôÔ∏è <a name=\"workflow-automation\"></a>Workflow Automation\n\n> Integration with workflow automation platforms allows AI models to execute workflows and retrieve data back to their systems.\n\n- <img src=\"https://www.make.com/favicon.ico\" height=\"14\"/> [Make](https://github.com/integromat/make-mcp-server)<sup><sup>‚≠ê</sup></sup> - Turn Make scenarios into callable tools for AI assistants.\n- <img src=\"https://www.taskade.com/favicon.ico\" height=\"14\"/> [Taskade MCP](https://github.com/taskade/mcp)<sup><sup>‚≠ê</sup></sup> - Official Taskade MCP server + OpenAPI ‚Üí MCP codegen to build AI agent tools from any API and connect Taskade to Claude, Cursor, and more.\n\n<br />\n\n## ü§ñ <a name=\"system-automation\"></a>System Automation\n\n> Tools for shell access, system control, and task automation. Enables AI models to execute commands and interact with the operating system.\n\n- <img src=\"https://api.iconify.design/mdi:console.svg?color=%2390EE90\" height=\"14\"/> [Shell](https://github.com/rusiaaman/wcgw) - Autonomous shell execution and computer control (Mac)\n- <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/Windows_logo_-_2021.svg/1024px-Windows_logo_-_2021.svg.png\" height=\"14\"/> [Windows CLI](https://github.com/SimonB97/win-cli-mcp-server) - Windows CLI MCP Server for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, and Git Bash shells.\n- <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/Windows_logo_-_2021.svg/1024px-Windows_logo_-_2021.svg.png\" height=\"14\"/> [Windows Control](https://github.com/Cheffromspace/nutjs-windows-control) - Windows automation MCP server providing mouse, keyboard, screen capture, clipboard, and window management capabilities using NutJS.\n- <img src=\"https://cdn.simpleicons.org/gnometerminal/2196F3\" height=\"14\"/> [Command Line](https://github.com/phialsbasement/cmd-mcp-server) - MCP server allowing any and all command execution over CMD(BE CAREFUL).\n- <img src=\"https://cdn.simpleicons.org/apple/999999\" height=\"14\"/> [Apple Shortcuts](https://github.com/recursechat/mcp-server-apple-shortcuts) - An MCP Server Integration with Apple Shortcuts\n\n<br />\n\n## üì± <a name=\"social-media\"></a>Social Media\n\n> Integration with social media platforms and content sharing services. Enables interaction with social networks and content platforms.\n\n- <img src=\"https://cdn.simpleicons.org/bluesky/0085FF\" height=\"14\"/> [BlueSky](https://github.com/keturiosakys/bluesky-context-server) - Bluesky API integration for querying and searching feeds and posts\n- <img src=\"https://cdn.simpleicons.org/youtube/FF0000\" height=\"14\"/> [YouTube](https://github.com/anaisbetts/mcp-youtube)<sup><sup>1</sup></sup> - YouTube integration using yt-dlp for subtitle downloading and video analysis\n- <img src=\"https://cdn.simpleicons.org/youtube/FF0000\" height=\"14\"/> [YouTube](https://github.com/kimtaeyoon83/mcp-server-youtube-transcript)<sup><sup>2</sup></sup> - Alternative implementation for fetching YouTube subtitles and transcripts\n- <img src=\"https://cdn.simpleicons.org/spotify/1DB954\" height=\"14\"/> [Spotify](https://github.com/varunneal/spotify-mcp) - Connects with Spotify for playback control and track/album/artist/playlist management.\n- <img src=\"https://cdn.worldvectorlogo.com/logos/tiktok-icon-2.svg\" height=\"14\"/> [TikTok](https://github.com/Seym0n/tiktok-mcp) - TikTok integration for getting post details and video's subtitles\n\n<br />\n\n## üéÆ <a name=\"gaming\"></a>Gaming\n\n> Gaming data and Game Development tools.\n\n- <img src=\"https://cdn.simpleicons.org/unity/899499\" height=\"14\"/> [Unity Engine](https://github.com/IvanMurzak/Unity-MCP)<sup><sup>1</sup></sup> - Tools for Unity Editor and for a game made with Unity\n- <img src=\"https://cdn.simpleicons.org/unity/899499\" height=\"14\"/> [UnityEngine](https://github.com/CoderGamester/mcp-unity)<sup><sup>2</sup></sup> - Unity3d Game Engine integration for game development\n- <img src=\"https://cdn.simpleicons.org/unity/899499\" height=\"14\"/> [Unity Engine](https://github.com/codemaestroai/advanced-unity-mcp)<sup><sup>3</sup></sup> - Advanced Unity MCP from Code Maestro. Build, debug, profile, and manage assets, scenes, and scripts with natural language via MCP.\n\n<br />\n\n## üíπ <a name=\"finance\"></a>Finance\n\n> Financial data and cryptocurrency information services.\n\n- <img src=\"https://docs.octagonagents.com/logo.svg\" alt=\"Octagon Logo\" height=\"14\"/> [Octagon](https://github.com/OctagonAI/octagon-mcp-server)<sup><sup>‚≠ê</sup></sup> - Deliver real-time market intelligence with extensive private and public market data.\n- <img src=\"https://cdn.simpleicons.org/coinmarketcap/FF8C00\" height=\"14\"/> [CoinMarket](https://github.com/anjor/coinmarket-mcp-server) - Coinmarket API integration for cryptocurrency data\n- <img src=\"https://www.chargebee.com/static/resources/brand/favicon.png\" height=\"14\"> [Chargebee](https://github.com/chargebee/agentkit/tree/main/modelcontextprotocol)<sup><sup>‚≠ê</sup></sup> - MCP Server that connects AI agents to [Chargebee platform](https://www.chargebee.com).\n- <img src=\"https://dexpaprika.com/favicon.ico\" height=\"14\"/> [DexPaprika](https://github.com/donbagger/dexpaprika-mcp-server)<sup><sup>‚≠ê</sup></sup> - Comprehensive cryptocurrency and DEX data API across multiple blockchains, providing real-time token pricing, liquidity pools, and OHLCV data for market analysis\n- <img src=\"https://www.mercadopago.com/favicon.ico\" height=\"14\" alt=\"MercadoPago Logo\" /> [Mercado Pago](https://mcp.mercadopago.com/) - Mercado Pago's official MCP server, offering tools to interact with our API, simplifing tasks and product integration.\n- <img src=\"https://www.paypalobjects.com/webstatic/mktg/logo/pp_cc_mark_74x46.jpg\" height=\"14\"> [PayPal](https://github.com/paypal/agent-toolkit/tree/main/modelcontextprotocol)<sup><sup>‚≠ê</sup></sup> - The PayPal Agent Toolkit enables popular agent frameworks including Model Context Protocol (MCP) to integrate with PayPal APIs through function calling.\n- <img src=\"https://cdn.simpleicons.org/stripe\" height=\"14\"/> [Stripe](https://github.com/stripe/agent-toolkit/tree/main)<sup><sup>‚≠ê</sup></sup> - Allows you to integrate with Stripe APIs\n- <img src=\"https://pub.pbkrs.com/files/202211/TNosrY77nCxm6rtU/logo-without-title.svg\" height=\"14\"/> [LongPort OpenAPI](https://github.com/longportapp/openapi/tree/main/mcp)<sup><sup>‚≠ê</sup></sup> - Provides real-time stock market data, provides AI access analysis and trading capabilities through MCP.\n- <img src=\"https://zbd.gg/favicon.ico\" height=\"14\"/> [ZBD](https://github.com/zebedeeio/zbd-payments-typescript-sdk/tree/main/packages/mcp-server)<sup><sup>‚≠ê</sup></sup> - Interact with ZBD's payment processing APIs for instant global payments with Bitcoin and Lightning Network\n\n<br />\n\n## üß¨ <a name=\"research-data\"></a>Research & Data\n\n> Access to research papers, genetic data, and specialized datasets.\n\n- <img src=\"https://cdn.simpleicons.org/arxiv/B31B1B\" height=\"14\"/> [ArXiv](https://github.com/blazickjp/arxiv-mcp-server) - Search ArXiv research papers\n- <img src=\"https://api.iconify.design/mdi:dna.svg?color=%23E34234\" height=\"14\"/> [Ancestry](https://github.com/reeeeemo/ancestry-mcp) - Read .ged files and genetic data\n- <img src=\"https://probe.dev/favicon.ico\" height=\"14\"/> [Probe.dev](https://mcp.probe.dev) - Professional media analysis and validation MCP server with FFprobe, MediaInfo, and comprehensive reporting capabilities\n- <img src=\"https://cdn.simpleicons.org/apple/7ED957\" height=\"14\"/> [OpenNutrition](https://github.com/deadletterq/mcp-opennutrition) - Search 300,000+ foods, nutrition facts, and barcodes from the OpenNutrition database\n- <img src=\"https://congressmcp.lawgiver.ai/favicon.svg\" height=\"14\"/> [Congress](https://github.com/amurshak/congressMCP) - Query and reeason about legislative data from Congress.gov\n\n<br />\n\n## ü§ù <a name=\"ai-services\"></a>AI Services\n\n> Integration with AI and machine learning services.\n\n- <img src=\"https://agentset.ai/screenshots/logo.png\" height=\"14\"/> [Agentset AI](https://github.com/agentset-ai/mcp-server) -  RAG on your data using MCP protocol\n- <img src=\"https://cdn.simpleicons.org/openai/00A67E\" height=\"14\"/> [OpenAI](https://github.com/pierrebrunelle/mcp-server-openai) - Query OpenAI models directly from Claude using MCP protocol\n- <img src=\"https://cdn.simpleicons.org/openai/00A67E\" height=\"14\"/> [OpenAI Compatible Chat](https://github.com/pyroprompts/any-chat-completions-mcp) - Chat with models from OpenAI-compatible APIs (Perplexity, Groq, xAI, etc.)\n- <img src=\"https://cdn.simpleicons.org/perplexity\" height=\"14\"/> [Perplexity](https://github.com/tanigami/mcp-server-perplexity) Chat with Perplexity via MCP\n- <img src=\"https://cloud.llamaindex.ai/favicon.ico\" height=\"14\"/> [LlamaCloud](https://github.com/run-llama/mcp-server-llamacloud) - LlamaCloud MCP Server. A TypeScript-based MCP server connecting to a managed index on LlamaCloud.\n- <img src=\"https://huggingface.co/favicon.ico\" height=\"14\"/> [HuggingFace Spaces](https://github.com/evalstate/mcp-hfspace) - Use HuggingFace spaces from your MCP Client. Supports Images, Audio, Text and more.\n- <img src=\"https://piapi.ai/piapi_favicon.webp\" height=\"14\"> [PiAPI](https://github.com/apinetwork/piapi-mcp-server) - PiAPI MCP server makes user able to generate media content with Midjourney/Flux/Kling/Hunyuan/Udio/Trellis directly from Claude or any other MCP-compatible apps.\n- <img src=\"https://www.chronulus.com/favicon/chronulus-logo-blue-on-alpha-square-128x128.ico\" alt=\"Chronulus AI Logo\" height=\"14\" width=\"14\"> [Chronulus AI](https://github.com/ChronulusAI/chronulus-mcp) -  Predict anything with Chronulus AI multimodal forecasting and prediction agents ([Watch Demos on Youtube](https://youtube.com/playlist?list=PLPLu09ZbT8KKS04V6SSm2Acjv43FKq329&si=n2YER2in4gOqwssY)).\n- <img src=\"https://www.creatify.ai/favicon.ico\" height=\"14\"/> [Creatify](https://github.com/TSavo/creatify-mcp) - MCP Server that exposes Creatify AI API capabilities for AI video generation, including avatar videos, URL-to-video conversion, text-to-speech, and AI-powered editing tools.\n- <img src=\"https://www.svgrepo.com/show/495208/data.svg\" height=\"14\"/> [ZenML](https://github.com/zenml-io/mcp-zenml)<sup><sup>‚≠ê</sup></sup> - Chat with your MLOps and LLMOps pipelines using the [ZenML](https://www.zenml.io) MCP server\n\n<br />\n\n## üíª <a name=\"development-tools\"></a>Development Tools\n\n> Tools and servers that assist with software development workflows. Enables integration with development-related services and APIs.\n\n- <img src=\"https://www.svgrepo.com/show/107853/uranus.svg\" height=\"14\"/> [CentralMind/Gateway](https://github.com/centralmind/gateway) - MCP and MCP SSE Server that automatically generate production ready API based on database schema and data. Supports PostgreSQL, Clickhouse, MySQL, Snowflake, BigQuery, Supabase\n- <img src=\"http://currents.dev/favicon.ico\" height=\"14\"/> [Currents](https://github.com/currents-dev/currents-mcp)<sup><sup>‚≠ê</sup></sup> - Enable AI Agents to fix Playwright test failures reported to [Currents](https://currents.dev).\n- üêô [Octocode](https://github.com/bgauryy/octocode-mcp) -  AI-powered developer assistant that enables advanced research, analysis and discovery and code generation across GitHub and NPM realms in realtime.\n- <img src=\"https://raw.githubusercontent.com/kadykov/mcp-openapi-schema-explorer/main/assets/logo-400.png\" height=\"14\"/> [OpenAPI Schema Explorer](https://github.com/kadykov/mcp-openapi-schema-explorer) - Token-efficient access to OpenAPI/Swagger specs via MCP Resources.\n- <img src=\"https://raw.githubusercontent.com/open-rpc/design/master/icons/open-rpc-logo-noText/open-rpc-logo-noText%20(PNG)/256x256.png\" height=\"14\"/> [OpenRPC](https://github.com/shanejonas/openrpc-mpc-server) - A Model Context Protocol server that provides JSON-RPC functionality through OpenRPC.\n- <img src=\"https://cdn.simpleicons.org/postman\" height=\"14\" /> [Postman](https://github.com/delano/postman-mcp-server) - Interact with [Postman API](https://www.postman.com/postman/postman-public-workspace/).\n- <img src=\"https://marketing.qasphere.com/images/logo/qasphere-square-512.png\" height=\"14\" /> [QA Sphere](https://github.com/Hypersequent/qasphere-mcp)<sup><sup>‚≠ê</sup></sup> - Integration with QA Sphere test management system, enabling LLMs to discover, summarize, and interact with test cases directly from AI-powered IDEs\n- <img src=\"https://raw.githubusercontent.com/marimo-team/marimo/main/docs/_static/marimo-logotype-thick.svg\" height=\"14\" /> [marimo](https://github.com/marimo-team/codemirror-mcp)<sup><sup>‚≠ê</sup></sup> - CodeMirror extension that implements the Model Context Protocol (MCP) for resource mentions and prompt commands.\n- <img src=\"https://static.figma.com/app/icon/1/favicon.ico\" height=\"14\" /> [Figma](https://github.com/GLips/Figma-Context-MCP) - Paste a link to your Figma design to get its data in a ready-to-implement format.\n- <img src=\"https://www.comet.com/favicon.ico\" height=\"14\" /> [Comet Opik](https://github.com/comet-ml/opik-mcp)<sup><sup>‚≠ê</sup></sup> - Query and interact with LLM observability and telemetry captured by [Opik](https://github.com/comet-ml/opik) using natural language.\n- <img src=\"https://vscode.dev/static/stable/favicon.ico\" height=\"14\" /> [VSCode Devtools](https://github.com/biegehydra/BifrostMCP) - Connect to VSCode ide and allows using semantic tools like `find_usages`\n- <img src=\"https://mastra.ai/favicon/icon.svg\" height=\"14\" /> [Mastra/mcp](https://github.com/mastra-ai/mastra/tree/main/packages/mcp)<sup><sup>‚≠ê</sup></sup> - Provides AI assistants with direct access to Mastra.ai's complete knowledge base.\n- <img src=\"https://github.com/user-attachments/assets/9d517481-c4cd-4b6c-903a-878531c9d881\" height=\"14\" /> [Bucket](https://github.com/bucketco/bucket-javascript-sdk/tree/main/packages/cli#model-context-protocol) - Flag features, manage company data, and control feature access using [Bucket](https://bucket.co)\n- <img src=\"https://edgeone.ai/favicon.ico\" height=\"14\" /> [EdgeOne Pages](https://github.com/TencentEdgeOne/edgeone-pages-mcp) - A MCP service for deploying HTML content to EdgeOne Pages and obtaining a publicly accessible URL.\n- <img src=\"https://cdn.jsdelivr.net/gh/jsdelivr/globalping-media@refs/heads/master/icons/android-chrome-192x192.png\" height=\"14\" /> [Globalping MCP](https://github.com/jsdelivr/globalping-mcp-server)<sup><sup>‚≠ê</sup></sup> - Access a network of thousands of probes to run network commands like ping, traceroute, mtr, http and DNS resolve.\n- <img src=\"https://gitkraken.com/favicon.ico\" height=\"14\" /> [GitKraken](https://github.com/gitkraken/gk-cli)<sup><sup>‚≠ê</sup></sup> - A CLI for interacting with GitKraken APIs. Includes an MCP server via gk mcp that not only wraps GitKraken APIs, but also Jira, GitHub, GitLab, and more. Works with local tools and remote services.\n-  <img src=\"[https://intayer.org/fav](https://intlayer.org/favicon-32x32.png)\" height=\"14\" /> [aymericzip/intlayer](https://github.com/aymericzip/intlayer) - A MCP Server that enhance your IDE with AI-powered assistance for Intlayer i18n / CMS tool: smart CLI access, docs.\n- <img src=\"https://cdn.simpleicons.org/jira/0052CC\" height=\"14\"/> [tom28881/mcp-jira-server](https://github.com/tom28881/mcp-jira-server) - Comprehensive TypeScript MCP server for Jira with 20+ tools covering complete project management workflow: issue CRUD, sprint management, comments/history, attachments, batch operations. Features universal field auto-detection, full Czech/localization support, and date parsing with multiple formats. Created by [Tom√°≈° Gregoroviƒç](https://www.linkedin.com/in/tom√°≈°-g-8423b61a2/).\n- <img src=\"https://maven.apache.org/images/maven-logo-black-on-white.png\" height=\"14\"/>  [Maven Tools MCP](https://github.com/arvindand/maven-tools-mcp) - Maven Central dependency intelligence for JVM build tools (Maven, Gradle, SBT, Mill) with Context7 integration for documentation support.\n- <img src=\"https://defang.io/favicon.png\" height=\"14\" /> [DefangLabs/defang](https://github.com/DefangLabs/defang) - CLI and MCP server for building and deploying Docker Compose-compatible projects to your own AWS, GCP, or DigitalOcean account.\n\n<br />\n\n## üìä <a name=\"data-visualization\"></a>Data Visualization\n\n> Tools for creating and managing data visualizations. Enables generation of charts, graphs, and other visual representations of data.\n\n- <img src=\"https://vega.github.io/favicon.ico\" height=\"14\"/> [VegaLite](https://github.com/isaacwasserman/mcp-vegalite-server) - Generate visualizations from fetched data using the VegaLite format and renderer.\n- <img src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZFK8SrovcqgAAAAAAAAAAAAAemJ7AQ/original\" height=\"14\"/> [Chart](https://github.com/antvis/mcp-server-chart) - A Model Context Protocol server for generating visual charts using [AntV](https://github.com/antvis).\n- <img src=\"https://echarts.apache.org/zh/images/favicon.png\" height=\"14\"/> [ECharts](https://github.com/hustcc/mcp-echarts) - Generate visual charts using [Apache ECharts](https://echarts.apache.org/) with AI MCP dynamically.\n- <img src=\"https://mermaid.js.org/favicon.svg\" height=\"14\"/> [Mermaid](https://github.com/hustcc/mcp-mermaid) - Generate [mermaid](https://mermaid.js.org/) diagram and chart with AI MCP dynamically.\n- <img src=\"https://cdn.simpleicons.org/git/F05032\" height=\"14\"/> [unified-diff-mcp](https://github.com/gorosun/unified-diff-mcp) - Generate visual diff comparisons from text changes with HTML/PNG export. Perfect for code reviews and document analysis with side-by-side visualization.\n\n<br />\n\n## üÜî <a name=\"identity\"></a>Identity\n\n> Tools for identity and access management. Enables user authentication, authorization.\n\n- <img src=\"https://upload.wikimedia.org/wikipedia/commons/2/29/Keycloak_Logo.png\" height=\"14\"/> [Keycloak](https://github.com/ChristophEnglisch/keycloak-model-context-protocol) - MCP server implementation for managing Keycloak users, groups, and realms using natural language queries.\n\n<br />\n\n## üîó <a name=\"aggregators\"></a>Aggregators\n\n> Tools for accessing many apps and tools through a single MCP server..\n\n- <img height=\"12\" width=\"12\" src=\"https://github.com/mcpjungle/MCPJungle/blob/main/assets/logo.png\" alt=\"MCPJungle Logo\" /> [MCPJungle](https://github.com/mcpjungle/MCPJungle) - Self-hosted MCP Registry and Proxy for enterprise AI Agents.\n\n- <img height=\"12\" width=\"12\" src=\"https://platform.composio.dev/favicon.ico\" alt=\"Composio Logo\"> **[Rube](https://rube.composio.dev)** - Rube is a Model Context Protocol (MCP) server that connects your AI tools to 500+ apps like Gmail, Slack, GitHub, and Notion. Simply install it in your AI client, authenticate once with your apps, and start asking your AI to perform real actions like \"Send an email\" or \"Create a task.\"\n\n- <img height=\"12\" width=\"12\" src=\"https://pipedream.com/favicon.ico\" alt=\"Pipedream Logo\" /> [Pipedream](https://github.com/PipedreamHQ/pipedream/tree/master/modelcontextprotocol) - Connect with 2,500 APIs with 8,000+ prebuilt tools, and manage servers for your users, in your own app.\n \n- <img height=\"12\" width=\"12\" src=\"https://cdn.zapier.com/zapier/images/favicon.ico\" alt=\"Zapier Logo\" /> [Zapier](https://zapier.com/mcp) - Connect your AI Agents to 8,000 apps instantly.\n\n<br />\n\n## üí¨ <a name=\"language\"></a>Language & Translation\n\n> Provides real-time translation of text, documents, and content between multiple languages.\n\n- <img src=\"https://laratranslate.com/favicon.ico\" height=\"14\"/> [Lara](https://github.com/translated/lara-mcp)<sup><sup>‚≠ê</sup></sup> - MCP Server for Lara Translate API, enabling powerful translation capabilities with support for language detection and context-aware translations\n\n<br />\n\n## üîí <a name=\"security\"></a>Security\n\n> Tools for security needs. Enables securing code, finding vulnerabilies.\n\n- <img src=\"https://semgrep.dev/favicon.ico\" height=\"14\"/> [Semgrep](https://github.com/semgrep/mcp) - A MCP server for using [Semgrep](https://github.com/semgrep/semgrep) to scan code for security vulnerabilities.\n- <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8c/Microsoft_Entra_ID_color_icon.svg/120px-Microsoft_Entra_ID_color_icon.svg.png\" height=\"14\"/> [Microsoft Entra ID](https://github.com/hieuttmmo/entraid-mcp-server) - A MCP server for interacting with EntraID through Microsoft Graph API. It is designed for extensibility, maintainability, and security, supporting advanced queries for users, sign-in logs, MFA status, privileged users and more.\n- <img src=\"https://www.netwrix.com/favicon.ico\" height=\"14\"/> [Netwrix](https://github.com/netwrix/mcp-server-naa)<sup><sup>‚≠ê</sup></sup> - A FastMCP-based server for [Netwrix Access Analyzer](https://www.netwrix.com/access-analyzer.html) data analysis, designed for enhanced data analysis capabilities.\n- <img src=\"https://osv.dev/favicon.ico\" height=\"14\"/> [OSV](https://github.com/StacklokLabs/osv-mcp) - Access the OSV (Open Source Vulnerabilities) database for vulnerability information. Query vulnerabilities by package version or commit, batch query multiple packages, and get detailed vulnerability information by ID.\n- <img src=\"https://vulert.com/favicon.ico\" height=\"14\"> [Vulert](vulert.com) - Vulert secures software by detecting vulnerabilities in open-source dependencies‚Äîwithout accessing your code. It supports Js, PHP, Java, Python, and more\n- <img src=\"https://cdn.worldvectorlogo.com/logos/thales-1.svg\" height=\"14\"/> [CDSP](https://github.com/sanyambassi/ciphertrust-manager-mcp-server) - MCP server for Thales CipherTrust Manager integration, enabling secure key management, cryptographic operations, and compliance monitoring through AI assistants.\n- <img src=\"https://cdn.worldvectorlogo.com/logos/thales-1.svg\" height=\"14\"/> [CAKM](https://github.com/sanyambassi/thales-cdsp-cakm-mcp-server) - MCP server for Thales CDSP CAKM integration, enabling secure key management, cryptographic operations, and compliance monitoring through AI assistants for Ms SQL and Oracle Databases.\n- <img src=\"https://cdn.worldvectorlogo.com/logos/thales-1.svg\" height=\"14\"/> [CRDP](https://github.com/sanyambassi/thales-cdsp-crdp-mcp-server) - MCP server for Thales CipherTrust Manager RestFul Data Protection service.\n- <img src=\"https://cdn.worldvectorlogo.com/logos/thales-1.svg\" height=\"14\"/> [CSM](https://github.com/sanyambassi/thales-cdsp-csm-mcp-server) - MCP server for Thales CipherTrust Secrets Management\n\n<br />\n\n## üîå <a name=\"iot\"></a>IoT\n\n> Tools that integrate with Internet of Things connectivity.\n\n- <img src=\"https://avatars.githubusercontent.com/u/66228869?s=200&v=4\" height=\"14\"/> [Coreflux MQTT](https://github.com/CorefluxCommunity/CorefluxMCPServer) - MCP server for the Coreflux MQTT broker, enabling AI agents to transfom the broker into a automation hub and interact with IoT devices and messaging systems through the MQTT protocol. \n\n<br />\n\n## üßë‚Äçüé® <a name=\"art-literature\"></a>Art & Literature\n\n> Art and literature services.\n\n- <img src=\"https://openlibrary.org/static/images/openlibrary-logo-tighter.svg\" height=\"14\"/> [MCP Open Library](https://github.com/8enSmith/mcp-open-library) - A Model Context Protocol (MCP) server for the Internet Archive's Open Library API that enables AI assistants to search for book and author information.\n\n<br />\n\n## üõí <a name=\"e-commerce\"></a>E-Commerce\n\n> E-Commerce platforms.\n\n- <img src=\"https://www.mercadolibre.com.ar/favicon.ico\" height=\"14\" alt=\"MercadoLibre Logo\" /> [Mercado Libre](https://mcp.mercadolibre.com/) - Mercado Libre's official MCP server, offering tools to interact with our marketplace, simplifying tasks and product integration.\n- <img src=\"https://shopsavvy.com/favicon.ico\" height=\"14\" alt=\"ShopSavvy Logo\" /> **[ShopSavvy](https://github.com/shopsavvy/shopsavvy-mcp-server)**<sup><sup>‚≠ê</sup></sup> - Complete product and pricing data solution for AI assistants. Search for products by barcode/ASIN/URL, access detailed product metadata, access comprehensive pricing data from thousands of retailers, view and track price history, and more. Published as `@shopsavvy/mcp-server`.\n\n<br />\n\n## üì¶ <a name=\"data-platforms\"></a>Data Platforms\n\n> Platforms for orchestrating, transforming, and managing data pipelines. Enables AI agents to interact with complex ETL/ELT workflows, unify disparate data sources, and drive automated data operations across cloud and hybrid environments.\n\n- <img height=\"12\" width=\"12\" src=\"https://connection.keboola.com/favicon.ico\" alt=\"Keboola Logo\" /> **[Keboola](https://github.com/keboola/keboola-mcp-server)**<sup><sup>‚≠ê</sup></sup> - Build robust data workflows, integrations, and analytics on a single intuitive platform.\n\n<br />\n\n## ü§ñ <a name=\"robotics\"></a>Robotics & Physical AI\n\n> Robotics, drones and physical AI.\n\n- <img height=\"14\" src=\"https://avatars.githubusercontent.com/u/224125194?s=200&v=4\" alt=\"Extelligence Logo\"> [Bagel](https://github.com/Extelligence-ai/bagel) - ChatGPT for physical data. Troubleshoot your robots and drones with natural language. No fuss.\n\n<br />\n\n# Tools & Utilities\n\n> Tools that help manage, configure, and work with MCP servers. These utilities simplify the installation process and improve the user experience.\n\n### Server Managers\n\n- [mcp-get](https://github.com/michaellatman/mcp-get) - CLI tool for installing and managing MCP servers. Simplifies server installation and configuration for Claude Desktop.\n  - Supports NPM-based servers\n  - Automatic configuration generation\n  - Easy server management\n- [mxcp](http://github.com/raw-labs/mxcp) - Open-source framework for building secure, testable, enterprise-grade MCP tools from SQL or Python on top of dbt + DuckDB.\n- [Remote MCP](https://github.com/ssut/Remote-MCP) - Solution to Remote MCP Communication, enabling effortless integration for centralized management of Model Context\n- [yamcp](https://github.com/hamidra/yamcp) - A Model Context Workspace Manager. Oraganize your MCP servers in local workspaces (coding, design, research, ...), scan, monitor, and integrate each workspace with AI apps via a unified CLI.\n- [ToolHive](https://github.com/StacklokLabs/toolhive) - A lightweight utility designed to simplify the deployment and management of MCP servers, ensuring ease of use, consistency, and security through containerization.\n\n<br />\n\nPlease read the [contribution guidelines](CONTRIBUTING.md) if you want to contribute.\n\n---\n\n### License\n\n[![CC0](https://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg)](https://creativecommons.org/publicdomain/zero/1.0/)\n\nTo the extent possible under law, [Stephen Akinyemi](https://github.com/appcypher) has waived all copyright and related or neighboring rights to this work.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "servers",
        "mcp",
        "appcypher",
        "mcp servers",
        "clients appcypher",
        "servers curated"
      ],
      "category": "for-clients"
    },
    "atonomus--mcp-servers-search": {
      "owner": "atonomus",
      "name": "mcp-servers-search",
      "url": "https://github.com/atonomus/mcp-servers-search",
      "imageUrl": "/freedevtools/mcp/pfp/atonomus.webp",
      "description": "An MCP server that provides tools for querying and discovering available MCP servers from this list.",
      "stars": 2,
      "forks": 0,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-07T11:37:28Z",
      "readme_content": "# MCP Servers Search\n\nAn MCP (Model Context Protocol) server that provides tools for querying and discovering available MCP servers from the official [modelcontextprotocol/servers](https://github.com/modelcontextprotocol/servers) repository.\n\n**547 MCP servers as of June 2025.**\n\n## Features\n\n- **List Servers**: Browse all available MCP servers with filtering by category\n- **Search**: Find servers by name, description, or author\n- **Feature Search**: Discover servers that provide specific capabilities\n- **Random Discovery**: Get random server suggestions for exploration\n- **Caching**: Efficient caching to minimize GitHub API calls\n\n## Installation\n\n### Using npm\n```bash\nnpm install -g @atonomus/mcp-servers-search\n```\n\n### From source\n```bash\ngit clone https://github.com/atonomus/mcp-servers-search.git\ncd mcp-servers-search\nnpm install\n```\n\n## Usage\n\n### Standalone\n```bash\n# Run directly with npx\nnpx @atonomus/mcp-servers-search\n\n# Or if installed globally\nmcp-servers-search\n```\n\n### With Claude Desktop\n\nAdd to your Claude Desktop configuration (`~/Library/Application Support/Claude/claude_desktop_config.json` on macOS):\n\n```json\n{\n  \"mcpServers\": {\n    \"servers-search\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@atonomus/mcp-servers-search\"]\n    }\n  }\n}\n```\n\n## Available Tools\n\n### 1. list_servers\nList all available MCP servers with optional filtering.\n\n**Parameters:**\n- `category` (optional): Filter by category - \"reference\", \"official\", \"community\", or \"all\" (default)\n- `search` (optional): Search servers by name or description\n- `limit` (optional): Maximum number of results (default: 20)\n\n**Example:**\n```json\n{\n  \"name\": \"list_servers\",\n  \"arguments\": {\n    \"category\": \"official\",\n    \"search\": \"database\",\n    \"limit\": 10\n  }\n}\n```\n\n### 2. get_server_details\nGet detailed information about a specific MCP server.\n\n**Parameters:**\n- `name` (required): The name of the MCP server\n\n**Example:**\n```json\n{\n  \"name\": \"get_server_details\",\n  \"arguments\": {\n    \"name\": \"GitHub\"\n  }\n}\n```\n\n### 3. search_servers_by_feature\nSearch for servers that provide specific features or capabilities.\n\n**Parameters:**\n- `feature` (required): The feature to search for (e.g., \"database\", \"api\", \"blockchain\")\n- `limit` (optional): Maximum number of results (default: 10)\n\n**Example:**\n```json\n{\n  \"name\": \"search_servers_by_feature\",\n  \"arguments\": {\n    \"feature\": \"blockchain\",\n    \"limit\": 5\n  }\n}\n```\n\n### 4. get_random_servers\nGet a random selection of MCP servers for discovery.\n\n**Parameters:**\n- `count` (optional): Number of random servers (default: 5)\n- `category` (optional): Filter by category (default: \"all\")\n\n**Example:**\n```json\n{\n  \"name\": \"get_random_servers\",\n  \"arguments\": {\n    \"count\": 3,\n    \"category\": \"community\"\n  }\n}\n```\n\n### 5. refresh_server_list\nForce refresh the cached list of MCP servers from GitHub.\n\n**Example:**\n```json\n{\n  \"name\": \"refresh_server_list\",\n  \"arguments\": {}\n}\n```\n\n## Development\n\n### Setup\n```bash\n# Install dependencies\nnpm install\n\n# Run normally\nnpm start\n\n# Run tests\nnpm test\n```\n\n### Testing\n\nThe project includes a comprehensive Mocha test suite that tests the README parsing functionality. The tests cover:\n\n- Standard format entries: `[Name](link) - description`\n- Bold format entries: `**[Name](link)** - description`\n- List format entries: `- [Name](link) - description`\n- Author extraction: `(by AuthorName)`\n- Category detection (reference, official, community)\n- Description cleaning (removing embedded links)\n- Special character handling (preserving backticks)\n\nRun tests with:\n```bash\nnpm test\n```\n\n## Examples\n\n### Using with Claude Desktop\n\nOnce configured, you can ask Claude:\n\n- \"What MCP servers are available for database operations?\"\n- \"Show me all official MCP servers\"\n- \"Find MCP servers related to AI or machine learning\"\n- \"Give me 5 random community servers to explore\"\n- \"Tell me more about the GitHub MCP server\"\n\n### Programmatic Usage\n\n```javascript\n// Example of using the server programmatically\nimport { MCPToolsQueryServer } from '@atonomus/mcp-servers-search';\n\nconst server = new MCPToolsQueryServer();\nawait server.run();\n```\n\n## Caching\n\nThe server caches the list of available MCP servers for 1 hour to minimize API calls to GitHub. You can force a refresh using the `refresh_server_list` tool.\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nMIT - see LICENSE file for details\n\n## Acknowledgments\n\n- Built on the [Model Context Protocol SDK](https://github.com/modelcontextprotocol/typescript-sdk)\n- Data sourced from the official [MCP Servers Repository](https://github.com/modelcontextprotocol/servers)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "servers",
        "server",
        "mcp servers",
        "mcp server",
        "search mcp"
      ],
      "category": "for-clients"
    },
    "badkk--awesome-crypto-mcp-servers": {
      "owner": "badkk",
      "name": "awesome-crypto-mcp-servers",
      "url": "https://github.com/badkk/awesome-crypto-mcp-servers",
      "imageUrl": "/freedevtools/mcp/pfp/badkk.webp",
      "description": "A curated list of MCP servers",
      "stars": 114,
      "forks": 12,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-10-03T22:27:15Z",
      "readme_content": "# Awesome Crypto MCP Servers [![Awesome](https://awesome.re/badge.svg)](https://awesome.re)\n\nA curated list of awesome [Model Context Protocol](https://modelcontextprotocol.io/introduction) (MCP) servers - Crypto Edition üîí\n\n## Tutorials\n\n- [How to Use MCP Tools on Claude Desktop App](https://medium.com/@pedro.aquino.se/how-to-use-mcp-tools-on-claude-desktop-app-and-automate-your-daily-tasks-1c38e22bc4b0)\n- [MCP Server Manager Desktop App](https://github.com/Jeamee/MCPHub-Desktop/releases) - An Open Source MacOS & Windows GUI Desktop app for discovering, installing and managing MCP servers by [Jeamee](https://github.com/jeamee)\n\n## Server Implementations\n\n- <img height=\"12\" width=\"12\" src=\"https://www.bankless.com/favicon.ico\" alt=\"Bankless Logo\" /> **[Bankless Onchain](https://github.com/bankless/onchain-mcp)** - Query Onchain data, like ERC20 tokens, transaction history, smart contract state.\n- **[magnetai/mcp-free-usdc-transfer](https://github.com/magnetai/mcp-free-usdc-transfer)** - Send USDC on [Base](https://base.org) for free using Claude AI! Built with [Coinbase CDP](https://docs.cdp.coinbase.com/mpc-wallet/docs/welcome)'s MPC wallet tech.\n- **[coin_api_mcp](https://github.com/longmans/coin_api_mcp)** - Provides access to [coinmarketcap](https://coinmarketcap.com/) cryptocurrency data.\n- **[crypto-feargreed-mcp](https://github.com/kukapay/crypto-feargreed-mcp)**  -  Providing real-time and historical Crypto Fear & Greed Index data.\n- **[cryptopanic-mcp-server](https://github.com/kukapay/cryptopanic-mcp-server)** - Providing latest cryptocurrency news to AI agents, powered by CryptoPanic.\n- **[Dappier](https://github.com/DappierAI/dappier-mcp)** - Connect LLMs to real-time, rights-cleared, proprietary data from trusted sources. Access specialized models for Real-Time Web Search, News, Sports, Financial Data, Crypto, and premium publisher content. Explore data models at [marketplace.dappier.com](https://marketplace.dappier.com/marketplace).\n- **[DexPaprika](https://github.com/coinpaprika/dexpaprika-mcp)** - Access real-time data for over 5 million tokens across 20+ blockchain networks including Solana, Base, BSC, and Ethereum. Get token prices, liquidity pool information, historical data and DEX analytics. Full documentation for developers [DexPaprika Docs](https://docs.dexpaprika.com/introduction)\n- **[whale-tracker-mcp](https://github.com/kukapay/whale-tracker-mcp)**  -  A mcp server for tracking cryptocurrency whale transactions.\n- **[Heurist Mesh Agent](https://github.com/heurist-network/heurist-mesh-mcp-server)** - Access specialized web3 AI agents for blockchain analysis, smart contract security, token metrics, and blockchain interactions through the [Heurist Mesh network](https://github.com/heurist-network/heurist-agent-framework/tree/main/mesh).\n- **[EVM MCP Server](https://github.com/mcpdotdirect/evm-mcp-server)** - Comprehensive blockchain services for 30+ EVM networks, supporting native tokens, ERC20, NFTs, smart contracts, transactions, and ENS resolution.\n- **[GOAT](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-framework/model-context-protocol)** - Run more than +200 onchain actions on any blockchain including Ethereum, Solana and Base.\n- **[Solana Agent Kit](https://github.com/sendaifun/solana-agent-kit/tree/main/examples/agent-kit-mcp-server)** - This MCP server enables LLMs to interact with the Solana blockchain with help of Solana Agent Kit by SendAI, allowing for 40+ protcool actions and growing\n\n---\n\nCrafted by [Magnet Labs](https://magnetlabs.xyz) with our vibrant AI & Crypto community\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "crypto",
        "servers",
        "mcp servers",
        "crypto mcp",
        "list mcp"
      ],
      "category": "for-clients"
    },
    "chatmcp--mcp-directory": {
      "owner": "chatmcp",
      "name": "mcp-directory",
      "url": "https://github.com/chatmcp/mcp-directory",
      "imageUrl": "/freedevtools/mcp/pfp/chatmcp.webp",
      "description": "A curated list of MCP servers",
      "stars": 1889,
      "forks": 165,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-03T22:26:18Z",
      "readme_content": "## MCP Directory\n\na directory for Awesome MCP Servers.\n\nlive preview: [https://mcp.so](https://mcp.so)\n\n![preview](./preview.png)\n\n## Quick Start\n\n1. clone the repo\n\n```bash\ngit clone https://github.com/chatmcp/mcp-directory.git\ncd mcp-directory\n```\n\n2. install dependencies\n\n```bash\npnpm install\n```\n\n3. prepare database\n\ncreate a database with [Supabase](https://supabase.com/)\n\nrun the sql file in `data/install.sql`\n\n4. set env variables\n\nput a .env file in the root directory\n\nwith env variables:\n\n```env\nSUPABASE_URL=\"\"\nSUPABASE_ANON_KEY=\"\"\n\nNEXT_PUBLIC_WEB_URL=\"http://localhost:3000\"\n```\n\n5. run the dev server\n\n```bash\npnpm dev\n```\n\n6. preview the site\n\nopen [http://localhost:3000](http://localhost:3000) in your browser\n\n## Community\n\n- [MCP Server Telegram](https://t.me/+N0gv4O9SXio2YWU1)\n- [MCP Server Discord](https://discord.gg/RsYPRrnyqg)\n- [ChatMCP Official Twitter](https://x.com/chatmcp)\n\n## About the author\n\n- [idoubi](https://bento.me/idoubi)\n- [Follow me on Twitter](https://x.com/idoubicv)\n- [Buy me a coffee](https://www.buymeacoffee.com/idoubi)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "chatmcp",
        "mcp",
        "servers",
        "chatmcp mcp",
        "mcp servers",
        "clients chatmcp"
      ],
      "category": "for-clients"
    },
    "kapilduraphe--mcp-watch": {
      "owner": "kapilduraphe",
      "name": "mcp-watch",
      "url": "https://github.com/kapilduraphe/mcp-watch",
      "imageUrl": "/freedevtools/mcp/pfp/kapilduraphe.webp",
      "description": "A comprehensive security scanner for Model Context Protocol (MCP) servers that detects vulnerabilities and security issues in your MCP server implementations.",
      "stars": 98,
      "forks": 8,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-11T06:10:56Z",
      "readme_content": "# MCP Watch üîç\n\nA comprehensive security scanner for Model Context Protocol (MCP) servers that detects vulnerabilities and security issues in your MCP implementations.\n\n## Features\n\n- **üîë Credential Detection** - Finds hardcoded API keys, tokens, and insecure credential storage\n- **üß™ Tool Poisoning** - Detects hidden malicious instructions in tool descriptions\n- **üéØ Parameter Injection** - Identifies magic parameters that extract sensitive AI context\n- **üíâ Prompt Injection** - Scans for prompt manipulation and injection attacks\n- **üîÑ Tool Mutation** - Detects dynamic tool changes and rug-pull risks\n- **üí¨ Conversation Exfiltration** - Finds triggers that steal conversation history\n- **üé® ANSI Injection** - Detects steganographic attacks using escape sequences\n- **üìã Protocol Violations** - Identifies MCP protocol security violations\n- **üõ°Ô∏è Input Validation** - Finds command injection, SSRF, and path traversal issues\n- **üé≠ Server Spoofing** - Detects servers impersonating popular services\n- **üåä Toxic Flows** - Identifies dangerous data flow patterns\n- **üîê Permission Issues** - Finds excessive permissions and access control problems\n\n## Quick Start üöÄ\n\n### Option 1: NPM Package (Recommended)\n```bash\n# Install globally\nnpm install -g mcp-watch\n\n# Scan any GitHub MCP repository\nmcp-watch scan https://github.com/user/mcp-server\n\n# Scan your local MCP project\nmcp-watch scan-local /path/to/your/mcp-project\n```\n\n### Option 2: From GitHub Source\n```bash\n# Clone and use immediately\ngit clone https://github.com/kapilduraphe/mcp-watch.git\ncd mcp-watch\nnpm install\nnpm run build\n\n# Scan GitHub repos\nnpm run scan:github https://github.com/user/mcp-server\n\n# Scan local projects  \nnpm run scan:local /path/to/your/mcp-project\n```\n\n### Option 3: Docker (No Installation)\n```bash\n# Scan without installing anything\ndocker run --rm mcp-watch scan https://github.com/user/mcp-server\ndocker run --rm -v $(pwd):/workspace mcp-watch scan-local /workspace\n```\n\n## Installation\n\n### Global Installation\n```bash\nnpm install -g mcp-watch\n```\n\n### Local Installation\n```bash\nnpm install mcp-watch\n```\n\n### From Source\n```bash\ngit clone https://github.com/kapilduraphe/mcp-watch.git\ncd mcp-watch\nnpm install\nnpm run build\n```\n\n\n\n### Docker Installation üê≥\n\n#### Quick Start with Docker\n```bash\n# Build and run locally\ndocker build -t mcp-watch .\ndocker run --rm mcp-watch scan https://github.com/user/mcp-server\n\n# Build from source\ngit clone https://github.com/kapilduraphe/mcp-watch.git\ncd mcp-watch\ndocker build -t mcp-watch .\n```\n\n#### Docker Compose (Recommended for Production)\n\n```bash\n# Build and run with Docker Compose\ndocker compose build\ndocker compose up mcp-watch\n\n# Or run a one-off scan\ndocker compose run --rm mcp-watch scan https://github.com/user/repo\n```\n\n\n\n#### Docker Features\n- **üîí Security**: Non-root user, minimal attack surface\n- **üì¶ Optimized**: Multi-stage builds, Alpine Linux base\n- **üöÄ Production**: Ready for deployment and CI/CD\n- **üßπ Simplified**: Single optimized Dockerfile for all use cases\n\n\n## Usage\n\n### Command Line\n\n#### Scan GitHub Repositories\n```bash\n# Scan a GitHub repository\nmcp-watch scan https://github.com/user/mcp-server\n\n# Scan with JSON output\nmcp-watch scan https://github.com/user/mcp-server --format json\n\n# Filter by severity\nmcp-watch scan https://github.com/user/mcp-server --severity high\n\n# Filter by category\nmcp-watch scan https://github.com/user/mcp-server --category credential-leak\n```\n\n#### Scan Local Projects\n```bash\n# Scan current directory\nmcp-watch scan-local .\n\n# Scan specific directory (absolute path)\nmcp-watch scan-local /path/to/your/mcp-project\n\n# Scan specific directory (relative path)\nmcp-watch scan-local ../my-mcp-server\n\n# Local scan with JSON output\nmcp-watch scan-local . --format json\n\n# Local scan with severity filter\nmcp-watch scan-local . --severity high\n```\n\n### Installation Method Usage\n\n#### From NPM Package\n```bash\n# Global installation (recommended)\nnpm install -g mcp-watch\nmcp-watch scan https://github.com/user/mcp-server\nmcp-watch scan-local /path/to/project\n```\n\n#### From GitHub Source\n```bash\n# Clone and build\ngit clone https://github.com/kapilduraphe/mcp-watch.git\ncd mcp-watch\nnpm install\nnpm run build\n\n# Use built version\nnode dist/main.js scan https://github.com/user/mcp-server\nnode dist/main.js scan-local /path/to/project\n\n# Or use npm scripts\nnpm run scan https://github.com/user/mcp-server\nnpm run scan-local /path/to/project\n```\n\n### Docker Usage üê≥\n\n```bash\n# Production container\ndocker run --rm mcp-watch scan https://github.com/user/mcp-server\ndocker run --rm mcp-watch scan https://github.com/user/mcp-server --format json --severity high\n\n# Docker Compose\ndocker compose run --rm mcp-watch scan https://github.com/user/repo\ndocker compose run --rm mcp-watch scan https://github.com/user/repo --format json\n\n# Interactive container\ndocker run -it --rm mcp-watch sh\n```\n\n### Options\n\n- `--format <type>` - Output format: `console` (default) or `json`\n- `--severity <level>` - Minimum severity: `low`, `medium`, `high`, `critical`\n- `--category <cat>` - Filter by vulnerability category\n\n### Categories\n\n- `credential-leak` - Hardcoded credentials and insecure storage\n- `tool-poisoning` - Malicious tool descriptions\n- `data-exfiltration` - Data theft and parameter injection\n- `prompt-injection` - Prompt manipulation attacks\n- `tool-mutation` - Dynamic tool changes\n- `steganographic-attack` - Hidden content in escape sequences\n- `protocol-violation` - MCP protocol security issues\n- `input-validation` - Command injection, SSRF, path traversal\n- `server-spoofing` - Server impersonation\n- `toxic-flow` - Dangerous data flows\n- `access-control` - Permission and access issues\n\n## Example Output\n\n```\nüîç Scanning repository: https://github.com/user/mcp-server\nüìä Based on vulnerablemcp.info, HiddenLayer, Invariant Labs, and Trail of Bits research\n\nüîë Scanning for credential vulnerabilities...\nüß™ Scanning for tool poisoning vulnerabilities...\nüéØ Scanning for parameter injection vulnerabilities...\nüíâ Scanning for prompt injection vulnerabilities...\n\nüìä MCP SECURITY SCAN RESULTS\n===============================\n\nüìà Summary by Severity:\n  üö® CRITICAL: 2\n  ‚ö†Ô∏è HIGH: 1\n  ‚ö° MEDIUM: 3\n\nüîç Detailed Results:\n--------------------\n\n1. üö® Hardcoded credentials detected\n   üìã ID: HARDCODED_CREDENTIALS\n   üéØ Severity: CRITICAL\n   üìÇ Category: credential-leak\n   üìç Location: src/config.ts:15\n   üîç Evidence: const apiKey = \"sk-***REDACTED***\"\n```\n\n## Development\n\n### Project Structure\n```\nmcp-watch/\n‚îú‚îÄ‚îÄ main.ts                          # CLI entry point\n‚îú‚îÄ‚îÄ types/\n‚îÇ   ‚îî‚îÄ‚îÄ Vulnerability.ts             # Type definitions\n‚îú‚îÄ‚îÄ scanner/\n‚îÇ   ‚îú‚îÄ‚îÄ MCPScanner.ts               # Main scanner orchestrator\n‚îÇ   ‚îú‚îÄ‚îÄ BaseScanner.ts              # Base scanner utilities\n‚îÇ   ‚îî‚îÄ‚îÄ scanners/                   # Individual vulnerability scanners\n‚îÇ       ‚îú‚îÄ‚îÄ CredentialScanner.ts\n‚îÇ       ‚îú‚îÄ‚îÄ ParameterInjectionScanner.ts\n‚îÇ       ‚îî‚îÄ‚îÄ ...\n‚îú‚îÄ‚îÄ utils/\n‚îÇ   ‚îî‚îÄ‚îÄ reportFormatter.ts          # Report formatting\n‚îî‚îÄ‚îÄ Docker/                          # Containerization\n    ‚îú‚îÄ‚îÄ Dockerfile                   # Production image\n    ‚îú‚îÄ‚îÄ docker-compose.yml           # Multi-service orchestration (Docker Compose v2)\n    ‚îî‚îÄ‚îÄ .dockerignore                # Build optimization\n```\n\n### Development Scripts\n```bash\n# Build the project\nnpm run build\n\n# Run in development mode\nnpm run dev scan https://github.com/user/repo\n\n# Quick scan during development\nnpm run scan https://github.com/user/repo\n\n# Clean build artifacts\nnpm run clean\n\n# Type checking\nnpm run type-check\n```\n\n### Development Workflow üöÄ\n\n#### Local Development (Recommended)\n```bash\n# Install dependencies\nnpm install\n\n# Run development server\nnpm run dev\n\n# Run scans during development\nnpm run scan https://github.com/user/repo\n\n# Type checking\nnpm run type-check\n```\n\n#### Docker Development üê≥\n```bash\n# Build Docker image\ndocker compose build\n\n# Test the image\ndocker run --rm mcp-watch scan https://github.com/user/repo\n\n# Test Docker Compose\ndocker compose run --rm mcp-watch scan --help\n```\n\n### Adding New Scanners\n\n1. Create a new scanner in `scanner/scanners/`\n2. Extend `AbstractScanner`\n3. Implement the `scan()` method\n4. Add to `MCPScanner.ts`\n\nExample:\n```typescript\nimport { AbstractScanner } from \"../BaseScanner\";\nimport { Vulnerability } from \"../../types/Vulnerability\";\n\nexport class MyScanner extends AbstractScanner {\n  async scan(projectPath: string): Promise<Vulnerability[]> {\n    console.log(\"üîç Scanning for my vulnerability type...\");\n    \n    const vulnerabilities: Vulnerability[] = [];\n    // Your scanning logic here\n    \n    return vulnerabilities;\n  }\n}\n```\n\n## Security Research\n\nThis tool is based on security research from leading organizations in AI and cybersecurity, identifying novel attack vectors specific to MCP environments including:\n\n- **Parameter injection attacks** that extract sensitive AI context\n- **Tool poisoning** with hidden malicious instructions\n- **Conversation exfiltration** using trigger phrases\n- **Steganographic attacks** via ANSI escape sequences\n- **Toxic agent flows** across repository boundaries\n\n### Research Sources\n\n- **VulnerableMCP Database** ([vulnerablemcp.info](https://vulnerablemcp.info))\n  - Comprehensive database of MCP vulnerabilities\n  - Real-world attack patterns and examples\n  - Regular updates on new attack vectors\n\n- **HiddenLayer Research** ([Exploiting MCP Tool Parameters](https://hiddenlayer.com/innovation-hub/exploiting-mcp-tool-parameters))\n  - Parameter injection attacks that extract sensitive data\n  - Tool call history and conversation exfiltration\n  - System prompt extraction vulnerabilities\n  - Chain of thought manipulation\n  - Model name disclosure risks\n\n- **Invariant Labs Research** ([GitHub MCP Vulnerability](https://invariantlabs.ai/blog/mcp-github-vulnerability))\n  - Tool poisoning detection\n  - Toxic agent flows\n  - Cross-repository security issues\n  - Rug-pull updates in tool functionality\n  - Server spoofing prevention\n\n- **Trail of Bits Research** ([MCP Security Research](https://blog.trailofbits.com/categories/mcp))\n  - Conversation exfiltration methods\n  - ANSI injection attacks\n  - Protocol-level vulnerabilities\n  - Insecure credential storage patterns\n  - Cross-server shadowing attacks\n\n- **PromptHub Analysis** ([5 MCP Security Vulnerabilities](https://prompthub.substack.com/p/5-mcp-security-vulnerabilities-you))\n  - Command injection patterns (43% of public MCP servers affected)\n  - SSRF vulnerability statistics (30% allow arbitrary URL fetching)\n  - Path traversal attack vectors (22% leak files outside intended directories)\n  - Retrieval-Agent Deception (RADE) attacks\n  - Tool poisoning prevention strategies\n\n## Exit Codes\n\n- `0` - No critical or high severity vulnerabilities found\n- `1` - Critical or high severity vulnerabilities detected\n- `1` - Scan error occurred\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Run type checking with `npm run type-check`\n4. Test your changes manually\n5. Submit a pull request\n\n## GitHub Actions üöÄ\n\nThis repository uses automated workflows for CI/CD, security scanning, and dependency management:\n\n- **CI**: Automated testing and Docker verification on every push/PR\n- **Security Scan**: Daily security audits and vulnerability checks\n- **Dependency Update**: Weekly dependency maintenance and security fixes\n- **Release**: Automated release asset creation\n- **Docker Test**: Docker-specific testing and validation\n\n## Dependabot ü§ñ\n\nAutomated dependency management with:\n- **npm**: Weekly updates with auto-merge for minor/patch versions\n- **GitHub Actions**: Automated action updates\n- **Docker**: Base image updates\n\nSee [GITHUB_ACTIONS.md](GITHUB_ACTIONS.md) for detailed workflow documentation.\n\n### Docker Development Workflow üê≥\n\n```bash\n# Clone and setup\ngit clone https://github.com/kapilduraphe/mcp-watch.git\ncd mcp-watch\n\n# Build Docker image\ndocker compose build\n\n# Test the image\ndocker run --rm mcp-watch --help\n\n# Run a scan\ndocker compose run --rm mcp-watch scan https://github.com/user/repo\n```\n\n## License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n\n## Support\n\n- Create an issue for bug reports or feature requests\n- Check existing issues before creating new ones\n- Include scan output and repository details when reporting issues\n\n### Docker Support üê≥\n\n- **Documentation**: See [DOCKER.md](DOCKER.md) for detailed Docker usage\n- **Issues**: Include Docker version and Docker Compose version when reporting issues\n- **Testing**: Test with both production and development containers\n\n\n---\n\n**‚ö†Ô∏è Security Notice**: This tool identifies potential security issues but should not be the only security measure. Always perform manual security reviews and follow security best practices.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "protocol",
        "vulnerabilities",
        "mcp server",
        "protocol mcp",
        "mcp servers"
      ],
      "category": "for-clients"
    },
    "krzysztofkucmierz--search-mcp-server": {
      "owner": "krzysztofkucmierz",
      "name": "search-mcp-server",
      "url": "https://github.com/krzysztofkucmierz/search-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/krzysztofkucmierz.webp",
      "description": "Recommends the most relevant MCP servers based on the client's query by searching this README file.",
      "stars": 1,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-05T09:21:13Z",
      "readme_content": "# Search MCP Server\r\n\r\nA Model Context Protocol (MCP) server that enables searching and discovering existing MCP servers from the official GitHub repository.\r\n\r\n**Author:** Krzysztof Kuƒámierz  \r\n**Email:** <krzysztof.kucmierz@artificiuminformatica.pl>  \r\n**Repository** [https://github.com/krzysztofkucmierz/search-mcp-server]\r\n\r\n## Features\r\n\r\n- **Search MCP Servers**: Find relevant MCP servers by name, description, or category\r\n- **Dynamic Data**: Live scraping from <https://github.com/modelcontextprotocol/servers>\r\n- **Fast & Cached**: Configurable caching (default: 6 hours) for optimal performance\r\n\r\n## Tools & Resources provided by server\r\n\r\n- Tools: `search_mcp_servers(query, category)`, `get_mcp_server_categories()`\r\n- Resources: `mcp://servers/list`, `mcp://servers/categories`\r\n\r\n## Installation and usage - quick start\r\n\r\n```bash\r\npip install uv\r\nuv venv\r\nsource .venv/bin/activate\r\nuv pip install search-mcp-server\r\nsearch-mcp-server --sse # see available command line options in next sections\r\n```\r\n\r\n## Installation and usage - details\r\n\r\n### Install [uv](https://docs.astral.sh/uv/) (fast Python package manager)\r\n\r\n```bash\r\n# macOS/Linux\r\ncurl -LsSf https://astral.sh/uv/install.sh | sh\r\n\r\n# Or with pip\r\npip install uv\r\n\r\nuv venv\r\nsource .venv/bin/activate\r\n```\r\n\r\n### Install MCP server from PyPi.org\r\n\r\n```bash\r\nuv pip install search-mcp-server\r\n```\r\n\r\n### Start the MCP server\r\n\r\n```bash\r\nsearch-mcp-server --sse\r\n```\r\n\r\nCommand Line Options\r\n\r\n- `--sse`: Start in SSE mode instead of stdio mode\r\n- `--port PORT`: Port for SSE mode (default: 8000)\r\n- `--cache-timeout SECONDS`: Cache timeout in seconds (default: 21600 = 6 hours)\r\n- `--help`: Displays available options\r\n\r\nuse `--sse` when you want other apps to connect over HTTP; omit it to run in stdio mode where the client must start the process.\r\n\r\n### Add MCP server to your IDE (example for VSCode)\r\n\r\nIf you run the server with `--sse`, point your client (or VSCode MCP extension) to the SSE URL (here it is `http://127.0.0.1:8000/sse`). Add the following minimal JSON to the mcp.json file:\r\n\r\n```json\r\n{\r\n    \"servers\": {\r\n        \"Search MCP server\": { \"url\": \"http://127.0.0.1:8000/sse\", \"type\": \"http\" }\r\n    },\r\n    \"inputs\": []\r\n}\r\n```\r\n\r\nMake sure it is in \"Running\" state. \"Start\" or \"Restart\" if needed.\r\n\r\n## Development\r\n\r\nFork the repository [https://github.com/krzysztofkucmierz/search-mcp-server]\r\n\r\n```bash\r\ngit clone https://github.com/<your-account>/search-mcp-server.git\r\ncd search-mcp-server\r\nuv sync\r\n```\r\n\r\n### Usage\r\n\r\nNote: the server script `mcp_server.py` lives in the repo root ‚Äî run it directly as shown below. If you install the package, the `search-mcp-server` entry point (configured in `pyproject.toml`) will also be available.\r\n\r\n```bash\r\n# SSE mode (recommended) ‚Äî exposes an HTTP/SSE endpoint\r\nuv run python mcp_server.py --sse\r\n\r\n# Custom port and cache timeout\r\nuv run python mcp_server.py --sse --port 8001 --cache-timeout 3600\r\n\r\n# Stdio mode (for MCP clients that spawn the process)\r\nuv run python mcp_server.py\r\n```\r\n\r\n### Code quality tools\r\n\r\n```bash\r\n# Code quality\r\nuv run ruff check --fix .\r\nuv run mypy mcp_server.py\r\n\r\n# Run server\r\nuv run python mcp_server.py --sse\r\n```\r\n\r\n### Debugging with MCP Inspector\r\n\r\n```bash\r\nnpx @modelcontextprotocol/inspector uv run python mcp_server.py --sse\r\n```\r\n\r\n## Links\r\n\r\n- [Model Context Protocol](https://modelcontextprotocol.io/)\r\n- [MCP Servers Repository](https://github.com/modelcontextprotocol/servers)\r\n- [FastMCP Framework](https://gofastmcp.com/)\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "search",
        "searching",
        "search mcp",
        "mcp servers",
        "mcp server"
      ],
      "category": "for-clients"
    },
    "lastmile-ai--mcp-agent": {
      "owner": "lastmile-ai",
      "name": "mcp-agent",
      "url": "https://github.com/lastmile-ai/mcp-agent",
      "imageUrl": "/freedevtools/mcp/pfp/lastmile-ai.webp",
      "description": "A simple, composable framework to build agents using Model Context Protocol",
      "stars": 7454,
      "forks": 752,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-04T12:34:27Z",
      "readme_content": "<p align=\"center\">\n  <a href=\"https://docs.mcp-agent.com\"><img src=\"https://github.com/user-attachments/assets/c8d059e5-bd56-4ea2-a72d-807fb4897bde\" alt=\"Logo\" width=\"300\" /></a>\n</p>\n\n<p align=\"center\">\n  <em>Build effective agents with Model Context Protocol using simple, composable patterns.</em>\n\n<p align=\"center\">\n  <a href=\"https://github.com/lastmile-ai/mcp-agent/tree/main/examples\" target=\"_blank\"><strong>Examples</strong></a>\n  |\n  <a href=\"https://www.anthropic.com/research/building-effective-agents\" target=\"_blank\"><strong>Building Effective Agents</strong></a>\n  |\n  <a href=\"https://modelcontextprotocol.io/introduction\" target=\"_blank\"><strong>MCP</strong></a>\n</p>\n\n<p align=\"center\">\n<a href=\"https://docs.mcp-agent.com\"><img src=\"https://img.shields.io/badge/docs-8F?style=flat&link=https%3A%2F%2Fdocs.mcp-agent.com%2F\" /><a/>\n<a href=\"https://pypi.org/project/mcp-agent/\"><img src=\"https://img.shields.io/pypi/v/mcp-agent?color=%2334D058&label=pypi\" /></a>\n<a href=\"https://github.com/lastmile-ai/mcp-agent/issues\"><img src=\"https://img.shields.io/github/issues-raw/lastmile-ai/mcp-agent\" /></a>\n<img alt=\"Pepy Total Downloads\" src=\"https://img.shields.io/pepy/dt/mcp-agent?label=pypi%20%7C%20downloads\"/>\n<a href=\"https://github.com/lastmile-ai/mcp-agent/blob/main/LICENSE\"><img src=\"https://img.shields.io/badge/License-Apache_2.0-blue.svg\"/></a>\n<a href=\"https://lmai.link/discord/mcp-agent\"><img src=\"https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&logoColor=white\" alt=\"discord\"/></a>\n</p>\n\n<p align=\"center\">\n<a href=\"https://trendshift.io/repositories/13216\" target=\"_blank\"><img src=\"https://trendshift.io/api/badge/repositories/13216\" alt=\"lastmile-ai%2Fmcp-agent | Trendshift\" style=\"width: 250px; height: 55px;\" width=\"250\" height=\"55\"/></a>\n</p>\n\n## Overview\n\n**`mcp-agent`** is a simple, composable framework to build agents using [Model Context Protocol](https://modelcontextprotocol.io/introduction).\n\n**Inspiration**: Anthropic announced 2 foundational updates for AI application developers:\n\n1. [Model Context Protocol](https://www.anthropic.com/news/model-context-protocol) - a standardized interface to let any software be accessible to AI assistants via MCP servers.\n2. [Building Effective Agents](https://www.anthropic.com/research/building-effective-agents) - a seminal writeup on simple, composable patterns for building production-ready AI agents.\n\n`mcp-agent` puts these two foundational pieces into an AI application framework:\n\n1. It handles the pesky business of managing the lifecycle of MCP server connections so you don't have to.\n2. It implements every pattern described in Building Effective Agents, and does so in a _composable_ way, allowing you to chain these patterns together.\n3. **Bonus**: It implements [OpenAI's Swarm](https://github.com/openai/swarm) pattern for multi-agent orchestration, but in a model-agnostic way.\n\nAltogether, this is the simplest and easiest way to build robust agent applications. Much like MCP, this project is in early development.\nWe welcome all kinds of [contributions](/CONTRIBUTING.md), feedback and your help in growing this to become a new standard.\n\n## Get Started\n\nWe recommend using [uv](https://docs.astral.sh/uv/) to manage your Python projects:\n\n```bash\nuv add \"mcp-agent\"\n```\n\nAlternatively:\n\n```bash\npip install mcp-agent\n```\n\n### Quickstart\n\n> [!TIP]\n> The [`examples`](/examples) directory has several example applications to get started with.\n> To run an example, clone this repo, then:\n>\n> ```bash\n> cd examples/basic/mcp_basic_agent # Or any other example\n> # Option A: secrets YAML\n> # cp mcp_agent.secrets.yaml.example mcp_agent.secrets.yaml && edit mcp_agent.secrets.yaml\n> # Option B: .env\n> cp .env.example .env && edit .env\n> uv run main.py\n> ```\n\nHere is a basic \"finder\" agent that uses the fetch and filesystem servers to look up a file, read a blog and write a tweet. [Example link](./examples/basic/mcp_basic_agent/):\n\n<details open>\n<summary>finder_agent.py</summary>\n\n```python\nimport asyncio\nimport os\n\nfrom mcp_agent.app import MCPApp\nfrom mcp_agent.agents.agent import Agent\nfrom mcp_agent.workflows.llm.augmented_llm_openai import OpenAIAugmentedLLM\n\napp = MCPApp(name=\"hello_world_agent\")\n\nasync def example_usage():\n    async with app.run() as mcp_agent_app:\n        logger = mcp_agent_app.logger\n        # This agent can read the filesystem or fetch URLs\n        finder_agent = Agent(\n            name=\"finder\",\n            instruction=\"\"\"You can read local files or fetch URLs.\n                Return the requested information when asked.\"\"\",\n            server_names=[\"fetch\", \"filesystem\"], # MCP servers this Agent can use\n        )\n\n        async with finder_agent:\n            # Automatically initializes the MCP servers and adds their tools for LLM use\n            tools = await finder_agent.list_tools()\n            logger.info(f\"Tools available:\", data=tools)\n\n            # Attach an OpenAI LLM to the agent (defaults to GPT-4o)\n            llm = await finder_agent.attach_llm(OpenAIAugmentedLLM)\n\n            # This will perform a file lookup and read using the filesystem server\n            result = await llm.generate_str(\n                message=\"Show me what's in README.md verbatim\"\n            )\n            logger.info(f\"README.md contents: {result}\")\n\n            # Uses the fetch server to fetch the content from URL\n            result = await llm.generate_str(\n                message=\"Print the first two paragraphs from https://www.anthropic.com/research/building-effective-agents\"\n            )\n            logger.info(f\"Blog intro: {result}\")\n\n            # Multi-turn interactions by default\n            result = await llm.generate_str(\"Summarize that in a 128-char tweet\")\n            logger.info(f\"Tweet: {result}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(example_usage())\n\n```\n\n</details>\n\n<details>\n<summary>mcp_agent.config.yaml</summary>\n\n```yaml\nexecution_engine: asyncio\nlogger:\n  transports: [console] # You can use [file, console] for both\n  level: debug\n  path: \"logs/mcp-agent.jsonl\" # Used for file transport\n  # For dynamic log filenames:\n  # path_settings:\n  #   path_pattern: \"logs/mcp-agent-{unique_id}.jsonl\"\n  #   unique_id: \"timestamp\"  # Or \"session_id\"\n  #   timestamp_format: \"%Y%m%d_%H%M%S\"\n\nmcp:\n  servers:\n    fetch:\n      command: \"uvx\"\n      args: [\"mcp-server-fetch\"]\n    filesystem:\n      command: \"npx\"\n      args:\n        [\n          \"-y\",\n          \"@modelcontextprotocol/server-filesystem\",\n          \"<add_your_directories>\",\n        ]\n\nopenai:\n  # Secrets (API keys, etc.) are stored in an mcp_agent.secrets.yaml file which can be gitignored\n  default_model: gpt-4o\n```\n\n</details>\n\n<details>\n<summary>Agent output</summary>\n<img width=\"2398\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/eaa60fdf-bcc6-460b-926e-6fa8534e9089\" />\n</details>\n\n## Table of Contents\n\n- [Why use mcp-agent?](#why-use-mcp-agent)\n- [Example Applications](#examples)\n  - [Claude Desktop](#claude-desktop)\n  - [Streamlit](#streamlit)\n    - [Gmail Agent](#gmail-agent)\n    - [RAG](#simple-rag-chatbot)\n  - [Marimo](#marimo)\n  - [Python](#python)\n    - [Swarm (CLI)](#swarm)\n- [Core Concepts](#core-components)\n- [Workflows Patterns](#workflows)\n  - [Augmented LLM](#augmentedllm)\n  - [Parallel](#parallel)\n  - [Router](#router)\n  - [Intent-Classifier](#intentclassifier)\n  - [Orchestrator-Workers](#orchestrator-workers)\n  - [Evaluator-Optimizer](#evaluator-optimizer)\n  - [OpenAI Swarm](#swarm-1)\n- [Advanced](#advanced)\n  - [Composing multiple workflows](#composability)\n  - [Signaling and Human input](#signaling-and-human-input)\n  - [App Config](#app-config)\n  - [MCP Server Management](#mcp-server-management)\n- [Contributing](#contributing)\n- [Roadmap](#roadmap)\n- [FAQs](#faqs)\n\n## Why use `mcp-agent`?\n\nThere are too many AI frameworks out there already. But `mcp-agent` is the only one that is purpose-built for a shared protocol - [MCP](https://modelcontextprotocol.io/introduction). It is also the most lightweight, and is closer to an agent pattern library than a framework.\n\nAs [more services become MCP-aware](https://github.com/punkpeye/awesome-mcp-servers), you can use mcp-agent to build robust and controllable AI agents that can leverage those services out-of-the-box.\n\n## Examples\n\nBefore we go into the core concepts of mcp-agent, let's show what you can build with it.\n\nIn short, you can build any kind of AI application with mcp-agent: multi-agent collaborative workflows, human-in-the-loop workflows, RAG pipelines and more.\n\n### Claude Desktop\n\nYou can integrate mcp-agent apps into MCP clients like Claude Desktop.\n\n#### mcp-agent server\n\nThis app wraps an mcp-agent application inside an MCP server, and exposes that server to Claude Desktop.\nThe app exposes agents and workflows that Claude Desktop can invoke to service of the user's request.\n\nhttps://github.com/user-attachments/assets/7807cffd-dba7-4f0c-9c70-9482fd7e0699\n\nThis demo shows a multi-agent evaluation task where each agent evaluates aspects of an input poem, and\nthen an aggregator summarizes their findings into a final response.\n\n**Details**: Starting from a user's request over text, the application:\n\n- dynamically defines agents to do the job\n- uses the appropriate workflow to orchestrate those agents (in this case the Parallel workflow)\n\n**Link to code**: [examples/basic/mcp_server_aggregator](./examples/basic/mcp_server_aggregator)\n\n> [!NOTE]\n> Huge thanks to [Jerron Lim (@StreetLamb)](https://github.com/StreetLamb)\n> for developing and contributing this example!\n\n### Streamlit\n\nYou can deploy mcp-agent apps using Streamlit.\n\n#### Gmail agent\n\nThis app is able to perform read and write actions on gmail using text prompts -- i.e. read, delete, send emails, mark as read/unread, etc.\nIt uses an MCP server for Gmail.\n\nhttps://github.com/user-attachments/assets/54899cac-de24-4102-bd7e-4b2022c956e3\n\n**Link to code**: [gmail-mcp-server](https://github.com/jasonsum/gmail-mcp-server/blob/add-mcp-agent-streamlit/streamlit_app.py)\n\n> [!NOTE]\n> Huge thanks to [Jason Summer (@jasonsum)](https://github.com/jasonsum)\n> for developing and contributing this example!\n\n#### Simple RAG Chatbot\n\nThis app uses a Qdrant vector database (via an MCP server) to do Q&A over a corpus of text.\n\nhttps://github.com/user-attachments/assets/f4dcd227-cae9-4a59-aa9e-0eceeb4acaf4\n\n**Link to code**: [examples/usecases/streamlit_mcp_rag_agent](./examples/usecases/streamlit_mcp_rag_agent/)\n\n> [!NOTE]\n> Huge thanks to [Jerron Lim (@StreetLamb)](https://github.com/StreetLamb)\n> for developing and contributing this example!\n\n### Marimo\n\n[Marimo](https://github.com/marimo-team/marimo) is a reactive Python notebook that replaces Jupyter and Streamlit.\nHere's the \"file finder\" agent from [Quickstart](#quickstart) implemented in Marimo:\n\n<img src=\"https://github.com/user-attachments/assets/139a95a5-e3ac-4ea7-9c8f-bad6577e8597\" width=\"400\"/>\n\n**Link to code**: [examples/usecases/marimo_mcp_basic_agent](./examples/usecases/marimo_mcp_basic_agent/)\n\n> [!NOTE]\n> Huge thanks to [Akshay Agrawal (@akshayka)](https://github.com/akshayka)\n> for developing and contributing this example!\n\n### Python\n\nYou can write mcp-agent apps as Python scripts or Jupyter notebooks.\n\n#### Swarm\n\nThis example demonstrates a multi-agent setup for handling different customer service requests in an airline context using the Swarm workflow pattern. The agents can triage requests, handle flight modifications, cancellations, and lost baggage cases.\n\nhttps://github.com/user-attachments/assets/b314d75d-7945-4de6-965b-7f21eb14a8bd\n\n**Link to code**: [examples/workflows/workflow_swarm](./examples/workflows/workflow_swarm/)\n\n## Core Components\n\nThe following are the building blocks of the mcp-agent framework:\n\n- **[MCPApp](./src/mcp_agent/app.py)**: global state and app configuration\n- **MCP server management**: [`gen_client`](./src/mcp_agent/mcp/gen_client.py) and [`MCPConnectionManager`](./src/mcp_agent/mcp/mcp_connection_manager.py) to easily connect to MCP servers.\n- **[Agent](./src/mcp_agent/agents/agent.py)**: An Agent is an entity that has access to a set of MCP servers and exposes them to an LLM as tool calls. It has a name and purpose (instruction).\n- **[AugmentedLLM](./src/mcp_agent/workflows/llm/augmented_llm.py)**: An LLM that is enhanced with tools provided from a collection of MCP servers. Every Workflow pattern described below is an `AugmentedLLM` itself, allowing you to compose and chain them together.\n\nEverything in the framework is a derivative of these core capabilities.\n\n## Workflows\n\nmcp-agent provides implementations for every pattern in Anthropic‚Äôs [Building Effective Agents](https://www.anthropic.com/research/building-effective-agents), as well as the OpenAI [Swarm](https://github.com/openai/swarm) pattern.\nEach pattern is model-agnostic, and exposed as an `AugmentedLLM`, making everything very composable.\n\n### AugmentedLLM\n\n[AugmentedLLM](./src/mcp_agent/workflows/llm/augmented_llm.py) is an LLM that has access to MCP servers and functions via Agents.\n\nLLM providers implement the AugmentedLLM interface to expose 3 functions:\n\n- `generate`: Generate message(s) given a prompt, possibly over multiple iterations and making tool calls as needed.\n- `generate_str`: Calls `generate` and returns result as a string output.\n- `generate_structured`: Uses [Instructor](https://github.com/instructor-ai/instructor) to return the generated result as a Pydantic model.\n\nAdditionally, `AugmentedLLM` has memory, to keep track of long or short-term history.\n\n<details>\n<summary>Example</summary>\n\n```python\nfrom mcp_agent.agents.agent import Agent\nfrom mcp_agent.workflows.llm.augmented_llm_anthropic import AnthropicAugmentedLLM\n\nfinder_agent = Agent(\n    name=\"finder\",\n    instruction=\"You are an agent with filesystem + fetch access. Return the requested file or URL contents.\",\n    server_names=[\"fetch\", \"filesystem\"],\n)\n\nasync with finder_agent:\n   llm = await finder_agent.attach_llm(AnthropicAugmentedLLM)\n\n   result = await llm.generate_str(\n      message=\"Print the first 2 paragraphs of https://www.anthropic.com/research/building-effective-agents\",\n      # Can override model, tokens and other defaults\n   )\n   logger.info(f\"Result: {result}\")\n\n   # Multi-turn conversation\n   result = await llm.generate_str(\n      message=\"Summarize those paragraphs in a 128 character tweet\",\n   )\n   logger.info(f\"Result: {result}\")\n```\n\n</details>\n\n### [Parallel](src/mcp_agent/workflows/parallel/parallel_llm.py)\n\n![Parallel workflow (Image credit: Anthropic)](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F406bb032ca007fd1624f261af717d70e6ca86286-2401x1000.png&w=3840&q=75)\n\nFan-out tasks to multiple sub-agents and fan-in the results. Each subtask is an AugmentedLLM, as is the overall Parallel workflow, meaning each subtask can optionally be a more complex workflow itself.\n\n> [!NOTE]\n>\n> **[Link to full example](examples/workflows/workflow_parallel/main.py)**\n\n<details>\n<summary>Example</summary>\n\n```python\nproofreader = Agent(name=\"proofreader\", instruction=\"Review grammar...\")\nfact_checker = Agent(name=\"fact_checker\", instruction=\"Check factual consistency...\")\nstyle_enforcer = Agent(name=\"style_enforcer\", instruction=\"Enforce style guidelines...\")\n\ngrader = Agent(name=\"grader\", instruction=\"Combine feedback into a structured report.\")\n\nparallel = ParallelLLM(\n    fan_in_agent=grader,\n    fan_out_agents=[proofreader, fact_checker, style_enforcer],\n    llm_factory=OpenAIAugmentedLLM,\n)\n\nresult = await parallel.generate_str(\"Student short story submission: ...\", RequestParams(model=\"gpt4-o\"))\n```\n\n</details>\n\n### [Router](src/mcp_agent/workflows/router/)\n\n![Router workflow (Image credit: Anthropic)](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F5c0c0e9fe4def0b584c04d37849941da55e5e71c-2401x1000.png&w=3840&q=75)\n\nGiven an input, route to the `top_k` most relevant categories. A category can be an Agent, an MCP server or a regular function.\n\nmcp-agent provides several router implementations, including:\n\n- [`EmbeddingRouter`](src/mcp_agent/workflows/router/router_embedding.py): uses embedding models for classification\n- [`LLMRouter`](src/mcp_agent/workflows/router/router_llm.py): uses LLMs for classification\n\n> [!NOTE]\n>\n> **[Link to full example](examples/workflows/workflow_router/main.py)**\n\n<details>\n<summary>Example</summary>\n\n```python\ndef print_hello_world:\n     print(\"Hello, world!\")\n\nfinder_agent = Agent(name=\"finder\", server_names=[\"fetch\", \"filesystem\"])\nwriter_agent = Agent(name=\"writer\", server_names=[\"filesystem\"])\n\nllm = OpenAIAugmentedLLM()\nrouter = LLMRouter(\n    llm=llm,\n    agents=[finder_agent, writer_agent],\n    functions=[print_hello_world],\n)\n\nresults = await router.route( # Also available: route_to_agent, route_to_server\n    request=\"Find and print the contents of README.md verbatim\",\n    top_k=1\n)\nchosen_agent = results[0].result\nasync with chosen_agent:\n    ...\n```\n\n</details>\n\n### [IntentClassifier](src/mcp_agent/workflows/intent_classifier/)\n\nA close sibling of Router, the Intent Classifier pattern identifies the `top_k` Intents that most closely match a given input.\nJust like a Router, mcp-agent provides both an [embedding](src/mcp_agent/workflows/intent_classifier/intent_classifier_embedding.py) and [LLM-based](src/mcp_agent/workflows/intent_classifier/intent_classifier_llm.py) intent classifier.\n\n### [Evaluator-Optimizer](src/mcp_agent/workflows/evaluator_optimizer/evaluator_optimizer.py)\n\n![Evaluator-optimizer workflow (Image credit: Anthropic)](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F14f51e6406ccb29e695da48b17017e899a6119c7-2401x1000.png&w=3840&q=75)\n\nOne LLM (the ‚Äúoptimizer‚Äù) refines a response, another (the ‚Äúevaluator‚Äù) critiques it until a response exceeds a quality criteria.\n\n> [!NOTE]\n>\n> **[Link to full example](examples/workflows/workflow_evaluator_optimizer/main.py)**\n\n<details>\n<summary>Example</summary>\n\n```python\noptimizer = Agent(name=\"cover_letter_writer\", server_names=[\"fetch\"], instruction=\"Generate a cover letter ...\")\nevaluator = Agent(name=\"critiquer\", instruction=\"Evaluate clarity, specificity, relevance...\")\n\neo_llm = EvaluatorOptimizerLLM(\n    optimizer=optimizer,\n    evaluator=evaluator,\n    llm_factory=OpenAIAugmentedLLM,\n    min_rating=QualityRating.EXCELLENT, # Keep iterating until the minimum quality bar is reached\n)\n\nresult = await eo_llm.generate_str(\"Write a job cover letter for an AI framework developer role at LastMile AI.\")\nprint(\"Final refined cover letter:\", result)\n```\n\n</details>\n\n### [Orchestrator-workers](src/mcp_agent/workflows/orchestrator/orchestrator.py)\n\n![Orchestrator workflow (Image credit: Anthropic)](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F8985fc683fae4780fb34eab1365ab78c7e51bc8e-2401x1000.png&w=3840&q=75)\n\nA higher-level LLM generates a plan, then assigns them to sub-agents, and synthesizes the results.\nThe Orchestrator workflow automatically parallelizes steps that can be done in parallel, and blocks on dependencies.\n\n> [!NOTE]\n>\n> **[Link to full example](examples/workflows/workflow_orchestrator_worker/main.py)**\n\n<details>\n<summary>Example</summary>\n\n```python\nfinder_agent = Agent(name=\"finder\", server_names=[\"fetch\", \"filesystem\"])\nwriter_agent = Agent(name=\"writer\", server_names=[\"filesystem\"])\nproofreader = Agent(name=\"proofreader\", ...)\nfact_checker = Agent(name=\"fact_checker\", ...)\nstyle_enforcer = Agent(name=\"style_enforcer\", instructions=\"Use APA style guide from ...\", server_names=[\"fetch\"])\n\norchestrator = Orchestrator(\n    llm_factory=AnthropicAugmentedLLM,\n    available_agents=[finder_agent, writer_agent, proofreader, fact_checker, style_enforcer],\n)\n\ntask = \"Load short_story.md, evaluate it, produce a graded_report.md with multiple feedback aspects.\"\nresult = await orchestrator.generate_str(task, RequestParams(model=\"gpt-4o\"))\nprint(result)\n```\n\n</details>\n\n### [Swarm](src/mcp_agent/workflows/swarm/swarm.py)\n\nOpenAI has an experimental multi-agent pattern called [Swarm](https://github.com/openai/swarm), which we provide a model-agnostic reference implementation for in mcp-agent.\n\n<img src=\"https://github.com/openai/swarm/blob/main/assets/swarm_diagram.png?raw=true\" width=500 />\n\nThe mcp-agent Swarm pattern works seamlessly with MCP servers, and is exposed as an `AugmentedLLM`, allowing for composability with other patterns above.\n\n> [!NOTE]\n>\n> **[Link to full example](examples/workflows/workflow_swarm/main.py)**\n\n<details>\n<summary>Example</summary>\n\n```python\ntriage_agent = SwarmAgent(...)\nflight_mod_agent = SwarmAgent(...)\nlost_baggage_agent = SwarmAgent(...)\n\n# The triage agent decides whether to route to flight_mod_agent or lost_baggage_agent\nswarm = AnthropicSwarm(agent=triage_agent, context_variables={...})\n\ntest_input = \"My bag was not delivered!\"\nresult = await swarm.generate_str(test_input)\nprint(\"Result:\", result)\n```\n\n</details>\n\n## Advanced\n\n### Composability\n\nAn example of composability is using an [Evaluator-Optimizer](#evaluator-optimizer) workflow as the planner LLM inside\nthe [Orchestrator](#orchestrator-workers) workflow. Generating a high-quality plan to execute is important for robust behavior, and an evaluator-optimizer can help ensure that.\n\nDoing so is seamless in mcp-agent, because each workflow is implemented as an `AugmentedLLM`.\n\n<details>\n<summary>Example</summary>\n\n```python\noptimizer = Agent(name=\"plan_optimizer\", server_names=[...], instruction=\"Generate a plan given an objective ...\")\nevaluator = Agent(name=\"plan_evaluator\", instruction=\"Evaluate logic, ordering and precision of plan......\")\n\nplanner_llm = EvaluatorOptimizerLLM(\n    optimizer=optimizer,\n    evaluator=evaluator,\n    llm_factory=OpenAIAugmentedLLM,\n    min_rating=QualityRating.EXCELLENT,\n)\n\norchestrator = Orchestrator(\n    llm_factory=AnthropicAugmentedLLM,\n    available_agents=[finder_agent, writer_agent, proofreader, fact_checker, style_enforcer],\n    planner=planner_llm # It's that simple\n)\n\n...\n```\n\n</details>\n\n### Signaling and Human Input\n\n**Signaling**: The framework can pause/resume tasks. The agent or LLM might ‚Äúsignal‚Äù that it needs user input, so the workflow awaits. A developer may signal during a workflow to seek approval or review before continuing with a workflow.\n\n**Human Input**: If an Agent has a `human_input_callback`, the LLM can call a `__human_input__` tool to request user input mid-workflow.\n\n<details>\n<summary>Example</summary>\n\nThe [Swarm example](examples/workflows/workflow_swarm/main.py) shows this in action.\n\n```python\nfrom mcp_agent.human_input.console_handler import console_input_callback\n\nlost_baggage = SwarmAgent(\n    name=\"Lost baggage traversal\",\n    instruction=lambda context_variables: f\"\"\"\n        {\n    FLY_AIR_AGENT_PROMPT.format(\n        customer_context=context_variables.get(\"customer_context\", \"None\"),\n        flight_context=context_variables.get(\"flight_context\", \"None\"),\n    )\n    }\\n Lost baggage policy: policies/lost_baggage_policy.md\"\"\",\n    functions=[\n        escalate_to_agent,\n        initiate_baggage_search,\n        transfer_to_triage,\n        case_resolved,\n    ],\n    server_names=[\"fetch\", \"filesystem\"],\n    human_input_callback=console_input_callback,  # Request input from the console\n)\n```\n\n</details>\n\n### App Config\n\nCreate an [`mcp_agent.config.yaml`](/schema/mcp-agent.config.schema.json) and define secrets via either a gitignored [`mcp_agent.secrets.yaml`](./examples/basic/mcp_basic_agent/mcp_agent.secrets.yaml.example) or a local [`.env`](./examples/basic/mcp_basic_agent/.env.example). In production, prefer `MCP_APP_SETTINGS_PRELOAD` to avoid writing plaintext secrets to disk.\n\n### MCP server management\n\nmcp-agent makes it trivial to connect to MCP servers. Create an [`mcp_agent.config.yaml`](/schema/mcp-agent.config.schema.json) to define server configuration under the `mcp` section:\n\n```yaml\nmcp:\n  servers:\n    fetch:\n      command: \"uvx\"\n      args: [\"mcp-server-fetch\"]\n      description: \"Fetch content at URLs from the world wide web\"\n```\n\n#### [`gen_client`](src/mcp_agent/mcp/gen_client.py)\n\nManage the lifecycle of an MCP server within an async context manager:\n\n```python\nfrom mcp_agent.mcp.gen_client import gen_client\n\nasync with gen_client(\"fetch\") as fetch_client:\n    # Fetch server is initialized and ready to use\n    result = await fetch_client.list_tools()\n\n# Fetch server is automatically disconnected/shutdown\n```\n\nThe gen_client function makes it easy to spin up connections to MCP servers.\n\n#### Persistent server connections\n\nIn many cases, you want an MCP server to stay online for persistent use (e.g. in a multi-step tool use workflow).\nFor persistent connections, use:\n\n- [`connect`](<(src/mcp_agent/mcp/gen_client.py)>) and [`disconnect`](src/mcp_agent/mcp/gen_client.py)\n\n```python\nfrom mcp_agent.mcp.gen_client import connect, disconnect\n\nfetch_client = None\ntry:\n     fetch_client = connect(\"fetch\")\n     result = await fetch_client.list_tools()\nfinally:\n     disconnect(\"fetch\")\n```\n\n- [`MCPConnectionManager`](src/mcp_agent/mcp/mcp_connection_manager.py)\n  For even more fine-grained control over server connections, you can use the MCPConnectionManager.\n\n<details>\n<summary>Example</summary>\n\n```python\nfrom mcp_agent.context import get_current_context\nfrom mcp_agent.mcp.mcp_connection_manager import MCPConnectionManager\n\ncontext = get_current_context()\nconnection_manager = MCPConnectionManager(context.server_registry)\n\nasync with connection_manager:\nfetch_client = await connection_manager.get_server(\"fetch\") # Initializes fetch server\nresult = fetch_client.list_tool()\nfetch_client2 = await connection_manager.get_server(\"fetch\") # Reuses same server connection\n\n# All servers managed by connection manager are automatically disconnected/shut down\n```\n\n</details>\n\n#### MCP Server Aggregator\n\n[`MCPAggregator`](src/mcp_agent/mcp/mcp_aggregator.py) acts as a \"server-of-servers\".\nIt provides a single MCP server interface for interacting with multiple MCP servers.\nThis allows you to expose tools from multiple servers to LLM applications.\n\n<details>\n<summary>Example</summary>\n\n```python\nfrom mcp_agent.mcp.mcp_aggregator import MCPAggregator\n\naggregator = await MCPAggregator.create(server_names=[\"fetch\", \"filesystem\"])\n\nasync with aggregator:\n   # combined list of tools exposed by 'fetch' and 'filesystem' servers\n   tools = await aggregator.list_tools()\n\n   # namespacing -- invokes the 'fetch' server to call the 'fetch' tool\n   fetch_result = await aggregator.call_tool(name=\"fetch-fetch\", arguments={\"url\": \"https://www.anthropic.com/research/building-effective-agents\"})\n\n   # no namespacing -- first server in the aggregator exposing that tool wins\n   read_file_result = await aggregator.call_tool(name=\"read_file\", arguments={})\n```\n\n</details>\n\n## Contributing\n\nWe welcome any and all kinds of contributions. Please see the [CONTRIBUTING guidelines](./CONTRIBUTING.md) to get started.\n\n### Special Mentions\n\nThere have already been incredible community contributors who are driving this project forward:\n\n- [Shaun Smith (@evalstate)](https://github.com/evalstate) -- who has been leading the charge on countless complex improvements, both to `mcp-agent` and generally to the MCP ecosystem.\n- [Jerron Lim (@StreetLamb)](https://github.com/StreetLamb) -- who has contributed countless hours and excellent examples, and great ideas to the project.\n- [Jason Summer (@jasonsum)](https://github.com/jasonsum) -- for identifying several issues and adapting his Gmail MCP server to work with mcp-agent\n\n## Roadmap\n\nWe will be adding a detailed roadmap (ideally driven by your feedback). The current set of priorities include:\n\n- **Durable Execution** -- allow workflows to pause/resume and serialize state so they can be replayed or be paused indefinitely. We are working on integrating [Temporal](./src/mcp_agent/executor/temporal.py) for this purpose.\n- **Memory** -- adding support for long-term memory\n- **Streaming** -- Support streaming listeners for iterative progress\n- **Additional MCP capabilities** -- Expand beyond tool calls to support:\n  - Resources\n  - Prompts\n  - Notifications\n\n## FAQs\n\n### What are the core benefits of using mcp-agent?\n\nmcp-agent provides a streamlined approach to building AI agents using capabilities exposed by **MCP** (Model Context Protocol) servers.\n\nMCP is quite low-level, and this framework handles the mechanics of connecting to servers, working with LLMs, handling external signals (like human input) and supporting persistent state via durable execution. That lets you, the developer, focus on the core business logic of your AI application.\n\nCore benefits:\n\n- ü§ù **Interoperability**: ensures that any tool exposed by any number of MCP servers can seamlessly plug in to your agents.\n- ‚õìÔ∏è **Composability & Customizability**: Implements well-defined workflows, but in a composable way that enables compound workflows, and allows full customization across model provider, logging, orchestrator, etc.\n- üíª **Programmatic control flow**: Keeps things simple as developers just write code instead of thinking in graphs, nodes and edges. For branching logic, you write `if` statements. For cycles, use `while` loops.\n- üñêÔ∏è **Human Input & Signals**: Supports pausing workflows for external signals, such as human input, which are exposed as tool calls an Agent can make.\n\n### Do you need an MCP client to use mcp-agent?\n\nNo, you can use mcp-agent anywhere, since it handles MCPClient creation for you. This allows you to leverage MCP servers outside of MCP hosts like Claude Desktop.\n\nHere's all the ways you can set up your mcp-agent application:\n\n#### MCP-Agent Server\n\nYou can expose mcp-agent applications as MCP servers themselves (see [example](./examples/mcp_agent_server)), allowing MCP clients to interface with sophisticated AI workflows using the standard tools API of MCP servers. This is effectively a server-of-servers.\n\n#### MCP Client or Host\n\nYou can embed mcp-agent in an MCP client directly to manage the orchestration across multiple MCP servers.\n\n#### Standalone\n\nYou can use mcp-agent applications in a standalone fashion (i.e. they aren't part of an MCP client). The [`examples`](/examples/) are all standalone applications.\n\n### Tell me a fun fact\n\nI debated naming this project _silsila_ (ÿ≥ŸÑÿ≥ŸÑ€Å), which means chain of events in Urdu. mcp-agent is more matter-of-fact, but there's still an easter egg in the project paying homage to silsila.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "agents",
        "agent",
        "mcp",
        "mcp agent",
        "agents using",
        "agent simple"
      ],
      "category": "for-clients"
    },
    "marimo-team--codemirror-mcp": {
      "owner": "marimo-team",
      "name": "codemirror-mcp",
      "url": "https://github.com/marimo-team/codemirror-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/marimo-team.webp",
      "description": "CodeMirror extension that implements the Model Context Protocol (MCP) for resource mentions and prompt commands",
      "stars": 77,
      "forks": 3,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-02T15:30:09Z",
      "readme_content": "# codemirror-mcp\n\nA CodeMirror extension that implements the [Model Context Protocol](https://modelcontextprotocol.io) (MCP) for resource mentions and prompt commands.\n\n## Features\n\n- Resource Completion: Autocomplete for `@resource` mentions\n- Resource Decorations: Visual styling for `@resource` mentions with click handling\n- Prompt Completion: Autocomplete for `/prompt` commands\n- Theme Support: Customizable styling\n\n## Installation\n\n```bash\nnpm install @marimo-team/codemirror-mcp @modelcontextprotocol/sdk\n# or\npnpm add @marimo-team/codemirror-mcp @modelcontextprotocol/sdk\n```\n\n### Peer Dependencies\n\nThis module requires the following peer dependencies:\n\n- `@codemirror/view`\n- `@codemirror/state`\n- `@modelcontextprotocol/sdk`\n\n## Usage\n\n```ts\nimport { WebSocketClientTransport } from \"@modelcontextprotocol/sdk/client/websocket.js\";\nimport { mcpExtension, extractResources } from '@marimo-team/codemirror-mcp';\nimport { EditorView } from '@codemirror/view';\n\nconst transport = new WebSocketClientTransport(new URL('ws://localhost:8080'));\n\nconst view = new EditorView({\n  extensions: [\n    // ... other extensions\n\n    mcpExtension({\n      // Required options\n      transport: transport,\n\n      // Optional options\n      logger: console,\n      clientOptions: {\n        name: 'your-client',\n        version: '1.0.0'\n      },\n      onResourceClick: (resource) => {\n        // Open resource\n        // e.g. open in a tab, etc.\n      },\n    }),\n\n    // Handle submit\n    keymap.of([\n      {\n        key: 'Enter',\n        run: () => {\n          const resources = extractResources(view);\n          const formattedResources = resources\n            .map(\n              ({ resource }) =>\n                `${resource.uri} (${resource.type}): ${resource.description || resource.name}`\n            )\n            .join('\\n');\n          const prompt = `${view.state.doc.toString()}\\n\\nResources:\\n${formattedResources}`;\n          // ... submit prompt to AI server\n          // const response = await generateText(prompt);\n        },\n      },\n    ]),\n  ],\n  parent: document.querySelector('#editor'),\n});\n```\n\n## Resources\n\n- Use `@resource-uri` syntax to reference resources\n- Resources are visually decorated and clickable\n- Click handling for resource interactions\n- Hover tooltips show resource details\n- Customizable theme\n\n## Prompts\n\n- Use `/command` syntax for prompt commands\n- Autocomplete for available prompts\n\n## Development\n\n```bash\n# Install dependencies\npnpm install\n\n# Run tests\npnpm test\n\n# Run demo\npnpm dev\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "codemirror",
        "mcp",
        "commands",
        "mcp codemirror",
        "codemirror mcp",
        "mcp resource"
      ],
      "category": "for-clients"
    },
    "milisp--mcp-linker": {
      "owner": "milisp",
      "name": "mcp-linker",
      "url": "https://github.com/milisp/mcp-linker",
      "imageUrl": "/freedevtools/mcp/pfp/milisp.webp",
      "description": "A cross-platform Tauri GUI tool for one-click setup and management of MCP servers, supporting Claude Desktop, Cursor, Windsurf, VS Code, Cline, and Neovim.",
      "stars": 201,
      "forks": 17,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T01:45:34Z",
      "readme_content": "# MCP Linker\n\n[![Downloads](https://img.shields.io/github/downloads/milisp/mcp-linker/total.svg)](https://github.com/milisp/mcp-linker/releases)\n[![Stars](https://img.shields.io/github/stars/milisp/mcp-linker?style=social)](https://github.com/milisp/mcp-linker/stargazers)\n[![Forks](https://img.shields.io/github/forks/milisp/mcp-linker?style=social)](https://github.com/milisp/mcp-linker/network/members)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](CONTRIBUTING.md)\n[‰∏≠Êñá](docs/README.zh-CN.md) | [üåç Other Languages](./docs/)\n\n**One-click add and sync MCP servers across AI clients ‚Äî No LLM calls needed**\n\n> [!TIP]\n> **‚≠ê Star the repo and follow [milisp](https://x.com/lisp_mi) on X and [github](https://github.com/milisp) for more**.\n\n![demo](./images/demo.gif)\n\n## üöÄ Why MCP Linker?\n\n**Instant Setup**: Click ‚Üí Add ‚Üí Done. No manual config editing or LLM calls required.\n\nUnlike tools like Cline that need LLM integration just to add MCP servers, MCP Linker provides direct, instant configuration management.\n\n## News\n\n- **build-in mcp chat** - AI Finder/explorer @files from FileTree + notepad. powered by [**milisp/plux**](https://github.com/milisp/plux)\n- [milisp/codexia](http://github.com/milisp/codexia) - The missing GUI for the OpenAI Codex CLI, (FileTree + notepad + git diff + plan mode) all in a lightweight Tauri desktop app.\n\n## ‚ú® Features\n\n- **Local Sync** ‚Äî Sync mcp server config across Multi-Client\n- **600+ Curated MCP Servers** ‚Äî Built-in marketplace with sequential-thinking, desktop-commander, and more\n- **Multi-Client Support** ‚Äî Claude Desktop/Code, Cursor, VS Code, Cline, Windsurf. [see Detail](./docs/clients.md)\n- **Cross-Platform** ‚Äî macOS, Windows, Linux (~6MB)\n- **Smart Detection** ‚Äî Auto-detect Python, Node.js, uv environments\n- **Cloud Sync** ‚Äî Optional encrypted sync across devices (Pro)\n\n## üöÄ Quick Start\n\n1. **[üì• Download](https://github.com/milisp/mcp-linker/releases)** the latest release\n2. **Browse** MCP servers in the built-in marketplace\n3. **Click \"Get\"** to show configuration\n4. **Click \"Add\"** to install to your selected client\n5. **Done!** Start using new AI capabilities immediately\n\n### Try It Now\n[![mcp-linker-add](https://img.shields.io/badge/Add%20Sequential--Thinking-Try%20Now-blue?logo=link)](https://www.mcp-linker.store/install-app?name=sequential-thinking&autoSubmit=true&config=eyJzZXF1ZW50aWFsLXRoaW5raW5nIjp7ImNvbW1hbmQiOiJucHgiLCJhcmdzIjpbIi15IiwiQG1vZGVsY29udGV4dHByb3RvY29sL3NlcnZlci1zZXF1ZW50aWFsLXRoaW5raW5nIl19fQ==)\n\n## Screenshots\n\n| Server Discovery | Add Configuration |\n|-----------------|-------------------|\n| ![Discover](./images/discover.png) | ![Add server](./images/add-server.png) |\n\n## Installation Notes\n\n### macOS Users\nIf you see \"App is damaged\" message:\n1. Go to System Preferences ‚Üí Security & Privacy\n2. Click \"Open Anyway\"\nOr run: `xattr -d com.apple.quarantine /path/to/MCPLinker.app`\n\n[üì∫ Video Guide](https://www.youtube.com/watch?v=MEHFd0PCQh4)\n\n## What's MCP?\nModel Context Protocol is like USB-C for AI ‚Äî a standard way to connect AI models to different data sources and tools.\n\n## üß≠ Related Projects\n\nCheck out [**awesome-claude-dxt**](https://github.com/milisp/awesome-claude-dxt) ‚Äî a curated list of Claude Desktop Extensions (dxt), tools, and resources\n\n## üí¨ Community & Support\n\n- [üí¨ Join Discussions](https://github.com/milisp/mcp-linker/discussions)\n- [üêõ Report Issues](https://github.com/milisp/mcp-linker/issues)\n- [‚òÅÔ∏è Pro Plans](https://mcp-linker.store/pricing) ‚Äî Cloud sync starting at coffee price/month\n\n## üõ†Ô∏è Development\n\nFor development commands, and contribution guidance, see [CONTRIBUTING](CONTRIBUTING.md)\n\n## üîç Troubleshooting\n\nsee the [Wiki](https://github.com/milisp/mcp-linker/wiki)\n\n## üíñ Contributors\n\nThanks to all our wonderful contributors!\n\n<a href=\"https://github.com/milisp/mcp-linker/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=milisp/mcp-linker\" />\n</a>\n\n## License\nMIT License - see [LICENSE](LICENSE)\n\n---\n**Found this helpful? Please ‚≠ê the project!**\n\n## üìà Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=milisp/mcp-linker&type=Date)](https://star-history.com/#milisp/mcp-linker)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tauri",
        "mcp",
        "gui",
        "tauri gui",
        "platform tauri",
        "mcp linker"
      ],
      "category": "for-clients"
    },
    "php-mcp--client": {
      "owner": "php-mcp",
      "name": "client",
      "url": "https://github.com/php-mcp/client",
      "imageUrl": "/freedevtools/mcp/pfp/php-mcp.webp",
      "description": "Core PHP implementation for the Model Context Protocol (MCP) Client",
      "stars": 40,
      "forks": 7,
      "license": "MIT License",
      "language": "PHP",
      "updated_at": "2025-09-30T15:22:50Z",
      "readme_content": "# PHP MCP Client\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/php-mcp/client.svg?style=flat-square)](https://packagist.org/packages/php-mcp/client)\n[![Total Downloads](https://img.shields.io/packagist/dt/php-mcp/client.svg?style=flat-square)](https://packagist.org/packages/php-mcp/client)\n[![Tests](https://img.shields.io/github/actions/workflow/status/php-mcp/client/tests.yml?branch=main&style=flat-square)](https://github.com/php-mcp/client/actions/workflows/tests.yml)\n[![License](https://img.shields.io/packagist/l/php-mcp/client.svg?style=flat-square)](LICENSE)\n\n**PHP MCP Client is a PHP library for interacting with servers that implement the Model Context Protocol (MCP).**\n\nIt provides a developer-friendly interface to connect to individual MCP servers using different transports (`stdio`, `http+sse`), manage the connection lifecycle, discover server capabilities (Tools, Resources, Prompts), and execute requests like calling tools or reading resources.\n\nWhile utilizing asynchronous I/O internally via ReactPHP for robustness and handling features like server-sent events, the library offers **both** a straightforward **synchronous (blocking) API** for common use cases and an **asynchronous (Promise-based) API** for advanced control and concurrency.\n\nThis library aligns with the MCP specification's model where one client instance manages a stateful connection to one server.\n\n## Introduction to MCP\n\nThe [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) is an open standard designed to standardize how AI assistants and applications connect to external data sources, APIs, and tools (like codebases, databases, web browsers). It acts as a communication layer, enabling AI models (like Claude, or models integrated via frameworks like OpenAI's) to securely access and interact with context provided by different servers.\n\nThis client library allows your PHP application (acting as the \"Host\" in MCP terminology) to *consume* capabilities offered by one or more MCP servers.\n\n## Features\n\n*   **Client-per-Server Model:** Each `Client` instance manages a stateful connection to a single configured MCP server, aligning with the MCP specification.\n*   **Fluent Configuration:** Easy setup for each client instance using a `Client::make()->with...()` builder pattern.\n*   **Dual API:**\n    *   **Synchronous Facade:** Interact with the server using straightforward, blocking methods (e.g., `$client->listTools()`, `$client->callTool(...)`) for simple integration.\n    *   **Asynchronous API:** Access underlying Promise-based methods (e.g., `$client->listToolsAsync()`, `$client->callToolAsync(...)`) for concurrency and integration with async PHP applications.\n*   **Multiple Transports:** Built-in support for:\n    *   `stdio`: Communicating with server processes via Standard Input/Output.\n    *   `http`: Communicating with servers via HTTP POST and Server-Sent Events (SSE).\n*   **Explicit Connection Lifecycle:** Requires `->initialize()` or `->initializeAsync()` to connect and perform the handshake before making requests. Provides `disconnect()` / `disconnectAsync()`.\n*   **Tool/Resource/Prompt Interaction:** Provides comprehensive methods (sync & async) to list available elements and execute requests like `tools/call`, `resources/read`, `prompts/get`.\n*   **PSR Compliance:** Integrates with standard PHP interfaces:\n    *   `PSR-3` (LoggerInterface): Integrate your application's logger.\n    *   `PSR-16` (SimpleCacheInterface): Optional caching for server definitions.\n    *   `PSR-14` (EventDispatcherInterface): Optional handling of server-sent notifications via events (requires async handling).\n*   **Robust Error Handling:** Specific exceptions for different failure modes.\n*   **Asynchronous Core:** Utilizes ReactPHP internally for non-blocking I/O.\n\n## Requirements\n\n*   PHP >= 8.1\n*   Composer\n*   *(For Stdio Transport)*: Ability to execute the server command.\n*   *(For Http Transport)*: Network access to the MCP server URL.\n\n## Installation\n\nInstall the package via Composer:\n\n```bash\ncomposer require php-mcp/client\n```\n\nThe necessary ReactPHP dependencies (`event-loop`, `promise`, `stream`, `child-process`, `http`) should be installed automatically.\n\n## Quick Start: Simple Synchronous Usage (Stdio)\n\nThis example connects to a local filesystem server running via `npx`.\n\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\nuse PhpMcp\\Client\\Client;\nuse PhpMcp\\Client\\Enum\\TransportType;\nuse PhpMcp\\Client\\Model\\Capabilities as ClientCapabilities;\nuse PhpMcp\\Client\\ServerConfig;\nuse PhpMcp\\Client\\Exception\\McpClientException;\n\n$clientCapabilities = ClientCapabilities::forClient(); // Default client caps\n\n$userHome = $_SERVER['HOME'] ?? $_SERVER['USERPROFILE'] ?? getcwd();\n$fsServerConfig = new ServerConfig(\n    name: 'local_filesystem',\n    transport: TransportType::Stdio,\n    timeout: 15,\n    command: 'npx',\n    args: [\n        '-y',\n        '@modelcontextprotocol/server-filesystem',\n        $userHome . '/Documents',\n    ],\n    workingDir: $userHome\n);\n\n$fsClient = Client::make()\n    ->withClientInfo('MyFileSystemApp', '1.0')\n    ->withCapabilities($clientCapabilities)\n    // ->withLogger(new MyPsrLogger()) // Optional\n    ->withServerConfig($fsServerConfig)\n    ->build();\n\ntry {\n    // Initialize Connection (BLOCKING)\n    $fsClient->initialize();\n\n    // Interact (Synchronously)\n    $tools = $fsClient->listTools(); // Blocking call\n    foreach ($tools as $tool) {\n        echo \"- Tool: {$tool->name}\\n\";\n    }\n\n    // ... Call other methods like $fsClient->callTool(...) ...\n\n} catch (McpClientException $e) {\n    echo \"[MCP ERROR] \" . get_class($e) . \": \" . $e->getMessage() . \"\\n\";\n    // Check $e->getPrevious() for underlying transport/process errors\n} catch (\\Throwable $e) {\n    echo \"[UNEXPECTED ERROR] \" . $e->getMessage() . \"\\n\";\n} finally {\n    // Disconnect (BLOCKING)\n    if (isset($fsClient)) {\n        $fsClient->disconnect();\n    }\n}\n```\n\n## Configuration\n\nConfiguration involves setting up:\n\n1.  **Client Identity:** Your application's name and version, passed directly to the builder.\n2.  **Client Capabilities:** Features your client supports using `ClientCapabilities`.\n3.  **Server Connection:** Details for the *single server* this client instance will connect to, using `ServerConfig`.\n4.  **(Optional) Dependencies:** Logger, Cache, Event Dispatcher, Event Loop.\n\n### `ClientCapabilities`\n\nDeclares features your client supports. Use the static factory method.\n\n```php\nuse PhpMcp\\Client\\Model\\Capabilities as ClientCapabilities;\n\n// Client supports sampling requests from the server\n$clientCapabilities = ClientCapabilities::forClient(supportsSampling: true);\n\n// Client does NOT support sampling\n$clientCapabilities = ClientCapabilities::forClient(supportsSampling: false);\n\n// TODO: Add support for declaring 'roots' capability if needed\n```\n\n### `ServerConfig`\n\nDefines how to connect to a *single* MCP server.\n\n```php\nuse PhpMcp\\Client\\Enum\\TransportType;\nuse PhpMcp\\Client\\ServerConfig;\n\n// Example: Stdio Server\n$stdioConfig = new ServerConfig(\n    name: 'local_file_server',       // Required: Unique ID for this config\n    transport: TransportType::Stdio, // Required: Transport type\n    timeout: 15.0,                   // Optional: Request timeout (seconds)\n    command: 'npx',                  // Required for Stdio: Executable\n    args: [                          // Optional for Stdio: Arguments array\n        '-y',\n        '@modelcontextprotocol/server-filesystem',\n        '/path/to/project'\n    ],\n    workingDir: '/path/to/project',  // Optional for Stdio: Working directory\n    env: ['DEBUG' => 'mcp*']         // Optional for Stdio: Environment variables\n);\n\n// Example: HTTP Server\n$httpConfig = new ServerConfig(\n    name: 'remote_web_agent',        // Required: Unique ID\n    transport: TransportType::Http,  // Required: Transport type\n    timeout: 45.0,                   // Optional: Request timeout\n    url: 'http://localhost:8080/sse',// Required for Http: SSE URL\n    headers: [                       // Optional for Http: Auth/Custom headers\n        'Authorization' => 'Bearer xyz789'\n    ],\n);\n```\n\n### Loading Config from Array/JSON\n\nYou can easily parse configurations stored in arrays (e.g., from JSON files or framework config).\n\n```php\nuse PhpMcp\\Client\\ServerConfig;\nuse PhpMcp\\Client\\Exception\\ConfigurationException;\n\n$jsonConfig = '{\n    \"mcpServers\": {\n        \"stdio_files\": {\n            \"command\": \"php\",\n            \"args\": [\"/app/mcp/file_server.php\"],\n            \"timeout\": 10\n        },\n        \"http_api\": {\n            \"url\": \"https://api.example.com/mcp/sse\",\n            \"transport\": \"http\",\n            \"headers\": {\"X-API-Key\": \"secret\"}\n        }\n    }\n}';\n\n$decodedConfig = json_decode($jsonConfig, true)['mcpServers'] ?? [];\n\n$serverConfigs = [];\nforeach ($decodedConfig as $name => $data) {\n    try {\n        $serverConfigs[$name] = ServerConfig::fromArray($name, $data);\n    } catch (ConfigurationException $e) {\n        echo \"Error parsing config for '{$name}': {$e->getMessage()}\\n\";\n    }\n}\n\n// Now $serverConfigs['stdio_files'] and $serverConfigs['http_api']\n// contain ServerConfig objects.\n```\n\n### `ClientBuilder`\n\nUse the builder to assemble the `Client` instance:\n\n```php\nuse PhpMcp\\Client\\Client;\n// ... other use statements for Config, Logger etc...\n\n$client = Client::make()\n    ->withClientInfo($clientName, $clientVersion) // Required\n    ->withCapabilities($clientCapabilities)       // Optional (defaults provided)\n    ->withServerConfig($stdioConfig)              // Required: Config for THE server\n    ->withLogger($myLogger)                       // Optional\n    ->withCache($myCache, 3600)                   // Optional (cache + TTL)\n    ->withEventDispatcher($myDispatcher)          // Optional\n    ->withIdGenerator($myIdGenerator)             // Optional\n    ->withLoop($myEventLoop)                      // Optional (defaults to Loop::get())\n    ->build();\n```\n\n## Usage\n\nOnce you have a configured `Client` instance for a specific server:\n\n**1. Initialize the Connection:**\n\nYou *must* call `initialize()` or `initializeAsync()` before making requests.\n\n```php\n// Synchronous (Blocking)\ntry {\n    $client->initialize(); // Connects, performs handshake, waits until ready\n    echo \"Connection Ready!\";\n} catch (Throwable $e) {\n    echo \"Initialization failed: \" . $e->getMessage();\n    // Handle error... client is likely in Error state\n}\n\n// Asynchronous (Promise-based)\n$client->initializeAsync()->then(\n    function(Client $readyClient) { /* Ready */ },\n    function(Throwable $error) { /* Handle init failure */ }\n);\n// Requires running the event loop ($client->getLoop()->run())\n```\n\n**2. Making Requests:**\n\nUse the client methods. They operate on the single connection established by `initialize()`.\n\n*   **Synchronous API (Recommended for simple scripts/frameworks):**\n    *   Methods like `listTools()`, `callTool()`, `readResource()` block execution until a response is received or a timeout occurs.\n    *   They return the parsed result object (e.g., `array<ToolDefinition>`, `CallToolResult`) or throw an exception (`TimeoutException`, `RequestException`, `ConnectionException`, etc.).\n\n    ```php\n    try {\n        if ($client->isReady()) { // Check status\n            $tools = $client->listTools();\n            $result = $client->callTool('myTool', ['param' => 'value']);\n        }\n    } catch (Throwable $e) { /* Handle errors */ }\n    ```\n\n*   **Asynchronous API (For async applications or concurrent requests):**\n    *   Methods like `listToolsAsync()`, `callToolAsync()`, `readResourceAsync()` return a `React\\Promise\\PromiseInterface`.\n    *   You need to use promise methods (`then`, `catch`, `finally`) or `React\\Async\\await` (in a Fiber context) to handle the results.\n    *   Requires the event loop to be running.\n\n    ```php\n    use function React\\Promise\\all;\n\n    if ($client->isReady()) {\n        $p1 = $client->listToolsAsync();\n        $p2 = $client->readResourceAsync('config://settings');\n\n        all([$p1, $p2])->then(\n            function(array $results) {\n                [$tools, $readResult] = $results;\n                // Process async results...\n            },\n            function(Throwable $error) {\n                // Handle async error...\n            }\n        );\n        // $client->getLoop()->run(); // Need to run the loop\n    }\n    ```\n\n**3. Disconnecting:**\n\nAlways disconnect when you are finished interacting with a server to release resources (especially for `stdio` transports).\n\n```php\n// Synchronous\n$client->disconnect(); // Blocks until closed or timeout\n\n// Asynchronous\n$client->disconnectAsync()->then(function() { echo \"Disconnected async\"; });\n// $loop->run();\n```\n\n## Available Client Methods\n\nThe `Client` class provides methods for interacting with the connected MCP server. Most methods have both a synchronous (blocking) and an asynchronous (Promise-returning) variant.\n\n**Connection & Lifecycle:**\n\n*   **(Sync)** `initialize(): self`\n    Connects to the server and performs the MCP handshake. Blocks until ready or throws an exception. Returns the client instance.\n*   **(Async)** `initializeAsync(): PromiseInterface<Client>`\n    Initiates connection and handshake asynchronously. Returns a promise resolving with the client instance when ready, or rejecting on failure.\n*   **(Sync)** `disconnect(): void`\n    Closes the connection gracefully. Blocks until disconnection is complete or times out.\n*   **(Async)** `disconnectAsync(): PromiseInterface<void>`\n    Initiates graceful disconnection asynchronously. Returns a promise resolving when disconnection is complete.\n*   `getStatus(): ConnectionStatus`\n    Returns the current connection status enum (`Disconnected`, `Connecting`, `Handshaking`, `Ready`, `Closing`, `Closed`, `Error`).\n*   `isReady(): bool`\n    Helper method, returns `true` if status is `Ready`.\n*   `getServerName(): ?string`\n    Returns the name of the server (available after successful initialization).\n*   `getServerVersion(): ?string`\n    Returns the version of the server (available after successful initialization).\n*   `getNegotiatedCapabilities(): ?Capabilities`\n    Returns the capabilities negotiated with the server (available after successful initialization).\n*   `getNegotiatedProtocolVersion(): ?string`\n    Returns the protocol version agreed upon with the server (available after successful initialization).\n\n**MCP Operations (Sync):**\n\n*(These methods require the client to be initialized first and will block)*\n\n*   `ping(): void`\n*   `listTools(bool $useCache = true): array<ToolDefinition>`\n*   `listResources(bool $useCache = true): array<ResourceDefinition>`\n*   `listPrompts(bool $useCache = true): array<PromptDefinition>`\n*   `listResourceTemplates(bool $useCache = true): array<ResourceTemplateDefinition>`\n*   `callTool(string $toolName, array $arguments = []): CallToolResult`\n*   `readResource(string $uri): ReadResourceResult`\n*   `getPrompt(string $promptName, array $arguments = []): GetPromptResult`\n*   `subscribeResource(string $uri): void`\n*   `unsubscribeResource(string $uri): void`\n*   `setLogLevel(string $level): void`\n\n**MCP Operations (Async):**\n\n*(These methods require the client to be initialized first and return `React\\Promise\\PromiseInterface`)*\n\n*   `pingAsync(): PromiseInterface<void>`\n*   `listToolsAsync(): PromiseInterface<array<ToolDefinition>>`\n*   `listResourcesAsync(): PromiseInterface<array<ResourceDefinition>>`\n*   `listPromptsAsync(): PromiseInterface<array<PromptDefinition>>`\n*   `listResourceTemplatesAsync(): PromiseInterface<array<ResourceTemplateDefinition>>`\n*   `callToolAsync(string $toolName, array $arguments = []): PromiseInterface<CallToolResult>`\n*   `readResourceAsync(string $uri): PromiseInterface<ReadResourceResult>`\n*   `getPromptAsync(string $promptName, array $arguments = []): PromiseInterface<GetPromptResult>`\n*   `subscribeResourceAsync(string $uri): PromiseInterface<void>`\n*   `unsubscribeResourceAsync(string $uri): PromiseInterface<void>`\n*   `setLogLevelAsync(string $level): PromiseInterface<void>`\n\n**Advanced:**\n\n*   `getLoop(): LoopInterface`\n    Access the underlying ReactPHP event loop instance.\n\n## Handling Server Notifications (Asynchronous Only)\n\nMCP servers can send notifications (e.g., `resources/didChange`). To receive these:\n\n1.  Configure the client with a PSR-14 `EventDispatcherInterface` using `->withEventDispatcher(...)`.\n2.  Add listeners to your dispatcher for events like `PhpMcp\\Client\\Event\\ResourceChanged`.\n3.  Use the **asynchronous API** (`initializeAsync`, potentially other `*Async` methods).\n4.  **Run the event loop continuously** (`$client->getLoop()->run()`). Notifications arrive via the underlying transport (usually SSE) only while the loop is active.\n\nSee `examples/04-handling-notifications.php` for a conceptual guide.\n\n## Error Handling\n\nThe client uses specific exceptions inheriting from `PhpMcp\\Client\\Exception\\McpClientException`. Catching these allows for targeted error handling:\n\n*   **`ConfigurationException`**: Thrown during `ClientBuilder::build()` or `ServerConfig::fromArray()` if the provided configuration is invalid or missing required fields (e.g., missing `command` for stdio, invalid `url` for http).\n*   **`ConnectionException`**: Thrown by `initialize()` or `initializeAsync()` if the underlying transport connection fails (e.g., stdio process cannot start, TCP connection refused for HTTP, invalid initial response). Also thrown by request methods if called when the client is not in a `Ready` state or if the connection drops unexpectedly during an operation. Check `$e->getPrevious()` for lower-level transport or system errors.\n*   **`HandshakeException` (Subclass of `ConnectionException`)**: Thrown specifically by `initialize()` or `initializeAsync()` if the MCP handshake phase fails after the transport connection is established (e.g., server returns an error to the `initialize` request, version mismatch, invalid capabilities received). May contain the server's `JsonRpc\\Error` via `getRequestException()->getRpcError()`.\n*   **`TransportException`**: Indicates a low-level error during communication *after* connection (e.g., failure to write to stdio stdin, SSE stream error, unexpected data format received from transport). Often wrapped by `ConnectionException`.\n*   **`TimeoutException`**: Thrown by synchronous methods (`initialize`, `listTools`, `callTool`, etc.) or rejects asynchronous promises if the server does not respond within the configured `timeout` for the `ServerConfig`. Access timeout value via `$e->getTimeout()`.\n*   **`RequestException`**: Thrown by synchronous methods or rejects asynchronous promises when the MCP server successfully processed the request but returned a JSON-RPC error payload (e.g., method not found on server, invalid parameters for a tool, tool execution failed on server). Access the `JsonRpc\\Error` object via `$e->getRpcError()` to get the code, message, and optional data from the server.\n*   **`UnsupportedCapabilityException`**: Thrown by methods like `subscribeResource()` or `setLogLevel()` if the connected server did not declare support for the required capability during the initial handshake.\n*   **`DefinitionException`**: Thrown if there's an error fetching, caching, or parsing server definitions (Tools, Resources, Prompts), often related to cache issues or invalid data structures.\n*   **`ProtocolException`**: Indicates a violation of the JSON-RPC 2.0 or MCP structure in messages received from the server (e.g., missing required fields, invalid types).\n\nAlways wrap client interactions in `try...catch` blocks to handle these potential failures gracefully.\n\n## Examples\n\nSee the [`examples/`](./examples/) directory for working code:\n\n*   `01-simple-stdio-sync.php`: Demonstrates basic synchronous interaction with a `stdio` server.\n*   `02-simple-http-sync.php`: Demonstrates basic synchronous interaction with an `http+sse` server.\n*   `03-multiple-servers-sync.php`: Shows how to instantiate and use multiple `Client` objects for different servers within the same script (sequentially).\n*   `04-multiple-servers-async.php`: Demonstrates asynchronous interaction with multiple servers using Promises for concurrency. Requires running the event loop.\n*   `05-openai-php-integration-sync`: Full example integrating with `openai-php` for tool usage using the synchronous client API, including its own `composer.json` setup.\n\n## Testing\n\n```bash\ncomposer install --dev\n\ncomposer test\n```\n\n## Contributing\n\nContributions are welcome! Please see [CONTRIBUTING.md](CONTRIBUTING.md) or open an issue/pull request.\n\n## License\n\nThe MIT License (MIT). See [LICENSE](LICENSE).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "client",
        "php",
        "php mcp",
        "mcp client",
        "clients php"
      ],
      "category": "for-clients"
    },
    "vincent-pli--mcp-cli-host": {
      "owner": "vincent-pli",
      "name": "mcp-cli-host",
      "url": "https://github.com/vincent-pli/mcp-cli-host",
      "imageUrl": "/freedevtools/mcp/pfp/vincent-pli.webp",
      "description": "A CLI host application that enables Large Language Models (LLMs) to interact with external tools through the Model Context Protocol (MCP).",
      "stars": 14,
      "forks": 6,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-19T02:15:15Z",
      "readme_content": "# MCPCLIHost ü§ñ\n\nA CLI host application that enables Large Language Models (LLMs) to interact with external tools through the Model Context Protocol (MCP). Currently supports Openai, Azure Openai, Deepseek and Ollama models.\n\nEnglish | [ÁÆÄ‰Ωì‰∏≠Êñá](./README-zh.md)\n\n## What it looks like: ü§†\n![snapshot](./mcp-cli-host.png)\n\n## Features ‚ú®\n\n- Interactive conversations with multipe LLM models\n- Support for multiple concurrent MCP servers\n- Dynamic tool discovery and integration\n- Configurable MCP server locations and arguments\n- Configurable message history window for context management\n- Monitor/trace error from server side\n- Support Sampling, Roots, Elicitation, retrievling Resource, Prompts\n- Support runtime exclude specific tool\n- Show MCP server card when connected\n\n## Latest Update üíå\n- [2025-07-18] Support Streamable HTTP mcp server, OAuth process not support yet\n- [2025-07-02] Support Elicitation\n- [2025-06-27] Deal with `Prompts` in MCP server: [Link](./docs/prompts_usage.md)\n- [2025-06-20] Deal with `Resources` in MCP server: [Link](./docs/resource_templates_implements.md)\n\n## Environment Setup üîß\n\n1. For Openai and Deepseek:\n```bash\nexport OPENAI_API_KEY='your-api-key'\n```\nBy default for Openai the `base_url` is \"https://api.openai.com/v1\"\nFor deepseek it's \"https://api.deepseek.com\", you can change it by `--base-url`\n\n2. For Ollama, need setup firstly:\n- Install Ollama from https://ollama.ai\n- Pull your desired model:\n```bash\nollama pull mistral\n```\n- Ensure Ollama is running:\n```bash\nollama serve\n```\n3. For Azure Openai:\n```bash\nexport AZURE_OPENAI_DEPLOYMENT='your-azure-deployment'\nexport AZURE_OPENAI_API_KEY='your-azure-openai-api-key'\nexport AZURE_OPENAI_API_VERSION='your-azure-openai-api-version'\nexport AZURE_OPENAI_ENDPOINT='your-azure-openai-endpoint'\n```\n4. For Google Gemini\n```bash\nexport GEMINI_API_KEY='your-gemini-api-token'\n```\n\n## Installation üì¶\n\n```bash\npip install mcp-cli-host\n```\n\n## Configuration ‚öôÔ∏è\n\nMCPCLIHost will automatically find configuration file at `~/.mcp.json`. You can also specify a custom location using the `--config` flag:\n\n### STDIO mcp server\n```json\n{\n  \"mcpServers\": {\n    \"sqlite\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-server-sqlite\",\n        \"--db-path\",\n        \"/tmp/foo.db\"\n      ]\n    },\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-filesystem\",\n        \"/tmp\"\n      ]\n    }\n  }\n}\n```\n\nEach MCP server entry requires:\n- `command`: The command to run (e.g., `uvx`, `npx`) \n- `args`: Array of arguments for the command:\n  - For SQLite server: `mcp-server-sqlite` with database path\n  - For filesystem server: `@modelcontextprotocol/server-filesystem` with directory path\n\n### Remote mcp server(only support Streamable HTTP)\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"url\": \"https://api.githubcopilot.com/mcp/\",\n      \"headers\": {\"Authorization\": \"Bearer <your PAT>\"}\n    }\n  }\n}\n```\n\n## Usage üöÄ\n\nMCPCLIHost is a CLI tool that allows you to interact with various AI models through a unified interface. It supports various tools through MCP servers.\n\n### Available Models\nModels can be specified using the `--model` (`-m`) flag:\n- Deepseek: `deepseek:deepseek-chat`\n- OpenAI: `openai:gpt-4`\n- Ollama models: `ollama:modelname`\n- Azure Openai: `azure:gpt-4-0613`\n- Gemini: `gemini:gemini-2.5-flash`\n\n### Examples\n```bash\n# Use Ollama with Qwen model\nmcpclihost -m ollama:qwen2.5:3b\n\n# Use Deepseek\nmcpclihost -m deepseek:deepseek-chat --sys-prompt 'You are a slightly playful assistant, please answer questions in a cute tone!'\n```\n\n### Flags\n- `--config string`: Config file location (default is $HOME/mcp.json)\n- `--debug`: Enable debug logging\n- `--message-window int`: Number of messages to keep in context (default: 10)\n- `-m, --model string`: Model to use (format: provider:model) (default \"anthropic:claude-3-5-sonnet-latest\")\n- `--base-url string`: Base URL for OpenAI API (defaults to api.openai.com)\n- `--roots string`:  MCP clients to expose filesystem ‚Äúroots‚Äù to servers\n- `--sys-prompt string`: System prompt\n\n### Interactive Commands\n\nWhile chatting, you can use:\n- `/help`: Show available commands\n- `/tools`: List all available tools\n- `/exclude_tool tool_name`: Exclude specific tool from the conversation\n- `/resources`: List all available resources\n- `/get_resource`: Get specific resources by uri, example: /get_resource resource_uri\n- `/prompts`: List all available prompts\n- `/get_prompt`: Get specific prompt by name, example: /get_prompt prompt_name\n- `/servers`: List configured MCP servers\n- `/history`: Display conversation history\n- `/quit`: Exit at any time\n\n\n## MCP Server Compatibility üîå\n\nMCPCliHost can work with any MCP-compliant server. For examples and reference implementations, see the [MCP Servers Repository](https://github.com/modelcontextprotocol/servers).\n\n## Known issues üêõ\n- In scenario of `Sampling` and `Elicitation`, when typing \"Ctrl+c\", the process will crash with something like `asyncio.exceptions.CancelledError`, will be resolved later.\n\n## License üìÑ\n\nThis project is licensed under the Apache 2.0 License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cli",
        "mcp",
        "models",
        "mcp cli",
        "cli host",
        "host cli"
      ],
      "category": "for-clients"
    },
    "vishalmysore--a2ajava": {
      "owner": "vishalmysore",
      "name": "a2ajava",
      "url": "https://github.com/vishalmysore/a2ajava",
      "imageUrl": "/freedevtools/mcp/pfp/vishalmysore.webp",
      "description": "A2AJava brings powerful A2A-MCP integration directly into your Java applications. It enables developers to annotate standard Java methods and instantly expose them as MCP Server, A2A-discoverable actions ‚Äî with no boilerplate or service registration overhead.",
      "stars": 84,
      "forks": 22,
      "license": "MIT License",
      "language": "Java",
      "updated_at": "2025-09-25T21:17:24Z",
      "readme_content": "# Java Implementation of Google's A2A Protocol: Connecting the Agentverse\n\nThis project provides a Java implementation for both an A2A (Agent-to-Agent) server and client. \n**A2A is an open protocol developed by Google** to standardize how AI agents communicate and exchange information, fostering a vibrant ecosystem of interoperable AI. This api also supports building MCP Servers in Java with use of simple annotations. Imagine a world where diverse AI agents, built with different tools and by different creators, can seamlessly collaborate to solve complex problems - that's the vision A2A is bringing to life. This implementation demonstrates how to set up this communication in Java, using the Spring Framework, with a focus on sending and retrieving tasks.\na2ajava is a Swiss Army knife for building agentic applications. It is multi-protocol ‚Äî works seamlessly with both A2A (Agent-to-Agent) and MCP (Model Context Protocol). It is multi-language ‚Äî supports Java, Kotlin, and Groovy. It is multi-platform ‚Äî compatible with Gemini, OpenAI, Claude, and Grok. It is multi-client ‚Äî includes A2A and MCP clients with connectors in Java, Node, and Python. It offers multi-integration ‚Äî out-of-the-box support for Selenium, human-in-the-loop workflows, and multi-LLM voting for consensus-based decision making. Agents built using the A2A protocol with a2ajava run seamlessly on MCP as well, ensuring maximum interoperability across platforms.\n\n[![Need More Info? Ask DeepWiki](https://deepwiki.com/badge.svg)](https://deepwiki.com/vishalmysore/a2ajava) [![codecov](https://codecov.io/gh/vishalmysore/a2ajava/graph/badge.svg?token=HieisRv0xC)](https://codecov.io/gh/vishalmysore/a2ajava)\n<a target=\"_blank\" href=\"https://sonarcloud.io/summary/new_code?id=vishalmysore_a2ajava\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=vishalmysore_a2ajava&metric=alert_status\"/></a>\n<a target=\"_blank\" href=\"https://sonarcloud.io/summary/new_code?id=vishalmysore_a2ajava\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=vishalmysore_a2ajava&metric=bugs\"/></a>\n<a target=\"_blank\" href=\"https://sonarcloud.io/summary/new_code?id=vishalmysore_a2ajava\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=vishalmysore_a2ajava&metric=vulnerabilities\"/></a>\n<a target=\"_blank\" href=\"https://sonarcloud.io/summary/new_code?id=vishalmysore_a2ajava\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=vishalmysore_a2ajava&metric=sqale_rating\"/></a>\n<a target=\"_blank\" href=\"https://sonarcloud.io/summary/new_code?id=vishalmysore_a2ajava\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=vishalmysore_a2ajava&metric=security_rating\"/></a>\n<a target=\"_blank\" href=\"https://sonarcloud.io/summary/new_code?id=vishalmysore_a2ajava\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=vishalmysore_a2ajava&metric=reliability_rating\"/></a>\n<a target=\"_blank\" href=\"https://github.com/vishalmysore/a2ajava/actions/workflows/maven.yml\"><img src=\"https://github.com/vishalmysore/a2ajava/actions/workflows/maven.yml/badge.svg\"/></a>\n<a target=\"_blank\" href=\"https://github.com/vishalmysore/a2ajava/actions/workflows/codecov.yml\"> <img src=\"https://github.com/vishalmysore/a2ajava/actions/workflows/codecov.yml/badge.svg\"/></a>\n<img alt=\"Test Number\" src=\"https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/vishalmysore/6c825c69028a4f8fac9d7c1707628733/raw/test.json\"/>\n[![MIT License](https://img.shields.io/badge/License-MIT-green.svg)](https://choosealicense.com/licenses/mit/)\n[![Java Version](https://img.shields.io/badge/Java-23-orange.svg)](https://www.oracle.com/java/technologies/javase/jdk23-archive-downloads.html)\n[![Spring Boot](https://img.shields.io/badge/Spring%20Boot-3.2.4-brightgreen.svg)](https://spring.io/projects/spring-boot)\n\n## Quick Start  \n\nUse these example to quickly build agents using this library , forking and cloning these examples is the best way to get started with a2ajava. \n\n* [Spring A2A Agent](https://github.com/vishalmysore/SpringActions) - Use a2ajava to build a spring agent using A2A and MCP, can work with a2a client or with mcp client like claude desktop or connect to visual studio code as agent. This should be the first project to learn if you are new to agentic ai.\n* [Connect MCP Agent in Java](https://github.com/vishalmysore/mcp-connector/) - MCP Connector for Java Based agents , connect your a2a server to MCP client like claude or connect your MCP server to a2a client. Or vice versa or any permutation and combination\n* [Database Agent](https://github.com/vishalmysore/SqlAIAgent) - Use a2ajava to build a database agent using Derby DB, start stop database , insert data , create table all with agentic operation for both mcp as well as a2a      \n* [Standalone Java](https://github.com/vishalmysore/a2a-examples) - Several Examples on how to Use a2ajava to build a standalone java agent using A2A and MCP work with any client     \n* [Log Monitoring Agent](https://github.com/vishalmysore/agenticlog) - Use a2ajava to build a log monitoring agent which triggers a2a task based on the log messages. Works with both a2a and mcp clients dual protocol \n* [A2A Kafka Agent](https://github.com/vishalmysore/a2akafkaagent) - Use a2ajava to build a kafka agent which can trigger a2a task or mcp tool based on the kafka messages.\n* [A2A Selenium Web Agent](https://github.com/vishalmysore/a2awebagent) - Use a2ajava to build a selenium agent which can trigger a2a task or mcp tool for web browsing , validation of web pages.\n* [A2A Grafana Agent](https://github.com/vishalmysore/a2a-grafana) - Build observable Agents using A2A or MCP and Grafana\n* [A2A MongoDB RAG Agent](https://github.com/vishalmysore/a2a-mongo-rag-search) ‚Äì Perform semantic search and reasoning across agent tasks using RAG with MongoDB Agent. \n* [Simple Agent in Kotlin](https://github.com/vishalmysore/a2a-kotlin) - Use A2AJava to build a simple agent in Kotlin.\n* [Build Agent in MCP](tutorial/mcp/11_MCP.md) - Use A2AJava to build a simple agent in MCP. \n* [MCP Agent in Kotlin](https://github.com/vishalmysore/mcp-kotlin) - Build MCP Agent in Kotlin and connect to Claude or A2A Clients  \n* [MCP and A2A RAG Server](https://github.com/vishalmysore/mcp-rag-server) - State of the art RAG server using A2A and MCP with MongoDB Atlas works with both MCP as well as A2A clients\n* [A2A and MCP Agent with Security](https://github.com/vishalmysore/a2a-mcp-with-security) - Build A2A and MCP agent with security using Spring Security and JWT. \n* [A2A and MCP in Groovy](https://github.com/vishalmysore/a2aGroovy) - Build A2A and MCP agent in Groovy using A2AJava library.\n* [A2A and MCP in Scala](https://github.com/vishalmysore/a2aScala) - Build A2A and MCP agent in Scala using A2AJava library.\n* [A2A and MCP with Playwright](https://github.com/vishalmysore/a2aPlaywright) - Build A2A and MCP agent with Playwright for web automation using A2AJava library.\n* [MCP and A2A with Apache Thrift](https://github.com/vishalmysore/mcp-apache-thrift) - Build A2A and MCP agent with Apache Thrift for cross-language communication using A2AJava library. This example demonstrates how to use Thrift to call a service implemented in another language (e.g., Python, Go, C++) from a Java-based A2A or MCP agent.\n* [Single MCP Server and Client](https://github.com/vishalmysore/mcp-server-client)- Build a MCP server and client using A2AJava library. This example demonstrates how to build a MCP server and client using A2AJava library. It also demonstrates how to use the MCP protocol to call tools and tasks from the server.\n* [MCP Multi Server and Client](https://github.com/vishalmysore/mcp-a2a-multi-agent) - Build a MCP server and client with multiple servers using A2AJava library. This example demonstrates how to build a MCP server and client with multiple servers using A2AJava library. It also demonstrates how to use the MCP protocol to call tools and tasks from the server.\n* [Agentic Mesh - 4 Servers](https://github.com/vishalmysore/mcp-agentic-mesh)- Build a Agentic Mesh using A2AJava library. This example demonstrates how to build a Agentic Mesh using A2AJava library. It also demonstrates how to use the A2A protocol to call tools and tasks from the server.* \n\n### Coming Soon\n* **A2A Sensor Agent** ‚Äì Use A2A to stream data from physical sensors and trigger real-time actions. ( [Please look at ChotuRobo Series](https://www.linkedin.com/posts/vishalrow_github-modelcontextprotocolservers-model-activity-7318222463857766400-YuFV/))\n* **A2A Home Automation Agent** ‚Äì Use A2A to control smart home devices via MQTT or Home Assistant integrations. ( [Please look at ChotuRobo Series](https://www.linkedin.com/posts/vishalrow_and-here-is-a-demo-of-%F0%9D%90%82%F0%9D%90%A1%F0%9D%90%A8%F0%9D%90%AD%F0%9D%90%AE%F0%9D%90%91%F0%9D%90%A8%F0%9D%90%9B%F0%9D%90%A8-activity-7319065900031098880-SV4p/))\n* **A2A MyScale Agent** ‚Äì Use A2A to run scalable, SQL-based vector searches on tasks and documents with MyScale.\n\n## Tutorials\n* [FAQ](tutorial/0_FAQ.md)\n* [Introduction](tutorial/1_introduction.md)\n* [Annotations Deep Dive](tutorial/2_AnnotationsDeepDive.md)\n* [Enterprise Integration](tutorial/3_EnterpriseIntegration.md)\n* [Image Processing](tutorial/4_ImageProcessing.md)\n* [Selenium Integration with A2A and MCP](tutorial/5_UISeleniumI.md)\n* [Advanced Features with Spring](tutorial/6_SpringAndSelenium.md)\n* [Handling Risk in A2A and MCP](tutorial/7_HandlingRisksinAgents.md)\n* [Human In Loop](tutorial/8_HumanInLoop.md)\n* [Kubernetes Example](tutorial/9_Kubernetes.md)\n* [Multi Agents](tutorial/10_ComplexAgents.md)\n\n## Live Demo \nLive demos have been deployed on hugginface you are welcome to try them out. Or clone the space and create your own space\n\n* [A2A MCP RAG Application with Tool calling](https://vishalmysore-a2amcpmongo.hf.space/) - A2A Java Agent with Spring Boot and MongoDB Atlas for semantic search and reasoning. This application demonstrates how to use A2A and MCP protocols to build a RAG application with tool calling capabilities. It uses MongoDB Atlas for vector search and reasoning across agent tasks.\n* [A2A and MCP RBAC Security](https://vishalmysore-a2amcpdemo.hf.space/) - A2A and MCP demo with RBAC security. This application demonstrates how to use A2A and MCP protocols to build a secure application with role-based access control. It uses Spring Security and JWT for authentication and authorization.\n* [A2A and MCP with Selenium](https://vishalmysore-a2amcpselenium.hf.space/) - A2A and MCP demo with Selenium integration. This application demonstrates how to use A2A and MCP protocols to build a web automation application with Selenium. It uses Spring Boot and Selenium for web automation and A2A and MCP protocols for communication.\n* [A2A and MCP with Playwright](https://vishalmysore-a2apw.hf.space/) - A2A and MCP demo with Playwright integration. This application demonstrates how to use A2A and MCP protocols to build a web automation application with Playwright. It uses Spring Boot and Playwright for web automation and A2A and MCP protocols for communication.\n* [A2A and MCP with Spring](https://huggingface.co/spaces/VishalMysore/a2amcpspring) - A2A and MCP demo with Spring integration. This application demonstrates how to use A2A and MCP protocols to build a web application with Spring Boot. It uses Spring Boot and A2A and MCP protocols for communication.\n* [A2A and MCP with Database](https://huggingface.co/spaces/VishalMysore/a2amcpdatabase) - A2A and MCP demo with Database integration. This application demonstrates how to use A2A and MCP protocols to build a database application with Spring Boot and Derby DB. It uses Spring Boot and A2A and MCP protocols for communication.\n\n## Whats so special about A2AJava library?\n\nYou can simple annotate your classes with @Agent and @Action and build a server.  The library will take care of the rest.  You can also use this library to build a client to send and receive messages from the server.  The library is built on top of Spring Boot and uses Jackson for JSON serialization/deserialization.  The library is designed to be easy to use and extend, so you can build your own agents quickly and easily.\nALl methods annotated with @Action are exposed as A2A tasks and also MCP tools you dont need to do anything . \nInfuse AI in any running application  \n\nYou can convert you entire springboot based application into a2a and mcp compliant agent by using these  4 annotations:\n\n```java\n\n1 @EnableAgent  - converts your springboot application into an A2A agent\n2 @EnabaleAgentSecurity- adds security features to your agent\n3 @Agent(groupName = \"\", groupDescription = \"\") - creates an agent group\n4 @Action(description = \"\") - creates an action within the agent group\n\n```\n\n\n## Maven Dependency\nyou can include this library in your project by following dependency in your `pom.xml` file:\n\n```\n<dependency>\n    <groupId>io.github.vishalmysore</groupId>\n    <artifactId>a2ajava</artifactId>\n    <version>0.1.8.2</version>\n</dependency>\n```\n\nand for annotations you can use the following dependency:\n\n```json\n<dependency>\n    <groupId>io.github.vishalmysore</groupId>\n    <artifactId>tools4ai-annotations</artifactId>\n    <version>0.0.2</version>\n</dependency>\n```\n\n\noptionally for security you can use the following dependency:\n\n```json\n<dependency>\n<groupId>io.github.vishalmysore</groupId>\n<artifactId>tools4ai-security</artifactId>\n<version>0.0.3</version>\n</dependency>\n```\n\nGet the latest version from [here](https://repo1.maven.org/maven2/io/github/vishalmysore/a2ajava) \n\n## Articles\n* [A2A Protocol and Java](https://medium.com/p/54deb16302c0)  \n* [Building A2A Agents in Java](https://medium.com/p/e61bfcec28ea)  \n* [MCP vs A2A](https://medium.com/p/fef8d1d6d3ca)  \n* [Build Database Agent](https://medium.com/@visrow/google-a2a-protocol-building-a-database-agent-d5287a387b41)\n\n## A2A Protocol: A Universal Agent Language + MCP Protocol USB-C port for AI applications\n\nThe **A2A protocol**, spearheaded by Google, is designed to be the universal language for AI agents.  It moves us away from a closed way of  agent communication methods and towards a future where agents can:\n\n* **Discover** each other's capabilities.\n* **Securely** exchange information.\n* **Coordinate** actions to achieve common goals.\n\nKey components of the A2A protocol include:\n\n* **Agents:** The autonomous entities that communicate.\n* **Messages:** The containers for information exchanged between agents.\n* **Parts:** The building blocks of a message (text, files, structured data).\n* **Tasks:** The units of work that agents perform for each other.\n* **Agent Card:** A cornerstone of A2A, think of it as an agent's digital business card.\n\n### The Agent Card: An Agent's Identity\n\nThe **Agent Card** is a JSON-formatted file that an agent publishes to advertise its capabilities.  It's typically located at a well-known URL (`/.well-known/agent.json`) and provides essential information for other agents to discover and interact with it.  An Agent Card typically includes:\n\n* **Agent Name and Description:** Human-readable information about the agent.\n* **Endpoint URL:** The address where the agent can be reached for A2A communication.\n* **Version:** The A2A protocol version the agent supports.\n* **Capabilities:** The features the agent supports (e.g., streaming, push notifications).\n* **Authentication:** The security mechanisms the agent requires.\n* **Skills:** A detailed description of the specific functions the agent can perform.\n\nWith Agent Cards, agents can dynamically discover each other and understand how to communicate, enabling flexible and extensible multi-agent systems.\n\nIn our case we have exposed it as a rest end point\n\n## Features\n\nThis Java implementation provides the foundation for building A2A and MCP compliant agents:\n\n* **A2A Server:**\n    * Receives and processes tasks from client agents, acting as a hub for agent collaboration.\n    * Manages the lifecycle of tasks, tracking their state and history.\n    * Serializes task data into JSON for standardized communication.\n    * Exposes A2A endpoints using the Spring MVC framework. As rest calls as well as one endpoint for JSONRPC communicaiton \n    * \n* **A2A Client:**\n    * Sends tasks to A2A servers, initiating agent interactions.\n    * Retrieves task information, allowing agents to monitor progress and obtain results.\n    * Communicates with A2A servers using Spring's `RestTemplate`. With JSONRPC protocol, there is only one endpoint to send and receive messages.\n* **JSON Handling:** Uses Jackson, a  Java library, for seamless JSON serialization/deserialization.\n* **Task Management:** Supports the core A2A task operations: sending tasks and retrieving their information, including historical data.\n* **Message Parts:** Handles `TextPart`, `FilePart`, and `DataPart`, providing flexibility in message content to support various data formats.\n\n* ** MCP Server:**\n    * Exposes MCP endpoints using the Spring MVC framework.\n    * Supports MCP tools and tasks, allowing agents to interact with MCP clients.\n    * Provides a unified interface for both A2A and MCP clients, enabling seamless communication across protocols.\n\n\n## Usage\n\nFastest way to use to create the A2A amd MCP server is by using the annonvation \n\n``` \n@SpringBootApplication\n@EnableAgent\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n}\n```\n\nThis will expose all the services annotated with `@Action` as A2A tasks and MCP tools. You can also use the `@Agent` annotation to create an agent and register it with the A2A server.\n\n```java\n@Service\n@Agent(groupName =\"whatThisPersonFavFood\", groupDescription = \"Provide persons name and then find out what does that person like\")\n@Slf4j\npublic class SimpleService {\n\n    /**\n     * Each action has access to AIProcessor and ActionCallback which are autowired by tools4ai\n     */\n    private ActionCallback callback;\n\n    /**\n     * Each action has access to AIProcessor and ActionCallback which are autowired by tools4ai\n     */\n    private AIProcessor processor;\n    public SimpleService(){\n      log.info(\" Created Simple Service\");\n    }\n\n    @Action(description = \"Get the favourite food of a person\")\n    public String whatThisPersonFavFood(String name) {\n        if(\"vishal\".equalsIgnoreCase(name))\n        return \"Paneer Butter Masala\";\n        else if (\"vinod\".equalsIgnoreCase(name)) {\n            return \"aloo kofta\";\n        }else\n            return \"something yummy\";\n    }\n\n}\n```\n\nThats it , yeah its that simple!!!\n\nNow this agent will be avaiable to both a2a as well as MCP clients. For more advanced features look at the tutorials section\n\n## Client \n\nIf you want to connect a java base client you can use \n```java\n  A2AAgent a2aagent = new A2AAgent();\n  a2aagent.connect(\"http://localhost:7860\");\n  Object task = a2aagent.remoteMethodCall(\"vishal is coming home what should i cook\");\n```\n\n\n## Contributing\nContributions are welcome! Please feel free to submit a Pull Request. For major changes, please open an issue first to discuss what you would like to change\n\n## Important Disclaimer(s)\n\n  \n* The A2A and MCP protocol is an evolving standard, and this implementation may need to be updated as the protocols matures.  Always refer to the official A2A documentation for the latest specifications and best practices.  \n* This implementation is not affiliated with or endorsed by Google or Anthropic.  It is my independent effort to demonstrate the A2A and MCP protocol in Java.\n* Unit test coverage needs to be enhanced , will be working on it \n  \n  \n  \n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "a2ajava",
        "java",
        "a2a",
        "java applications",
        "a2ajava brings",
        "vishalmysore a2ajava"
      ],
      "category": "for-clients"
    },
    "xuzexin-hz--llm-analysis-assistant": {
      "owner": "xuzexin-hz",
      "name": "llm-analysis-assistant",
      "url": "https://github.com/xuzexin-hz/llm-analysis-assistant",
      "imageUrl": "/freedevtools/mcp/pfp/xuzexin-hz.webp",
      "description": "A very streamlined mcp client that supports calling and monitoring stdio/sse/streamableHttp, and can also view request responses through the /logs page. It also supports monitoring and simulation of ollama/openai interface.",
      "stars": 1,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-08-22T13:56:10Z",
      "readme_content": "\n[English](./README.md) | [ÁÆÄ‰Ωì‰∏≠Êñá](./README_zh.md) \n\n# 1„ÄÅProject Features\nThrough this proxy service, we can easily record the parameters and return results of the interaction with the big model, so as to conveniently analyze the logic of the client calling the big model and deeply understand the phenomenon and its essence.\nThis project is not for optimizing the big model, but it can help you uncover the mystery of the big model, understand and achieve product market fit (PMF).\n\nMCP is also an important part of LLM, so this project can also be used as an mcp client and supports detection of sse/mcp-streamable-http mode.\n\n# üåü Main features\n### Function list:\n1. **mcp client (already supports stdio/sse/streamableHttp calls)**\n2. **mcp initialization detection and analysis (such as Cherry Studio supports stdio/sse/streamableHttp)**\n3. **Detect ollama/openai interface and generate analysis log**\n4. **mock ollama/openai interface data**\n\n### Technical features:\n1. **uv tool use**\n2. **uvicorn framework use**\n3. **front-end async, back-end async**\n4. **log display real-time refresh, breakpoint continuation**\n5. **py socket write http client, support get/post, and their respective streaming output**\n6. **webSocket combined with asyncio use**\n7. **threading/queue use**\n8. **py program packaged into exe**\n9. **python -m llm_analysis_assistant**\n\n# 2. Project Background\nBefore the arrival of true AGI, we will have to go through a long journey, during which we will have to face constant challenges. Whether ordinary people or professionals, their lives will be changed.\n\nHowever, for the use of large models, both ordinary users and developers often indirectly contact them through various clients. But the client often blocks the process of interacting with the large model, and can directly give results based on the user's simple input, giving people a feeling that the large model is mysterious, like a black box. In fact, this is not the case. When using a large model, we simply understand that we are calling an interface with input and output.\nIt should be noted that although many inference platforms provide OpenAI format interfaces, their actual support varies. Simply put, the request parameters and return parameters of the API are not exactly the same.\n\nFor detailed parameter support, please see\n\n[Semi-standard:OpenAI API](https://platform.openai.com/docs/api-reference/responses/create)\n\n[n development:OLLAMA API](https://github.com/ollama/ollama/blob/main/docs/openai.md#supported-features)\n\n[in production:VLLM API](https://docs.vllm.ai/en/stable/api/inference_params.html#sampling-parameters)\n\nPlease check for other platforms\n\n### This project uses the uvicorn framework to start asgi to provide API services, with minimal dependencies, running quickly and concisely, paying tribute to the classics\n\n# 3. Installation\n\n```sh\n\n# clone git\ngit clone https://github.com/xuzexin-hz/llm-analysis-assistant.git\ncd llm-analysis-assistant\n\n# Install the extension\nuv sync\n\n```\n\n# 4. Use\nEnter the root directory, then the bin directory\nClick run-server.cmd to start the service\nClick run-build.cmd to package the service into an executable file (in the dist directory)\nOr run the following command directly in the root directory:\n\n```sh\n\n#Default port 8000\npython server.py\n\n#You can also specify the port\npython server.py --port=8001\n\n#You can also specify the openai address, the default is the ollama address: http://127.0.0.1:11434/v1/\npython server.py --base_url=https://api.openai.com\n#If you configure other api addresses, remember to fill in the correct api_key, ollama does not need api_key by default\n\n#--is_mock=true Turn on mock and return mock data\npython server.py --is_mock=true\n\n#--mock_string, you can customize the returned mock data, if you do not set this item, the default mock data will be returned. This parameter also applies to non-streaming output\npython server.py --is_mock=true --mock_string=Hello\n\n#--mock_count, the number of times the mock returns data when streaming output, the default is 3 times\npython server.py --is_mock=true --mock_string=Hello --mock_count=10\n\n#--single_word, mock streaming output return effect, the default is to divide a sentence into 3 parts according to [2:5:3] and return them in sequence, after setting the second parameter, it will be a word-by-word streaming output effect\npython server.py --is_mock=true --mock_string=‰Ω†Â•ΩÂïä --single_word=true\n\n#--looptime, mock streaming output return data interval, the default is 0.35 seconds, set looptime=1 when streaming output display data speed will be slow\npython server.py --is_mock=true --mock_string=‰Ω†Â•ΩÂïä --looptime=1\n\n```\n\n### Using uv (recommended)\n\nWhen using [`uv`](https://docs.astral.sh/uv/) no specific installation is needed. We will use \n[`uvx`](https://docs.astral.sh/uv/guides/tools/) to directly run *llm-analysis-assistant*.\n\n```\nuvx llm_analysis_assistant\n```\n\n### Using PIP(üåü)\n\nAlternatively you can install `llm-analysis-assistant` via pip:\n\n```\npip install llm-analysis-assistant\n```\n\nAfter installation, you can run it as a script using:\n\n```\npython -m llm_analysis_assistant\n```\n\nhttp://127.0.0.1:8000/logs View logs in real time\n\n# Detection, analysis and call mcp (currently supports stdio/sse/streamableHttp)\n\nThe implementation logic of mcp client technology is as follows. The interface log seems to be a sequential request, but it is not actually a simple request-response mode. This is easier for users to understand\n\n![mcp.png](docs/imgs/mcp.png)\n\nmcp-sse logic details (for similarities and differences with stdio/streamableHttp, please refer to other materials)\n\n![mcp-sse.png](docs/imgs/mcp-sse.png)\n\n# Detection and analysis of mcp-stdio\nOpen the following address in the browser. In the command line, ++user=xxx means that the system variable is user and the value is xxx\n\nhttp://127.0.0.1:8000/mcp?url=stdio\n\nOr use Cherry Studio to add the stdio service\n\n![Cherry-Studio-mcp-stdio.png](docs/imgs/Cherry-Studio-mcp-stdio.png)\n\n# Detection and analysis of mcp-sse\nOpen the following address in the browser, the url is the sse service address\n\nhttp://127.0.0.1:8000/mcp?url=http://127.0.0.1:8001/sse\n\nhttp://127.0.0.1:8000/mcp?url=http://127.0.0.1:8002/sse?++user=xxx # ++user=xxx in the url means the HTTP request header user value is xxx\n\nOr use Cherry Studio to add the mcp service\n\n![Cherry-Studio-mcp-sse.png](docs/imgs/Cherry-Studio-mcp-sse.png)\n\n# Detection and analysis of mcp-streamable-http\nOpen the following address in the browser, the url is the streamableHttp service address\n\nhttp://127.0.0.1:8000/mcp?url=http://127.0.0.1:8001/mcp\n\nhttp://127.0.0.1:8000/mcp?url=http://127.0.0.1:8001/mcp?++user=xxx # ++user=xxx in the url means the HTTP request header user value is xxx\n\nOr use Cherry Studio to add the mcp service\n\n![mcp-streamable-http.png](docs/imgs/mcp-streamable-http.png)\n\nWhen using Cherry Studio, you can http://127.0.0.1:8000/logs View the logs in real time to analyze the calling logic of sse/mcp-streamable-http\n\n# 5. Example collection\nChange the base_url of openai to the address of the service: http://127.0.0.1:8000\n### ‚ë¥. Analyze langchain\n### Install langchain first:\n```sh\n\npip install langchain langchain-openai\n\n```\n\n```sh\n\nfrom langchain.chat_models import init_chat_model\nmodel = init_chat_model(\"qwen2.5-coder:1.5b\", model_provider=\"openai\",base_url='http://127.0.0.1:8000',api_key='ollama')\nmodel.invoke(\"Hello, world!\")\n\n```\n##### After running the above code, if you want to view the log file, you can enter the corresponding day folder in the logs directory to view it. There is a log file for each request\n##### Open [http://127.0.0.1:8000/logs](http://127.0.0.1:8000/logs) to view the logs in real time\n\n### ‚ëµAnalysis tool set\n#### 1. Tool Open WebUI\n[Open WebUI.md](docs/Open%20WebUI.md)\n\n#### 2. Tool Cherry Studio\n[Cherry Studio.md](docs/Cherry%20Studio.md)\n\n#### 3. Tool continue\n[continue.md](docs/continue.md)\n\n#### 4. Tool Navicat\n[Navicat.md](docs/Navicat.md)\n\n### ‚ë∂„ÄÅAnalysis agent\n#### 1. Agent Multi-Agent Supervisor\n\n####### Agent is a node, agent is a tool, leader mode\n\n![langgraph-supervisor1.png](docs/imgs/langgraph-supervisor1.png)\n\n[langgraph-supervisor.md](docs/langgraph-supervisor.md)\n\n#### 2. Intelligent agent Multi-Agent Swarm\n###### Professional matters are reliable when handed over to professionals, teamwork mode\n\n![langgraph-swarm1.png](docs/imgs/langgraph-swarm1.png)\n\n[langgraph-swarm.md](docs/langgraph-swarm.md)\n\n#### 3. Intelligent agent codeact\n####### Every inch has its own strengths and weaknesses (it is said that CodeAct will greatly improve accuracy and efficiency in some scenarios)\n\n![langgraph-codeact1.png](docs/imgs/langgraph-codeact1.png)\n\n[langgraph-codeact.md](docs/langgraph-codeact.md)\n\n# License\n[Apache 2.0 License.](LICENSE)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "monitoring",
        "openai",
        "mcp",
        "mcp client",
        "clients xuzexin",
        "supports monitoring"
      ],
      "category": "for-clients"
    },
    "zueai--mcp-manager": {
      "owner": "zueai",
      "name": "mcp-manager",
      "url": "https://github.com/zueai/mcp-manager",
      "imageUrl": "/freedevtools/mcp/pfp/zueai.webp",
      "description": "Simple Web UI to install and manage MCP servers for Claude Desktop",
      "stars": 264,
      "forks": 39,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T22:32:00Z",
      "readme_content": "<h1 align=\"center\">MCP Manager for Claude Desktop</h1>\n\n<p align=\"center\">A desktop application to manage Model Context Protocol (MCP) servers for the Claude Desktop app on MacOS. Just follow the instructions and paste a few commands to give your Claude app instant superpowers.</p>\n\n![MCP Manager for Claude Desktop](https://assets.zue.ai/mcp-manager-hero.png)\n\n## What is MCP?\n\nThe Model Context Protocol (MCP) enables Claude to access private data, APIs, and other services to answer questions and perform actions on your behalf. Learn more about MCP at:\n\n- [modelcontextprotocol.io](https://modelcontextprotocol.io)\n- [Anthropic's MCP Announcement](https://www.anthropic.com/news/model-context-protocol)\n\n## Features\n\n- üöÄ Easy-to-use desktop interface for managing MCP servers\n- üîí Runs locally - your data never leaves your computer\n- ‚ö°Ô∏è Quick setup for popular MCP servers:\n  - Apple Notes - Access and search your Apple Notes\n  - AWS Knowledge Base - Access and query AWS Knowledge Base for information retrieval\n  - Brave Search - Search the web with Brave Search API\n  - Browserbase - Let Claude explore the web with Browserbase\n  - Cloudflare - Manage your Cloudflare workers and account resources\n  - Everart - Interface with Everart API for digital art and design tools\n  - Exa - Search the web with Exa\n  - Filesystem - Access and manage local filesystem\n  - GitHub - Access your GitHub repositories\n  - GitLab - Manage GitLab repositories and resources\n  - Google Drive - Access and search files in your Google Drive\n  - Google Maps - Access Google Maps API for location services\n  - Memory - Give Claude memory of previous conversations\n  - Obsidian - Read and search files in your Obsidian vault\n  - Perplexity - Search the web with Perplexity API\n  - PostgreSQL - Connect and interact with PostgreSQL databases\n  - Puppeteer - Automate browser interactions\n  - Sequential Thinking - Enable step-by-step reasoning\n  - Slack - Access your Slack workspace\n  - SQLite - Manage SQLite databases\n  - Todoist - Access and search your Todoist tasks\n  - YouTube Transcript - Access and search YouTube transcripts\n- üõ† Simple configuration of environment variables and server settings\n- üìã One-click copying of terminal commands for installation\n\n## Tech Stack\n\n- **Desktop Framework**: \n  - Electron 29.1.4 with React 18.3.1\n  - TypeScript 5.6.2\n- **Build Tool**: \n  - Vite 6.0.1\n  - Electron Builder 25.1.8\n- **UI Components**:\n  - TailwindCSS 3.4.16\n  - DaisyUI 4.12.14\n  - Lucide React 0.468.0 for icons\n  - Tiempos Font\n- **Code Quality**:\n  - Biome 1.9.4\n  - ESLint 9.15.0\n- **Package Manager**: Bun\n\n## Project Structure\n\n```plaintext\nsrc/\n‚îú‚îÄ‚îÄ components/ # React components\n‚îÇ ‚îú‚îÄ‚îÄ server-configs/ # Server-specific configuration components\n‚îÇ ‚îî‚îÄ‚îÄ ...\n‚îú‚îÄ‚îÄ assets/ # Static assets and fonts\n‚îú‚îÄ‚îÄ App.tsx # Main application component\n‚îú‚îÄ‚îÄ server-configs.ts # MCP server configurations\n‚îî‚îÄ‚îÄ utils.ts # Utility functions\nelectron/\n‚îú‚îÄ‚îÄ main.ts # Electron main process\n‚îî‚îÄ‚îÄ tsconfig.json # TypeScript config for Electron\n```\n\n## Development\n\n1. Install dependencies:\n   ```bash\n   bun install\n   ```\n\n2. Start development:\n   ```bash\n   bun electron:dev\n   ```\n\n3. Build for MacOS:\n   ```bash\n   rm -rf dist dist-electron # When rebuilding\n   bun electron:build # Creates .dmg installer\n   ```\n\n4. Additional commands:\n   ```bash\n   bun check # Run TypeScript checks and Biome formatting\n   bun lint # Run ESLint\n   ```\n\n## Work to be done\n\nAdd preset MCPs:\n- Fetch \n- Time-related \n- Sentry \n\nContributions to resolve these are welcome!\n\n## Contributing\n\nContributions are extremely welcome! Please open a PR with new MCP servers or any other improvements to the codebase.\n\n## Disclaimer\n\nThis project is not affiliated with Anthropic. All logos are trademarks of their respective owners.\n\n## License\n\nMIT\n\n---\n<br/>\n<br/>\n<p align=\"center\">\n<a href=\"https://zue.ai#gh-light-mode-only\">\n  <img src=\"https://assets.zue.ai/logo_zue_purple.svg\" alt=\"zue logo\" width=\"200\" height=\"auto\" style=\"display: block; margin: 0 auto;\" />\n</a>\n<a href=\"https://zue.ai#gh-dark-mode-only\">\n  <img src=\"https://assets.zue.ai/logo_zue_yellow.svg\" alt=\"zue logo\" width=\"200\" height=\"auto\" style=\"display: block; margin: 0 auto;\" />\n</a>\n</p>\n\n<p align=\"center\">\n<a href=\"https://zue.ai/talk-to-us\">Contact us</a> for custom AI automation solutions and product development.\n</p>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "ui",
        "manager",
        "mcp servers",
        "mcp manager",
        "manage mcp"
      ],
      "category": "for-clients"
    }
  }
}