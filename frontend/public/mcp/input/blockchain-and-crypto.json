{
  "category": "blockchain-and-crypto",
  "categoryDisplay": "Blockchain and Crypto",
  "description": "",
  "totalRepositories": 80,
  "repositories": {
    "0xKoda--eth-mcp": {
      "owner": "0xKoda",
      "name": "eth-mcp",
      "url": "https://github.com/0xKoda/eth-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/0xKoda.webp",
      "description": "This server allows users to access and query data from the Ethereum blockchain, providing vital information such as account balances and current gas prices through simple requests.",
      "stars": 10,
      "forks": 7,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-01T17:38:57Z",
      "readme_content": "# Ethereum RPC MCP Server\n\nA Model Context Protocol (MCP) server for interacting with Ethereum blockchain.\n\n## Overview\n\nThis MCP server provides tools to query Ethereum blockchain data through standard JSON-RPC methods. It enables AI assistants and applications to interact with the Ethereum blockchain through a standardized protocol.\n\n## Features\n\nThis MCP server provides three key Ethereum RPC methods as tools:\n\n- **eth_getCode**: Retrieve the code at a specific Ethereum address\n- **eth_gasPrice**: Get the current gas price on the Ethereum network\n- **eth_getBalance**: Check the balance of an Ethereum account\n\nNote: More are coming\n\n## Usage\n\n### Adding to Cursor\n\nTo add this MCP to Cursor:\n\n1. First, clone this repository:\n   ```bash\n   git clone https://github.com/yourusername/eth-mpc.git\n   ```\n   \n2. Go to Cursor settings → MCP → Add new MCP server\n3. Enter a name (e.g., \"eth-mcp\")\n4. Select \"command\" as the type\n5. Input the full path to the script:\n   ```\n   node /path/to/eth-mpc/index.js\n   ```\n\n\n\n6. Click \"Add\" to enable the server\n\nOnce added, the Ethereum RPC tools will be available to use within Cursor.\n\n\nThe server uses stdio transport, making it compatible with MCP clients like Claude Desktop, Cursor, and others.\n\n## Testing with MCP Inspector\n\nThe MCP Inspector is a development tool for testing and debugging MCP servers. It provides an interactive interface to test your MCP server's functionality without needing a full AI client.\n\n### Running the Inspector\n\nTo test your Ethereum RPC MCP server with the Inspector:\n\nTo run the Inspector:\n   ```bash\n   npx @modelcontextprotocol/inspector\n   ```\n\n2. Input the command and path\n\n3. The Inspector will connect to your running MCP server and display available tools.\n\n### Testing Tools with Inspector\n\nThe Inspector allows you to:\n\n- View available tools and their descriptions\n- Test each tool with different parameters\n- See the responses in a structured format\n- Debug any issues with your MCP server implementation\n\nFor example, to test the `eth_getBalance` tool:\n1. Select the tool in the Inspector interface\n2. Enter a valid Ethereum address (e.g., `0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045` - Vitalik's address)\n3. Use the default block parameter (`latest`)\n4. Submit the request and view the response\n\n\n## Integration with MCP Clients\n\nThis MCP server can be integrated with any MCP-compatible client, including:\n\n- Claude Desktop \n- Claude Code\n- Cursor (instructions above)\n- Cline\n- Other MCP-compatible applications\n\nWhen integrated, the client application can use the tools provided by this server to query Ethereum blockchain data directly.\n\n## Understanding MCP\n\nModel Context Protocol (MCP) is an open standard that allows AI models to interact with various tools and services. It provides a standardized way for developers to expose APIs, data sources, and functionality to AI assistants.\n\n### Learn More About MCP\n\nMCP servers like this one form part of an ecosystem that allows AI assistants to perform complex tasks across multiple services without requiring custom integration for each service.\n\n📚 **Official Documentation**: [Model Context Protocol Overview](https://modelcontextprotocol.io/sdk/java/mcp-overview)\n\n## License\n\nMIT\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crypto",
        "ethereum",
        "blockchain",
        "crypto 0xkoda",
        "0xkoda eth",
        "mcp server"
      ],
      "category": "blockchain-and-crypto"
    },
    "5ajaki--veri5ight": {
      "owner": "5ajaki",
      "name": "veri5ight",
      "url": "https://github.com/5ajaki/veri5ight",
      "imageUrl": "/freedevtools/mcp/pfp/5ajaki.webp",
      "description": "Veri5ight is an MCP server that allows users to interact with Ethereum nodes, providing information on token balances, smart contracts, and enabling direct access to Ethereum features without restrictions.",
      "stars": 1,
      "forks": 5,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-02-28T04:41:36Z",
      "readme_content": "# 🔍 Veri5ight\n\n> Your friendly neighborhood Ethereum node whisperer! A Model Context Protocol (MCP) server that helps Claude chat with Ethereum nodes.\n\n## 🌟 What's This All About?\n\nVeri5ight is a direct interface between Claude and Ethereum nodes, providing:\n\n- 💰 Real-time token balance and delegation info for any ERC20\n- 🔎 Smart contract information\n- 🚀 Direct node access without rate limits\n- 🔒 Private, secure interactions\n\n<a href=\"https://glama.ai/mcp/servers/en31vxf492\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/en31vxf492/badge\" alt=\"Veri5ight Server MCP server\" /></a>\n\n## 🚀 Quick Start\n\n```bash\n# Clone the repository\ngit clone https://github.com/5ajaki/veri5ight.git\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## ⚙️ Configuration\n\n1. Copy `.env.example` to `.env`:\n\n```bash\ncp .env.example .env\n```\n\n2. Add your Ethereum node URL (example shown below - update with your actual node URL and port):\n\n```env\nETH_NODE_URL=\"http://localhost:8545\"  # Example - replace with your node's URL and port\n```\n\n3. Configure Claude Desktop:\n\n```json\n{\n  \"mcpServers\": {\n    \"veri5ight\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/veri5ight/dist/index.js\"] // Local path to the compiled index.js file\n    }\n  }\n}\n```\n\nNote: The path in step 3 must point to the compiled index.js in your local dist directory. This is created when you run `npm run build`.\n\n### Launch Options\n\nBy default, Veri5ight launches automatically with the Claude Desktop App. If you prefer to run it on-demand:\n\n1. Remove the postbuild script from package.json that auto-launches with Claude\n2. Run manually when needed:\n\n```bash\nnode dist/index.js\n```\n\n## 🎮 Available Tools\n\n### ethereum_getTokenBalance\n\nGet the token balance for any ERC20 token using address or ENS name.\n\nExample:\n\n```\nClaude, what's vitalik.eth's UNI balance?\n```\n\n### ethereum_getTokenDelegation\n\nCheck delegation info for any governance token.\n\nExample:\n\n```\nClaude, who has nick.eth delegated their tokens to?\n```\n\n### ethereum_getContractInfo\n\nGet detailed information about any smart contract.\n\nExample:\n\n```\nClaude, what can you tell me about this contract: nick.eth\n```\n\n### ethereum_getRecentTransactions\n\nView recent transactions for any address. Note: This function scans the most recent 10 blocks for transactions involving the specified address.\n\nExample:\n\n```\nClaude, show me any recent transactions for vitalik.eth\n```\n\nThe function will return up to the requested number of transactions (default 3) found within those blocks. If no transactions are found in the recent blocks, it will return an empty result.\n\n## 🔍 Debugging\n\nCheck Claude's logs for any issues:\n\n```bash\ntail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n```\n\n## 💡 Why Direct Node Access?\n\n- **Low Latency**: Direct node queries without API overhead\n- **No Rate Limits**: Unlimited queries to your own node\n- **Privacy**: Queries stay between you and your node\n- **Full Access**: Complete JSON-RPC API availability\n- **Real-time Data**: Direct access to latest blockchain state\n\n## 🛠️ Development\n\n```bash\n# Watch mode for the cool kids\nnpm run dev\n\n# Build for production\nnpm run build\n```\n\n## 🤝 Contributing\n\nGot ideas? Found a bug? PRs are welcome! Just:\n\n1. Fork it\n2. Branch it\n3. Code it\n4. PR it\n\n## 📜 License\n\nMIT - Go wild! See [LICENSE](LICENSE) for the boring legal stuff.\n\n## 🙏 Props\n\n- Built with ❤️ by the Veri5ight team\n- Powered by Claude's big brain\n- Standing on the shoulders of Ethereum giants\n\n## 🆘 Need Help?\n\n- 🐛 Found a bug? Open an issue!\n- 🤔 Questions? Start a discussion!\n- 🎉 Cool feature idea? Let's hear it!\n\nRemember: Veri5ight is like a Swiss Army knife for Ethereum data - just don't try to open bottles with it! 🍾\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "veri5ight",
        "5ajaki",
        "mcp",
        "veri5ight mcp",
        "5ajaki veri5ight",
        "veri5ight veri5ight"
      ],
      "category": "blockchain-and-crypto"
    },
    "8bitsats--GROK_MCP": {
      "owner": "8bitsats",
      "name": "GROK_MCP",
      "url": "https://github.com/8bitsats/GROK_MCP",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Analyze Solana blockchain transactions and addresses, process images through vision capabilities, and answer general queries with contextual understanding.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "8bitsats",
        "crypto",
        "blockchain",
        "solana blockchain",
        "crypto 8bitsats",
        "8bitsats grok_mcp"
      ],
      "category": "blockchain-and-crypto"
    },
    "AbdelStark--bitcoin-mcp": {
      "owner": "AbdelStark",
      "name": "bitcoin-mcp",
      "url": "https://github.com/AbdelStark/bitcoin-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/AbdelStark.webp",
      "description": "Enable AI models to retrieve and interact with Bitcoin data, transaction management, and Lightning Network functionalities.",
      "stars": 61,
      "forks": 16,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-01T15:33:55Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/abdelstark-bitcoin-mcp-badge.png)](https://mseep.ai/app/abdelstark-bitcoin-mcp)\n\n<div align=\"center\">\n\n<a href=\"https://github.com/AbdelStark/bitcoin-mcp/actions/workflows/ci.yml\"><img alt=\"GitHub Workflow Status\" src=\"https://img.shields.io/github/actions/workflow/status/AbdelStark/bitcoin-mcp/ci.yml?style=for-the-badge\" height=30></a>\n<a href=\"https://bitcoin.org/\"> <img alt=\"Bitcoin\" src=\"https://img.shields.io/badge/Bitcoin-000?style=for-the-badge&logo=bitcoin&logoColor=white\" height=30></a>\n<a href=\"https://modelcontextprotocol.com/\"> <img alt=\"MCP\" src=\"https://img.shields.io/badge/MCP-000?style=for-the-badge&logo=modelcontextprotocol&logoColor=white\" height=30></a>\n\n</div>\n\n# ₿itcoin & Lightning Network MCP Server\n\n<div align=\"center\">\n  <h3>\n    <a href=\"abdelstark.github.io/bitcoin-mcp/\">\n      Documentation\n    </a>\n    <span> | </span>\n    <a href=\"https://abdelstark.github.io/bitcoin-mcp/docs/integration/claude-desktop\">\n      Try with Claude\n    </a>\n    <span> | </span>\n    <a href=\"https://abdelstark.github.io/bitcoin-mcp/docs/integration/goose\">\n      Try with Goose\n    </a>\n  </h3>\n</div>\n\n<div align=\"center\">\n<a href=\"https://smithery.ai/server/@AbdelStark/bitcoin-mcp\"><img alt=\"Smithery Badge\" src=\"https://smithery.ai/badge/@AbdelStark/bitcoin-mcp\"></a>\n<a href=\"https://www.npmjs.com/package/bitcoin-mcp\"><img alt=\"NPM Version\" src=\"https://img.shields.io/npm/v/bitcoin-mcp\"></a>\n</div>\n\n## Overview\n\nA Model Context Protocol (MCP) server that enables AI models to interact with Bitcoin and Lightning Network, allowing them to generate keys, validate addresses, decode transactions, query the blockchain, and more.\n\n## 🎮 Demo\n\n| Claude Demo [Video](https://github.com/user-attachments/assets/ce7a2665-c276-4a54-a727-b29dd911f8af)         | Goose Demo [Video](https://github.com/user-attachments/assets/7c1e4a05-51cf-435f-bd34-39e8fba6635e) |\n| ------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------- |\n|  |           |\n\n## 💼 Table of Contents\n\n- [₿itcoin \\& Lightning Network MCP Server](#itcoin--lightning-network-mcp-server)\n  - [Overview](#overview)\n  - [🎮 Demo](#-demo)\n  - [💼 Table of Contents](#-table-of-contents)\n  - [🔧 Features](#-features)\n  - [🔑 Claude Desktop Integration](#-claude-desktop-integration)\n    - [Testing the Claude Desktop Integration](#testing-the-claude-desktop-integration)\n  - [🦆 Goose Integration](#-goose-integration)\n    - [Using STDIO (Local Extension)](#using-stdio-local-extension)\n      - [Using SSE (Remote Extension)](#using-sse-remote-extension)\n  - [📦 Development Setup](#-development-setup)\n    - [Lightning Network Configuration (Optional)](#lightning-network-configuration-optional)\n  - [📦 Available Tools](#-available-tools)\n  - [🚨 Error Handling](#-error-handling)\n  - [🤝 Contributing](#-contributing)\n  - [📝 License](#-license)\n\n## 🔧 Features\n\n- **Key Generation**: Create new Bitcoin key pairs — including address, public key, and private key (WIF).\n- **Address Validation**: Validate the correctness of a Bitcoin address.\n- **Transaction Decoding**: Parse a raw Bitcoin transaction and display its details in a human-readable format.\n- **Blockchain Queries**:\n  - **Latest Block**: Retrieve details about the most recent block (hash, height, timestamp, transaction count, etc.).\n  - **Transaction Details**: Fetch detailed information about a transaction using its TXID.\n- **Lightning Network**:\n  - **Invoice Decoding**: Parse a BOLT11 Lightning invoice and display human-readable information.\n  - **Payment**: Pay a Lightning invoice directly from your LNBits wallet.\n\n## 🔑 Claude Desktop Integration\n\nTo use the Bitcoin MCP server with Claude Desktop (Anthropic's desktop app for Claude), follow these steps:\n\n1. **Download and Install Claude Desktop:** Visit the official Claude Desktop downloads page and get the app for your operating system (macOS or Windows) ([Installing Claude for Desktop | Anthropic Help Center](https://support.anthropic.com/en/articles/10065433-installing-claude-for-desktop#:~:text=1,page)). Install the app and ensure you're using the latest version (you can check for updates in the app menu).\n\n2. **Configure Claude Desktop to use the Bitcoin MCP Server:** Open the Claude Desktop configuration file (it's created when you first edit settings in Claude Desktop):\n\n   - **macOS:** `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - **Windows:** `%APPDATA%\\Claude\\claude_desktop_config.json`  \n     Add an entry for the Bitcoin MCP server in this JSON config under the `\"mcpServers\"` section. For example:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"bitcoin-mcp\": {\n         \"command\": \"npx\",\n         \"args\": [\"-y\", \"bitcoin-mcp@latest\"]\n       }\n     }\n   }\n   ```\n\n   In the snippet above, `\"bitcoin-mcp\"` is an identifier for the server (you can name it whatever you want). The `command` is set to run the `npx` command, and `args` points to the path of your Bitcoin MCP server script or the command to run the server.\n\n3. **Restart Claude Desktop:** Save the `claude_desktop_config.json` file and then **close and reopen Claude Desktop**. On the next launch, Claude will automatically start the Bitcoin MCP server as configured. If Claude Desktop was running, you need to restart it for the changes to take effect.\n\n### Testing the Claude Desktop Integration\n\nOnce Claude Desktop is restarted, you can test whether the Bitcoin MCP server is working correctly:\n\n- **Ask Claude a sample question related to Bitcoin.** For example, try asking: _\"What's the latest block on the Bitcoin network?\"_ If the integration is successful, Claude's response should include the latest block fetched via the MCP server, rather than an \"I don't know\" or a generic answer. You can also try other queries like _\"Give me information about the transaction with TXID abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890.\"_ Claude should use the MCP server's tools to retrieve the data and answer your query.\n\n- **Verify the response:** Claude should return a detailed answer (e.g. the latest block on the Bitcoin network) without errors. If you get an error message or no useful response, the MCP server might not be connected properly.\n\n- **Check Claude's logs (if needed):** Claude Desktop provides log files that can help debug MCP integrations. If the tool isn't responding, check the log files in:\n  - **macOS:** `~/Library/Logs/Claude/`\n  - **Windows:** `%APPDATA%\\Claude\\logs\\`  \n    Look for `mcp.log` for general MCP connection messages, and a file named `mcp-server-bitcoin-mcp.log` (or with whatever name you used) for the MCP server's output/errors. These logs will show if the server started up or if there were any errors (such as a wrong path or exceptions in the server). If you see errors, fix the configuration or environment as needed, then restart Claude Desktop and test again.\n\n## 🦆 Goose Integration\n\nGoose is an open-source AI agent framework by Block that supports extensions via the Model Context Protocol. You can integrate the Bitcoin MCP server as a Goose extension to allow Goose to interact with the Bitcoin blockchain. Goose supports two modes of integration for MCP servers: running the server as a local process (STDIO) or connecting to it as a remote service via Server-Sent Events (SSE). Below are instructions for both methods:\n\n### Using STDIO (Local Extension)\n\nThis method runs the Bitcoin MCP server locally as a subprocess of Goose, communicating through standard input/output.\n\n1. **Add a new extension in Goose:** Open Goose's configuration interface. You can do this via the command line by running `goose configure`, or in the Goose Desktop app by going to **Settings > Extensions**. From the menu, choose **\"Add Extension.\"** ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#adding-extensions#:~:text=1))\n\n2. **Choose the extension type – Command-Line Extension:** When prompted for the type of extension, select **Command-Line Extension** (in the CLI menu or UI) so that Goose knows it should launch a local command ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#adding-extensions#:~:text=3,extension%20you%E2%80%99d%20like%20to%20add)) (as opposed to a built-in or remote extension).\n\n3. **Enter the extension details:** Provide a name and command for the Bitcoin MCP server:\n\n   - **Name:** You can call it \"bitcoin\", or any identifier (this will be how you refer to the extension).\n   - **Command:** Specify how to run the MCP server. For example, if you have the Python script, enter the command to run it. In the CLI configurator, it might ask \"What command should be run?\" – you would enter:\n\n     ```bash\n     npx -y bitcoin-mcp@latest\n     ```\n\n     This tells Goose to launch the Bitcoin MCP server ([GitHub - AbdelStark/bitcoin-mcp: Bitcoin MCP Server](https://github.com/AbdelStark/bitcoin-mcp)). (Make sure to use the correct path to your server script or the correct command to run the server, just like in the Claude config.)\n\n   - You typically do not need to add any arguments beyond the script path (unless your server requires special flags). The above command uses the default STDIO transport, which Goose expects for a command-line extension. (In the Goose config file, this would correspond to an entry with `cmd: \"npx\"` and `args: [\"-y\", \"bitcoin-mcp@latest\"]`, with `type: stdio` indicating standard I/O mode ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#adding-extensions#:~:text=extensions%3A%20fetch%3A%20name%3A%20GitHub%20cmd%3A,%7D%20type%3A%20stdio)).)\n\n4. **Finalize and enable:** Complete the extension addition. Goose will add this new extension to its configuration (usually `~/.config/goose/config.yaml`). Ensure the extension is **enabled** (if using the CLI wizard, it should be enabled by default once added; in the Goose Desktop app, you can check the Extensions list and toggle it on if it isn't already ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#:~:text=%E2%97%87%20%20What%20would%20you,%E2%94%82%20%20%E2%97%BB%20fetch%20%E2%94%94)) ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#:~:text=%E2%94%82%20%20%E2%97%BE%20developer%20%E2%94%82,%E2%97%BB%20fetch%20%E2%94%94))).\n\n5. **Start a Goose session with the new extension:** You can now use the extension in Goose. If you're running Goose via CLI, start a session that includes the extension by running:\n\n   ```bash\n   goose session --with-extension \"bitcoin\"\n   ```\n\nreplacing \"bitcoin\" with whatever name you gave the extension ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#:~:text=Starting%20a%20Session%20with%20Extensions)). (This ensures the session loads the extension. Alternatively, if the extension is enabled globally, Goose Desktop or CLI will automatically have it available in all sessions.)\n\n#### Using SSE (Remote Extension)\n\nThis method connects Goose to an already-running MCP server via an HTTP SSE stream. Use this if you want to run the Bitcoin MCP server as a standalone service (possibly on another machine or just independently of Goose).\n\n1. **Launch the MCP server as a standalone service:** Run the Bitcoin MCP server so that it listens for connections. In practice, this means the server needs to be started in a mode that serves an HTTP endpoint for MCP. For example, you might run the server with a specific command or option to listen on a port (such as using an MCP library's built-in web server capabilities or running under a web framework). Ensure the server is reachable at a known URL (e.g., `http://localhost:9000`) and supports the MCP protocol over SSE.\n\n2. **Add a new extension in Goose (Remote):** As before, run `goose configure` or use the Goose UI to **Add Extension** ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#adding-extensions#:~:text=1)). This time, choose **Remote Extension** when asked for the type of extension ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#adding-extensions#:~:text=3,extension%20you%E2%80%99d%20like%20to%20add)). This tells Goose that it will connect to an external server via SSE.\n\n3. **Enter the remote extension details:** Give the extension a name (e.g., \"bitcoin\") and provide the server's URL. For the **URL**, enter the base address where the MCP server is running. For instance, if your server is listening on port 9000 on your local machine, you might enter `http://localhost:9000`. Goose will attempt to connect to the MCP server's SSE endpoint at that address. (Goose uses the standard MCP SSE path, which by convention is under the `/mcp/sse` route on the server, you usually just need to supply the host and port, and Goose handles the rest.)\n\n4. **Enable the extension:** After adding the remote extension, ensure it's enabled in Goose's settings (just like in the STDIO case). Only one of the STDIO or SSE extension (with the same tools) needs to be enabled – if you accidentally enable both a local and remote version of the same server, you may want to disable one to avoid confusion.\n\n**Using the Bitcoin MCP extension in Goose:** Once the extension is set up (via either method above) and enabled, you can interact with Goose and query Bitcoin data through it. In a new Goose chat or session, simply ask questions as you normally would. Goose will recognize when to use the Bitcoin MCP tools to fulfill your request. For example:\n\n- _\"What's the latest Bitcoin block?\"_\n- _\"Give me information about the transaction with TXID abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890.\"_\n\nWhen you ask these questions, Goose will invoke the MCP server's tools and return the answer (e.g., the latest Bitcoin block information). You should see Goose responding with up-to-date information pulled from the Bitcoin blockchain via the MCP server.\n\nIf Goose does not seem to use the extension (for instance, if it responds that it cannot find the information), make sure the extension is enabled and that the server is running (in SSE mode for remote). You can also run Goose's CLI with verbose logging to see if it attempted to call the extension. Generally, if configured correctly, Goose will automatically discover the MCP server's capabilities and use them when relevant.\n\n**Further Resources:** For more details on Goose extensions and the MCP, refer to the official Goose documentation ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#adding-extensions#:~:text=MCP%20Server%20Directory)). The docs include a list of built-in and community extensions and explain how MCP servers integrate into Goose. You can also find a directory of available MCP servers and additional configuration tips in the Goose docs and the Model Context Protocol documentation. This can help if you want to explore more extensions or develop your own.\n\n## 📦 Development Setup\n\nFind the setup instructions in the [Development Setup](https://abdelstark.github.io/bitcoin-mcp/docs/getting-started/development-setup) guide.\n\n### Lightning Network Configuration (Optional)\n\nTo use Lightning Network features, you'll need to configure LNBits connection details. These are optional and only required if you plan to use the Lightning Network tools.\n\n```json\n{\n  \"lnbitsUrl\": \"https://demo.lnbits.com\",  \n  \"lnbitsAdminKey\": \"your_admin_key\",      // Required for making payments\n  \"lnbitsReadKey\": \"your_read_key\"         // Required for wallet information\n}\n```\n\nYou can obtain these values by:\n1. Creating an account at [LNBits](https://lnbits.com/)\n2. Creating a new wallet\n3. Going to API info to find your API keys\n\n## 📦 Available Tools\n\nFind the available tools in the [API Reference](https://abdelstark.github.io/bitcoin-mcp/docs/api/generate-key) guide.\n\n## 🚨 Error Handling\n\nThe server employs custom error types to handle Bitcoin operations and blockchain queries. Detailed error messages are logged using Pino and included in client responses for easier debugging.\n\n## 🤝 Contributing\n\nContributions and feature requests are welcome! Feel free to submit pull requests or open issues on GitHub.\n\n## 📝 License\n\nThis project is licensed under the [MIT License](LICENSE).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "crypto",
        "bitcoin",
        "blockchain crypto",
        "abdelstark bitcoin",
        "bitcoin mcp"
      ],
      "category": "blockchain-and-crypto"
    },
    "AdamikHQ--adamik-mcp-server": {
      "owner": "AdamikHQ",
      "name": "adamik-mcp-server",
      "url": "https://github.com/AdamikHQ/adamik-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/AdamikHQ.webp",
      "description": "Enables interactions with over 60 blockchain networks for managing transactions, obtaining account insights, staking, and token interactions through a unified API.",
      "stars": 2,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-06-24T07:52:45Z",
      "readme_content": "# 🚀 Adamik MCP Server\n\n[![NPM Version](https://img.shields.io/npm/v/@adamik/mcp-server?style=flat-square&color=blue)](https://www.npmjs.com/package/@adamik/mcp-server)\n[![Downloads](https://img.shields.io/npm/dm/@adamik/mcp-server?style=flat-square&color=green)](https://www.npmjs.com/package/@adamik/mcp-server)\n[![Smithery Badge](https://smithery.ai/badge/@AdamikHQ/adamik-mcp-server)](https://smithery.ai/server/@AdamikHQ/adamik-mcp-server)\n[![GitHub Stars](https://img.shields.io/github/stars/AdamikHQ/adamik-mcp-server?style=flat-square)](https://github.com/AdamikHQ/adamik-mcp-server/stargazers)\n\n<p align=\"center\">\n  \n</p>\n\n<h2 align=\"center\">🌐 Control 60+ Blockchains with Natural Language</h2>\n\n<p align=\"center\">\n  <strong>The most powerful blockchain MCP server for Claude, ChatGPT, and any MCP client</strong><br/>\n  Turn complex blockchain operations into simple conversations\n</p>\n\n<p align=\"center\">\n  <a href=\"#-quick-start\">🚀 Quick Start</a> •\n  <a href=\"#-features\">✨ Features</a> •\n  <a href=\"#-examples\">💡 Examples</a> •\n  <a href=\"#-installation\">📦 Installation</a> •\n  <a href=\"https://adamik.io/\">🌐 Website</a>\n</p>\n\n---\n\n## ✨ Features\n\n<table>\n<tr>\n<td width=\"50%\">\n\n### 🔗 **60+ Blockchain Networks**\n\n- Ethereum, Bitcoin, Solana, Cosmos\n- Polygon, Arbitrum, Optimism, Base\n- Starknet, Aptos, Tron, and many more\n\n### 💰 **Complete Account Management**\n\n- Real-time balance checking\n- Transaction history analysis\n- Multi-chain portfolio overview\n- Staking rewards tracking\n\n</td>\n<td width=\"50%\">\n\n### 🔄 **Advanced Operations**\n\n- Native & token transfers\n- Cross-chain swaps & bridges ⭐ _Premium_\n- Staking & unstaking\n\n### 🛠 **Developer Friendly**\n\n- Type-safe schemas\n- Comprehensive error handling\n- Enterprise-grade infrastructure\n- Easy integration with [signer server](https://github.com/AdamikHQ/signer-mcp-server)\n\n</td>\n</tr>\n</table>\n\n---\n\n## 💡 What You Can Do\n\n```bash\n# Just ask in natural language:\n\"Check my ETH balance on Ethereum\"\n\"Send 0.1 ETH to 0x123\"\n\"Stake 100 ATOM with the best validator\"\n\"Convert 1000 USDC to ETH on Optimism\"  # Premium feature\n\"Show my transaction history on Polygon\"\n```\n\n**No complex setup. No wallet management hassles. Just natural conversations with blockchains.**\n\n---\n\n## 🚀 Quick Start\n\n### 1️⃣ Get Your Free API Key\n\nVisit [adamik.io](https://dashboard.adamik.io/) → Sign up → Copy your API key (takes 30 seconds)\n\n### 2️⃣ Install & Configure\n\n```bash\n# Install instantly\nnpx @adamik/mcp-server\n\n# Add to Claude Desktop config\n{\n  \"mcpServers\": {\n    \"adamik\": {\n      \"command\": \"npx\",\n      \"args\": [\"@adamik/mcp-server\"],\n      \"env\": {\n        \"ADAMIK_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n```\n\n### 3️⃣ Start Using\n\nOpen Claude Desktop and ask: _\"What's my Optimism/Tron/Solana balance?\"_\n\nThat's it! 🎉\n\n---\n\n## 🎯 Supported MCP Clients\n\n<table>\n<tr>\n<td align=\"center\">\n<img alt=\"favicon\" src=\"https://claude.ai/favicon.ico\" width=\"32\" height=\"32\"><br/>\n<strong>Claude Desktop</strong><br/>\n<em>Premium Required</em>\n</td>\n<td align=\"center\">\n🖥️<br/>\n<strong>FastAgent</strong><br/>\n<em>Developer Friendly</em>\n</td>\n<td align=\"center\">\n🔧<br/>\n<strong>Your App</strong><br/>\n<em>MCP Compatible</em>\n</td>\n</tr>\n</table>\n\n---\n\n## 📦 Installation Options\n\n### Option 1: NPX (Recommended)\n\n```bash\nnpx @adamik/mcp-server\n```\n\n### Option 2: Global Install\n\n```bash\nnpm install -g @adamik/mcp-server\nadamik-mcp-server\n```\n\n### Option 3: Local Development\n\n```bash\ngit clone https://github.com/AdamikHQ/adamik-mcp-server.git\ncd adamik-mcp-server\npnpm install && pnpm build\nnode build/index.js\n```\n\n---\n\n## 🔧 Configuration Examples\n\n<details>\n<summary><strong>Claude Desktop (JSON)</strong></summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"adamik\": {\n      \"command\": \"npx\",\n      \"args\": [\"@adamik/mcp-server\"],\n      \"env\": {\n        \"ADAMIK_API_KEY\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary><strong>FastAgent (YAML)</strong></summary>\n\n```yaml\nmcp:\n  servers:\n    adamik:\n      command: \"npx\"\n      args: [\"@adamik/mcp-server\"]\n      env:\n        ADAMIK_API_KEY: \"your-api-key\"\n```\n\n</details>\n\n<details>\n<summary><strong>Environment Variables</strong></summary>\n\n```env\nADAMIK_API_KEY=your-api-key-here\nADAMIK_API_BASE_URL=https://api.adamik.io/api  # Optional\n```\n\n</details>\n\n---\n\n## 🏗️ Architecture\n\n```mermaid\ngraph LR\n    A[MCP Client] --> B[Adamik MCP Server]\n    B --> C[Adamik API]\n    A --> E[Optional: Signer Server]\n    C --> D[60+ Blockchains]\n    E --> F[Wallet Integration]\n```\n\n---\n\n## 🤝 Contributing\n\nWe love contributions! Here's how to get started:\n\n1. **Fork** this repository\n2. **Create** a feature branch: `git checkout -b feature/amazing-feature`\n3. **Commit** your changes: `git commit -m 'Add amazing feature'`\n4. **Push** to the branch: `git push origin feature/amazing-feature`\n5. **Open** a Pull Request\n\n### Development Setup\n\n```bash\ngit clone https://github.com/AdamikHQ/adamik-mcp-server.git\ncd adamik-mcp-server\npnpm instal\npnpm build\n\n```\n\n**Testing your changes:**\nUpdate your MCP client config to point to the local build:\n\n```json\n{\n  \"command\": \"node\",\n  \"args\": [\"/path/to/your/adamik-mcp-server/build/index.js\"],\n  \"env\": { \"ADAMIK_API_KEY\": \"your-api-key\" }\n}\n```\n\n---\n\n## 📚 Related Projects\n\n- 🔐 **[Adamik Signer Server](https://github.com/AdamikHQ/signer-mcp-server)** - Transaction signing & wallet management\n- 🌐 **[Adamik API](https://adamik.io/)** - Multi-chain blockchain infrastructure\n\n---\n\n## 🆘 Support\n\n- 📖 **Documentation**: [docs.adamik.io](https://docs.adamik.io/)\n- 💬 **Issues**: [GitHub Issues](https://github.com/AdamikHQ/adamik-mcp-server/issues)\n- 📧 **Contact**: [contact@adamik.io](mailto:contact@adamik.io)\n- 💬 **Telegram**: [Adamik MCP Community](https://t.me/+5yRlc7EYTxw5ZGE0)\n- 🐦 **Twitter**: [@Adamik_io](https://x.com/adamik_io)\n\n---\n\n<p align=\"center\">\n  <strong>⭐ Star this repo if you find it useful!</strong><br/>\n  <em>Developed by the <a href=\"https://adamik.io\">Adamik</a> team</em>\n</p>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "adamik",
        "adamikhq",
        "blockchain networks",
        "crypto adamikhq",
        "blockchain crypto"
      ],
      "category": "blockchain-and-crypto"
    },
    "Bankless--onchain-mcp": {
      "owner": "Bankless",
      "name": "onchain-mcp",
      "url": "https://github.com/Bankless/onchain-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Bankless.webp",
      "description": "Interact with blockchain data through the Bankless API to access smart contract states, event logs, and transaction histories. Enhance AI models with real-time insights from blockchain interactions.",
      "stars": 67,
      "forks": 16,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T02:59:31Z",
      "readme_content": "# Bankless Onchain MCP Server\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n![Version](https://img.shields.io/badge/version-0.6.2-blue)\n\nMCP (Model Context Protocol) server for blockchain data interaction through the Bankless API.\n\n## Overview\n\nThe Bankless Onchain MCP Server provides a framework for interacting with on-chain data via the Bankless API. It implements the Model Context Protocol (MCP) to allow AI models to access blockchain state and event data in a structured way.\n\n\nhttps://github.com/user-attachments/assets/95732dff-ae5f-45a6-928a-1ae17c0ddf9d\n\n\n## Features\n\nThe server provides the following onchain data operations:\n\n### Contract Operations\n\n- **Read Contract State** (`read_contract`): Read state from smart contracts on various blockchain networks.\n    - Parameters: network, contract address, method, inputs, outputs\n    - Returns: Contract call results with typed values\n\n- **Get Proxy** (`get_proxy`): Retrieve proxy implementation contract addresses.\n    - Parameters: network, contract address\n    - Returns: Implementation contract address\n\n- **Get ABI** (`get_abi`): Fetch the ABI (Application Binary Interface) for a contract.\n    - Parameters: network, contract address\n    - Returns: Contract ABI in JSON format\n\n- **Get Source** (`get_source`): Retrieve the source code for a verified contract.\n    - Parameters: network, contract address\n    - Returns: Source code, ABI, compiler version, and other contract metadata\n\n### Event Operations\n\n- **Get Events** (`get_events`): Fetch event logs for a contract based on topics.\n    - Parameters: network, addresses, topic, optional topics\n    - Returns: Filtered event logs\n\n- **Build Event Topic** (`build_event_topic`): Generate an event topic signature from event name and argument types.\n    - Parameters: network, event name, argument types\n    - Returns: Event topic hash\n\n### Transaction Operations\n\n- **Get Transaction History** (`get_transaction_history`): Retrieve transaction history for a user address.\n    - Parameters: network, user address, optional contract, optional method ID, optional start block, include data flag\n    - Returns: List of transactions with hash, data, network, and timestamp\n\n- **Get Transaction Info** (`get_transaction_info`): Get detailed information about a specific transaction.\n    - Parameters: network, transaction hash\n    - Returns: Transaction details including block number, timestamp, from/to addresses, value, gas info, status, and receipt data\n\n## Tools\n\n- **read_contract**\n    - Read contract state from a blockchain\n    - Input:\n        - `network` (string, required): The blockchain network (e.g., \"ethereum\", \"polygon\")\n        - `contract` (string, required): The contract address\n        - `method` (string, required): The contract method to call\n        - `inputs` (array, required): Input parameters for the method call, each containing:\n            - `type` (string): The type of the input parameter (e.g., \"address\", \"uint256\")\n            - `value` (any): The value of the input parameter\n        - `outputs` (array, required): Expected output types, each containing:\n            - `type` (string): The expected output type\n    - Returns an array of contract call results\n\n- **get_proxy**\n    - Gets the proxy address for a given network and contract\n    - Input:\n        - `network` (string, required): The blockchain network (e.g., \"ethereum\", \"base\")\n        - `contract` (string, required): The contract address\n    - Returns the implementation address for the proxy contract\n\n- **get_events**\n    - Fetches event logs for a given network and filter criteria\n    - Input:\n        - `network` (string, required): The blockchain network (e.g., \"ethereum\", \"base\")\n        - `addresses` (array, required): List of contract addresses to filter events\n        - `topic` (string, required): Primary topic to filter events\n        - `optionalTopics` (array, optional): Optional additional topics (can include null values)\n    - Returns an object containing event logs matching the filter criteria\n\n- **build_event_topic**\n    - Builds an event topic signature based on event name and arguments\n    - Input:\n        - `network` (string, required): The blockchain network (e.g., \"ethereum\", \"base\")\n        - `name` (string, required): Event name (e.g., \"Transfer(address,address,uint256)\")\n        - `arguments` (array, required): Event arguments types, each containing:\n            - `type` (string): The argument type (e.g., \"address\", \"uint256\")\n    - Returns a string containing the keccak256 hash of the event signature\n\n## Installation\n\n```bash\nnpm install @bankless/onchain-mcp\n```\n\n## Usage\n\n### Environment Setup\n\nBefore using the server, set your Bankless API token. For details on how to obtain your Bankless API token, head to https://docs.bankless.com/bankless-api/other-services/onchain-mcp\n\n```bash\nexport BANKLESS_API_TOKEN=your_api_token_here\n```\n\n### Running the Server\n\nThe server can be run directly from the command line:\n\n```bash\nnpx @bankless/onchain-mcp\n```\n\n### Usage with LLM Tools\n\nThis server implements the Model Context Protocol (MCP), which allows it to be used as a tool provider for compatible AI models. Here are some example calls for each tool:\n\n#### read_contract\n\n```javascript\n// Example call\n{\n  \"name\": \"read_contract\",\n  \"arguments\": {\n    \"network\": \"ethereum\",\n    \"contract\": \"0x1234...\",\n    \"method\": \"balanceOf\",\n    \"inputs\": [\n      { \"type\": \"address\", \"value\": \"0xabcd...\" }\n    ],\n    \"outputs\": [\n      { \"type\": \"uint256\" }\n    ]\n  }\n}\n\n// Example response\n[\n  {\n    \"value\": \"1000000000000000000\",\n    \"type\": \"uint256\"\n  }\n]\n```\n\n#### get_proxy\n\n```javascript\n// Example call\n{\n  \"name\": \"get_proxy\",\n  \"arguments\": {\n    \"network\": \"ethereum\",\n    \"contract\": \"0x1234...\"\n  }\n}\n\n// Example response\n{\n  \"implementation\": \"0xefgh...\"\n}\n```\n\n#### get_events\n\n```javascript\n// Example call\n{\n  \"name\": \"get_events\",\n  \"arguments\": {\n    \"network\": \"ethereum\",\n    \"addresses\": [\"0x1234...\"],\n    \"topic\": \"0xabcd...\",\n    \"optionalTopics\": [\"0xef01...\", null]\n  }\n}\n\n// Example response\n{\n  \"result\": [\n    {\n      \"removed\": false,\n      \"logIndex\": 5,\n      \"transactionIndex\": 2,\n      \"transactionHash\": \"0x123...\",\n      \"blockHash\": \"0xabc...\",\n      \"blockNumber\": 12345678,\n      \"address\": \"0x1234...\",\n      \"data\": \"0x...\",\n      \"topics\": [\"0xabcd...\", \"0xef01...\", \"0x...\"]\n    }\n  ]\n}\n```\n\n#### build_event_topic\n\n```javascript\n// Example call\n{\n  \"name\": \"build_event_topic\",\n  \"arguments\": {\n    \"network\": \"ethereum\",\n    \"name\": \"Transfer(address,address,uint256)\",\n    \"arguments\": [\n      { \"type\": \"address\" },\n      { \"type\": \"address\" },\n      { \"type\": \"uint256\" }\n    ]\n  }\n}\n\n// Example response\n\"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\"\n```\n\n## Development\n\n### Building from Source\n\n```bash\n# Clone the repository\ngit clone https://github.com/Bankless/onchain-mcp.git\ncd onchain-mcp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n### Debug Mode\n\n```bash\nnpm run debug\n```\n\n### Integration with AI Models\n\nTo integrate this server with AI applications that support MCP, add the following to your app's server configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"bankless\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@bankless/onchain-mcp\"\n      ],\n      \"env\": {\n        \"BANKLESS_API_TOKEN\": \"your_api_token_here\"\n      }\n    }\n  }\n}\n```\n\n## Error Handling\n\nThe server provides specific error types for different scenarios:\n\n- `BanklessValidationError`: Invalid input parameters\n- `BanklessAuthenticationError`: API token issues\n- `BanklessResourceNotFoundError`: Requested resource not found\n- `BanklessRateLimitError`: API rate limit exceeded\n\n## Prompting Tips\n\nIn order to guide an LLM model to use the Bankless Onchain MCP Server, the following prompts can be used:\n\n```\nROLE:\n• You are Kompanion, a blockchain expert and EVM sleuth. \n• You specialize in navigating and analyzing smart contracts using your tools and resources.\n\nHOW KOMPANION CAN HANDLE PROXY CONTRACTS:\n• If a contract is a proxy, call your “get_proxy” tool to fetch the implementation contract.  \n• If that fails, try calling the “implementation” method on the proxy contract.  \n• If that also fails, try calling the “_implementation” function.  \n• After obtaining the implementation address, call “get_contract_source” with that address to fetch its source code.  \n• When reading or modifying the contract state, invoke implementation functions on the proxy contract address (not directly on the implementation).\n\nHOW KOMPANION CAN HANDLE EVENTS:\n• Get the ABI and Source of the relevant contracts\n• From the event types in the ABI, construct the correct topics for the event relevant to the question\n• use the \"get_event_logs\" tool to fetch logs for the contract\n\nKOMPANION'S RULES:\n• Do not begin any response with “Great,” “Certainly,” “Okay,” or “Sure.”  \n• Maintain a direct, technical style. Do not add conversational flourishes.  \n• If the user’s question is unrelated to smart contracts, do not fetch any contracts.  \n• If you navigate contracts, explain each step in bullet points.  \n• Solve tasks iteratively, breaking them into steps.  \n• Use bullet points for lists of steps.  \n• Never assume a contract’s functionality. Always verify with examples using your tools to read the contract state.  \n• Before responding, consider which tools might help you gather better information.  \n• Include as much relevant information as possible in your final answer, depending on your findings.\n\nHOW KOMPANION CAN USE TOOLS:\n• You can fetch contract source codes, ABIs, and read contract data by using your tools and functions.  \n• Always verify the source or ABI to understand the contract rather than making assumptions.  \n• If you need to read contract state, fetch its ABI (especially if the source is lengthy).  \n\nFINAL INSTRUCTION:\n• Provide the best possible, concise answer to the user’s request. If it's not an immediate question but an instruction, follow it directly.\n• Use your tools to gather any necessary clarifications or data.  \n• Offer a clear, direct response and add a summary of what you did (how you navigated the contracts) at the end.\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "bankless",
        "blockchain",
        "onchain",
        "bankless onchain",
        "crypto bankless",
        "bankless api"
      ],
      "category": "blockchain-and-crypto"
    },
    "Dablclub--polygon-mcp": {
      "owner": "Dablclub",
      "name": "polygon-mcp",
      "url": "https://github.com/Dablclub/polygon-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Dablclub.webp",
      "description": "Interact with the Polygon PoS blockchain to call contract functions, check ERC20 token balances, transfer tokens, and retrieve current gas prices.",
      "stars": 6,
      "forks": 6,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-07-11T08:57:04Z",
      "readme_content": "# Polygon MCP Server\n\nA Model Context Protocol (MCP) server that provides onchain tools for Claude AI, allowing it to interact with the Polygon PoS blockchain.\n\n## Features\n\n- Call contract functions on Polygon PoS\n- Get ERC20 token balances\n- Transfer ERC20 tokens\n- Get current gas prices\n\n## Installation\n\n1. Clone this repository:\n```bash\ngit clone https://github.com/your-username/polygon-mcp.git\ncd polygon-mcp\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the project:\n```bash\nnpm run build\n```\n\n## Configuration\n\nCreate a `.env` file in the root directory with the following variables:\n\n```\nSEED_PHRASE=\"your twelve word seed phrase here\"\n```\n\n## Usage\n\n### Running the server\n\n```bash\nnpm start\n```\n\n### Using with Claude\n\nTo use this MCP server with Claude, you need to add it to your MCP settings file:\n\nFor VSCode Claude extension:\n```json\n{\n  \"mcpServers\": {\n    \"polygon\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/polygon-mcp/build/index.js\"],\n      \"env\": {\n        \"SEED_PHRASE\": \"your twelve word seed phrase here\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nFor Claude desktop app:\n```json\n{\n  \"mcpServers\": {\n    \"polygon\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/polygon-mcp/build/index.js\"],\n      \"env\": {\n        \"SEED_PHRASE\": \"your twelve word seed phrase here\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n## Available Tools\n\n### call_contract\n\nCall a contract function on Polygon PoS.\n\nParameters:\n- `contractAddress`: The address of the contract to call\n- `functionName`: The name of the function to call\n- `functionArgs`: The arguments to pass to the function\n- `abi`: The ABI of the contract\n- `value` (optional): The value of MATIC to send with the transaction\n\n### erc20_balance\n\nGet the balance of an ERC20 token on Polygon PoS.\n\nParameters:\n- `contractAddress`: The address of the contract to get the balance of\n\n### erc20_transfer\n\nTransfer an ERC20 token on Polygon PoS.\n\nParameters:\n- `contractAddress`: The address of the contract to transfer the token from\n- `toAddress`: The address of the recipient\n- `amount`: The amount of tokens to transfer\n\n### get_gas_price\n\nGet the current gas price on Polygon PoS.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "polygon",
        "dablclub",
        "blockchain",
        "dablclub polygon",
        "polygon mcp",
        "crypto dablclub"
      ],
      "category": "blockchain-and-crypto"
    },
    "DonutLabs-ai--mcp-solana-data": {
      "owner": "DonutLabs-ai",
      "name": "mcp-solana-data",
      "url": "https://github.com/DonutLabs-ai/mcp-solana-data",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Standardized interactions with the Solana blockchain via a Model Context Protocol server enabling seamless integration of blockchain operations into applications without requiring a signer. Features a Cloudflare worker for easy deployment and specific action capabilities through the DonutPlugin.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "crypto",
        "cloudflare",
        "solana blockchain",
        "integration blockchain",
        "crypto donutlabs"
      ],
      "category": "blockchain-and-crypto"
    },
    "EmanuelJr--web3-mcp-server": {
      "owner": "EmanuelJr",
      "name": "web3-mcp-server",
      "url": "https://github.com/EmanuelJr/web3-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/EmanuelJr.webp",
      "description": "Enables interaction with blockchain networks by fetching token balances and calling smart contract functions across multiple EVM-compatible chains. Supports seamless integration into Web3 applications with comprehensive blockchain capabilities.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-07-24T21:56:56Z",
      "readme_content": "# Web3 MCP Server\n\n[![smithery badge](https://smithery.ai/badge/web3-mcp-server)](https://smithery.ai/server/web3-mcp-server)\n\nA Model Context Protocol (MCP) server implementation for Web3 interactions on EVM chains. This server enables seamless interaction with blockchain networks through the Model Context Protocol.\n\n## 🚀 Features\n\n- 📊 Fetch token balances across multiple chains\n- 📝 Call smart contract functions\n- 💰 Native and ERC-20 token transfer\n- 🔗 Support for multiple EVM-compatible chains\n\n## 🔧 Configuration\n\n### Claude Desktop Integration\n\n### Installing via Smithery\n\nTo install Web3 MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/web3-mcp-server):\n\n```bash\nnpx -y @smithery/cli install web3-mcp-server --client claude\n```\n\n#### Using NPX\n\nAdd the following configuration to your Claude Desktop settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"web3\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"web3-mcp-server\"],\n      \"env\": {\n        \"PRIVATE_KEY\": \"0xYour-wallet-private-key (optional)\"\n      }\n    }\n  }\n}\n```\n\n#### Using Docker\n\nFor Docker-based deployment, use this configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"web3\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"emanueljr/web3-mcp-server\"],\n      \"env\": {\n        \"PRIVATE_KEY\": \"0xYour-wallet-private-key (optional)\"\n      }\n    }\n  }\n}\n```\n\n## 📝 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 👥 Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "crypto",
        "web3",
        "comprehensive blockchain",
        "blockchain crypto",
        "web3 mcp"
      ],
      "category": "blockchain-and-crypto"
    },
    "Grandbusta--solana-mcp": {
      "owner": "Grandbusta",
      "name": "solana-mcp",
      "url": "https://github.com/Grandbusta/solana-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Grandbusta.webp",
      "description": "Interact with the Solana blockchain using a private key to retrieve wallet information, check balances, and transfer SOL. This server provides essential blockchain functionalities for applications without complex implementation.",
      "stars": 10,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-06-16T10:39:50Z",
      "readme_content": "# Solana MCP Server 🌱\n\n[![smithery badge](https://smithery.ai/badge/@Grandbusta/solana-mcp)](https://smithery.ai/server/@Grandbusta/solana-mcp)\n\nA MCP server to interact with the Solana blockchain with your own private key.\n\n## 📖 Table of Contents\n- [✨Features](#-features)\n- [⚙️Setup](#️-setup)\n- [Integration with Cursor](#integration-with-cursor)\n- [🛠️Available Tools](#️-available-tools)\n- [🔖License](#️-license)\n\n## ✨ Features\n\n- Get latest slot\n- Get wallet address\n- Get wallet balance\n- Transfer SOL\n\n## ⚙️ Setup\n\n### Installing via Smithery\n\nTo install Solana MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@Grandbusta/solana-mcp):\n\n```bash\nnpx -y @smithery/cli install @Grandbusta/solana-mcp --client claude\n```\n\n### Manual Setup\n\n1. Clone the repository\n```bash\ngit clone https://github.com/Grandbusta/solana-mcp.git\n```\n\n2. Install dependencies\n```bash\nnpm install\n```\n\n3. Build the project\n```bash\nnpm run build\n```\n\n4. Create a keypair file\nCreate a file named `keypair.json` anywhere you want and copy your private key into it. Check the example-keypair.json file for an example.\n\nNB: RPC endpoint is set to `api.devnet.solana.com` by default. If you want to use a different endpoint, you can set it in the `run.sh` file.\n\n## Integration with Cursor\n\nTo integrate with Cursor, follow these steps:\n\n1. In the Cursor settings, go to MCP\n2. Click \"Add new MCP server\"\n3. Enter the following information:\n   - Name: Solana MCP\n   - Type: command\n   - Command: ```/path/to/your/solana-mcp/run.sh /path/to/your/keypair.json```\n\nExample command: ```/Users/username/projects/solana-mcp/run.sh /Users/username/Documents/keypair.json```\n\n\n## 🛠️ Available Tools\n\n### 1. get-latest-slot\nReturns the latest slot number:\n\n```bash\n368202671\n```\n\n### 2. get-wallet-address\nReturns the wallet address:\n\n```bash\n5GTuMBag1M8tfe736kcV1vcAE734Zf1SRta8pmWf82TJ\n```\n\n### 3. get-wallet-balance\nReturns the wallet balance in SOL, Lamports, and USD:\n\n```bash\n{\n  \"lamportsBalance\": \"4179966000\",\n  \"solanaBalnce\": 4.179966,\n  \"usdBalance\": \"553.0513\"\n}\n```\n\n### 4. transfer\nTransfers SOL to a recipient address:\n\n```bash\n{\n  \"blockTime\": \"1742316463\",\n  \"meta\": {\n    \"computeUnitsConsumed\": \"150\",\n    \"err\": null,\n    \"fee\": \"5000\",\n    \"innerInstructions\": [],\n    \"loadedAddresses\": {\n      \"readonly\": [],\n      \"writable\": []\n    },\n    \"logMessages\": [\n      \"Program 11111111111111111111111111111111 invoke [1]\",\n      \"Program 11111111111111111111111111111111 success\"\n    ],\n    \"postBalances\": [\n      \"4179966000\",\n      \"819999000\",\n      \"1\"\n    ],\n    \"postTokenBalances\": [],\n    \"preBalances\": [\n      \"4399970000\",\n      \"600000000\",\n      \"1\"\n    ],\n    \"preTokenBalances\": [],\n    \"rewards\": [],\n    \"status\": {\n      \"Ok\": null\n    }\n  },\n  \"slot\": \"368211978\",\n  \"transaction\": {\n    \"message\": {\n      \"accountKeys\": [\n        \"6qhddtBoEHqTc3VM35a3rb3aLUe6vDQfmLigo2G4r5s1\",\n        \"5GTuMBag1M8tfe736kcV1vcAE734Zf1SRta8pmWf82TJ\",\n        \"11111111111111111111111111111111\"\n      ],\n      \"addressTableLookups\": [],\n      \"header\": {\n        \"numReadonlySignedAccounts\": 0,\n        \"numReadonlyUnsignedAccounts\": 1,\n        \"numRequiredSignatures\": 1\n      },\n      \"instructions\": [\n        {\n          \"accounts\": [\n            0,\n            1\n          ],\n          \"data\": \"3Bxs452Q9hdvHuwd\",\n          \"programIdIndex\": 2,\n          \"stackHeight\": null\n        }\n      ],\n      \"recentBlockhash\": \"BLqtPS9BHPp9CRFTrVAsrxFMWC98VTUAQ3vi12bSquLo\"\n    },\n    \"signatures\": [\n      \"3bLyqbPn26ofkaxSAVqadQnHqXu9hyoryixmKCn69nunKg2cSryDVAWnfCcYPcGtjSmXcMHfrzc3bw25zFTabXvs\"\n    ]\n  },\n  \"version\": \"0\"\n}\n```\n\n\n## 🧑‍💻 Contributing\n\nContributions are welcome! Please open an issue or submit a pull request.\n\n## 🔖 License\n\n[WTFPL License](https://www.wtfpl.net/about/)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "crypto",
        "solana",
        "solana blockchain",
        "crypto grandbusta",
        "essential blockchain"
      ],
      "category": "blockchain-and-crypto"
    },
    "LaplaceMan--web3-assistant-mcp": {
      "owner": "LaplaceMan",
      "name": "web3-assistant-mcp",
      "url": "https://github.com/LaplaceMan/web3-assistant-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/LaplaceMan.webp",
      "description": "Interact with blockchain smart contracts across multiple chains, analyze contract ABIs, invoke contract methods, and manage wallet addresses securely.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-08-19T15:47:57Z",
      "readme_content": "# Web3 Assistant MCP\n\nA secure blockchain smart contract interaction toolkit with multi-chain support.\n\n## Key Features\n\n- 📑 Smart Contract ABI Analysis\n- 📡 Contract Method Invocation (view/nonpayable/payable)\n- 🔑 Local Wallet Address Management\n- 🌐 Multi-chain Support\n\n## Project Structure\n\n```\nweb3-assistant-mcp/\n├── src/\n│   ├── common/\n│   │   ├── clients/        # Blockchain client implementations\n│   │   ├── constants/      # Network configurations\n│   │   ├── services/       # Core services (contract, wallet)\n│   │   └── utils/          # Helper functions\n│   ├── tools/              # MCP tool implementations\n│   └── types/              # TypeScript type definitions\n├── test/                   # Test suites\n├── .env.example            # Environment template\n└── smithery.yaml           # MCP server configuration\n```\n\n## Quick Start\n\n### Prerequisites\n\n- Node.js 18+\n- pnpm\n- Configure environment variables (copy .env.example):\n\n```bash\ncp .env.example .env\n```\n\n### Installation\n\n```bash\npnpm install\n```\n\n### Build\n\n```bash\npnpm build\n```\n\n## MCP Configuration Example\n\n```json\n{\n  \"mcpServers\": {\n      \"web3-assistant\": {\n          \"command\": \"node\",\n          \"args\": [\n              \"***/dist/index.js\"\n          ],\n          \"env\": {\n              \"ALCHEMY_KEY\": \"your_alchemy_key\",\n              \"INFURA_KEY\": \"your_infura_key\",\n              \"ANKR_KEY\": \"your_ankr_key\",\n              \"PRIVATE_KEY\": \"your_wallet_private_key\"\n          }\n      }\n  }\n}\n```\n\n**Path Note**: When using MCP locally, replace `***` with the absolute path to your MCP server directory.\n\n## MCP Tools Documentation\n\n### 🔍 analyze_contract_abi - ABI Analysis\n```json\n{\n  \"abi\": \"[Contract ABI JSON string]\"\n}\n```\n**Features**:\n- Parse contract ABI and list callable methods\n- Auto-detect method types (view/pure/payable)\n- Input/output parameter types\n- State mutability\n\n### 📞 call_contract - Contract Interaction\n```json\n{\n  \"abi\": \"[Method ABI]\",\n  \"networkName\": \"base|baseSepolia\",\n  \"contractAddress\": \"0x...\",\n  \"functionName\": \"methodName\",\n  \"args\": [\"param1\", param2],\n  \"value\": 0.001 // ETH amount for payable methods (in ETH)\n}\n```\n**Supported Operations**:\n- Read contract state (view/pure)\n- Send transactions (nonpayable)\n- Token transfers (payable)\n\n### 👜 local_wallet_address - Wallet Address\nNo parameters required:\n```json\n{\n  \"address\": \"0x...\"\n}\n```\n\n## Network Configuration\nPre-configured networks in `src/common/constants/networks`:\n- `mainnet`: Ethereum Mainnet\n- `sepolia`: Ethereum Sepolia\n- `base`: Base Mainnet\n- `baseSepolia`: Base Testnet\n\n## Security Guidelines\n1. **Private Key Management**: Configure via environment variables\n2. **Transaction Verification**: Confirm details for payable methods\n3. **Gas Limits**: Automatic safe gas calculation\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "laplaceman",
        "crypto",
        "crypto laplaceman",
        "interact blockchain",
        "laplaceman web3"
      ],
      "category": "blockchain-and-crypto"
    },
    "Laz1mov--mcp-inscription": {
      "owner": "Laz1mov",
      "name": "mcp-inscription",
      "url": "https://github.com/Laz1mov/mcp-inscription",
      "imageUrl": "/freedevtools/mcp/pfp/Laz1mov.webp",
      "description": "Enables interactions with Bitcoin Ordinals Inscriptions, facilitating the display of content from blockchain transactions. Integrates seamlessly with blockchain data to enhance applications.",
      "stars": 3,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-31T08:14:24Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/laz1mov-mcp-inscription-badge.png)](https://mseep.ai/app/laz1mov-mcp-inscription)\n\n<div align=\"center\">\n\n<a href=\"https://bitcoin.org/\"> <img alt=\"Bitcoin\" src=\"https://img.shields.io/badge/Bitcoin-000?style=for-the-badge&logo=bitcoin&logoColor=white\" height=30></a>\n<a href=\"https://modelcontextprotocol.com/\"> <img alt=\"MCP\" src=\"https://img.shields.io/badge/MCP-000?style=for-the-badge&logo=modelcontextprotocol&logoColor=white\" height=30></a>\n<a href=\"https://docs.ordinals.com/\"> <img alt=\"Ordinals\" src=\"https://img.shields.io/badge/Ordinals-000?style=for-the-badge&logo=bitcoin&logoColor=white\" height=30></a>\n</div>\n\n# MCP-Inscription Server\n\n[![smithery badge](https://smithery.ai/badge/@Laz1mov/mcp-inscription)](https://smithery.ai/server/@Laz1mov/mcp-inscription)\n\n<div align=\"center\">\n  <h3>\n    <a href=\"https://github.com/Laz1mov/mcp-inscription/\">\n      Documentation\n    </a>\n    <span> | </span>\n    <a href=\"https://github.com/Laz1mov/mcp-inscription/#-available-tools\">\n      Available Tools\n    </a>\n    <span> | </span>\n    <a href=\"https://modelcontextprotocol.com/\">\n      MCP Docs\n    </a>\n    <span> | </span>\n    <a href=\"https://docs.ordinals.com/\">\n      Ordinals Docs\n    </a>\n  </h3>\n</div>\n\n## Overview\n\nA Model Context Protocol (MCP) server that enables AI models to interact with Ordinals Inscriptions, allowing them to display content from a transaction.\n\n## 🎮 Demo\n\n| Goose Demo [Video](https://github.com/user-attachments/assets/55f606d7-03f6-438b-93bc-9ec09a9f7fd6) |\n| --------------------------------------------------------------------------------------------------- |\n| <div style=\"display: flex; align-items: center; justify-content: center;\"><a href=\"https://github.com/user-attachments/assets/55f606d7-03f6-438b-93bc-9ec09a9f7fd6\"><img src=\"https://github.com/user-attachments/assets/7b8b5fe1-6c3c-4741-ad16-c70887d954b6\" style=\"width: 60%; height: auto;\" alt=\"Goose screenshot\" /></a></div> |\n\n## 💼 Table of Contents\n\n- [MCP-Inscription Server](#mcp-inscription-server)\n  - [Overview](#overview)\n  - [💼 Table of Contents](#-table-of-contents)\n  - [🔧 Features](#-features)\n  - [🦆 Goose Integration](#-goose-integration)\n    - [Using STDIO (Local Extension)](#using-stdio-local-extension)\n      - [Using SSE (Remote Extension)](#using-sse-remote-extension)  \n  - [🔑 Claude Desktop Integration](#-claude-desktop-integration)\n    - [Testing the Claude Desktop Integration](#testing-the-claude-desktop-integration)\n  - [📂 Project Structure](#-project-structure)\n  - [📦 Development Setup](#-development-setup)\n  - [📦 Available Tools](#-available-tools)\n    - [show\\_ordinals](#show_ordinals)\n  - [🚨 Error Handling](#-error-handling)\n  - [🤝 Contributing](#-contributing)\n  - [📝 License](#-license)\n\n## 🔧 Features\n\n- **Ordinal Detection**: Automatically detect and parse Bitcoin transaction into ordinals, supporting text-based, images, json and more inscriptions formats.\n\n## 🦆 Goose Integration\n\nGoose is an open-source AI agent framework by Block that supports extensions via the Model Context Protocol. You can integrate the MCP-Inscription server as a Goose extension to allow Goose to interact with Ordinals Inscriptions. Goose supports two modes of integration for MCP servers: running the server as a local process (STDIO) or connecting to it as a remote service via Server-Sent Events (SSE). Below are instructions for both methods:\n\n### Using STDIO (Local Extension)\n\nThis method runs the MCP-Inscription server locally as a subprocess of Goose, communicating through standard input/output.\n\n1. **Clone and Build the MCP-Inscription Repository (if you haven't already):**\n   ```bash\n   git clone https://github.com/Laz1mov/mcp-inscription\n   cd mcp-inscription\n   npm install\n   npm run build\n   ```\n   Note the full absolute path to the repository, as you'll need it in the next step.\n\n2. **Add a new extension in Goose:** Open Goose's configuration interface. You can do this via the command line by running `goose configure`, or in the Goose Desktop app by going to **Settings > Extensions**. From the menu, choose **\"Add Extension.\"** ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#adding-extensions#:~:text=1))\n\n3. **Choose the extension type – Command-Line Extension:** When prompted for the type of extension, select **Command-Line Extension** (in the CLI menu or UI) so that Goose knows it should launch a local command ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#adding-extensions#:~:text=3,extension%20you%E2%80%99d%20like%20to%20add)) (as opposed to a built-in or remote extension).\n\n4. **Enter the extension details:** Provide a name and command for the MCP-Inscription server:\n\n   - **ID**: `mcp-inscription`\n   - **Name:** You can call it \"mcp-inscription\", or any identifier (this will be how you refer to the extension).\n   - **Command:** Specify the full path to the built CLI script. For example:\n\n     ```bash\n     node /absolute/path/to/mcp-inscription/build/cli.js\n     ```\n\n     Replace `/absolute/path/to/mcp-inscription` with the actual path to where you cloned the repository.\n   - You typically do not need to add any arguments beyond the script path (unless your server requires special flags).\n\n5. **Finalize and enable:** Complete the extension addition. Goose will add this new extension to its configuration (usually `~/.config/goose/config.yaml`). Ensure the extension is **enabled** (if using the CLI wizard, it should be enabled by default once added; in the Goose Desktop app, you can check the Extensions list and toggle it on if it isn't already ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#:~:text=%E2%97%87%20%20What%20would%20you,%E2%94%82%20%20%E2%97%BB%20fetch%20%E2%94%94)) ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#:~:text=%E2%94%82%20%20%E2%97%BE%20developer%20%E2%94%82,%E2%97%BB%20fetch%20%E2%94%94))).\n\n6. **Start a Goose session with the new extension:** You can now use the extension in Goose. If you're running Goose via CLI, start a session that includes the extension by running:\n\n   ```bash\n   goose session --with-extension \"mcp-inscription\"\n   ```\n\nreplacing \"ordinals\" with whatever name you gave the extension ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#:~:text=Starting%20a%20Session%20with%20Extensions)). (This ensures the session loads the extension. Alternatively, if the extension is enabled globally, Goose Desktop or CLI will automatically have it available in all sessions.)\n\n#### Using SSE (Remote Extension)\n\nThis method connects Goose to an already-running MCP server via an HTTP SSE stream. Use this if you want to run the MCP-Inscription server as a standalone service (possibly on another machine or just independently of Goose).\n\n1. **Launch the MCP server as a standalone service:** Run the MCP-Inscription server in SSE mode to listen for connections:\n\n   ```bash\n   # Navigate to your mcp-inscription directory\n   cd /path/to/mcp-inscription\n   \n   # If you havent built it yet\n   npm install\n   npm run build\n   \n   # Run in SSE mode on port 3000 (default)\n   SERVER_MODE=sse node build/cli.js\n   \n   # Alternatively, specify a different port\n   SERVER_MODE=sse PORT=9000 node build/cli.js\n   ```\n\n   This will start the server in SSE mode, making it available at `http://localhost:3000` (or your specified port).\n\n2. **Add a new extension in Goose (Remote):** As before, run `goose configure` or use the Goose UI to **Add Extension** ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#adding-extensions#:~:text=1)). This time, choose **Remote Extension** when asked for the type of extension ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#adding-extensions#:~:text=3,extension%20you%E2%80%99d%20like%20to%20add)). This tells Goose that it will connect to an external server via SSE.\n\n3. **Enter the remote extension details:** Give the extension a name (e.g., \"ordinals\") and provide the server's URL. For the **URL**, enter the base address where the MCP server is running. For instance, if your server is listening on port 9000 on your local machine, you might enter `http://localhost:9000`. Goose will attempt to connect to the MCP server's SSE endpoint at that address. (Goose uses the standard MCP SSE path, which by convention is under the `/mcp/sse` route on the server, you usually just need to supply the host and port, and Goose handles the rest.)\n\n4. **Enable the extension:** After adding the remote extension, ensure it's enabled in Goose's settings (just like in the STDIO case). Only one of the STDIO or SSE extension (with the same tools) needs to be enabled – if you accidentally enable both a local and remote version of the same server, you may want to disable one to avoid confusion.\n\n**Using the MCP-Inscription extension in Goose:** Once the extension is set up (via either method above) and enabled, you can interact with Goose and query ord data through it. In a new Goose chat or session, simply ask questions as you normally would. Goose will recognize when to use the MCP-Inscription tools to fulfill your request. For example:\n\n- _\"Show me Ordinals: 0169d12c4edf2026a67e219c10207438a080eb82d8f21860f6784dd66f281389?\"_\n\nWhen you ask these questions, Goose will invoke the MCP-Inscription server's tools and return the answer (e.g., the latest Bitcoin block information). You should see Goose responding with up-to-date information pulled from the Bitcoin blockchain via the MCP-Inscription server.\n\nIf Goose does not seem to use the extension (for instance, if it responds that it cannot find the information), make sure the extension is enabled and that the server is running (in SSE mode for remote). You can also run Goose's CLI with verbose logging to see if it attempted to call the extension. Generally, if configured correctly, Goose will automatically discover the MCP-Inscription server's capabilities and use them when relevant.\n\n**Further Resources:** For more details on Goose extensions and the MCP, refer to the official Goose documentation ([Using Extensions | goose](https://block.github.io/goose/docs/getting-started/using-extensions/#adding-extensions#:~:text=MCP%20Server%20Directory)). The docs include a list of built-in and community extensions and explain how MCP servers integrate into Goose. You can also find a directory of available MCP servers and additional configuration tips in the Goose docs and the Model Context Protocol documentation. This can help if you want to explore more extensions or develop your own.\n\n## 🔑 Claude Desktop Integration\n\nTo use the MCP-Inscription server with Claude Desktop (Anthropic's desktop app for Claude), follow these steps:\n\n1. **Download and Install Claude Desktop:** Visit the official Claude Desktop downloads page and get the app for your operating system (macOS or Windows) ([Installing Claude for Desktop | Anthropic Help Center](https://support.anthropic.com/en/articles/10065433-installing-claude-for-desktop#:~:text=1,page)). Install the app and ensure you're using the latest version (you can check for updates in the app menu).\n\n2. **Clone and Build the MCP-Inscription Repository:**\n   ```bash\n   git clone https://github.com/Laz1mov/mcp-inscription\n   cd mcp-inscription\n   npm install\n   npm run build\n   ```\n\n3. **Configure Claude Desktop to use the MCP-Inscription Server:** Open the Claude Desktop configuration file (it's created when you first edit settings in Claude Desktop):\n\n   - **macOS:** `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - **Windows:** `%APPDATA%\\Claude\\claude_desktop_config.json`  \n     Add an entry for the MCP-Inscription server in this JSON config under the `\"mcpServers\"` section. For example:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"mcp-inscription\": {\n         \"command\": \"node\",\n         \"args\": [\"/absolute/path/to/mcp-inscription/build/cli.js\"]\n       }\n     }\n   }\n   ```\n\n   In the snippet above, `\"mcp-inscription\"` is an identifier for the server (you can name it whatever you want). Replace `/absolute/path/to/mcp-inscription` with the actual full path to where you cloned the repository.\n\n4. **Restart Claude Desktop:** Save the `claude_desktop_config.json` file and then **close and reopen Claude Desktop**. On the next launch, Claude will automatically start the MCP-Inscription server as configured. If Claude Desktop was running, you need to restart it for the changes to take effect.\n\n### Testing the Claude Desktop Integration\n\nOnce Claude Desktop is restarted, you can test whether the MCP-Inscription server is working correctly:\n\n- **Verify the response:** Claude should return a detailed answer (e.g. the inscription itself or runes info) without errors. If you get an error message or no useful response, the MCP server might not be connected properly.\n\n- **Check Claude's logs (if needed):** Claude Desktop provides log files that can help debug MCP integrations. If the tool isn't responding, check the log files in:\n  - **macOS:** `~/Library/Logs/Claude/`\n  - **Windows:** `%APPDATA%\\Claude\\logs\\`  \n    Look for `mcp.log` for general MCP connection messages, and a file named `mcp-server-mcp-inscription.log` (or with whatever name you used) for the MCP server's output/errors. These logs will show if the server started up or if there were any errors (such as a wrong path or exceptions in the server). If you see errors, fix the configuration or environment as needed, then restart Claude Desktop and test again.\n\n### Installing via Smithery\n\nTo install Inscription Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@Laz1mov/mcp-inscription):\n\n```bash\nnpx -y @smithery/cli install @Laz1mov/mcp-inscription --client claude\n```\n\n## 📂 Project Structure\n\n```text\nmcp-inscription/\n├── src/\n│   ├── ordinals_client.ts      # Bitcoin ordinals and runestone utility functions\n│   ├── servers/\n│   │   ├── index.ts            # Server exports and factory functions\n│   │   ├── sse.ts              # Server implementation using SSE transport\n│   │   ├── stdio.ts            # Server implementation using STDIO transport\n│   │   └── base.ts             # Base server implementation with shared functionality\n│   ├── index.ts                # Main entry point\n│   ├── cli.ts                  # CLI launcher\n│   ├── mcp_inscription_types.ts # Shared types and schemas for the MCP-Inscription server\n│   └── utils/\n│       ├── logger.ts           # Logger setup\n│       ├── cache.ts            # Caching implementation\n│       ├── error_handlers.ts   # Error handling utilities\n│       ├── json_utils.ts       # JSON processing utilities\n│       ├── img_utils.ts        # Image processing and conversion utilities\n│       └── version.ts          # Version information\n├── .env.example                # Example environment configuration file\n├── package.json\n├── tsconfig.json\n└── README.md\n```\n\n## 📦 Available Tools\n\n### show_ordinals\n\n**Description:**  \nDecodes Ordinal inscription data from a transaction's witness data.\n\n**Input Schema:**\n```json\n{\n  \"txid\": \"string\"\n}\n```\n\n**Example Input:**\n```json\n{\n  \"txid\": \"0169d12c4edf2026a67e219c10207438a080eb82d8f21860f6784dd66f281389\"\n}\n```\n\n**Output:**  \nReturns the decoded inscription content, which may be text, JSON, HTML, or other formats.\n\n## 🚨 Error Handling\n\nThe server employs custom error types to handle Bitcoin operations and blockchain queries. Detailed error messages are logged using Pino and included in client responses for easier debugging.\n\n## 🤝 Contributing\n\nContributions and feature requests are welcome! Feel free to submit pull requests or open issues on GitHub.\n\n## 📝 License\n\nThis project is licensed under the [MIT License](LICENSE).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "inscriptions",
        "crypto",
        "blockchain crypto",
        "content blockchain",
        "inscriptions facilitating"
      ],
      "category": "blockchain-and-crypto"
    },
    "NaniDAO--agentek": {
      "owner": "NaniDAO",
      "name": "agentek",
      "url": "https://github.com/NaniDAO/agentek",
      "imageUrl": "/freedevtools/mcp/pfp/NaniDAO.webp",
      "description": "Simplifies interactions with EVM blockchains through a type-safe toolkit for executing blockchain operations across multiple networks. Provides both on-chain capabilities and off-chain data services in a unified manner.",
      "stars": 39,
      "forks": 5,
      "license": "GNU Affero General Public License v3.0",
      "language": "TypeScript",
      "updated_at": "2025-08-18T20:18:22Z",
      "readme_content": "# agentek\n\n![agentek-logo-1](https://github.com/user-attachments/assets/c73ccd7b-4c4e-4c90-8ccc-1ed101fa1b0b)\n\nAn extensible TypeScript toolkit that simplifies complex EVM blockchain interactions into composable, intent-based tools. Provides a unified, type-safe interface for both on-chain actions and off-chain data services, enabling developers to programmatically execute any blockchain operation across multiple EVM networks.\n\nInterested in contributing? Check out our [CONTRIBUTING.md](CONTRIBUTING.md) guide!\n\n## Packages\n\nThe Agentek toolkit is structured as a monorepo with multiple publishable packages:\n\n- `@agentek/tools` - The main package containing all tools\n- `@agentek/ai-sdk` - AI SDK integration for Vercel AI SDK\n- `@agentek/mcp-server` - Model Context Protocol server\n-\n## Requirements\n\n- Node.js >= 18.0.0\n- npm, yarn, or pnpm\n\n## Installation\n\nYou can install the entire toolkit:\n\n```bash\nnpm install @agentek/tools\n```\n\nAI SDK:\n\n```bash\nnpm install @agentek/ai-sdk\n```\n\n## Usage\n\n### Using the full toolkit\n\n```typescript\nimport { createAgentekClient, allTools } from '@agentek/tools';\nimport { http } from 'viem';\nimport { mainnet } from 'viem/chains';\n\nconst client = createAgentekClient({\n  accountOrAddress: '0x...',\n  chains: [mainnet],\n  transports: [http()],\n  tools: allTools({})\n});\n\n// Execute a tool\nconst result = await client.execute('getERC20BalanceTool', {\n  address: '0x...',\n  tokenAddress: '0x...'\n});\n```\n\n### Using with AI SDK\n\n```typescript\nimport { createAgentekClient, allTools } from '@agentek/tools';\nimport { AgentekToolkit } from '@agentek/ai-sdk';\nimport { http } from 'viem';\nimport { mainnet } from 'viem/chains';\n\nconst toolkit = new AgentekToolkit({\n  accountOrAddress: '0x...',\n  chains: [mainnet],\n  transports: [http()],\n  tools: allTools({})\n});\n\n// Get tools for Vercel AI SDK\nconst aiTools = toolkit.getTools();\n```\n\n### Using the MCP Server\n\nThe MCP (Model Context Protocol) server allows you to expose Agentek tools to LLMs via the Model Context Protocol. For more information, see the [MCP Server README](/src/mcp/README.md)\n\n## Tools (114 total)\n\n### Available Tools\n\n1. resolveENS\n2. lookupENS\n3. getAllowance\n4. getBalanceOf\n5. getTotalSupply\n6. getDecimals\n7. getName\n8. getSymbol\n9. getTokenMetadata\n10. intentApprove\n11. getAcrossFeeQuote\n12. intentDepositAcross\n13. intentTransfer\n14. intentTransferFrom\n15. getLatestTokens\n16. getBalance\n17. getCode\n18. getTransactionCount\n19. getBlock\n20. getBlockNumber\n21. getGasPrice\n22. estimateGas\n23. getFeeHistory\n24. getTransaction\n25. getTransactionReceipt\n26. getUniV3Pool\n27. getUserPositions\n28. getPoolFeeData\n29. getPositionDetails\n30. intentMintPosition\n31. intentIncreaseLiquidity\n32. intentDecreaseLiquidity\n33. intentCollectFees\n34. intentTransferPosition\n35. depositWETH\n36. withdrawWETH\n37. getNaniProposals\n38. intentStakeNani\n39. intentUnstakeNani\n40. intentProposeNani\n41. intentVoteNaniProposal\n42. getNativeCoinHolders\n43. getAddressInfo\n44. getAddressCounters\n45. getAddressTransactions\n46. getAddressTokenTransfers\n47. getAddressInternalTransactions\n48. getAddressLogs\n49. getAddressBlocksValidated\n50. getAddressTokenBalances\n51. getAddressTokens\n52. getAddressCoinBalanceHistory\n53. getAddressCoinBalanceHistoryByDay\n54. getAddressWithdrawals\n55. getAddressNFTs\n56. getAddressNFTCollections\n57. getBlockInfo\n58. getBlockTransactions\n59. getBlockWithdrawals\n60. getStats\n61. getTransactionsChart\n62. getTransactionInfo\n63. getTransactionTokenTransfers\n64. getTransactionInternalTransactions\n65. getTransactionLogs\n66. getTransactionRawTrace\n67. getTransactionStateChanges\n68. getTransactionSummary\n69. getSmartContracts\n70. getSmartContract\n71. getTokenInfo\n72. getTokenHolders\n73. getTokenTransfers\n74. getBlockscoutSearch\n75. getAaveUserData\n76. getAaveReserveData\n77. intentAaveDeposit\n78. intentAaveWithdraw\n79. intentAaveBorrow\n80. intentAaveRepay\n81. checkMaliciousAddress\n82. checkMaliciousWebsite\n83. scrapeWebContent\n84. getFearAndGreedIndex\n85. getSlowStatus\n86. predictTransferId\n87. canUnlockSlow\n88. getCanReverseSlowTransfer\n89. getSlowGuardianInfo\n90. getSlowTransferApprovalRequired\n91. intentDepositToSlow\n92. intentSetSlowGuardian\n93. intentWithdrawFromSlow\n94. intentApproveSlowTransfer\n95. intentUnlockSlow\n96. intentReverseSlowTransfer\n97. getNFTMetadata\n98. getCryptoPrice\n99. estimateGasCost\n100. getTokenChart\n101. getYieldTool\n102. compareYieldTool\n103. getYieldHistoryTool\n104. compareYieldHistoryTool\n105. think\n106. askPerplexitySearch\n107. intent0xSwap\n108. tallyProposals\n109. tallyChains\n110. tallyUserDaos\n111. intentGovernorVote\n112. intentGovernorVoteWithReason\n113. getLatestCoindeskNewsTool\n114. getMarketEvents\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crypto",
        "blockchain",
        "blockchains",
        "crypto nanidao",
        "evm blockchains",
        "blockchain crypto"
      ],
      "category": "blockchain-and-crypto"
    },
    "Outblock--flow-mcp-monorepo": {
      "owner": "Outblock",
      "name": "flow-mcp-monorepo",
      "url": "https://github.com/Outblock/flow-mcp-monorepo",
      "imageUrl": "/freedevtools/mcp/pfp/Outblock.webp",
      "description": "Access various Flow blockchain data including account and token balances, contract source code, and detailed account information. Enable efficient querying of blockchain states to facilitate application interactions with the Flow network.",
      "stars": 2,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-24T13:40:06Z",
      "readme_content": "# Flow MCP Monorepo\n\nThis monorepo contains a collection of Model Context Protocol (MCPs) for interacting with the Flow blockchain and FLOW-EVM environment.\n\n## Packages\n\nThis monorepo is split into two main packages:\n\n- **`packages/flow-mcp`**: Core tools for interacting with the native Flow blockchain. This includes functionalities for managing accounts, checking balances, and interacting with native contracts.\n- **`packages/flow-defi-mcp`**: A suite of tools focused on DeFi (Decentralized Finance) and EVM-compatible interactions on the Flow network. This includes tools for checking token prices, swapping tokens on decentralized exchanges, and interacting with ERC20 tokens.\n\nPlease refer to the `README.md` file within each package for more detailed information, including setup instructions and a list of available tools.\n\n## Getting Started\n\nTo get started with this monorepo, you will need to have a monorepo manager like `pnpm`, `lerna`, or `turborepo` installed.\n\n1.  Clone the repository:\n    ```bash\n    git clone <repository-url>\n    ```\n2.  Navigate to the root directory and install the dependencies for all packages:\n    ```bash\n    pnpm install\n    # or yarn install, or npm install\n    ```\n\n## Contributing\n\nContributions are welcome! Please open an issue or submit a pull request with your changes.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "crypto",
        "flow",
        "flow blockchain",
        "blockchain crypto",
        "querying blockchain"
      ],
      "category": "blockchain-and-crypto"
    },
    "Pavel-Burov--Pavel-Burov": {
      "owner": "Pavel-Burov",
      "name": "Pavel-Burov",
      "url": "https://github.com/Pavel-Burov/Pavel-Burov",
      "imageUrl": "/freedevtools/mcp/pfp/Pavel-Burov.webp",
      "description": "Integrate blockchain functionalities into applications, enabling decentralized features and advanced web3 capabilities. This server supports building innovative solutions leveraging web3 technology.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "",
      "updated_at": "2024-09-15T14:35:05Z",
      "readme_content": "[![Typing SVG](https://readme-typing-svg.demolab.com?font=Fira+Code&pause=1000&color=87259C&width=435&lines=web3+developer)](https://git.io/typing-svg)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "crypto",
        "web3",
        "blockchain crypto",
        "blockchain functionalities",
        "integrate blockchain"
      ],
      "category": "blockchain-and-crypto"
    },
    "TermiX-official--bsc-mcp": {
      "owner": "TermiX-official",
      "name": "bsc-mcp",
      "url": "https://github.com/TermiX-official/bsc-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/TermiX-official.webp",
      "description": "Execute transactions on the Binance Smart Chain, manage wallets, transfer tokens, and interact with smart contracts. Supports structured data interactions with seamless integration for blockchain applications.",
      "stars": 88,
      "forks": 28,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-26T02:24:59Z",
      "readme_content": "\n\n---\n\n## 📦 BNBChain MCP – Binance Smart Chain Tool Server (MCP + CLI Ready)\n\n> A comprehensive blockchain tool server for BNB, BEP-20 tokens, smart contract deployment and interaction built on BNB Smart Chain (BSC) and compatible with other EVM networks.\n\n---\n\n## Technology Stack\n\n- **Blockchain**: BNB Smart Chain (BSC)  \n- **Web3 Libraries**: Viem 2.23.11, PancakeSwap SDK 5.8.8  \n- **CLI/Backend**: TypeScript, Node.js (ESM)  \n- **Protocol**: Model Context Protocol (MCP) SDK 1.4.0  \n- **Security**: AES encryption with bcrypt for private key protection\n- **Token Security**: GoPlus SDK for security checks\n- **Data Provider**: Moralis SDK 2.27.2 for blockchain data\n\n---\n\n## Supported Networks\n\n- **BNB Smart Chain Mainnet** (Chain ID: 56)  \n  - RPC: https://bsc-dataseed.binance.org (default)\n  - Custom RPC supported via environment configuration\n\n---\n\n## Contract Addresses\n\n| Contract Type | Address | Description |\n|--------------|---------|-------------|\n| Four.Meme Try Buy | 0xF251F83e40a78868FcfA3FA4599Dad6494E46034 | Four.Meme token purchase contract |\n| Four.Meme Buy/Sell AMAP | 0x5c952063c7fc8610FFDB798152D69F0B9550762b | Four.Meme auto-market-adjusted pricing |\n| Four.Meme Create Token | 0x5c952063c7fc8610FFDB798152D69F0B9550762b | Four.Meme token factory |\n| PancakeSwap Router V2 | Integrated via SDK | DEX routing and swaps |\n| PancakeSwap V3 Pools | Accessed via SDK | Liquidity pools management |\n\n---\n\n## Features\n\n- **Low-cost BNB & BEP-20 transfers** - Optimized for BSC's low gas fees\n- **PancakeSwap V2/V3 integration** - Automated swaps, liquidity management, and position tracking\n- **Four.Meme platform support** - Create, buy, and sell meme tokens directly\n- **Security-first architecture** - AES-256 encrypted private keys with bcrypt password protection\n- **Token security analysis** - Built-in GoPlus security checks for token verification\n- **Gas-efficient operations** - Smart routing for optimal gas usage on BSC\n- **AI-ready MCP protocol** - Seamless integration with Claude Desktop and AI agents\n- **Real-time wallet monitoring** - Track balances and positions across multiple tokens\n\n---\n\n## 🛠 Installation & Setup\n\n### 1. Install\n\n```bash\nnpm install -g bnbchain-mcp\n```\n\n### 2. Run the CLI Setup Wizard\n\n```bash\nbnbchain-mcp --init\n```\n\nYou’ll be prompted to enter:\n\n- ✅ **BSC Wallet Private Key** *(required)* \n- ✅ **Wallet Password** *(required, must be 6 characters)*\n- ✅ **Custom RPC URL** *(optional, defaults to:* `https://bsc-dataseed.binance.org` *)\n\n---\n\n## 🧠 Claude Desktop Integration\n\nAfter CLI setup, the tool can **auto-configure itself into Claude Desktop**.\n\n📍 File modified:\n\n```\n~/Library/Application Support/Claude/claude_desktop_config.json\n```\n\nClaude will detect and run this MCP server with your selected tools.\n\n---\n\n## 🔨 Supported MCP Tools\n\n| Tool Name             | Description                              |\n|----------------------|------------------------------------------|\n| `transferNativeToken` | Send BNB to a wallet                     |\n| `transferBEP20Token`  | Transfer BEP-20 token via symbol/address |\n| `pancakeSwap`         | Swap tokens via PancakeSwap              |\n| `createFourMeme`      | Create meme token on Four.Meme           |\n| `createBEP20Token`    | Deploy a BEP-20 contract                 |\n| `getBalance`          | Get token + native balance               |\n| `callContractFunction`| Custom contract calls via ABI            |\n| `getWalletInfo`       | Get wallet info for an address           |\n| `securityCheck`       | Check token security of BSC tokens       |\n| `pancakeAddLiquidity` | Add liquidity to PancakeSwap             |\n| `pancakeMyPosition`   | View your PancakeSwap positions          |\n| `pancakeRemovePosition`| Remove liquidity from PancakeSwap        |\n| `sellMemeToken`        | Sell meme token on Four.Meme             |\n| ...and more coming soon 🔧 |\n\n---\n\n## 🧪 Development Workflow\n\n### Compile TypeScript:\n```bash\nnpm run build\n```\n\n### Start MCP Server:\n```bash\nnpm start\n# or\nnode build/index.js\n```\n\n### Re-configure:\n```bash\nbnbchain-mcp --init\n```\n\n---\n\n## 📘 Model Context Protocol (MCP)\n\nThis project is built on **Model Context Protocol** – a standard to help agents and models interact with structured tool APIs.\n\n**MCP Benefits**:\n- ✅ Structured input/output\n- ✅ Claude + OpenAI compatible\n- ✅ Secure + serverless-ready\n\n---\n\n## ✅ Roadmap\n\n- [x] CLI Configuration Wizard\n- [x] Claude Desktop Integration\n- [x] Token Deploy + Transfer\n- [ ] Token charting tools (DEXTools, Gecko)\n- [ ] Telegram auto-trading agent\n- [ ] AI assistant with BSC on-chain brain\n\n---\n\n## 🤝 Contributing\n\nFeel free to fork, PR, or raise issues.\nWe're building **tool-first, AI-ready infrastructure** for the next wave of Web3 agents. Join us!\n\n---\n\n## 🛡️ License\n\nMIT — Use freely, contribute openly.\n\n---\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "binance",
        "blockchain",
        "crypto",
        "transactions binance",
        "crypto termix",
        "blockchain applications"
      ],
      "category": "blockchain-and-crypto"
    },
    "abdulazeem-tk4vr--shardeum-mcp-server": {
      "owner": "abdulazeem-tk4vr",
      "name": "shardeum-mcp-server",
      "url": "https://github.com/abdulazeem-tk4vr/shardeum-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/abdulazeem-tk4vr.webp",
      "description": "Facilitates querying and interaction with the Shardeum blockchain using standardized RPC methods, providing access to blockchain data such as blocks, transactions, and account details along with robust error handling.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-09T15:45:40Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/abdulazeem-tk4vr-shardeum-mcp-server-badge.png)](https://mseep.ai/app/abdulazeem-tk4vr-shardeum-mcp-server)\n\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/090acb1c-c4f6-4b74-8c9f-692c6e7d79f6)\n\n# Shardeum MCP Server\n\n![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)\n![Shardeum](https://img.shields.io/badge/Shardeum-Network-green)\n![Node.js](https://img.shields.io/badge/Node.js-18.x-green)\n\n[![smithery badge](https://smithery.ai/badge/@abdulazeem-tk4vr/shardeum-mcp-server)](https://smithery.ai/server/@abdulazeem-tk4vr/shardeum-mcp-server)\n\n<br>\n\n## 🌐 Overview\n\nThe Shardeum MCP (Model Context Protocol) Server is a powerful blockchain interaction tool that provides comprehensive access to the Shardeum network through standardized RPC methods. It enables AI agents, developers, and applications to seamlessly query and interact with the Shardeum blockchain.\n\n## ✨ Key Features\n\n- **Comprehensive RPC Method Support**\n  - Ethereum standard methods\n  - Shardeum-specific network methods\n- **Flexible Blockchain Querying**\n- **Easy Integration with AI Assistants**\n- **Blockchain Connectivity**\n- **Detailed Error Handling**\n\n## 🛠️ Supported Methods\n\n### Ethereum Standard RPC Methods\n\n- Block Information\n\n  - `eth_blockNumber`\n  - `eth_getBlockByHash`\n  - `eth_getBlockByNumber`\n  - `eth_getBlockReceipts`\n\n- Transaction Methods\n\n  - `eth_getTransactionCount`\n  - `eth_getTransactionByHash`\n  - `eth_getTransactionByBlockHashAndIndex`\n  - `eth_getTransactionByBlockNumberAndIndex`\n  - `eth_getTransactionReceipt`\n\n- Account Methods\n  - `eth_getBalance`\n  - `eth_estimateGas`\n  - `eth_chainId`\n\n### Shardeum-Specific Methods\n\n- `shardeum_getNodeList`\n- `shardeum_getNetworkAccount`\n- `shardeum_getCycleInfo`\n\n## 📦 Prerequisites\n\n- Node.js 18.x or higher\n- Basic understanding of blockchain technologies\n\n### Connecting with Cursor\n\n1. Clone the repo and do an npm install\n2. Open Cursor\n3. Go to Cursor Settings\n4. Scroll to \"MCP\"\n5. Click \"Add new MCP server\"\n6. Enter details:\n\n```bash\n{\n  \"mcpServers\": {\n    \"shm-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"path_to\\\\shardeum-mcp-server\\\\index.js\"\n      ]\n    }\n  }\n}\n```\n\n## 🔍 Example Queries\n\n### Checking Balance\n\nAsk Cursor:\n\n- \"What is the balance of 0x1234... on Shardeum?\"\n- \"Check ETH balance for this address\"\n\n### Exploring Transactions\n\n- \"Show details for transaction 0x5678...\"\n- \"Analyze the latest block on Shardeum\"\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Commit changes\n4. Push to the branch\n5. Create a pull request\n\n## 📄 Configuration\n\nTo use a different RPC endpoint, set the constant rpcUrl to a different value\n\n### 🐛 Troubleshooting\n\n- Ensure Node.js 18.x is installed\n- Check network connectivity\n- Verify RPC endpoint accessibility\n- Update to the latest version\n\n## 🗺️ Roadmap\n\n- [ ] Add more networks for accessibility\n- [ ] Make it write friendly to execute transactions\n- [ ] Enhance error handling\n- [ ] Improve performance\n- [ ] Expand tool capabilities\n\n## 📊 Supported Networks\n\n- Shardeum Local\n- More networks coming soon!\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "shardeum",
        "rpc",
        "shardeum blockchain",
        "shardeum mcp",
        "tk4vr shardeum"
      ],
      "category": "blockchain-and-crypto"
    },
    "ahnlabio--bicscan-mcp": {
      "owner": "ahnlabio",
      "name": "bicscan-mcp",
      "url": "https://github.com/ahnlabio/bicscan-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ahnlabio.webp",
      "description": "Provides risk scores and detailed asset information for blockchain addresses and decentralized applications using real-time scanning. Integrates with applications via a robust API for assessing potential risks and holdings securely.",
      "stars": 12,
      "forks": 14,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-04T02:59:36Z",
      "readme_content": "# BICScan MCP Server\n\nA powerful and efficient Blockchain address risk scoring API MCP Server, leveraging the BICScan API to provide comprehensive risk assessments and asset information for blockchain addresses, domains, and decentralized applications (dApps).\n\n🎉 We're listed on https://github.com/modelcontextprotocol/servers for official integration 🎉\n\n\nhttps://github.com/user-attachments/assets/f9425429-1cb1-4508-b962-81351075258b\n\n## Key Features\n- **Risk Scoring**: Obtain risk scores for various blockchain entities, including crypto addresses, domain names, and decentralized application URLs, with scores ranging from 0 to 100, where 100 indicates high risk.\n- **Asset Information**: Retrieve detailed asset holdings for specified crypto addresses, including cryptocurrencies and tokens, with support for multiple blockchain networks.\n- **Real-time Scanning**: Utilize the BICScan API to perform real-time scans and receive up-to-date information on potential risks and asset holdings.\n- **Secure and Reliable**: Built with robust error handling and logging to ensure secure and reliable operations.\n\n## Example Output\n\n## How to use.\n\nYou con either use Python with `uv` or `docker` depending on your preference.\n\nDepending on your environment, you can choose to use either `uv`, `docker`, or `uvx`.\n\n### 1. Running with `uv`\n\n#### 1-1. Requirements\n1. Python 3.10 or higher\n2. uv 0.6.x\n3. git\n\n#### 1.2. Clone the repository\n```sh\ngit clone https://github.com/ahnlabio/bicscan-mcp\n```\n\n#### 1.3. Config `claude_desktop_config.json`\n\nAppend following to `claude_desktop_config.json`.\n\nMake sure to replace:\n - `YOUR_BICSCAN_REPO_DIR_HERE`: to something like `C:\\\\Users\\\\ABC\\\\repo\\\\bicscan-mcp` or `/home/abc/repo/bicscan-mcp` similarly.\n - `YOUR_BICSCAN_API_KEY_HERE`: to free API key can be obtained from https://bicscan.io (details below)\n\n```json\n{\n  \"mcpServers\": {\n    ... some other mcp servers ...,\n    \"bicscan\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"YOUR_BICSCAN_REPO_DIR_HERE\",\n        \"run\",\n        \"bicscan-mcp\"\n      ],\n      \"env\": {\n        \"BICSCAN_API_KEY\": \"YOUR_BICSCAN_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n### 2. Running with `Docker`\n\n#### 2.1. Requirements\n1. Docker environment\n\n#### 2.2. Clone the repository\n```sh\ngit clone https://github.com/ahnlabio/bicscan-mcp\n```\n\n#### 2.3. Build Docker image.\n\nJust run `make` in the repository directory to build docker image.\n\n#### 2.4. Config\nAppend following to `claude_desktop_config.json`\n\nMake sure to replace:\n - `YOUR_BICSCAN_API_KEY_HERE` to API key obtained from https://bicscan.io (details below)\n\n```json\n{\n  \"mcpServers\": {\n    ... some other mcp servers ...,\n    \"bicscan\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"--interactive\",\n        \"--env\", \"BICSCAN_API_KEY=YOUR_BICSCAN_API_KEY_HERE\",\n        \"bicscan-mcp\"\n      ]\n    }\n  }\n}\n```\n\n### 3. Running with `uvx`\n\n#### 3.1. Requirements\n1. Python 3.10 or higher\n2. uv 0.6.x\n3. git\n\n#### 3.2. Config `claude_desktop_config.json`\n\nAppend following to `claude_desktop_config.json`.\n\nMake sure to replace:\n - `YOUR_BICSCAN_API_KEY_HERE`: to free API key can be obtained from https://bicscan.io (details below)\n\n```json\n{\n  \"mcpServers\": {\n    ... some other mcp servers ...,\n    \"bicscan\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--from\",\n        \"git+https://github.com/ahnlabio/bicscan-mcp\",\n        \"bicscan-mcp\"\n      ],\n      \"env\": {\n        \"BICSCAN_API_KEY\": \"YOUR_BICSCAN_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n## How to obtain Free BICScan API Key?\n\n1. Visit `https://bicscan.io` and register.\n2. Go to profile and create \"Create App\"\n3. Enter name and description on your choice.\n4. Replace `YOUR_BICSCAN_API_KEY_HERE` part from above config to your newly obtained key.\n5. restart the Claude Desktop.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "bicscan",
        "crypto",
        "blockchain crypto",
        "bicscan mcp",
        "crypto ahnlabio"
      ],
      "category": "blockchain-and-crypto"
    },
    "aiopinions--TON-ACCESS-MCP": {
      "owner": "aiopinions",
      "name": "TON-ACCESS-MCP",
      "url": "https://github.com/aiopinions/TON-ACCESS-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/aiopinions.webp",
      "description": "Connects to the TON blockchain to facilitate interactions with blockchain data, including wallets, transactions, and smart contracts. Provides decentralized access, health checking, and load balancing to ensure reliable AI assistant performance.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-03-17T19:41:29Z",
      "readme_content": "# TON Access MCP Server\n\nA production-ready Model Context Protocol (MCP) server implementation for the TON blockchain, built on top of the [ton-access](https://github.com/orbs-network/ton-access) library.\n\n## What is MCP?\n\nThe [Model Context Protocol (MCP)](https://modelcontextprotocol.io/) is an open protocol developed by Anthropic that standardizes how applications provide context to Large Language Models (LLMs). It follows a client-server architecture where LLM applications (hosts) connect to MCP servers that provide context, tools, and prompts to the LLMs.\n\n## Features\n\n- **Full MCP Implementation**: Implements the complete MCP specification for connecting AI assistants to the TON blockchain\n- **Decentralized Access**: Uses multiple nodes for reliability and decentralization\n- **Health Checking**: Automatically checks node health and selects healthy nodes\n- **Load Balancing**: Uses weighted random algorithm to distribute requests\n- **Multiple Networks**: Supports both mainnet and testnet\n- **Multiple Protocols**: Supports different RPC protocols (TonCenter HTTP API v2, TonHub HTTP API v4)\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/your-org/ton-access-mcp.git\ncd ton-access-mcp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Start the server\nnpm start\n```\n\n## Quick Start\n\n```typescript\nimport { TonAccessMCPServer } from 'ton-access-mcp';\n\n// Create and start the server\nconst server = new TonAccessMCPServer({\n  port: 3000,\n  host: 'localhost'\n});\n\nserver.start().then(() => {\n  console.log('TON Access MCP Server is running on http://localhost:3000');\n});\n```\n\n## Available Tools\n\nThe TON Access MCP server provides the following tools:\n\n- **ton.getBalance**: Get the balance of a TON wallet address\n- **ton.getTransaction**: Get details of a TON blockchain transaction\n- **ton.getBlock**: Get details of a TON blockchain block\n- **ton.callGetter**: Call a getter method on a TON smart contract\n- **ton.getMasterchainInfo**: Get current information about the TON masterchain\n- **ton.getAccountState**: Get the current state of a TON account\n\n## Documentation\n\nFor detailed documentation, see the [docs](./docs) directory.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgements\n\n- [Orbs Network](https://github.com/orbs-network) for the ton-access library\n- [Anthropic](https://www.anthropic.com/) for the MCP specification\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "crypto",
        "ton",
        "ton blockchain",
        "blockchain facilitate",
        "blockchain crypto"
      ],
      "category": "blockchain-and-crypto"
    },
    "akc2267--solana-mcp-server": {
      "owner": "akc2267",
      "name": "solana-mcp-server",
      "url": "https://github.com/akc2267/solana-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/akc2267.webp",
      "description": "Interact with the Solana blockchain using simple RPC calls to retrieve account balances, transfer SOL, and access account information.",
      "stars": 1,
      "forks": 4,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-06-08T19:55:06Z",
      "readme_content": "# Solana MCP Server\n\nA Model-Context-Protocol server for interacting with the Solana blockchain. This server provides simple RPC endpoints for common Solana operations.\n\n## Features\n\n- Get current slot number\n- Check account balances\n- Get detailed account information\n- Display keypair information\n- Transfer SOL between accounts\n\n## Quickstart\n\nclone and install dependencies:\n\n```bash\ngit clone https://github.com/yourusername/solana-mcp-server.git\ncd solana-mcp-server\nnpm install\n```\n\nbuild the tool\n\n```bash\nnpm run build\n```\n\nadd the tool to your claude_desktop_config.json\n```\n\"solana-rpc\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"/PATH/TO/solana-mcp-server/build/index.js\"\n            ]\n        }\n```\n\n## Usage\n\nAsk Claude:\n- whats the latest slot on solana?\n- whats the balance of 62QXuWZ3WT6ws1ZFxJobVDVXn6bEsiYpLo5yG612U6u3?\n- Here's my test key [REPLACE WITH SECRET KEY]. let's transfer 0.001 SOL to [REPLACE WITH PUBLIC ADDRESS]\n\n## Security Note\n\nOnly use this with a test wallet with a small amount of funds.\n\n## RPC Endpoint\n\nThe server connects to Solana's mainnet at `https://api.mainnet-beta.solana.com`. To use a different network (like devnet or testnet), modify the `SOLANA_RPC` constant in `src/index.ts`.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "solana",
        "rpc",
        "blockchain",
        "solana blockchain",
        "akc2267 solana",
        "solana mcp"
      ],
      "category": "blockchain-and-crypto"
    },
    "akki91--ankr-mcp": {
      "owner": "akki91",
      "name": "ankr-mcp",
      "url": "https://github.com/akki91/ankr-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/akki91.webp",
      "description": "Fetch on-chain blockchain data using the Ankr API, including accessing token balances and performing other blockchain operations directly within AI applications.",
      "stars": 1,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-31T15:14:55Z",
      "readme_content": "#  Ankr API MCP Server\n\n\nMCP (Model Context Protocol) server for blockchain data through the [Ankr](https://www.ankr.com/docs/) API.\n\n\n## Overview\n\nThe Ankr MCP Server fetches on-chain data via the Ankr API. It implements the MCP to allow LLMs  blockchain data.\n\n## Features\n\nThe server provides the following onchain data operations:\n\n### Token Operations\n\n- **Get Account balance** (`get_token_balances_on_network`): Gets all token balances for a given address on a specific network\n    - Parameters: network, wallet/account address\n    - Returns: Asset data for that wallet on the chain,\n\n## Installation\n\n```bash\nnpm install @akki91/ankr-mcp\n```\n\n## Usage\n\n### Environment Setup\n\nSet your ANKR API token by logging into ANKR api docs portal.\n\n```bash\nexport ANKR_API_TOKEN=your_api_token_here\n```\n\n### Running the Server\n\nThe server can be run directly from the command line:\n\n```bash\nnpx @akki91/ankr-mcp\n```\n\n### Usage with LLM Tools\n\nThis server implements the Model Context Protocol (MCP), which allows it to be used as a tool provider for compatible AI models.\n\n\n### Integration with AI Models\n\nTo integrate this server with AI applications that support MCP, add the following to your app's server configuration:\n\n\n```json\n{\n  \"mcpServers\": {\n    \"ankr-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@akki91/ankr-mcp\"\n      ],\n      \"env\": {\n        \"ANKR_API_TOKEN\": \"your_api_token_here\"\n      }\n    }\n  }\n}\n```\n### Integrating Ankr MCP Tools in Claude Desktop\n\nFollow the instructions below to update your settings and ensure that your MCP server is available within Claude Desktop.\n\n#### Step 1: Access Settings in Claude Desktop\n\n1. Launch **Claude Desktop**.\n2. From the main menu, navigate to **Settings**.\n\n#### Step 2: Update Developer Settings\n\n1. Open the **Developer Settings**.\n2. Edit the configuration file that contains your MCP server definitions.\n3. If MCP servers are already listed, append your Ankr MCP configuration to the existing list. Otherwise, copy and paste the entire above configuration for the Ankr MCP server.\n\n#### Step 3: Restart Claude Desktop\n\n1. Close the **Developer Settings** menu.\n2. Restart **Claude Desktop** to apply the changes.\n\n#### Step 4: Verify Integration\n\n1. Once Claude Desktop has restarted, click on the **Tools Icon** located just below the chat prompt.\n2. Verify that the list of tools provided by the Ankr MCP server is visible and accessible.\n\nBy following these steps, your Ankr MCP configuration should now be integrated into Claude Desktop, allowing you to access its tools directly through the interface.\n\n### Sample chat prompt\n\n```\nGive me the token balances for wallet adddress X for network Y.\n```\n## Development\n\n### Building from Source\n\n```bash\n# Clone the repository\ngit clone https://github.com/akki91/ankr-mcp.git\ncd ankr-mcp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n### Debug Mode\nDebugging for this project is supported using [MCP Inspector](https://github.com/modelcontextprotocol/inspector)\n\n```bash\nnpm run debug\n```\n\n\n### Sources \nThis project is inspired from list of servers created [here](https://github.com/modelcontextprotocol/servers/) \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "ankr",
        "api",
        "ankr api",
        "crypto akki91",
        "blockchain crypto"
      ],
      "category": "blockchain-and-crypto"
    },
    "aldrin-labs--solana-mcp-server": {
      "owner": "aldrin-labs",
      "name": "solana-mcp-server",
      "url": "https://github.com/aldrin-labs/solana-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/aldrin-labs.webp",
      "description": "Access Solana blockchain data using a variety of RPC methods, enabling retrieval of account balances, account information, and largest accounts within the network.",
      "stars": 23,
      "forks": 9,
      "license": "The Unlicense",
      "language": "Rust",
      "updated_at": "2025-09-09T15:57:12Z",
      "readme_content": "# Solana MCP Server\n\nA Model Context Protocol (MCP) server that provides comprehensive access to Solana blockchain data through Cline. This server implements a wide range of Solana RPC methods, making it easy to query blockchain information directly through natural language conversations.\n\n<a href=\"https://glama.ai/mcp/servers/bp6d6p1sp3\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/bp6d6p1sp3/badge\" alt=\"solana-mcp-server MCP server\" /></a>\n\n## Features\n\nThe server provides 21 essential Solana RPC methods across different categories:\n\n### Account & Balance Operations\n- `get_sol_balance`: Get SOL balance for an address\n- `get_token_balance`: Get SPL token balance\n- `get_account_info`: Get account information\n- `get_largest_accounts`: Get largest accounts on network\n\n### Block & Transaction Information\n- `get_slot`: Get current slot\n- `get_block`: Get block information\n- `get_block_time`: Get block production time\n- `get_transaction`: Get transaction details\n- `get_recent_blockhash`: Get recent blockhash\n\n### Token Operations\n- `get_token_accounts_by_owner`: Get token accounts by owner\n- `get_token_accounts_by_delegate`: Get delegated token accounts\n- `get_token_supply`: Get token supply information\n\n### System Information\n- `get_epoch_info`: Get current epoch information\n- `get_version`: Get node version\n- `get_health`: Get node health status\n- `get_supply`: Get current supply\n- `get_inflation_rate`: Get inflation rate\n- `get_cluster_nodes`: Get cluster node information\n- `get_minimum_balance_for_rent_exemption`: Get minimum rent-exempt balance\n\n### Staking & Governance\n- `get_vote_accounts`: Get vote accounts\n- `get_leader_schedule`: Get leader schedule\n\n## Setup in Cline\n\n1. Add the following configuration to your Cline MCP settings file (`~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json` on macOS):\n\n```json\n{\n  \"mcpServers\": {\n    \"solana\": {\n      \"command\": \"cargo\",\n      \"args\": [\"run\"],\n      \"cwd\": \"/path/to/solana-mcp-server\",\n      \"env\": {\n        \"SOLANA_RPC_URL\": \"https://api.mainnet-beta.solana.com\"  // Or your preferred RPC endpoint\n      }\n    }\n  }\n}\n```\n\n2. Restart Cline to load the new MCP server.\n\n## Usage Examples\n\nOnce configured, you can interact with the Solana blockchain through natural language in Cline. Here are some example queries:\n\n- \"What's the SOL balance of address Gh9ZwEmdLJ8DscKNTkTqPbNwLNNBjuSzaG9Vp2KGtKJr?\"\n- \"Show me the current slot number\"\n- \"Get information about the latest block\"\n- \"What's the current inflation rate?\"\n- \"Show me the token accounts owned by address ...\"\n\n## Environment Variables\n\n- `SOLANA_RPC_URL`: (Optional) The Solana RPC endpoint to use. Defaults to \"https://api.mainnet-beta.solana.com\" if not specified.\n\n## Development\n\n### Prerequisites\n- Rust and Cargo\n- Solana CLI tools (optional, for testing)\n\n### Building\n```bash\ncargo build\n```\n\n### Running\n```bash\ncargo run\n```\n\n## License\n\nMIT License\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "rpc",
        "crypto",
        "solana blockchain",
        "blockchain data",
        "access solana"
      ],
      "category": "blockchain-and-crypto"
    },
    "allthatjazzleo--mantrachain-mcp": {
      "owner": "allthatjazzleo",
      "name": "mantrachain-mcp",
      "url": "https://github.com/allthatjazzleo/mantrachain-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/allthatjazzleo.webp",
      "description": "Interact with the MantraChain blockchain to send tokens, delegate to validators, and query account balances using a standardized protocol. Perform blockchain operations effortlessly using both stdio and HTTP+SSE modes.",
      "stars": 2,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-10T08:17:07Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/allthatjazzleo-mantrachain-mcp-badge.png)](https://mseep.ai/app/allthatjazzleo-mantrachain-mcp)\n\n# MantraChain MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@allthatjazzleo/mantrachain-mcp)](https://smithery.ai/server/@allthatjazzleo/mantrachain-mcp)\n\nA Model Context Protocol (MCP) server for interacting with MantraChain (Cosmos SDK) blockchain. This server provides tools for sending tokens, delegating to validators, querying balances, and more using the MCP protocol.\n\n## Features\n\n- Send tokens to other addresses (bank send)\n- Delegate tokens to validators (staking)\n- Query account balances\n- Get validator information\n- Sign and broadcast arbitrary transactions\n- Configure mnemonic and network via environment variables\n- Choose between Dukong testnet and Mainnet\n- **Supports both stdio and HTTP+SSE transport modes**\n\n## Available Tools\n\n### Bank Operations\n- **bank-send**: Send tokens to another address (supports multiple coins per transaction)\n- **get-balance**: Get balance of an address (defaults to your own address if none provided)\n- **get_evm_balance**: Get native token (OM) balance for an EVM address\n- **get_token_balance**: Get ERC20 token balance for an address\n- **get_nft_balance**: Get ERC721 NFT count for an address from a collection\n- **get_erc1155_balance**: Get ERC1155 token balance for a specific token ID\n- **get_address_from_mnemonic**: Get EVM address derived from mnemonic\n\n### Staking Operations\n- **delegate**: Delegate/Stake tokens to a validator\n- **undelegate**: Undelegate/Unstake tokens from a validator\n- **claim-rewards**: Claim rewards for a specific validator\n- **get-validators**: Get all validators\n- **get-delegations**: Get current staking information for an address\n- **get-available-rewards**: Get all available rewards for an address\n\n### Network Operations\n- **get-account-info**: Get current account information\n- **get-block-info**: Get block information from Cosmos (cometbft) RPC\n- **get-block-info-evm**: Get block information from EVM RPC\n- **query-network**: Execute a generic network query against chain APIs\n\n### IBC Operations\n- **ibc-transfer**: Send tokens via IBC transfer\n\n### Smart Contract Operations\n- **cosmwasm-contract-query**: Query a CosmWasm smart contract (read-only)\n- **cosmwasm-contract-execute**: Execute a function on a CosmWasm contract (state-changing)\n- **read_evm_contract**: Read data from an EVM contract (view/pure function)\n- **write_evm_contract**: Write data to an EVM contract (state-changing function)\n- **deploy_evm_contract**: Deploy a new EVM contract\n- **is_contract**: Check if an address is a contract or EOA\n\n### DEX Operations\n- **dex-get-pools**: Get all available liquidity pools from the DEX\n- **dex-find-routes**: Find available swap routes between two tokens\n- **dex-simulate-swap**: Simulate a token swap to get expected outcome without executing it\n- **dex-swap**: Execute a token swap on the DEX with slippage protection\n\n### Transaction Operations\n- **sign-and-broadcast**: Sign and broadcast a generic Cosmos transaction\n- **get_transaction**: Get detailed information about a specific EVM transaction by hash\n- **get_transaction_receipt**: Get EVM transaction receipt by hash\n- **estimate_gas**: Estimate gas cost for a transaction\n- **transfer_om**: Transfer native tokens (OM) via EVM\n- **transfer_erc20**: Transfer ERC20 tokens to another address\n- **approve_token_spending**: Approve another address to spend your ERC20 tokens\n- **transfer_nft**: Transfer an ERC721 NFT to another address\n- **transfer_erc1155**: Transfer ERC1155 tokens to another address\n- **transfer_token**: Transfer ERC20 tokens to an address\n\n## Available Resources\n\n- **networks://all**: JSON resource showing all available networks with their configuration\n- **openapi://{networkName}**: OpenAPI/Swagger specification for the specified network\n\n## Running the Server\n\nThe server can run in two modes:\n\n1.  **Stdio Mode (Default):** Communicates over standard input/output. This is the default mode when running the server directly or via `npx`.\n    ```bash\n    # Using installed package\n    mantrachain-mcp\n\n    # Using npx\n    npx -y mantrachain-mcp@latest\n\n    ```\n\n2.  **Streamable HTTP Mode:** Runs an HTTP server on port 3000, communicating via Server-Sent Events (SSE). Activate this mode using the `--http` flag or the dedicated npm scripts.\n    ```bash\n    # Using installed package\n    mantrachain-mcp --http\n\n    # Using npx\n    export MNEMONIC=\"YOUR_MNEMONIC\"\n    export CUSTOM_NETWORKS=\"YOUR_CUSTOM_NETWORKS_JSON\"\n    npx -y mantrachain-mcp@latest -- --http\n    ```\n\n## MCP Configuration\n\n### Installing via Smithery\n\nTo install MantraChain MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@allthatjazzleo/mantrachain-mcp):\n\n```bash\nnpx -y @smithery/cli install @allthatjazzleo/mantrachain-mcp --client claude\n```\n\n### To integrate with MCP client applications, add the server configuration to your MCP client configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"mantrachain-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mantrachain-mcp@latest\"\n      ],\n      \"env\": {\n        \"MNEMONIC\": \"YOUR_MNEMONIC\",\n        \"CUSTOM_NETWORKS\": \"{\\\"my-custom-net\\\":{\\\"rpcEndpoint\\\":\\\"https://rpc.custom-network.io\\\",\\\"apiEndpoint\\\":\\\"https://api.custom-network.io\\\",\\\"chainId\\\":\\\"my-custom-net-1\\\",\\\"prefix\\\":\\\"custom\\\",\\\"denom\\\":\\\"ucustom\\\",\\\"gasPrice\\\":\\\"0.01\\\",\\\"isMainnet\\\":false}}\"\n      }\n    }\n  }\n}\n```\n\n### Connecting remote MCP server in [cline](https://docs.cline.bot/mcp-servers/connecting-to-a-remote-server):\n\n```json\n{\n  \"mcpServers\": {\n    \"mantrachain-mcp-sse\": {\n      \"url\": \"http://localhost:3000/sse\",\n      \"transportType\": \"sse\"\n    }\n  }\n}\n```\n\n\n### If you build the package locally instead of globally\n\nAfter building the package, you can run it directly from the build directory. Make sure to replace `your_path` with the actual path to your build directory.\n```bash\nnpm run build\n```\n\nThen, you can use the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"mantrachain-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"your_path/mantrachain-mcp/build/index.js\"\n      ],\n      \"env\": {\n        \"MNEMONIC\": \"YOUR_MNEMONIC\"\n      }\n    }\n  }\n}\n```\n\n## Environment Variables\n\n- **MNEMONIC**: Required. The mnemonic seed phrase for the wallet to use.\n- **CUSTOM_NETWORKS**: Optional. JSON string containing additional network configurations.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mantrachain",
        "blockchain",
        "crypto",
        "mantrachain blockchain",
        "mantrachain mcp",
        "interact mantrachain"
      ],
      "category": "blockchain-and-crypto"
    },
    "armorwallet--armor-crypto-mcp": {
      "owner": "armorwallet",
      "name": "armor-crypto-mcp",
      "url": "https://github.com/armorwallet/armor-crypto-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/armorwallet.webp",
      "description": "Integrate AI agents with blockchain capabilities for wallet management, trading, and crypto strategies. Supports swaps, event-based trades, and provides tools for seamless interaction across multiple cryptocurrency ecosystems.",
      "stars": 183,
      "forks": 24,
      "license": "GNU General Public License v3.0",
      "language": "Python",
      "updated_at": "2025-10-04T02:59:18Z",
      "readme_content": "# Armor Crypto MCP\n*Alpha Test version 0.1.24*\n\nA single source for integrating AI Agents with the Crypto ecosystem. This includes Wallet creation and management, swaps, transfers, event-based trades like DCA, stop loss and take profit, and much more. The Armor MCP supports Solana in Alpha and, when in beta, will support more than a dozen blockchains, including Ethereum. Base, Avalanche, Bitcoin, Sui, Berachain, megaETH, Optimism, Ton, BNB, and Arbitrum, among others. Using Armor's MCP you can bring all of crypto into your AI Agent with unified logic and a complete set of tools.\n       \n![Armor MCP](https://armor-assets-repository.s3.nl-ams.scw.cloud/MCP_sm.png)\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n# Features\n\n🧠 AI Native\n\n📙 Wallet Management\n\n🔃 Swaps\n\n🌈 Specialized trades (DCA, Stop Loss etc.)\n\n⛓️ Multi-chain\n\n↔️ Cross-chain transations\n\n🥩 Staking\n\n🤖 Fast intergration to Agentic frameworks\n\n👫 Social Sentiment\n\n🔮 Prediction\n<br />\n<br />\n![Armor MCP Diagram](https://armor-assets-repository.s3.nl-ams.scw.cloud/amor_mcp_diagram.png)\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n# Requirements\n\n### 1. Make sure you have python installed\n<br />\n\n### 2. Install `uv`\n*Linux / Windows*\n\n```sh\npip install uv\n```\n*Mac*\n\n```sh\nbrew install uv\n```\n<br />\n\n### 3. Claude Desktop or your AI Agent will run the MCP\nSee [Usage & Configuration](#usage--configuration) for details.\n<br />\n<br />\n<br />\n<br />\n<br />\n\n# Alpha Testing\n\nWe are currently in pre-alpha, and we are testing the capabilities of various agents and agentic frameworks like Claude Desktop, Cline, Cursor, n8n, etc. \n\n## Current Features & Tools\n- Wallet Management\n    - Grouping & Organization\n    - Archiving\n- Swap & Trades\n    - Normal swap\n    - DCA (place / list / cancel)\n    - Scheduled Orders\n    - Limit Orders (place / list / cancel)\n- Staking and Unstaking\n- Token Search and Trending Tokens\n- Statistical Calculator for accurate Analysis\n- Supports Solana blockchain\n\n## Coming Soon\n- More Blockchain Support\n- Minting\n- Armor Agents as a Tool (or A2A)\n\n## MCP Setup\nCurrently you need to have the Armor NFT to get an API Key.\nGet it [here](https://codex.armorwallet.ai/)\n\n## Usage & Configuration\nTo use the Armor MCP with your agent, you need the following configuration, replace `<PUT-YOUR-KEY-HERE>` with your API key:\n```json\n{\n  \"mcpServers\": {\n    \"armor-crypto-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\"armor-crypto-mcp@latest\", \"--version\"],\n      \"env\": {\n        \"ARMOR_API_KEY\": \"<PUT-YOUR-KEY-HERE>\"\n      }\n    }\n  }\n}\n```\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n# Use in Claude Desktop\n1. Must have Developer Mode enabled\n2. Open Claude Desktop's File Menu top left of the window.\n3. Go to File > Settings\n4. Under Developer, click Edit Configuration\n5. In the config file, insert the `armor-wallet-mcp` section from above\n6. Make sure to replace the placeholder with your API key\n7. Save the file and start a new Chat in Claude Desktop\n\n## Use in Cline\n1. Click on the `MCP Servers` button in the Cline tab in VSCode on the left panel\n2. Scroll to the bottom of the left panel and click on `Configure MCP Servers`\n3. In the config file, insert `armor-wallet-mcp` section from above\n4. Make sure to replace the placeholder with your API key\n5. Save the file, click `Done` under the `MCP Servers` tab and start chatting with Cline\n\n## Use in n8n\n1. Open the n8n app\n2. Bottom-left of screen click `...` next to your username and click `Settings`\n3. On the left panel, click `Community nodes` and then `Install a Community Node` button\n4. In the search field for `npm Package Name` type in *mcp*\n5. Install `MCP Nodes`\n6. Add any MCP node, for example: `List Tools`\n7. In the MCP Client `Parameters` tab, click `Select Credential` and click `Create new credential`\n8. Under `Command` enter `uvx`\n9. Under `Arguments` enter `armor-crypto-mcp`\n10. Under `Environments` enter `ARMOR_API_KEY=eyJhbGciOiJIUzI1NiIsIn...` paste the full API Key value after the `=`\n11. Back in the `Parameters` tab you can choose the MCP `Operation` for that Node\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n# Using Armor MCP\n\nOnce you have setup the Armor MCP [here are some prompts you can use to get started](https://github.com/armorwallet/armor-crypto-mcp/blob/main/README_prompts.md)\n<br />\n<br />\n<br />\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crypto",
        "cryptocurrency",
        "blockchain",
        "crypto armorwallet",
        "agents blockchain",
        "armor crypto"
      ],
      "category": "blockchain-and-crypto"
    },
    "b-open-io--bsv-mcp": {
      "owner": "b-open-io",
      "name": "bsv-mcp",
      "url": "https://github.com/b-open-io/bsv-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/b-open-io.webp",
      "description": "Access Bitcoin SV blockchain functionalities including wallet operations, NFT ordinals, token marketplace interactions, and data conversions. Facilitate natural language interactions to manage BSV addresses, send transactions, purchase NFTs and tokens, and query blockchain data.",
      "stars": 14,
      "forks": 7,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-22T09:13:03Z",
      "readme_content": "# Bitcoin SV MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@b-open-io/bsv-mcp)](https://smithery.ai/server/@b-open-io/bsv-mcp)\n\n> **⚠️ NOTICE: Experimental Work in Progress**  \n> This project is in an early experimental stage. Features may change, and the API is not yet stable.\n> Contributions, feedback, and bug reports are welcome! Feel free to open issues or submit pull requests.\n\nA collection of Bitcoin SV (BSV) tools for the Model Context Protocol (MCP) framework. This library provides wallet, ordinals, and utility functions for BSV blockchain interaction.\n\n## Installation and Setup\n\n### Use Bun (Optional but recommended)\n\nThis project is built using [Bun](https://bun.sh/), a fast JavaScript runtime and package manager. While Bun is recommended for best performance, the server can also run with Node.js and npm as Bun is designed to be backward compatible with node.\n\n#### Installing Bun\n\n**macOS (using Homebrew):**\n```bash\nbrew install oven-sh/bun/bun\n```\n\n**macOS/Linux/WSL (using installer script):**\n```bash\ncurl -fsSL https://bun.sh/install | bash\n```\n\n**Windows:**\nWindows users should use WSL (Windows Subsystem for Linux) or Docker to run Bun.\n\nNode.js and npm will also work but may not offer the same performance benefits.\n\n## Connecting to MCP Clients\n\nThis server implements the [Model Context Protocol](https://modelcontextprotocol.io/) (MCP), allowing AI assistants to utilize Bitcoin SV functionalities. You can connect this server to various MCP-compatible clients.\n\n\n\n> **Note:** The `PRIVATE_KEY_WIF` environment variable is now optional. Without it, the server runs in limited mode with educational resources and non-wallet tools available. Wallet and MNEE token operations require a valid private key. You can also set the `IDENTITY_KEY_WIF` environment variable to enable sigma-protocol signing of ordinals inscriptions for authentication, curation, and web-of-trust.\n\n### Cursor\n\nTo use the BSV MCP server with [Cursor](https://cursor.sh/):\n\n1. Install Cursor if you haven't already\n2. Open Cursor and navigate to Settings → Extensions → Model Context Protocol\n3. Click \"Add a new global MCP server\"\n4. Enter the following configuration in JSON format:\n\n```json\n{\n  \"mcpServers\": {\n    \"Bitcoin SV\": {\n      \"command\": \"bunx\",\n      \"args\": [\n        \"bsv-mcp@latest\"\n      ],\n      \"env\": {\n        \"PRIVATE_KEY_WIF\": \"<your_private_key_wif>\",\n        \"IDENTITY_KEY_WIF\": \"<your_identity_key_wif>\"\n      }\n    }\n  }\n}\n```\n\n5. Replace `<your_private_key_wif>` with your actual private key WIF (keep this secure!) If you dont have one you can leave this off for now but you wont be able to use tools that require a wallet. `<your_identity_key_wif>` is also optional. It will sign 1Sat Ordinals with Sigma protocol using the provided identity key.\n\n6. Click \"Save\"\n\nThe BSV tools will now be available to Cursor's AI assistant under the \"Bitcoin SV\" namespace.\n\n#### Alternative for npm users\n\nIf you prefer to use npm instead of Bun:\n\n```json\n{\n  \"mcpServers\": {\n    \"Bitcoin SV\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"bsv-mcp@latest\"\n      ],\n      \"env\": {\n        \"PRIVATE_KEY_WIF\": \"<your_private_key_wif>\",\n        \"IDENTITY_KEY_WIF\": \"<your_identity_key_wif>\"\n      }\n    }\n  }\n}\n```\n\n### Claude for Desktop\n\nTo connect this server to Claude for Desktop:\n\n1. Open [Claude for Desktop](https://claude.ai/desktop) and go to Claude > Settings > Developer\n2. Click \"Edit Config\". \n\nOpen the Claude configuration json file in your favorite text editor. If you prefer to do it from the cli:\n\n   ```bash\n   # macOS/Linux\n   code ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n\n   # Windows\n   code %APPDATA%\\Claude\\claude_desktop_config.json\n   ```\n\n3. Add the BSV MCP server to your configuration:\n   ```json\n   {\n     \"mcpServers\": {\n       \"Bitcoin SV\": {\n         \"command\": \"bun\",\n         \"args\": [\n           \"run\", \"bsv-mcp@latest\"\n         ],\n         \"env\": {\n           \"PRIVATE_KEY_WIF\": \"<your_private_key_wif>\",\n           \"IDENTITY_KEY_WIF\": \"<your_identity_key_wif>\"\n         }\n       }\n     }\n   }\n   ```\n4. Replace `<your_private_key_wif>` with your actual private key WIF\n5. Save the file and restart Claude for Desktop\n6. The BSV tools will appear when you click the tools icon (hammer) in Claude for Desktop\n\n#### Alternative for npm users (Claude)\n\nIf you prefer to use npm instead of Bun, replace the \"command\" field with \"npx\".\n\n## Available Tools\n\nThe toolkit is organized into several categories:\n\n### Wallet Tools\n\nWallet tools provide core BSV wallet functionality:\n\n| Tool Name                | Description                                                                                                                                                                                                                                           | Example Output                                                                                            |\n| ------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------- |\n| `wallet_getPublicKey`    | Retrieves a public key for a specified protocol and key ID                                                                                                                                                                                            | `{\"publicKey\":\"032d0c73eb9270e9e009fd1f9dd77e19cf764fbad5f799560c4e8fd414e40d6fc2\"}`                      |\n| `wallet_createSignature` | Creates a cryptographic signature for the provided data                                                                                                                                                                                               | `{\"signature\":[144,124,85,193,226,45,140,249,9,177,11,167,33,215,209,38,...]}`                            |\n| `wallet_verifySignature` | Verifies a cryptographic signature against the provided data                                                                                                                                                                                          | `{\"isValid\":true}`                                                                                        |\n| `wallet_encryption`      | Combined tool for encrypting and decrypting data using the wallet's cryptographic keys.<br><br>**Examples:**<br>1. Encrypt text: `\"Encrypt this message: Hello World\"`<br>2. Decrypt data: `\"Decrypt this data that was previously encrypted for me\"` | Encrypt: `{\"ciphertext\":[89,32,155,38,125,22,49,226,26,...]}` <br> Decrypt: `{\"plaintext\":\"hello world\"}` |\n| `wallet_getAddress`      | Returns a BSV address for the current wallet or a derived path                                                                                                                                                                                        | `{\"address\":\"1ExampleBsvAddressXXXXXXXXXXXXXXXXX\",\"status\":\"ok\"}`                                         |\n| `wallet_sendToAddress`   | Sends BSV to a specified address (supports BSV or USD amounts)                                                                                                                                                                                        | `{\"status\":\"success\",\"txid\":\"a1b2c3d4e5f6...\",\"satoshis\":1000000}`                                        |\n| `wallet_purchaseListing` | Purchases NFTs or BSV-20/BSV-21 tokens from marketplace listings                                                                                                                                                                                      | `{\"status\":\"success\",\"txid\":\"a1b2c3d4e5f6...\",\"type\":\"nft\",\"origin\":\"abcdef123456...\"}`                   |\n| `wallet_createOrdinals`  | Creates and inscribes ordinals on the BSV blockchain                                                                                                                                                                                                  | `{\"txid\":\"a1b2c3d4e5f6...\",\"inscriptionAddress\":\"1ExampleAddress...\",\"contentType\":\"image/png\"}`          |\n\n### BSV Tools\n\nTools for interacting with the BSV blockchain and network:\n\n| Tool Name               | Description                                                                 | Example Output                                                                                     |\n| ----------------------- | --------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------- |\n| `bsv_getPrice`          | Gets the current BSV price from an exchange API                             | `Current BSV price: $38.75 USD`                                                                    |\n| `bsv_decodeTransaction` | Decodes a BSV transaction and returns detailed information                  | `{\"txid\":\"a1b2c3d4e5f6...\",\"version\":1,\"locktime\":0,\"size\":225,\"inputs\":[...],\"outputs\":[...]}`    |\n| `bsv_explore`           | Comprehensive blockchain explorer tool accessing WhatsOnChain API endpoints | `{\"chain_info\":{\"chain\":\"main\",\"blocks\":826458,\"headers\":826458,\"bestblockhash\":\"0000000000...\"}}` |\n\n### Ordinals Tools\n\nTools for working with ordinals (NFTs) on BSV:\n\n| Tool Name                       | Description                                                                          | Example Output                                                                                                |\n| ------------------------------- | ------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------- |\n| `ordinals_getInscription`       | Retrieves detailed information about a specific inscription                          | `{\"id\":\"a1b2c3d4e5f6...\",\"origin\":\"a1b2c3d4e5f6...\",\"contentType\":\"image/png\",\"content\":\"iVBORw0KGgoAAA...\"}` |\n| `ordinals_searchInscriptions`   | Searches for inscriptions based on various criteria                                  | `{\"results\":[{\"id\":\"a1b2c3...\",\"contentType\":\"image/png\",\"owner\":\"1Example...\"},...]}`                        |\n| `ordinals_marketListings`       | Retrieves market listings for NFTs, BSV-20, and BSV-21 tokens with unified interface | `{\"results\":[{\"txid\":\"a1b2c3...\",\"price\":9990000,\"tick\":\"PEPE\",\"listing\":true},...]}`                         |\n| `ordinals_marketSales`          | Gets information about BSV-20 and BSV-21 token market sales                          | `{\"results\":[{\"txid\":\"a1b2c3...\",\"price\":34710050,\"tick\":\"$BTC\",\"sale\":true},...]}`                           |\n| `ordinals_getTokenByIdOrTicker` | Retrieves details about a specific BSV20 token by ID                                 | `{\"tick\":\"PEPE\",\"max\":\"21000000\",\"lim\":\"1000\",\"dec\":\"2\"}`                                                     |\n\n### Utility Tools\n\nGeneral-purpose utility functions:\n\n| Tool Name           | Description| Example Output                                                 |\n| ------------------- || -------------------------------------------------------------- |\n| `utils_convertData` | Converts data between different encoding formats (utf8, hex, base64, binary).<br><br>**Parameters:**<br>- `data` (required): The string to convert<br>- `from` (required): Source encoding format (utf8, hex, base64, or binary)<br>- `to` (required): Target encoding format (utf8, hex, base64, or binary)<br><br>**Examples:**<br>- UTF-8 to hex: `{\"data\": \"hello world\", \"from\": \"utf8\", \"to\": \"hex\"}` → `68656c6c6f20776f726c64`<br>- UTF-8 to base64: `{\"data\": \"Hello World\", \"from\": \"utf8\", \"to\": \"base64\"}` → `SGVsbG8gV29ybGQ=`<br>- base64 to UTF-8: `{\"data\": \"SGVsbG8gV29ybGQ=\", \"from\": \"base64\", \"to\": \"utf8\"}` → `Hello World`<br>- hex to base64: `{\"data\": \"68656c6c6f20776f726c64\", \"from\": \"hex\", \"to\": \"base64\"}` → `aGVsbG8gd29ybGQ=`<br><br>**Notes:**<br>- All parameters are required<br>- The tool returns the converted data as a string<br>- For binary conversion, data is represented as an array of byte values | `\"SGVsbG8gV29ybGQ=\"` (UTF-8 \"Hello World\" converted to base64) |\n\n### MNEE Tools\n\nTools for working with MNEE tokens:\n\n| Tool Name         | Description                                                                                                                                                                           | Example Output                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `mnee_getBalance` | Retrieves the current MNEE token balance for the wallet                                                                                                                               | `{\"balance\": {\"amount\": 2900, \"decimalAmount\": 0.029}}`                                                                                                                                                                                                                                                                                                                                                                             |\n| `mnee_sendMnee`   | Send MNEE tokens to a specified address. Supports both MNEE and USD amounts                                                                                                           | `{\"success\": true, \"txid\": \"d1ce853934964e6c1fe9f44c918a824f175c6ab466b966f49ebc0682a8318895\", \"rawtx\": \"0100000002a0be40d8942015f1...\", \"mneeAmount\": 0.01, \"usdAmount\": \"$0.01\", \"recipient\": \"15mNxEkyKJXPD8amic6oLUjS45zBKQQoLu\"}`                                                                                                                                                                                              |\n| `mnee_parseTx`    | Parse an MNEE transaction to get detailed information about its operations and amounts. All amounts are in atomic units with 5 decimal precision (e.g. 1000 atomic units = 0.01 MNEE) | `{\"txid\": \"d1ce853934964e6c1fe9f44c918a824f175c6ab466b966f49ebc0682a8318895\", \"environment\": \"production\", \"type\": \"transfer\", \"inputs\": [{\"address\": \"18izL7Wtm2fx3ALoRY3MkY2VFSMjArP62D\", \"amount\": 2900}], \"outputs\": [{\"address\": \"15mNxEkyKJXPD8amic6oLUjS45zBKQQoLu\", \"amount\": 1000}, {\"address\": \"19Vq2TV8aVhFNLQkhDMdnEQ7zT96x6F3PK\", \"amount\": 100}, {\"address\": \"18izL7Wtm2fx3ALoRY3MkY2VFSMjArP62D\", \"amount\": 1800}]}` |\n\n## Using the Tools with MCP\n\nOnce connected, you can use natural language to interact with Bitcoin SV through your AI assistant. Here are some example prompts:\n\n### Wallet Operations\n\n- \"Get my Bitcoin SV address\"\n- \"Send 0.01 BSV to 1ExampleBsvAddressXXXXXXXXXXXXXXXXX\"\n- \"Send $5 USD worth of BSV to 1ExampleBsvAddressXXXXXXXXXXXXXXXXX\"\n- \"Send 0.01 MNEE to 1ExampleBsvAddressXXXXXXXXXXXXXXXXX\"\n- \"Check my MNEE balance\"\n- \"Parse this MNEE transaction: txid\"\n- \"Encrypt this message using my wallet's keys\"\n- \"Decrypt this data that was previously encrypted for me\"\n- \"Purchase this NFT listing: txid_vout\"\n- \"Purchase this BSV-20 token listing: txid_vout\"\n\n### Ordinals (NFTs)\n\n- \"Show me information about the NFT with outpoint 6a89047af2cfac96da17d51ae8eb62c5f1d982be2bc4ba0d0cd2084b7ffed325_0\"\n- \"Search for Pixel Zoide NFTs\"\n- \"Show me the current marketplace listings for BSV NFTs\"\n- \"Show me BSV-20 token listings for ticker PEPE\"\n- \"Get recent BSV-20 token sales\"\n\n### Blockchain Operations\n\n- \"What is the current BSV price?\"\n- \"Decode this BSV transaction: (transaction hex or ID)\"\n- \"Get the latest Bitcoin SV chain information\"\n- \"Show me block details for height 800000\"\n- \"Explore transaction history for address 1ExampleBsvAddressXXXX\"\n- \"Check unspent outputs (UTXOs) for my wallet address\"\n- \"Get details for transaction with hash a1b2c3d4e5f6...\"\n\n### Data Conversion\n\n- \"Convert 'Hello World' from UTF-8 to hex format\"\n\n## MCP Prompts and Resources\n\nThe BSV MCP server exposes specialized prompts and resources that provide detailed information and context about Bitcoin SV technologies. These can be accessed by AI models to enhance their understanding and capabilities.\n\n### Available Prompts\n\nThe server provides the following educational prompts that can be accessed directly via the MCP protocol:\n\n#### Ordinals Prompt\n- **Identifier**: `bitcoin_sv_ordinals`\n- **Description**: Comprehensive information about Bitcoin SV ordinals, including what they are, how they work, and how to use them.\n- **Usage**: Ask the assistant about \"Bitcoin SV ordinals\" or \"1Sat Ordinals\" to access this information.\n\n#### BSV SDK Prompts\nA collection of prompts providing detailed information about the Bitcoin SV SDK:\n\n- **Overview**\n  - **Identifier**: `bitcoin_sv_sdk_overview`\n  - **Description**: General overview of the Bitcoin SV SDK, including its purpose and main components.\n  - **Usage**: \"Tell me about the BSV SDK\" or \"What is the Bitcoin SV SDK?\"\n\n- **Wallet Operations**\n  - **Identifier**: `bitcoin_sv_sdk_wallet`\n  - **Description**: Information about wallet operations in the BSV SDK.\n  - **Usage**: \"How do wallet operations work in the BSV SDK?\"\n\n- **Transaction Building**\n  - **Identifier**: `bitcoin_sv_sdk_transaction`\n  - **Description**: Details about transaction creation and manipulation.\n  - **Usage**: \"Explain BSV SDK transaction building\" or \"How do I create transactions with BSV SDK?\"\n\n- **Authentication**\n  - **Identifier**: `bitcoin_sv_sdk_auth`\n  - **Description**: Authentication and identity protocols in BSV SDK.\n  - **Usage**: \"How does authentication work with BSV SDK?\"\n\n- **Cryptography**\n  - **Identifier**: `bitcoin_sv_sdk_cryptography`\n  - **Description**: Signing, encryption, and verification functionality.\n  - **Usage**: \"Explain BSV SDK cryptography features\"\n\n- **Scripting**\n  - **Identifier**: `bitcoin_sv_sdk_script`\n  - **Description**: Bitcoin scripting and contract capabilities.\n  - **Usage**: \"How do I work with Bitcoin scripts using the BSV SDK?\"\n\n- **Primitives**\n  - **Identifier**: `bitcoin_sv_sdk_primitives`\n  - **Description**: Core data types and structures in the BSV SDK.\n  - **Usage**: \"What primitives are available in the BSV SDK?\"\n\n### Available Resources\n\nThe server also provides access to Bitcoin Request for Comments (BRC) specifications and documentation:\n\n#### Changelog Resource\n- **Identifier**: `bsv-mcp-changelog`\n- **Description**: Version history and changelog for the BSV MCP server.\n- **Usage**: \"Show me the BSV MCP changelog\" or \"What's new in the latest version?\"\n\n#### BRC Resources\n- **BRCs Overview**\n  - **Identifier**: `brcs_readme`\n  - **Description**: Overview of all Bitcoin SV protocol specifications in the BRCs repository.\n  - **Usage**: \"Show me the Bitcoin SV BRCs overview\"\n\n- **BRCs Summary**\n  - **Identifier**: `brcs_summary`\n  - **Description**: Table of contents for all Bitcoin SV BRCs.\n  - **Usage**: \"Give me a summary of Bitcoin SV BRCs\"\n\n- **Specific BRC Specifications**\n  - **Identifier**: `brc_spec`\n  - **Description**: Access specific BRC specifications by category and number.\n  - **Usage**: \"Show me BRC 8 on Transaction Envelopes\" or \"What does BRC 1 specify?\"\n\n#### BRC Categories\nThe BRC specifications are organized into the following categories:\n- Wallet\n- Transactions\n- Scripts\n- Tokens\n- Overlays\n- Payments\n- Peer-to-Peer\n- Key Derivation\n- Outpoints\n- Opinions\n- State Machines\n- Apps\n\n### Using Prompts and Resources\n\nAI models can use these prompts and resources to provide more accurate and detailed responses about Bitcoin SV technologies. As a user, you can:\n\n1. **Ask about a specific topic**: \"Tell me about Bitcoin SV ordinals\" or \"Explain BSV SDK transaction building\"\n2. **Request specific BRC details**: \"What does BRC 8 specify?\" or \"Show me the BRC on Transaction Creation\"\n3. **Get general overviews**: \"What is the BSV SDK?\" or \"Show me a summary of all BRCs\"\n\nThese prompts and resources enhance the AI's knowledge base, enabling more technical and accurate responses even for complex Bitcoin SV topics.\n\n## How MCP Works\n\nWhen you interact with an MCP-enabled AI assistant:\n\n1. The AI analyzes your request and decides which tools to use\n2. With your approval, it calls the appropriate BSV MCP tool\n3. The server executes the requested operation on the Bitcoin SV blockchain\n4. The results are returned to the AI assistant\n5. The assistant presents the information in a natural, conversational way\n\n## Customization Options\n\nThe BSV MCP server can be customized using environment variables to enable or disable specific components:\n\n### Component Configuration\n\n| Environment Variable | Default | Description |\n| -------------------- | ------- | ----------- |\n| `DISABLE_PROMPTS` | `false` | Set to `true` to disable all educational prompts |\n| `DISABLE_RESOURCES` | `false` | Set to `true` to disable all resources (BRCs, changelog) |\n| `DISABLE_TOOLS` | `false` | Set to `true` to disable all tools |\n\n### Tool-Specific Configuration\n\n| Environment Variable | Default | Description |\n| -------------------- | ------- | ----------- |\n| `DISABLE_WALLET_TOOLS` | `false` | Set to `true` to disable Bitcoin wallet tools |\n| `DISABLE_MNEE_TOOLS` | `false` | Set to `true` to disable MNEE token tools |\n| `DISABLE_BSV_TOOLS` | `false` | Set to `true` to disable BSV blockchain tools |\n| `DISABLE_ORDINALS_TOOLS` | `false` | Set to `true` to disable Ordinals/NFT tools |\n| `DISABLE_UTILS_TOOLS` | `false` | Set to `true` to disable utility tools |\n| `IDENTITY_KEY_WIF`    | `not set` | Optional WIF for identity key; if set, ordinals inscriptions will be signed with sigma-protocol for authentication, curation, and web-of-trust. |\n| `DISABLE_BROADCASTING` | `false` | Set to `true` to disable transaction broadcasting; returns raw transaction hex instead - useful for testing and transaction review before broadcasting |\n\n### Examples\n\nRun with only educational resources and prompts, no tools:\n\n```bash\nDISABLE_TOOLS=true bunx bsv-mcp@latest\n```\n\nRun with only BSV tools, no wallet or other functionality:\n\n```bash\nDISABLE_PROMPTS=true DISABLE_RESOURCES=true DISABLE_WALLET_TOOLS=true DISABLE_MNEE_TOOLS=true DISABLE_ORDINALS_TOOLS=true DISABLE_UTILS_TOOLS=true bunx bsv-mcp@latest\n```\n\nUse all tools except wallet operations:\n\n```bash\nDISABLE_WALLET_TOOLS=true bunx bsv-mcp@latest\n```\n\nCreate transactions without broadcasting them (dry-run mode):\n\n```bash\nDISABLE_BROADCASTING=true bunx bsv-mcp@latest\n```\n\n## Troubleshooting\n\nIf you're having issues with the BSV MCP server:\n\n### Connection Issues\n\n1. Make sure Bun or Node.js is installed on your system\n2. Verify your WIF private key is correctly set in the environment\n3. Check that your client supports MCP and is properly configured\n4. Look for error messages in the client's console output\n\n### Keeping Bun Up to Date\n\nIt's important to keep Bun updated to the latest version to ensure compatibility:\n\n```bash\n# Update Bun to the latest version\nbun upgrade\n```\n\nTo verify your current Bun version:\n```bash\nbun --version\n```\n\n### Logging and Debugging\n\nFor Claude for Desktop, check the logs at:\n\n```bash\n# macOS/Linux\ntail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n\n# Windows\ntype %APPDATA%\\Claude\\Logs\\mcp*.log\n```\n\nFor Cursor, check the Cursor MCP logs in Settings → Extensions → Model Context Protocol.\n\n## Recent Updates\n\n- **Transaction Broadcast Control**: Added `DISABLE_BROADCASTING` environment variable to prevent transactions from being broadcast to the network\n- **Blockchain Explorer**: Added `bsv_explore` tool for WhatsOnChain API access with mainnet/testnet support\n- **Unified Tools**: Merged `wallet_encrypt`/`wallet_decrypt` into single `wallet_encryption` tool\n- **Enhanced Marketplace**: Support for NFTs, BSV-20/21 tokens in listings, sales and purchases\n- **Performance**: Added price caching and optimized API endpoint structure\n- **Improved Validation**: Better error handling for private keys and parameters\n\n## Bitcoin SV Blockchain Explorer\n\nThe `bsv_explore` tool provides comprehensive access to the Bitcoin SV blockchain through the WhatsOnChain API. This powerful explorer tool allows you to query various aspects of the blockchain, including chain data, blocks, transactions, and address information.\n\n### Available Endpoints\n\nThe tool supports the following endpoint categories and specific endpoints:\n\n#### Chain Data\n\n| Endpoint             | Description                                     | Required Parameters | Example Response                                                                      |\n| -------------------- | ----------------------------------------------- | ------------------- | ------------------------------------------------------------------------------------- |\n| `chain_info`         | Network statistics, difficulty, and chain work  | None                | `{\"chain\":\"main\",\"blocks\":826458,\"headers\":826458,\"bestblockhash\":\"0000000000...\"}` |\n| `chain_tips`         | Current chain tips including heights and states | None                | `[{\"height\":826458,\"hash\":\"000000000000...\",\"branchlen\":0,\"status\":\"active\"}]`        |\n| `circulating_supply` | Current BSV circulating supply                  | None                | `{\"bsv\":21000000}`                                                                    |\n| `peer_info`          | Connected peer statistics                       | None                | `[{\"addr\":\"1.2.3.4:8333\",\"services\":\"000000000000...\",\"lastsend\":1621234567}]`        |\n\n#### Block Data\n\n| Endpoint              | Description                                         | Required Parameters                 | Example Response                                                           |\n| --------------------- | --------------------------------------------------- | ----------------------------------- | -------------------------------------------------------------------------- |\n| `block_by_hash`       | Complete block data via hash                        | `blockHash`                         | `{\"hash\":\"000000000000...\",\"confirmations\":1000,\"size\":1000000,...}`       |\n| `block_by_height`     | Complete block data via height                      | `blockHeight`                       | `{\"hash\":\"000000000000...\",\"confirmations\":1000,\"size\":1000000,...}`       |\n| `tag_count_by_height` | Stats on tag count for a specific block             | `blockHeight`                       | `{\"tags\":{\"amp\":3,\"bitkey\":5,\"metanet\":12,\"planaria\":7,\"b\":120}}`          |\n| `block_headers`       | Retrieves the last 10 block headers                 | None                                | `[{\"hash\":\"000000000000...\",\"height\":826458,\"version\":536870912,...},...]` |\n| `block_pages`         | Retrieves pages of transaction IDs for large blocks | `blockHash`, optional: `pageNumber` | `[\"tx1hash\",\"tx2hash\",\"tx3hash\",...]`                                      |\n\n#### Stats Data\n\n| Endpoint                | Description                               | Required Parameters          | Example Response                                                                       |\n| ----------------------- | ----------------------------------------- | ---------------------------- | -------------------------------------------------------------------------------------- |\n| `block_stats_by_height` | Block statistics for a specific height    | `blockHeight`                | `{\"size\":123456,\"txCount\":512,\"outputTotal\":54.12345678,\"outputTotalUsd\":2345.67,...}` |\n| `block_miner_stats`     | Block mining statistics for a time period | optional: `days` (default 7) | `{\"blocks\":{\"miner1\":412,\"miner2\":208,...},\"total\":1008}`                              |\n| `miner_summary_stats`   | Summary of mining statistics              | optional: `days` (default 7) | `{\"totalBlocks\":1008,\"totalFees\":1.23456789,\"totalFeesUsd\":53.67,...}`                 |\n\n#### Transaction Data\n\n| Endpoint          | Description                                   | Required Parameters | Example Response                                                                           |\n| ----------------- | --------------------------------------------- | ------------------- | ------------------------------------------------------------------------------------------ |\n| `tx_by_hash`      | Detailed transaction data                     | `txHash`            | `{\"txid\":\"a1b2c3d4e5f6...\",\"version\":1,\"locktime\":0,\"size\":225,...}`                       |\n| `tx_raw`          | Raw transaction hex data                      | `txHash`            | `\"01000000012345abcdef...\"`                                                                |\n| `tx_receipt`      | Transaction receipt                           | `txHash`            | `{\"blockHash\":\"000000000000...\",\"blockHeight\":800000,\"confirmations\":26458}`               |\n| `bulk_tx_details` | Retrieve multiple transactions in one request | `txids` (array)     | `[{\"txid\":\"a1b2c3d4e5f6...\",\"version\":1,...}, {\"txid\":\"b2c3d4e5f6a7...\",\"version\":1,...}]` |\n\n#### Address Data\n\n| Endpoint          | Description                     | Required Parameters          | Example Response                                                |\n| ----------------- | ------------------------------- | ---------------------------- | --------------------------------------------------------------- |\n| `address_history` | Transaction history for address | `address`, optional: `limit` | `[{\"tx_hash\":\"a1b2c3d4e5f6...\",\"height\":800000},...]`           |\n| `address_utxos`   | Unspent outputs for address     | `address`                    | `[{\"tx_hash\":\"a1b2c3d4e5f6...\",\"tx_pos\":0,\"value\":100000},...]` |\n\n#### Network\n\n| Endpoint | Description      | Required Parameters | Example Response      |\n| -------- | ---------------- | ------------------- | --------------------- |\n| `health` | API health check | None                | `{\"status\":\"synced\"}` |\n\n### Usage Examples\n\nThe `bsv_explore` tool can be used with natural language prompts like:\n\n```\n\"Get the current Bitcoin SV blockchain information\"\n\"Show me block #800000 details\"\n\"Get tag count statistics for block #800000\"\n\"Fetch transaction history for address 1ExampleBsvAddressXXXXXXXX\"\n\"Get unspent outputs for my wallet address\"\n\"Check transaction details for txid a1b2c3d4e5f6...\"\n\"What is the current BSV circulating supply?\"\n\"Show me the latest block headers\"\n\"Get transaction IDs for page 2 of a large block\"\n\"Show me block statistics for height 800000\"\n\"What are the mining statistics for the last 14 days?\"\n\"Get a summary of mining activity over the past 30 days\"\n\"Retrieve details for multiple transactions in a single query\"\n```\n\nUnder the hood, the tool accepts parameters to specify which data to retrieve:\n\n- `endpoint`: The specific WhatsOnChain endpoint to query (e.g., `chain_info`, `tx_by_hash`)\n- `network`: The BSV network to use (`main` or `test`)\n- Additional parameters as required by the specific endpoint:\n  - `blockHash`: For block_by_hash and block_pages endpoints\n  - `blockHeight`: For block_by_height, tag_count_by_height, and block_stats_by_height endpoints\n  - `pageNumber`: For block_pages endpoint (pagination)\n  - `days`: For block_miner_stats and miner_summary_stats endpoints (defaults to 7)\n  - `txHash`: For transaction-related endpoints (tx_by_hash, tx_raw, tx_receipt)\n  - `txids`: For bulk_tx_details endpoint (array of transaction IDs)\n  - `address`: For address-related endpoints\n  - `limit`: Optional pagination limit for address_history\n\n### Network Options\n\nThe tool supports both mainnet and testnet:\n\n- `main`: Bitcoin SV mainnet (default)\n- `test`: Bitcoin SV testnet\n\n# Development\n\n## Project Setup\n\nIf you want to contribute to the project or run it locally:\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/b-open-io/bsv-mcp.git\n   cd bsv-mcp\n   ```\n\n2. Install dependencies:\n   ```bash\n   bun install\n   # or with npm\n   npm install\n   ```\n\n## Running the Server\n\n```bash\nbun run index.ts\n# or with npm\nnpm run start\n```\n\n### Running Tests\n\n```bash\nbun test\n# or with npm\nnpm test\n```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crypto",
        "blockchain",
        "bsv",
        "sv blockchain",
        "bitcoin sv",
        "io bsv"
      ],
      "category": "blockchain-and-crypto"
    },
    "bmorphism--penumbra-mcp": {
      "owner": "bmorphism",
      "name": "penumbra-mcp",
      "url": "https://github.com/bmorphism/penumbra-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/bmorphism.webp",
      "description": "Interact with the Penumbra blockchain to access privacy-preserving features such as transaction queries, validator set information, DEX state, and governance proposals.",
      "stars": 5,
      "forks": 6,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-25T16:17:51Z",
      "readme_content": "# Penumbra MCP Server\n\nAn MCP server providing tools for interacting with the Penumbra blockchain. This server enables privacy-preserving interactions with Penumbra's core features including transaction queries, validator set information, DEX state, and governance proposals.\n\n## Features\n\n### Current Tools\n\n- `get_validator_set`: Get the current validator set information\n- `get_chain_status`: Get current chain status including block height and chain ID\n- `get_transaction`: Get details of a specific transaction\n- `get_dex_state`: Get current DEX state including latest batch auction results\n- `get_governance_proposals`: Get active governance proposals\n\n### Planned Features\n\n- Transaction submission\n- Private staking operations\n- DEX trading (sealed-bid batch auctions)\n- Private governance voting\n- Liquidity position management\n\n## Installation\n\nYou can install the package via npm:\n\n```bash\nnpm install @timeheater/penumbra-mcp\n```\n\nOr using yarn:\n\n```bash\nyarn add @timeheater/penumbra-mcp\n```\n\n## Setup\n\n### Local Development from Source\n\n1. Install dependencies:\n```bash\nnpm install\n```\n\n2. Build the server:\n```bash\nnpm run build\n```\n\n3. Run in development mode:\n```bash\nnpm run watch\n```\n\n### Claude Desktop Integration\n\nTo integrate with Claude desktop, add the following configuration to your Claude desktop settings file (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"penumbra-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\"/Users/barton/infinity-topos/penumbra-mcp/build/index.js\"],\n      \"env\": {\n        \"PENUMBRA_NODE_URL\": \"https://rpc.penumbra.zone\",\n        \"PENUMBRA_NETWORK\": \"mainnet\",\n        \"PENUMBRA_CHAIN_ID\": \"penumbra-1\",\n        \"PENUMBRA_REQUEST_TIMEOUT\": \"30000\",\n        \"PENUMBRA_REQUEST_RETRIES\": \"5\",\n        \"PENUMBRA_BLOCK_TIME\": \"6000\",\n        \"PENUMBRA_EPOCH_DURATION\": \"100\",\n        \"PENUMBRA_DEX_BATCH_INTERVAL\": \"60000\",\n        \"PENUMBRA_DEX_MIN_LIQUIDITY\": \"1000\",\n        \"PENUMBRA_DEX_MAX_PRICE_IMPACT\": \"0.05\",\n        \"PENUMBRA_GOVERNANCE_VOTING_PERIOD\": \"1209600000\",\n        \"PENUMBRA_GOVERNANCE_MIN_DEPOSIT\": \"100000\"\n      }\n    }\n  }\n}\n```\n\nReplace `/path/to/penumbra-mcp` with the actual path where you've installed the server.\n\n### Using the MCP Server\n\nOnce configured, you can interact with Penumbra through Claude using the following tools:\n\n1. Query validator set:\n```\nTell Claude: \"Show me the current Penumbra validator set\"\n```\n\n2. Check chain status:\n```\nTell Claude: \"What's the current status of the Penumbra chain?\"\n```\n\n3. Get transaction details:\n```\nTell Claude: \"Look up Penumbra transaction [HASH]\"\n```\n\n4. View DEX state:\n```\nTell Claude: \"Show me the current Penumbra DEX state\"\n```\n\n5. List governance proposals:\n```\nTell Claude: \"List active Penumbra governance proposals\"\n```\n\n## Development\n\n- `npm run watch`: Watch mode for development\n- `npm run inspector`: Run MCP inspector for testing\n- `npm test`: Run test suite\n\n## Environment Variables\n\n### Node Configuration\n- `PENUMBRA_NODE_URL`: URL of the Penumbra node (default: https://rpc.penumbra.zone)\n- `PENUMBRA_REQUEST_TIMEOUT`: HTTP request timeout in milliseconds (default: 30000)\n- `PENUMBRA_REQUEST_RETRIES`: Number of request retries (default: 5)\n\n### Chain Configuration\n- `PENUMBRA_NETWORK`: Network to connect to (default: mainnet)\n- `PENUMBRA_CHAIN_ID`: Chain ID (default: penumbra-1)\n- `PENUMBRA_BLOCK_TIME`: Block time in milliseconds (default: 6000)\n- `PENUMBRA_EPOCH_DURATION`: Number of blocks per epoch (default: 100)\n\n### DEX Configuration\n- `PENUMBRA_DEX_BATCH_INTERVAL`: Batch auction interval in milliseconds (default: 60000)\n- `PENUMBRA_DEX_MIN_LIQUIDITY`: Minimum liquidity amount (default: 1000)\n- `PENUMBRA_DEX_MAX_PRICE_IMPACT`: Maximum price impact as decimal (default: 0.05)\n\n### Governance Configuration\n- `PENUMBRA_GOVERNANCE_VOTING_PERIOD`: Voting period duration in milliseconds (default: 1209600000 - 14 days)\n- `PENUMBRA_GOVERNANCE_MIN_DEPOSIT`: Minimum proposal deposit amount (default: 100000)\n\n## Architecture\n\nThe server is built using TypeScript and implements the Model Context Protocol (MCP) for standardized tool interfaces. It currently provides mock implementations for core functionality, with plans to integrate directly with Penumbra's client libraries and node API endpoints.\n\n### Privacy Considerations\n\nAll interactions respect Penumbra's privacy-preserving design:\n- Shielded transactions\n- Private staking operations\n- Sealed-bid batch auctions\n- Anonymous governance voting\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nISC\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crypto",
        "blockchain",
        "penumbra",
        "penumbra blockchain",
        "blockchain crypto",
        "bmorphism penumbra"
      ],
      "category": "blockchain-and-crypto"
    },
    "bnb-chain--bnbchain-mcp": {
      "owner": "bnb-chain",
      "name": "bnbchain-mcp",
      "url": "https://github.com/bnb-chain/bnbchain-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/bnb-chain.webp",
      "description": "Facilitates interaction with BNB Chain and EVM-compatible networks via natural language processing. Supports blockchain development, smart contract interactions, and network management tasks.",
      "stars": 43,
      "forks": 15,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T21:40:22Z",
      "readme_content": "# BNBChain MCP (Model Context Protocol)\n\nA powerful toolkit for interacting with BNB Chain and other EVM-compatible networks through natural language processing and AI assistance.\n\n<a href=\"https://glama.ai/mcp/servers/@bnb-chain/bnbchain-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@bnb-chain/bnbchain-mcp/badge\" alt=\"bnbchain-mcp MCP server\" />\n</a>\n\n## Description\n\nBNBChain MCP is a Model Context Protocol implementation that enables seamless interaction with blockchain networks through AI-powered interfaces. It provides a comprehensive set of tools and resources for blockchain development, smart contract interaction, and network management.\n\n## Core Modules\n\nThe project is organized into several core modules:\n\n- **Blocks**: Query and manage blockchain blocks\n- **Contracts**: Interact with smart contracts\n- **Network**: Network information and management\n- **NFT**: NFT (ERC721/ERC1155) operations\n- **Tokens**: Token (ERC20) operations\n- **Transactions**: Transaction management\n- **Wallet**: Wallet operations and management\n- **Common**: Shared utilities and types\n- **Greenfield**: Support file management operations on Greenfield network including, uploading, downloading, and managing files and buckets\n- Additional features coming soon (Greenfield, Swap, Bridge, etc.)\n\n## Integration with Cursor\n\nTo connect to the MCP server from Cursor:\n\n1. Open Cursor and go to Settings (gear icon in the top right)\n2. Click on \"MCP\" in the left sidebar\n3. Click \"Add new global MCP server\"\n4. Enter the following details:\n\nDefault mode\n\n```json\n{\n  \"mcpServers\": {\n    \"bnbchain-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@bnb-chain/mcp@latest\"],\n      \"env\": {\n        \"PRIVATE_KEY\": \"your_private_key_here. (optional)\"\n      }\n    }\n  }\n}\n```\n\nSSE mode\n\n```json\n{\n  \"mcpServers\": {\n    \"bnbchain-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@bnb-chain/mcp@latest\", \"--sse\"],\n      \"env\": {\n        \"PRIVATE_KEY\": \"your_private_key_here. (optional)\"\n      }\n    }\n  }\n}\n```\n\n## Integration with Claude Desktop\n\nTo connect to the MCP server from Claude Desktop:\n\n1. Open Claude Desktop and go to Settings\n2. Click on \"Developer\" in the left sidebar\n3. Click the \"Edit Config\" Button\n4. Add the following configuration to the `claude_desktop_config.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"bnbchain-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@bnb-chain/mcp@latest\"],\n      \"env\": {\n        \"PRIVATE_KEY\": \"your_private_key_here\"\n      }\n    }\n  }\n}\n```\n\n5. Save the file and restart Claude Desktop\n\nOnce connected, you can use all the MCP prompts and tools directly in your Claude Desktop conversations. For example:\n\n- \"Analyze this address: 0x123...\"\n- \"Explain the EVM concept of gas\"\n- \"Check the latest block on BSC\"\n\n## Integration with Other Clients\n\nIf you want to integrate BNBChain MCP into your own client, please check out the [examples](./examples) directory for more detailed information and reference implementations.\n\nThe examples demonstrate:\n\n- How to set up the MCP client\n- Authentication and configuration\n- Making API calls to interact with blockchain networks\n- Handling responses and errors\n- Best practices for integration\n\n## Local Development\n\n### Prerequisites\n\n- [bun](http://bun.sh/) v1.2.10 or higher\n- [Node.js](https://nodejs.org/en/download) v17 or higher\n\n### Quick Start\n\n1. Clone the repository:\n\n```bash\ngit clone https://github.com/bnb-chain/bnbchain-mcp.git\ncd bnbchain-mcp\n```\n\n2. Set up environment variables:\n\n```bash\ncp .env.example .env\n```\n\nEdit `.env` file with your configuration:\n\n- `PRIVATE_KEY`: Your wallet private key (required for transaction operations)\n- `LOG_LEVEL`: Set logging level (DEBUG, INFO, WARN, ERROR)\n- `PORT`: Server port number (default: 3001)\n\n3. Install dependencies and start development server:\n\n```bash\n# Install project dependencies\nbun install\n\n# Start the development server\nbun dev:sse\n```\n\n### Testing with MCP Clients\n\nConfigure the local server in your MCP clients using this template:\n\n```json\n{\n  \"mcpServers\": {\n    \"bnbchain-mcp\": {\n      \"url\": \"http://localhost:3001/sse\",\n      \"env\": {\n        \"PRIVATE_KEY\": \"your_private_key_here\"\n      }\n    }\n  }\n}\n```\n\n### Testing with Web UI\n\nWe use [`@modelcontextprotocol/inspector`](https://github.com/modelcontextprotocol/inspector) for testing. Launch the test UI:\n\n```bash\nbun run test\n```\n\n### Available Scripts\n\n- `bun dev:sse`: Start development server with hot reload\n- `bun build`: Build the project\n- `bun test`: Run test suite\n\n## Available Prompts and Tools\n\n### Prompts\n\n| Name                   | Description                                                         |\n| ---------------------- | ------------------------------------------------------------------- |\n| analyze_block          | Analyze a block and provide detailed information about its contents |\n| analyze_transaction    | Analyze a specific transaction                                      |\n| analyze_address        | Analyze an EVM address                                              |\n| interact_with_contract | Get guidance on interacting with a smart contract                   |\n| explain_evm_concept    | Get an explanation of an EVM concept                                |\n| compare_networks       | Compare different EVM-compatible networks                           |\n| analyze_token          | Analyze an ERC20 or NFT token                                       |\n\n### Tools\n\n| Name                         | Description                                                                  |\n| ---------------------------- | ---------------------------------------------------------------------------- |\n| get_block_by_hash            | Get a block by hash                                                          |\n| get_block_by_number          | Get a block by number                                                        |\n| get_latest_block             | Get the latest block                                                         |\n| get_transaction              | Get detailed information about a specific transaction by its hash            |\n| get_transaction_receipt      | Get a transaction receipt by its hash                                        |\n| estimate_gas                 | Estimate the gas cost for a transaction                                      |\n| transfer_native_token        | Transfer native tokens (BNB, ETH, MATIC, etc.) to an address                 |\n| approve_token_spending       | Approve another address to spend your ERC20 tokens                           |\n| transfer_nft                 | Transfer an NFT (ERC721 token) from one address to another                   |\n| transfer_erc1155             | Transfer ERC1155 tokens to another address                                   |\n| transfer_erc20               | Transfer ERC20 tokens to an address                                          |\n| get_address_from_private_key | Get the EVM address derived from a private key                               |\n| get_chain_info               | Get chain information for a specific network                                 |\n| get_supported_networks       | Get list of supported networks                                               |\n| resolve_ens                  | Resolve an ENS name to an EVM address                                        |\n| is_contract                  | Check if an address is a smart contract or an externally owned account (EOA) |\n| read_contract                | Read data from a smart contract by calling a view/pure function              |\n| write_contract               | Write data to a smart contract by calling a state-changing function          |\n| get_erc20_token_info         | Get ERC20 token information                                                  |\n| get_native_balance           | Get native token balance for an address                                      |\n| get_erc20_balance            | Get ERC20 token balance for an address                                       |\n| get_nft_info                 | Get detailed information about a specific NFT                                |\n| check_nft_ownership          | Check if an address owns a specific NFT                                      |\n| get_erc1155_token_metadata   | Get the metadata for an ERC1155 token                                        |\n| get_nft_balance              | Get the total number of NFTs owned by an address from a specific collection  |\n| get_erc1155_balance          | Get the balance of a specific ERC1155 token ID owned by an address           |\n\n### Greenfield tools\n\n| Name                          | Description                                         |\n| ----------------------------- | --------------------------------------------------- |\n| gnfd_get_bucket_info          | Get detailed information about a specific bucket    |\n| gnfd_list_buckets             | List all buckets owned by an address                |\n| gnfd_create_bucket            | Create a new bucket                                 |\n| gnfd_delete_bucket            | Delete a bucket                                     |\n| gnfd_get_object_info          | Get detailed information about a specific object    |\n| gnfd_list_objects             | List all objects in a bucket                        |\n| gnfd_upload_object            | Upload an object to a bucket                        |\n| gnfd_download_object          | Download an object from a bucket                    |\n| gnfd_delete_object            | Delete an object from a bucket                      |\n| gnfd_create_folder            | Create a folder in a bucket                         |\n| gnfd_get_account_balance      | Get the balance for an account                      |\n| gnfd_deposit_to_payment       | Deposit funds into a payment account                |\n| gnfd_withdraw_from_payment    | Withdraw funds from a payment account               |\n| gnfd_disable_refund           | Disable refund for a payment account (IRREVERSIBLE) |\n| gnfd_get_payment_accounts     | List all payment accounts owned by an address       |\n| gnfd_get_payment_account_info | Get detailed information about a payment account    |\n| gnfd_create_payment           | Create a new payment account                        |\n| gnfd_get_payment_balance      | Get payment account balance                         |\n\n## Supported Networks\n\nSupports BSC, opBNB, Greenfield, Ethereum, and other major EVM-compatible networks. For more details, see [`src/evm/chains.ts`](src/evm/chains.ts).\n\n## Contributing\n\nWe welcome contributions to BNBChain MCP! Here's how you can help:\n\n1. Fork the repository\n2. Create a feature branch\n3. Commit your changes\n4. Push to your branch\n5. Create a Pull Request\n\nPlease ensure your code follows our coding standards and includes appropriate tests.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## References and Acknowledgments\n\nThis project is built upon and inspired by the following open-source projects:\n\n- [TermiX-official/bsc-mcp](https://github.com/TermiX-official/bsc-mcp) - Original BSC MCP implementation\n- [mcpdotdirect/evm-mcp-server](https://github.com/mcpdotdirect/evm-mcp-server) - EVM-compatible MCP server implementation\n\nWe extend our gratitude to the original authors for their contributions to the blockchain ecosystem.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "bnb",
        "blockchain",
        "bnbchain",
        "crypto bnb",
        "bnb chain",
        "chain bnbchain"
      ],
      "category": "blockchain-and-crypto"
    },
    "boray--mcp-mina-archive-node": {
      "owner": "boray",
      "name": "mcp-mina-archive-node",
      "url": "https://github.com/boray/mcp-mina-archive-node",
      "imageUrl": "/freedevtools/mcp/pfp/boray.webp",
      "description": "Access Mina blockchain data through a standardized interface, enabling queries for events, actions, and network state information. This server facilitates seamless integration of AI applications with the Mina blockchain.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-08T00:35:40Z",
      "readme_content": "# MCP Server for Mina Archive Node API\n\nThis project implements a Model Context Protocol (MCP) server that provides access to the Mina blockchain data through a standardized interface. The server allows clients to query events and actions from the Mina blockchain using the MCP protocol.\n\n## Overview\n\nThe MCP server acts as a bridge between AI applications and the Mina blockchain data. It exposes tools that allow clients to:\n\n- Query events with optional filters\n- Query actions with optional filters\n- Get network state information\n\n## Installation\n\n### Intalling via Smithery\nTo install the MCP to Claude via Smithery:\n\n```bash\nnpx -y @smithery/cli install mcp-mina-archive-node --client claude\n```\n\n### Installing Manually\nTo manually install to Claude:\n\n```json\n{\n    \"mcpServers\": {\n        \"mcp-graphql\": {\n            \"command\": \"npx\",\n            \"args\": [\"mcp-mina-archive-node\"]\n        }\n    }\n}\n```\n\n## Usage\n\n### Tools\n\n- `query-events`: Query events with optional filters\n- `query-actions`: Query actions with optional filters\n- `get-network-state`: Get the current state of the Mina network\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "mina",
        "node",
        "mina blockchain",
        "crypto boray",
        "blockchain data"
      ],
      "category": "blockchain-and-crypto"
    },
    "caiovicentino--mcpGOTAS": {
      "owner": "caiovicentino",
      "name": "mcpGOTAS",
      "url": "https://github.com/caiovicentino/mcpGOTAS",
      "imageUrl": "/freedevtools/mcp/pfp/caiovicentino.webp",
      "description": "Facilitate the generation and verification of USDT cryptocurrency payments through the Gotas Commerce API. Provide tools for creating payment links, checking transaction statuses, and accessing detailed payment information with minimal technical requirements.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-05-11T20:16:07Z",
      "readme_content": "# Gotas Commerce API & MCP Integration\n\nUma solução robusta para integração de pagamentos em criptomoeda usando o protocolo MCP (Model Context Protocol), permitindo que assistentes de IA como Claude possam criar e verificar transações USDT através da API Gotas Commerce.\n\n## 🚀 Visão Geral\n\nEste projeto fornece uma ponte entre assistentes de IA e serviços de pagamento em criptomoeda. Com o servidor MCP implementado, assistentes podem gerar links de pagamento, verificar status de transações e obter informações detalhadas sobre pagamentos USDT sem necessidade de conhecimento técnico especializado em blockchain.\n\n## ✨ Recursos\n\n### Ferramentas MCP\n\n#### `create-payment`\nCria uma nova transação de pagamento em USDT e retorna todos os detalhes necessários, incluindo URL para pagamento e endereço da carteira.\n\n**Parâmetros:**\n- `amount`: Valor do pagamento (ex: 100.50)\n- `currency`: Código da moeda (atualmente apenas \"USDT\")\n- `return_url`: URL para redirecionamento do cliente após o pagamento\n- `description`: Descrição opcional do pagamento\n\n**Retorno:**\n- Objeto JSON completo com todos os detalhes do pagamento:\n  - ID único do pagamento\n  - URL para pagamento\n  - Endereço da carteira\n  - Status (pending, completed, failed, expired)\n  - Datas de criação e expiração\n  - Outros metadados relevantes\n\n#### `check-payment-status`\nVerifica o status atual de um pagamento existente através de seu identificador único.\n\n**Parâmetros:**\n- `payment_id`: ID único do pagamento a ser verificado\n\n**Retorno:**\n- Objeto JSON completo com o estado atual do pagamento\n- Informações de timestamp para criação, expiração e conclusão (quando aplicável)\n- Hash da transação blockchain (quando o pagamento for confirmado)\n\n### Recursos MCP\n\n#### `payment-status://{payment_id}`\nFornece uma versão formatada e simplificada do status do pagamento como um recurso MCP.\n\n**Retorno:**\n- Texto formatado com as informações mais relevantes do pagamento\n- Identificador, status, valor, timestamps e descrição\n\n### Prompts MCP\n\n#### `create-payment-prompt`\nUm prompt guiado para auxiliar o usuário a fornecer as informações necessárias para criar um novo pagamento.\n\n## 🔧 Arquitetura\n\nO servidor MCP atua como uma camada de abstração sobre a API Gotas Commerce, traduzindo as capacidades da API em ferramentas, recursos e prompts facilmente utilizáveis por assistentes de IA como o Claude.\n\n```\n┌────────────────┐    ┌───────────────┐    ┌──────────────────┐\n│                │    │               │    │                  │\n│  Assistente IA ├────┤  Servidor MCP ├────┤  API Gotas       │\n│  (Claude)      │    │  (FastAPI)    │    │  Commerce        │\n│                │    │               │    │                  │\n└────────────────┘    └───────────────┘    └──────────────────┘\n```\n\n## 📋 Pré-requisitos\n\n- Python 3.8 ou superior\n- Chave de API da Gotas Commerce (obtenha em: [commerce.gotas.com](https://commerce.gotas.com))\n- Acesso a um assistente compatível com MCP (como Claude)\n\n## 🔌 Instalação\n\n1. Clone este repositório:\n   ```bash\n   git clone https://github.com/caiovicentino/mcpGOTAS.git\n   cd mcpGOTAS\n   ```\n\n2. Instale as dependências:\n   ```bash\n   pip install -r requirements.txt\n   ```\n   \n   Ou use o script de configuração automatizado:\n   ```bash\n   ./setup.bat\n   ```\n\n3. Configure as variáveis de ambiente:\n   - Crie um arquivo `.env` com os seguintes valores:\n     ```\n     GOTAS_API_KEY=sua_chave_api_aqui\n     GOTAS_BASE_URL=https://commerce.gotas.com\n     ```\n\n## 🏃‍♂️ Execução\n\n### Servidor MCP\n\nExecute o servidor para disponibilizar as ferramentas via MCP:\n\n```bash\nuvicorn src.gotas_mcp_server:app --host 0.0.0.0 --port 8000\n```\n\n### Integração com Claude Desktop\n\nPara usar diretamente com o Claude Desktop:\n\n```bash\npython install_claude.py\n```\n\nAlternativamente, instale manualmente:\n\n```bash\nmcp install src.gotas_mcp_server.py\n```\n\n### Uso Direto da API (Scripts de Teste)\n\nPara testes diretos sem um assistente:\n\n- **Criar pagamento**: `python test_client.py`\n- **Verificar status**: `python check_payment.py`\n\n## 📊 Fluxo de Pagamento\n\n1. **Inicialização do Pagamento**:\n   - O assistente obtém do usuário o valor e outros detalhes do pagamento\n   - O assistente chama a ferramenta `create-payment` com os parâmetros necessários\n   - Um novo pagamento é criado na Gotas Commerce\n   - O link de pagamento é retornado ao usuário\n\n2. **Processo de Pagamento**:\n   - O usuário acessa o link de pagamento fornecido\n   - O usuário transfere USDT para o endereço de carteira exibido\n   - A Gotas Commerce monitora a blockchain para confirmar a transação\n\n3. **Verificação de Status**:\n   - O assistente pode verificar o status do pagamento chamando `check-payment-status`\n   - O status pode ser: pending (pendente), completed (concluído), expired (expirado) ou failed (falhou)\n   - Quando o pagamento é confirmado, o hash da transação blockchain é disponibilizado\n\n## 🔍 Especificações Técnicas\n\n### Detalhes da API\n\n**Endpoints da API Gotas Commerce**:\n\n1. **Criar Pagamento**\n   - `POST /api/v1/payments`\n   - Corpo da requisição:\n     ```json\n     {\n       \"amount\": \"100.00\",\n       \"currency\": \"USDT\",\n       \"return_url\": \"https://exemplo.com/retorno\",\n       \"description\": \"Descrição do pagamento\"\n     }\n     ```\n\n2. **Verificar Status do Pagamento**\n   - `GET /api/v1/payments/{payment_id}`\n\n### Comunicação MCP\n\n- **Transporte**: SSE (Server-Sent Events)\n- **Formato**: JSON para comunicação entre assistente e servidor MCP\n- **Autenticação**: Chave de API armazenada como variável de ambiente\n\n## 📂 Estrutura do Projeto\n\n```\n├── src/\n│   └── gotas_mcp_server.py  # Implementação principal do servidor MCP\n├── .env                     # Variáveis de ambiente (API key, etc.)\n├── .smithery.json           # Configuração para Smithery CLI\n├── check_payment.py         # Utilitário para verificar status de pagamentos\n├── docsdaapigotas.md        # Documentação detalhada da API\n├── install_claude.py        # Script para instalação no Claude Desktop\n├── mcp.md                   # Documentação do servidor MCP\n├── MCPPROTOCOLpython.MD     # Documentação do protocolo MCP em Python\n├── requirements.txt         # Dependências do projeto\n├── setup.bat                # Script de configuração para Windows\n├── smithery.json            # Schema para integração com Smithery\n└── test_client.py           # Cliente de teste para criação de pagamentos\n```\n\n## 🔒 Segurança\n\n- A chave de API é armazenada como variável de ambiente, não no código-fonte\n- Comunicação com a API da Gotas Commerce é feita via HTTPS\n- O servidor MCP valida todos os parâmetros antes de enviar para a API\n- Tratamento de erros adequado para evitar exposição de informações sensíveis\n\n## 🧩 Extensibilidade\n\nO projeto foi projetado para ser facilmente extensível:\n\n1. **Novas Funcionalidades**: Adicione novas ferramentas MCP implementando funções decoradas com `@mcp.tool()` no servidor\n2. **Integração com Outros Serviços**: A arquitetura permite integrar facilmente outros serviços além da Gotas Commerce\n3. **Suporte a Novas Moedas**: A estrutura está preparada para suportar outras criptomoedas além de USDT no futuro\n\n## 📚 Exemplos de Uso\n\n### Criando um Pagamento (via Claude)\n\n```\nUsuário: Preciso gerar um link de pagamento de 50 USDT.\n\nClaude: Vou gerar um link de pagamento para você. Para qual URL devo configurar o redirecionamento após o pagamento?\n\nUsuário: https://meusite.com.br/obrigado\n\nClaude: [Utilizando ferramenta create-payment]\nCriando pagamento de 50 USDT com redirecionamento para https://meusite.com.br/obrigado...\n\nPronto! Criei um link de pagamento para 50 USDT.\n\nLink de pagamento: [URL gerado pela API]\nEste link expirará em 30 minutos. O cliente deve transferir exatamente 50 USDT para o endereço da carteira mostrado na página de pagamento.\n```\n\n### Verificando Status (via Claude)\n\n```\nUsuário: Verifique o status do meu pagamento com ID xyz123.\n\nClaude: [Utilizando ferramenta check-payment-status]\nVerificando o status do pagamento ID xyz123...\n\nO status atual do pagamento é: PENDENTE\n- Valor: 50.00 USDT\n- Criado em: [timestamp]\n- Expira em: [timestamp]\n\nO pagamento ainda não foi confirmado na blockchain. Você pode acompanhar usando o link de pagamento ou me pedir para verificar novamente mais tarde.\n```\n\n## 📞 Suporte e Contato\n\nPara suporte ou informações adicionais, entre em contato com a equipe de desenvolvimento da Gotas ou abra uma issue no repositório GitHub.\n\n## 📜 Licença\n\n[MIT License](LICENSE)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcpgotas",
        "crypto",
        "usdt",
        "usdt cryptocurrency",
        "cryptocurrency payments",
        "verification usdt"
      ],
      "category": "blockchain-and-crypto"
    },
    "chromindscan--chromia-mcp": {
      "owner": "chromindscan",
      "name": "chromia-mcp",
      "url": "https://github.com/chromindscan/chromia-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/chromindscan.webp",
      "description": "Interact with Chromia Wallet to execute $CHR transactions, enabling seamless integration for managing cryptocurrency transactions through AI.",
      "stars": 1,
      "forks": 5,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2024-12-23T05:26:36Z",
      "readme_content": "# Chromia MCP\n\nThis tool that enables Claude AI to interact with Chromia Wallet for sending $CHR transactions.\n\nIntroduction on MCP: https://modelcontextprotocol.io/quickstart\n\n\n\n## Setting up\n\n1. git clone this repo\n2. setup `.env` and install\n\n```sh\ncp .env.sample .env\nnpm i\nnpm run build\n```\n\n3. setup Claude's Desktop App (mac setup)\n\n```sh\nnano ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n```json\n{\n    \"mcpServers\": {\n        \"chromia-mcp\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"/PATH_TO_FOLDER/chromia-mcp/build/index.js\"\n            ]\n        }\n    }\n}\n```\n\n4. Restart Claude Desktop App",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "chromindscan",
        "chromia",
        "crypto",
        "crypto chromindscan",
        "chromia wallet",
        "interact chromia"
      ],
      "category": "blockchain-and-crypto"
    },
    "chulanpro5--evm-mcp-server": {
      "owner": "chulanpro5",
      "name": "evm-mcp-server",
      "url": "https://github.com/chulanpro5/evm-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/chulanpro5.webp",
      "description": "Provides seamless access to blockchain services across 30+ EVM-compatible networks. Enables querying blockchain state, interacting with smart contracts, transferring tokens, and resolving ENS names.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-03-20T13:11:51Z",
      "readme_content": "# EVM MCP Server\n\n![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)\n![EVM Networks](https://img.shields.io/badge/Networks-30+-green)\n![TypeScript](https://img.shields.io/badge/TypeScript-5.0+-3178C6)\n![Viem](https://img.shields.io/badge/Viem-1.0+-green)\n\nA comprehensive Model Context Protocol (MCP) server that provides blockchain services across multiple EVM-compatible networks. This server enables AI agents to interact with Ethereum, Optimism, Arbitrum, Base, Polygon, and many other EVM chains with a unified interface.\n\n## 📋 Contents\n\n- [Overview](#overview)\n- [Features](#features)\n- [Supported Networks](#supported-networks)\n- [Prerequisites](#prerequisites)\n- [Installation](#installation)\n- [Server Configuration](#server-configuration)\n- [Usage](#usage)\n- [API Reference](#api-reference)\n  - [Tools](#tools)\n  - [Resources](#resources)\n- [Security Considerations](#security-considerations)\n- [Project Structure](#project-structure)\n- [Development](#development)\n- [License](#license)\n\n## 🔭 Overview\n\nThe MCP EVM Server leverages the Model Context Protocol to provide blockchain services to AI agents. It supports a wide range of services including:\n\n- Reading blockchain state (balances, transactions, blocks, etc.)\n- Interacting with smart contracts\n- Transferring tokens (native, ERC20, ERC721, ERC1155)\n- Querying token metadata and balances\n- Chain-specific services across 30+ EVM networks\n- **ENS name resolution** for all address parameters (use human-readable names like 'vitalik.eth' instead of addresses)\n\nAll services are exposed through a consistent interface of MCP tools and resources, making it easy for AI agents to discover and use blockchain functionality. **Every tool that accepts Ethereum addresses also supports ENS names**, automatically resolving them to addresses behind the scenes.\n\n## ✨ Features\n\n### Blockchain Data Access\n\n- **Multi-chain support** for 30+ EVM-compatible networks\n- **Chain information** including blockNumber, chainId, and RPCs\n- **Block data** access by number, hash, or latest\n- **Transaction details** and receipts with decoded logs\n- **Address balances** for native tokens and all token standards\n- **ENS resolution** for human-readable Ethereum addresses (use 'vitalik.eth' instead of '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045')\n\n### Token services\n\n- **ERC20 Tokens**\n\n  - Get token metadata (name, symbol, decimals, supply)\n  - Check token balances\n  - Transfer tokens between addresses\n  - Approve spending allowances\n\n- **NFTs (ERC721)**\n\n  - Get collection and token metadata\n  - Verify token ownership\n  - Transfer NFTs between addresses\n  - Retrieve token URIs and count holdings\n\n- **Multi-tokens (ERC1155)**\n  - Get token balances and metadata\n  - Transfer tokens with quantity\n  - Access token URIs\n\n### Smart Contract Interactions\n\n- **Read contract state** through view/pure functions\n- **Write services** with private key signing\n- **Contract verification** to distinguish from EOAs\n- **Event logs** retrieval and filtering\n\n### Comprehensive Transaction Support\n\n- **Native token transfers** across all supported networks\n- **Gas estimation** for transaction planning\n- **Transaction status** and receipt information\n- **Error handling** with descriptive messages\n\n## 🌐 Supported Networks\n\n### Mainnets\n\n- Ethereum (ETH)\n- Optimism (OP)\n- Arbitrum (ARB)\n- Arbitrum Nova\n- Base\n- Polygon (MATIC)\n- Polygon zkEVM\n- Avalanche (AVAX)\n- Binance Smart Chain (BSC)\n- zkSync Era\n- Linea\n- Celo\n- Gnosis (xDai)\n- Fantom (FTM)\n- Filecoin (FIL)\n- Moonbeam\n- Moonriver\n- Cronos\n- Scroll\n- Mantle\n- Manta\n- Blast\n- Fraxtal\n- Mode\n- Metis\n- Kroma\n- Zora\n- Aurora\n- Canto\n\n### Testnets\n\n- Sepolia\n- Optimism Sepolia\n- Arbitrum Sepolia\n- Base Sepolia\n- Polygon Amoy\n- Avalanche Fuji\n- BSC Testnet\n- zkSync Sepolia\n- Linea Sepolia\n- Scroll Sepolia\n- Mantle Sepolia\n- Manta Sepolia\n- Blast Sepolia\n- Fraxtal Testnet\n- Mode Testnet\n- Metis Sepolia\n- Kroma Sepolia\n- Zora Sepolia\n- Celo Alfajores\n- Goerli\n- Holesky\n\n## 🛠️ Prerequisites\n\n- [Bun](https://bun.sh/) 1.0.0 or higher\n- Node.js 18.0.0 or higher (if not using Bun)\n\n## 📦 Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/mcp-evm-server.git\ncd mcp-evm-server\n\n# Install dependencies with Bun\nbun install\n\n# Or with npm\nnpm install\n```\n\n## ⚙️ Server Configuration\n\nThe server uses the following default configuration:\n\n- **Default Chain ID**: 1 (Ethereum Mainnet)\n- **Server Port**: 3001\n- **Server Host**: 0.0.0.0 (accessible from any network interface)\n\nThese values are hardcoded in the application. If you need to modify them, you can edit the following files:\n\n- For chain configuration: `src/core/chains.ts`\n- For server configuration: `src/server/http-server.ts`\n\n## 🚀 Usage\n\n### Using npx (No Installation Required)\n\nYou can run the MCP EVM Server directly without installation using npx:\n\n```bash\n# Run the server in stdio mode (for CLI tools)\nnpx @mcpdotdirect/evm-mcp-server\n\n# Run the server in HTTP mode (for web applications)\nnpx @mcpdotdirect/evm-mcp-server --http\n```\n\n### Running the Server Locally\n\nStart the server using stdio (for embedding in CLI tools):\n\n```bash\n# Start the stdio server\nbun start\n\n# Development mode with auto-reload\nbun dev\n```\n\nOr start the HTTP server with SSE for web applications:\n\n```bash\n# Start the HTTP server\nbun start:http\n\n# Development mode with auto-reload\nbun dev:http\n```\n\n### Connecting to the Server\n\nConnect to this MCP server using any MCP-compatible client. For testing and debugging, you can use the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n### Connecting from Cursor\n\nTo connect to the MCP server from Cursor:\n\n1. Open Cursor and go to Settings (gear icon in the bottom left)\n2. Click on \"Features\" in the left sidebar\n3. Scroll down to \"MCP Servers\" section\n4. Click \"Add new MCP server\"\n5. Enter the following details:\n\n   - Server name: `evm-mcp-server`\n   - Type: `command`\n   - Command: `npx @mcpdotdirect/evm-mcp-server`\n\n6. Click \"Save\"\n\nOnce connected, you can use the MCP server's capabilities directly within Cursor. The server will appear in the MCP Servers list and can be enabled/disabled as needed.\n\n### Using mcp.json with Cursor\n\nFor a more portable configuration that you can share with your team or use across projects, you can create an `.cursor/mcp.json` file in your project's root directory:\n\n```json\n{\n  \"mcpServers\": {\n    \"evm-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@mcpdotdirect/evm-mcp-server\"]\n    },\n    \"evm-mcp-http\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@mcpdotdirect/evm-mcp-server\", \"--http\"]\n    }\n  }\n}\n```\n\nPlace this file in your project's `.cursor` directory (create it if it doesn't exist), and Cursor will automatically detect and use these MCP server configurations when working in that project. This approach makes it easy to:\n\n1. Share MCP configurations with your team\n2. Version control your MCP setup\n3. Use different server configurations for different projects\n\n### Example: HTTP Mode with SSE\n\nIf you're developing a web application and want to connect to the HTTP server with Server-Sent Events (SSE), you can use this configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"evm-mcp-sse\": {\n      \"url\": \"http://localhost:3001/sse\"\n    }\n  }\n}\n```\n\nThis connects directly to the HTTP server's SSE endpoint, which is useful for:\n\n- Web applications that need to connect to the MCP server from the browser\n- Environments where running local commands isn't ideal\n- Sharing a single MCP server instance among multiple users or applications\n\nTo use this configuration:\n\n1. Create a `.cursor` directory in your project root if it doesn't exist\n2. Save the above JSON as `mcp.json` in the `.cursor` directory\n3. Restart Cursor or open your project\n4. Cursor will detect the configuration and offer to enable the server(s)\n\n### Example: Using the MCP Server in Cursor\n\nAfter configuring the MCP server with `mcp.json`, you can easily use it in Cursor. Here's an example workflow:\n\n1. Create a new JavaScript/TypeScript file in your project:\n\n```javascript\n// blockchain-example.js\nasync function main() {\n  try {\n    // Get ETH balance for an address using ENS\n    console.log(\"Getting ETH balance for vitalik.eth...\");\n\n    // When using with Cursor, you can simply ask Cursor to:\n    // \"Check the ETH balance of vitalik.eth on mainnet\"\n    // Or \"Transfer 0.1 ETH from my wallet to vitalik.eth\"\n\n    // Cursor will use the MCP server to execute these operations\n    // without requiring any additional code from you\n\n    // This is the power of the MCP integration - your AI assistant\n    // can directly interact with blockchain data and operations\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n  }\n}\n\nmain();\n```\n\n2. With the file open in Cursor, you can ask Cursor to:\n\n   - \"Check the current ETH balance of vitalik.eth\"\n   - \"Look up the price of USDC on Ethereum\"\n   - \"Show me the latest block on Optimism\"\n   - \"Check if 0x1234... is a contract address\"\n\n3. Cursor will use the MCP server to execute these operations and return the results directly in your conversation.\n\nThe MCP server handles all the blockchain communication while allowing Cursor to understand and execute blockchain-related tasks through natural language.\n\n### Connecting using Claude CLI\n\nIf you're using Claude CLI, you can connect to the MCP server with just two commands:\n\n```bash\n# Add the MCP server\nclaude mcp add evm-mcp-server npx @mcpdotdirect/evm-mcp-server\n\n# Start Claude with the MCP server enabled\nclaude\n```\n\n### Example: Getting a Token Balance with ENS\n\n```javascript\n// Example of using the MCP client to check a token balance using ENS\nconst mcp = new McpClient(\"http://localhost:3000\");\n\nconst result = await mcp.invokeTool(\"get-token-balance\", {\n  tokenAddress: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC on Ethereum\n  ownerAddress: \"vitalik.eth\", // ENS name instead of address\n  network: \"ethereum\",\n});\n\nconsole.log(result);\n// {\n//   tokenAddress: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n//   owner: \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n//   network: \"ethereum\",\n//   raw: \"1000000000\",\n//   formatted: \"1000\",\n//   symbol: \"USDC\",\n//   decimals: 6\n// }\n```\n\n### Example: Resolving an ENS Name\n\n```javascript\n// Example of using the MCP client to resolve an ENS name to an address\nconst mcp = new McpClient(\"http://localhost:3000\");\n\nconst result = await mcp.invokeTool(\"resolve-ens\", {\n  ensName: \"vitalik.eth\",\n  network: \"ethereum\",\n});\n\nconsole.log(result);\n// {\n//   ensName: \"vitalik.eth\",\n//   normalizedName: \"vitalik.eth\",\n//   resolvedAddress: \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n//   network: \"ethereum\"\n// }\n```\n\n## 📚 API Reference\n\n### Tools\n\nThe server provides the following MCP tools for agents. **All tools that accept address parameters support both Ethereum addresses and ENS names.**\n\n#### Token services\n\n| Tool Name                | Description               | Key Parameters                                                                                        |\n| ------------------------ | ------------------------- | ----------------------------------------------------------------------------------------------------- |\n| `get-token-info`         | Get ERC20 token metadata  | `tokenAddress` (address/ENS), `network`                                                               |\n| `get-token-balance`      | Check ERC20 token balance | `tokenAddress` (address/ENS), `ownerAddress` (address/ENS), `network`                                 |\n| `transfer-token`         | Transfer ERC20 tokens     | `privateKey`, `tokenAddress` (address/ENS), `toAddress` (address/ENS), `amount`, `network`            |\n| `approve-token-spending` | Approve token allowances  | `privateKey`, `tokenAddress` (address/ENS), `spenderAddress` (address/ENS), `amount`, `network`       |\n| `get-nft-info`           | Get NFT metadata          | `tokenAddress` (address/ENS), `tokenId`, `network`                                                    |\n| `check-nft-ownership`    | Verify NFT ownership      | `tokenAddress` (address/ENS), `tokenId`, `ownerAddress` (address/ENS), `network`                      |\n| `transfer-nft`           | Transfer an NFT           | `privateKey`, `tokenAddress` (address/ENS), `tokenId`, `toAddress` (address/ENS), `network`           |\n| `get-nft-balance`        | Count NFTs owned          | `tokenAddress` (address/ENS), `ownerAddress` (address/ENS), `network`                                 |\n| `get-erc1155-token-uri`  | Get ERC1155 metadata      | `tokenAddress` (address/ENS), `tokenId`, `network`                                                    |\n| `get-erc1155-balance`    | Check ERC1155 balance     | `tokenAddress` (address/ENS), `tokenId`, `ownerAddress` (address/ENS), `network`                      |\n| `transfer-erc1155`       | Transfer ERC1155 tokens   | `privateKey`, `tokenAddress` (address/ENS), `tokenId`, `amount`, `toAddress` (address/ENS), `network` |\n\n#### Blockchain services\n\n| Tool Name         | Description                    | Key Parameters                                                                          |\n| ----------------- | ------------------------------ | --------------------------------------------------------------------------------------- |\n| `get-chain-info`  | Get network information        | `network`                                                                               |\n| `get-balance`     | Get native token balance       | `address` (address/ENS), `network`                                                      |\n| `transfer-eth`    | Send native tokens             | `privateKey`, `to` (address/ENS), `amount`, `network`                                   |\n| `get-transaction` | Get transaction details        | `txHash`, `network`                                                                     |\n| `read-contract`   | Read smart contract state      | `contractAddress` (address/ENS), `abi`, `functionName`, `args`, `network`               |\n| `write-contract`  | Write to smart contract        | `contractAddress` (address/ENS), `abi`, `functionName`, `args`, `privateKey`, `network` |\n| `is-contract`     | Check if address is a contract | `address` (address/ENS), `network`                                                      |\n| `resolve-ens`     | Resolve ENS name to address    | `ensName`, `network`                                                                    |\n\n### Resources\n\nThe server exposes blockchain data through the following MCP resource URIs. All resource URIs that accept addresses also support ENS names, which are automatically resolved to addresses.\n\n#### Blockchain Resources\n\n| Resource URI Pattern                        | Description                              |\n| ------------------------------------------- | ---------------------------------------- |\n| `evm://{network}/chain`                     | Chain information for a specific network |\n| `evm://chain`                               | Ethereum mainnet chain information       |\n| `evm://{network}/block/{blockNumber}`       | Block data by number                     |\n| `evm://{network}/block/latest`              | Latest block data                        |\n| `evm://{network}/address/{address}/balance` | Native token balance                     |\n| `evm://{network}/tx/{txHash}`               | Transaction details                      |\n| `evm://{network}/tx/{txHash}/receipt`       | Transaction receipt with logs            |\n\n#### Token Resources\n\n| Resource URI Pattern                                                   | Description                    |\n| ---------------------------------------------------------------------- | ------------------------------ |\n| `evm://{network}/token/{tokenAddress}`                                 | ERC20 token information        |\n| `evm://{network}/token/{tokenAddress}/balanceOf/{address}`             | ERC20 token balance            |\n| `evm://{network}/nft/{tokenAddress}/{tokenId}`                         | NFT (ERC721) token information |\n| `evm://{network}/nft/{tokenAddress}/{tokenId}/isOwnedBy/{address}`     | NFT ownership verification     |\n| `evm://{network}/erc1155/{tokenAddress}/{tokenId}/uri`                 | ERC1155 token URI              |\n| `evm://{network}/erc1155/{tokenAddress}/{tokenId}/balanceOf/{address}` | ERC1155 token balance          |\n\n## 🔒 Security Considerations\n\n- **Private keys** are used only for transaction signing and are never stored by the server\n- Consider implementing additional authentication mechanisms for production use\n- Use HTTPS for the HTTP server in production environments\n- Implement rate limiting to prevent abuse\n- For high-value services, consider adding confirmation steps\n\n## 📁 Project Structure\n\n```\nmcp-evm-server/\n├── src/\n│   ├── index.ts                # Main stdio server entry point\n│   ├── server/                 # Server-related files\n│   │   ├── http-server.ts      # HTTP server with SSE\n│   │   └── server.ts           # General server setup\n│   ├── core/\n│   │   ├── chains.ts           # Chain definitions and utilities\n│   │   ├── resources.ts        # MCP resources implementation\n│   │   ├── tools.ts            # MCP tools implementation\n│   │   ├── prompts.ts          # MCP prompts implementation\n│   │   └── services/           # Core blockchain services\n│   │       ├── index.ts        # Operation exports\n│   │       ├── balance.ts      # Balance services\n│   │       ├── transfer.ts     # Token transfer services\n│   │       ├── utils.ts        # Utility functions\n│   │       ├── tokens.ts       # Token metadata services\n│   │       ├── contracts.ts    # Contract interactions\n│   │       ├── transactions.ts # Transaction services\n│   │       └── blocks.ts       # Block services\n│   │       └── clients.ts      # RPC client utilities\n├── package.json\n├── tsconfig.json\n└── README.md\n```\n\n## 🛠️ Development\n\nTo modify or extend the server:\n\n1. Add new services in the appropriate file under `src/core/services/`\n2. Register new tools in `src/core/tools.ts`\n3. Register new resources in `src/core/resources.ts`\n4. Add new network support in `src/core/chains.ts`\n5. To change server configuration, edit the hardcoded values in `src/server/http-server.ts`\n\n## 📄 License\n\nThis project is licensed under the terms of the [MIT License](./LICENSE).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "crypto",
        "mcp",
        "crypto chulanpro5",
        "mcp server",
        "chulanpro5 evm"
      ],
      "category": "blockchain-and-crypto"
    },
    "crazyrabbitLTC--mcp-ethers-server": {
      "owner": "crazyrabbitLTC",
      "name": "mcp-ethers-server",
      "url": "https://github.com/crazyrabbitLTC/mcp-ethers-server",
      "imageUrl": "/freedevtools/mcp/pfp/crazyrabbitLTC.webp",
      "description": "Provides Ethereum wallet functionality, including wallet management, transaction processing, and contract interactions. Supports network information retrieval, gas estimation, and ENS resolution.",
      "stars": 8,
      "forks": 10,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-28T15:23:47Z",
      "readme_content": "# MCP Ethers Server\n\n**⚡ Claude Code Setup:**\n```bash\nclaude mcp add ethers-wallet -- node /path/to/ethers-server/build/src/index.js\n```\n\nA complete [ethers.js v6](https://ethers.org) wrapper for Claude with 40+ tools for Ethereum blockchain interactions. Works with 20+ EVM networks including Ethereum, Polygon, Arbitrum, Base, and more.\n\n## Tool Categories\n\n### 🔗 **Core Ethereum**\nNetwork info • Block/transaction data • Wallet operations • Gas estimation • ENS resolution • Message signing • Unit conversion\n\n### 🪙 **Token Standards** \n**ERC20**: Token info, balances, transfers, approvals  \n**ERC721**: NFT info, ownership, transfers, metadata  \n**ERC1155**: Multi-token balances, transfers, batch operations\n\n### 📝 **Transaction Management**\nTransaction preparation • ERC20/721/1155 transaction prep • Secure transaction broadcasting • Gas optimization\n\n### 🔧 **Contract Interaction**\nSmart contract calls • Contract code inspection • Custom ABI support\n\n## Quick Example\n\n```bash\n# Get Vitalik's ETH balance\n\"getWalletBalance\": {\n  \"address\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"provider\": \"mainnet\"\n}\n\n# Get USDC token info\n\"erc20GetTokenInfo\": {\n  \"tokenAddress\": \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n  \"provider\": \"mainnet\"\n}\n```\n\n## Installation\n\n```bash\ngit clone https://github.com/yourusername/ethers-server.git\ncd ethers-server\nnpm install\nnpm run build\n```\n\n### Environment Variables\n\nCreate `.env` file:\n```\nALCHEMY_API_KEY=your_alchemy_key\nINFURA_API_KEY=your_infura_key\nDEFAULT_NETWORK=mainnet\n```\n\n## Advanced Setup\n\n### Local Project\n```bash\nclaude mcp add --scope local ethers-wallet --env ALCHEMY_API_KEY=your_key -- node /path/to/build/src/index.js\n```\n\n### Shared Team Config\n```bash\nclaude mcp add --scope project ethers-wallet -- node /path/to/build/src/index.js\n```\n\n## Security\n\n**🔐 Secure by Design**: Uses prepare → sign → send workflow. Private keys never stored on server. External signing supported (hardware wallets, offline signing).\n\n**⚠️ API Keys**: Protect your `.env` file. Never expose Alchemy/Infura keys.\n\n## Development\n\nBuilt with ethers.js v6 for maximum compatibility and performance. Full TypeScript support with comprehensive error handling.\n\n**Testing**: `npm test` (requires Hardhat local node)  \n**Build**: `npm run build`\n\n## Contributing\n\nContributions welcome! See our comprehensive test suite and follow existing code patterns.\n\n## License\n\nMIT License - Dennison Bertram (dennison@tally.xyz)\n\n---\n\n**🚀 Production Ready**: Successfully validated with live Ethereum mainnet transactions. Complete MCP server with 40+ tools for all your Web3 needs.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ethereum",
        "mcp",
        "crazyrabbitltc",
        "mcp ethers",
        "crazyrabbitltc mcp",
        "ethereum wallet"
      ],
      "category": "blockchain-and-crypto"
    },
    "crazyrabbitLTC--mcp-etherscan-server": {
      "owner": "crazyrabbitLTC",
      "name": "mcp-etherscan-server",
      "url": "https://github.com/crazyrabbitLTC/mcp-etherscan-server",
      "imageUrl": "/freedevtools/mcp/pfp/crazyrabbitLTC.webp",
      "description": "Access Ethereum blockchain data including balances, transaction history, ERC20 token transfers, contract ABIs, gas prices, and ENS resolution through Etherscan's API.",
      "stars": 26,
      "forks": 22,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-09T09:37:26Z",
      "readme_content": "# MCP Etherscan Server\n\nAn MCP (Model Context Protocol) server that provides Ethereum blockchain data tools via Etherscan's API. Features include checking ETH balances, viewing transaction history, tracking ERC20 transfers, fetching contract ABIs, monitoring gas prices, and resolving ENS names.\n\n## Features\n\n- **Balance Checking**: Get ETH balance for any Ethereum address\n- **Transaction History**: View recent transactions with detailed information\n- **Token Transfers**: Track ERC20 token transfers with token details\n- **Contract ABI**: Fetch smart contract ABIs for development\n- **Gas Prices**: Monitor current gas prices (Safe Low, Standard, Fast)\n- **ENS Resolution**: Resolve Ethereum addresses to ENS names\n\n## Prerequisites\n\n- Node.js >= 18\n- An Etherscan API key (get one at https://etherscan.io/apis)\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone [your-repo-url]\ncd mcp-etherscan-server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Create a `.env` file in the root directory:\n```bash\nETHERSCAN_API_KEY=your_api_key_here\n```\n\n4. Build the project:\n```bash\nnpm run build\n```\n\n## Running the Server\n\nStart the server:\n```bash\nnpm start\n```\n\nThe server will run on stdio, making it compatible with MCP clients like Claude Desktop.\n\n## How It Works\n\nThis server implements the Model Context Protocol (MCP) to provide tools for interacting with Ethereum blockchain data through Etherscan's API. Each tool is exposed as an MCP endpoint that can be called by compatible clients.\n\n### Available Tools\n\n1. `check-balance`\n   - Input: Ethereum address\n   - Output: ETH balance in both Wei and ETH\n\n2. `get-transactions`\n   - Input: Ethereum address, optional limit\n   - Output: Recent transactions with timestamps, values, and addresses\n\n3. `get-token-transfers`\n   - Input: Ethereum address, optional limit\n   - Output: Recent ERC20 token transfers with token details\n\n4. `get-contract-abi`\n   - Input: Contract address\n   - Output: Contract ABI in JSON format\n\n5. `get-gas-prices`\n   - Input: None\n   - Output: Current gas prices in Gwei\n\n6. `get-ens-name`\n   - Input: Ethereum address\n   - Output: Associated ENS name if available\n\n## Using with Claude Desktop\n\nTo add this server to Claude Desktop:\n\n1. Start the server using `npm start`\n\n2. In Claude Desktop:\n   - Go to Settings\n   - Navigate to the MCP Servers section\n   - Click \"Add Server\"\n   - Enter the following configuration:\n     ```json\n     {\n       \"name\": \"Etherscan Tools\",\n       \"transport\": \"stdio\",\n       \"command\": \"node /path/to/mcp-etherscan-server/build/index.js\"\n     }\n     ```\n   - Save the configuration\n\n3. The Etherscan tools will now be available in your Claude conversations\n\n### Example Usage in Claude\n\nYou can use commands like:\n```\nCheck the balance of 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\n```\nor\n```\nShow me recent transactions for vitalik.eth\n```\n\n## Development\n\nTo add new features or modify existing ones:\n\n1. The main server logic is in `src/server.ts`\n2. Etherscan API interactions are handled in `src/services/etherscanService.ts`\n3. Build after changes: `npm run build`\n\n## License\n\nMIT License - See LICENSE file for details ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "etherscan",
        "blockchain",
        "ethereum",
        "mcp etherscan",
        "etherscan server",
        "etherscan api"
      ],
      "category": "blockchain-and-crypto"
    },
    "cryptoleek-team--awesome-solana-mcp": {
      "owner": "cryptoleek-team",
      "name": "awesome-solana-mcp",
      "url": "https://github.com/cryptoleek-team/awesome-solana-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/cryptoleek-team.webp",
      "description": "Enables interaction with the Solana blockchain through a unified interface for blockchain operations. Provides tools for asset management, token operations, network info retrieval, and security contact extraction.",
      "stars": 7,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-05-09T16:27:07Z",
      "readme_content": "# Solana Agent Kit MCP Server\n\n[![npm version](https://badge.fury.io/js/solana-mpc.svg)](https://www.npmjs.com/package/solana-mpc)\n[![License: ISC](https://img.shields.io/badge/License-ISC-blue.svg)](https://opensource.org/licenses/ISC)\n\nA Model Context Protocol (MCP) server that provides onchain tools for Claude AI, allowing it to interact with the Solana blockchain through a standardized interface. This implementation is based on the Solana Agent Kit and enables AI agents to perform blockchain operations seamlessly.\n\n# DEMO VIDEO\nhttps://www.youtube.com/watch?v=VbfSzFuIzn8\n\n# Actions\n### GET_VALIDATOR_INFO\nRetrieves detailed information about Solana validators\nShows stake amounts, commission rates, and performance metrics\n\n### GET_PRIORITY_FEE_ESTIMATE\nEstimates optimal transaction fees based on current network conditions\nProvides different fee tiers (low, medium, high) with expected confirmation times\n\n### GET_TRANSACTION_HISTORY\nFetches transaction history for any Solana wallet or token account\nSupports filtering by transaction types and pagination\n\n### GET_SECURITY_TXT\nExtracts security contact information from Solana programs\nHelps users find proper channels for reporting vulnerabilities\nIntegrated Functions\nYour MCP server also includes core Solana functionality for:\n\nAsset management (GET_ASSET, MINT_NFT)\nToken operations (DEPLOY_TOKEN, TRANSFER, TRADE)\nNetwork information (GET_TPS, BALANCE)\nUtility functions (REQUEST_FUNDS, REGISTER_DOMAIN)\nThese functions together provide a comprehensive interface for interacting with the Solana blockchain through a unified MCP server.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "crypto",
        "solana",
        "solana blockchain",
        "blockchain crypto",
        "awesome solana"
      ],
      "category": "blockchain-and-crypto"
    },
    "dasein108--mcp-cw-graph": {
      "owner": "dasein108",
      "name": "mcp-cw-graph",
      "url": "https://github.com/dasein108/mcp-cw-graph",
      "imageUrl": "/freedevtools/mcp/pfp/dasein108.webp",
      "description": "Interact with the CW-Social smart contract on Cosmos-based blockchains to manage semantic relationships between entities. Perform full CRUD operations and execute rich queries with batch processing and transaction management.",
      "stars": 1,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-05-07T10:31:36Z",
      "readme_content": "# Cyberlink MCP Server\n\nA Model Context Protocol (MCP) server for interacting with the CW-Social smart contract on Cosmos-based blockchains. This server provides a standardized interface for creating, updating, and querying cyberlinks - semantic relationships between entities on the blockchain.\n\n## Features\n\n- **Core Operations**\n  - Create, read, update, and delete cyberlinks\n  - Support for named cyberlinks with custom identifiers\n  - Batch operations for efficient processing\n  - Rich query capabilities with filtering and pagination\n- **Transaction Management**\n\n  - Real-time transaction monitoring and status polling\n  - Detailed transaction results and error handling\n  - Support for both internal and external transaction signing\n  - Token transfer capabilities\n\n- **Advanced Features**\n  - Semantic embedding generation via Hugging Face transformers\n  - Real-time progress tracking for model operations\n  - Cosine similarity calculations for semantic matching\n  - Flexible ID system with formatted IDs (fids) and global IDs (gids)\n  - Time-range based queries with UTC support\n  - Owner-based filtering and statistics\n\n## Prerequisites\n\n- Node.js 16 or higher\n- npm or yarn package manager\n- Access to a running Cosmos blockchain node\n- Wallet with sufficient funds for transactions\n- [Cursor IDE](https://cursor.sh/) for development\n- [Claude Desktop](https://claude.ai/desktop) for AI assistance\n\n## Installation\n\n1. Clone the repository:\n\n```bash\ngit clone https://github.com/your-org/cw-social-mcp.git\ncd cw-social-mcp\n```\n\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n3. Build the project:\n\n```bash\nnpm run build\n```\n\n4. Configure environment variables (see Configuration section)\n\n## Configuration\n\n### MCP Server Setup\n\nCreate or modify the configuration file at `~/.cursor/mcp.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"cw-graph\": {\n      \"command\": \"node\",\n      \"args\": [\"PATH_TO_YOUR_PROJECT/dist/index.js\"],\n      \"env\": {\n        \"NODE_URL\": \"http://localhost:26657\",\n        \"WALLET_MNEMONIC\": \"your wallet mnemonic phrase\",\n        \"CONTRACT_ADDRESS\": \"your contract address\",\n        \"DENOM\": \"stake\",\n        \"BENCH32_PREFIX\": \"cyber\"\n      }\n    }\n  }\n}\n```\n\n### Required Configuration\n\nRequired environment variables:\n\n- `PATH_TO_YOUR_PROJECT`: Absolute path to project directory\n- `NODE_URL`: Cosmos blockchain node URL\n- `CONTRACT_ADDRESS`: Deployed smart contract address\n\n### Optional Configuration\n\nOptional environment variables:\n\n- `WALLET_MNEMONIC`: Wallet mnemonic for signing (default: none - transactions will be unsigned)\n- `DENOM`: Token denomination (default: \"stake\")\n- `BENCH32_PREFIX`: BECH32 prefix\n\n## Available Tools\n\n### Cyberlink Management\n\n#### Creation Tools\n\n**create_cyberlink**\n\n- Description: Create single cyberlink\n- Required: `type`\n- Optional: `from`, `to`, `value`\n\n**create_cyberlink2**\n\n- Description: Create node + link\n- Required: `node_type`, `link_type`\n- Optional: `node_value`, `link_value`, `link_to_existing_id`, `link_from_existing_id`\n\n**create_named_cyberlink**\n\n- Description: Create named cyberlink (admin only)\n- Required: `name`, `cyberlink`\n\n**create_cyberlinks**\n\n- Description: Batch create cyberlinks\n- Required: `cyberlinks[]`\n\n#### Modification Tools\n\n**update_cyberlink**\n\n- Description: Update existing cyberlink\n- Required: `gid`, `cyberlink`\n\n**delete_cyberlink**\n\n- Description: Remove cyberlink\n- Required: `gid`\n\n**update_with_embedding**\n\n- Description: Add semantic embedding\n- Required: `formatted_id`\n\n### Query Operations\n\n#### Basic Queries\n\n**query_by_gid**\n\n- Description: Get by global ID\n- Required: `gid`\n\n**query_by_fid**\n\n- Description: Get by formatted ID\n- Required: `fid`\n\n**query_cyberlinks**\n\n- Description: List all with pagination\n- Parameters: `limit`, `start_after`\n\n**query_named_cyberlinks**\n\n- Description: List named cyberlinks\n- Parameters: `limit`, `start_after`\n\n**query_by_gids**\n\n- Description: Get multiple by IDs\n- Required: `gids[]`\n\n#### Filtered Queries\n\n**query_cyberlinks_by_type**\n\n- Description: Filter by type\n- Required: `type`\n\n**query_cyberlinks_by_from**\n\n- Description: Filter by source\n- Required: `from`\n\n**query_cyberlinks_by_to**\n\n- Description: Filter by target\n- Required: `to`\n\n**query_cyberlinks_by_owner_and_type**\n\n- Description: Filter by owner & type\n- Required: `owner`, `type`\n\n#### Time-Based Queries\n\n**query_cyberlinks_by_owner_time**\n\n- Description: Filter by creation time\n- Required: `owner`, `start_time`\n\n**query_cyberlinks_by_owner_time_any**\n\n- Description: Filter by any time\n- Required: `owner`, `start_time`\n\n### System Operations\n\n#### Contract Info\n\n**query_last_id**\n\n- Description: Get last assigned ID\n\n**query_config**\n\n- Description: Get contract config\n\n**query_debug_state**\n\n- Description: Get debug state (admin only)\n\n**get_graph_stats**\n\n- Description: Get graph statistics\n\n#### Transaction & Wallet\n\n**query_transaction**\n\n- Description: Get tx status\n- Required: `transaction_hash`\n\n**get_tx_status**\n\n- Description: Get detailed tx status\n- Required: `transaction_hash`\n\n**query_wallet_balance**\n\n- Description: Get wallet balances\n\n**send_tokens**\n\n- Description: Transfer tokens\n- Required: `recipient`, `amount`\n\n## Query Parameters\n\n### Time Range Format\n\n- All timestamps must be in ISO 8601 format\n- Example: `2024-06-01T12:00:00Z`\n- UTC timezone is assumed if not specified\n- `start_time` is required, `end_time` is optional\n\n### Pagination\n\n- `start_after`: Pagination cursor\n- `limit`: Results per page (default: 50)\n\n## Development\n\n### Build Commands\n\n```bash\n# Production build\nnpm run build\n\n# Development mode\nnpm run dev\n```\n\n### Project Structure\n\n```\nsrc/\n├── index.ts                # Entry point\n├── cyberlink-service.ts    # Core service\n├── services/\n│   ├── embedding.service.ts  # Semantic analysis\n│   └── __tests__/           # Test suite\n└── types.ts                # Type definitions\n\ncursor_rules/\n└── chat_history.mdc       # Chat rules\n```\n\n### Error Codes\n\n**InvalidParams**\n\n- Description: Invalid parameters\n- Common causes: Missing required fields, wrong format\n\n**MethodNotFound**\n\n- Description: Unknown tool\n- Common causes: Typo in tool name, deprecated tool\n\n**InternalError**\n\n- Description: System error\n- Common causes: Network issues, contract errors\n\n## Run MCP over SSE\n\nYou can run the MCP server using Docker to turn it into an SSE server. This ensures the Hugging Face model cache is persisted between runs and that environment variables are loaded from your .env file.\n\n```bash\ndocker run \\\n  --name cw-social \\\n  -v $(pwd)/hf-cache:/app/hf-cache \\\n  --env-file .env \\\n  -p 8000:8000 \\\n  cw-social-mcp\n```\n\n- `-v $(pwd)/hf-cache:/app/hf-cache` mounts a local directory for model caching, so models are not re-downloaded every time.\n- `--env-file .env` loads environment variables from your `.env` file.\n- `-p 8000:8000` exposes the server on port 8000.\n- `--name cw-social` names your container for easier management.\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchains",
        "blockchain",
        "cosmos",
        "contract cosmos",
        "based blockchains",
        "blockchain crypto"
      ],
      "category": "blockchain-and-crypto"
    },
    "dcSpark--mcp-cryptowallet-evm": {
      "owner": "dcSpark",
      "name": "mcp-cryptowallet-evm",
      "url": "https://github.com/dcSpark/mcp-cryptowallet-evm",
      "imageUrl": "/freedevtools/mcp/pfp/dcSpark.webp",
      "description": "Seamlessly interact with Ethereum and EVM-compatible blockchains, enabling wallet creation, balance checks, transaction sending, and smart contract interactions.",
      "stars": 6,
      "forks": 9,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-30T09:02:53Z",
      "readme_content": "# MCP Crypto Wallet EVM\n\nThis repository contains a Model Context Protocol (MCP) server that provides Claude with access to Ethereum and EVM-compatible blockchain operations via ethers.js v5. The server enables Claude to perform operations like creating wallets, checking balances, sending transactions, and interacting with smart contracts on EVM-compatible blockchains.\n\n<a href=\"https://glama.ai/mcp/servers/@dcSpark/mcp-cryptowallet-evm\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@dcSpark/mcp-cryptowallet-evm/badge\" alt=\"Crypto Wallet EVM MCP server\" />\n</a>\n\n## Overview\n\nThe MCP server exposes the following tools to Claude:\n\n### Wallet Creation and Management\n- `wallet_create_random`: Create a new wallet with a random private key\n- `wallet_from_private_key`: Create a wallet from a private key\n- `wallet_from_mnemonic`: Create a wallet from a mnemonic phrase\n- `wallet_from_encrypted_json`: Create a wallet by decrypting an encrypted JSON wallet\n- `wallet_encrypt`: Encrypt a wallet with a password\n\n### Wallet Properties\n- `wallet_get_address`: Get the wallet address\n- `wallet_get_public_key`: Get the wallet public key\n- `wallet_get_private_key`: Get the wallet private key (with appropriate security warnings)\n- `wallet_get_mnemonic`: Get the wallet mnemonic phrase (if available)\n\n### Blockchain Methods\n- `wallet_get_balance`: Get the balance of the wallet\n- `wallet_get_chain_id`: Get the chain ID the wallet is connected to\n- `wallet_get_gas_price`: Get the current gas price\n- `wallet_get_transaction_count`: Get the number of transactions sent from this account (nonce)\n- `wallet_call`: Call a contract method without sending a transaction\n\n### Transaction Methods\n- `wallet_send_transaction`: Send a transaction\n- `wallet_sign_transaction`: Sign a transaction without sending it\n- `wallet_populate_transaction`: Populate a transaction with missing fields\n\n### Signing Methods\n- `wallet_sign_message`: Sign a message\n- `wallet_sign_typed_data`: Sign typed data (EIP-712)\n- `wallet_verify_message`: Verify a signed message\n- `wallet_verify_typed_data`: Verify signed typed data\n\n### Provider Methods\n- `provider_get_block`: Get a block by number or hash\n- `provider_get_transaction`: Get a transaction by hash\n- `provider_get_transaction_receipt`: Get a transaction receipt\n- `provider_get_code`: Get the code at an address\n- `provider_get_storage_at`: Get the storage at a position for an address\n- `provider_estimate_gas`: Estimate the gas required for a transaction\n- `provider_get_logs`: Get logs that match a filter\n- `provider_get_ens_resolver`: Get the ENS resolver for a name\n- `provider_lookup_address`: Lookup the ENS name for an address\n- `provider_resolve_name`: Resolve an ENS name to an address\n\n### Network Methods\n- `network_get_network`: Get the current network information\n- `network_get_block_number`: Get the current block number\n- `network_get_fee_data`: Get the current fee data (base fee, max priority fee, etc.)\n\n## Prerequisites\n\n- Node.js (v16 or higher)\n- Claude Desktop application\n\n## Installation\n\n### Option 1: Using npx (Recommended)\n\nYou can run the MCP server directly without installation using npx:\n\n```bash\nnpx @mcp-dockmaster/mcp-cryptowallet-evm\n```\n\nThis will download and execute the server directly from npm.\n\n### Option 2: Manual Installation\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/dcSpark/mcp-cryptowallet-evm.git\n   cd mcp-cryptowallet-evm\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm ci\n   ```\n\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n\n## Configuration\n\n### Environment Variables\n\nThe MCP server supports the following environment variables:\n\n- `PRIVATE_KEY`: Optional private key to use for wallet operations when no wallet is explicitly provided\n\n### Configure Claude Desktop\n\nTo configure Claude Desktop to use this MCP server:\n\n1. Open Claude Desktop\n2. Navigate to the Claude Desktop configuration file:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - Linux: `~/.config/Claude/claude_desktop_config.json`\n\n3. Add the MCP server configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-cryptowallet-evm\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@mcp-dockmaster/mcp-cryptowallet-evm\"\n      ]\n    }\n  }\n}\n```\n\nAlternatively, if you installed the package locally:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-cryptowallet-evm\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/your/mcp-cryptowallet-evm/build/index.js\"\n      ]\n    }\n  }\n}\n```\n\n### Running Locally\n\n```bash\nnode build/index.js\n```\n\n## Usage\n\nOnce configured, restart Claude Desktop. Claude will now have access to the Ethereum and EVM-compatible blockchain tools. You can ask Claude to:\n\n1. Create a new wallet:\n   ```\n   Can you create a new Ethereum wallet for me?\n   ```\n\n2. Check a wallet balance:\n   ```\n   What's the balance of the Ethereum wallet address 0x742d35Cc6634C0532925a3b844Bc454e4438f44e?\n   ```\n\n3. Send a transaction:\n   ```\n   Can you help me send 0.1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e?\n   ```\n\nClaude will use the MCP server to interact with the Ethereum blockchain directly.\n\n## Development\n\n### Adding New Tools\n\nTo add new tools to the MCP server:\n\n1. Define the tool in `src/tools.ts`\n2. Create a handler function in the appropriate handler file\n3. Add the handler to the `handlers` object in `src/tools.ts`\n\n### Building\n\n```bash\nnpm run build\n```\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crypto",
        "cryptowallet",
        "ethereum",
        "crypto dcspark",
        "cryptowallet evm",
        "mcp cryptowallet"
      ],
      "category": "blockchain-and-crypto"
    },
    "dcSpark--mcp-server-helius": {
      "owner": "dcSpark",
      "name": "mcp-server-helius",
      "url": "https://github.com/dcSpark/mcp-server-helius",
      "imageUrl": "/freedevtools/mcp/pfp/dcSpark.webp",
      "description": "Access and retrieve data from the Solana blockchain, including wallet balances, block information, and transaction details. Interact with tokens and NFTs directly through the Helius API.",
      "stars": 13,
      "forks": 12,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-04T00:30:25Z",
      "readme_content": "# MCP Helius\n\nThis repository contains a Model Context Protocol (MCP) server that provides Claude with access to Solana blockchain data via the Helius API. The server enables Claude to perform operations like checking wallet balances, getting blockchain information, and interacting with tokens and NFTs on the Solana blockchain.\n\n## Overview\n\nThe MCP server exposes the following tools to Claude:\n\n### Basic Blockchain Operations\n- `helius_get_balance`: Get the balance of a Solana wallet address\n- `helius_get_block_height`: Get the current block height of the Solana blockchain\n- `helius_get_slot`: Get the current slot of the Solana blockchain\n- `helius_get_latest_blockhash`: Get the latest blockhash from the Solana blockchain\n- `helius_get_transaction`: Get a transaction by its signature\n- `helius_get_account_info`: Get account information for a Solana address\n- `helius_get_signatures_for_address`: Get transaction signatures for a Solana address\n- `helius_get_multiple_accounts`: Get information about multiple Solana accounts\n- `helius_get_program_accounts`: Get all accounts owned by a program\n\n### Token Operations\n- `helius_get_token_accounts_by_owner`: Get token accounts owned by a Solana address\n- `helius_get_token_supply`: Get the supply of a token\n- `helius_get_token_account_balance`: Get the balance of a token account\n- `helius_get_token_accounts`: Get token accounts by mint or owner\n\n### NFT and Digital Assets\n- `helius_get_asset`: Get details of a digital asset by its ID\n- `helius_get_rwa_asset`: Get details of a real-world asset by its ID\n- `helius_get_asset_batch`: Get details of multiple assets by their IDs\n- `helius_get_asset_proof`: Get proof for a digital asset\n- `helius_get_assets_by_group`: Get assets by group key and value\n- `helius_get_assets_by_owner`: Get assets owned by a specific address\n- `helius_get_assets_by_creator`: Get assets created by a specific address\n- `helius_get_assets_by_authority`: Get assets by authority address\n- `helius_search_assets`: Search for assets using various filters (ownerAddress, creatorAddress, compressed, etc.)\n- `helius_get_signatures_for_asset`: Get signatures associated with an asset\n- `helius_get_nft_editions`: Get NFT editions for a master edition\n\n### Blockchain System Information\n- `helius_get_minimum_balance_for_rent_exemption`: Get the minimum balance required for rent exemption\n- `helius_get_inflation_reward`: Get inflation rewards for a list of addresses\n- `helius_get_epoch_info`: Get information about the current epoch\n- `helius_get_epoch_schedule`: Get the epoch schedule\n- `helius_get_leader_schedule`: Get the leader schedule for an epoch\n- `helius_get_recent_performance_samples`: Get recent performance samples\n- `helius_get_version`: Get the version of the Solana node\n\n### Transaction and Fee Methods\n- `helius_get_priority_fee_estimate`: Get priority fee estimate for a transaction\n- `helius_poll_transaction_confirmation`: Poll for transaction confirmation status\n- `helius_send_jito_bundle`: Send a bundle of transactions to Jito\n- `helius_get_bundle_statuses`: Get statuses of Jito bundles\n- `helius_get_fee_for_message`: Get the fee for a serialized message\n- `helius_execute_jupiter_swap`: Execute a token swap using Jupiter\n\n## Prerequisites\n\n- Node.js (v16 or higher)\n- A Helius API key (get one at [https://dev.helius.xyz/](https://dev.helius.xyz/))\n- Claude Desktop application\n\n## Installation\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/dcSpark/mcp-server-helius.git\n   cd mcp-server-helius\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm ci\n   ```\n\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n\n## Configuration\n\n### Configure Claude Desktop\n\nTo configure Claude Desktop to use this MCP server:\n\n1. Open Claude Desktop\n2. Navigate to the Claude Desktop configuration file:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - Linux: `~/.config/Claude/claude_desktop_config.json`\n\n3. Add the MCP server configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-helius\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@mcp-dockmaster/mcp-server-helius\"\n      ],\n      \"env\": {\n        \"HELIUS_API_KEY\": \"your-helius-api-key\"\n      }\n    }\n  }\n}\n```\n\n### Running Locally\n\n```bash\nHELIUS_API_KEY=your-helius-api-key node build/index.js\n```\n\nYou can also run directly using npx:\n```bash\nHELIUS_API_KEY=your-helius-api-key npx @dcspark/mcp-server-helius\n```\n\n## Usage\n\nOnce configured, restart Claude Desktop. Claude will now have access to the Solana blockchain tools. You can ask Claude to:\n\n1. Check a wallet balance:\n   ```\n   What's the balance of the Solana wallet address 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8?\n   ```\n\n2. Get the current block height:\n   ```\n   What's the current block height on Solana?\n   ```\n\n3. Get information about NFTs:\n   ```\n   What NFTs does the wallet address 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8 own?\n   ```\n\nClaude will use the MCP server to fetch this information directly from the Solana blockchain via Helius.\n\n## Development\n\n### Adding New Tools\n\nTo add new tools to the MCP server:\n\n1. Define the tool in `src/tools.ts`\n2. Create a handler function in the appropriate handler file\n3. Add the handler to the `handlers` object in `src/tools.ts`\n\n### Building\n\n```bash\nnpm run build\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "helius",
        "solana",
        "crypto",
        "solana blockchain",
        "helius api",
        "crypto dcspark"
      ],
      "category": "blockchain-and-crypto"
    },
    "dcSpark--mcp-server-jupiter": {
      "owner": "dcSpark",
      "name": "mcp-server-jupiter",
      "url": "https://github.com/dcSpark/mcp-server-jupiter",
      "imageUrl": "/freedevtools/mcp/pfp/dcSpark.webp",
      "description": "Connects to the Jupiter swap API on the Solana blockchain to perform token swaps. Facilitates operations including retrieving quotes, building swap transactions, and sending swap transactions.",
      "stars": 2,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-14T14:18:02Z",
      "readme_content": "# MCP Jupiter\n\nThis repository contains a Model Context Protocol (MCP) server that provides Claude with access to Jupiter's swap API. The server enables Claude to perform operations like getting quotes, building swap transactions, and sending swap transactions on the Solana blockchain using Jupiter.\n\n## Overview\n\nThe MCP server exposes several tools to Claude:\n\n- `jupiter_get_quote`: Get a quote for swapping tokens on Jupiter\n- `jupiter_build_swap_transaction`: Build a swap transaction on Jupiter\n- `jupiter_send_swap_transaction`: Send a swap transaction on Jupiter\n\n## Prerequisites\n\n- Node.js (v16 or higher)\n- Claude Desktop application\n\n## Installation\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/dcSpark/mcp-server-jupiter.git\n   cd mcp-server-jupiter\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm ci\n   ```\n\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n\n### Global Installation\n\nYou can also install the package globally or use it directly with npx:\n\n```bash\n# Install globally\nnpm install -g @mcp-dockmaster/mcp-server-jupiter\n\n# Or use directly with npx\nnpx @mcp-dockmaster/mcp-server-jupiter\n```\n\n## Configuration\n\n### Configure Claude Desktop\n\nTo configure Claude Desktop to use this MCP server:\n\n1. Open Claude Desktop\n2. Navigate to the Claude Desktop configuration file:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - Linux: `~/.config/Claude/claude_desktop_config.json`\n\n3. Add the MCP server configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-jupiter\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/your/mcp-server-jupiter/build/index.js\"\n      ]\n    }\n  }\n}\n```\n\nIf you've installed the package globally or want to use npx, you can configure it like this:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-jupiter\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@mcp-dockmaster/mcp-server-jupiter\"\n      ]\n    }\n  }\n}\n```\n\n### Running Locally\n\n```bash\n# If installed locally\nnode build/index.js\n\n# If installed globally\nmcp-server-jupiter\n\n# Using npx\nnpx @mcp-dockmaster/mcp-server-jupiter\n```\n\n## Usage\n\nOnce configured, restart Claude Desktop. Claude will now have access to the Jupiter swap tools. You can ask Claude to:\n\n1. Get a quote for swapping tokens:\n   ```\n   What's the quote for swapping 1 SOL to USDC?\n   ```\n\n2. Build a swap transaction:\n   ```\n   Build a swap transaction for the quote I just got.\n   ```\n\n3. Send a swap transaction:\n   ```\n   Send the swap transaction I just built.\n   ```\n\nClaude will use the MCP server to interact with Jupiter's swap API directly.\n\n## Development\n\n### Adding New Tools\n\nTo add new tools to the MCP server:\n\n1. Define the tool in `src/tools.ts`\n2. Create a handler function in the appropriate handler file\n3. Add the handler to the `handlers` object in `src/tools.ts`\n\n### Building\n\n```bash\nnpm run build\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "jupiter",
        "crypto",
        "swaps",
        "jupiter swap",
        "server jupiter",
        "connects jupiter"
      ],
      "category": "blockchain-and-crypto"
    },
    "diegofornalha--flow-mcp": {
      "owner": "diegofornalha",
      "name": "flow-mcp",
      "url": "https://github.com/diegofornalha/flow-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/diegofornalha.webp",
      "description": "Facilitates seamless interaction with the Flow EVM blockchain by utilizing standardized JSON-RPC methods, enabling AI applications to access blockchain information effortlessly.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-12T04:55:15Z",
      "readme_content": "# Servidor MCP para Flow EVM\n[![smithery badge](https://smithery.ai/badge/@diegofornalha/flow-mcp)](https://smithery.ai/server/@diegofornalha/flow-mcp)\n\nUm servidor Model Context Protocol (MCP) para interagir com a blockchain Flow EVM. Este servidor serve como uma ponte entre modelos de linguagem e a rede Flow EVM, permitindo consultas e interações com a blockchain de forma simplificada.\n\n## O que é Flow EVM?\n\nFlow EVM é uma implementação da Máquina Virtual Ethereum (EVM) na blockchain Flow, permitindo compatibilidade com contratos inteligentes, ferramentas e bibliotecas do ecossistema Ethereum, enquanto aproveita a arquitetura escalonável e eficiente da Flow.\n\n## Recursos\n\n- `flow_getNetworkInfo`: Retorna informações sobre a rede Flow EVM atual\n- `flow_getCode`: Obtém o código em um endereço específico da Flow EVM\n- `flow_chainId`: Retorna o ID da cadeia atual da rede Flow EVM\n- `flow_gasPrice`: Obtém o preço atual do gás na rede\n- `flow_getBalance`: Consulta o saldo de uma conta na Flow EVM\n- `flow_call`: Executa uma chamada de função sem criar uma transação\n- `flow_getLogs`: Obtém logs com base em critérios de filtro específicos\n- `flow_sendRawTransaction`: Envia uma transação assinada para a rede\n- `flow_blockNumber`: Retorna o número do bloco mais recente\n- `flow_checkCOA`: Verifica se um endereço é uma Conta Controlada por Cadence (COA)\n\n## Implementação\n\nEste servidor MCP implementa uma camada de abstração sobre os métodos RPC padrão do Ethereum, adaptados para o ambiente Flow EVM. Internamente, o servidor faz chamadas para os métodos RPC Ethereum (`eth_*`), mas expõe uma interface com nomenclatura Flow (`flow_*`) para maior clareza e identificação com o ecossistema Flow.\n\nA Flow EVM suporta a maioria dos métodos RPC do Ethereum, permitindo a interação com a rede Flow usando as mesmas ferramentas e padrões familiares do ecossistema Ethereum.\n\n## Redes Suportadas\n\n- Flow EVM Mainnet (Chain ID: 747)\n- Flow EVM Testnet (Chain ID: 545)\n\n## Uso\n\n1. Instale as dependências: `npm install`\n2. Compile o projeto: `npx tsc`\n3. Execute o servidor: `npm start`\n\n## Exemplo de uso com Claude\n\n```\nConsulte o saldo de 0x76A56657d20f572872A81b75530c905fD9F845e5 na Flow EVM.\n```\n\nClaude poderá usar a ferramenta `flow_getBalance` para obter esta informação.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "crypto",
        "flow",
        "evm blockchain",
        "blockchain crypto",
        "flow evm"
      ],
      "category": "blockchain-and-crypto"
    },
    "fakepixels--base-mcp-server": {
      "owner": "fakepixels",
      "name": "base-mcp-server",
      "url": "https://github.com/fakepixels/base-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/fakepixels.webp",
      "description": "Facilitates interactions with the Base blockchain via natural language, enabling wallet management, balance checks, and transaction executions. Supports operations on both Base Mainnet and Base Sepolia testnet.",
      "stars": 2,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-03-29T14:25:35Z",
      "readme_content": "# base-network-mcp-server\n\nThis is an MCP server for the Base network. It allows LLMs to perform blockchain operations on the Base network through natural language commands, including wallet management, balance checking, and transaction execution.\n\nThis server works with both Base Mainnet and Base Sepolia testnet.\n\n## Tools\n\nThe following tools are available:\n\n### process_command\n\nProcesses a natural language command for Base network operations. It accepts the following arguments:\n\n- `command`: The natural language command to process (e.g., \"Send 0.5 ETH to 0x1234...\")\n\nIt returns a structured response with the result of the operation, including transaction details for send operations, balance information for balance checks, and wallet details for wallet creation.\n\n### create_wallet\n\nCreates a new wallet on the Base network. It accepts the following arguments:\n\n- `name`: (Optional) A name for the wallet\n\nIt returns an object containing the wallet address, name, and other details.\n\n### check_balance\n\nChecks the balance of a wallet on the Base network. It accepts the following arguments:\n\n- `wallet`: (Optional) The wallet name or address to check (defaults to the primary wallet)\n\nIt returns the wallet balance in ETH.\n\n### list_wallets\n\nLists all available wallets.\n\nIt returns an array of wallet objects, each containing the wallet address, name, and other details.\n\n## Usage\n\n### With Claude Desktop\n\nClaude Desktop is a popular LLM client that supports the Model Context Protocol. You can connect your Base MCP server to Claude Desktop to perform blockchain operations via natural language commands.\n\nYou can add MCP servers to Claude Desktop via its config file at:\n\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\nTo add your Base MCP server to Claude Desktop, add the following configuration to the `mcpServers` object in the config file:\n\n```json\n{\n  \"mcpServers\": {\n    \"base\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"base-network-mcp-server\"\n      ],\n      \"env\": {\n        \"BASE_PROVIDER_URL\": \"https://api.developer.coinbase.com/rpc/v1/base/YOUR_API_KEY\",\n        \"WALLET_PRIVATE_KEY\": \"your_private_key_here\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n### Configuration\n\n- `BASE_PROVIDER_URL`: The URL of the Base network provider (Mainnet or Sepolia)\n- `WALLET_PRIVATE_KEY`: Your wallet private key for authentication and transaction signing\n- `DEFAULT_GAS_PRICE`: (Optional) Default gas price in Gwei\n\n### Programmatically (custom MCP client)\n\nIf you're building your own MCP client, you can connect to the Base MCP server programmatically using your preferred transport. The MCP SDK offers built-in stdio and SSE transports.\n\n## Installation\n\n```bash\nnpm i base-network-mcp-server\n# or\nyarn add base-network-mcp-server\n# or\npnpm add base-network-mcp-server\n```\n\n## Example\n\nThe following example uses the StreamTransport to connect directly between an MCP client and server:\n\n```javascript\nimport { Client } from '@modelcontextprotocol/sdk/client/index.js';\nimport { StreamTransport } from '@modelcontextprotocol/sdk/client/stream.js';\nimport { BaseMcpServer } from 'base-network-mcp-server';\n\n// Create a stream transport for both client and server\nconst clientTransport = new StreamTransport();\nconst serverTransport = new StreamTransport();\n\n// Connect the streams together\nclientTransport.readable.pipeTo(serverTransport.writable);\nserverTransport.readable.pipeTo(clientTransport.writable);\n\nconst client = new Client(\n  {\n    name: 'MyClient',\n    version: '0.1.0',\n  },\n  {\n    capabilities: {},\n  }\n);\n\n// Create and configure the Base MCP server\nconst server = new BaseMcpServer({\n  providerUrl: 'https://api.developer.coinbase.com/rpc/v1/base/YOUR_API_KEY',\n  privateKey: 'your_private_key_here',\n});\n\n// Connect the client and server to their respective transports\nawait server.connect(serverTransport);\nawait client.connect(clientTransport);\n\n// Call tools\nconst output = await client.callTool({\n  name: 'process_command',\n  arguments: {\n    command: 'Check my wallet balance',\n  },\n});\n\nconsole.log(output);\n// Example output:\n// {\n//   \"success\": true,\n//   \"message\": \"Balance of wallet \\\"default\\\": 1.5 ETH\",\n//   \"balance\": \"1.5\",\n//   \"wallet\": \"default\"\n// }\n```\n\n## Example Commands\n\nOnce integrated, you can use natural language commands like:\n\n- \"Create a new wallet for savings\"\n- \"Check my wallet balance\"\n- \"What's the balance of my savings wallet?\"\n- \"Send 0.1 ETH to 0x1234567890123456789012345678901234567890\"\n- \"Transfer 0.5 ETH from my savings wallet to 0xABCD...\"\n\n## Security Considerations\n\nSince this implementation interacts with real blockchain networks and handles private keys:\n\n1. **Private Key Security**: Store private keys securely and never commit them to version control\n2. **Use Testnet First**: Start with Base Sepolia testnet before moving to mainnet\n3. **Transaction Validation**: Always validate transaction parameters before sending\n4. **Error Handling**: Implement robust error handling for network issues\n5. **Rate Limiting**: Be aware of API rate limits when making frequent requests\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crypto",
        "blockchain",
        "fakepixels",
        "crypto fakepixels",
        "base blockchain",
        "mcp server"
      ],
      "category": "blockchain-and-crypto"
    },
    "goat-sdk--goat": {
      "owner": "goat-sdk",
      "name": "goat",
      "url": "https://github.com/goat-sdk/goat",
      "imageUrl": "/freedevtools/mcp/pfp/goat-sdk.webp",
      "description": "Connects blockchain applications with Claude for Desktop, enabling management of ERC-20 tokens and interaction with various blockchain networks through a user-friendly interface.",
      "stars": 886,
      "forks": 274,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T04:58:11Z",
      "readme_content": "<div>\n  <img src=\"https://github.com/user-attachments/assets/59fa5ddc-9d47-4d41-a51a-64f6798f94bd\" alt=\"GOAT\" width=\"100%\" height=\"auto\" style=\"object-fit: contain; max-width: 800px;\">\n\n<div>\n<img src=\"https://img.shields.io/npm/dm/%40goat-sdk%2Fcore\" alt=\"NPM Downloads\">\n\n<img src=\"https://img.shields.io/github/license/goat-sdk/goat\" alt=\"GitHub License\">\n</div>\n<div>\n<img src=\"https://img.shields.io/badge/v20.12.2-1?label=typescript&color=blue\" alt=\"Typescript Version\">\n\n<img src=\"https://img.shields.io/pypi/pyversions/goat-sdk\" alt=\"PyPI - Python Version\">\n</div>\n\n<br>\n<div align=\"center\">\n<div style=\"margin-bottom: 5px;\">\n<b>Sponsored by</b>\n</div>\n<div>\n<a href=\"https://www.crossmint.com\" target=\"_blank\"> <img src=\"https://github.com/user-attachments/assets/f3bdfbe3-2a87-48ec-aacb-a5e72737018c\" alt=\"Crossmint logo\" width=\"180px\" height=\"auto\" style=\"object-fit: contain;\"></a>\n</div>\n</div>\n\n## Table of Contents\n\n- [🐐 Overview](#-overview)\n- [🚀 Quickstarts](#-quickstarts)\n  - [📘 Typescript](#-typescript)\n  - [🐍 Python](#-python)\n- [🛠️ Supported tools and frameworks](#️-supported-tools-and-frameworks)\n  - [Tools](#tools)\n  - [Chains and wallets](#chains-and-wallets)\n  - [Agent Frameworks](#agent-frameworks)\n- [💻 Contributing](#-contributing)\n- [🤝 Community](#-community)\n\n# 🐐 Overview\n\nGOAT is the **largest agentic finance toolkit** for AI agents.\n\n**Create agents that can:**\n\n-   Send and receive payments\n-   Purchase physical and digital goods and services\n-   Engage in various investment strategies:\n    -   Earn yield\n    -   Bet on prediction markets\n    -   Purchase crypto assets\n-   Tokenize any asset\n-   Get financial insights\n\n**How it works**\n\nGOAT leverages blockchains, cryptocurrencies (such as stablecoins), and wallets as the infrastructure to enable agents to become economic actors:\n\n1. Give your agent a **[wallet](https://github.com/goat-sdk/goat/tree/main#chains-and-wallets)**\n2. Allow it to transact **[anywhere](https://github.com/goat-sdk/goat/tree/main#chains-and-wallets)**\n3. Use more than **[+200 tools](https://github.com/goat-sdk/goat/tree/main#tools)**\n4. Use it with **[any agent framework](https://github.com/goat-sdk/goat/tree/main#agent-frameworks)** of your choice\n\nSee everything GOAT supports [here](#️-supported-tools-and-frameworks).\n\n**Lightweight and extendable**\n\nDifferent from other toolkits, GOAT is designed to be lightweight and extendable by keeping its core minimal and allowing you to **install only the tools you need**.\n\nIf you don't find what you need on our more than 200 integrations you can easily:\n\n1. Create your own plugin\n2. Integrate a new chain\n3. Integrate a new wallet\n4. Integrate a new agent framework\n\nSee how to do it [here](#-contributing).\n\n**License**\n\nGOAT is free software, MIT licensed.\n\n# 🚀 Quickstarts\n\n***NOTE**: While a quickstart may be implemented for a specific chain, wallet and agent framework, GOAT's flexibility allows you to easily adapt it to any chain, wallet and agent framework without difficulty.*\n\n## 📘 Typescript\n\n-   **By use case**\n    -   **Money transmission**\n        -   Send and receive payments [[EVM](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/evm-send-and-receive-tokens), [Solana](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/solana-send-and-receive-tokens), [Chromia](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/chromia-send-and-receive-tokens), [Cosmos](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/cosmos-send-and-receive-tokens), [Fuel](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/fuel-send-and-receive-tokens), [Radix](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/radix-send-and-receive-tokens), [Zetrix](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/zetrix-send-and-receive-tokens)]\n    -   **Commerce**\n        -   Purchase any item on Amazon [[EVM](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/evm-purchase-on-amazon), [Solana](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/solana-purchase-on-amazon)]\n    -   **Investing**\n        -   Earn yield [[EVM](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/evm-defi-agent), [Solana](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/solana-defi-agent)]\n        -   Prediction markets [[EVM](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/evm-bet-on-polymarket)]\n        -   Purchase crypto assets [[EVM](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/evm-swap-tokens), [Solana](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/solana-swap-tokens)]\n    -   **Tokenization**\n        -   Tokenize non-fungible assets [[EVM](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/evm-mint-nft), [Solana](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/solana-mint-nft)]\n        -   Tokenize fungible assets [[Solana](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-use-case/solana-launch-token)]\n-   **By framework**\n    -   [Vercel AI](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-framework/vercel-ai)\n    -   [Langchain](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-framework/langchain)\n    -   [LlamaIndex](https://github.com/goat-sdk/goat/tree/main/typescript/packages/adapters/llamaindex)\n    -   [MCP (Model Context Protocol)](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-framework/model-context-protocol)\n    -   [Voice agent with ElevenLabs](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-framework/eleven-labs)\n    -   [Mastra](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-framework/mastra)\n    -   [OpenAI GPT via REST API](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-framework/chatgpt)\n    -   [Eliza Agent](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-framework/eliza)\n    -   [GAME Agent](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-framework/virtuals-game)\n-   **By wallet**\n\n    -   [Crossmint Smart Wallets](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-wallet/crossmint-smart-wallets)\n    -   [Crossmint Custodial Wallets](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-wallet/crossmint-solana-custodial-wallets)\n    -   [Lit](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-wallet/lit)\n    -   [Safe](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-wallet/safe)\n\n-   **See all typescript quickstarts [here](https://github.com/goat-sdk/goat/tree/main/typescript/examples).**\n\n## 🐍 Python\n\n-   **By use case**\n    -   **Money transmission**\n        -   Send and receive payments [[EVM](https://github.com/goat-sdk/goat/tree/main/python/examples/by-use-case/evm-send-and-receive-tokens), [Solana](https://github.com/goat-sdk/goat/tree/main/python/examples/by-use-case/solana-send-and-receive-tokens)]\n    -   **Investing**\n        -   Generate yield [[Solana](https://github.com/goat-sdk/goat/tree/main/python/examples/by-use-case/solana-usdc-yield-deposit)]\n        -   Purchase crypto assets [[EVM](https://github.com/goat-sdk/goat/tree/main/python/examples/by-use-case/evm-swap-tokens), [Solana](https://github.com/goat-sdk/goat/tree/main/python/examples/by-use-case/solana-swap-tokens)]\n-   **By framework**\n    -   [Langchain](https://github.com/goat-sdk/goat/tree/main/python/examples/by-framework/langchain)\n    -   [OpenAI Agents SDK](https://github.com/goat-sdk/goat/tree/main/python/examples/by-framework/openai-agents-sdk)\n    -   [AG2](https://github.com/goat-sdk/goat/tree/main/python/examples/by-framework/ag2)\n    -   [CrewAI](https://github.com/goat-sdk/goat/tree/main/python/examples/by-framework/crewai)\n    -   [GAME Agent](https://github.com/game-by-virtuals/game-python/tree/main/plugins/onchain_actions)\n    -   [ZerePy](https://github.com/blorm-network/ZerePy/blob/main/src/connections/goat_connection.py)\n-   **By wallet**\n    -   [Crossmint](https://github.com/goat-sdk/goat/tree/main/python/examples/by-wallet/crossmint)\n-   **See all python quickstarts [here](https://github.com/goat-sdk/goat/tree/main/python/examples).**\n\n# 🛠️ Supported tools and frameworks\n\n## Tools\n\n| Plugin | Tools | Typescript | Python |\n| --- | --- | --- | --- |\n| 0x | Get quotes and swap on 0x | [@goat-sdk/plugin-0x](https://github.com/goat-sdk/goat/tree/main/typescript/packages/plugins/0x) |\n| 1inch | Get the balances of a wallet using 1inch API | [@goat-sdk/plugin-1inch](https://github.com/goat-sdk/goat/tree/main/typescript/packages/plugins/1inch) | [goat-sdk-plugin-1inch](https://github.com/goat-sdk/goat/tree/main/python/src/plugins/1inch) |\n| Allora | Get price predictions using Allora API | [@goat-sdk/plugin-allora](https://github.com/goat-sdk/goat/tree/main/typescript/packages/plugins/allora) | [goat-sdk-plugin-allora](https://github.com/goat-sdk/goat/tree/main/python/src/plugins/allora) |\n| Avnu | Swap tokens on Starknet | [@goat-sdk/plugin-avnu](https://www.npmjs.com/package/@goat-sdk/plugin-avnu) |\n| Balancer | Swap tokens and provide liquidity on Balancer | [@goat-sdk/plugin-balancer](https://www.npmjs.com/package/@goat-sdk/plugin-balancer) |\n| Balmy | Swap tokens on Balmy | [@goat-sdk/plugin-balmy](https://www.npmjs.com/package/@goat-sdk/plugin-balmy) |\n| BetSwirl | Play casino games | [@goat-sdk/plugin-betswirl](https://www.npmjs.com/package/@goat-sdk/plugin-betswirl) |\n| BirdEye | Get token insights using BirdEye API | [@goat-sdk/plugin-birdeye](https://www.npmjs.com/package/@goat-sdk/plugin-birdeye) |\n| BMX | Get token insights using BMX API | [@goat-sdk/plugin-bmx](https://www.npmjs.com/package/@goat-sdk/plugin-bmx) |\n| CoinGecko | Get coin information using CoinGecko API | [@goat-sdk/plugin-coingecko](https://www.npmjs.com/package/@goat-sdk/plugin-coingecko) | [goat-sdk-plugin-coingecko](https://github.com/goat-sdk/goat/tree/main/python/src/plugins/coingecko) |\n| Coinmarketcap | Get coin information using Coinmarketcap API | [@goat-sdk/plugin-coinmarketcap](https://www.npmjs.com/package/@goat-sdk/plugin-coinmarketcap) |\n| Cosmosbank | Interact with Cosmos tokens | [@goat-sdk/plugin-cosmosbank](https://www.npmjs.com/package/@goat-sdk/plugin-cosmosbank) |\n| Crossmint Headless Checkout | Purchase any NFT on any chain using Crossmint | [@goat-sdk/plugin-crossmint-headless-checkout](https://www.npmjs.com/package/@goat-sdk/plugin-crossmint-headless-checkout) |\n| Crossmint Mint, Faucet, Wallets | Create a wallet, mint tokens and get test tokens on any chain using Crossmint | [@goat-sdk/plugin-crossmint-mint-faucet-wallets](https://www.npmjs.com/package/@goat-sdk/plugin-crossmint-mint-faucet-wallets) |\n| DeBridge | Bridge tokens on DeBridge | [@goat-sdk/plugin-debridge](https://www.npmjs.com/package/@goat-sdk/plugin-debridge) | [goat-sdk-plugin-debridge](https://github.com/goat-sdk/goat/tree/main/python/src/plugins/debridge) |\n| Dexscreener | Get token information using Dexscreener API | [@goat-sdk/plugin-dexscreener](https://www.npmjs.com/package/@goat-sdk/plugin-dexscreener) | [goat-sdk-plugin-dexscreener](https://github.com/goat-sdk/goat/tree/main/python/src/plugins/dexscreener) |\n| DPSN |  Push based real time data streams  | [@goat-sdk/dpsn-plugin](https://www.npmjs.com/package/@goat-sdk/dpsn-plugin) | [@goat-sdk/plugin-dpsn](https://pypi.org/project/goat-sdk-plugin-dpsn/) |\n| ENS | Resolve ENS names to addresses | [@goat-sdk/plugin-ens](https://www.npmjs.com/package/@goat-sdk/plugin-ens) |\n| Enso | Find the most optimal route between tokens | [@goat-sdk/plugin-enso](https://www.npmjs.com/package/@goat-sdk/plugin-enso) |\n| ERC721 | Interact with any ERC721 token | [@goat-sdk/plugin-erc721](https://www.npmjs.com/package/@goat-sdk/plugin-erc721) |\n| Etherscan | Get transaction information using Etherscan API | [@goat-sdk/plugin-etherscan](https://www.npmjs.com/package/@goat-sdk/plugin-etherscan) |\n| Farcaster | Read and post casts on Farcaster | [@goat-sdk/plugin-farcaster](https://www.npmjs.com/package/@goat-sdk/plugin-farcaster) | [goat-sdk-plugin-farcaster](https://github.com/goat-sdk/goat/tree/main/python/src/plugins/farcaster) |\n| Hedgey | Claim rewards on Hedgey | [@goat-sdk/plugin-hedgey](https://www.npmjs.com/package/@goat-sdk/plugin-hedgey) |\n| Ionic | Borrow and lend on Ionic | [@goat-sdk/plugin-ionic](https://www.npmjs.com/package/@goat-sdk/plugin-ionic) |\n| Ironclad | Create positions on Ironclad | [@goat-sdk/plugin-ironclad](https://www.npmjs.com/package/@goat-sdk/plugin-ironclad) |\n| Irys | Interact with Irys datachain | [@goat-sdk/plugin-irys](https://www.npmjs.com/package/@goat-sdk/plugin-irys) |\n| JSON RPC | Call any JSON RPC endpoint |[@goat-sdk/plugin-jsonrpc](https://www.npmjs.com/package/@goat-sdk/plugin-jsonrpc) | [goat-sdk-plugin-jsonrpc](https://github.com/goat-sdk/goat/tree/main/python/src/plugins/jsonrpc) |\n| Jupiter | Swap tokens on Jupiter | [@goat-sdk/plugin-jupiter](https://www.npmjs.com/package/@goat-sdk/plugin-jupiter) | [goat-sdk-plugin-jupiter](https://github.com/goat-sdk/goat/tree/main/python/src/plugins/jupiter) |\n| KIM | Swap tokens on KIM | [@goat-sdk/plugin-kim](https://www.npmjs.com/package/@goat-sdk/plugin-kim) |\n| Lulo | Deposit and Withdraw USDC on Lulo | [@goat-sdk/plugin-lulo](https://www.npmjs.com/package/@goat-sdk/plugin-lulo) |\n| Mayan | Cross-chain token swap using Mayan SDK (Solana, EVM, SUI) | [@goat-sdk/plugin-mayan](https://www.npmjs.com/package/@goat-sdk/plugin-mayan) |\n| Meteora | Create liquidity pools on Meteora | [@goat-sdk/plugin-meteora](https://www.npmjs.com/package/@goat-sdk/plugin-meteora) |\n| Mode Governance | Create a governance proposal on Mode | [@goat-sdk/plugin-mode-governance](https://www.npmjs.com/package/@goat-sdk/plugin-mode-governance) |\n| Mode Voting | Vote on a governance proposal on Mode | [@goat-sdk/plugin-mode-voting](https://www.npmjs.com/package/@goat-sdk/plugin-mode-voting) |\n| Mode Spray | Spray tokens on Mode | [@goat-sdk/plugin-mode-spray](https://www.npmjs.com/package/@goat-sdk/plugin-mode-spray) |\n| Nansen | Get Nansen information using Nansen API | [@goat-sdk/plugin-nansen](https://www.npmjs.com/package/@goat-sdk/plugin-nansen) | [goat-sdk-plugin-nansen](https://github.com/goat-sdk/goat/tree/main/python/src/plugins/nansen) |\n| OpenSea | Get nft and sales information using OpenSea API | [@goat-sdk/plugin-opensea](https://www.npmjs.com/package/@goat-sdk/plugin-opensea) | [goat-sdk-plugin-opensea](https://github.com/goat-sdk/goat/tree/main/python/src/plugins/opensea) |\n| Orca | Create positions on Orca | [@goat-sdk/plugin-orca](https://www.npmjs.com/package/@goat-sdk/plugin-orca) |\n| PlunderSwap | Currency exchange on Zilliqa | [@goat-sdk/plugin-plunderswap](https://www.npmjs.com/package/@goat-sdk/plugin-plunderswap) |\n| Polymarket | Bet on Polymarket | [@goat-sdk/plugin-polymarket](https://www.npmjs.com/package/@goat-sdk/plugin-polymarket) |\n| Pump.fun | Launch a token on Pump.fun | [@goat-sdk/plugin-pump-fun](https://www.npmjs.com/package/@goat-sdk/plugin-pump-fun) |\n| Renzo | Create a position on Renzo | [@goat-sdk/plugin-renzo](https://www.npmjs.com/package/@goat-sdk/plugin-renzo) |\n| Rugcheck | Check SPL token validity on Rugcheck | [@goat-sdk/plugin-rugcheck](https://www.npmjs.com/package/@goat-sdk/plugin-rugcheck) | [goat-sdk-plugin-rugcheck](https://github.com/goat-sdk/goat/tree/main/python/src/plugins/rugcheck) |\n| SNS | Interact with SNS | [@goat-sdk/plugin-sns](https://www.npmjs.com/package/@goat-sdk/plugin-sns) |\n| Solana Magic Eden | Purchase NFTs on Magic Eden | [@goat-sdk/plugin-solana-magiceden](https://www.npmjs.com/package/@goat-sdk/plugin-solana-magiceden) |\n| Solana NFTs | Get NFT information using Solana NFTs API | [@goat-sdk/plugin-solana-nfts](https://www.npmjs.com/package/@goat-sdk/plugin-solana-nfts) |\n| Starknet Token | Interact with Starknet tokens | [@goat-sdk/plugin-starknet-token](https://www.npmjs.com/package/@goat-sdk/plugin-starknet-token) |\n| Superfluid | Create streams with Superfluid | [@goat-sdk/plugin-superfluid](https://www.npmjs.com/package/@goat-sdk/plugin-superfluid) | [goat-sdk-plugin-superfluid](https://github.com/goat-sdk/goat/tree/main/python/src/plugins/superfluid) |\n| Synth | Get synthetic price data using Synth Subnet API | [@goat-sdk/plugin-synth-api](https://www.npmjs.com/package/@goat-sdk/plugin-synth-api) |\n| Tensor | Purchase tokens on Tensor | [@goat-sdk/plugin-tensor](https://www.npmjs.com/package/@goat-sdk/plugin-tensor) |\n| Uniswap | Swap tokens on Uniswap | [@goat-sdk/plugin-uniswap](https://www.npmjs.com/package/@goat-sdk/plugin-uniswap) | [goat-sdk-plugin-uniswap](https://github.com/goat-sdk/goat/tree/main/python/src/plugins/uniswap) |\n| Velodrome | Create a position on Velodrome | [@goat-sdk/plugin-velodrome](https://www.npmjs.com/package/@goat-sdk/plugin-velodrome) |\n| Worldstore | Purchase physical assets on Worldstore | [@goat-sdk/plugin-worldstore](https://www.npmjs.com/package/@goat-sdk/plugin-worldstore) |\n| ZeroDev Global Address | Create a global address on ZeroDev | [@goat-sdk/plugin-zero-dev-global-address](https://www.npmjs.com/package/@goat-sdk/plugin-zero-dev-global-address) |\n| Zilliqa | Interact with Zilliqa | [@goat-sdk/plugin-zilliqa](https://www.npmjs.com/package/@goat-sdk/plugin-zilliqa) |\n\n\n## Chains and wallets\n\n| Wallet                                 | Typescript                                                                                                     | Python                                                                                                 |\n| -------------------------------------- | -------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------ |\n| EVM (any EVM compatible chain)         | [@goat-sdk/wallet-evm](https://github.com/goat-sdk/goat/tree/main/typescript/packages/wallets/evm)             | [goat-sdk-wallet-evm](https://github.com/goat-sdk/goat/tree/main/python/src/wallets/evm)               |\n| Viem / Web3 (any EVM compatible chain) | [@goat-sdk/wallet-viem](https://github.com/goat-sdk/goat/tree/main/typescript/packages/wallets/viem)           | [goat-sdk-wallet-web3](https://github.com/goat-sdk/goat/tree/main/python/src/wallets/web3)             |\n| Solana                                 | [@goat-sdk/wallet-solana](https://github.com/goat-sdk/goat/tree/main/typescript/packages/wallets/solana)       | [goat-sdk-wallet-solana](https://github.com/goat-sdk/goat/tree/main/python/src/wallets/solana)         |\n| Crossmint                              | [@goat-sdk/wallet-crossmint](https://github.com/goat-sdk/goat/tree/main/typescript/packages/wallets/crossmint) | [goat-sdk-wallet-crossmint](https://github.com/goat-sdk/goat/tree/main/python/src/wallets/crossmint)   |\n| Aptos                                  | [@goat-sdk/wallet-aptos](https://github.com/goat-sdk/goat/tree/main/typescript/packages/wallets/aptos)         |\n| Chromia                                | [@goat-sdk/wallet-chromia](https://github.com/goat-sdk/goat/tree/main/typescript/packages/wallets/chromia)     |\n| Cosmos                                 | [@goat-sdk/wallet-cosmos](https://github.com/goat-sdk/goat/tree/main/typescript/packages/wallets/cosmos)       |\n| Fuel                                   | [@goat-sdk/wallet-fuel](https://github.com/goat-sdk/goat/tree/main/typescript/packages/wallets/fuel)           |\n| Lit                                    | [@goat-sdk/wallet-lit](https://github.com/goat-sdk/goat/tree/main/typescript/packages/wallets/lit)             |\n| Radix                                  | [@goat-sdk/wallet-radix](https://github.com/goat-sdk/goat/tree/main/typescript/packages/wallets/radix)         |\n| Safe                                   | [@goat-sdk/wallet-safe](https://github.com/goat-sdk/goat/tree/main/typescript/packages/wallets/safe)           |\n| Sui                                    | [@goat-sdk/wallet-sui](https://github.com/goat-sdk/goat/tree/main/typescript/packages/wallets/sui)             |\n| Starknet                               | [@goat-sdk/wallet-starknet](https://github.com/goat-sdk/goat/tree/main/typescript/packages/wallets/starknet)   |\n| Zetrix                                 | [@goat-sdk/wallet-zetrix](https://github.com/goat-sdk/goat/tree/main/typescript/packages/wallets/zetrix)       |\n| Zilliqa                                | [@goat-sdk/wallet-zilliqa](https://github.com/goat-sdk/goat/tree/main/typescript/packages/wallets/zilliqa)     |\n| MultiversX                             |                                                                                                                | [goat-sdk-wallet-multiversx](https://github.com/goat-sdk/goat/tree/main/python/src/wallets/multiversx) |\n\n## Agent Frameworks\n\n| Adapter                | Typescript                                                                                                                                 | Python                                                                                                                 |\n| ---------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------- |\n| AI SDK                 | [@goat-sdk/adapter-vercel-ai](https://github.com/goat-sdk/goat/tree/main/typescript/packages/adapters/vercel-ai)                           |\n| Langchain              | [@goat-sdk/adapter-langchain](https://github.com/goat-sdk/goat/tree/main/typescript/packages/adapters/langchain)                           | [goat-sdk-adapter-langchain](https://github.com/goat-sdk/goat/tree/main/python/src/adapters/langchain)                 |\n| CrewAI                 |                                                                                                                                            | [goat-sdk-adapter-crewai](https://github.com/goat-sdk/goat/tree/main/python/src/adapters/crewai)                       |\n| Smolagents             |                                                                                                                                            | [goat-sdk-adapter-smolagents](https://github.com/goat-sdk/goat/tree/main/python/src/adapters/smolagents)               |\n| ElevenLabs             | [@goat-sdk/adapter-eleven-labs](https://github.com/goat-sdk/goat/tree/main/typescript/packages/adapters/eleven-labs)                       |\n| LlamaIndex             | [@goat-sdk/adapter-llamaindex](https://github.com/goat-sdk/goat/tree/main/typescript/packages/adapters/llamaindex)                         |\n| Mastra                 | [@goat-sdk/adapter-mastra](https://github.com/goat-sdk/goat/tree/main/typescript/packages/adapters/mastra)                                 |\n| OpenAI Agents SDK      |                                                                                                                                            | [goat-sdk-adapter-openai-agents-sdk](https://github.com/goat-sdk/goat/tree/main/python/src/adapters/openai_agents_sdk) |\n| AG2                    |                                                                                                                                            | [goat-sdk-adapter-ag2](https://github.com/goat-sdk/goat/tree/main/python/src/adapters/ag2)                             |\n| Model Context Protocol | [@goat-sdk/adapter-model-context-protocol](https://github.com/goat-sdk/goat/tree/main/typescript/packages/adapters/model-context-protocol) |\n| Eliza                  | [@elizaos/plugin-goat](https://github.com/elizaos-plugins/plugin-goat)                                                                     |\n| GAME                   | [game-node](https://github.com/game-by-virtuals/game-node/tree/main/plugins/onChainActionsPlugin)                                          | [game-python](https://github.com/game-by-virtuals/game-python/tree/main/plugins/onchain_actions)                       |\n| ZerePy                 |                                                                                                                                            | [ZerePy](https://github.com/blorm-network/ZerePy/blob/main/src/connections/goat_connection.py)                         |\n\n# 💻 Contributing\n\nDo you want a protocol, chain, wallet or agent framework to be supported?\n\nSee guides on how to do that here:\n| Guide | | |\n| --- | --- | --- |\n| How to set up the project locally | [Typescript](https://github.com/goat-sdk/goat/tree/main/typescript/docs/2-set-up-the-project-locally.md) | [Python](https://github.com/goat-sdk/goat/tree/main/python/docs/2-set-up-the-project-locally.md) |\n| How to create a plugin | [Typescript](https://github.com/goat-sdk/goat/tree/main/typescript/docs/3-create-a-plugin.md) | [Python](https://github.com/goat-sdk/goat/tree/main/python/docs/3-create-a-plugin.md) |\n| How to add a new chain | [Typescript](https://github.com/goat-sdk/goat/tree/main/typescript/docs/4-add-a-new-chain.md) | [Python](https://github.com/goat-sdk/goat/tree/main/python/docs/4-add-a-new-chain.md) |\n| How to add a new wallet provider | [Typescript](https://github.com/goat-sdk/goat/tree/main/typescript/docs/5-add-a-wallet-provider.md) | [Python](https://github.com/goat-sdk/goat/tree/main/python/docs/5-add-a-wallet-provider.md) |\n\n# 🤝 Community\n- Follow us on [X](https://x.com/goat_sdk)\n- Join our [Discord](https://discord.gg/goat-sdk)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "sdk",
        "goat",
        "goat sdk",
        "sdk goat",
        "crypto goat"
      ],
      "category": "blockchain-and-crypto"
    },
    "heurist-network--heurist-mesh-mcp-server": {
      "owner": "heurist-network",
      "name": "heurist-mesh-mcp-server",
      "url": "https://github.com/heurist-network/heurist-mesh-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/heurist-network.webp",
      "description": "Connects to various blockchain and web3 tools via the Heurist Mesh API, enabling access to cryptocurrency data, smart contract security, and blockchain interaction.",
      "stars": 58,
      "forks": 14,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-13T12:01:06Z",
      "readme_content": "# Mesh Agent MCP Server\n\n![mesh-2](https://github.com/user-attachments/assets/da67c0e6-0709-4f28-ab82-8abfc0c0734c)\n\nA Model Context Protocol (MCP) server that connects to [Heurist Mesh](https://github.com/heurist-network/heurist-agent-framework/tree/main/mesh) APIs, providing Claude with access to various blockchain and web3 tools.\n\nHeurist Mesh is an open network of purpose-built AI agents and tools, each specialized in particular web3 domains such as blockchain data analysis, smart contract security, token metrics, and blockchain interaction. We are actively growing the Heurist Mesh ecosystem, continuously integrating more tools to expand its capabilities.\n\n<a href=\"https://glama.ai/mcp/servers/@heurist-network/heurist-mesh-mcp-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@heurist-network/heurist-mesh-mcp-server/badge\" alt=\"Mesh Agent Server MCP server\" />\n</a>\n\n## Features\n- Connects to the Heurist Mesh API \n- Loads tools for cryptocurrency data and Web3 use cases\n- Supports both SSE and stdio transports\n- Works with Claude in Cursor, Claude Desktop, and other MCP-compatible interfaces\n- Use one API key to access multiple services (e.g. CoinGecko crypto market data, GoPlus token security review)\n\n## 🔥 Just In: Customize Your Agents and Create Managed MCP Servers On-Demand\nYou can use [Heurist Mesh MCP Portal](https://mcp.heurist.ai/) to create SSE MCP Servers. Select your agents and compose a personalized swarm for your tasks!\n\n## Hosted SSE Endpoint\nWe provide a hosted SSE endpoint at https://sequencer-v2.heurist.xyz/mcp/sse. This includes all the tools from the following commonly used agents: `CoingeckoTokenInfoAgent`, `ElfaTwitterIntelligenceAgent`, `ExaSearchAgent`, `DexScreenerTokenInfoAgent`, `ZerionWalletAnalysisAgent`. This is a shared server and the performance may be unstable.\n\nCursor can directly access SSE servers. For Claude Desktop users, we recommend installing [mcp-proxy](https://github.com/sparfenyuk/mcp-proxy) to connect to the SSE server.\n\n## Prerequisites\n\n- Python 3.10 or higher\n- UV package manager (recommended)\n- OR Docker\n- [Get a Heurist API key](https://docs.heurist.ai/protocol-overview/credits) or you can [claim free API credits](https://dev-api-form.heurist.ai/) with invite code \"claude\"\n\n## Installation\n### Using UV (Recommended)\n```bash\n# Clone the repository\ngit clone https://github.com/heurist-network/heurist-mesh-mcp-server.git\ncd heurist-mesh-mcp-server\n\n# Install the package\nuv pip install -e .\n```\n\n### Using Docker\n```bash\n# Clone the repository\ngit clone https://github.com/heurist-network/heurist-mesh-mcp-server.git\ncd heurist-mesh-mcp-server\n\n# Build the Docker image\ndocker build -t mesh-tool-server .\n```\n## Usage\n### Option 1: Run with stdio Transport (for Claude Desktop)\n#### Using UV\nTo use this with Claude Desktop, add the following to your `claude_desktop_config.json`:\n```bash\n{\n  \"mcpServers\": {\n    \"heurist-mesh-agent\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/heurist-mesh-mcp-server/mesh_mcp_server\",  // Update this path\n        \"run\",\n        \"mesh-tool-server\"\n      ],\n      \"env\": {\n        \"HEURIST_API_KEY\": \"your-api-key-here\"  // Update this key\n      }\n    }\n  }\n}\n```\n#### Using Docker\nAlternatively, you can use Docker with Claude Desktop by adding this to your `claude_desktop_config.json`:\n```bash\n{\n  \"mcpServers\": {\n    \"mesh-agent\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"TRANSPORT=stdio\",\n        \"-e\", \"HEURIST_API_KEY=your-api-key-here\",  // Update this key\n        \"mesh-tool-server\"\n      ]\n    }\n  }\n}\n```\n\nReplace `/path/to/heurist-mesh-mcp-server` with the actual path to the repository and `your-api-key-here` with your Heurist API key.\n\n### Option 2: Run with SSE Transport (for Cursor)\n#### Setting up Environment Variables in `.env`\n```bash\ncp .env.example .env\nHEURIST_API_KEY=your-api-key-here\n```\n#### Using UV:\n```bash\nuv run mesh-tool-server --transport sse --port 8000\n```\n#### Using Docker:\n```bash\ndocker run -p 8000:8000 -e PORT=8000 mesh-tool-server\n```\nThen, in Cursor, add the MCP Server URL: **http://0.0.0.0:8000/sse**\n\n## Available Tools\nVisit https://mesh.heurist.ai/metadata.json or https://mcp.heurist.ai/ to view all available tools.\n\n## Featured tools\n| Tool Name | Description | Agent | Parameters | Required Params |\n|-----------|-------------|-------|------------|----------------|\n| get_coingecko_id | Search for a token by name to get its CoinGecko ID | CoinGeckoTokenInfoAgent | **token_name** (string): The token name to search for | token_name |\n| get_token_info | Get detailed token information and market data using CoinGecko ID (you can't use the token address or name or symbol) | CoinGeckoTokenInfoAgent | **coingecko_id** (string): The CoinGecko ID of the token | coingecko_id |\n| get_trending_coins | Get the current top trending cryptocurrencies on CoinGecko | CoinGeckoTokenInfoAgent | - | None |\n| get_specific_pair_info | Get trading pair info by chain and pair address on DexScreener | DexScreenerTokenInfoAgent | **chain** (string): Chain identifier (e.g., solana, bsc, ethereum, base)<br>**pair_address** (string): The pair contract address to look up | chain, pair_address |\n| get_token_pairs | Get the trading pairs by chain and token address on DexScreener | DexScreenerTokenInfoAgent | **chain** (string): Chain identifier (e.g., solana, bsc, ethereum, base)<br>**token_address** (string): The token contract address to look up all pairs for | chain, token_address |\n| get_token_profiles | Get the basic info of the latest tokens from DexScreener | DexScreenerTokenInfoAgent | - | None |\n| search_pairs | Search for trading pairs on DexScreener by token name, symbol, or address | DexScreenerTokenInfoAgent | **search_term** (string): Search term (token name, symbol, or address) | search_term |\n| get_trending_tokens | Get current trending tokens on Twitter | ElfaTwitterIntelligenceAgent | **time_window** (string): Time window to analyze | None |\n| search_account | Analyze a Twitter account with both mention search and account stats | ElfaTwitterIntelligenceAgent | **username** (string): Twitter username to analyze (without @)<br>**days_ago** (integer): Number of days to look back for mentions<br>**limit** (integer): Maximum number of mention results | username |\n| search_mentions | Search for mentions of specific tokens or topics on Twitter | ElfaTwitterIntelligenceAgent | **keywords** (array): List of keywords to search for<br>**days_ago** (integer): Number of days to look back<br>**limit** (integer): Maximum number of results (minimum: 20) | keywords |\n| answer | Get a direct answer to a question using Exa's answer API | ExaSearchAgent | **question** (string): The question to answer | question |\n| search | Search for webpages related to a query | ExaSearchAgent | **search_term** (string): The search term<br>**limit** (integer): Maximum number of results to return (default: 10) | search_term |\n| search_and_answer | Perform both search and answer operations for a query | ExaSearchAgent | **topic** (string): The topic to search for and answer | topic |\n| execute_search | Execute a web search query by reading the web pages | FirecrawlSearchAgent | **search_term** (string): The search term to execute | search_term |\n| generate_queries | Generate related search queries for a topic that can expand the research | FirecrawlSearchAgent | **topic** (string): The main topic to research<br>**num_queries** (integer): Number of queries to generate | topic |\n| fetch_security_details | Fetch security details of a blockchain token contract | GoplusAnalysisAgent | **contract_address** (string): The token contract address<br>**chain_id** (['integer', 'string']): The blockchain chain ID or 'solana' for Solana tokens. Supported chains: Ethereum (1), Optimism (10), Cronos (25), BSC (56), Gnosis (100), HECO (128), Polygon (137), Fantom (250), KCC (321), zkSync Era (324), ETHW (10001), FON (201022), Arbitrum (42161), Avalanche (43114), Linea Mainnet (59144), Base (8453), Tron (tron), Scroll (534352), opBNB (204), Mantle (5000), ZKFair (42766), Blast (81457), Manta Pacific (169), Berachain Artio Testnet (80085), Merlin (4200), Bitlayer Mainnet (200901), zkLink Nova (810180), X Layer Mainnet (196), Solana (solana) | contract_address |\n\n## Customizing Supported Agents\nThe server comes with a default set of agents. To modify which agents are available:\n1. Open the `server.py` file and locate the `Config` class.\n2. Edit the `DEFAULT_AGENTS` list to add or remove agents listed [at Heurist Metadata](https://mesh.heurist.ai/metadata.json)\n```python\nDEFAULT_AGENTS = [\n    \"CoinGeckoTokenInfoAgent\",\n    \"DexScreenerTokenInfoAgent\",\n    \"ElfaTwitterIntelligenceAgent\",\n    \"ExaSearchAgent\",\n    \"FirecrawlSearchAgent\",\n    \"GoplusAnalysisAgent\",\n    # Add agents here\n    \"NewAgent\"\n]\n```\n\n## License\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "heurist",
        "blockchain",
        "crypto",
        "crypto heurist",
        "heurist mesh",
        "heurist network"
      ],
      "category": "blockchain-and-crypto"
    },
    "itsanishjain--alchemy-sdk-mcp": {
      "owner": "itsanishjain",
      "name": "alchemy-sdk-mcp",
      "url": "https://github.com/itsanishjain/alchemy-sdk-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/itsanishjain.webp",
      "description": "Integrate blockchain operations and manage NFTs, including retrieving NFTs for a wallet, accessing NFT metadata, and obtaining the latest block number.",
      "stars": 0,
      "forks": 6,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-05T18:35:22Z",
      "readme_content": "# Alchemy MCP Plugin\n\n[![smithery badge](https://smithery.ai/badge/@itsanishjain/alchemy-sdk-mcp)](https://smithery.ai/server/@itsanishjain/alchemy-sdk-mcp)\n\nThis MCP plugin provides integration with the Alchemy SDK for blockchain and NFT operations.\n\n## Features\n\n- Get NFTs for a wallet address\n- Get NFT metadata\n- Get latest block number\n- More endpoints can be added as needed\n\n## Setup\n\n### Installing via Smithery\n\nTo install alchemy-sdk-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@itsanishjain/alchemy-sdk-mcp):\n\n```bash\nnpx -y @smithery/cli install @itsanishjain/alchemy-sdk-mcp --client claude\n```\n\n### Manual Installation\n1. Install dependencies:\n```bash\nnpm install\n```\n\n2. Build the project:\n```bash\nnpm run build\n```\n\n3. Configure your Alchemy API key:\n   - Get an API key from [Alchemy](https://www.alchemy.com/)\n   - Update the `ALCHEMY_API_KEY` in `settings.json`\n\n4. Start the server:\n```bash\nnpm start\n```\n\n## Available Endpoints\n\n### 1. Get NFTs for Owner\n```typescript\nPOST /getNftsForOwner\n{\n    \"owner\": \"wallet_address\"\n}\n```\n\n### 2. Get NFT Metadata\n```typescript\nPOST /getNftMetadata\n{\n    \"contractAddress\": \"contract_address\",\n    \"tokenId\": \"token_id\"\n}\n```\n\n### 3. Get Block Number\n```typescript\nPOST /getBlockNumber\n```\n\n## Error Handling\n\nAll endpoints include proper error handling and logging. Errors are returned in the format:\n```json\n{\n    \"error\": \"Error message\"\n}\n```\n\n## Logging\n\nThe server implements comprehensive logging using console.error for better debugging:\n- [Setup] logs for initialization\n- [API] logs for API calls\n- [Error] logs for error handling\n\n\n\n$env:ALCHEMY_API_KEY=\"KRdhdsBezoTMVajIknIxlXgBHc1Pprpw\"; node dist/index.js\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "nfts",
        "nft",
        "blockchain",
        "nfts wallet",
        "manage nfts",
        "nft metadata"
      ],
      "category": "blockchain-and-crypto"
    },
    "jamsturg--crypto-whale-tracker": {
      "owner": "jamsturg",
      "name": "crypto-whale-tracker",
      "url": "https://github.com/jamsturg/crypto-whale-tracker",
      "imageUrl": "/freedevtools/mcp/pfp/jamsturg.webp",
      "description": "Monitor whale movements and wallet activities across multiple blockchain networks with real-time transaction insights and advanced analytics capabilities. Supports multiple blockchains and offers a REST API for data interaction.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-16T17:22:43Z",
      "readme_content": "# Crypto Whale Tracker\n\nAdvanced blockchain monitoring system for tracking whale movements and wallet activities across multiple chains.\n\n## Features\n\n- Multi-chain support (ETH, BSC, Polygon)\n- Real-time transaction monitoring\n- Whale movement detection\n- Advanced analytics engine\n- High-performance data processing\n- REST API interface\n\n## Installation\n\n```bash\npip install -r requirements.txt\n```\n\n## Configuration\n\nCopy `.env.example` to `.env` and configure your settings:\n\n```bash\ncp .env.example .env\n```\n\n## Usage\n\n```bash\npython -m whale_tracker.main\n```\n\n## Documentation\n\nSee the `docs/` directory for detailed documentation.\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "blockchains",
        "whale",
        "whale tracker",
        "monitor whale",
        "crypto whale"
      ],
      "category": "blockchain-and-crypto"
    },
    "jincai--rootdata-mcp-server": {
      "owner": "jincai",
      "name": "rootdata-mcp-server",
      "url": "https://github.com/jincai/rootdata-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/jincai.webp",
      "description": "Integrate cryptocurrency and blockchain project data through an MCP interface, providing access to project details, organization information, and search functionalities.",
      "stars": 4,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-07-11T17:45:26Z",
      "readme_content": "# RootData MCP Server\n\n## Introduction\n\n这是一个基于 [Model Context Protocol (MCP)](https://github.com/microsoft/model-context-protocol) 的服务器，用于集成 RootData API，提供加密货币和区块链项目的数据查询功能。\n\n它允许 Claude 和其他 AI 助手通过 MCP 接口直接获取项目信息、机构详情和搜索结果。\n\n## Available Tools\n\n本服务器提供以下 MCP 工具：\n\n* **search**: 根据关键词搜索项目/VC/人物的简要信息\n* **get_project**: 根据项目 ID 获取项目的详细信息\n* **get_organization**: 根据机构 ID 获取风投机构的详细信息\n\n## Setup\n\n### Prerequisites\n\n* Python 3.10 或更高版本\n* [uv](https://github.com/astral-sh/uv) 包管理器（推荐）\n\n### Installation\n\n1. 克隆此仓库：\n\n```shell\ngit clone https://github.com/jincai/rootdata-mcp-server\ncd rootdata-mcp-server\n```\n\n2. 如果你还没有安装 uv，可以安装它：\n\n```shell\n# macOS/Linux\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Windows\ncurl -LsSf https://astral.sh/uv/install.ps1 | powershell\n```\n\n3. 安装依赖：\n\n```shell\n# 创建虚拟环境并激活\nuv venv\nsource .venv/bin/activate  # Windows 上: .venv\\Scripts\\activate\n\n# 安装依赖\nuv add \"mcp[cli]\" httpx python-dotenv\n```\n\n4. 设置环境变量：\n\n```shell\n# 创建 .env 文件存储 API 密钥\ncp .env.example .env\n\n# 在 .env 文件中设置 API 密钥\nROOTDATA_API_KEY=your-rootdata-api-key\n```\n\n5. 运行服务器：\n\n```shell\nuv run server.py\n```\n\n## Connecting to Claude Desktop\n\n1. 安装 [Claude Desktop](https://claude.ai/desktop)（如果你还没有安装）\n\n2. 创建或编辑 Claude Desktop 配置文件：\n\n```shell\n# macOS\nmkdir -p ~/Library/Application\\ Support/Claude/\nnano ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n3. 添加以下配置：\n\n```json\n{\n  \"mcpServers\": {\n    \"rootdata\": {\n      \"command\": \"/path/to/uv\",\n      \"args\": [\n        \"--directory\",\n        \"/absolute/path/to/rootdata-mcp-server\",\n        \"run\",\n        \"server.py\"\n      ]\n    }\n  }\n}\n```\n\n将 `/path/to/uv` 替换为 `which uv` 的结果，将 `/absolute/path/to/rootdata-mcp-server` 替换为此项目的绝对路径。\n\n4. 重启 Claude Desktop\n\n5. 现在你应该能在 Claude Desktop 的工具菜单（锤子图标）中看到 RootData 工具\n\n6. 尝试向 Claude 提问，例如：\n   * \"搜索以太坊相关的项目\"\n   * \"获取项目 ID 为 12 的详细信息\"\n   * \"查询机构 ID 为 219 的风投机构信息\"\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "crypto",
        "cryptocurrency",
        "crypto jincai",
        "jincai rootdata",
        "blockchain project"
      ],
      "category": "blockchain-and-crypto"
    },
    "kimchicrypto--kimchicrypto": {
      "owner": "kimchicrypto",
      "name": "kimchicrypto",
      "url": "https://github.com/kimchicrypto/kimchicrypto",
      "imageUrl": "/freedevtools/mcp/pfp/kimchicrypto.webp",
      "description": "A toolset for exploring cryptocurrency and finance that facilitates collaboration on projects integrating programming and blockchain technology. It aims to enhance understanding and skills in the crypto space.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-03-22T13:35:04Z",
      "readme_content": "- 👋 Hi, I’m @kimchicrypto\n- 👀 I’m interested in Crypto Space\n- 🌱 I’m currently learning about programming, blockchain and finance.\n- 💞️ I’m looking to collaborate on a project in crypto space focused in finance.\n\n\n<!---\nkimchicrypto/kimchicrypto is a ✨ special ✨ repository because its `README.md` (this file) appears on your GitHub profile.\nYou can click the Preview link to take a look at your changes.\n--->\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kimchicrypto",
        "crypto",
        "cryptocurrency",
        "crypto kimchicrypto",
        "kimchicrypto toolset",
        "blockchain crypto"
      ],
      "category": "blockchain-and-crypto"
    },
    "kukapay--blocknative-mcp": {
      "owner": "kukapay",
      "name": "blocknative-mcp",
      "url": "https://github.com/kukapay/blocknative-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kukapay.webp",
      "description": "Provides real-time gas price predictions and transaction cost estimates across multiple blockchains, enabling users to optimize transaction fees. Access information on supported chains and query gas prices with associated confidence levels.",
      "stars": 3,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-27T01:43:38Z",
      "readme_content": "# Blocknative MCP Server\n\nAn MCP server that provides real-time gas price predictions across multiple blockchains, powered by Blocknative.\n\n![GitHub License](https://img.shields.io/github/license/kukapay/blocknative-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Tools**:\n  - `predict_gas_price`: Fetches gas price predictions for a specified chain (default: Ethereum Mainnet, `chain_id=1`), including base fee and a table with confidence levels, price, max priority fee, and max fee.\n  - `estimate_gas_cost`: Estimates transaction costs based on gas limit, confidence level, and chain ID, returning costs in Gwei and ETH.\n  - `get_supported_chains`: Lists supported blockchains in a table with chain ID, system, and network.\n- **Prompt**:\n  - `gas_price_query`: A prompt template for querying gas prices at a specific confidence level and chain ID.\n- **Asynchronous**: Uses `httpx` for non-blocking HTTP requests to Blocknative's Gas Price and Chains APIs.\n- **Optional API Key**: Supports low-frequency access without a Blocknative API key; high-frequency use requires setting `BLOCKNATIVE_API_KEY`.\n\n## Prerequisites\n\n- **Python**: Version 3.10\n- **uv**: For dependency management and running the project ([installation guide](https://github.com/astral-sh/uv))\n- **Blocknative API Key** (optional): Required for high-frequency API access. Sign up at [Blocknative](https://www.blocknative.com/) to obtain a free API key.\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/blocknative-mcp.git\n   cd blocknative-mcp\n   ```\n\n2. **Set Up the Project with `uv`**:\n   ```bash\n   uv sync\n   ```\n\n3. **Set the Blocknative API Key (Optional)**:\n   - For high-frequency access, set the environment variable:\n     ```bash\n     export BLOCKNATIVE_API_KEY=\"your-api-key-here\"\n     ```\n   - For low-frequency access, skip this step.\n\n\n## Usage\n\nThe server provides three tools and one prompt, accessible via the FastMCP framework. You can run the server in development mode, execute it directly, or integrate it with Claude Desktop.\n\n### Running the Server\n\n1. **Development Mode with MCP Inspector**:\n   ```bash\n   uv run mcp dev blocknative-mcp\n   ```\n   This opens the MCP Inspector, a web interface for testing tools and prompts interactively.\n\n2. **Direct Execution**:\n   ```bash\n   uv run blocknative-mcp\n   ```\n\n3. **Claude Desktop Integration**:\n   ```bash\n   uv run mcp install blocknative-mcp --name \"Blocknative MCP Server\"\n   ```\n   This installs the server for use with Claude Desktop.\n\n### Tools\n\n- **`predict_gas_price(chain_id: int = 1) -> str`**:\n  Fetches gas price predictions for a chain (default: Ethereum Mainnet). Returns base fee and a Markdown table with confidence levels, price, max priority fee, and max fee.\n  - Example:\n    ```markdown\n    Gas Price Predictions for Chain ID 1 (ethereum/main):\n    - Base Fee Per Gas: 0.382910791 Gwei\n\n    | Confidence | Price (Gwei) | Max Priority Fee (Gwei) | Max Fee (Gwei) |\n    |------------|--------------|-------------------------|----------------|\n    | 99%        | 0.52         | 0.14                    | 0.9            |\n    | 95%        | 0.48         | 0.094                   | 0.86           |\n    | 90%        | 0.47         | 0.089                   | 0.85           |\n    | 80%        | 0.46         | 0.079                   | 0.84           |\n    | 70%        | 0.45         | 0.069                   | 0.83           |\n    ```\n\n- **`estimate_gas_cost(gas_limit: int, confidence: int = 99, chain_id: int = 1) -> str`**:\n  Estimates transaction costs based on gas limit, confidence level, and chain ID. Returns costs in Gwei and ETH.\n  - Example:\n    ```markdown\n    Estimated Gas Cost (Confidence 90%, Chain ID 1):\n    - Gas Limit: 21000\n    - Max Fee Per Gas: 0.85 Gwei\n    - Total Cost: 17850 Gwei (0.00001785 ETH)\n    ```\n\n- **`get_supported_chains(ctx: Optional[Context] = None) -> str`**:\n  Lists supported chains in a Markdown table with chain ID, system, and network.\n  - Example:\n    ```markdown\n    Supported Chains:\n\n    | Chain ID   | System   | Network   |\n    |------------|----------|-----------|\n    | 1          | ethereum | main      |\n    | 137        | polygon  | mainnet   |\n    | 8453       | base     | mainnet   |\n    | 11155111   | ethereum | sepolia   |\n    ```\n\n### Prompts\n    \n- **`gas_price_query(confidence: int, chain_id: int = 1) -> List[base.Message]`**:\n  A prompt template for querying gas prices at a specific confidence level and chain ID.\n  - Example:\n    ```markdown\n    - User: What is the current gas price for chain ID 1 transactions with 90% confidence?\n    - Assistant: Let me fetch the gas price predictions for chain ID 1.\n    ```\n\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "blockchains",
        "mcp",
        "crypto kukapay",
        "blockchain crypto",
        "mcp provides"
      ],
      "category": "blockchain-and-crypto"
    },
    "kukapay--crypto-pegmon-mcp": {
      "owner": "kukapay",
      "name": "crypto-pegmon-mcp",
      "url": "https://github.com/kukapay/crypto-pegmon-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kukapay.webp",
      "description": "Monitor stablecoin peg integrity across multiple blockchains to detect risks of depegging. Generate detailed stability reports, fetch real-time prices, and analyze historical data for various USD-pegged stablecoins.",
      "stars": 3,
      "forks": 6,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-24T06:43:32Z",
      "readme_content": "# Crypto-Pegmon-MCP\n\nAn MCP server that tracks stablecoin peg integrity across multiple blockchains, helping AI agents detect depegging risks before they escalate.\n\n<a href=\"https://glama.ai/mcp/servers/@kukapay/crypto-pegmon-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@kukapay/crypto-pegmon-mcp/badge\" alt=\"crypto-pegmon-mcp MCP server\" />\n</a>\n\n![License](https://img.shields.io/badge/license-MIT-green)\n![Python](https://img.shields.io/badge/python-3.10%2B-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Stability Reports**: Generate detailed reports assessing stablecoin peg stability, including maximum deviation and status (Stable, Moderately Stable, Unstable).\n- **Real-Time Price Monitoring**: Fetch current prices and calculate peg deviation from $1 for USD-pegged stablecoins.\n- **Historical Data Analysis**: Retrieve historical price data (up to 7 days by default) in Markdown table format.\n- **Supported Stablecoins**: Monitor 17 USD-pegged stablecoins, such as Tether (USDT), USD Coin (USDC), Dai (DAI), and yield-bearing tokens like Ethena Staked USDe (eUSDe).\n- **User-Friendly Output**: All data is presented in clean Markdown format for easy integration into reports or dashboards.\n\n## Supported Stablecoins\n\nThe server supports the following USD-pegged stablecoins:\n\n| Symbol     | Description                                            |\n|------------|--------------------------------------------------------|\n| USDT       | Tether's USD-pegged stablecoin, centrally issued.      |\n| USDC       | Circle's USD-backed stablecoin, widely used in DeFi.   |\n| DAI        | Decentralized stablecoin by MakerDAO, collateralized by crypto. |\n| BUSD       | Binance's USD-pegged stablecoin, centrally managed.    |\n| TUSD       | TrueUSD, a USD-backed stablecoin by TrustToken.        |\n| FRAX       | Fractional-algorithmic USD stablecoin by Frax Finance. |\n| USDD       | TRON's USD-pegged stablecoin, centrally issued.        |\n| USDS       | USD-pegged stablecoin, focused on stability.           |\n| SUSDS      | Staked USDS, yield-bearing stablecoin.                 |\n| EUSDE      | Ethena's staked USD stablecoin, yield-bearing.         |\n| USDY       | Ondo's USD yield stablecoin, designed for returns.     |\n| PYUSD      | PayPal's USD-pegged stablecoin for payments.           |\n| GUSD       | Gemini Dollar, USD-backed by Gemini Trust.             |\n| USDP       | Paxos Standard, a regulated USD stablecoin.            |\n| AAVE-USDC  | Aave's USD-pegged stablecoin for lending.              |\n| CURVE-USD  | Curve Finance's USD stablecoin for DeFi pools.         |\n| MIM        | Magic Internet Money, a decentralized USD stablecoin.  |\n\n## Installation\n\n### Prerequisites\n\n- Python 3.10 or higher\n- [uv](https://github.com/astral-sh/uv) (recommended for dependency management and running)\n\n### Steps\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/crypto-pegmon-mcp.git\n   cd crypto-pegmon-mcp\n   ```\n\n2. **Install Dependencies**:\n   Using uv (recommended):\n   ```bash\n   uv sync\n   ```\n\n3. **Run the Server**:\n   Using uv (recommended):\n   ```bash\n   uv run main.py\n   ```\n\n## Usage\n\nThe server provides four tools, accessible via the MCP interface. Below are examples for each tool and prompt.\n\n### 1. List Supported Stablecoins\nRetrieve a list of supported stablecoins with their descriptions.\n\n- **Prompt**:\n  ```plaintext\n  List all supported stablecoins with their descriptions.\n  ```\n- **Output**:\n  ```markdown\n  **Supported USD-Pegged Stablecoins**:\n\n  | Symbol     | Description                                            |\n  |------------|--------------------------------------------------------|\n  | USDT       | Tether's USD-pegged stablecoin, centrally issued.      |\n  | USDC       | Circle's USD-backed stablecoin, widely used in DeFi.   |\n  | ...        | ...                                                    |\n  ```\n\n### 2. Fetch Current Price\nGet the current price and peg deviation for a specific stablecoin.\n\n- **Prompt**:\n  ```plaintext\n  Get the current price of USDT.\n  ```\n- **Output**:\n  ```markdown\n  **USDT Current Price**: $1.0002, Peg Deviation: 0.02%\n  ```\n\n### 3. Fetch Historical Data\nRetrieve historical price data for a stablecoin over a specified number of days (default: 7).\n\n- **Prompt**:\n  ```plaintext\n  Show the price history of USDC for the last 7 days.\n  ```\n- **Output**:\n  ```markdown\n  **USDC Historical Data (Last 7 Days)**:\n\n  | Date       | Price  | Deviation (%) |\n  |------------|--------|---------------|\n  | 2025-04-29 | 1.0001 | 0.0100        |\n  | 2025-04-30 | 0.9998 | -0.0200       |\n  | ...        | ...    | ...           |\n  ```\n\n### 4. Analyze Peg Stability\nGenerate a comprehensive stability report for a stablecoin, including historical data, current price, and analysis.\n\n- **Prompt**:\n  ```plaintext\n  Analyze the peg stability of DAI over the past week.\n  ```\n- **Output**:\n  ```markdown\n  - **DAI Historical Data (Last 7 Days)**:\n    | Date       | Price  | Deviation (%) |\n    |------------|--------|---------------|\n    | 2025-04-29 | 1.0003 | 0.0300        |\n    | ...        | ...    | ...           |\n  - **DAI Current Price**: $1.0000, Peg Deviation: 0.00%\n  - **Stability Analysis for DAI**:\n    - Maximum Deviation: 0.15%\n    - Stability Status: Stable\n    - Note: Deviations > 3% indicate potential depegging risks.\n  ```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "stablecoin",
        "stablecoins",
        "peg",
        "stablecoin peg",
        "pegged stablecoins",
        "crypto pegmon"
      ],
      "category": "blockchain-and-crypto"
    },
    "kukapay--jupiter-mcp": {
      "owner": "kukapay",
      "name": "jupiter-mcp",
      "url": "https://github.com/kukapay/jupiter-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kukapay.webp",
      "description": "Execute token swaps on the Solana blockchain using Jupiter's Ultra API for optimal pricing and transaction management. Manage slippage and transaction landing for seamless trading experiences.",
      "stars": 21,
      "forks": 9,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-28T06:54:59Z",
      "readme_content": "# Jupiter MCP Server\n\nAn MCP server for executing token swaps on the Solana blockchain using Jupiter's new Ultra API. \n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- Fetch swap orders from Jupiter's Ultra API, combining DEX routing and RFQ (Request for Quote) for optimal pricing.\n- Execute swaps via Jupiter's Ultra API, handling slippage, priority fees, and transaction landing.\n\n\n## Prerequisites\n\n- **Node.js**: Version 18 or higher (for native `fetch` support).\n- **Solana Wallet**: A private key (base58-encoded) for signing transactions.\n- **RPC Endpoint**: Access to a Solana RPC node (e.g., `https://api.mainnet-beta.solana.com`).\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/jupiter-mcp.git\n   cd jupiter-mcp\n   ```\n\n2. **Install Dependencies**:\n   Ensure you have the MCP Server package installed along with other required dependencies:\n   ```bash\n   npm install\n   ```\n\n3. **Client Configuration**:\n\n```json\n{\n  \"mcpServers\": {\n    \"Jupiter-MCP\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/jupiter-mcp/server/index.js\"],\n      \"env\": {\n        \"SOLANA_RPC_URL\": \"solana rpc url you can access\",\n        \"PRIVATE_KEY\": \"your private key\"\n      }\n    }\n  }\n}\n```\n\n## Tools\n\n### Ultra API Tools\n- **`get-ultra-order`**:\n  - **Description**: Fetches a swap order from Jupiter's Ultra API, leveraging both DEX routing and RFQ for optimal pricing.\n  - **Inputs**: \n    - `inputMint`: Input token mint address (e.g., SOL or token pubkey).\n    - `outputMint`: Output token mint address (e.g., USDC or token pubkey).\n    - `amount`: Input amount as a string (e.g., \"1.23\").\n    - `slippageBps`: Slippage tolerance in basis points (e.g., 50 for 0.5%). \n  - **Output**: JSON with `requestId`, `transaction` (base64-encoded), `inputMint`, `outputMint`, `inAmount`, `outAmount`, `price`.\n\n- **`execute-ultra-order`**:\n  - **Description**: Requests Jupiter to execute the swap transaction on behalf of the wallet owner, handling slippage, priority fees, and transaction landing.\n  - **Inputs**: \n    - `requestId`: Unique identifier from `get-ultra-order`.\n    - `transaction`: Base64-encoded transaction from `get-ultra-order`.\n  - **Output**: JSON with `status`, `transactionId`, `slot`, `inputAmountResult`, `outputAmountResult`, `swapEvents`.\n\n## Example Interaction\n\nBelow are examples of interacting with the server using natural language prompts and expected responses:\n\n### Fetching a Swap Order\n- **Prompt**: \"Get a swap order to trade 1.23 SOL for USDC.\"\n- **Input**: \n  - Tool: `get-ultra-order`\n  - Arguments: \n    - `inputMint`: \"So11111111111111111111111111111111111111112\" (SOL)\n    - `outputMint`: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\" (USDC)\n    - `amount`: \"1.23\"\n    - `slippageBps`: 50\n- **Response**:\n  ```\n  {\n    \"requestId\": \"a770110b-82c9-46c8-ba61-09d955b27503\",\n    \"transaction\": \"AQAAAA...base64-encoded-transaction...==\",\n    \"inputMint\": \"So11111111111111111111111111111111111111112\",\n    \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n    \"inAmount\": \"1230000000\",\n    \"outAmount\": \"19950000\",\n    \"price\": 0.01621951219512195\n  }\n  ```\n\n### Executing a Swap\n- **Prompt**: \"Execute the swap order with request ID 'a770110b-82c9-46c8-ba61-09d955b27503' using the transaction provided.\"\n- **Input**: \n  - Tool: `execute-ultra-order`\n  - Arguments: \n    - `requestId`: \"a770110b-82c9-46c8-ba61-09d955b27503\"\n    - `transaction`: \"AQAAAA...base64-encoded-transaction...==\"\n- **Response**:\n  ```\n  {\n    \"status\": \"Success\",\n    \"transactionId\": \"5x...solana-transaction-signature...\",\n    \"slot\": 299283763,\n    \"inputAmountResult\": \"1230000000\",\n    \"outputAmountResult\": \"19950000\",\n    \"swapEvents\": [\n      {\n        \"type\": \"swap\",\n        \"inputMint\": \"So11111111111111111111111111111111111111112\",\n        \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n        \"inAmount\": \"1230000000\",\n        \"outAmount\": \"19950000\"\n      }\n    ]\n  }\n  ```\n\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crypto",
        "token",
        "blockchain",
        "solana blockchain",
        "crypto kukapay",
        "kukapay jupiter"
      ],
      "category": "blockchain-and-crypto"
    },
    "kukapay--token-minter-mcp": {
      "owner": "kukapay",
      "name": "token-minter-mcp",
      "url": "https://github.com/kukapay/token-minter-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kukapay.webp",
      "description": "Mint ERC-20 tokens across 21 blockchains, manage transactions, and check token balances through an interactive interface. Provide functionalities to deploy tokens, query metadata, and retrieve transaction details.",
      "stars": 15,
      "forks": 10,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-10T14:44:01Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/mseep-audited.png)](https://mseep.ai/app/kukapay-token-minter-mcp)\n\n# Token Minter MCP\n\nAn MCP server providing tools for AI agents to mint ERC-20 tokens, supporting 21 blockchains.\n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- Deploy new ERC-20 tokens with customizable parameters.\n- Query token metadata (name, symbol, decimals, total supply).\n- Initiate token transfers (returns transaction hash without confirmation).\n- Retrieve transaction details by hash.\n- Check native token balance of the current account.\n- Access token metadata via URI.\n- Interactive prompt for deployment guidance.\n\n### Tools\n\n- **deployToken**: Deploys a new ERC-20 token (name, symbol, initialSupply, decimals, chainId).\n- **transferToken**: Transfers ERC-20 tokens (tokenAddress, toAddress, amount, chainId).\n- **getTransactionInfo**: Retrieves transaction details (txHash, chainId).\n- **getTokenBalance**: Queries the balance of a specific ERC-20 token for the current account.\n- **getTokenInfo**: Queries ERC-20 token metadata (tokenAddress, chainId).\n- **getBalance**: Checks native token balance (chainId).\n\n### Resources\n\n- **tokenMetadata**: Exposes token metadata via `token://{chainId}/{address}`.\n\n### Prompts\n\n- **deployTokenGuide**: Guides token deployment with required parameters (chainId).\n\n## Prerequisites\n\n- [Node.js](https://nodejs.org/) v18.x or higher\n- [npm](https://www.npmjs.com/) (typically bundled with Node.js)\n- A valid [Infura API key](https://infura.io/) for EVM network access\n- An Ethereum private key for signing transactions\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/token-minter-mcp.git\n   cd token-minter-mcp/server\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n## Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"Token-Minter-MCP\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/token-minter-mcp/server/index.js\"],\n      \"env\": {\n        \"INFURA_KEY\": \"your infura key\",\n        \"PRIVATE_KEY\": \"your private key\"\n      }\n    }\n  }\n}\n```\n\n\n\n## Usage\n\n1. **Examples**:\n\n    > I want to create a new token called 'RewardToken' with the symbol 'RWD' on Arbitrum. It should have 5 million tokens in initial supply and use 6 decimal places.\n    \n    ```\n    Token deployment initiated on Arbitrum (chainId: 42161)!\n    Name: RewardToken\n    Symbol: RWD\n    Decimals: 6\n    Initial Supply: 5000000 tokens\n    Transaction Hash: 0xabc123...\n    Note: Use 'getTransactionInfo' to check deployment status.\n    ```\n\n    > Can you tell me how much POL I have in my wallet on the Polygon network?\n\n    ```\n    Account Balance on Polygon (chainId: 137):\n    Address: 0xYourAddressHere\n    Balance: 25.3478 POL\n    ```\n    \n    > What’s the balance of my newly created token on Polygon?\n    \n    ```\n    Token Balance on Polygon (chainId: 137):\n    Address: 0xYourAddressHere\n    Token: 0xYourTokenAddressHere\n    Symbol: ABCD\n    Balance: 10000000.00 ABCD\n    ```    \n\n    > Please transfer 150.75 USDC from my account to 0xRecipientAddressHere on Polygon.\"\n\n    ```\n    Transfer initiated on Polygon (chainId: 137)!\n    Token: 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\n    To: 0xRecipientAddressHere\n    Amount: 150.75 (150.75 tokens)\n    Transaction Hash: 0xdef456...\n    Note: Use 'getTransactionInfo' to check transfer status.\n    ```\n\n    > What’s the status of my token deployment transaction with hash 0xabc123... on Arbitrum?\n\n    ```\n    Transaction Info on Arbitrum (chainId: 42161):\n    Hash: 0xabc123...\n    From: 0xYourAddressHere\n    To: Contract Creation\n    Value: 0 ETH\n    Status: Success\n    Deployed Contract Address: 0xNewTokenAddressHere\n    ```\n\n    > Give me the details of the token at address 0xNewTokenAddressHere on Arbitrum.\n\n    ```\n    Token Info on Arbitrum (chainId: 42161):\n    Address: 0xNewTokenAddressHere\n    Name: RewardToken\n    Symbol: RWD\n    Decimals: 6\n    Total Supply: 5000000\n    ```\n\n    > How do I deploy a token on Polygon? What details do I need to provide?\n\n    ```\n    To deploy a token on Polygon (chainId: 137), use the \"deployToken\" tool with these parameters:\n    - name: The token's full name (e.g., \"MyToken\")\n    - symbol: The token's ticker (e.g., \"MTK\")\n    - initialSupply: Amount in token units (e.g., 1000000 for 1M tokens, default 1,000,000)\n    - decimals: Optional number of decimals (default is 18)\n    - chainId: Optional chain ID (default is 1 for Ethereum)\n    ```\n\n2. **Local Testing**:\n\n    Intall dependencies:\n    \n    ```bash\n    cd token-minter-mcp\n    npm install\n    ```\n\n    Start a local Hardhat node:\n    \n    ```\n    npx hardhat node\n    ```\n    \n    Use chainId: 1337 in your prompts to test locally.  \n\n## Supported Networks\n\n| Chain ID       | Network Name | Native Token |\n|----------------|--------------|--------------|\n| 1              | Ethereum     | ETH          |\n| 137            | Polygon      | POL          |\n| 56             | BSC          | BNB          |\n| 42161          | Arbitrum     | ETH          |\n| 10             | Optimism     | ETH          |\n| 59144          | Linea        | ETH          |\n| 8453           | Base         | ETH          |\n| 81457          | Blast        | ETH          |\n| 11297108109    | Palm         | PALM         |\n| 43114          | Avalanche    | AVAX         |\n| 42220          | Celo         | CELO         |\n| 324            | zkSync       | ETH          |\n| 5000           | Mantle       | MNT          |\n| 204            | opBNB        | BNB          |\n| 534352         | Scroll       | ETH          |\n| 1923           | Swellchain   | ETH          |\n| 130            | Unichain     | ETH          |\n| 23448594291968334 | Starknet  | ETH          |\n| 80094          | Berachain    | BERA         |\n| 999            | Hyperliquid  | HYPE         |\n| 146            | Sonic        | S            |\n| 1337           | Localhost    | ETH          |\n    \n\n## License\n\nThis project is licensed under the [MIT License](LICENSE). See the `LICENSE` file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tokens",
        "token",
        "blockchains",
        "kukapay token",
        "token minter",
        "crypto kukapay"
      ],
      "category": "blockchain-and-crypto"
    },
    "kukapay--uniswap-trader-mcp": {
      "owner": "kukapay",
      "name": "uniswap-trader-mcp",
      "url": "https://github.com/kukapay/uniswap-trader-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kukapay.webp",
      "description": "Automate token swaps on the Uniswap DEX across multiple blockchains, providing real-time price quotes and executing trades with configurable parameters. Generate trading suggestions based on liquidity and fees while supporting various blockchain networks.",
      "stars": 31,
      "forks": 10,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-30T20:19:48Z",
      "readme_content": "# Uniswap Trader MCP\n[![smithery badge](https://smithery.ai/badge/@kukapay/uniswap-trader-mcp)](https://smithery.ai/server/@kukapay/uniswap-trader-mcp)\n\nAn MCP server for AI agents to automate token swaps on Uniswap DEX across multiple blockchains.\n\n## Features\n- **Price Quotes**: Get real-time price quotes for token swaps with multi-hop route optimization.\n- **Swap Execution**: Execute swaps on Uniswap V3 with configurable slippage tolerance and deadlines.\n- **Swap Suggestions**: Generate trading suggestions based on liquidity, fees, and optimal paths.\n- **Multi-Chain Support**: Compatible with Ethereum, Optimism, Polygon, Arbitrum, Celo, BNB Chain, Avalanche, and Base.\n\n## Prerequisites\n- **Node.js**: Version 14.x or higher.\n- **npm**: For package management.\n- **Wallet**: A funded wallet with a private key for executing swaps.\n- **RPC Endpoints**: Access to blockchain RPC URLs (e.g., Infura, Alchemy) for supported chains.\n\n## Installation\n\n### Installing via Smithery\n\nTo install Uniswap Trader MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kukapay/uniswap-trader-mcp):\n\n```bash\nnpx -y @smithery/cli install @kukapay/uniswap-trader-mcp --client claude\n```\n\n### Manual Installation\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/uniswap-trader-mcp.git\n   cd uniswap-trader-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n## Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"Uniswap-Trader-MCP\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/uniswap-trader-mcp/server/index.js\"],\n      \"env\": {\n        \"INFURA_KEY\": \"your infura key\",\n        \"WALLET_PRIVATE_KEY\": \"your private key\"\n      }\n    }\n  }\n}\n```\n## Usage\n\n### Supported Chains\nThe following blockchains are supported. Ensure each chain is configured in `chainConfigs.js` with a valid RPC URL, WETH address, and SwapRouter address.\n\n| Chain ID | Name         | Notes                                      |\n|----------|--------------|--------------------------------------------|\n| 1        | Ethereum     | Mainnet, widely used for Uniswap trades   |\n| 10       | Optimism     | Layer 2, requires Optimism RPC            |\n| 137      | Polygon      | Fast and low-cost, uses MATIC as native   |\n| 42161    | Arbitrum     | Layer 2, Arbitrum One network             |\n| 42220    | Celo         | Mobile-first blockchain, uses CELO        |\n| 56       | BNB Chain    | Binance Smart Chain, uses BNB             |\n| 43114    | Avalanche    | High-throughput, uses AVAX                |\n| 8453     | Base         | Coinbase’s Layer 2, built on Optimism     |\n\n\n### Tools and Prompts\n\n#### 1. `getPrice`\nFetches a price quote for a Uniswap swap.\n\n**Schema**:\n- `chainId`: Number (default: 1)\n- `tokenIn`: String (e.g., `\"NATIVE\"` or token address)\n- `tokenOut`: String (e.g., `\"NATIVE\"` or token address)\n- `amountIn`: String (optional, required for `\"exactIn\"`)\n- `amountOut`: String (optional, required for `\"exactOut\"`)\n- `tradeType`: `\"exactIn\"` or `\"exactOut\"` (default: `\"exactIn\"`)\n\nExample prompt:\n\n```\nGet me a price quote for swapping 1 ETH to DAI on Ethereum.\n```\n\nOutput:\n\n```\n{\n  \"chainId\": 1,\n  \"tradeType\": \"exactIn\",\n  \"price\": \"3000.50\",\n  \"inputAmount\": \"1.000000\",\n  \"outputAmount\": \"3000.50\",\n  \"minimumReceived\": \"2985.50\",\n  \"maximumInput\": \"1.005000\",\n  \"route\": [\n    {\n      \"tokenIn\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n      \"tokenOut\": \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n      \"fee\": 3000\n    }\n  ],\n  \"estimatedGas\": \"150000\"\n}\n```\n\n#### 2. `executeSwap`\nExecutes a swap on Uniswap.\n\n**Schema**:\n- `chainId`: Number (default: 1)\n- `tokenIn`: String\n- `tokenOut`: String\n- `amountIn`: String (optional, required for `\"exactIn\"`)\n- `amountOut`: String (optional, required for `\"exactOut\"`)\n- `tradeType`: `\"exactIn\"` or `\"exactOut\"` (default: `\"exactIn\"`)\n- `slippageTolerance`: Number (default: 0.5, in percentage)\n- `deadline`: Number (default: 20, in minutes)\n\nExample prompt:\n\n```\nSwap 1 ETH for DAI on Ethereum with a 0.5% slippage tolerance and a 20-minute deadline.\n```\n\nOutput:\n\n```\n{\n  \"chainId\": 1,\n  \"txHash\": \"0x1234...abcd\",\n  \"tradeType\": \"exactIn\",\n  \"amountIn\": \"1.000000\",\n  \"outputAmount\": \"2990.75\",\n  \"minimumReceived\": \"2985.50\",\n  \"maximumInput\": \"1.005000\",\n  \"fromToken\": \"NATIVE\",\n  \"toToken\": \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n  \"route\": [\n    {\n      \"tokenIn\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n      \"tokenOut\": \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n      \"fee\": 3000\n    }\n  ],\n  \"gasUsed\": \"145000\"\n}\n```\n\n## License\nMIT License. See [LICENSE](LICENSE) for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "trader",
        "trading",
        "crypto",
        "uniswap trader",
        "crypto kukapay",
        "trader mcp"
      ],
      "category": "blockchain-and-crypto"
    },
    "lorrylockie--DARC": {
      "owner": "lorrylockie",
      "name": "DARC",
      "url": "https://github.com/lorrylockie/DARC",
      "imageUrl": "/freedevtools/mcp/pfp/lorrylockie.webp",
      "description": "Facilitates the creation and management of decentralized autonomous companies regulated by a plugin system, enabling operations like token management, dividend distribution, and structured governance on EVM-compatible blockchains.",
      "stars": 0,
      "forks": 0,
      "license": "Other",
      "language": "",
      "updated_at": "2023-12-18T04:20:58Z",
      "readme_content": "# Decentralized Autonomous Regulated Company (DARC)\n\nWelcome to the official repository for the Decentralized Autonomous Regulated Company (DARC) project. DARC is a project\nthat aims to create a decentralized autonomous company that is regulated by a plugin system based on commercial laws.\nThe project is currently in the early stages of development and is not yet ready for production use.\n\nEnglish | [简体中文](./README_cn.md)\n\n## Join our community\n\nTelegram: [https://t.me/projectdarc](https://t.me/projectdarc)\n\n## What is DARC?\n\nDecentralized Autonomous Regulated Company (DARC) is a company virtual machine that can be compiled and deployed to\nEVM-compatible blockchains with following features:\n\n- **Multi-level tokens**, each level token can be used as common stock, preferred stock, convertible bonds, board of\n  directors, product tokens, non-fungible tokens (NFT), with different prices, voting power and dividend power, which\n  are defined by the company's plugin(law) system.\n- **Program** composed of a series of DARC instructions that include managing tokens, dividends, voting, legislation,\n  purchasing, withdrawing cash, and other company operations.\n- **Dividend Mechanism** for distributing dividends to token holders according to certain rules.\n- **Plugin-as-a-Law**.The plugin system serves as the by-law or commercial contract that supervises all operations. All\n  company operations need to be approved by the plugin system or corresponding voting process.\n\n## By-Law Script\n\nBy-law script is a JavaScript-like programming language that is used to define the company's commercial rules and\noperations on DARC. For example:\n\n```javascript\nmint_tokens(   // mint token operation\n    [addr1, addr2, addr3],   // token address\n    [0, 0, 0],   // token class \n    [500, 300, 200]  // number of tokens\n);\n\npay_cash(100000000, 0, 1); // pay 0.1 ETH as purchase\n\ntransfer_tokens(   // transfer token operation\n    [addr1, addr2, addr3],   // token address\n    [0, 0, 0],   // token class \n    [100, 100, 200]  // number of tokens\n);\n\nadd_withdraw_cash(10000000);  // add 0.01 ETH to withdraw balance\n\nwithdraw_cash_to(  // withdraw cash from my account to other address\n    [addr4, addr5],       // withdraw cash to addr4, addr5\n    [10000000, 10000000]  // withdraw amount 0.01 ETH, 0.01 ETH\n);\n\n\n```\n\nAbove By-law Script will be transpiled via code generator and sent to corresponding DARC VM contract. The DARC will\nexecute the program if the plugin system approves. To add plugin and voting rules to the DARC, we can simple compose the\nplugin conditions and voting rules, then send them via operation `add_voting_rule()`, `add_and_enable_plugins()`\nor `add_plugins()`, and they will be deployed and effective immediately if the current plugin system approves the\noperation.\n\nHere is a quick example, assume we need to limit the transfer of tokens by major shareholders (>25%) by asking the board\nof directors for an all-hand vote (assuming 5 tokens in total), and it requires 100% approval (5 out of 5) in 1 hour. We\ncan add a new plugin and corresponding voting rule to the DARC VM contract:\n\n```javascript\nadd_voting_rule(  // add a voting rule (as index 5)\n    [\n        {\n            voting_class: [1], // voting token class: 1, level-1 token ownners (board of directors) are required to vote\n            approve_percentage: 99,  // 99% voting power is required to approve\n            voting_duration: 3600,  // voting duration: 1 hour (3600 seconds)\n            execute_duration: 3600,  // pending duration for execution: 1 hour (3600 seconds)\n            is_absolute_majority: true,  // absolute majority is required, not relative majority\n        }\n    ]\n)\n\nadd_and_enable_plugins(   // add and enable plugins (as index 7)\n    [\n        {\n            condition:  // define the condition:\n                (operation == \"transfer_tokens\")   // if operation is transfer_tokens\n                & (operator_total_voting_power_percentage > 25),  // and addr1's voting power > 25%\n            return_type: voting_needed,  // return type: requires a vote\n            return_level: 100,  // priority: 100\n            votingRuleIndex: 5 // voting rule index 5 (ask board of directors to vote and must 100% approve)\n            note: \"100% Approval is needed by board members to transfer tokens by major shareholders (>25%)\"\n            is_before_operation: false,  // check the plugin after the operation is executed in sandbox\n        }\n    ]\n)\n```\n\nAfter above By-Law Script is executed, the DARC VM contract will add a new plugin and voting rule, and the plugin will\nbe effective immediately (if there exists any voting procedure related to `add_voting_rule()`\nand `add_and_enable_plugins()`, the plugin will be effective after the voting process is approved). If the\noperator (`addr1`) tries to transfer tokens to addr2, the plugin will check the condition and return `voting_needed` to\nthe DARC VM contract, and the DARC VM contract will ask the board of directors (level-1 token owners) to vote. If the\nboard of directors approves the operation, the operation will be executed in the sandbox, otherwise the operation will\nbe rejected. For example, if there are 3 voting rules are triggerd, the voting operation will be:\n\n```javascript\nvote([true, true, true])\n```\n\nIf the voting process is approved by the existing voting rules and plugins, the new program will be approved to execute\nin the next execution pending duration (1 hour in this example), and the program owner or any other members can execute\nthe program in the next 1 hour, or the program will be ignored and removed from the pending list.\n\n## \"Plugin-as-a-Law\"\n\nThe law of DARC is defined in below psuedo-code:\n\n```javascript\nif (plugin_condition == true) {\n    plugin_decision = allows / denies / requires a vote\n}\n```\n\nEach plugin contains a condition expression tree and a corresponding decision (return type). When the condition tree is\nevaluated to true while the program is submitted before running, the plugin will make a decision by allows, denies or\nrequires a vote. For example:\n\n### Example 1: Anti-Dilutive shares\n\nAnti-Dilutive shares is a basic mechanism to prevent the company (including DAO and other on-chain \"tokenomics\") from\nissuing too many shares and dilute the ownership of the existing shareholders. In DARC, the company and early-stage\ninvestors can define a law of \"anti-dilutive shares\", and the law can be abolished by certain process.\n\n***Law 1 (Anti-Dilutive Shares): Shareholder X should always holds 10% of the total stock.***\n\n*Design of Plugin: If operation is minting new level-0 tokens, plugin should check the state of token ownerships, X\nshould always keep a minimum total voting power of 10%, as well as dividend power of 10% after executing the operation*\n\nIn By-law script, we can define the plugin with following conditions:\n\n```javascript\n// define X's address\nconst x_addr = \"0x1234567890123456789012345678901234567890\";\n\n// define the plugin\nconst anti_delutive = {\n\n    // define the trigger condition\n    condition:\n        ((operation == \"mint_tokens\")             // if operator is minting new tokens\n            | (operation == \"pay_to_mint_tokens\"))   // or operator is paying to mint new tokens\n        &                                          // and        \n        ((total_voting_power_percentage(x) < 10)    // X's total voting power < 10%\n            | (total_dividend_power_percentage(x) < 10)),   // or X's total dividend power < 10%\n\n    // define the decision: reject the operation\n    return_type: NO,\n\n    // define the priority: 100\n    return_level: 100,\n\n    // check the plugin after the operation is executed in sandbox\n    is_before_operation: false,\n}\n```\n\nSince it checks the state of token ownerships, the plugin should be executed after the operation is executed inside the\nDARC's sandbox. If the plugin's condition is evaluated to true, the plugin will deny the operation after executing in\nthe sandbox, and the operation will be rejected to be executed in the real environment. Otherwise, \"minting new tokens\"\nwill be allowed to execute.\n\nWhen this plugin is added to the DARC, the operator (the author of current program) must mint extra tokens to\naddress `x_addr` to satisfy the **Law 1** above, otherwise it will be rejected. For example, the DARC has only one level\nof tokens (level 0, voting power = 1, dividend power = 1), the stock ownerships are:\n\n| ShareHolders | Number of tokens | Percentage |\n|--------------|------------------|------------|\n| CEO          | 400              | 40%        |\n| CTO          | 300              | 30%        |\n| CFO          | 200              | 20%        |\n| VC X         | 100              | 10%        |\n| **Total**    | **1000**         | **100%**   |\n\nIf the operator want to mint 200 tokens and issue them to VC Y, the operator must mint 20 tokens to address `x_addr` to\nsatisfy the **Law 1** above, otherwise the operation will be rejected. Here is a sample investment program by VC Y:\n\n```javascript\npay_cash(1000000000000)  // pay 1000 ETH to the DARC\nmint_tokens(20, 0, x_addr)  // mint 20 level-0 tokens to address x_addr\nmint_tokens(180, 0, y_addr)  // mint 180 level-0 tokens to address y_addr\nadd_and_enable_plugin([new_law_1, new_law_2, new_law_3])  // investment laws by VC Y\n```\n\nAfter the operation, the stock ownerships are:\n\n| ShareHolders | Number of tokens | Percentage |\n|--------------|------------------|------------|\n| CEO          | 400              | 33.33%     |\n| CTO          | 300              | 25%        |\n| CFO          | 200              | 16.67%     |\n| VC X         | 120              | 10%        |\n| VC Y         | 180              | 15%        |\n| **Total**    | **1200**         | 100%       |\n\nAlso another plugin should be added to the DARC to define the legislation of the \"Abolish Law 1\":\n\n***Law 1.1(Law 1 Appendix): Both Law 1 and Law 1 Appendix (current Law) can be abolished if and only if the operator is\nX***\n\n*Design of Plugin: If operation is \"disable_plugins\", and the plugin that to be disabled is with `id == 1` or `id == 2`,\nand the operator is not X, then the plugin should reject the operation (assume the anti dilutive law index is 1, and the\nappendix law index is 2, both are before-operation plugins)*\n\n```javascript\nconst law_1_appendix = {\n\n    // define the trigger condition\n    condition:\n        (operation == \"disable_plugins\")\n        & ((disable_after_op_plugin_id == 1) | (disable_after_op_plugin_id == 2))\n        & (operator != x_addr),\n\n    // define the decision\n    return_type: no,\n\n    // define the priority\n    return_level: 100,\n\n    // reject the operation before sandbox\n    is_before_operation: true,\n}\n```\n\n### Example 2: Bet-on Agreement/Valuation-Adjustment Mechanism(VAM) Agreement\n\n***Law2: If total revenue < 1000 ETH by 2035/01/01, shareholder X can take over 75% of total voting power and 90% of\ndividend power.***\n\n*Design of Plugin: After executing in sandbox, check the following conditions:*\n\n- *timestamp >= 2035/01/01*\n\n- *revenue since 2000/01/01 < 1000 ETH*\n\n- *operation is \"mint_tokens\"*\n\n- *total voting power of x <= 75%*\n\n- *the dividend power of x <= 90%*\n\n*then the plugin should approve the operation*\n\nIn By-law script, we can define the above plugin as following:\n\n```javascript\nconst bet_on_2 = {\n\n    // define the trigger condition\n    condition:\n        (timestamp >= toTimestamp('2035/01/01')) &\n        (revenue_since(946706400) < 1000000000000) & // 1000000000000 Gwei = 1000 ETH\n        (operation == \"mint_tokens\") &\n        (total_voting_power_percentage(x) < 75) &\n        (total_dividend_power_percentage(x) < 90),\n\n    // define the decision\n    return_type: yes,\n\n    // define the priority\n    return_level: 100,\n\n    // approve the operation after executing in sandbox\n    is_before_operation: false,\n}\n```\n\n### Example 3: Employee Payroll\n\n***Law 3: The payroll for employees with role level X should be 10 ETH per month.***\n\n*Design of Plugin: If operation is \"add withdrawable cash\", the amount is less than or equals to 10 ETH, and the last\noperation was at least 30 days, then this operation should be approved and skip sandbox check*\n\nIn By-law script, we can define the plugin with following conditions (for example, level X = 2 can withdraw 10 ETH per\n30 days):\n\n```javascript\nconst payroll_law_level_2 = {\n    condition:\n        (operation == \"add_withdrawable_cash\") &   // operation is \"add withdrawable cash\"\n        (member_role_level == 2) &   // the operator address is in role level 2\n\n        // add cash by < every 30 days = 2592000 seconds\n        (operator_last_operation_window(\"add_withdrawable_cash\") >= 2592000) &\n        // each time add < 10000000000 Gwei = 10 ETH to the account\n        (add_withdrawable_cash_amount <= 10000000000),\n\n    // approve the operation and skip sandbox check\n    return_type: yes_and_skip_sandbox,\n    return_level: 1\n    is_before_operation: true,\n}\n```\n\nWith the plugin above, the operator can add withdrawable cash to the employee's account with amount less than or equals\nto 10 ETH, and the last operation was at least 30 days. The plugin will approve the operation and skip the sandbox\ncheck. When the employee address is disable, removed from role level X, or other plugins with higher priority deny the\noperation, these operations will be rejected.\n\n### Example 4: Voting and legislation\n\nFor daily operations, the board of directors can be defined as a group of addresses, and the voting mechanism can be\nused to make decisions. For example, let's design the voting mechanism for the following scenario:\n\n1. Any address X with more than 10% total voting power can be added to the board by minting 1 token (level 2, board\n   voting token), if and only if the behavior is approved by 2/3 of all the board members (voting rule 1).\n\n```javascript\nconst add_board_member = {\n    condition:\n        (operation == \"mint_tokens\") &   // operation is \"mint_tokens\"\n        (mint_tokens_level == 2) &  // the token level is 2\n        (mint_tokens_amount == 1) &  // the amount is 1\n        (operator_total_voting_power_percentage >= 10),   // the operator address holds at least 10% of the total voting power\n    return_type: voting_needed,\n    voting_rule: 1,  // Under the voting rule 1, the operation will be approved if and only if 2/3 of all the board members approve the operation\n    return_level: 100,\n    is_before_operation: false, // make the decision after executing in sandbox\n}\n```\n\n2. Any operator with more than 7% of all voting power can submit `enable_plugins()` , and it needs to be approved by\n   100% of all the board members. Each operator can try to activate plugin per 10 days.\n\n```javascript\nconst enable_plugin = {\n    condition:\n        (operation == \"enable_plugins\") &   // operation is \"enable_plugins\"\n        (operator_total_voting_power_percentage >= 7) &   // the operator address holds at least 7% of the total voting power\n        (operator_last_operation_window(\"enable_plugin\") >= 864000),  // each operator can try to enable plugins once per 864000 seconds (10 days)\n\n    return_type: voting_needed,\n    voting_rule: 2,  // Under the voting rule 2, the operation will be approved if and only if 100% of all the board members approve the operation\n    return_level: 100,\n    is_before_operation: false, // make the decision after executing in sandbox\n}\n```\n\n3. To disable plugins 2,3 and 4, the operator needs to hold at least 20% of total voting power, and the operation needs\n   to be approved by 70% of all common stock token(level-0) voters as relative majority(voting rule 2). For each member\n   of DARC, this operation can be executed once per 15 days (1296000 seconds).\n\n```javascript\nconst disable_2_3_4 = {\n    condition:\n        (operation == \"disable_plugins\") &   // operation is \"disable_plugins\"\n        (\n            disable_after_op_plugin_id == 2\n            | disable_after_op_plugin_id == 3\n            | disable_after_op_plugin_id == 4\n        ) &  // disable after operation plugins 2,3 and 4\n        (operator_total_voting_power_percentage >= 20) &   // the operator address holds at least 20% of the total voting power\n        (operator_last_operation_window(\"disable_plugins\") >= 1296000),  // each operator can try to disable plugins once per 1296000 seconds (15 days)\n    return_type: voting_needed,\n    voting_rule: 3,  // Under the voting rule 3, the operation will be approved if and only if 70% of all the common stock holders approve the operation\n    is_before_operation: false, // make the decision after sandbox check\n}\n```\n\n### Example 5: Multi-level Tokens: Product tokens and Non-fungible tokens\n\nHere is an example of how to design a token with different levels of voting power and dividend power. The voting power\nand dividend power are used to calculate the voting power and dividend power of each token holder. Here is the table of\nthe token levels:\n\n| Level | Token                            | Voting Power | Dividend Power | Total Supply |\n|-------|----------------------------------|--------------|----------------|--------------|\n| 0     | Level-0 Common Stock             | 1            | 1              | 100,000      |\n| 1     | Level-1 Stock                    | 20           | 1              | 10,000       |\n| 2     | Board of Directors               | 1            | 0              | 5            |\n| 3     | Executives                       | 1            | 0              | 5            |\n| 4     | Non-Voting Shares                | 0            | 1              | 200,000      |\n| 5     | Product Token A (0.01 ETH/token) | 0            | 0              | ∞            |\n| 6     | Product Token B (10 ETH/token)   | 0            | 0              | ∞            |\n| 7     | Non-Fungible Token #1            | 0            | 0              | 1            |\n| 8     | Non-Fungible Token #2            | 0            | 0              | 1            |\n| 9     | Non-Fungible Token #3            | 0            | 0              | 1            |\n| 10    | Non-Fungible Token #4            | 0            | 0              | 1            |\n| 11    | Non-Fungible Token #5            | 0            | 0              | 1            |\n| ...   | ...                              | ...          | ...            | ...          |\n\nTo pay for service or prochase for products, customers can use `pay_cash()` to pay for the service directly, or\nuse `pay_to_mint_tokens()` as a payment method and receive product tokens/NFTs.\n\nHere is an example about how to define \"Product Token A\" and \"NFT\" price and total supply.\n\n```javascript\nconst product_token_A_price_law = {\n    condition:\n        (operation == \"pay_to_mint_tokens\") &   // operation is \"pay_to_mint_tokens\"\n        (pay_to_mint_tokens_level == 5) &  // the token level is 5\n        (pay_to_mint_price_per_token >= 10000000000000000),   // price per token >= 0.01 ETH = 10000000000000000 wei\n\n    return_type: yes_and_skip_sandbox,  // approve the operation and skip sandbox check\n    return_level: 1,\n    is_before_operation: true, // approve the operation and skip sandbox check\n}\n\nconst NFT_price_law = {\n    condition:\n        (operation == \"pay_to_mint_tokens\") &   // operation is \"pay_to_mint_tokens\"\n        (pay_to_mint_tokens_level >= 7) &  // the token level is 7 or higher\n        (pay_to_mint_token_amount == 1) &  // only allow to mint 1 token at a time\n        (pay_to_mint_current_level_total_supply == 0) &  // current total supply is 0\n        (pay_to_mint_price_per_token >= 10000000000000000000),   // price per token >= 10 ETH = 10000000000000000000 wei\n\n    return_type: yes_and_skip_sandbox,  // approve the operation and skip sandbox check\n    return_level: 1,\n    is_before_operation: true, // approve the operation and skip sandbox check\n}\n```\n\n### Example 6: Lock dividend yield rate for 5 years\n\nThe dividend mechanism is designed to distribute dividends to token holders under certain rules:\n\n1. For each `X` purchase transactions, take Y‱ of the total income as the dividendable cash\n2. The `offer_dividend()` operation can be called, which will distribute the dividendable cash to token holders'\n   dividend withdraw balance\n3. The amount of dividends per token holder (X) is calculated by the following\n   formula: `dividend_X = dividendable_cash * dividend_power(X) / total_dividend_power`\n4. After the `offer_dividend()` operation is called, the dividendable cash and dividendable transaction counter will be\n   set to 0, and the dividend withdraw balance of each token holder will be increased by `dividend_X`\n\nTo make sure the dividend yield rate is stable, we can add a plugin to the DARC to lock the dividend yield rate for 5\nyears by limiting the `set_parameters()` function.\n\n***Law 6: The dividend yield rate should be locked > 500‱ (5%) before 2030-01-01.***\n\n```javascript\nconst dividend_yield_rate_law = {\n    condition:\n        (operation == \"set_parameters\") &  // operation is \"set_parameters\"\n        (set_parameters_key == \"dividendPermyriadPerTransaction\") &  // the key is \"dividend_yield_rate\"\n        (set_parameters_value < 500) &  // the value is < 500‱ (5%)\n        (timestamp < 1893477600),  // the timestamp < unix timestamp  2030-01-01 00:00:00 (UTC) \n\n    return_type: no,  // reject the operation\n    return_level: 1,\n    is_before_operation: true, // reject the operation and skip sandbox check\n}\n```\n\n### Example 7: Investment program package\n\nHere is an unofficial example program of **Simple agreement for future equity (SAFE)**, a common investment contract by\na VC firm:\n\n1. The VC firm will pay 1000 ETH (1000000000000 Gwei) cash to the DARC as investment\n2. The VC firm will be granted 100,000,000 level-0 tokens (common stock) and 1 level-2 token (board of members)\n3. The VC firm will be granted the right to disable plugins 5, 6, 7\n4. The VC firm will be granted the right to enable plugins 8, 9, 10, 11\n5. The VC firm will be granted the right to change its role to level-5 (majority shareholder level)\n6. It's recommended to sign and scan a PDF document to record the agreement, upload the PDF document to IPFS, and add\n   the IPFS hash `QmcpxHN3a5HYnPurtuDs3jDfDSg1LPDe2KVBUG4RifcSbC` to the DARC permanent storage array. This can help the\n   emergency agent to verify and fix DARC technical issues if needed.\n\n```javascript\nconst vc_addr = \"0x1234567890123456789012345678901234567890\";  // define my address\n\npay_cash(1000000000000, 0, 1);  // pay 1000 ETH = 1000000000000 Gwei cash\n\nmint_token([vc_addr], [100000000], [0]);  // mint 100,000,000 level-0 tokens (common stock) to VC firm\n\nmint_token([vc_addr], [1], [2]);  // mint a single 2-level token (board of members) to VC firm\n\ndisable_plugins([5, 6, 7], [false, false, false]) // disable previes after-operation plugins 5, 6, 7\n\nenable_plugins([8, 9, 10, 11], [false, false, false, false]) // enable new added plugins 8, 9, 10, which were added before this program\n\nchange_member_role(vc_addr, 5);  // change the role of VC firm to level-5 (majority shareholder level)\n\n/** Finally, sign and scan a SAFE document,\n * upload and pin on IPFS, and add the IPFS hash value to the DARC\n * just in case if DARC needs emergency agent to take over the DARC\n */\nadd_storage(['QmcpxHN3a5HYnPurtuDs3jDfDSg1LPDe2KVBUG4RifcSbC']);\n```\n\n## Building the source\n\nSince Hardhat and OpenZeppelin are used, the project can be built using the following commands:\n\n1. Install dependencies\n\n   We recommend that you use `pnpm` instead of `npm`, but `npm` can also work.\n\n   `pnpm` is a newer package manager that has some advantages over npm. It is faster, more efficient, and disk-space\n   friendly.\n\n    ```shell\n    cd darc-protocal\n    npm install\n    ```\n\n2. Compile the contracts\n\n    ```shell\n    npx hardhat compile\n    ```\n\n3. Run the Darc test network\n\n    ```shell\n    npm run node\n    ```\n\n4. Test contracts\n\n    ```shell\n    npx hardhat test\n    REPORT_GAS=true npm run test\n    ```\n\n5. Deploy contracts\n\n    ```shell\n    npm run deploy\n    ```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "lorrylockie",
        "blockchain",
        "blockchains",
        "crypto lorrylockie",
        "lorrylockie darc",
        "blockchain crypto"
      ],
      "category": "blockchain-and-crypto"
    },
    "magnetai--mcp-free-usdc-transfer": {
      "owner": "magnetai",
      "name": "mcp-free-usdc-transfer",
      "url": "https://github.com/magnetai/mcp-free-usdc-transfer",
      "imageUrl": "/freedevtools/mcp/pfp/magnetai.webp",
      "description": "Facilitates fee-free transfers of USDC on the Base chain, utilizing a secure Coinbase MPC wallet. Supports automatic resolution of ENS and BaseName domains for seamless transactions.",
      "stars": 17,
      "forks": 8,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-23T19:44:00Z",
      "readme_content": "# Free USDC Transfer MCP Server\n\nAn MCP server implementation enabling free USDC transfers on **[Base](https://base.org)** with **[Coinbase CDP](https://docs.cdp.coinbase.com/)** MPC Wallet integration.\n\n<img width=\"1374\" alt=\"image\" src=\"https://github.com/user-attachments/assets/3a58a720-8489-4f02-9075-19c8f264e3cc\" />\n\n## Features\n\n- Free USDC Transfers: Send USDC to any address or ENS/BaseName domain on Base - no fees, just simple transfers\n- Coinbase MPC Wallet: Create and manage your Coinbase MPC wallet for secure, feeless transactions\n- Name Resolution: Automatic support for **ENS** and **BaseName** domains\n\n## Functions\n\n### `tranfer-usdc`\n- Description: Analyze the value of the purchased items and transfer USDC to the recipient via the Base chain. Due to the uncertainty of blockchain transaction times, the transaction is only scheduled here and will not wait for the transaction to be completed.\n- Inputs:\n    - usdc_amount (number): USDC amount, greater than 0.\n    - recipient (string): Recipient's on-chain address or ENS domain (e.g., example.eth).\n- Behavior:\n    - Verifies the recipient's address or resolves ENS domains.\n    - Schedules a USDC transfer on the Base chain.\n    - Provides a link to view transaction details on BaseScan.\n\n### `create_coinbase_mpc_wallet`\n- Description: Create a Coinbase MPC wallet address.\n- Behavior:\n    - Creates a new Coinbase MPC wallet and saves the seed to a secure file.\n    - If a wallet already exists, returns the existing wallet address.\n    - The seed file for Coinbase MPC wallets is stored in the Documents directory under the file name mpc_info.json.\n\n## Configuration\n\n### Getting an API Key\n1. Sign up for a [Coinbase CDP account](https://portal.cdp.coinbase.com/)\n2. Generate your API key from the developer dashboard\n\n### Usage with Claude Desktop\n\n1. Add this to your `claude_desktop_config.json`:\n```json\n{\n  \"mcpServers\": {\n    \"free-usdc-transfer\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@magnetai/free-usdc-transfer\"\n      ],\n      \"env\": {\n        \"COINBASE_CDP_API_KEY_NAME\": \"YOUR_COINBASE_CDP_API_KEY_NAME\",\n        \"COINBASE_CDP_PRIVATE_KEY\": \"YOUR_COINBASE_CDP_PRIVATE_KEY\"\n      }\n    }\n  }\n}\n```\n\n2. Or install the server with **[magnet-desktop](https://github.com/magnetai/magnet-desktop)**\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n\n---\n\nCrafted by [Magnet Labs](https://magnetlabs.xyz) with our vibrant AI & Crypto community\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "usdc",
        "coinbase",
        "mpc",
        "coinbase mpc",
        "crypto magnetai",
        "mpc wallet"
      ],
      "category": "blockchain-and-crypto"
    },
    "mcpdotdirect--evm-mcp-server": {
      "owner": "mcpdotdirect",
      "name": "evm-mcp-server",
      "url": "https://github.com/mcpdotdirect/evm-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/mcpdotdirect.webp",
      "description": "Connect to multiple EVM-compatible networks to facilitate interactions with blockchain services including Ethereum, Optimism, Arbitrum, Base, and Polygon through a unified interface.",
      "stars": 324,
      "forks": 80,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T06:14:39Z",
      "readme_content": "# EVM MCP Server\n\n![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)\n![EVM Networks](https://img.shields.io/badge/Networks-30+-green)\n![TypeScript](https://img.shields.io/badge/TypeScript-5.0+-3178C6)\n![Viem](https://img.shields.io/badge/Viem-1.0+-green)\n\nA comprehensive Model Context Protocol (MCP) server that provides blockchain services across multiple EVM-compatible networks. This server enables AI agents to interact with Ethereum, Optimism, Arbitrum, Base, Polygon, and many other EVM chains with a unified interface.\n\n## 📋 Contents\n\n- [Overview](#overview)\n- [Features](#features)\n- [Supported Networks](#supported-networks)\n- [Prerequisites](#prerequisites)\n- [Installation](#installation)\n- [Server Configuration](#server-configuration)\n- [Usage](#usage)\n- [API Reference](#api-reference)\n  - [Tools](#tools)\n  - [Resources](#resources)\n- [Security Considerations](#security-considerations)\n- [Project Structure](#project-structure)\n- [Development](#development)\n- [License](#license)\n\n## 🔭 Overview\n\nThe MCP EVM Server leverages the Model Context Protocol to provide blockchain services to AI agents. It supports a wide range of services including:\n\n- Reading blockchain state (balances, transactions, blocks, etc.)\n- Interacting with smart contracts\n- Transferring tokens (native, ERC20, ERC721, ERC1155)\n- Querying token metadata and balances\n- Chain-specific services across 30+ EVM networks\n- **ENS name resolution** for all address parameters (use human-readable names like 'vitalik.eth' instead of addresses)\n\nAll services are exposed through a consistent interface of MCP tools and resources, making it easy for AI agents to discover and use blockchain functionality. **Every tool that accepts Ethereum addresses also supports ENS names**, automatically resolving them to addresses behind the scenes.\n\n## ✨ Features\n\n### Blockchain Data Access\n\n- **Multi-chain support** for 30+ EVM-compatible networks\n- **Chain information** including blockNumber, chainId, and RPCs\n- **Block data** access by number, hash, or latest\n- **Transaction details** and receipts with decoded logs\n- **Address balances** for native tokens and all token standards\n- **ENS resolution** for human-readable Ethereum addresses (use 'vitalik.eth' instead of '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045')\n\n### Token services\n\n- **ERC20 Tokens**\n  - Get token metadata (name, symbol, decimals, supply)\n  - Check token balances\n  - Transfer tokens between addresses\n  - Approve spending allowances\n\n- **NFTs (ERC721)**\n  - Get collection and token metadata\n  - Verify token ownership\n  - Transfer NFTs between addresses\n  - Retrieve token URIs and count holdings\n\n- **Multi-tokens (ERC1155)**\n  - Get token balances and metadata\n  - Transfer tokens with quantity\n  - Access token URIs\n\n### Smart Contract Interactions\n\n- **Read contract state** through view/pure functions\n- **Write services** with private key signing\n- **Contract verification** to distinguish from EOAs\n- **Event logs** retrieval and filtering\n\n### Comprehensive Transaction Support\n\n- **Native token transfers** across all supported networks\n- **Gas estimation** for transaction planning\n- **Transaction status** and receipt information\n- **Error handling** with descriptive messages\n\n## 🌐 Supported Networks\n\n### Mainnets\n- Ethereum (ETH)\n- Optimism (OP)\n- Arbitrum (ARB)\n- Arbitrum Nova\n- Base\n- Polygon (MATIC)\n- Polygon zkEVM\n- Avalanche (AVAX)\n- Binance Smart Chain (BSC)\n- zkSync Era\n- Linea\n- Celo\n- Gnosis (xDai)\n- Fantom (FTM)\n- Filecoin (FIL)\n- Moonbeam\n- Moonriver\n- Cronos\n- Scroll\n- Mantle\n- Manta\n- Blast\n- Fraxtal\n- Mode\n- Metis\n- Kroma\n- Zora\n- Aurora\n- Canto\n- Flow\n- Lumia\n\n### Testnets\n- Sepolia\n- Optimism Sepolia\n- Arbitrum Sepolia\n- Base Sepolia\n- Polygon Amoy\n- Avalanche Fuji\n- BSC Testnet\n- zkSync Sepolia\n- Linea Sepolia\n- Scroll Sepolia\n- Mantle Sepolia\n- Manta Sepolia\n- Blast Sepolia\n- Fraxtal Testnet\n- Mode Testnet\n- Metis Sepolia\n- Kroma Sepolia\n- Zora Sepolia\n- Celo Alfajores\n- Goerli\n- Holesky\n- Flow Testnet\n- Filecoin Calibration\n- Lumia Testnet\n\n## 🛠️ Prerequisites\n\n- [Bun](https://bun.sh/) 1.0.0 or higher\n- Node.js 18.0.0 or higher (if not using Bun)\n\n## 📦 Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/mcpdotdirect/mcp-evm-server.git\ncd mcp-evm-server\n\n# Install dependencies with Bun\nbun install\n\n# Or with npm\nnpm install\n```\n\n## ⚙️ Server Configuration\n\nThe server uses the following default configuration:\n\n- **Default Chain ID**: 1 (Ethereum Mainnet)\n- **Server Port**: 3001\n- **Server Host**: 0.0.0.0 (accessible from any network interface)\n\nThese values are hardcoded in the application. If you need to modify them, you can edit the following files:\n\n- For chain configuration: `src/core/chains.ts`\n- For server configuration: `src/server/http-server.ts`\n\n## 🚀 Usage\n\n### Using npx (No Installation Required)\n\nYou can run the MCP EVM Server directly without installation using npx:\n\n```bash\n# Run the server in stdio mode (for CLI tools)\nnpx @mcpdotdirect/evm-mcp-server\n\n# Run the server in HTTP mode (for web applications)\nnpx @mcpdotdirect/evm-mcp-server --http\n```\n\n### Running the Server Locally\n\nStart the server using stdio (for embedding in CLI tools):\n\n```bash\n# Start the stdio server\nbun start\n\n# Development mode with auto-reload\nbun dev\n```\n\nOr start the HTTP server with SSE for web applications:\n\n```bash\n# Start the HTTP server\nbun start:http\n\n# Development mode with auto-reload\nbun dev:http\n```\n\n### Connecting to the Server\n\nConnect to this MCP server using any MCP-compatible client. For testing and debugging, you can use the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n### Connecting from Cursor\n\nTo connect to the MCP server from Cursor:\n\n1. Open Cursor and go to Settings (gear icon in the bottom left)\n2. Click on \"Features\" in the left sidebar\n3. Scroll down to \"MCP Servers\" section\n4. Click \"Add new MCP server\"\n5. Enter the following details:\n   - Server name: `evm-mcp-server`\n   - Type: `command`\n   - Command: `npx @mcpdotdirect/evm-mcp-server`\n\n6. Click \"Save\"\n\nOnce connected, you can use the MCP server's capabilities directly within Cursor. The server will appear in the MCP Servers list and can be enabled/disabled as needed.\n\n### Using mcp.json with Cursor\n\nFor a more portable configuration that you can share with your team or use across projects, you can create an `.cursor/mcp.json` file in your project's root directory:\n\n```json\n{\n  \"mcpServers\": {\n    \"evm-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@mcpdotdirect/evm-mcp-server\"\n      ]\n    },\n    \"evm-mcp-http\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\", \n        \"@mcpdotdirect/evm-mcp-server\", \n        \"--http\"\n      ]\n    }\n  }\n}\n```\n\nPlace this file in your project's `.cursor` directory (create it if it doesn't exist), and Cursor will automatically detect and use these MCP server configurations when working in that project. This approach makes it easy to:\n\n1. Share MCP configurations with your team\n2. Version control your MCP setup\n3. Use different server configurations for different projects\n\n### Example: HTTP Mode with SSE\n\nIf you're developing a web application and want to connect to the HTTP server with Server-Sent Events (SSE), you can use this configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"evm-mcp-sse\": {\n      \"url\": \"http://localhost:3001/sse\"\n    }\n  }\n}\n```\n\nThis connects directly to the HTTP server's SSE endpoint, which is useful for:\n- Web applications that need to connect to the MCP server from the browser\n- Environments where running local commands isn't ideal\n- Sharing a single MCP server instance among multiple users or applications\n\nTo use this configuration:\n1. Create a `.cursor` directory in your project root if it doesn't exist\n2. Save the above JSON as `mcp.json` in the `.cursor` directory\n3. Restart Cursor or open your project\n4. Cursor will detect the configuration and offer to enable the server(s)\n\n### Example: Using the MCP Server in Cursor\n\nAfter configuring the MCP server with `mcp.json`, you can easily use it in Cursor. Here's an example workflow:\n\n1. Create a new JavaScript/TypeScript file in your project:\n\n```javascript\n// blockchain-example.js\nasync function main() {\n  try {\n    // Get ETH balance for an address using ENS\n    console.log(\"Getting ETH balance for vitalik.eth...\");\n    \n    // When using with Cursor, you can simply ask Cursor to:\n    // \"Check the ETH balance of vitalik.eth on mainnet\"\n    // Or \"Transfer 0.1 ETH from my wallet to vitalik.eth\"\n    \n    // Cursor will use the MCP server to execute these operations \n    // without requiring any additional code from you\n    \n    // This is the power of the MCP integration - your AI assistant\n    // can directly interact with blockchain data and operations\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n  }\n}\n\nmain();\n```\n\n2. With the file open in Cursor, you can ask Cursor to:\n\n   - \"Check the current ETH balance of vitalik.eth\"\n   - \"Look up the price of USDC on Ethereum\"\n   - \"Show me the latest block on Optimism\"\n   - \"Check if 0x1234... is a contract address\"\n\n3. Cursor will use the MCP server to execute these operations and return the results directly in your conversation.\n\nThe MCP server handles all the blockchain communication while allowing Cursor to understand and execute blockchain-related tasks through natural language.\n\n### Connecting using Claude CLI\n\nIf you're using Claude CLI, you can connect to the MCP server with just two commands:\n\n```bash\n# Add the MCP server\nclaude mcp add evm-mcp-server npx @mcpdotdirect/evm-mcp-server\n\n# Start Claude with the MCP server enabled\nclaude\n```\n\n### Example: Getting a Token Balance with ENS\n\n```javascript\n// Example of using the MCP client to check a token balance using ENS\nconst mcp = new McpClient(\"http://localhost:3000\");\n\nconst result = await mcp.invokeTool(\"get-token-balance\", {\n  tokenAddress: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC on Ethereum\n  ownerAddress: \"vitalik.eth\", // ENS name instead of address\n  network: \"ethereum\"\n});\n\nconsole.log(result);\n// {\n//   tokenAddress: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n//   owner: \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n//   network: \"ethereum\",\n//   raw: \"1000000000\",\n//   formatted: \"1000\",\n//   symbol: \"USDC\",\n//   decimals: 6\n// }\n```\n\n### Example: Resolving an ENS Name\n\n```javascript\n// Example of using the MCP client to resolve an ENS name to an address\nconst mcp = new McpClient(\"http://localhost:3000\");\n\nconst result = await mcp.invokeTool(\"resolve-ens\", {\n  ensName: \"vitalik.eth\",\n  network: \"ethereum\"\n});\n\nconsole.log(result);\n// {\n//   ensName: \"vitalik.eth\",\n//   normalizedName: \"vitalik.eth\",\n//   resolvedAddress: \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n//   network: \"ethereum\"\n// }\n```\n\n## 📚 API Reference\n\n### Tools\n\nThe server provides the following MCP tools for agents. **All tools that accept address parameters support both Ethereum addresses and ENS names.**\n\n#### Token services\n\n| Tool Name | Description | Key Parameters |\n|-----------|-------------|----------------|\n| `get-token-info` | Get ERC20 token metadata | `tokenAddress` (address/ENS), `network` |\n| `get-token-balance` | Check ERC20 token balance | `tokenAddress` (address/ENS), `ownerAddress` (address/ENS), `network` |\n| `transfer-token` | Transfer ERC20 tokens | `privateKey`, `tokenAddress` (address/ENS), `toAddress` (address/ENS), `amount`, `network` |\n| `approve-token-spending` | Approve token allowances | `privateKey`, `tokenAddress` (address/ENS), `spenderAddress` (address/ENS), `amount`, `network` |\n| `get-nft-info` | Get NFT metadata | `tokenAddress` (address/ENS), `tokenId`, `network` |\n| `check-nft-ownership` | Verify NFT ownership | `tokenAddress` (address/ENS), `tokenId`, `ownerAddress` (address/ENS), `network` |\n| `transfer-nft` | Transfer an NFT | `privateKey`, `tokenAddress` (address/ENS), `tokenId`, `toAddress` (address/ENS), `network` |\n| `get-nft-balance` | Count NFTs owned | `tokenAddress` (address/ENS), `ownerAddress` (address/ENS), `network` |\n| `get-erc1155-token-uri` | Get ERC1155 metadata | `tokenAddress` (address/ENS), `tokenId`, `network` |\n| `get-erc1155-balance` | Check ERC1155 balance | `tokenAddress` (address/ENS), `tokenId`, `ownerAddress` (address/ENS), `network` |\n| `transfer-erc1155` | Transfer ERC1155 tokens | `privateKey`, `tokenAddress` (address/ENS), `tokenId`, `amount`, `toAddress` (address/ENS), `network` |\n\n#### Blockchain services\n\n| Tool Name | Description | Key Parameters |\n|-----------|-------------|----------------|\n| `get-chain-info` | Get network information | `network` |\n| `get-balance` | Get native token balance | `address` (address/ENS), `network` |\n| `transfer-eth` | Send native tokens | `privateKey`, `to` (address/ENS), `amount`, `network` |\n| `get-transaction` | Get transaction details | `txHash`, `network` |\n| `read-contract` | Read smart contract state | `contractAddress` (address/ENS), `abi`, `functionName`, `args`, `network` |\n| `write-contract` | Write to smart contract | `contractAddress` (address/ENS), `abi`, `functionName`, `args`, `privateKey`, `network` |\n| `is-contract` | Check if address is a contract | `address` (address/ENS), `network` |\n| `resolve-ens` | Resolve ENS name to address | `ensName`, `network` |\n\n### Resources\n\nThe server exposes blockchain data through the following MCP resource URIs. All resource URIs that accept addresses also support ENS names, which are automatically resolved to addresses.\n\n#### Blockchain Resources\n\n| Resource URI Pattern | Description |\n|-----------|-------------|\n| `evm://{network}/chain` | Chain information for a specific network |\n| `evm://chain` | Ethereum mainnet chain information |\n| `evm://{network}/block/{blockNumber}` | Block data by number |\n| `evm://{network}/block/latest` | Latest block data |\n| `evm://{network}/address/{address}/balance` | Native token balance |\n| `evm://{network}/tx/{txHash}` | Transaction details |\n| `evm://{network}/tx/{txHash}/receipt` | Transaction receipt with logs |\n\n#### Token Resources\n\n| Resource URI Pattern | Description |\n|-----------|-------------|\n| `evm://{network}/token/{tokenAddress}` | ERC20 token information |\n| `evm://{network}/token/{tokenAddress}/balanceOf/{address}` | ERC20 token balance |\n| `evm://{network}/nft/{tokenAddress}/{tokenId}` | NFT (ERC721) token information |\n| `evm://{network}/nft/{tokenAddress}/{tokenId}/isOwnedBy/{address}` | NFT ownership verification |\n| `evm://{network}/erc1155/{tokenAddress}/{tokenId}/uri` | ERC1155 token URI |\n| `evm://{network}/erc1155/{tokenAddress}/{tokenId}/balanceOf/{address}` | ERC1155 token balance |\n\n## 🔒 Security Considerations\n\n- **Private keys** are used only for transaction signing and are never stored by the server\n- Consider implementing additional authentication mechanisms for production use\n- Use HTTPS for the HTTP server in production environments\n- Implement rate limiting to prevent abuse\n- For high-value services, consider adding confirmation steps\n\n## 📁 Project Structure\n\n```\nmcp-evm-server/\n├── src/\n│   ├── index.ts                # Main stdio server entry point\n│   ├── server/                 # Server-related files\n│   │   ├── http-server.ts      # HTTP server with SSE\n│   │   └── server.ts           # General server setup\n│   ├── core/\n│   │   ├── chains.ts           # Chain definitions and utilities\n│   │   ├── resources.ts        # MCP resources implementation\n│   │   ├── tools.ts            # MCP tools implementation\n│   │   ├── prompts.ts          # MCP prompts implementation\n│   │   └── services/           # Core blockchain services\n│   │       ├── index.ts        # Operation exports\n│   │       ├── balance.ts      # Balance services\n│   │       ├── transfer.ts     # Token transfer services\n│   │       ├── utils.ts        # Utility functions\n│   │       ├── tokens.ts       # Token metadata services\n│   │       ├── contracts.ts    # Contract interactions\n│   │       ├── transactions.ts # Transaction services\n│   │       └── blocks.ts       # Block services\n│   │       └── clients.ts      # RPC client utilities\n├── package.json\n├── tsconfig.json\n└── README.md\n```\n\n## 🛠️ Development\n\nTo modify or extend the server:\n\n1. Add new services in the appropriate file under `src/core/services/`\n2. Register new tools in `src/core/tools.ts`\n3. Register new resources in `src/core/resources.ts`\n4. Add new network support in `src/core/chains.ts`\n5. To change server configuration, edit the hardcoded values in `src/server/http-server.ts`\n\n## 📄 License\n\nThis project is licensed under the terms of the [MIT License](./LICENSE).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcpdotdirect",
        "blockchain",
        "evm",
        "mcpdotdirect evm",
        "crypto mcpdotdirect",
        "evm mcp"
      ],
      "category": "blockchain-and-crypto"
    },
    "mcpdotdirect--starknet-mcp-server": {
      "owner": "mcpdotdirect",
      "name": "starknet-mcp-server",
      "url": "https://github.com/mcpdotdirect/starknet-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/mcpdotdirect.webp",
      "description": "Interact with the Starknet blockchain, query blockchain data, manage wallets, and interact with smart contracts.",
      "stars": 4,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-05-23T18:18:05Z",
      "readme_content": "# Starknet MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@mcpdotdirect/starknet-mcp-server)](https://smithery.ai/server/@mcpdotdirect/starknet-mcp-server)\n![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)\n![TypeScript](https://img.shields.io/badge/TypeScript-5.0+-3178C6)\n![MCP](https://img.shields.io/badge/MCP-1.7+-green)\n![Starknet.js](https://img.shields.io/badge/Starknet.js-Latest-purple)\n\nA comprehensive Model Context Protocol (MCP) server for the Starknet blockchain. This server provides AI agents with the ability to interact with Starknet networks, query blockchain data, manage wallets, and interact with smart contracts.\n\n<a href=\"https://glama.ai/mcp/servers/@mcpdotdirect/starknet-mcp-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@mcpdotdirect/starknet-mcp-server/badge\" alt=\"Starknet Server MCP server\" />\n</a>\n\n## 📋 Contents\n\n- [Overview](#-overview)\n- [Features](#-features)\n- [Supported Networks](#-networks-supported)\n- [Prerequisites](#-prerequisites)\n- [Installation](#-installation)\n- [Server Configuration](#-server-configuration)\n- [Usage](#-usage)\n- [API Reference](#-api-reference)\n  - [Tools](#available-mcp-tools)\n  - [Resources](#available-mcp-resources)\n  - [Prompts](#available-mcp-prompts)\n- [Usage with AI Assistants](#-usage-with-ai-assistants)\n- [Security Considerations](#-security-considerations)\n- [Project Structure](#-project-structure)\n- [Development Conventions](#️-development-conventions)\n- [Documentation](#-documentation)\n- [License](#-license)\n\n## 🔭 Overview\n\nThe Starknet MCP Server leverages the Model Context Protocol to provide blockchain services to AI agents. It offers a comprehensive interface to the Starknet ecosystem, powering AI assistants with the ability to interact with Starknet blockchain data and operations through natural language.\n\nKey capabilities include:\n- Reading blockchain state (balances, transactions, blocks)\n- Interacting with Cairo smart contracts\n- Transferring tokens (ETH, STRK, and other ERC20 tokens)\n- Working with NFTs and token metadata\n- Resolving StarknetID domains (similar to ENS for Ethereum)\n- Making both read and write operations with proper transaction handling\n\nAll services are exposed through a consistent interface of MCP tools and resources, making it easy for AI agents to discover and use Starknet blockchain functionality. **Every tool that accepts Starknet addresses also supports StarknetID**, automatically resolving human-readable identities to addresses behind the scenes.\n\n## ✨ Features\n\n- **Starknet Integration**: Full Starknet blockchain integration using Starknet.js\n- **Network Support**: Supports both Mainnet and Sepolia testnet\n- **StarknetID Integration**: Resolution of Starknet IDs to addresses and vice versa\n- **Native Token Support**: Support for both ETH and STRK native tokens\n- **Smart Contract Interaction**: Call and query Starknet smart contracts\n- **Dual Transport**: Run as stdio server or HTTP server for different integration needs\n- **AI-Ready**: Designed to be used with Claude, GPT, and other AI assistants\n\n### Blockchain Information\n- Query chain information (chain ID, latest block)\n- Explore block details and transactions\n- View transaction receipts and status\n- Get address information and contract data\n\n### Native Token Operations\n- Get ETH and STRK balances for any address\n- Transfer ETH and STRK between accounts\n- View combined native token balances\n\n### Token Operations\n- Get ERC20 token balances and information\n- Transfer ERC20 tokens\n- View token supply and metadata\n- Check token ownership\n\n### NFT Operations\n- Check NFT ownership by token ID\n- Get NFT collection information\n- View NFT balances for addresses\n\n### Smart Contract Interaction\n- Call read-only contract functions\n- Execute contract writes with transaction confirmation\n- Get contract storage information\n- View ABIs and contract class information\n\n### StarknetID\n- Resolve Starknet addresses to Starknet IDs\n- Resolve Starknet IDs to addresses\n- Get complete Starknet ID profiles with verification data\n- Validate Starknet domains\n\n## 🔧 Networks Supported\n\nThe server supports the following Starknet networks:\n\n- **Mainnet**: The primary Starknet production network\n- **Sepolia**: Starknet's testnet on Ethereum's Sepolia\n\n## 🛠️ Prerequisites\n\n- [Bun](https://bun.sh/) 1.0.0 or higher (recommended)\n- Node.js 18.0.0 or higher\n\n## 📦 Installation\n\n### Installing via Smithery\n\nTo install starknet-mcp-server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@mcpdotdirect/starknet-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @mcpdotdirect/starknet-mcp-server --client claude\n```\n\n### Option 1: Use without installation (npx)\n\nThe easiest way to get started is to use `npx` to run the package directly:\n\n```bash\n# Run the stdio server without installation\nnpx @mcpdotdirect/starknet-mcp-server\n\n# Run the HTTP server without installation\nnpx @mcpdotdirect/starknet-mcp-server http\n```\n\nThis will automatically download and run the latest version without needing to install it first.\n\n### Option 2: Global installation\n\nIf you plan to use it frequently, you can install it globally:\n\n```bash\n# Install globally\nnpm install -g @mcpdotdirect/starknet-mcp-server\n\n# Then run from anywhere\nstarknet-mcp-server\nstarknet-mcp-server http\n```\n\n### Option 3: Local project installation\n\n```bash\n# Add to your project\nnpm install @mcpdotdirect/starknet-mcp-server\n\n# Using yarn\nyarn add @mcpdotdirect/starknet-mcp-server\n\n# Using pnpm\npnpm add @mcpdotdirect/starknet-mcp-server\n```\n\nThen add to your package.json scripts:\n```json\n\"scripts\": {\n  \"starknet-mcp\": \"starknet-mcp-server\",\n  \"starknet-mcp-http\": \"starknet-mcp-server http\"\n}\n```\n\n### Option 4: Running from source\n\nIf you want to run from source or develop locally:\n\n```bash\n# Clone the repository\ngit clone https://github.com/mcpdotdirect/starknet-mcp-server.git\ncd starknet-mcp-server\n\n# Install dependencies\nnpm install\n\n# Start the stdio server\nnpm start\n\n# Or start the HTTP server\nnpm run start:http\n```\n\nFor development with auto-reload:\n```bash\n# Development mode with stdio\nnpm run dev\n\n# Development mode with HTTP\nnpm run dev:http\n```\n\n## ⚙️ Server Configuration\n\nThe server uses the following default configuration:\n\n- **Default Network**: Mainnet\n- **Server Port**: 3000 (HTTP mode)\n- **Server Host**: 0.0.0.0 (accessible from any network interface)\n\nThese values are hardcoded in the application. If you need to modify them, you can edit the following files:\n\n- For network configuration: `src/core/chains.ts`\n- For server configuration: `src/server/http-server.ts`\n\n## 🔍 Usage\n\n### Running the Server\n\nYou can run the Starknet MCP Server in two modes:\n\n```bash\n# Run the server in stdio mode (for CLI tools and AI assistants)\nnpx @mcpdotdirect/starknet-mcp-server\n\n# Run the server in HTTP mode (for web applications)\nnpx @mcpdotdirect/starknet-mcp-server http\n```\n\nThe HTTP server runs on port 3000 by default and provides both a REST API and Server-Sent Events (SSE) for real-time communication.\n\n### Connecting from Cursor\n\nTo connect to the Starknet MCP server from Cursor:\n\n1. Open Cursor and go to Settings (gear icon in the bottom left)\n2. Click on \"Features\" in the left sidebar\n3. Scroll down to \"MCP Servers\" section\n4. Click \"Add new MCP server\"\n5. Enter the following details:\n   - Server name: `starknet-mcp-server`\n   - Type: `command`\n   - Command: `npx @mcpdotdirect/starknet-mcp-server`\n\n6. Click \"Save\"\n\nOnce connected, you can use the MCP server's capabilities directly within Cursor. The server will appear in the MCP Servers list and can be enabled/disabled as needed.\n\n### Using mcp.json with Cursor\n\nFor a more portable configuration that you can share with your team or use across projects, you can create an `.cursor/mcp.json` file in your project's root directory:\n\n```json\n{\n  \"mcpServers\": {\n    \"starknet-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@mcpdotdirect/starknet-mcp-server\"\n      ]\n    },\n    \"starknet-mcp-http\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@mcpdotdirect/starknet-mcp-server\",\n        \"http\"\n      ]\n    }\n  }\n}\n```\n\nPlace this file in your project's `.cursor` directory (create it if it doesn't exist), and Cursor will automatically detect and use these MCP server configurations when working in that project.\n\n### HTTP Mode with SSE\n\nIf you're developing a web application and want to connect to the HTTP server with Server-Sent Events (SSE), you can use this configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"starknet-mcp-sse\": {\n      \"url\": \"http://localhost:3000/sse\"\n    }\n  }\n}\n```\n\n### Connecting using Claude CLI\n\nIf you're using Claude CLI, you can connect to the MCP server with just two commands:\n\n```bash\n# Add the MCP server using npx\nclaude mcp add starknet-mcp-server npx @mcpdotdirect/starknet-mcp-server\n\n# Start Claude with the MCP server enabled\nclaude\n```\n\n### Example: Using the MCP Server in Cursor\n\nAfter configuring the MCP server, you can easily use it in Cursor. For example:\n\n1. Create a new JavaScript/TypeScript file in your project:\n\n```javascript\n// starknet-example.js\nasync function main() {\n  try {\n    // When using with Cursor, you can simply ask Cursor to:\n    // \"Check the ETH balance of address 0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7 on Starknet mainnet\"\n    // Or \"Lookup the Starknet ID for address 0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\"\n    \n    // Cursor will use the MCP server to execute these operations \n    // without requiring any additional code from you\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n  }\n}\n\nmain();\n```\n\n2. With the file open in Cursor, you can ask Cursor to:\n   - \"Check the ETH balance of vitalik.stark\"\n   - \"Get information about the latest block on Starknet\"\n   - \"Look up the owner of NFT #123 in collection 0x...\"\n\n### Example: Getting an ETH Balance with Starknet ID\n\n```javascript\n// Example of using the MCP client to check an ETH balance using Starknet ID\nconst mcp = new McpClient(\"http://localhost:3000\");\n\nconst result = await mcp.invokeTool(\"get_starknet_eth_balance\", {\n  address: \"vitalik.stark\", // Starknet ID instead of address\n  network: \"mainnet\"\n});\n\nconsole.log(result);\n// {\n//   wei: \"1000000000000000000\",\n//   ether: \"1.0\"\n// }\n```\n\n### Example: Resolving a Starknet ID\n\n```javascript\n// Example of using the MCP client to resolve a Starknet ID to an address\nconst mcp = new McpClient(\"http://localhost:3000\");\n\nconst result = await mcp.invokeTool(\"resolve_starknet_address\", {\n  name: \"vitalik.stark\",\n  network: \"mainnet\"\n});\n\nconsole.log(result);\n// {\n//   starknetId: \"vitalik.stark\",\n//   address: \"0x04d07e40e93398ed3c76981e449d3446f7c4e52aac5b3e8a37d7b0ca30845a5d\",\n//   resolved: true\n// }\n```\n\n### Example: Calling a Smart Contract\n\n```javascript\n// Example of using the MCP client to call a smart contract function\nconst mcp = new McpClient(\"http://localhost:3000\");\n\nconst result = await mcp.invokeTool(\"call_starknet_contract\", {\n  contractAddress: \"0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\", // ETH contract\n  entrypoint: \"totalSupply\",\n  calldata: [],\n  network: \"mainnet\"\n});\n\nconsole.log(result);\n// {\n//   result: [\"0x84b6c7d5970d5a73abe\"]\n// }\n```\n\n### Using in a Node.js Project\n\nIf you want to programmatically use the MCP server in your Node.js project:\n\n```javascript\n// Start the MCP server as a child process\nconst { spawn } = require('child_process');\nconst mcpServer = spawn('npx', ['@mcpdotdirect/starknet-mcp-server']);\n\n// Connect to it with the MCP client\nconst mcp = new McpClient({ process: mcpServer });\n\n// Now you can use the client\nconst networks = await mcp.invokeTool(\"get_supported_starknet_networks\", {\n  random_string: \"any\"\n});\nconsole.log(\"Supported networks:\", networks);\n```\n\nFor more advanced usage, you can create a wrapper class around the HTTP API or use libraries like Axios for cleaner API calls.\n\n## 📚 API Reference\n\n### Available MCP Tools\n\nThis server implements the following MCP tools:\n\n#### Network Tools\n- `get_starknet_chain_info`: Get information about a Starknet network\n- `get_supported_starknet_networks`: Get a list of supported Starknet networks\n\n#### Balance Tools\n- `get_starknet_eth_balance`: Get the ETH balance for a Starknet address or Starknet ID\n- `get_starknet_token_balance`: Get the balance of any token for an address\n- `get_starknet_strk_balance`: Get the STRK token balance for an address\n- `get_starknet_native_balances`: Get all native token balances (ETH and STRK) for an address\n\n#### StarknetID Tools\n- `resolve_starknet_name`: Get the Starknet ID for an address\n- `resolve_starknet_address`: Get the address for a Starknet ID\n- `get_starknet_profile`: Get the full Starknet ID profile for an address\n- `validate_starknet_domain`: Check if a string is a valid Starknet ID\n\n#### Block Tools\n- `get_starknet_block`: Get information about a specific block\n- `get_starknet_block_transactions`: Get transactions in a specific block\n\n#### Transaction Tools\n- `get_starknet_transaction`: Get details about a transaction\n- `get_starknet_transaction_receipt`: Get transaction receipt\n- `check_starknet_transaction_status`: Check if a transaction is confirmed\n\n#### Contract Tools\n- `call_starknet_contract`: Call a read-only function on a contract\n- `get_starknet_contract_class`: Get the class (ABI and other information) of a contract\n- `execute_starknet_contract`: Execute a contract call (write operation)\n\n#### Token Tools\n- `get_starknet_token_info`: Get information about a token\n- `get_starknet_token_supply`: Get the total supply of a token\n- `check_starknet_nft_ownership`: Check if an address owns a specific NFT\n- `get_starknet_nft_balance`: Get the number of NFTs owned by an address\n\n#### Transfer Tools\n- `transfer_starknet_eth`: Transfer ETH from one account to another (amounts in human-readable format)\n- `transfer_starknet_strk`: Transfer STRK from one account to another (amounts in human-readable format)\n- `transfer_starknet_token`: Transfer ERC20 tokens from one account to another (amounts in human-readable format)\n\n### Available MCP Resources\n\nThe server provides the following MCP resources:\n\n#### Network Resources\n- `starknet://{network}/chain`: Get chain information for a specific network\n- `starknet://networks`: Get a list of all supported networks\n\n#### Block Resources\n- `starknet://{network}/block/{blockIdentifier}`: Get information about a specific block\n- `starknet://{network}/block/latest`: Get the latest block\n\n#### Address Resources\n- `starknet://{network}/address/{address}`: Get information about an address\n\n#### Transaction Resources\n- `starknet://{network}/tx/{txHash}`: Get transaction information\n\n#### StarknetID Resources\n- `starknet://{network}/id/address/{address}`: Resolve an address to a Starknet ID\n- `starknet://{network}/id/name/{name}`: Resolve a Starknet ID to an address\n- `starknet://{network}/id/profile/{address}`: Get the Starknet ID profile for an address\n\n### Available MCP Prompts\n\nFor LLM interactions, the server provides these prompts:\n\n- `explore_starknet_block`: Explore information about a specific Starknet block\n- `explore_starknet_address`: Get information about a Starknet address\n- `explore_starknet_transaction`: Get information about a Starknet transaction\n- `lookup_starknet_id`: Look up a Starknet ID or resolve an address to a Starknet ID\n- `explore_starknet_id_profile`: Explore a full Starknet ID profile\n\n## 🔍 Usage with AI Assistants\n\nWhen using this server with AI assistants like Claude or GPT:\n\n1. Configure your AI assistant to use this MCP server\n2. The assistant can then use tools to interact with Starknet\n3. Example queries:\n   - \"What's the ETH balance of address 0x04d07e40e93398ed3c76981e449d3446f7c4e52aac5b3e8a37d7b0ca30845a5d?\"\n   - \"Look up the Starknet ID for address 0x04d07e40e93398ed3c76981e449d3446f7c4e52aac5b3e8a37d7b0ca30845a5d\"\n   - \"What's in the latest block on Starknet mainnet?\"\n   - \"Get information about transaction 0x7e3a33ab42f2e24184763563b7b8482b53e3b89831ebc3eacf29d4d11f5198\"\n   - \"Resolve the Starknet ID vitalik.stark to an address\"\n\n## 🔒 Security Considerations\n\n- **Private keys** are used only for transaction signing and are never stored by the server\n- **All token amounts** are specified in human-readable format (e.g., ETH, STRK, token units) rather than in wei or smallest units\n- Always validate and sanitize input parameters before executing operations\n- Consider implementing additional authentication mechanisms for production use\n- Use HTTPS for the HTTP server in production environments\n- Implement rate limiting to prevent abuse\n- For high-value services, consider adding confirmation steps\n\n## 📁 Project Structure\n\n```\nstarknet-mcp-server/\n├── src/\n│   ├── index.ts                # Main stdio server entry point\n│   ├── server/                 # Server-related files\n│   │   ├── http-server.ts      # HTTP server with SSE\n│   │   └── server.ts           # General server setup\n│   ├── core/\n│   │   ├── chains.ts           # Chain definitions and utilities\n│   │   ├── resources.ts        # MCP resources implementation\n│   │   ├── tools.ts            # MCP tools implementation\n│   │   ├── prompts.ts          # MCP prompts implementation\n│   │   └── services/           # Core blockchain services\n│   │       ├── index.ts        # Service exports\n│   │       ├── balance.ts      # Balance services\n│   │       ├── blocks.ts       # Block services\n│   │       ├── clients.ts      # Client utilities\n│   │       ├── contracts.ts    # Contract interactions\n│   │       ├── starknetid.ts   # Starknet ID services\n│   │       ├── tokens.ts       # Token services\n│   │       ├── transactions.ts # Transaction services\n│   │       ├── transfer.ts     # Transfer services\n│   │       └── utils.ts        # Utility functions\n├── package.json\n├── tsconfig.json\n└── README.md\n```\n\n## 🛠️ Development Conventions\n\nWhen adding custom tools, resources, or prompts:\n\n1. Use underscores (`_`) instead of hyphens (`-`) in all resource, tool, and prompt names\n   ```typescript\n   // Good: Uses underscores\n   server.tool(\n     \"starknet_contract_call\",\n     \"Description of the tool\",\n     {\n       contract_address: z.string().describe(\"The contract address\")\n     },\n     async (params) => {\n       // Tool implementation\n     }\n   );\n   ```\n\n2. This naming convention ensures compatibility with Cursor and other AI tools\n\n## 📚 Documentation\n\nFor more information about:\n- [Model Context Protocol](https://modelcontextprotocol.io/introduction)\n- [Starknet.js Documentation](https://www.starknetjs.com/)\n- [Starknet Documentation](https://docs.starknet.io/)\n- [StarknetID Documentation](https://docs.starknet.id/)\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "starknet",
        "blockchain",
        "mcp",
        "starknet blockchain",
        "mcpdotdirect starknet",
        "starknet mcp"
      ],
      "category": "blockchain-and-crypto"
    },
    "milancermak--starknet-mcp": {
      "owner": "milancermak",
      "name": "starknet-mcp",
      "url": "https://github.com/milancermak/starknet-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/milancermak.webp",
      "description": "Exposes Starknet RPC methods through MCP, enabling easy access to various blockchain functionalities and data retrieval from the Starknet network.",
      "stars": 9,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-03-20T00:16:20Z",
      "readme_content": "# starknet-mcp\n\n[MCP](https://modelcontextprotocol.io) server for Starknet. Makes the following Starknet RPC method available through MCP:\n\n```text\nstarknet_getBlockWithTxHashes\nstarknet_getBlockWithTxs\nstarknet_getBlockWithReceipts\nstarknet_getStateUpdate\nstarknet_getStorageAt\nstarknet_getTransactionStatus\nstarknet_getTransactionByHash\nstarknet_getTransactionByBlockIdAndIndex\nstarknet_getTransactionReceipt\nstarknet_getClass\nstarknet_getClassHashAt\nstarknet_getClassAt\nstarknet_getBlockTransactionCount\nstarknet_call\nstarknet_getEvents\nstarknet_getNonce\nstarknet_blockNumber\nstarknet_blockHashAndNumber\nstarknet_chainId\nstarknet_syncing\nstarknet_specVersion\n```\n\nWrite methods are not yet supported.\n\n<a href=\"https://glama.ai/mcp/servers/kfj96s92mg\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/kfj96s92mg/badge\" alt=\"Starknet Server MCP\" /></a>\n\n## Installation\n\nInstall [Bun](https://bun.sh/). Clone this repo. Install the dependencies with `bun install`. Update Claude's MCP config - see [instructions](https://modelcontextprotocol.io/quickstart/user) for your particular OS. You'll want something like this in the `claude_desktop_config.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"starknet\": {\n      \"command\": \"bun\",\n      \"args\": [\"/PATH/TO/THIS/REPO/starknet-mcp/index.ts\"],\n      \"env\": {\n        \"STARKNET_RPC_URL\": \"https://starknet-mainnet.public.blastapi.io/rpc/v0_7\"\n      }\n    }\n  }\n}\n```\n\n## Usage\n\nAfter correctly configuring Claude Desktop, it will have access to all the available methods. You can start asking Claude questions about the state of the chain, e.g. \"What is the latest block hash and number on Starknet?\". If Claude determines it has to use an MCP method to answer your question, it will ask you for permissions:\n\n\n\nYou'll see the used method, its input and output inline in the chat.\n\n\n\n## Quirks\n\nMethods `starknet_estimateFee` and `starknet_estimateMessageFee` are not yet supported.\n\nClaude doesn't 100% follow the tool inputSchema. It prefers sending strings over anything else. Some of this is prevented in the code, but if you encounter any error, please open an issue.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "starknet",
        "rpc",
        "blockchain",
        "starknet rpc",
        "starknet mcp",
        "exposes starknet"
      ],
      "category": "blockchain-and-crypto"
    },
    "multiversx--mx-mcp": {
      "owner": "multiversx",
      "name": "mx-mcp",
      "url": "https://github.com/multiversx/mx-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/multiversx.webp",
      "description": "Manage PEM wallets for the MultiversX blockchain, retrieve wallet addresses, check balances, and send various token types including EGLD and NFTs. Offers functionalities for wallet creation and token issuance.",
      "stars": 0,
      "forks": 1,
      "license": "Other",
      "language": "TypeScript",
      "updated_at": "2025-08-21T13:06:06Z",
      "readme_content": "# MultiversX MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@multiversx/mx-mcp)](https://smithery.ai/server/@multiversx/mx-mcp)\n\nThis is an MCP Server created to work with the MultiversX blockchain. It provides basic functionality like creating PEM wallets, getting the wallet address, getting the balance of the wallet and sending tokens (EGLD, Fungible, SFT, NFT, MetaESDT).\n\n## Overview\n\n- Create a wallet. Creates a PEM wallet at: `~/.multiversx/wallet.pem`.\n- Get the current network set for the environment.\n- Get the wallet address set in the envirnment.\n- Fetch the balance of an address.\n- Send tokens.\n- Issue tokens.\n\n## Adding to Claude Desktop via JSON\n\nEnsure you have [Claude Desktop](https://claude.ai/download) installed.\n\nOpen or create the Claude configuration file:\n\nmacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\nWindows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\nLinux: `~/.config/Claude/claude_desktop_config.json`\n\nAdd the mcp server to your configuration:\n\n```json\n{\n    \"mcpServers\": {\n        \"multiversx-mcp\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"-y\",\n                \"@multiversx/mcp\"\n            ],\n            \"env\": {\n                \"MVX_NETWORK\": \"devnet\",\n                \"MVX_WALLET\": \"absolute/path/to/someWallet.pem\"\n            }\n        }\n    }\n}\n```\n\n## Adding to cursor\n\nThe same JSON configuration from above works for Cursor (version >= 0.47). Add the config in the `~/.cursor/mcp.json` config file. Or alternatively, go to Cursor Settings -> MCP section, then add a new MCP.\n\n### Build from source\n\nClone the repository, then run `npm run build`.\n\nIn the config file, set the server to the one you've just built.\n\n```json\n{\n    \"mcpServers\": {\n        \"multiversx-mcp\": {\n            \"command\": \"node\",\n            \"args\": [\n               \"absolute/path/to/index.js\"\n            ],\n         \"env\": {\n            \"MVX_NETWORK\": \"devnet\",\n            \"MVX_WALLET\": \"absolute/path/to/someWallet.pem\"\n          }\n        }\n    }\n}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "multiversx",
        "pem",
        "mx",
        "wallets multiversx",
        "pem wallets",
        "crypto multiversx"
      ],
      "category": "blockchain-and-crypto"
    },
    "nearai--near-mcp": {
      "owner": "nearai",
      "name": "near-mcp",
      "url": "https://github.com/nearai/near-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/nearai.webp",
      "description": "Manage NEAR accounts and interact with blockchain functionality securely, enabling actions such as checking balances, signing transactions, and creating accounts on behalf of users.",
      "stars": 22,
      "forks": 11,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-18T16:57:48Z",
      "readme_content": "<div align=\"center\">\n  \n</div>\n\n[![npm version](https://badge.fury.io/js/@nearai%2Fnear-mcp.svg)](https://badge.fury.io/js/@nearai%2Fnear-mcp)\n[![Telegram](https://img.shields.io/badge/Dev_Support-2CA5E0?style=flat&logo=telegram&logoColor=white)](https://t.me/nearaialpha)\n\n# NEAR MCP\n\nThis project is a Model Context Protocol ([MCP](https://github.com/modelcontextprotocol)) compatible server for interacting with the [NEAR blockchain](https://near.org/). This tool provides a way for LLMs and AI agents to securely access and interact with NEAR accounts and blockchain functionality.\n\n## Quickstart\n\nHere is how to get started with the near-mcp server quickly with the `claude` code cli\n\n```\nnpm install -g @anthropic-ai/claude-code\nclaude mcp add near-mcp npx @nearai/near-mcp@latest run\nclaude\n```\n\nOr deploy the MCP server remotely on Phala Cloud, check the instructions [here](./tee.md)\n\n## Installing\n\n`near-mcp` is meant to be used is with an MCP compatible client. Learn more in the [MCP docs](https://modelcontextprotocol.io/introduction)\n\nAdding to the [`claude` code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview) cli:\n\n```bash\nclaude mcp add near-mcp npx @nearai/near-mcp@latest run\n```\n\nAdding to claude desktop via JSON config:\n\n```json\n{\n  \"mcpServers\": {\n    \"near-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@nearai/near-mcp@latest\", \"run\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\nAdding to [`goose`](https://block.github.io/goose/)\n\n```\n┌   goose-configure\n│\n◇  What would you like to configure?\n│  Add Extension\n│\n◇  What type of extension would you like to add?\n│  Command-line Extension\n│\n◇  What would you like to call this extension?\n│  near-mcp\n│\n◇  What command should be run?\n│  npx @nearai/near-mcp@latest run\n│\n◇  Please set the timeout for this tool (in secs):\n│  60\n│\n◇  Would you like to add environment variables?\n│  No\n│\n└  Added near-mcp extension\n```\n\nOr you can install it globally and use it directly.\n\n```bash\n# Install globally\nnpm install -g @nearai/near-mcp@latest\n\n# Or use directly with npx\nnpx @nearai/near-mcp@latest run\n```\n\n## Available Tools\n\nsee [TOOLS.md](./TOOLS.md) for a list of available tools and arguments.\n\n## Integration with AI Models\n\nThis tool is designed to be used with AI models that support the [Model Context Protocol](https://github.com/modelcontextprotocol). It enables AI assistants to:\n\n1. Manage NEAR accounts on behalf of users\n2. Check account balances and status\n3. Sign and send transactions\n4. Create new accounts and manage access keys\n5. Inspect and execution smart contracts\n\n## Security Considerations\n\n- This MCP is meant to be run locally. Account private keys are stored in a local unencrypted keystore where the MCP server is running.\n- The underlying models should not have access to see the private keys of the accounts they are interacting with with _one exception_. The `import_account` tool allows the model to import an account from a private key. This requires the user to provide the private key to the model.\n\n## Contributing\n\nWe welcome contributions to the NEAR MCP server! Please see the [CONTRIBUTING.md](CONTRIBUTING.md) file for more information.\n\n### Reporting Issues\n\nIf you find a bug or have a feature request, please open an issue on the GitHub repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "nearai",
        "blockchain",
        "crypto",
        "crypto nearai",
        "near accounts",
        "nearai near"
      ],
      "category": "blockchain-and-crypto"
    },
    "noditlabs--nodit-mcp-server": {
      "owner": "noditlabs",
      "name": "nodit-mcp-server",
      "url": "https://github.com/noditlabs/nodit-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/noditlabs.webp",
      "description": "Connects AI models to real-time blockchain data from multiple networks, enabling interaction with normalized blockchain information across both EVM-compatible and non-EVM networks. Provides structured access to blockchain data through a unified layer, facilitating the development of Web3 applications without deep blockchain expertise.",
      "stars": 18,
      "forks": 6,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-03T20:06:20Z",
      "readme_content": "# Nodit MCP Server\n\nA Model Context Protocol (MCP) server that connects AI agents and developers to structured, context-ready blockchain data across multiple networks through Nodit's Web3 infrastructure.\n\n<a href=\"https://glama.ai/mcp/servers/@noditlabs/nodit-mcp-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@noditlabs/nodit-mcp-server/badge\" alt=\"Nodit Server MCP server\" />\n</a>\n\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Node.js](https://img.shields.io/badge/Node.js-%3E%3D18.0.0-green.svg)](https://nodejs.org/)\n[![TypeScript](https://img.shields.io/badge/TypeScript-5.0%2B-blue.svg)](https://www.typescriptlang.org/)\n[![smithery badge](https://smithery.ai/badge/@noditlabs/nodit-mcp-server)](https://smithery.ai/server/@noditlabs/nodit-mcp-server)\n\n## Overview\n\nNodit MCP Server simplifies how AI models and applications interact with blockchain ecosystems.  \nInstead of handling complex node RPCs, raw event logs, or chain-specific data structures, developers can access normalized, multi-chain blockchain data in a format optimized for AI reasoning and decision-making.\n\nWith Nodit's MCP, you can:\n- Build AI agents that **query, analyze, and act on real-time blockchain data** across EVM-compatible and non-EVM networks.\n- **Develope Web3-integrated applications** without requiring specialized blockchain development expertise.\n- Leverage Nodit's **reliable node infrastructure, Web3 Data APIs, and GraphQL indexing services** through a unified access layer.\n- Easily develop with blockchain MCP in **both local and remote integration**, depending on your workflow needs.\n\nSupported networks include Ethereum, Base, Optimism, Arbitrum, Polygon, Aptos, Bitcoin, Dogecoin, TRON, XRPL, GIWA(Sepolia) and more.\n\n## Table of Contents\n- [How Nodit MCP Tools Work](#how-nodit-mcp-tools-work)\n- [Features](#features)\n- [Prerequisites](#prerequisites)\n- [Running Local Nodit MCP Server](#running-local-nodit-mcp-server)\n- [Integrating Nodit Remote MCP Server](#integrating-nodit-remote-mcp-server)\n- [Troubleshooting](#troubleshooting)\n- [Example Prompts with Nodit MCP](#example-prompts-with-nodit-mcp)\n- [Scope & Limitations](#scope--limitations)\n- [License](#license)\n\n## How Nodit MCP Tools Work\n\nNodit MCP Server provides tools enabling AI agents to dynamically discover, understand, and interact with Nodit's Web3 APIs and data infrastructure. The tools minimize token consumption and maintain a lightweight context by modularizing API interactions into distinct steps:\n\n- **List API Categories (`list_nodit_api_categories`)**  \n  Retrieve a list of high-level API categories available.\n\n- **List API Operations (`list_nodit_node_apis`, `list_nodit_data_apis`, `list_nodit_aptos_indexer_api_query_root`,`list_nodit_webhook_apis`)**  \n  Fetch available operations within a selected category (Node APIs, Data APIs, Aptos Indexer APIs, Webhook APIs).\n\n- **Get API Specification (`get_nodit_api_spec`,`get_nodit_aptos_indexer_api_spec`)**  \n  Obtain detailed information for a specific API operation (parameters, request/response schema).\n\n- **Call API (`call_nodit_api`,`call_nodit_aptos_indexer_api`)**  \n  Execute an API call using the operationId and validated parameters.\n  \nNodit MCP Server communicates using the standard JSON-RPC over stdio protocol, following the Model Context Protocol (MCP) conventions.\nCurrently, only stdio-based communication is supported for server-client interactions.\n\n## Features\n\nThe following are the key features and supported blockchain networks provided through Nodit MCP Server for AI agents and LLMs.  \nFor detailed API specifications and usage guidelines, please refer to the [Nodit Developer Documentation](https://developer.nodit.io/).\n\n- **RPC Node & Node APIs**  \n  Access blockchain node endpoints through Nodit's professionally operated infrastructure.  \n  Supports real-time network queries, transaction submissions, smart contract interactions, and more.\n\n- **Web3 Data APIs**  \n  High-level APIs for accessing meticulously indexed blockchain data.  \n  Includes processed datasets such as block and transaction details, token transfer histories, account-level transaction summaries, and asset movement details — information that would be difficult to assemble directly through raw RPC calls.\n\n- **GraphQL Indexer APIs (Aptos only)**  \n  Query detailed Aptos blockchain activities through GraphQL endpoints.\n\n- **Supported Networks**  \n  - EVM-Compatible: Ethereum, Arbitrum, Avalanche, Base, Chiliz, Kaia, Optimism, Polygon, BNB Chain, GIWA(Sepolia)\n  - Non-EVM: Aptos, Bitcoin, Dogecoin, TRON, XRPL, Sui, Solana\n\n\n## Prerequisites\n\n- Node.js 18+\n- **Nodit API Key** (Sign up and get an API key at [Nodit Console](https://nodit.lambda256.io/))\n\n\n## Running Local Nodit MCP Server\n\n### Using npx (Recommended)\n\n```bash\nnpx @noditlabs/nodit-mcp-server@latest\n```\n\n### Using local build\n\n```bash\n# Clone the repository\ngit clone --recurse-submodules https://github.com/noditlabs/nodit-mcp-server.git\n\n# Move into the project directory\ncd nodit-mcp-server\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\nBefore starting, set your Nodit API key:\n\n```bash\nexport NODIT_API_KEY=your-api-key\n```\n\nThen start the server:\n\n```bash\nnode build/index.js\n```\n\n### Communicating with the Local Server\n\nOnce the Nodit MCP Server is running locally, you can communicate with it using **JSON-RPC over stdio**.  \nHere’s how you can send a basic request to the server:\n\n**Example: List available tools**\n\nYou can directly input the JSON-RPC payload:\n\n```bash\n{\"method\":\"tools/list\",\"params\":{},\"jsonrpc\":\"2.0\",\"id\":1}\n```\n\nOr, you can pipe the request using the `echo` command:\n\n```bash\necho '{\"method\":\"tools/list\",\"params\":{},\"jsonrpc\":\"2.0\",\"id\":1}' | node build/index.js\n```\n\n**Example: Call a specific tool (list_nodit_api_categories)**\n\n```bash\necho '{\"method\":\"tools/call\",\"params\":{\"name\":\"list_nodit_api_categories\",\"arguments\":{}},\"jsonrpc\":\"2.0\",\"id\":1}' | node build/index.js\n```\n\n### Connecting to Cursor IDE or Claude Desktop\n\nAdd the following configuration to your `.cursor/mcp.json` or `claude_desktop_config.json`:\n\n- **Cursor**\n  - MacOS: `~/.cursor/mcp.json`\n  - Windows: `C:\\Users\\<Username>\\.cursor\\mcp.json`\n\n- **Claude Desktop**\n  - MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n  - Windows: `C:\\Users\\<Username>\\AppData\\Roaming\\Claude\\claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"nodit\": {\n      \"command\": \"npx\",\n      \"args\": [\"@noditlabs/nodit-mcp-server@latest\"],\n      \"env\": {\n        \"NODIT_API_KEY\": \"****\"\n      }\n    }\n  }\n}\n```\n> 🔔 **Important**  \n> Replace `****` with your actual Nodit API key.  \n> If the API key is not configured properly, API requests will fail due to authentication errors.\n\n### Connecting to Claude CLI\n\nYou can also use Nodit MCP Server directly with Claude CLI for a quick setup.\n\nAdd Nodit MCP Server with the following commands:\n\n```bash\n# Add the Nodit MCP server\nclaude mcp add nodit-mcp-server npx @noditlabs/nodit-mcp-server\n\n# Set API Key\nexport NODIT_API_KEY=your-api-key\n\n# Start Claude with the Nodit MCP server enabled\nclaude\n```\n## Integrating Nodit Remote MCP Server\nIf you’re using an AI tool that supports Remote MCP integration, you can connect to Nodit’s Remote MCP Server without running a local MCP server.\nThis allows you to use Nodit MCP features directly within your AI environment.\n\n### Endpoint\nUse the following endpoint to connect to the Nodit Remote MCP Server. Make sure to replace INSERT_YOUR_API_KEY with your actual Nodit API Key.\n\n```bash\nhttps://mcp.nodit.io/sse?apiKey=INSERT_YOUR_API_KEY\n```\n\n### Connecting to Claude (Web)\nIf you’re on the Claude Enterprise, Pro, or Max plan, you can integrate the Remote MCP Server. \n\n1. Go to Settings > Integrations, click the [Add custom integration] button.\n2. Click the [Add more] button to integrate the new Remote MCP.\n3. Insert the endpoint provided above to complete the setup.\n\nOnce the integration is complete, you’ll see that Nodit MCP has been added under the Search and Tools section on the Claude main screen.\n\n### Connecting to Cursor IDE\nTo connect Nodit MCP to Cursor IDE:\n\t1.\tOpen Preferences > Cursor Settings > MCP Tools.\n\t2.\tClick [+ New MCP Server] to open the mcp.json configuration file.\n\nYou can also open and edit the mcp.json file directly at the following path:\n  - MacOS: `~/.cursor/mcp.json`\n  - Windows: `C:\\Users\\<Username>\\.cursor\\mcp.json`\n\nAdd the following configuration to the mcpServers object. If you already have other MCP servers configured, separate each entry with a comma.\n```json\n{\n  \"mcpServers\": {\n    \"nodit\": {\n      \"url\": \"https://mcp.nodit.io/sse?apiKey=INSERT_YOUR_API_KEY\"\n    }\n  }\n}\n```\nOnce added, go back to MCP Tools in the Cursor interface and enable the nodit MCP by toggling it on. When the status shows “9 tools enabled” in green, the connection is complete.\n\n## Troubleshooting\n### Trouble running MCP via npx on Claude Desktop\nIf you are running the MCP server in combination with **Claude Desktop** or other tools that rely on a local Node.js installation, you may encounter issues due to:\n* Multiple versions of Node.js installed (e.g., via Homebrew and package installer)\n* Conflicting PATH environments\n* Claude Desktop not recognizing the correct Node.js runtime\n\nFollow the steps below to verify that **Node.js 18+** is properly installed and recognized on your system.\n\n#### 1. Check your currently active Node.js version\nRun the following command in your terminal to check the version:\n```\nnode --version\n```\nYou should see a version number starting with v18 or higher (e.g., v18.19.0).\n\nIf not, you may need to install a compatible version or switch to it.\n\n> [!TIP] \n> Claude Desktop may not use the same Node.js version as your terminal. If you have multiple installations (e.g., via Homebrew, nvm, or direct installer), it may default to an unexpected version.\n> To list all common installation paths:\n> ```\n> # Homebrew installation\n> ls /usr/local/bin/node\n> ls /opt/homebrew/bin/node\n> \n> # nvm installations\n> ls ~/.nvm/versions/node/\n> \n> # System installation\n> ls /usr/bin/node\n> ```\n\n#### 2. Install or switch to Node.js 18+ if needed\nIf you don’t have a compatible version, install Node.js using one of the following methods:\n\n* Using Node.js official installer: Download from nodejs.org\n* Using Homebrew (macOS):\n```  \nbashbrew install node@20\n```\n* Using nvm (recommended for version management):\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\nnvm install 20\nnvm use 20\nnvm alias default 20\n```\n\n#### 3. Check which Node.js version Claude Desktop uses\nClaude Desktop inherits the PATH from your system environment.\nIn your terminal, run:\n```\nwhich node\n```\nThis displays the path of the Node.js binary currently active in your terminal. This is the path that Claude is likely to use when launched from that terminal.\n\n#### 4. Force Claude Desktop to use the correct Node.js version\n* If you’re using nvm:\n```\nnvm use 18  # Set proper version \nnvm alias default 18\n```\n\n* If you’re using Homebrew, ensure it’s prioritized in your PATH:\n```\nexport PATH=\"/opt/homebrew/bin:$PATH\"  # for Apple Silicon\n# or\nexport PATH=\"/usr/local/bin:$PATH\"     # for Intel Macs\n```\nWe recommend sticking to a single installation method (e.g., either nvm or Homebrew) to avoid version conflicts.\n\n#### 5. Restart Claude Desktop\nAfter making changes, restart Claude Desktop to ensure it picks up the correct environment variables and Node.js version.\n\n## Example Prompts with Nodit MCP\nOnce Nodit MCP is connected, you can use natural language to directly query blockchain data from multiple networks.\nThe examples below illustrate just a few of the many possibilities — feel free to go beyond them and explore your own use cases. \n\n### 📊 On-chain Activity Monitoring\n```\nSummarize the recent activity of 0xabc…def across Ethereum and Arbitrum. Include major transactions, token transfers, and NFT interactions over the past 7 days.\n```\n```\nWhat fungible and non-fungible tokens does this wallet hold across Ethereum and Polygon? Include balances and token names.\n```\n```\nAnalyze the risk profile of wallet 0xabc… based on its recent on-chain behavior.\n```\n\n### 🧾 Smart Contract & Transaction Analysis\n```\nAnalyze how users interacted with the contract at 0xcontract… on Ethereum over the last week.\n```\n```\nAnalyze the last 10 blocks on Arbitrum.\n```\n\n### 🧠 AI Agent Use Cases\n```\nBased on wallet 0xabc…’s holdings, recommend optimal DeFi strategies across Ethereum and Arbitrum.\n```\n```\nCreate a daily summary report for 0xdao… including token balances, inflow/outflow, and governance activity.\n```\n\n### ⚙️ Web3 DApp Development\n```\nWrite TypeScript code using fetch to retrieve all ERC-20 transfers for 0xabc… from Ethereum using Nodit’s Node API.\n```\n```\nBuild a simple dashboard to visualize how assets have moved in recent XRPL transactions.\n```\n```\nBuild a dashboard that aggregates blockchain data across multiple chains using Nodit.\n```\n\n## Scope & Limitations\n\nNodit MCP Server provides structured context to help LLM-based agents utilize Nodit's APIs effectively.  \nIts responsibilities include:\n\n- Structuring Nodit APIs (Node APIs, Web3 Data APIs) in an LLM-consumable format.\n- Exposing endpoint details, input/output schemas, sample responses, and error handling guidelines.\n\nHowever, the following are **outside the MCP's control**:\n\n- API selection may vary depending on the LLM version (e.g., GPT-4, Claude 3), prompt engineering, or agent design.\n- Interpretation of API responses or errors depends on the consuming LLM's reasoning capabilities.\n\nNodit MCP Server focuses on delivering accurate and structured API context,  \nbut does **not guarantee** the final reasoning outcomes or behavior of external LLMs.\n\n\n## License\n\nThis project is licensed under the [Apache License 2.0](./LICENSE).  \nRefer to the LICENSE file for full license terms.  \nRelevant legal notices are provided in the [NOTICE](./NOTICE) file.\n\n\"Nodit\" and the Nodit logo are trademarks of Lambda256.  \nUse of the name or logo without prior written permission is prohibited.\n\n---\n© Lambda256. All rights reserved.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "nodit",
        "noditlabs",
        "deep blockchain",
        "crypto noditlabs",
        "blockchain expertise"
      ],
      "category": "blockchain-and-crypto"
    },
    "oraichain--orai-mcp": {
      "owner": "oraichain",
      "name": "orai-mcp",
      "url": "https://github.com/oraichain/orai-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/oraichain.webp",
      "description": "Facilitates the interaction of AI agents with multiple blockchain networks, enabling asset management, transaction execution, and smart contract deployment. Provides tools for developing AI applications with integrated blockchain capabilities.",
      "stars": 3,
      "forks": 3,
      "license": "GNU General Public License v3.0",
      "language": "TypeScript",
      "updated_at": "2025-05-26T17:12:30Z",
      "readme_content": "# Multichain MCP Server 🌐\n\n[![License: GPL-3.0](https://img.shields.io/badge/License-GPL%20v3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n\n> 🏗️ Built and maintained by [Oraichain Labs](https://github.com/oraichain)\n\nA comprehensive toolkit for building and deploying AI agents with blockchain capabilities. This monorepo includes:\n\n- A Model Context Protocol (MCP) server for AI applications\n- Agent development tools for blockchain interactions\n- Development kit for building custom AI agents\n\n## About Oraichain Labs\n\n[Oraichain Labs](https://orai.io) is the team behind Oraichain, the world's first AI Layer 1 for Web3. We specialize in AI Agents and blockchain technologies:\n\n- Autonomous Web3 AI Agents\n- Decentralized AI Marketplace\n- AI Oracle System\n- Multichain DeFi protocols\n\n## Contributors\n\nThanks goes to these wonderful people:\n\n<a href=\"https://github.com/oraichain/multichain-mcp/graphs/contributors\">\n  <img alt=\"multichain_mcp\" src=\"https://contrib.rocks/image?repo=oraichain/multichain-mcp\" />\n</a>\n\n## Overview\n\nThis project provides a complete suite of tools for AI-blockchain integration:\n\n### MCP Server\n\n- Interact with multiple blockchain networks\n- Retrieve wallet addresses and balances\n- Transfer funds and manage tokens\n- Deploy and interact with smart contracts\n- Bridge assets between networks\n\n### Agent Tools\n\n- Ready-to-use blockchain interaction tools\n- Multi-chain support out of the box\n- DeFi protocol integrations\n- Secure transaction handling\n\n### Agent Development Kit\n\n- Build custom AI agents with blockchain capabilities\n- Extensible interfaces and types\n- Best practices and examples\n- Testing utilities\n\nThe entire toolkit is built using TypeScript and supports multiple blockchain networks through a unified interface.\n\n## Prerequisites\n\n- Node.js (v18 or higher)\n- pnpm (v9.0.0 or higher)\n- Wallet configuration for supported networks\n- API keys for supported networks (optional)\n\n### Installing Prerequisites\n\n1. Install Node.js:\n\n   - Visit [Node.js official website](https://nodejs.org/)\n   - Download and install the LTS version (v18 or higher)\n   - Verify installation:\n     ```sh\n     node --version\n     npm --version\n     ```\n\n2. Install pnpm:\n\n   ```sh\n   # Using npm\n   npm install -g pnpm\n\n   # Verify installation\n   pnpm --version\n   ```\n\n   For alternative installation methods, visit [pnpm installation guide](https://pnpm.io/installation).\n\n## Installation\n\nClone this repository:\n\n```sh\ngit clone https://github.com/oraichain/multichain-mcp.git\ncd multichain-mcp\n```\n\nInstall dependencies:\n\n```sh\npnpm install\n```\n\nBuild the project:\n\n```sh\npnpm build\n```\n\n## Configuration\n\nCreate a `.env` file with your configuration:\n\n```env\n# Server Configuration\nPORT=4000 # Optional, defaults to 4000\n\n# Network RPC URLs\nRPC_URL=your_rpc_url # Optional, defaults to https://rpc.orai.io\n```\n\n## Development\n\nTo develop all packages, run:\n\n```sh\npnpm dev\n```\n\nTo build all packages:\n\n```sh\npnpm build\n```\n\nTo run tests:\n\n```sh\npnpm test\n```\n\n## Project Structure\n\nThis is a monorepo using Turborepo and pnpm workspaces. Here's the structure:\n\n- `packages/`\n  - `mcp-server/`: The core MCP server implementation\n  - `agent-tools/`: Collection of blockchain interaction tools for AI agents\n  - `agent-kit/`: Development kit for building AI agents with blockchain capabilities\n\nEach package serves a specific purpose:\n\n### MCP Server\n\nThe main server package that implements the Model Context Protocol for blockchain interactions. It provides the core functionality for handling requests from AI clients.\n\n### Agent Tools\n\nA collection of tools specifically designed for AI agents to interact with various blockchain networks. These tools are used by the MCP server to execute blockchain operations.\n\n### Agent Kit\n\nA development kit that helps developers build AI agents with blockchain capabilities. It includes utilities, types, and interfaces for consistent agent development.\n\n## Integration with AI Tools\n\n### Claude Desktop Integration\n\nTo add this MCP server to Claude Desktop:\n\n1. Create or edit the Claude Desktop configuration file at:\n\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - Linux: `~/.config/Claude/claude_desktop_config.json`\n\n2. Add the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@oraichain/mcp-server@0.0.21\"],\n      \"env\": {\n        \"RPC_URL\": \"https://rpc.orai.io\"\n      }\n    }\n  }\n}\n```\n\n3. Restart Claude Desktop for the changes to take effect.\n\n## 📜 License\n\nThis project is licensed under the GNU General Public License v3.0 - see the [LICENSE](LICENSE) file for details.\n\n## 💬 Community\n\n- [GitHub Discussions](https://github.com/oraichain/multichain-mcp/discussions)\n- [Discord](https://discord.gg/oraichain)\n\n## ⭐ Support\n\nIf you find Multichain MCP useful, please consider starring the repository and contributing new features or improvements!\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "oraichain",
        "orai",
        "blockchain",
        "crypto oraichain",
        "oraichain orai",
        "blockchain crypto"
      ],
      "category": "blockchain-and-crypto"
    },
    "pavel-bc--mcp-blockchain-query": {
      "owner": "pavel-bc",
      "name": "mcp-blockchain-query",
      "url": "https://github.com/pavel-bc/mcp-blockchain-query",
      "imageUrl": "/freedevtools/mcp/pfp/pavel-bc.webp",
      "description": "Query Bitcoin blockchain data including blocks, transactions, and addresses using real-time insights. Access various blockchain metrics and analytics for enhanced application functionality.",
      "stars": 1,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-07-31T06:41:22Z",
      "readme_content": "# MCP Blockchain Query Server\n\n\n\n> [!WARNING]\n> Majority of the code in this repository was generated using [Grok 3 Beta](https://x.ai/blog/grok-3)\n\n[Model Context Protocol](https://modelcontextprotocol.io) server providing tools for querying BTC data via Blockchain [Data](https://www.blockchain.com/explorer/api/blockchain_api) and [Query](https://www.blockchain.com/explorer/api/q) APIs.\n\n## Demo\n\nhttps://github.com/user-attachments/assets/b270979b-b22f-467c-bcb4-54bd48504073\n\n## Features\n\n- Supports both stdio and SSE transports\n- Available [tools](https://modelcontextprotocol.io/docs/concepts/tools):\n    - Get block by hash\n    - Get transaction by hash\n    - Get address by hash\n    - Get block count\n    - Get difficulty\n    - Get address balance\n    - Get hash rate\n    - Get average transaction size\n    - Get total bitcoins\n    - Get probability of finding a block\n    - Get 24-hour market price\n    - Get block interval\n    - Get block reward\n    - Get next retarget\n    - Get latest hash\n    - Get unconfirmed count\n    - Get 24-hour transaction count\n\n## Installation\n\n```\npython -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\n## Running\n\nRun in stdio mode (default):\n\n    $ python main.py\n\nRun in SSE mode:\n\n    $ python main.py --transport sse --port 8000\n\nCLI Arguments:\n\n- `--port`: Port number for SSE transport (default: 8000)\n- `--transport`: Transport type (stdio or sse, default: stdio)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "bitcoin",
        "crypto",
        "blockchain metrics",
        "blockchain query",
        "various blockchain"
      ],
      "category": "blockchain-and-crypto"
    },
    "piplabs--story-mcp-hub": {
      "owner": "piplabs",
      "name": "story-mcp-hub",
      "url": "https://github.com/piplabs/story-mcp-hub",
      "imageUrl": "/freedevtools/mcp/pfp/piplabs.webp",
      "description": "Manage intellectual property assets and licenses within the Story Protocol ecosystem using the Story Python SDK.",
      "stars": 14,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-31T21:13:22Z",
      "readme_content": "# Story MCP Hub\n\nThis repository serves as a central hub for Story Protocol's Model Context Protocol (MCP) servers. It provides a unified environment for running and managing various MCP services that enable AI agents to interact with Story Protocol's ecosystem.\n\n## Project Structure\n\n```\nstory-mcp-hub/\n├── storyscan-mcp/       # MCP server for blockchain data queries via StoryScan\n├── story-sdk-mcp/       # MCP server for Story Protocol SDK interactions\n├── utils/               # Shared utilities for MCP servers\n├── .venv/               # Python virtual environment\n├── pyproject.toml       # Project dependencies and configuration\n├── .python-version      # Python version specification\n└── README.md            # This file\n```\n\n```mermaid\ngraph TD\n    subgraph \"MCP Hub\"\n        style MCP Hub fill:#F5F5FF,stroke:#9999CC,stroke-width:2px,rx:10,ry:10\n        Agent[\"AI Agent<br>(Claude, IDEs, Tools)\"]\n        style Agent fill:#E6E6FA,stroke:#9370DB,stroke-width:2px,rx:8,ry:8\n    end\n\n    subgraph \"StoryScan MCP Server\"\n        style StoryScan MCP Server fill:#F0F8FF,stroke:#87CEFA,stroke-width:2px,rx:10,ry:10\n        StoryscanService[\"StoryScan Service\"]\n        style StoryscanService fill:#E6E6FA,stroke:#9370DB,stroke-width:2px,rx:8,ry:8\n\n        subgraph \"StoryScan Tools\"\n            style StoryScan Tools fill:#F0FFFF,stroke:#5F9EA0,stroke-width:2px,rx:10,ry:10\n            StoryscanToolset[\"Blockchain Data<br>get_transactions,<br>get_address_overview,<br>get_token_holdings,<br>get_nft_holdings,<br>get_stats,<br>interpret_transaction\"]\n            style StoryscanToolset fill:#E0FFFF,stroke:#5F9EA0,stroke-width:2px,rx:8,ry:8\n        end\n    end\n\n    subgraph \"Story SDK MCP Server\"\n        style Story SDK MCP Server fill:#F5FFFA,stroke:#98FB98,stroke-width:2px,rx:10,ry:10\n        StoryService[\"Story Service\"]\n        style StoryService fill:#E6E6FA,stroke:#9370DB,stroke-width:2px,rx:8,ry:8\n\n        subgraph \"Story SDK Tools\"\n            style Story SDK Tools fill:#F0FFF0,stroke:#90EE90,stroke-width:2px,rx:10,ry:10\n            IPFSTools[\"IPFS & Metadata<br>upload_image_to_ipfs<br>create_ip_metadata\"]\n            style IPFSTools fill:#E0FFFF,stroke:#5F9EA0,stroke-width:2px,rx:8,ry:8\n            LicenseTools[\"License Management<br>get_license_terms,<br>mint_license_tokens,<br>get_license_minting_fee,<br>predict_minting_license_fee\"]\n            style LicenseTools fill:#E0FFFF,stroke:#5F9EA0,stroke-width:2px,rx:8,ry:8\n            IPTools[\"IP & NFT Management<br>register, attach_license_terms,<br>mint_and_register_ip_with_terms,<br>create_spg_nft_collection\"]\n            style IPTools fill:#E0FFFF,stroke:#5F9EA0,stroke-width:2px,rx:8,ry:8\n            TokenTools[\"Token & Revenue<br>deposit_wip, transfer_wip,<br>pay_royalty_on_behalf,<br>claim_all_revenue,<br>raise_dispute\"]\n            style TokenTools fill:#E0FFFF,stroke:#5F9EA0,stroke-width:2px,rx:8,ry:8\n        end\n    end\n\n    subgraph \"External Resources\"\n        style External Resources fill:#FFF0F5,stroke:#FFB6C1,stroke-width:2px,rx:10,ry:10\n        IPFS[(IPFS/Pinata<br>Storage)]\n        style IPFS fill:#FFE4E1,stroke:#DB7093,stroke-width:2px,rx:15,ry:15\n        Blockchain[(Story Protocol<br>Blockchain)]\n        style Blockchain fill:#E0F8E0,stroke:#90EE90,stroke-width:2px,rx:15,ry:15\n        StoryScan[(StoryScan/Blockscout<br>API)]\n        style StoryScan fill:#E6F3FF,stroke:#87CEFA,stroke-width:2px,rx:15,ry:15\n    end\n\n    Agent <--MCP Protocol--> StoryService\n    Agent <--MCP Protocol--> StoryscanService\n    StoryscanService --> StoryscanToolset\n    StoryService --> IPFSTools\n    StoryService --> LicenseTools\n    StoryService --> IPTools\n    StoryService --> TokenTools\n\n    StoryscanToolset <--API Calls--> StoryScan\n    IPFSTools <--API Calls--> IPFS\n    LicenseTools <--RPC Calls--> Blockchain\n    IPTools <--RPC Calls--> Blockchain\n    TokenTools <--RPC Calls--> Blockchain\n```\n\n## MCP Servers\n\n### StoryScan MCP Server\n\nProvides tools for querying blockchain data, including address balances, transactions, and blockchain statistics.\n\n**Tools:**\n\n- `get_transactions`: Get recent transactions for an address\n- `get_stats`: Get current blockchain statistics\n- `get_address_overview`: Get a comprehensive overview of an address including balance, token info, and blockchain activity\n- `get_token_holdings`: Get all ERC-20 token holdings for an address, including detailed token information and balances\n- `get_nft_holdings`: Get all NFT holdings for an address, including collection information and individual token metadata\n- `interpret_transaction`: Get a human-readable interpretation of a blockchain transaction\n\n### Story SDK MCP Server\n\nProvides tools for interacting with Story Protocol's Python SDK.\n\n**Tools:**\n\n**IPFS & Metadata Tools (requires PINATA_JWT):**\n- `upload_image_to_ipfs`: Upload an image to IPFS using Pinata API and return the URI\n- `create_ip_metadata`: Create and upload both NFT and IP metadata to IPFS\n\n**License Management Tools:**\n- `get_license_terms`: Retrieve license terms for a specific ID\n- `get_license_minting_fee`: Get the minting fee for a specific license terms ID\n- `get_license_revenue_share`: Get the commercial revenue share percentage for a specific license terms ID\n- `mint_license_tokens`: Mint license tokens for a given IP and license terms (auto-approves WIP tokens)\n- `predict_minting_license_fee`: Pre-compute the minting license fee for given IP, license terms and amount\n\n**IP Asset Management Tools:**\n- `register`: Register an NFT as IP, creating a corresponding IP record\n- `attach_license_terms`: Attach license terms to an IP asset\n- `mint_and_register_ip_with_terms`: Mint and register an IP with terms\n\n**NFT Collection Tools:**\n- `create_spg_nft_collection`: Create a new SPG NFT collection that can be used for minting and registering IP assets\n- `get_spg_nft_minting_token`: Get the minting fee required by an SPG NFT contract\n\n**Revenue & Royalty Tools:**\n- `pay_royalty_on_behalf`: Pay royalties to a receiver IP asset on behalf of a payer IP asset (auto-approves tokens)\n- `claim_all_revenue`: Claim all revenue from child IPs of an ancestor IP with optional auto-transfer\n\n**Dispute Tools:**\n- `raise_dispute`: Raise a dispute against an IP asset (auto-approves WIP bond tokens)\n\n**Token Management Tools:**\n- `deposit_wip`: Wrap IP to WIP and deposit to wallet\n- `transfer_wip`: Transfer WIP tokens to a recipient\n- `get_erc20_token_balance`: Get the balance of any ERC20 token for an account\n- `mint_test_erc20_tokens`: Mint test ERC20 tokens if the contract has a public mint/faucet function\n\n## Setup\n\n### Prerequisites\n\n- Python 3.12+\n- UV package manager\n\n### Installation\n\n1. Install UV package manager and install env:\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n2. Clone this repository:\n\n```bash\ngit clone https://github.com/piplabs/story-mcp-hub.git\ncd story-mcp-hub\n```\n\n3. Install dependencies using UV:\n\n```bash\nuv sync\n```\n\n4. Set up environment variables for each server:\n\nFor StoryScan MCP:\n\n```bash\ncd storyscan-mcp\ncp .env.example .env\n# Edit .env with your StoryScan API endpoint\n```\n\nFor Story SDK MCP:\n\n```bash\ncd story-sdk-mcp\ncp .env.example .env\n# Edit .env with your wallet private key, RPC provider URL, etc.\n```\n\n## Running the Servers\n\n### StoryScan MCP Server Inspector\n\n```bash\ncd storyscan-mcp\nuv run mcp dev server.py\n```\n\n### Story SDK MCP Server\n\n```bash\ncd story-sdk-mcp\nuv run mcp dev server.py\n```\n\n## Using with MCP Clients\n\nFollow the instructions below to connect the MCP servers to various MCP-compatible clients.\n\n### Cursor\n\nCursor implements an MCP client that supports an arbitrary number of MCP servers with both `stdio` and `sse` transports.\n\n#### Adding MCP Servers in Cursor\n\n1. Go to `Cursor Settings` > `Features` > `MCP`\n2. Click on the `+ Add New MCP Server` button\n3. Fill out the form:\n   - Select the transport under `Type`\n   - Enter a nickname for the server in the `Name` field\n   - Enter either the command to run or the URL of the server, depending on the transport\n   - We'll use the `uv` command to run the server, so make sure to include the `--directory` flag with the path to the server (Example: `uv --directory ~/path/to/story-mcp-hub/storyscan-mcp run server.py`)\n\n![Screenshot 2025-03-10 at 2 50 48 PM](https://github.com/user-attachments/assets/a2f1e624-3f13-4eb7-b16b-b347cea8b339)\n\n#### Project-Specific MCP Configuration\n\nYou can configure project-specific MCP servers using `.cursor/mcp.json`. The file follows this format:\n\n```json\n{\n  \"mcpServers\": {\n    \"storyscan-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"~/path/to/story-mcp-hub/storyscan-mcp\",\n        \"run\",\n        \"server.py\"\n      ]\n    },\n    \"story-sdk-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"~/path/to/story-mcp-hub/story-sdk-mcp\",\n        \"run\",\n        \"server.py\"\n      ]\n    }\n  }\n}\n```\n\n#### Using MCP Tools in Cursor\n\nThe Composer Agent will automatically use any MCP tools that are listed under `Available Tools` on the MCP settings page if it determines them to be relevant. To prompt tool usage intentionally, simply tell the agent to use the tool, referring to it either by name or by description.\n\nWhen the Agent wants to use an MCP tool, it will display a message asking for your approval.\n\n### Claude Desktop\n\nClaude Desktop can be configured to use MCP servers by editing its configuration file.\n\n#### Adding MCP Servers in Claude Desktop\n\n1. Open the Claude Desktop configuration file:\n\n```bash\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n2. Add the MCP server configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"storyscan-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"~/path/to/story-mcp-hub/storyscan-mcp\",\n        \"run\",\n        \"server.py\"\n      ]\n    },\n    \"story-sdk-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"~/path/to/story-mcp-hub/story-sdk-mcp\",\n        \"run\",\n        \"server.py\"\n      ]\n    }\n  }\n}\n```\n\n3. Save the file and restart Claude Desktop for the changes to take effect.\n\n![Screenshot 2025-03-10 at 2 57 24 PM](https://github.com/user-attachments/assets/6901e488-09a7-452a-b1cd-17aa525cac2a)\n\nExample query: `use storyscan to check balance of 0x95A13F457C76d10A40D7e8497eD4F40c53F4d04b`\n\n## Development\n\nTo add a new MCP server to the hub:\n\n1. Create a new directory for your server\n2. Implement the MCP protocol in your server\n3. Add any necessary dependencies to the root `pyproject.toml`\n4. Update this README with information about your server\n\n## Testing\n\n### Running Tests\n\nThe project includes a test runner script (`run_tests.py`) that handles environment setup and test execution. To run tests:\n\n1. Install test dependencies:\n\n```bash\nuv sync --extra test\n```\n\n2. Run all tests:\n\n```bash\nuv run python run_tests.py\n```\n\n3. Run specific test categories:\n\n```bash\n# Run unit tests only\nuv run python run_tests.py -t tests/unit/\n\n# Run integration tests only\nuv run python run_tests.py -t tests/integration/\n\n# Run with verbose output\nuv run python run_tests.py -v\n```\n\n4. Run individual test files:\n\n```bash\nuv run python run_tests.py -t tests/unit/story_sdk_mcp/test_story_service.py\n```\n\n5. Get help on available options:\n\n```bash\nuv run python run_tests.py --help\n```\n\n### Environment Setup for Testing\n\nThe tests use a `.env.test` file with mock credentials for testing. This file is automatically loaded by the test runner.\n\nTo set up your test environment:\n\n1. Copy the example file to create your own `.env.test`:\n\n```bash\ncp .env.test.example .env.test\n```\n\n2. Edit the `.env.test` file to include your test credentials:\n\n```bash\n# For example, update the private key for blockchain interactions\nnano .env.test  # or use your preferred text editor\n```\n\nFor more detailed information about testing, see the [testing guide](TESTING.md).\n\n### Troubleshooting\n\nIf you encounter issues:\n\n1. Verify that environment variables are set correctly for each server\n2. Check network connectivity to external APIs (StoryScan, IPFS, etc.)\n3. Ensure you're using the correct Python version (3.12+)\n4. Check that all dependencies are installed with `uv sync`\n\n## License\n\n[MIT License](LICENSE)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "crypto",
        "piplabs",
        "story python",
        "story protocol",
        "piplabs story"
      ],
      "category": "blockchain-and-crypto"
    },
    "quanghuynguyen1902--jupiter-mcp-server": {
      "owner": "quanghuynguyen1902",
      "name": "jupiter-mcp-server",
      "url": "https://github.com/quanghuynguyen1902/jupiter-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/quanghuynguyen1902.webp",
      "description": "Integrate with Jupiter's optimized token swap API to facilitate token swap operations on the Solana blockchain. Perform actions such as obtaining quotes, building transactions, and executing swaps, using secure private key integration.",
      "stars": 16,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-17T05:46:29Z",
      "readme_content": "# Jupiter MCP Server\n\nThis repository contains a Model Context Protocol (MCP) server that provides Claude with access to Jupiter's swap API. The server enables Claude to perform operations like getting quotes, building swap transactions, and sending swap transactions on the Solana blockchain using Jupiter.\n\n## Overview\n\nThe MCP server exposes several tools to Claude:\n\n- `jupiter_get_quote`: Get a quote for swapping tokens on Jupiter\n- `jupiter_build_swap_transaction`: Build a swap transaction on Jupiter\n- `jupiter_send_swap_transaction`: Send a swap transaction on Jupiter\n- `jupiter_execute_swap`: Execute a complete swap using a wallet private key from environment variables\n\n## API Implementation\n\nThis server uses Jupiter APIs:\n- **Lite API v1** (`https://lite-api.jup.ag/swap/v1`) for executing swaps\n\nThe Lite API provides a simplified interface for building and executing swaps in a single request, which improves reliability.\n\n## Prerequisites\n\n- Node.js (v16 or higher)\n- Claude Desktop application\n- (Optional) A Solana wallet private key for automatic swap execution\n\n## Installation\n\n### From npm (recommended)\n\n```bash\n# Install globally\nnpm install -g jupiter-mcp-server\n\n# Or use with npx\nnpx jupiter-mcp-server\n```\n\n### From source\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/quanghuynguyen1902/jupiter-mcp-server.git\n   cd jupiter-mcp-server\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm ci\n   ```\n\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n\n4. Install globally (optional):\n   ```bash\n   npm install -g ./\n   ```\n\n## Configuration\n\n### Configure Claude Desktop with Environment Variables\n\nTo configure Claude Desktop to use this MCP server with environment variables for automatic swap execution:\n\n1. Open Claude Desktop\n2. Navigate to the Claude Desktop configuration file:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\\\Claude\\\\claude_desktop_config.json`\n   - Linux: `~/.config/Claude/claude_desktop_config.json`\n\n3. Add the MCP server configuration with environment variables:\n\n```json\n{\n  \"mcpServers\": {\n    \"jupiter-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"jupiter-mcp-server\"],\n      \"env\": {\n        \"SOLANA_PRIVATE_KEY\": \"your_private_key_in_base58_format\",\n        \"SOLANA_RPC_ENDPOINT\": \"https://api.mainnet-beta.solana.com\",\n        \"SOLANA_NETWORK\": \"mainnet-beta\",\n        \"LOG_LEVEL\": \"info\"\n      }\n    }\n  }\n}\n```\n\nIf you've installed from source and want to run the local version, use:\n\n```json\n{\n  \"mcpServers\": {\n    \"jupiter-mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/your/jupiter-mcp-server/build/index.js\"\n      ],\n      \"env\": {\n        \"SOLANA_PRIVATE_KEY\": \"your_private_key_in_base58_format\",\n        \"SOLANA_RPC_ENDPOINT\": \"https://api.mainnet-beta.solana.com\",\n        \"SOLANA_NETWORK\": \"mainnet-beta\",\n        \"LOG_LEVEL\": \"info\"\n      }\n    }\n  }\n}\n```\n\n### Environment Variables Description\n\n- **SOLANA_PRIVATE_KEY** (required for automatic swap): Your Solana wallet private key in base58 format\n- **SOLANA_RPC_ENDPOINT** (optional): RPC endpoint URL, defaults to mainnet public endpoint\n- **SOLANA_NETWORK** (optional): 'mainnet-beta', 'testnet', or 'devnet', defaults to 'mainnet-beta'\n- **LOG_LEVEL** (optional): 'error', 'warn', 'info', or 'debug', defaults to 'info'\n\n### Alternative: Using a .env File\n\nIf you're running the server directly (not through Claude Desktop), you can create a `.env` file in the root directory with the same variables:\n\n```\nSOLANA_PRIVATE_KEY=your_private_key_in_base58_format\nSOLANA_RPC_ENDPOINT=https://api.mainnet-beta.solana.com\nSOLANA_NETWORK=mainnet-beta\nLOG_LEVEL=info\n```\n\n### Running Locally\n\n```bash\n# If installed globally\njupiter-mcp-server\n\n# If installed from source\nnode build/index.js\n\n# Using npx\nnpx jupiter-mcp-server\n```\n\n## Usage\n\nOnce configured, restart Claude Desktop. Claude will now have access to the Jupiter swap tools. You can ask Claude to:\n\n1. Get a quote for swapping tokens:\n   ```\n   What's the quote for swapping 1 SOL to USDC?\n   ```\n\n2. Build a swap transaction:\n   ```\n   Build a swap transaction for the quote I just got.\n   ```\n\n3. Send a swap transaction:\n   ```\n   Send the swap transaction I just built.\n   ```\n\n4. Execute a swap automatically (if you've provided a private key):\n   ```\n   Execute a swap of 0.1 SOL to USDC.\n   ```\n\n## Automatic Swap Execution\n\nIf you've configured your environment with a Solana private key, Claude can now execute swaps directly without requiring you to sign transactions manually. This feature uses the private key from your environment to:\n\n1. Get a quote for the swap\n2. Build the transaction\n3. Sign the transaction with your private key\n4. Send the transaction to the network\n\nAll in one step!\n\n## Troubleshooting\n\nIf you encounter errors during swap execution:\n\n1. Set `LOG_LEVEL=debug` in your environment variables to get detailed logs\n2. Check that you have provided a valid Solana private key\n3. Ensure your wallet has sufficient SOL for the swap and transaction fees\n4. Verify that you are using the correct input and output token mints\n\n## Development\n\n### Adding New Tools\n\nTo add new tools to the MCP server:\n\n1. Define the tool in `src/tools.ts`\n2. Create a handler function in the appropriate handler file\n3. Add the handler to the `handlers` object in `src/tools.ts`\n\n### Building\n\n```bash\nnpm run build\n```\n\n### Testing\n\n```bash\nnpm test\n```\n\n### Publishing to npm\n\nMake sure you're logged in to npm:\n\n```bash\nnpm login\n```\n\nThen publish the package:\n\n```bash\nnpm publish\n```\n\nTo publish a new version, first update the version in package.json:\n\n```bash\nnpm version patch  # or minor, or major\nnpm publish\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crypto",
        "jupiter",
        "token",
        "solana blockchain",
        "token swap",
        "jupiter mcp"
      ],
      "category": "blockchain-and-crypto"
    },
    "r3e-network--neo-n3-mcp": {
      "owner": "r3e-network",
      "name": "neo-n3-mcp",
      "url": "https://github.com/r3e-network/neo-n3-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/r3e-network.webp",
      "description": "Integrate with the Neo N3 blockchain for wallet management, asset transfers, and smart contract interactions. Provide capabilities for querying blockchain data and enhancing applications with blockchain functionalities.",
      "stars": 4,
      "forks": 3,
      "license": "MIT License",
      "language": "HTML",
      "updated_at": "2025-07-07T05:17:17Z",
      "readme_content": "# Neo N3 MCP Server\n\n**MCP Server for Neo N3 Blockchain Integration** | Version 1.6.0\n\n[![MCP SDK](https://img.shields.io/badge/MCP%20SDK-1.9.0-blue)](https://github.com/modelcontextprotocol/typescript-sdk)\n[![Neo N3](https://img.shields.io/badge/Neo%20N3-Compatible-green)](https://neo.org/)\n[![NPM](https://img.shields.io/badge/NPM-@r3e/neo--n3--mcp-red)](https://www.npmjs.com/package/@r3e/neo-n3-mcp)\n\nA production-ready MCP server providing Neo N3 blockchain integration with 34 tools and 9 resources for wallet management, asset transfers, contract interactions, and blockchain queries.\n\n## 🚀 Quick Start\n\n### Install from NPM\n```bash\n# Install globally\nnpm install -g @r3e/neo-n3-mcp\n\n# Or install locally\nnpm install @r3e/neo-n3-mcp\n```\n\n### Basic Usage\n```bash\n# Run with default configuration\nnpx @r3e/neo-n3-mcp\n\n# Or if installed globally\nneo-n3-mcp\n```\n\n## ⚙️ Configuration\n\n### 1. Command Line Configuration\n\n```bash\n# Specify network\nneo-n3-mcp --network testnet\n\n# Custom RPC endpoints\nneo-n3-mcp --mainnet-rpc https://mainnet1.neo.coz.io:443 --testnet-rpc https://testnet1.neo.coz.io:443\n\n# Enable logging\nneo-n3-mcp --log-level info --log-file ./neo-mcp.log\n\n# Complete example\nneo-n3-mcp \\\n  --network mainnet \\\n  --mainnet-rpc https://mainnet1.neo.coz.io:443 \\\n  --testnet-rpc https://testnet1.neo.coz.io:443 \\\n  --log-level debug \\\n  --log-file ./logs/neo-mcp.log\n```\n\n### 2. JSON Configuration\n\nCreate a `neo-mcp-config.json` file:\n\n```json\n{\n  \"network\": \"mainnet\",\n  \"rpc\": {\n    \"mainnet\": \"https://mainnet1.neo.coz.io:443\",\n    \"testnet\": \"https://testnet1.neo.coz.io:443\"\n  },\n  \"logging\": {\n    \"level\": \"info\",\n    \"file\": \"./logs/neo-mcp.log\",\n    \"console\": true\n  },\n  \"server\": {\n    \"name\": \"neo-n3-mcp-server\",\n    \"version\": \"1.6.0\"\n  },\n  \"wallets\": {\n    \"directory\": \"./wallets\"\n  }\n}\n```\n\nRun with config file:\n```bash\nneo-n3-mcp --config ./neo-mcp-config.json\n```\n\n### 3. Docker Configuration\n\n#### Using Docker Hub Image\n```bash\n# Basic run\ndocker run -p 3000:3000 r3enetwork/neo-n3-mcp:1.6.0\n\n# With environment variables\ndocker run -p 3000:3000 \\\n  -e NEO_NETWORK=mainnet \\\n  -e NEO_MAINNET_RPC=https://mainnet1.neo.coz.io:443 \\\n  -e NEO_TESTNET_RPC=https://testnet1.neo.coz.io:443 \\\n  -e LOG_LEVEL=info \\\n  r3enetwork/neo-n3-mcp:1.6.0\n\n# With volume for persistent data\ndocker run -p 3000:3000 \\\n  -v $(pwd)/wallets:/app/wallets \\\n  -v $(pwd)/logs:/app/logs \\\n  -e NEO_NETWORK=testnet \\\n  r3enetwork/neo-n3-mcp:1.6.0\n```\n\n#### Docker Compose\nCreate a `docker-compose.yml`:\n\n```yaml\nversion: '3.8'\nservices:\n  neo-mcp:\n    image: r3enetwork/neo-n3-mcp:1.6.0\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NEO_NETWORK=mainnet\n      - NEO_MAINNET_RPC=https://mainnet1.neo.coz.io:443\n      - NEO_TESTNET_RPC=https://testnet1.neo.coz.io:443\n      - LOG_LEVEL=info\n      - LOG_FILE=/app/logs/neo-mcp.log\n    volumes:\n      - ./wallets:/app/wallets\n      - ./logs:/app/logs\n      - ./config:/app/config\n    restart: unless-stopped\n```\n\nRun with:\n```bash\ndocker-compose up -d\n```\n\n### 🐳 Docker Quick Start\n\n```bash\n# Quick start with Docker Compose\ngit clone https://github.com/r3e-network/neo-n3-mcp.git\ncd neo-n3-mcp\ndocker-compose -f docker/docker-compose.yml up -d\n\n# Or build and run manually\nnpm run docker:build\nnpm run docker:run\n\n# Development mode\nnpm run docker:up:dev\n```\n\n#### Production Docker Setup\n```bash\n# Build production image\n./scripts/docker-build.sh --tag v1.6.0\n\n# Run with custom configuration\ndocker run -d \\\n  --name neo-mcp-prod \\\n  -p 3000:3000 \\\n  -e NEO_NETWORK=mainnet \\\n  -v neo-mcp-logs:/app/logs \\\n  neo-n3-mcp:v1.6.0\n```\n\n#### Development Docker Setup\n```bash\n# Build development image\n./scripts/docker-build.sh --dev\n\n# Run with hot reload and debugging\ndocker-compose -f docker/docker-compose.dev.yml up -d\n```\n\n## 🔧 Configuration Options\n\n### Environment Variables\n| Variable | Description | Default |\n|----------|-------------|---------|\n| `NEO_NETWORK` | Default network (mainnet/testnet) | `testnet` |\n| `NEO_MAINNET_RPC` | Mainnet RPC endpoint | `https://mainnet1.neo.coz.io:443` |\n| `NEO_TESTNET_RPC` | Testnet RPC endpoint | `https://testnet1.neo.coz.io:443` |\n| `LOG_LEVEL` | Logging level (debug/info/warn/error) | `info` |\n| `LOG_FILE` | Log file path | `./logs/neo-mcp.log` |\n| `WALLET_DIR` | Wallet storage directory | `./wallets` |\n\n### Command Line Options\n| Option | Description |\n|--------|-------------|\n| `--network` | Set default network |\n| `--mainnet-rpc` | Mainnet RPC URL |\n| `--testnet-rpc` | Testnet RPC URL |\n| `--log-level` | Set logging level |\n| `--log-file` | Set log file path |\n| `--config` | Load configuration from JSON file |\n| `--help` | Show help information |\n\n## 🛠️ MCP Client Integration\n\n### Claude Desktop\nAdd to your Claude Desktop config (`~/.cursor/mcp.json` or similar):\n\n```json\n{\n  \"mcpServers\": {\n    \"neo-n3\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@r3e/neo-n3-mcp\",\n        \"--network\",\n        \"testnet\"\n      ],\n      \"disabled\": false,\n      \"env\": {\n        \"NEO_NETWORK\": \"testnet\",\n        \"LOG_LEVEL\": \"info\"\n      }\n    }\n  }\n}\n```\n\nFor mainnet configuration:\n```json\n{\n  \"mcpServers\": {\n    \"neo-n3\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@r3e/neo-n3-mcp\",\n        \"--network\",\n        \"mainnet\"\n      ],\n      \"disabled\": false,\n      \"env\": {\n        \"NEO_NETWORK\": \"mainnet\",\n        \"NEO_MAINNET_RPC\": \"https://mainnet1.neo.coz.io:443\",\n        \"NEO_TESTNET_RPC\": \"https://testnet1.neo.coz.io:443\",\n        \"LOG_LEVEL\": \"info\"\n      }\n    }\n  }\n}\n```\n\n### Custom MCP Client\n```typescript\nimport { Client } from '@modelcontextprotocol/sdk/client/index.js';\nimport { StdioClientTransport } from '@modelcontextprotocol/sdk/client/stdio.js';\n\nconst transport = new StdioClientTransport({\n  command: 'npx',\n  args: ['@r3e/neo-n3-mcp', '--network', 'mainnet']\n});\n\nconst client = new Client(\n  { name: 'my-neo-client', version: '1.0.0' },\n  { capabilities: {} }\n);\n\nawait client.connect(transport);\n```\n\n## 📊 Available Tools & Resources\n\n### 🛠️ Tools (34 available)\n- **Network**: `get_network_mode`, `set_network_mode`\n- **Blockchain**: `get_blockchain_info`, `get_block_count`, `get_block`, `get_transaction`\n- **Wallets**: `create_wallet`, `import_wallet`\n- **Assets**: `get_balance`, `transfer_assets`, `estimate_transfer_fees`\n- **Contracts**: `invoke_contract`, `list_famous_contracts`, `get_contract_info`\n- **Advanced**: `claim_gas`, `estimate_invoke_fees`\n\n### 📁 Resources (9 available)\n- **Network Status**: `neo://network/status`, `neo://mainnet/status`, `neo://testnet/status`\n- **Blockchain Data**: `neo://mainnet/blockchain`, `neo://testnet/blockchain`\n- **Contract Registry**: `neo://mainnet/contracts`, `neo://testnet/contracts`\n- **Asset Information**: `neo://mainnet/assets`, `neo://testnet/assets`\n\n## 🔐 Security\n\n- **Input Validation**: All inputs validated and sanitized\n- **Confirmation Required**: Sensitive operations require explicit confirmation\n- **Private Key Security**: Keys encrypted and stored securely\n- **Network Isolation**: Separate configurations for mainnet/testnet\n- **Rate Limiting**: Configurable rate limiting for production deployments\n- **Secure Logging**: No sensitive data exposed in logs\n\n## ⚡ Performance & Reliability\n\n- **Rate Limiting**: Built-in rate limiting with configurable thresholds\n- **Error Handling**: Comprehensive error handling with proper MCP error codes\n- **Network Resilience**: Automatic fallback mechanisms for RPC calls\n- **Production Ready**: Systemd service configuration and monitoring support\n\n## 🔄 Version Management & Release Process\n\n### Current Version: 1.6.0\n\nThis project follows [Semantic Versioning](https://semver.org/) with automated CI/CD pipeline for releases. See our [Version Management Guide](./docs/VERSION_MANAGEMENT.md) for detailed information.\n\n### 🚀 How to Trigger Next Version Release\n\n#### **Method 1: Automated Release Script (Recommended)**\n```bash\n# 1. First, do a dry run to see what will happen\n./scripts/prepare-release.sh --type minor --dry-run\n\n# 2. If everything looks good, run the actual release preparation\n./scripts/prepare-release.sh --type minor\n\n# 3. Push the changes (script will guide you)\ngit push\n\n# 4. Create GitHub release (triggers full CI/CD pipeline)\ngh release create v1.7.0 --generate-notes\n```\n\n#### **Method 2: Manual NPM Version Commands**\n```bash\n# Check current version\nnpm run version:check\n\n# Bump version manually\nnpm run version:patch   # 1.6.0 → 1.6.1 (bug fixes)\nnpm run version:minor   # 1.6.0 → 1.7.0 (new features)\nnpm run version:major   # 1.6.0 → 2.0.0 (breaking changes)\n\n# Then commit and push\ngit add . && git commit -m \"chore: bump version to 1.7.0\"\ngit push\n```\n\n#### **Method 3: GitHub Release (Direct)**\n```bash\n# Using GitHub CLI\ngh release create v1.7.0 --generate-notes\n\n# Or manually through GitHub web interface:\n# 1. Go to https://github.com/r3e-network/neo-n3-mcp/releases\n# 2. Click \"Create a new release\"\n# 3. Tag: v1.7.0, Title: \"Release v1.7.0\"\n# 4. Auto-generate release notes\n# 5. Publish release\n```\n\n### 🔄 What Happens When You Create a Release\n\nThe automated CI/CD pipeline triggers the following workflow:\n\n#### **Phase 1: Testing & Validation** ⚡\n- ✅ **Multi-version testing**: Node.js 18.x, 20.x, 22.x on ubuntu-latest\n- ✅ **Code quality**: Linting and type checking\n- ✅ **Unit tests**: Core functionality validation\n- ✅ **Coverage reporting**: Automatic upload to Codecov\n\n#### **Phase 2: Build & Docker** 🔨\n- ✅ **TypeScript compilation**: Build validation\n- ✅ **Docker builds**: Both development and production images\n- ✅ **Container testing**: Docker functionality validation\n- ✅ **Compose validation**: Configuration testing\n\n#### **Phase 3: Security & Audit** 🔒\n- ✅ **Security audit**: npm audit for vulnerabilities\n- ✅ **Dependency check**: audit-ci for security issues\n- ✅ **Package updates**: Check for outdated dependencies\n\n#### **Phase 4: Publishing** 📦 (Only on release)\n- 🚀 **NPM Publishing**: Automatic package publishing to npm registry\n- 🐳 **Docker Publishing**: Multi-tag image publishing to Docker Hub\n- 📋 **Versioned tags**: Semantic versioning with proper tagging\n\n#### **Phase 5: Deployment** 🌐 (Only on release)\n- 🎯 **Production deployment**: Automated deployment notification\n- 📊 **Release tracking**: Version monitoring and validation\n\n### 📋 Release Types\n\n| Type | Version Change | Use Case | Example |\n|------|---------------|----------|---------|\n| **patch** | 1.6.0 → 1.6.1 | Bug fixes, security patches | `./scripts/prepare-release.sh --type patch` |\n| **minor** | 1.6.0 → 1.7.0 | New features, enhancements | `./scripts/prepare-release.sh --type minor` |\n| **major** | 1.6.0 → 2.0.0 | Breaking changes | `./scripts/prepare-release.sh --type major` |\n\n### 🎯 Quick Release Commands\n\n```bash\n# For next minor release (recommended for new features)\n./scripts/prepare-release.sh --type minor\n\n# For patch release (bug fixes)\n./scripts/prepare-release.sh --type patch\n\n# For major release (breaking changes)\n./scripts/prepare-release.sh --type major\n\n# Test what would happen (dry run)\n./scripts/prepare-release.sh --type minor --dry-run\n```\n\n### 📊 Latest Changes (v1.6.0)\n- ✨ **Enterprise CI/CD Pipeline**: Complete GitHub Actions workflow\n- 🐳 **Docker Infrastructure**: Production and development environments\n- 📁 **Project Organization**: Structured folders (docker/, docs/, scripts/)\n- 🔧 **Automated Publishing**: NPM and Docker Hub integration\n- 📚 **Comprehensive Documentation**: Guides for all deployment scenarios\n- 🔄 **Version Management**: Automated release preparation and validation\n\n### 📚 Release Documentation\n- **[CHANGELOG.md](./docs/CHANGELOG.md)** - Complete version history\n- **[VERSION_MANAGEMENT.md](./docs/VERSION_MANAGEMENT.md)** - Detailed release process\n- **[WORKFLOW.md](./docs/WORKFLOW.md)** - CI/CD pipeline documentation\n\n### 🔐 Required Secrets (Already Configured)\n- ✅ `NPM_TOKEN` - For NPM registry publishing\n- ✅ `DOCKER_USERNAME` - Docker Hub username\n- ✅ `DOCKER_PASSWORD` - Docker Hub access token\n\n## 📚 Documentation\n\n- **[API Reference](./docs/API.md)** - Complete API documentation\n- **[Architecture](./docs/ARCHITECTURE.md)** - System design and components\n- **[Examples](./docs/EXAMPLES.md)** - Practical usage examples and best practices\n- **[Docker Guide](./docs/DOCKER.md)** - Comprehensive Docker deployment guide\n- **[Production Checklist](./docs/PRODUCTION_CHECKLIST.md)** - Production deployment guide\n- **[Deployment](./docs/DEPLOYMENT.md)** - Deployment configuration\n- **[Testing](./docs/TESTING.md)** - Testing and validation\n- **[Networks](./docs/NETWORKS.md)** - Network configuration details\n- **[Version Management](./docs/VERSION_MANAGEMENT.md)** - Release process and versioning\n- **[Release Guide](./docs/RELEASE_GUIDE.md)** - Quick reference for triggering releases\n- **[Workflow Guide](./docs/WORKFLOW.md)** - CI/CD pipeline documentation\n- **[Changelog](./docs/CHANGELOG.md)** - Version history and changes\n\n## 📄 License\n\nMIT License - see [LICENSE](./LICENSE) file for details.\n\n## 🔗 Links\n\n- **NPM Package**: https://www.npmjs.com/package/@r3e/neo-n3-mcp\n- **Neo N3 Documentation**: https://docs.neo.org/\n- **MCP Protocol**: https://modelcontextprotocol.io/\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "crypto",
        "neo",
        "n3 blockchain",
        "blockchain crypto",
        "crypto r3e"
      ],
      "category": "blockchain-and-crypto"
    },
    "raw391--coin_daemon_mcp": {
      "owner": "raw391",
      "name": "coin_daemon_mcp",
      "url": "https://github.com/raw391/coin_daemon_mcp",
      "imageUrl": "/freedevtools/mcp/pfp/raw391.webp",
      "description": "Manage and interact with cryptocurrency nodes through RPC interfaces, enabling AI assistants to facilitate wallet transactions and access related information.",
      "stars": 1,
      "forks": 3,
      "license": "Other",
      "language": "TypeScript",
      "updated_at": "2025-05-11T02:13:25Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/raw391-coin-daemon-mcp-badge.png)](https://mseep.ai/app/raw391-coin-daemon-mcp)\n\n# Cryptocurrency Daemon MCP Server (BETA)\n[![smithery badge](https://smithery.ai/badge/@raw391/coin_daemon_mcp)](https://smithery.ai/server/@raw391/coin_daemon_mcp)\n\nA Model Context Protocol (MCP) server for interacting with cryptocurrency daemon RPC interfaces. This server enables AI assistants to help manage and interact with cryptocurrency nodes in a controlled manner.\n\n⚠️ **IMPORTANT SECURITY WARNING** ⚠️\n\nThis software allows AI systems to interact with cryptocurrency daemons. Please read this warning carefully:\n\n1. Running this MCP server gives AI systems the ability to:\n   - Send transactions\n   - Access wallet information\n   - Modify wallet settings\n   - View private data\n   - Execute daemon commands\n\n2. Potential risks include:\n   - Loss of funds through unauthorized transactions\n   - Exposure of private information\n   - Unintended wallet or daemon modifications\n   - Potential security vulnerabilities if improperly configured\n\n3. Required Safety Measures:\n   - Use a separate wallet with limited funds for AI interactions\n   - Never give access to wallets containing significant value\n   - Configure strict RPC permissions\n   - Monitor all AI interactions with the daemon\n   - Regular security audits of configurations\n   - Keep backups of all important data\n\n**This software is in BETA. Use at your own risk.**\n\n## Installation\n\n### Installing via Smithery\n\nTo install Cryptocurrency Daemon Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@raw391/coin_daemon_mcp):\n\n```bash\nnpx -y @smithery/cli install @raw391/coin_daemon_mcp --client claude\n```\n\n### 1. Install the Package\n\nYou can install the package via npm:\n\n```bash\nnpm install @raw391/coin-daemon-mcp\n```\n\n### 2. Configure Claude Desktop\n\nTo use this MCP with Claude Desktop, you'll need to modify your Claude Desktop configuration. The configuration file is located at:\n\n- Windows: %APPDATA%\\\\Claude\\\\claude_desktop_config.json\n- macOS: ~/Library/Application Support/Claude/claude_desktop_config.json\n\nAdd the following to your configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"cryptocurrency\": {\n      \"command\": \"npx\",\n      \"args\": [\n      \"-y\",\n        \"@raw391/coin-daemon-mcp\"\n      ],\n      \"env\": {\n        \"CONFIG_PATH\": \"path/to/your/config.json\"\n      }\n    }\n  }\n}\n```\n\n### 3. Create Configuration File\n\nCreate a configuration file for your cryptocurrency daemons. Here are some example configurations:\n\n#### Basic Single Daemon Configuration\n```json\n{\n  \"daemons\": [\n    {\n      \"coinName\": \"zcash\",\n      \"nickname\": \"zec-main\",\n      \"rpcEndpoint\": \"127.0.0.1:8232\",\n      \"rpcUser\": \"your-rpc-user\",\n      \"rpcPassword\": \"your-rpc-password\"\n    }\n  ]\n}\n```\n\n#### Multiple Daemons Configuration\n```json\n{\n  \"daemons\": [\n    {\n      \"coinName\": \"zcash\",\n      \"nickname\": \"zec-main\",\n      \"rpcEndpoint\": \"127.0.0.1:8232\",\n      \"rpcUser\": \"zec-user\",\n      \"rpcPassword\": \"zec-password\"\n    },\n    {\n      \"coinName\": \"bitcoin\",\n      \"nickname\": \"btc-main\",\n      \"rpcEndpoint\": \"127.0.0.1:8332\",\n      \"rpcUser\": \"btc-user\",\n      \"rpcPassword\": \"btc-password\"\n    }\n  ]\n}\n```\n\n#### Advanced Configuration with Data Directory\nFor best security practices, you might want to also use a file system MCP to manage daemon data. Here's how to configure both together:\n\n```json\n{\n  \"mcpServers\": {\n    \"cryptocurrency\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@raw391/coin-daemon-mcp\"\n      ],\n      \"env\": {\n        \"CONFIG_PATH\": \"C:/CryptoConfig/daemon-config.json\"\n      }\n    },\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-filesystem\",\n        \"C:/CryptoData\"\n      ]\n    }\n  }\n}\n```\n\n### 4. Configure Your Cryptocurrency Daemon\n\nMake sure your cryptocurrency daemon's configuration file (e.g., zcash.conf, bitcoin.conf) has the appropriate RPC settings:\n\n```ini\nserver=1\nrpcuser=your-rpc-user\nrpcpassword=your-rpc-password\nrpcallowip=127.0.0.1\n```\n\n### 5. Start Using the MCP\n\nAfter configuration, restart Claude Desktop. You should see new tools, resources, and prompts available for:\n- Sending transactions\n- Checking balances\n- Managing wallets\n- Monitoring daemon status\n- Learning about cryptocurrencies\n- And more\n\n## MCP Features\n\nThe server provides three types of MCP capabilities:\n\n### Tools\n\n1. Transaction Management\n   - `send-coins`: Send transparent transactions\n   - `zsend-coins`: Send shielded transactions (for privacy coins)\n   - `shield-coins`: Convert transparent to shielded funds\n\n2. Wallet Operations\n   - `get-balance`: Check balances\n   - `execute-command`: Execute any supported RPC command\n\n3. Daemon Management\n   - `check-status`: Get daemon information\n\n### Resources\n\nAccess valuable data and documentation:\n\n1. Documentation Resources\n   - `crypto://{coinType}/help`: Get detailed documentation for specific cryptocurrencies\n   - `daemon://{name}/help`: Get help text specific to a daemon\n\n2. Transaction History\n   - `daemon://{name}/transactions`: View recent transaction history\n\n### Prompts\n\nPre-built templates for common workflows:\n\n1. Transaction Guidance\n   - `send-transaction-template`: Generate a guided prompt for constructing transactions\n\n2. Analysis Templates\n   - `balance-analysis`: Analyze wallet balances and fund distribution\n   - `daemon-diagnostic`: Perform a health check of a daemon\n\n## Security Best Practices\n\n1. Separate Wallets\n   - Create dedicated wallets for AI interactions\n   - Keep minimal funds in accessible wallets\n   - Use test networks for development\n\n2. RPC Security\n   - Use strong, unique RPC credentials\n   - Enable only necessary RPC commands\n   - Restrict RPC access to localhost\n   - Monitor RPC logs\n\n3. Data Management\n   - Regular wallet backups\n   - Secure storage of configuration files\n   - Monitoring of all transactions\n   - Regular security audits\n\n## Example Usage\n\nHere's how Claude can help with common tasks:\n\n1. Checking Status:\n   \"What's the current status of the Zcash daemon?\"\n\n2. Managing Balances:\n   \"What's my current balance across all addresses?\"\n\n3. Learning About Cryptocurrencies:\n   \"Can you explain how Zcash shielded transactions work?\"\n\n4. Sending Transactions:\n   \"Can you help me send 0.1 ZEC to address xxx?\"\n\n## Troubleshooting\n\n1. Connection Issues\n   - Verify daemon is running\n   - Check RPC credentials\n   - Ensure correct port numbers\n   - Verify localhost access\n\n2. Permission Problems\n   - Check file permissions\n   - Verify RPC user rights\n   - Ensure correct configuration paths\n\n3. Transaction Issues\n   - Verify sufficient funds\n   - Check network connectivity\n   - Ensure daemon is synced\n\n## Support\n\n- GitHub Issues: Bug reports and feature requests\n- Discussions: General questions and community support\n- Security Issues: Email security@pooly.ca\n\n## License\n\nMIT License with additional cryptocurrency operations disclaimer. See [LICENSE](LICENSE) for details.\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for contribution guidelines.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "coin_daemon_mcp",
        "rpc",
        "crypto",
        "raw391 coin_daemon_mcp",
        "crypto raw391",
        "coin_daemon_mcp manage"
      ],
      "category": "blockchain-and-crypto"
    },
    "rkmonarch--svm-mcp": {
      "owner": "rkmonarch",
      "name": "svm-mcp",
      "url": "https://github.com/rkmonarch/svm-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/rkmonarch.webp",
      "description": "Connects Claude AI with the SOON ecosystem to query wallet balances, fetch recent transactions, and check token holdings on SOON's testnet and mainnet. Interfaces with SOON's RPC endpoints for seamless real-time blockchain interactions.",
      "stars": 2,
      "forks": 2,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-03T08:40:06Z",
      "readme_content": "# SVM-MCP: SOON Model Context Protocol Server\n\nA Model Context Protocol (MCP) server that integrates Claude AI with SOON and other SVM-based blockchains. The server provides tools for checking balances, fetching recent transactions, and viewing token holdings on SOON's testnet and mainnet, for account balances, transactions, and token holdings.\n\n<a href=\"https://glama.ai/mcp/servers/@rkmonarch/svm-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@rkmonarch/svm-mcp/badge\" alt=\"SVM-MCP MCP server\" />\n</a>\n\n## Overview\n\nThis MCP server is designed to connect Claude with the SOON ecosystem, allowing it to:\n- Query wallet balances on testnet and mainnet\n- Fetch the most recent transactions for an address\n- Check token holdings for any account\n\nThe current implementation uses the SOON's RPC endpoints, but can be easily modified to work with any Solana-compatible blockchain or custom SVM implementation.\n\n## Features\n\n- **Get Balances**: Fetch native token balances for any address on SOON testnet or mainnet\n- **Get Last Transaction**: Retrieve the most recent transaction for an address\n- **Get Token Accounts**: List all token accounts owned by an address\n\n## Prerequisites\n\n- Node.js (v16+)\n- NPM or Bun package manager\n- Claude Desktop (for local testing)\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/rkmonarch/svm-mcp\ncd svm-mcp\n```\n\n2. Install dependencies:\n```bash\nnpm install\n# or\nbun install\n```\n\n3. Build the project:\n```bash\nnpm run build\n# or\nbun run build\n```\n\n## Project Structure\n\nThe main server implementation is in `src/index.ts`:\n\n```typescript\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { z } from \"zod\";\n\nconst connectionTestnet = new Connection(\"https://rpc.testnet.soo.network/rpc\");\nconst connectionMainnet = new Connection(\"https://rpc.mainnet.soo.network/rpc\");\n\nconst server = new McpServer({\n  name: \"svm-mcp\",\n  version: \"0.0.1\",\n  capabilities: [\n    \"get-soon-testnet-balance\",\n    \"get-soon-testnet-last-transaction\",\n    \"get-soon-testnet-account-tokens\",\n    \"get-soon-mainnet-balance\",\n    \"get-soon-mainnet-last-transaction\",\n    \"get-soon-mainnet-account-tokens\",\n  ],\n});\n```\n\n## Tool Implementations\n\n### Get Balance\n\n```typescript\nserver.tool(\n  \"get-soon-testnet-balance\",\n  \"Get the balance of a address on the Soon testnet\",\n  {\n    address: z.string().describe(\"The Solana address to get the balance of\"),\n  },\n  async ({ address }) => {\n    try {\n      const balance = await connectionTestnet.getBalance(new PublicKey(address));\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Balance: ${balance}`,\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error getting balance: ${error instanceof Error ? error.message : String(error)}`,\n          },\n        ],\n      };\n    }\n  }\n);\n```\n\n### Get Last Transaction\n\n```typescript\nserver.tool(\n  \"get-soon-testnet-last-transaction\",\n  \"Get the last transaction of an address on the Soon testnet\",\n  {\n    address: z\n      .string()\n      .describe(\"The Solana address to get the last transaction for\"),\n  },\n  async ({ address }) => {\n    try {\n      // Fetch the most recent transaction signatures for the address\n      const signatures = await connectionTestnet.getSignaturesForAddress(\n        new PublicKey(address),\n        { limit: 1 } // Limit to just the most recent transaction\n      );\n\n      if (signatures.length === 0) {\n        return {\n          content: [\n            {\n              type: \"text\",\n              text: \"No transactions found for this address\",\n            },\n          ],\n        };\n      }\n\n      // Get the most recent transaction using its signature\n      const latestSignature = signatures[0].signature;\n      const transaction = await connectionTestnet.getConfirmedTransaction(\n        latestSignature\n      );\n\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(transaction),\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error getting transaction: ${error instanceof Error ? error.message : String(error)}`,\n          },\n        ],\n      };\n    }\n  }\n);\n```\n\n### Get Token Accounts\n\n```typescript\nserver.tool(\n  \"get-soon-testnet-account-tokens\",\n  \"Get the tokens of a address on the Soon testnet\",\n  {\n    address: z.string().describe(\"The Solana address to get the tokens of\"),\n  },\n  async ({ address }) => {\n    try {\n      const tokens = await connectionTestnet.getTokenAccountsByOwner(\n        new PublicKey(address),\n        {\n          programId: new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"),\n        }\n      );\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: JSON.stringify(tokens),\n          },\n        ],\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Error getting tokens: ${error instanceof Error ? error.message : String(error)}`,\n          },\n        ],\n      };\n    }\n  }\n);\n```\n\n### Server Initialization\n\n```typescript\nasync function main() {\n  try {\n    console.error(\"Starting MCP server...\");\n    const transport = new StdioServerTransport();\n    console.error(\"Transport initialized, connecting to server...\");\n    await server.connect(transport);\n    console.error(\"Server connection established successfully\");\n    // The server will keep running in this state\n  } catch (error) {\n    console.error(\"There was an error connecting to the server:\", error);\n    process.exit(1);\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"There was an error starting the server:\", err);\n  process.exit(1);\n});\n```\n\n## Configuration\n\n### Claude Desktop Configuration\n\nTo use this MCP server with Claude Desktop, add the following to your `claude_desktop_config.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"svm-mcp\": {\n      \"command\": \"bun\",\n      \"args\": [\"/path/to/svm-mcp/build/index.js\"]\n    }\n  }\n}\n```\n\n### Customizing RPC Endpoints\n\nTo use different RPC endpoints or connect to a different Solana-compatible blockchain, edit the connection URLs in `src/index.ts`:\n\n```typescript\nconst connectionTestnet = new Connection(\"YOUR_TESTNET_RPC_URL\");\nconst connectionMainnet = new Connection(\"YOUR_MAINNET_RPC_URL\");\n```\n\n## Usage with Claude\n\nOnce the MCP server is running and connected to Claude, you can use the following commands:\n\n### Checking an Address Balance\n\n```\nCan you check the balance of this SOON testnet address: <address>\n```\n\n### Fetching Recent Transactions\n\n```\nWhat is the last transaction made by <address> on SOON testnet?\n```\n\n### Retrieving Token Holdings\n\n```\nWhat tokens does <address> hold on SOON mainnet?\n```\n\n## Acknowledgments\n\n- [Anthropic Claude](https://www.anthropic.com/claude) for the AI capabilities\n- [Model Context Protocol](https://modelcontextprotocol.io/introduction) for enabling tool integration\n- [Solana Web3.js](https://solana-labs.github.io/solana-web3.js/) for blockchain interaction\n- [SOON Network](https://soo.network/) for the SVM implementation used in this example",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "rpc",
        "crypto",
        "blockchain",
        "crypto rkmonarch",
        "soon rpc",
        "svm mcp"
      ],
      "category": "blockchain-and-crypto"
    },
    "scriptscrypt--solana-mcp": {
      "owner": "scriptscrypt",
      "name": "solana-mcp",
      "url": "https://github.com/scriptscrypt/solana-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/scriptscrypt.webp",
      "description": "Interact with the Solana blockchain, execute transactions, query account information, and manage Solana wallets through a standardized interface for AI agents.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-10T17:38:17Z",
      "readme_content": "# Solana Agent Kit MCP Server\n\n[![npm version](https://badge.fury.io/js/solana-mpc.svg)](https://www.npmjs.com/package/solana-mpc)\n[![License: ISC](https://img.shields.io/badge/License-ISC-blue.svg)](https://opensource.org/licenses/ISC)\n\nA Model Context Protocol (MCP) server that provides onchain tools for Claude AI, allowing it to interact with the Solana blockchain through a standardized interface. This implementation is based on the Solana Agent Kit and enables AI agents to perform blockchain operations seamlessly.\n\n## Overview\n\nThis MCP server extends Claude's capabilities by providing tools to:\n\n* Interact with Solana blockchain\n* Execute transactions\n* Query account information\n* Manage Solana wallets\n\nThe server implements the Model Context Protocol specification to standardize blockchain interactions for AI agents.\n\n## Prerequisites\n\n* Node.js (v16 or higher)\n* pnpm (recommended), npm, or yarn\n* Solana wallet with private key\n* Solana RPC URL (mainnet, testnet, or devnet)\n\n## Installation\n\n### Option 1: Install from npm (Recommended)\n\n```bash\n# Install globally\nnpm install -g solana-mpc\n\n# Or install locally in your project\nnpm install solana-mpc\n```\n\n### Option 2: Build from Source\n\n1. Clone this repository:\n```bash\ngit clone https://github.com/sendaifun/solana-mcp-server\ncd solana-mcp-server\n```\n\n2. Install dependencies:\n```bash\npnpm install\n```\n\n3. Build the project:\n```bash\npnpm run build\n```\n\n## Configuration\n\n### Environment Setup\n\nCreate a `.env` file with your credentials:\n\n```env\n# Solana Configuration\nSOLANA_PRIVATE_KEY=your_private_key_here\nRPC_URL=your_solana_rpc_url_here\nOPENAI_API_KEY=your_openai_api_key # OPTIONAL\n```\n\n### Integration with Claude Desktop\n\nTo add this MCP server to Claude Desktop, follow these steps:\n\n1. **Locate the Claude Desktop Configuration File**\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - Linux: `~/.config/Claude/claude_desktop_config.json`\n\n2. **Add the Configuration**\n   Create or edit the configuration file and add the following JSON:\n\n   If you installed via npm (Option 1):\n   ```json\n   {\n     \"mcpServers\": {\n       \"solana-mcp\": {\n         \"command\": \"npx\",\n         \"args\": [\"solana-mcp\"],\n         \"env\": {\n           \"RPC_URL\": \"your_solana_rpc_url_here\",\n           \"SOLANA_PRIVATE_KEY\": \"your_private_key_here\",\n           \"OPENAI_API_KEY\": \"your_openai_api_key\"  // OPTIONAL\n         },\n         \"disabled\": false,\n         \"autoApprove\": []\n       }\n     }\n   }\n   ```\n\n   If you built from source (Option 2):\n   ```json\n   {\n     \"mcpServers\": {\n       \"solana-mcp\": {\n         \"command\": \"node\",\n         \"args\": [\"/path/to/solana-mcp/build/index.js\"],\n         \"env\": {\n           \"RPC_URL\": \"your_solana_rpc_url_here\",\n           \"SOLANA_PRIVATE_KEY\": \"your_private_key_here\",\n           \"OPENAI_API_KEY\": \"your_openai_api_key\"  // OPTIONAL\n         },\n         \"disabled\": false,\n         \"autoApprove\": []\n       }\n     }\n   }\n   ```\n\n3. **Restart Claude Desktop**\n   After making these changes, restart Claude Desktop for the configuration to take effect.\n\n## Project Structure\n\n```\nsolana-agent-kit-mcp/\n├── src/\n│   ├── index.ts          # Main entry point\n├── package.json\n└── tsconfig.json\n```\n\n## Available Tools\n\nThe MCP server provides the following Solana blockchain tools:\n\n* `GET_ASSET` - Retrieve information about a Solana asset/token\n* `DEPLOY_TOKEN` - Deploy a new token on Solana\n* `GET_PRICE` - Fetch price information for tokens\n* `WALLET_ADDRESS` - Get the wallet address\n* `BALANCE` - Check wallet balance\n* `TRANSFER` - Transfer tokens between wallets\n* `MINT_NFT` - Create and mint new NFTs\n* `TRADE` - Execute token trades\n* `REQUEST_FUNDS` - Request funds (useful for testing/development)\n* `RESOLVE_DOMAIN` - Resolve Solana domain names\n* `GET_TPS` - Get current transactions per second on Solana\n\n## Security Considerations\n\n* Keep your private key secure and never share it\n* Use environment variables for sensitive information\n* Consider using a dedicated wallet for AI agent operations\n* Regularly monitor and audit AI agent activities\n* Test operations on devnet/testnet before mainnet\n\n## Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your Solana private key is correct\n2. Check your RPC URL is accessible\n3. Ensure you're on the intended network (mainnet, testnet, or devnet)\n4. Check Claude Desktop logs for error messages\n5. Verify the build was successful\n\n## Dependencies\n\nKey dependencies include:\n* [@solana/web3.js](https://github.com/solana-labs/solana-web3.js)\n* [@modelcontextprotocol/sdk](https://github.com/modelcontextprotocol/typescript-sdk)\n* [solana-agent-kit](https://github.com/sendaifun/solana-agent-kit)\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "scriptscrypt",
        "crypto",
        "solana",
        "scriptscrypt solana",
        "solana blockchain",
        "crypto scriptscrypt"
      ],
      "category": "blockchain-and-crypto"
    },
    "sendaifun--solana-mcp": {
      "owner": "sendaifun",
      "name": "solana-mcp",
      "url": "https://github.com/sendaifun/solana-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/sendaifun.webp",
      "description": "Interact with the Solana blockchain to execute transactions, query account information, and manage wallets through a standardized interface for AI agents.",
      "stars": 129,
      "forks": 43,
      "license": "Apache License 2.0",
      "language": "Shell",
      "updated_at": "2025-09-30T04:08:14Z",
      "readme_content": "# Solana Agent Kit MCP Server\n\n[![npm version](https://badge.fury.io/js/solana-mcp.svg)](https://www.npmjs.com/package/solana-mcp)\n[![License: ISC](https://img.shields.io/badge/License-ISC-blue.svg)](https://opensource.org/licenses/ISC)\n<a href=\"https://cloud.phala.network/features/mcp-hosting/solana-mcp-by-sendai-and-dark\" target=\"_blank\" rel=\"noopener noreferrer\" style=\"display:inline-flex;align-items:center;text-decoration:none;background:#fff;border:1px solid #e5e7eb;border-radius:6px;padding:2px 8px;font-size:16px;font-family:sans-serif;\">\n  <img src=\"https://raw.githubusercontent.com/Phala-Network/mcp-hosting/refs/heads/main/assets/logs/phala.png\" alt=\"Phala Logo\" height=\"24\" style=\"vertical-align:middle;margin-right:8px;\"/>\n  <span style=\"color:#222;font-weight:600;\">Check on Phala</span>\n</a>\n\nA Model Context Protocol (MCP) server that provides onchain tools for Claude AI, allowing it to interact with the Solana blockchain through a standardized interface. This implementation is based on the Solana Agent Kit and enables AI agents to perform blockchain operations seamlessly.\n\n\n\n\n## Overview\n\nThis MCP server extends Claude's capabilities by providing tools to:\n\n* Interact with Solana blockchain\n* Execute transactions\n* Query account information\n* Manage Solana wallets\n\nThe server implements the Model Context Protocol specification to standardize blockchain interactions for AI agents.\n\n## Prerequisites\n\n* Node.js (v16 or higher)\n* pnpm (recommended), npm, or yarn\n* Solana wallet with private key\n* Solana RPC URL (mainnet, testnet, or devnet)\n\n## Installation\n\n### Option 1: Quick Install (Recommended)\n\n```bash\n# Download the installation script\ncurl -fsSL https://raw.githubusercontent.com/sendaifun/solana-mcp/main/scripts/install.sh -o solana-mcp-install.sh\n\n# Make it executable and run\nchmod +x solana-mcp-install.sh && ./solana-mcp-install.sh --backup\n```\n\nThis will start an interactive installation process that will guide you through:\n- Setting up Node.js if needed\n- Configuring your Solana RPC URL and private key\n- Setting up the Claude Desktop integration\n\n### Option 2: Install from npm ( recommend for clients like Cursor/Cline)\n\n```bash\n# Install globally\nnpm install -g solana-mcp\n\n# Or install locally in your project\nnpm install solana-mcp\n```\n\n### Option 3: Build from Source\n\n1. Clone this repository:\n```bash\ngit clone https://github.com/sendaifun/solana-mcp\ncd solana-mcp\n```\n\n2. Install dependencies:\n```bash\npnpm install\n```\n\n3. Build the project:\n```bash\npnpm run build\n```\n\n## Configuration\n\n### Environment Setup\n\nCreate a `.env` file with your credentials:\n\n```env\n# Solana Configuration\nSOLANA_PRIVATE_KEY=your_private_key_here\nRPC_URL=your_solana_rpc_url_here\nOPENAI_API_KEY=your_openai_api_key # OPTIONAL\n```\n\n### Integration with Claude Desktop\n\nTo add this MCP server to Claude Desktop, follow these steps:\n\n1. **Locate the Claude Desktop Configuration File**\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - Linux: `~/.config/Claude/claude_desktop_config.json`\n\n2. **Add the Configuration**\n   Create or edit the configuration file and add the following JSON:\n\n   If you installed via npm (Option 1):\n   ```json\n   {\n     \"mcpServers\": {\n       \"solana-mcp\": {\n         \"command\": \"npx\",\n         \"args\": [\"solana-mcp\"],\n         \"env\": {\n           \"RPC_URL\": \"your_solana_rpc_url_here\",\n           \"SOLANA_PRIVATE_KEY\": \"your_private_key_here\",\n           \"OPENAI_API_KEY\": \"your_openai_api_key\"  // OPTIONAL\n         },\n         \"disabled\": false,\n         \"autoApprove\": []\n       }\n     }\n   }\n   ```\n\n   If you built from source (Option 2):\n   ```json\n   {\n     \"mcpServers\": {\n       \"solana-mcp\": {\n         \"command\": \"node\",\n         \"args\": [\"/path/to/solana-mcp/build/index.js\"],\n         \"env\": {\n           \"RPC_URL\": \"your_solana_rpc_url_here\",\n           \"SOLANA_PRIVATE_KEY\": \"your_private_key_here\",\n           \"OPENAI_API_KEY\": \"your_openai_api_key\"  // OPTIONAL\n         },\n         \"disabled\": false,\n         \"autoApprove\": []\n       }\n     }\n   }\n   ```\n\n3. **Restart Claude Desktop**\n   After making these changes, restart Claude Desktop for the configuration to take effect.\n\n## Project Structure\n\n```\nsolana-agent-kit-mcp/\n├── src/\n│   ├── index.ts          # Main entry point\n├── package.json\n└── tsconfig.json\n```\n\n## Available Tools\n\nThe MCP server provides the following Solana blockchain tools:\n\n* `GET_ASSET` - Retrieve information about a Solana asset/token\n* `DEPLOY_TOKEN` - Deploy a new token on Solana\n* `GET_PRICE` - Fetch price information for tokens\n* `WALLET_ADDRESS` - Get the wallet address\n* `BALANCE` - Check wallet balance\n* `TRANSFER` - Transfer tokens between wallets\n* `MINT_NFT` - Create and mint new NFTs\n* `TRADE` - Execute token trades\n* `REQUEST_FUNDS` - Request funds (useful for testing/development)\n* `RESOLVE_DOMAIN` - Resolve Solana domain names\n* `GET_TPS` - Get current transactions per second on Solana\n\n## Security Considerations\n\n* Keep your private key secure and never share it\n* Use environment variables for sensitive information\n* Consider using a dedicated wallet for AI agent operations\n* Regularly monitor and audit AI agent activities\n* Test operations on devnet/testnet before mainnet\n\n## Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your Solana private key is correct\n2. Check your RPC URL is accessible\n3. Ensure you're on the intended network (mainnet, testnet, or devnet)\n4. Check Claude Desktop logs for error messages\n5. Verify the build was successful\n\n## Dependencies\n\nKey dependencies include:\n* [@solana/web3.js](https://github.com/solana-labs/solana-web3.js)\n* [@modelcontextprotocol/sdk](https://github.com/modelcontextprotocol/typescript-sdk)\n* [solana-agent-kit](https://github.com/sendaifun/solana-agent-kit)\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "solana",
        "crypto",
        "blockchain",
        "solana blockchain",
        "interact solana",
        "crypto sendaifun"
      ],
      "category": "blockchain-and-crypto"
    },
    "septemhill--etherscan-mcp": {
      "owner": "septemhill",
      "name": "etherscan-mcp",
      "url": "https://github.com/septemhill/etherscan-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/septemhill.webp",
      "description": "Interact with blockchain data to retrieve essential details such as token supply, chain IDs, and filtered RPC endpoints. Provides a streamlined way to access critical blockchain information for applications and queries.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-05-07T03:57:35Z",
      "readme_content": "# Etherscan MCP Tool\n\nThis tool provides functionality to interact with blockchain data, specifically to retrieve the total supply of a token on a given chain, retrieve the chain ID for a given chain name, and retrieve a filtered list of RPC endpoints for a given chain ID.\n\n## Usage\n\nThe tool exposes the following functionalities:\n\n-   **Get Total Supply**: Retrieves the total supply of a token given its address and chain ID.\n-   **Get Chain ID**: Retrieves the chain ID for a given chain name.\n-   **Get Filtered RPC List**: Retrieves a filtered list of RPC endpoints for a given chain ID.\n\n### Get Total Supply\n\nTo get the total supply of a token, you need to provide the chain ID and the token address.\n\n**Parameters:**\n\n-   `chain_id`: The ID of the blockchain network.\n-   `token_address`: The address of the token.\n\n**Example:**\n\nTo find the total supply of token `0x6B2a01A5f79dEb4c2f3c0eDa7b01DF456FbD726a` on chain `56`, you would use the following:\n\n```json\n{\n  \"chain_id\": 56,\n  \"token_address\": \"0x6B2a01A5f79dEb4c2f3c0eDa7b01DF456FbD726a\"\n}\n```\n\nThe tool would then return the total supply of the token, such as:\n\n```\n46141292590\n```\n\n### Get Chain ID\n\nTo get the chain ID, you need to provide the chain name.\n\n**Parameters:**\n\n-   `chain_name`: The name of the blockchain network.\n\n**Example:**\n\nTo find the chain ID for `BNB Smart Chain Mainnet`, you would use the following:\n\n```json\n{\n  \"chain_name\": \"BNB Smart Chain Mainnet\"\n}\n```\n\nThe tool would then return the chain ID, such as:\n\n```\n56\n```\n\n### Get Filtered RPC List\n\nTo get a filtered list of RPC endpoints, you need to provide the chain ID. You can also filter by `isOpenSource` and `tracking`.\n\n**Parameters:**\n\n-   `chain_id`: The ID of the blockchain network.\n-   `isOpenSource` (optional): Filter by isOpenSource.\n-   `tracking` (optional): Filter by tracking (none, yes, limited, unspecified).\n\n**Example:**\n\nTo find the RPC list for chain ID `1`, you would use the following:\n\n```json\n{\n  \"chain_id\": \"1\"\n}\n```\n\nThe tool would then return the RPC list for chain ID 1.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "etherscan",
        "blockchain",
        "crypto",
        "etherscan mcp",
        "septemhill etherscan",
        "crypto septemhill"
      ],
      "category": "blockchain-and-crypto"
    },
    "settlemint--sdk": {
      "owner": "settlemint",
      "name": "sdk",
      "url": "https://github.com/settlemint/sdk",
      "imageUrl": "/freedevtools/mcp/pfp/settlemint.webp",
      "description": "Integrates blockchain functionality into applications, providing tools and libraries to interact with the SettleMint platform's features and services.",
      "stars": 15,
      "forks": 1,
      "license": "Other",
      "language": "TypeScript",
      "updated_at": "2025-10-03T22:22:34Z",
      "readme_content": "<p align=\"center\">\n  <img src=\"https://github.com/settlemint/sdk/blob/main/logo.svg\" width=\"200px\" align=\"center\" alt=\"SettleMint logo\" />\n  <h1 align=\"center\">SettleMint SDK</h1>\n  <p align=\"center\">\n    ✨ <a href=\"https://settlemint.com\">https://settlemint.com</a> ✨\n    <br/>\n    Integrate SettleMint into your application with ease.\n  </p>\n</p>\n\n<p align=\"center\">\n<a href=\"https://github.com/settlemint/sdk/actions?query=branch%3Amain\"></a>\n<a href=\"https://github.com/settlemint/sdk\" rel=\"nofollow\"><img src=\"https://img.shields.io/github/stars/settlemint/sdk\" alt=\"stars\"></a>\n</p>\n\n<div align=\"center\">\n  <a href=\"https://console.settlemint.com/documentation\">Documentation</a>\n  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n  <a href=\"https://github.com/settlemint/sdk/issues\">Issues</a>\n  <br />\n</div>\n\n## About\n\nThe SettleMint SDK provides a comprehensive set of tools and libraries for integrating blockchain functionality into your applications.\nIt enables seamless interaction with the SettleMint platform's features and services.\n\n## Packages\n\n| Name | Description | NPM |\n|---------|-------------|---------|\n| [`@settlemint/sdk-blockscout`](sdk/blockscout) | Blockscout integration module for SettleMint SDK, enabling blockchain explorer and analytics functionality | [![npm version](https://img.shields.io/npm/v/@settlemint/sdk-blockscout)](https://www.npmjs.com/package/@settlemint/sdk-blockscout) |\n| [`@settlemint/sdk-cli`](sdk/cli) | Command-line interface for SettleMint SDK, providing development tools and project management capabilities | [![npm version](https://img.shields.io/npm/v/@settlemint/sdk-cli)](https://www.npmjs.com/package/@settlemint/sdk-cli) |\n| [`@settlemint/sdk-eas`](sdk/eas) | Ethereum Attestation Service (EAS) integration for SettleMint SDK | [![npm version](https://img.shields.io/npm/v/@settlemint/sdk-eas)](https://www.npmjs.com/package/@settlemint/sdk-eas) |\n| [`@settlemint/sdk-hasura`](sdk/hasura) | Hasura and PostgreSQL integration module for SettleMint SDK, enabling database operations and GraphQL queries | [![npm version](https://img.shields.io/npm/v/@settlemint/sdk-hasura)](https://www.npmjs.com/package/@settlemint/sdk-hasura) |\n| [`@settlemint/sdk-ipfs`](sdk/ipfs) | IPFS integration module for SettleMint SDK, enabling decentralized storage and content addressing | [![npm version](https://img.shields.io/npm/v/@settlemint/sdk-ipfs)](https://www.npmjs.com/package/@settlemint/sdk-ipfs) |\n| [`@settlemint/sdk-js`](sdk/js) | Core JavaScript SDK for integrating SettleMint's blockchain platform services into your applications | [![npm version](https://img.shields.io/npm/v/@settlemint/sdk-js)](https://www.npmjs.com/package/@settlemint/sdk-js) |\n| [`@settlemint/sdk-mcp`](sdk/mcp) | MCP interface for SettleMint SDK, providing development tools and project management capabilities | [![npm version](https://img.shields.io/npm/v/@settlemint/sdk-mcp)](https://www.npmjs.com/package/@settlemint/sdk-mcp) |\n| [`@settlemint/sdk-minio`](sdk/minio) | MinIO integration module for SettleMint SDK, providing S3-compatible object storage capabilities | [![npm version](https://img.shields.io/npm/v/@settlemint/sdk-minio)](https://www.npmjs.com/package/@settlemint/sdk-minio) |\n| [`@settlemint/sdk-next`](sdk/next) | Next.js integration module for SettleMint SDK, providing React components and middleware for web applications | [![npm version](https://img.shields.io/npm/v/@settlemint/sdk-next)](https://www.npmjs.com/package/@settlemint/sdk-next) |\n| [`@settlemint/sdk-portal`](sdk/portal) | Portal API client module for SettleMint SDK, providing access to smart contract portal services and APIs | [![npm version](https://img.shields.io/npm/v/@settlemint/sdk-portal)](https://www.npmjs.com/package/@settlemint/sdk-portal) |\n| [`@settlemint/sdk-thegraph`](sdk/thegraph) | TheGraph integration module for SettleMint SDK, enabling querying and indexing of blockchain data through subgraphs | [![npm version](https://img.shields.io/npm/v/@settlemint/sdk-thegraph)](https://www.npmjs.com/package/@settlemint/sdk-thegraph) |\n| [`@settlemint/sdk-utils`](sdk/utils) | Shared utilities and helper functions for SettleMint SDK modules | [![npm version](https://img.shields.io/npm/v/@settlemint/sdk-utils)](https://www.npmjs.com/package/@settlemint/sdk-utils) |\n| [`@settlemint/sdk-viem`](sdk/viem) | Viem (TypeScript Interface for Ethereum) module for SettleMint SDK | [![npm version](https://img.shields.io/npm/v/@settlemint/sdk-viem)](https://www.npmjs.com/package/@settlemint/sdk-viem) |\n\n## Contributing\n\nWe welcome contributions from the community! Please check out our [Contributing](https://github.com/settlemint/sdk/blob/main/.github/CONTRIBUTING.md) guide to learn how you can help improve the SettleMint SDK through bug reports, feature requests, documentation updates, or code contributions.\n\n## License\n\nThe SettleMint SDK is released under the [FSL Software License](https://fsl.software). See the [LICENSE](https://github.com/settlemint/sdk/blob/main/LICENSE) file for more details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "settlemint",
        "sdk",
        "blockchain",
        "settlemint sdk",
        "crypto settlemint",
        "settlemint platform"
      ],
      "category": "blockchain-and-crypto"
    },
    "strangelove-ventures--web3-mcp": {
      "owner": "strangelove-ventures",
      "name": "web3-mcp",
      "url": "https://github.com/strangelove-ventures/web3-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/strangelove-ventures.webp",
      "description": "Interacts with multiple blockchains including Solana and Ethereum, facilitating common blockchain operations through simple RPC endpoints. Supports operations like checking account balances, transferring assets, and retrieving account information across various blockchain networks.",
      "stars": 86,
      "forks": 23,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-09-25T19:51:32Z",
      "readme_content": "# Web3 MCP\n\nA Model-Context-Protocol server for interacting with multiple blockchains including Solana, Ethereum, THORChain, XRP Ledger, TON (The Open Network), Cardano, and UTXO chains. This server provides simple RPC endpoints for common blockchain operations, allowing secure interactions with various blockchains through environment variables.\n\n<a href=\"https://glama.ai/mcp/servers/an8x6gmzdn\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/an8x6gmzdn/badge\" alt=\"Web3 Server MCP server\" /></a>\n\n## Features\n\nSolana Operations:\n- Check SOL account balances\n- Get detailed account information\n- Transfer SOL between accounts\n- View SPL token balances\n- Get your wallet address from private key\n- Swap tokens using Jupiter (Best price routing across all Solana DEXs)\n\nEthereum & EVM Chain Operations:\n- Check native token balances across multiple networks\n- Check ERC-20 token balances\n- Send native tokens (using private key from .env)\n- Send ERC-20 tokens (using private key from .env)\n- Approve ERC-20 token spending (using private key from .env)\n\nCardano Operations:\n- Get network information and statistics\n- Check address balances and transaction history\n- View UTxOs for an address\n- Explore stake pools and delegation information\n- Get details about native assets\n- View detailed transaction information\n- Get statistics about the current epoch\n\nTHORChain Operations:\n- Check RUNE balances\n- Get detailed pool information\n- Get swap quotes between any supported assets\n- Cross-chain swaps via THORChain protocol\n\nUTXO Chain Operations:\n- Bitcoin (BTC)\n  - Check address balances\n  - View transaction history\n  - Validate addresses\n  - Get network info and fees\n- Litecoin (LTC)\n  - Check address balances\n  - View transaction history\n  - Validate addresses\n  - Get network info and fees\n- Dogecoin (DOGE)\n  - Check address balances\n  - View transaction history\n  - Validate addresses\n  - Get network info and fees\n- Bitcoin Cash (BCH)\n  - Check address balances\n  - View transaction history\n  - Validate addresses\n  - Get network info and fees\n\nXRP Ledger Operations:\n- Check XRP account balances\n- View transaction history\n- Validate XRP addresses\n- Send XRP to another address\n- Get current XRP Ledger information\n- Check token balances\n- Create trustlines for tokens\n\nTON (The Open Network) Operations:\n- Get TON account balances\n- View transaction history\n- Validate TON addresses\n- Send TON to another address with optional memo/comment\n- Get current TON network information\n\nSupported EVM Networks:\n- Ethereum\n- Base\n- Arbitrum\n- Optimism\n- BSC (Binance Smart Chain)\n- Polygon\n- Avalanche\n- Berachain\n\n## Setup\n\n1. Clone and install dependencies:\n```bash\ngit clone https://github.com/strangelove-ventures/web3-mcp.git\ncd web3-mcp\nnpm install\n```\n\n2. Create a .env file in the root directory:\n```bash\ncp .env.example .env\n```\n\n3. Configure your environment variables in .env:\n\n### Required Configuration\n\n```env\n# Tool Registration Controls\nENABLE_SOLANA_TOOLS=true      # Enable/disable Solana tools\nENABLE_ETHEREUM_TOOLS=true    # Enable/disable Ethereum and EVM chain tools\nENABLE_CARDANO_TOOLS=true     # Enable/disable Cardano tools\n\n# UTXO Chain Tools\nENABLE_BITCOIN_TOOLS=true     # Enable/disable Bitcoin tools\nENABLE_LITECOIN_TOOLS=true    # Enable/disable Litecoin tools\nENABLE_DOGECOIN_TOOLS=true    # Enable/disable Dogecoin tools\nENABLE_BITCOINCASH_TOOLS=true # Enable/disable Bitcoin Cash tools\nENABLE_THORCHAIN_TOOLS=true   # Enable/disable THORChain tools\nENABLE_RIPPLE_TOOLS=true      # Enable/disable XRP Ledger tools\nENABLE_TON_TOOLS=true         # Enable/disable TON tools\n\n# Private Keys (required for transactions)\nETH_PRIVATE_KEY=your-ethereum-private-key\nSOLANA_PRIVATE_KEY=your-base58-encoded-solana-private-key\n\n# XRP Ledger credentials (required for XRP transactions)\n# Either private key or mnemonic is required\nXRP_PRIVATE_KEY=your-xrp-private-key-in-hex\n# OR\nXRP_MNEMONIC=your-xrp-mnemonic-recovery-phrase\n# Optional - used to verify the derived address\nXRP_ADDRESS=your-xrp-account-address\n\n# TON Configuration\nTON_MNEMONIC=word1 word2 word3 ... word24  # 24-word recovery phrase for TON wallet\nTON_ADDRESS=your-ton-wallet-address       # Your TON wallet address\nTON_API_KEY=your-toncenter-api-key        # Get from @tonapibot on Telegram (optional but recommended)\nTON_RPC_URL=https://toncenter.com/api/v2/jsonRPC  # Optional - default is TON Center API\n\n# Cardano Configuration\nBLOCKFROST_API_KEY=your-blockfrost-api-key  # Get a real API key from https://blockfrost.io/\nCARDANO_NETWORK=mainnet     # or 'testnet', 'preview', 'preprod'\nCARDANO_MNEMONIC=your-cardano-mnemonic-phrase   # Required for transaction signing\nCARDANO_ACCOUNT_INDEX=0     # Optional - defaults to 0\n```\n\n### Optional Configuration\n\n```env\n# Network RPC URLs (optional - will use public endpoints if not specified)\nSOLANA_RPC_URL=https://api.mainnet-beta.solana.com\n\n# Ethereum & Layer 2s\nETH_RPC_URL=https://eth-mainnet.g.alchemy.com/v2/your-api-key\nARBITRUM_RPC_URL=https://arb1.arbitrum.io/rpc\nBASE_RPC_URL=https://mainnet.base.org\nOPTIMISM_RPC_URL=https://mainnet.optimism.io\n\n# Other EVM Chains\nBSC_RPC_URL=https://bsc-dataseed.binance.org\nPOLYGON_RPC_URL=https://polygon-rpc.com\nAVALANCHE_RPC_URL=https://api.avax.network/ext/bc/C/rpc\nBERACHAIN_RPC_URL=https://rpc.berachain.com\n\n# XRP Ledger\nXRP_RPC_URL=https://xrplcluster.com/     # Optional - will use public endpoint if not specified\n\n# TON Network\nTON_RPC_URL=https://toncenter.com/api/v2/jsonRPC  # Optional - default is TON Center API\nTON_API_KEY=your-toncenter-api-key        # Get from @tonapibot on Telegram (optional but recommended)\n\n# THORChain Configuration\nTHORCHAIN_NODE_URL=https://thornode.ninerealms.com  # Optional - will use public endpoint if not specified\nTHORCHAIN_PRIVATE_KEY=your-thorchain-private-key\nTHORCHAIN_MNEMONIC=your-thorchain-mnemonic\n\n# UTXO Chain API Keys (optional)\nBLOCKCYPHER_API_KEY=your-blockcypher-api-key\nSOCHAIN_API_KEY=your-sochain-api-key\n```\n\n4. Build the tool:\n```bash\nnpm run build\n```\n\n5. Add the tool to your claude_desktop_config.json:\n```json\n{\n  \"mcpServers\": {\n    \"web3-rpc\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/PATH/TO/web3-mcp/build/index.js\"\n      ]\n    }\n  }\n}\n```\n\n## Tool Registration\n\nThe Web3 MCP server allows you to control which blockchain tools are registered through environment variables:\n\n- `ENABLE_SOLANA_TOOLS`: Enable/disable Solana tools\n- `ENABLE_ETHEREUM_TOOLS`: Enable/disable Ethereum and EVM chain tools\n- `ENABLE_BITCOIN_TOOLS`: Enable/disable Bitcoin tools\n- `ENABLE_LITECOIN_TOOLS`: Enable/disable Litecoin tools\n- `ENABLE_DOGECOIN_TOOLS`: Enable/disable Dogecoin tools\n- `ENABLE_BITCOINCASH_TOOLS`: Enable/disable Bitcoin Cash tools\n- `ENABLE_THORCHAIN_TOOLS`: Enable/disable THORChain tools\n- `ENABLE_RIPPLE_TOOLS`: Enable/disable XRP Ledger tools\n- `ENABLE_CARDANO_TOOLS`: Enable/disable Cardano tools\n- `ENABLE_TON_TOOLS`: Enable/disable TON tools\n\nSet these variables to `true` or `false` in your `.env` file to control which tools are available to the server. This allows you to:\n\n- Reduce startup time by only loading required tools\n- Minimize security surface area by disabling unused chains\n- Customize the server for specific use cases\n- Control resource usage by limiting active connections\n\n## Usage Examples\n\nAsk Claude (or your MCP client of choice):\n\n### Solana Operations (when ENABLE_SOLANA_TOOLS=true)\n- \"What's my Solana address?\" - Shows your address derived from private key in .env\n- \"What's the balance of 62QXuWZ3WT6ws1ZFxJobVDVXn6bEsiYpLo5yG612U6u3?\"\n- \"Transfer 0.001 SOL to Cg6cVS4tjkxHthm3K9BHhmvqF7kSz8GnXqqYXnHBzGXd\"\n- \"Show me my SPL token balances\"\n- \"Swap 0.1 SOL to USDC\" (Uses Jupiter for best price routing)\n\n### EVM Operations (when ENABLE_ETHEREUM_TOOLS=true)\n- \"What's the ETH balance of 0x556437c4d22ceaeeebf82006b85bdcc0ae67d933?\"\n- \"Check the USDC balance for 0x556437c4d22ceaeeebf82006b85bdcc0ae67d933 on Ethereum\"\n- \"Send 0.1 ETH to 0x556437c4d22ceaeeebf82006b85bdcc0ae67d933\"\n- \"What's the current gas price on Arbitrum?\"\n- \"Send 100 USDC to 0x556437c4d22ceaeeebf82006b85bdcc0ae67d933 on Polygon\"\n\n### Cardano Operations (when ENABLE_CARDANO_TOOLS=true)\n- Get the balance of any Cardano\n- View your wallet information\n- Send ADA to another address\n- Send native tokens to another address\n\n### Bitcoin Operations (when ENABLE_BITCOIN_TOOLS=true)\n- \"What's the BTC balance of 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa?\"\n- \"Show me the transaction history for bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh\"\n- \"Validate this Bitcoin address: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\"\n\n### Litecoin Operations (when ENABLE_LITECOIN_TOOLS=true)\n- \"What's the LTC balance of LM2WMpR1Rp6j3Sa59cMXMs1SPzj9eXpGc1?\"\n- \"Show me the transaction history for this Litecoin address\"\n- \"What's the current Litecoin network fee?\"\n\n### Dogecoin Operations (when ENABLE_DOGECOIN_TOOLS=true)\n- \"Check this DOGE address balance: D8vFz4p1L37jdg47HXKtSHA5uYLYxbGgPD\"\n- \"Show me recent Dogecoin transactions\"\n- \"What are the current DOGE network fees?\"\n\n### Bitcoin Cash Operations (when ENABLE_BITCOINCASH_TOOLS=true)\n- \"What's the BCH balance of this address?\"\n- \"Show me the BCH transaction history\"\n- \"Validate this Bitcoin Cash address\"\n\n### THORChain Operations (when ENABLE_THORCHAIN_TOOLS=true)\n- \"What's the RUNE balance of thor13zpdckczd0jvyhwxmrwnpap8gmy9m5kk2gzum3?\"\n- \"Show me the pool information for BTC.BTC\"\n- \"Get a swap quote for 0.1 BTC.BTC to ETH.ETH\"\n\n### XRP Ledger Operations (when ENABLE_RIPPLE_TOOLS=true)\n- \"What's the XRP balance of rPT1Sjq2YGrBMTttX4GZHjKu9dyfzbpAYe?\"\n- \"Show me the transaction history for rPT1Sjq2YGrBMTttX4GZHjKu9dyfzbpAYe\"\n- \"Is rPT1Sjq2YGrBMTttX4GZHjKu9dyfzbpAYe a valid XRP address?\"\n- \"Send 10 XRP to rPT1Sjq2YGrBMTttX4GZHjKu9dyfzbpAYe\"\n- \"What's the current XRP Ledger information?\"\n- \"Show me token balances for rPT1Sjq2YGrBMTttX4GZHjKu9dyfzbpAYe\"\n- \"Create a trustline for USD with issuer rPT1Sjq2YGrBMTttX4GZHjKu9dyfzbpAYe with a limit of 1000\"\n\n### TON Operations (when ENABLE_TON_TOOLS=true)\n- \"What's the TON balance of EQAAFhjXzKuQ5N0c96nsdZQWATcJm909LYSaCAvWFQF8tvUZ?\"\n- \"Show me the transaction history for EQAAFhjXzKuQ5N0c96nsdZQWATcJm909LYSaCAvWFQF8tvUZ\"\n- \"Is UQD0BRQt-QdIEbsjuRsMqzDlBkUAEfQixShDECoKEOXRc4eR a valid TON address?\"\n- \"Send 0.1 TON to EQAAFhjXzKuQ5N0c96nsdZQWATcJm909LYSaCAvWFQF8tvUZ\"\n- \"Send 0.01 TON to UQD0BRQt-QdIEbsjuRsMqzDlBkUAEfQixShDECoKEOXRc4eR with comment 'test payment'\"\n- \"What's the current TON Network information?\"\n\n## Security Notes\n\n1. **Environment Variables**: All private keys are stored in the .env file and never exposed in the conversation history\n2. **Private Keys**: Only use this with test wallets containing small amounts of funds\n3. **RPC Endpoints**: Custom RPC endpoints can be configured in the .env file for better reliability and rate limits\n4. **.env Security**: The .env file is automatically ignored by git to prevent accidental exposure of private keys\n5. **Tool Registration**: Use the tool registration controls to minimize security surface area by only enabling required chains\n\n## Advanced Configuration\n\n### Custom RPC Endpoints\nYou can configure custom RPC endpoints in your .env file for better reliability and higher rate limits. If not specified, the tool will fall back to public RPC endpoints.\n\n### Network Selection\nFor EVM operations, you can specify the network by name (ethereum, base, arbitrum, optimism, bsc, polygon, avalanche, berachain). The tool will automatically use the appropriate RPC endpoint and network configuration.\n\n### Cardano Configuration\nThe tool uses the Blockfrost API and Lucid library to interact with the Cardano blockchain.\n- `BLOCKFROST_API_KEY`: Required - Your Blockfrost API key (register at https://blockfrost.io/)\n- `CARDANO_NETWORK`: Optional - The Cardano network to use (mainnet, testnet, preview, preprod). Defaults to 'mainnet'\n- `CARDANO_MNEMONIC`: Required for transactions - Your Cardano wallet's mnemonic phrase (15 or 24 words)\n- `CARDANO_ACCOUNT_INDEX`: Optional - The account index to use (defaults to 0)\n\nThe wallet derived from your mnemonic will be used to sign and send transactions.\n\n### THORChain Configuration\nThe tool uses Nine Realms public endpoints by default, but you can configure a custom THORChain node URL in the .env file for better reliability and rate limits.\n\n### XRP Ledger Configuration\nThe tool can use either a private key or mnemonic phrase for XRP transactions. Configure these in your .env file:\n- `XRP_PRIVATE_KEY`: Your XRP private key in hex format\n- `XRP_MNEMONIC`: Alternative to private key - your 12-word recovery phrase\n- `XRP_ADDRESS`: Optional - Your XRP account address (used to verify the derived address)\n- `XRP_RPC_URL`: Optional - Custom XRP Ledger node URL (defaults to public endpoint)\n\n### TON Configuration\nThe tool uses TON Center's API by default and requires a mnemonic phrase for TON transactions. Configure these in your .env file:\n- `TON_MNEMONIC`: Required - Your 24-word recovery phrase for TON wallet\n- `TON_ADDRESS`: Required - Your TON wallet address\n- `TON_API_KEY`: Recommended - API key from @tonapibot on Telegram (for higher rate limits)\n- `TON_RPC_URL`: Optional - Custom TON RPC URL (defaults to TON Center API)\n\nThe implementation includes automatic retry logic with exponential backoff for rate limit handling.\n\n### UTXO Chain Data Providers\nThe tool uses several data providers for UTXO chains:\n- BlockCypher\n- SoChain\n- Haskoin (for Bitcoin Cash)\n\nYou can configure API keys for these providers in the .env file for better rate limits.\n\n## Development\n\nTo modify or extend the tool:\n\n1. Source code is in the `src` directory\n2. Chain-specific code in `src/chains`\n3. Run `npm run build` after making changes\n4. Use TypeScript for all new code\n\n## Contributing\n\nContributions are welcome! Please submit pull requests with any improvements or bug fixes.\n\n## License\n\nISC License",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchains",
        "blockchain",
        "crypto",
        "blockchain crypto",
        "various blockchain",
        "web3 mcp"
      ],
      "category": "blockchain-and-crypto"
    },
    "thirdweb-dev--ai": {
      "owner": "thirdweb-dev",
      "name": "ai",
      "url": "https://github.com/thirdweb-dev/ai",
      "imageUrl": "/freedevtools/mcp/pfp/thirdweb-dev.webp",
      "description": "Integrate thirdweb's blockchain tools and services to access real-time on-chain analysis, smart contract interactions, and blockchain data insights. It supports various communication transports for seamless integration with thirdweb services.",
      "stars": 18,
      "forks": 8,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-03T20:06:48Z",
      "readme_content": "# thirdweb AI\n\n_AI Agents with Onchain Intelligence_\n\n## 📖 Overview\n\nthirdweb AI is thirdweb's comprehensive toolkit for blockchain data analysis, wallet management, and AI agent interaction with blockchains. It simplifies complex blockchain operations into five core components: Insight for data analysis, Engine for wallet and contract operations, EngineCloud for cloud-based engine operations, Storage for decentralized file management, and Nebula for natural language-powered blockchain interactions.\n\n## 🌐 Features\n\n### Insight\nComprehensive blockchain data intelligence:\n- **Chains**: Multi-chain support and network information\n- **Transactions**: Transaction analysis and monitoring\n- **Blocks**: Block data exploration and metrics\n- **Events**: Smart contract event tracking and filtering\n- **Prices**: Real-time token price feeds\n- **Tokens**: Detailed token information and analytics\n\n### Engine\nCore blockchain interaction capabilities:\n- **Wallet**: Secure wallet management and transaction signing\n- **Read**: Read operations for smart contracts and blockchain data\n- **Write**: Transaction creation and contract interaction\n\n### EngineCloud\nCloud-based engine operations with advanced capabilities:\n- **Server Wallets**: Create and manage server wallets with KMS integration\n- **Contract Interaction**: Read from and write to smart contracts\n- **Transaction Management**: Send transactions and query transaction history\n- **Balance Queries**: Check native token balances on various chains\n\n### Storage\nDecentralized storage capabilities:\n- **Upload**: Upload files, directories, and JSON data to IPFS\n- **Fetch**: Retrieve content from IPFS using thirdweb gateway\n\n### Nebula\nAI agent blockchain interaction:\n- **Natural Language Agent Action**: Completing blockchain tasks through natural language instructions\n\n## 🚀 Quickstart\n\n### MCP Server\n\n#### Installation\n\n```bash\n### Run using uvx\nTHIRDWEB_SECRET_KEY=... \\\n    uvx thirdweb-mcp\n\n### Install and run using pipx (and run thirdweb-mcp)\npipx install thirdweb-mcp\n\nTHIRDWEB_SECRET_KEY=... \\\n    thirdweb-mcp\n```\n\nMore [information](python/thirdweb-mcp)\n\n### Python SDK\n\n#### Installation\n\n```bash\n# Install core package with all framework adapters\npip install \"thirdweb-ai[all]\"\n\n# Or install with specific framework adapters\npip install \"thirdweb-ai[openai]\"    # For OpenAI Agents\npip install \"thirdweb-ai[langchain]\" # For LangChain\npip install \"thirdweb-ai[agentkit]\" # For Coinbase Agentkit\npip install \"thirdweb-ai[goat]\" # For GOAT SDK\n# ... many more framework supported\n```\n\nSee the list of [supported framework and installation guides](python/thirdweb-ai#install-with-framework-specific-adapters)\n\n#### Basic Usage\n\n```python\nfrom thirdweb_ai import Engine, EngineCloud, Insight, Nebula, Storage, Tool\n\n# Initialize services\ninsight = Insight(secret_key=...)\nnebula = Nebula(secret_key=...)\nengine = Engine(...)\nengine_cloud = EngineCloud(secret_key=..., vault_access_token=...)  # For cloud-based operations\nstorage = Storage(secret_key=...)\n\n# Example: Create tools for AI agents\n# Option 1: Use Nebula alone (recommended when you need a self-sufficient blockchain agent)\n# Nebula already uses most other services internally\ntools = [\n    *nebula.get_tools(),\n]\n\n# Option 2: Use individual services directly without Nebula\n# tools = [\n#     *insight.get_tools(),\n#     *engine.get_tools(),\n#     *engine_cloud.get_tools(),\n#     *storage.get_tools(),\n# ]\n\n# Example: Framework integration (LangChain)\nfrom thirdweb_ai.adapters.langchain import get_langchain_tools\nlangchain_tools = get_langchain_tools(tools)\nagent = create_tool_calling_agent(tools=langchain_tools, ...)\n\n# Example: Framework integration (OpenAI Agents)\nfrom thirdweb_ai.adapters.openai import get_openai_tools\nopenai_tools = get_openai_tools(tools)\nagent = Agent(name=\"thirdweb Assistant\", tools=tools)\n\n# see python/examples for other framework integration\n```\n\nMore [information](python/thirdweb-ai)\n\n### TypeScript SDK\n\nComing soon.\n\n## 📜 Documentation\n\nFor comprehensive documentation, please visit:\n\n- [thirdweb Documentation](https://portal.thirdweb.com/)\n\n## 🚨 Security and Bug Reports\n\nWe take security seriously. If you discover a security vulnerability within thirdweb AI, please email security@thirdweb.com rather than using the issue tracker.\n\nFor non-security-related bugs, please use the GitHub issue tracker.\n\n## ⚠️ Important Usage Notes\n\nWhen using Nebula, do not combine it with other tools (Insight, Engine, EngineCloud, Storage) in the same agent implementation as Nebula already calls these tools in the background. Using them together can lead to compatibility issues and unexpected behavior.\n\n## 📦 Publishing Workflow\n\nTo publish a new version of thirdweb AI packages:\n\n1. Create a git tag for the new version: `git tag -a v0.X.Y -m \"Release v0.X.Y\"`\n2. Push the tag to GitHub: `git push origin v0.X.Y`\n3. Go to GitHub and create a release using this tag\n4. The CI/CD pipeline will automatically build and publish both packages to PyPI with matching version numbers\n\n## 📧 Contact\n\n- **Website**: [thirdweb.com](https://thirdweb.com)\n- **X**: [@thirdweb](https://x.com/thirdweb)\n- **Telegram**: [Join our community](https://t.me/officialthirdweb)\n- **Discord**: [Join our community](https://discord.gg/thirdweb)\n- **Email**: support@thirdweb.com\n\n## 📝 License\n\nthirdweb AI is licensed under the Apache-2.0 License. See the [LICENSE](./LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "thirdweb",
        "blockchain",
        "crypto",
        "thirdweb blockchain",
        "crypto thirdweb",
        "blockchain tools"
      ],
      "category": "blockchain-and-crypto"
    },
    "tomasCalletce--stellar-mcp": {
      "owner": "tomasCalletce",
      "name": "stellar-mcp",
      "url": "https://github.com/tomasCalletce/stellar-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/tomasCalletce.webp",
      "description": "Integrate applications with real-world data and tools using a standardized protocol, facilitating interactions between LLMs and external resources for complex operations. Connect blockchain and DeFi tools to enhance user understanding of protocols and opportunities.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-17T00:00:28Z",
      "readme_content": "# Stellar MCP Server\n\n## Description\n\nBlockchain and DeFi are difficult to understand. With an MCP-powered AI, we can create tooling to help users better navigate this complex web of protocols and opportunities.\n\n## Prerequisites\n\n*   Node.js\n*   npm\n\n## Installation\n\n1.  Clone the repo.\n2.  `npm install`\n\n## Usage\n\n1.  Configure: Copy `.env.example` to `.env` and adjust settings.\n2.  `npm run build`\n3.  `npm start`\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "stellar",
        "crypto",
        "blockchain defi",
        "blockchain crypto",
        "stellar mcp"
      ],
      "category": "blockchain-and-crypto"
    },
    "tywenk--mcp-sol": {
      "owner": "tywenk",
      "name": "mcp-sol",
      "url": "https://github.com/tywenk/mcp-sol",
      "imageUrl": "/freedevtools/mcp/pfp/tywenk.webp",
      "description": "Connect to the Solana blockchain to retrieve account balances, transaction details, and other blockchain data. Integrate real-time functionalities into applications seamlessly.",
      "stars": 3,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-05-29T12:33:49Z",
      "readme_content": "# Model Context Protocol Server for Solana Client\n\n[![smithery badge](https://smithery.ai/badge/@tywenk/mcp-solana)](https://smithery.ai/server/@tywenk/mcp-solana)\n\n### Installing via Smithery\n\nTo install mcp-solana for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@tywenk/mcp-solana):\n\n```bash\nnpx -y @smithery/cli install @tywenk/mcp-solana --client claude\n```\n\nInstallation of server:\n\n```sh\ngit clone git@github.com:tywenk/mcp-sol.git\ncd mcp-sol\nuv sync\nmcp install src/server.py\n```\n\nEnsure the Claude desktop JSON config at `/Users/{user}/Library/Application Support/Claude` (on a Mac) looks something like this. Note that the `uv` binary and paths are all absolute.\n\n```json\n{\n  \"globalShortcut\": \"Alt+Space\",\n  \"mcpServers\": {\n    \"Solana Client\": {\n      \"command\": \"/Users/tywen/.local/bin/uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/tywen/Developer/mcp-sol\",\n        \"run\",\n        \"--with\",\n        \"mcp\",\n        \"mcp\",\n        \"run\",\n        \"/Users/tywen/Developer/mcp-sol/src/server.py\"\n      ]\n    }\n  }\n}\n```\n\nList of tools:\n\n```\nget_balance\nget_transaction\nget_block\nget_block_height\nget_block_time\nget_blocks\nget_cluster_nodes\nget_epoch_info\nget_epoch_schedule\nget_genesis_hash\nget_identity\nget_inflation_governor\nget_inflation_rate\nget_largest_accounts\nget_latest_blockhash\nget_minimum_balance_for_rent_exemption\nget_program_accounts\nget_recent_performance_samples\nget_signature_statuses\nget_slot\nget_slot_leader\nget_supply\nget_token_account_balance\nget_token_largest_accounts\nget_transaction_count\nget_version\nget_vote_accounts\nis_connected\nget_block_commitment\nconfirm_transaction\nget_account_info\nget_fee_for_message\nget_first_available_block\nget_inflation_reward\nget_leader_schedule\nget_minimum_ledger_slot\nget_multiple_accounts\nget_signatures_for_address\nget_token_accounts_by_delegate\nget_token_accounts_by_owner\nget_token_supply\nrequest_airdrop\nsend_transaction\nvalidator_exit\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "crypto",
        "solana",
        "solana blockchain",
        "blockchain crypto",
        "crypto tywenk"
      ],
      "category": "blockchain-and-crypto"
    },
    "utkucy--avalanche-mcp-tools": {
      "owner": "utkucy",
      "name": "avalanche-mcp-tools",
      "url": "https://github.com/utkucy/avalanche-mcp-tools",
      "imageUrl": "/freedevtools/mcp/pfp/utkucy.webp",
      "description": "Transform interactions with the Avalanche blockchain into intuitive AI conversations for managing accounts, executing transactions, and performing real-time analysis without technical expertise.",
      "stars": 1,
      "forks": 3,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-05-19T22:24:38Z",
      "readme_content": "# Avalanche MCP Tools\n\n## Introduction\n\nThe Model Context Protocol (MCP) represents a groundbreaking standardized approach that enhances AI assistants' capabilities by enabling them to perform concrete actions with greater contextual awareness. This rapidly emerging protocol has quickly captured developers' attention and stands as one of the most exciting innovations in AI integration today.\n\nAvalanche MCP Tools democratize blockchain access by transforming the entire Avalanche CLI command set and AvalancheJS API into intuitive AI interactions, creating:\n\n- **Direct access**: Query Avalanche directly through any AI assistant interface that supports MCP format\n- **Natural language commands**: Execute complex Avalanche operations through simple conversations\n- **Real-time analysis**: Perform sophisticated blockchain analysis without specialized knowledge or additional software\n- **Simplified workflows**: Complete everyday blockchain tasks without memorizing technical commands or syntax\n- **AI agent integration**: Empower your custom AI agents to interact with Avalanche for autonomous operations\n- **Auto-installation**: Seamlessly install Avalanche CLI commands to your computer\n\n## Who This Is For\n\n### For Everyday Users & AI Enthusiasts\n\n- Chat naturally with Avalanche through your preferred AI interface\n- Manage accounts, send payments, and explore assets without learning technical commands\n- Access the full power of Avalanche through conversational interactions\n\n### For Developers & DeFi Applications\n\n- Incorporate Avalanche capabilities into your applications with zero Avalanche-specific code\n- Integrate these MCP tools directly into your AI agents for autonomous blockchain operations\n- Access Avalanche functionality directly from within your code editor while developing\n- Accelerate development from initial prototyping through production deployment\n\n## Features\n\n### Blockchain Management\n\n- **blockchainList** - List all created Avalanche Blockchain configurations\n- **blockchainPublish** - Publish a Blockchain's VM to a repository\n\n### Subnet Management (Coming Soon)\n\n- Subnet creation and management\n- Subnet deployment and monitoring\n- Validator operations\n\n### Key Management (Coming Soon)\n\n- Key generation and storage\n- Address management\n- Signing operations\n\n### Transaction Operations (Coming Soon)\n\n- Transaction building and signing\n- Transaction submission and monitoring\n- Gas optimization\n\nAnd many more...\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/avalanche-mcp-tools.git\ncd avalanche-mcp-tools\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Prerequisites\n\n- Node.js 16+\n- Avalanche CLI installed and accessible in your PATH\n- Avalanche node connection (local or remote)\n\n## Usage\n\n### Start the MCP Server\n\n```bash\nnpm start\n```\n\n### Integrate with Claude or other AI Assistants\n\nThe MCP server runs on stdio, allowing it to be integrated with AI assistants that support MCP tools.\n\nExample conversation with Claude:\n\n```\nUser: List all my avalanche blockchains\nClaude: I'll check your Avalanche blockchains.\n[Uses blockchainList MCP tool]\nHere are your Avalanche blockchains:\n- mySubnet (deployed)\n- testChain\n- devNet\n```\n\n## Project Structure\n\n```\navalanche-mcp-tools/\n├── src/\n│   ├── tools/\n│   │   ├── avalanche-cli/     # Avalanche CLI command tools\n│   │   │   ├── blockchain/    # Blockchain management commands\n│   │   │   ├── subnet/        # Subnet management commands\n│   │   │   └── keys/          # Key management commands\n│   │   ├── avalanche-js/      # Avalanche JS SDK tools\n│   │   └── common.ts          # Shared utilities\n│   └── index.ts               # Main entry point\n├── package.json\n└── README.md\n```\n\n## Development\n\n### Adding New Tools\n\nTo add new Avalanche CLI commands, follow the pattern established in existing tools:\n\n1. Create a new file in the appropriate directory under `src/tools/avalanche-cli/`\n2. Define a function to register the tools with the MCP server\n3. Implement the tool with appropriate parameters and error handling\n4. Register the new tool in the main tools index\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "crypto",
        "avalanche",
        "avalanche blockchain",
        "blockchain intuitive",
        "blockchain crypto"
      ],
      "category": "blockchain-and-crypto"
    },
    "xiaok--etherscan-mcp": {
      "owner": "xiaok",
      "name": "etherscan-mcp",
      "url": "https://github.com/xiaok/etherscan-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/xiaok.webp",
      "description": "Interact with Etherscan's API for accessing blockchain data, enabling dynamic querying and retrieval of information from multiple blockchain networks through a standardized interface. Supports testing and debugging with command line tools and web UI inspection.",
      "stars": 12,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T02:22:08Z",
      "readme_content": "# @xiaok/etherscan-mcp\n\n[![smithery badge](https://smithery.ai/badge/@xiaok/etherscan-mcp-server)](https://smithery.ai/server/@xiaok/etherscan-mcp-server)\n\nA dynamic MCP server for interacting with Etherscan's API and services.\n\n<a href=\"https://glama.ai/mcp/servers/@xiaok/etherscan-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@xiaok/etherscan-mcp/badge\" alt=\"Etherscan MCP server\" />\n</a>\n\n## Running Your Server\n\n### Test with `mcp-cli`\n\nThe fastest way to test and debug your server is with `fastmcp dev`:\n\n```bash\nnpx fastmcp dev src/index.ts\n```\n\nThis will run your server with [`mcp-cli`](https://github.com/wong2/mcp-cli) for testing and debugging your MCP server in the terminal.\n\n### Inspect with `MCP Inspector`\n\nAnother way is to use the official [`MCP Inspector`](https://modelcontextprotocol.io/docs/tools/inspector) to inspect your server with a Web UI:\n\n```bash\nnpx npx fastmcp inspect src/index.ts\n```\n\n## FAQ\n\n### How to use with Claude Desktop?\n\nFollow the guide https://modelcontextprotocol.io/quickstart/user and add the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"etherscan_mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"tsx\", \"/PATH/TO/YOUR_PROJECT/src/index.ts\"],\n      \"env\": {\n        \"ETHERSCAN_API_KEY\": \"********\"\n      }\n    }\n  }\n}\n```\n\n## API Doc\n\nhttps://docs.etherscan.io/etherscan-v2  \n\nsupport chain list: https://docs.etherscan.io/etherscan-v2/getting-started/supported-chains  \n\nPlease note that not all endpoints are supported by all chains. Please find support list here: https://forms.blockscan.com/public/grid/3E9QiN00NLhCQVibiP3Z-Bpqhmd7zGXsgapEKJupxiI  \n\n## TODO\n\n1. support pro api\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "etherscan",
        "blockchain",
        "crypto",
        "xiaok etherscan",
        "etherscan api",
        "etherscan mcp"
      ],
      "category": "blockchain-and-crypto"
    },
    "yuri-xyz--ai": {
      "owner": "yuri-xyz",
      "name": "ai",
      "url": "https://github.com/yuri-xyz/ai",
      "imageUrl": "/freedevtools/mcp/pfp/yuri-xyz.webp",
      "description": "Integrates thirdweb's blockchain tools and services via the Model Context Protocol for accessing on-chain execution, data analysis, contract deployments, and decentralized storage. Provides real-time insights and interactions with blockchain data through a unified interface.",
      "stars": 1,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "",
      "updated_at": "2025-08-20T16:37:58Z",
      "readme_content": "# thirdweb AI\n\n_AI Agents with Onchain Intelligence_\n\n## 📖 Overview\n\nthirdweb AI is thirdweb's comprehensive toolkit for blockchain data analysis, wallet management, and AI agent interaction with blockchains. It simplifies complex blockchain operations into four core components: Insight for data analysis, Engine for wallet and contract operations, Storage for decentralized file management, and Nebula for natural language-powered blockchain interactions.\n\n## 🌐 Features\n\n### Insight\nComprehensive blockchain data intelligence:\n- **Chains**: Multi-chain support and network information\n- **Transactions**: Transaction analysis and monitoring\n- **Blocks**: Block data exploration and metrics\n- **Events**: Smart contract event tracking and filtering\n- **Prices**: Real-time token price feeds\n- **Tokens**: Detailed token information and analytics\n\n### Engine\nCore blockchain interaction capabilities:\n- **Wallet**: Secure wallet management and transaction signing\n- **Read**: Read operations for smart contracts and blockchain data\n- **Write**: Transaction creation and contract interaction\n\n### Storage\nDecentralized storage capabilities:\n- **Upload**: Upload files, directories, and JSON data to IPFS\n- **Fetch**: Retrieve content from IPFS using thirdweb gateway\n\n### Nebula\nAI agent blockchain interaction:\n- **Natural Language Agent Action**: Completing blockchain tasks through natural language instructions\n\n## 🚀 Quickstart\n\n### MCP Server\n\n#### Installation\n\n```bash\n### Run using uvx\nTHIRDWEB_SECRET_KEY=... \\\n    uvx thirdweb-mcp\n\n### Install and run using pipx (and run thirdweb-mcp)\npipx install thirdweb-mcp\n\nTHIRDWEB_SECRET_KEY=... \\\n    thirdweb-mcp\n```\n\nMore [information](python/thirdweb-mcp)\n\n### Python SDK\n\n#### Installation\n\n```bash\n# Install core package with all framework adapters\npip install \"thirdweb-ai[all]\"\n\n# Or install with specific framework adapters\npip install \"thirdweb-ai[openai]\"    # For OpenAI Agents\npip install \"thirdweb-ai[langchain]\" # For LangChain\npip install \"thirdweb-ai[agentkit]\" # For Coinbase Agentkit\npip install \"thirdweb-ai[goat]\" # For GOAT SDK\n# ... many more framework supported\n```\n\nSee the list of [supported framework and installation guides](python/thirdweb-ai#install-with-framework-specific-adapters)\n\n#### Basic Usage\n\n```python\nfrom thirdweb_ai import Engine, Insight, Nebula, Storage, Tool\n\n# Initialize services\ninsight = Insight(secret_key=...)\nnebula = Nebula(secret_key=...)\nengine = Engine(...)\nstorage = Storage(secret_key=...)\n\n# Example: Create tools for AI agents\n# Option 1: Use Nebula alone (recommended when you need a self-sufficient blockchain agent)\n# Nebula already uses most other services internally\ntools = [\n    *nebula.get_tools(),\n]\n\n# Option 2: Use individual services directly without Nebula\n# tools = [\n#     *insight.get_tools(),\n#     *engine.get_tools(),\n#     *storage.get_tools(),\n# ]\n\n# Example: Framework integration (LangChain)\nfrom thirdweb_ai.adapters.langchain import get_langchain_tools\nlangchain_tools = get_langchain_tools(tools)\nagent = create_tool_calling_agent(tools=langchain_tools, ...)\n\n# Example: Framework integration (OpenAI Agents)\nfrom thirdweb_ai.adapters.openai import get_openai_tools\nopenai_tools = get_openai_tools(tools)\nagent = Agent(name=\"thirdweb Assistant\", tools=tools)\n\n# see python/examples for other framework integration\n```\n\nMore [information](python/thirdweb-ai)\n\n### TypeScript SDK\n\nComing soon.\n\n## 📜 Documentation\n\nFor comprehensive documentation, please visit:\n\n- [thirdweb Documentation](https://portal.thirdweb.com/)\n\n## 🚨 Security and Bug Reports\n\nWe take security seriously. If you discover a security vulnerability within thirdweb AI, please email security@thirdweb.com rather than using the issue tracker.\n\nFor non-security-related bugs, please use the GitHub issue tracker.\n\n## ⚠️ Important Usage Notes\n\nWhen using Nebula, do not combine it with other tools (Insight, Engine, Storage) in the same agent implementation as Nebula already calls these tools in the background. Using them together can lead to compatibility issues and unexpected behavior.\n\n## 📦 Publishing Workflow\n\nTo publish a new version of thirdweb AI packages:\n\n1. Create a git tag for the new version: `git tag -a v0.X.Y -m \"Release v0.X.Y\"`\n2. Push the tag to GitHub: `git push origin v0.X.Y`\n3. Go to GitHub and create a release using this tag\n4. The CI/CD pipeline will automatically build and publish both packages to PyPI with matching version numbers\n\n## 📧 Contact\n\n- **Website**: [thirdweb.com](https://thirdweb.com)\n- **X**: [@thirdweb](https://x.com/thirdweb)\n- **Telegram**: [Join our community](https://t.me/officialthirdweb)\n- **Discord**: [Join our community](https://discord.gg/thirdweb)\n- **Email**: support@thirdweb.com\n\n## 📝 License\n\nthirdweb AI is licensed under the Apache-2.0 License. See the [LICENSE](./LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "thirdweb",
        "crypto",
        "blockchain tools",
        "thirdweb blockchain",
        "interactions blockchain"
      ],
      "category": "blockchain-and-crypto"
    },
    "z80dev--cryo-mcp": {
      "owner": "z80dev",
      "name": "cryo-mcp",
      "url": "https://github.com/z80dev/cryo-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/z80dev.webp",
      "description": "Access and query Ethereum blockchain data with flexible options and multiple output formats using a powerful blockchain data extraction API server. Extract real-time insights from blockchain data easily through MCP-compatible clients.",
      "stars": 91,
      "forks": 13,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-10T16:09:17Z",
      "readme_content": "# Cryo MCP 🧊\n\nA Model Completion Protocol (MCP) server for the [Cryo](https://github.com/paradigmxyz/cryo) blockchain data extraction tool. \n\nCryo MCP allows you to access Cryo's powerful blockchain data extraction capabilities via an API server that implements the MCP protocol, making it easy to query blockchain data from any MCP-compatible client.\n\n## For LLM Users: SQL Query Workflow Guide\n\nWhen using this MCP server to run SQL queries on blockchain data, follow this workflow:\n\n1. **Download data** with `query_dataset`:\n   ```python\n   result = query_dataset(\n       dataset=\"blocks\",  # or \"transactions\", \"logs\", etc.\n       blocks=\"15000000:15001000\",  # or use blocks_from_latest=100\n       output_format=\"parquet\"  # important: use parquet for SQL\n   )\n   files = result.get(\"files\", [])  # Get the returned file paths\n   ```\n\n2. **Explore schema** with `get_sql_table_schema`:\n   ```python\n   # Check what columns are available in the file\n   schema = get_sql_table_schema(files[0])\n   # Now you can see all columns, data types, and sample data\n   ```\n\n3. **Run SQL** with `query_sql`:\n   ```python\n   # Option 1: Simple table reference (DuckDB will match the table name to file)\n   sql_result = query_sql(\n       query=\"SELECT block_number, timestamp, gas_used FROM blocks\",\n       files=files  # Pass the files from step 1\n   )\n   \n   # Option 2: Using read_parquet() with explicit file path\n   sql_result = query_sql(\n       query=f\"SELECT block_number, timestamp, gas_used FROM read_parquet('{files[0]}')\",\n       files=files  # Pass the files from step 1\n   )\n   ```\n\nAlternatively, use the combined approach with `query_blockchain_sql`:\n```python\n# Option 1: Simple table reference\nresult = query_blockchain_sql(\n    sql_query=\"SELECT * FROM blocks\",\n    dataset=\"blocks\",\n    blocks_from_latest=100\n)\n\n# Option 2: Using read_parquet()\nresult = query_blockchain_sql(\n    sql_query=\"SELECT * FROM read_parquet('/path/to/file.parquet')\",  # Path doesn't matter\n    dataset=\"blocks\",\n    blocks_from_latest=100\n)\n```\n\nFor a complete working example, see [examples/sql_workflow_example.py](examples/sql_workflow_example.py).\n\n## Features\n\n- **Full Cryo Dataset Access**: Query any Cryo dataset through an API server\n- **MCP Integration**: Works seamlessly with MCP clients\n- **Flexible Query Options**: Support for all major Cryo filtering and output options\n- **Block Range Options**: Query specific blocks, latest block, or relative ranges\n- **Contract Filtering**: Filter data by contract address \n- **Latest Block Access**: Easy access to the latest Ethereum block data\n- **Multiple Output Formats**: JSON, CSV, and Parquet support\n- **Schema Information**: Get detailed dataset schemas and sample data\n- **SQL Queries**: Run SQL queries directly against downloaded blockchain data\n\n## Installation (Optional)\n\nThis is not required if you will run the tool with `uvx` directly.\n\n```bash\n# install with UV (recommended)\nuv tool install cryo-mcp\n```\n\n## Requirements\n\n- Python 3.8+\n- uv\n- A working installation of [Cryo](https://github.com/paradigmxyz/cryo)\n- Access to an Ethereum RPC endpoint\n- DuckDB (for SQL query functionality)\n\n## Quick Start\n\n### Usage with Claude Code\n\n1. Run `claude mcp add` for an interactive prompt.\n2. Enter `uvx` as the command to run.\n3. Enter `cryo-mcp --rpc-url <ETH_RPC_URL> [--data-dir <DATA_DIR>]` as the args\n4. Alternatively, provide `ETH_RPC_URL` and `CRYO_DATA_DIR` as environment variables instead.\n\nNew instances of `claude` will now have access to cryo as configured to hit your RPC endpoint and store data in the specified directory.\n\n## Available Tools\n\nCryo MCP exposes the following MCP tools:\n\n### `list_datasets()`\n\nReturns a list of all available Cryo datasets.\n\nExample:\n```python\nclient.list_datasets()\n```\n\n### `query_dataset()`\n\nQuery a Cryo dataset with various filtering options.\n\nParameters:\n- `dataset` (str): The name of the dataset to query (e.g., 'blocks', 'transactions', 'logs')\n- `blocks` (str, optional): Block range specification (e.g., '1000:1010')\n- `start_block` (int, optional): Start block number (alternative to blocks)\n- `end_block` (int, optional): End block number (alternative to blocks)\n- `use_latest` (bool, optional): If True, query the latest block\n- `blocks_from_latest` (int, optional): Number of blocks from latest to include\n- `contract` (str, optional): Contract address to filter by\n- `output_format` (str, optional): Output format ('json', 'csv', 'parquet')\n- `include_columns` (list, optional): Columns to include alongside defaults\n- `exclude_columns` (list, optional): Columns to exclude from defaults\n\nExample:\n```python\n# Get transactions from blocks 15M to 15.01M\nclient.query_dataset('transactions', blocks='15M:15.01M')\n\n# Get logs for a specific contract from the latest 100 blocks\nclient.query_dataset('logs', blocks_from_latest=100, contract='0x1234...')\n\n# Get just the latest block\nclient.query_dataset('blocks', use_latest=True)\n```\n\n### `lookup_dataset()`\n\nGet detailed information about a specific dataset, including schema and sample data.\n\nParameters:\n- `name` (str): The name of the dataset to look up\n- `sample_start_block` (int, optional): Start block for sample data\n- `sample_end_block` (int, optional): End block for sample data\n- `use_latest_sample` (bool, optional): Use latest block for sample\n- `sample_blocks_from_latest` (int, optional): Number of blocks from latest for sample\n\nExample:\n```python\nclient.lookup_dataset('logs')\n```\n\n### `get_latest_ethereum_block()`\n\nReturns information about the latest Ethereum block.\n\nExample:\n```python\nclient.get_latest_ethereum_block()\n```\n\n### SQL Query Tools\n\nCryo MCP includes several tools for running SQL queries against blockchain data:\n\n### `query_sql()`\n\nRun a SQL query against downloaded blockchain data.\n\nParameters:\n- `query` (str): SQL query to execute\n- `files` (list, optional): List of parquet file paths to query. If None, will use all files in the data directory.\n- `include_schema` (bool, optional): Whether to include schema information in the result\n\nExample:\n```python\n# Run against all available files\nclient.query_sql(\"SELECT * FROM read_parquet('/path/to/blocks.parquet') LIMIT 10\")\n\n# Run against specific files\nclient.query_sql(\n    \"SELECT * FROM read_parquet('/path/to/blocks.parquet') LIMIT 10\",\n    files=['/path/to/blocks.parquet']\n)\n```\n\n### `query_blockchain_sql()`\n\nQuery blockchain data using SQL, automatically downloading any required data.\n\nParameters:\n- `sql_query` (str): SQL query to execute\n- `dataset` (str, optional): The dataset to query (e.g., 'blocks', 'transactions')\n- `blocks` (str, optional): Block range specification\n- `start_block` (int, optional): Start block number\n- `end_block` (int, optional): End block number\n- `use_latest` (bool, optional): If True, query the latest block\n- `blocks_from_latest` (int, optional): Number of blocks before the latest to include\n- `contract` (str, optional): Contract address to filter by\n- `force_refresh` (bool, optional): Force download of new data even if it exists\n- `include_schema` (bool, optional): Include schema information in the result\n\nExample:\n```python\n# Automatically downloads blocks data if needed, then runs the SQL query\nclient.query_blockchain_sql(\n    sql_query=\"SELECT block_number, gas_used, timestamp FROM blocks ORDER BY gas_used DESC LIMIT 10\",\n    dataset=\"blocks\",\n    blocks_from_latest=100\n)\n```\n\n### `list_available_sql_tables()`\n\nList all available tables that can be queried with SQL.\n\nExample:\n```python\nclient.list_available_sql_tables()\n```\n\n### `get_sql_table_schema()`\n\nGet the schema for a specific parquet file.\n\nParameters:\n- `file_path` (str): Path to the parquet file\n\nExample:\n```python\nclient.get_sql_table_schema(\"/path/to/blocks.parquet\")\n```\n\n### `get_sql_examples()`\n\nGet example SQL queries for different blockchain datasets.\n\nExample:\n```python\nclient.get_sql_examples()\n```\n\n## Configuration Options\n\nWhen starting the Cryo MCP server, you can use these command-line options:\n\n- `--rpc-url URL`: Ethereum RPC URL (overrides ETH_RPC_URL environment variable)\n- `--data-dir PATH`: Directory to store downloaded data (overrides CRYO_DATA_DIR environment variable, defaults to ~/.cryo-mcp/data/)\n\n## Environment Variables\n\n- `ETH_RPC_URL`: Default Ethereum RPC URL to use when not specified via command line\n- `CRYO_DATA_DIR`: Default directory to store downloaded data when not specified via command line\n\n## Advanced Usage\n\n### SQL Queries Against Blockchain Data\n\nCryo MCP allows you to run powerful SQL queries against blockchain data, combining the flexibility of SQL with Cryo's data extraction capabilities:\n\n#### Two-Step SQL Query Flow\n\nYou can split data extraction and querying into two separate steps:\n\n```python\n# Step 1: Download data and get file paths\ndownload_result = client.query_dataset(\n    dataset=\"transactions\",\n    blocks_from_latest=1000,\n    output_format=\"parquet\"\n)\n\n# Step 2: Use the file paths to run SQL queries\nfile_paths = download_result.get(\"files\", [])\nclient.query_sql(\n    query=f\"\"\"\n    SELECT \n        to_address as contract_address, \n        COUNT(*) as tx_count,\n        SUM(gas_used) as total_gas,\n        AVG(gas_used) as avg_gas\n    FROM read_parquet('{file_paths[0]}')\n    WHERE to_address IS NOT NULL\n    GROUP BY to_address\n    ORDER BY total_gas DESC\n    LIMIT 20\n    \"\"\",\n    files=file_paths\n)\n```\n\n#### Combined SQL Query Flow\n\nFor convenience, you can also use the combined function that handles both steps:\n\n```python\n# Get top gas-consuming contracts\nclient.query_blockchain_sql(\n    sql_query=\"\"\"\n    SELECT \n        to_address as contract_address, \n        COUNT(*) as tx_count,\n        SUM(gas_used) as total_gas,\n        AVG(gas_used) as avg_gas\n    FROM read_parquet('/path/to/transactions.parquet')\n    WHERE to_address IS NOT NULL\n    GROUP BY to_address\n    ORDER BY total_gas DESC\n    LIMIT 20\n    \"\"\",\n    dataset=\"transactions\",\n    blocks_from_latest=1000\n)\n\n# Find blocks with the most transactions\nclient.query_blockchain_sql(\n    sql_query=\"\"\"\n    SELECT \n        block_number, \n        COUNT(*) as tx_count\n    FROM read_parquet('/path/to/transactions.parquet')\n    GROUP BY block_number\n    ORDER BY tx_count DESC\n    LIMIT 10\n    \"\"\",\n    dataset=\"transactions\",\n    blocks=\"15M:16M\"\n)\n\n# Analyze event logs by topic\nclient.query_blockchain_sql(\n    sql_query=\"\"\"\n    SELECT \n        topic0, \n        COUNT(*) as event_count\n    FROM read_parquet('/path/to/logs.parquet')\n    GROUP BY topic0\n    ORDER BY event_count DESC\n    LIMIT 20\n    \"\"\",\n    dataset=\"logs\",\n    blocks_from_latest=100\n)\n```\n\n**Note**: For SQL queries, always use `output_format=\"parquet\"` when downloading data to ensure optimal performance with DuckDB. When using `query_blockchain_sql`, you should refer to the file paths directly in your SQL using the `read_parquet()` function.\n\n### Querying with Block Ranges\n\nCryo MCP supports the full range of Cryo's block specification syntax:\n\n```python\n# Using block numbers\nclient.query_dataset('transactions', blocks='15000000:15001000')\n\n# Using K/M notation\nclient.query_dataset('logs', blocks='15M:15.01M')\n\n# Using offsets from latest \nclient.query_dataset('blocks', blocks_from_latest=100)\n```\n\n### Contract Filtering\n\nFilter logs and other data by contract address:\n\n```python\n# Get all logs for USDC contract\nclient.query_dataset('logs', \n                    blocks='16M:16.1M', \n                    contract='0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48')\n```\n\n### Column Selection\n\nInclude only the columns you need:\n\n```python\n# Get just block numbers and timestamps\nclient.query_dataset('blocks', \n                    blocks='16M:16.1M', \n                    include_columns=['number', 'timestamp'])\n```\n\n## Development\n\n### Project Structure\n\n```\ncryo-mcp/\n├── cryo_mcp/           # Main package directory\n│   ├── __init__.py     # Package initialization\n│   ├── server.py       # Main MCP server implementation\n│   ├── sql.py          # SQL query functionality\n├── tests/              # Test directory\n│   ├── test_*.py       # Test files\n├── pyproject.toml      # Project configuration\n├── README.md           # Project documentation\n```\n\n### Run Tests\n\n`uv run pytest`\n\n## License\n\nMIT\n\n## Credits\n\n- Built on top of the amazing [Cryo](https://github.com/paradigmxyz/cryo) tool by Paradigm\n- Uses the [MCP protocol](https://github.com/mcp-team/mcp) for API communication\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "crypto",
        "z80dev",
        "blockchain data",
        "insights blockchain",
        "blockchain crypto"
      ],
      "category": "blockchain-and-crypto"
    },
    "zhangzhongnan928--mcp-blockchain-server": {
      "owner": "zhangzhongnan928",
      "name": "mcp-blockchain-server",
      "url": "https://github.com/zhangzhongnan928/mcp-blockchain-server",
      "imageUrl": "/freedevtools/mcp/pfp/zhangzhongnan928.webp",
      "description": "Enables secure interaction with blockchain smart contracts, allowing AI assistants to read blockchain data and prepare transactions while keeping user control over private keys and transaction signing.",
      "stars": 9,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-06-22T22:59:27Z",
      "readme_content": "# MCP Blockchain Server & DApp\n\nA secure system enabling AI assistants to interact with blockchain smart contracts while ensuring users maintain complete control over their private keys and transaction signing.\n\n## Overview\n\nThis project addresses a key challenge in AI-blockchain integration: allowing AI assistants to read blockchain data and prepare transactions while ensuring users maintain exclusive control over transaction signing and private keys.\n\nThe system consists of:\n\n1. **MCP Server**: A Model Context Protocol server that exposes blockchain operations as tools that can be used by AI assistants\n2. **Web DApp**: A React application that provides a user interface for wallet connection and transaction signing\n3. **Database**: PostgreSQL database for storing users, API keys, and transaction records\n4. **Caching**: Redis for caching frequently accessed data\n\n## Features\n\n### MCP Server Features\n\n- **Blockchain Data Access**: Read balances, contract state, and other on-chain data\n- **Transaction Preparation**: Create unsigned transactions for user approval\n- **Multi-Chain Support**: Works with Ethereum, Polygon, and other EVM-compatible chains\n- **Smart Contract Interaction**: Read from verified smart contracts on supported networks\n- **Security-First Design**: Private keys never leave the user's wallet\n\n### Web DApp Features\n\n- **Wallet Integration**: Connect with MetaMask and other Web3 wallets\n- **Transaction Review**: Clear UI for reviewing transaction details before signing\n- **Transaction Signing**: Sign transactions with connected wallet\n- **Transaction Tracking**: Monitor status of submitted transactions\n- **Mobile Compatibility**: Responsive design works on all devices\n\n## Security Principles\n\n1. **Private Key Isolation**: Keys never leave the user's wallet\n2. **Transaction Verification**: Clear UI for reviewing transaction details\n3. **API Authentication**: Secure API key management\n4. **Rate Limiting**: Prevent abuse\n5. **Input Validation**: Sanitize all inputs\n6. **Audit Logging**: Track all operations\n7. **HTTPS Only**: Secure communications\n8. **Content Security Policy**: Prevent XSS\n\n## Transaction Flow\n\n1. AI assistant requests transaction through MCP Server\n2. MCP Server prepares unsigned transaction with UUID\n3. MCP Server returns transaction URL to AI assistant\n4. AI assistant provides URL to user\n5. User opens URL in browser\n6. User connects wallet and reviews transaction details\n7. User approves and signs transaction with their wallet\n8. Web DApp submits signed transaction to blockchain\n9. Transaction status is updated and tracked\n\n## Getting Started\n\n### Prerequisites\n\n- Node.js (v18 or higher)\n- npm or yarn\n- PostgreSQL\n- Redis (optional, for caching)\n- Infura API key (for blockchain access)\n- Etherscan API key (for contract ABIs)\n\n### Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/zhangzhongnan928/mcp-blockchain-server.git\ncd mcp-blockchain-server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n# or\nyarn install\n```\n\n3. Set up environment variables:\nCreate a `.env` file in the root directory (or copy from `.env.example`):\n```bash\ncp .env.example .env\n# Edit .env with your configurations\n```\n\n4. Set up the database:\n```bash\n# For detailed instructions, see the Database Setup Guide\n# docs/database-setup.md\n\n# Create the PostgreSQL database\ncreatedb mcp_blockchain\n\n# Run database migrations\nnpm run db:migrate\n# or\nyarn db:migrate\n```\n\nSee [Database Setup Guide](docs/database-setup.md) for detailed instructions on installing and configuring PostgreSQL.\n\n5. Start the server:\n```bash\nnpm run dev\n# or\nyarn dev\n```\n\n### Using Docker Compose\n\nFor a quick start using Docker:\n\n```bash\n# Create .env file with required environment variables\ncp .env.example .env\n# Edit .env with your configurations\n\n# Start the services\ndocker-compose up -d\n```\n\nThis will start:\n- PostgreSQL database\n- Redis cache\n- MCP Server\n- Web DApp\n\n## Development\n\n### Server Structure\n\n- `src/mcp`: MCP server implementation\n- `src/services`: Core business logic services\n- `src/utils`: Utility functions\n- `src/index.ts`: Main entry point\n\n### Web DApp Structure\n\n- `web/src/components`: React components\n- `web/src/hooks`: Custom React hooks\n- `web/src/services`: API services\n- `web/src/pages`: Page components\n\n## Using the MCP Server\n\nThe MCP Server exposes several tools that can be used by AI assistants:\n\n- `get-chains`: Get list of supported blockchain networks\n- `get-balance`: Get account balance for an address\n- `read-contract`: Read data from a smart contract\n- `prepare-transaction`: Prepare an unsigned transaction for user approval\n- `get-transaction-status`: Get the current status of a transaction\n\n### Example Tool Usage\n\n```typescript\n// Example of using the get-balance tool\nconst result = await callTool(\"get-balance\", {\n  chainId: \"1\",\n  address: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\"\n});\n```\n\n## Troubleshooting\n\nIf you encounter issues with dependencies:\n\n```bash\n# MCP SDK issue - install directly from GitHub\nnpm uninstall @modelcontextprotocol/sdk\nnpm install modelcontextprotocol/typescript-sdk\n```\n\nFor database connection issues, see the [Database Setup Guide](docs/database-setup.md).\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "crypto",
        "mcp",
        "mcp blockchain",
        "blockchain crypto",
        "blockchain smart"
      ],
      "category": "blockchain-and-crypto"
    },
    "zhangzhongnan928--mcp-evm-signer": {
      "owner": "zhangzhongnan928",
      "name": "mcp-evm-signer",
      "url": "https://github.com/zhangzhongnan928/mcp-evm-signer",
      "imageUrl": "/freedevtools/mcp/pfp/zhangzhongnan928.webp",
      "description": "Manage Ethereum private keys and deploy smart contracts while securely interacting with EVM-compatible blockchains. Perform tasks such as signing transactions, querying blockchain data, and viewing account balances.",
      "stars": 0,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-04T06:34:07Z",
      "readme_content": "# MCP EVM Signer\n\nA Model Context Protocol (MCP) server for managing Ethereum private keys and deploying smart contracts using Infura. This server enables Claude for Desktop and other MCP clients to interact with EVM-compatible blockchains.\n\n![MCP EVM Signer architecture](https://i.imgur.com/gHwqLXM.png)\n\n## Features\n\n- 🔑 Securely store and manage Ethereum private keys locally\n- 🔌 Connect to Infura for blockchain interactions\n- 📝 Deploy smart contracts from compiled ABIs and bytecode\n- ✍️ Sign and send transactions\n- 💰 View account balances and transaction history\n- 🔍 Query blockchain data and interact with deployed contracts\n\n## Quick Start\n\n### Prerequisites\n\n- Node.js v16 or higher\n- An Infura account with API key\n- Claude for Desktop app installed\n\n### Installation\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/zhangzhongnan928/mcp-evm-signer.git\n   cd mcp-evm-signer\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n\n4. Configure environment variables:\n   ```bash\n   cp .env.example .env\n   ```\n   \n   Edit the `.env` file to add your Infura API key and configure other settings.\n\n### Integrating with Claude for Desktop\n\n1. Add the server to your Claude for Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"evm-signer\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/mcp-evm-signer/build/index.js\"],\n      \"env\": {\n        \"INFURA_API_KEY\": \"your_infura_api_key_here\",\n        \"DEFAULT_NETWORK\": \"sepolia\",\n        \"ENCRYPT_KEYS\": \"true\",\n        \"KEY_PASSWORD\": \"your_secure_password_here\"\n      }\n    }\n  }\n}\n```\n\n2. Restart Claude for Desktop\n\n3. You can now ask Claude to deploy smart contracts, check balances, or interact with EVM blockchains\n\n## Available Tools\n\nThe MCP EVM Signer server exposes the following tools for use with Claude:\n\n### Wallet Management\n- `create-wallet`: Create a new Ethereum wallet\n- `import-wallet`: Import an existing wallet from a private key\n- `list-wallets`: List all saved wallets\n\n### Blockchain Operations\n- `check-balance`: Check the ETH balance of an address\n- `get-transactions`: Get recent transactions for an address\n- `send-transaction`: Send ETH to an address\n\n### Smart Contract Interactions\n- `deploy-contract`: Deploy a smart contract from ABI and bytecode\n- `call-contract`: Call a read-only contract method\n- `execute-contract`: Execute a contract method that modifies state\n\n## Example Usage\n\nBelow are some examples of how you can use these tools with Claude:\n\n### Creating a Wallet\n\nYou can ask Claude:\n```\nCould you create a new Ethereum wallet for me using the evm-signer tools?\n```\n\n### Checking a Balance\n\nYou can ask Claude:\n```\nCan you check the balance of my Ethereum wallet 0x1234...5678 on the Sepolia network?\n```\n\n### Deploying an ERC-20 Token\n\nSee our [ERC-20 token example](examples/erc20-token.md) for a complete walkthrough of deploying and interacting with an ERC-20 token contract.\n\n## Security Notes\n\n- Private keys are stored locally on your machine\n- Keys can be encrypted with a password\n- The server only exposes functionality through the MCP protocol\n- Always review transactions before approving them in Claude for Desktop\n- Use test networks like Sepolia or Goerli when getting started\n\n## Documentation\n\nFor more detailed documentation, please refer to:\n\n- [Usage Guide](USAGE.md): Detailed usage instructions and examples\n- [Examples](examples/): Sample workflows and contract deployments\n\n## Project Structure\n\n```\nmcp-evm-signer/\n├── src/                  # Source code\n│   ├── config.ts         # Configuration management\n│   ├── crypto.ts         # Key management utilities\n│   ├── ethereum.ts       # Ethereum interaction functions\n│   └── index.ts          # Main MCP server implementation\n├── keys/                 # Storage for wallet keys (gitignored)\n├── examples/             # Example usage patterns\n├── .env.example          # Example environment variables\n└── ...                   # Project configuration files\n```\n\n## Development\n\nTo contribute to this project:\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Make your changes\n4. Commit your changes (`git commit -m 'Add some amazing feature'`)\n5. Push to the branch (`git push origin feature/amazing-feature`)\n6. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crypto",
        "blockchain",
        "blockchains",
        "evm signer",
        "blockchain crypto",
        "signer manage"
      ],
      "category": "blockchain-and-crypto"
    }
  }
}