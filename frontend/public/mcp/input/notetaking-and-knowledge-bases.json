{
  "category": "notetaking-and-knowledge-bases",
  "categoryDisplay": "Note-Taking and Knowledge Bases",
  "description": "",
  "totalRepositories": 85,
  "repositories": {
    "1282saa--mcp_style": {
      "owner": "1282saa",
      "name": "mcp_style",
      "url": "https://github.com/1282saa/mcp_style",
      "imageUrl": "/freedevtools/mcp/pfp/1282saa.webp",
      "description": "The MCP Style Server is an open-source tool that allows users to integrate external resources and prompts into AI workflows easily. It supports customization and quick testing of ML features for enhanced applications involving large language models.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-05-03T13:09:51Z",
      "readme_content": "# 서울경제신문 스타일북 MCP 서버\n\n이 프로젝트는 서울경제신문 스타일북 데이터를 MCP(Model Context Protocol) 서버로 제공하는 도구입니다.\n\n## 설치 방법\n\n### 필수 라이브러리 설치\n\n```bash\npip install -r requirements.txt\n```\n\n## 기본 사용법\n\n### 1. 직접 실행\n\n```bash\npython stylebook_mcp_fastmcp.py --stdio --data_path \"기사 작성 준칙\"\n```\n\n### 2. 스미더리 연동\n\n1. 스미더리를 설치합니다.\n2. `smithery.yaml` 파일을 스미더리 디렉토리에 복사합니다.\n3. 스미더리에서 `@your-username/mcp_style`을 배포합니다.\n\n### 3. 클로드 데스크탑 연동\n\n1. `claude_desktop_config.json` 파일을 홈 디렉토리의 적절한 위치에 복사합니다:\n\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - Linux: `~/.config/Claude/claude_desktop_config.json`\n\n2. 클로드 데스크탑을 재시작합니다.\n\n## 테스트 방법\n\n```bash\n# 기본 테스트\npython test_mcp.py\n\n# 특정 데이터 경로와 함께 테스트\npython test_mcp.py --data-path \"기사 작성 준칙\"\n\n# 특정 검색어로 테스트\npython test_mcp.py --query \"문장부호\"\n```\n\n## MCP Inspector로 테스트\n\n```bash\nnpx @modelcontextprotocol/inspector python -u stylebook_mcp_fastmcp.py --stdio --data_path \".\"\n```\n\n## 디렉토리 구조\n\n이 MCP 서버는 다음과 같은 파일 구조를 사용합니다:\n\n```\n.\n├── smithery.yaml                # 스미더리 설정 파일\n├── stylebook_mcp_fastmcp.py     # MCP 서버 메인 스크립트\n├── claude_desktop_config.json   # 클로드 데스크탑 설정 파일\n├── test_mcp.py                  # 테스트 스크립트\n├── requirements.txt             # 필수 라이브러리 목록\n└── README.md                    # 이 문서\n```\n\n## 스타일북 데이터 구조\n\n스타일북 데이터는 다음과 같은 디렉토리에 있어야 합니다 (기본적으로 스크립트는 자동으로 검색합니다):\n\n```\n.\n├── 기사 작성 준칙/\n├── 기사작성 요령/\n├── 자주 틀리는 말/\n├── 제목과 레이아웃_제목달기/\n├── 제목과 레이아웃_레이아웃 요령/\n└── 뉴스가치 판단/\n```\n\n각 디렉토리에는 `.json` 파일들이 있어야 하며, 메타데이터는 `metadata.json` 또는 `_meta.json` 파일에 있어야 합니다.\n\n## 도구 목록\n\nMCP 서버는 다음과 같은 도구를 제공합니다:\n\n1. `get_metadata` - 스타일북 메타데이터 조회\n2. `get_categories` - 스타일북 카테고리 목록 조회\n3. `get_rule` - 특정 규칙 ID로 스타일북 규칙 조회\n4. `search` - 키워드로 스타일북 검색\n5. `claude_search` - Claude AI를 사용한 스타일북 검색\n6. `download_json` - 스타일북 JSON 파일 다운로드\n\n## 환경 변수\n\n- `PYTHONUNBUFFERED`: 항상 1로 설정하여 버퍼링을 비활성화\n- `PYTHONIOENCODING`: `utf-8`로 설정하여 한글 등 유니코드 문자를 올바르게 처리\n\n## 문제 해결\n\n1. 데이터를 찾을 수 없는 경우:\n\n   - `--data_path` 옵션으로 정확한 경로를 지정하세요.\n   - 스크립트가 자동으로 여러 디렉토리를 검색하지만, 직접 지정하는 것이 더 확실합니다.\n\n2. 클로드 데스크탑에 연결되지 않는 경우:\n\n   - 로그를 확인하세요: `tail -n 20 -F ~/Library/Logs/Claude/mcp*.log`\n   - `claude_desktop_config.json` 파일이 올바른 위치에 있는지 확인하세요.\n\n3. 스미더리에 연결되지 않는 경우:\n   - 스미더리 로그를 확인하세요.\n   - `smithery.yaml` 파일이 올바르게 설정되었는지 확인하세요.\n\n## 라이선스\n\n이 프로젝트는 자유롭게 사용할 수 있습니다.\n\n@mcp.route(\"resources/list\")\ndef handle_resources_list():\nreturn {\"resources\": []}\n\n@mcp.route(\"prompts/list\")\ndef handle_prompts_list():\nreturn {\"prompts\": []}\n\n@mcp.route(\"debug/status\")\ndef debug_status():\nreturn {\n\"loaded_data\": len(stylebook_data),\n\"server_uptime\": \"...\",\n\"memory_usage\": \"...\"\n}\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_style",
        "mcp",
        "notetaking",
        "mcp_style mcp",
        "mcp style",
        "ai workflows"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "9Ninety--MCPNotes": {
      "owner": "9Ninety",
      "name": "MCPNotes",
      "url": "https://github.com/9Ninety/MCPNotes",
      "imageUrl": "/freedevtools/mcp/pfp/9Ninety.webp",
      "description": "A simple note-taking application that enables users to record and manage notes with AI models while utilizing DynamoDB for storage. It provides both an MCP server for AI-driven note management and a web server for manual interaction.",
      "stars": 27,
      "forks": 3,
      "license": "GNU General Public License v2.0",
      "language": "TypeScript",
      "updated_at": "2025-09-03T22:30:44Z",
      "readme_content": "# 📝 MCP Notes\n\n![MCP Notes Cover Image](./assets/cover.png)\n\n## ✨ Overview\n\n**MCP Notes Server** is a simple note-taking application built on top of the MCP protocol. Its purpose is to enable users to record and view complex notes and tasks while utilizing AI models, such as recording personal thoughts, notes, inspirations, and insights. It does not rely on creating project files, allowing users to record any content without making it public within the project.\n\nThis project includes two servers: a Node.js server using the Model Context Protocol (MCP) for AI-driven note management and a web server providing a user-friendly interface for manual interaction with your notes.\n\n**Note:** This project requires DynamoDB for note storage. You'll need an AWS account to use it. AWS offers a generous free tier for DynamoDB, making it suitable for frequent personal use at no cost.\n\n---\n\n## 🎯 Core Features\n\n- 🖥️ **Dual Server Architecture:** MCP server for AI-driven note management and Web server for the user interface\n- 🤖 **AI-Powered Note Taking:** Record thoughts, insights, and tasks through AI interactions\n- 🗂️ **Comprehensive Note Management:** Create, list, retrieve, update, and delete notes via AI or web interface\n- 📋 **Reliable Storage:** Secure and efficient note storage with AWS DynamoDB\n- 🔐 **Flexible Authentication:** Support for AWS credentials via connection strings or environment variables\n- 📝 **Project-Independent:** Store personal notes without affecting project files or structure\n\n---\n\n## 🤖 Model Support\n\nYou can use any model that supports function calls as long as your client supports MCP. The following models have been tested and confirmed to work:\n\n- Claude 3.5 Series\n- Gemini 1.5 and 2.0 Series\n- GPT-4 Series\n- Mistral Large\n- Grok-2\n- DeepSeek Chat\n\n---\n\n## 🛠️ Installation\n\n**Recommended**\n\nRun directly with `npx` or `bunx`, see examples below.\n\n**Alternative**\n\n1. Ensure **Node.js** is installed on your system.\n2. Clone this repository and install dependencies with: `npm install`\n3. Configure Claude Desktop or any other tools as shown below\n\n---\n\n## ⚙️ Credential Configuration\n\n### Connection String\n\n```plaintext\ndynamodb://<access_key>:<secret_key>@<region>/<table>\n```\n\n> Example: `dynamodb://AKIAXXXXXXXX:SKXXXXXXXX@us-east-1/mcp-notes`\n\n### Environment Variables\n\n1. Export `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.\n2. Supply connection information without credentials in the URI: `dynamodb://us-east-1/mcp-notes`\n\n---\n\n## 🤖 Integration with Tools\n\n### Claude Desktop\n\nAdd this snippet to `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-notes\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"-p\",\n        \"mcp-notes\",\n        \"mcp-notes-server\",\n        \"--dynamodb\",\n        \"dynamodb://access_key:secret_key@region/table\"\n      ]\n    }\n  }\n}\n```\n\nor file on local disks:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-notes\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"file://path/to/notes-mcp-server.js\",\n        \"--dynamodb\",\n        \"dynamodb://access_key:secret_key@region/table\"\n      ]\n    }\n  }\n}\n```\n\n### Cody\n\n> **Note:** Currently, Cody has limited MCP server support.  \n> It only allows one server connection and cannot make tool calls. You'll need to use the web interface to create and manage notes and then reference them in AI chat conversations.\n\nAdd this snippet to your VS Code settings:\n\n```json\n{\n  \"openctx.providers\": {\n    \"https://openctx.org/npm/@openctx/provider-modelcontextprotocol\": {\n      \"nodeCommand\": \"node\",\n      \"mcp.provider.uri\": \"file://path/to/notes-mcp-server.js\",\n      \"mcp.provider.args\": [\n        \"--dynamodb\",\n        \"dynamodb://access_key:secret_key@region/table\"\n      ]\n    }\n  }\n}\n```\n\nalternatively, use with `npx` (not guaranteed to work):\n\n```json\n{\n  \"openctx.providers\": {\n    \"https://openctx.org/npm/@openctx/provider-modelcontextprotocol\": {\n      \"nodeCommand\": \"node\",\n      \"mcp.provider.uri\": \"file:///usr/local/bin/npx\",\n      \"mcp.provider.args\": [\n        \"-y\",\n        \"-p\",\n        \"mcp-notes\",\n        \"mcp-notes-server\",\n        \"--dynamodb\",\n        \"dynamodb://access_key:secret_key@region/table\"\n      ]\n    }\n  }\n}\n```\n\n### Cline\n\nAdd this snippet to `cline_mcp_settings.json`:\n\n> You will find a \"MCP Server\" icon next to the \"New Task\" button, and then there is an \"Edit MCP Settings\" button to open this file.\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-notes\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"-p\",\n        \"mcp-notes\",\n        \"mcp-notes-server\",\n        \"--dynamodb\",\n        \"dynamodb://access_key:secret_key@region/table\"\n      ]\n    }\n  }\n}\n```\n\n---\n\n## 🚀 Running Web Servers\n\nThe web server provides a user-friendly interface for managing your notes. You can launch web interfaces to manage your notes, add new notes for AI, or modify parts of AI-generated notes.\n\n```bash\nnpx -p mcp-notes mcp-notes-web-server --dynamodb \"dynamodb://access_key:secret_key@region/table\"\n```\n\n```bash\nbun src/notes-web-server.ts --dynamodb \"dynamodb://access_key:secret_key@region/table\"\n```\n\n> Alternatively, compile with `npm run build` and run `node dist/notes-mcp-server.js` or `node dist/notes-web-server.js`\n\nThen navigate to `http://localhost:3100` in your browser to view notes.\n\n---\n\n## 🔧 Available MCP Tools\n\n### listNotes\n\n- **Input:** `{ tags?: string[] }`\n- **Output:** Array of all notes, optionally filtered by tags.\n\n### getNote\n\n- **Input:** `{ id: string }`\n- **Output:** A single note object matching the given ID, or a \"not found\" message if no match exists.\n\n### writeNote\n\n- **Input:** `{ id: string, title: string, summary: string, tags: string[], content: string }`\n- **Output:** A success confirmation message.\n\n### deleteNote\n\n- **Input:** `{ id: string }`\n- **Output:** Deletion confirmation message 🚮.\n\n---\n\n## 📝 Data Structure\n\nNotes are stored using the following structure:\n\n- **`id`**: A unique identifier for the note. It should be descriptive, with a random number suffix, like \"meeting-notes-1362\".\n- **`title`**: The title of the note.\n- **`summary`**: A short summary of the note's content.\n- **`tags`**: An array of tags associated with the note (e.g., [\"meeting\", \"project-x\"]).\n- **`content`**: The main content of the note.\n\n---\n\n## 📸 Screenshots\n\n### Claude Desktop\n\n✅ Full functionality\n\n![Screenshot of MCP Notes Tool Call in Claude Desktop](./assets/screenshot-claude-desktop-tool-calling.png)\n![Screenshot of MCP Notes Resources in Claude Desktop](./assets/screenshot-claude-desktop-resources.png)\n\n### Cody\n\n✅ Mention Notes via Resource\n\n❎ Tool calls are not supported\n\n![Screenshot of MCP Notes in Cody](./assets/screenshot-cody-mention.png)\n\n### Cline\n\n✅ Full functionality with Tool Calls\n\n❓ Resources don't seem to work; help wanted.\n\n<img src=\"./assets/screenshot-cline-tool-calling.png\" alt=\"Screenshot of MCP Notes in Cline\" style=\"max-height: 1200px;\">\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "mcpnotes",
        "notes",
        "note management",
        "manage notes",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "CamdenClark--anki-mcp-server": {
      "owner": "CamdenClark",
      "name": "anki-mcp-server",
      "url": "https://github.com/CamdenClark/anki-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/CamdenClark.webp",
      "description": "Integrate with Anki to manage decks and notes through a simple API. Access Anki decks and note models, and perform operations like creating and managing notes.",
      "stars": 75,
      "forks": 12,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-28T00:46:51Z",
      "readme_content": "# anki-mcp MCP Server\n\nA server to integrate with Anki via the AnkiConnect   plugin\n\nThis is a TypeScript-based MCP server that integrates with Anki via the AnkiConnect plugin. It demonstrates core MCP concepts by providing:\n\n- Resources representing Anki decks and note models with URIs\n- Tools for creating and managing Anki notes\n- Integration with AnkiConnect API\n\n## Features\n\n### Resources\n- List and access Anki decks via `anki://decks/{id}` URIs\n- List and access note models via `anki://models/{id}` URIs\n- JSON representation of Anki objects\n\n### Tools\n- `listDecks` - Get names of all decks\n- `listModels` - Get names of all note models\n- `getModel` - Get details of a specific note model\n- `addNote` - Create a single note\n  - Specify deck name, model name, fields and tags\n- `addNotes` - Create multiple notes in bulk\n  - Create many notes with specified parameters\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"anki-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\"d:\\\\anki-mcp-server\\\\build\\\\index.js\"]\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "anki",
        "notetaking",
        "notes",
        "anki manage",
        "anki decks",
        "access anki"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Cleversoft-IT--drupal-tools-mcp": {
      "owner": "Cleversoft-IT",
      "name": "drupal-tools-mcp",
      "url": "https://github.com/Cleversoft-IT/drupal-tools-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Cleversoft-IT.webp",
      "description": "Manage a simple notes system with resources for creating and accessing text notes using URIs and metadata. Generate summaries of stored notes through LLM prompts.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-02-07T18:52:01Z",
      "readme_content": "# drupal-modules-mcp MCP Server\n\nA Model Context Protocol server\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"drupal-modules-mcp\": {\n      \"command\": \"/path/to/drupal-modules-mcp/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "metadata",
        "notes resources",
        "notes using",
        "stored notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "DJBuildIt--Claude-Think-MCP": {
      "owner": "DJBuildIt",
      "name": "Claude-Think-MCP",
      "url": "https://github.com/DJBuildIt/Claude-Think-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Enables explicit reasoning mode for Claude in Cursor, allowing users to view Claude's step-by-step thought processes and final answers. Start messages with 'think' to trigger detailed problem solving and analysis in chat interactions.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "djbuildit",
        "mcp",
        "reasoning",
        "reasoning mode",
        "thought processes",
        "djbuildit claude"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Dingzeefs--mcp-apple-notes": {
      "owner": "Dingzeefs",
      "name": "mcp-apple-notes",
      "url": "https://github.com/Dingzeefs/mcp-apple-notes",
      "imageUrl": "/freedevtools/mcp/pfp/Dingzeefs.webp",
      "description": "Enables semantic search and retrieval of Apple Notes with advanced indexing capabilities. Supports both semantic and full-text searches, integrating seamlessly with Apple Notes on macOS.",
      "stars": 2,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-10T16:32:24Z",
      "readme_content": "# MCP Apple Notes\n\nA Model Context Protocol (MCP) server for semantic search and retrieval over Apple Notes.\n\n## Features\n\n- 🔍 Semantic search using on-device embeddings model\n- 📝 Full-text search capabilities\n- 💾 Vector storage with LanceDB\n- 🍎 Native Apple Notes integration\n\n## Prerequisites\n\n- macOS (required for Apple Notes integration)\n- [Bun](https://bun.sh/) JavaScript runtime\n\n## Installation\n\n1. Clone this repository:\n```bash\ngit clone https://github.com/Dingzeefs/mcp-apple-notes.git\ncd mcp-apple-notes\n```\n\n2. Install dependencies:\n```bash\nbun install\n```\n\n## Usage\n\n### Configuring in Cursor IDE\n\n1. Open Cursor IDE\n2. Go to Settings → Features → MCP\n3. Add a new MCP server with the following configuration:\n   - **Name**: Apple Notes\n   - **Type**: command\n   - **Command**: `/path/to/bun /path/to/mcp-apple-notes/index.ts`\n   \n   Replace `/path/to/bun` with the actual path to your Bun executable (find it using `which bun`)\n   and `/path/to/mcp-apple-notes` with the actual path to this repository.\n\n4. Restart Cursor IDE\n\n### Using the MCP Server\n\nOnce configured, you can use the following tools in your conversations with Claude:\n\n- **list-notes**: Lists all your Apple Notes titles\n- **index-notes**: Indexes your notes for semantic search (do this first)\n- **get-note**: Retrieves a specific note by title\n- **search-notes**: Searches your notes using semantic or keyword search\n- **create-note**: Creates a new note with specified title and content\n\n## Troubleshooting\n\nIf you encounter issues:\n\n1. Check that the server is running by looking at the MCP server status in Cursor\n2. Verify that the paths in your MCP server configuration are correct\n3. Try running the command directly in your terminal to see any error messages\n4. Make sure Apple Notes is accessible and permissions are granted\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "retrieval",
        "notes macos",
        "apple notes",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "DynamicEndpoints--mesh-scanner": {
      "owner": "DynamicEndpoints",
      "name": "mesh-scanner",
      "url": "https://github.com/DynamicEndpoints/mesh-scanner",
      "imageUrl": "/freedevtools/mcp/pfp/DynamicEndpoints.webp",
      "description": "Create and manage text notes with unique URIs, allowing easy retrieval and organization. Generate summaries of notes through dedicated prompts and tools.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-14T06:16:21Z",
      "readme_content": "# MESH by Viscount Vulnerability Scanner MCP Server\n\n**Version 0.2.0** - Enhanced with prompts, resources, and comprehensive security assessment tools\n\nA comprehensive MCP server for scanning and analyzing MESH by Viscount systems for default credential vulnerabilities. This tool is designed for security research and educational purposes only.\n\n## 🚨 Important Notice\n\n**This tool is for educational and security research purposes only.** Unauthorized access to systems is illegal. Always obtain proper authorization before scanning any systems.\n\n## Features\n\n### 🔍 Scanning Capabilities\n- **Single IP Scanning**: Scan individual IP addresses for MESH systems\n- **IP Range Scanning**: Scan entire IP ranges with configurable concurrency\n- **Default Credential Testing**: Test for the default credentials (freedom:viscount)\n- **System Discovery**: Identify MESH by Viscount systems on networks\n\n### 📊 Security Assessment\n- **Comprehensive Reports**: Generate detailed security assessment reports\n- **Vulnerability Summaries**: Track vulnerabilities across timeframes\n- **Compliance Reports**: Generate reports for NIST, ISO27001, SOC2, and PCI-DSS\n- **Risk Analysis**: Automatic risk level assessment (LOW, MEDIUM, HIGH, CRITICAL)\n\n### 📋 Data Export\n- **Multiple Formats**: Export results as JSON, CSV, or XML\n- **Filtered Export**: Export only vulnerable systems or specific scans\n- **Historical Data**: Maintain scan history and statistics\n\n### 🎯 Advanced Features\n- **System Information**: Extract building details, user lists, and event logs\n- **Entrance Control**: Demonstrate entrance unlocking (educational only)\n- **Real-time Monitoring**: Track scanning progress and results\n- **Rate Limiting**: Configurable rate limiting for responsible scanning\n\n## Installation\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the server\nnpm run build\n\n# Run the server\nnpm start\n```\n\n## MCP Configuration\n\nAdd to your MCP configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"mesh-scanner\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/mesh-scanner/build/index.js\"]\n    }\n  }\n}\n```\n\n## Usage\n\n### Basic Scanning\n\n#### Scan a Single IP\n```json\n{\n  \"tool\": \"scan_ip\",\n  \"arguments\": {\n    \"ipAddress\": \"192.168.1.100\"\n  }\n}\n```\n\n#### Scan an IP Range\n```json\n{\n  \"tool\": \"scan_ip_range\",\n  \"arguments\": {\n    \"startIp\": \"192.168.1.1\",\n    \"endIp\": \"192.168.1.254\",\n    \"concurrency\": 5,\n    \"timeout\": 5000\n  }\n}\n```\n\n### Security Assessment\n\n#### Generate Security Report\n```json\n{\n  \"prompt\": \"security_assessment\",\n  \"arguments\": {\n    \"format\": \"detailed\",\n    \"scan_id\": \"scan_123456789\"\n  }\n}\n```\n\n#### Vulnerability Summary\n```json\n{\n  \"prompt\": \"vulnerability_summary\",\n  \"arguments\": {\n    \"timeframe\": \"7d\"\n  }\n}\n```\n\n#### Compliance Report\n```json\n{\n  \"prompt\": \"compliance_report\",\n  \"arguments\": {\n    \"standard\": \"NIST\"\n  }\n}\n```\n\n#### Remediation Guide\n```json\n{\n  \"prompt\": \"remediation_guide\",\n  \"arguments\": {\n    \"system_ip\": \"192.168.1.100\",\n    \"severity\": \"high\"\n  }\n}\n```\n\n### Data Export\n\n#### Export All Results\n```json\n{\n  \"tool\": \"export_scan_results\",\n  \"arguments\": {\n    \"format\": \"json\"\n  }\n}\n```\n\n#### Export Vulnerable Systems Only\n```json\n{\n  \"tool\": \"export_scan_results\",\n  \"arguments\": {\n    \"format\": \"csv\",\n    \"includeVulnerableOnly\": true\n  }\n}\n```\n\n### System Information\n\n#### Get System Details\n```json\n{\n  \"tool\": \"get_system_info\",\n  \"arguments\": {\n    \"url\": \"http://192.168.1.100\"\n  }\n}\n```\n\n### Resources\n\nAccess real-time data through MCP resources:\n\n- `mesh://scan-results` - Latest scan results\n- `mesh://vulnerable-systems` - List of vulnerable systems\n- `mesh://scan-history` - Historical scan data\n- `mesh://vulnerability-stats` - Statistics and trends\n- `mesh://system-details` - Detailed system information\n- `mesh://security-assessments` - Generated assessments\n\n## Prompts\n\nThe server provides several prompts for comprehensive security analysis:\n\n### 1. Security Assessment\nGenerates detailed security reports with risk analysis and recommendations.\n\n**Arguments:**\n- `scan_id` (optional): Specific scan to analyze\n- `format`: \"detailed\", \"summary\", or \"executive\"\n\n### 2. Vulnerability Summary\nCreates summaries of vulnerabilities found across different timeframes.\n\n**Arguments:**\n- `timeframe`: \"24h\", \"7d\", \"30d\", or \"all\"\n\n### 3. Remediation Guide\nProvides specific remediation steps for vulnerable systems.\n\n**Arguments:**\n- `system_ip`: IP address of vulnerable system\n- `severity`: \"low\", \"medium\", \"high\", or \"critical\"\n\n### 4. Compliance Report\nGenerates compliance reports for various security standards.\n\n**Arguments:**\n- `standard`: \"NIST\", \"ISO27001\", \"SOC2\", or \"PCI-DSS\"\n\n## Tools\n\n### scan_ip\nScan a single IP address for MESH system and test default credentials.\n\n**Parameters:**\n- `ipAddress` (string): IP address to scan\n- `timeout` (number, optional): Timeout in milliseconds\n- `config` (object, optional): Additional configuration\n\n### scan_ip_range\nScan a range of IP addresses for MESH systems.\n\n**Parameters:**\n- `startIp` (string): Starting IP address\n- `endIp` (string): Ending IP address\n- `concurrency` (number, optional): Concurrent scans (max: 20)\n- `timeout` (number, optional): Timeout in milliseconds\n- `config` (object, optional): Additional configuration\n\n### test_default_credentials\nTest if a MESH system is vulnerable to default credentials.\n\n**Parameters:**\n- `url` (string): URL of the MESH system\n- `config` (object, optional): Additional configuration\n\n### get_system_info\nGet detailed information about a vulnerable MESH system.\n\n**Parameters:**\n- `url` (string): URL of the vulnerable system\n- `config` (object, optional): Additional configuration\n\n### unlock_entrance\nUnlock an entrance (educational purposes only).\n\n**Parameters:**\n- `url` (string): URL of the vulnerable system\n- `entranceId` (string): ID of the entrance to unlock\n- `config` (object, optional): Additional configuration\n\n### export_scan_results\nExport scan results to various formats.\n\n**Parameters:**\n- `format` (string): \"json\", \"csv\", or \"xml\"\n- `includeVulnerableOnly` (boolean, optional): Export only vulnerable systems\n- `scanId` (string, optional): Specific scan ID to export\n\n## Configuration\n\n### Scan Configuration\n```typescript\ninterface ScanConfig {\n  timeout: number;        // Request timeout in ms (default: 5000)\n  concurrency: number;    // Concurrent scans (default: 5, max: 20)\n  rateLimit: number;      // Rate limit between requests (default: 100)\n  userAgent: string;      // Custom User-Agent string\n}\n```\n\n### Default Credentials\n- **Username**: freedom\n- **Password**: viscount\n\n## Security Considerations\n\n### Risk Levels\n- **CRITICAL**: >50% of systems vulnerable\n- **HIGH**: >20% of systems vulnerable\n- **MEDIUM**: >10% of systems vulnerable\n- **LOW**: ≤10% of systems vulnerable\n\n### Recommendations\n1. **Immediate**: Change default credentials on all vulnerable systems\n2. **Short-term**: Implement network segmentation and monitoring\n3. **Long-term**: Establish regular security assessments and training\n\n## Legal and Ethical Use\n\nThis tool is provided for:\n- Security research and education\n- Authorized penetration testing\n- Vulnerability assessment with proper authorization\n- Security awareness training\n\n**Users are responsible for ensuring they have proper authorization before scanning any systems.**\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Add tests if applicable\n5. Submit a pull request\n\n## License\n\nThis project is provided for educational purposes. Use responsibly and in accordance with applicable laws and regulations.\n\n## Support\n\nFor issues, questions, or contributions, please open an issue on the GitHub repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "dynamicendpoints",
        "text notes",
        "notetaking knowledge",
        "notes dedicated"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "HeatherFlux--github-issue-mcp-server": {
      "owner": "HeatherFlux",
      "name": "github-issue-mcp-server",
      "url": "https://github.com/HeatherFlux/github-issue-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/HeatherFlux.webp",
      "description": "Create and manage text notes with URIs, metadata, and the ability to generate summaries of stored notes.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-19T13:55:42Z",
      "readme_content": "# github-server MCP Server\n\nA Model Context Protocol server\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"github-server\": {\n      \"command\": \"/path/to/github-server/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "metadata",
        "stored notes",
        "text notes",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Jordanm37--mcp-obsidian": {
      "owner": "Jordanm37",
      "name": "mcp-obsidian",
      "url": "https://github.com/Jordanm37/mcp-obsidian",
      "imageUrl": "/freedevtools/mcp/pfp/Jordanm37.webp",
      "description": "Interact with an Obsidian vault to retrieve, search, and modify notes. Utilize a Local REST API to enhance productivity and organization through effective note management.",
      "stars": 3,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-29T22:54:32Z",
      "readme_content": "# MCP server for Obsidian\n\nMCP server to interact with Obsidian via the Local REST API community plugin.\n\n<a href=\"https://glama.ai/mcp/servers/3wko1bhuek\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/3wko1bhuek/badge\" alt=\"server for Obsidian MCP server\" /></a>\n\n## Components\n\n### Tools\n\nThe server implements multiple tools to interact with Obsidian:\n\n- list_files_in_vault: Lists all files and directories in the root directory of your Obsidian vault\n- list_files_in_dir: Lists all files and directories in a specific Obsidian directory\n- get_file_contents: Return the content of a single file in your vault.\n- search: Search for documents matching a specified text query across all files in the vault\n- patch_content: Insert content into an existing note relative to a heading, block reference, or frontmatter field.\n- append_content: Append content to a new or existing file in the vault.\n\n### Example prompts\n\nIts good to first instruct Claude to use Obsidian. Then it will always call the tool.\n\nThe use prompts like this:\n- Get the contents of the last architecture call note and summarize them\n- Search for all files where Azure CosmosDb is mentioned and quickly explain to me the context in which it is mentioned\n- Summarize the last meeting notes and put them into a new note 'summary meeting.md'. Add an introduction so that I can send it via email.\n\n## Configuration\n\n### Obsidian REST API Key\n\nThere are two ways to configure the environment with the Obsidian REST API Key. \n\n1. Add to server config (preferred)\n\n```json\n{\n  \"mcp-obsidian\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"mcp-obsidian\"\n    ],\n    \"env\": {\n      \"OBSIDIAN_API_KEY\":\"<your_api_key_here>\"\n    }\n  }\n```\n\n2. Create a `.env` file in the working directory with the following required variable:\n\n```\nOBSIDIAN_API_KEY=your_api_key_here\n```\n\nNote: You can find the key in the Obsidian plugin config.\n\n## Quickstart\n\n### Install\n\n#### Obsidian REST API\n\nYou need the Obsidian REST API community plugin running: https://github.com/coddingtonbear/obsidian-local-rest-api\n\nInstall and enable it in the settings and copy the api key.\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  \n```json\n{\n  \"mcpServers\": {\n    \"mcp-obsidian\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<dir_to>/mcp-obsidian\",\n        \"run\",\n        \"mcp-obsidian\"\n      ]\n    }\n  }\n}\n```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  \n```json\n{\n  \"mcpServers\": {\n    \"mcp-obsidian\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-obsidian\"\n      ],\n      \"env\": {\n        \"OBSIDIAN_API_KEY\" : \"<YOUR_OBSIDIAN_API_KEY>\"\n      }\n    }\n  }\n}\n```\n</details>\n\n## Development\n\n### Building\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /path/to/mcp-obsidian run mcp-obsidian\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\nYou can also watch the server logs with this command:\n\n```bash\ntail -n 20 -f ~/Library/Logs/Claude/mcp-server-mcp-obsidian.log\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "obsidian",
        "note management",
        "notes utilize",
        "obsidian vault"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "LeslieLeung--mcp-server-memos": {
      "owner": "LeslieLeung",
      "name": "mcp-server-memos",
      "url": "https://github.com/LeslieLeung/mcp-server-memos",
      "imageUrl": "/freedevtools/mcp/pfp/LeslieLeung.webp",
      "description": "Search and create memos using a simple API for memo management, enhancing note-taking and organization in applications.",
      "stars": 18,
      "forks": 5,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-23T08:24:51Z",
      "readme_content": "# memos-mcp-server\n[![smithery badge](https://smithery.ai/badge/@LeslieLeung/mcp-server-memos)](https://smithery.ai/server/@LeslieLeung/mcp-server-memos)\n\nA [MCP(Model Context Protocol)](https://modelcontextprotocol.io) server for [Memos](https://github.com/usememos/memos).\n\n## Tools\n\n- `search_memos`: Search memos with keyword.\n- `create_memo`: Create a new memo.\n\n## Usage\n\n### Installing via Smithery\n\nTo install mcp-server-memos for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@LeslieLeung/mcp-server-memos):\n\n```bash\nnpx -y @smithery/cli install @LeslieLeung/mcp-server-memos --client claude\n```\n\n```\n{\n    \"mcpServers\": [\n        \"memos\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"memos-mcp-server\"\n            ],\n            \"env\": {\n                \"MEMOS_URL\": \"https://memos.example.com\",\n                \"MEMOS_API_KEY\": \"your_api_key\",\n                \"DEFAULT_TAG\": \"#mcp\"\n            }\n        }\n    ]\n}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "memos",
        "memo",
        "notetaking",
        "memo management",
        "memos using",
        "server memos"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Pratik-Kumar-Cse--script-generation-mcp": {
      "owner": "Pratik-Kumar-Cse",
      "name": "script-generation-mcp",
      "url": "https://github.com/Pratik-Kumar-Cse/script-generation-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Pratik-Kumar-Cse.webp",
      "description": "Store and manage notes with a simple system that allows adding new notes and generating summaries based on user-defined detail levels. Supports accessing notes through a custom URI scheme, enhancing the organization and retrieval of written content.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-07-26T13:53:43Z",
      "readme_content": "# script_generator_server MCP server\r\n\r\nA MCP server project\r\n\r\n## Components\r\n\r\n### Resources\r\n\r\nThe server implements a simple note storage system with:\r\n\r\n- Custom note:// URI scheme for accessing individual notes\r\n- Each note resource has a name, description and text/plain mimetype\r\n\r\n### Prompts\r\n\r\nThe server provides a single prompt:\r\n\r\n- summarize-notes: Creates summaries of all stored notes\r\n  - Optional \"style\" argument to control detail level (brief/detailed)\r\n  - Generates prompt combining all current notes with style preference\r\n\r\n### Tools\r\n\r\nThe server implements two tools:\r\n\r\n- add-note: Adds a new note to the server\r\n  - Takes \"name\" and \"content\" as required string arguments\r\n  - Updates server state and notifies clients of resource changes\r\n- script_generate: Generates a script based on provided topic and keywords\r\n  - Takes \"topic\" and \"keywords\" as required string arguments\r\n  - Uses multiple agents to generate and refine the script\r\n\r\n## Configuration\r\n\r\n[TODO: Add configuration details specific to your implementation]\r\n\r\n## Quickstart\r\n\r\n### Install\r\n\r\n#### Claude Desktop\r\n\r\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\r\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\r\n\r\n<details>\r\n  <summary>Development/Unpublished Servers Configuration</summary>\r\n  ```\r\n  \"mcpServers\": {\r\n    \"script_generator_server\": {\r\n      \"command\": \"uv\",\r\n      \"args\": [\r\n        \"--directory\",\r\n        \"C:\\Users\\INDIA\\Desktop\\mcp\\script_generator_server\",\r\n        \"run\",\r\n        \"script_generator_server\"\r\n      ]\r\n    }\r\n  }\r\n  ```\r\n</details>\r\n\r\n<details>\r\n  <summary>Published Servers Configuration</summary>\r\n  ```\r\n  \"mcpServers\": {\r\n    \"script_generator_server\": {\r\n      \"command\": \"uvx\",\r\n      \"args\": [\r\n        \"script_generator_server\"\r\n      ]\r\n    }\r\n  }\r\n  ```\r\n</details>\r\n\r\n## Development\r\n\r\n### Building and Publishing\r\n\r\nTo prepare the package for distribution:\r\n\r\n1. Sync dependencies and update lockfile:\r\n\r\n```bash\r\nuv sync\r\n```\r\n\r\n2. Build package distributions:\r\n\r\n```bash\r\nuv build\r\n```\r\n\r\nThis will create source and wheel distributions in the `dist/` directory.\r\n\r\n3. Publish to PyPI:\r\n\r\n```bash\r\nuv publish\r\n```\r\n\r\nNote: You'll need to set PyPI credentials via environment variables or command flags:\r\n\r\n- Token: `--token` or `UV_PUBLISH_TOKEN`\r\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\r\n\r\n### Debugging\r\n\r\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\r\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\r\n\r\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\r\n\r\n```bash\r\nnpx @modelcontextprotocol/inspector uv --directory C:\\Users\\INDIA\\Desktop\\mcp\\script_generator_server run script-generator-server\r\n```\r\n\r\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "cse",
        "manage notes",
        "notes generating",
        "notes custom"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Promptly-Technologies-LLC--mcp-structured-thinking": {
      "owner": "Promptly-Technologies-LLC",
      "name": "mcp-structured-thinking",
      "url": "https://github.com/Promptly-Technologies-LLC/mcp-structured-thinking",
      "imageUrl": "/freedevtools/mcp/pfp/Promptly-Technologies-LLC.webp",
      "description": "Enables LLMs to construct mind maps programmatically and explore idea spaces while providing metacognitive feedback. Facilitates thought capturing, revising, and management to enhance reasoning and creativity through structured thought stages and memory management.",
      "stars": 23,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T22:32:24Z",
      "readme_content": "# Structured Thinking MCP Server\n\nA TypeScript Model Context Protocol (MCP) server based on [Arben Ademi](https://github.com/arben-adm)'s [Sequential Thinking](https://github.com/arben-adm/mcp-sequential-thinking) Python server. The motivation for this project is to allow LLMs to programmatically construct mind maps to explore an idea space, with enforced \"metacognitive\" self-reflection.\n\n## Setup\n\nSet the tool configuration in Claude Desktop, Cursor, or another MCP client as follows:\n\n```json\n{\n  \"structured-thinking\": {\n    \"command\": \"npx\",\n    \"args\": [\"-y\", \"structured-thinking\"]\n  }\n}\n```\n\n## Overview\n\n### Thought Quality Scores\n\nWhen an LLM captures a thought, it assigns that thought a quality score between 0 and 1. This score is used, in combination with the thought's stage, for providing \"metacognitive\" feedback to the LLM how to \"steer\" its thinking process.\n\n### Thought Stages\n\nEach thought is tagged with a stage (e.g., Problem Definition, Analysis, Ideation) to help manage the life-cycle of the LLM's thinking process. In the current implementation, these stages play a very important role. In effect, if the LLM spends too long in a given stage or is having low-quality thoughts in the current stage, the server will provide feedback to the LLM to \"steer\" its thinking toward other stages, or at least toward thinking strategies that are atypical of the current stage. (E.g., in deductive mode, the LLM will be encouraged to consider more creative thoughts.)\n\n### Thought Branching\n\nThe LLM can spawn “branches” off a particular thought to explore different lines of reasoning in parallel. Each branch is tracked separately, letting you manage scenarios where multiple solutions or ideas should coexist.\n\n### Memory Management\n\nThe server maintains a \"short-term\" memory buffer of the LLM's ten most recent thoughts, and a \"long-term\" memory of thoughts that can be retrieved based on their tags for summarization of the entire history of the LLM's thinking process on a given topic.\n\n## Limitations\n\n### Naive Metacognitive Monitoring\n\nCurrently, the quality metrics and metacognitive feedback are derived mechanically from naive stage-based multipliers applied to a single self-reported quality score.\n\nAs part of the future work, I plan to add more sophisticated metacognitive feedback, including semantic analysis of thought content, thought verification processes, and more intelligent monitoring for reasoning errors.\n\n### Lack of User Interface\n\nCurrently, the server stores all thoughts in memory, and does not persist them to a file or database. There is also no user interface for reviewing the thought space or visualizing the mind map.\n\nAs part of the future work, I plan to incorporate a simple visualization client so the user can watch the thought graph evolve.\n\n## MCP Tools\n\nThe server exposes the following MCP tools:\n\n### capture_thought\n\nCreate a thought in the thought history, with metadata about the thought's type, quality, content, and relationships to other thoughts.\n\nParameters:\n- `thought`: The content of the current thought\n- `thought_number`: Current position in the sequence\n- `total_thoughts`: Expected total number of thoughts\n- `next_thought_needed`: Whether another thought should follow\n- `stage`: Current thinking stage (e.g., \"Problem Definition\", \"Analysis\")\n- `is_revision` (optional): Whether this revises a previous thought\n- `revises_thought` (optional): Number of thought being revised\n- `branch_from_thought` (optional): Starting point for a new thought branch\n- `branch_id` (optional): Identifier for the current branch\n- `needs_more_thoughts` (optional): Whether additional thoughts are needed\n- `score` (optional): Quality score (0.0 to 1.0)\n- `tags` (optional): Categories or labels for the thought\n\n### revise_thought\n\nRevise a thought in the thought history, with metadata about the thought's type, quality, content, and relationships to other thoughts.\n\nParameters:\n- `thought_id`: The ID of the thought to revise\n- Parameters from `capture_thought`\n\n### retrieve_relevant_thoughts\n\nRetrieve thoughts from long-term storage that share tags with the specified thought.\n\nParameters:\n- `thought_id`: The ID of the thought to retrieve relevant thoughts for\n\n### get_thinking_summary\n\nGenerate a comprehensive summary of the entire thinking process.\n\n### clear_thinking_history\n\nClear all recorded thoughts and reset the server state.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "metacognitive",
        "thinking",
        "mind",
        "structured thinking",
        "structured thought",
        "construct mind"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "PublikPrinciple--obsidian-mcp-rest": {
      "owner": "PublikPrinciple",
      "name": "obsidian-mcp-rest",
      "url": "https://github.com/PublikPrinciple/obsidian-mcp-rest",
      "imageUrl": "/freedevtools/mcp/pfp/PublikPrinciple.webp",
      "description": "Access Obsidian vault contents via a local REST API, enabling interactions with notes, content management, and search capabilities.",
      "stars": 57,
      "forks": 12,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T22:32:02Z",
      "readme_content": "# Obsidian MCP REST Server\n\nAn MCP (Model Context Protocol) server implementation that provides access to Obsidian vaults through a local REST API. This server allows AI assistants to interact with Obsidian notes and manage vault content through a standardized interface.\n\n## Features\n\n- Access Obsidian vault contents through MCP\n- Read and write notes\n- List vault contents\n- Search functionality\n- Secure local REST API integration\n- Compatible with Claude Desktop and other AI assistants\n\n## Prerequisites\n\n- Node.js 16 or higher\n- Obsidian with Local REST API plugin installed and configured\n- An Obsidian vault with Local REST API enabled\n\n## Installation\n\nInstall the package globally:\n\n```bash\nnpm install -g PublikPrinciple/obsidian-mcp-rest\n```\n\nOr if you prefer using a specific version/branch:\n\n```bash\nnpm install -g PublikPrinciple/obsidian-mcp-rest#main\n```\n\n## Configuration\n\n1. First, configure Obsidian Local REST API plugin:\n   - Install the Local REST API plugin in Obsidian\n   - Configure the API port (default: 27123)\n   - Generate and save an API key\n\n2. Create a configuration file `config.json`:\n\n```json\n{\n  \"obsidian\": {\n    \"apiKey\": \"your-api-key-here\",\n    \"port\": 27123,\n    \"host\": \"localhost\"\n  },\n  \"server\": {\n    \"name\": \"obsidian-mcp\",\n    \"version\": \"1.0.0\"\n  }\n}\n```\n\n## Usage\n\n1. Start the server:\n```bash\nobsidian-mcp-rest --config path/to/config.json\n```\n\n2. The server will start and listen for MCP requests via stdin/stdout.\n\n### Using with Claude Desktop\n\n1. Configure Claude Desktop to use this MCP server:\n   - Open Claude Desktop settings\n   - Navigate to the MCP section\n   - Add new server configuration:\n     ```json\n     {\n       \"name\": \"obsidian-mcp\",\n       \"command\": \"obsidian-mcp-rest\",\n       \"args\": [\"--config\", \"path/to/config.json\"]\n     }\n     ```\n\n2. Claude can now access your Obsidian vault through commands like:\n   ```\n   Read note \"Projects/MyProject.md\"\n   List all notes in \"Projects\" folder\n   Search for notes containing \"typescript\"\n   ```\n\n## Available Tools\n\n- `listNotes`: List all notes in the vault or a specific folder\n- `readNote`: Read the contents of a specific note\n- `writeNote`: Create or update a note\n- `searchNotes`: Search for notes using a query string\n- `getMetadata`: Get metadata for a specific note\n\n## Security\n\n- The server only runs locally and communicates through stdin/stdout\n- All requests to Obsidian REST API are authenticated with your API key\n- No external network access is required\n- Data remains local to your machine\n\n## Development\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/PublikPrinciple/obsidian-mcp-rest.git\ncd obsidian-mcp-rest\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the project:\n```bash\nnpm run build\n```\n\n4. Run tests:\n```bash\nnpm test\n```\n\n## Troubleshooting\n\n### Installation Issues\n\nIf you encounter any installation issues, try these alternatives:\n\n1. Clone and install locally:\n```bash\ngit clone https://github.com/PublikPrinciple/obsidian-mcp-rest.git\ncd obsidian-mcp-rest\nnpm install\nnpm run build\nnpm install -g .\n```\n\n2. If you see TypeScript-related errors, ensure TypeScript is installed globally:\n```bash\nnpm install -g typescript\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request. For major changes, please open an issue first to discuss what you would like to change.\n\n## License\n\nMIT License - see LICENSE file for details",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "vault",
        "obsidian",
        "publikprinciple",
        "obsidian vault",
        "publikprinciple obsidian",
        "access obsidian"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Rish-it--Notes-MCP": {
      "owner": "Rish-it",
      "name": "Notes-MCP",
      "url": "https://github.com/Rish-it/Notes-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/Rish-it.webp",
      "description": "Enable interaction with Apple Notes through natural language commands, allowing users to create, update, delete, and search for notes. Automatically manages trip planning requests by generating detailed notes based on user input.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-24T04:07:30Z",
      "readme_content": "# NotesY - Apple Notes Integration for Claude\n\nA Claude MCP integration that allows seamless interaction with Apple Notes through natural language.\n\n## Features\n\n* Create notes with content and titles\n* Update existing notes with new content\n* Delete notes by title\n* Search for notes containing specific text\n* Automatically detect trip planning requests and create notes\n\n## Installation\n\n1. Clone and build the project:\n```bash\ngit clone https://github.com/yourusername/NotesY.git\ncd NotesY\nnpm install\nnpm run build\n```\n\n2. Add to Claude's configuration (usually at `~/Library/Application Support/Claude/claude_desktop_config.json`):\n```json\n{\n  \"mcpServers\": {\n    \"NotesY\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/NotesY/dist/index.js\"]\n    }\n  }\n}\n```\n\n## Usage\n\n### With Claude Desktop\n\nSimply talk to Claude Desktop and ask it to:\n\n```\nCreate a note titled 'shopping list' with items: milk, eggs, bread\n\nAdd meeting notes to my 'work' note\n\nDelete my 'old tasks' note\n\nSearch for notes with 'project'\n```\n\nYou can also just give Claude long text and it will create a note with appropriate title:\n\n```\nCreate a comprehensive trip plan for Krabi, Thailand, including recommended duration, best time to visit, must-see attractions, accommodation options, transportation tips, food recommendations, and budget considerations.\n```\n\n### Using the CLI\n\nFor testing without Claude, you can use the built-in CLI:\n\n```bash\nnpm run cli\n```\n\nThis lets you enter natural language commands directly and see the results.\n\n## Local Development\n\n```bash\ngit clone https://github.com/yourusername/NotesY.git\ncd NotesY\nnpm install\nnpm run build\nnpm run dev\n```\n\nTo run the Express server for API testing:\n```bash\nSTART_EXPRESS_SERVER=true npm run dev\n```\n\n## How it Works\n\nNotesY uses AppleScript to interact with the macOS Notes app, providing natural language understanding through an MCP integration with Claude Desktop.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "rish",
        "notes mcp",
        "rish notes",
        "notes based"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Rupeebw--mcp-image-reader": {
      "owner": "Rupeebw",
      "name": "mcp-image-reader",
      "url": "https://github.com/Rupeebw/mcp-image-reader",
      "imageUrl": "/freedevtools/mcp/pfp/Rupeebw.webp",
      "description": "Manage and summarize text notes efficiently with this MCP server, which supports creating, accessing, and summarizing notes through unique URIs. It integrates note management and summarization capabilities for enhanced workflows with LLMs.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-17T17:20:57Z",
      "readme_content": "# image-reader MCP Server\n\nimage reader\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"image-reader\": {\n      \"command\": \"/path/to/image-reader/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "workflows",
        "note management",
        "summarizing notes",
        "notes efficiently"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Rwb3n--obsidian-mcp": {
      "owner": "Rwb3n",
      "name": "obsidian-mcp",
      "url": "https://github.com/Rwb3n/obsidian-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Rwb3n.webp",
      "description": "Interact with your Obsidian vault to read, write, and manage notes and metadata. Enhance the note-taking experience through various powerful tools designed for seamless integration with Obsidian.",
      "stars": 28,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-01T09:11:10Z",
      "readme_content": "![Obsidian MCP Server Banner](OMCP.png)\n\n# Obsidian MCP Tool Server\n\n[![Security Scan (Trivy + Bandit)](https://github.com/rivassec/obsidian-mcp/actions/workflows/trivy-scan.yml/badge.svg)](https://github.com/rivassec/obsidian-mcp/actions/workflows/trivy-scan.yml)\n[![Bandit](https://img.shields.io/badge/Bandit-passed-brightgreen?logo=python&logoColor=white)](https://bandit.readthedocs.io)\n[![Trivy](https://img.shields.io/badge/Trivy-passed-blue?logo=datadog&logoColor=white)](https://github.com/aquasecurity/trivy)\n\nThis project provides a Model Context Protocol (MCP) server that exposes tools for interacting with an Obsidian vault.\n\n## Table of Contents\n\n- [Features](#features)\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Running Manually (for Testing/Debugging)](#running-manually-for-testingdebugging)\n- [Client Configuration (Example: Claude Desktop)](#client-configuration-example-claude-desktop)\n- [Available MCP Tools](#available-mcp-tools)\n- [Roadmap](#roadmap)\n- [Frequently Asked Questions (FAQ)](#frequently-asked-questions-faq)\n- [Contributions Welcome!](#contributions-welcome)\n\n## Features\n\nAllows MCP clients (like AI assistants) to:\n- Read and write notes\n- Manage note metadata (frontmatter)\n- List notes and folders\n- Search notes by content or metadata\n- Manage daily notes\n- Get outgoing links, backlinks, and tags\n\n## Installation\n\n1.  **Clone the repository** (if you haven't already):\n    ```bash\n    # git clone <repository-url>\n    # cd OMCP \n    ```\n\n2.  **Navigate to the project directory**:\n    ```bash\n    cd /path/to/your/OMCP \n    ```\n\n3.  **Create a Python virtual environment** (recommended to avoid dependency conflicts):\n    ```bash\n    python -m venv .venv \n    ```\n\n4.  **Activate the virtual environment**:\n    *   On Windows PowerShell:\n        ```powershell\n        .venv\\Scripts\\Activate.ps1 \n        ```\n    *   On Linux/macOS:\n        ```bash\n        source .venv/bin/activate \n        ```\n    (Your terminal prompt should now show `(.venv)` at the beginning)\n\n5.  **Install the package** and its dependencies:\n    ```bash\n    pip install . \n    ```\n\n## Configuration\n\nThis server is configured using environment variables, which can be conveniently managed using a `.env` file in the project root.\n\n1.  **Copy the example file:**\n    ```bash\n    # From the project root directory (OMCP/)\n    cp .env.example .env \n    ```\n    (On Windows, you might use `copy .env.example .env`)\n\n2.  **Edit the `.env` file:**\n    Open the newly created `.env` file in a text editor.\n\n3.  **Set `OMCP_VAULT_PATH`:** This is the only **required** variable. Update it with the **absolute path** to your Obsidian vault. Use forward slashes (`/`) for paths, even on Windows.\n    ```dotenv\n    OMCP_VAULT_PATH=\"/path/to/your/Obsidian/Vault\" \n    ```\n\n4.  **Review Optional Settings:** Adjust the other `OMCP_` variables for daily notes, server port, or backup directory if needed. Read the comments in the file for explanations.\n\n*(Alternatively, instead of using a `.env` file, you can set these as actual system environment variables. The server will prioritize system environment variables over the `.env` file if both are set.)*\n\n## Running Manually (for Testing/Debugging)\n\nWhile client applications like Claude Desktop will launch the server automatically using the configuration described below, you can also run the server manually from your terminal for direct testing or debugging.\n\n1.  **Ensure Configuration is Done:** Make sure you have created and configured your `.env` file as described in the Configuration section.\n2.  **Activate Virtual Environment:**\n    ```powershell\n    # If not already active\n    .venv\\Scripts\\Activate.ps1 \n    ```\n    *(Use `source .venv/bin/activate` on Linux/macOS)*\n3.  **Run the server script:**\n    ```bash\n    (.venv) ...> python obsidian_mcp_server/main.py \n    ```\n\nThe server will start and print the address it's listening on (e.g., `http://127.0.0.1:8001`). You would typically press `Ctrl+C` to stop it when finished testing.\n\n**Remember:** If you intend to use this server with Claude Desktop or a similar launcher, you should **not** run it manually like this. Configure the client application instead (see next section), and it will handle starting and stopping the server process.\n\n## Client Configuration (Example: Claude Desktop)\n\nMany MCP clients (like Claude Desktop) can launch server processes directly. To configure such a client, you typically need to edit its JSON configuration file (e.g., `claude_desktop_config.json` on macOS/Linux, find the equivalent path on Windows under `AppData`).\n\n⚠️ **Important JSON Formatting Rules:**\n1. JSON files **do not** support comments (remove any `//` or `/* */` comments)\n2. All strings must be properly quoted with double quotes (`\"`)\n3. Windows paths must use escaped backslashes (`\\\\`)\n4. Use a JSON validator (like [jsonlint.com](https://jsonlint.com/)) to check your syntax\n\nHere's an example entry to add under the `mcpServers` key in the client's JSON configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"obsidian_vault\": {\n      \"command\": \"C:\\\\path\\\\to\\\\your\\\\project\\\\OMCP\\\\.venv\\\\Scripts\\\\python.exe\",\n      \"args\": [\"C:\\\\path\\\\to\\\\your\\\\project\\\\OMCP\\\\obsidian_mcp_server\\\\main.py\"],\n      \"env\": {\n        \"OMCP_VAULT_PATH\": \"C:/path/to/your/Obsidian/Vault\",\n        \"OMCP_DAILY_NOTE_LOCATION\": \"Journal/Daily\"\n      }\n    }\n  }\n}\n```\n\n**Key Points:**\n\n*   Replace the paths with the **absolute paths** relevant to your system\n*   For Windows paths in the `command` and `args` fields:\n    *   Use double backslashes (`\\\\`) for path separators\n    *   Include the `.exe` extension for the Python executable\n*   For Windows paths in the `env` block:\n    *   Use forward slashes (`/`) for better compatibility\n    *   Do not include the `.exe` extension\n*   The `command` path **must** point to the `python.exe` executable *inside* the `.venv` you created\n*   The `args` path **must** point to the `main.py` file within the `obsidian_mcp_server` subfolder\n*   Using the `env` block is the most reliable way to ensure the server finds your vault path\n*   Remember to **restart the client application** after modifying its JSON configuration\n\n**Common Pitfalls to Avoid:**\n1. Don't use single backslashes in Windows paths\n2. Don't include comments in the JSON\n3. Don't forget to escape backslashes in Windows paths\n4. Don't mix forward and backslashes in the same path\n5. Don't forget to properly quote all strings\n\n## Available MCP Tools\n\n*   `list_folders`\n*   `list_notes`\n*   `get_note_content`\n*   `get_note_metadata`\n*   `get_outgoing_links`\n*   `get_backlinks`\n*   `get_all_tags`\n*   `search_notes_content`\n*   `search_notes_metadata`\n*   `search_folders`\n*   `create_note`\n*   `edit_note`\n*   `append_to_note`\n*   `update_note_metadata`\n*   `delete_note`\n*   `get_daily_note_path`\n*   `create_daily_note`\n*   `append_to_daily_note`\n\n## Roadmap\n\nFor a detailed, phased implementation plan including error handling considerations, please see the [ROADMAP.md](ROADMAP.md) file.\n\nThis project is actively developed. Here's a look at planned features:\n\n**v1.x (Near Term)**\n\n*   **Template-Based Note Creation:**\n    *   Configure a template directory (`OMCP_TEMPLATE_DIR`).\n    *   Implement `create_note_from_template` tool (using template name, target path, optional metadata).\n    *   Add tests for template creation.\n*   **Folder Creation:**\n    *   Implement `create_folder` utility function.\n    *   Implement `create_folder` MCP tool.\n    *   Add tests for folder creation.\n\n**v1.y (Mid Term / Future Enhancements)**\n\n*   Variable substitution in templates (e.g., `{{DATE}}`).\n*   `list_templates` tool.\n*   Advanced note update tools (e.g., `append_to_note_by_metadata`).\n*   `list_vault_structure` tool for comprehensive vault hierarchy view.\n*   Comprehensive testing review and expansion.\n\n**v2.x+ (Potential Ideas / Longer Term)**\n\n*   **Organization Tools:**\n    *   `move_item(source, destination)` (Initial version might not update links).\n    *   `rename_item(path, new_name)` (Initial version might not update links).\n*   **Content Manipulation Tools:**\n    *   `replace_text_in_note(path, old, new, count)`.\n    *   `prepend_to_note(path, content)`.\n    *   `append_to_section(path, heading, content)` (Requires reliable heading parsing).\n*   **Querying Tools:**\n    *   `get_local_graph(path)` (Combine outgoing/backlinks).\n    *   `search_notes_by_metadata_field(key, value)`.\n*   **Plugin Integration Tools:**\n    *   **Dataview Integration:**\n        *   `execute_dataview_query(query_type, query)` - Run Dataview queries and get structured results\n        *   `search_by_dataview_field(field, value)` - Search notes by Dataview fields\n    *   **Task Management:**\n        *   `query_tasks(status, due_date, tags)` - Search and filter tasks across vault\n    *   **Kanban Integration:**\n        *   `get_kanban_data(board_path)` - Get structured kanban board data\n    *   **Calendar Integration:**\n        *   `get_calendar_events(start_date, end_date)` - Query calendar events and tasks\n\n## Frequently Asked Questions (FAQ)\n\n### Configuration Issues\n\n**Q: My server can't find my vault. What's wrong?**\nA: This is usually due to incorrect path configuration. Check:\n1. The `OMCP_VAULT_PATH` in your `.env` file uses forward slashes (`/`) even on Windows\n2. The path is absolute (starts from root)\n3. The path doesn't end with a trailing slash\n4. The vault directory exists and is accessible\n\n**Q: Why am I getting permission errors?**\nA: This typically happens when:\n1. The vault path points to a restricted directory\n2. The Python process doesn't have read/write permissions\n3. The vault is in a cloud-synced folder (like OneDrive) that's currently syncing\n\nTry:\n1. Moving your vault to local directory\n2. Running the server with elevated permissions\n3. Checking your antivirus isn't blocking access\n\n### Client Connection Issues\n\n**Q: My AI client can't connect to the server. What should I check?**\nA: Verify these common issues:\n1. The server is actually running (check terminal output)\n2. The port in your client config matches the server's port\n3. The Python path in your client config points to the correct virtual environment\n4. All environment variables are properly set in the client config\n\n**Q: Why do I get \"Connection refused\" errors?**\nA: This usually means:\n1. The server isn't running\n2. The port is already in use\n3. Firewall is blocking the connection\n\nTry:\n1. Check if the server is running: `netstat -ano | findstr :8001` (Windows)\n2. Try a different port by setting `OMCP_SERVER_PORT` in your `.env`\n3. Temporarily disable firewall to test\n\n**Q: I get \"[error] [obsidian_vault] Unexpected token 'S', \"Starting O\"... is not valid JSON\". What's wrong?**\nA: This error occurs when the client's JSON configuration file is malformed. Common causes:\n1. Missing or extra commas in the JSON\n2. Unescaped backslashes in Windows paths\n3. Comments in the JSON (JSON doesn't support comments)\n\nCheck your client config file (e.g., `claude_desktop_config.json`):\n1. Use a JSON validator (like [jsonlint.com](https://jsonlint.com/)) to check syntax\n2. For Windows paths, escape backslashes: `\"C:\\\\path\\\\to\\\\file\"`\n3. Remove any comments (// or /* */)\n4. Ensure all strings are properly quoted\n5. Check that all brackets and braces are properly closed\n\nExample of correct Windows path formatting:\n```json\n{\n  \"mcpServers\": {\n    \"obsidian_vault\": {\n      \"command\": \"C:\\\\path\\\\to\\\\your\\\\project\\\\OMCP\\\\.venv\\\\Scripts\\\\python.exe\",\n      \"args\": [\"C:\\\\path\\\\to\\\\your\\\\project\\\\OMCP\\\\obsidian_mcp_server\\\\main.py\"]\n    }\n  }\n}\n```\n\n**Q: I get a timeout error and \"Server disconnected\" message. What's happening?**\nA: This error pattern (initialization succeeds, then times out after 60 seconds) usually means:\n1. The server is already running in another process\n2. The port is already in use by another application\n3. The server process is being terminated unexpectedly\n\nTry these steps in order:\n\n1. **Check for running server processes:**\n   ```powershell\n   # On Windows\n   netstat -ano | findstr :8001\n   # Look for the PID and then:\n   taskkill /F /PID <PID>\n   ```\n   ```bash\n   # On Linux/macOS\n   lsof -i :8001\n   # Look for the PID and then:\n   kill -9 <PID>\n   ```\n\n2. **Check for other applications using the port:**\n   - Close any other applications that might use port 8001\n   - This includes other MCP servers, development servers, or any web applications\n   - If you're not sure, try changing the port in your `.env`:\n     ```dotenv\n     OMCP_SERVER_PORT=8002\n     ```\n\n3. **Verify server process:**\n   - Open Task Manager (Windows) or Activity Monitor (macOS)\n   - Look for any Python processes related to the MCP server\n   - End any suspicious processes\n\n4. **Check system resources:**\n   - Ensure you have enough memory and CPU available\n   - Check if any antivirus or security software is blocking the process\n   - Verify your Python environment has proper permissions\n\n5. **Reset everything:**\n   - Stop the client application\n   - Kill any remaining server processes\n   - Delete the `.env` file and create a new one from `.env.example`\n   - Restart your computer (if other steps don't work)\n   - Start fresh with the client application\n\nIf the issue persists after trying all these steps, please share:\n1. The complete error log\n2. The output of `netstat -ano | findstr :8001` (Windows) or `lsof -i :8001` (Linux/macOS)\n3. Any error messages from your system's event logs\n\n**Q: The server disconnects immediately with \"Server transport closed unexpectedly... process exiting early\". What's wrong?**\nA: This error means the Python server process crashed almost immediately after being launched by the client. It's not a timeout; the server script itself failed to run or stay running.\n\nCommon Causes:\n1.  **Incorrect Paths in Client JSON:**\n    *   `command` doesn't point to the correct `python.exe` *inside* the `.venv`.\n    *   `args` doesn't point to the correct `obsidian_mcp_server/main.py` script.\n    *   Incorrect path separators or missing backslash escapes (`\\\\`) on Windows.\n2.  **Missing Dependencies:**\n    *   Required packages from `requirements.txt` are not installed in the `.venv`.\n    *   The client is launching Python without properly activating the virtual environment.\n3.  **Syntax Errors:** A recent code change introduced a Python syntax error.\n4.  **Critical Configuration/Permission Error:**\n    *   Error reading the `.env` file at startup.\n    *   Invalid or inaccessible `OMCP_VAULT_PATH`.\n    *   Python process lacks permissions to run or access files.\n5.  **Early Unhandled Exception:** An error occurs during initial setup before the server starts listening.\n\nTroubleshooting Steps:\n1.  **Verify Client JSON Paths:** Double-check the absolute paths for `command` and `args` in your client's JSON config. Use escaped backslashes (`\\\\`) for Windows paths.\n2.  **Test Manually (Crucial Step):**\n    *   Activate the virtual environment in your terminal:\n        ```powershell\n        # On Windows\n        .\\.venv\\Scripts\\activate\n        ```\n        ```bash\n        # On Linux/macOS\n        source .venv/bin/activate\n        ```\n    *   Run the server directly:\n        ```bash\n        python obsidian_mcp_server/main.py\n        ```\n    *   Look closely for any error messages printed directly in the terminal. This bypasses the client and often reveals the root cause (like `ImportError`, `SyntaxError`, `FileNotFoundError`).\n3.  **Check Dependencies:** With the venv activated, run `pip check` and `pip install -r requirements.txt`.\n4.  **Validate `.env` and Vault Path:** Ensure `.env` exists, is readable, and `OMCP_VAULT_PATH` is correct (use forward slashes `/`).\n5.  **Review Recent Code Changes:** Check for syntax errors or issues in recently edited Python files.\n\n### Note Operations\n\n**Q: Why can't I create/edit notes in certain folders?**\nA: This could be due to:\n1. Path security restrictions (trying to write outside vault)\n2. Folder permissions\n3. File locks from other processes\n\nTry:\n1. Using relative paths within your vault\n2. Checking folder permissions\n3. Closing other programs that might have the files open\n\n**Q: Why are my note updates not being saved?**\nA: Common causes:\n1. The note path is incorrect\n2. The content format is invalid\n3. Backup creation failed\n\nCheck:\n1. The note path exists and is accessible\n2. The content is valid markdown\n3. The backup directory has write permissions\n\n### Daily Notes\n\n**Q: Why aren't my daily notes being created in the right location?**\nA: Verify:\n1. `OMCP_DAILY_NOTE_LOCATION` is set correctly in `.env`\n2. The path uses forward slashes\n3. The target folder exists\n4. The date format matches your vault's settings\n\n### General Troubleshooting\n\n**Q: How do I check if the server is working correctly?**\nA: Run the test client:\n```bash\npython test_client.py\n```\nThis will perform a series of operations and report any issues.\n\n**Q: Where can I find error logs?**\nA: Check:\n1. The terminal where the server is running\n2. The backup directory for failed operations\n3. The system event logs for permission issues\n\n**Q: How do I reset everything to start fresh?**\nA: Try these steps:\n1. Stop the server\n2. Delete the `.env` file\n3. Create a new `.env` from `.env.example`\n4. Restart the server\n\n**Contributions Welcome!**\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "obsidian",
        "notes",
        "rwb3n obsidian",
        "obsidian mcp",
        "integration obsidian"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "RyoJerryYu--mcp-server-memos-py": {
      "owner": "RyoJerryYu",
      "name": "mcp-server-memos-py",
      "url": "https://github.com/RyoJerryYu/mcp-server-memos-py",
      "imageUrl": "/freedevtools/mcp/pfp/RyoJerryYu.webp",
      "description": "Interact with a memo hub to search, create, and manage memos with customizable visibility and secure authentication. Enhance LLM applications by integrating memo functionalities seamlessly.",
      "stars": 15,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-03T22:31:19Z",
      "readme_content": "# MCP Server Memos 📝\n\n[![PyPI version](https://img.shields.io/pypi/v/mcp-server-memos.svg)](https://pypi.org/project/mcp-server-memos/)\n[![Python Version](https://img.shields.io/pypi/pyversions/mcp-server-memos.svg)](https://pypi.org/project/mcp-server-memos/)\n[![License](https://img.shields.io/github/license/RyoJerryYu/mcp-server-memos-py.svg)](https://github.com/RyoJerryYu/mcp-server-memos-py/blob/master/LICENSE)\n[![smithery badge](https://smithery.ai/badge/@RyoJerryYu/mcp-server-memos-py)](https://smithery.ai/server/@RyoJerryYu/mcp-server-memos-py)\n\nA Python package that provides LLM models with the ability to interact with [Memos](https://github.com/usememos/memos) server through the [MCP (Model Context Protocol)](https://modelcontextprotocol.io/introduction) interface.\n\n## 🚀 Features\n\n- 🔍 Search memos with keywords\n- ✨ Create new memos with customizable visibility\n- 📖 Retrieve memo content by ID\n- 🏷️ List and manage memo tags\n- 🔐 Secure authentication using access tokens\n\n## 🛠️ Usage\n\nYou can include this package in your config file as bellow, just as you use other Python MCP plugins.\n\n```jsonc\n{\n  ...,\n  \"mcpServers\": {\n    \"fetch\": { // other mcp servers\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-fetch\"]\n    },\n    \"memos\": { // add this to your config\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--prerelease=allow\",\n        \"mcp-server-memos\",\n        \"--host\",\n        \"localhost\",\n        \"--port\",\n        \"5230\",\n        \"--token\",\n        \"your-access-token-here\"\n      ]\n    }\n  }\n}\n```\n\n<details>\n<summary>Other ways to use this package</summary>\n\n### 📦 Installation\n\n#### Installing via Smithery\n\nTo install mcp-server-memos-py for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@RyoJerryYu/mcp-server-memos-py):\n\n```bash\nnpx -y @smithery/cli install @RyoJerryYu/mcp-server-memos-py --client claude\n```\n\n#### Installing Manually\n```bash\npip install mcp-server-memos\n```\n\n### Command Line\n\n```bash\nmcp-server-memos --host localhost --port 8080 --token YOUR_ACCESS_TOKEN\n```\n\n### As a Library\n\n```python\nfrom mcp_server_memos import Config, serve_stdio\n\nconfig = Config(\n    host=\"localhost\",\n    port=8080,\n    token=\"YOUR_ACCESS_TOKEN\"\n)\n\nawait serve_stdio(config=config)\n```\n\n</details>\n\n## 🔧 Configuration\n\n| Parameter | Description | Default |\n|-----------|-------------|---------|\n| `host` | Memos server hostname | `localhost` |\n| `port` | Memos server port | `8080` |\n| `token` | Access token for authentication | `\"\"` |\n\n## 🤝 Available Tools\n\nThis MCP server provides the following tools for interacting with Memos:\n\n| Tool Name | Description | Parameters |\n|-----------|-------------|------------|\n| `list_memo_tags` | List all existing memo tags | - `parent`: The parent who owns the tags (format: memos/{id}, default: \"memos/-\")<br>- `visibility`: Tag visibility (PUBLIC/PROTECTED/PRIVATE, default: PRIVATE) |\n| `search_memo` | Search for memos using keywords | - `key_word`: The keywords to search for in memo content |\n| `create_memo` | Create a new memo | - `content`: The content of the memo<br>- `visibility`: Memo visibility (PUBLIC/PROTECTED/PRIVATE, default: PRIVATE) |\n| `get_memo` | Get a specific memo by ID | - `name`: The name/ID of the memo (format: memos/{id}) |\n\n## 🤝 Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- [Memos](https://github.com/usememos/memos) - A lightweight, self-hosted memo hub\n- [MCP (Model Context Protocol)](https://modelcontextprotocol.io/introduction) - Protocol for LLM model applications\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "memos",
        "memo",
        "llm",
        "server memos",
        "memos py",
        "memo hub"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Siddhant-K-code--mcp-apple-notes": {
      "owner": "Siddhant-K-code",
      "name": "mcp-apple-notes",
      "url": "https://github.com/Siddhant-K-code/mcp-apple-notes",
      "imageUrl": "/freedevtools/mcp/pfp/Siddhant-K-code.webp",
      "description": "Interact with Apple Notes using natural language to create, search, and retrieve notes. Seamlessly integrates with iCloud for easy access to note content.",
      "stars": 11,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-12T15:22:37Z",
      "readme_content": "# 📝 Apple Notes MCP Server\n\n**Apple Notes MCP Server** is a Model Context Protocol server that enables seamless interaction with Apple Notes through natural language. Create, search, and retrieve notes effortlessly using Claude or other AI assistants! 🎉\n\n<a href=\"https://glama.ai/mcp/servers/ayr26szokg\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/ayr26szokg/badge\" alt=\"Apple Notes Server MCP server\" />\n</a>\n\n## 🎯 Features\n\n- **Create Notes:** Quickly create new notes with titles, content, and tags 📝\n- **Search Notes:** Find notes using powerful search capabilities 🔍\n- **Retrieve Content:** Get the full content of any note by its title 📖\n- **iCloud Integration:** Works directly with your iCloud Notes account ☁️\n\n## 🚀 Getting Started\n\n### Prerequisites\n\n1. macOS with Apple Notes app configured\n2. Node.js (version 20.0.0 or higher)\n3. Yarn package manager\n\n### Installation\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/Siddhant-K-code/mcp-apple-notes.git\n   cd mcp-apple-notes\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   yarn install\n   ```\n\n3. Build the project:\n\n   ```bash\n   yarn build\n   ```\n\n4. Start the server:\n   ```bash\n   yarn start\n   ```\n\n5. Configure Claude Desktop. Update your `claude_desktop_config.json` with:\n   ```json\n   {\n     \"mcpServers\": {\n       \"apple-notes\": {\n         \"command\": \"yarn\",\n         \"args\": [\"start\"],\n         \"cwd\": \"/path/to/mcp-apple-notes\"\n       }\n     }\n   }\n   ```\n\n   > **Note:** Replace `/path/to/mcp-apple-notes` with the actual path to your cloned repository.\n   > You may need to authorize the script to access Apple Notes when first running commands.\n\n### MCP Server Initialization\n\nWhen the server starts successfully, you'll see:\n```\nStarting Apple Notes MCP server.\n```\n\nThe server is now ready to handle your note operations! 🎉\n\n## 🛠️ Usage\n\n### Available Tools\n\n1. **Create Note**\n\n   - Description: Creates a new note in Apple Notes\n   - Parameters:\n     ```typescript\n     {\n       title: string;      // The title of the note\n       content: string;    // The content of the note\n       tags?: string[];    // Optional tags for the note\n     }\n     ```\n   - Example Response:\n     ```\n     Note created: My New Note\n     ```\n\n2. **Search Notes**\n\n   - Description: Search for notes by title\n   - Parameters:\n     ```typescript\n     {\n       query: string; // The search query\n     }\n     ```\n   - Example Response:\n     ```\n     Meeting Notes\n     Shopping List\n     Ideas for Project\n     ```\n\n3. **Get Note Content**\n   - Description: Retrieve the full content of a specific note\n   - Parameters:\n     ```typescript\n     {\n       title: string; // The exact title of the note\n     }\n     ```\n   - Example Response:\n     ```\n     [Full content of the note]\n     ```\n\n## 📚 Example Use Cases\n\n### 1. Quick Note Taking\n\nCreate notes during meetings or brainstorming sessions:\n\n```ts\n{\n\"title\": \"Team Meeting Notes\",\n\"content\": \"Discussion points:\\n1. Project timeline\\n2. Resource allocation\",\n\"tags\": [\"meetings\", \"work\"]\n}\n```\n\n### 2. Information Retrieval\n\nSearch for specific notes when you need them:\n\n```ts\n{\n\"query\": \"meeting\"\n}\n```\n\n### 3. Content Review\n\nGet the full content of a specific note:\n\n```ts\n{\n\"title\": \"Team Meeting Notes\"\n}\n```\n\n## ⚡ Tips for Best Results\n\n- Ensure your Apple Notes app is properly configured with iCloud\n- Use descriptive titles for better searchability\n- Include relevant tags when creating notes for better organization\n\n## 🔧 Development\n\nThe project uses TypeScript and follows modern ES modules patterns. Key files:\n\n- `src/index.ts`: Main server implementation\n- `src/services/appleNotesManager.ts`: Core note management functionality\n- `src/utils/applescript.ts`: AppleScript integration utilities\n\n### Development Container\n\nA development container configuration is provided for VS Code users, offering:\n\n- TypeScript Node.js environment\n- Prettier for code formatting\n- Automatic dependency installation\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n---\n\nMade with ❤️ for Apple Notes users",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "icloud",
        "apple notes",
        "notes using",
        "note content"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Sjotie--notionMCP": {
      "owner": "Sjotie",
      "name": "notionMCP",
      "url": "https://github.com/Sjotie/notionMCP",
      "imageUrl": "/freedevtools/mcp/pfp/Sjotie.webp",
      "description": "Connect AI assistants to Notion workspaces for interacting with databases, pages, and blocks to streamline content management and retrieval.",
      "stars": 11,
      "forks": 6,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-14T15:43:28Z",
      "readme_content": "# Notion MCP Server\n\nA Model Context Protocol (MCP) server that connects Claude and other AI assistants to your Notion workspace. This integration allows AI assistants to interact with your Notion databases, pages, and blocks.\n\n## What is this?\n\nThis tool acts as a bridge between AI assistants (like Claude) and your Notion workspace. It allows the AI to:\n- View and search your Notion databases\n- Create and update pages\n- Manage content blocks\n- And much more!\n\n## Step-by-Step Setup Guide\n\n### Prerequisites\n- [Node.js](https://nodejs.org/) (version 14 or higher)\n- A Notion account\n- Claude Desktop app (if using with Claude)\n\n### 1. Getting Your Notion API Key\n\n1. Go to [https://www.notion.so/my-integrations](https://www.notion.so/my-integrations)\n2. Click the blue **\"+ New integration\"** button\n3. Fill in the details:\n   - **Name**: Choose a name like \"Claude Assistant\" or \"AI Helper\"\n   - **Logo**: Optional\n   - **Associated workspace**: Select your Notion workspace\n4. Click **\"Submit\"**\n5. On the next page, find the **\"Internal Integration Token\"** section\n6. Click **\"Show\"** and copy the token (it starts with `secret_`)\n\n## 2. Setting Up This Server\n\n### Download the Repository\n\n**Option A: Download as ZIP (Recommended for beginners)**\n1. Go to the GitHub repository: https://github.com/Sjotie/notionMCP/\n2. Click the green \"Code\" button at the top right\n3. Select \"Download ZIP\"\n4. Once downloaded, extract the ZIP file to a location on your computer\n   - Windows: Right-click the ZIP file and select \"Extract All\"\n   - Mac: Double-click the ZIP file to extract\n\n**Option B: Clone with Git (For users familiar with Git)**\n1. Open a command prompt or terminal\n   - Windows: Press `Win+R`, type `cmd`, and press Enter\n   - Mac: Open Terminal from Applications > Utilities\n2. Navigate to where you want to store the repository\n   ```\n   cd path/to/desired/location\n   ```\n3. Clone the repository\n   ```\n   git clone https://github.com/Sjotie/notionMCP/\n   ```\n\n### Navigate to the Project Directory\n\nAfter downloading or cloning, you need to navigate to the project folder using the `cd` (change directory) command:\n\n**If you downloaded the ZIP (Option A):**\n1. Open a command prompt or terminal\n2. Use the `cd` command to navigate to where you extracted the ZIP file:\n   ```\n   cd path/to/extracted/folder/notionMCP\n   ```\n   \n   For example:\n   - On Windows: `cd C:\\Users\\YourName\\Downloads\\notionMCP`\n   - On Mac: `cd /Users/YourName/Downloads/notionMCP`\n\n**If you cloned with Git (Option B):**\n1. The repository should have been cloned into a folder named \"notionMCP\"\n2. If you're still in the same terminal window after cloning, simply type:\n   ```\n   cd notionMCP\n   ```\n\n**How to know you're in the right directory:**\n- After using the `cd` command, you can check your current location:\n  - On Windows: Type `dir` and press Enter - you should see files like `server.js`\n  - On Mac: Type `ls` and press Enter - you should see files like `server.js`\n\n### Install Dependencies\n\nOnce you're in the notionMCP directory, install the required dependencies:\n\n```\nnpm install\n```\n\nThis will install all the necessary Node.js packages. You should see a progress bar and eventually a message indicating the installation is finished. It might say something along the lines of \"X Packages are looking for funding\" - this is completely normal and means it worked.\n\n### 3. Connecting to Notion Pages\n\nFor security, Notion requires you to explicitly grant access to each page or database:\n\n1. Open Notion and navigate to a page or database you want the AI to access\n2. Click the **\"•••\"** (three dots) in the top-right corner\n3. Select **\"Add connections\"**\n4. Find and select the integration you created earlier\n5. Repeat for any other pages or databases you want to make accessible\n\n### 4. Connecting to Claude Desktop\n\n1. Locate your Claude Desktop configuration file:\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n     (Type this path in File Explorer address bar)\n   - Mac: `~/Library/Application Support/Claude/claude_desktop_config.json`\n     (In Finder, press Cmd+Shift+G and paste this path)\n\n2. Open the file in a text editor. If it doesn't exist, create it with the following content:\n   ```json\n   {\n     \"mcpServers\": {\n       \"notion\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"C:\\\\path\\\\to\\\\notion-mcp-server\\\\server.js\"\n         ],\n         \"env\": {\n           \"NOTION_API_KEY\": \"your_notion_api_key_here\"\n         }\n       }\n     }\n   }\n   ```\n\n3. Replace:\n   - `C:\\\\path\\\\to\\\\notion-mcp-server\\\\server.js` with the actual path to the server.js file\n     - Windows: Use double backslashes (\\\\\\\\) in the path\n     - Mac: Use forward slashes (/)\n   - `your_notion_api_key_here` with your Notion API key\n\n4. Save the file and restart Claude Desktop\n\n### 5. Testing the Connection\n\n1. Start a new conversation in Claude\n2. Ask Claude to interact with your Notion workspace, for example:\n   - \"Show me a list of my Notion databases\"\n   - \"Create a new page in my Tasks database with title 'Test Task'\"\n\n## Available Tools\n\nThe server provides these tools to AI assistants:\n\n- **list-databases**: View all accessible databases\n- **query-database**: Get entries from a database\n- **create-page**: Add a new page to a database\n- **update-page**: Modify an existing page\n- **create-database**: Create a new database\n- **update-database**: Modify a database structure\n- **get-page**: View a specific page\n- **get-block-children**: View content blocks\n- **append-block-children**: Add content to a page\n- **update-block**: Edit content blocks\n- **get-block**: View a specific block\n- **search**: Find content across your workspace\n\n## Troubleshooting\n\n### Common Issues:\n\n1. **\"Connection failed\" in Claude**\n   - Make sure the server path in claude_desktop_config.json is correct\n   - Check that your Notion API key is valid\n   - Ensure Node.js is installed\n\n2. **\"Access denied\" when accessing Notion content**\n   - Make sure you've shared the page/database with your integration\n   - Check that your API key has the necessary permissions\n\n3. **Server won't start**\n   - Ensure all dependencies are installed (`npm install`)\n   - Check that the .env file exists with your API key\n\n### Getting Help\n\nIf you encounter issues not covered here, please:\n- Check the console output for error messages\n- Ensure your Notion API key is valid\n- Verify that your integration has access to the pages/databases\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notionmcp",
        "assistants",
        "retrieval",
        "knowledge bases",
        "ai assistants",
        "assistants notion"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Skywalker-Harrison--mcp-soduku": {
      "owner": "Skywalker-Harrison",
      "name": "mcp-soduku",
      "url": "https://github.com/Skywalker-Harrison/mcp-soduku",
      "imageUrl": "/freedevtools/mcp/pfp/Skywalker-Harrison.webp",
      "description": "Store and manage notes with an efficient system that allows adding notes and generating summaries based on customizable detail levels.",
      "stars": 2,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-20T07:49:31Z",
      "readme_content": "# sodukusolver MCP server\n\nA MCP server project\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"sodukusolver\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/harrisonliang/research/fun/soduku\",\n        \"run\",\n        \"sodukusolver\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"sodukusolver\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"sodukusolver\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/harrisonliang/research/fun/soduku run sodukusolver\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "soduku",
        "manage notes",
        "notes generating",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Spritualkb--nuclei-mcp": {
      "owner": "Spritualkb",
      "name": "nuclei-mcp",
      "url": "https://github.com/Spritualkb/nuclei-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Spritualkb.webp",
      "description": "Manage and summarize text notes using a TypeScript-based Model Context Protocol server. Create and access notes through standardized URIs, with tools for generating summaries of stored content.",
      "stars": 2,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-30T10:42:27Z",
      "readme_content": "# nuclei-server MCP Server\n\nA Model Context Protocol server\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n<a href=\"https://glama.ai/mcp/servers/@Spritualkb/nuclei-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@Spritualkb/nuclei-mcp/badge\" alt=\"nuclei-server Server MCP server\" />\n</a>\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"nuclei-server\": {\n      \"command\": \"/path/to/nuclei-server/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "typescript",
        "text notes",
        "notes using",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Tom-Semple--mcp-apple-notes-fixed": {
      "owner": "Tom-Semple",
      "name": "mcp-apple-notes-fixed",
      "url": "https://github.com/Tom-Semple/mcp-apple-notes-fixed",
      "imageUrl": "/freedevtools/mcp/pfp/Tom-Semple.webp",
      "description": "Enables semantic and full-text search over Apple Notes, allowing AI assistants to reference notes during conversations. Supports local execution to ensure data privacy and security without the need for external APIs.",
      "stars": 8,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-07-08T19:45:05Z",
      "readme_content": "# MCP Apple Notes\n\n![MCP Apple Notes](./images/logo.png)\n\nA [Model Context Protocol (MCP)](https://www.anthropic.com/news/model-context-protocol) server that enables semantic search and RAG (Retrieval Augmented Generation) over your Apple Notes. This allows AI assistants like Claude to search and reference your Apple Notes during conversations.\n\n![MCP Apple Notes](./images/demo.png)\n\n## Features\n\n- 🔍 Semantic search over Apple Notes using [`all-MiniLM-L6-v2`](https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2) on-device embeddings model\n- 📝 Full-text search capabilities\n- 📊 Vector storage using [LanceDB](https://lancedb.github.io/lancedb/)\n- 🤖 MCP-compatible server for AI assistant integration\n- 🍎 Native Apple Notes integration via JXA\n- 🏃‍♂️ Fully local execution - no API keys needed\n\n## Prerequisites\n\n- [Bun](https://bun.sh/docs/installation)\n- [Claude Desktop](https://claude.ai/download)\n\n## Installation\n\n1. Clone the repository:\n\n```bash\ngit clone https://github.com/RafalWilinski/mcp-apple-notes\ncd mcp-apple-notes\n```\n\n2. Install dependencies:\n\n```bash\nbun install\n```\n\n## Usage\n\n1. Open Claude desktop app and go to Settings -> Developer -> Edit Config\n\n![Claude Desktop Settings](./images/desktop_settings.png)\n\n2. Open the `claude_desktop_config.json` and add the following entry:\n\n```json\n{\n  \"mcpServers\": {\n    \"local-machine\": {\n      \"command\": \"/Users/<YOUR_USER_NAME>/.bun/bin/bun\",\n      \"args\": [\"/Users/<YOUR_USER_NAME>/apple-notes-mcp/index.ts\"]\n    }\n  }\n}\n```\n\nImportant: Replace `<YOUR_USER_NAME>` with your actual username.\n\n3. Restart Claude desktop app. You should see this:\n\n![Claude MCP Connection Status](./images/verify_installation.png)\n\n4. Start by indexing your notes. Ask Claude to index your notes by saying something like: \"Index my notes\" or \"Index my Apple Notes\".\n\n## Troubleshooting\n\nTo see logs:\n\n```bash\ntail -n 50 -f ~/Library/Logs/Claude/mcp-server-local-machine.log\n# or\ntail -n 50 -f ~/Library/Logs/Claude/mcp.log\n```\n\n## Todos\n\n- [ ] Apple notes are returned in the HTML format. We should turn them to Markdown and embed that\n- [ ] Chunk source content using recursive text splitter or markdown text splitter\n- [ ] Add an option to use custom embeddings model\n- [ ] More control over DB - purge, custom queries, etc.\n- [x] Storing notes in Notes via Claude\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "text",
        "apple notes",
        "notes conversations",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "YuheiNakasaka--scrapbox-mcp": {
      "owner": "YuheiNakasaka",
      "name": "scrapbox-mcp",
      "url": "https://github.com/YuheiNakasaka/scrapbox-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/YuheiNakasaka.webp",
      "description": "Manage and organize notes using a URI system that supports creating new notes and generating summaries of existing notes. Notes can be accessed and listed by their URIs, with metadata available for each entry.",
      "stars": 2,
      "forks": 2,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-04-14T15:10:38Z",
      "readme_content": "# scrapbox-mcp MCP Server\n\nA Model Context Protocol server\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"scrapbox-mcp\": {\n      \"command\": \"/path/to/scrapbox-mcp/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "scrapbox",
        "notes",
        "notetaking",
        "yuheinakasaka scrapbox",
        "organize notes",
        "existing notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "ZubeidHendricks--azure-onenote-mcp-server": {
      "owner": "ZubeidHendricks",
      "name": "azure-onenote-mcp-server",
      "url": "https://github.com/ZubeidHendricks/azure-onenote-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/ZubeidHendricks.webp",
      "description": "Implement interaction with Microsoft OneNote through standardized MCP methods, enabling management of notebooks and sections.",
      "stars": 19,
      "forks": 6,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-19T00:36:06Z",
      "readme_content": "\n# OneNote MCP Server\n[![smithery badge](https://smithery.ai/badge/@modelcontextprotocol/server-onenote)](https://smithery.ai/server/@modelcontextprotocol/server-onenote)\n[![npm version](https://img.shields.io/npm/v/mcp-server-onenote.svg)](https://www.npmjs.com/package/mcp-server-onenote)\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/94d05742-a658-483b-b3e3-f8a3e5ec6e23)\n\nA Model Context Protocol (MCP) server implementation for Microsoft OneNote, enabling AI language models to interact with OneNote through a standardized interface.\n\n## Features\n\n### Notebook Management\n- List all notebooks\n- Create new notebooks\n- Get notebook details\n- Delete notebooks\n\n### Section Management\n- List sections in a notebook\n- Create new sections\n- Get section details\n- Delete sections\n\n### Page Management\n- List pages in a section\n- Create new pages with HTML content\n- Read page content\n- Update page content\n- Delete pages\n- Search pages across notebooks\n\n## Installation\n\n### Installing from npm (Recommended)\n```bash\nnpm install -g mcp-server-onenote\n```\nThe package is now available on the npm registry as of April 27, 2025.\n\n### Running the Package\nAfter installation, you can run the package using:\n```bash\nmcp-server-onenote\n```\n\nOr with npx:\n```bash\nnpx mcp-server-onenote\n```\n\n### Installing via Smithery\n\nTo install OneNote Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@modelcontextprotocol/server-onenote):\n\n```bash\nnpx -y @smithery/cli install @modelcontextprotocol/server-onenote --client claude\n```\n\n### Installing from GitHub\n```bash\nnpm install -g github:ZubeidHendricks/azure-onenote-mcp-server\n```\n\n## Configuration\n\nSet the following environment variables:\n- `AZURE_TENANT_ID`: Your Azure tenant ID\n- `AZURE_CLIENT_ID`: Your Azure application (client) ID\n- `AZURE_CLIENT_SECRET`: Your Azure client secret\n\n## Using with MCP Client\n\nAdd this to your MCP client configuration (e.g. Claude Desktop):\n\n```json\n{\n  \"mcpServers\": {\n    \"onenote\": {\n      \"command\": \"mcp-server-onenote\",\n      \"env\": {\n        \"AZURE_TENANT_ID\": \"<YOUR_TENANT_ID>\",\n        \"AZURE_CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"AZURE_CLIENT_SECRET\": \"<YOUR_CLIENT_SECRET>\"\n      }\n    }\n  }\n}\n```\n\n## Azure App Registration\n\n1. Go to Azure Portal and navigate to App registrations\n2. Create a new registration\n3. Add Microsoft Graph API permissions:\n   - Notes.ReadWrite.All\n   - Notes.Read.All\n4. Create a client secret\n5. Copy the tenant ID, client ID, and client secret for configuration\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Run tests\nnpm test\n\n# Build\nnpm run build\n\n# Lint\nnpm run lint\n\n# Run locally\nnpm start\n```\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/zubeidhendricks-azure-onenote-mcp-server-badge.png)](https://mseep.ai/app/zubeidhendricks-azure-onenote-mcp-server)\n\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributing to this repository.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\n\n## Changelog\n\n### 0.1.0 (2025-04-27)\n- Initial release\n- Core functionality for OneNote notebook, section, and page management\n- Published to npm registry\n\n### 0.1.1 (2025-04-27)\n- Added executable bin to package.json\n- Fixed issue where npx command couldn't determine executable to run\n- Updated README with clear running instructions\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "onenote",
        "notetaking",
        "azure",
        "azure onenote",
        "microsoft onenote",
        "onenote mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "adamdude828--mcp-browser-use": {
      "owner": "adamdude828",
      "name": "mcp-browser-use",
      "url": "https://github.com/adamdude828/mcp-browser-use",
      "imageUrl": "/freedevtools/mcp/pfp/adamdude828.webp",
      "description": "A lightweight note storage system that allows users to easily add and summarize notes. Notes can be accessed via a custom URI scheme and are summarized based on user-defined detail levels.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-02-05T01:13:10Z",
      "readme_content": "# browser-use MCP server\n\nA MCP server project\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"browser-use\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/adamholsinger/mcp-servers/browser-use\",\n        \"run\",\n        \"browser-use\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"browser-use\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"browser-use\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/adamholsinger/mcp-servers/browser-use run browser-use\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "note",
        "note storage",
        "notes notes",
        "summarize notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "akseyh--bear-mcp-server": {
      "owner": "akseyh",
      "name": "bear-mcp-server",
      "url": "https://github.com/akseyh/bear-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/akseyh.webp",
      "description": "Access and manage Bear Notes through a Model Context Protocol (MCP) server. Retrieve, search, and list notes and tags stored in a SQLite database.",
      "stars": 39,
      "forks": 5,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-30T12:52:41Z",
      "readme_content": "# Bear MCP Server\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/akseyh-bear-mcp-server-badge.png)](https://mseep.ai/app/akseyh-bear-mcp-server)\n\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/4ba4aa63-76ae-41d7-9d41-851d9acf7013)\n\nThis project is a Model Context Protocol (MCP) server that provides access to the [Bear Notes](https://bear.app).\n\nBear stores notes on SQLite database. This MCP server runs some SQL commands to access this notes.\nhttps://bear.app/faq/where-are-bears-notes-located\n\n![Kariyer notu arama örneği](./assets/career-note-search-example.png)\n\n## Features\n\n- Read notes\n- Search notes by text\n- List all tags\n\n## Installation\n\n```bash\n# Clone the project\ngit clone https://github.com/akseyh/bear-mcp-server\n\n# Change directory\ncd bear-mcp-server\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Claude Desktop Config\n\nUpdate your claude_desktop_config.json\n\n### Docker\n```json\n{\n    \"mcpServers\": {\n        \"bear\": {\n            \"command\": \"docker\",\n            \"args\": [\n                \"run\",\n                \"-v\",\n                \"/Users/[YOUR_USER_NAME]/Library/Group Containers/9K33E3U3T4.net.shinyfrog.bear/Application Data:/app/db\",\n                \"-i\",\n                \"akseyh/bear-mcp-server\"\n            ]\n        }\n    }\n}\n```\n\n### NPM\n```json\n{\n  \"mcpServers\": {\n    \"bear\": {\n      \"command\": \"npx\",\n      \"args\": [\n          \"bear-mcp-server\"\n      ]\n    }\n  }\n}\n```\n\nWhen the server is started, the following MCP tools become available:\n\n- `get_notes`: Retrieves all notes\n- `get_tags`: Lists all tags\n- `get_notes_like`: Searches for notes containing specific text\n\n## Requirements\n\n- Node.js\n- Bear note application (macOS)\n- Access to Bear database\n\n## License\n\nISC\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "sqlite",
        "database",
        "mcp server",
        "protocol mcp",
        "bear mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "aldrin-labs--solana-docs-mcp-server": {
      "owner": "aldrin-labs",
      "name": "solana-docs-mcp-server",
      "url": "https://github.com/aldrin-labs/solana-docs-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/aldrin-labs.webp",
      "description": "TypeScript-based MCP server that provides a system for creating and managing text notes, allowing access to notes via URIs along with metadata. It includes functionality for generating summaries of notes and listing note resources.",
      "stars": 4,
      "forks": 5,
      "license": "The Unlicense",
      "language": "JavaScript",
      "updated_at": "2025-05-09T16:21:36Z",
      "readme_content": "# solana-docs-server MCP Server\n[![smithery badge](https://smithery.ai/badge/@aldrin-labs/solana-docs-mcp-server)](https://smithery.ai/server/@aldrin-labs/solana-docs-mcp-server)\n\nsolana docs context\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n<a href=\"https://glama.ai/mcp/servers/v2cs13njts\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/v2cs13njts/badge\" alt=\"solana-docs-mcp-server MCP server\" /></a>\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\n### Installing via Smithery\n\nTo install solana-docs-server MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@aldrin-labs/solana-docs-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @aldrin-labs/solana-docs-mcp-server --client claude\n```\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"solana-docs-server\": {\n      \"command\": \"/path/to/solana-docs-server/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "metadata",
        "note resources",
        "text notes",
        "notes listing"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "bart6114--my-bear-mcp-server": {
      "owner": "bart6114",
      "name": "my-bear-mcp-server",
      "url": "https://github.com/bart6114/my-bear-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/bart6114.webp",
      "description": "Connect to Bear notes in read-only mode, allowing retrieval, search, and management of notes without altering the data. Interact with notes through natural language queries to enhance productivity.",
      "stars": 13,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-17T18:41:57Z",
      "readme_content": "# Bear MCP Server\n\nA Model Context Protocol (MCP) server that allows AI assistants like Claude to read notes from the [Bear](https://bear.app/) note-taking app. This implementation connects directly to the Bear SQLite database in a read-only mode, ensuring your notes remain safe and unmodified.\n\n[![Read-Only](https://img.shields.io/badge/Mode-Read%20Only-brightgreen.svg)](https://github.com/bart6114/my-bear-mcp-server)\n[![Bear App](https://img.shields.io/badge/For-Bear%20App-blue.svg)](https://bear.app)\n[![Works with Claude](https://img.shields.io/badge/Works%20with-Claude%20AI-blueviolet.svg)](https://claude.ai)\n[![TypeScript](https://img.shields.io/badge/Made%20with-TypeScript-007ACC.svg)](https://www.typescriptlang.org/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n## Quick Start\n\n### Option 1: Install from GitHub (Recommended)\n\n```bash\nnpx github:bart6114/my-bear-mcp-server\n```\n\nThat's it! The server will start running and connect to your Bear database.\n\n### Option 2: Clone and Run Locally\n\n```bash\n# Clone the repository\ngit clone https://github.com/bart6114/my-bear-mcp-server.git\ncd my-bear-mcp-server\n\n# Install dependencies\nnpm install\n\n# Build and run\nnpm run build\nnpm start\n```\n\n## Prerequisites\n\n- macOS with Bear app installed\n- Node.js 18 or higher\n\n## Configuration\n\n### For Claude Desktop App\n\nAdd this to your configuration file at `~/Library/Application Support/Claude/claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"bear\": {\n      \"command\": \"npx\",\n      \"args\": [\"github:bart6114/my-bear-mcp-server\"],\n      \"env\": {},\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n### For Claude VS Code Extension\n\nAdd this to your configuration file at `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"bear\": {\n      \"command\": \"npx\",\n      \"args\": [\"github:bart6114/my-bear-mcp-server\"],\n      \"env\": {},\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n## Available Tools\n\nThe Bear MCP server provides these read-only tools (all operations are non-destructive and cannot modify your Bear database):\n\n### open_note\n\nOpen a note by title or ID.\n\n### search_notes\n\nSearch for notes by term or tag.\n\n### get_tags\n\nGet all tags in Bear.\n\n### open_tag\n\nShow all notes with a specific tag.\n\n## Example Usage\n\nHere are examples of how to interact with the Bear MCP tools through AI assistants:\n\n### Searching for Notes\n\nAsk your AI assistant to search for notes containing specific terms:\n\n```\nCan you find all my notes about \"project management\"?\n```\n\n### Opening a Specific Note\n\nAsk your AI assistant to retrieve a specific note by title:\n\n```\nShow me my note titled \"Meeting Notes - March 2025\"\n```\n\n### Viewing Tags\n\nAsk your AI assistant to list all your Bear tags:\n\n```\nWhat tags do I have in my Bear notes?\n```\n\n### Finding Notes with a Specific Tag\n\nAsk your AI assistant to show notes with a particular tag:\n\n```\nShow me all notes with the #work tag\n```\n\n## Advanced Options\n\nIf your Bear database is in a non-standard location:\n\n```bash\nnpx github:bart6114/my-bear-mcp-server --db-path /path/to/your/database.sqlite\n```\n\n## Technical Details\n\n### Read-Only Implementation\n\nThis MCP server connects to your Bear SQLite database using a strict read-only connection. This is enforced at the database driver level:\n\n```typescript\n// From src/bear-db.ts\nthis.db = new Database(dbPath, { readonly: true });\n```\n\nThis ensures that:\n- No write operations can be performed on your database\n- Your notes and tags cannot be modified, deleted, or corrupted\n- The database connection will fail if write permissions are attempted\n\nAll operations performed by this server are SELECT queries that only retrieve data without modifying it.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "retrieval",
        "notetaking knowledge",
        "bear notes",
        "notes read"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "blackwhite084--playwright-plus-python-mcp": {
      "owner": "blackwhite084",
      "name": "playwright-plus-python-mcp",
      "url": "https://github.com/blackwhite084/playwright-plus-python-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/blackwhite084.webp",
      "description": "An MCP server that facilitates web automation tasks using Playwright tools and features a note storage system. It allows summarization of stored notes with customizable detail levels.",
      "stars": 153,
      "forks": 24,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-29T10:40:24Z",
      "readme_content": "# playwright-server MCP server\n\n\\A MCP server with playwright tools\\\n\n<a href=\"https://glama.ai/mcp/servers/c50bsocgzb\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/c50bsocgzb/badge\" alt=\"Playwright Server MCP server\" /></a>\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements the following tools:\n- `playwright_navigate`: Navigates to a specified URL. This operation will automatically create a new session if there is no active session.\n  - Requires a `url` argument (string).\n- `playwright_screenshot`: Takes a screenshot of the current page or a specific element.\n  - Requires a `name` argument (string) for the screenshot file name.\n  - Optional `selector` argument (string) to specify a CSS selector for the element to screenshot. If no selector is provided, a full-page screenshot is taken.\n- `playwright_click`: Clicks an element on the page using a CSS selector.\n  - Requires a `selector` argument (string) to specify the CSS selector for the element to click.\n- `playwright_fill`: Fills out an input field.\n  - Requires a `selector` argument (string) to specify the CSS selector for the input field.\n  - Requires a `value` argument (string) to specify the value to fill.\n- `playwright_evaluate`: Executes JavaScript code in the browser console.\n  - Requires a `script` argument (string) to specify the JavaScript code to execute.\n- `playwright_click_text`: Clicks an element on the page by its text content.\n  - Requires a `text` argument (string) to specify the text content of the element to click.\n- `playwright_get_text_content`: Get the text content of all visiable elements.\n- `playwright_get_html_content`: Get the HTML content of the page.\n  - Requires a `selector` argument (string) to specify the CSS selector for the element.\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"playwright-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"C:\\Users\\xxxxx\\Documents\\project\\python\\mcp\\playwright-server\",\n        \"run\",\n        \"playwright-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"playwright-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"playwright-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory C:\\Users\\YUNYING\\Documents\\project\\python\\mcp\\playwright-server run playwright-server\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "mcp",
        "playwright tools",
        "stored notes",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "chatmcp--mcp-server-flomo": {
      "owner": "chatmcp",
      "name": "mcp-server-flomo",
      "url": "https://github.com/chatmcp/mcp-server-flomo",
      "imageUrl": "/freedevtools/mcp/pfp/chatmcp.webp",
      "description": "Write notes directly to Flomo by capturing and sending text content through a simple integration, streamlining the note-taking workflow.",
      "stars": 54,
      "forks": 15,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-30T06:45:58Z",
      "readme_content": "# mcp-server-flomo MCP Server\n\nwrite notes to Flomo.\n\nThis is a TypeScript-based MCP server help you write notes to Flomo.\n\n![preview](./preview.png)\n\n## Features\n\n### Tools\n\n- `write_note` - Write text notes to Flomo\n  - Takes content as required parameters\n\n## Development\n\nInstall dependencies:\n\n```bash\nnpm install\n```\n\nBuild the server:\n\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-flomo\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@chatmcp/mcp-server-flomo\"],\n      \"env\": {\n        \"FLOMO_API_URL\": \"https://flomoapp.com/iwh/xxx/xxx/\"\n      }\n    }\n  }\n}\n```\n\nFind Your Flomo_API_URL [here](https://v.flomoapp.com/mine?source=incoming_webhook)\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "chatmcp",
        "flomo",
        "notes",
        "flomo write",
        "server flomo",
        "chatmcp mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "danosb--onenote-mcp": {
      "owner": "danosb",
      "name": "onenote-mcp",
      "url": "https://github.com/danosb/onenote-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/danosb.webp",
      "description": "Access and manage OneNote notebooks through AI interfaces, enabling note creation, content reading, search functionality, and summarization directly within the AI session.",
      "stars": 21,
      "forks": 10,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-30T17:10:15Z",
      "readme_content": "# OneNote MCP Server\n\nA Model Context Protocol (MCP) server implementation that enables AI language models like Claude and other LLMs to interact with Microsoft OneNote.\n\n> This project is based on [azure-onenote-mcp-server](https://github.com/ZubeidHendricks/azure-onenote-mcp-server) by Zubeid Hendricks, with modifications to simplify authentication and improve usability.\n\n## What Does This Do?\n\nThis server allows AI assistants to:\n- Access your OneNote notebooks, sections, and pages\n- Create new pages in your notebooks\n- Search through your notes\n- Read complete note content, including HTML formatting and text\n- Analyze and summarize your notes directly\n\nAll of this happens directly through the AI interface without you having to switch contexts.\n\n## Using with AI Assistants\n\n### Setup for Cursor\n\n1. Clone this repository and follow the installation steps below\n2. Start the MCP server: `npm start`\n3. Register the server in Cursor:\n   - Open Cursor preferences (Cmd+, on Mac or Ctrl+, on Windows)\n   - Go to the \"MCP\" tab\n   - Add a new MCP server with these settings:\n     - Name: `onenote` \n     - Command: `node`\n     - Args: `[\"/path/to/your/onenote-mcp.mjs\"]` (use absolute path)\n\n   Here's the complete JSON configuration example:\n   ```json\n   {\n     \"mcpServers\": {\n       \"onenote\": {\n         \"command\": \"node\",\n         \"args\": [\"/absolute/path/to/your/onenote-mcp.mjs\"],\n         \"env\": {}\n       }\n     }\n   }\n   ```\n   \n4. Restart Cursor\n5. In Cursor, you can now interact with your OneNote data using natural language:\n\n```\nCan you show me my OneNote notebooks?\nCreate a new page in my first notebook with a summary of this conversation\nFind notes related to \"project planning\" in my OneNote\n```\n\nThe first time you ask about OneNote, the AI will guide you through the authentication process.\n\n### Setup for Claude Desktop (or other MCP-compatible assistants)\n\n1. Clone this repository and follow the installation steps below\n2. Start the MCP server: `npm start`\n3. In the Claude Desktop settings, add the OneNote MCP server:\n   - Name: `onenote`\n   - Command: `node`\n   - Args: `[\"/path/to/your/onenote-mcp.mjs\"]` (use absolute path)\n   \n   JSON configuration example:\n   ```json\n   {\n     \"mcpServers\": {\n       \"onenote\": {\n         \"command\": \"node\",\n         \"args\": [\"/absolute/path/to/your/onenote-mcp.mjs\"],\n         \"env\": {}\n       }\n     }\n   }\n   ```\n   \n4. You can now ask Claude to interact with your OneNote data\n\n## Features\n\n- Authentication with Microsoft OneNote using device code flow (no Azure setup needed)\n- List all notebooks, sections, and pages\n- Create new pages with HTML content\n- Read complete page content, including HTML formatting\n- Extract text content for AI analysis and summaries\n- Summarize content of all pages in a single operation\n- Read full content of all pages in a readable format\n- Search across your notes\n\n## Installation\n\n### Prerequisites\n\n- Node.js 16 or higher (install from [nodejs.org](https://nodejs.org/))\n- An active Microsoft account with access to OneNote\n- Git (install from [git-scm.com](https://git-scm.com/))\n\n### Step 1: Clone the Repository\n\n```bash\ngit clone https://github.com/yourusername/onenote-mcp.git\ncd onenote-mcp\n```\n\n### Step 2: Download the TypeScript SDK\n\nThis project requires the MCP TypeScript SDK, which needs to be downloaded separately:\n\n```bash\ngit clone https://github.com/modelcontextprotocol/typescript-sdk.git\ncd typescript-sdk\nnpm install\nnpm run build\ncd ..\n```\n\n### Step 3: Install Project Dependencies\n\n```bash\nnpm install\n```\n\n### Step 4: Start the MCP Server\n\n```bash\nnpm start\n```\n\nThis will start the MCP server, and you'll see a message:\n```\nServer started successfully.\nUse the \"authenticate\" tool to start the authentication flow,\nor use \"saveAccessToken\" if you already have a token.\n```\n\n### Step 5: Authenticate Through Your AI Assistant\n\nOnce the server is running, you can authenticate directly through your AI assistant:\n\n1. In Cursor, Anthropic's Claude Desktop, or any MCP-compatible assistant, ask to authenticate with OneNote:\n   ```\n   Can you authenticate with my OneNote account?\n   ```\n\n2. The AI will trigger the authentication flow and provide you with:\n   - A URL (typically microsoft.com/devicelogin)\n   - A code to enter\n\n3. Go to the URL, enter the code, and sign in with your Microsoft account\n\n4. After successful authentication, you can start using OneNote with your AI assistant\n\n## Available MCP Tools\n\nOnce authenticated, the following tools are available for AI assistants to use:\n\n| Tool Name | Description |\n|-----------|-------------|\n| `authenticate` | Start the Microsoft authentication flow |\n| `listNotebooks` | Get a list of all your OneNote notebooks |\n| `getNotebook` | Get details of a specific notebook |\n| `listSections` | List all sections in a notebook |\n| `listPages` | List all pages in a section |\n| `getPage` | Get the complete content of a specific page, including HTML formatting |\n| `createPage` | Create a new page with HTML content |\n| `searchPages` | Search for pages across your notebooks |\n\n## Example Interactions\n\nHere are some examples of how you can interact with the OneNote MCP through your AI assistant:\n\n```\nUser: Can you show me my OneNote notebooks?\nAI: (uses listNotebooks) I found 3 notebooks: \"Work\", \"Personal\", and \"Projects\"\n\nUser: What sections are in my Projects notebook?\nAI: (uses listSections) Your Projects notebook has the following sections: \"Active Projects\", \"Ideas\", and \"Completed\"\n\nUser: Create a new page in Projects with today's date as the title\nAI: (uses createPage) I've created a new page titled \"2025-04-12\" in your Projects notebook\n\nUser: Find all my notes about machine learning\nAI: (uses searchPages) I found 5 pages with content related to machine learning...\n\nUser: Can you read and summarize my notes on the \"Project Requirements\" page?\nAI: (uses getPage) Based on your \"Project Requirements\" page, here's a summary: The project requires Python 3.8+, integration with AWS services, and completion by Q3. Key deliverables include a web dashboard, API, and documentation...\n\nUser: Extract all the action items from my \"Team Meeting\" notes\nAI: (uses getPage) Here are all the action items from your \"Team Meeting\" notes:\n1. John to complete API documentation by Friday\n2. Sarah to schedule design review meeting\n3. Team to finalize Q3 roadmap by end of month\n\nUser: Summarize content of all my OneNote pages\nAI: (runs get-all-page-contents.js) Here's a summary of all your pages:\n- Questions: Contains strategic business questions about competitor analysis\n- 2025-04-12: Discussion about monetization strategy for bank transfers\n- Role Specification: Details about the Chief Payments Officer position\n...\n\nUser: I want to read through all my OneNote pages so I can ask questions about them\nAI: (runs read-all-pages.js) I've retrieved the full content of all your pages in a readable format. Now you can ask me specific questions about any of the content.\n```\n\n## Advanced: Direct Script Usage\n\nFor testing or development purposes, you can also use the provided scripts directly:\n\n```bash\n# Authenticate with Microsoft\nnpm run auth\n\n# List your notebooks\nnpm run list-notebooks\n\n# List sections in your first notebook\nnpm run list-sections\n\n# List pages in the first section\nnpm run list-pages\n\n# Create a new page\nnpm run create-page\n\n# Summarize content of all pages\nnode get-all-page-contents.js\n\n# Read full content of all pages\nnode read-all-pages.js\n```\n\n## Troubleshooting\n\n### Authentication Issues\n\n- If authentication fails, make sure you're using a modern browser without tracking prevention\n- Try clearing browser cookies and cache\n- If you get \"expired_token\" errors, restart the authentication process\n\n### Server Won't Start\n\n- Verify Node.js is installed (version 16+): `node --version`\n- Make sure all dependencies are installed: `npm install`\n- Check that the TypeScript SDK was built correctly\n\n### AI Can't Connect to the Server\n\n- Ensure the MCP server is running (`npm start`)\n- Check your AI assistant's settings to make sure it's configured to use MCP\n- For Cursor, make sure it's the latest version that supports MCP\n\n## Security Notes\n\n- Authentication tokens are stored locally in `.access-token.txt`\n- Tokens grant access to your OneNote data, so keep them secure\n- Tokens expire after some time, requiring re-authentication\n- No Azure setup or API keys are required\n\n## Credits\n\nThis project builds upon the [azure-onenote-mcp-server](https://github.com/ZubeidHendricks/azure-onenote-mcp-server) by Zubeid Hendricks, with a focus on simplifying the authentication process and improving the user experience with AI assistants.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "onenote",
        "notetaking",
        "notebooks",
        "danosb onenote",
        "onenote notebooks",
        "manage onenote"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "dlamichhane--my-resume": {
      "owner": "dlamichhane",
      "name": "my-resume",
      "url": "https://github.com/dlamichhane/my-resume",
      "imageUrl": "/freedevtools/mcp/pfp/dlamichhane.webp",
      "description": "Showcase and highlight professional qualifications and achievements through a structured resume format. Allows users to effectively communicate their experiences to potential employers.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "HTML",
      "updated_at": "2025-09-01T14:46:38Z",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "resume",
        "dlamichhane",
        "notetaking",
        "dlamichhane resume",
        "structured resume",
        "resume format"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "docdyhr--simplenote-mcp-server": {
      "owner": "docdyhr",
      "name": "simplenote-mcp-server",
      "url": "https://github.com/docdyhr/simplenote-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/docdyhr.webp",
      "description": "Connect and manage your Simplenote notes, enabling actions like creating, updating, and deleting notes directly from LLM applications.",
      "stars": 7,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T13:16:10Z",
      "readme_content": "# Simplenote MCP Server\n\n![Simplenote MCP Server Logo](assets/logo.png)\n\nA lightweight MCP server that integrates [Simplenote](https://simplenote.com/) with [Claude Desktop](https://github.com/johnsmith9982/claude-desktop) using the [MCP Python SDK](https://github.com/johnsmith9982/mcp-python-sdk).\n\nThis allows Claude Desktop to interact with your Simplenote notes as a memory backend or content source.\n\n<!-- Status & Build Badges -->\n[![CI/CD Pipeline](https://github.com/docdyhr/simplenote-mcp-server/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/docdyhr/simplenote-mcp-server/actions/workflows/ci.yml)\n[![Code Quality](https://github.com/docdyhr/simplenote-mcp-server/actions/workflows/code-quality.yml/badge.svg?branch=main)](https://github.com/docdyhr/simplenote-mcp-server/actions/workflows/code-quality.yml)\n[![Security](https://github.com/docdyhr/simplenote-mcp-server/actions/workflows/security.yml/badge.svg?branch=main)](https://github.com/docdyhr/simplenote-mcp-server/actions/workflows/security.yml)\n[![Docker](https://github.com/docdyhr/simplenote-mcp-server/actions/workflows/docker-publish.yml/badge.svg)](https://github.com/docdyhr/simplenote-mcp-server/actions/workflows/docker-publish.yml)\n\n<!-- Project Info Badges -->\n[![Python Version](https://img.shields.io/badge/python-3.10%20%7C%203.11%20%7C%203.12%20%7C%203.13-blue)](https://github.com/docdyhr/simplenote-mcp-server)\n[![Version](https://img.shields.io/badge/version-1.7.0-blue.svg)](./CHANGELOG.md)\n[![Test Coverage](https://img.shields.io/badge/coverage-15.6%25-yellow)](./htmlcov/index.html)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Docker](https://img.shields.io/docker/v/docdyhr/simplenote-mcp-server?label=docker&color=blue)](https://hub.docker.com/r/docdyhr/simplenote-mcp-server)\n\n<!-- Download & Stats Badges -->\n[![PyPI Downloads](https://img.shields.io/pypi/dm/simplenote-mcp-server?label=PyPI%20downloads)](https://pypi.org/project/simplenote-mcp-server/)\n[![Docker Pulls](https://img.shields.io/docker/pulls/docdyhr/simplenote-mcp-server?label=Docker%20pulls)](https://hub.docker.com/r/docdyhr/simplenote-mcp-server)\n[![GitHub Stars](https://img.shields.io/github/stars/docdyhr/simplenote-mcp-server?style=social)](https://github.com/docdyhr/simplenote-mcp-server)\n\n<!-- Development & Quality Badges -->\n[![MCP Server](https://img.shields.io/badge/MCP-Server-purple.svg)](https://github.com/modelcontextprotocol)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)\n[![Smithery](https://smithery.ai/badge/@docdyhr/simplenote-mcp-server)](https://smithery.ai/server/@docdyhr/simplenote-mcp-server)\n\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/b215d030-b511-457d-8a6d-3e1e6ea3b541)\n---\n\n## 🔧 Features\n\n- 📝 **Full Note Management**: Read, create, update, and delete Simplenote notes\n- 🔍 **Advanced Search**: Boolean operators, phrase matching, tag and date filters\n- ⚡ **High Performance**: In-memory caching with background synchronization\n- 🔐 **Secure Authentication**: Token-based authentication via environment variables\n- 🧩 **MCP Compatible**: Works with Claude Desktop and other MCP clients\n- 🐳 **Docker Ready**: Full containerization with multi-stage builds and security hardening\n- 📊 **Monitoring**: Optional HTTP endpoints for health, readiness, and metrics\n- 🧪 **Robust Testing**: Comprehensive test suite with 700+ tests and continuous integration\n- 🔒 **Security Hardened**: Regular security scanning with Bandit, pip-audit, and dependency checks\n\n---\n\n## 🚀 Quick Start\n\n### Prerequisites\n\n- Simplenote account (create one at [simplenote.com](https://simplenote.com/))\n- Python 3.10+ (for non-Docker installs) or Docker\n\n### Option 1: Docker (Recommended)\n\nThe fastest way to get started is using our pre-built Docker image:\n\n```bash\n# Pull and run the latest image\ndocker run -d \\\n  --name simplenote-mcp \\\n  -e SIMPLENOTE_EMAIL=your.email@example.com \\\n  -e SIMPLENOTE_PASSWORD=your-password \\\n  -p 8000:8000 \\\n  docdyhr/simplenote-mcp-server:latest\n```\n\n**Docker Health Checks:** The container includes built-in health monitoring endpoints:\n- Health: `http://localhost:8000/health`\n- Readiness: `http://localhost:8000/ready`  \n- Metrics: `http://localhost:8000/metrics` (Prometheus format)\n\nOr use Docker Compose:\n\n```bash\n# Clone the repository for docker-compose.yml\ngit clone https://github.com/docdyhr/simplenote-mcp-server.git\ncd simplenote-mcp-server\n\n# Set environment variables\nexport SIMPLENOTE_EMAIL=your.email@example.com\nexport SIMPLENOTE_PASSWORD=your-password\n\n# Run with Docker Compose\ndocker-compose up -d\n```\n\n### Option 2: Smithery (One-click install)\n\nInstall automatically via [Smithery](https://smithery.ai/server/@docdyhr/simplenote-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @docdyhr/simplenote-mcp-server --client claude\n```\n\nThis method automatically configures Claude Desktop with the MCP server.\n\n### Option 3: Traditional Python Install\n\n```bash\ngit clone https://github.com/docdyhr/simplenote-mcp-server.git\ncd simplenote-mcp-server\npip install -e .\nsimplenote-mcp-server\n```\n\n---\n\n## 🐳 Docker Deployment\n\n### Container Features\n\n- **Multi-stage builds** for optimized image size\n- **Security hardening** with non-root user and minimal attack surface\n- **Health monitoring** endpoints built-in\n- **Resource limits** and proper signal handling\n- **Volume support** for persistent data\n\n### Using Pre-built Images\n\nThe easiest way to use the server is with our pre-built Docker images:\n\n```bash\n# Pull the latest image\ndocker pull docdyhr/simplenote-mcp-server:latest\n\n# Run with Docker\ndocker run -d \\\n  -e SIMPLENOTE_EMAIL=your.email@example.com \\\n  -e SIMPLENOTE_PASSWORD=your-password \\\n  -p 8000:8000 \\\n  docdyhr/simplenote-mcp-server:latest\n\n# Or use Docker Compose\ndocker-compose up -d\n```\n\nAvailable tags:\n\n- `latest` - Latest stable release\n- `v1.6.0` - Specific version\n- `main` - Latest development build\n\n### Production Deployment\n\n```bash\n# Build and run the production container\ndocker-compose up -d\n\n# Or build manually\ndocker build -t simplenote-mcp-server .\ndocker run -d \\\n  -e SIMPLENOTE_EMAIL=your.email@example.com \\\n  -e SIMPLENOTE_PASSWORD=your-password \\\n  -p 8000:8000 \\\n  simplenote-mcp-server\n```\n\n### Development with Docker\n\n```bash\n# Use the development compose file for live code mounting\ndocker-compose -f docker-compose.dev.yml up\n```\n\n### Docker Features\n\n- **Multi-stage build** for optimized image size (346MB)\n- **Multi-platform support**: `linux/amd64` and `linux/arm64`\n- **Security hardening**: Non-root user, read-only filesystem, no new privileges\n- **Health checks** and automatic restart policies\n- **Resource limits**: 1 CPU, 512MB memory\n- **Logging**: Persistent log volumes\n- **Environment-based configuration**\n- **CI/CD Pipeline**: Automated builds and publishing to Docker Hub\n- **Security scanning**: Trivy vulnerability scanning on all images\n- **Container signing**: Sigstore cosign signatures for supply chain security\n- **Kubernetes ready**: Production-grade Helm chart with security hardening\n- **Automated updates**: Dependabot for dependencies, auto-versioning workflows\n- **Health monitoring**: Continuous health checks and alerting\n- **Enterprise notifications**: Slack and email integration for CI/CD status\n\n---\n\n## ☸️ Kubernetes Deployment\n\n### Using Helm (Recommended)\n\nDeploy to Kubernetes with our production-ready Helm chart:\n\n```bash\n# Install from local chart\nhelm install my-simplenote ./helm/simplenote-mcp-server \\\n  --set simplenote.email=\"your-email@example.com\" \\\n  --set simplenote.password=\"your-password\"\n\n# Or with external secrets (recommended for production)\nhelm install my-simplenote ./helm/simplenote-mcp-server \\\n  --set externalSecrets.enabled=true \\\n  --set externalSecrets.secretStore.name=\"vault-backend\"\n```\n\n### Kubernetes Features\n\n- **Security hardening**: Non-root user, read-only filesystem, dropped capabilities\n- **Resource management**: CPU/memory limits and requests configured\n- **Auto-scaling**: Horizontal Pod Autoscaler support\n- **Health checks**: Liveness and readiness probes\n- **External secrets**: Integration with external secret management\n- **Service mesh ready**: Compatible with Istio and other service meshes\n\n### Production Configuration\n\n```yaml\n# values.yaml for production\nreplicaCount: 3\nautoscaling:\n  enabled: true\n  minReplicas: 2\n  maxReplicas: 10\nresources:\n  limits:\n    cpu: 1000m\n    memory: 512Mi\n  requests:\n    cpu: 500m\n    memory: 256Mi\n```\n\n---\n\n## ⚙️ Configuration\n\n### Environment Variables\n\n| Variable                | Required | Default | Description                                 |\n| ----------------------- | -------- | ------- | ------------------------------------------- |\n| `SIMPLENOTE_EMAIL`      | Yes      | -       | Your Simplenote account email               |\n| `SIMPLENOTE_PASSWORD`   | Yes      | -       | Your Simplenote account password            |\n| `SYNC_INTERVAL_SECONDS` | No       | 120     | Cache synchronization interval              |\n| `LOG_LEVEL`             | No       | INFO    | Logging level (DEBUG, INFO, WARNING, ERROR) |\n\n### Claude Desktop Integration\n\nAdd to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"simplenote\": {\n      \"description\": \"Access and manage your Simplenote notes\",\n      \"command\": \"simplenote-mcp-server\",\n      \"env\": {\n        \"SIMPLENOTE_EMAIL\": \"your.email@example.com\",\n        \"SIMPLENOTE_PASSWORD\": \"your-password\"\n      }\n    }\n  }\n}\n```\n\n---\n\n## 🔍 Advanced Search\n\nPowerful search with boolean logic and filters:\n\n```text\n# Boolean operators\nproject AND meeting AND NOT cancelled\n\n# Phrase matching\n\"action items\" AND project\n\n# Tag filtering\nmeeting tag:work tag:important\n\n# Date ranges\nproject from:2023-01-01 to:2023-12-31\n\n# Combined query\n\"status update\" AND project tag:work from:2023-01-01 NOT cancelled\n```\n\n---\n\n## 🛠️ Available Tools\n\n| Tool           | Description                  | Parameters                                                 |\n| -------------- | ---------------------------- | ---------------------------------------------------------- |\n| `create_note`  | Create a new note            | `content`, `tags` (optional)                               |\n| `update_note`  | Update an existing note      | `note_id`, `content`, `tags` (optional)                    |\n| `delete_note`  | Move a note to trash         | `note_id`                                                  |\n| `get_note`     | Get a note by ID             | `note_id`                                                  |\n| `search_notes` | Advanced search with filters | `query`, `limit`, `offset`, `tags`, `from_date`, `to_date` |\n| `add_tags`     | Add tags to a note           | `note_id`, `tags`                                          |\n| `remove_tags`  | Remove tags from a note      | `note_id`, `tags`                                          |\n| `replace_tags` | Replace all tags on a note   | `note_id`, `tags`                                          |\n\n---\n\n## 📊 Performance & Caching\n\n- **In-memory caching** with background synchronization\n- **Pagination support** for large note collections\n- **Indexed lookups** for tags and content\n- **Query result caching** for repeated searches\n- **Optimized API usage** with minimal Simplenote calls\n\n---\n\n## 🎯 Recent Improvements (September 2025)\n\n### ✅ Quality & Reliability Enhancements\n\n**Test Suite Stabilization**: \n- Fixed test isolation issues that caused intermittent failures\n- Improved test cleanup with proper timeout handling\n- Enhanced fixture management for better test reliability\n- Achieved consistent test results across individual and suite runs\n\n**CI/CD Pipeline Optimization**:\n- Consolidated 28 workflows down to 16 active workflows\n- Implemented unified monitoring workflow combining security, health, and badge checks\n- Improved test coverage reporting with realistic 15.6% baseline\n- Enhanced Docker build validation and security scanning\n\n**Code Quality Improvements**:\n- All linting (Ruff), formatting, and type checking (MyPy) now pass consistently  \n- Zero high-severity security vulnerabilities (verified with Bandit, pip-audit, safety)\n- Standardized code formatting and pre-commit hooks configuration\n- Enhanced error handling and user-facing error messages\n\n### 🔧 Developer Experience\n\n**Improved Testing**:\n- 724 comprehensive tests covering core functionality\n- Function-scoped fixtures for better test isolation  \n- Realistic coverage baseline established (15.6%)\n- Streamlined test execution with proper cleanup\n\n**Enhanced Documentation**:\n- Updated deployment guides with current Docker setup\n- Improved health monitoring endpoint documentation\n- Added troubleshooting guides for common issues\n- Current status and roadmap documentation\n\n**Container Improvements**:\n- Multi-stage Docker builds for optimized image size\n- Built-in health monitoring endpoints (`/health`, `/ready`, `/metrics`)\n- Enhanced security hardening with non-root user\n- Improved signal handling and graceful shutdown\n\n---\n\n## 🧪 Testing & Evaluation\n\n### MCP Evaluations ✅\n\n**Status**: ✅ **WORKING** - Complete mcp-evals integration with TypeScript wrapper!\n\nThis project includes comprehensive evaluations using [mcp-evals](https://github.com/mclenhard/mcp-evals) to ensure reliability and performance:\n\n```bash\n# Setup evaluation environment\nnpm install\nnpm run validate:evals\n\n# Run evaluation suites\nnpm run eval:smoke          # Quick smoke tests (2-3 minutes) ✅ VERIFIED\nnpm run eval:basic          # Standard evaluations (5-10 minutes)\nnpm run eval:comprehensive  # Full evaluation suite (15-30 minutes)\n```\n\n**Latest Test Results**: 4/5 tests passing excellently (avg 4.1/5):\n\n- **Server Startup**: 4.6/5 ⭐ (Excellent)\n- **Authentication**: 4.0/5 ⭐ (Good)\n- **Note Operations**: 3.8/5 ⭐ (Good)\n- **Search**: 5.0/5 ⭐ (Perfect)\n- **Error Handling**: 1.4/5 ⚠️ (Needs improvement)\n\n#### Evaluation Types\n\n- **Smoke Tests**: Basic functionality validation\n- **CRUD Operations**: Note creation, reading, updating, deletion\n- **Search & Filtering**: Boolean search, tag filtering, date ranges\n- **Error Handling**: Authentication, network issues, edge cases\n- **Performance**: Large datasets, concurrent operations\n- **Security**: Input validation, authentication enforcement\n\n#### Automated Testing\n\nEvaluations run automatically on:\n\n- **Pull Requests**: Smoke + basic tests\n- **Releases**: Comprehensive evaluation suite\n- **Manual Trigger**: Full test matrix with detailed reporting\n\nThe evaluations use OpenAI's GPT models to assess:\n\n- **Accuracy**: Correctness of responses\n- **Completeness**: Thoroughness of results\n- **Relevance**: Response appropriateness\n- **Clarity**: Response readability\n- **Performance**: Operation efficiency\n\n📁 See [`evals/README.md`](./evals/README.md) for detailed evaluation documentation.\n\n### Traditional Testing\n\n```bash\n# Python unit tests\npytest\n\n# Code quality checks\nruff check .\nmypy simplenote_mcp\n```\n\n---\n\n## 🛡️ Security\n\n- **Token-based authentication** via environment variables\n- **No hardcoded credentials** in Docker images\n- **Security-hardened containers** with non-root users\n- **Read-only filesystem** in production containers\n- **Resource limits** to prevent abuse\n\n---\n\n## 🚨 Troubleshooting\n\n### Common Issues\n\n**Authentication Problems**:\n\n- Verify `SIMPLENOTE_EMAIL` and `SIMPLENOTE_PASSWORD` are set correctly\n- Check for typos in credentials\n\n**Docker Issues**:\n\n```bash\n# Check container logs\ndocker-compose logs\n\n# Restart services\ndocker-compose restart\n\n# Rebuild if needed\ndocker-compose up --build\n```\n\n**Claude Desktop Connection**:\n\n```bash\n# Verify tools are available\n./simplenote_mcp/scripts/verify_tools.sh\n\n# Monitor logs\n./simplenote_mcp/scripts/watch_logs.sh\n```\n\n### Diagnostic Commands\n\n```bash\n# Test connectivity\npython simplenote_mcp/tests/test_mcp_client.py\n\n# Check server status\n./simplenote_mcp/scripts/check_server_pid.sh\n\n# Clean up and restart\n./simplenote_mcp/scripts/cleanup_servers.sh\n```\n\n---\n\n## 📚 Development\n\n### Quick Setup with mcp-evals\n\n```bash\n# One-command setup including evaluations\n./setup-dev-env-with-evals.sh\n\n# Or manual setup\ngit clone https://github.com/docdyhr/simplenote-mcp-server.git\ncd simplenote-mcp-server\npip install -e \".[dev,test]\"\nnpm install  # For mcp-evals\n```\n\n### Local Development\n\n```bash\n# Run the server\npython simplenote_mcp_server.py\n\n# Run Python tests\npytest\n\n# Run mcp-evals\nnpm run eval:smoke    # Quick validation\nnpm run eval:basic    # Standard tests\nnpm run eval:all      # Full test suite\n\n# Code quality\nruff check .\nruff format .\nmypy simplenote_mcp\n```\n\n### Development Environment\n\nThe setup script creates:\n\n- Python development environment with all dependencies\n- Node.js environment for mcp-evals\n- Example configuration files\n- Pre-commit hooks\n- Validation for all evaluation files\n\n### Testing Strategy\n\n1. **Unit Tests**: Traditional Python pytest for core logic\n2. **Integration Tests**: MCP protocol compliance testing\n3. **Smoke Tests**: Quick validation of basic functionality\n4. **Evaluation Tests**: LLM-based assessment of real-world usage\n5. **Performance Tests**: Load and stress testing\n\n### Running MCP Evaluations\n\n#### Docker Method (Recommended)\nDue to potential permission issues with tsx, we recommend running MCP evaluations in Docker:\n\n```bash\n# Run smoke tests\n./scripts/run-evals-docker.sh smoke\n\n# Run basic evaluations\n./scripts/run-evals-docker.sh basic\n\n# Run comprehensive evaluations\n./scripts/run-evals-docker.sh comprehensive\n\n# Run all evaluations\n./scripts/run-evals-docker.sh all\n```\n\n#### Direct Method (if permissions allow)\n```bash\nnpm run eval:smoke\nnpm run eval:basic\nnpm run eval:comprehensive\nnpm run eval:all\n```\n\n### Docker Development\n\n```bash\n# Development with live code reload\ndocker-compose -f docker-compose.dev.yml up\n\n# Build and test\ndocker build -t simplenote-mcp-server:test .\ndocker run --rm simplenote-mcp-server:test --help\n```\n\n---\n\n## 🤝 Contributing\n\nContributions are welcome! Please read [CONTRIBUTING.md](./CONTRIBUTING.md) for guidelines.\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🔗 Related Projects\n\n- [Model Context Protocol](https://modelcontextprotocol.io/)\n- [MCP Example Servers](https://modelcontextprotocol.io/examples)\n\n---\n\n## ⭐ Support the Project\n\nIf you find this project helpful, please consider giving it a star on GitHub! Your support helps:\n\n- 🚀 **Increase visibility** for other developers who might benefit from this tool\n- 💪 **Motivate continued development** and maintenance\n- 📈 **Build community** around the Model Context Protocol ecosystem\n- 🛡️ **Validate trust** through community engagement\n\n[![GitHub stars](https://img.shields.io/github/stars/docdyhr/simplenote-mcp-server?style=social)](https://github.com/docdyhr/simplenote-mcp-server/stargazers)\n\n**[⭐ Star this repository](https://github.com/docdyhr/simplenote-mcp-server)** — it takes just one click and means a lot!\n\n---\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/docdyhr-simplenote-mcp-server-badge.png)](https://mseep.ai/app/docdyhr-simplenote-mcp-server)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "simplenote",
        "notes",
        "notetaking",
        "simplenote mcp",
        "simplenote notes",
        "manage simplenote"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "dragonjump--mcp-ARCknowledge": {
      "owner": "dragonjump",
      "name": "mcp-ARCknowledge",
      "url": "https://github.com/dragonjump/mcp-ARCknowledge",
      "imageUrl": "/freedevtools/mcp/pfp/dragonjump.webp",
      "description": "Manage and query a custom knowledge base by registering document sources, querying information, and aggregating results from multiple webhook endpoints. Simplifies knowledge management and enhances querying capabilities.",
      "stars": 2,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-16T16:46:03Z",
      "readme_content": "# MCP ArcKnowledge\n\n[![smithery badge](https://smithery.ai/badge/@dragonjump/mcp-ARCknowledge)](https://smithery.ai/server/@dragonjump/mcp-ARCknowledge)\n![arc knowledge MCP](https://github.com/dragonjump/mcp-ARCknowledge/raw/main/logo.jpg)\n\n## How it works?\n![arc knowledge diagram](https://github.com/dragonjump/mcp-ARCknowledge/raw/main/diagram.png)\n\n\nThis is a Model Context Protocol (MCP) server for your custom webhook endpoints (knowledgebase).\n\nWith this you can  you can easily manage and query your list of knowledge base(webhook endpoints).\nYou can add new document sources by registering their URLs, and optionally provide a description and API key.\n\nYou can also list all the registered document sources and view their details.\n \nWhen you're ready to ask/search, you can query the knowledge base with a text question  , specifying which sources to search or leaving it blank to search all of them. \n\nThe tool will then aggregate the results from the queried sources and provide them to you.\n\n\n### Prerequisites\n\n- Go\n- Python 3.6+\n- Anthropic Claude Desktop app (or Cursor or Cline)\n- UV (Python package manager), install with `curl -LsSf https://astral.sh/uv/install.sh | sh`\n \n\n## Concept\nImagine being able to bridge 1 unified setup where you can connect all your custom knowledge base endpoints webhook in one configuration, eliminating the need for multiple MCP servers.\n \n## Demo\n \n![arcknowledge demo cursor](https://github.com/dragonjump/mcp-ARCknowledge/raw/main/demo_video/arcknowledge-demo-1.gif) \n![arcknowledge demo cursor](https://github.com/dragonjump/mcp-ARCknowledge/raw/main/demo_video/arcknowledge-demo-2.gif) \n![arcknowledge demo cline](https://github.com/dragonjump/mcp-ARCknowledge/raw/main/demo-cline.gif) \n \n[See mcp cursor video](https://github.com/dragonjump/mcp-arcknowledge/tree/main/demo%20video)\n\n\n## Setup Installation\n\n### Installing via Smithery\n\nTo install ArcKnowledge for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@dragonjump/mcp-ARCknowledge):\n\n```bash\nnpx -y @smithery/cli install @dragonjump/mcp-ARCknowledge --client claude\n```\n\n1.**Clone repo**  \n```bash\ngit clone https://github.com/dragonjump/mcp-arcknowledge\ncd mcp-arcknowledge\n```\n\n \n2. **Configure endpoints** \nMake a copy or change`knowledge_document_sources.json`.\nSee `sample_endpoint` folder for references on current knowledge endpoints api schema supported. You may change the code as you wish to fit your need.\n\n3. **Connect to the MCP server**\n\n   Copy the below json with the appropriate {{PATH}} values:\n\n   ```json\n    {\n        \"mcpServers\": {\n            \"mcp-arcknowledge\": {\n                \"command\": \"cmd /c uv\",\n                \"args\": [\n                    \"--directory\",\n                    \"C:/Users/Acer/OneDrive/GitHub/YourDrive\",\n                    \"run\",\n                    \"main.py\"\n                ],\n                \"env\": {\n                    \"DOCUMENT_SOURCES_PATH\": \"C:/Users/Acer/OneDrive/GitHub/YourDrive/testcustomother.json\"\n                }\n            }\n        }\n    }\n   ```\nFor **Claude**, save this as `claude_desktop_config.json` in your Claude Desktop configuration directory at:\n\n   ```\n   ~/Library/Application Support/Claude/claude_desktop_config.json\n   \n   ```\n\nFor **Cursor**, save this as `mcp.json` in your Cursor configuration directory at:\n\n   ```\n   ~/.cursor/mcp.json\n   ```\n\nFor **cline**, save this as `cline_mcp_settings.json` in your configuration  \n\n4. **Restart Client: Claude Desktop / Cursor / Cline / Windsurf**\n   Open and restart your client ide for mcp. eg Claude/Cursor/Cline/etc\n\n\n### Windows Compatibility\n\nIf you're running this project on Windows, be aware that `go-sqlite3` requires **CGO to be enabled** in order to compile and work properly. By default, **CGO is disabled on Windows**, so you need to explicitly enable it and have a C compiler installed.\n\n#### Steps to get it working:\n\n1. **Install a C compiler**  \n   We recommend using [MSYS2](https://www.msys2.org/) to install a C compiler for Windows. After installing MSYS2, make sure to add the `ucrt64\\bin` folder to your `PATH`.  \n   → A step-by-step guide is available [here](https://code.visualstudio.com/docs/cpp/config-mingw).\n\n \n \n## Architecture Overview\n\nThis application consists of simple main component:\n \n**Python MCP Server** (`main.py`): A Python server implementing the Model Context Protocol (MCP), which provides standardized tools client to interact with data and invoke api call.\n\n### Data Storage\n\n- All storage is runtime local main python server.\n \n\n \n## Technical Details\n\n1. Client sends requests to the Python MCP server\n2. The MCP server lookup its runtime config knowledge base.\n3. Then based on your queries, it calls your knowledge base endpoint api,\n\n## Troubleshooting\n\n- If you encounter permission issues when running uv, you may need to add it to your PATH or use the full path to the executable.\n- Make sure both the Go application and the Python server are running for the integration to work properly.\n\n### Starting the Server\n1. Config\nRun the server in development mode:\n```bash\nfastmcp dev main.py\n```\n\nOr install it for use with Claude:\n```bash\nfastmcp install main.py\n```\n\n### Available Tools\n  \n\n#### 1. Default Loads knowledge list from knowledge_document_sources.json\nDefault loads knowledge sources from config\n``` \nknowledge_document_sources.json\n \n```\nYou may Load custom knowledge from mcp.json environment config\n\n```\n\n        \"env\": {\n            \"DOCUMENT_SOURCES_PATH\": \"C:/Users/Acer/OneDrive/Somewhere/YourDrive/your-custom.json\"\n        }\n```\n#### 2. List all  currently registered knowledge sources\nShows and explains the list of all registered knowledge sources.\n\n``` \neg. Show me my arcknowledge list \n \n```\n#### 3. Add New Knowledge Document Source  \nAdd new arcknowledge   endpoint url document sources. \nProvide url, description purpose and apikey(if any)\n\n``` \neg. Add new arcknowledge data source. Endpoint is http://something.com/api/123.\nPurpose is to handle questions on 123 topic. Api key is 'sk-2123123' \n \n```\n\n#### 4. Querying Specific Knowledge Doc Source\nQuery the arcknowledge base built from these sources using query_knowledge_base. \n\n``` \neg. Query for me my  knowledge base for product. Question is : Which is most expensive product? \n\n\neg. Query for me my  arcknowledge base for business. Question is :When is the business established? \n\neg. Query for me all my  arcknowledge base  . Question is :When is the business established? Which is most expensive product?\n```\n \n \n#### Tool Functions \n\n1.  `add_new_knowledge_document_source(url: str, description:str = None, apikey:str = None) -> str`\n    *   Registers a new document source URL, optionally with a description and API key.\n    *   Returns: Confirmation message with the new source ID.\n\n2.  `list_knowledge_document_sources() -> Dict[str, Dict[str, str]]`\n    *   Lists all registered document sources.\n    *   Returns: Dictionary mapping source IDs to their details (URL, description, API key).\n\n3.  `query_knowledge_base(query: str, source_ids: List[str] = [], image: str = '') -> str`\n    *   Queries specified document sources (or all if none specified) with a text query and optional image data.\n    *   Returns: Aggregated results from the queried sources.\n## Development\n\n### Crucial filesProject Structure\n\n```\nmcp-arcknowledge/\n├── main.py          # Main server implementation\n├── README.md           # Documentation\n├── requirements.txt    # Project dependencies\n```\n\n### Cursor AI MCP Configuration\n\n1. Create an `mcp.json` file in your project root:\n```json\n{\n    \"name\": \"mcp-webhook-ai-agent\",\n    \"version\": \"1.0.0\",\n    \"description\": \"Webhook AI agent with RAG capabilities\",\n    \"main\": \"main.py\",\n    \"tools\": [\n        {\n            \"name\": \"set_document_source\",\n            \"description\": \"Register a new document source URL for RAG operations\"\n        },\n        {\n            \"name\": \"list_document_sources\",\n            \"description\": \"List all registered document sources\"\n        },\n        {\n            \"name\": \"query_rag\",\n            \"description\": \"Query the specified document sources using RAG\"\n        },\n        {\n            \"name\": \"process_post_query\",\n            \"description\": \"Process a POST request with a query payload\"\n        }\n    ],\n    \"dependencies\": {\n        \"fastmcp\": \">=0.4.0\",\n        \"requests\": \">=2.31.0\",\n        \"pydantic\": \">=2.0.0\"\n    }\n}\n```\n\n2. Configure Cursor AI:\n   - Open Cursor AI settings\n   - Navigate to the MCP section\n   - Add the path to your `mcp.json` file\n   - Restart Cursor AI to apply changes\n\n3. Verify Configuration:\n```bash\n# Check if MCP is properly configured\nfastmcp check mcp.json\n\n# List available tools\nfastmcp list\n```\n\n### Adding New Features\n\n1. Define new models in `main.py`\n2. Add new tools using the `@mcp.tool()` decorator\n3. Update documentation as needed\n\n## License\nMIT\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a new Pull Request\n \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "webhook",
        "knowledge",
        "arcknowledge",
        "knowledge base",
        "knowledge management",
        "knowledge bases"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "ergut--mcp-logseq": {
      "owner": "ergut",
      "name": "mcp-logseq",
      "url": "https://github.com/ergut/mcp-logseq",
      "imageUrl": "/freedevtools/mcp/pfp/ergut.webp",
      "description": "Interact with LogSeq knowledge management system via its API to manage and retrieve information from graphs and pages.",
      "stars": 117,
      "forks": 13,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-28T08:41:00Z",
      "readme_content": "<div align=\"center\">\n  <img src=\"assets/images/logo.png\" alt=\"MCP LogSeq\" width=\"200\" height=\"200\">\n  <h1>MCP server for LogSeq</h1>\n  <p>MCP server to interact with LogSeq via its API. Enables Claude to read, create, and manage LogSeq pages through a comprehensive set of tools.</p>\n</div>\n\n## ✨ What You Can Do\n\nTransform your LogSeq knowledge base into an AI-powered workspace! This MCP server enables Claude to seamlessly interact with your LogSeq graphs.\n\n### 🎯 Real-World Examples\n\n**📊 Intelligent Knowledge Management**\n```\n\"Analyze all my project notes from the past month and create a status summary\"\n\"Find pages mentioning 'machine learning' and create a study roadmap\"\n\"Search for incomplete tasks across all my pages\"\n```\n\n**📝 Automated Content Creation**\n```\n\"Create a new page called 'Today's Standup' with my meeting notes\"\n\"Add today's progress update to my existing project timeline page\"  \n\"Create a weekly review page from my recent notes\"\n```\n\n**🔍 Smart Research & Analysis** \n```\n\"Compare my notes on React vs Vue and highlight key differences\"\n\"Find all references to 'customer feedback' and summarize themes\"\n\"Create a knowledge map connecting related topics across pages\"\n```\n\n**🤝 Meeting & Documentation Workflow**\n```\n\"Read my meeting notes and create individual task pages for each action item\"\n\"Get my journal entries from this week and create a summary page\"\n\"Search for 'Q4 planning' and organize all related content into a new overview page\"\n```\n\n### 💡 Key Benefits\n- **Zero Context Switching**: Claude works directly with your LogSeq data\n- **Preserve Your Workflow**: No need to export or copy content manually  \n- **Intelligent Organization**: AI-powered page creation, linking, and search\n- **Enhanced Productivity**: Automate repetitive knowledge work\n\n---\n\n## 🚀 Quick Start\n\n### Step 1: Enable LogSeq API\n1. **Settings** → **Features** → Check \"Enable HTTP APIs server\"\n2. Click the **API button (🔌)** in LogSeq → **\"Start server\"**\n3. **Generate API token**: API panel → \"Authorization tokens\" → Create new\n\n### Step 2: Add to Claude (No Installation Required!)\n\n#### Claude Code\n```bash\nclaude mcp add mcp-logseq \\\n  --env LOGSEQ_API_TOKEN=your_token_here \\\n  --env LOGSEQ_API_URL=http://localhost:12315 \\\n  -- uv run --with mcp-logseq mcp-logseq\n```\n\n#### Claude Desktop\nAdd to your config file (`Settings → Developer → Edit Config`):\n```json\n{\n  \"mcpServers\": {\n    \"mcp-logseq\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"--with\", \"mcp-logseq\", \"mcp-logseq\"],\n      \"env\": {\n        \"LOGSEQ_API_TOKEN\": \"your_token_here\",\n        \"LOGSEQ_API_URL\": \"http://localhost:12315\"\n      }\n    }\n  }\n}\n```\n\n### Step 3: Start Using!\n```\n\"Please help me organize my LogSeq notes. Show me what pages I have.\"\n```\n\n---\n\n## 🛠️ Available Tools\n\nThe server provides 6 comprehensive tools:\n\n| Tool | Purpose | Example Use |\n|------|---------|-------------|\n| **`list_pages`** | Browse your graph | \"Show me all my pages\" |\n| **`get_page_content`** | Read page content | \"Get my project notes\" |\n| **`create_page`** | Add new pages | \"Create a meeting notes page\" |  \n| **`update_page`** | Modify existing pages | \"Update my task list\" |\n| **`delete_page`** | Remove pages | \"Delete the old draft page\" |\n| **`search`** | Find content across graph | \"Search for 'productivity tips'\" |\n\n---\n\n## ⚙️ Prerequisites\n\n### LogSeq Setup\n- **LogSeq installed** and running\n- **HTTP APIs server enabled** (Settings → Features)\n- **API server started** (🔌 button → \"Start server\")  \n- **API token generated** (API panel → Authorization tokens)\n\n### System Requirements\n- **[uv](https://docs.astral.sh/uv/)** Python package manager\n- **MCP-compatible client** (Claude Code, Claude Desktop, etc.)\n\n---\n\n## 🔧 Configuration\n\n### Environment Variables\n- **`LOGSEQ_API_TOKEN`** (required): Your LogSeq API token\n- **`LOGSEQ_API_URL`** (optional): Server URL (default: `http://localhost:12315`)\n\n### Alternative Setup Methods\n\n#### Using .env file\n```bash\n# .env\nLOGSEQ_API_TOKEN=your_token_here\nLOGSEQ_API_URL=http://localhost:12315\n```\n\n#### System environment variables\n```bash\nexport LOGSEQ_API_TOKEN=your_token_here\nexport LOGSEQ_API_URL=http://localhost:12315\n```\n\n---\n\n## 🔍 Verification & Testing\n\n### Test LogSeq Connection\n```bash\nuv run --with mcp-logseq python -c \"\nfrom mcp_logseq.logseq import LogSeq\napi = LogSeq(api_key='your_token')\nprint(f'Connected! Found {len(api.list_pages())} pages')\n\"\n```\n\n### Verify MCP Registration\n```bash\nclaude mcp list  # Should show mcp-logseq\n```\n\n### Debug with MCP Inspector\n```bash\nnpx @modelcontextprotocol/inspector uv run --with mcp-logseq mcp-logseq\n```\n\n---\n\n## 🐛 Troubleshooting\n\n### Common Issues\n\n#### \"LOGSEQ_API_TOKEN environment variable required\"\n- ✅ Enable HTTP APIs in **Settings → Features**\n- ✅ Click **🔌 button** → **\"Start server\"** in LogSeq\n- ✅ Generate token in **API panel → Authorization tokens**\n- ✅ Verify token in your configuration\n\n#### \"spawn uv ENOENT\" (Claude Desktop)\nClaude Desktop can't find `uv`. Use the full path:\n\n```bash\nwhich uv  # Find your uv location\n```\n\nUpdate config with full path:\n```json\n{\n  \"mcpServers\": {\n    \"mcp-logseq\": {\n      \"command\": \"/Users/username/.local/bin/uv\",\n      \"args\": [\"run\", \"--with\", \"mcp-logseq\", \"mcp-logseq\"],\n      \"env\": { \"LOGSEQ_API_TOKEN\": \"your_token_here\" }\n    }\n  }\n}\n```\n\n**Common uv locations:**\n- Curl install: `~/.local/bin/uv`\n- Homebrew: `/opt/homebrew/bin/uv` \n- Pip install: Check with `which uv`\n\n#### Connection Issues\n- ✅ Confirm LogSeq is running\n- ✅ Verify API server is **started** (not just enabled)\n- ✅ Check port 12315 is accessible\n- ✅ Test with verification command above\n\n---\n\n## 👩‍💻 Development\n\nFor local development, testing, and contributing, see **[DEVELOPMENT.md](DEVELOPMENT.md)**.\n\n---\n\n<div align=\"center\">\n  <p><strong>Ready to supercharge your LogSeq workflow with AI?</strong></p>\n  <p>⭐ <strong>Star this repo</strong> if you find it helpful!</p>\n</div>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "logseq",
        "knowledge",
        "api",
        "logseq knowledge",
        "logseq interact",
        "interact logseq"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "feuerdev--keep-mcp": {
      "owner": "feuerdev",
      "name": "keep-mcp",
      "url": "https://github.com/feuerdev/keep-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/feuerdev.webp",
      "description": "Manage Google Keep notes by creating, updating, searching, and deleting them through an integrated interface. Supports seamless interaction with Google Keep for productivity enhancement.",
      "stars": 47,
      "forks": 16,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-29T00:24:33Z",
      "readme_content": "# keep-mcp\n\nMCP server for Google Keep\n\n![keep-mcp](https://github.com/user-attachments/assets/f50c4ae6-4d35-4bb6-a494-51c67385f1b6)\n\n## How to use\n\n1. Add the MCP server to your MCP servers:\n\n```json\n  \"mcpServers\": {\n    \"keep-mcp-pipx\": {\n      \"command\": \"pipx\",\n      \"args\": [\n        \"run\",\n        \"keep-mcp\"\n      ],\n      \"env\": {\n        \"GOOGLE_EMAIL\": \"Your Google Email\",\n        \"GOOGLE_MASTER_TOKEN\": \"Your Google Master Token - see README.md\"\n      }\n    }\n  }\n```\n\n2. Add your credentials:\n* `GOOGLE_EMAIL`: Your Google account email address\n* `GOOGLE_MASTER_TOKEN`: Your Google account master token\n\nCheck https://gkeepapi.readthedocs.io/en/latest/#obtaining-a-master-token and https://github.com/simon-weber/gpsoauth?tab=readme-ov-file#alternative-flow for more information.\n\n## Features\n\n* `find`: Search for notes based on a query string\n* `create_note`: Create a new note with title and text (automatically adds keep-mcp label)\n* `update_note`: Update a note's title and text\n* `delete_note`: Mark a note for deletion\n\nBy default, all destructive and modification operations are restricted to notes that have were created by the MCP server (i.e. have the keep-mcp label). Set `UNSAFE_MODE` to `true` to bypass this restriction.\n\n```\n\"env\": {\n  ...\n  \"UNSAFE_MODE\": \"true\"\n}\n```\n\n## Publishing\n\nTo publish a new version to PyPI:\n\n1. Update the version in `pyproject.toml`\n2. Build the package:\n   ```bash\n   pipx run build\n   ```\n3. Upload to PyPI:\n   ```bash\n   pipx run twine upload --repository pypi dist/*\n   ```\n\n## Troubleshooting\n\n* If you get \"DeviceManagementRequiredOrSyncDisabled\" check https://admin.google.com/ac/devices/settings/general and turn \"Turn off mobile management (Unmanaged)\"\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "manage",
        "google notes",
        "google productivity",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "freestylefly--mcp-server-weread": {
      "owner": "freestylefly",
      "name": "mcp-server-weread",
      "url": "https://github.com/freestylefly/mcp-server-weread",
      "imageUrl": "/freedevtools/mcp/pfp/freestylefly.webp",
      "description": "Bridge WeChat reading data with AI for access to notes and reading insights. Extract and analyze reading notes through intelligent conversations.",
      "stars": 469,
      "forks": 52,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-03T12:59:18Z",
      "readme_content": "<p align=\"center\"><img src= \"https://cdn.canghecode.com/blog/%E5%BE%AE%E4%BF%A1%E8%AF%BB%E4%B9%A6MCP%20bac.png\" alt=\"MaxKB\" width=\"300\" /></p>\n<h3 align=\"center\">一个为微信读书提供 MCP 服务的工具</h3>\n<p align=\"center\">\n  <a href=\"https://opensource.org/license/MIT\"><img src=\"https://img.shields.io/github/license/freestylefly/mcp-server-weread?color=rgb(25%2C%20121%2C%20255)\" alt=\"The MIT License\"></a>\n  <a href=\"\"><img src=\"https://img.shields.io/github/forks/freestylefly/mcp-server-weread?color=green\" alt=\"Forks\"></a>\n  <a href=\"https://canghecode.com/\"><img src=\"https://img.shields.io/badge/介绍-%E5%AE%98%E7%BD%91-green\" alt=\"Official\"></a>\n  <a href=\"https://github.com/laigeoffer/pmhub\"><img src=\"https://img.shields.io/github/stars/freestylefly/mcp-server-weread?style=flat-square&color=rgb(25%2C%20121%2C%20255)\" alt=\"Stars\"></a>    \n  <a href=\"https://mp.weixin.qq.com/s/NQslbUBgWIBMyvTIa3PfYQ\"><img src=\"https://img.shields.io/badge/WeReadMCP-教程-blue\" alt=\"Experience\"></a>  \n</p>\n\n<hr/>\n\n微信读书 MCP Server 是一个为微信读书提供 MCP（Model Context Protocol）服务的工具，支持将微信读书的书籍、笔记和划线数据提供给支持MCP的大语言模型客户端，如Cursor、Claude Desktop。\n\n## 功能特点\n\n- 从微信读书获取书架信息\n- 搜索书架中的图书\n- 获取图书的笔记和划线\n- 获取图书的热门书评\n- 支持按章节组织笔记和划线\n- 与支持MCP协议的LLM客户端无缝集成\n\n## 主要工具\n\n1. **get_bookshelf** - 获取用户书架上所有书籍\n   - 返回书籍基本信息，包括书名、作者、译者和分类等\n\n2. **search_books** - 通过关键词检索用户书架上的书籍\n   - 支持模糊匹配和精确匹配\n   - 可选是否包含详细信息\n   - 可设置最大结果数量\n\n3. **get_book_notes_and_highlights** - 获取指定书籍的所有划线和笔记\n   - 支持按章节组织结果\n   - 支持筛选划线样式\n   - 返回结构化的数据以便于LLM理解\n\n4. **get_book_best_reviews** - 获取指定书籍的热门书评\n   - 支持设置返回数量\n   - 支持分页浏览\n   - 包含评分、点赞数和评论者信息\n\n## 安装与使用\n\n### 先决条件\n\n- Node.js 16.x 或更高版本\n- 微信读书账号和有效的Cookie\n\n### 安装教程\n\n详见：\n- [用微信读书MCP在Cursor中构建私人图书馆，太哇塞了！](https://mp.weixin.qq.com/s/NQslbUBgWIBMyvTIa3PfYQ)\n- [Weread MCP Server 使用指南](https://chenge.ink/article/post20250505)\n\n### 与Claude Desktop集成\n\n有多种方式可以与Claude Desktop集成：\n\n#### 方式一：通过 npx 使用（最简单，推荐）\n1. 打开Claude Desktop\n2. 进入设置 -> MCP配置\n3. 添加工具，使用以下JSON配置：\n   ```json\n   {\n     \"mcpServers\": {\n       \"mcp-server-weread\": {\n         \"command\": \"npx\",\n         \"args\": [\"-y\", \"mcp-server-weread\"],\n         \"env\": {\n           // 方式1：使用Cookie Cloud（推荐）\n           \"CC_URL\": \"https://cc.chenge.ink\",  // Cookie Cloud的URL\n           \"CC_ID\": \"您的ID\",                   // Cookie Cloud的ID\n           \"CC_PASSWORD\": \"您的密码\"            // Cookie Cloud的密码\n           \n           // 或方式2：直接提供Cookie\n           // \"WEREAD_COOKIE\": \"您的微信读书Cookie\"\n         }\n       }\n     }\n   }\n   ```\n\n#### 方式二：全局安装后使用\n\n1. 全局安装包：\n   ```bash\n   npm install -g mcp-server-weread\n   ```\n\n2. 在Claude配置中使用：\n   ```json\n   {\n     \"mcpServers\": {\n       \"mcp-server-weread\": {\n         \"command\": \"mcp-server-weread\",\n         \"env\": {\n           // 同上方式配置环境变量\n         }\n       }\n     }\n   }\n   ```\n\n> 提示：直接在Claude配置中提供环境变量的方式更加方便，无需设置.env文件，推荐使用。\n\n## CookieCloud 配置说明\n为了解决 Cookie 频繁过期，需要重新获取并更新环境变量的问题。本项目支持 [CookieCloud](https://github.com/easychen/CookieCloud) 服务来自动同步和更新 Cookie。CookieCloud 是一个开源的跨浏览器 Cookie 同步工具，支持自建服务器。\n\n### 配置步骤：\n安装浏览器插件\nEdge商店：[CookieCloud for Edge](https://microsoftedge.microsoft.com/addons/detail/cookiecloud/bffenpfpjikaeocaihdonmgnjjdpjkeo)\nChrome商店：[CookieCloud for Chrome](https://chromewebstore.google.com/detail/cookiecloud/ffjiejobkoibkjlhjnlgmcnnigeelbdl)\n\n### 配置 CookieCloud 插件\n服务器地址：使用默认服务器 https://cc.chenge.ink 或填入自建服务器地址\n点击 \"自动生成密码\"\n同步域名关键词中填入 \"weread\"\n点击\"保存\" ，然后点击 \"手动同步\"确保配置生效\n[可选] 如果需要插件自动保活，可以在保活中填入 https://weread.qq.com，插件会自动刷新 Cookie\n\n在MCP Json中配置CookieCloud变量：\nCC_URL=你的CookieCloud服务器地址 （或使用我的默认服务器地址 https://cc.chenge.ink ）\nCC_ID=你的CookieCloud用户UUID\nCC_PASSWORD=你的CookieCloud密码\n注意：配置 CookieCloud 后，系统会优先使用 CookieCloud 获取 Cookie，获取失败才会使用 WEREAD_COOKIE 环境变量的值。\n\n## Cookie获取方法\n微信读书的Cookie可以通过以下步骤获取：\n1. 使用Chrome浏览器登录[微信读书网页版](https://weread.qq.com/)\n2. 按F12打开开发者工具，切换到Network标签页\n3. 刷新页面，在请求列表中找到weread.qq.com的请求\n4. 在Headers中找到Cookie字段，复制其完整内容\n5. 将复制的内容添加到MCP Json 或 .env文件的WEREAD_COOKIE变量中\n\n## 使用示例\n以下是一些与LLM对话的示例：\n\n**获取书架信息**\n```\n用户: 帮我查看我的微信读书书架\nLLM: 我将获取您的微信读书书架信息。\n[LLM调用get_bookshelf工具]\n我从您的微信读书书架获取到了208本书籍。以下是部分书籍：\n1. 《隐藏的自我》- 大卫·伊格曼\n2. 《思考，快与慢》- 丹尼尔·卡尼曼\n3. 《人类简史》- 尤瓦尔·赫拉利\n...\n```\n\n**搜索特定书籍**\n```\n用户: 帮我找关于心理学的书\nLLM: 我将搜索您书架上与心理学相关的书籍。\n[LLM调用search_books工具，参数为keyword=\"心理学\"]\n在您的书架上，我找到了3本与心理学相关的书籍：\n1. 《思考，快与慢》- 丹尼尔·卡尼曼（进度：75%）\n2. 《乌合之众》- 古斯塔夫·勒庞（进度：50%）\n3. 《心理学与生活》- 理查德·格里格（进度：30%）\n您想了解哪一本书的更多信息？\n```\n\n**获取笔记和划线**\n```\n用户: 帮我整理《思考，快与慢》这本书的笔记\nLLM: 我将获取《思考，快与慢》的笔记和划线。\n[LLM调用search_books工具，找到书籍ID]\n[LLM调用get_book_notes_and_highlights工具]\n以下是您在《思考，快与慢》中的笔记和划线（按章节组织）：\n\n第一章：系统1和系统2\n- 划线：「系统1的运行是无意识且快速的，不怎么费脑力，没有感觉，完全处于自主控制状态。」\n- 您的笔记：「系统1负责直觉和快速判断，系统2负责缓慢的理性思考。」\n\n第三章：锚定效应\n- 划线：「锚定效应指的是在不确定情境下进行数字估计时，会过度受到事先接触的不相干数字的影响。」\n...\n```\n\n**获取热门书评**\n```\n用户: 这本《原则》有哪些热门书评？\nLLM: 我会为您查找《原则》的热门书评。\n[LLM调用search_books工具，找到书籍ID]\n[LLM调用get_book_best_reviews工具]\n以下是《原则》的热门书评：\n\n1. 评论者\"思考者\"（评分：5星）：\n   \"这是一本关于如何思考的书。达利欧将自己多年的经验总结为可操作的原则，帮助我们做出更好的决策。特别喜欢他关于'痛苦+反思=进步'的观点，非常实用。\"\n   👍 182 | 💬 23\n\n2. 评论者\"投资学习者\"（评分：4星）：\n   \"桥水基金创始人的思想精华，值得反复阅读。书中的工作原则部分对管理者特别有帮助，建议先读生活原则，再读工作原则。\"\n   👍 94 | 💬 12\n...\n```\n\n## 九、友情链接\n\n- [mcp-server-weread](https://github.com/ChenyqThu/mcp-server-weread) ：🚀一个为微信读书提供MCP（Model Context Protocol）服务的工具，支持将微信读书的书籍、笔记和划线数据提供给支持MCP的大语言模型客户端，如Claude Desktop。\n- [CodeCanvas](https://github.com/freestylefly/CodeCanvas) ：📚本代码仓库是作者苍何多年从事一线互联网Java开发的学习历程技术汇总，旨在为大家提供一个清晰详细的学习教程，侧重点更倾向编写Java核心内容。💪🏻\n- [PmHub](https://github.com/laigeoffer/pmhub) ：🔥PmHub 是一套基于 SpringCloud & LLM 的微服务智能项目管理系统，这个项目旨在帮助小伙伴们快速掌握微服务/分布式项目的架构设计和开发流程，如果想在校招或者社招中拿到一个满意的 offer，PmHub 将是一个非常 nice 的选择。\n\n## 十、鸣谢\n\n此项目 fork 自 ChenyqThu 的[mcp-server-weread](https://github.com/ChenyqThu/mcp-server-weread)项目，做了一些小修改，突然就🔥了，这里也请大家去作者GitHub原项目上star，另外ChenyqThu新的更新我也会做同步，项目也会保持使用教程的更新，感谢大家的喜欢。\n\n## 十一、star 趋势图\n\n[![Star History Chart](https://api.star-history.com/svg?repos=freestylefly/mcp-server-weread&type=Date)](https://star-history.com/#freestylefly/mcp-server-weread&Date)\n\n## 十二、公众号\n\n微信搜 **苍何** 或扫描下方二维码关注苍何的原创公众号，回复 **AI** 即可和 5000+ 好友一同探讨AI，一同学习MCP。\n\n![苍何微信公众号](https://cdn.tobebetterjavaer.com/stutymore/%E6%89%AB%E7%A0%81_%E6%90%9C%E7%B4%A2%E8%81%94%E5%90%88%E4%BC%A0%E6%92%AD%E6%A0%B7%E5%BC%8F-%E6%A0%87%E5%87%86%E8%89%B2%E7%89%88.png)\n\n## 十三、许可证\n\n[MIT License (MIT)](https://opensource.org/licenses/MIT)<hr/>\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nCopyright (c) 2025-2026 mcp-server-weread\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "ai",
        "notes",
        "notes intelligent",
        "notes reading",
        "reading notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "jacksteamdev--obsidian-mcp-tools": {
      "owner": "jacksteamdev",
      "name": "obsidian-mcp-tools",
      "url": "https://github.com/jacksteamdev/obsidian-mcp-tools",
      "imageUrl": "/freedevtools/mcp/pfp/jacksteamdev.webp",
      "description": "Connects AI applications like Claude Desktop to an Obsidian vault, enabling access to notes, execution of templates, and semantic searches while maintaining data security and privacy.",
      "stars": 363,
      "forks": 51,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T17:51:00Z",
      "readme_content": "# MCP Tools for Obsidian\n\n[![GitHub release (latest by date)](https://img.shields.io/github/v/release/jacksteamdev/obsidian-mcp-tools)](https://github.com/jacksteamdev/obsidian-mcp-tools/releases/latest)\n[![Build status](https://img.shields.io/github/actions/workflow/status/jacksteamdev/obsidian-mcp-tools/release.yml)](https://github.com/jacksteamdev/obsidian-mcp-tools/actions)\n[![License](https://img.shields.io/github/license/jacksteamdev/obsidian-mcp-tools)](LICENSE)\n\n[Features](#features) | [Installation](#installation) | [Configuration](#configuration) | [Troubleshooting](#troubleshooting) | [Security](#security) | [Development](#development) | [Support](#support)\n\n> **🔄 Seeking Project Maintainers**\n> \n> This project is actively seeking dedicated maintainers to take over development and community management. The project will remain under the current GitHub account for Obsidian plugin store compliance, with new maintainers added as collaborators.\n> \n> **Interested?** Join our [Discord community](https://discord.gg/q59pTrN9AA) or check our [maintainer requirements](CONTRIBUTING.md#maintainer-responsibilities).\n> \n> **Timeline**: Applications open until **September 15, 2025**. Selection by **September 30, 2025**.\n\nMCP Tools for Obsidian enables AI applications like Claude Desktop to securely access and work with your Obsidian vault through the Model Context Protocol (MCP). MCP is an open protocol that standardizes how AI applications can interact with external data sources and tools while maintaining security and user control. [^2]\n\nThis plugin consists of two parts:\n1. An Obsidian plugin that adds MCP capabilities to your vault\n2. A local MCP server that handles communication with AI applications\n\nWhen you install this plugin, it will help you set up both components. The MCP server acts as a secure bridge between your vault and AI applications like Claude Desktop. This means AI assistants can read your notes, execute templates, and perform semantic searches - but only when you allow it and only through the server's secure API. The server never gives AI applications direct access to your vault files. [^3]\n\n> **Privacy Note**: When using Claude Desktop with this plugin, your conversations with Claude are not used to train Anthropic's models by default. [^1]\n\n## Features\n\nWhen connected to an MCP client like Claude Desktop, this plugin enables:\n\n- **Vault Access**: Allows AI assistants to read and reference your notes while maintaining your vault's security [^4]\n- **Semantic Search**: AI assistants can search your vault based on meaning and context, not just keywords [^5]\n- **Template Integration**: Execute Obsidian templates through AI interactions, with dynamic parameters and content generation [^6]\n\nAll features require an MCP-compatible client like Claude Desktop, as this plugin provides the server component that enables these integrations. The plugin does not modify Obsidian's functionality directly - instead, it creates a secure bridge that allows AI applications to work with your vault in powerful ways.\n\n## Prerequisites\n\n### Required\n\n- [Obsidian](https://obsidian.md/) v1.7.7 or higher\n- [Claude Desktop](https://claude.ai/download) installed and configured\n- [Local REST API](https://github.com/coddingtonbear/obsidian-local-rest-api) plugin installed and configured with an API key\n\n### Recommended\n\n- [Templater](https://silentvoid13.github.io/Templater/) plugin for enhanced template functionality\n- [Smart Connections](https://smartconnections.app/) plugin for semantic search capabilities\n\n## Installation\n\n> [!Important]\n> This plugin requires a secure server component that runs locally on your computer. The server is distributed as a signed executable, with its complete source code available in `packages/mcp-server/`. For details about our security measures and code signing process, see the [Security](#security) section.\n\n1. Install the plugin from Obsidian's Community Plugins\n2. Enable the plugin in Obsidian settings\n3. Open the plugin settings\n4. Click \"Install Server\" to download and configure the MCP server\n\nClicking the install button will:\n\n- Download the appropriate MCP server binary for your platform\n- Configure Claude Desktop to use the server\n- Set up necessary permissions and paths\n\n### Installation Locations\n\n- **Server Binary**: {vault}/.obsidian/plugins/obsidian-mcp-tools/bin/\n- **Log Files**:\n  - macOS: ~/Library/Logs/obsidian-mcp-tools\n  - Windows: %APPDATA%\\obsidian-mcp-tools\\logs\n  - Linux: ~/.local/share/obsidian-mcp-tools/logs\n\n## Configuration\n\nAfter clicking the \"Install Server\" button in the plugin settings, the plugin will automatically:\n\n1. Download the appropriate MCP server binary\n2. Use your Local REST API plugin's API key\n3. Configure Claude Desktop to use the MCP server\n4. Set up appropriate paths and permissions\n\nWhile the configuration process is automated, it requires your explicit permission to install the server binary and modify the Claude Desktop configuration. No additional manual configuration is required beyond this initial setup step.\n\n## Troubleshooting\n\nIf you encounter issues:\n\n1. Check the plugin settings to verify:\n   - All required plugins are installed\n   - The server is properly installed\n   - Claude Desktop is configured\n2. Review the logs:\n   - Open plugin settings\n   - Click \"Open Logs\" under Resources\n   - Look for any error messages or warnings\n3. Common Issues:\n   - **Server won't start**: Ensure Claude Desktop is running\n   - **Connection errors**: Verify Local REST API plugin is configured\n   - **Permission errors**: Try reinstalling the server\n\n## Security\n\n### Binary Distribution\n\n- All releases are built using GitHub Actions with reproducible builds\n- Binaries are signed and attested using SLSA provenance\n- Release workflows are fully auditable in the repository\n\n### Runtime Security\n\n- The MCP server runs with minimal required permissions\n- All communication is encrypted\n- API keys are stored securely using platform-specific credential storage\n\n### Binary Verification\n\nThe MCP server binaries are published with [SLSA Provenance attestations](https://slsa.dev/provenance/v1), which provide cryptographic proof of where and how the binaries were built. This helps ensure the integrity and provenance of the binaries you download.\n\nTo verify a binary using the GitHub CLI:\n\n1. Install GitHub CLI:\n\n   ```bash\n   # macOS (Homebrew)\n   brew install gh\n\n   # Windows (Scoop)\n   scoop install gh\n\n   # Linux\n   sudo apt install gh  # Debian/Ubuntu\n   ```\n\n2. Verify the binary:\n   ```bash\n   gh attestation verify --owner jacksteamdev <binary path or URL>\n   ```\n\nThe verification will show:\n\n- The binary's SHA256 hash\n- Confirmation that it was built by this repository's GitHub Actions workflows\n- The specific workflow file and version tag that created it\n- Compliance with SLSA Level 3 build requirements\n\nThis verification ensures the binary hasn't been tampered with and was built directly from this repository's source code.\n\n### Reporting Security Issues\n\nPlease report security vulnerabilities via our [security policy](SECURITY.md).\nDo not report security vulnerabilities in public issues.\n\n## Development\n\nThis project uses a monorepo structure with feature-based architecture. For detailed project architecture documentation, see [.clinerules](.clinerules).\n\n### Using Cline\n\nSome code in this project was implemented using the AI coding agent [Cline](https://cline.bot). Cline uses `cline_docs/` and the `.clinerules` file to understand project architecture and patterns when implementing new features.\n\n### Workspace\n\nThis project uses a [Bun](https://bun.sh/) workspace structure:\n\n```\npackages/\n├── mcp-server/        # Server implementation\n├── obsidian-plugin/   # Obsidian plugin\n└── shared/           # Shared utilities and types\n```\n\n### Building\n\n1. Install dependencies:\n   ```bash\n   bun install\n   ```\n2. Build all packages:\n   ```bash\n   bun run build\n   ```\n3. For development:\n   ```bash\n   bun run dev\n   ```\n\n### Requirements\n\n- [bun](https://bun.sh/) v1.1.42 or higher\n- TypeScript 5.0+\n\n## Contributing\n\n**Before contributing, please read our [Contributing Guidelines](CONTRIBUTING.md) including our community standards and behavioral expectations.**\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Run tests:\n   ```bash\n   bun test\n   ```\n5. Submit a pull request\n\nWe welcome genuine contributions but maintain strict community standards. Be respectful and constructive in all interactions.\n\n## Support\n\n- 💬 [Join our Discord](https://discord.gg/q59pTrN9AA) for questions, discussions, and community support\n- [Open an issue](https://github.com/jacksteamdev/obsidian-mcp-tools/issues) for bug reports and feature requests\n\n**Please read our [Contributing Guidelines](CONTRIBUTING.md) before posting.** We maintain high community standards and have zero tolerance for toxic behavior.\n\n## Changelog\n\nSee [GitHub Releases](https://github.com/jacksteamdev/obsidian-mcp-tools/releases) for detailed changelog information.\n\n## License\n\n[MIT License](LICENSE)\n\n## Footnotes\n\n[^1]: For information about Claude data privacy and security, see [Claude AI's data usage policy](https://support.anthropic.com/en/articles/8325621-i-would-like-to-input-sensitive-data-into-free-claude-ai-or-claude-pro-who-can-view-my-conversations)\n[^2]: For more information about the Model Context Protocol, see [MCP Introduction](https://modelcontextprotocol.io/introduction)\n[^3]: For a list of available MCP Clients, see [MCP Example Clients](https://modelcontextprotocol.io/clients)\n[^4]: Requires Obsidian plugin Local REST API\n[^5]: Requires Obsidian plugin Smart Connections\n[^6]: Requires Obsidian plugin Templater\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "obsidian",
        "tools",
        "jacksteamdev",
        "jacksteamdev obsidian",
        "obsidian mcp",
        "desktop obsidian"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "jeanibarz--knowledge-base-mcp-server": {
      "owner": "jeanibarz",
      "name": "knowledge-base-mcp-server",
      "url": "https://github.com/jeanibarz/knowledge-base-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/jeanibarz.webp",
      "description": "Retrieve and list content from various knowledge bases with enhanced semantic search capabilities for efficient information access and management.",
      "stars": 26,
      "forks": 6,
      "license": "The Unlicense",
      "language": "TypeScript",
      "updated_at": "2025-09-28T11:50:44Z",
      "readme_content": "# Knowledge Base MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@jeanibarz/knowledge-base-mcp-server)](https://smithery.ai/server/@jeanibarz/knowledge-base-mcp-server)\nThis MCP server provides tools for listing and retrieving content from different knowledge bases.\n\n<a href=\"https://glama.ai/mcp/servers/n0p6v0o0a4\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/n0p6v0o0a4/badge\" alt=\"Knowledge Base Server MCP server\" />\n</a>\n\n## Setup Instructions\n\nThese instructions assume you have Node.js and npm installed on your system.\n\n### Installing via Smithery\n\nTo install Knowledge Base Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@jeanibarz/knowledge-base-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @jeanibarz/knowledge-base-mcp-server --client claude\n```\n\n### Manual Installation\n**Prerequisites**\n\n*   [Node.js](https://nodejs.org/) (version 16 or higher)\n*   [npm](https://www.npmjs.com/) (Node Package Manager)\n\n1.  **Clone the repository:**\n\n    ```bash\n    git clone <repository_url>\n    cd knowledge-base-mcp-server\n    ```\n\n2.  **Install dependencies:**\n\n    ```bash\n    npm install\n    ```\n\n3.  **Configure environment variables:**\n\n    This server supports two embedding providers: **Ollama** (recommended for reliability) and **HuggingFace** (fallback option).\n\n    ### Option 1: Ollama Configuration (Recommended)\n    \n    *   Set `EMBEDDING_PROVIDER=ollama` to use local Ollama embeddings\n    *   Install [Ollama](https://ollama.ai/) and pull an embedding model: `ollama pull dengcao/Qwen3-Embedding-0.6B:Q8_0`\n    *   Configure the following environment variables:\n        ```bash\n        EMBEDDING_PROVIDER=ollama\n        OLLAMA_BASE_URL=http://localhost:11434  # Default Ollama URL\n        OLLAMA_MODEL=dengcao/Qwen3-Embedding-0.6B:Q8_0          # Default embedding model\n        KNOWLEDGE_BASES_ROOT_DIR=$HOME/knowledge_bases\n        ```\n\n    ### Option 2: HuggingFace Configuration (Fallback)\n    \n    *   Set `EMBEDDING_PROVIDER=huggingface` or leave unset (default)\n    *   Obtain a free API key from [HuggingFace](https://huggingface.co/)\n    *   Configure the following environment variables:\n        ```bash\n        EMBEDDING_PROVIDER=huggingface          # Optional, this is the default\n        HUGGINGFACE_API_KEY=your_api_key_here\n        HUGGINGFACE_MODEL_NAME=sentence-transformers/all-MiniLM-L6-v2\n        KNOWLEDGE_BASES_ROOT_DIR=$HOME/knowledge_bases\n        ```\n\n    ### Additional Configuration\n    \n    *   The server supports the `FAISS_INDEX_PATH` environment variable to specify the path to the FAISS index. If not set, it will default to `$HOME/knowledge_bases/.faiss`.\n    *   You can set these environment variables in your `.bashrc` or `.zshrc` file, or directly in the MCP settings.\n\n4.  **Build the server:**\n\n    ```bash\n    npm run build\n    ```\n\n5.  **Add the server to the MCP settings:**\n\n    *   Edit the `cline_mcp_settings.json` file located at `/home/jean/.vscode-server/data/User/globalStorage/saoudrizwan.claude-dev/settings/`.\n    *   Add the following configuration to the `mcpServers` object:\n\n    *   **Option 1: Ollama Configuration**\n\n    ```json\n    \"knowledge-base-mcp-ollama\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/knowledge-base-mcp-server/build/index.js\"\n      ],\n      \"disabled\": false,\n      \"autoApprove\": [],\n      \"env\": {\n        \"KNOWLEDGE_BASES_ROOT_DIR\": \"/path/to/knowledge_bases\",\n        \"EMBEDDING_PROVIDER\": \"ollama\",\n        \"OLLAMA_BASE_URL\": \"http://localhost:11434\",\n        \"OLLAMA_MODEL\": \"dengcao/Qwen3-Embedding-0.6B:Q8_0\"\n      },\n      \"description\": \"Retrieves similar chunks from the knowledge base based on a query using Ollama.\"\n    },\n    ```\n\n    *   **Option 2: HuggingFace Configuration**\n\n    ```json\n    \"knowledge-base-mcp-huggingface\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/knowledge-base-mcp-server/build/index.js\"\n      ],\n      \"disabled\": false,\n      \"autoApprove\": [],\n      \"env\": {\n        \"KNOWLEDGE_BASES_ROOT_DIR\": \"/path/to/knowledge_bases\",\n        \"EMBEDDING_PROVIDER\": \"huggingface\",\n        \"HUGGINGFACE_API_KEY\": \"YOUR_HUGGINGFACE_API_KEY\",\n        \"HUGGINGFACE_MODEL_NAME\": \"sentence-transformers/all-MiniLM-L6-v2\"\n      },\n      \"description\": \"Retrieves similar chunks from the knowledge base based on a query using HuggingFace.\"\n    },\n    ```\n\n    *   **Note:** You only need to add one of the above configurations (either Ollama or HuggingFace) to your `cline_mcp_settings.json` file, depending on your preferred embedding provider.\n    ```\n\n    *   Replace `/path/to/knowledge-base-mcp-server` with the actual path to the server directory.\n    *   Replace `/path/to/knowledge_bases` with the actual path to the knowledge bases directory.\n\n6.  **Create knowledge base directories:**\n\n    *   Create subdirectories within the `KNOWLEDGE_BASES_ROOT_DIR` for each knowledge base (e.g., `company`, `it_support`, `onboarding`).\n    *   Place text files (e.g., `.txt`, `.md`) containing the knowledge base content within these subdirectories.\n\n*   The server recursively reads all text files (e.g., `.txt`, `.md`) within the specified knowledge base subdirectories.\n*   The server skips hidden files and directories (those starting with a `.`).\n*   For each file, the server calculates the SHA256 hash and stores it in a file with the same name in a hidden `.index` subdirectory. This hash is used to determine if the file has been modified since the last indexing.\n*   The file content is splitted into chunks using the `MarkdownTextSplitter` from `langchain/text_splitter`.\n*   The content of each chunk is then added to a FAISS index, which is used for similarity search.\n*   The FAISS index is automatically initialized when the server starts. It checks for changes in the knowledge base files and updates the index accordingly.\n\n## Usage\n\nThe server exposes two tools:\n\n*   `list_knowledge_bases`: Lists the available knowledge bases.\n*   `retrieve_knowledge`: Retrieves similar chunks from the knowledge base based on a query. Optionally, if a knowledge base is specified, only that one is searched; otherwise, all available knowledge bases are considered. By default, at most 10 document chunks are returned with a score below a threshold of 2. A different threshold can optionally be provided using the `threshold` parameter.\n\nYou can use these tools through the MCP interface.\n\nThe `retrieve_knowledge` tool performs a semantic search using a FAISS index. The index is automatically updated when the server starts or when a file in a knowledge base is modified.\n\nThe output of the `retrieve_knowledge` tool is a markdown formatted string with the following structure:\n\n````markdown\n## Semantic Search Results\n\n**Result 1:**\n\n[Content of the most similar chunk]\n\n**Source:**\n```json\n{\n  \"source\": \"[Path to the file containing the chunk]\"\n}\n```\n\n---\n\n**Result 2:**\n\n[Content of the second most similar chunk]\n\n**Source:**\n```json\n{\n  \"source\": \"[Path to the file containing the chunk]\"\n}\n```\n\n> **Disclaimer:** The provided results might not all be relevant. Please cross-check the relevance of the information.\n````\n\nEach result includes the content of the most similar chunk, the source file, and a similarity score.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "knowledge",
        "semantic",
        "search",
        "knowledge base",
        "knowledge bases",
        "semantic search"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "joelhooks--logseq-mcp-tools": {
      "owner": "joelhooks",
      "name": "logseq-mcp-tools",
      "url": "https://github.com/joelhooks/logseq-mcp-tools",
      "imageUrl": "/freedevtools/mcp/pfp/joelhooks.webp",
      "description": "Integrate Logseq knowledge graphs with AI assistants to manage notes and journal entries effectively. Retrieve content from specific pages, generate journal summaries, and explore linked pages.",
      "stars": 51,
      "forks": 10,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-24T04:06:05Z",
      "readme_content": "# Logseq MCP Tools\n\n[![smithery badge](https://smithery.ai/badge/@joelhooks/logseq-mcp-tools)](https://smithery.ai/server/@joelhooks/logseq-mcp-tools)\n\nA Model Context Protocol (MCP) server that provides AI assistants with structured access to your Logseq knowledge graph.\n\n## Overview\n\nThis project creates an MCP server that allows AI assistants like Claude to interact with your Logseq knowledge base. It provides tools for:\n\n- Retrieving a list of all pages\n- Getting content from specific pages\n- Generating journal summaries for flexible date ranges\n- Extracting linked pages and exploring connections\n\n## Installation\n\n### Installing via Smithery\n\nTo install Logseq Tools for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@joelhooks/logseq-mcp-tools):\n\n```bash\nnpx -y @smithery/cli install @joelhooks/logseq-mcp-tools --client claude\n```\n\n1. Clone this repository\n2. Install dependencies using npm, yarn, or pnpm:\n\n```bash\n# Using npm\nnpm install\n\n# Using yarn\nyarn install\n\n# Using pnpm\npnpm install\n```\n\n3. Copy the environment template and configure your Logseq token:\n\n```bash\ncp .env.template .env\n# Edit .env with your Logseq authentication token\n```\n\n## Configuration\n\nThis project includes a `.env.template` file that you can copy and rename to `.env`.\n\nYou can find your Logseq auth token by:\n\n1. Opening Logseq\n2. Enabling the HTTP API in Settings > Features > Enable HTTP API\n3. Setting your authentication token in Settings > Features > HTTP API Authentication Token\n\n## Usage\n\n### Running the MCP Server\n\nThe server can be started using:\n\n```bash\n# Using the npm script\nnpm start\n\n# Or directly with tsx\nnpx tsx index.ts\n```\n\n### Connecting with Claude\n\n#### Claude Desktop\n\nFollow the [Claude MCP Quickstart guide](https://modelcontextprotocol.io/quickstart/user):\n\n1. **Important**: Install Node.js globally via Homebrew (or whatever):\n\n```bash\nbrew install node\n```\n\n2. Install the Claude desktop app\n3. Open the Claude menu and select \"Settings...\"\n4. Click on \"Developer\" in the left sidebar, then click \"Edit Config\"\n5. This will open your `claude_desktop_config.json` file. Replace its contents with:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"logseq\": {\n\t\t\t\"command\": \"npx\",\n\t\t\t\"args\": [\"tsx\", \"/path/to/your/index.ts\"]\n\t\t}\n\t}\n}\n```\n\n**IMPORTANT:** Replace `/path/to/your/index.ts` with the **exact** absolute path to your index.ts file (e.g., `/Users/username/Code/logseq-mcp-tools/index.ts`)\n\n6. Save the file and restart Claude Desktop\n\nNow you can chat with Claude and ask it to use your Logseq data:\n\n- \"Show me my recent journal entries\"\n- \"Summarize my notes from last week\"\n- \"Find all pages related to [topic]\"\n\n#### Claude in Cursor\n\nFollow the [Cursor MCP documentation](https://docs.cursor.com/context/model-context-protocol):\n\n1. Open Cursor\n2. Add a new MCP service from settings\n3. Enter the following command:\n\n```\nnpx tsx \"/path/to/index.ts\"\n```\n\n4. Give your service a name like \"Logseq Tools\"\n\nNow you can use Claude in Cursor with your Logseq data.\n\n#### Claude in Anthropic API (generic)\n\nWhen using the Claude API or CLI tools, you can add the MCP service with:\n\n```\nclaude mcp add \"logseq\" npx tsx \"/path/to/index.ts\"\n```\n\n## Available Tools\n\n### getAllPages\n\nRetrieves a list of all pages in your Logseq graph.\n\n### getPage\n\nGets the content of a specific page.\n\nParameters:\n\n- `pageName`: The name of the page to retrieve\n\n### getJournalSummary\n\nGenerates a summary of journal entries for a specified date range.\n\nParameters:\n\n- `dateRange`: Natural language date range like \"today\", \"this week\", \"last month\", \"this year\", etc.\n\nThis tool will:\n\n- Collect journal entries in the specified range\n- Format them in a readable way\n- Extract and analyze referenced pages/concepts\n- Show the most frequently referenced concepts\n\n### createPage\n\nCreates a new page in your Logseq graph.\n\nParameters:\n\n- `pageName`: Name for the new page\n- `content`: (Optional) Initial content for the page\n\n### searchPages\n\nSearches for pages by name.\n\nParameters:\n\n- `query`: Search query to filter pages by name\n\n### getBacklinks\n\nFinds all pages that reference a specific page.\n\nParameters:\n\n- `pageName`: The page name for which to find backlinks\n\n### analyzeGraph\n\nPerforms a comprehensive analysis of your knowledge graph.\n\nParameters:\n\n- `daysThreshold`: (Optional) Number of days to look back for \"recent\" content (default: 30)\n\nFeatures:\n\n- Identifies frequently referenced pages\n- Tracks recent updates\n- Discovers page clusters and connections\n- Lists outstanding tasks\n- Suggests potential updates needed\n\n### findKnowledgeGaps\n\nAnalyzes your knowledge graph to identify potential gaps and areas for improvement.\n\nParameters:\n\n- `minReferenceCount`: (Optional) Minimum references to consider (default: 3)\n- `includeOrphans`: (Optional) Include orphaned pages in analysis (default: true)\n\nFeatures:\n\n- Identifies missing pages that are frequently referenced\n- Finds underdeveloped pages that need expansion\n- Lists orphaned pages with no incoming links\n- Provides summary statistics\n\n### analyzeJournalPatterns\n\nAnalyzes patterns in your journal entries over time.\n\nParameters:\n\n- `timeframe`: (Optional) Time period to analyze (e.g., \"last 30 days\", \"this year\")\n- `includeMood`: (Optional) Analyze mood patterns if present (default: true)\n- `includeTopics`: (Optional) Analyze topic patterns (default: true)\n\nFeatures:\n\n- Topic trends and evolution\n- Mood pattern analysis\n- Habit tracking statistics\n- Project progress tracking\n\n### smartQuery\n\nExecutes natural language queries using Logseq's DataScript capabilities.\n\nParameters:\n\n- `request`: Natural language description of what you want to find\n- `includeQuery`: (Optional) Include the generated Datalog query in results\n- `advanced`: (Optional) Use advanced analysis features\n\nFeatures:\n\n- Page connections and relationships\n- Content clustering\n- Task progress analysis\n- Concept evolution tracking\n\n### suggestConnections\n\nUses AI to analyze your graph and suggest interesting connections.\n\nParameters:\n\n- `minConfidence`: (Optional) Minimum confidence score for suggestions (0-1, default: 0.6)\n- `maxSuggestions`: (Optional) Maximum number of suggestions to return (default: 10)\n- `focusArea`: (Optional) Topic or area to focus suggestions around\n\nFeatures:\n\n- Discovers potential connections between pages\n- Identifies knowledge synthesis opportunities\n- Suggests exploration paths based on recent interests\n- Provides confidence scores for suggestions\n\n## Development\n\nThe server is built using:\n\n- Model Context Protocol TypeScript SDK\n- Zod for parameter validation\n- Logseq HTTP API for data access\n\nTo extend with new tools, add additional `server.tool()` definitions in `index.ts`.\n\n## Troubleshooting\n\n### Common Issues\n\n#### Node.js Version Managers (fnm, nvm, etc.)\n\nIf you're using a Node.js version manager like fnm or nvm, Claude Desktop won't be able to access the Node.js binaries properly, as it runs outside of your shell environment where the PATH is modified.\n\n**Solution**: Install a system-wide Node.js with Homebrew:\n\n```bash\nbrew install node\n```\n\nThis ensures Node.js is available to all applications, including Claude Desktop.\n\n#### Basic Troubleshooting Steps\n\n- Ensure Logseq is running with the HTTP API enabled\n- Verify your auth token in `.env` matches the one set in Logseq\n- Check that the path to your index.ts file is correct in the Claude configuration\n- Try running `npx tsx index.ts` directly in your terminal to verify it works\n\n#### Viewing Logs in Claude Desktop\n\nMonitor logs in real-time:\n\n```bash\n# macOS\ntail -n 20 -F ~/Library/Logs/Claude/mcp*.log\n```\n\nFor more detailed debugging information, refer to the [official MCP debugging documentation](https://modelcontextprotocol.io/docs/tools/debugging).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "logseq",
        "notetaking",
        "journal",
        "logseq knowledge",
        "joelhooks logseq",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "jonpojonpo--comfy-ui-mcp-server": {
      "owner": "jonpojonpo",
      "name": "comfy-ui-mcp-server",
      "url": "https://github.com/jonpojonpo/comfy-ui-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/jonpojonpo.webp",
      "description": "Connect and manage notes using a streamlined interface that supports adding, summarizing, and accessing notes through a custom URI scheme. It features a single prompt for summarizing all notes with customizable detail levels.",
      "stars": 4,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-01T09:47:24Z",
      "readme_content": "# comfy-ui-mcp-server MCP server\n\nA server for connnecting to a local comfyUI\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"comfy-ui-mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"E:\\Claude\\comfy-ui-mcp-server\",\n        \"run\",\n        \"comfy-ui-mcp-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"comfy-ui-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"comfy-ui-mcp-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory E:\\Claude\\comfy-ui-mcp-server run comfy-ui-mcp-server\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "ui",
        "manage notes",
        "notes using",
        "summarizing notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "kimbj0204--khoj": {
      "owner": "kimbj0204",
      "name": "khoj",
      "url": "https://github.com/kimbj0204/khoj",
      "imageUrl": "/freedevtools/mcp/pfp/kimbj0204.webp",
      "description": "Khoj integrates with various local and online LLMs to enhance productivity through automated research and content generation. It supports accessing information from diverse formats seamlessly, functioning as a versatile AI assistant.",
      "stars": 0,
      "forks": 0,
      "license": "GNU Affero General Public License v3.0",
      "language": "",
      "updated_at": "2025-03-28T09:06:24Z",
      "readme_content": "<p align=\"center\"><img src=\"https://assets.khoj.dev/khoj-logo-sideways-1200x540.png\" width=\"230\" alt=\"Khoj Logo\"></p>\n\n<div align=\"center\">\n\n[![test](https://github.com/khoj-ai/khoj/actions/workflows/test.yml/badge.svg)](https://github.com/khoj-ai/khoj/actions/workflows/test.yml)\n[![docker](https://github.com/khoj-ai/khoj/actions/workflows/dockerize.yml/badge.svg)](https://github.com/khoj-ai/khoj/pkgs/container/khoj)\n[![pypi](https://github.com/khoj-ai/khoj/actions/workflows/pypi.yml/badge.svg)](https://pypi.org/project/khoj/)\n[![discord](https://img.shields.io/discord/1112065956647284756?style=plastic&label=discord)](https://discord.gg/BDgyabRM6e)\n\n</div>\n\n<div align=\"center\">\n<b>Your AI second brain</b>\n</div>\n\n<br />\n\n<div align=\"center\">\n\n[📑 Docs](https://docs.khoj.dev)\n<span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n[🌐 Web](https://khoj.dev)\n<span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n[🔥 App](https://app.khoj.dev)\n<span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n[💬 Discord](https://discord.gg/BDgyabRM6e)\n<span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n[✍🏽 Blog](https://blog.khoj.dev)\n\n</div>\n\n***\n\n### 🎁 New\n* Start any message with `/research` to try out the experimental research mode with Khoj.\n* Anyone can now [create custom agents](https://blog.khoj.dev/posts/create-agents-on-khoj/) with tunable personality, tools and knowledge bases.\n* [Read](https://blog.khoj.dev/posts/evaluate-khoj-quality/) about Khoj's excellent performance on modern retrieval and reasoning benchmarks.\n\n***\n\n## Overview\n\n[Khoj](https://khoj.dev) is a personal AI app to extend your capabilities. It smoothly scales up from an on-device personal AI to a cloud-scale enterprise AI.\n\n- Chat with any local or online LLM (e.g llama3, qwen, gemma, mistral, gpt, claude, gemini).\n- Get answers from the internet and your docs (including image, pdf, markdown, org-mode, word, notion files).\n- Access it from your Browser, Obsidian, Emacs, Desktop, Phone or Whatsapp.\n- Create agents with custom knowledge, persona, chat model and tools to take on any role.\n- Automate away repetitive research. Get personal newsletters and smart notifications delivered to your inbox.\n- Find relevant docs quickly and easily using our advanced semantic search.\n- Generate images, talk out loud, play your messages.\n- Khoj is open-source, self-hostable. Always.\n- Run it privately on [your computer](https://docs.khoj.dev/get-started/setup) or try it on our [cloud app](https://app.khoj.dev).\n\n***\n\n## See it in action\n\n![demo_chat](https://github.com/khoj-ai/khoj/blob/master/documentation/assets/img/quadratic_equation_khoj_web.gif?raw=true)\n\nGo to https://app.khoj.dev to see Khoj live.\n\n## Full feature list\nYou can see the full feature list [here](https://docs.khoj.dev/category/features).\n\n## Self-Host\n\nTo get started with self-hosting Khoj, [read the docs](https://docs.khoj.dev/get-started/setup).\n\n## Enterprise\n\nKhoj is available as a cloud service, on-premises, or as a hybrid solution. To learn more about Khoj Enterprise, [visit our website](https://khoj.dev/teams).\n\n## Contributors\nCheers to our awesome contributors! 🎉\n\n<a href=\"https://github.com/khoj-ai/khoj/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=khoj-ai/khoj\" />\n</a>\n\nMade with [contrib.rocks](https://contrib.rocks).\n\n### Interested in Contributing?\n\nWe are always looking for contributors to help us build new features, improve the project documentation, or fix bugs. If you're interested, please see our [Contributing Guidelines](https://docs.khoj.dev/contributing/development) and check out our [Contributors Project Board](https://github.com/orgs/khoj-ai/projects/4).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "notetaking",
        "automated",
        "ai assistant",
        "notetaking knowledge",
        "productivity automated"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "kj455--mcp-kibela": {
      "owner": "kj455",
      "name": "mcp-kibela",
      "url": "https://github.com/kj455/mcp-kibela",
      "imageUrl": "/freedevtools/mcp/pfp/kj455.webp",
      "description": "Integrate with Kibela to search and fetch notes, enabling AI models to access and reference content stored in Kibela securely.",
      "stars": 12,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-05-01T23:49:03Z",
      "readme_content": "# mcp-kibela 🗒️\n\n[![smithery badge](https://smithery.ai/badge/@kj455/mcp-kibela)](https://smithery.ai/server/@kj455/mcp-kibela)\n[![npm version](https://badge.fury.io/js/@kj455%2Fmcp-kibela.svg)](https://www.npmjs.com/package/@kj455/mcp-kibela)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nA Model Context Protocol (MCP) server implementation that enables AI assistants to search and reference Kibela content. This setup allows AI models like Claude to securely access information stored in Kibela.\n\n## Features 🚀\n\nThe mcp-kibela server provides the following features:\n\n- **Note Search**: Search Kibela notes by keywords\n- **My Notes**: Fetch your latest notes\n- **Note Content**: Get note content and comments by ID\n- **Note by Path**: Get note content by path\n- **Create Note**: Create a new note\n- **Update Note Content**: Update note content by note id\n\n---\n\n## Prerequisites 📋\n\nBefore you begin, ensure you have:\n\n- Node.js (v18 or higher)\n- MCP Client (Claude Desktop, Cursor, etc.)\n- Kibela Access Token ([How to get a token](https://support.kibe.la/hc/ja/articles/360036089931-API%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%83%88%E3%83%BC%E3%82%AF%E3%83%B3%E3%81%AE%E5%8F%96%E5%BE%97%E6%96%B9%E6%B3%95%E3%82%92%E6%95%99%E3%81%88%E3%81%A6%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84))\n- Git (if building from source)\n\n## Installation 🛠️\n\n### Usage with Cursor\n\n```json\n{\n  \"kibela\": {\n    \"command\": \"docker\",\n    \"args\": [\n      \"run\",\n      \"-i\",\n      \"--rm\",\n      \"-e\",\n      \"KIBELA_TEAM\",\n      \"-e\",\n      \"KIBELA_TOKEN\",\n      \"ghcr.io/kj455/mcp-kibela:latest\"\n    ],\n    \"env\": {\n      \"KIBELA_TEAM\": \"your-team-name from https://[team-name].kibe.la\",\n      \"KIBELA_TOKEN\": \"your-token\"\n    }\n  }\n}\n```\n\n### Usage with VSCode\n\n```json\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"kibela_team\",\n        \"description\": \"Kibela team name\",\n        \"password\": false\n      },\n      {\n        \"type\": \"promptString\",\n        \"id\": \"kibela_token\",\n        \"description\": \"Kibela token\",\n        \"password\": true\n      },\n    ],\n    \"servers\": {\n      \"kibela\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"-i\",\n          \"--rm\",\n          \"-e\",\n          \"KIBELA_TEAM\",\n          \"-e\",\n          \"KIBELA_TOKEN\",\n          \"ghcr.io/kj455/mcp-kibela:latest\"\n        ],\n        \"env\": {\n          \"KIBELA_TEAM\": \"${input:kibela_team}\",\n          \"KIBELA_TOKEN\": \"${input:kibela_token}\"\n        }\n      }\n    }\n  }\n}\n```\n\n\n### Usage with Claude Desktop\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-kibela\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"KIBELA_TEAM\",\n        \"-e\",\n        \"KIBELA_TOKEN\",\n        \"ghcr.io/kj455/mcp-kibela:latest\"\n      ],\n      \"env\": {\n        \"KIBELA_TEAM\": \"your-team-name from https://[team-name].kibe.la\",\n        \"KIBELA_TOKEN\": \"your-token\"\n      }\n    }\n  }\n}\n```\n\n### Using Smithery\n\n```bash\nnpx -y @smithery/cli install @kj455/mcp-kibela --client claude\n```\n\n## Environment Variables\n\nThe following environment variables are required:\n\n- `KIBELA_TEAM`: Your Kibela team name (required). You can find it from the URL of your Kibela team page. e.g. https://[team-name].kibe.la\n- `KIBELA_TOKEN`: Your Kibela API token (required)\n\n## Contributing\n\nAny contributions are welcome!\n\n## Development\n\n1. Use `npm run build:watch` to build the project in watch mode.\n\n```bash\nnpm run build:watch\n```\n\n2. Use `npx @modelcontextprotocol/inspector` to inspect the MCP server.\n\n```bash\nnpx @modelcontextprotocol/inspector node /path/to/mcp-kibela/dist/index.js\n```\n\n\n## License 📄\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kibela",
        "notetaking",
        "notes",
        "kibela search",
        "kibela securely",
        "stored kibela"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "koladev32--mcp-discord-chat": {
      "owner": "koladev32",
      "name": "mcp-discord-chat",
      "url": "https://github.com/koladev32/mcp-discord-chat",
      "imageUrl": "/freedevtools/mcp/pfp/koladev32.webp",
      "description": "Stores and summarizes notes in a Discord chat environment using a custom note URI scheme. Users can add notes and create summaries based on stored content with options for detail level.",
      "stars": 0,
      "forks": 5,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-02-13T13:15:26Z",
      "readme_content": "# mcp-discord-chat MCP server\n\nA MCP server project\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"mcp-discord-chat\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/koladev/speakeasy-projects/mcp-discord-chat\",\n        \"run\",\n        \"mcp-discord-chat\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"mcp-discord-chat\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-discord-chat\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/speakeasy-projects/mcp-discord-chat run mcp-discord-chat\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "discord",
        "notes",
        "notetaking",
        "notes discord",
        "discord chat",
        "summarizes notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "kujenga--zotero-mcp": {
      "owner": "kujenga",
      "name": "zotero-mcp",
      "url": "https://github.com/kujenga/zotero-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kujenga.webp",
      "description": "Access and manage your Zotero library through a Model Context Protocol server, enabling interactions with AI assistants. It provides a focused set of functionalities to streamline library management and integration.",
      "stars": 115,
      "forks": 18,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-25T14:33:13Z",
      "readme_content": "# Model Context Protocol server for Zotero\n\n[![GitHub branch status](https://img.shields.io/github/check-runs/kujenga/zotero-mcp/main)](https://github.com/kujenga/zotero-mcp/actions)\n[![PyPI - Version](https://img.shields.io/pypi/v/zotero-mcp)](https://pypi.org/project/zotero-mcp/)\n\nThis project is a python server that implements the [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) for [Zotero](https://www.zotero.org/), giving you access to your Zotero library within AI assistants. It is intended to implement a small but maximally useful set of interactions with Zotero for use with [MCP clients](https://modelcontextprotocol.io/clients).\n\n<a href=\"https://glama.ai/mcp/servers/jknz38ntu4\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/jknz38ntu4/badge\" alt=\"Zotero Server MCP server\" />\n</a>\n\n## Features\n\nThis MCP server provides the following tools:\n\n- `zotero_search_items`: Search for items in your Zotero library using a text query\n- `zotero_item_metadata`: Get detailed metadata information about a specific Zotero item\n- `zotero_item_fulltext`: Get the full text of a specific Zotero item (i.e. PDF contents)\n\nThese can be discovered and accessed through any MCP client or through the [MCP Inspector](https://modelcontextprotocol.io/docs/tools/inspector).\n\nEach tool returns formatted text containing relevant information from your Zotero items, and AI assistants such as Claude can use them sequentially, searching for items then retrieving their metadata or text content.\n\n## Installation\n\nThis server can either run against either a [local API offered by the Zotero desktop application](https://groups.google.com/g/zotero-dev/c/ElvHhIFAXrY/m/fA7SKKwsAgAJ)) or through the [Zotero Web API](https://www.zotero.org/support/dev/web_api/v3/start). The local API can be a bit more responsive, but requires that the Zotero app be running on the same computer with the API enabled. To enable the local API, do the following steps:\n\n1. Open Zotero and open \"Zotero Settings\"\n1. Under the \"Advanced\" tab, check the box that says \"Allow other applications on this computer to communicate with Zotero\".\n\n> [!IMPORTANT]\n> For access to the `/fulltext` endpoint on the local API which allows retrieving the full content of items in your library, you'll need to install a [Zotero Beta Build](https://www.zotero.org/support/beta_builds) (as of 2025-03-30). Once 7.1 is released this will no longer be the case. See https://github.com/zotero/zotero/pull/5004 for more information. If you do not want to do this, use the Web API instead.\n\nTo use the Zotero Web API, you'll need to create an API key and find your Library ID (usually your User ID) in your Zotero account settings here: <https://www.zotero.org/settings/keys>\n\nThese are the available configuration options:\n\n- `ZOTERO_LOCAL=true`: Use the local Zotero API (default: false, see note below)\n- `ZOTERO_API_KEY`: Your Zotero API key (not required for the local API)\n- `ZOTERO_LIBRARY_ID`: Your Zotero library ID (your user ID for user libraries, not required for the local API)\n- `ZOTERO_LIBRARY_TYPE`: The type of library (user or group, default: user)\n\n### [`uvx`](https://docs.astral.sh/uv/getting-started/installation/) with Local Zotero API\n\nTo use this with Claude Desktop and a direct python install with [`uvx`](https://docs.astral.sh/uv/getting-started/installation/), add the following to the `mcpServers` configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"zotero\": {\n      \"command\": \"uvx\",\n      \"args\": [\"--upgrade\", \"zotero-mcp\"],\n      \"env\": {\n        \"ZOTERO_LOCAL\": \"true\",\n        \"ZOTERO_API_KEY\": \"\",\n        \"ZOTERO_LIBRARY_ID\": \"\"\n      }\n    }\n  }\n}\n```\n\nThe `--upgrade` flag is optional and will pull the latest version when new ones are available. If you don't have `uvx` installed you can use `pipx run` instead, or clone this repository locally and use the instructions in [Development](#development) below.\n\n### Docker with Zotero Web API\n\nIf you want to run this MCP server in a Docker container, you can use the following configuration, inserting your API key and library ID:\n\n```json\n{\n  \"mcpServers\": {\n    \"zotero\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"ZOTERO_API_KEY=PLACEHOLDER\",\n        \"-e\", \"ZOTERO_LIBRARY_ID=PLACEHOLDER\",\n        \"ghcr.io/kujenga/zotero-mcp:main\"\n      ],\n    }\n  }\n}\n```\n\nTo update to a newer version, run `docker pull ghcr.io/kujenga/zotero-mcp:main`. It is also possible to use the docker-based installation to talk to the local Zotero API, but you'll need to modify the above command to ensure that there is network connectivity to the Zotero application's local API interface.\n\n## Development\n\nInformation on making changes and contributing to the project.\n\n1. Clone this repository\n1. Install dependencies with [uv](https://docs.astral.sh/uv/) by running: `uv sync`\n1. Create a `.env` file in the project root with the environment variables above\n\nStart the [MCP Inspector](https://modelcontextprotocol.io/docs/tools/inspector) for local development:\n\n```bash\nnpx @modelcontextprotocol/inspector uv run zotero-mcp\n```\n\nTo test the local repository against Claude Desktop, run `echo $PWD/.venv/bin/zotero-mcp` in your shell within this directory, then set the following within your Claude Desktop configuration\n```json\n{\n  \"mcpServers\": {\n    \"zotero\": {\n      \"command\": \"/path/to/zotero-mcp/.venv/bin/zotero-mcp\"\n      \"env\": {\n        // Whatever configuration is desired.\n      }\n    }\n  }\n}\n```\n\n### Running Tests\n\nTo run the test suite:\n\n```bash\nuv run pytest\n```\n\n### Docker Development\n\nBuild the container image with this command:\n\n```sh\ndocker build . -t zotero-mcp:local\n```\n\nTo test the container with the MCP inspector, run the following command:\n\n```sh\nnpx @modelcontextprotocol/inspector \\\n    -e ZOTERO_API_KEY=$ZOTERO_API_KEY \\\n    -e ZOTERO_LIBRARY_ID=$ZOTERO_LIBRARY_ID \\\n    docker run --rm -i \\\n        --env ZOTERO_API_KEY \\\n        --env ZOTERO_LIBRARY_ID \\\n        zotero-mcp:local\n```\n\n## Relevant Documentation\n\n- https://modelcontextprotocol.io/tutorials/building-mcp-with-llms\n- https://github.com/modelcontextprotocol/python-sdk\n- https://pyzotero.readthedocs.io/en/latest/\n- https://www.zotero.org/support/dev/web_api/v3/start\n- https://modelcontextprotocol.io/llms-full.txt can be utilized by LLMs\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "zotero",
        "library",
        "protocol",
        "zotero library",
        "manage zotero",
        "zotero mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "lucasoeth--mitmproxy-mcp": {
      "owner": "lucasoeth",
      "name": "mitmproxy-mcp",
      "url": "https://github.com/lucasoeth/mitmproxy-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/lucasoeth.webp",
      "description": "Store and summarize notes with a simple note storage system featuring a custom note URI scheme. Provides functionality to add notes and generate summaries with different detail levels.",
      "stars": 6,
      "forks": 5,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-01T03:04:28Z",
      "readme_content": "# mitmproxy-mcp MCP server\n\nA MCP server project\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"mitmproxy-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/lucas/Coding/mitmproxy-mcp\",\n        \"run\",\n        \"mitmproxy-mcp\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"mitmproxy-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mitmproxy-mcp\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/lucas/Coding/mitmproxy-mcp run mitmproxy-mcp\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "mitmproxy",
        "summarize notes",
        "note storage",
        "notes generate"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "m-siles--branch-thinking": {
      "owner": "m-siles",
      "name": "branch-thinking",
      "url": "https://github.com/m-siles/branch-thinking",
      "imageUrl": "/freedevtools/mcp/pfp/m-siles.webp",
      "description": "Manage branching lines of thought with features for navigation, cross-references, insight generation, and priority tracking based on confidence and connections.",
      "stars": 40,
      "forks": 12,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-30T23:21:39Z",
      "readme_content": "# Branch Thinking\n\nAn MCP server that implements branch-based thought navigation, with support for:\n- Multiple branches of thought\n- Branch navigation (list, focus, history)\n- Cross-references between related thoughts\n- Insight generation from key points\n- Branch priority tracking\n\nThis is based on the `sequential-thinking` tool available here:\nhttps://github.com/modelcontextprotocol/servers/tree/main/src/sequentialthinking\n\n## Features\n\n- **Branch Management**: Create and navigate between different lines of thought\n- **Cross References**: Link related thoughts across branches with typed relationships\n- **Insights**: Automatically generate insights from key points in thoughts\n- **Priority Tracking**: Track branch priorities based on confidence and connections\n\n## Commands\n\n- `list`: Show all branches with their current status\n- `focus [branchId]`: Switch focus to a specific branch\n- `history [branchId?]`: Show the history of thoughts in a branch\n\n## Installation\nPlace this project in your custom MCP tool directory.\n\n```bash\nnpm install\nnpm run build \n```\n\nAdd to your `claude_desktop_config.json`:\n```json\n\"branch-thinking\": {\n  \"command\": \"node\",\n  \"args\": [\n    \"/your-custom-mcp-dir-here/branch-thinking/dist/index.js\"\n  ]\n}\n```\n\n## Tips\nClaude often will not use tools unless explicitly prompted to do so.\n\nIf you want to use this tool without being prompted, add to either your Claude Profile Settings (or a system prompt) something like so:\n\n\n_If I ask you to \"think step by step,\" \"think before you respond,\" or \"use chain of thought,\" that means use the branch-thinking tool. Don't hesitate to use the branch-thinking tool on your own if you think your response would benefit from multiple steps._\n\n## Credits\nI can't pretend that I wrote most of this code. Most of it was generated by Claude. The concept was my own, and so were testing, fixes, and implementation. \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "branching",
        "branch",
        "thinking",
        "branch thinking",
        "thinking manage",
        "manage branching"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "marcelmarais--obsidian-mcp-server": {
      "owner": "marcelmarais",
      "name": "obsidian-mcp-server",
      "url": "https://github.com/marcelmarais/obsidian-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/marcelmarais.webp",
      "description": "Facilitates interaction with Obsidian vaults by enabling reading, writing, and managing notes and todos through natural language commands, all while allowing direct filesystem access even when the Obsidian app is not running.",
      "stars": 17,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-29T09:07:11Z",
      "readme_content": "# Obsidian MCP Server\n\nA lightweight [Model Context Protocol (MCP)](https://modelcontextprotocol.io) server that enables AI assistants like Cursor & Claude to read from and write to your Obsidian vault.\n\n## Example Interactions\n\n- \"Create a new note for standup tomorrow describing the code changes I've made today\" (should also use Git)\n- \"Check my notes about project ideas\"\n- \"Check what todos I have related to refactoring\"\n\n## Tools\n\n### Read\n\n1. **getAllFilenames**\n\n   - Gets a list of all filenames in the Obsidian vault\n   - Useful for discovering what files are available\n2. **readMultipleFiles**\n\n   - Retrieves the contents of specified files from the Obsidian vault\n   - Supports exact filenames, partial filenames, or case-insensitive matches\n   - Each file's content is prefixed with '# File: filename' for clear identification\n3. **getOpenTodos**\n\n   - Retrieves all open TODO items from markdown files in the Obsidian vault\n   - Finds unchecked checkbox items (lines containing '- [ ] ')\n   - Returns them with their file locations\n\n### Write\n\n1. **updateFileContent**\n   - Updates the content of a specified file in the Obsidian vault with new markdown content\n   - If the file doesn't exist, it will be created\n   - Automatically creates any necessary directories\n\n## Install & build\n\n```bash\nnpm install obsidian-mcp-server\nnpm run build\n```\n\n## Integrating with Claude Desktop and Cursor\n\nTo use your MCP server with Claude Desktop add it to your Claude configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"obsidian\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"obsidian-mcp-server/build/index.js\",\n        \"/path/to/your/vault\"\n      ]\n    }\n  }\n}\n```\n\nFor Cursor go to the MCP tab `Cursor Settings` (command + shift + J). Add a server with this command:\n\n```bash\nnode obsidian-mcp-server/build/index.js /path/to/your/vault\n```\n\n## Comparison with Other Solutions\n\nWhile this implementation is intentionally lightweight, other solutions like [jacksteamdev/obsidian-mcp-tools](https://github.com/jacksteamdev/obsidian-mcp-tools) offer a more feature-rich approach as an Obsidian plugin.\n\nThis standalone server has the advantage of direct filesystem access without requiring the Obsidian application to be running.\n\n## Resources\n\n- [Model Context Protocol Documentation](https://modelcontextprotocol.io)\n- [MCP Servers Repository](https://github.com/modelcontextprotocol/servers)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "obsidian",
        "notetaking",
        "notes",
        "obsidian mcp",
        "obsidian app",
        "access obsidian"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "markacianfrani--mcp-notes": {
      "owner": "markacianfrani",
      "name": "mcp-notes",
      "url": "https://github.com/markacianfrani/mcp-notes",
      "imageUrl": "/freedevtools/mcp/pfp/markacianfrani.webp",
      "description": "A personal knowledge management system that captures and organizes daily notes into a searchable format using AI-assisted categorization and summarization. It integrates with MCP-compatible clients to enhance productivity and manage fragmented knowledge effectively.",
      "stars": 5,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-12T15:16:16Z",
      "readme_content": "# 📚 MCP Notes\n\nA personal knowledge management system built on the Model Context Protocol (MCP) that transforms daily notes into organized, searchable knowledge.\n\n## 🚀 Usage\n\n### 🛠️ Manual Setup\n\n1. **Clone the repository**\n\n   ```bash\n   git clone git@github.com:markacianfrani/mcp-notes.git\n   cd mcp-notes\n   npm i\n   npm run build\n   ```\n\n2. **Setup MCP**\n\n### 🖥️ Claude Desktop\n\nAdd to your claude-desktop-config.json:\n\n```json\n\"notes\": {\n    \"command\": \"node\",\n    \"args\": [\n        \"path/to/this/repo/mcp-notes/dist/index.js\",\n        \"path/to/your/notes\"\n    ],\n},\n```\n\n## 🌟 Project Vision\n\nMCP Notes aims to solve the problem of knowledge fragmentation by creating a system where daily thoughts, accomplishments, and insights can be:\n\n1. 📥 Captured quickly with minimal friction\n2. 🗂️ Organized automatically into meaningful structures\n3. 🧠 Synthesized into higher-level knowledge\n4. 🔍 Retrieved easily when needed\n\nThe goal is to build an external rubber duck that can dump your working memory in real-time from any tool and sort through the garbage.\n\n## 🧩 Core Concepts\n\n### 1. 📅 Daily Logs\n\nDaily logs are the atomic unit of capture in MCP Notes. Each day gets its own markdown file where you can record observations throughout the day. Think of daily logs like a running ledger.\n\n> 💡 TIP: Make use of Claude Desktop's Quick Entry Keyboard Shortcut\n\nMCP is tool-agnostic so you can /log across conversations but also tools as well--ask Copilot or Cursor to log a summary of lessons-learned after fixing a bug or make Claude Desktop save a new approach to an old problem.\n\n### 2. 📊 Rollups\n\nRollups are automatically generated summaries that condense daily logs into higher-level insights and patterns. They help connect isolated pieces of information into a coherent narrative of your work and thinking.\n\n### 3. 📚 Knowledge Categories\n\nAll notes in the system fall into one of four categories:\n\n- **🏆 Accomplishment**: Solving problems, completing features, fixing bugs\n- **💡 Insight**: Patterns, architectural decisions, better ways of working\n- **📝 TODO**: Tasks connected to larger goals, meaningful improvements\n- **📖 Knowledge**: Technical details, context, rationales, techniques\n\n## 🎨 Design Principles\n\nMCP Notes is built on several core design principles:\n\n### 1. 📄 Plain Text First\n\nAll notes are stored as plain text Markdown files, ensuring:\n\n- Future-proof storage that won't be locked into proprietary formats\n- Version control compatibility\n- Easy editing with any text editor\n- Transparent data structure\n\n### 2. ✍️ Low Friction Capture\n\nThe primary interface is designed to minimize the friction of recording thoughts:\n\n- Simple text input\n- Automatic categorization assistance\n- No complex organization required at capture time\n\n### 3. 🔄 Progressive Organization\n\nRather than requiring rigid organization upfront, MCP Notes employs a progressive approach:\n\n- Capture raw thoughts and activities\n- Automatically categorize content\n- Generate periodic summaries\n- Connect related items over time\n\n### 4. 🤖 AI Augmentation\n\nThe system leverages AI to enhance human thinking, not replace it:\n\n- Help categorize information\n- Generate summaries and connections\n- Surface relevant past notes\n- Identify patterns across time\n\n\n## 🧰 Available Tools\n\nMCP Notes provides a set of tools that can be invoked through Claude Desktop or other MCP-compatible clients. These tools allow you to capture, organize, and retrieve your notes.\n\n### 📝 Core Note Tools\n\n#### `/log`\n\nCreates or updates today's daily log file with your notes.\n\nInvoke with: \"log this to my daily log: ...\", \"add a summary of that to my log: ....\"\n\n#### `/rollup`\n\nSynthesizes daily notes into an organized summary with categories, connections, and action items.\n\nInvoke with: \"rollup my notes for today\"\n\n#### `write_note`\n\nCreates a new note or overwrites an existing note with content.\n\n#### `sticky`\n\nEvaluates the \"stickiness\" of a thought based on actionability, longevity, findability, and future reference value.\n\nInvoke with: \"Is this idea sticky?\"\n\n#### `evaluateInsight`\n\nEvaluates the long-term value and significance of an insight or thought.\n\nInvoke with: \"Is this insight valuable for the long term?\"\n\n### 📂 File System Tools\n\n#### `search_files`\n\nRecursively searches for files and directories matching a pattern in your notes directory.\n\n#### `read_note`\n\nReads the complete contents of a note file from your notes directory.\n\n#### `read_multiple_notes`\n\nReads the contents of multiple note files simultaneously.\n\n#### `list_directory`\n\nLists the contents of a directory in your notes.\n\n#### `create_directory`\n\nCreates a new directory in your notes.\n\nSee the [CHANGELOG.md](CHANGELOG.md) file for version history and changes.\n\n## 💡 Available Prompts\n\n### Is this atomic?\n\nBreaks down ideas into their simplest standalone parts. Use this prompt to turn large ideas into smaller concepts. Smaller notes can be linked to other notes much more easily.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "knowledge",
        "notetaking knowledge",
        "notes personal",
        "notes searchable"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "mastercode-io--scaflog-zoho-mcp-server": {
      "owner": "mastercode-io",
      "name": "scaflog-zoho-mcp-server",
      "url": "https://github.com/mastercode-io/scaflog-zoho-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/mastercode-io.webp",
      "description": "Store and manage notes, providing features for summarizing and organizing content through a custom URI scheme. It integrates with Zoho Creator to enhance productivity in note-taking tasks.",
      "stars": 1,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-21T11:46:34Z",
      "readme_content": "# scaflog-zoho-mcp-server MCP server\n\nZoho Creator Scaflog App MCP Server\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"scaflog-zoho-mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/alexsherin/Documents/Projects/MCP Servers\",\n        \"run\",\n        \"scaflog-zoho-mcp-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"scaflog-zoho-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"scaflog-zoho-mcp-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/alexsherin/Documents/Projects/MCP Servers run scaflog-zoho-mcp-server\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "zoho",
        "notes",
        "manage notes",
        "zoho creator",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "mtct--journaling-mcp": {
      "owner": "mtct",
      "name": "journaling-mcp",
      "url": "https://github.com/mtct/journaling-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/mtct.webp",
      "description": "Manage interactive journaling sessions with features for emotional analysis and automatic saving. It supports reading recent entries and organizes journal content chronologically in Markdown format.",
      "stars": 6,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-20T18:39:18Z",
      "readme_content": "# MCP Journaling Server\n\nAn MCP (Message Control Protocol) server designed to handle interactive journaling sessions with support for emotional analysis and automatic conversation saving.\n\n<a href=\"https://glama.ai/mcp/servers/kiay3i2li7\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/kiay3i2li7/badge\" alt=\"Journaling Server MCP server\" /></a>\n\n## Features\n\n- Automatic journaling session management\n- Conversation saving in Markdown format\n- Temporal analysis of conversations with timestamps\n- Support for reading recent journal entries\n- Chronological organization of journal entries\n\n## Installation\n\nDepend from your MCP client, on Claude Desktop:\n\n```\n    \"mcpServers\": {\n        \"journaling\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                <REPOSITORY PATH>,\n                \"run\",\n                \"server.py\"\n            ]\n        }\n    }\n```\n\n## Configuration\n\nThe server can be configured using environment variables in .env file:\n\n- `JOURNAL_DIR`: Directory for saving journal files (default: ~/Documents/journal)\n- `FILENAME_PREFIX`: Prefix for file names (default: \"journal\")\n- `FILE_EXTENSION`: Journal file extension (default: \".md\")\n\nIf not specified, default values will be used.\n\n## File Structure\n\nJournal entries are saved with the following structure:\n```\n[JOURNAL_DIR]/\n├── journal_2025-01-27.md\n├── journal_2025-01-26.md\n└── ...\n```\n\n## Entry Format\n\nEach journal entry includes:\n\n1. Header with date\n2. Conversation transcript with timestamps\n3. Emotional analysis\n4. Reflections and recurring themes\n\n## API\n\n### Tools\n\n- `start_new_session()`: Start a new journaling session\n- `record_interaction(user_message, assistant_message)`: Record a message exchange\n- `generate_session_summary(summary)`: Generate and save session summary\n- `get_recent_journals()`: Retrieve 5 most recent entries\n\n### Resources\n\n- `journals://recent`: Endpoint to access recent journal entries\n\n### Prompts\n\n- `start_journaling`: Initial prompt\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "journaling",
        "journal",
        "notetaking",
        "mtct journaling",
        "interactive journaling",
        "journaling mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "mundume--gmail-mcp": {
      "owner": "mundume",
      "name": "gmail-mcp",
      "url": "https://github.com/mundume/gmail-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/mundume.webp",
      "description": "Create and manage notes with a simple interface while utilizing LLM capabilities for summarization. Supports creating new notes and accessing existing notes through URIs with associated metadata.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-14T13:39:45Z",
      "readme_content": "# gmail-mcp MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@mundume/gmail-mcp)](https://smithery.ai/server/@mundume/gmail-mcp)\na gmail mcp server built on top of typescript and the gmail api\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\n### Installing via Smithery\n\nTo install Gmail Notes Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@mundume/gmail-mcp):\n\n```bash\nnpx -y @smithery/cli install @mundume/gmail-mcp --client claude\n```\n\n### Installing Manually\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"gmail-mcp\": {\n      \"command\": \"/path/to/gmail-mcp/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "gmail",
        "manage notes",
        "existing notes",
        "mundume gmail"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "nailuoGG--anki-mcp-server": {
      "owner": "nailuoGG",
      "name": "anki-mcp-server",
      "url": "https://github.com/nailuoGG/anki-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/nailuoGG.webp",
      "description": "Interact with Anki flashcard software through AnkiConnect to create, manage, and search flashcards efficiently. Automate various operations on flashcards and decks with a simple API interface.",
      "stars": 145,
      "forks": 31,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T08:18:42Z",
      "readme_content": "# Anki MCP Server\n\nA Model Context Protocol (MCP) server that enables LLMs to interact with Anki flashcard software through AnkiConnect.\n\n![Anki Icon](./assets/icon.png)\n\n## Features\n\n### Tools\n\n- `list_decks` - List all available Anki decks\n- `create_deck` - Create a new Anki deck\n- `create_note` - Create a new note (Basic or Cloze)\n- `batch_create_notes` - Create multiple notes at once\n- `search_notes` - Search for notes using Anki query syntax\n- `get_note_info` - Get detailed information about a note\n- `update_note` - Update an existing note\n- `delete_note` - Delete a note\n- `list_note_types` - List all available note types\n- `create_note_type` - Create a new note type\n- `get_note_type_info` - Get detailed structure of a note type\n\n### Resources\n\n- `anki://decks/all` - Complete list of available decks\n- `anki://note-types/all` - List of all available note types\n- `anki://note-types/all-with-schemas` - Detailed structure information for all note types\n- `anki://note-types/{modelName}` - Detailed structure information for a specific note type\n\n## Prerequisites\n\n1. [Anki](https://apps.ankiweb.net/) installed on your system\n2. [AnkiConnect](https://ankiweb.net/shared/info/2055492159) add-on installed in Anki\n\n## Configuration\n\n### Install via Desktop Extension (.mcpb)\n\nThis repository supports Anthropic Desktop Extensions (MCPB). The easiest way to use this server in Claude Desktop is by installing the packaged `.mcpb` bundle.\n\n1. Generate the `.mcpb` file locally using the provided script:\n```bash\nnpm run pack\n```\n\n2. Open Claude Desktop Settings → Extensions and drag the generated `.mcpb` file in, then click Install.\n\nThis validates `manifest.json` and outputs a `.mcpb` archive you can install as above. Learn more about Desktop Extensions in Anthropic's announcement: [Desktop Extensions: One-click MCP server installation for Claude Desktop](https://www.anthropic.com/engineering/desktop-extensions).\n\n### Usage with Claude Desktop\n\nAdd the server to your claude_desktop_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"anki\": {\n      \"command\": \"npx\",\n      \"args\": [\"--yes\", \"anki-mcp-server\"]\n    }\n  }\n}\n```\n\n#### Using Custom AnkiConnect Port\n\nIf your AnkiConnect is running on a different port, you can specify it using the `--port` parameter:\n\n```json\n{\n  \"mcpServers\": {\n    \"anki\": {\n      \"command\": \"npx\",\n      \"args\": [\"--yes\", \"anki-mcp-server\", \"--port\", \"8080\"]\n    }\n  }\n}\n```\n\n### Configuration for Cline\n\nAdd the server to your Cline MCP settings file inside VSCode's settings `cline_mcp_settings.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"anki\": {\n      \"command\": \"npx\",\n      \"args\": [\"--yes\", \"anki-mcp-server\"]\n    }\n  }\n}\n```\n\n#### Using Custom AnkiConnect Port\n\nFor Cline, you can also specify a custom port:\n\n```json\n{\n  \"mcpServers\": {\n    \"anki\": {\n      \"command\": \"npx\",\n      \"args\": [\"--yes\", \"anki-mcp-server\", \"--port\", \"8080\"]\n    }\n  }\n}\n```\n\n## Development\n\n### Packaging a Desktop Extension (.mcpb)\n\nCreate a distributable Desktop Extension bundle for Claude Desktop:\n\n```bash\nnpm run pack\n```\n\nThis will build the project and generate a `.mcpb` archive from the current repository, validating `manifest.json`. Test by dragging it into Claude Desktop's Extensions settings. Reference: [Desktop Extensions: One-click MCP server installation for Claude Desktop](https://www.anthropic.com/engineering/desktop-extensions).\n\n### Publishing to MCP Registry\n\nThis server is automatically published to the MCP Registry when a new version is released. The publishing process includes:\n\n1. **Automated CI/CD**: GitHub Actions automatically publishes to both NPM and MCP Registry on successful releases\n2. **Schema Validation**: The `server.json` file is validated against the MCP schema before publishing\n3. **Version Synchronization**: Versions are kept in sync between `package.json`, `manifest.json`, and `server.json`\n4. **Comprehensive Testing**: Multi-version Node.js testing, linting, and validation before publishing\n5. **Beta Support**: Automated beta releases for testing new features\n\n#### Manual Validation\n\nYou can validate the MCP server configuration locally:\n\n```bash\nnpm run validate-mcp\n```\n\nThis will download the latest MCP schema and validate your `server.json` file.\n\n#### Manual Publishing\n\nIf you need to publish manually, you can use the MCP Publisher CLI:\n\n```bash\n# Install MCP Publisher\ncurl -L \"https://github.com/modelcontextprotocol/registry/releases/download/v1.1.0/mcp-publisher_1.1.0_$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/').tar.gz\" | tar xz mcp-publisher\nchmod +x mcp-publisher\nsudo mv mcp-publisher /usr/local/bin/\n\n# Login to MCP Registry\nmcp-publisher login github-oidc\n\n# Publish to MCP Registry\nmcp-publisher publish\n```\n\n### Setup\n\n1. Install dependencies:\n\n```bash\nnpm install\n```\n\n2. Build the server:\n\n```bash\nnpm run build\n```\n\n3. For development with auto-rebuild:\n\n```bash\nnpm run watch\n```\n\n### Testing\n\nRun the test suite:\n\n```bash\nnpm test\n```\n\nThis executes tests for:\n\n- Server initialization\n- AnkiConnect communication\n- Note operations (create/read/update/delete)\n- Deck management\n- Error handling\n\n### Debugging\n\nSince MCP servers communicate over stdio, we recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector):\n\n```bash\nnpm run inspector\n```\n\nThis provides a browser-based interface for:\n\n- Monitoring MCP messages\n- Testing tool invocations\n- Viewing server logs\n- Debugging communication issues\n\n## Example Usage\n\n1. Create a new deck:\n\n```\nCreate a new Anki deck called \"Programming\"\n```\n\n2. Add a basic card:\n\n```\nCreate an Anki card in the \"Programming\" deck with:\nFront: What is a closure in JavaScript?\nBack: A closure is the combination of a function and the lexical environment within which that function was declared.\n```\n\n3. Add a cloze deletion card:\n\n```\nCreate a cloze card in the \"Programming\" deck with:\nText: In JavaScript, {{c1::const}} declares a block-scoped variable that cannot be {{c2::reassigned}}.\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch\n3. Run tests: `npm test`\n4. Submit a pull request\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=nailuoGG/anki-mcp-server&type=Date)](https://star-history.com/#nailuoGG/anki-mcp-server&Date)\n\n## Credits\n\nIcon courtesy of [macOS Icons](https://macosicons.com/#/?icon=mWDBpVXqbc)\n\n## License\n\nMIT License - see LICENSE file for details\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "anki",
        "flashcard",
        "flashcards",
        "anki flashcard",
        "interact anki",
        "anki mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "newtype-01--obsidian-mcp": {
      "owner": "newtype-01",
      "name": "obsidian-mcp",
      "url": "https://github.com/newtype-01/obsidian-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/newtype-01.webp",
      "description": "Connects AI models to Obsidian knowledge bases, enabling direct access to read, create, update, and delete notes, as well as manage folder structures and perform full-text searches.",
      "stars": 210,
      "forks": 25,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-02T19:32:11Z",
      "readme_content": "# Obsidian MCP (Model Context Protocol) Server\n\nEnglish | [中文](./README.zh.md)\n\nThis project implements a Model Context Protocol (MCP) server for connecting AI models with Obsidian knowledge bases. Through this server, AI models can directly access and manipulate Obsidian notes, including reading, creating, updating, and deleting notes, as well as managing folder structures.\n\nCreated by huangyihe\n- Prompt House: https://prompthouse.app/\n- YouTube: https://www.youtube.com/@huanyihe777\n- Twitter: https://x.com/huangyihe\n- Community: https://t.zsxq.com/19IaNz5wK\n\n## Features\n\n- **🔗 Seamless Obsidian Integration**: Direct access to Obsidian knowledge bases through MCP protocol\n- **📝 Complete Note Management**: Read, create, update, and delete notes with advanced text replacement\n- **📁 Folder Operations**: Create, rename, move, and delete folders with full hierarchy support\n- **🔍 Intelligent Search**: Full-text search across all file types with smart scoring\n- **🤖 AI-Powered Analysis**: **NEW** Strategic insights using TRILEMMA-PRINCIPLES framework\n- **🔗 Auto Backlink Generation**: **NEW** Intelligent detection and conversion of note names to wikilinks\n- **⚡ Precision Editing**: Advanced PATCH operations with heading and block-level targeting\n- **🚀 Dual API Strategy**: Obsidian REST API with filesystem fallback for maximum reliability\n- **🎯 Context Optimization**: Smart content summarization for LLM context length management\n- **📊 Batch Processing**: Efficient bulk operations with progress tracking\n\n## Supported Tools\n\nThe MCP server provides the following comprehensive tools:\n\n### 📋 Core Operations\n- `list_notes`: List notes in the Obsidian vault with optional folder filtering\n  - **NEW** `recursive` parameter: Control whether to list files recursively in subdirectories (default: true)\n  - Use `recursive: false` to list only files in the specified folder without subdirectories\n- `read_note`: Read the content of a specific note in the Obsidian vault\n- `read_multiple_notes`: Read content from multiple notes simultaneously for batch processing\n- `create_note`: Create a new note in the Obsidian vault with full content\n- `delete_note`: Delete a note from the Obsidian vault\n- `search_vault`: Advanced search across all file types with filename and content matching\n- `move_note`: Move or rename notes to new locations (supports all file types including PDFs)\n- `manage_folder`: Complete folder CRUD operations (create/rename/move/delete)\n\n### 🚀 Advanced Features\n- `update_note`: **Enhanced** Update content using text replacements OR precision insertion\n  - Traditional text replacement mode\n  - **NEW** Heading-based insertion (before/after/append/prepend)\n  - **NEW** Block ID-based insertion with `^block-id` support\n  - **NEW** PATCH API integration with filesystem fallback\n\n- `auto_backlink_vault`: **🔗 Auto Backlink Generation**\n  - Intelligently scan entire vault for note name mentions\n  - Convert text references to wikilink format (`[[note name]]`)\n  - Smart pattern matching with false positive prevention\n  - Configurable dry-run mode and batch processing\n  \n- `notes_insight`: **🧠 AI-Powered Strategic Analysis** ⭐ **NEW**\n  - Generate strategic insights using TRILEMMA-PRINCIPLES framework\n  - Automatic topic-based note discovery and relevance ranking\n  - AI-driven content summarization for context optimization\n  - Structured analysis: constraint identification → assumption challenges → breakthrough solutions\n  - Configurable parameters for analysis depth and scope\n\n## Prerequisites\n\n- Node.js (v16 or higher)\n- Obsidian desktop application\n- Obsidian Local REST API plugin (needs to be installed in Obsidian)\n\n## Installation Options\n\nChoose the most suitable installation method based on your technical level and usage needs:\n\n| Method | Target Users | Advantages | Disadvantages |\n|--------|-------------|------------|---------------|\n| **🎯 One-Click Install (DXT)** | General users | Simplest, GUI configuration | Requires DXT-enabled client |\n| **📦 Remote Install (NPM)** | Node.js users | Auto-updates, no installation | Requires network connection |\n| **🔧 Local Deploy** | Advanced users | Offline use, full control | Manual updates required |\n\n---\n\n## Method 1: One-Click Install (DXT Package) - ✅ Recommended\n\n**Suitable for:** General users who want the simplest installation experience\n\n### Step 1: Download DXT File\n\nDownload the pre-built extension package: [obsidian-mcp.dxt](./obsidian-mcp.dxt)\n\n### Step 2: Install and Configure\n\nDouble-click the downloaded `.dxt` file and the system will automatically install the extension. Then fill in the configuration interface:\n\n- **Vault Path**: Your Obsidian vault path (e.g., `/Users/username/Documents/MyVault`)\n- **API Token**: Obsidian Local REST API plugin token\n- **API Port**: API port number (default: `27123`)\n\n---\n\n## Method 2: Remote Install (NPM Package)\n\n**Suitable for:** Node.js developers who want automatic updates and version management\n\nSimply add the following configuration to your MCP client config file:\n\n**Using npx (recommended, no pre-installation required):**\n```json\n{\n  \"mcpServers\": {\n    \"obsidian-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@huangyihe/obsidian-mcp\"\n      ],\n      \"env\": {\n        \"OBSIDIAN_VAULT_PATH\": \"/path/to/your/vault\",\n        \"OBSIDIAN_API_TOKEN\": \"your_api_token\",\n        \"OBSIDIAN_API_PORT\": \"27123\"\n      }\n    }\n  }\n}\n```\n\n> **Note**: First run will automatically download the package, subsequent runs use cache, ensuring you always use the latest version.\n\n---\n\n## Method 3: Local Deploy\n\n**Suitable for:** Users who need customization, advanced control, or offline usage\n\n### Option A: Global Install (Recommended)\n\n**Step 1: Global Install**\n```bash\nnpm install -g @huangyihe/obsidian-mcp\n```\n\n**Step 2: MCP Client Configuration**\n```json\n{\n  \"mcpServers\": {\n    \"obsidian-mcp\": {\n      \"command\": \"obsidian-mcp\",\n      \"env\": {\n        \"OBSIDIAN_VAULT_PATH\": \"/path/to/your/vault\",\n        \"OBSIDIAN_API_TOKEN\": \"your_api_token\",\n        \"OBSIDIAN_API_PORT\": \"27123\"\n      }\n    }\n  }\n}\n```\n\n### Option B: Source Deploy\n\n**Step 1: Clone Repository**\n```bash\ngit clone https://github.com/newtype-01/obsidian-mcp.git\ncd obsidian-mcp\n```\n\n**Step 2: Install Dependencies**\n```bash\nnpm install\n```\n\n**Step 3: Build Project**\n```bash\nnpm run build\n```\n\n**Step 4: Configure Environment Variables**\n```bash\ncp .env.example .env\n# Edit .env file with your configuration\n```\n\n**Step 5: Start Server**\n```bash\nnpm start\n```\n\n### Option C: Docker Deploy\n\n**Using Docker Compose (Recommended)**\n\n```bash\n# Configure environment variables\ncp .env.example .env\n# Edit .env file\n\n# Start service\ndocker-compose up -d\n```\n\n**Using Docker Command**\n\n```bash\n# Build image\ndocker build -t obsidian-mcp .\n\n# Run container\ndocker run -d \\\n  --name obsidian-mcp \\\n  --env-file .env \\\n  --network host \\\n  -v $(OBSIDIAN_VAULT_PATH):$(OBSIDIAN_VAULT_PATH) \\\n  obsidian-mcp\n```\n\n---\n\n## Configuration Guide\n\n### Environment Variables\n\nAll installation methods require the following configuration:\n\n- `OBSIDIAN_VAULT_PATH`: Path to your Obsidian vault\n- `OBSIDIAN_API_TOKEN`: API token for Obsidian Local REST API plugin  \n- `OBSIDIAN_API_PORT`: API port for Obsidian Local REST API (default: 27123)\n\n⚠️ **Important**: For remote NPM installation and global installation, you MUST use the `OBSIDIAN_` prefix for environment variables. The variables `VAULT_PATH`, `API_TOKEN` without the prefix will not work correctly.\n\n### Getting API Token\n\n1. Install \"Local REST API\" plugin in Obsidian\n2. Generate API Token in plugin settings\n3. Note the port number (default 27123)\n\n\n## Testing\n\nThe project includes a test script to verify server functionality:\n\n```bash\nnode test-mcp.js\n```\n\n## Development\n\n- Use `npm run dev` to run the server in development mode\n- Source code is located in the `src` directory\n\n## License\n\nMIT\n\n## Contributing\n\nPull Requests and Issues are welcome!\n\n## Related Projects\n\n- [Model Context Protocol](https://github.com/anthropics/model-context-protocol)\n- [Obsidian Local REST API](https://github.com/coddingtonbear/obsidian-local-rest-api) ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "obsidian",
        "ai",
        "notetaking",
        "obsidian knowledge",
        "obsidian mcp",
        "knowledge bases"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "noah-vh--mcp-server-clickup": {
      "owner": "noah-vh",
      "name": "mcp-server-clickup",
      "url": "https://github.com/noah-vh/mcp-server-clickup",
      "imageUrl": "/freedevtools/mcp/pfp/noah-vh.webp",
      "description": "Manage and organize notes with a simple storage system, allowing users to add notes, summarize them, and access them via a custom URI scheme.",
      "stars": 4,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-06-26T18:46:29Z",
      "readme_content": "# clickup-operator MCP server\n\nclickup thru claude\n\n```bash\nuv --directory C:\\Users\\noahv\\Documents\\GitHub\\clickup-operator run clickup-operator\n```\n\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"clickup-operator\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"C:\\Users\\noahv\\Documents\\GitHub\\create-python-server\\clickup-operator\",\n        \"run\",\n        \"clickup-operator\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"clickup-operator\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"clickup-operator\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory C:\\Users\\noahv\\Documents\\GitHub\\create-python-server\\clickup-operator run clickup-operator\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "mcp",
        "organize notes",
        "notetaking knowledge",
        "add notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "ohardcore--awesome-interview-questions": {
      "owner": "ohardcore",
      "name": "awesome-interview-questions",
      "url": "https://github.com/ohardcore/awesome-interview-questions",
      "imageUrl": "/freedevtools/mcp/pfp/ohardcore.webp",
      "description": "Curated collection of technical interview questions categorized by programming languages, frameworks, and other technical domains. Aids in interview preparation through a comprehensive set of questions of varying difficulty levels.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2021-03-01T19:28:53Z",
      "readme_content": "# Awesome Interviews [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)\n\n> A curated list of lists of technical interview questions.\n\n[What makes for an awesome list?](awesome.md)\n\nPlease read the [contribution guidelines](contributing.md) or the [creating a list guide](create-list.md) if you want to contribute.\n\n**Check out my [channel](https://t.me/botcube) or [blog](https://medium.com/@MaximAbramchuk).**\n\n### Table of Contents\n\n- [Programming Languages/Frameworks/Platforms](#programming-languagesframeworksplatforms)\n  - [Android](#android)\n  - [AngularJS](#angularjs)\n  - [BackboneJS](#backbonejs)\n  - [C++](#c)\n  - [C](#c-1)\n  - [C♯](#c-2)\n  - [.NET](#net)\n  - [Clojure](#clojure)\n  - [CSS](#css)\n  - [Django](#django)\n  - [EmberJS](#emberjs)\n  - [Erlang](#erlang)\n  - [Golang](#golang)\n  - [HTML](#html)\n  - [Ionic](#ionic)\n  - [iOS](#ios)\n  - [Java](#java)\n  - [JavaScript](#javascript)\n  - [Front-end build tools](#front-end-build-tools)\n  - [KnockoutJS](#knockoutjs)\n  - [Less](#less)\n  - [Lisp](#lisp)\n  - [NodeJS](#nodejs)\n  - [Objective-C](#objective-c)\n  - [PHP](#php)\n  - [Python](#python)\n  - [ReactJS](#reactjs)\n  - [Rails](#ruby-on-rails)\n  - [Ruby](#ruby)\n  - [Sass](#sass)\n  - [Scala](#scala)\n  - [Shell](#shell)\n  - [Swift](#swift)\n  - [Wordpress](#wordpress)\n- [Database technologies](#database-technologies)\n  - [Cassandra](#cassandra)\n  - [Microsoft Access](#microsoft-access)\n  - [MongoDB](#mongodb)\n  - [MySQL](#mysql)\n  - [Neo4j](#neo4j)\n  - [Oracle](#oracle)\n  - [Postgres](#postgres)\n  - [SQL](#sql)\n  - [SQL Lite](#sql-lite)\n\n- [OS](#os)\n  - [Linux](#linux)\n  - [Windows](#windows)\n- [Algorithms](#algorithms)\n- [Coding exercises](#coding-exercises)\n- [Comprehensive lists](#comprehensive-lists)\n- [Design patterns](#design-patterns)\n- [Data structures](#data-structures)\n- [Networks](#networks)\n- [Security](#security)\n- [Data Science](#data-science)\n\n## Programming Languages/Frameworks/Platforms\n\n### Android\n\n* [10 Android interview question answers for Freshers](http://www.careerride.com/android-interview-questions.aspx)\n* [14 Essential Android Interview Questions from top 3% developers company](http://www.toptal.com/android/interview-questions)\n* [50 android interview questions & answers](http://career.guru99.com/50-android-interview-questions-answers/).\n* [A couple of Android questions posted by Quora users](https://www.quora.com/What-are-good-job-interview-questions-for-an-Android-developer)\n* [A great list of Android interview questions covering all the aspects of this career](http://www.tutorialspoint.com/android/android_interview_questions.htm)\n* [Collection of Android and Java related questions and topics, including general developer questions, Java core, Data structures, Build Tools, Programming Paradigms, Core Android, Databases and etc](https://github.com/derekargueta/Android-Interview-Questions)\n* [Collection of Android and Java questions divided by experience](https://medium.com/@neteinstein/not-another-android-interviews-article-the-questions-3dedafa30bec)\n\n### AngularJS\n\n* [10 Essential AngularJS Interview Questions from top 3% developers company](http://www.toptal.com/angular-js/interview-questions)\n* [An AngularJS exam with questions from beginner to expert by @gdi2290 from @AngularClass](https://github.com/gdi2290/ngExam)\n* [29 AngularJS Interview Questions – Can You Answer Them All? Great Article from Codementor](https://www.codementor.io/angularjs/tutorial/angularjs-interview-questions-sample-answers)\n* [AngularJS interview questions and answers for experienced developers](http://www.web-technology-experts-notes.in/2014/11/angularjs-interview-questions-and-answers-for-experienced.html)\n* [AngularJS Interview Questions which have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of AngularJS](http://www.tutorialspoint.com/angularjs/angularjs_interview_questions.htm)\n* [This article discusses the top 50 Most occurred AngularJS interview question with answers](http://www.codeproject.com/Articles/891718/AngularJS-Interview-Questions-and-Answers)\n* [Top 25 Angularjs Interview Questions and Quiz](http://career.guru99.com/top-25-angular-js-interview-questions/)\n\n### BackboneJS\n\n* [8 Essential Backbonejs Interview Questions from top 3% developers company](http://www.toptal.com/backbone-js/interview-questions)\n* [Backbonejs Interview Questions And Answers from web technology experts notes](http://www.web-technology-experts-notes.in/2015/01/backbone-js-interview-questions-and-answers.html)\n* [Top 25 Backbone.js interview questions](http://career.guru99.com/top-25-backbone-js-interview-questions/)\n\n### C++\n\n* [1000+ Multiple Choice Questions & Answers in C++ with explanations](http://www.sanfoundry.com/cplusplus-interview-questions-answers/)\n* [200 C++ interview questions and answers](http://www.careerride.com/C++-Interview-questions-Answer.aspx)\n* [18 Essential C++ Interview Questions from top 3% developers company](http://www.toptal.com/c-plus-plus/interview-questions)\n* [C++ Interview Questions and Answers for Freshers and Experienced developers](http://a4academics.com/interview-questions/57-c-plus-plus/419-cpp-interview-questions-answers)\n* [C++ Interview Questions from GeekInterview](http://www.geekinterview.com/Interview-Questions/Languages/C-Plus-Plus)\n* [C++ Programming Q&A and quizzes from computer science portal for geeks](http://www.geeksforgeeks.org/c-plus-plus/)\n* [C++ Programming Questions and Answers related to such topics as OOPs concepts, Object and Classes, Functions, Constructors and Destructors, Inheritance and etc](http://www.indiabix.com/cpp-programming/questions-and-answers/)\n* [LeetCode Problems' Solutions written in C++](https://github.com/haoel/leetcode)\n* [25 Fundamental C++ Interview Questions](https://pangara.com/blog/cplusplus-interview-questions)\n\n### C\n\n* [165 C interview questions](http://placement.freshersworld.com/power-preparation/technical-interview-questions/C-programming-answers-21419)\n* [Basic C language technical frequently asked interview questions and answers It includes data structures, pointers interview questions and answers for experienced](http://www.cquestions.com/2010/10/c-interview-questions-and-answers.html)\n* [C Programming Interview Questions and Answers for such topics as Bits and Bytes, Preprocessors, Functions, Strings, Language basics and etc](http://www.indiabix.com/technical/c/)\n* [C Programming Interview Questions have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of C Programming](http://www.tutorialspoint.com/cprogramming/cprogramming_interview_questions.htm)\n* [First set of commonly asked C programming interview questions from computer science portal for geeks](http://geeksquiz.com/commonly-asked-c-programming-interview-questions-set-1/)\n* [Second set of commonly asked C programming interview questions from computer science portal for geeks](http://geeksquiz.com/commonly-asked-c-programming-interview-questions-set-2/)\n\n### C♯\n\n* [6 Essential C# Interview Question from top 3% developers company](http://www.toptal.com/c-sharp/interview-questions)\n* [C# interview questions from dotnetfunda.com](http://www.dotnetfunda.com/interviews/cat/6/csharp)\n* [Top 100 C# Interview Questions and Answers](http://a4academics.com/interview-questions/52-dot-net-interview-questions/417-c-oops-interview-questions-and-answers)\n* [Top 50 C# Interview Questions & Answers](http://career.guru99.com/top-50-c-sharp-interview-questions-answers/)\n\n### .NET\n\n* [300 ASPNET interview questions and answers](http://www.careerride.com/ASPNet-Questions.aspx)\n* [Great list of NET interview questions covering all the NET platform topics](http://www.indiabix.com/technical/dotnet/)\n* [NET Interview Questions and Answers for Beginners which consists of the most frequently asked questions in NET This list of 100+ questions and answers gauge your familiarity with the NET platform](http://www.dotnetcurry.com/dotnetinterview/70/dotnet-interview-questions-answers-beginners)\n* [Questions gathered by community of the StackOverflow](http://stackoverflow.com/questions/365489/questions-every-good-net-developer-should-be-able-to-answer)\n* [What Great NET Developers Ought To Know (More NET Interview Questions)](http://www.hanselman.com/blog/WhatGreatNETDevelopersOughtToKnowMoreNETInterviewQuestions.aspx)\n\n### Clojure\n\n* [Classic 'Fizz Buzz' interview question for Clojure developers](http://www.learningclojure.com/2014/05/fizz-buzz-interview-question.html)\n* [Clojure Interview Questions for experienced devs](http://ita2zguide.blogspot.com.by/p/cc.html)\n* [Coding exercises in Clojure, handy practice for technical interview questions](https://github.com/dpetrovics/coding-exercises)\n* [Experience and questions from Clojure developer interview collected by Reddit users](https://www.reddit.com/r/Clojure/comments/34qhha/clojure_coding_job_interview_experience/)\n* [Interview cake Clojure solutions](https://github.com/DerekCuevas/interview-cake-clj)\n\n### CSS\n\n* [25 helpful CSS interview questions and answers](http://www.skilledup.com/articles/25-css-interview-questions-answers)\n* [CSS interview questions and answers for freshers and experienced candidates Also there you can find CSS online practice tests to fight written tests and certification exams on CSS](http://www.careerride.com/Interview-Questions-CSS.aspx)\n* [Development hiring managers and potential interviewees may find there sample CSS proficiency interview Q&As and code snippets useful](http://www.techrepublic.com/blog/software-engineer/css-interview-questions-and-answers/)\n* [Interview Questions and Exercises About CSS](https://css-tricks.com/interview-questions-css/)\n* [Top 50 CSS(Cascading Style Sheet) Interview Questions covering the most of tricky CSS moments](http://career.guru99.com/top-50-csscascading-style-sheet-interview-questions/)\n* [CSS Questions and Answers](https://github.com/yangshun/tech-interview-handbook/blob/master/front-end/interview-questions.md#css-questions)\n\n### Django\n\n* [Some abstract interview questions for Python/Django developers](http://insights.dice.com/2014/04/30/interview-questions-pythondjango-developers/)\n* [Some Django basic interview questions to establish the basic level of the candidates](http://www.ilian.io/django-interview-questions/)\n* [Some Django/Python interview questions from Jaypal personal blog](http://blog.jayapal.in/2010/11/django-interview-question.html)\n* [Top 10 Django interview questions with their answers that you can encounter during the job interview for web developer](http://www.goodinterviewquestions.net/top-10-django-interview-questions-and-answers/)\n* [Django interview questions from f2finterview.com](http://www.f2finterview.com/web/Django/)\n* [Top 16 Django Interview Questions for both freshers and experienced developers](http://career.guru99.com/top-16-django-interview-questions/)\n\n### EmberJS\n\n* [8 Essential Emberjs Interview Questions from top 3% developers company](http://www.toptal.com/emberjs/interview-questions)\n* [Top 25 Emberjs Interview Questions for both freshers and experienced developers](http://career.guru99.com/top-25-ember-js-interview-questions/)\n\n### Erlang\n\n* [Top 22 Erlang Interview Questions for both freshers and experienced developers](http://career.guru99.com/top-22-erlang-interview-questions/)\n\n### Golang\n\n* [Solutions for Elements of Programming Interviews problems written in Golang](https://github.com/mrekucci/epi)\n* [Solutions for some basic coding interview tasks written in Go](https://github.com/efischer19/golang_ctci)\n* [Top 20 GO Programming Interview Questions for both freshers and experienced developers](http://career.guru99.com/top-20-go-programming-interview-questions/)\n\n### HTML\n\n* [10 Typical HTML Interview Exercises from SitePoint.com](http://www.sitepoint.com/10-typical-html-interview-exercises/)\n* [12 Essential HTML5 Interview Questions from top 3% developers company](http://www.toptal.com/html5/interview-questions)\n* [35 Helpful HTML & HTML5 Interview Questions & Answers](http://www.skilledup.com/articles/html-html5-interview-questions-answers)\n* [40 important HTML 5 Interview questions with answers](http://www.codeproject.com/Articles/702051/important-HTML-Interview-questions-with-answe)\n* [HTML interview questions and answers for freshers and experienced candidates Also find HTML online practice tests to fight written tests and certification exams on HTML](http://www.careerride.com/Interview-Questions-HTML.aspx)\n* [Top 50 HTML Interview Questions for both freshers and experienced developers](http://career.guru99.com/top-50-html-interview-questions/)\n* [Common HTML interview questions for freshers](http://www.javatpoint.com/html-interview-questions)\n* [HTML Questions and Answers](https://github.com/yangshun/tech-interview-handbook/blob/master/front-end/interview-questions.md#html-questions)\n\n### Ionic\n\n* [23 Beginner Level Ionic Framework Questions](http://www.codeandyou.com/p/ionic-interview-questions.html)\n* [11 Essential Ionic Interview Questions](https://www.toptal.com/ionic/interview-questions)\n\n### iOS\n\n* [12 Essential iOS Interview Questions from top 3% developers company](http://www.toptal.com/ios/interview-questions)\n* [20 iOS Developer Interview Questions and Answers for getting you ready for your interview](https://www.codementor.io/ios/tutorial/ios-interview-tips-questions-answers-objective-c)\n* [A small guide to help those looking to hire a developer or designer for iOS work While tailored for iOS, many questions could be used for Android developers or designers as well A great self-test if you're looking to keep current or practice for your own interview](https://github.com/CameronBanga/iOS-Developer-and-Designer-Interview-Questions)\n* [All you need to know about iOS technical interview including some tips for preparing, questions and some coding exercises](http://www.raywenderlich.com/53962/ios-interview-questions)\n* [Interview Questions for iOS and Mac Developers from the CEO of Black Pixel](https://blackpixel.com/writing/2013/04/interview-questions-for-ios-and-mac-developers-1.html)\n* [iOS Interview Questions and Answers including such topics as Development Basics, App states and multitasking, App states, Core app objects](http://www.geekinterview.com/Interview-Questions/iOS)\n* [iOS Interview Questions For Senior Developers](https://m.smartcloud.io/ios-interview-questions-for-senior-developers-in-2017-a94cc81c8205)\n* [50 iOS Interview Questions And Answers 1](https://medium.com/ios-os-x-development/ios-interview-questions-13840247a57a)\n* [50 iOS Interview Questions And Answers Part 2](https://medium.com/ios-os-x-development/50-ios-interview-questions-and-answers-part-2-45f952230b9f)\n* [50 iOS Interview Questions And Answers Part 3](https://medium.com/ios-os-x-development/50-ios-interview-questions-and-answers-part-3-3fad146b6c3d)\n* [50 iOS Interview Questions And Answers Part 4](https://medium.com/@duruldalkanat/50-ios-interview-questions-and-answers-part-4-6f26b26341a)\n* [10 iOS interview questions and answers](https://www.upwork.com/i/interview-questions/ios/)\n* [iOS Developer and Designer Interview Questions](https://github.com/9magnets/iOS-Developer-and-Designer-Interview-Questions#tech)\n* [IOS Interview Questions and Answers](http://www.thecrazyprogrammer.com/2015/11/ios-interview-questions-and-answers.html)\n\n### Java\n\n* [115 Java Interview Questions and Answers – The ULTIMATE List](http://www.javacodegeeks.com/2014/04/java-interview-questions-and-answers.html)\n* [37 Java Interview Questions to Practice With from Codementor](https://www.codementor.io/java/tutorial/java-interview-sample-questions-answers)\n* [20 Essential Java Interview Questions](http://www.toptal.com/java/interview-questions)\n* [A collection of Java interview questions and answers to them The questions were gathered all around the Internet The answers are partly written by the commiters, partly copy-pasted from all possible sources](https://github.com/svozniuk/java-interviews)\n* [Data Structures and Algorithms in Java which can be useful in interview process](https://github.com/donbeave/interview)\n* [Java Interview Questions: How to crack the TOP 15 questions](https://blog.udemy.com/java-interview-questions/)\n* [There is the list of 201 core java interview questions The answers of the core java interview questions are short and to the point The core java interview questions are categorized in Basics of java interview questions, OOPs interview questions, String Handling interview questions, Multithreading interview questions, collection interview questions, JDBC interview questions etc](http://www.javatpoint.com/corejava-interview-questions)\n* [Top 10 Tricky Java interview questions and Answers](http://java67.blogspot.com.by/2012/09/top-10-tricky-java-interview-questions-answers.html)\n* [Top 25 Most Frequently Asked Interview Core Java Interview Questions And Answers](http://javahungry.blogspot.com/2013/06/top-25-most-frequently-asked-core-java.html)\n* [Top 40 Core Java Interview Questions Answers from Telephonic Round](http://java67.blogspot.sg/2015/03/top-40-core-java-interview-questions-answers-telephonic-round.html)\n* [Interview Cake Java Interview Questions](https://www.interviewcake.com/java-interview-questions)\n\n### JavaScript\n\n* [10 Interview Questions Every JavaScript Developer Should Know](https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95)\n* [21 Essential JavaScript Interview Questions from best mentors all over the world](https://www.codementor.io/javascript/tutorial/21-essential-javascript-tech-interview-practice-questions-answers)\n* [25 Essential JavaScript Interview Questions from top 3% developers company](http://www.toptal.com/javascript/interview-questions)\n* [5 More JavaScript Interview Exercises](http://www.sitepoint.com/5-javascript-interview-exercises/)\n* [5 Typical JavaScript Interview Exercises](http://www.sitepoint.com/5-typical-javascript-interview-exercises/)\n* [Development hiring managers and potential interviewees may find these sample JavaScript proficiency interview Q&As and code snippets useful](http://www.techrepublic.com/blog/software-engineer/javascript-interview-questions-and-answers/)\n* [123 Essential JavaScript Interview Question](https://github.com/nishant8BITS/123-Essential-JavaScript-Interview-Question)\n* [JavaScript Interview Questions have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of JavaScript](http://www.tutorialspoint.com/javascript/javascript_interview_questions.htm)\n* [JS: Basics and Tricky Questions](http://www.thatjsdude.com/interview/js2.html)\n* [JS: Interview Algorithm](http://thatjsdude.com/interview/js1.html)\n* [Some basic javascript coding challenges and interview questions](https://github.com/kolodny/exercises)\n* [Some JavaScript interview exercises](https://github.com/csvenja/javascript-exercises)\n* [Ten Questions I've Been Asked, Most More Than Once, Over Six Technical JavaScript / Front-End Engineer Job Interviews.](https://www.reddit.com/r/javascript/comments/3rb88w/ten_questions_ive_been_asked_most_more_than_once)\n* [Top 85 JavaScript Interview Questions](http://career.guru99.com/top-85-javascript-interview-questions/)\n* [Interview Cake JavaScript Interview Questions](https://www.interviewcake.com/javascript-interview-questions)\n* [The Best Frontend JavaScript Interview Questions (written by a Frontend Engineer)](https://performancejs.com/post/hde6d32/The-Best-Frontend-JavaScript-Interview-Questions-(written-by-a-Frontend-Engineer))\n* [JavaScript Questions and Answers](https://github.com/yangshun/tech-interview-handbook/blob/master/front-end/interview-questions.md#js-questions)\n* [10 JavaScript Concepts You Need to Know for Interviews](https://dev.to/arnavaggarwal/10-javascript-concepts-you-need-to-know-for-interviews)\n\n\n### Front-end build tools\n\n* [Webpack interview questions & answers](https://github.com/styopdev/webpack-interview-questions)\n* [Gulp js interview questions](https://www.codeproject.com/Articles/1065184/Latest-Gulp-js-interview-questions)\n* [Grunt js interview questions for beginners](http://www.talkingdotnet.com/grunt-js-interview-questions/)\n* [Grunt js interview questions](https://mindmajix.com/grunt-interview-questions)\n\n### KnockoutJS\n\n* [15 interview questions from CodeSample.com](http://www.code-sample.com/2014/01/knockout-js-interview-questions-and.html)\n* [20 questions you might be asked about KnockoutJS in an interview for both freshers and experienced developers](http://www.codeproject.com/Articles/987899/KnockoutJS-interview-questions)\n\n### Less\n\n* [Top 25 LESS Interview Questions](http://career.guru99.com/top-25-less-interview-questions/)\n\n### Lisp\n\n* [10 LISP Questions & Answers](http://www.sanfoundry.com/lisp-mcqs-class/)\n* [Top 18 Lisp Interview Questions from Career Guru](http://career.guru99.com/top-18-lisp-interview-questions/)\n\n### NodeJS\n\n* [7 Essential Nodejs Interview Questions from top 3% developers company](http://www.toptal.com/nodejs/interview-questions)\n* [Node.js Interview Questions & Answers from LazyQuestion.com](http://www.lazyquestion.com/interview-questions-and-answer/nodejs)\n* [Node.JS Interview Questions have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of Node.JS](http://www.tutorialspoint.com/nodejs/nodejs_interview_questions.htm)\n* [There are two sides of the table: you either want to hire Nodejs developers or you want to get hired as a Nodejs developer This list helps you navigate a bit in this space, giving you some questions to ask, and a list of questions you should know the answer to](https://blog.risingstack.com/node-js-interview-questions/)\n* [Top 25 Nodejs Interview Questions & Answers from Career Guru](http://career.guru99.com/top-25-interview-questions-on-node-js/)\n* [Top 30 Node.Js Interview Questions With Answers](http://www.techbeamers.com/top-30-node-js-interview-questions-answers/)\n\n### Objective-C\n\n* [Interview Qs for Objective-C and Swift](http://insights.dice.com/2015/07/21/interview-qs-objective-c-swift/)\n* [iOS/ObjC Interview Questions](http://andras.palfi.hu/iosobjc-interview-questions/)\n\n### PHP\n\n* [100 PHP interview questions and answers from CareerRide.com](http://www.careerride.com/PHP-Interview-Questions.aspx)\n* [14 Essential PHP Interview Questions from top 3% developers company](http://www.toptal.com/php/interview-questions)\n* [20 Common PHP Job Interview Questions and Answers](http://www.woodstitch.com/resources/php-interview-questions.php)\n* [Basic PHP interview questions](https://github.com/developerquestions/php-questions)\n* [PHP interview questions and answers for freshers](http://phpinterviewquestions.co.in/)\n* [Top 100 PHP Interview Questions & Answers from CareerGuru](http://career.guru99.com/top-100-php-interview-questions-answers/)\n* [25 PHP Interview Questions](https://www.codementor.io/php/tutorial/php-interview-questions-sample-answers)\n\n### Python\n\n* [50 Python interview questions and answers](http://www.careerride.com/python-interview-questions.aspx)\n* [8 Essential Python Interview Questions from top 3% developers company](http://www.toptal.com/python/interview-questions)\n* [A listing of questions that could potentially be asked for a python job listing](https://github.com/sigmavirus24/python-interview-questions)\n* [Interview Questions for both beginners and experts](http://www.bogotobogo.com/python/python_interview_questions.php)\n* [Interview Cake Python Interview Questions](https://www.interviewcake.com/python-interview-questions)\n* [Python Frequently Asked Questions (Programming)](https://docs.python.org/2/faq/programming.html)\n* [Python interview questions collected by Reddit users](https://www.reddit.com/r/Python/comments/1knw7z/python_interview_questions)\n* [Python Interview Questions from questionscompiled](http://www.questionscompiled.com/python-interview-questions.html)\n* [Top 25 Python Interview Questions from Career Guru](http://career.guru99.com/top-25-python-interview-questions/)\n* [Python Interview 10 questions from Corey Schafer](https://www.youtube.com/watch?v=DEwgZNC-KyE)\n\n### Ruby on Rails\n\n* [20 Ruby on Rails interview questions and answers from CareerRide.com](http://www.careerride.com/ruby-on-rails-interview-questions.aspx)\n* [8 Essential Ruby on Rails Interview Questions from top 3% developers company](http://www.toptal.com/ruby-on-rails/interview-questions)\n* [A list of common questions with answers ask during interview of ruby on rails job](https://github.com/rishiip/ruby-on-rails-interview-questions)\n* [Ruby And Ruby On Rails interview Q&A](http://anilpunjabi.tumblr.com/post/25948339235/ruby-and-rails-interview-questions-and-answers)\n* [Some of the most frequently asked Ruby on Rails questions and how to answer them confidently](https://srikantmahapatra.wordpress.com/2013/11/07/ruby-on-rails-interview-questions-and-answers/)\n* [11 Ruby on Rails Interview Practice Questions](https://www.codementor.io/ruby-on-rails/tutorial/ruby-on-rails-interview-questions)\n* [Top 53 Ruby on Rails Interview Questions & Answers](https://career.guru99.com/top-34-ruby-on-rail-interview-questions/)\n* [10 Ruby on Rails interview questions and answers](https://www.upwork.com/i/interview-questions/ruby-on-rails/)\n\n### ReactJS\n\n* [Reddit users share their expectations from ReactJS interview](https://www.reddit.com/r/reactjs/comments/3m5equ/react_what_interview_questions_to_expect/)\n* [This is a first in the series of interview questions related with ReactJS](http://interview-questions-247.appspot.com/reactjs-interview-questions-set-1)\n* [This quiz intends to test your understanding around ReactJS fundamentals (Set 3)](http://interview-questions-247.appspot.com/reactjs-interview-questions-set-3)\n* [This quiz intends to test your understanding around ReactJS fundamentals](http://interview-questions-247.appspot.com/reactjs-interview-questions-set-2)\n* [5 Essential React.js Interview Questions](https://www.codementor.io/reactjs/tutorial/5-essential-reactjs-interview-questions)\n* [React Interview Questions](https://tylermcginnis.com/react-interview-questions/)\n\n### Ruby\n\n* [11 Essential Ruby Interview Questions from top 3% developers company](http://www.toptal.com/ruby/interview-questions)\n* [15 Questions to Ask During a Ruby Interview](https://gist.github.com/ryansobol/5252653)\n* [A list of questions about Ruby programming you can use to quiz yourself](https://github.com/undr/ruby-trivia)\n* [The Art of Ruby Technical Interview](http://technology.customink.com/blog/2015/11/23/the-art-of-ruby-technical-interviews/)\n* [Interview Cake Ruby Interview Questions](https://www.interviewcake.com/ruby-interview-questions)\n* [Frequently Asked Ruby Interview Questions](https://www.javatpoint.com/ruby-interview-questions)\n\n### Sass\n\n* [Top 17 Sass Interview Questions from Career Guru](http://career.guru99.com/top-17-sass-interview-questions/)\n\n### Scala\n\n* [4 Interview Questions for Scala Developers](http://insights.dice.com/2014/09/12/4-interview-questions-scala-developers/)\n* [A list of Frequently Asked Questions and their answers, sorted by category](http://www.scala-lang.org/old/faq)\n* [A list of helpful Scala related questions you can use to interview potential candidates](https://github.com/Jarlakxen/Scala-Interview-Questions)\n* [How Scala Developers Are Being Interviewed](http://programmers.stackexchange.com/questions/58145/how-scala-developers-are-being-interviewed)\n* [Scala Interview Questions/Answers including Language Questions, Functional Programming Questions, Reactive Programming Questions](https://github.com/peterarsentev/Scala-Interview-Questions-Answers)\n* [Top 25 Scala Interview Questions & Answers from top 3% developers company](http://career.guru99.com/top-25-interview-questions-on-scala/)\n\n### SharePoint\n\n* [Sharepoint Interview Question For Developer](http://www.rajeshg.me/2013/05/sharepoint-developer-2010-interview.html)\n\n### Shell\n\n* [Top 50 Shell Scripting Interview Questions from Career Guru](http://career.guru99.com/shell-scripting-interview-questions/)\n\n### Swift\n\n* [5 Swift questions for your iOS job interview](http://www.skilledup.com/articles/5-swift-questions-ios-job-interview)\n* [9 Essential Swift Interview Questions from top 3% developers company](http://www.toptal.com/swift/interview-questions)\n* [Get prepared for your next iOS job interview by studying high quality LeetCode solutions in Swift 2.1](https://github.com/diwu/LeetCode-Solutions-in-Swift)\n* [Swift Interview Questions and Answers for both freshers and beginners](http://www.raywenderlich.com/110982/swift-interview-questions-answers)\n* [Swift Programming Language Interview Questions And Answers from mycodetips.com](http://mycodetips.com/swift-ios/swift-programming-language-interview-questions-answers-987.html)\n* [Your top 10 Swift questions answered](http://blog.udacity.com/2014/11/your-top-10-swift-questions-answered.html)\n\n### Wordpress\n* [Top 45 Wordpress interview questions](https://pangara.com/blog/45-wordpress-interview-questions-and-answers)\n\n## Database technologies\n\n\n### Cassandra\n\n* [Top 23 Cassandra Interview Questions from Career Guru](http://career.guru99.com/top-23-cassandra-interview-questions/)\n\n### Microsoft Access\n\n* [Top 16 Microsoft Access Database Interview Questions from Career Guru](http://career.guru99.com/top-16-ms-access-database-interview-questions/)\n\n### MongoDB\n\n* [28 MongoDB NoSQL Database Interview Questions and Answers](http://theprofessionalspoint.blogspot.com.by/2014/01/28-mongodb-nosql-database-interview.html)\n* [MongoDB frequently Asked Questions by expert members with experience in MongoDB These questions and answers will help you strengthen your technical skills, prepare for the new job test and quickly revise the concepts](http://www.globalguideline.com/interview_questions/Questions.php?sc=MongoDB](http://www.globalguideline.com/interview_questions/Questions.php?sc=MongoDB))\n* [MongoDB Interview Questions from JavaTPointcom](http://www.javatpoint.com/mongodb-interview-questions)\n* [MongoDB Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of MongoDB](http://www.tutorialspoint.com/mongodb/mongodb_interview_questions.htm)\n* [Top 20 MongoDB interview questions from Career Guru](http://career.guru99.com/top-20-mongodb-interview-questions/)\n\n### MySQL\n\n* [10 MySQL Database Interview Questions for Beginners and Intermediates](http://www.tecmint.com/10-mysql-database-interview-questions-for-beginners-and-intermediates/)\n* [100 MySQL interview questions](http://www.careerride.com/MySQL-Interview-Questions.aspx)\n* [15 Basic MySQL Interview Questions for Database Administrators](http://www.tecmint.com/basic-mysql-interview-questions-for-database-administrators/)\n* [28 MySQL interview questions from JavaTPoint.com](http://www.javatpoint.com/mysql-interview-questions)\n* [40 Basic MySQL Interview Questions with Answers](http://www.testingbrain.com/interview/mysql-interview-questions.html)\n* [Top 50 MySQL Interview Questions & Answers from Career Guru](http://career.guru99.com/top-50-mysql-interview-questions-answers/)\n\n### Neo4j\n\n* [Top 20 Neo4j Interview Questions from Career Guru](http://career.guru99.com/top-20-ne04j-interview-questions/)\n\n### Oracle\n\n* [General Oracle Interview Questions & Answers](http://www.coolinterview.com/type.asp?iType=57)\n\n### Postgres\n\n* [13 PostgreSQL Interview Q&A](http://www.dotnetfunda.com/interviews/cat/208/postgresql)\n* [Frequently Asked Basic PostgreSQL Interview Questions and Answers](http://nazafbtemplate.blogspot.com.by/2014/06/frequently-asked-basic-postgresql.html)\n* [PostgreSQL Interview Preparation Guide](http://www.globalguideline.com/interview_questions/Questions.php?sc=postgresqk_database_](http://www.globalguideline.com/interview_questions/Questions.php?sc=postgresqk_database_))\n* [PostgreSQL Interview Q&A from CoolInterview.com](http://www.coolinterview.com/type.asp?iType=411)\n\n### SQL\n\n* [10 Frequently asked SQL Query Interview Questions](http://java67.blogspot.com.by/2013/04/10-frequently-asked-sql-query-interview-questions-answers-database.html)\n* [18 Essential SQL Interview Questions from top 3% developers company](http://www.toptal.com/sql/interview-questions)\n* [Common Interview Questions and Answers](http://www.indiabix.com/technical/sql-server-common-questions/)\n* [General Interview Questions and Answers](http://www.indiabix.com/technical/sql-server-general-questions/)\n* [Schema, Questions & Solutions for SQL Exercising](https://github.com/XD-DENG/SQL-exercise)\n* [SQL Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of SQL](http://www.tutorialspoint.com/sql/sql_interview_questions.htm)\n* [Top 20 SQL Interview Questions with Answers](http://dwbi.org/database/sql/72-top-20-sql-interview-questions-with-answers)\n\n### SQL Lite\n\n* [Top 20 SQL LITE  Interview Questions from Career Guru](http://career.guru99.com/top-20-sql-lite-interview-questions/)\n\n## OS\n\n### Linux\n\n* [10 Job Interview Questions for Linux System Administrators from Linux.com](https://www.linux.com/news/featured-blogs/200-libby-clark/842913-10-job-interview-questions-for-linux-sysadmins)\n* [10 Useful Random Linux Interview Questions and Answers](http://www.tecmint.com/useful-random-linux-interview-questions-and-answers/)\n* [11 Basic Linux Interview Questions and Answers](http://www.tecmint.com/basic-linux-interview-questions-and-answers/)\n* [11 Essential Linux Interview Questions from top 3% developers company](http://www.toptal.com/linux/interview-questions)\n* [Some basic Linux questions from ComputerNetworkingNotes.com](http://computernetworkingnotes.com/rhce-interview-questions/linux-interview-questions-answers.html)\n* [Top 30 Linux System Admin Interview Questions & Answers](http://www.linuxtechi.com/experience-linux-admin-interview-questions/)\n* [Top 50 Linux Interview Questions from Career Guru](http://career.guru99.com/top-50-linux-interview-questions/)\n* [Linux System Administrator/DevOps Interview Questions](https://github.com/chassing/linux-sysadmin-interview-questions)\n\n### Windows\n\n* [Top 10 Interview Questions for Windows Administrators](http://www.brentozar.com/archive/2009/07/top-10-interview-questions-for-windows-sysadmins/)\n* [Top 22 Windows Server Interview Questions from Career Guru](http://career.guru99.com/top-22-windows-server-interview-questions/)\n* [Windows Admin Interview Questions & Answers](http://www.01world.in/p/windows.html)\n\n## Algorithms\n\n* [A great list of Java interview questions](http://java2novice.com/java-interview-programs/)\n* [Algorithms playground for common interview questions written in Ruby](https://github.com/sagivo/algorithms)\n* [EKAlgorithms contains some well known CS algorithms & data structures](https://github.com/EvgenyKarkan/EKAlgorithms)\n* [Five programming problems every Software Engineer should be able to solve in less than 1 hour](http://www.shiftedup.com/2015/05/07/five-programming-problems-every-software-engineer-should-be-able-to-solve-in-less-than-1-hour)\n* [Top 10 Algorithms for Coding Interview](http://www.programcreek.com/2012/11/top-10-algorithms-for-coding-interview/)\n* [Top 15 Data Structures and Algorithm Interview Questions for Java programmer](http://javarevisited.blogspot.com.by/2013/03/top-15-data-structures-algorithm-interview-questions-answers-java-programming.html)\n* [Top Algorithms Questions by Topics](https://github.com/yangshun/tech-interview-handbook/blob/master/algorithms/README.md)\n\n## Coding exercises\n\n* [Common interview questions and puzzles solved in a number of languages](https://github.com/mre/the-coding-interview)\n* [Interactive, test-driven Python coding challenges (algorithms and data structures) typically found in coding interviews or coding competitions](https://github.com/donnemartin/interactive-coding-challenges)\n* [Interview questions solved in python](https://github.com/roseperrone/interview-questions)\n\n## Comprehensive lists\n\n* [A list of helpful front-end related questions you can use to interview potential candidates, test yourself or completely ignore](https://github.com/h5bp/Front-end-Developer-Interview-Questions)\n* [Front End Developer Interview Questions](http://www.aperfectmix.com/free_web_design/front-end-interview-questions.html)\n* [Answers to Front End Developer Interview Questions](https://github.com/yangshun/tech-interview-handbook/blob/master/front-end/interview-questions.md)\n* [Some simple questions to interview potential backend candidates](https://github.com/starandtina/backend-interview-questions)\n* [An Annotated List of Frontend Developer Technical Interview Questions](https://www.recruityourninja.com/technical-interview-questions-frontend-candidates/)\n* [An Annotated List of Backend Developer Technical Interview Questions](https://www.recruityourninja.com/technical-interview-questions-backend-candidates/)\n* [An Annotated List of DevOps Technical Interview Questions](https://www.recruityourninja.com/technical-interview-questions-devops-candidates/)\n\n## Design Patterns\n* [Design Pattern Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of Design Pattern](http://www.tutorialspoint.com/design_pattern/design_pattern_interview_questions.htm)\n* [Design Patterns for Humans™ - An ultra-simplified explanation](https://github.com/kamranahmedse/design-patterns-for-humans)\n* [Design patterns implemented in Java](https://github.com/iluwatar/java-design-patterns)\n\n## Data structures\n\n* [Top 15 Data Structures and Algorithm Interview Questions for Java programmer](http://javarevisited.blogspot.com.by/2013/03/top-15-data-structures-algorithm-interview-questions-answers-java-programming.html)\n* [Top 50 Data Structure Interview Questions from Career Guru](http://career.guru99.com/top-50-data-structure-interview-questions/)\n\n## Networks\n\n* [Top 100 Networking Interview Questions & Answers from Career Guru](http://career.guru99.com/top-100-networking-interview-questions-answers/)\n\n## Security\n\n* [101 IT Security Interview Questions](http://careers.simplicable.com/careers/new/101-IT-security-interview-questions)\n* [How to prepare for an information security job interview?](http://searchsecurity.techtarget.com/tip/How-to-prepare-for-an-information-security-job-interview)\n* [Information Security Interview Questions from Daniel Miessler](https://danielmiessler.com/study/infosec_interview_questions/)\n* [Top 50 Information Security Interview Questions for freshers and experts](http://resources.infosecinstitute.com/top-50-information-security-interview-questions/)\n\n## Data Science\n* [Data Science Interview Questions for Top Tech Companies](https://www.dezyre.com/article/-data-science-interview-questions-for-top-tech-companies/189)\n* [66 Job Interview Questions for Data Scientists](http://www.datasciencecentral.com/profiles/blogs/66-job-interview-questions-for-data-scientists)\n* [An Annotated List of Data Scientist Technical Interview Questions](https://www.recruityourninja.com/technical-interview-questions-data-scientist/)\n\n### License\n\n[![CC0](https://i.creativecommons.org/p/zero/1.0/88x31.png)](https://creativecommons.org/publicdomain/zero/1.0/)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "interview",
        "ohardcore",
        "questions",
        "technical interview",
        "interview preparation",
        "awesome interview"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "rajvirtual--MCP-Servers": {
      "owner": "rajvirtual",
      "name": "MCP-Servers",
      "url": "https://github.com/rajvirtual/MCP-Servers",
      "imageUrl": "/freedevtools/mcp/pfp/rajvirtual.webp",
      "description": "Access and manage Microsoft OneNote content, enabling the reading and creation of notebooks, sections, and pages directly through AI assistants. Converts HTML content to text for improved retrieval-augmented generation (RAG) processing.",
      "stars": 14,
      "forks": 5,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-08-08T13:31:04Z",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "onenote",
        "notetaking",
        "microsoft",
        "microsoft onenote",
        "onenote content",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "rickydata-indexer--notion_mcp_server": {
      "owner": "rickydata-indexer",
      "name": "notion_mcp_server",
      "url": "https://github.com/rickydata-indexer/notion_mcp_server",
      "imageUrl": "/freedevtools/mcp/pfp/rickydata-indexer.webp",
      "description": "Provides access to a Notion knowledge base for querying and retrieving detailed answers with references to specific Notion pages, enhancing productivity within the development environment.",
      "stars": 0,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-01-09T14:25:42Z",
      "readme_content": "# Notion Knowledge Base MCP Server\n\nAn MCP server that provides access to a Notion knowledge base through the Cline VSCode extension.\n\n## Features\n\n- Query your Notion knowledge base directly from Cline\n- Get detailed answers with references to Notion pages\n- Built with FastMCP for reliable performance\n- Comprehensive error handling and logging\n\n## Prerequisites\n\n- Python 3.10 or higher\n- [uv](https://github.com/astral-sh/uv) package manager\n- [Cline VSCode extension](https://marketplace.visualstudio.com/items?itemName=saoudrizwan.claude-dev)\n- A Dify API key for accessing the Notion knowledge base\n\n## Installation\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/yourusername/notion-mcp-server.git\n   cd notion-mcp-server\n   ```\n\n2. Create a `.env` file with your Dify API key:\n   ```bash\n   echo \"DIFY_API_BACKEND_KEY=your-api-key-here\" > .env\n   ```\n\n3. Install the server in Cline:\n   ```bash\n   fastmcp install notion_mcp_server.py\n   ```\n\n   This will automatically:\n   - Install all required dependencies using uv\n   - Configure the server in Cline's settings\n   - Make the server available to use with Cline\n\n## Usage\n\nOnce installed, you can use the server in Cline by asking questions about your Notion knowledge base. For example:\n\n```\nTell me about internal tooling\n```\n\nThe server will respond with relevant information from your Notion knowledge base, including:\n- Detailed answers\n- Links to relevant Notion pages\n- Page IDs for reference\n\n## Configuration\n\nThe server is configured automatically during installation, but you can manually update the settings in Cline's configuration file if needed:\n\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\nExample configuration:\n```json\n{\n  \"mcpServers\": {\n    \"notion-kb\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--with\", \"fastmcp\",\n        \"--with\", \"python-dotenv\",\n        \"--with\", \"requests\",\n        \"fastmcp\",\n        \"run\",\n        \"/absolute/path/to/notion_mcp_server.py\"\n      ],\n      \"env\": {\n        \"DIFY_API_BACKEND_KEY\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\n## Development\n\nFor development and testing:\n\n1. Install dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n2. Run the development server:\n   ```bash\n   fastmcp dev notion_mcp_server.py\n   ```\n\nThis will start the MCP Inspector interface for testing the server.\n\n## Troubleshooting\n\n1. **Server not connecting**\n   - Verify your API key in the `.env` file\n   - Ensure the server path in Cline's config is absolute\n   - Check that uv is installed and in your PATH\n\n2. **Dependencies issues**\n   - Try reinstalling with `fastmcp install notion_mcp_server.py --force`\n   - Verify uv is installed correctly\n\n3. **Server hangs**\n   - Ensure you're using the uv run command as specified in the config\n   - Check the server logs for errors\n\n## Contributing\n\nSee [mcp_instructions.md](mcp_instructions.md) for detailed information about the server's implementation and architecture.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notion_mcp_server",
        "notion",
        "querying",
        "notion pages",
        "knowledge base",
        "notion knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "ryanjoachim--mcp-rtfm": {
      "owner": "ryanjoachim",
      "name": "mcp-rtfm",
      "url": "https://github.com/ryanjoachim/mcp-rtfm",
      "imageUrl": "/freedevtools/mcp/pfp/ryanjoachim.webp",
      "description": "Facilitates the creation of manuals from existing documentation through content analysis, generates metadata, and provides intelligent search capabilities to form a functional knowledge base.",
      "stars": 33,
      "forks": 7,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-20T13:06:58Z",
      "readme_content": "# MCP-RTFM\n\n[![TypeScript](https://img.shields.io/badge/TypeScript-5.0-blue.svg)](https://www.typescriptlang.org/)\n[![MCP](https://img.shields.io/badge/MCP-0.1.0-green.svg)](https://github.com/modelcontextprotocol)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n> \"RTFM!\" they say, but what if there's no FM to R? 🤔 Enter MCP-RTFM: an MCP server that helps you *create* the F*ing Manual everyone keeps telling people to read! Using advanced content analysis, metadata generation, and intelligent search capabilities, it transforms your non-existent or unreadable docs into an interconnected knowledge base that actually answers those \"basic questions\" before they're asked.\n\n> **Plot twist**: Instead of just telling people to RTFM, now you can actually give them an FM worth R-ing! Because the best response to \"read the f*ing manual\" is having a manual that's actually worth reading. 📚✨\n\n## 📚 Table of Contents\n\n- [Quick Start](#-quick-start)\n- [Features](#-features)\n- [Example Workflows](#-example-workflows)\n- [Installation](#-installation)\n- [Advanced Features](#-advanced-features)\n- [Development](#-development)\n- [Debugging](#-debugging)\n\n## 🚀 Quick Start\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the server\nnpm run build\n\n# Add to your MCP settings and start using\nawait use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"analyze_project_with_metadata\", // Enhanced initialization\n  args: { projectPath: \"/path/to/project\" }\n});\n\n// This will:\n// 1. Create documentation structure\n// 2. Analyze content with unified/remark\n// 3. Generate intelligent metadata\n// 4. Build search index with minisearch\n// 5. Add structured front matter\n// 6. Make your docs actually readable!\n```\n\n## ✨ Features\n\n### Documentation Management Tools\n\n- `analyze_existing_docs` - Analyze and enhance existing documentation with content analysis and metadata\n- `analyze_project_with_metadata` - Initialize documentation structure with enhanced content analysis and metadata generation\n- `analyze_project` - Basic initialization of documentation structure\n- `read_doc` - Read a documentation file (required before updating)\n- `update_doc` - Update documentation using diff-based changes\n- `get_doc_content` - Get current content of a documentation file\n- `get_project_info` - Get project structure and documentation status\n- `search_docs` - Search across documentation files with highlighted results\n- `update_metadata` - Update documentation metadata\n- `get_related_docs` - Find related documentation based on metadata and content links\n- `customize_template` - Create or update documentation templates\n\n### Default Documentation Files\n\nThe server automatically creates and manages these core documentation files:\n\n- `techStack.md` - Detailed inventory of tools, libraries, and configurations\n- `codebaseDetails.md` - Low-level explanations of code structure and logic\n- `workflowDetails.md` - Step-by-step workflows for key processes\n- `integrationGuides.md` - Instructions for external system connections\n- `errorHandling.md` - Troubleshooting strategies and practices\n- `handoff_notes.md` - Summary of key themes and next steps\n\n### Documentation Templates\n\nBuilt-in templates for different documentation types:\n\n- Standard Documentation Template\n- API Documentation Template\n- Workflow Documentation Template\n\nCustom templates can be created using the `customize_template` tool.\n\n## 📝 Example Workflows\n\n### 1. Analyzing Existing Documentation\n\n```typescript\n// Enhance existing documentation with advanced analysis\nawait use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"analyze_existing_docs\",\n  args: { projectPath: \"/path/to/project\" }\n});\n\n// This will:\n// - Find all markdown files in .handoff_docs\n// - Analyze content structure with unified/remark\n// - Generate intelligent metadata\n// - Build search index\n// - Add front matter if not present\n// - Establish document relationships\n// - Preserve existing content\n\n// The results include:\n// - Enhanced metadata for all docs\n// - Search index population\n// - Content relationship mapping\n// - Git context if available\n```\n\n### 2. Enhanced Project Documentation Setup\n\n```typescript\n// Initialize documentation with advanced content analysis\nawait use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"analyze_project_with_metadata\",\n  args: { projectPath: \"/path/to/project\" }\n});\n\n// Results include:\n// - Initialized documentation files\n// - Generated metadata from content analysis\n// - Established document relationships\n// - Populated search index\n// - Added structured front matter\n// - Git repository context\n\n// Get enhanced project information\nconst projectInfo = await use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"get_project_info\",\n  args: { projectPath: \"/path/to/project\" }\n});\n\n// Search across documentation with intelligent results\nconst searchResults = await use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"search_docs\",\n  args: {\n    projectPath: \"/path/to/project\",\n    query: \"authentication\"\n  }\n});\n\n// Results include:\n// - Weighted matches (title matches prioritized)\n// - Fuzzy search results\n// - Full content context\n// - Related document suggestions\n```\n\n### 3. Updating Documentation with Content Links\n\n```typescript\n// First read the document\nawait use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"read_doc\",\n  args: {\n    projectPath: \"/path/to/project\",\n    docFile: \"techStack.md\"\n  }\n});\n\n// Update with content that links to other docs\nawait use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"update_doc\",\n  args: {\n    projectPath: \"/path/to/project\",\n    docFile: \"techStack.md\",\n    searchContent: \"[Why this domain is critical to the project]\",\n    replaceContent: \"The tech stack documentation provides essential context for development. See [[workflowDetails]] for implementation steps.\",\n    continueToNext: true // Automatically move to next document\n  }\n});\n```\n\n### 4. Managing Documentation Metadata\n\n```typescript\n// Update metadata for better organization\nawait use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"update_metadata\",\n  args: {\n    projectPath: \"/path/to/project\",\n    docFile: \"techStack.md\",\n    metadata: {\n      title: \"Technology Stack Overview\",\n      category: \"architecture\",\n      tags: [\"infrastructure\", \"dependencies\", \"configuration\"]\n    }\n  }\n});\n\n// Find related documentation\nconst related = await use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"get_related_docs\",\n  args: {\n    projectPath: \"/path/to/project\",\n    docFile: \"techStack.md\"\n  }\n});\n```\n\n### 5. Searching Documentation with Context\n\n```typescript\n// Search with highlighted results\nconst results = await use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"search_docs\",\n  args: {\n    projectPath: \"/path/to/project\",\n    query: \"authentication\"\n  }\n});\n\n// Results include:\n// - File name\n// - Line numbers\n// - Highlighted matches\n// - Context around matches\n```\n\n### 6. Creating Custom Templates\n\n```typescript\n// Create a custom template for architecture decisions\nawait use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"customize_template\",\n  args: {\n    templateName: \"architecture-decision\",\n    content: `# {title}\n\n## Context\n[Background and context for the decision]\n\n## Decision\n[The architecture decision made]\n\n## Consequences\n[Impact and trade-offs of the decision]\n\n## Related Decisions\n[Links to related architecture decisions]`,\n    metadata: {\n      category: \"architecture\",\n      tags: [\"decision-record\", \"design\"]\n    }\n  }\n});\n```\n\n## 🔧 Installation\n\n### VSCode (Roo Cline)\n\nAdd to settings file at:\nAdd to settings file at:\n- Windows: `%APPDATA%\\Code\\User\\globalStorage\\rooveterinaryinc.roo-cline\\settings\\cline_mcp_settings.json`\n- MacOS: `~/Library/Application Support/Code/User/globalStorage/rooveterinaryinc.roo-cline/settings/cline_mcp_settings.json`\n- Linux: `~/.config/Code/User/globalStorage/rooveterinaryinc.roo-cline/settings/cline_mcp_settings.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-rtfm\": {\n      \"command\": \"node\",\n      \"args\": [\"<path-to-mcp-rtfm>/build/index.js\"],\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n  }\n}\n```\n\n### Claude Desktop\n\nAdd to config file at:\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n- MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Linux: `~/.config/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-rtfm\": {\n      \"command\": \"node\",\n      \"args\": [\"<path-to-mcp-rtfm>/build/index.js\"],\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n  }\n}\n```\n\n## 🎯 Advanced Features\n\n### Content Linking\n\nUse `[[document-name]]` syntax to create links between documents. The server automatically tracks these relationships and includes them when finding related documentation.\n\n### Metadata-Driven Organization\n\nDocuments are organized using:\n\n- Categories (e.g., \"architecture\", \"api\", \"workflow\")\n- Tags for flexible grouping\n- Automatic relationship discovery based on shared metadata\n- Content link analysis\n\n### Enhanced Content Analysis\n\nThe server uses advanced libraries for better documentation management:\n\n- **unified/remark** for Markdown processing:\n  - AST-based content analysis\n  - Accurate heading structure detection\n  - Code block and link extraction\n  - Proper Markdown parsing and manipulation\n\n- **minisearch** for powerful search capabilities:\n  - Fast fuzzy searching across all documentation\n  - Field-weighted search (titles given higher priority)\n  - Full content and metadata indexing\n  - Efficient caching with TTL management\n  - Real-time search index updates\n\n### Intelligent Metadata Generation\n\n- Automatic content analysis for categorization\n- Smart tag generation based on content patterns\n- Structured front matter in documents\n- AST-based title and section detection\n- Code snippet identification and tagging\n- Context-aware result presentation\n\n### Template System\n\n- Built-in templates for common documentation types\n- Custom template support with metadata defaults\n- Template inheritance and override capabilities\n- Placeholder system for consistent formatting\n\n## 🛠️ Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the server\nnpm run build\n\n# Development with auto-rebuild\nnpm run watch\n```\n\n## 🐛 Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. Use the [MCP Inspector](https://github.com/modelcontextprotocol/inspector):\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## 📄 License\n\nMIT © [Model Context Protocol](https://github.com/modelcontextprotocol)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "documentation",
        "metadata",
        "rtfm",
        "notetaking knowledge",
        "documentation content",
        "rtfm facilitates"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "shaunporwal--DICOM-MCP": {
      "owner": "shaunporwal",
      "name": "DICOM-MCP",
      "url": "https://github.com/shaunporwal/DICOM-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/shaunporwal.webp",
      "description": "Manage and summarize DICOM images by adding notes and generating summaries to enhance workflows with medical imaging data.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-08T14:38:32Z",
      "readme_content": "# DICOM-MCP MCP server\n\nMCP to work with DICOM images\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"DICOM-MCP\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/shaunporwal/Documents/GitHub/projects/DICOM-MCP\",\n        \"run\",\n        \"DICOM-MCP\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"DICOM-MCP\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"DICOM-MCP\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/shaunporwal/Documents/GitHub/projects/DICOM-MCP run dicom-mcp\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "dicom",
        "notetaking",
        "imaging",
        "dicom images",
        "summarize dicom",
        "dicom mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "sirmews--apple-notes-mcp": {
      "owner": "sirmews",
      "name": "apple-notes-mcp",
      "url": "https://github.com/sirmews/apple-notes-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/sirmews.webp",
      "description": "Access and manage a local Apple Notes database, enabling search and retrieval of note content directly within Claude Desktop. Allows users to read all notes and perform specific searches.",
      "stars": 118,
      "forks": 14,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T22:26:10Z",
      "readme_content": "# Apple Notes Model Context Protocol Server for Claude Desktop.\n\nRead your local Apple Notes database and provide it to Claude Desktop.\n\nNow Claude can search your most forgotten notes and know even more about you.\n\nNoting could go wrong.\n\n## Components\n\n### Resources\n\nThe server implements the ability to read and write to your Apple Notes.\n\n### Tools\n\nThe server provides multiple prompts:\n- `get-all-notes`: Get all notes.\n- `read-note`: Get full content of a specific note.\n- `search-notes`: Search through notes.\n\n### Missing Features:\n\n- No handling of encrypted notes (ZISPASSWORDPROTECTED)\n- No support for pinned notes filtering\n- No handling of cloud sync status\n- Missing attachment content retrieval\n- No support for checklist status (ZHASCHECKLIST)\n- No ability to create or edit notes\n\n## Quickstart\n\n### Install the server\n\nRecommend using [uv](https://docs.astral.sh/uv/getting-started/installation/) to install the server locally for Claude.\n\n```\nuvx apple-notes-mcp\n```\nOR\n```\nuv pip install apple-notes-mcp\n```\n\nAdd your config as described below.\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\nNote: You might need to use the direct path to `uv`. Use `which uv` to find the path.\n\n\n__Development/Unpublished Servers Configuration__\n  \n```json\n\"mcpServers\": {\n  \"apple-notes-mcp\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"--directory\",\n      \"{project_dir}\",\n      \"run\",\n      \"apple-notes-mcp\"\n    ]\n  }\n}\n```\n\n\n__Published Servers Configuration__\n  \n```json\n\"mcpServers\": {\n  \"apple-notes-mcp\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"apple-notes-mcp\"\n    ]\n  }\n}\n```\n\n\n## Mac OS Disk Permissions\n\nYou'll need to grant Full Disk Access to the server. This is because the Apple Notes sqlite database is nested deep in the MacOS file system.\n\nI may look at an AppleScript solution in the future if this annoys me further or if I want to start adding/appending to Apple Notes.\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory {project_dir} run apple-notes-mcp\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n## Source Code\n\nThe source code is available on [GitHub](https://github.com/sirmews/apple-notes-mcp).\n\n## Contributing\n\nSend your ideas and feedback to me on [Bluesky](https://bsky.app/profile/perfectlycromulent.bsky.social) or by opening an issue.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "sirmews",
        "notes database",
        "apple notes",
        "note content"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "skydeckai--mcp-server-rememberizer": {
      "owner": "skydeckai",
      "name": "mcp-server-rememberizer",
      "url": "https://github.com/skydeckai/mcp-server-rememberizer",
      "imageUrl": "/freedevtools/mcp/pfp/skydeckai.webp",
      "description": "Interact with Rememberizer's document and knowledge management API to perform document search, retrieval, and management. Supports access to both documents and Slack discussions.",
      "stars": 34,
      "forks": 7,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-12T12:39:35Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/skydeckai-mcp-server-rememberizer-badge.png)](https://mseep.ai/app/skydeckai-mcp-server-rememberizer)\n\n# MCP Server Rememberizer\n\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/fe7a40fd-30c1-4767-84f9-d33bf997497e)\n\nA [Model Context Protocol](https://www.anthropic.com/news/model-context-protocol) server for interacting with Rememberizer's document and knowledge management API. This server enables Large Language Models to search, retrieve, and manage documents and integrations through Rememberizer.\n\nPlease note that `mcp-server-rememberizer` is currently in development and the functionality may be subject to change.\n\n## Components\n\n### Resources\n\nThe server provides access to two types of resources: Documents or Slack discussions\n\n### Tools\n\n1. `retrieve_semantically_similar_internal_knowledge`\n\n    - Send a block of text and retrieve cosine similar matches from your connected Rememberizer personal/team internal knowledge and memory repository\n    - Input:\n        - `match_this` (string): Up to a 400-word sentence for which you wish to find semantically similar chunks of knowledge\n        - `n_results` (integer, optional): Number of semantically similar chunks of text to return. Use 'n_results=3' for up to 5, and 'n_results=10' for more information\n        - `from_datetime_ISO8601` (string, optional): Start date in ISO 8601 format with timezone (e.g., 2023-01-01T00:00:00Z). Use this to filter results from a specific date\n        - `to_datetime_ISO8601` (string, optional): End date in ISO 8601 format with timezone (e.g., 2024-01-01T00:00:00Z). Use this to filter results until a specific date\n    - Returns: Search results as text output\n\n2. `smart_search_internal_knowledge`\n\n    - Search for documents in Rememberizer in its personal/team internal knowledge and memory repository using a simple query that returns the results of an agentic search. The search may include sources such as Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files\n    - Input:\n        - `query` (string): Up to a 400-word sentence for which you wish to find semantically similar chunks of knowledge\n        - `user_context` (string, optional): The additional context for the query. You might need to summarize the conversation up to this point for better context-awared results\n        - `n_results` (integer, optional): Number of semantically similar chunks of text to return. Use 'n_results=3' for up to 5, and 'n_results=10' for more information\n        - `from_datetime_ISO8601` (string, optional): Start date in ISO 8601 format with timezone (e.g., 2023-01-01T00:00:00Z). Use this to filter results from a specific date\n        - `to_datetime_ISO8601` (string, optional): End date in ISO 8601 format with timezone (e.g., 2024-01-01T00:00:00Z). Use this to filter results until a specific date\n    - Returns: Search results as text output\n\n3. `list_internal_knowledge_systems`\n\n    - List the sources of personal/team internal knowledge. These may include Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files\n    - Input: None required\n    - Returns: List of available integrations\n\n4. `rememberizer_account_information`\n\n    - Get information about your Rememberizer.ai personal/team knowledge repository account. This includes account holder name and email address\n    - Input: None required\n    - Returns: Account information details\n\n5. `list_personal_team_knowledge_documents`\n\n    - Retrieves a paginated list of all documents in your personal/team knowledge system. Sources could include Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files\n    - Input:\n        - `page` (integer, optional): Page number for pagination, starts at 1 (default: 1)\n        - `page_size` (integer, optional): Number of documents per page, range 1-1000 (default: 100)\n    - Returns: List of documents\n\n6. `remember_this`\n\n    - Save a piece of text information in your Rememberizer.ai knowledge system so that it may be recalled in future through tools retrieve_semantically_similar_internal_knowledge or smart_search_internal_knowledge\n    - Input:\n        - `name` (string): Name of the information. This is used to identify the information in the future\n        - `content` (string): The information you wish to memorize\n    - Returns: Confirmation data\n\n## Installation\n\n### Manual Installation\n\n```bash\nuvx mcp-server-rememberizer\n```\n\n### Via MseeP AI Helper App\n\nIf you have MseeP AI Helper app installed, you can search for \"Rememberizer\" and install the mcp-server-rememberizer.\n\n![MseeP AI Helper](https://www.gitbook.com/cdn-cgi/image/dpr=2,width=760,onerror=redirect,format=auto/https%3A%2F%2Ffiles.gitbook.com%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FyNqpTh7Mh66N0RnO0k24%252Fuploads%252FuTpQuJffWohPRTvjmyVe%252FScreenshot%25202025-07-29%2520at%252014.43.12.png%3Falt%3Dmedia%26token%3D7f046f3b-dc69-4f09-8f8c-978097f0066e)\n\n## Configuration\n\n### Environment Variables\n\nThe following environment variables are required:\n\n-   `REMEMBERIZER_API_TOKEN`: Your Rememberizer API token\n\nYou can register an API key by creating your own [Common Knowledge in Rememberizer](https://docs.rememberizer.ai/developer/registering-and-using-api-keys).\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n\"mcpServers\": {\n  \"rememberizer\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-rememberizer\"],\n      \"env\": {\n        \"REMEMBERIZER_API_TOKEN\": \"your_rememberizer_api_token\"\n      }\n    },\n}\n```\n\n### Usage with MseeP AI Helper App\n\nAdd the env REMEMBERIZER_API_TOKEN to mcp-server-rememberizer.\n\n![MseeP AI Helper Configuration](https://www.gitbook.com/cdn-cgi/image/dpr=2,width=760,onerror=redirect,format=auto/https%3A%2F%2Ffiles.gitbook.com%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FyNqpTh7Mh66N0RnO0k24%252Fuploads%252FHxisSUT1anmCpoHhW8CJ%252FScreenshot%25202025-07-29%2520at%252014.45.42.png%3Falt%3Dmedia%26token%3D1332394a-cdbe-4e7b-9099-1dbf14e58ffb)\n\nWith support from the Rememberizer MCP server, you can now ask the following questions in your Claude Desktop app or SkyDeck AI GenStudio\n\n-   _What is my Rememberizer account?_\n\n-   _List all documents that I have there._\n\n-   _Give me a quick summary about \"...\"_\n\n-   and so on...\n\nTo learn more about Rememberizer MCP Server: https://docs.rememberizer.ai/personal-use/integrations/rememberizer-mcp-servers\n\n## License\n\nThis project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "rememberizer",
        "retrieval",
        "notetaking",
        "rememberizer document",
        "server rememberizer",
        "rememberizer interact"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "soukouki--obsidian_fetch": {
      "owner": "soukouki",
      "name": "obsidian_fetch",
      "url": "https://github.com/soukouki/obsidian_fetch",
      "imageUrl": "/freedevtools/mcp/pfp/soukouki.webp",
      "description": "Retrieve and load notes efficiently from Obsidian vaults, enabling enhanced interactions with language models by cleaning link queries and displaying backlinks to opened files. Streamlined for local GPU setups to improve note retrieval speed and efficiency.",
      "stars": 2,
      "forks": 0,
      "license": "MIT License",
      "language": "Ruby",
      "updated_at": "2025-08-19T16:26:33Z",
      "readme_content": "# ObsidianFetch\n\nMCP servers focused on fetching and presenting information from Obsidian vaults.\n\nThe existing MCP server has the following drawbacks:\n- It supports many commands, which can cause slow prompt loading when computational resources are limited.\n- When reading a note labeled \"Sample Note\", it is necessary to search for its path first before loading it, but the LLM may not always follow this procedure.\n- Some tools include unnecessary options, leading the LLM to sometimes fail to invoke them correctly.\n\nThese issues become particularly noticeable when running an LLM on a local GPU.  \nTo address this, we developed a new MCP server that simply retrieves and loads lists of notes.\n\nThe new server also provides the following additional features:\n- When the LLM attempts to retrieve link information by searching with brackets like `[[link name]]`, the server automatically removes any characters that cannot be used in links.\n- In addition to loading the note contents, it also displays backlinks—notes that link to the currently opened note.\n\t- This allows the LLM to load and understand the connections between related notes via backlinks.\n\n## Installation\n\n```bash\ngem install obsidian_fetch\n```\n\n## Usage\n\n```bash\nobsidian_fetch /path/to/your/vault\n```\n\n## Contributing\n\nBug reports and pull requests are welcome on GitHub at https://github.com/soukouki/obsidian_fetch.\n\n## License\n\nThe gem is available as open source under the terms of the [MIT License](https://opensource.org/licenses/MIT).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "retrieval",
        "note retrieval",
        "notes efficiently",
        "load notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "sseaan--mcp-server-inbox": {
      "owner": "sseaan",
      "name": "mcp-server-inbox",
      "url": "https://github.com/sseaan/mcp-server-inbox",
      "imageUrl": "/freedevtools/mcp/pfp/sseaan.webp",
      "description": "Send notes to an Inbox API endpoint using a configured user token, supporting notes up to 3000 characters. Integrate seamlessly into MCP-enabled environments to enhance note-taking workflows.",
      "stars": 0,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-04-19T11:23:28Z",
      "readme_content": "# Inbox MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@sseaan/mcp-server-inbox)](https://smithery.ai/server/@sseaan/mcp-server-inbox)\n\n一个基于[MCP(Model Context Protocol)](https://modelcontextprotocol.io)的服务器，用于将笔记发送到Inbox API。\n\n## 功能\n\n这个MCP服务器提供了一个工具，可以将笔记内容发送到指定的Inbox API端点。\n\n- 接入 inBox 笔记 API\n- 支持通过 MCP 客户端创建笔记\n- 支持设置笔记标题\n\n## 安装\n\n### 安装 via Smithery\n\n要自动为 Claude Desktop 安装 MCP Server 服务器，你可以使用 [Smithery](https://smithery.ai/server/@sseaan/mcp-server-inbox):\n\n```bash\nnpx -y @smithery/cli install @sseaan/mcp-server-inbox --client claude\n```\n### 前置要求\n\n- inBox 笔记 API (需要PRO)\n- 支持 MCP 协议的客户端（CherryStudio/Cursor等）\n\n### 依赖\n\n- Python 3.8+\n- requests\n- mcp[cli]\n\n### 安装步骤\n\n```bash\n# 克隆仓库\ngit clone https://github.com/example/inbox-mcp-server.git\ncd inbox-mcp-server\n\n# 安装依赖\npip install -e .\n```\n\n## 使用方法\n\n### 环境变量设置\n\n在运行服务器之前，需要设置以下环境变量：\n\n- `INBOX_TOKEN`: 用于访问Inbox API的用户令牌\n\n```bash\n# Linux/macOS\nexport INBOX_TOKEN=your_token_here\n\n# Windows (CMD)\nset INBOX_TOKEN=your_token_here\n\n# Windows (PowerShell)\n$env:INBOX_TOKEN=\"your_token_here\"\n```\n\n### 运行服务器\n\n```bash\n# 直接运行\npython main.py\n\n# 或使用MCP CLI\nmcp run main.py\n```\n\n### 在Claude Desktop中安装\n\n```bash\nmcp install main.py\n```\n## 在 MCP 客户端中配置\n\n在Smithery输入INBOX_TOKEN\n获得json配置文件如下：\n```json\n\"mcp-server-inbox\": {\n  \"command\": \"npx\",\n  \"args\": [\n    \"-y\",\n    \"@smithery/cli@latest\",\n    \"run\",\n    \"@sseaan/mcp-server-inbox\",\n    \"--key\",\n    \"*******************************\"\n  ]\n}\n```\n\n### CherryStudio\n\n1. 打开 CherryStudio 的 MCP 服务器设置页面\n2. 点击 \"添加服务器\"\n3. 输入服务器名称（例如 \"inbox-mcp-server\"）\n4. 类型选择 “标准输入/输出(stdio)”\n5. 命令输入npx\n6. 输入参数\n```\n-y\n@smithery/cli@latest\nrun\n@sseaan/mcp-server-inbox\n--key\n*******************************\n```\n7. 点击 \"保存\"\n\n### Cursor\n\n1. 打开 Cursor 的 MCP 服务配置文件（通常位于 `~/.cursor/mcp.json`）\n2. 添加 mcp-server-inbox 的配置：\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-inbox\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@smithery/cli@latest\",\n        \"run\",\n        \"@sseaan/mcp-server-inbox\",\n        \"--key\",\n        \"*******************************\"\n      ]\n    }\n  }\n}\n```\n\n### 其他 MCP 客户端\n\n请参考对应 MCP 客户端的配置文档，添加类似的配置信息。\n\n## API 说明\n\n### 发送笔记\n\n```\n工具名称: send_note\n参数:\n  - content: 笔记内容 (最多3000字符)\n  - title: 笔记标题\n```\n\n## 许可证\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "workflows",
        "notes inbox",
        "send notes",
        "supporting notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "stopWarByWar--beeper-mcp-server": {
      "owner": "stopWarByWar",
      "name": "beeper-mcp-server",
      "url": "https://github.com/stopWarByWar/beeper-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/stopWarByWar.webp",
      "description": "Store and manage notes with customizable summaries and detailed interaction through a simple interface. Utilizes a custom URI scheme for note access and supports note addition and summarization based on user-defined detail levels.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-05-30T19:12:07Z",
      "readme_content": "# beeper_mcp MCP server\n\na mcp server for interacting with chain\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"beeper_mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/pan/work/openos/beeper/beeper_mcp\",\n        \"run\",\n        \"beeper_mcp\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"beeper_mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"beeper_mcp\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/pan/work/openos/beeper/beeper_mcp run beeper-mcp\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "summarization",
        "manage notes",
        "note access",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "swairshah--zotero-mcp-server": {
      "owner": "swairshah",
      "name": "zotero-mcp-server",
      "url": "https://github.com/swairshah/zotero-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/swairshah.webp",
      "description": "Access and manage your Zotero library programmatically, enabling the search of papers, management of notes, and the ability to request summaries through MCP clients. Facilitates seamless integration into research workflows with existing tools.",
      "stars": 20,
      "forks": 2,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-08-23T05:46:16Z",
      "readme_content": "# Zotero MCP Server\n\nA MCP (Model Context Protocol) server to let your MCP clients (e.g. Anthropic Claude App, Goose, possibly vscode Cline too) interact with your local Zotero repository. This server enables programmatic access to your Zotero library, allowing you to search papers, manage notes, and more.\n\n**Note**: If you don't want to set up API keys, see the [SQLite database server option](#alternative-direct-sqlite-database-access) below.\n\n## Setup\n\n1. Install dependencies:\n```bash\npip install -e .\n```\n\n2. Create a `.env` file in the root directory with your Zotero credentials:\n```bash\nZOTERO_API_KEY=your_api_key_here\nZOTERO_USER_ID=your_user_id_here\n```\n\nYou can get your Zotero API key and user ID from [Zotero's settings page](https://www.zotero.org/settings/keys).\n\n## Integration with Anthropic Desktop App\n\nTo integrate with the Anthropic Desktop app, add the following configuration to `~/Library/Application Support/Claude/claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"zotero-mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/swairshah/work/research/zotero-mcp\",\n        \"run\",\n        \"python\",\n        \"-m\",\n        \"zotero_mcp.server\"\n      ]\n    }\n  }\n}\n```\nIf this gives an error like\n``` \n{\"method\":\"initialize\",\"params\":{\"protocolVersion\":\"2024-11-05\",\"capabilities\":{},\"clientInfo\":{\"name\":\"claude-ai\",\"version\":\"0.1.0\"}},\"jsonrpc\":\"2.0\",\"id\":0}\n  error: unexpected argument '--directory' found\n```\nThen use the following config, make sure to do `uv venv`; `source .venv/bin/activate`; `uv pip install \".[dev]\"` to make sure the server can be run with all dependencies. \n\n```json\n{\n   \"mcpServers\": {\n      \"zotero-mcp-server\": {\n        \"command\": \"bash\",\n        \"args\": [\n          \"-c\",\n          \"cd /Users/shahswai/personal/zotero-mcp-server && source .venv/bin/activate && python -m zotero_mcp.server\"\n        ]\n      }\n    }\n  }\n```\n\n## Alternative: Direct SQLite Database Access\n\nIf you prefer to bypass the Zotero API entirely and work directly with the SQLite database, use `zotero_mcp/db_server.py`. This approach gives you full control over your Zotero data without API limitations. Note that you'll need to close Zotero completely before using this method since SQLite locks the database when Zotero is running.\n\nClaude MCP config for the SQLite version:\n```json\n{\n  \"mcpServers\": {\n    \"zotero-mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/swair/work/code/zotero-mcp-server\",\n        \"run\",\n        \"python\",\n        \"-m\",\n        \"zotero_mcp.db_server\"\n      ]\n    }\n  }\n}\n```\n\n## Example Usage\n\n![Zotero MCP Server Example](screenshot.png)\n\nThe server allows you to:\n- Search papers by tags\n- Get paper details and attached notes\n- Add notes to papers\n- Request paper summaries\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "zotero",
        "notetaking",
        "notes",
        "zotero library",
        "manage zotero",
        "zotero mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "takuya0206--obsidian-mcp": {
      "owner": "takuya0206",
      "name": "obsidian-mcp",
      "url": "https://github.com/takuya0206/obsidian-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/takuya0206.webp",
      "description": "Interact with an Obsidian vault to read, write, and manipulate notes using a standardized interface, facilitating enhanced productivity and organization.",
      "stars": 2,
      "forks": 1,
      "license": "ISC License",
      "language": "TypeScript",
      "updated_at": "2025-04-09T09:26:56Z",
      "readme_content": "# Obsidian MCP (Model Context Protocol)\n\nObsidian MCP is a tool that allows you to interact with your Obsidian vault using the Model Context Protocol. This enables AI assistants to read, write, and manipulate notes in your Obsidian vault through a standardized interface.\n\n\n## Prerequisites\n\n- Node.js 18 or higher\n- Obsidian with [Local REST API plugin](https://github.com/coddingtonbear/obsidian-local-rest-api) installed and configured\n- API key generated from the Local REST API plugin\n\n## Setting MCP Server (e.g. Claude Desktop App)\n\n1. Clone this repository\n2. Install dependencies:\n   ```\n   npm install\n   ```\n3. Build the project:\n   ```\n   npm run build\n   ```\n\n4. Configure Claude Desktop App to use this MCP server:\n   ```\n   {\n      \"mcpServers\": {\n        \"Obsidian\": {\n          \"command\": \"node\",\n          \"args\": [\"/Users/<Your Own Path>/obsisian-mcp/build/index.js\"],\n          \"env\": {\n            \"apiKey\": \"<Your API Token>\",\n            \"port\": \"27123\",\n            \"host\": \"127.0.0.1\"\n          }\n        }\n      }\n    }\n   ```\n## Development\nCreate `.env` and configure \"apiKey\", \"port\", and \"host\" as mentioned above.\n\n\n### Available Tools\n\nThe following tools are implemented:\n\n1. **readNote** - Read the contents of a specific note\n   ```\n   {\n     \"path\": \"path/to/note.md\"\n   }\n   ```\n\n2. **readActiveNote** - Read the contents of the current active note\n   ```\n   {}\n   ```\n\n3. **listNotes** - Recursively lists files and folders in the entire Vault or under a specified folder\n   ```\n   {\n     \"path\": \"optional/folder/path\"\n   }\n   ```\n\n4. **patchNote** - Inserts content into an existing note relative to a heading, block reference, or frontmatter field\n   ```\n   {\n     \"path\": \"path/to/note.md\",\n     \"operation\": \"append|prepend|replace\",\n     \"targetType\": \"heading|block|frontmatter\",\n     \"target\": \"target_identifier\",\n     \"content\": \"content to insert\"\n   }\n   ```\n\n5. **searchWithJsonLogic** - Search Obsidian notes using JsonLogic format queries\n   ```\n   {\n     \"query\": {\n       // JsonLogic query object\n     }\n   }\n   ```\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "obsidian",
        "notetaking",
        "notes",
        "interact obsidian",
        "obsidian mcp",
        "obsidian vault"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "tan-yong-sheng--triliumnext-mcp": {
      "owner": "tan-yong-sheng",
      "name": "triliumnext-mcp",
      "url": "https://github.com/tan-yong-sheng/triliumnext-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/tan-yong-sheng.webp",
      "description": "Interact with Trilium Notes to manage notes via searching, creating, updating, and deleting functionalities directly through applications.",
      "stars": 16,
      "forks": 3,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-25T12:05:02Z",
      "readme_content": "# TriliumNext Notes' MCP Server\n\n⚠️ **DISCLAIMER: This is a prototype for https://github.com/TriliumNext/Notes/issues/705. Suggested only for developer use. Please backup your Trilium notes before using this tool.** ⚠️\n\nA model context protocol server for TriliumNext Notes. This server provides tools to interact with your Trilium Notes instance through MCP.\n\n## Quick Start\n\nMake sure to set up your environment variables first:\n- `TRILIUM_API_URL` (default: http://localhost:8080/etapi)\n- `TRILIUM_API_TOKEN` (required, get this from your Trilium Notes settings)\n- `PERMISSIONS` (optional, default='READ;WRITE', where READ grants access to `search_notes`, `get_note`, `resolve_note_id`, and `read_attributes`, and WRITE grants access to `create_note`, `update_note`, `delete_note`, and `manage_attributes`)\n- `VERBOSE` (optional, default='false', which if true will print verbose debugging logs)\n\n## Installation\n\n### 1. Using with Claude Desktop\n\nAdd the server config to your Claude Desktop configuration file:\n\n#### For Local Installation (on Windows)\n\n```json\n\"triliumnext-mcp\": {\n  \"command\": \"cmd\",\n  \"args\": [\n        \"/k\",\n        \"npx\",\n        \"-y\",\n        \"triliumnext-mcp\"\n      ],\n   \"env\": {\n    \"TRILIUM_API_URL\": \"http://localhost:8080/etapi\",\n    \"TRILIUM_API_TOKEN\": \"<YOUR_TRILIUM_API_TOKEN>\",\n    \"PERMISSIONS\": \"READ;WRITE\"\n  }\n}\n```\n\n#### For Local installation (on Linux)\n\n```json\n\"triliumnext-mcp\": {\n  \"command\": \"npx\",\n  \"args\": [\n        \"-y\",\n        \"triliumnext-mcp\"\n      ],\n   \"env\": {\n    \"TRILIUM_API_URL\": \"http://localhost:8080/etapi\",\n    \"TRILIUM_API_TOKEN\": \"<YOUR_TRILIUM_API_TOKEN>\",\n    \"PERMISSIONS\": \"READ;WRITE\"\n  }\n}\n```\n\n#### For Development (on Windows / Linux)\n\n```bash\ncd /path/to/triliumnext-mcp\nnpm run build\n```\n\n```json\n\"triliumnext-mcp\": {\n  \"command\": \"node\",\n  \"args\": [\n        \"/path/to/triliumnext-mcp/build/index.js\"\n  ],\n  \"env\": {\n    \"TRILIUM_API_URL\": \"http://localhost:8080/etapi\",\n    \"TRILIUM_API_TOKEN\": \"<YOUR_TRILIUM_API_TOKEN>\",\n    \"PERMISSIONS\": \"READ;WRITE\",\n    \"VERBOSE\": \"true\"\n  }\n}\n```\n\nLocation of the configuration file:\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n- MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n**Feedback**: Please report issues and test results at [GitHub Issues](https://github.com/TriliumNext/Notes/issues)\n\n## Available Tools\n\nThe server provides the following tools for note management:\n\n### Search & Discovery Tools\n\n- `search_notes` - Unified search with comprehensive filtering capabilities including keyword search, date ranges, field-specific searches, attribute searches, note properties, template-based searches, note type filtering, MIME type filtering, and hierarchy navigation.\n- `resolve_note_id` - Find a note's ID by its title. Essential for getting a note's ID to use with other tools.\n\n### Note Management Tools\n\n- `get_note` - Retrieve a note and its content by ID. Can also be used with regex to extract specific patterns from the content.\n- `create_note` - Create a new note. Supports 9 note types and allows creating attributes (labels and relations) in the same step.\n- `update_note` - Updates a note's title or content. Requires a `mode` (`'overwrite'` or `'append'`) to specify the update type and an `expectedHash` to prevent conflicts.\n- `delete_note` - Permanently delete a note (⚠️ cannot be undone).\n\n### Attribute Management Tools\n\n- `read_attributes` - Read all attributes (labels and relations) for a given note.\n- `manage_attributes` - Create, update, or delete attributes on a note. Supports batch creation.\n\n> 📖 **Detailed Usage**: See [Note Management Guide](docs/manage-notes-examples/index.md) for revision control strategy and best practices.\n\n## Example Queries\n\n### Search & Discovery\n- \"Find my most recent 10 notes about 'n8n' since the beginning of 2024\"\n- \"Show me notes I've edited in the last 7 days\"\n- \"List all notes under 'n8n Template' folder, including subfolders\"\n\n### Content Management\n- \"Add today's update to my work log\" (uses `update_note` with `mode: 'append'`)\n- \"Replace this draft with the final version\" (uses `update_note` with `mode: 'overwrite'`)\n- \"Create a new note called 'Weekly Review' in my journal folder\"\n\n> 📖 **More Examples**: See [User Query Examples](docs/user-query-examples.md) for comprehensive usage scenarios.\n\n## Documentation\n\n- [Note Management Guide](docs/manage-notes-examples/index.md) - Safe content editing with revision control\n- [User Query Examples](docs/user-query-examples.md) - Natural language query examples\n- [Search Query Examples](docs/search-examples/) - Advanced search syntax and filters\n\n## Development\n\nIf you want to contribute or modify the server:\n\n```bash\n# Clone the repository\ngit clone https://github.com/tan-yong-sheng/triliumnext-mcp.git\n\n# Install dependencies\nnpm install\n\n# Build the server\nnpm run build\n\n# For development with auto-rebuild\nnpm run watch\n```\n\n## Contributing\n\nContributions are welcome! If you are looking to improve the server, please familiarize yourself with the official [Trilium Search DSL documentation](https://triliumnext.github.io/Docs/Wiki/search.html) and our internal [Search Query Examples](docs/search-examples/) to understand how search queries are constructed.\n\nPlease feel free to open an issue or submit a pull request.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "triliumnext",
        "trilium",
        "notetaking",
        "trilium notes",
        "sheng triliumnext",
        "triliumnext mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "tcsavage--mcp-obsidian-index": {
      "owner": "tcsavage",
      "name": "mcp-obsidian-index",
      "url": "https://github.com/tcsavage/mcp-obsidian-index",
      "imageUrl": "/freedevtools/mcp/pfp/tcsavage.webp",
      "description": "Provides semantic search over an Obsidian vault and exposes recently modified notes as resources. Notes can be accessed using a specific URL scheme and have markdown media type.",
      "stars": 8,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-30T03:22:49Z",
      "readme_content": "# Obsidian Index MCP server\n\nAn MCP server that provides a semantic search over an Obsidian vault and exposes recent notes as resources.\n\n## Components\n\n### Resources\n\nThe server exposes recently modified notes in your vaults as resources to MCP clients.\n- Notes are addressed by an `obsidian://<VAULT_NAME>/<NOTE_PATH>` URL scheme\n- Notes have the `text/markdown` media type\n\n### Tools\n\nThe server implements one tool:\n- `search-notes`: Performs semantic search over indexed notes\n\n## Run the server\n\n```bash\nuv run obsidian-index mcp --vault <VAULT_PATH> --database <DATABASE_PATH> --reindex --watch\n```\n\n- `--vault`: Path to the Obsidian vault (can be specified multiple times)\n- `--database`: Path to the local database file (will be created if it doesn't exist)\n- `--reindex`: Reindex all notes in the vault (you probably want this every time right now)\n- `--watch`: Watch for changes in the vault and update the index accordingly\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"obsidian-index\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<PATH_TO_PROJECT>\",\n        \"run\",\n        \"obsidian-index\",\n        \"--database\",\n        \"<PATH_TO_DATABASE>\",\n        \"--vault\",\n        \"<PATH_TO_VAULT>\",\n        \"--reindex\",\n        \"--watch\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"obsidian-index\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"obsidian-index\",\n        \"--database\",\n        \"<PATH_TO_DATABASE>\",\n        \"--vault\",\n        \"<PATH_TO_VAULT>\",\n        \"--reindex\",\n        \"--watch\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory <PATH_TO_PROJECT> run obsidian-index\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "obsidian",
        "notes resources",
        "search obsidian",
        "obsidian index"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "teamcurri--mcp-linear": {
      "owner": "teamcurri",
      "name": "mcp-linear",
      "url": "https://github.com/teamcurri/mcp-linear",
      "imageUrl": "/freedevtools/mcp/pfp/teamcurri.webp",
      "description": "Interact with Curri's API to manage text notes and generate summaries. Provides features for creating notes, listing them, and summarizing their contents.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-02-18T19:41:18Z",
      "readme_content": "# curri-mcp-server MCP Server\n\nAn MCP server for interacting with Curri&#39;s API\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"curri-mcp-server\": {\n      \"command\": \"/path/to/curri-mcp-server/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "teamcurri",
        "text notes",
        "notetaking knowledge",
        "creating notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "teddylee777--mcpdoc": {
      "owner": "teddylee777",
      "name": "mcpdoc",
      "url": "https://github.com/teddylee777/mcpdoc",
      "imageUrl": "/freedevtools/mcp/pfp/teddylee777.webp",
      "description": "Provides a user-defined list of llms.txt files and a tool to fetch and read URLs within those files, facilitating the auditing of tool calls and the context returned during LLM interactions. Integrates with various IDEs and applications to enhance the development experience.",
      "stars": 8,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-14T04:26:57Z",
      "readme_content": "# MCP LLMS-TXT Documentation Server\n\n## Overview\n\n[llms.txt](https://llmstxt.org/) is a website index for LLMs, providing background information, guidance, and links to detailed markdown files. IDEs like Cursor and Windsurf or apps like Claude Code/Desktop can use `llms.txt` to retrieve context for tasks. However, these apps use different built-in tools to read and process files like `llms.txt`. The retrieval process can be opaque, and there is not always a way to audit the tool calls or the context returned.\n\n[MCP](https://github.com/modelcontextprotocol) offers a way for developers to have *full control* over tools used by these applications. Here, we create [an open source MCP server](https://github.com/modelcontextprotocol) to provide MCP host applications (e.g., Cursor, Windsurf, Claude Code/Desktop) with (1) a user-defined list of `llms.txt` files and (2) a simple  `fetch_docs` tool read URLs within any of the provided `llms.txt` files. This allows the user to audit each tool call as well as the context returned. \n\n![mcpdoc](https://github.com/user-attachments/assets/736f8f55-833d-4200-b833-5fca01a09e1b)\n\n## Quickstart\n\n#### Install uv\n* Please see [official uv docs](https://docs.astral.sh/uv/getting-started/installation/#installation-methods) for other ways to install `uv`.\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n#### Choose an `llms.txt` file to use. \n* For example, [here's](https://langchain-ai.github.io/langgraph/llms.txt) the LangGraph `llms.txt` file.\n\n#### (Optional) Test the MCP server locally with your `llms.txt` file of choice:\n```bash\nuvx --from mcpdoc mcpdoc \\\n    --urls LangGraph:https://langchain-ai.github.io/langgraph/llms.txt \\\n    --transport sse \\\n    --port 8082 \\\n    --host localhost\n```\n\n* This should run at: http://localhost:8082\n\n![Screenshot 2025-03-18 at 3 29 30 PM](https://github.com/user-attachments/assets/24a3d483-cd7a-4c7e-a4f7-893df70e888f)\n\n* Run [MCP inspector](https://modelcontextprotocol.io/docs/tools/inspector) and connect to the running server:\n```bash\nnpx @modelcontextprotocol/inspector\n```\n\n![Screenshot 2025-03-18 at 3 30 30 PM](https://github.com/user-attachments/assets/14645d57-1b52-4a5e-abfe-8e7756772704)\n\n* Here, you can test the `tool` calls. \n\n#### Connect to Cursor \n\n* Open `Cursor Settings` and `MCP` tab.\n* This will open the `~/.cursor/mcp.json` file.\n\n![Screenshot 2025-03-19 at 11 01 31 AM](https://github.com/user-attachments/assets/3d1c8eb3-4d40-487f-8bad-3f9e660f770a)\n\n* Paste the following into the file (we use the `langgraph-docs-mcp` name and link to the LangGraph `llms.txt`).\n\n```\n{\n  \"mcpServers\": {\n    \"langgraph-docs-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--from\",\n        \"mcpdoc\",\n        \"mcpdoc\",\n        \"--urls\",\n        \"LangGraph:https://langchain-ai.github.io/langgraph/llms.txt\",\n        \"--transport\",\n        \"stdio\",\n        \"--port\",\n        \"8081\",\n        \"--host\",\n        \"localhost\"\n      ]\n    }\n  }\n}\n```\n\n* Confirm that the server is running in your `Cursor Settings/MCP` tab.\n* `CMD+L` (on Mac) to open chat.\n* Ensure `agent` is selected. \n\n![Screenshot 2025-03-18 at 1 56 54 PM](https://github.com/user-attachments/assets/0dd747d0-7ec0-43d2-b6ef-cdcf5a2a30bf)\n\nThen, try an example prompt, such as:\n```\nuse the langgraph-docs-mcp server to answer any LangGraph questions -- \n+ call list_doc_sources tool to get the available llms.txt file\n+ call fetch_docs tool to read it\n+ reflect on the urls in llms.txt \n+ reflect on the input question \n+ call fetch_docs on any urls relevant to the question\n+ use this to answer the question\n\nwhat are types of memory in LangGraph?\n```\n\n![Screenshot 2025-03-18 at 1 58 38 PM](https://github.com/user-attachments/assets/180966b5-ab03-4b78-8b5d-bab43f5954ed)\n\n### Connect to Windsurf\n\n* Open Cascade with `CMD+L` (on Mac).\n* Click `Configure MCP` to open the config file, `~/.codeium/windsurf/mcp_config.json`.\n* Update with `langgraph-docs-mcp` as noted above.\n\n![Screenshot 2025-03-19 at 11 02 52 AM](https://github.com/user-attachments/assets/d45b427c-1c1e-4602-820a-7161a310af24)\n\n* `CMD+L` (on Mac) to open Cascade and refresh MCP servers.\n* Available MCP servers will be listed, showing `langgraph-docs-mcp` as connected.\n\n![Screenshot 2025-03-18 at 2 02 12 PM](https://github.com/user-attachments/assets/5a29bd6a-ad9a-4c4a-a4d5-262c914c5276)\n\nThen, try the example prompt:\n* It will perform your tool calls.\n\n![Screenshot 2025-03-18 at 2 03 07 PM](https://github.com/user-attachments/assets/0e24e1b2-dc94-4153-b4fa-495fd768125b)\n\n### Connect to Claude Desktop\n\n* Open `Settings/Developer` to update `~/Library/Application\\ Support/Claude/claude_desktop_config.json`.\n* Update with `langgraph-docs-mcp` as noted above.\n* Restart Claude Desktop app.\n\n![Screenshot 2025-03-18 at 2 05 54 PM](https://github.com/user-attachments/assets/228d96b6-8fb3-4385-8399-3e42fa08b128)\n\n* You will see your tools visible in the bottom right of your chat input.\n\n![Screenshot 2025-03-18 at 2 05 39 PM](https://github.com/user-attachments/assets/71f3c507-91b2-4fa7-9bd1-ac9cbed73cfb)\n\nThen, try the example prompt:\n\n* It will ask to approve tool calls as it processes your request.\n\n![Screenshot 2025-03-18 at 2 06 54 PM](https://github.com/user-attachments/assets/59b3a010-94fa-4a4d-b650-5cd449afeec0)\n\n### Connect to Claude Code\n\n* In a terminal after installing [Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview), run this command to add the MCP server to your project:\n```\nclaude mcp add-json langgraph-docs '{\"type\":\"stdio\",\"command\":\"uvx\" ,\"args\":[\"--from\", \"mcpdoc\", \"mcpdoc\", \"--urls\", \"langgraph:https://langchain-ai.github.io/langgraph/llms.txt\"]}' -s local\n```\n* You will see `~/.claude.json` updated.\n* Test by launching Claude Code and running to view your tools:\n```\n$ Claude\n$ /mcp \n```\n\n![Screenshot 2025-03-18 at 2 13 49 PM](https://github.com/user-attachments/assets/eb876a0e-27b4-480e-8c37-0f683f878616)\n\nThen, try the example prompt:\n\n* It will ask to approve tool calls.\n\n![Screenshot 2025-03-18 at 2 14 37 PM](https://github.com/user-attachments/assets/5b9a2938-ea69-4443-8d3b-09061faccad0)\n\n## Command-line Interface\n\nThe `mcpdoc` command provides a simple CLI for launching the documentation server. \n\nYou can specify documentation sources in three ways, and these can be combined:\n\n1. Using a YAML config file:\n\n* This will load the LangGraph Python documentation from the `sample_config.yaml` file in this repo.\n\n```bash\nmcpdoc --yaml sample_config.yaml\n```\n\n2. Using a JSON config file:\n\n* This will load the LangGraph Python documentation from the `sample_config.json` file in this repo.\n\n```bash\nmcpdoc --json sample_config.json\n```\n\n3. Directly specifying llms.txt URLs with optional names:\n\n* URLs can be specified either as plain URLs or with optional names using the format `name:url`.\n* This is how we loaded `llms.txt` for the MCP server above.\n\n```bash\nmcpdoc --urls LangGraph:https://langchain-ai.github.io/langgraph/llms.txt\n```\n\nYou can also combine these methods to merge documentation sources:\n\n```bash\nmcpdoc --yaml sample_config.yaml --json sample_config.json --urls https://langchain-ai.github.io/langgraph/llms.txt\n```\n\n## Additional Options\n\n- `--follow-redirects`: Follow HTTP redirects (defaults to False)\n- `--timeout SECONDS`: HTTP request timeout in seconds (defaults to 10.0)\n\nExample with additional options:\n\n```bash\nmcpdoc --yaml sample_config.yaml --follow-redirects --timeout 15\n```\n\nThis will load the LangGraph Python documentation with a 15-second timeout and follow any HTTP redirects if necessary.\n\n## Configuration Format\n\nBoth YAML and JSON configuration files should contain a list of documentation sources. \n\nEach source must include an `llms_txt` URL and can optionally include a `name`:\n\n### YAML Configuration Example (sample_config.yaml)\n\n```yaml\n# Sample configuration for mcp-mcpdoc server\n# Each entry must have a llms_txt URL and optionally a name\n- name: LangGraph Python\n  llms_txt: https://langchain-ai.github.io/langgraph/llms.txt\n```\n\n### JSON Configuration Example (sample_config.json)\n\n```json\n[\n  {\n    \"name\": \"LangGraph Python\",\n    \"llms_txt\": \"https://langchain-ai.github.io/langgraph/llms.txt\"\n  }\n]\n```\n\n## Programmatic Usage\n\n```python\nfrom mcpdoc.main import create_server\n\n# Create a server with documentation sources\nserver = create_server(\n    [\n        {\n            \"name\": \"LangGraph Python\",\n            \"llms_txt\": \"https://langchain-ai.github.io/langgraph/llms.txt\",\n        },\n        # You can add multiple documentation sources\n        # {\n        #     \"name\": \"Another Documentation\",\n        #     \"llms_txt\": \"https://example.com/llms.txt\",\n        # },\n    ],\n    follow_redirects=True,\n    timeout=15.0,\n)\n\n# Run the server\nserver.run(transport=\"stdio\")\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcpdoc",
        "llms",
        "txt",
        "mcpdoc provides",
        "llms txt",
        "list llms"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "tengfone--supabase-nextjs-mcp-server": {
      "owner": "tengfone",
      "name": "supabase-nextjs-mcp-server",
      "url": "https://github.com/tengfone/supabase-nextjs-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/tengfone.webp",
      "description": "Create, manage, and summarize notes using a Supabase backend. This TypeScript-based MCP server offers resources for text notes, tools for creating new notes, and prompts for generating summaries.",
      "stars": 5,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-06-09T14:28:45Z",
      "readme_content": "# supabase-nextjs-server MCP Server\n[![smithery badge](https://smithery.ai/badge/@tengfone/supabase-nextjs-mcp-server)](https://smithery.ai/server/@tengfone/supabase-nextjs-mcp-server)\n\nA Model Context Protocol server\n\nThis is a TypeScript-based MCP server that implements a simple notes system for NextJS. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n<a href=\"https://glama.ai/mcp/servers/9i4b9xiqrc\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/9i4b9xiqrc/badge\" alt=\"Supabase NextJS Server MCP server\" /></a>\n\n## Features\n\n### Init\n- Require `NEXT_PUBLIC_SUPABASE_URL` and `NEXT_PUBLIC_SUPABASE_ANON_KEY` environment variables\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"supabase-nextjs-server\": {\n      \"command\": \"/path/to/supabase-nextjs-server/build/index.js\"\n    }\n  }\n}\n```\n\n### Installing via Smithery\n\nTo install Supabase Notes for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@tengfone/supabase-nextjs-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @tengfone/supabase-nextjs-mcp-server --client claude\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "supabase",
        "notes",
        "typescript",
        "supabase nextjs",
        "supabase backend",
        "tengfone supabase"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "tjl-with-code--Go-Interview": {
      "owner": "tjl-with-code",
      "name": "Go-Interview",
      "url": "https://github.com/tjl-with-code/Go-Interview",
      "imageUrl": "/freedevtools/mcp/pfp/tjl-with-code.webp",
      "description": "Curates a collection of Go programming interview questions and study materials, providing resources on Go basics, concurrency, MySQL, networking, operating systems, and Redis for learners preparing for job interviews.",
      "stars": 0,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "",
      "updated_at": "2025-03-28T13:01:00Z",
      "readme_content": "# Go-Interview\n项目整合：\n\n​\t[地鼠文档 (topgoer.cn)](https://topgoer.cn/)\n\n​\t[lifei6671/interview-go: golang面试题集合 (github.com)](https://github.com/lifei6671/interview-go)\n\n​\t[cosen1024/Java-Interview: Java面试小抄(github.com)](https://github.com/cosen1024/Java-Interview)\n\n​\t[代码随想录 (programmercarl.com)](https://www.programmercarl.com/)\n\n​\t[极客兔兔 (geektutu.com)](https://geektutu.com/)\n\n特此申明：\n\n​\tGo初学者，为了未来的求职和更专注学习，所以特此整理以上资料。当然可能在收集过程中遗漏了参考资料。若有问题，请及时联系！\n\n​\t喜欢的话，fork、star，一起学习Go，在大佬的资料下，争取做一个基础和进阶的开源好项目，帮助我们一起学习！\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t一个Go学习者\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2022年2月14号\n\n<details>\n\n#### 2022-3-17\n\n整理一个月左右，梳理网上的大多数Go基础、并发、Mysql、网络、操作系统、Redis的知识。剔除一些其他仓库里的高阶知识。只是为了学生步入职场，打牢基础！\n\n\n\n### 2022-3-18\n\n梳理和完善：\n\ngo基础——3.Go基础类：9-38题的解答注释，涉及slice、map、channel、goroutine等。\n\n第一次上传到GitHub、Gitee，希望遇到一起努力前行的人！\n\n\n\n### 2022-3-19\n\n梳理：\n\nGo基础：4.Go基础应用，几种有设计几种测试框架，现在也只知道其名字，具体功能不清楚。\n\nGo并发：1.Go并发基础【梳理部分】\n</details>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tjl",
        "interviews",
        "interview",
        "tjl code",
        "programming interview",
        "code interview"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "truaxki--mcp-notes": {
      "owner": "truaxki",
      "name": "mcp-notes",
      "url": "https://github.com/truaxki/mcp-notes",
      "imageUrl": "/freedevtools/mcp/pfp/truaxki.webp",
      "description": "Manage notes with persistent storage and access through URI. Supports create, read, update, and delete operations, along with note summarization and timestamp tracking.",
      "stars": 7,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-14T08:24:23Z",
      "readme_content": "# MCP Notes Server\n[![smithery badge](https://smithery.ai/badge/notes)](https://smithery.ai/server/notes)\n\nA Model Context Protocol (MCP) server implementation for managing notes with persistent storage.\n\n<a href=\"https://glama.ai/mcp/servers/tg4ugmp8jr\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/tg4ugmp8jr/badge\" alt=\"Notes Server MCP server\" /></a>\n\n## Features\n\n- Create, read, update, and delete notes\n- Persistent storage using JSON\n- Timestamp tracking for creation and modifications\n- Note summarization via prompts\n- Resource-based access using note:// URI scheme\n\n## Installation\n\n### Installing via Smithery\n\nTo install notes for Claude Desktop automatically via [Smithery](https://smithery.ai/server/notes):\n\n```bash\nnpx -y @smithery/cli install notes --client claude\n```\n\n### Manual Installation\n1. Ensure you have Python 3.10 or later installed\n2. Create a virtual environment:\n   ```bash\n   python -m venv .venv\n   \n   # On Unix/MacOS:\n   source .venv/bin/activate\n   \n   # On Windows:\n   .venv\\Scripts\\activate\n   ```\n3. Install requirements:\n   ```bash\n   pip install MCP\n   ```\n\n## Project Structure\n\n```\nnotes/\n├── __init__.py          # Package initialization\n├── server.py           # Main server implementation\n├── storage.py          # Note persistence layer\n├── resources.py        # Resource handling (note:// URIs)\n├── prompts.py         # LLM prompt generation\n└── tools/             # Server tools\n    ├── __init__.py    # Tools package initialization\n    ├── list_tools.py  # Tool listing functionality\n    └── handle_tools.py # Tool handling implementation\n```\n\n## Available Tools\n\n- `add-note`: Create a new note\n- `list-all-notes`: Display all stored notes\n- `update-note`: Modify an existing note\n- `delete-note`: Remove a note\n\n## Usage\n\n1. Start the server:\n   ```bash\n   mcp install src/notes\n   mcp start Notes\n   ```\n\n2. Example operations:\n   ```python\n   # Create a note\n   await client.call_tool(\"add-note\", {\n       \"name\": \"example\",\n       \"content\": \"This is a test note\"\n   })\n\n   # List all notes\n   await client.call_tool(\"list-all-notes\")\n\n   # Update a note\n   await client.call_tool(\"update-note\", {\n       \"name\": \"example\",\n       \"content\": \"Updated content\"\n   })\n\n   # Delete a note\n   await client.call_tool(\"delete-note\", {\n       \"name\": \"example\"\n   })\n   ```\n\n## Storage\n\nNotes are stored in `notes_storage.json` with the following structure:\n```json\n{\n    \"note_name\": {\n        \"content\": \"Note content\",\n        \"created_at\": \"2025-01-12T11:28:16.721704\",\n        \"modified_at\": \"2025-01-12T11:28:16.721704\"\n    }\n}\n```\n\n## Resource Access\n\nNotes can be accessed as resources using the `note://` URI scheme:\n- List resources: Returns all available notes as resources\n- Read resource: Access a specific note using `note://internal/note_name`\n\n## Prompt Generation\n\nThe server includes a prompt generation feature for note summarization:\n- Supports both brief and detailed summaries\n- Formats notes for language model input\n- Available via the \"summarize-notes\" prompt\n\n## Development\n\nTo modify or extend the server:\n1. Clone the repository\n2. Install development dependencies\n3. Make changes in the appropriate module\n4. Test thoroughly before deploying\n\n## Testing\n\nTests should cover:\n- Basic CRUD operations\n- Multiple note handling\n- Error cases\n- Resource access\n- Prompt generation\n\n## License\n\n[Add your license here]\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "truaxki",
        "notes manage",
        "manage notes",
        "notes persistent"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "vivalalova--mcp_practice": {
      "owner": "vivalalova",
      "name": "mcp_practice",
      "url": "https://github.com/vivalalova/mcp_practice",
      "imageUrl": "/freedevtools/mcp/pfp/vivalalova.webp",
      "description": "Create and manage text notes with a simple interface, providing resources for accessing notes, tools for adding new notes, and functionality to generate summaries of the notes.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-02-21T02:33:53Z",
      "readme_content": "# my-server MCP Server\n\nA Model Context Protocol server\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"my-server\": {\n      \"command\": \"/path/to/my-server/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "vivalalova",
        "notes tools",
        "notes functionality",
        "text notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "wavelovey--pubmed_search": {
      "owner": "wavelovey",
      "name": "pubmed_search",
      "url": "https://github.com/wavelovey/pubmed_search",
      "imageUrl": "/freedevtools/mcp/pfp/wavelovey.webp",
      "description": "Search and summarize notes stored in a custom note storage system, utilizing a unique URI scheme for accessing individual notes.",
      "stars": 36,
      "forks": 9,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-01T19:59:17Z",
      "readme_content": "# pubmed_search MCP server\n\nsearch pubmed via MCP\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"pubmed_search\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/nofuture/Documents/GitHub/pubmed_search\",\n        \"run\",\n        \"pubmed_search\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"pubmed_search\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"pubmed_search\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/nofuture/Documents/GitHub/pubmed_search run pubmed-search\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "pubmed_search",
        "notetaking",
        "notes",
        "wavelovey pubmed_search",
        "notes stored",
        "individual notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "williamvd4--playwright-plus-python-mcp": {
      "owner": "williamvd4",
      "name": "playwright-plus-python-mcp",
      "url": "https://github.com/williamvd4/playwright-plus-python-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/williamvd4.webp",
      "description": "Leverage browser automation tools for web navigation, interaction, and content capture. Provides a note storage system with a custom URI scheme and allows for summarizing notes with an adjustable detail level.",
      "stars": 1,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-03T20:04:09Z",
      "readme_content": "# playwright-server MCP server\n\n\\A MCP server with playwright tools\\\n\n<a href=\"https://glama.ai/mcp/servers/c50bsocgzb\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/c50bsocgzb/badge\" alt=\"Playwright Server MCP server\" /></a>\n<a href=\"https://smithery.ai/server/@williamvd4/playwright-plus-python-mcp\"><img alt=\"Smithery Badge\" src=\"https://smithery.ai/badge/@williamvd4/playwright-plus-python-mcp\"></a>\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements the following tools:\n- `playwright_navigate`: Navigates to a specified URL. This operation will automatically create a new session if there is no active session.\n  - Requires a `url` argument (string).\n- `playwright_screenshot`: Takes a screenshot of the current page or a specific element.\n  - Requires a `name` argument (string) for the screenshot file name.\n  - Optional `selector` argument (string) to specify a CSS selector for the element to screenshot. If no selector is provided, a full-page screenshot is taken.\n- `playwright_click`: Clicks an element on the page using a CSS selector.\n  - Requires a `selector` argument (string) to specify the CSS selector for the element to click.\n- `playwright_fill`: Fills out an input field.\n  - Requires a `selector` argument (string) to specify the CSS selector for the input field.\n  - Requires a `value` argument (string) to specify the value to fill.\n- `playwright_evaluate`: Executes JavaScript code in the browser console.\n  - Requires a `script` argument (string) to specify the JavaScript code to execute.\n- `playwright_click_text`: Clicks an element on the page by its text content.\n  - Requires a `text` argument (string) to specify the text content of the element to click.\n- `playwright_get_text_content`: Get the text content of all visiable elements.\n- `playwright_get_html_content`: Get the HTML content of the page.\n  - Requires a `selector` argument (string) to specify the CSS selector for the element.\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"playwright-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"C:\\Users\\xxxxx\\Documents\\project\\python\\mcp\\playwright-server\",\n        \"run\",\n        \"playwright-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"playwright-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"playwright-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory C:\\Users\\YUNYING\\Documents\\project\\python\\mcp\\playwright-server run playwright-server\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "python",
        "notetaking knowledge",
        "summarizing notes",
        "note storage"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "win4r--browser-use-MCP-Server": {
      "owner": "win4r",
      "name": "browser-use-MCP-Server",
      "url": "https://github.com/win4r/browser-use-MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/win4r.webp",
      "description": "Manage and generate text notes through accessible URIs, create new notes with titles and content, and produce summaries of all stored notes.",
      "stars": 1,
      "forks": 2,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-02T10:03:47Z",
      "readme_content": "# browser-use MCP Server\n\n### 🔥对应视频： https://youtu.be/jsd8TpzicRQ\n### 🔥我的微信：stoeng\n\nA Model Context Protocol server\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"browser-use\": {\n      \"command\": \"/path/to/browser-use/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "win4r",
        "stored notes",
        "text notes",
        "notes accessible"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "wuyunmei--momedb-mcp": {
      "owner": "wuyunmei",
      "name": "momedb-mcp",
      "url": "https://github.com/wuyunmei/momedb-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/wuyunmei.webp",
      "description": "Manage conversation context and a personal knowledge base for AI applications with efficient APIs. Create, update, and query user data while handling dialogue and knowledge management seamlessly.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-23T09:07:18Z",
      "readme_content": "# MemoDB MCP Server\n\nMCP 服务器，用于管理 AI 应用的对话上下文和个人知识库。该服务器通过模型上下文协议(MCP)提供用户数据、对话内容和知识管理的工具。\n\n## 主要功能\n\n### 1. 用户管理\n- `create_user`: 创建新用户\n- `get_user`: 获取用户信息\n- `update_user`: 更新用户信息\n- `delete_user`: 删除用户\n\n### 2. 对话数据管理\n- `insert_blob`: 插入对话数据\n- `get_blob`: 获取对话数据\n- `delete_blob`: 删除对话数据\n\n### 3. 知识库管理\n- `query_knowledge`: 查询知识库\n  * 支持全文搜索\n  * 支持按类型、标签、来源过滤\n  * 支持限制返回结果数量\n- `add_knowledge`: 添加新知识\n  * 支持设置知识来源\n  * 支持设置知识类型\n  * 支持添加标签\n- `update_knowledge`: 更新已有知识\n  * 支持更新内容和元数据\n  * 支持修改标签\n- `relate_knowledge`: 创建知识关联\n  * 支持设置关联类型\n  * 支持设置关联权重\n\n## 技术亮点\n\n1. **类型安全**\n   - 使用 TypeScript 实现\n   - 完整的类型定义和检查\n   - 编译时错误检测\n\n2. **错误处理**\n   - 全面的错误处理机制\n   - 详细的错误信息\n   - 错误日志记录\n\n3. **API 设计**\n   - 基于 JSON-RPC 2.0 协议\n   - RESTful API 风格\n   - 清晰的接口定义\n\n4. **可扩展性**\n   - 模块化设计\n   - 插件式工具注册\n   - 易于添加新功能\n\n## 安装和配置\n\n1. 安装依赖:\n```bash\nnpm install\n```\n\n2. 配置环境变量:\n创建 `.env` 文件并设置:\n```env\nMEMOBASE_API_URL=your_api_url    # API 服务器地址\nMEMOBASE_API_KEY=your_api_key    # API 访问密钥\n```\n\n3. 构建项目:\n```bash\nnpm run build\n```\n\n4. 运行服务器:\n```bash\n# 生产环境\nnpm start\n\n# 开发环境\nnpm run dev\n```\n\n## API 示例\n\n### 1. 添加知识\n```typescript\nconst result = await callTool('add_knowledge', {\n  uid: 'user123',\n  content: '人工智能是计算机科学的一个分支...',\n  metadata: {\n    source: 'wiki',\n    type: 'article',\n    tags: ['AI', '计算机科学', '技术']\n  }\n});\n```\n\n### 2. 查询知识\n```typescript\nconst result = await callTool('query_knowledge', {\n  uid: 'user123',\n  query: '人工智能',\n  filters: {\n    types: ['article'],\n    tags: ['AI'],\n    sources: ['wiki']\n  },\n  limit: 10\n});\n```\n\n### 3. 关联知识\n```typescript\nconst result = await callTool('relate_knowledge', {\n  uid: 'user123',\n  source_kid: 'knowledge1',\n  target_kid: 'knowledge2',\n  relation_type: 'related_to',\n  weight: 0.8\n});\n```\n\n## 开发指南\n\n1. **添加新工具**\n   - 在 `src/tools` 目录下创建工具实现\n   - 在 `src/api/types.ts` 添加类型定义\n   - 在 `src/index.ts` 注册工具\n\n2. **修改配置**\n   - 编辑 `src/config.ts` 更新配置项\n   - 在 `.env` 文件中添加新的环境变量\n\n3. **运行测试**\n```bash\nnpm test\n```\n\n## 常见问题\n\n如果您在使用过程中遇到问题，请参考 [常见问题与解决方案](docs/TROUBLESHOOTING.md) 文档。\n\n## 许可证\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "conversation",
        "dialogue",
        "ai",
        "manage conversation",
        "dialogue knowledge",
        "knowledge base"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "xianminx--mcp-server-flomo": {
      "owner": "xianminx",
      "name": "mcp-server-flomo",
      "url": "https://github.com/xianminx/mcp-server-flomo",
      "imageUrl": "/freedevtools/mcp/pfp/xianminx.webp",
      "description": "Create and organize notes within Flomo using natural language commands through AI chat interactions. Enhance productivity by integrating AI assistance directly into the note-taking process.",
      "stars": 8,
      "forks": 0,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-19T09:54:42Z",
      "readme_content": "# Flomo MCP Server\n![](https://badge.mcpx.dev?type=server 'MCP Server') ![NPM Version](https://img.shields.io/npm/v/mcp-server-flomo) ![MIT licensed](https://img.shields.io/github/license/xianminx/mcp-server-flomo?style=flat-square)\n[![smithery badge](https://smithery.ai/badge/mcp-server-flomo)](https://smithery.ai/server/mcp-server-flomo/wss://mcp.smithery.ai:443)\n\nhttps://github.com/xianminx/mcp-server-flomo\n\nA Model Context Protocol (MCP) server that lets you create notes in Flomo directly through AI chat interactions in Cursor or Claude desktop. Write and organize your thoughts seamlessly through natural language commands.\n\n## Usage\n\n### Installing via Smithery\n\nTo install mcp-server-flomo for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-server-flomo/wss://mcp.smithery.ai:443):\n\n```bash\nnpx -y @smithery/cli install mcp-server-flomo --client claude\n```\n\n### [mcp-get](https://mcp-get.com/) \n\n![mcp-get: mcp-server-flomo](https://img.shields.io/badge/mcp--get-mcp--server--flomo-blue)\n\n\n```bash\nnpx @michaellatman/mcp-get@latest install mcp-server-flomo\n```\n\n### [mcp.so](https://mcp.so/server/mcp-server-flomo/xianminx)\nhttps://mcp.so/protocol/mcp-server-flomo/wss://mcp.smithery.ai:443\n\n### Manually configure\n\nConfigure Claude / Cursor / Windsurf / Cline / ChatWise / Cherry Studio etc.\n\n```bash\nFLOMO_API_URL=your_api_url_here npx mcp-server-flomo\n```\n\nOr configure for your MCP Host / Client. See https://mcp.so/protocol/mcp-server-flomo/wss://mcp.smithery.ai:443 for configuration detail.\n\nGet your Flomo API URL from [Flomo API Settings](https://v.flomoapp.com/mine)\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-flomo\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-server-flomo\"\n      ],\n      \"env\": {\n        \"FLOMO_API_URL\": \"your_api_url_here\"\n      }\n    }\n  }\n}\n```\n\nOnce the server is running, you can create notes in Flomo through natural language commands in your AI chat. Here are some examples:\n\n```json\n\"How to publish a mcp server? Could you save the answer to flomo note after answering it\"\n```\n\nThis will save the Cursor AI Agent response to Flomo directly in the chat conversation!\n\n\n<img src=\"https://raw.githubusercontent.com/xianminx/mcp-server-flomo/refs/heads/main/public/images/mcp-cursor-flomo.png\" width=\"400\">\n\nThe server will handle:\n\n- Converting your natural language requests into Flomo API calls\n- Proper formatting and submission of your notes\n- Providing feedback on successful note creation\n\n## Dev\n\n1. Get your Flomo API URL from [Flomo API Settings](https://v.flomoapp.com/mine)\n\n2. Install and configure:\n\n   ```bash\n   # Install dependencies\n   npm install\n   FLOMO_API_URL=your_api_url_here npx .\n   ```\n\n## Technical Details\n\n- Built with TypeScript and the Model Context Protocol SDK\n- Communicates with Flomo via their REST API\n- Runs over stdio for seamless integration with AI tools\n\n## License\n\nThis project is licensed under the MIT License—see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "ai",
        "ai chat",
        "notes flomo",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "yodakeisuke--mcp-memory-domain-knowledge": {
      "owner": "yodakeisuke",
      "name": "mcp-memory-domain-knowledge",
      "url": "https://github.com/yodakeisuke/mcp-memory-domain-knowledge",
      "imageUrl": "/freedevtools/mcp/pfp/yodakeisuke.webp",
      "description": "Persistently remembers user information across chats using a local knowledge graph, allowing connections between different entities and their relationships. Facilitates the storage and retrieval of observations linked to specific entities for improved contextual interactions.",
      "stars": 5,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-06-09T06:08:46Z",
      "readme_content": "forked https://github.com/modelcontextprotocol/servers/tree/main\n\n# Knowledge Graph Memory Server\nA basic implementation of persistent memory using a local knowledge graph. This lets Claude remember information about the user across chats.\n\n## Core Concepts\n\n### Entities\nEntities are the primary nodes in the knowledge graph. Each entity has:\n- A unique name (identifier)\n- An entity type (e.g., \"person\", \"organization\", \"event\")\n- A list of observations\n\nExample:\n```json\n{\n  \"name\": \"John_Smith\",\n  \"entityType\": \"person\",\n  \"observations\": [\"Speaks fluent Spanish\"]\n}\n```\n\n### Relations\nRelations define directed connections between entities. They are always stored in active voice and describe how entities interact or relate to each other.\n\nExample:\n```json\n{\n  \"from\": \"John_Smith\",\n  \"to\": \"Anthropic\",\n  \"relationType\": \"works_at\"\n}\n```\n### Observations\nObservations are discrete pieces of information about an entity. They are:\n\n- Stored as strings\n- Attached to specific entities\n- Can be added or removed independently\n- Should be atomic (one fact per observation)\n\nExample:\n```json\n{\n  \"entityName\": \"John_Smith\",\n  \"observations\": [\n    \"Speaks fluent Spanish\",\n    \"Graduated in 2019\",\n    \"Prefers morning meetings\"\n  ]\n}\n```\n\n## API\n\n### Tools\n- **create_entities**\n  - Create multiple new entities in the knowledge graph\n  - Input: `entities` (array of objects)\n    - Each object contains:\n      - `name` (string): Entity identifier\n      - `entityType` (string): Type classification\n      - `observations` (string[]): Associated observations\n  - Ignores entities with existing names\n\n- **create_relations**\n  - Create multiple new relations between entities\n  - Input: `relations` (array of objects)\n    - Each object contains:\n      - `from` (string): Source entity name\n      - `to` (string): Target entity name\n      - `relationType` (string): Relationship type in active voice\n  - Skips duplicate relations\n\n- **add_observations**\n  - Add new observations to existing entities\n  - Input: `observations` (array of objects)\n    - Each object contains:\n      - `entityName` (string): Target entity\n      - `contents` (string[]): New observations to add\n  - Returns added observations per entity\n  - Fails if entity doesn't exist\n\n- **delete_entities**\n  - Remove entities and their relations\n  - Input: `entityNames` (string[])\n  - Cascading deletion of associated relations\n  - Silent operation if entity doesn't exist\n\n- **delete_observations**\n  - Remove specific observations from entities\n  - Input: `deletions` (array of objects)\n    - Each object contains:\n      - `entityName` (string): Target entity\n      - `observations` (string[]): Observations to remove\n  - Silent operation if observation doesn't exist\n\n- **delete_relations**\n  - Remove specific relations from the graph\n  - Input: `relations` (array of objects)\n    - Each object contains:\n      - `from` (string): Source entity name\n      - `to` (string): Target entity name\n      - `relationType` (string): Relationship type\n  - Silent operation if relation doesn't exist\n\n- **read_graph**\n  - Read the entire knowledge graph\n  - No input required\n  - Returns complete graph structure with all entities and relations\n\n- **search_nodes**\n  - Search for nodes based on one or more keywords\n  - Input: `query` (string)\n    - Space-separated keywords (e.g., \"budget utility\")\n    - Multiple keywords are treated as OR conditions\n  - Searches across:\n    - Entity names\n    - Entity types\n    - Subdomains\n    - Observation content\n  - Matching behavior:\n    - Case-insensitive\n    - Partial word matching\n    - Any keyword can match any field\n    - Returns entities matching ANY of the keywords\n  - Returns matching entities and their relations\n  - Example queries:\n    - Single keyword: \"budget\"\n    - Multiple keywords: \"budget utility\"\n    - With special chars: \"budget & utility\"\n\n- **open_nodes**\n  - Retrieve specific nodes by name\n  - Input: `names` (string[])\n  - Returns:\n    - Requested entities\n    - Relations between requested entities\n  - Silently skips non-existent nodes\n\n# Usage with Claude Desktop\n\n### Setup\n\nAdd this to your claude_desktop_config.json:\n\n#### Docker\n\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/memory\"]\n    }\n  }\n}\n```\n\n#### NPX\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-memory\"\n      ]\n    }\n  }\n}\n```\n\n#### NPX with custom setting\n\nThe server can be configured using the following environment variables:\n\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-memory\"\n      ],\n      \"env\": {\n        \"MEMORY_FILE_PATH\": \"/path/to/custom/memory.json\"\n      }\n    }\n  }\n}\n```\n\n- `MEMORY_FILE_PATH`: Path to the memory storage JSON file (default: `memory.json` in the server directory)\n\n### System Prompt\n\nThe prompt for utilizing memory depends on the use case. Changing the prompt will help the model determine the frequency and types of memories created.\n\nHere is an example prompt for chat personalization. You could use this prompt in the \"Custom Instructions\" field of a [Claude.ai Project](https://www.anthropic.com/news/projects). \n\n```\nFollow these steps for each interaction:\n\n1. User Identification:\n   - You should assume that you are interacting with default_user\n   - If you have not identified default_user, proactively try to do so.\n\n2. Memory Retrieval:\n   - Always begin your chat by saying only \"Remembering...\" and retrieve all relevant information from your knowledge graph\n   - Always refer to your knowledge graph as your \"memory\"\n   - When searching your memory, you can use multiple keywords to find related information\n   - Example searches:\n     * Single concept: \"programming\"\n     * Related concepts: \"programming python\"\n     * Specific domain with role: \"work engineer\"\n\n3. Memory Creation:\n   - While conversing with the user, be attentive to any new information that falls into these categories:\n     a) Basic Identity (age, gender, location, job title, education level, etc.)\n     b) Behaviors (interests, habits, etc.)\n     c) Preferences (communication style, preferred language, etc.)\n     d) Goals (goals, targets, aspirations, etc.)\n     e) Relationships (personal and professional relationships up to 3 degrees of separation)\n   - When storing information, use specific and descriptive keywords that will help in future searches\n\n4. Memory Update:\n   - If any new information was gathered during the interaction, update your memory as follows:\n     a) Create entities for recurring organizations, people, and significant events\n     b) Connect them to the current entities using relations\n     c) Store facts about them as observations\n     d) Use clear and searchable terms in entity names and observations to facilitate future retrieval\n```\n\n## Building\n\nDocker:\n\n```sh\ndocker build -t mcp/memory -f src/memory/Dockerfile . \n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "chats",
        "knowledge",
        "remembers",
        "information chats",
        "chats using",
        "knowledge persistently"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "yuna0x0--hackmd-mcp": {
      "owner": "yuna0x0",
      "name": "hackmd-mcp",
      "url": "https://github.com/yuna0x0/hackmd-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/yuna0x0.webp",
      "description": "Interact with HackMD notes and teams, manage note-taking, view reading histories, and collaborate seamlessly with AI assistants through API integrations.",
      "stars": 39,
      "forks": 7,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T13:13:34Z",
      "readme_content": "# HackMD MCP Server\n\nA Model Context Protocol (MCP) server that interfaces with the [HackMD API](https://hackmd.io/@hackmd-api/developer-portal), allowing LLM clients to access and interact with HackMD notes, teams, user profiles, and history data.\n\n## Features\n\n- Get user profile information\n- Create, read, update, and delete notes\n- Manage team notes and collaborate with team members\n- Access reading history\n- List and manage teams\n- **Dual transport support**: Both HTTP and STDIO transports\n- **Cloud deployment ready**: Support Smithery and other platforms\n\n## Requirements\n\n- Node.js 18+\n\n## Local Installation (STDIO Transport)\n\n1. Add this server to your `mcp.json` / `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"hackmd\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"hackmd-mcp\"],\n      \"env\": {\n        \"HACKMD_API_TOKEN\": \"your_api_token\"\n      }\n    }\n  }\n}\n```\n\nYou may also optionally set the `HACKMD_API_URL` environment variable if you need to use a different HackMD API endpoint.\n\n2. Restart your MCP client (e.g., Claude Desktop)\n3. Use the tools to interact with HackMD\n\n## Server Deployment (HTTP Transport)\n\n### Self-Hosting\nFollow the [Local Development](#local-development) instructions to set up the project locally, then run:\n```bash\npnpm run start:http\n```\nThis will start the server on port 8081 by default. You can change the port by setting the `PORT` environment variable.\n\n### Cloud Deployment\n\nYou can deploy this MCP server to any cloud platform that supports Node.js server applications.\n\nYou can also deploy via MCP platforms like [Smithery](https://smithery.ai/server/@yuna0x0/hackmd-mcp).\n\n## Configuration\n### Environment Variables (STDIO Transport and HTTP Transport server where host provides the config)\n\nWhen using the STDIO transport or hosting the HTTP transport server, you can pass configuration via environment variables:\n- `HACKMD_API_TOKEN`: HackMD API Token (Required for all operations)\n- `HACKMD_API_URL`: (Optional) HackMD API URL (Defaults to https://api.hackmd.io/v1)\n\nEnvironment variables applied only for the HTTP transport server:\n- `ALLOWED_HACKMD_API_URLS`: (Optional) A comma-separated list of allowed HackMD API URLs. The server will reject requests if the provide HackMD API URL is not in this list. If not set, only the default URL (https://api.hackmd.io/v1) is allowed.\n\n> [!CAUTION]\n> If you are hosting the HTTP transport server with token pre-configured, you should protect your endpoint and implement authentication before allowing users to access it. Otherwise, anyone can access your MCP server while using your HackMD token.\n\n### HTTP Headers (HTTP Transport where user provides the config)\n\nWhen using the HTTP transport, user can pass configuration via HTTP headers:\n- `Hackmd-Api-Token`: HackMD API Token (Required for all operations)\n- `Hackmd-Api-Url`: (Optional) HackMD API URL (Defaults to https://api.hackmd.io/v1)\n\nIf the user provides the token in the header, while the server also has `HACKMD_API_TOKEN` set, the header value will take precedence.\n\n### Get a HackMD API Token\n\nTo get an API token, follow these steps:\n\n1. Go to [HackMD settings](https://hackmd.io/settings#api).\n2. Click on \"Create API Token\".\n3. Copy the generated token and use it in your `.env` file or environment variables.\n\n## Available Tools\n\n### Profile Tools\n- **get_user_info**: Get information about the authenticated user\n\n### Teams Tools\n- **list_teams**: List all teams accessible to the user\n\n### History Tools\n- **get_history**: Get user's reading history\n\n### Team Notes Tools\n- **list_team_notes**: List all notes in a team\n- **create_team_note**: Create a new note in a team\n- **update_team_note**: Update an existing note in a team\n- **delete_team_note**: Delete a note in a team\n\n### User Notes Tools\n- **list_user_notes**: List all notes owned by the user\n- **get_note**: Get a note by its ID\n- **create_note**: Create a new note\n- **update_note**: Update an existing note\n- **delete_note**: Delete a note\n\n## Example Usage\n\n### Basic Note Management\n\n```\nCan you help me manage my HackMD notes?\n```\n\n### List Notes\n\n```\nPlease list all my notes.\n```\n\n### Create a New Note\n\n````\nCreate a new note with the title \"Meeting Notes\" and content:\n```\n# Meeting Notes\n\nDiscussion points:\n- Item 1\n- Item 2\n```\n````\n\n### Team Collaboration\n\n```\nShow me all the teams I'm part of and list the notes in the first team.\n```\n\n## Local Development\n\nThis project uses [pnpm](https://pnpm.io) as its package manager.\n\nClone the repository and install dependencies:\n\n```bash\ngit clone https://github.com/yuna0x0/hackmd-mcp.git\ncd hackmd-mcp\npnpm install\n```\n\n### Configuration\n\n1. Create a `.env` file by copying the example:\n```bash\ncp env.example .env\n```\n\n2. Edit the `.env` file and add your HackMD API token:\n```\nHACKMD_API_TOKEN=your_api_token\n```\n\n## Debugging with MCP Inspector\n\nYou can use the MCP Inspector to test and debug the HackMD MCP server:\n\n```bash\nnpx @modelcontextprotocol/inspector -e HACKMD_API_TOKEN=your_api_token npx hackmd-mcp\n\n# Use this instead when Local Development\npnpm run inspector\n```\n\nThen open your browser to the provided URL (usually http://localhost:6274) to access the MCP Inspector interface. From there, you can:\n\n1. Connect to your running HackMD MCP server\n2. Browse available tools\n3. Run tools with custom parameters\n4. View the responses\n\nThis is particularly useful for testing your setup before connecting it to MCP clients like Claude Desktop.\n\n## Docker\n\nPull from GitHub Container Registry:\n```bash\ndocker pull ghcr.io/yuna0x0/hackmd-mcp\n```\n\nDocker build (Local Development):\n```bash\ndocker build -t ghcr.io/yuna0x0/hackmd-mcp .\n```\n\nDocker multi-platform build (Local Development):\n```bash\ndocker buildx build --platform linux/amd64,linux/arm64 -t ghcr.io/yuna0x0/hackmd-mcp .\n```\n\n## MCP Bundles (MCPB)\n\nTo create an MCP Bundle for this server, run:\n```bash\npnpm run pack:mcpb\n```\n\n## Security Notice\n\nThis MCP server accepts your HackMD API token in the .env file, environment variable or HTTP header. Keep this information secure and never commit it to version control.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "hackmd",
        "notes",
        "hackmd notes",
        "yuna0x0 hackmd",
        "interact hackmd"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "yura2100--sourcify-context-server": {
      "owner": "yura2100",
      "name": "sourcify-context-server",
      "url": "https://github.com/yura2100/sourcify-context-server",
      "imageUrl": "/freedevtools/mcp/pfp/yura2100.webp",
      "description": "Manage text notes with structured URIs and metadata, facilitating the creation and summarization of notes using a TypeScript-based MCP implementation.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-06T17:02:43Z",
      "readme_content": "# sourcify-context-server MCP Server\n\nA Model Context Protocol server\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"sourcify-context-server\": {\n      \"command\": \"/path/to/sourcify-context-server/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "typescript",
        "notes structured",
        "text notes",
        "notes using"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "yuzhi-jiang--memos-mcp": {
      "owner": "yuzhi-jiang",
      "name": "memos-mcp",
      "url": "https://github.com/yuzhi-jiang/memos-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/yuzhi-jiang.webp",
      "description": "Connects securely to a Memos instance, enabling interaction through an AI assistant for searching, creating, updating, and managing notes. Supports advanced search capabilities, structured access to notes, and efficient tag management.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-03T08:51:59Z",
      "readme_content": "# Memos MCP 服务器\n\n[![smithery badge](https://smithery.ai/badge/codehatcher/memos-mcp)](https://smithery.ai/server/codehatcher/memos-mcp)\n\n一个连接到 [Memos](https://usememos.com/) 的 MCP (Model Context Protocol) 服务器，让你可以通过 AI 助手（如 Claude）与你的 Memos 实例进行交互。\n\n## 功能特点\n\n- 🔄 **连接到用户的 Memos 实例**：通过 API 密钥安全连接\n- 📚 **将 API 暴露为资源**：提供对备忘录的结构化访问\n- 🔍 **提供强大的工具**：搜索、创建、更新、删除备忘录等功能\n- 🏷️ **标签管理**：自动添加标签到新备忘录\n- 🔎 **高级搜索**：支持 CEL 表达式进行复杂过滤\n- 📝 **提示模板**：包含用于日常操作改进的提示\n\n## 安装与配置\n\n你可以在配置文件中包含这个包，如下所示，就像使用其他 Python MCP 插件一样。\n```json\n{\n  \"mcpServers\": {\n    \"memos-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"memos-mcp\"\n      ],\n      \"env\": {\n        \"MEMOS_URL\": \"https://your-memos-instance-url\",\n        \"MEMOS_API_KEY\": \"your-memos-api-key\"\n      }\n    }\n  }\n}\n```\n\n\n### 前提条件\n\n- Python 3.8 或更高版本\n- 一个可访问的 Memos 实例\n- Memos API 密钥\n\n### 安装步骤\n\n1. 克隆此仓库：\n   ```bash\n   git clone https://github.com/yourusername/memos-mcp.git\n   cd memos-mcp\n   ```\n\n2. 安装依赖：\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n3. 配置环境变量：\n   - 复制 `.env.example` 为 `.env`\n   - 编辑 `.env` 文件，填写以下信息：\n     ```\n     MEMOS_URL=https://your-memos-instance-url\n     MEMOS_API_KEY=your-memos-api-key\n     DEFAULT_TAG=mcp  # 可选，默认标签\n     ```\n\n## 使用方法\n\n### 启动服务器\n\n```bash\npython memos_mcp_server.py\n```\n\n### 连接到 Claude Desktop\n\n1. 安装 [Claude Desktop](https://claude.ai/download)\n2. 在 Claude Desktop 中，添加 MCP 服务器\n3. 使用 Claude 与你的 Memos 进行交互\n\n### 使用 MCP 开发工具测试\n\n```bash\nmcp dev memos_mcp_server.py\n```\n\n## 可用资源\n\n- `memos://recent` - 获取最近的备忘录\n- `memos://all` - 获取所有备忘录\n- `memos://memos/{memo_id}` - 获取指定 ID 的备忘录\n\n## 可用工具\n\n### 搜索和过滤\n\n- `search_memos(query, filter_expr)` - 搜索备忘录\n- `filter_memos(filter_expr)` - 使用 CEL 表达式过滤备忘录\n\n### 创建和管理\n\n- `create_memo(content, visibility, tags)` - 创建新备忘录\n- `update_memo(memo_id, content, visibility)` - 更新备忘录\n- `delete_memo(memo_id)` - 删除备忘录\n- `delete_memo_tag(memo_id, tag)` - 从备忘录中删除标签\n\n## 提示模板\n\n- `daily-review` - 每日备忘录回顾\n- `weekly-summary` - 每周备忘录总结\n- `knowledge-extraction` - 从备忘录中提取知识\n- `content-improvement` - 改进备忘录内容\n\n## CEL 表达式示例\n\nCEL (Common Expression Language) 表达式可用于高级过滤：\n\n- 按内容过滤：`content.contains('关键词')`\n- 按创建时间过滤：`createTime > timestamp('2023-01-01T00:00:00Z')`\n- 按可见性过滤：`visibility == 'PRIVATE'`\n- 组合条件：`content.contains('关键词') && visibility == 'PRIVATE'`\n\n## 示例用法\n\n### 搜索备忘录\n\n```\nsearch_memos(query=\"项目\")\n```\n\n### 使用 CEL 表达式过滤\n\n```\nfilter_memos(filter_expr=\"createTime > timestamp('2023-01-01T00:00:00Z') && visibility == 'PRIVATE'\")\n```\n\n### 创建带标签的备忘录\n\n```\ncreate_memo(content=\"完成 MCP 服务器项目\", tags=[\"项目\", \"编程\"])\n```\n\n## 贡献\n\n欢迎提交问题和拉取请求！\n\n## 许可证\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "memos",
        "notetaking",
        "notes",
        "memos instance",
        "memos mcp",
        "managing notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "zongmin-yu--sqlite-literature-management-fastmcp-mcp-server": {
      "owner": "zongmin-yu",
      "name": "sqlite-literature-management-fastmcp-mcp-server",
      "url": "https://github.com/zongmin-yu/sqlite-literature-management-fastmcp-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/zongmin-yu.webp",
      "description": "Manages various types of sources such as papers, books, and webpages while integrating them with knowledge graphs. Tracks relationships between sources and entities, supports multiple identifiers, and maintains structured note-taking and status tracking.",
      "stars": 14,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-29T04:17:43Z",
      "readme_content": "# Universal Source Management System\n\nA flexible system for managing various types of sources (papers, books, webpages, etc.) and integrating them with knowledge graphs.\n\n## Features\n\n### Core Features\n\n- Universal source identification with internal UUID system\n- Support for multiple source types (papers, webpages, books, videos, blogs)\n- Multiple identifier support per source (arxiv, DOI, semantic scholar, ISBN, URL)\n- Structured note-taking with titles and content\n- Status tracking (unread, reading, completed, archived)\n\n### Entity Integration\n\n- Link sources to knowledge graph entities\n- Track relationships between sources and entities\n- Flexible relation types (discusses, introduces, extends, etc.)\n- Integration with memory graph\n\n## Prerequisites\n\nThis system integrates with the [MCP Memory Server](https://github.com/modelcontextprotocol/servers/tree/main/src/memory) for persistent knowledge graph storage.\n\n## Quick Start\n\n1. Create a new SQLite database with our schema:\n\n```bash\n# Create a new database\nsqlite3 sources.db < create_sources_db.sql\n```\n\n2. Install the source management server:\n\n```bash\n# Install for Claude Desktop with your database path\nfastmcp install source-manager-server.py --name \"Source Manager\" -e SQLITE_DB_PATH=/path/to/sources.db\n```\n\n## Schema\n\n### Core Tables\n\n```sql\n-- Sources table\nCREATE TABLE sources (\n    id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    type TEXT CHECK(type IN ('paper', 'webpage', 'book', 'video', 'blog')) NOT NULL,\n    identifiers JSONB NOT NULL,\n    status TEXT CHECK(status IN ('unread', 'reading', 'completed', 'archived')) DEFAULT 'unread'\n);\n\n-- Source notes\nCREATE TABLE source_notes (\n    source_id UUID REFERENCES sources(id),\n    note_title TEXT NOT NULL,\n    content TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (source_id, note_title)\n);\n\n-- Entity links\nCREATE TABLE source_entity_links (\n    source_id UUID REFERENCES sources(id),\n    entity_name TEXT,\n    relation_type TEXT CHECK(relation_type IN ('discusses', 'introduces', 'extends', 'evaluates', 'applies', 'critiques')),\n    notes TEXT,\n    PRIMARY KEY (source_id, entity_name)\n);\n```\n\n## Usage Examples\n\n### 1. Managing Sources\n\nAdd a paper with multiple identifiers:\n\n```python\nadd_source(\n    title=\"Attention Is All You Need\",\n    type=\"paper\",\n    identifier_type=\"arxiv\",\n    identifier_value=\"1706.03762\",\n    initial_note={\n        \"title\": \"Initial thoughts\",\n        \"content\": \"Groundbreaking paper introducing transformers...\"\n    }\n)\n\n# Add another identifier to the same paper\nadd_identifier(\n    title=\"Attention Is All You Need\",\n    type=\"paper\",\n    current_identifier_type=\"arxiv\",\n    current_identifier_value=\"1706.03762\",\n    new_identifier_type=\"semantic_scholar\",\n    new_identifier_value=\"204e3073870fae3d05bcbc2f6a8e263d9b72e776\"\n)\n```\n\nAdd a webpage:\n\n```python\nadd_source(\n    title=\"Understanding Transformers\",\n    type=\"webpage\",\n    identifier_type=\"url\",\n    identifier_value=\"https://example.com/transformers\",\n)\n```\n\n### 2. Note Taking\n\nAdd notes to a source:\n\n```python\nadd_note(\n    title=\"Attention Is All You Need\",\n    type=\"paper\",\n    identifier_type=\"arxiv\",\n    identifier_value=\"1706.03762\",\n    note_title=\"Implementation details\",\n    note_content=\"The paper describes the architecture...\"\n)\n```\n\n### 3. Entity Linking\n\nLink source to entities:\n\n```python\nlink_to_entity(\n    title=\"Attention Is All You Need\",\n    type=\"paper\",\n    identifier_type=\"arxiv\",\n    identifier_value=\"1706.03762\",\n    entity_name=\"transformer\",\n    relation_type=\"introduces\",\n    notes=\"First paper to introduce the transformer architecture\"\n)\n```\n\nQuery sources by entity:\n\n```python\nget_entity_sources(\n    entity_name=\"transformer\",\n    type_filter=\"paper\",\n    relation_filter=\"discusses\"\n)\n```\n\n## Best Practices\n\n1. Source Management\n\n   - Use consistent titles across references\n   - Provide as many identifiers as available\n   - Keep notes structured with clear titles\n   - Use appropriate source types\n\n2. Entity Linking\n   - Be specific with relation types\n   - Add contextual notes to relationships\n   - Verify entity names against memory graph\n   - Keep entity relationships focused\n\n## Technical Details\n\n1. Source Identification\n\n   - Internal UUID system for consistent referencing\n   - Multiple external identifiers per source\n   - Flexible identifier types (arxiv, doi, url, etc.)\n   - Title and type based fuzzy matching\n\n2. Data Organization\n   - Structured notes with titles\n   - Clear source type categorization\n   - Entity relationship tracking\n   - Status management\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Add tests for new features\n4. Submit a pull request\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "sqlite",
        "fastmcp",
        "knowledge bases",
        "sources entities",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    }
  }
}