{
  "category": "digital-marketing",
  "categoryDisplay": "Digital Marketing",
  "description": "",
  "totalRepositories": 6,
  "repositories": {
    "boristopalov--spotify-mcp": {
      "owner": "boristopalov",
      "name": "spotify-mcp",
      "url": "https://github.com/boristopalov/spotify-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/boristopalov.webp",
      "description": "Connects Claude with Spotify to control playback, manage music libraries, and retrieve information about tracks, albums, artists, and playlists.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-02-06T01:52:19Z",
      "readme_content": "# spotify-mcp MCP server\n\n[![smithery badge](https://smithery.ai/badge/@boristopalov/spotify-mcp)](https://smithery.ai/server/@boristopalov/spotify-mcp)\n\nMCP project to connect Claude with Spotify. Built on top of [spotipy-dev's API](https://github.com/spotipy-dev/spotipy/tree/2.24.0).\n\n## Features\n- Start, pause, and skip playback\n- Search for tracks/albums/artists/playlists\n- Get info about a track/album/artist/playlist\n- Manage the Spotify queue\n\n## Demo\n\nMake sure to turn on audio\n\n<details>\n  <summary>\n    Video\n  </summary>\n  https://github.com/user-attachments/assets/20ee1f92-f3e3-4dfa-b945-ca57bc1e0894\n  </summary>\n</details>\n\n## Configuration\n\n### Getting Spotify API Keys\nCreate an account on [developer.spotify.com](https://developer.spotify.com/). Navigate to [the dashboard](https://developer.spotify.com/dashboard). \nCreate an app with redirect_uri as http://localhost:8888. (You can choose any port you want but you must use http and localhost). \nI set \"APIs used\" to \"Web Playback SDK\".\n\n### Run this project locally\nThis project is not yet set up for ephemeral environments (e.g. `uvx` usage). \nRun this project locally by cloning this repo\n\n```bash\ngit clone https://github.com/varunneal/spotify-mcp.git\n```\n\nAdd this tool as a mcp server.\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n\n  ```json\n  \"spotify\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/spotify_mcp\",\n        \"run\",\n        \"spotify-mcp\"\n      ],\n      \"env\": {\n        \"SPOTIFY_CLIENT_ID\": YOUR_CLIENT_ID,\n        \"SPOTIFY_CLIENT_SECRET\": YOUR_CLIENT_SECRET,\n        \"SPOTIFY_REDIRECT_URI\": \"http://localhost:8888\"\n      }\n    }\n  ```\n\n### Troubleshooting\nPlease open an issue if you can't get this MCP working. Here are some tips:\n1. Make sure `uv` is updated. I recommend version `>=0.54`.\n2. Make sure claude has execution permisisons for the project: `chmod -R 755`.\n3. Ensure you have Spotify premium (needed for running developer API). \n\n\n## TODO\n\nUnfortunately, a bunch of cool features have [now been deprecated](https://techcrunch.com/2024/11/27/spotify-cuts-developer-access-to-several-of-its-recommendation-features/) \nfrom the Spotify API. Most new features will be relatively minor or for the health of the project:\n- tests.\n- adding API support for managing playlists.\n- adding API support for paginated search results/playlists/albums.\n\n## Deployment\n\n(todo)\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/varun/Documents/Python/spotify_mcp run spotify-mcp\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "spotify",
        "mcp",
        "tracks",
        "spotify mcp",
        "boristopalov spotify",
        "claude spotify"
      ],
      "category": "digital-marketing"
    },
    "jamiew--spotify-mcp": {
      "owner": "jamiew",
      "name": "spotify-mcp",
      "url": "https://github.com/jamiew/spotify-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/jamiew.webp",
      "description": "Connect to Spotify for controlling playback and managing your music library, including playlist management support. Features include searching for tracks, getting information about music entities, and managing the playback queue.",
      "stars": 4,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-22T07:47:05Z",
      "readme_content": "# spotify-mcp MCP server\n\n[![smithery badge](https://smithery.ai/badge/@jamiew/spotify-mcp)](https://smithery.ai/server/@jamiew/spotify-mcp)\n\nMCP server connecting Claude with Spotify. This fork of [varunneal/spotify-mcp](https://github.com/varunneal/spotify-mcp) adds smart-batching tools and advanced playlist features that optimize API usage.\n\n## Features\n\n### Core Functionality\n- **Playback Control**: Start, pause, skip tracks, manage queue\n- **Search & Discovery**: Find tracks, albums, artists, playlists with pagination  \n- **Real-time State**: Live user profile and playback status\n\n### Enhanced Playlist Tools (New in this fork)\n- **Smart Batch Operations**: Add/remove up to 100 tracks in single API calls\n- **Large Playlist Support**: Efficiently handle playlists with 1000+ tracks using pagination\n- **Advanced Playlist Management**: Create, modify details, bulk track operations\n- **API-Optimized Workflows**: Intelligent batching reduces API calls by 60-80%\n\n## Installation\n\n### 1. Get Spotify API Keys\n1. Create account at [developer.spotify.com](https://developer.spotify.com/)\n2. Create app with redirect URI: `http://localhost:8888`\n\n### 2. Install via Smithery (Recommended)\n```bash\nnpx -y @smithery/cli install @jamiew/spotify-mcp --client claude\n```\n\n### 3. Manual Installation\n```bash\ngit clone https://github.com/jamiew/spotify-mcp.git\n```\n\nAdd to Claude Desktop config (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n```json\n\"spotify\": {\n  \"command\": \"uv\",\n  \"args\": [\"--directory\", \"/path/to/spotify_mcp\", \"run\", \"spotify-mcp\"],\n  \"env\": {\n    \"SPOTIFY_CLIENT_ID\": \"YOUR_CLIENT_ID\",\n    \"SPOTIFY_CLIENT_SECRET\": \"YOUR_CLIENT_SECRET\",\n    \"SPOTIFY_REDIRECT_URI\": \"http://localhost:8888\"\n  }\n}\n```\n\n**Requirements**: Spotify Premium account, `uv` >= 0.54\n\n## Usage Examples\n\n- **\"Create a chill study playlist with 20 tracks\"** → Search + playlist creation + bulk track addition\n- **\"Show me the first 50 tracks from my 'Liked Songs'\"** → Pagination for large playlists  \n- **\"Find similar artists to Radiohead and add their top tracks to my queue\"** → Search + artist info + queue management\n\n## Development\n\nBuilt with **FastMCP framework** featuring 13 focused tools, type-safe APIs, and comprehensive test coverage.\n\n**Debug with MCP Inspector:**\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /path/to/spotify_mcp run spotify-mcp\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "spotify",
        "playlist",
        "mcp",
        "spotify mcp",
        "jamiew spotify",
        "spotify controlling"
      ],
      "category": "digital-marketing"
    },
    "kevinwatt--yt-dlp-mcp": {
      "owner": "kevinwatt",
      "name": "yt-dlp-mcp",
      "url": "https://github.com/kevinwatt/yt-dlp-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kevinwatt.webp",
      "description": "Integrates with yt-dlp to download video and audio content from various platforms, and fetch subtitles in SRT format for processing by LLMs. Provides a privacy-focused direct download experience without tracking.",
      "stars": 84,
      "forks": 30,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-01T05:42:41Z",
      "readme_content": "# yt-dlp-mcp\n\nAn MCP server implementation that integrates with yt-dlp, providing video and audio content download capabilities (e.g. YouTube, Facebook, Tiktok, etc.) for LLMs.\n\n## Features\n\n* **Video Metadata**: Extract comprehensive video information without downloading content\n* **Subtitles**: Download subtitles in SRT format for LLMs to read\n* **Video Download**: Save videos to your Downloads folder with resolution control\n* **Audio Download**: Save audios to your Downloads folder\n* **Video Search**: Search for videos on YouTube using keywords\n* **Privacy-Focused**: Direct download without tracking\n* **MCP Integration**: Works with Dive and other MCP-compatible LLMs\n\n## Installation\n\n### Prerequisites\n\nInstall `yt-dlp` based on your operating system:\n\n```bash\n# Windows\nwinget install yt-dlp\n\n# macOS\nbrew install yt-dlp\n\n# Linux\npip install yt-dlp\n```\n\n### With [Dive Desktop](https://github.com/OpenAgentPlatform/Dive)\n\n1. Click \"+ Add MCP Server\" in Dive Desktop\n2. Copy and paste this configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"yt-dlp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@kevinwatt/yt-dlp-mcp\"\n      ]\n    }\n  }\n}\n```\n3. Click \"Save\" to install the MCP server\n\n## Tool Documentation\n\n* **search_videos**\n  * Search for videos on YouTube using keywords\n  * Inputs:\n    * `query` (string, required): Search keywords or phrase\n    * `maxResults` (number, optional): Maximum number of results to return (1-50, default: 10)\n\n* **list_subtitle_languages**\n  * List all available subtitle languages and their formats for a video (including auto-generated captions)\n  * Inputs:\n    * `url` (string, required): URL of the video\n\n* **download_video_subtitles**\n  * Download video subtitles in any available format. Supports both regular and auto-generated subtitles\n  * Inputs:\n    * `url` (string, required): URL of the video\n    * `language` (string, optional): Language code (e.g., 'en', 'zh-Hant', 'ja'). Defaults to 'en'\n\n* **download_video**\n  * Download video to user's Downloads folder\n  * Inputs:\n    * `url` (string, required): URL of the video\n    * `resolution` (string, optional): Video resolution ('480p', '720p', '1080p', 'best'). Defaults to '720p'\n    * `startTime` (string, optional): Start time for trimming (format: HH:MM:SS[.ms]) - e.g., '00:01:30' or '00:01:30.500'\n    * `endTime` (string, optional): End time for trimming (format: HH:MM:SS[.ms]) - e.g., '00:02:45' or '00:02:45.500'\n\n* **download_audio**\n  * Download audio in best available quality (usually m4a/mp3 format) to user's Downloads folder\n  * Inputs:\n    * `url` (string, required): URL of the video\n\n* **download_transcript**\n  * Download and clean video subtitles to produce a plain text transcript without timestamps or formatting\n  * Inputs:\n    * `url` (string, required): URL of the video\n    * `language` (string, optional): Language code (e.g., 'en', 'zh-Hant', 'ja'). Defaults to 'en'\n\n* **get_video_metadata**\n  * Extract comprehensive video metadata without downloading the content\n  * Returns detailed information including title, description, channel, timestamps, view counts, and more\n  * Inputs:\n    * `url` (string, required): URL of the video\n    * `fields` (array, optional): Specific metadata fields to extract (e.g., ['id', 'title', 'description', 'channel']). If not provided, returns all available metadata\n\n* **get_video_metadata_summary**\n  * Get a human-readable summary of key video metadata\n  * Returns formatted text with title, channel, duration, views, upload date, and description preview\n  * Inputs:\n    * `url` (string, required): URL of the video\n\n## Usage Examples\n\nAsk your LLM to:\n```\n\"Search for Python tutorial videos\"\n\"Find JavaScript courses and show me the top 5 results\"\n\"Search for machine learning tutorials with 15 results\"\n\"List available subtitles for this video: https://youtube.com/watch?v=...\"\n\"Download a video from facebook: https://facebook.com/...\"\n\"Download Chinese subtitles from this video: https://youtube.com/watch?v=...\"\n\"Download this video in 1080p: https://youtube.com/watch?v=...\"\n\"Download audio from this YouTube video: https://youtube.com/watch?v=...\"\n\"Get a clean transcript of this video: https://youtube.com/watch?v=...\"\n\"Download Spanish transcript from this video: https://youtube.com/watch?v=...\"\n\"Get metadata for this video: https://youtube.com/watch?v=...\"\n\"Show me the title, description, and channel info for this video: https://youtube.com/watch?v=...\"\n\"Get a summary of this video's metadata: https://youtube.com/watch?v=...\"\n\"Extract just the id, title, and view count from this video: https://youtube.com/watch?v=...\"\n```\n\n## Manual Start\n\nIf needed, start the server manually:\n```bash\nnpx @kevinwatt/yt-dlp-mcp\n```\n\n## Requirements\n\n* Node.js 20+\n* `yt-dlp` in system PATH\n* MCP-compatible LLM service\n\n\n## Documentation\n\n- [API Reference](./docs/api.md)\n- [Configuration](./docs/configuration.md)\n- [Error Handling](./docs/error-handling.md)\n- [Contributing](./docs/contributing.md)\n\n\n## License\n\nMIT\n\n## Author\n\nDewei Yen\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "yt",
        "srt",
        "dlp",
        "yt dlp",
        "subtitles srt",
        "srt format"
      ],
      "category": "digital-marketing"
    },
    "superseoworld--mcp-spotify": {
      "owner": "superseoworld",
      "name": "mcp-spotify",
      "url": "https://github.com/superseoworld/mcp-spotify",
      "imageUrl": "/freedevtools/mcp/pfp/superseoworld.webp",
      "description": "Access Spotify's music catalog to search for tracks, albums, and artists, along with retrieving artist-specific information such as top tracks and related artists.",
      "stars": 14,
      "forks": 12,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-19T21:27:31Z",
      "readme_content": "# ArtistLens\n\n[![smithery badge](https://smithery.ai/badge/@superseoworld/artistlens)](https://smithery.ai/server/@superseoworld/artistlens)\n[![npm version](https://img.shields.io/npm/v/@thomaswawra/artistlens.svg)](https://www.npmjs.com/package/@thomaswawra/artistlens)\n\nA powerful Model Context Protocol (MCP) server that provides access to the Spotify Web API. ArtistLens enables seamless interaction with Spotify's music catalog, including searching for tracks, albums, and artists, as well as accessing artist-specific information like top tracks and related artists.\n\n**Current Version:** 0.4.12\n\n<a href=\"https://glama.ai/mcp/servers/mmrvuig6tp\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/mmrvuig6tp/badge\" alt=\"ArtistLens MCP server\" /></a>\n\n## Installation\n\n### Installing via Smithery\n\nTo install ArtistLens for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@superseoworld/artistlens):\n\n```bash\nnpx -y @smithery/cli install @superseoworld/artistlens --client claude\n```\n\n### Manual Installation\n\nYou can install the package globally:\n\n```bash\nnpm install -g @thomaswawra/artistlens\n```\n\nOr run it directly with npx:\n\n```bash\nnpx -y @thomaswawra/artistlens\n```\n\n## Configuration\n\nAdd to your MCP settings file (e.g., `claude_desktop_config.json` or `cline_mcp_settings.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"spotify\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@thomaswawra/artistlens\"],\n      \"env\": {\n        \"SPOTIFY_CLIENT_ID\": \"your_client_id\",\n        \"SPOTIFY_CLIENT_SECRET\": \"your_client_secret\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nYou'll need to provide your Spotify API credentials:\n1. Go to [Spotify Developer Dashboard](https://developer.spotify.com/dashboard)\n2. Create a new application\n3. Get your Client ID and Client Secret\n4. Add them to the configuration as shown above\n\n## Features\n\n- Search for tracks, albums, artists, and playlists\n- Get artist information including top tracks and related artists\n- Get album information and tracks\n- Access new releases and recommendations\n- Get audiobook information with market-specific content and chapters\n- Note: Audiobook endpoints may require additional authentication or market-specific access\n- Get and modify playlist information (name, description, public/private status)\n- Access playlist tracks and items with pagination support\n- Support for both Spotify IDs and URIs\n- Automatic token management with client credentials flow\n- Comprehensive test suite for all functionality\n- Well-organized code with separation of concerns\n\n## Available Tools\n\n- `get_access_token`: Get a valid Spotify access token\n- `search`: Search for tracks, albums, artists, or playlists\n- `get_artist`: Get artist information\n- `get_artist_top_tracks`: Get an artist's top tracks\n- `get_artist_related_artists`: Get artists similar to a given artist\n- `get_artist_albums`: Get an artist's albums\n- `get_album`: Get album information\n- `get_album_tracks`: Get an album's tracks\n- `get_track`: Get track information\n- `get_available_genres`: Get a list of available genres for recommendations\n- `get_new_releases`: Get new album releases\n- `get_recommendations`: Get track recommendations based on seed tracks, artists, or genres\n- `get_audiobook`: Get audiobook information with optional market parameter\n- `get_multiple_audiobooks`: Get information for multiple audiobooks (max 50)\n- `get_audiobook_chapters`: Get chapters of an audiobook with pagination support (1-50 chapters per request)\n- `get_playlist`: Get a playlist owned by a Spotify user\n- `get_playlist_tracks`: Get full details of the tracks of a playlist (1-100 tracks per request)\n- `get_playlist_items`: Get full details of the items of a playlist (1-100 items per request)\n- `modify_playlist`: Change playlist details (name, description, public/private state, collaborative status)\n- `add_tracks_to_playlist`: Add one or more tracks to a playlist with optional position\n- `remove_tracks_from_playlist`: Remove one or more tracks from a playlist with optional positions and snapshot ID\n- `get_current_user_playlists`: Get a list of the playlists owned or followed by the current Spotify user (1-50 playlists per request)\n- `get_featured_playlists`: Get a list of Spotify featured playlists with optional locale and pagination support\n- `get_category_playlists`: Get a list of Spotify playlists tagged with a particular category\n\n## Updating\n\nTo update to the latest version:\n\n```bash\n# If installed globally\nnpm update -g @thomaswawra/artistlens\n\n# If using npx, it will automatically use the latest version\nnpx -y @thomaswawra/artistlens\n```\n\n## Development\n\nThis project is open source and available on GitHub at [https://github.com/superseoworld/artistlens](https://github.com/superseoworld/artistlens).\n\n### Project Structure\n\nThe codebase is organized into the following directories:\n- `src/handlers/`: Contains handler classes for different Spotify API endpoints\n- `src/types/`: TypeScript interfaces for request and response objects\n- `src/utils/`: Utility functions and classes for API communication\n- `src/__tests__/`: Jest test files for all functionality\n\n### Testing\n\nThe project uses Jest for testing. To run the tests:\n\n```bash\nnpm test\n```\n\nTo run tests in watch mode during development:\n\n```bash\nnpm run test:watch\n```\n\n### Contributing\n\nTo contribute:\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Add tests for your changes\n4. Commit your changes (`git commit -m 'Add some amazing feature'`)\n5. Push to the branch (`git push origin feature/amazing-feature`)\n6. Open a Pull Request\n\n## License\n\nMIT License\n\n[![smithery badge](https://smithery.ai/badge/@superseoworld/artistlens)](https://smithery.ai/server/@superseoworld/artistlens)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "spotify",
        "tracks",
        "mcp",
        "mcp spotify",
        "spotify music",
        "spotify access"
      ],
      "category": "digital-marketing"
    },
    "uehaj--mcp-notifier": {
      "owner": "uehaj",
      "name": "mcp-notifier",
      "url": "https://github.com/uehaj/mcp-notifier",
      "imageUrl": "/freedevtools/mcp/pfp/uehaj.webp",
      "description": "Send customizable desktop notifications with various types such as info, success, warning, and error. This MCP server enhances applications by providing both simple and advanced notification capabilities across multiple platforms.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-29T11:32:00Z",
      "readme_content": "# MCP Notifier\n[![npm downloads](https://img.shields.io/npm/dw/@uehaj/mcp-notifier)](https://www.npmjs.com/package/@uehaj/mcp-notifier)\n[![smithery badge](https://smithery.ai/badge/@uehaj/mcp-notifier)](https://smithery.ai/server/@uehaj/mcp-notifier)\n\n\nA Model Context Protocol (MCP) server that provides desktop notification capabilities using node-notifier.\n\n## Features\n\n- Simple notification tool\n- Advanced notification tool with additional options\n- Support for different notification types (info, success, warning, error)\n- Customizable notification settings\n\n## Platform Support\n\nThis MCP server uses [node-notifier](https://www.npmjs.com/package/node-notifier) and works across multiple platforms:\n- **macOS**: Uses macOS Notification Center\n- **Windows**: Uses Windows Toast Notifications (Windows 8+) or taskbar balloons (< Windows 8)\n- **Linux**: Uses notify-send command for Gnome/Ubuntu notifications\n\nFor more details on platform-specific behavior, visit the [node-notifier documentation](https://www.npmjs.com/package/node-notifier).\n\n## Usage Options\n\nYou can use MCP Notifier in two ways:\n\n### Option 1: Run Directly with npx\n\nThe simplest way to use MCP Notifier is with npx:\n\n```bash\n# Run directly with npx\nnpx @uehaj/mcp-notifier\n```\n\nThis will download and execute the package with a single command.\n\n### Option 2: Clone and Build from Source\n\n```bash\n# Clone repository\ngit clone https://github.com/uehaj/mcp-notifier.git\ncd mcp-notifier\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Run the server\nnode build/index.js\n```\n\n## Integration with Claude Desktop\n\n1. Edit your Claude Desktop configuration file:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. Choose one of the following configuration methods:\n\n### For npx method (recommended):\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-notifier\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@uehaj/mcp-notifier\"\n      ]\n    }\n  }\n}\n```\n\n### For local git clone method:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-notifier\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/absolute/path/to/cloned/mcp-notifier/build/index.js\"\n      ]\n    }\n  }\n}\n```\n\n3. Restart Claude Desktop\n\n## Smithery Integration\n\nThis MCP server is available on [Smithery](https://smithery.ai/server/@uehaj/mcp-notifier). Since it requires desktop access to function properly, it must be installed locally rather than used as a hosted service.\n\n### Run via Smithery CLI:\n```bash\n# Run using Smithery CLI\nnpx @smithery/cli run @uehaj/mcp-notifier\n```\n\n### Manual setup from repository:\nFollow the \"Clone and Build from Source\" instructions above.\n\n## Available Tools\n\n### notify\n\nBasic notification tool with the following parameters:\n\n- `title`: The notification title (required)\n- `message`: The notification message (required)\n- `icon`: Optional path to an icon file\n- `sound`: Whether to play a sound (optional boolean)\n- `wait`: Whether to wait for the notification to close (optional boolean)\n\n### notify-advanced\n\nAdvanced notification tool with more options:\n\n- `title`: The notification title (required)\n- `message`: The notification message (required)\n- `type`: Notification type - \"info\", \"success\", \"warning\", or \"error\" (optional)\n- `timeout`: Auto-close timeout in milliseconds (optional)\n- `closeLabel`: Text for close button (macOS only, optional)\n- `actions`: Array of action button labels (macOS only, optional)\n\n## Testing\n\nRun tests:\n\n```bash\n# For npx method\nnpx @modelcontextprotocol/inspector npx @uehaj/mcp-notifier\n\n# For git clone method\ncd mcp-notifier\nnpx @modelcontextprotocol/inspector node build/index.js\n```\n\n## Development\n\n### Publishing to npm\n\nThe package includes several npm scripts to help with publishing:\n\n```bash\n# Publish the current version\nnpm run release\n\n# Increment patch version (1.0.0 -> 1.0.1) and publish\nnpm run release:patch\n\n# Increment minor version (1.0.0 -> 1.1.0) and publish\nnpm run release:minor\n\n# Increment major version (1.0.0 -> 2.0.0) and publish\nnpm run release:major\n```\n\nThese commands will:\n1. Automatically run the build process\n2. Update the version number as needed\n3. Publish the package to npm with public access\n\nYou need to be logged in to npm (`npm login`) before running these commands.\n\n## Requirements\n\n- Node.js 18 or higher\n- npm 6 or higher\n- Desktop environment (Windows, macOS, or Linux)\n- Access permissions to notification system\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notifier",
        "mcp",
        "notifications",
        "mcp notifier",
        "mcp server",
        "uehaj mcp"
      ],
      "category": "digital-marketing"
    },
    "yuhuacheng--tidal-mcp": {
      "owner": "yuhuacheng",
      "name": "tidal-mcp",
      "url": "https://github.com/yuhuacheng/tidal-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/yuhuacheng.webp",
      "description": "Provides personalized music recommendations and playlist management based on user listening history and custom criteria. Enables natural language commands for creating, viewing, and managing TIDAL playlists while discovering context-aware tracks.",
      "stars": 26,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-04T07:48:25Z",
      "readme_content": "# TIDAL MCP: My Custom Picks 🌟🎧\n\n\n\nMost music platforms offer recommendations — Daily Discovery, Top Artists, New Arrivals, etc. — but even with the state-of-the-art system, they often feel too \"aggregated\". I wanted something more custom and context-aware.\n\nWith TIDAL MCP, you can ask for things like:\n> *\"Based on my last 10 favorites, find similar tracks — but only ones from recent years.\"*\n>\n> *\"Find me tracks like those in this playlist, but slower and more acoustic.\"*\n\nThe LLM filters and curates results using your input, finds similar tracks via TIDAL’s API, and builds new playlists directly in your account.\n\n<a href=\"https://glama.ai/mcp/servers/@yuhuacheng/tidal-mcp\">\n  <img width=\"400\" height=\"200\" src=\"https://glama.ai/mcp/servers/@yuhuacheng/tidal-mcp/badge\" alt=\"TIDAL: My Custom Picks MCP server\" />\n</a>\n\n## Features\n\n- 🌟 **Music Recommendations**: Get personalized track recommendations based on your listening history **plus your custom criteria**.\n- ၊၊||၊ **Playlist Management**: Create, view, and manage your TIDAL playlists\n\n## Quick Start\n\n### Prerequisites\n\n- Python 3.10+\n- [uv](https://github.com/astral-sh/uv) (Python package manager)\n- TIDAL subscription\n\n### Installation\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/yuhuacheng/tidal-mcp.git\n   cd tidal-mcp\n   ```\n\n2. Create a virtual environment and install dependencies using uv:\n   ```bash\n   uv venv\n   source .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n   ```\n\n3. Install the package with all dependencies from the pyproject.toml file:\n   ```bash\n   uv pip install --editable .\n   ```\n\n   This will install all dependencies defined in the pyproject.toml file and set up the project in development mode.\n\n\n## MCP Client Configuration\n\n### Claude Desktop Configuration\n\nTo add this MCP server to Claude Desktop, you need to update the MCP configuration file. Here's an example configuration:\n(you can specify the port by adding an optional `env` section with the `TIDAL_MCP_PORT` environment variable)\n\n```json\n{\n  \"mcpServers\": {\n    \"TIDAL Integration\": {\n      \"command\": \"/path/to/your/uv\",\n      \"env\": {\n        \"TIDAL_MCP_PORT\": \"5100\"\n      },\n      \"args\": [\n        \"run\",\n        \"--with\",\n        \"requests\",\n        \"--with\",\n        \"mcp[cli]\",\n        \"--with\",\n        \"flask\",\n        \"--with\",\n        \"tidalapi\",\n        \"mcp\",\n        \"run\",\n        \"/path/to/your/project/tidal-mcp/mcp_server/server.py\"\n      ]\n    }\n  }\n}\n```\n\nExample scrrenshot of the MCP configuration in Claude Desktop:\n\n\n### Steps to Install MCP Configuration\n\n1. Open Claude Desktop\n2. Go to Settings > Developer\n3. Click on \"Edit Config\"\n4. Paste the modified JSON configuration\n5. Save the configuration\n6. Restart Claude Desktop\n\n## Suggested Prompt Starters\nOnce configured, you can interact with your TIDAL account through a LLM by asking questions like:\n\n- *“Recommend songs like those in this playlist, but slower and more acoustic.”*\n- *“Create a playlist based on my top tracks, but focused on chill, late-night vibes.”*\n- *“Find songs like these in playlist XYZ but in languages other than English.”*\n\n*💡 You can also ask the model to:*\n- Use more tracks as seeds to broaden the inspiration.\n- Return more recommendations if you want a longer playlist.\n- Or delete a playlist if you’re not into it — no pressure!\n\n## Available Tools\n\nThe TIDAL MCP integration provides the following tools:\n\n- `tidal_login`: Authenticate with TIDAL through browser login flow\n- `get_favorite_tracks`: Retrieve your favorite tracks from TIDAL\n- `recommend_tracks`: Get personalized music recommendations\n- `create_tidal_playlist`: Create a new playlist in your TIDAL account\n- `get_user_playlists`: List all your playlists on TIDAL\n- `get_playlist_tracks`: Retrieve all tracks from a specific playlist\n- `delete_tidal_playlist`: Delete a playlist from your TIDAL account\n\n## License\n\n[MIT License](LICENSE)\n\n## Acknowledgements\n\n- [Model Context Protocol (MCP)](https://github.com/modelcontextprotocol/python-sdk)\n- [TIDAL Python API](https://github.com/tamland/python-tidal)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tidal",
        "playlists",
        "playlist",
        "tidal playlists",
        "tidal mcp",
        "playlist management"
      ],
      "category": "digital-marketing"
    }
  }
}