{
  "category": "file-management",
  "categoryDisplay": "File Management",
  "description": "",
  "totalRepositories": 80,
  "repositories": {
    "7gugu--zip-mcp": {
      "owner": "7gugu",
      "name": "zip-mcp",
      "url": "https://github.com/7gugu/zip-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/7gugu.webp",
      "description": "The ZIP Compression Server allows users to easily compress and decompress files, manage multiple files at once, and query information about ZIP files, making file management more efficient and secure.",
      "stars": 11,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-26T13:00:37Z",
      "readme_content": "# ZIP MCP Server\n\n[中文](README_CN.md) | English\n\n## Project Introduction\n\n<a href=\"https://glama.ai/mcp/servers/@7gugu/zip-mcp\">\n  <img alt=\"badge\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@7gugu/zip-mcp/badge\" />\n</a>\n\nZIP MCP Server is a compression server based on fastMCP and zip.js, implementing the Model Context Protocol (MCP). This project provides fully parameter-controlled ZIP compression, decompression, and query compression package information functions.\n\n## Features\n\n- Supports compression and decompression of files and data\n- Supports multi-file packaging compression\n- Provides compression level control (0-9)\n- Supports password protection and encryption strength settings\n- Provides query function for compressed package metadata\n\n## Project Structure\n\n```bash\nzip-mcp\n├── src\n│   ├── index.ts               # Application entry point\n│   ├── utils\n│   │   └── compression.ts     # Compression and decompression implementation\n├── tsconfig.json              # TypeScript configuration file\n├── package.json               # npm configuration file\n└── README.md                  # Project documentation\n```\n\n## Installation\n\nYou can install ZIP MCP Server globally using npm:\n\n```bash\nnpm install -g zip-mcp\n```\n\n## MCP Configuration\n\nAfter installation, you can configure ZIP MCP in your MCP JSON configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"zip-mcp\": {\n      \"command\": \"zip-mcp\",\n      \"args\": []\n    }\n  }\n}\n```\n\n## Configure the MCP JSON in the AI Client\n\n- Claude Client: [https://modelcontextprotocol.io/quickstart/user](https://modelcontextprotocol.io/quickstart/user)\n- Raycast: requires installing the MCP plugin\n- Cursor: [https://docs.cursor.com/context/model-context-protocol#configuring-mcp-servers](https://docs.cursor.com/context/model-context-protocol#configuring-mcp-servers)\n\n## MCP Tool Description\n\nZIP MCP Server provides the following tools, which can be called through the MCP protocol:\n\n### Compression Tool (compress)\n\nCompress local files or directories into a ZIP file.\n\n**Parameters:**\n\n- `input`: Path of the file or directory to be compressed (string or string array)\n- `output`: Path of the output ZIP file\n- `options`: Compression options (optional)\n  - `level`: Compression level (0-9, default is 5)\n  - `password`: Password protection\n  - `encryptionStrength`: Encryption strength (1-3)\n  - `overwrite`: Whether to overwrite existing files (boolean)\n\n**Returns:**\n\n- Success: Text content containing success information\n- Failure: Text content containing error information\n\n### Decompression Tool (decompress)\n\nDecompress local ZIP files to the specified directory.\n\n**Parameters:**\n\n- `input`: Path of the ZIP file\n- `output`: Path of the output directory\n- `options`: Decompression options (optional)\n  - `password`: Decompression password\n  - `overwrite`: Whether to overwrite existing files (boolean)\n  - `createDirectories`: Whether to create non-existent directories (boolean)\n\n**Returns:**\n\n- Success: Text content containing decompression result information\n- Failure: Text content containing error information\n\n### ZIP Info Tool (getZipInfo)\n\nGet metadata information of local ZIP files.\n\n**Parameters:**\n\n- `input`: Path of the ZIP file\n- `options`: Options (optional)\n  - `password`: Decompression password\n\n**Returns:**\n\n- Success: Text content containing detailed information of the ZIP file, including:\n  - Total number of files\n  - Total size\n  - Compressed size\n  - Compression ratio\n  - Detailed information of each file\n- Failure: Text content containing error information\n\n### Test Tool (echo)\n\nReturns the input message to test if the service is running normally.\n\n**Parameters:**\n\n- `message`: Message to be returned\n\n**Returns:**\n\n- Text content containing the input message and current timestamp\n\n## Examples\n\nExamples of calling tools using the MCP client:\n\n```javascript\n// Compress files\nawait client.executeTool(\"compress\", {\n  input: \"/path/to/files/or/directory\",\n  output: \"/path/to/output.zip\",\n  options: {\n    level: 9,\n    comment: \"Test compression\",\n    password: \"secret\",\n    overwrite: true,\n  },\n});\n\n// Decompress files\nawait client.executeTool(\"decompress\", {\n  input: \"/path/to/archive.zip\",\n  output: \"/path/to/extract/directory\",\n  options: {\n    password: \"secret\",\n    overwrite: true,\n    createDirectories: true,\n  },\n});\n\n// Get ZIP info\nawait client.executeTool(\"getZipInfo\", {\n  input: \"/path/to/archive.zip\",\n  options: {\n    password: \"secret\",\n  },\n});\n\n// Test service\nawait client.executeTool(\"echo\", {\n  message: \"Hello, ZIP MCP Server!\",\n});\n```\n\n## Contact\n\n- Email: [gz7gugu@qq.com](mailto:gz7gugu@qq.com)\n- Blog: [https://7gugu.com](https://7gugu.com)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "zip",
        "compression",
        "compress",
        "zip compression",
        "zip files",
        "compression server"
      ],
      "category": "file-management"
    },
    "Albiemark--dbx-mcp-server": {
      "owner": "Albiemark",
      "name": "dbx-mcp-server",
      "url": "https://github.com/Albiemark/dbx-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Albiemark.webp",
      "description": "Integrates Dropbox with applications to manage files, folders, and account information through MCP-compatible clients, utilizing Dropbox's public API for seamless interaction.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-03-24T00:51:41Z",
      "readme_content": "# dbx-mcp-server\n\nA Model Context Protocol (MCP) server that provides integration with Dropbox, allowing MCP-compatible clients to interact with Dropbox through a set of powerful tools.\n\n**Important Disclaimer:** This project is not affiliated with, endorsed by, or sponsored by Dropbox. It is an independent integration that works with Dropbox's public API.\n\n## Table of Contents\n\n- [Quick Start](#quick-start)\n- [Installation](#installation)\n- [Authentication](#authentication)\n- [Available Tools](#available-tools)\n- [Configuration](#configuration)\n- [Usage Examples](#usage-examples)\n- [Testing](#testing)\n- [Development](#development)\n- [License](#license)\n\n## Quick Start\n\n1. Clone the repository\n2. Run `npm install` to install dependencies\n3. Run `npm run build` to build the project\n4. Register a Dropbox app at [Dropbox App Console](https://www.dropbox.com/developers/apps):\n   - Choose \"Scoped access\" API\n   - Choose the access type your app needs\n   - Name your app and click \"Create app\"\n   - Under \"Permissions\", select the required permissions:\n     - `files.metadata.read`\n     - `files.content.read`\n     - `files.content.write`\n     - `sharing.write`\n     - `account_info.read`\n   - Add `http://localhost:3000/callback` as your redirect URI\n   - Note your App key and App secret\n5. Run the setup script:\n   ```bash\n   npm run setup\n   ```\n6. Configure your MCP client to use the server\n\n## Installation\n\n1. **Clone the repository**\n\n   ```bash\n   git clone https://github.com/your-username/dbx-mcp-server.git\n   cd dbx-mcp-server\n   ```\n\n2. **Install dependencies and build**\n\n   ```bash\n   npm install\n   npm run build\n   ```\n\n3. **Run the setup script**\n\n   ```bash\n   npm run setup\n   ```\n\n4. **Add to MCP settings**\n\n   Add the following to your MCP settings file:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"dbx\": {\n         \"command\": \"node\",\n         \"args\": [\"/path/to/dbx-mcp-server/build/index.js\"]\n       }\n     }\n   }\n   ```\n\n## Authentication\n\nThe server uses OAuth 2.0 with PKCE for secure authentication with Dropbox.\n\n### Environment Variables\n\nRequired:\n\n- `DROPBOX_APP_KEY`: Your Dropbox app's key\n- `DROPBOX_APP_SECRET`: Your Dropbox app's secret\n- `DROPBOX_REDIRECT_URI`: OAuth redirect URI\n- `TOKEN_ENCRYPTION_KEY`: 32+ character key for token encryption\n\nOptional:\n\n- `TOKEN_REFRESH_THRESHOLD_MINUTES`: Minutes before expiration to refresh token (default: 5)\n- `MAX_TOKEN_REFRESH_RETRIES`: Maximum number of refresh attempts (default: 3)\n- `TOKEN_REFRESH_RETRY_DELAY_MS`: Delay between refresh attempts in ms (default: 1000)\n\n## Available Tools\n\n### File Operations\n\n- `list_files`: List files in a directory\n- `upload_file`: Upload a file\n- `download_file`: Download a file\n- `safe_delete_item`: Safely delete with recycle bin support\n- `create_folder`: Create a new folder\n- `copy_item`: Copy a file or folder\n- `move_item`: Move or rename a file/folder\n\n### Metadata and Search\n\n- `get_file_metadata`: Get file/folder metadata\n- `search_file_db`: Search files and folders\n- `get_sharing_link`: Create sharing links\n- `get_file_content`: Get file contents\n\n### Account Operations\n\n- `get_account_info`: Get account information\n\n## Usage Examples\n\n```typescript\n// List files in root directory\nawait mcp.useTool(\"dbx-mcp-server\", \"list_files\", { path: \"\" });\n\n// Upload a file\nawait mcp.useTool(\"dbx-mcp-server\", \"upload_file\", {\n  path: \"/test.txt\",\n  content: Buffer.from(\"Hello World\").toString(\"base64\"),\n});\n\n// Search for files\nawait mcp.useTool(\"dbx-mcp-server\", \"search_file_db\", {\n  query: \"report\",\n  path: \"/Documents\",\n  max_results: 10,\n});\n```\n\n## Testing\n\nRun the test suite:\n\n```bash\nnpm test\n```\n\nTests verify all operations including authentication, file operations, and error handling.\n\n### Test Structure\n\nThe test suite is organized into several modules:\n\n- **Dropbox Operations**: Tests for basic file operations (upload, download, list, etc.)\n- **Account Operations**: Tests for accessing account information\n- **Search and Delete**: Tests for search functionality and safe deletion with recycle bin support\n- **Resource System**: Tests for the MCP resource system integration\n\n### Handling Test Data\n\nThe tests use dynamically generated file and folder names based on timestamps to avoid conflicts. Test data is automatically cleaned up after test execution.\n\n### Running Specific Tests\n\nTo run a specific test file or test group:\n\n```bash\nnpm test -- tests/dropbox/search-delete.test.ts  # Run specific test file\nnpm test -- -t \"should search for files\"        # Run tests matching description\n```\n\n### Troubleshooting Tests\n\nIf tests fail with timing or authentication issues:\n\n1. Check that the mock implementations in `tests/setup.ts` match your test expectations\n2. Ensure test helpers are correctly configured\n3. For Jest scope errors, avoid referencing imported variables in mock factory functions\n\n## Development\n\nBuilt with:\n\n- TypeScript\n- Model Context Protocol SDK\n- Dropbox SDK v10.34.0\n- Dropbox API v2\n\n## License\n\nMIT License\n\nCopyright (c) 2025 MCP Server Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n[![smithery badge](https://smithery.ai/badge/@Albiemark/dbx-mcp-server)](https://smithery.ai/server/@Albiemark/dbx-mcp-server)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "dropbox",
        "dbx",
        "files",
        "utilizing dropbox",
        "dropbox applications",
        "integrates dropbox"
      ],
      "category": "file-management"
    },
    "AlexanderVTr--cursor-mcp-file-organizer": {
      "owner": "AlexanderVTr",
      "name": "cursor-mcp-file-organizer",
      "url": "https://github.com/AlexanderVTr/cursor-mcp-file-organizer",
      "imageUrl": "/freedevtools/mcp/pfp/AlexanderVTr.webp",
      "description": "Automatically organizes files in the Downloads folder by type, enhancing productivity through configured organization rules and real-time file system monitoring. Supports multiple file categories, including images, documents, archives, code files, media files, design files, databases, and fonts.",
      "stars": 4,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-07-17T03:24:58Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/alexandervtr-cursor-mcp-file-organizer-badge.png)](https://mseep.ai/app/alexandervtr-cursor-mcp-file-organizer)\n\n# Cursor MCP File Organizer\n\nA Model Context Protocol (MCP) server for organizing files in your Downloads folder using Cursor IDE.\n\n## Features\n\n- Automatically organizes files in Downloads folder by type\n- Supports multiple file categories:\n  - Images (jpg, jpeg, png, gif, webp, svg, etc.)\n  - Documents (pdf, doc, docx, txt, etc.)\n  - Archives (zip, rar, 7z, tar, etc.)\n  - Code files (js, ts, py, java, etc.)\n  - Media files (mp4, mp3, wav, etc.)\n  - Design files (psd, ai, sketch, etc.)\n  - Databases (sql, sqlite, etc.)\n  - Fonts (ttf, otf, woff, etc.)\n- Configurable organization rules\n- Real-time file system monitoring\n- SSE (Server-Sent Events) support for live updates\n\n## Prerequisites\n\n- Node.js (v14 or higher)\n- TypeScript\n- Cursor IDE\n\n## Installation\n\n1. Clone the repository:\n\n```bash\ngit clone https://github.com/AlexanderVTr/cursor-mcp-file-organizer.git\ncd cursor-mcp-file-organizer\n```\n\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n3. Build the project:\n\n```bash\nnpm run build\n```\n\n## Configuration\n\n1. Configure Cursor IDE MCP settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"file-organizer\": {\n      \"url\": \"http://localhost:3001\",\n      \"port\": 3001,\n      \"enabled\": true,\n      \"description\": \"File organization MCP server\"\n    }\n  }\n}\n```\n\n2. Customize organization rules in `mcp-config.json`:\n\n```json\n{\n  \"version\": \"1.0\",\n  \"rules\": {\n    \"downloads\": {\n      \"path\": \"~/Downloads\",\n      \"organizeBy\": {\n        \"images\": {\n          \"extensions\": [\".jpg\", \".jpeg\", \".png\", \".gif\", \".webp\", \".svg\"],\n          \"destination\": \"~/Downloads/Pictures\"\n        }\n        // ... other categories\n      }\n    }\n  }\n}\n```\n\n## Usage\n\n1. Start the server:\n\n```bash\nnpm start\n```\n\n2. Use Cursor IDE to send commands:\n\n```typescript\n// Example command to organize files\n{\n  command: \"organizeFiles\",\n  args: {\n    path: \"~/Downloads\"\n  }\n}\n```\n\n## Available Commands\n\n- `listDir`: List directory contents\n- `readFile`: Read file contents\n- `writeFile`: Write content to file\n- `moveFile`: Move file to new location\n- `createDir`: Create directory\n- `organizeFiles`: Organize files by type\n\n## Development\n\n```bash\n# Run in development mode with hot reload\nnpm run dev\n\n# Build the project\nnpm run build\n\n# Start the server\nnpm start\n```\n\n## Project Structure\n\n```\ncursor-mcp-file-organizer/\n├── src/\n│   ├── server.ts      # Main server implementation\n│   └── organizer.ts   # File organization logic\n├── dist/             # Compiled JavaScript\n├── package.json      # Dependencies and scripts\n├── tsconfig.json     # TypeScript configuration\n└── mcp-config.json   # Organization rules\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgments\n\n- Cursor IDE team for the MCP protocol\n- Node.js community for the excellent tools and libraries\n\nCertified by MCP Review https://mcpreview.com/mcp-servers/alexandervtr/cursor-mcp-file-organizer\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "file",
        "organizer",
        "file organizer",
        "file management",
        "organizes files"
      ],
      "category": "file-management"
    },
    "DMontgomery40--meta-mcp-server": {
      "owner": "DMontgomery40",
      "name": "meta-mcp-server",
      "url": "https://github.com/DMontgomery40/meta-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/DMontgomery40.webp",
      "description": "Facilitates the creation and management of multiple customized MCP servers by automating file management and integrating various MCP tools. Provides robust error handling and debugging support for development environments.",
      "stars": 19,
      "forks": 5,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-16T13:10:49Z",
      "readme_content": "# Meta MCP Server\n\n\"Meta\" because it's an MCP Server that Creates MCP Servers. And also because \"suck it, Zuck, I got it first\" (seriously though I made that connection after the fact).\n\n## Features \n\nAI (poorly) Created Content:\n\n- **Dynamic Server Generation**: Allows for the creation of customized MCP servers by specifying directories and files to be created.\n- **Automated File Management**: Handles the creation of necessary directories and files for new servers automatically.\n- **MCP Tool Integration**: Utilizes the Model Context Protocol SDK to manage tools and resources efficiently.\n- **Error Handling**: Robust error management to ensure stability even when facing invalid inputs or system errors.\n- **Debugging Support**: Detailed logging and system prompts to aid in debugging and operational transparency.\n\n\n### Configure in Claude Desktop\n\n``` \n  },\n    \"meta-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"meta-mcp-server\"]\n    }\n  }\n```\n\nSecurity\nThis server does not implement advanced security measures and is intended for development purposes only. Ensure that it is operated in a secure environment, and consider implementing additional authentication and validation mechanisms for production use.\n\n## Support\nFor support, feature requests, or to report bugs, please open an issue on the GitHub repository page.\n\n## License\nMIT License\n\nCopyright (c) 2024 David Montgomery\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "server",
        "servers",
        "mcp server",
        "mcp servers",
        "mcp tools"
      ],
      "category": "file-management"
    },
    "JoshuaRileyDev--mac-apps-launcher": {
      "owner": "JoshuaRileyDev",
      "name": "mac-apps-launcher",
      "url": "https://github.com/JoshuaRileyDev/mac-apps-launcher",
      "imageUrl": "/freedevtools/mcp/pfp/JoshuaRileyDev.webp",
      "description": "MCP server for launching and managing applications on macOS, capable of listing applications installed in the `/Applications` folder and launching them by name or opening specific files with designated applications.",
      "stars": 16,
      "forks": 8,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-10-02T03:03:22Z",
      "readme_content": "# Mac Apps Launcher MCP Server\n\nA Model Context Protocol (MCP) server for launching and managing macOS applications.\n\n## Features\n\n- List all applications installed in the `/Applications` folder\n- Launch applications by name\n- Open files with specific applications\n\n## Installation\nAdd the following to your Claude Config JSON file\n```\n{\n  \"mcpServers\": {\n    \"simulator\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"y\",\n        \"@joshuarileydev/mac-apps-launcher-mcp-server\"\n      ]\n    }\n  }\n}\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "macos",
        "mac",
        "applications",
        "applications macos",
        "mac apps",
        "launcher mcp"
      ],
      "category": "file-management"
    },
    "LaubPlusCo--mcp-webdav-server": {
      "owner": "LaubPlusCo",
      "name": "mcp-webdav-server",
      "url": "https://github.com/LaubPlusCo/mcp-webdav-server",
      "imageUrl": "/freedevtools/mcp/pfp/LaubPlusCo.webp",
      "description": "Enable natural language interaction with WebDAV file systems to perform CRUD operations on files and directories through a secure and configurable MCP server. Supports connections with optional authentication and efficient management of file operations via multiple transport methods.",
      "stars": 9,
      "forks": 7,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-22T11:13:16Z",
      "readme_content": "# WebDAV MCP Server\n\nA Model Context Protocol (MCP) server that enables CRUD operations on a WebDAV endpoint with basic authentication. This server enables Claude Desktop and other MCP clients to interact with WebDAV file systems through natural language commands.\n\n## Features\n\n- Connect to any WebDAV server with optional authentication\n- Perform CRUD operations on files and directories\n- Expose file operations as MCP resources and tools\n- Run via stdio transport (for Claude Desktop integration) or HTTP/SSE transport\n- Secure access with optional basic authentication\n- Support for bcrypt-encrypted passwords for MCP server authentication (WebDAV passwords must be plain text due to protocol limitations)\n- Connection pooling for better performance with WebDAV servers\n- Configuration validation using Zod\n- Structured logging for better troubleshooting\n\n## Prerequisites\n\n- Node.js 18 or later\n- npm or yarn\n- WebDAV server (for actual file operations)\n\n## Installation\n\n### Option 1: Install from npm package\n\n```bash\n# Global installation\nnpm install -g webdav-mcp-server\n\n# Or with npx\nnpx webdav-mcp-server\n```\n\n### Option 2: Clone and build from source\n\n```bash\n# Clone repository\ngit clone https://github.com/yourusername/webdav-mcp-server.git\ncd webdav-mcp-server\n\n# Install dependencies\nnpm install\n\n# Build the application\nnpm run build\n```\n\n### Option 3: Docker\n\n```bash\n# Build the Docker image\ndocker build -t webdav-mcp-server .\n\n# Run the container without authentication\ndocker run -p 3000:3000 \\\n  -e WEBDAV_ROOT_URL=http://your-webdav-server \\\n  -e WEBDAV_ROOT_PATH=/webdav \\\n  webdav-mcp-server\n  \n# Run the container with authentication for both WebDAV and MCP server\ndocker run -p 3000:3000 \\\n  -e WEBDAV_ROOT_URL=http://your-webdav-server \\\n  -e WEBDAV_ROOT_PATH=/webdav \\\n  -e WEBDAV_AUTH_ENABLED=true \\\n  -e WEBDAV_USERNAME=admin \\\n  -e WEBDAV_PASSWORD=password \\\n  -e AUTH_ENABLED=true \\\n  -e AUTH_USERNAME=user \\\n  -e AUTH_PASSWORD=pass \\\n  webdav-mcp-server\n```\n\n## Configuration\n\nCreate a `.env` file in the root directory with the following variables:\n\n```env\n# WebDAV configuration\nWEBDAV_ROOT_URL=http://localhost:4080\nWEBDAV_ROOT_PATH=/webdav\n\n# WebDAV authentication (optional)\nWEBDAV_AUTH_ENABLED=true\nWEBDAV_USERNAME=admin\n\n# WebDAV password must be plain text (required when auth enabled)\n# The WebDAV protocol requires sending the actual password to the server\nWEBDAV_PASSWORD=password\n\n# Server configuration (for HTTP mode)\nSERVER_PORT=3000\n\n# Authentication configuration for MCP server (optional)\nAUTH_ENABLED=true\nAUTH_USERNAME=user\nAUTH_PASSWORD=pass\nAUTH_REALM=MCP WebDAV Server\n\n# Auth password for MCP server can be a bcrypt hash (unlike WebDAV passwords)\n# AUTH_PASSWORD={bcrypt}$2y$10$CyLKnUwn9fqqKQFEbxpZFuE9mzWR/x8t6TE7.CgAN0oT8I/5jKJBy\n```\n\n### Encrypted Passwords for MCP Server Authentication\n\nFor enhanced security of the MCP server (not WebDAV connections), you can use bcrypt-encrypted passwords instead of storing them in plain text:\n\n1. Generate a bcrypt hash:\n   ```bash\n   # Using the built-in utility\n   npm run generate-hash -- yourpassword\n   \n   # Or with npx\n   npx webdav-mcp-generate-hash yourpassword\n   ```\n\n2. Add the hash to your .env file with the {bcrypt} prefix:\n   ```\n   AUTH_PASSWORD={bcrypt}$2y$10$CyLKnUwn9fqqKQFEbxpZFuE9mzWR/x8t6TE7.CgAN0oT8I/5jKJBy\n   ```\n\nThis way, your MCP server password is stored securely. Note that WebDAV passwords must always be in plain text due to protocol requirements.\n\n## Usage\n\n### Running with stdio transport\n\nThis mode is ideal for direct integration with Claude Desktop.\n\n```bash\n# If installed globally\nwebdav-mcp-server\n\n# If using npx\nnpx webdav-mcp-server\n\n# If built from source\nnode dist/index.js\n```\n\n### Running with HTTP/SSE transport\n\nThis mode enables the server to be accessed over HTTP with Server-Sent Events for real-time communication.\n\n```bash\n# If installed globally\nwebdav-mcp-server --http\n\n# If using npx\nnpx webdav-mcp-server --http\n\n# If built from source\nnode dist/index.js --http\n```\n\n## Quick Start with Docker Compose\n\nThe easiest way to get started with both the WebDAV server and the MCP server is to use Docker Compose:\n\n```bash\n# Start both WebDAV and MCP servers\ncd docker\ndocker-compose up -d\n\n# This will start:\n# - hacdias/webdav server on port 4080 (username: admin, password: admin)\n# - MCP server on port 3000 (username: user, password: pass)\n```\n\nThis setup uses [hacdias/webdav](https://github.com/hacdias/webdav), a simple and standalone WebDAV server written in Go. The configuration for the WebDAV server is stored in `webdav_config.yml`, which you can modify to adjust permissions, add users, or change other settings.\n\nThe WebDAV server stores all files in a Docker volume called `webdav_data`, which persists across container restarts.\n\n## WebDAV Server Configuration\n\nThe `webdav_config.yml` file configures the hacdias/webdav server used in the Docker Compose setup. Here's what you can customize:\n\n```yaml\n# Server address and port\naddress: 0.0.0.0\nport: 6060\n\n# Root data directory\ndirectory: /data\n\n# Enable/disable CORS\ncors:\n  enabled: true\n  # Additional CORS settings...\n\n# Default permissions (C=Create, R=Read, U=Update, D=Delete)\npermissions: CRUD\n\n# User definitions\nusers:\n  - username: admin\n    password: admin      # Plain text password\n    permissions: CRUD    # Full permissions\n  \n  - username: reader\n    password: reader\n    permissions: R       # Read-only permissions\n    \n  # You can also use bcrypt-encrypted passwords\n  - username: secure\n    password: \"{bcrypt}$2y$10$zEP6oofmXFeHaeMfBNLnP.DO8m.H.Mwhd24/TOX2MWLxAExXi4qgi\"\n```\n\nFor more advanced configuration options, refer to the [hacdias/webdav documentation](https://github.com/hacdias/webdav).\n\n## Testing\n\nTo run the tests:\n\n```bash\nnpm test\n```\n\n## Integrating with Claude Desktop\n\n1. Ensure the MCP feature is enabled in Claude Desktop\n\n<details>\n<summary>Using npx</summary>\n2. Open Claude Desktop settings and click edit config (`claude_desktop_config.json`)\n3. Add\n```json\n{\n    \"mcpServers\": {\n        \"webdav\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"-y\",\n                \"webdav-mcp-server\"\n            ],\n            \"env\": {\n                \"WEBDAV_ROOT_URL\": \"<WEBDAV_ROOT_URL>\",\n                \"WEBDAV_ROOT_PATH\": \"<WEBDAV_ROOT_PATH>\",\n                \"WEBDAV_USERNAME\": \"<WEBDAV_USERNAME>\",\n                \"WEBDAV_PASSWORD\": \"<WEBDAV_PASSWORD>\",\n                \"WEBDAV_AUTH_ENABLED\": \"true|false\"\n            }\n        }\n    }\n}\n```\n</details>\n<details>\n<summary>Using node and local build</summary>\n2. Clone this repository and run `setup.sh` on mac/linux or `setup.bat` on windows\n3. Open Claude Desktop settings and click edit config (`claude_desktop_config.json`)\n4. Add\n```json\n{\n    \"mcpServers\": {\n        \"webdav\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"<path to repository>/dist/index.js\"\n            ],\n            \"env\": {\n                \"WEBDAV_ROOT_URL\": \"<WEBDAV_ROOT_URL>\",\n                \"WEBDAV_ROOT_PATH\": \"<WEBDAV_ROOT_PATH>\",\n                \"WEBDAV_USERNAME\": \"<WEBDAV_USERNAME>\",\n                \"WEBDAV_PASSWORD\": \"<WEBDAV_PASSWORD>\",\n                \"WEBDAV_AUTH_ENABLED\": \"true|false\"\n            }\n        }\n    }\n}\n```\n</details>\n\n## Available MCP Resources\n\n- `webdav://{path}/list` - List files in a directory\n- `webdav://{path}/content` - Get file content\n- `webdav://{path}/info` - Get file or directory information\n\n## Available MCP Tools\n\n- `webdav_create_remote_file` - Create a new file on a remote WebDAV server\n- `webdav_get_remote_file` - Retrieve content from a file stored on a remote WebDAV server\n- `webdav_update_remote_file` - Update an existing file on a remote WebDAV server\n- `webdav_delete_remote_item` - Delete a file or directory from a remote WebDAV server\n- `webdav_create_remote_directory` - Create a new directory on a remote WebDAV server\n- `webdav_move_remote_item` - Move or rename a file/directory on a remote WebDAV server\n- `webdav_copy_remote_item` - Copy a file/directory to a new location on a remote WebDAV server\n- `webdav_list_remote_directory` - List files and directories on a remote WebDAV server\n\n## Available MCP Prompts\n\n- `webdav_create_remote_file` - Prompt to create a new file on a remote WebDAV server\n- `webdav_get_remote_file` - Prompt to retrieve content from a remote WebDAV file\n- `webdav_update_remote_file` - Prompt to update a file on a remote WebDAV server\n- `webdav_delete_remote_item` - Prompt to delete a file/directory from a remote WebDAV server\n- `webdav_list_remote_directory` - Prompt to list directory contents on a remote WebDAV server\n- `webdav_create_remote_directory` - Prompt to create a directory on a remote WebDAV server\n- `webdav_move_remote_item` - Prompt to move/rename a file/directory on a remote WebDAV server\n- `webdav_copy_remote_item` - Prompt to copy a file/directory on a remote WebDAV server\n\n## Example Queries in Claude\n\nHere are some example queries you can use in Claude Desktop once the WebDAV MCP server is connected:\n\n- \"List files on my remote WebDAV server\"\n- \"Create a new text file called notes.txt on my remote WebDAV server with the following content: Hello World\"\n- \"Get the content of document.txt from my remote WebDAV server\"\n- \"Update config.json on my remote WebDAV server with this new configuration\"\n- \"Create a directory called projects on my remote WebDAV server\"\n- \"Copy report.docx to a backup location on my remote WebDAV server\"\n- \"Move the file old_name.txt to new_name.txt on my remote WebDAV server\"\n- \"Delete temp.txt from my remote WebDAV server\"\n\n## Programmatic Usage\n\nYou can also use this package programmatically in your own projects:\n\n```javascript\nimport { startWebDAVServer } from 'webdav-mcp-server';\n\n// For stdio transport without authentication\nawait startWebDAVServer({\n  webdavConfig: {\n    rootUrl: 'http://your-webdav-server',\n    rootPath: '/webdav',\n    authEnabled: false\n  },\n  useHttp: false\n});\n\n// For stdio transport with WebDAV authentication (password must be plain text)\nawait startWebDAVServer({\n  webdavConfig: {\n    rootUrl: 'http://your-webdav-server',\n    rootPath: '/webdav',\n    authEnabled: true,\n    username: 'admin',\n    password: 'password'\n  },\n  useHttp: false\n});\n\n// With bcrypt hash for MCP server password (HTTP auth only)\nawait startWebDAVServer({\n  webdavConfig: {\n    rootUrl: 'http://your-webdav-server',\n    rootPath: '/webdav',\n    authEnabled: true,\n    username: 'admin',\n    password: 'password' // WebDAV password must be plain text\n  },\n  useHttp: true,\n  httpConfig: {\n    port: 3000,\n    auth: {\n      enabled: true,\n      username: 'user',\n      password: '{bcrypt}$2y$10$CyLKnUwn9fqqKQFEbxpZFuE9mzWR/x8t6TE7.CgAN0oT8I/5jKJBy'\n    }\n  }\n});\n\n// For HTTP transport with MCP authentication\nawait startWebDAVServer({\n  webdavConfig: {\n    rootUrl: 'http://your-webdav-server',\n    rootPath: '/webdav',\n    authEnabled: true,\n    username: 'admin',\n    password: 'password'\n  },\n  useHttp: true,\n  httpConfig: {\n    port: 3000,\n    auth: {\n      enabled: true,\n      username: 'user',\n      password: 'pass',\n      realm: 'MCP WebDAV Server'\n    }\n  }\n});\n\n// For HTTP transport without authentication\nawait startWebDAVServer({\n  webdavConfig: {\n    rootUrl: 'http://your-webdav-server',\n    rootPath: '/webdav',\n    authEnabled: false\n  },\n  useHttp: true,\n  httpConfig: {\n    port: 3000,\n    auth: {\n      enabled: false\n    }\n  }\n});\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "webdav",
        "files",
        "file",
        "mcp webdav",
        "webdav server",
        "webdav file"
      ],
      "category": "file-management"
    },
    "Legaltime--filesystem": {
      "owner": "Legaltime",
      "name": "filesystem",
      "url": "https://github.com/Legaltime/filesystem",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Manage files and directories, enabling operations such as reading, writing, and editing files, as well as creating, listing, and deleting directories. Perform searches for files and retrieve file metadata within specified directories.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "filesystem",
        "directories",
        "file management",
        "filesystem manage",
        "legaltime filesystem"
      ],
      "category": "file-management"
    },
    "MaheshDoiphode--mcp-cline-project-content-server": {
      "owner": "MaheshDoiphode",
      "name": "mcp-cline-project-content-server",
      "url": "https://github.com/MaheshDoiphode/mcp-cline-project-content-server",
      "imageUrl": "/freedevtools/mcp/pfp/MaheshDoiphode.webp",
      "description": "Access project files and their contents from a specified directory, retrieving the latest data for projects stored in that location.",
      "stars": 6,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-03T22:33:57Z",
      "readme_content": "# Project Content Server\n\nAn MCP server that provides access to project files and their contents.\n\n<a href=\"https://glama.ai/mcp/servers/qmqbqlz2c4\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/qmqbqlz2c4/badge\" alt=\"Project Content Server MCP server\" /></a>\n\n## Installation\n\n1. Clone the repository\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n\n## Usage\n\nStart the server:\n```bash\nnode build/index.js\n```\n\n### API\n\n#### latest_project_data\n\nGet all files and their contents from a project directory.\n\n**Parameters:**\n- `projectPath` (string): Path to the project directory\n\n**Example Request:**\n```json\n{\n  \"name\": \"latest_project_data\",\n  \"arguments\": {\n    \"projectPath\": \"/path/to/project\"\n  }\n}\n```\n\n**Example Response:**\n```json\n{\n  \"file1.txt\": \"Contents of file1\",\n  \"subdir/file2.js\": \"Contents of file2\"\n}\n```\n\n## Configuration\n\nThe server can be configured using environment variables:\n\n- `PORT`: Port to run the server on (default: stdio)\n\n## Error Handling\n\nThe server returns errors in the following format:\n```json\n{\n  \"content\": [{\n    \"type\": \"text\",\n    \"text\": \"Error message\"\n  }],\n  \"isError\": true\n}\n```\n\nCommon errors include:\n- Invalid project path\n- Permission denied errors\n- File system errors\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "mcp",
        "directory",
        "projects stored",
        "mcp cline",
        "project files"
      ],
      "category": "file-management"
    },
    "MartinSchlott--BetterMCPFileServer": {
      "owner": "MartinSchlott",
      "name": "BetterMCPFileServer",
      "url": "https://github.com/MartinSchlott/BetterMCPFileServer",
      "imageUrl": "/freedevtools/mcp/pfp/MartinSchlott.webp",
      "description": "A privacy-preserving server that simplifies AI model interactions with filesystems through an intuitive API, ensuring sensitive paths remain concealed while providing efficient file operations. Supports streamlined directory listings and complex file searches with minimized functions.",
      "stars": 1,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-12T22:19:02Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/mseep-audited.png)](https://mseep.ai/app/martinschlott-bettermcpfileserver)\n\n# BetterMCPFileServer\n\n> A reimagined Model Context Protocol (MCP) server for filesystem access with privacy-preserving path aliases and an optimized LLM-friendly API.\n\n## Why BetterMCPFileServer?\n\nThe original MCP file server was functional but not optimized for how LLMs actually interact with filesystems. This project delivers a complete redesign focused on simplicity, privacy, and efficiency.\n\n\n### Key Innovations\n\n- **Path Aliasing System** - Protects privacy by hiding full system paths\n- **LLM-Optimized Interface** - Reduced from 11 to 6 functions while maintaining full capability\n- **Smarter Search** - One unified tool for directory listings and complex file searches\n- **Privacy-First Design** - No more exposing usernames or system paths to AI models\n\n## Quick Start\n\n```bash\n# Install from source (npm package coming soon)\ngit clone https://github.com/martinschlott/BetterMCPFileServer.git\ncd BetterMCPFileServer\nnpm install\nnpm run build\n\n# Run with aliases\nBetterMCPFileServer code:~/projects docs:~/documents\n```\n\nThat's it! Now Claude can access your files through privacy-preserving aliases like `code/src/main.js` instead of `/Users/yourusername/projects/src/main.js`.\n\n## Path Aliasing System\n\nTraditional file servers expose full system paths:\n```\n/home/martin/Documents/PrivateProject/financial-data.txt\n```\n\nOur aliasing system keeps your privacy intact:\n```\nprojects/financial-data.txt\n```\n\nBenefits:\n- **Privacy Protection**: No usernames or sensitive directory names exposed\n- **Simplification**: LLMs work with clean, logical paths\n- **Security**: Strict boundaries for filesystem access\n\n## API Design Rationale\n\n### Redesigning the MCP File Server Interface\n\nThis project represents a significant redesign of the standard MCP file server interface. While the original implementation provided a functional foundation, we identified several areas for improvement to create a more intuitive, efficient, and LLM-friendly interface.\n\n### Key Improvements\n\n#### 1. Intuitive Function Naming\n\nThe original interface used snake_case naming with basic verbs like `read_file` and `write_file`. We've adopted more idiomatic camelCase naming with clearer, more specific function names:\n\n- `read_file` → `readFileContent`\n- `write_file` → `writeFile`\n- `list_directory` → `searchFilesAndFolders` (with pattern=\"*\")\n\nThese names explicitly communicate their purpose and follow standard programming conventions, making them more intuitive for both AI models and human developers.\n\n#### 2. Grouped Functionality for Reduced Complexity\n\nInstead of having separate functions for each individual file or directory operation, we've consolidated related operations:\n\n- `manageFile` with an `action` parameter replaces separate `move_file`, `copy_file`, and `delete_file` functions\n- `manageFolder` handles folder creation, renaming, and deletion in one function\n\nThis approach reduces API surface area while increasing flexibility, making it easier for LLMs to understand the complete range of available operations.\n\n#### 3. Concise, Purposeful Descriptions\n\nThe original interface included lengthy descriptions with redundant information, such as repeatedly stating \"Only works within allowed directories\" for each function. Our redesigned API features concise descriptions that:\n\n- Focus on what the function does\n- Avoid stating the obvious\n- Highlight distinctive capabilities\n- Eliminate marketing-style language that doesn't provide technical value\n\n#### 4. Path Aliasing System\n\nOne of the most significant improvements is our path aliasing system. The original approach required:\n- Specifying full allowed directories at startup\n- LLMs to use complete, absolute paths in every request\n- Exposing potentially sensitive information in directory paths (like usernames)\n\nOur new approach maps aliases to real paths:\n\n```\n~/Documents/MyProjects → projects\n~/Documents/Letters → letters\n```\n\nBenefits include:\n- LLMs work with simple, logical paths (`projects/backend` instead of `/home/username/Documents/MyProjects/backend`)\n- Privacy is enhanced by hiding actual paths containing usernames or sensitive directory structures\n- System configuration can change without impacting how LLMs interact with the server\n\n#### 5. More Efficient Combined Operations\n\nWe've added strategic combined operations to reduce round-trips and simplify common tasks:\n\n- `searchFilesAndFolders` with improved description and `includeMetadata` option completely replaces the need for a separate `readFolderContent` function\n- `editFile` retains the useful targeted text replacement functionality from the original implementation but with a clearer parameter structure\n\nA key achievement of this redesign is reducing the number of tools from 11 to 6 while maintaining full functionality. This simplification:\n- Makes the API easier to learn and remember\n- Reduces the cognitive load for LLMs when choosing appropriate tools\n- Minimizes redundancy between operations\n\n### Design Philosophy\n\nThis redesign follows several core principles:\n\n1. **AI-First Interface**: Optimized for LLM consumption and usage patterns\n2. **Minimal Cognitive Load**: Reduced number of functions with consistent naming and behavior\n3. **Information Hiding**: Abstracted implementation details that don't benefit the consumer\n4. **Progressive Disclosure**: Simple operations are simple, advanced features are available when needed\n\n## Optimized Search Functionality\n\nOur redesigned search function is both powerful and easy to use:\n\n```\nsearchFilesAndFolders({\n  pattern: \"**/*.js\",                   // Find all JavaScript files\n  includeMetadata: true,                // Include file sizes and dates (use sparingly)\n  ignore: [\"node_modules\", \"*.min.js\"]  // Skip unwanted matches\n})\n```\n\nKey patterns:\n- `\"*\"` - List top-level items (like a simple directory listing)\n- `\"projects/*.js\"` - All JavaScript files in the projects directory\n- `\"**/*.md\"` - All markdown files recursively across all directories\n\n⚠️ **Pro Tip:** Only set `includeMetadata: true` when you specifically need file sizes or dates to keep responses efficient.\n\n## API Reference\n\nThe BetterMCPFileServer exposes just 6 powerful functions that handle all filesystem operations:\n\n### 1. `writeFile`\nCreate or update a file with the given content.\n```javascript\nwriteFile({\n  filePath: \"projects/README.md\",\n  content: \"# My Project\\n\\nThis is a readme file.\"\n})\n```\n\n### 2. `readFileContent`\nRead the contents of a file.\n```javascript\nreadFileContent({\n  filePath: \"projects/README.md\"\n})\n```\n\n### 3. `editFile`\nMake targeted changes to specific portions of a file.\n```javascript\neditFile({\n  filePath: \"projects/README.md\",\n  edits: [\n    {\n      oldText: \"# My Project\",\n      newText: \"# Awesome Project\"\n    }\n  ],\n  dryRun: false\n})\n```\n\n### 4. `manageFile`\nPerform actions like move, rename, copy, or delete a file.\n```javascript\nmanageFile({\n  action: \"move\",\n  filePath: \"projects/old.js\",\n  newFilePath: \"projects/new.js\"\n})\n```\n\n### 5. `manageFolder`\nCreate, rename, or delete a folder.\n```javascript\nmanageFolder({\n  action: \"create\",\n  folderPath: \"projects/new-directory\"\n})\n```\n\n### 6. `searchFilesAndFolders`\nSearch for files and folders using glob patterns.\n```javascript\nsearchFilesAndFolders({\n  pattern: \"projects/**/*.ts\",\n  includeMetadata: false\n})\n```\n\n## Usage Examples\n\n### Working with the Virtual Root\n\n```javascript\n// List all available aliases\nsearchFilesAndFolders({ pattern: \"*\" })\n\n// Result:\n[\n  { path: \"projects\", type: \"directory\" },\n  { path: \"docs\", type: \"directory\" }\n]\n```\n\n### Basic File Operations\n\n```javascript\n// Read a file\nconst content = await readFileContent({ filePath: \"projects/README.md\" });\n\n// Write a file\nawait writeFile({\n  filePath: \"projects/notes.txt\",\n  content: \"Important meeting notes.\"\n});\n\n// Edit a file\nawait editFile({\n  filePath: \"projects/config.json\",\n  edits: [\n    {\n      oldText: '\"version\": \"1.0.0\"',\n      newText: '\"version\": \"1.0.1\"'\n    }\n  ]\n});\n```\n\n### Directory Operations\n\n```javascript\n// Create a new directory\nawait manageFolder({\n  action: \"create\",\n  folderPath: \"projects/new-feature\"\n});\n\n// List directory contents\nconst files = await searchFilesAndFolders({\n  pattern: \"projects/src/*\"\n});\n```\n\n## Installation\n\n```bash\n# From npm (coming soon)\nnpm install -g BetterMCPFileServer  # Not yet available\n\n# From source (current method)\ngit clone https://github.com/martinschlott/BetterMCPFileServer.git\ncd BetterMCPFileServer\nnpm install\nnpm run build\nnpm link  # Optional, makes command available globally\n```\n\n## Usage\n\nStart the server with at least one alias:directory pair:\n\n```bash\nBetterMCPFileServer alias:directory [alias2:directory2 ...]\n```\n\nExamples:\n\n```bash\n# Single directory\nBetterMCPFileServer code:~/projects\n\n# Multiple directories\nBetterMCPFileServer code:~/Development docs:~/Documents/Technical notes:~/Notes\n```\n\n## Advanced Configuration\n\nCreate a simple shell script for consistent configuration:\n\n```bash\n#!/bin/bash\n# start-server.sh\nBetterMCPFileServer \\\n  code:~/Development/MyProjects \\\n  docs:~/Documents/Technical \\\n  data:~/Data/Samples \\\n  config:~/Configuration\n```\n\n## Troubleshooting\n\n- **Error: Invalid alias:path format**: Ensure each parameter uses the format `alias:directory`\n- **Error: Directory doesn't exist**: The specified directory must exist\n- **Access denied error**: Attempted access outside allowed directories\n- **Unknown alias**: The referenced alias wasn't defined at server startup\n\n## Credits\n\nThis project was a collaboration between Martin Schlott (concept and design) and AI assistants:\n- Claude 3.7 Sonnet (API design consultation and documentation)\n- Cursor AI (implementation)\n\n*README crafted by Claude 3.7 Sonnet*\n\n## License\n\nMIT License",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystems",
        "bettermcpfileserver",
        "privacy",
        "file management",
        "bettermcpfileserver privacy",
        "martinschlott bettermcpfileserver"
      ],
      "category": "file-management"
    },
    "MrGNSS--ClaudeDesktopCommander": {
      "owner": "MrGNSS",
      "name": "ClaudeDesktopCommander",
      "url": "https://github.com/MrGNSS/ClaudeDesktopCommander",
      "imageUrl": "/freedevtools/mcp/pfp/MrGNSS.webp",
      "description": "Execute terminal commands and manage processes while offering file editing capabilities with real-time command output streaming.",
      "stars": 6,
      "forks": 2,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-10-01T14:24:25Z",
      "readme_content": "# Desktop Commander MCP\n\n\n[![npm downloads](https://img.shields.io/npm/dw/@wonderwhy-er/desktop-commander)](https://www.npmjs.com/package/@wonderwhy-er/desktop-commander)\n[![smithery badge](https://smithery.ai/badge/@wonderwhy-er/desktop-commander)](https://smithery.ai/server/@wonderwhy-er/desktop-commander)\n[![Buy Me A Coffee](https://img.shields.io/badge/Buy%20Me%20A%20Coffee-support-yellow.svg)](https://www.buymeacoffee.com/wonderwhyer)\n[![Discord](https://img.shields.io/badge/Discord-Join%20Server-7289DA.svg)](https://discord.gg/7cbccwRp)\n\nShort version. Two key things. Terminal commands and diff based file editing.\n\n<a href=\"https://glama.ai/mcp/servers/zempur9oh4\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/zempur9oh4/badge\" alt=\"Claude Desktop Commander MCP server\" />\n</a>\n\n## Table of Contents\n- [Features](#features)\n- [Installation](#installation)\n- [Usage](#usage)\n- [Handling Long-Running Commands](#handling-long-running-commands)\n- [Work in Progress and TODOs](#work-in-progress-and-todos)\n- [Media links](#media)\n- [Testimonials](#testimonials)\n- [Contributing](#contributing)\n- [License](#license)\n\nThis is server that allows Claude desktop app to execute long-running terminal commands on your computer and manage processes through Model Context Protocol (MCP) + Built on top of [MCP Filesystem Server](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem) to provide additional search and replace file editing capabilities .\n\n## Features\n\n- Execute terminal commands with output streaming\n- Command timeout and background execution support\n- Process management (list and kill processes)\n- Session management for long-running commands\n- Full filesystem operations:\n  - Read/write files\n  - Create/list directories\n  - Move files/directories\n  - Search files\n  - Get file metadata\n  - Code editing capabilities:\n  - Surgical text replacements for small changes\n  - Full file rewrites for major changes\n  - Multiple file support\n  - Pattern-based replacements\n\n## Installation\nFirst, ensure you've downloaded and installed the [Claude Desktop app](https://claude.ai/download) and you have [npm installed](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm).\n\n### Option 1: Installing via Smithery\n\nTo install Desktop Commander for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@wonderwhy-er/desktop-commander):\n\n```bash\nnpx -y @smithery/cli install @wonderwhy-er/desktop-commander --client claude\n```\n\n### Option 2: Install trough npx\nJust run this in terminal\n```\nnpx @wonderwhy-er/desktop-commander setup\n```\nRestart Claude if running\n\n### Option 3: Add to claude_desktop_config by hand\nAdd this entry to your claude_desktop_config.json (on Mac, found at ~/Library/Application\\ Support/Claude/claude_desktop_config.json):\n```json\n{\n  \"mcpServers\": {\n    \"desktop-commander\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@wonderwhy-er/desktop-commander\"\n      ]\n    }\n  }\n}\n```\nRestart Claude if running\n\n### Option 4: Checkout locally\n1. Clone and build:\n```bash\ngit clone https://github.com/wonderwhy-er/ClaudeComputerCommander.git\ncd ClaudeComputerCommander\nnpm run setup\n```\nRestart Claude if running\n\nThe setup command will:\n- Install dependencies\n- Build the server\n- Configure Claude's desktop app\n- Add MCP servers to Claude's config if needed\n\n## Usage\n\nThe server provides these tool categories:\n\n### Terminal Tools\n- `execute_command`: Run commands with configurable timeout\n- `read_output`: Get output from long-running commands\n- `force_terminate`: Stop running command sessions\n- `list_sessions`: View active command sessions\n- `list_processes`: View system processes\n- `kill_process`: Terminate processes by PID\n- `block_command`/`unblock_command`: Manage command blacklist\n\n### Filesystem Tools\n- `read_file`/`write_file`: File operations\n- `create_directory`/`list_directory`: Directory management  \n- `move_file`: Move/rename files\n- `search_files`: Pattern-based file search\n- `get_file_info`: File metadata\n\n### Edit Tools\n- `edit_block`: Apply surgical text replacements (best for changes <20% of file size)\n- `write_file`: Complete file rewrites (best for large changes >20% or when edit_block fails)\n\nSearch/Replace Block Format:\n```\nfilepath.ext\n<<<<<<< SEARCH\nexisting code to replace\n=======\nnew code to insert\n>>>>>>> REPLACE\n```\n\nExample:\n```\nsrc/main.js\n<<<<<<< SEARCH\nconsole.log(\"old message\");\n=======\nconsole.log(\"new message\");\n>>>>>>> REPLACE\n```\n\n## Handling Long-Running Commands\n\nFor commands that may take a while:\n\n1. `execute_command` returns after timeout with initial output\n2. Command continues in background\n3. Use `read_output` with PID to get new output\n4. Use `force_terminate` to stop if needed\n\n## Model Context Protocol Integration\n\nThis project extends the MCP Filesystem Server to enable:\n- Local server support in Claude Desktop\n- Full system command execution\n- Process management\n- File operations\n- Code editing with search/replace blocks\n\nCreated as part of exploring Claude MCPs: https://youtube.com/live/TlbjFDbl5Us\n\n## Work in Progress and TODOs\n\nThe following features are currently being developed or planned:\n\n- **Better code search** ([in progress](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/17)) - Enhanced code exploration with context-aware results\n- **Better configurations** ([in progress](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/16)) - Improved settings for allowed paths, commands and shell environment\n- **Windows environment fixes** ([in progress](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/13)) - Resolving issues specific to Windows platforms\n- **Linux improvements** ([in progress](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/12)) - Enhancing compatibility with various Linux distributions\n- **Support for WSL** - Windows Subsystem for Linux integration\n- **Support for SSH** - Remote server command execution\n- **Installation troubleshooting guide** - Comprehensive help for setup issues\n\n## Media\nLearn more about this project through these resources:\n\n### Article\n[Claude with MCPs replaced Cursor & Windsurf. How did that happen?](https://wonderwhy-er.medium.com/claude-with-mcps-replaced-cursor-windsurf-how-did-that-happen-c1d1e2795e96) - A detailed exploration of how Claude with Model Context Protocol capabilities is changing developer workflows.\n\n### Video\n[Claude Desktop Commander Video Tutorial](https://www.youtube.com/watch?v=ly3bed99Dy8) - Watch how to set up and use the Commander effectively.\n\n### Community\nJoin our [Discord server](https://discord.gg/7cbccwRp) to get help, share feedback, and connect with other users.\n\n## Testimonials\n\n[ https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyyBt6_ShdDX_rIOad4AaABAg\n](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyyBt6_ShdDX_rIOad4AaABAg\n)\n\n[\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgztdHvDMqTb9jiqnf54AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgztdHvDMqTb9jiqnf54AaABAg\n)\n\n[\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=Ugy4-exy166_Ma7TH-h4AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=Ugy4-exy166_Ma7TH-h4AaABAg)\n\n## Contributing\n\nIf you find this project useful, please consider giving it a ⭐ star on GitHub! This helps others discover the project and encourages further development.\n\nWe welcome contributions from the community! Whether you've found a bug, have a feature request, or want to contribute code, here's how you can help:\n\n- **Found a bug?** Open an issue at [github.com/wonderwhy-er/ClaudeComputerCommander/issues](https://github.com/wonderwhy-er/ClaudeComputerCommander/issues)\n- **Have a feature idea?** Submit a feature request in the issues section\n- **Want to contribute code?** Fork the repository, create a branch, and submit a pull request\n- **Questions or discussions?** Start a discussion in the GitHub Discussions tab\n\nAll contributions, big or small, are greatly appreciated!\n\nIf you find this tool valuable for your workflow, please consider [supporting the project](https://www.buymeacoffee.com/wonderwhyer).\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "commands",
        "command",
        "file",
        "file management",
        "commands manage",
        "file editing"
      ],
      "category": "file-management"
    },
    "Sachin-Bhat--stela-mcp": {
      "owner": "Sachin-Bhat",
      "name": "stela-mcp",
      "url": "https://github.com/Sachin-Bhat/stela-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Sachin-Bhat.webp",
      "description": "Provides secure access to local system operations through a standardized API interface, enabling command execution, file management, and directory visualization.",
      "stars": 1,
      "forks": 1,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-04-17T07:34:42Z",
      "readme_content": "# STeLA MCP\n\n[![smithery badge](https://smithery.ai/badge/@Sachin-Bhat/stela-mcp)](https://smithery.ai/server/@Sachin-Bhat/stela-mcp)\n\n> A Python implementation of a Model Context Protocol server that provides secure access to local system operations via a standardized API interface.\n\nSTeLA (Simple Terminal Language Assistant) MCP is a lightweight server that provides secure access to local machine commands and file operations via a standardized API interface. It acts as a bridge between applications and your local system, implementing the Model Context Protocol (MCP) architecture.\n\n## Overview\n\nSTeLA MCP implements the Model Context Protocol (MCP) architecture to provide a secure, standardized way for applications to execute commands and perform file operations on a local machine. It serves as an intermediary layer that accepts requests through a well-defined API, executes operations in a controlled environment, and returns formatted results.\n\n## Features\n\n* **Command Execution**: Run shell commands on the local system with proper error handling\n* **File Operations**: Read, write, and manage files on the local system\n* **Directory Visualization**: Generate recursive tree views of file systems\n* **Working Directory Support**: Execute commands in specific directories\n* **Robust Error Handling**: Detailed error messages and validation\n* **Comprehensive Output**: Capture and return both stdout and stderr\n* **Simple Integration**: Standard I/O interface for easy integration with various clients\n* **Multi-Directory Support**: Configure multiple allowed directories for file operations\n* **Security-First Design**: Strict path validation and command execution controls\n* **File Search**: Search for files matching a pattern\n* **File Edit**: Make selective edits to a file\n* **Type Safety**: Strong type checking with Pydantic models for all tool inputs\n* **Path Validation**: Enhanced symlink and parent directory validation\n\n## Installation\n\n### Installing via Smithery\n\nTo install STeLA for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@Sachin-Bhat/stela-mcp):\n\n```bash\nnpx -y @smithery/cli install @Sachin-Bhat/stela-mcp --client claude\n```\n\n### Prerequisites\n\n* Python 3.10 - 3.12\n* pip or uv package manager\n* Pydantic v2.x\n\n### Installation Steps\n\n1. Clone the repository:\n```bash\ngit clone <repository-url>\ncd stela-mcp\n```\n\n2. Create and activate a virtual environment:\n```bash\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n```\n\n3. Install dependencies:\n```bash\npip install -e .\n```\n\n### Creating a Binary Distribution\n\nTo create a self-contained binary:\n\n1. Install PyInstaller:\n```bash\npip install pyinstaller\n```\n\n2. Create the binary:\n```bash\npyinstaller --onefile src/stella_mcp//server.py --name stela-mcp\n```\n\nThe binary will be created in the `dist` directory.\n\n## Configuration\n\nSTeLA MCP can be configured using environment variables:\n\n### Directory Access Control\n\n* `ALLOWED_DIRS` (Required): Comma-separated list of directories where file operations are allowed\n  * Example: `/home/user/project,/home/user/docs`\n  * Default: Current working directory if not specified\n  * Note: All paths must be absolute\n\n* `ALLOWED_DIR` (Optional): Primary directory for command execution context\n  * Example: `/home/user/project`\n  * Default: First directory from `ALLOWED_DIRS` or current working directory\n  * Note: This is separate from `ALLOWED_DIRS` and controls command execution context\n\n### Command Execution Security\n\n* `ALLOWED_COMMANDS` (Optional): Comma-separated list of allowed shell commands\n  * Example: `ls,cat,pwd,echo`\n  * Default: `ls,cat,pwd,echo`\n  * Special value: `all` to allow any command (not recommended)\n\n* `ALLOWED_FLAGS` (Optional): Comma-separated list of allowed command flags\n  * Example: `-l,-a,-h,--help`\n  * Default: `-l,-a,-h,--help`\n  * Special value: `all` to allow any flag (not recommended)\n\n* `MAX_COMMAND_LENGTH` (Optional): Maximum length of command strings\n  * Example: `1024`\n  * Default: `1024`\n  * Note: Prevents command injection via overly long strings\n\n* `COMMAND_TIMEOUT` (Optional): Maximum execution time for commands in seconds\n  * Example: `60`\n  * Default: `60`\n  * Note: Prevents hanging commands\n\n### Example Configuration\n\n```bash\n# Directory access\nexport ALLOWED_DIRS=\"/home/user/project,/home/user/docs\"\nexport ALLOWED_DIR=\"/home/user/project\"\n\n# Command execution\nexport ALLOWED_COMMANDS=\"ls,cat,pwd,echo\"\nexport ALLOWED_FLAGS=\"-l,-a,-h,--help\"\nexport MAX_COMMAND_LENGTH=1024\nexport COMMAND_TIMEOUT=60\n```\n\n## Project Structure\n\n```\nstela-mcp/\n├── src/\n│   ├── stela_mcp/\n│   │   ├── __init__.py\n│   │   ├── shell.py        # Shell command execution\n│   │   ├── filesystem.py   # File system operations\n│   │   └── security.py     # Security configuration\n│   └── server.py           # Main server implementation\n├── pyproject.toml          # Project configuration\n└── README.md\n```\n\n## Usage\n\n### Starting the Server\n\nRun the server using:\n```bash\nuv run python -m src.stella_mcp.server\n```\n\nThe server will start and listen for connections through standard I/O.\n\n### Using with Claude Desktop\n\nTo use STeLA MCP with Claude Desktop:\n\n1. Option 1: Using Python directly\n   - Start the server using:\n     ```bash\n     uv run python -m src.stela_mcp.server\n     ```\n   - In Claude Desktop:\n     - Go to Settings\n     - Under \"Tools\", click \"Add Tool\"\n     - Select \"MCP Server\"\n     - Enter the following configuration:\n       - **Name**: STeLA MCP\n       - **Path**: The absolute path to your Python executable (e.g., `/home/username/.venv/bin/python`)\n       - **Arguments**: `-m src.stela_mcp.server`\n       - **Working Directory**: The path to your STeLA MCP project directory\n\n2. Option 2: Using the binary\n   - Copy the binary from `dist/stela-mcp` to a location in your PATH\n   - In Claude Desktop:\n     - Go to Settings\n     - Under \"Tools\", click \"Add Tool\"\n     - Select \"MCP Server\"\n     - Enter the following configuration:\n       - **Name**: STeLA MCP\n       - **Path**: The absolute path to the binary (e.g., `/usr/local/bin/stela-mcp`)\n       - **Arguments**: (leave empty)\n       - **Working Directory**: (leave empty)\n\n3. Once configured, you can use STeLA MCP tools in your conversations with Claude. For example:\n   - \"Show me the contents of my home directory\"\n   - \"Create a new file called 'test.txt' with some content\"\n   - \"Run the command 'ls -la' in my current directory\"\n\n4. Claude will automatically use the appropriate tools based on your requests and display the results in the conversation.\n\n### Available Tools\n\n#### Command Tools\n\n##### execute_command\nExecutes shell commands on the local system.\n\n**Parameters:**\n* `command` (string, required): The shell command to execute\n* `working_dir` (string, optional): Directory where the command should be executed\n\n**Returns:**\n* On success: Command output (stdout)\n* On failure: Error message and any command output (stderr)\n\n##### change_directory\nChanges the current working directory.\n\n**Parameters:**\n* `path` (string, required): Path to change to\n\n**Returns:**\n* On success: Success message with new path\n* On failure: Error message\n\n#### File System Tools\n\n##### read_file\nReads the contents of a file.\n\n**Parameters:**\n* `path` (string, required): Path to the file to read\n\n**Returns:**\n* On success: File contents\n* On failure: Error message\n\n##### read_multiple_files\nReads multiple files simultaneously.\n\n**Parameters:**\n* `paths` (array, required): List of file paths to read\n\n**Returns:**\n* On success: Combined contents of all files\n* On failure: Error message and partial results\n\n##### write_file\nWrites content to a file.\n\n**Parameters:**\n* `path` (string, required): Path where the file will be written\n* `content` (string, required): Content to write to the file\n\n**Returns:**\n* On success: Success message\n* On failure: Error message\n\n##### edit_file\nMakes selective edits to a file.\n\n**Parameters:**\n* `path` (string, required): Path to the file to edit\n* `edits` (array, required): List of edit operations\n  * Each edit contains `oldText` and `newText`\n* `dryRun` (boolean, optional): Preview changes without applying\n\n**Returns:**\n* On success: Git-style diff of changes\n* On failure: Error message\n\n##### list_directory\nLists contents of a directory.\n\n**Parameters:**\n* `path` (string, required): Path for the directory to list\n\n**Returns:**\n* On success: List of files and directories\n* On failure: Error message\n\n##### create_directory\nCreates a new directory.\n\n**Parameters:**\n* `path` (string, required): Path for the directory to create\n\n**Returns:**\n* On success: Success message\n* On failure: Error message\n\n##### move_file\nMoves or renames files and directories.\n\n**Parameters:**\n* `source` (string, required): Source path of the file or directory to move\n* `destination` (string, required): Destination path where the file or directory will be moved to\n\n**Returns:**\n* On success: Success message\n* On failure: Error message\n\n##### search_files\nSearches for files matching a pattern.\n\n**Parameters:**\n* `path` (string, required): Starting path for the search\n* `pattern` (string, required): Search pattern to match file and directory names\n* `excludePatterns` (array, optional): List of glob patterns to exclude\n\n**Returns:**\n* On success: List of matching files\n* On failure: Error message\n\n##### directory_tree\nGenerates a recursive tree view of files and directories.\n\n**Parameters:**\n* `path` (string, required): Path for the directory to generate tree from\n\n**Returns:**\n* On success: JSON structure representing the directory tree\n* On failure: Error message\n\n##### get_file_info\nRetrieves detailed metadata about a file or directory.\n\n**Parameters:**\n* `path` (string, required): Path to the file or directory\n\n**Returns:**\n* On success: File/directory metadata\n* On failure: Error message\n\n##### list_allowed_directories\nLists all directories the server is allowed to access.\n\n**Parameters:**\n* None\n\n**Returns:**\n* On success: List of allowed directories\n* On failure: Error message\n\n##### show_security_rules\nShows current security configuration.\n\n**Parameters:**\n* None\n\n**Returns:**\n* On success: Security configuration details\n* On failure: Error message\n\n## Security Considerations\n\nSTeLA MCP provides direct access to execute commands and file operations on the local system. Consider the following security practices:\n\n* Run with appropriate permissions (avoid running as root/administrator)\n* Use in trusted environments only\n* Consider implementing additional authorization mechanisms for production use\n* Be cautious about which directories you allow command execution and file operations in\n* Implement path validation to prevent unauthorized access to system files\n* Use the most restrictive configuration possible for your use case\n* Regularly review and update allowed commands and directories\n* Validate symlinks to prevent access outside allowed directories\n* Ensure parent directory checks for file creation operations\n\n### Platform-Specific Security Notes\n\n#### Linux/macOS\n* Run with a dedicated user with limited permissions\n* Consider using a chroot environment to restrict file system access\n* Use `chmod` to restrict executable permissions\n* Consider using SELinux/AppArmor for additional security\n\n#### Windows\n* Run as a standard user, not an administrator\n* Consider using Windows Security features to restrict access\n* Use folder/file permissions to limit access to sensitive directories\n* Consider using Windows Defender Application Control\n\n## Development\n\n### Adding New Tools\n\nTo extend STeLA MCP with additional functionality, follow this pattern:\n\n1. Define a Pydantic model for the tool's input parameters in `server.py`\n2. Add a new method to the appropriate class in `shell.py` or `filesystem.py`\n3. Register the tool in `server.py` using the `@server.call_tool()` decorator\n4. Implement the tool handler with proper error handling and return types\n\nExample:\n```python\nfrom pydantic import BaseModel, Field\n\nclass MyToolInput(BaseModel):\n    param1: str = Field(description=\"Description of param1\")\n    param2: int = Field(description=\"Description of param2\")\n\n@server.call_tool()\nasync def my_tool(request: Request[MyToolInput, str], arguments: MyToolInput) -> Dict[str, Any]:\n    \"\"\"Description of the tool.\"\"\"\n    try:\n        # Tool implementation\n        result = await do_something(arguments.param1, arguments.param2)\n        return {\"success\": True, \"result\": result}\n    except Exception as e:\n        return {\"error\": str(e)}\n```\n\n## License\n\nApache-2.0 License\n\n## Acknowledgements\n\n* Built with the MCP Python SDK\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "stela",
        "mcp",
        "file",
        "file management",
        "mcp provides",
        "stela mcp"
      ],
      "category": "file-management"
    },
    "StepanCooleague--file-finder-mcp": {
      "owner": "StepanCooleague",
      "name": "file-finder-mcp",
      "url": "https://github.com/StepanCooleague/file-finder-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/StepanCooleague.webp",
      "description": "Search for files in the filesystem based on a specified path fragment. Retrieve file metadata such as name, full path, size, and creation date for the located files.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-02-28T07:23:22Z",
      "readme_content": "# file-finder-mcp MCP Server\n\nA MCP server for searching files in the filesystem based on a path fragment.\n\n## Components\n\n### Resources\n\nThe server implements a file search system:\n\n- Each file resource includes:\n  - File name\n  - Full path\n  - File size\n  - Creation date\n\n### Tools\n\nThe server provides one tool:\n\n- `search-files`: Searches for files matching a given path fragment.\n  - Takes `query` as a required string argument.\n  - Takes `directory` as an optional string argument to specify the base directory for the search. If not provided, the search runs in the root directory.\n  - Returns a list of matching files with their metadata.\n\n## Quickstart\n\n### Install\n\nReplace the contents of the `cline_mcp_settings.json` file with the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"file-finder-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/stleubaev/Desktop/ClineTest/file-finder-mcp\",\n        \"run\",\n        \"file-finder-mcp\"\n      ]\n    }\n  }\n}\n```\n\n## Testing\n\nThe testing was conducted using the Gemini model with the following prompt:\n\n```\nhi can you find files called file_to_find on my desktop using my mcp server\n```\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "file",
        "metadata",
        "file metadata",
        "file finder",
        "stepancooleague file"
      ],
      "category": "file-management"
    },
    "Wayazi--mcp_file_system": {
      "owner": "Wayazi",
      "name": "mcp_file_system",
      "url": "https://github.com/Wayazi/mcp_file_system",
      "imageUrl": "/freedevtools/mcp/pfp/Wayazi.webp",
      "description": "Facilitates secure access to filesystem operations, enabling users to manipulate files and directories, retrieve metadata, and perform searches through a standardized interface.",
      "stars": 3,
      "forks": 0,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-04-06T18:46:23Z",
      "readme_content": "# MCP File System\n\nA Model Context Protocol (MCP) server that provides filesystem operations through a standardized interface.\n\n## Features\n\n- File operations (read/write)\n- Directory management (create/list/delete)\n- File movement and renaming\n- File metadata retrieval\n- File search capabilities\n- Access control through allowed directories\n\n## Getting Started\n\n1. Install dependencies:\n```bash\nnpm install\n```\n\n2. Build the project:\n```bash\nnpm run build\n```\n\n3. Run the server with allowed directories:\n```bash\nnpm start /path/to/allowed/directory [/path/to/another/directory ...]\n```\n\n## Documentation\n\n- [Server Implementation Details](docs/server-implementation-fix.md) - Learn about the server implementation and recent fixes\n- See the [MCP SDK Documentation](https://modelcontextprotocol.org/docs) for more details about the protocol\n\n## Development\n\nThe server is built using:\n- TypeScript\n- MCP SDK (high-level API)\n- Node.js filesystem APIs\n\n## Security\n\nThe server implements path validation to ensure operations only occur within allowed directories specified at startup.\n\n## License\n\nISC\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_file_system",
        "filesystem",
        "files",
        "mcp_file_system facilitates",
        "wayazi mcp_file_system",
        "file management"
      ],
      "category": "file-management"
    },
    "Xuanwo--mcp-server-opendal": {
      "owner": "Xuanwo",
      "name": "mcp-server-opendal",
      "url": "https://github.com/Xuanwo/mcp-server-opendal",
      "imageUrl": "/freedevtools/mcp/pfp/Xuanwo.webp",
      "description": "Provides access to multiple cloud storage solutions through a unified interface, enabling file listing, reading, and management across diverse storage backends.",
      "stars": 33,
      "forks": 7,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-05T06:42:13Z",
      "readme_content": "# Model Context Protocol Server for Apache OpenDAL™\nA Model Context Protocol (MCP) server implementation that provides access to various storage services via [Apache OpenDAL™](https://opendal.apache.org/).\n\n[![PyPI - Version](https://img.shields.io/pypi/v/mcp-server-opendal)](https://pypi.org/project/mcp-server-opendal/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mcp-server-opendal)](https://pypi.org/project/mcp-server-opendal/)\n[![Lint and Test](https://github.com/Xuanwo/mcp-server-opendal/actions/workflows/test.yml/badge.svg)](https://github.com/Xuanwo/mcp-server-opendal/actions/workflows/test.yml)\n\n## Features\n\n- Seamless access to multiple storage services including S3, Azure Blob Storage, Google Cloud Storage, and more\n- List files and directories from storage services\n- Read file contents with automatic text/binary detection\n- Environment variable based configuration\n\n## Installation\n\n```shell\npip install mcp-server-opendal\n```\n\n## Usage with Claude Desktop\n\nAdd the following to `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"opendal\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-server-opendal\"\n      ],\n      \"env\": {\n        \"YOUR_ENV_VAR\": \"YOUR_ENV_VALUE\"\n      }\n    }\n  }\n}\n```\n\nIt requires `uv` to be installed on your machine. Check the [official documentation](https://docs.astral.sh/uv/getting-started/installation/) for installation guides.\n\n## Environment variables\n\nConfigure storage services by setting environment variables. Each service requires a prefix and specific configuration options.\n\nFor example, to configure an S3 service with alias \"mys3\":\n\n```\nOPENDAL_MYS3_TYPE=s3\nOPENDAL_MYS3_BUCKET=mybucket\nOPENDAL_MYS3_REGION=us-east-1\nOPENDAL_MYS3_ENDPOINT=http://localhost:9000\nOPENDAL_MYS3_ACCESS_KEY_ID=myaccesskey\nOPENDAL_MYS3_SECRET_ACCESS_KEY=mysecretkey\n```\n\nThen you can use tool like `read` and `list` with `mys3://path/to/file`.\n\n`mcp-server-opendal` will also load from `.env`.\n\n## Development\n\n```shell\nnpx @modelcontextprotocol/inspector \\\n  uv run mcp-server-opendal\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "opendal",
        "storage",
        "cloud",
        "file management",
        "server opendal",
        "opendal provides"
      ],
      "category": "file-management"
    },
    "YingHe-1--MyFirstMcpServer": {
      "owner": "YingHe-1",
      "name": "MyFirstMcpServer",
      "url": "https://github.com/YingHe-1/MyFirstMcpServer",
      "imageUrl": "/freedevtools/mcp/pfp/YingHe-1.webp",
      "description": "Manage TXT files located on the desktop by counting, listing, and creating them through a user-friendly interface. The tool simplifies file management tasks, enabling efficient interactions with TXT files.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-02T10:12:52Z",
      "readme_content": "# MyFirstMcpServer\n\n基于MCP框架的桌面TXT文件管理工具，提供以下功能：\n\n1. 统计桌面上的TXT文件数量\n2. 列出桌面上的所有TXT文件\n3. 在桌面创建新的TXT文件（带用户交互确认）\n\n## 安装\n\n```bash\n# 克隆仓库\ngit clone https://github.com/YingHe-1/MyFirstMcpServer.git\ncd MyFirstMcpServer\n\n# 安装依赖\npip install -r requirements.txt\n```\n\n## 使用方法\n\n```bash\npython add_num.py\n```\n\n## 工具函数\n\n- `count_desktop_txt_files()`: 统计桌面TXT文件数量\n- `list_desktop_txt_files()`: 列出桌面TXT文件\n- `create_desktop_txt_file(filename, content)`: 创建桌面TXT文件\n\n## 技术栈\n\n- Python 3\n- MCP (Model-Context-Protocol) 框架\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "myfirstmcpserver",
        "txt",
        "files",
        "manage txt",
        "file management",
        "myfirstmcpserver manage"
      ],
      "category": "file-management"
    },
    "YothisisTroy--Filesys": {
      "owner": "YothisisTroy",
      "name": "Filesys",
      "url": "https://github.com/YothisisTroy/Filesys",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Facilitates access to and management of local files through an AI agent using the Model Context Protocol, enabling seamless interactions with the filesystem via Python. Supports operations like reading and listing files from specified directories.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesys",
        "files",
        "filesystem",
        "filesys facilitates",
        "files ai",
        "yothisistroy filesys"
      ],
      "category": "file-management"
    },
    "ZbigniewTomanek--my-mcp-server": {
      "owner": "ZbigniewTomanek",
      "name": "my-mcp-server",
      "url": "https://github.com/ZbigniewTomanek/my-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/ZbigniewTomanek.webp",
      "description": "Provides tools for interacting with local file systems and executing commands, allowing LLMs to access and manipulate data securely. Implements a standardized protocol for seamless integration with various AI models.",
      "stars": 24,
      "forks": 1,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-08-04T13:15:11Z",
      "readme_content": "# MCP Tools\n\nA custom Model Context Protocol (MCP) server implementation that provides file system and command execution tools for Claude Desktop and other LLM clients.\n\n## What is the Model Context Protocol?\n\nThe Model Context Protocol (MCP) is an open protocol that standardizes how applications provide context to Large Language Models (LLMs). Much like a USB-C port provides a standardized way to connect devices to various peripherals, MCP provides a standardized way to connect AI models to different data sources and tools.\n\nThis project implements a FastMCP server with several useful tools that enable Claude and other LLMs to interact with your local file system and execute commands. It extends LLMs' capabilities with local system access in a controlled way through well-defined tool interfaces.\n\n## Key Benefits of MCP\n\n- **Standardized Integration**: MCP provides a growing list of pre-built integrations that your LLM can directly plug into\n- **Vendor Flexibility**: Easily switch between LLM providers and vendors (Claude, GPT-4o, Gemini, etc.)\n- **Security**: Best practices for securing your data within your infrastructure\n- **Tool Exposure**: Encapsulate existing tools and make them accessible to any MCP-compatible LLM client\n\n## Features\n\nThe MCP server provides the following file system and command execution tools:\n\n- **execute_shell_command**: Execute shell commands and get stdout/stderr results\n- **show_file**: View file contents with optional line range specification\n- **search_in_file**: Search for patterns in files using regular expressions\n- **edit_file**: Make precise changes to files with string replacements and line operations\n- **write_file**: Write or append content to files\n\n## MCP Architecture\n\nMCP follows a client-server architecture:\n\n- **Hosts**: LLM applications (like Claude Desktop or IDEs) that initiate connections\n- **Clients**: Maintain 1:1 connections with servers, inside the host application\n- **Servers**: Provide context, tools, and prompts to clients (this project implements a server)\n\n## Prerequisites\n\n- Python 3.10 or higher\n- An MCP-compatible client (Claude Desktop, or any other client that supports MCP)\n\n## Installation\n\n1. [Install uv](https://docs.astral.sh/uv/getting-started/installation/)\n2. Clone this repository or download the source code\n3. Run `uv run mcp install` to install the MCP server\n4. Run `which uv` to get an absolute path to the `uv` executable\n5. Update your MCP server configuration in Claude Desktop to use the absolute path to the `uv` executable\n\nMy MCP server configuration looks like this:\n\n```json\n{\n  \"globalShortcut\": \"\",\n  \"mcpServers\": {\n    \"zbigniew-mcp\": {\n      \"command\": \"/Users/zbigniewtomanek/.local/bin/uv\",\n      \"args\": [\n        \"run\",\n        \"--with\",\n        \"mcp[cli]\",\n        \"--with\",\n        \"marker-pdf\",\n        \"mcp\",\n        \"run\",\n        \"/Users/zbigniewtomanek/PycharmProjects/my-mcp-tools/server.py\"\n      ]\n    }\n  }\n}\n```\n\n\n## Usage\n\n### Connecting from Claude Desktop\n\n1. Open Claude Desktop\n2. Connect to the MCP server using the identifier \"zbigniew-mcp\"\n\n> **Note**: While this implementation focuses on Claude Desktop, MCP is designed to be compatible with any MCP-compatible tool or LLM client, providing flexibility in implementation and integration.\n\n## Available Tools\n\n### execute_shell_command\n\nExecute shell commands safely using a list of arguments:\n\n```python\nexecute_shell_command([\"ls\", \"-la\"])\nexecute_shell_command([\"grep\", \"-r\", \"TODO\", \"./src\"])\nexecute_shell_command([\"python\", \"analysis.py\", \"--input\", \"data.csv\"])\nexecute_shell_command([\"uname\", \"-a\"])\n```\n\n### show_file\n\nView file contents with optional line range specification:\n\n```python\nshow_file(\"/path/to/file.txt\")\nshow_file(\"/path/to/file.txt\", num_lines=10)\nshow_file(\"/path/to/file.txt\", start_line=5, num_lines=10)\n```\n\n### search_in_file\n\nSearch for patterns in files using regular expressions:\n\n```python\nsearch_in_file(\"/path/to/script.py\", r\"def\\s+\\w+\\s*\\(\")\nsearch_in_file(\"/path/to/code.py\", r\"#\\s*TODO\", case_sensitive=False)\n```\n\n### edit_file\n\nMake precise changes to files:\n\n```python\n# Replace text\nedit_file(\"config.json\", replacements={\"\\\"debug\\\": false\": \"\\\"debug\\\": true\"})\n\n# Insert at line 5\nedit_file(\"script.py\", line_operations=[{\"operation\": \"insert\", \"line\": 5, \"content\": \"# New comment\"}])\n\n# Delete lines 10-15\nedit_file(\"file.txt\", line_operations=[{\"operation\": \"delete\", \"start_line\": 10, \"end_line\": 15}])\n\n# Replace line 20\nedit_file(\"file.txt\", line_operations=[{\"operation\": \"replace\", \"line\": 20, \"content\": \"Updated content\"}])\n```\n\n### write_file\n\nWrite or append content to files:\n\n```python\n# Overwrite file\nwrite_file(\"/path/to/file.txt\", \"New content\")\n\n# Append to file\nwrite_file(\"/path/to/log.txt\", \"Log entry\", mode=\"a\")\n```\n\n### fetch_page\n\nFetch the contents of a web page to a PDF (requires chromium installed) and then parses it to markdown using local LLMs:\n\n```python\nfetch_page(\"https://example.com\")\n```\n\n## Transport Mechanisms\n\nMCP supports multiple transport methods for communication between clients and servers:\n\n- **Standard Input/Output (stdio)**: Uses standard input/output for communication, ideal for local processes\n- **Server-Sent Events (SSE)**: Enables server-to-client streaming with HTTP POST requests for client-to-server communication\n\nThis implementation uses a local MCP server that communicates via text input/output.\n\n## Extending with Your Own Tools\n\nYou can easily extend this MCP server by adding new tools with the `@mcp.tool` decorator. Follow the pattern in server.py to create new tools that expose additional functionality to your LLM clients.\n\n## Related Projects\n\n- [langchain-mcp-adapters](https://github.com/langchain-ai/langchain-mcp-adapters): Use MCP with LangChain\n- [MCP-Bridge](https://github.com/SecretiveShell/MCP-Bridge): Map MCP tools to OpenAI's format\n\n## Security Considerations\n\nThe MCP server provides Claude with access to your local system. Be mindful of the following:\n\n- The server executes shell commands as your user\n- It can read, write, and modify files on your system\n- Consider limiting access to specific directories if security is a concern\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "zbigniewtomanek",
        "file",
        "mcp",
        "file management",
        "zbigniewtomanek mcp",
        "mcp server"
      ],
      "category": "file-management"
    },
    "ZizoTheDev--ffmpeg-mcp": {
      "owner": "ZizoTheDev",
      "name": "ffmpeg-mcp",
      "url": "https://github.com/ZizoTheDev/ffmpeg-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ZizoTheDev.webp",
      "description": "Utilizes FFmpeg for media processing tasks, enabling efficient handling of various audio and video formats. Ensures secure communication and optimized performance for media workflows.",
      "stars": 13,
      "forks": 3,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T08:12:28Z",
      "readme_content": "# FFmpeg MCP Server\n\nThis README provides information about the **ffmpeg-mcp** repository, which contains an MCP server designed to work with FFmpeg. Below, you will find details about the repository, along with a link to access the latest releases.\n\n## 🌟 About the Repository\n\n**Repository Name:** ffmpeg-mcp\n\n**Short Description:** An MCP server for FFmpeg\n\n**Topics:** Not provided\n\n## 🚀 Get Started\n\nTo access the latest releases of the MCP server for FFmpeg, click on the link below:\n\n[![Download MCP Server](https://img.shields.io/badge/Download-MCP_Server-brightgreen)](https://github.com/ZizoTheDev/ffmpeg-mcp/releases)\n\nIf the link includes a path part, please download the specified file and execute it to begin using the MCP server.\n\nIf the link only includes the domain, simply visit the provided link to explore and download the latest releases.\n\nIf the link provided does not work or was not provided by you, we recommend checking the \"Releases\" section of this repository for the latest updates.\n\n## 📦 Features\n\nHere are some key features of the **ffmpeg-mcp** repository:\n\n- **MCP Server Compatibility:** Built specifically to work seamlessly with FFmpeg.\n- **Enhanced Performance:** Optimized for efficiency and speed in media processing tasks.\n- **Secure Communication:** Implements secure communication protocols for data transfer.\n- **Scalable Architecture:** Designed to handle large volumes of media processing requests.\n\n## 🛠️ Installation\n\nTo install the MCP server for FFmpeg, follow these steps:\n\n1. Download the latest release from the provided link.\n2. Execute the downloaded file to start the installation process.\n3. Follow the on-screen instructions to complete the installation.\n4. Start using the MCP server with FFmpeg for your media processing needs.\n\n## 📜 Usage\n\nOnce installed, you can use the MCP server with FFmpeg by following these steps:\n\n1. Configure the server settings based on your requirements.\n2. Connect the server to your FFmpeg environment.\n3. Start sending media processing tasks to the MCP server for execution.\n4. Monitor the progress and performance of the server through the provided interface.\n\n## 📈 Roadmap\n\nFuture updates for the MCP server in this repository may include:\n\n- Integration with additional media processing tools.\n- Enhanced security features for data protection.\n- Performance optimizations for faster processing speeds.\n- Improved scalability for handling larger workloads.\n\n## 🤝 Contributing\n\nIf you are interested in contributing to the development of the MCP server in this repository, please follow these guidelines:\n\n- Fork the repository and make your desired changes.\n- Submit a pull request with a detailed description of the modifications.\n- Your contributions will be reviewed by the repository maintainers for potential inclusion.\n\n## 📧 Contact\n\nIf you have any questions, feedback, or suggestions regarding the MCP server for FFmpeg in this repository, please feel free to reach out to us at [developer@example.com](mailto:developer@example.com).\n\n---\n\nBy following this README, you can quickly get started with the **ffmpeg-mcp** repository and leverage the MCP server's capabilities for your media processing tasks. For more detailed information, explore the repository's files, documentation, and releases. Thank you for your interest in our project! 🎉",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ffmpeg",
        "formats",
        "zizothedev",
        "ffmpeg media",
        "utilizes ffmpeg",
        "zizothedev ffmpeg"
      ],
      "category": "file-management"
    },
    "adeze--raindrop-mcp": {
      "owner": "adeze",
      "name": "raindrop-mcp",
      "url": "https://github.com/adeze/raindrop-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/adeze.webp",
      "description": "Manage and interact with Raindrop.io bookmarks, collections, tags, and highlights using the MCP server interface. Perform CRUD operations, advanced searches, tag management, and receive real-time updates.",
      "stars": 65,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T03:00:40Z",
      "readme_content": "# Raindrop.io MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@adeze/raindrop-mcp)](https://smithery.ai/server/@adeze/raindrop-mcp)\n\nThis project provides a Model Context Protocol (MCP) server for interacting with the [Raindrop.io](https://raindrop.io/) bookmarking service. It allows Language Models (LLMs) and other AI agents to access and manage your Raindrop.io data through the MCP standard.\n\n[![npm version](https://badge.fury.io/js/%40adeze%2Fraindrop-mcp.svg)](https://www.npmjs.com/package/@adeze/raindrop-mcp)\n\n## Features\n\n- **CRUD Operations**: Create, Read, Update, and Delete collections and bookmarks.\n- **Advanced Search**: Filter bookmarks by various criteria like tags, domain, type, creation date, etc.\n- **Tag Management**: List, rename, merge, and delete tags.\n- **Highlight Access**: Retrieve text highlights from bookmarks.\n- **Collection Management**: Reorder, expand/collapse, merge, and remove empty collections.\n- **File Upload**: Upload files directly to Raindrop.io.\n- **Reminders**: Set reminders for specific bookmarks.\n- **Import/Export**: Initiate and check the status of bookmark imports and exports.\n- **Trash Management**: Empty the trash.\n- **MCP Compliance**: Exposes Raindrop.io functionalities as MCP resources and tools.\n- **Optimized Tools**: Enhanced tool structure with 9 core tools using modern `resource_link` patterns for efficient data access.\n- **AI-Friendly Interface**: Clear naming conventions and comprehensive parameter documentation.\n- **Streaming Support**: Provides real-time SSE (Server-Sent Events) endpoints for streaming bookmark updates.\n- **Built with TypeScript**: Strong typing for better maintainability.\n- **Uses Axios**: For making requests to the Raindrop.io API.\n- **Uses Zod**: For robust schema validation of API parameters and responses.\n- **Uses MCP SDK**: Leverages the official `@modelcontextprotocol/sdk`.\n\n## Prerequisites\n\n- Node.js (v18 or later recommended) or Bun\n- A Raindrop.io account\n- A Raindrop.io API Access Token (create one in your [Raindrop.io settings](https://app.raindrop.io/settings/integrations))\n\n## Installation and Usage\n\n### Using NPX (Recommended)\n\nYou can run the server directly using npx without installing it:\n\n```bash\n# Set your API token as an environment variable\nexport RAINDROP_ACCESS_TOKEN=YOUR_RAINDROP_ACCESS_TOKEN\n\n# Run the server\nnpx @adeze/raindrop-mcp\n```\n\n### From Source\n\n1.  **Clone the repository:**\n\n    ```bash\n    git clone https://github.com/adeze/raindrop-mcp.git\n    cd raindrop-mcp\n    ```\n\n2.  **Install dependencies:**\n\n    ```bash\n    bun install\n    ```\n\n3.  **Configure Environment Variables:**\n    Create a `.env` file in the root directory by copying the example:\n\n    ```bash\n    cp .env.example .env\n    ```\n\n    Edit the `.env` file and add your Raindrop.io API Access Token:\n\n    ```env\n    RAINDROP_ACCESS_TOKEN=YOUR_RAINDROP_ACCESS_TOKEN\n    ```\n\n4.  **Build and Run:**\n    ```bash\n    bun run build\n    bun start\n    ```\n\n\n## Inspector CLI & VS Code Integration\n\nThis project is designed for seamless debugging and protocol inspection using the [MCP Inspector CLI](https://github.com/modelcontextprotocol/inspector). For full instructions and best practices, see [`./github/prompts/inspector.prompt.md`](.github/prompts/inspector.prompt.md).\n\n### MCP Inspector CLI Usage\n\n- **List available tools:**\n  ```bash\n  npx -y @modelcontextprotocol/inspector --cli node build/index.js --method tools/list\n  ```\n- **Send protocol requests (e.g., ping):**\n  ```bash\n  npx -y @modelcontextprotocol/inspector --cli node build/index.js --method ping\n  ```\n- **Debug with Inspector:**\n  - For STDIO server:\n    ```bash\n    npx -y @modelcontextprotocol/inspector node build/index.js\n    ```\n  - For HTTP server:\n    ```bash\n    npx -y @modelcontextprotocol/inspector node build/server.js\n    ```\n\nYou can automate these flows in VS Code using launch configurations and tasks. See the prompt file for more advanced scenarios and flags.\n\n---\n\nThe server uses standard input/output (stdio) for communication by default, listening for requests on stdin and sending responses to stdout.\n\n## Usage with MCP Clients\n\nConnect your MCP client (like an LLM agent) to the running server process via stdio. The server exposes the following resource patterns:\n\n### **Static Resources:**\n- `mcp://user/profile` - User account information\n- `diagnostics://server` - Server diagnostics and environment info\n\n### **Dynamic Resources:** \n- `mcp://collection/{id}` - Access any Raindrop collection by ID (e.g., `mcp://collection/123456`)\n- `mcp://raindrop/{id}` - Access any Raindrop bookmark by ID (e.g., `mcp://raindrop/987654`)\n\n### **Available Tools (10 total):**\n- **diagnostics** - Server diagnostic information\n- **collection_list** - List all collections (returns `resource_link` to individual collections)\n- **collection_manage** - Create, update, or delete collections\n- **bookmark_search** - Search bookmarks (returns `resource_link` to individual bookmarks)  \n- **bookmark_manage** - Create, update, or delete bookmarks\n- **tag_manage** - Rename, merge, or delete tags\n- **highlight_manage** - Create, update, or delete highlights\n- **getRaindrop** - Fetch single bookmark by ID (legacy)\n- **listRaindrops** - List bookmarks for collection (legacy)\n- **bulk_edit_raindrops** - Bulk update tags, favorite status, media, cover, or move bookmarks to another collection.\n\n### Bulk Edit Tool Usage\n\n**Tool Name:** `bulk_edit_raindrops`\n\nBulk update multiple bookmarks in a collection. Supports updating tags, favorite status, media, cover, and moving bookmarks to another collection.\n\n**Input Schema:**\n```json\n{\n  \"collectionId\": 123456,                // Collection to update raindrops in\n  \"ids\": [987654, 876543],               // (Optional) Array of raindrop IDs to update\n  \"important\": true,                     // (Optional) Mark as favorite\n  \"tags\": [\"work\", \"urgent\"],           // (Optional) Tags to set (empty array removes all tags)\n  \"media\": [\"https://img.com/a.png\"],   // (Optional) Media URLs (empty array removes all media)\n  \"cover\": \"<screenshot>\",              // (Optional) Cover URL\n  \"collection\": { \"$id\": 654321 },      // (Optional) Move to another collection\n  \"nested\": false                        // (Optional) Include nested collections\n}\n```\n\n**Example Usage:**\n- Update tags and favorite status for two bookmarks:\n```json\n{\n  \"collectionId\": 123456,\n  \"ids\": [987654, 876543],\n  \"tags\": [\"project\", \"review\"],\n  \"important\": true\n}\n```\n- Remove all tags from all bookmarks in a collection:\n```json\n{\n  \"collectionId\": 123456,\n  \"tags\": []\n}\n```\n- Move bookmarks to another collection:\n```json\n{\n  \"collectionId\": 123456,\n  \"ids\": [987654, 876543],\n  \"collection\": { \"$id\": 654321 }\n}\n```\n\n**Response:**\nReturns a text message indicating success and the number of modified bookmarks.\n```json\n{\n  \"content\": [\n    { \"type\": \"text\", \"text\": \"Bulk edit successful. Modified: 2\" }\n  ]\n}\n```\n\nThe modern tools use the efficient `resource_link` pattern - they return lightweight links to resources instead of full data, allowing clients to fetch complete data only when needed via the dynamic resource URIs.\n\n### MCP Configuration\n\nTo use the Raindrop MCP server with your AI assistant or MCP-compatible client, you can add the following configuration to your `.mcp.json` file:\n\n```json\n\"raindrop\": {\n  \"command\": \"npx\",\n  \"args\": [\n    \"@adeze/raindrop-mcp@latest\"\n  ],\n  \"env\": {\n    \"RAINDROP_ACCESS_TOKEN\": \"YOUR_RAINDROP_API_TOKEN\"\n  }\n}\n```\n\nFor Claude Code or other MCP-compatible clients, this will register the Raindrop server under the name \"raindrop\" and make all of its resources and tools available to your AI assistant.\n\n## Development\n\n- **Testing:** `bun test`\n- **Type checking:** `bun run type-check`\n- **Build:** `bun run build`\n- **Development:** `bun run dev`\n- **Debug:** `bun run debug` or `bun run inspector`\n- **HTTP server:** `bun run start:http`\n\n## Contributing\n\nContributions are welcome! Please open an issue or submit a pull request.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n\n## Architecture Overview\n\n### Project Structure\n\n- **Source:** `src/`\n  - `index.ts`, `server.ts`: Entrypoints for STDIO and HTTP MCP servers.\n  - `connectors/`: External service connectors (e.g., OpenAI).\n  - `services/`: Business logic for Raindrop.io and MCP protocol (`raindrop.service.ts`, `raindropmcp.service.ts`).\n  - `types/`: TypeScript types and schemas (MCP, Raindrop, OAuth, Zod).\n  - `utils/`: Logging and shared utilities.\n- **Build:** `build/`\n  - Compiled output for deployment and inspection.\n- **Tests:** `tests/`\n  - All Vitest test files for services, connectors, and protocol compliance.\n\n### Key Technologies & Patterns\n\n- **TypeScript:** Type-safe, modular codebase.\n- **Zod:** Schema validation for all API inputs/outputs.\n- **Bun:** Package management, scripts, and runtime.\n- **Vitest:** Testing framework for all logic and integration tests.\n- **MCP Protocol:** Implements Model Context Protocol via STDIO and HTTP, exposing Raindrop.io as MCP resources and tools.\n- **Inspector Tool:** Integrated for protocol debugging and inspection.\n- **Defensive Programming:** Centralized error handling, explicit types, and robust validation.\n- **Declarative Tooling:** Tools and resources are defined with clear schemas and documentation, following MCP and DXT specifications.\n\n### Tool & Resource Design\n\n- **Resources:** Exposed as MCP URIs (e.g., `collections://all`, `tags://all`, `highlights://raindrop/{id}`).\n- **Tools:** Modular, context-aware, and AI-friendly. Reduced redundancy and grouped by category/action.\n- **Service Layer:** Centralized business logic, endpoint construction, and error handling.\n- **Connector Layer:** Handles external integrations (e.g., OpenAI).\n\n### Development & Release\n\n- **Scripts:** All build, test, and release scripts use Bun.\n- **DXT Manifest:** Automated packaging and release via GitHub CLI.\n- **Continuous Integration:** Version tagging and manifest publishing are fully automated.\n\n## 📋 Recent Enhancements (v2.0.12)\n\n### **MCP Resource Links Implementation** ✨ NEW\n- **Modern `resource_link` pattern** following MCP SDK v1.17.2 best practices\n- **Efficient data access** - tools return lightweight links instead of full data payloads\n- **Better performance** - clients fetch full bookmark/collection data only when needed\n- **Seamless integration** with existing dynamic resource system (`mcp://raindrop/{id}`)\n\n### **SDK & API Updates**\n- **Updated to MCP SDK v1.17.2** with latest protocol features\n- **Modern tool registration** using `registerTool()` API with proper descriptions\n- **Fixed API endpoints** - corrected Raindrop.io API path parameters\n- **Enhanced tool implementations** - all 9 tools now fully functional\n\n### **Tool Optimization** \n- **Resource-efficient responses** - bookmark/collection lists return `resource_link` objects\n- **Dynamic resource access** - `mcp://collection/{id}` and `mcp://raindrop/{id}` patterns\n- **Better UX** - clients can display lists without loading full data\n- **MCP compliance** - follows official SDK patterns and examples\n\n### **Service Layer Improvements**\n- **25-30% code reduction** through extracted common functions and patterns\n- **Consistent error handling** with standardized response processing\n- **Enhanced type safety** with generic response handlers\n- **Centralized endpoint building** for better API consistency\n\n### **Developer Experience**\n- **[VS Code Configuration](https://github.com/adeze/raindrop-mcp/issues/3)**: Enterprise-grade testing & debugging support\n- **Enhanced error messages** with actionable suggestions\n- **Standardized resource patterns** for consistent API interactions\n- **Comprehensive diagnostic tools** for monitoring and debugging\n\n## Automated Release & Tagging\n\nThis project uses Bun scripts and GitHub CLI to automate version tagging and DXT manifest release.\n\n### Tagging the Current Version\n\nTags the current commit with the version from `package.json` and pushes it to GitHub:\n\n```bash\n# Bump version locally\nbun run bump:patch  # 2.0.10 → 2.0.11\n\n# Then either:\n# Option A: Let workflow handle publishing\nbun run tag:version  # Creates tag, triggers workflow\n\n# Option B: Publish manually  \nbun run build\nbun run bun:publish:npm\nbun run bun:publish:github\n```\n\n### Publishing the DXT Manifest to GitHub Releases\n\nCreates a GitHub release for the current version and attaches the `raindrop-mcp.dxt` manifest:\n\n```bash\nbun run release:dxt\n```\n\n**Requirements:**\n- [GitHub CLI](https://cli.github.com/) (`gh`) must be installed and authenticated.\n- [`jq`](https://stedolan.github.io/jq/) must be installed (`brew install jq` on macOS).\n- The `raindrop-mcp.dxt` file must exist in the project root.\n\n**Scripts (in `package.json`):**\n```json\n\"tag:version\": \"git tag v$(jq -r .version package.json) && git push origin v$(jq -r .version package.json)\",\n\"release:dxt\": \"gh release create v$(jq -r .version package.json) raindrop-mcp.dxt --title \\\"Release v$(jq -r .version package.json)\\\" --notes \\\"DXT manifest for MCP\\\"\"\n```\n\nSee [Model Context Protocol documentation](https://modelcontextprotocol.io/) and [Raindrop.io API docs](https://developer.raindrop.io) for more details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "raindrop",
        "mcp",
        "file",
        "raindrop mcp",
        "raindrop io",
        "adeze raindrop"
      ],
      "category": "file-management"
    },
    "ai-yliu--filesystem-mcp-server": {
      "owner": "ai-yliu",
      "name": "filesystem-mcp-server",
      "url": "https://github.com/ai-yliu/filesystem-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/ai-yliu.webp",
      "description": "Facilitates filesystem operations such as reading and writing files, managing directories, and ensuring secure file handling within specified paths.",
      "stars": 2,
      "forks": 9,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-08-16T00:14:50Z",
      "readme_content": "# Filesystem MCP Server\n\nA Model Context Protocol (MCP) server that provides filesystem operations for Claude AI.\n\n## Features\n\nThis MCP server provides the following filesystem operations:\n\n1. **read_file**: Read complete contents of a file\n   - Input: `path` (string)\n   - Reads complete file contents with UTF-8 encoding\n\n2. **read_multiple_files**: Read multiple files simultaneously\n   - Input: `paths` (string[])\n   - Failed reads won't stop the entire operation\n\n3. **write_file**: Create new file or overwrite existing \n   - Inputs:\n     - `path` (string): File location\n     - `content` (string): File content\n\n4. **create_directory**: Create new directory or ensure it exists\n   - Input: `path` (string)\n   - Creates parent directories if needed\n   - Succeeds silently if directory exists\n\n5. **list_directory**: List directory contents with [FILE] or [DIR] prefixes\n   - Input: `path` (string)\n\n6. **move_file**: Move or rename files and directories\n   - Inputs:\n     - `source` (string)\n     - `destination` (string)\n   - Fails if destination exists\n\n7. **search_files**: Recursively search for files/directories\n   - Inputs:\n     - `path` (string): Starting directory\n     - `pattern` (string): Search pattern\n   - Case-insensitive matching\n   - Returns full paths to matches\n\n8. **get_file_info**: Get detailed file/directory metadata\n   - Input: `path` (string)\n   - Returns:\n     - Size\n     - Creation time\n     - Modified time\n     - Access time\n     - Type (file/directory)\n     - Permissions\n\n9. **list_allowed_directories**: List all directories the server is allowed to access\n   - No input required\n   - Returns directories that this server can read/write from\n\n## Security\n\nThe server only allows operations within directories specified via command-line arguments.\n\n## Installation\n\n1. Clone this repository\n2. Install dependencies: `npm install`\n3. Build the project: `npm run build`\n\n## Usage\n\nRun the server with one or more allowed directories:\n\n```bash\nnode build/index.js /path/to/allowed/dir1 /path/to/allowed/dir2\n```\n\n## MCP Configuration\n\nAdd the server to your MCP configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem-server\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/filesystem-server/build/index.js\",\n        \"/path/to/allowed/dir1\",\n        \"/path/to/allowed/dir2\"\n      ],\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n## License\n\nISC\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "files",
        "file",
        "filesystem mcp",
        "yliu filesystem",
        "file management"
      ],
      "category": "file-management"
    },
    "ai-zerolab--yourware-mcp": {
      "owner": "ai-zerolab",
      "name": "yourware-mcp",
      "url": "https://github.com/ai-zerolab/yourware-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ai-zerolab.webp",
      "description": "Upload and manage projects through a user-friendly interface, enabling seamless handling of single files or entire directories. Integrates various development workflow features for enhanced productivity.",
      "stars": 9,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-07T03:50:26Z",
      "readme_content": "[![Release](https://img.shields.io/github/v/release/ai-zerolab/yourware-mcp)](https://img.shields.io/github/v/release/ai-zerolab/yourware-mcp)\n[![Build status](https://img.shields.io/github/actions/workflow/status/ai-zerolab/yourware-mcp/main.yml?branch=main)](https://github.com/ai-zerolab/yourware-mcp/actions/workflows/main.yml?query=branch%3Amain)\n[![Commit activity](https://img.shields.io/github/commit-activity/m/ai-zerolab/yourware-mcp)](https://img.shields.io/github/commit-activity/m/ai-zerolab/yourware-mcp)\n[![License](https://img.shields.io/github/license/ai-zerolab/yourware-mcp)](https://img.shields.io/github/license/ai-zerolab/yourware-mcp)\n\n<!-- [![codecov](https://codecov.io/gh/ai-zerolab/yourware-mcp/branch/main/graph/badge.svg)](https://codecov.io/gh/ai-zerolab/yourware-mcp) -->\n\n# Yourware MCP\n\nMCP server to upload your project to [yourware](https://www.yourware.so). Support single file or directory.\n\n## Showcase\n\nVisit on [yourware](https://v9gfmmif5s.app.yourware.so/): https://v9gfmmif5s.app.yourware.so/\n\n\n\n## Pre-requisites\n\n1. You need to login to [yourware](https://www.yourware.so)\n1. Then you can create a new API key, and set the `YOURWARE_API_KEY` environment variable. Don't worry, you chat with LLM to create and store the API key.\n\n## Configuration\n\n### General configuration\n\nYou can use the following configuration for cline/cursor/windsurf...\n\n```json\n{\n  \"mcpServers\": {\n    \"yourware-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\"yourware-mcp@latest\", \"stdio\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\n### Cursor config guide\n\nIn cursor settings -> features -> MCP Servers, Add a new MCP Server, name it `yourware-mcp` and set the command to `uvx yourware-mcp@latest stdio`\n\n\n\n### Config claude code\n\n```bash\nclaude mcp add yourware-mcp -s user -- uvx yourware-mcp@latest stdio\n```\n\n## Available environments variables\n\n`YOURWARE_API_KEY` for the API key, you can also let llm config it for you.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "zerolab",
        "file",
        "file management",
        "ai zerolab",
        "upload manage"
      ],
      "category": "file-management"
    },
    "alexbakers--mcp-ipfs": {
      "owner": "alexbakers",
      "name": "mcp-ipfs",
      "url": "https://github.com/alexbakers/mcp-ipfs",
      "imageUrl": "/freedevtools/mcp/pfp/alexbakers.webp",
      "description": "Manage storage spaces and data within the IPFS ecosystem by uploading, downloading, and executing various tasks through a command-line interface integrated with language models.",
      "stars": 11,
      "forks": 11,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-14T02:33:10Z",
      "readme_content": "# 🪐 MCP IPFS Server (storacha.network) 🛰️\n\n![Screenshot](https://raw.githubusercontent.com/alexbakers/mcp-ipfs/refs/heads/main/mcp-ipfs.png?neon-game)\n\n[![Publish Docker](https://github.com/alexbakers/mcp-ipfs/actions/workflows/publish-docker.yml/badge.svg)](https://github.com/alexbakers/mcp-ipfs/actions/workflows/publish-docker.yml) [![Publish NPM](https://github.com/alexbakers/mcp-ipfs/actions/workflows/publish-npm.yml/badge.svg)](https://github.com/alexbakers/mcp-ipfs/actions/workflows/publish-npm.yml) [![npm version](https://badge.fury.io/js/mcp-ipfs.svg)](https://badge.fury.io/js/mcp-ipfs)\n[![smithery badge](https://smithery.ai/badge/@alexbakers/mcp-ipfs)](https://smithery.ai/server/@alexbakers/mcp-ipfs)\n\nA Node.js server implementing the [Model Context Protocol (MCP)](https://github.com/ModelContextProtocol/specification) for interacting with the [storacha.network](https://storacha.network/) platform via the `w3` command-line interface (`@web3-storage/w3cli`).\n\nThis server empowers language models 🤖 and other MCP clients to manage storacha.network spaces, upload/download data, manage delegations, and perform various other tasks by seamlessly wrapping `w3` commands.\n\n## ✨ Features\n\n- Wraps the `w3` CLI for native integration with storacha.network.\n- Provides MCP tools covering a wide range of `w3` functionality:\n  - 🔑 **Authentication & Agent:** `w3_login`, `w3_reset`, `w3_account_ls` (for checking authorization)\n  - 📦 **Space Management:** `w3_space_ls`, `w3_space_use`, `w3_space_info`, `w3_space_add`, `w3_space_provision` (Note: `w3_space_create` must be run manually due to interactive prompts)\n  - 💾 **Data Management:** `w3_up`, `w3_ls`, `w3_rm`\n  - 🔗 **Sharing:** `w3_open` (generates w3s.link URL)\n  - 🤝 **Delegations & Proofs:** `w3_delegation_create`, `w3_delegation_ls`, `w3_delegation_revoke`, `w3_proof_add`, `w3_proof_ls`\n  - 🔐 **Keys & Tokens:** `w3_key_create`, `w3_bridge_generate_tokens`\n  - ⚙️ **Advanced Storage (`w3 can ...`):** Blob, CAR, Upload, Index, Access Claim, Filecoin Info management\n  - 💳 **Account & Billing:** `w3_plan_get`, `w3_coupon_create`, `w3_usage_report`\n\n## 🛠️ Prerequisites\n\n- **Node.js:** Version 22.0.0 or higher (`node -v`).\n- **`w3` CLI:** The server executes `w3` commands directly. Ensure `@web3-storage/w3cli` is installed globally and configured:\n  ```bash\n  npm install -g @web3-storage/w3cli\n  w3 login <your-email@example.com>\n  # Follow email verification steps\n  ```\n- **Environment Variable:** The `w3_login` tool requires the `W3_LOGIN_EMAIL` environment variable to be set to the same email used for `w3 login`.\n\n## 🏗️ Project Structure\n\nThe codebase is organized as follows:\n\n```\nsrc/\n├── index.ts          # Main server entry point, MCP setup, request routing\n├── schemas.ts        # Zod schemas defining input arguments for each tool\n├── tool_handlers.ts  # Implementation logic for each MCP tool\n├── utils.ts          # Helper functions (e.g., running w3 commands, parsing JSON)\n└── utils/\n    └── logger.ts     # Basic logger configuration\n```\n\n## 🚀 Usage with MCP Clients\n\nThis server can be used with any MCP-compatible client. You need to configure your client to connect to this server.\n\n### Example: NPX (Recommended for simple local use)\n\nThis assumes `npm` and the prerequisites are met.\n\n```json\n{\n  \"mcpServers\": {\n    \"ipfs\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-ipfs\"],\n      \"env\": {\n        \"W3_LOGIN_EMAIL\": \"your-email@example.com\"\n      }\n    }\n  }\n}\n```\n\n### Example: Docker\n\nBuild the image first (see Build section) or use the pre-built image `alexbakers/mcp-ipfs`.\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-ipfs\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-v\",\n        \"/path/to/your/project:/path/to/your/project\",\n        \"-e\",\n        \"W3_LOGIN_EMAIL\",\n        \"alexbakers/mcp-ipfs\"\n      ],\n      \"env\": {\n        \"W3_LOGIN_EMAIL\": \"your-email@example.com\"\n      }\n    }\n  }\n}\n```\n\n#### 📝 Note on Paths:\n\nSeveral `w3` commands require **absolute filesystem paths** (e.g., `w3_up`, `w3_delegation_create --output`, `w3_proof_add`, `w3_can_blob_add`, `w3_can_store_add`).\n\n- **NPX:** Provide absolute paths from your host machine.\n- **Docker:** Provide absolute paths _inside the container_. If interacting with files from your host (e.g., uploading), you **must** mount the relevant host directory into the container using the `-v` flag (e.g., `-v /Users/me/project:/Users/me/project`) and then use the _container path_ (e.g., `/Users/me/project/my_file.txt`) in the tool arguments.\n\n## 📦 Build\n\nClone the repository and install dependencies:\n\n```bash\ngit clone https://github.com/alexbakers/mcp-ipfs.git\ncd mcp-ipfs\nnpm install\n```\n\nBuild the TypeScript code:\n\n```bash\nnpm run build\n```\n\nYou can then run the server directly:\n\n```bash\n# Ensure W3_LOGIN_EMAIL is set in your environment\nexport W3_LOGIN_EMAIL=\"your-email@example.com\"\nnode dist/index.js\n```\n\nOr publish it (if you have the rights):\n\n```bash\nnpm publish\n```\n\n### 🐳 Docker Build\n\nBuild the Docker image:\n\n```bash\n# Build locally (replace with your username/repo and desired tag)\ndocker build -t alexbakers/mcp-ipfs .\n```\n\n## 📜 License\n\nThis MCP server is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ipfs",
        "storage",
        "file",
        "ipfs manage",
        "data ipfs",
        "mcp ipfs"
      ],
      "category": "file-management"
    },
    "alxspiker--mcp-server-ftp": {
      "owner": "alxspiker",
      "name": "mcp-server-ftp",
      "url": "https://github.com/alxspiker/mcp-server-ftp",
      "imageUrl": "/freedevtools/mcp/pfp/alxspiker.webp",
      "description": "Interact with FTP servers to manage files and directories using natural language commands. Perform operations such as listing directory contents, uploading and downloading files, and creating or deleting directories.",
      "stars": 11,
      "forks": 7,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-15T17:51:29Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/alxspiker-mcp-server-ftp-badge.png)](https://mseep.ai/app/alxspiker-mcp-server-ftp)\n\n# MCP Server for FTP Access\n\n[![smithery badge](https://smithery.ai/badge/@alxspiker/mcp-server-ftp)](https://smithery.ai/server/@alxspiker/mcp-server-ftp)\n\nThis Model Context Protocol (MCP) server provides tools for interacting with FTP servers. It allows Claude.app to list directories, download and upload files, create directories, and delete files/directories on FTP servers.\n\n## Features\n\n- **List Directory Contents**: View files and folders on the FTP server\n- **Download Files**: Retrieve file content from the FTP server\n- **Upload Files**: Create new files or update existing ones\n- **Create Directories**: Make new folders on the FTP server\n- **Delete Files/Directories**: Remove files or directories\n\n## Installation\n\n### Installing via Smithery\n\nTo install mcp-server-ftp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@alxspiker/mcp-server-ftp):\n\n```bash\nnpx -y @smithery/cli install @alxspiker/mcp-server-ftp --client claude\n```\n\n### Prerequisites\n\n- Node.js 16 or higher\n- Claude for Desktop (or other MCP-compatible client)\n\n### Building from Source\n\n#### Linux/macOS\n```bash\n# Clone the repository\ngit clone https://github.com/alxspiker/mcp-server-ftp.git\ncd mcp-server-ftp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n#### Windows\n```bash\n# Clone the repository\ngit clone https://github.com/alxspiker/mcp-server-ftp.git\ncd mcp-server-ftp\n\n# Run the Windows build helper script\nbuild-windows.bat\n```\n\nThe `build-windows.bat` script handles dependency installation and building on Windows systems, with fallback options if the TypeScript compiler has issues.\n\n## Configuration\n\nTo use this server with Claude for Desktop, add it to your configuration file:\n\n### MacOS/Linux\nEdit `~/Library/Application Support/Claude/claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"ftp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/mcp-server-ftp/build/index.js\"],\n      \"env\": {\n        \"FTP_HOST\": \"ftp.example.com\",\n        \"FTP_PORT\": \"21\",\n        \"FTP_USER\": \"your-username\",\n        \"FTP_PASSWORD\": \"your-password\",\n        \"FTP_SECURE\": \"false\"\n      }\n    }\n  }\n}\n```\n\n### Windows\nEdit `%APPDATA%\\Claude\\claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"ftp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"C:\\\\path\\\\to\\\\mcp-server-ftp\\\\build\\\\index.js\"],\n      \"env\": {\n        \"FTP_HOST\": \"ftp.example.com\",\n        \"FTP_PORT\": \"21\",\n        \"FTP_USER\": \"your-username\",\n        \"FTP_PASSWORD\": \"your-password\",\n        \"FTP_SECURE\": \"false\"\n      }\n    }\n  }\n}\n```\n\n## Troubleshooting Windows Build Issues\n\nIf you encounter build issues on Windows:\n\n1. Use the provided `build-windows.bat` script which handles common build issues\n2. Make sure Node.js and npm are properly installed\n3. Try running the TypeScript compiler directly: `npx tsc`\n4. If you still have issues, you can use the pre-compiled files in the `build` directory by running:\n   ```\n   node path\\to\\mcp-server-ftp\\build\\index.js\n   ```\n\n## Configuration Options\n\n| Environment Variable | Description | Default |\n|---------------------|-------------|---------|\n| `FTP_HOST` | FTP server hostname or IP address | localhost |\n| `FTP_PORT` | FTP server port | 21 |\n| `FTP_USER` | FTP username | anonymous |\n| `FTP_PASSWORD` | FTP password | (empty string) |\n| `FTP_SECURE` | Use secure FTP (FTPS) | false |\n\n## Usage\n\nAfter configuring and restarting Claude for Desktop, you can use natural language to perform FTP operations:\n\n- \"List the files in the /public directory on my FTP server\"\n- \"Download the file /data/report.txt from the FTP server\"\n- \"Upload this text as a file called notes.txt to the FTP server\"\n- \"Create a new directory called 'backups' on the FTP server\"\n- \"Delete the file obsolete.txt from the FTP server\"\n- \"Remove the empty directory /old-project from the FTP server\"\n\n## Available Tools\n\n| Tool Name | Description |\n|-----------|-------------|\n| `list-directory` | List contents of an FTP directory |\n| `download-file` | Download a file from the FTP server |\n| `upload-file` | Upload a file to the FTP server |\n| `create-directory` | Create a new directory on the FTP server |\n| `delete-file` | Delete a file from the FTP server |\n| `delete-directory` | Delete a directory from the FTP server |\n\n## Security Considerations\n\n- FTP credentials are stored in the Claude configuration file. Ensure this file has appropriate permissions.\n- Consider using FTPS (secure FTP) by setting `FTP_SECURE=true` if your server supports it.\n- The server creates temporary files for uploads and downloads in your system's temp directory.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ftp",
        "files",
        "directory",
        "server ftp",
        "ftp servers",
        "interact ftp"
      ],
      "category": "file-management"
    },
    "amgadabdelhafez--dbx-mcp-server": {
      "owner": "amgadabdelhafez",
      "name": "dbx-mcp-server",
      "url": "https://github.com/amgadabdelhafez/dbx-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/amgadabdelhafez.webp",
      "description": "Integrate applications with Dropbox for managing files, folders, and account information using MCP-compatible clients. Leverage Dropbox's public API to interact with essential Dropbox functionalities.",
      "stars": 21,
      "forks": 12,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T17:56:48Z",
      "readme_content": "# dbx-mcp-server\n\nA Model Context Protocol (MCP) server that provides integration with Dropbox, allowing MCP-compatible clients to interact with Dropbox through a set of powerful tools.\n\n**Important Disclaimer:** This project is not affiliated with, endorsed by, or sponsored by Dropbox. It is an independent integration that works with Dropbox's public API.\n\n## Table of Contents\n\n- [Quick Start](#quick-start)\n- [Installation](#installation)\n- [Authentication](#authentication)\n- [Available Tools](#available-tools)\n- [Required Dropbox Permissions](#required-dropbox-permissions)\n- [Usage Examples](#usage-examples)\n- [Development](#development)\n- [License](#license)\n\n## Quick Start\n\n1. Clone the repository\n2. Run `npm install` to install dependencies\n3. Run `npm run build` to build the project\n4. Run `npm run setup`\n5. Configure your MCP client to use the server\n\n## Prerequisites\n\nRegister a Dropbox app at [Dropbox App Console](https://www.dropbox.com/developers/apps):\n\n- Choose \"Scoped access\" API\n- Choose the access type your app needs\n- Name your app and click \"Create app\"\n- Under \"Permissions\", select the desired permissions for the actions you will be using, for example:\n    - `files.metadata.read`\n    - `files.content.read`\n    - `files.content.write`\n    - `sharing.write`\n    - `account_info.read`\n- Add `http://localhost` as your redirect URI\n- Note your App key and App secret\n\n## Installation\n\n1. **Clone the repository**\n\n   ```bash\n   git clone https://github.com/your-username/dbx-mcp-server.git\n   cd dbx-mcp-server\n   ```\n\n2. **Install dependencies and build**\n\n   ```bash\n   npm install\n   npm run build\n   ```\n\n3. **Run the setup script**\n\n   ```bash\n   npm run setup\n   ```\n\n4. **Add to MCP settings**\n\n   Add the following to your MCP settings file:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"dbx\": {\n         \"command\": \"node\",\n         \"args\": [\"/path/to/dbx-mcp-server/build/index.js\"]\n       }\n     }\n   }\n   ```\n\n## Authentication\n\nThe server uses OAuth 2.0 with PKCE for secure authentication with Dropbox.\n\n### Environment Variables\n\nRequired:\n\n- `DROPBOX_APP_KEY`: Your Dropbox app's key\n- `DROPBOX_APP_SECRET`: Your Dropbox app's secret\n- `DROPBOX_REDIRECT_URI`: OAuth redirect URI\n- `TOKEN_ENCRYPTION_KEY`: 32+ character key for token encryption\n\nOptional:\n\n- `TOKEN_REFRESH_THRESHOLD_MINUTES`: Minutes before expiration to refresh token (default: 5)\n- `MAX_TOKEN_REFRESH_RETRIES`: Maximum number of refresh attempts (default: 3)\n- `TOKEN_REFRESH_RETRY_DELAY_MS`: Delay between refresh attempts in ms (default: 1000)\n\n## Available Tools\n\n### File Operations\n\n- `list_files`: List files in a directory\n- `upload_file`: Upload a file\n- `download_file`: Download a file\n- `safe_delete_item`: Safely delete with recycle bin support\n- `create_folder`: Create a new folder\n- `copy_item`: Copy a file or folder\n- `move_item`: Move or rename a file/folder\n\n### Metadata and Search\n\n- `get_file_metadata`: Get file/folder metadata\n- `search_file_db`: Search files and folders\n- `get_sharing_link`: Create sharing links\n- `get_file_content`: Get file contents\n\n### Account Operations\n\n- `get_account_info`: Get account information\n\n## Required Dropbox Permissions\n\nBelow is a mapping of server actions to the minimum Dropbox OAuth scopes (permissions) required:\n\n| Server Action         | Required Dropbox Scopes                        |\n|---------------------- |-----------------------------------------------|\n| list_files            | `files.metadata.read`                         |\n| upload_file           | `files.content.write`, `files.metadata.write` |\n| download_file         | `files.content.read`                          |\n| safe_delete_item      | `files.metadata.write`                        |\n| create_folder         | `files.metadata.write`                        |\n| copy_item             | `files.content.write`, `files.metadata.write` |\n| move_item             | `files.content.write`, `files.metadata.write` |\n| get_file_metadata     | `files.metadata.read`                         |\n| search_file_db        | `files.metadata.read`                         |\n| get_sharing_link      | `sharing.write`                               |\n| get_file_content      | `files.content.read`                          |\n| get_account_info      | `account_info.read`                           |\n\n**Additional Scopes (if needed):**\n\n- `sharing.read`: View sharing settings and collaborators\n- `file_requests.read` / `file_requests.write`: For file request features\n- `contacts.read` / `contacts.write`: For accessing Dropbox contacts\n\nFor more details on Dropbox scopes, see the [Dropbox Permissions Documentation](https://www.dropbox.com/developers/reference/oauth-guide#scopes).\n\n## Usage Examples\n\n```typescript\n// List files in root directory\nawait mcp.useTool(\"dbx-mcp-server\", \"list_files\", { path: \"\" });\n\n// Upload a file\nawait mcp.useTool(\"dbx-mcp-server\", \"upload_file\", {\n  path: \"/test.txt\",\n  content: Buffer.from(\"Hello World\").toString(\"base64\"),\n});\n\n// Search for files\nawait mcp.useTool(\"dbx-mcp-server\", \"search_file_db\", {\n  query: \"report\",\n  path: \"/Documents\",\n  max_results: 10,\n});\n```\n\n## Development\n\nBuilt with:\n\n- TypeScript\n- Model Context Protocol SDK\n- Dropbox SDK v10.34.0\n- Dropbox API v2\n\n## License\n\nMIT License\n\nCopyright (c) 2025 MCP Server Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "dropbox",
        "dbx",
        "files",
        "dropbox managing",
        "essential dropbox",
        "dropbox functionalities"
      ],
      "category": "file-management"
    },
    "andredezzy--deep-directory-tree-mcp": {
      "owner": "andredezzy",
      "name": "deep-directory-tree-mcp",
      "url": "https://github.com/andredezzy/deep-directory-tree-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/andredezzy.webp",
      "description": "Visualizes and analyzes directory structures with real-time updates, configurable depth, and smart exclusions. Enhances project navigation and organization insights for AI assistants.",
      "stars": 11,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-25T14:17:26Z",
      "readme_content": "# Deep Directory Tree MCP 🌳\n\n[![Smithery Tool Calls](https://smithery.ai/badge/deep-directory-tree-mcp)](https://smithery.ai/server/deep-directory-tree-mcp)\n[![NPM Version](https://img.shields.io/npm/v/%40andredezzy%2Fdeep-directory-tree-mcp.svg)](https://npmjs.org/package/@andredezzy/deep-directory-tree-mcp)\n[![NPM Downloads](https://img.shields.io/npm/dm/%40andredezzy%2Fdeep-directory-tree-mcp)](https://npmjs.org/package/@andredezzy/deep-directory-tree-mcp)\n\nA powerful Model Context Protocol (MCP) implementation for visualizing and analyzing directory structures. Why? Now you can let AI assistants understand and navigate your project structure efficiently, enabling smarter code navigation and project organization insights.\n\nBuilt with:\n\n- [Anthropic MCP](https://docs.anthropic.com/claude/docs/mcp-getting-started)\n- [Cursor](https://cursor.sh)\n\n## Features\n\n- Deep directory tree visualization\n- Configurable depth-based tree generation\n- Smart pattern-based file/directory exclusion\n- Clean and readable tree output format\n- Real-time directory structure updates\n- Targeted directory analysis\n\n**DEMO:**\n\n\n\n## Quick Start\n\n### Prerequisites\n\n- [Node.js](https://nodejs.org) (v18 or higher)\n\n### Smithery Installation\n\nThe easiest way to get started is using [Smithery](https://smithery.ai/server/deep-directory-tree-mcp):\n\n```bash\nnpx -y @smithery/cli install @andredezzy/deep-directory-tree-mcp --client cursor\n```\n\n### Manual Installation\n\n#### Cursor IDE Setup\n\n1. Open Cursor Settings → MCP → Add new MCP server\n2. Configure with these settings:\n\n   ```json\n   {\n     \"deep-directory-tree\": {\n       \"command\": \"npx\",\n       \"args\": [\"-y\", \"@andredezzy/deep-directory-tree-mcp\"]\n     }\n   }\n   ```\n\n#### Claude Desktop Setup\n\nAdd the following to your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"deep-directory-tree\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@andredezzy/deep-directory-tree-mcp\"]\n    }\n  }\n}\n```\n\n## Usage\n\nCommon commands for AI assistants:\n\n- \"Show me the directory structure\"\n- \"Visualize project tree up to depth 4\"\n- \"Show files excluding test directories\"\n\n## Development\n\n### Prerequisites\n\n- [Bun Runtime](https://bun.sh) (required)\n\n```bash\n# Clone the repository\ngit clone https://github.com/andredezzy/deep-directory-tree-mcp.git\ncd deep-directory-tree-mcp\n\n# Install dependencies\nbun install\n\n# Build the project\nbun run build\n```\n\n### Development Manual Installation\n\n#### Cursor IDE Setup\n\n1. Open Cursor Settings → MCP → Add new MCP server\n2. Configure with these settings:\n\n   ```json\n   {\n     \"deep-directory-tree\": {\n       \"command\": \"node\",\n       \"args\": [\"ABSOLUTE_PATH_TO_MCP_SERVER/bin/deep-directory-tree.js\"]\n     }\n   }\n   ```\n\n#### Claude Desktop Setup\n\nAdd the following to your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"deep-directory-tree\": {\n      \"command\": \"node\",\n      \"args\": [\"ABSOLUTE_PATH_TO_MCP_SERVER/bin/deep-directory-tree.js\"]\n    }\n  }\n}\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit changes (`git commit -m 'Add feature'`)\n4. Push to branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## Support\n\nNeed help? Try these resources:\n\n- [Open an issue](https://github.com/andredezzy/deep-directory-tree-mcp/issues)\n- [FAQ Wiki](https://github.com/andredezzy/deep-directory-tree-mcp/wiki/FAQ)\n- [Documentation](https://github.com/andredezzy/deep-directory-tree-mcp/wiki)\n\n## License\n\nMIT License - see [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "directory",
        "tree",
        "ai",
        "deep directory",
        "directory tree",
        "directory structures"
      ],
      "category": "file-management"
    },
    "arathald--mcp-editor": {
      "owner": "arathald",
      "name": "mcp-editor",
      "url": "https://github.com/arathald/mcp-editor",
      "imageUrl": "/freedevtools/mcp/pfp/arathald.webp",
      "description": "Edit files using a TypeScript MCP server, based on Anthropic's filesystem editing tools. It facilitates direct file manipulation while working with MCP protocols.",
      "stars": 7,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-28T21:04:00Z",
      "readme_content": "# mcp-editor\nThis is a direct port of [Anthropic's filesystem editing tools](https://github.com/anthropics/anthropic-quickstarts/blob/main/computer-use-demo/computer_use_demo/tools/edit.py) from their computer use demos to a TypeScript MCP server. It was written largely by Claude Sonnet 3.5 on Roo Cline (now Roo Code) with probably not quite enough direct supervision. I checked over the code and use this server every day, but there may be mistakes or AI weirdness.\n\nI recommend using this server along with [mcp-server-commands](https://github.com/g0t4/mcp-server-commands)\n\n<a href=\"https://glama.ai/mcp/servers/lnfcd9is5i\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/lnfcd9is5i/badge\" alt=\"mcp-editor MCP server\" /></a>\n\n### ***WARNING: This MCP server has NO access controls and relies entirely on your client's approval mechanisms. Use at your own risk. DO NOT automatically approve write operations, doing so basically gives the LLM permission to destroy your computer.***\n### ***WARNING: This MCP server is NOT actively maintained, and is provided for reference (for example creating your own MCP server with proper access controls). I may update it occasionally.***\n\n## Usage\nGet the files on your computer.\nRun:\n```\nnpm install\nnpm build\n```\n\nIf you're using the Claude desktop app, paste this into your config under \"mcpServers\", and edit the path to match where you put mcp-editor:\n```json\n{\n  \"mcpServers\":\n... your existing servers ...\n    \"mcp-editor\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/mcp-editor/dist/server.js\"]\n    }\n  }\n}\n```\n\nIf you're using [MCP Installer](https://github.com/anaisbetts/mcp-installer), you just need to provide your LLM with the path on your disk to mcp-editor.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "editor",
        "mcp",
        "files",
        "mcp editor",
        "typescript mcp",
        "edit files"
      ],
      "category": "file-management"
    },
    "bhouston--mcp-server-text-editor": {
      "owner": "bhouston",
      "name": "mcp-server-text-editor",
      "url": "https://github.com/bhouston/mcp-server-text-editor",
      "imageUrl": "/freedevtools/mcp/pfp/bhouston.webp",
      "description": "Manage and manipulate text files through a standardized API, enabling operations like viewing, editing, and creating files in various directories.",
      "stars": 28,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-01T08:23:56Z",
      "readme_content": "# Claude Text Editor MCP Server\n\n[![npm version](https://img.shields.io/npm/v/mcp-server-text-editor.svg)](https://www.npmjs.com/package/mcp-server-text-editor)\n[![CI Status](https://github.com/bhouston/mcp-server-text-editor/actions/workflows/tests.yml/badge.svg)](https://github.com/bhouston/mcp-server-text-editor/actions/workflows/tests.yml)\n[![Test Coverage](https://img.shields.io/badge/coverage-90%89-green)](https://github.com/bhouston/mcp-server-text-editor)\n\n<p align=\"center\">\n  <img src=\"https://mintlify.s3.us-west-1.amazonaws.com/mcp/logo/dark.svg\" alt=\"Model Context Protocol Logo\" width=\"200\"/>\n</p>\n\nAn open-source implementation of the Claude built-in text editor tool as a [Model Context Protocol](https://www.anthropic.com/news/model-context-protocol) (MCP) server. This package provides the same functionality as [Claude's built-in text editor tool](https://docs.anthropic.com/en/docs/build-with-claude/tool-use/text-editor-tool), allowing you to view, edit, and create text files through a standardized API.\n\n## Features\n\n- **Identical API to Claude's Text Editor**: Implements the exact same interface as Claude's built-in text editor tool\n- **MCP Server Implementation**: Follows the Model Context Protocol standard for AI tool integration\n- **File Operations**:\n  - View file contents with optional line range specification\n  - Create new files\n  - Replace text in existing files\n  - Insert text at specific line numbers\n  - Undo previous edits\n\n## Supported Claude Text Editor Versions\n\nThis package implements an equivalent tool to [the built-in Claude text editor tool](https://docs.anthropic.com/en/docs/build-with-claude/tool-use/text-editor-tool) versions:\n\n- `text_editor_20241022` (Claude 3.5 Sonnet)\n- `text_editor_20250124` (Claude 3.7 Sonnet)\n\nBut using the tool name 'text_editor' to avoid name conflicts with built-in Claude tools.\n\n## Installation\n\n```bash\n# Install from npm\nnpm install mcp-server-text-editor\n\n# Or with pnpm\npnpm add mcp-server-text-editor\n```\n\n## Usage\n\n### Starting the Server\n\n```bash\n# Using npx\nnpx -y mcp-server-text-editor\n\n# Or if installed globally\nmcp-server-text-editor\n```\n\n### Configuring in Claude Desktop\n\n```json\n{\n  \"mcpServers\": {\n    \"textEditor\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-server-text-editor\"]\n    }\n  }\n}\n```\n\n### Tool Commands\n\n#### View\n\nView the contents of a file or directory.\n\n```json\n{\n  \"command\": \"view\",\n  \"path\": \"/path/to/file.js\",\n  \"view_range\": [1, 10] // Optional: Show lines 1-10 only\n}\n```\n\n#### Create\n\nCreate a new file with the specified content.\n\n```json\n{\n  \"command\": \"create\",\n  \"path\": \"/path/to/file.js\",\n  \"file_text\": \"console.log('Hello, world!');\"\n}\n```\n\n#### String Replace\n\nReplace text in a file.\n\n```json\n{\n  \"command\": \"str_replace\",\n  \"path\": \"/path/to/file.js\",\n  \"old_str\": \"console.log('Hello, world!');\",\n  \"new_str\": \"console.log('Hello, Claude!');\"\n}\n```\n\n#### Insert\n\nInsert text at a specific line.\n\n```json\n{\n  \"command\": \"insert\",\n  \"path\": \"/path/to/file.js\",\n  \"insert_line\": 5,\n  \"new_str\": \"// This line was inserted by Claude\"\n}\n```\n\n#### Undo Edit\n\nRevert the last edit made to a file.\n\n```json\n{\n  \"command\": \"undo_edit\",\n  \"path\": \"/path/to/file.js\"\n}\n```\n\n## Development\n\n### Prerequisites\n\n- Node.js 18+\n- pnpm\n\n### Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/bhouston/mcp-server-text-editor.git\ncd mcp-server-text-editor\n\n# Install dependencies\npnpm install\n\n# Build the project\npnpm build\n```\n\n### Scripts\n\n- `pnpm build`: Build the TypeScript project\n- `pnpm lint`: Run ESLint with auto-fixing\n- `pnpm format`: Format code with Prettier\n- `pnpm clean`: Remove build artifacts\n- `pnpm clean:all`: Remove build artifacts and node_modules\n- `pnpm test`: Run tests\n- `pnpm test:coverage`: Run tests with coverage report\n\n### Testing\n\nThis project uses Vitest for testing.\n\nTo run the tests:\n\n```bash\n# Run all tests\npnpm test\n\n# Run tests with coverage report\npnpm test:coverage\n```\n\nThe test coverage report will be generated in the `coverage` directory.\n\n## License\n\nMIT\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "editor",
        "files",
        "file",
        "file management",
        "text editor",
        "text files"
      ],
      "category": "file-management"
    },
    "bsmi021--mcp-file-context-server": {
      "owner": "bsmi021",
      "name": "mcp-file-context-server",
      "url": "https://github.com/bsmi021/mcp-file-context-server",
      "imageUrl": "/freedevtools/mcp/pfp/bsmi021.webp",
      "description": "Enables LLMs to read, search, and analyze code files while providing advanced caching and real-time file watching capabilities. Facilitates file operations and code analysis to improve development workflows and quality metrics.",
      "stars": 31,
      "forks": 6,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-01T21:30:20Z",
      "readme_content": "# File Context Server\n[![smithery badge](https://smithery.ai/badge/@bsmi021/mcp-file-context-server)](https://smithery.ai/server/@bsmi021/mcp-file-context-server)\n\nA Model Context Protocol (MCP) server that provides file system context to Large Language Models (LLMs). This server enables LLMs to read, search, and analyze code files with advanced caching and real-time file watching capabilities.\n\n## Features\n\n- **File Operations**\n  - Read file and directory contents\n  - List files with detailed metadata\n  - Real-time file watching and cache invalidation\n  - Support for multiple file encodings\n  - Recursive directory traversal\n  - File type filtering\n\n- **Code Analysis**\n  - Cyclomatic complexity calculation\n  - Dependency extraction\n  - Comment analysis\n  - Quality metrics:\n    - Duplicate lines detection\n    - Long lines detection (>100 characters)\n    - Complex function identification\n    - Line counts (total, non-empty, comments)\n\n- **Smart Caching**\n  - LRU (Least Recently Used) caching strategy\n  - Automatic cache invalidation on file changes\n  - Size-aware caching with configurable limits\n  - Cache statistics and performance metrics\n  - Last read result caching for efficient searches\n\n- **Advanced Search**\n  - Regex pattern matching\n  - Context-aware results with configurable surrounding lines\n  - File type filtering\n  - Multi-pattern search support\n  - Cached result searching\n  - Exclusion patterns\n\n## Installation\n\n### Installing via Smithery\n\nTo install File Context Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@bsmi021/mcp-file-context-server):\n\n```bash\nnpx -y @smithery/cli install @bsmi021/mcp-file-context-server --client claude\n```\n\n### Manual Installation\n```bash\nnpm install @modelcontextprotocol/file-context-server\n```\n\n## Usage\n\n### Starting the Server\n\n```bash\nnpx file-context-server\n```\n\n### Available Tools\n\n1. **list_context_files**\n   - Lists files in a directory with detailed metadata\n\n   ```json\n   {\n     \"path\": \"./src\",\n     \"recursive\": true,\n     \"includeHidden\": false\n   }\n   ```\n\n2. **read_context**\n   - Reads file or directory contents with metadata\n\n   ```json\n   {\n     \"path\": \"./src/index.ts\",\n     \"encoding\": \"utf8\",\n     \"maxSize\": 1000000,\n     \"recursive\": true,\n     \"fileTypes\": [\"ts\", \"js\"]\n   }\n   ```\n\n3. **search_context**\n   - Searches for patterns in files with context\n\n   ```json\n   {\n     \"pattern\": \"function.*\",\n     \"path\": \"./src\",\n     \"options\": {\n       \"recursive\": true,\n       \"contextLines\": 2,\n       \"fileTypes\": [\"ts\"]\n     }\n   }\n   ```\n\n4. **analyze_code**\n   - Analyzes code files for quality metrics\n\n   ```json\n   {\n     \"path\": \"./src\",\n     \"recursive\": true,\n     \"metrics\": [\"complexity\", \"dependencies\", \"quality\"]\n   }\n   ```\n\n5. **cache_stats**\n   - Gets cache statistics and performance metrics\n\n   ```json\n   {\n     \"detailed\": true\n   }\n   ```\n\n## Error Handling\n\nThe server provides detailed error messages with specific error codes:\n\n- `FILE_NOT_FOUND`: File or directory does not exist\n- `PERMISSION_DENIED`: Access permission issues\n- `INVALID_PATH`: Invalid file path format\n- `FILE_TOO_LARGE`: File exceeds size limit\n- `ENCODING_ERROR`: File encoding issues\n- `UNKNOWN_ERROR`: Unexpected errors\n\n## Configuration\n\nEnvironment variables for customization:\n\n- `MAX_CACHE_SIZE`: Maximum number of cached entries (default: 1000)\n- `CACHE_TTL`: Cache time-to-live in milliseconds (default: 1 hour)\n- `MAX_FILE_SIZE`: Maximum file size in bytes for reading\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Build\nnpm run build\n\n# Run tests\nnpm test\n\n# Start in development mode\nnpm run dev\n```\n\n## License\n\nMIT\n\n## Contributing\n\nContributions are welcome! Please read our [Contributing Guide](CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.\n\n## Cross-Platform Path Compatibility\n\n**Note:** As of April 2025, all file and directory path handling in File Context Server has been updated for improved cross-platform compatibility (Windows, macOS, Linux):\n\n- All glob patterns use POSIX-style paths (forward slashes) internally, ensuring consistent file matching regardless of OS.\n- All file system operations (reading, writing, stat, etc.) use normalized absolute paths for reliability.\n- If you are developing or extending the server, use `path.posix.join` for glob patterns and `path.normalize` for file system access.\n- This change prevents issues with path separators and file matching on different operating systems.\n\nNo changes are required for end users, but developers should follow these conventions when contributing to the project.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "file",
        "bsmi021",
        "file management",
        "file context",
        "facilitates file"
      ],
      "category": "file-management"
    },
    "bsmi021--mcp-file-operations-server": {
      "owner": "bsmi021",
      "name": "mcp-file-operations-server",
      "url": "https://github.com/bsmi021/mcp-file-operations-server",
      "imageUrl": "/freedevtools/mcp/pfp/bsmi021.webp",
      "description": "Provides capabilities for basic and advanced file and directory manipulations, including monitoring for changes and tracking operation history. Supports streaming of large files and real-time updates for long-running tasks.",
      "stars": 18,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T06:21:46Z",
      "readme_content": "# File Operations MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@bsmi021/mcp-file-operations-server)](https://smithery.ai/server/@bsmi021/mcp-file-operations-server)\n\nA Model Context Protocol (MCP) server that provides enhanced file operation capabilities with streaming, patching, and change tracking support.\n\n<a href=\"https://glama.ai/mcp/servers/7b750si00d\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/7b750si00d/badge\" alt=\"File Operations Server MCP server\" />\n</a>\n\n## Features\n\n- **Basic File Operations**: Copy, read, write, move, and delete files\n- **Directory Operations**: Create, remove, and copy directories\n- **File Watching**: Monitor files and directories for changes\n- **Change Tracking**: Track and query file operation history\n- **Streaming Support**: Handle large files efficiently with streaming\n- **HTTP Interface**: Streamable HTTP interface with Server-Sent Events (SSE)\n- **Resource Support**: Access files and directories through MCP resources\n- **Progress Reporting**: Real-time progress updates for long operations\n- **Rate Limiting**: Protection against excessive requests\n- **Enhanced Security**: Path validation and input sanitization\n- **Robust Error Handling**: Comprehensive error handling and reporting\n- **Type Safety**: Full TypeScript support with strict type checking\n- **Docker Support**: Containerized deployment with volume mounting\n\n## Installation\n\n### Installing via Smithery\n\nTo install File Operations Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@bsmi021/mcp-file-operations-server):\n\n```bash\nnpx -y @smithery/cli install @bsmi021/mcp-file-operations-server --client claude\n```\n\n### Manual Installation\n```bash\nnpm install\n```\n\n### Docker Installation\n\nSee [DOCKER.md](./DOCKER.md) for comprehensive Docker setup instructions including local drive mounting for Windows and Linux.\n\n**Quick Docker Start:**\n```bash\n# Stdio transport (for MCP clients)\ndocker run -it --rm -v \"$(pwd):/workspace\" ghcr.io/bsmi021/mcp-file-operations-server\n\n# HTTP transport (for web/remote access)\ndocker run -it --rm -p 3001:3001 -v \"$(pwd):/workspace\" -e MCP_TRANSPORT=http ghcr.io/bsmi021/mcp-file-operations-server\n```\n\n## Usage\n\n### Transport Modes\n\nThe server supports two transport modes:\n\n#### 1. Stdio Transport (Default)\nFor direct integration with MCP clients like Claude Desktop:\n\n```bash\nnpm start\n```\n\n#### 2. HTTP Transport with SSE (New in v1.5)\nFor remote connections and web applications:\n\n```bash\nnpm run start:http\n```\n\nThe HTTP server provides:\n- **SSE Endpoint**: `GET http://localhost:3001/sse` - Establishes streaming connection\n- **Messages Endpoint**: `POST http://localhost:3001/messages` - Receives client messages  \n- **Health Check**: `GET http://localhost:3001/health` - Server status\n- **Sessions**: `GET http://localhost:3001/sessions` - Active connection info\n\n### Starting the Server\n\n#### Development Mode\n\n```bash\n# Stdio transport with auto-reload\nnpm run dev\n\n# HTTP transport with auto-reload\nnpm run dev:http\n```\n\n#### Production Mode\n\n```bash\n# Stdio transport\nnpm start\n\n# HTTP transport\nnpm run start:http\n\n# Custom port for HTTP\nnpm run start:http -- --port 8080\n```\n\n### Available Tools\n\n#### Basic File Operations\n\n- `copy_file`: Copy a file to a new location\n- `read_file`: Read content from a file\n- `write_file`: Write content to a file\n- `move_file`: Move/rename a file\n- `delete_file`: Delete a file\n- `append_file`: Append content to a file\n\n#### Directory Operations\n\n- `make_directory`: Create a directory\n- `remove_directory`: Remove a directory\n- `copy_directory`: Copy a directory recursively (with progress reporting)\n\n#### Watch Operations\n\n- `watch_directory`: Start watching a directory for changes\n- `unwatch_directory`: Stop watching a directory\n\n#### Change Tracking\n\n- `get_changes`: Get the list of recorded changes\n- `clear_changes`: Clear all recorded changes\n\n### Available Resources\n\n#### Static Resources\n\n- `file:///recent-changes`: List of recent file system changes\n\n#### Resource Templates\n\n- `file://{path}`: Access file contents\n- `metadata://{path}`: Access file metadata\n- `directory://{path}`: List directory contents\n\n### Example Usage\n\n#### Using Stdio Transport (MCP Clients)\n\n```typescript\n// Copy a file\nawait fileOperations.copyFile({\n    source: 'source.txt',\n    destination: 'destination.txt',\n    overwrite: false\n});\n\n// Watch a directory\nawait fileOperations.watchDirectory({\n    path: './watched-dir',\n    recursive: true\n});\n\n// Access file contents through resource\nconst resource = await mcp.readResource('file:///path/to/file.txt');\nconsole.log(resource.contents[0].text);\n\n// Copy directory with progress tracking\nconst result = await fileOperations.copyDirectory({\n    source: './source-dir',\n    destination: './dest-dir',\n    overwrite: false\n});\n// Progress token in result can be used to track progress\nconsole.log(result.progressToken);\n```\n\n#### Using HTTP Transport (Web/Remote)\n\n**Connecting via JavaScript:**\n\n```javascript\n// Establish SSE connection\nconst eventSource = new EventSource('http://localhost:3001/sse');\nlet sessionId = null;\n\neventSource.onopen = function() {\n    console.log('Connected to MCP server');\n};\n\neventSource.onmessage = function(event) {\n    const message = JSON.parse(event.data);\n    \n    // Extract session ID from first message\n    if (!sessionId && message.sessionId) {\n        sessionId = message.sessionId;\n    }\n    \n    console.log('Received:', message);\n};\n\n// Send a message to the server\nasync function sendMessage(method, params) {\n    const message = {\n        jsonrpc: '2.0',\n        id: Date.now(),\n        method: method,\n        params: params\n    };\n    \n    const response = await fetch('http://localhost:3001/messages', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-Session-ID': sessionId\n        },\n        body: JSON.stringify(message)\n    });\n    \n    return response.json();\n}\n\n// Example: List tools\nsendMessage('tools/list', {});\n\n// Example: Read a file\nsendMessage('tools/call', {\n    name: 'read_file',\n    arguments: { path: '/workspace/example.txt' }\n});\n```\n\n**Using curl for testing:**\n\n```bash\n# Start SSE connection in background\ncurl -N http://localhost:3001/sse &\n\n# Check server health\ncurl http://localhost:3001/health\n\n# List active sessions\ncurl http://localhost:3001/sessions\n```\n\n**Interactive Web Client:**\n\nA complete interactive example is available at [`examples/http-client.html`](./examples/http-client.html). Open this file in a web browser to test the HTTP interface with a user-friendly GUI.\n\n## What's New in v1.5\n\n### MCP SDK v1.5 Upgrade\n- **Streamable HTTP Interface**: New HTTP transport with Server-Sent Events (SSE)\n- **Enhanced API**: Upgraded to MCP SDK v1.5 with improved zod-based schemas\n- **Multiple Connections**: Support for simultaneous HTTP connections with session management\n- **Better Type Safety**: Improved TypeScript integration and error handling\n\n### Streaming Features\n- **Large File Support**: Efficient streaming for large file operations\n- **Real-time Progress**: Progress updates via SSE for long-running operations\n- **Session Management**: Multiple client connections with isolated sessions\n- **HTTP API**: RESTful endpoints alongside traditional MCP protocol\n\n## Docker Support\n\n### Quick Start with Docker\n\n```bash\n# Build the image\ndocker build -t mcp-file-operations-server .\n\n# Run with stdio (for MCP clients)\ndocker run -it --rm -v \"$(pwd):/workspace\" mcp-file-operations-server\n\n# Run with HTTP interface\ndocker run -it --rm -p 3001:3001 -v \"$(pwd):/workspace\" -e MCP_TRANSPORT=http mcp-file-operations-server\n```\n\n### Volume Mounting\n\n**Windows:**\n```cmd\ndocker run -it --rm -v \"C:\\MyProject:/workspace\" -p 3001:3001 -e MCP_TRANSPORT=http mcp-file-operations-server\n```\n\n**Linux/macOS:**\n```bash\ndocker run -it --rm -v \"/home/user/project:/workspace\" -p 3001:3001 -e MCP_TRANSPORT=http mcp-file-operations-server\n```\n\nFor comprehensive Docker setup instructions including local drive mounting for Windows and Linux, see [DOCKER.md](./DOCKER.md).\n\n## Rate Limits\n\nThe server implements rate limiting to prevent abuse:\n\n- **Tools**: 100 requests per minute\n- **Resources**: 200 requests per minute\n- **Watch Operations**: 20 operations per minute\n\nRate limit errors include a retry-after period in the error message.\n\n## Security Features\n\n### Path Validation\n\nAll file paths are validated to prevent directory traversal attacks:\n\n- No parent directory references (`../`)\n- Proper path normalization\n- Input sanitization\n\n### Resource Protection\n\n- Rate limiting on all operations\n- Proper error handling and logging\n- Input validation on all parameters\n- Safe resource cleanup\n\n## Progress Reporting\n\nLong-running operations like directory copying provide progress updates:\n\n```typescript\ninterface ProgressUpdate {\n    token: string | number;\n    message: string;\n    percentage: number;\n}\n```\n\nProgress can be tracked through the progress token returned in the operation result.\n\n## Development\n\n### Building\n\n```bash\nnpm run build\n```\n\n### Linting\n\n```bash\nnpm run lint\n```\n\n### Formatting\n\n```bash\nnpm run format\n```\n\n### Testing\n\n```bash\nnpm test\n```\n\n## Configuration\n\n### Environment Variables\n\n| Variable | Default | Description |\n|----------|---------|-------------|\n| `MCP_TRANSPORT` | `stdio` | Transport mode: `stdio` or `http` |\n| `MCP_HTTP_PORT` | `3001` | Port for HTTP transport |\n\n### Transport Selection\n\n- **Stdio**: Best for MCP clients like Claude Desktop, direct integration\n- **HTTP**: Best for web applications, remote access, development/testing\n\nThe server can be configured through various settings:\n\n- **Rate Limiting**: Configure request limits and windows\n- **Progress Reporting**: Control update frequency and detail level\n- **Resource Access**: Configure resource permissions and limits\n- **Security Settings**: Configure path validation rules\n- **Change Tracking**: Set retention periods and storage options\n- **Watch Settings**: Configure debounce times and recursive watching\n\n## Error Handling\n\nThe server provides detailed error information through the `FileOperationError` class and MCP error codes:\n\n### Standard MCP Error Codes\n\n- `InvalidRequest`: Invalid parameters or request format\n- `MethodNotFound`: Unknown tool or resource requested\n- `InvalidParams`: Invalid parameters (e.g., path validation failure)\n- `InternalError`: Server-side errors\n\n### Custom Error Types\n\n- File operation failures\n- Rate limit exceeded\n- Path validation errors\n- Resource access errors\n\nEach error includes:\n\n- Specific error code\n- Detailed error message\n- Relevant metadata (file paths, limits, etc.)\n- Stack traces in development mode\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "bsmi021",
        "files",
        "file",
        "file management",
        "management bsmi021",
        "bsmi021 mcp"
      ],
      "category": "file-management"
    },
    "bsmi021--mcp-filesystem-server": {
      "owner": "bsmi021",
      "name": "mcp-filesystem-server",
      "url": "https://github.com/bsmi021/mcp-filesystem-server",
      "imageUrl": "/freedevtools/mcp/pfp/bsmi021.webp",
      "description": "Perform file system operations, analysis, and manipulation through a standardized tool interface for enhanced application capabilities.",
      "stars": 5,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-19T02:29:42Z",
      "readme_content": "# Filesystem MCP Server\n\nA Model Context Protocol (MCP) server implementation providing file system operations, analysis, and manipulation capabilities through a standardized tool interface.\n\n## Architecture\n\nThe server is built on the MCP SDK and organized into distinct layers:\n\n```mermaid\ngraph TD\n    A[MCP Server Layer] --> B[Tool Registry]\n    B --> C[Operations Layer]\n    C --> D[File System Operations]\n    C --> E[Analysis Operations]\n    C --> F[Stream Operations]\n```\n\n### Components\n- **Server Layer**: Handles MCP protocol communication and tool dispatch\n- **Tool Registry**: Manages tool registration and execution\n- **Operations Layer**: Implements core functionality\n- **File System Interface**: Provides safe file system access\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone <repository-url>\ncd filesystem-server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the server:\n```bash\nnpm run build\n```\n\n4. Configure MCP settings (cline_mcp_settings.json):\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/filesystem-server/build/index.js\"]\n    }\n  }\n}\n```\n\n## Tool Reference\n\n### Directory Operations\n\n#### list_directory\nLists directory contents with metadata.\n\n```typescript\ninterface ListDirectoryParams {\n    path: string;       // Directory path\n    recursive?: boolean; // List recursively (default: false)\n}\n\ninterface ListDirectoryResult {\n    entries: {\n        name: string;\n        path: string;\n        isDirectory: boolean;\n        size: number;\n        created: string;\n        modified: string;\n        accessed: string;\n        mode: string;\n    }[];\n}\n```\n\n#### create_directory\nCreates a new directory.\n\n```typescript\ninterface CreateDirectoryParams {\n    path: string;       // Directory path\n    recursive?: boolean; // Create parent directories (default: true)\n}\n```\n\n### File Operations\n\n#### read_file\nReads file content with encoding support.\n\n```typescript\ninterface ReadFileParams {\n    path: string;     // File path\n    encoding?: string; // File encoding (default: 'utf8')\n}\n```\n\n#### write_file\nWrites content to a file.\n\n```typescript\ninterface WriteFileParams {\n    path: string;     // File path\n    content: string;  // Content to write\n    encoding?: string; // File encoding (default: 'utf8')\n}\n```\n\n#### append_file\nAppends content to a file.\n\n```typescript\ninterface AppendFileParams {\n    path: string;     // File path\n    content: string;  // Content to append\n    encoding?: string; // File encoding (default: 'utf8')\n}\n```\n\n### Analysis Operations\n\n#### analyze_text\nAnalyzes text file properties.\n\n```typescript\ninterface AnalyzeTextParams {\n    path: string; // File path\n}\n\ninterface AnalyzeTextResult {\n    lineCount: number;\n    wordCount: number;\n    charCount: number;\n    encoding: string;\n    mimeType: string;\n}\n```\n\n#### calculate_hash\nCalculates file hash using specified algorithm.\n\n```typescript\ninterface CalculateHashParams {\n    path: string;           // File path\n    algorithm?: 'md5' | 'sha1' | 'sha256' | 'sha512'; // Hash algorithm\n}\n\ninterface CalculateHashResult {\n    hash: string;\n    algorithm: string;\n}\n```\n\n#### find_duplicates\nIdentifies duplicate files in a directory.\n\n```typescript\ninterface FindDuplicatesParams {\n    path: string; // Directory path\n}\n\ninterface FindDuplicatesResult {\n    duplicates: {\n        hash: string;\n        size: number;\n        files: string[];\n    }[];\n}\n```\n\n### Compression Operations\n\n#### create_zip\nCreates a ZIP archive.\n\n```typescript\ninterface CreateZipParams {\n    files: string[];  // Files to include\n    output: string;   // Output ZIP path\n}\n```\n\n#### extract_zip\nExtracts a ZIP archive.\n\n```typescript\ninterface ExtractZipParams {\n    path: string;    // ZIP file path\n    output: string;  // Output directory\n}\n```\n\n## Error Handling\n\nThe server uses standard MCP error codes:\n\n```typescript\nenum ErrorCode {\n    ParseError = -32700,\n    InvalidRequest = -32600,\n    MethodNotFound = -32601,\n    InvalidParams = -32602,\n    InternalError = -32603\n}\n```\n\nError responses include:\n- Error code\n- Human-readable message\n- Additional context when available\n\nExample error:\n```json\n{\n    \"code\": -32602,\n    \"message\": \"File not found: /path/to/file.txt\"\n}\n```\n\n## Development\n\n### Project Structure\n```\nsrc/\n├── operations/     # Core operations implementation\n├── tools/         # MCP tool definitions and handlers\n├── __tests__/     # Test suites\n├── index.ts       # Entry point\n├── server.ts      # MCP server setup\n├── types.ts       # Type definitions\n└── utils.ts       # Utility functions\n```\n\n### Running Tests\n\nRun the test suite:\n```bash\nnpm test\n```\n\nRun with coverage:\n```bash\nnpm run test:coverage\n```\n\n### Development Mode\n\nRun in watch mode:\n```bash\nnpm run watch\n```\n\n### Code Quality\n\nLint the codebase:\n```bash\nnpm run lint\n```\n\nType check:\n```bash\nnpm run type-check\n```\n\n## Dependencies\n\nCore dependencies:\n- @modelcontextprotocol/sdk: MCP server implementation\n- file-type: File type detection\n- mime-types: MIME type lookup\n- crypto-js: File hashing\n- archiver: ZIP creation\n- extract-zip: ZIP extraction\n- iconv-lite: Text encoding\n- chardet: Encoding detection\n\nDevelopment dependencies:\n- typescript: Type system\n- jest: Testing\n- eslint: Linting\n- prettier: Formatting\n- ts-node: TypeScript execution\n- nodemon: Development server\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch\n3. Write tests for new features\n4. Ensure all tests pass\n5. Submit a pull request\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "bsmi021",
        "file",
        "mcp filesystem",
        "file management",
        "filesystem server"
      ],
      "category": "file-management"
    },
    "bunasQ--fs": {
      "owner": "bunasQ",
      "name": "fs",
      "url": "https://github.com/bunasQ/fs",
      "imageUrl": "/freedevtools/mcp/pfp/bunasQ.webp",
      "description": "Manage and interact with file systems by accessing, reading, and manipulating files. This server enhances application capabilities through streamlined file operations.",
      "stars": 13,
      "forks": 4,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-05T00:09:44Z",
      "readme_content": "# FS MCP\n\nA file system Model Context Protocol (MCP) server that enables file reading capabilities.\n\n## Installation\n\nYou can run this package directly using npx:\n\n```bash\nnpx -y @bunas/fs-mcp@latest\n```\n\n## Usage with API Key\n\nYou can provide an API key when running the package:\n\n```bash\nnpx -y @bunas/fs-mcp@latest --API_KEY=\"your_api_key_here\"\n```\n\nThe API key can also be provided as an environment variable:\n\n```bash\nAPI_KEY=\"your_api_key_here\" npx -y @bunas/fs-mcp@latest\n```\n\n## Features\n\n- Seamless file reading via MCP\n- Command-line API key configuration\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "bunasq",
        "fs",
        "file management",
        "file systems",
        "bunasq fs"
      ],
      "category": "file-management"
    },
    "calebmwelsh--file-system-mcp-server": {
      "owner": "calebmwelsh",
      "name": "file-system-mcp-server",
      "url": "https://github.com/calebmwelsh/file-system-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/calebmwelsh.webp",
      "description": "Manage files and directories through a structured API for automated operations and system integration. Supports extensive file system management tasks on Windows and basic operations on macOS/Linux.",
      "stars": 1,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-06-28T18:48:23Z",
      "readme_content": "# File System MCP Server\n\nA powerful file system management server built with FastMCP that provides a comprehensive set of tools for file and directory operations. This server allows you to perform various file system operations through a structured API, making it ideal for automation and integration with other systems.\n\n## Platform Support\n\nThe server is designed to work across different operating systems, but with varying levels of functionality:\n\n### Windows\n- Full feature support\n- Drive listing\n- Special folders access\n- Windows-specific path handling\n- Detailed system information\n\n### macOS/Linux\n- Basic file operations\n- Directory operations\n- File search and metadata\n- Basic system information\n- Note: Some Windows-specific features are not available\n\n## Future Implementation\n\n### Planned macOS Support\n- Native path handling for macOS\n- macOS-specific system information retrieval\n- Integration with macOS file system features\n- Support for macOS-specific file attributes\n- Implementation of macOS-specific utilities (similar to windows_utils.py)\n\n### Planned Linux Support\n- Native path handling for Linux\n- Linux-specific system information retrieval\n- Integration with Linux file system features\n- Support for Linux file permissions and attributes\n- Implementation of Linux-specific utilities\n\n### Cross-Platform Improvements\n- Unified path handling system\n- Platform-agnostic drive detection\n- Consistent system information API\n- Standardized file attributes across platforms\n- Cross-platform file system event monitoring\n- Universal file collection system\n\n### Timeline\n- Phase 1: Basic cross-platform compatibility improvements\n- Phase 2: Platform-specific feature implementations\n- Phase 3: Advanced cross-platform features\n- Phase 4: Performance optimizations and refinements\n\n## Features\n\n### File Operations\n- Copy files with backup support\n- Move files with backup support\n- Delete files with safety checks\n- Read file contents\n- Write file contents\n- Get file information (size, creation time, modification time)\n- Search files by name pattern\n- Create file collections for organizing related files\n\n### Directory Operations\n- List directory contents\n- Create directories\n- Delete directories\n- List directories recursively (tree-like structure)\n- Search directories by name pattern\n\n### System Information\n- Get system information (OS, CPU, memory, disk usage)\n- Get disk information (total space, used space, free space)\n- Get directory information (file count, total size)\n\n## Project Structure\n\n```\nfile-system-mcp-server/\n├── fs_server.py            # Main server implementation\n├── windows_utils.py        # Windows-specific utilities (Windows only)\n├── requirements.txt        # Project dependencies\n└── test_prompts_example.md # Example test prompts\n```\n\n### Collections Storage\n\nCollections can be stored in any directory specified by the user. If no storage location is specified, collections will be stored in a default location within the project's `data/collections` directory.\n\nExample usage:\n```python\n# Store in default location\ncreate_collection(\"my_collection\", [\"file1.txt\", \"file2.txt\"])\n\n# Store in custom location\ncreate_collection(\"my_collection\", [\"file1.txt\", \"file2.txt\"], storage_path=\"/path/to/store\")\n```\n\n## Dependencies\n\n### Required Dependencies\n- FastMCP\n- Pydantic\n- pywin32 (Windows only)\n- WMI (Windows only)\n\nTo install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n## Setup\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/calebmwelsh/file-system-mcp-server.git\ncd file-system-mcp-server\n```\n\n2. Create and activate a virtual environment:\n```bash\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n```\n\n3. Install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n## Usage\n\nFor detailed MCP configuration instructions across different development environments (Claude, Cursor, Windsurf), visit:\n[MCP Configuration Guide](https://calebmwelsh.github.io/Configure-MCP/)\n\n### Integration with Claude\n\nTo integrate the File System MCP server with Claude, add the following to your `claude_desktop_config.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"file-system\": {\n      \"command\": \"/absolute/path/to/python\",\n      \"args\": [\n        \"/absolute/path/to/file-system-mcp-server/fs_server.py\"\n      ]\n    }\n  }\n}\n```\n\n#### Finding Your Python Path\n\nTo find your Python executable path, use the following command:\n\n**Windows (PowerShell):**\n```powershell\n(Get-Command python).Source\n```\n\n**Windows (Command Prompt/Terminal):**\n```cmd\nwhere python\n```\n\n**Linux/macOS (Terminal):**\n```bash\nwhich python\n```\n\nReplace `/absolute/path/to/python` with the output from the appropriate command above.\n\n#### Example Configuration\n\nFor Windows, your configuration might look like this:\n```json\n{\n  \"mcpServers\": {\n    \"file-system\": {\n      \"command\": \"C:\\\\Users\\\\YourUsername\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe\",\n      \"args\": [\n        \"C:\\\\Users\\\\YourUsername\\\\Documents/file-system-mcp-server/fs_server.py\"\n      ]\n    }\n  }\n}\n```\n\nFor macOS/Linux:\n```json\n{\n  \"mcpServers\": {\n    \"file-system\": {\n      \"command\": \"/usr/local/bin/python3\",\n      \"args\": [\n        \"/Users/YourUsername/Documents/file-system-mcp-server/fs_server.py\"\n      ]\n    }\n  }\n}\n```\n\nAfter adding the configuration:\n1. Save the `claude_desktop_config.json` file\n2. Restart Claude\n3. You can now use the file system tools by asking Claude to perform file operations\n\n## Available Tools\n\n### File Operations\n- `copy_file`: Copy a file with optional backup\n- `move_file`: Move a file with optional backup\n- `delete_file`: Delete a file with safety checks\n- `read_file`: Read file contents\n- `write_file`: Write contents to a file\n- `get_file_info`: Get detailed file information\n- `search_files`: Search files by name pattern\n- `create_collection`: Create a collection of files\n\n### Directory Operations\n- `list_directory`: List directory contents\n- `create_directory`: Create a new directory\n- `delete_directory`: Delete a directory\n- `list_directory_recursively`: Show directory structure in tree format\n- `search_directories`: Search directories by name pattern\n\n### System Information\n- `get_system_info`: Get system information\n- `get_disk_info`: Get disk usage information\n- `get_directory_info`: Get directory statistics\n\n## Known Issues\n\nThe following features are currently experiencing issues and may not work as expected:\n\n1. **Delete File Function**\n   - The `delete_file` function may fail to properly delete files in some cases\n   - Users are advised to verify file deletion manually or use alternative methods when critical\n   - Issue is under investigation and will be fixed in a future update\n\n2. **List Drives Function**\n   - The `list_drives` function may not correctly detect or display all available drives\n   - Some drives may be missing from the list or show incorrect information\n   - This is a known limitation and will be addressed in future updates\n\n3. **Platform-Specific Limitations**\n   - Windows-specific features are not available on macOS/Linux\n   - Some path handling may differ between platforms\n   - System information retrieval varies by platform\n\n## Error Handling\n\nThe server includes comprehensive error handling for:\n- Invalid file paths\n- File/directory not found\n- Permission issues\n- Disk space limitations\n- Invalid operations\n- Platform-specific errors\n\n## Security\n\n- All file operations include path validation\n- Backup files are created before destructive operations\n- System information access is restricted to safe operations\n- File operations are performed with proper error handling\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgments\n\n- Built with FastMCP\n- Uses Pydantic for data validation\n- Inspired by modern file system management tools\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "macos",
        "file",
        "file management",
        "manage files",
        "file mcp"
      ],
      "category": "file-management"
    },
    "codyde--mcp-file-tool": {
      "owner": "codyde",
      "name": "mcp-file-tool",
      "url": "https://github.com/codyde/mcp-file-tool",
      "imageUrl": "/freedevtools/mcp/pfp/codyde.webp",
      "description": "Provides file system operations through a standardized API, enabling functionalities such as creating, reading, and listing files. Includes performance monitoring and error tracking integration.",
      "stars": 0,
      "forks": 2,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-02-26T07:37:07Z",
      "readme_content": "# MCP File Server\n\nA Model Context Protocol (MCP) server implementation providing file system operations through a standardized interface.\n\n## Overview\n\nThe MCP File Server enables AI models to perform file operations on the local file system through a standardized API. It's built using the [Model Context Protocol](https://github.com/ModelContextProtocol/mcp) SDK and provides tools for reading, creating, and listing files.\n\n## Features\n\n- **Create Files**: Create new files with specified content\n- **Read Files**: Read the contents of existing files\n- **List Directory Contents**: List files and directories with detailed information\n- **Performance Monitoring**: Built-in Sentry integration for error tracking and performance monitoring\n\n## Installation\n\n```bash\nnpm install\n```\n\n## Usage\n\nStart the MCP File Server:\n\n```bash\nnode src/index.js\n```\n\nThe server communicates through stdin/stdout using the MCP protocol.\n\n## Available Tools\n\n### createfile\n\nCreates a new file at the specified path with the provided content.\n\n**Parameters:**\n- `filePath`: Path where the file should be created\n- `content`: Content to write to the file\n\n**Returns:**\n- Success message with file path and size information\n\n### readfile\n\nReads the content of a file at the specified path.\n\n**Parameters:**\n- `filePath`: Path to the file to read\n\n**Returns:**\n- The content of the file\n\n### listfiles\n\nLists files and directories at the specified path.\n\n**Parameters:**\n- `path`: Directory path to list contents from\n\n**Returns:**\n- A markdown table containing file names, sizes, and types\n\n## Environment Variables\n\n- `SENTRY_DSN`: Sentry Data Source Name for error tracking (optional)\n\n## Dependencies\n\n- `@modelcontextprotocol/sdk`: The MCP SDK package\n- `zod`: Schema validation\n- `@sentry/node`: Error tracking and performance monitoring\n\n## Examples\n\nExamples of how to call these tools through the MCP protocol:\n\n```json\n{\n  \"name\": \"createfile\",\n  \"params\": {\n    \"filePath\": \"example/test.txt\",\n    \"content\": \"Hello, world!\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"readfile\",\n  \"params\": {\n    \"filePath\": \"example/test.txt\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"listfiles\",\n  \"params\": {\n    \"path\": \"example\"\n  }\n}\n``` ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "file",
        "mcp",
        "file tool",
        "mcp file",
        "file management"
      ],
      "category": "file-management"
    },
    "cyanheads--filesystem-mcp-server": {
      "owner": "cyanheads",
      "name": "filesystem-mcp-server",
      "url": "https://github.com/cyanheads/filesystem-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/cyanheads.webp",
      "description": "Provides capabilities for secure interaction with the local filesystem, enabling reading, writing, and management of files and directories. Supports advanced file operations and targeted updates to enhance AI workflows.",
      "stars": 21,
      "forks": 15,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-09-24T16:36:18Z",
      "readme_content": "# Filesystem MCP Server\n\n[![TypeScript](https://img.shields.io/badge/TypeScript-^5.8.3-blue.svg)](https://www.typescriptlang.org/)\n[![Model Context Protocol](https://img.shields.io/badge/MCP-^1.12.0-green.svg)](https://modelcontextprotocol.io/)\n[![Version](https://img.shields.io/badge/Version-1.0.4-blue.svg)]()\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Status](https://img.shields.io/badge/Status-Beta-orange.svg)]()\n[![GitHub](https://img.shields.io/github/stars/cyanheads/filesystem-mcp-server?style=social)](https://github.com/cyanheads/filesystem-mcp-server)\n\n**Empower your AI agents with robust, platform-agnostic file system capabilities, now with STDIO & Streamable HTTP transport options.**\n\nThis [Model Context Protocol (MCP)](https://modelcontextprotocol.io/) server provides a secure and reliable interface for AI agents to interact with the local filesystem. It enables reading, writing, updating, and managing files and directories, backed by a production-ready TypeScript foundation featuring comprehensive logging, error handling, security measures, and now supporting both **STDIO and HTTP transports**.\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Features](#features)\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Usage with MCP Clients](#usage-with-mcp-clients)\n- [Available Tools](#available-tools)\n- [Project Structure](#project-structure)\n- [Development](#development)\n- [License](#license)\n\n## Overview\n\nThe Model Context Protocol (MCP) is a standard framework allowing AI models to securely interact with external tools and data sources (resources). This server implements the MCP standard to expose essential filesystem operations as tools, enabling AI agents to:\n\n- Read and analyze file contents.\n- Create, modify, or overwrite files.\n- Manage directories and file paths.\n- Perform targeted updates within files.\n\nBuilt with TypeScript, the server emphasizes type safety, modularity, and robust error handling, making it suitable for reliable integration into AI workflows. It now supports both STDIO for direct process communication and HTTP for network-based interactions.\n\n### Architecture\n\nThe server employs a layered architecture for clarity and maintainability:\n\n```mermaid\nflowchart TB\n    subgraph TransportLayer[\"Transport Layer\"]\n        direction LR\n        STDIO[\"STDIO Transport\"]\n        HTTP[\"HTTP Transport (Express, JWT Auth)\"]\n    end\n\n    subgraph APILayer[\"API Layer\"]\n        direction LR\n        MCP[\"MCP Protocol Interface\"]\n        Val[\"Input Validation (Zod)\"]\n        PathSan[\"Path Sanitization\"]\n\n        MCP --> Val --> PathSan\n    end\n\n    subgraph CoreServices[\"Core Services\"]\n        direction LR\n        Config[\"Configuration (Zod-validated Env Vars)\"]\n        Logger[\"Logging (Winston, Context-aware)\"]\n        ErrorH[\"Error Handling (McpError, ErrorHandler)\"]\n        ServerLogic[\"MCP Server Logic\"]\n        State[\"Session State (Default Path)\"]\n\n        Config --> ServerLogic\n        Logger --> ServerLogic & ErrorH\n        ErrorH --> ServerLogic\n        State --> ServerLogic\n    end\n\n    subgraph ToolImpl[\"Tool Implementation\"]\n        direction LR\n        FSTools[\"Filesystem Tools\"]\n        Utils[\"Core Utilities (Internal, Security, Metrics, Parsing)\"]\n\n        FSTools --> ServerLogic\n        Utils -- Used by --> FSTools\n        Utils -- Used by --> CoreServices\n        Utils -- Used by --> APILayer\n    end\n\n    TransportLayer --> MCP\n    PathSan --> FSTools\n\n    classDef layer fill:#2d3748,stroke:#4299e1,stroke-width:3px,rx:5,color:#fff\n    classDef component fill:#1a202c,stroke:#a0aec0,stroke-width:2px,rx:3,color:#fff\n    class TransportLayer,APILayer,CoreServices,ToolImpl layer\n    class STDIO,HTTP,MCP,Val,PathSan,Config,Logger,ErrorH,ServerLogic,State,FSTools,Utils component\n```\n\n- **Transport Layer**: Handles communication via STDIO or HTTP (with Express.js and JWT authentication).\n- **API Layer**: Manages MCP communication, validates inputs using Zod, and sanitizes paths.\n- **Core Services**: Oversees configuration (Zod-validated environment variables), context-aware logging, standardized error reporting, session state (like the default working directory), and the main MCP server instance.\n- **Tool Implementation**: Contains the specific logic for each filesystem tool, leveraging a refactored set of shared utilities categorized into internal, security, metrics, and parsing modules.\n\n## Features\n\n- **Comprehensive File Operations**: Tools for reading, writing, listing, deleting, moving, and copying files and directories.\n- **Targeted Updates**: `update_file` tool allows precise search-and-replace operations within files, supporting plain text and regex.\n- **Session-Aware Path Management**: `set_filesystem_default` tool establishes a default working directory for resolving relative paths during a session.\n- **Dual Transport Support**:\n  - **STDIO**: For direct, efficient communication when run as a child process.\n  - **HTTP**: For network-based interaction, featuring RESTful endpoints, Server-Sent Events (SSE) for streaming, and JWT-based authentication.\n- **Security First**:\n  - Built-in path sanitization prevents directory traversal attacks.\n  - JWT authentication for HTTP transport.\n  - Input validation with Zod.\n- **Robust Foundation**: Includes production-grade utilities, now reorganized for better modularity:\n  - **Internal Utilities**: Context-aware logging (Winston), standardized error handling (`McpError`, `ErrorHandler`), request context management.\n  - **Security Utilities**: Input sanitization, rate limiting, UUID and prefixed ID generation.\n  - **Metrics Utilities**: Token counting.\n  - **Parsing Utilities**: Natural language date parsing, partial JSON parsing.\n- **Enhanced Configuration**: Zod-validated environment variables for type-safe and reliable setup.\n- **Type Safety**: Fully implemented in TypeScript for improved reliability and maintainability.\n\n## Installation\n\n### Steps\n\n1.  **Clone the repository:**\n    ```bash\n    git clone https://github.com/cyanheads/filesystem-mcp-server.git\n    cd filesystem-mcp-server\n    ```\n2.  **Install dependencies:**\n    ```bash\n    npm install\n    ```\n3.  **Build the project:**\n    ```bash\n    npm run build\n    ```\n    This compiles the TypeScript code to JavaScript in the `dist/` directory and makes the main script executable. The executable will be located at `dist/index.js`.\n\n## Configuration\n\nConfigure the server using environment variables (a `.env` file is supported):\n\n**Core Server Settings:**\n\n- **`MCP_LOG_LEVEL`** (Optional): Minimum logging level (e.g., `debug`, `info`, `warn`, `error`). Defaults to `debug`.\n- **`LOGS_DIR`** (Optional): Directory for log files. Defaults to `./logs` in the project root.\n- **`NODE_ENV`** (Optional): Runtime environment (e.g., `development`, `production`). Defaults to `development`.\n\n**Transport Settings:**\n\n- **`MCP_TRANSPORT_TYPE`** (Optional): Communication transport (`stdio` or `http`). Defaults to `stdio`.\n  - **If `http` is selected:**\n    - **`MCP_HTTP_PORT`** (Optional): Port for the HTTP server. Defaults to `3010`.\n    - **`MCP_HTTP_HOST`** (Optional): Host for the HTTP server. Defaults to `127.0.0.1`.\n    - **`MCP_ALLOWED_ORIGINS`** (Optional): Comma-separated list of allowed CORS origins (e.g., `http://localhost:3000,https://example.com`).\n    - **`MCP_AUTH_SECRET_KEY`** (Required for HTTP Auth): A secure secret key (at least 32 characters long) for JWT authentication. **CRITICAL for production.**\n\n**Filesystem Security:**\n\n- **`FS_BASE_DIRECTORY`** (Optional): Defines the root directory for all filesystem operations. This can be an **absolute path** or a **path relative to the project root** (e.g., `./data_sandbox`). If set, the server's tools will be restricted to accessing files and directories only within this specified (and resolved absolute) path and its subdirectories. This is a crucial security feature to prevent unintended access to other parts of the filesystem. If not set (which is not recommended for production environments), a warning will be logged, and operations will not be restricted.\n\n**LLM & API Integration (Optional):**\n\n- **`OPENROUTER_APP_URL`**: Your application's URL for OpenRouter.\n- **`OPENROUTER_APP_NAME`**: Your application's name for OpenRouter. Defaults to `MCP_SERVER_NAME`.\n- **`OPENROUTER_API_KEY`**: API key for OpenRouter services.\n- **`LLM_DEFAULT_MODEL`**: Default LLM model to use (e.g., `google/gemini-2.5-flash-preview-05-20`).\n- **`LLM_DEFAULT_TEMPERATURE`**, **`LLM_DEFAULT_TOP_P`**, **`LLM_DEFAULT_MAX_TOKENS`**, **`LLM_DEFAULT_TOP_K`**, **`LLM_DEFAULT_MIN_P`**: Default parameters for LLM calls.\n- **`GEMINI_API_KEY`**: API key for Google Gemini services.\n\n**OAuth Proxy Integration (Optional, for advanced scenarios):**\n\n- **`OAUTH_PROXY_AUTHORIZATION_URL`**, **`OAUTH_PROXY_TOKEN_URL`**, **`OAUTH_PROXY_REVOCATION_URL`**, **`OAUTH_PROXY_ISSUER_URL`**, **`OAUTH_PROXY_SERVICE_DOCUMENTATION_URL`**, **`OAUTH_PROXY_DEFAULT_CLIENT_REDIRECT_URIS`**: Configuration for an OAuth proxy.\n\nRefer to `src/config/index.ts` and the `.clinerules` file for the complete list and Zod schema definitions.\n\n## Usage with MCP Clients\n\nTo allow an MCP client (like an AI assistant) to use this server:\n\n1.  **Run the Server:** Start the server from your terminal:\n    ```bash\n    node dist/index.js\n    # Or if you are in the project root:\n    # npm start\n    ```\n2.  **Configure the Client:** Add the server to your MCP client's configuration. The exact method depends on the client.\n\n    **For STDIO Transport (Default):**\n    Typically involves specifying:\n\n    - **Command:** `node`\n    - **Arguments:** The absolute path to the built server executable (e.g., `/path/to/filesystem-mcp-server/dist/index.js`).\n    - **Environment Variables (Optional):** Set any required environment variables from the [Configuration](#configuration) section.\n\n    **Example MCP Settings for STDIO (Conceptual):**\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"filesystem_stdio\": {\n          \"command\": \"node\",\n          \"args\": [\"/path/to/filesystem-mcp-server/dist/index.js\"],\n          \"env\": {\n            \"MCP_LOG_LEVEL\": \"debug\"\n            // Other relevant env vars\n          },\n          \"disabled\": false,\n          \"autoApprove\": []\n        }\n      }\n    }\n    ```\n\n    **For HTTP Transport:**\n    The client will need to know the server's URL (e.g., `http://localhost:3010`) and how to authenticate (e.g., providing a JWT Bearer token if `MCP_AUTH_SECRET_KEY` is set). Refer to your MCP client's documentation for HTTP server configuration.\n\nOnce configured and running, the client will detect the server and its available tools.\n\n## Available Tools\n\nThe server exposes the following tools for filesystem interaction:\n\n| Tool                         | Description                                                                                                                                                                                                                                                                                                        |\n| :--------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`set_filesystem_default`** | Sets a default absolute path for the current session. Relative paths used in subsequent tool calls will be resolved against this default. Resets on server restart.                                                                                                                                                |\n| **`read_file`**              | Reads the entire content of a specified file as UTF-8 text. Accepts relative (resolved against default) or absolute paths.                                                                                                                                                                                         |\n| **`write_file`**             | Writes content to a specified file. Creates the file (and necessary parent directories) if it doesn't exist, or overwrites it if it does. Accepts relative or absolute paths.                                                                                                                                      |\n| **`update_file`**            | Performs targeted search-and-replace operations within an existing file using an array of `{search, replace}` blocks. Ideal for localized changes. Supports plain text or regex search (`useRegex: true`) and replacing all occurrences (`replaceAll: true`). Accepts relative or absolute paths. File must exist. |\n| **`list_files`**             | Lists files and directories within a specified path. Options include recursive listing (`includeNested: true`) and limiting the number of entries (`maxEntries`). Returns a formatted tree structure. Accepts relative or absolute paths.                                                                          |\n| **`delete_file`**            | Permanently removes a specific file. Accepts relative or absolute paths.                                                                                                                                                                                                                                           |\n| **`delete_directory`**       | Permanently removes a directory. Use `recursive: true` to remove non-empty directories and their contents (use with caution!). Accepts relative or absolute paths.                                                                                                                                                 |\n| **`create_directory`**       | Creates a new directory at the specified path. By default (`create_parents: true`), it also creates any necessary parent directories. Accepts relative or absolute paths.                                                                                                                                          |\n| **`move_path`**              | Moves or renames a file or directory from a source path to a destination path. Accepts relative or absolute paths for both.                                                                                                                                                                                        |\n| **`copy_path`**              | Copies a file or directory from a source path to a destination path. For directories, it copies recursively by default (`recursive: true`). Accepts relative or absolute paths.                                                                                                                                    |\n\n_Refer to the tool registration files (`src/mcp-server/tools/*/registration.ts`) for detailed input/output schemas (Zod/JSON Schema)._\n\n## Project Structure\n\nThe codebase is organized for clarity and maintainability:\n\n```\nfilesystem-mcp-server/\n├── dist/                 # Compiled JavaScript output (after npm run build)\n├── logs/                 # Log files (created at runtime)\n├── node_modules/         # Project dependencies\n├── src/                  # TypeScript source code\n│   ├── config/           # Configuration loading (index.ts)\n│   ├── mcp-server/       # Core MCP server logic\n│   │   ├── server.ts     # Server initialization, tool registration, transport handling\n│   │   ├── state.ts      # Session state management (e.g., default path)\n│   │   ├── tools/        # Individual tool implementations (one subdir per tool)\n│   │   │   ├── readFile/\n│   │   │   │   ├── index.ts\n│   │   │   │   ├── readFileLogic.ts\n│   │   │   │   └── registration.ts\n│   │   │   └── ...       # Other tools (writeFile, updateFile, etc.)\n│   │   └── transports/   # Communication transport implementations\n│   │       ├── authentication/ # Auth middleware for HTTP\n│   │       │   └── authMiddleware.ts\n│   │       ├── httpTransport.ts\n│   │       └── stdioTransport.ts\n│   ├── types-global/     # Shared TypeScript types and interfaces\n│   │   ├── errors.ts     # Custom error classes and codes (McpError, BaseErrorCode)\n│   │   ├── mcp.ts        # MCP related types\n│   │   └── tool.ts       # Tool definition types\n│   ├── utils/            # Reusable utility modules, categorized\n│   │   ├── internal/     # Core internal utilities (errorHandler, logger, requestContext)\n│   │   ├── metrics/      # Metrics-related utilities (tokenCounter)\n│   │   ├── parsing/      # Parsing utilities (dateParser, jsonParser)\n│   │   ├── security/     # Security-related utilities (idGenerator, rateLimiter, sanitization)\n│   │   └── index.ts      # Barrel export for all utilities\n│   └── index.ts          # Main application entry point\n├── .clinerules           # Cheatsheet for LLM assistants\n├── .dockerignore\n├── Dockerfile\n├── LICENSE\n├── mcp.json              # MCP server manifest (generated by SDK or manually)\n├── package.json\n├── package-lock.json\n├── README.md             # This file\n├── repomix.config.json\n├── smithery.yaml         # Smithery configuration (if used)\n└── tsconfig.json         # TypeScript compiler options\n```\n\nFor a live, detailed view of the current structure, run: `npm run tree` (This script might need to be updated if `src/scripts/tree.ts` was part of the changes).\n\n> **Developer Note:** This repository includes a [.clinerules](.clinerules) file. This cheat sheet provides your LLM coding assistant with essential context about codebase patterns, file locations, and usage examples. Keep it updated as the server evolves!\n\n## License\n\nThis project is licensed under the Apache License 2.0. See the [LICENSE](LICENSE) file for details.\n\n---\n\n<div align=\"center\">\nBuilt with ❤️ and the <a href=\"https://modelcontextprotocol.io/\">Model Context Protocol</a>\n</div>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "cyanheads",
        "files",
        "cyanheads filesystem",
        "filesystem mcp",
        "file management"
      ],
      "category": "file-management"
    },
    "cyanheads--obsidian-mcp-server": {
      "owner": "cyanheads",
      "name": "obsidian-mcp-server",
      "url": "https://github.com/cyanheads/obsidian-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/cyanheads.webp",
      "description": "Integrate LLMs with Obsidian vaults to manage knowledge bases through secure API communication and efficient file operations. Features comprehensive search capabilities for enhanced knowledge management.",
      "stars": 223,
      "forks": 36,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-03T17:42:55Z",
      "readme_content": "# Obsidian MCP Server\n\n[![TypeScript](https://img.shields.io/badge/TypeScript-^5.8.3-blue.svg)](https://www.typescriptlang.org/)\n[![Model Context Protocol](https://img.shields.io/badge/MCP%20SDK-^1.13.0-green.svg)](https://modelcontextprotocol.io/)\n[![Version](https://img.shields.io/badge/Version-2.0.7-blue.svg)](./CHANGELOG.md)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Status](https://img.shields.io/badge/Status-Production-brightgreen.svg)](https://github.com/cyanheads/obsidian-mcp-server/issues)\n[![GitHub](https://img.shields.io/github/stars/cyanheads/obsidian-mcp-server?style=social)](https://github.com/cyanheads/obsidian-mcp-server)\n\n**Empower your AI agents and development tools with seamless Obsidian integration!**\n\nAn MCP (Model Context Protocol) server providing comprehensive access to your Obsidian vault. Enables LLMs and AI agents to read, write, search, and manage your notes and files through the [Obsidian Local REST API plugin](https://github.com/coddingtonbear/obsidian-local-rest-api).\n\nBuilt on the [`cyanheads/mcp-ts-template`](https://github.com/cyanheads/mcp-ts-template), this server follows a modular architecture with robust error handling, logging, and security features.\n\n## 🚀 Core Capabilities: Obsidian Tools 🛠️\n\nThis server equips your AI with specialized tools to interact with your Obsidian vault:\n\n| Tool Name                                                                              | Description                                                     | Key Features                                                                                                                                           |\n| :------------------------------------------------------------------------------------- | :-------------------------------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [`obsidian_read_note`](./src/mcp-server/tools/obsidianReadNoteTool/)                   | Retrieves the content and metadata of a specified note.         | - Read in `markdown` or `json` format.<br/>- Case-insensitive path fallback.<br/>- Includes file stats (creation/modification time).                   |\n| [`obsidian_update_note`](./src/mcp-server/tools/obsidianUpdateNoteTool/)               | Modifies notes using whole-file operations.                     | - `append`, `prepend`, or `overwrite` content.<br/>- Can create files if they don't exist.<br/>- Targets files by path, active note, or periodic note. |\n| [`obsidian_search_replace`](./src/mcp-server/tools/obsidianSearchReplaceTool/)         | Performs search-and-replace operations within a target note.    | - Supports string or regex search.<br/>- Options for case sensitivity, whole word, and replacing all occurrences.                                      |\n| [`obsidian_global_search`](./src/mcp-server/tools/obsidianGlobalSearchTool/)           | Performs a search across the entire vault.                      | - Text or regex search.<br/>- Filter by path and modification date.<br/>- Paginated results.                                                           |\n| [`obsidian_list_notes`](./src/mcp-server/tools/obsidianListNotesTool/)                 | Lists notes and subdirectories within a specified vault folder. | - Filter by file extension or name regex.<br/>- Provides a formatted tree view of the directory.                                                       |\n| [`obsidian_manage_frontmatter`](./src/mcp-server/tools/obsidianManageFrontmatterTool/) | Atomically manages a note's YAML frontmatter.                   | - `get`, `set`, or `delete` frontmatter keys.<br/>- Avoids rewriting the entire file for metadata changes.                                             |\n| [`obsidian_manage_tags`](./src/mcp-server/tools/obsidianManageTagsTool/)               | Adds, removes, or lists tags for a note.                        | - Manages tags in both YAML frontmatter and inline content.                                                                                            |\n| [`obsidian_delete_note`](./src/mcp-server/tools/obsidianDeleteNoteTool/)               | Permanently deletes a specified note from the vault.            | - Case-insensitive path fallback for safety.                                                                                                           |\n\n---\n\n## Table of Contents\n\n| [Overview](#overview) | [Features](#features) | [Configuration](#configuration) |\n| [Project Structure](#project-structure) | [Vault Cache Service](#vault-cache-service) |\n| [Tools](#tools) | [Resources](#resources) | [Development](#development) | [License](#license) |\n\n## Overview\n\nThe Obsidian MCP Server acts as a bridge, allowing applications (MCP Clients) that understand the Model Context Protocol (MCP) – like advanced AI assistants (LLMs), IDE extensions, or custom scripts – to interact directly and safely with your Obsidian vault.\n\nInstead of complex scripting or manual interaction, your tools can leverage this server to:\n\n- **Automate vault management**: Read notes, update content, manage frontmatter and tags, search across files, list directories, and delete files programmatically.\n- **Integrate Obsidian into AI workflows**: Enable LLMs to access and modify your knowledge base as part of their research, writing, or coding tasks.\n- **Build custom Obsidian tools**: Create external applications that interact with your vault data in novel ways.\n\nBuilt on the robust `mcp-ts-template`, this server provides a standardized, secure, and efficient way to expose Obsidian functionality via the MCP standard. It achieves this by communicating with the powerful [Obsidian Local REST API plugin](https://github.com/coddingtonbear/obsidian-local-rest-api) running inside your vault.\n\n> **Developer Note**: This repository includes a [.clinerules](.clinerules) file that serves as a developer cheat sheet for your LLM coding agent with quick reference for the codebase patterns, file locations, and code snippets.\n\n## Features\n\n### Core Utilities\n\nLeverages the robust utilities provided by `cyanheads/mcp-ts-template`:\n\n- **Logging**: Structured, configurable logging (file rotation, console, MCP notifications) with sensitive data redaction.\n- **Error Handling**: Centralized error processing, standardized error types (`McpError`), and automatic logging.\n- **Configuration**: Environment variable loading (`dotenv`) with comprehensive validation.\n- **Input Validation/Sanitization**: Uses `zod` for schema validation and custom sanitization logic.\n- **Request Context**: Tracking and correlation of operations via unique request IDs.\n- **Type Safety**: Strong typing enforced by TypeScript and Zod schemas.\n- **HTTP Transport Option**: Built-in Hono server with SSE, session management, CORS support, and pluggable authentication strategies (JWT and OAuth 2.1).\n\n### Obsidian Integration\n\n- **Obsidian Local REST API Integration**: Communicates directly with the Obsidian Local REST API plugin via HTTP requests managed by the `ObsidianRestApiService`.\n- **Comprehensive Command Coverage**: Exposes key vault operations as MCP tools (see [Tools](#tools) section).\n- **Vault Interaction**: Supports reading, updating (append, prepend, overwrite), searching (global text/regex, search/replace), listing, deleting, and managing frontmatter and tags.\n- **Targeting Flexibility**: Tools can target files by path, the currently active file in Obsidian, or periodic notes (daily, weekly, etc.).\n- **Vault Cache Service**: An intelligent in-memory cache that improves performance and resilience. It caches vault content, provides a fallback for the global search tool if the live API fails, and periodically refreshes to stay in sync.\n- **Safety Features**: Case-insensitive path fallbacks for file operations, clear distinction between modification types (append, overwrite, etc.).\n\n## Installation\n\n### Prerequisites\n\n1.  **Obsidian**: You need Obsidian installed.\n2.  **Obsidian Local REST API Plugin**: Install and enable the [Obsidian Local REST API plugin](https://github.com/coddingtonbear/obsidian-local-rest-api) within your Obsidian vault.\n3.  **API Key**: Configure an API key within the Local REST API plugin settings in Obsidian. You will need this key to configure the server.\n4.  **Node.js & npm**: Ensure you have Node.js (v18 or later recommended) and npm installed.\n\n## Configuration\n\n### MCP Client Settings\n\nAdd the following to your MCP client's configuration file (e.g., `cline_mcp_settings.json`). This configuration uses `npx` to run the server, which will automatically download & install the package if not already present:\n\n```json\n{\n  \"mcpServers\": {\n    \"obsidian-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"obsidian-mcp-server\"],\n      \"env\": {\n        \"OBSIDIAN_API_KEY\": \"YOUR_API_KEY_FROM_OBSIDIAN_PLUGIN\",\n        \"OBSIDIAN_BASE_URL\": \"http://127.0.0.1:27123\",\n        \"OBSIDIAN_VERIFY_SSL\": \"false\",\n        \"OBSIDIAN_ENABLE_CACHE\": \"true\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n**Note**: Verify SSL is set to false here because the Obsidian Local REST API plugin uses a self-signed certificate by default. If you are deploying this in a production environment, consider using the encrypted HTTPS endpoint and set `OBSIDIAN_VERIFY_SSL` to `true` after configuring your server to trust the self-signed certificate.\n\nIf you installed from source, change `command` and `args` to point to your local build:\n\n```json\n{\n  \"mcpServers\": {\n    \"obsidian-mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/your/obsidian-mcp-server/dist/index.js\"],\n      \"env\": {\n        \"OBSIDIAN_API_KEY\": \"YOUR_OBSIDIAN_API_KEY\",\n        \"OBSIDIAN_BASE_URL\": \"http://127.0.0.1:27123\",\n        \"OBSIDIAN_VERIFY_SSL\": \"false\",\n        \"OBSIDIAN_ENABLE_CACHE\": \"true\"\n      }\n    }\n  }\n}\n```\n\n### Environment Variables\n\nConfigure the server using environment variables. These environmental variables are set within your MCP client config/settings (e.g. `cline_mcp_settings.json` for Cline, `claude_desktop_config.json` for Claude Desktop).\n\n| Variable                              | Description                                                              | Required             | Default                  |\n| :------------------------------------ | :----------------------------------------------------------------------- | :------------------- | :----------------------- |\n| **`OBSIDIAN_API_KEY`**                | API Key from the Obsidian Local REST API plugin.                         | **Yes**              | `undefined`              |\n| **`OBSIDIAN_BASE_URL`**               | Base URL of your Obsidian Local REST API.                                | **Yes**              | `http://127.0.0.1:27123` |\n| `MCP_TRANSPORT_TYPE`                  | Server transport: `stdio` or `http`.                                     | No                   | `stdio`                  |\n| `MCP_HTTP_PORT`                       | Port for the HTTP server.                                                | No                   | `3010`                   |\n| `MCP_HTTP_HOST`                       | Host for the HTTP server.                                                | No                   | `127.0.0.1`              |\n| `MCP_ALLOWED_ORIGINS`                 | Comma-separated origins for CORS. **Set for production.**                | No                   | (none)                   |\n| `MCP_AUTH_MODE`                       | Authentication strategy: `jwt` or `oauth`.                               | No                   | (none)                   |\n| **`MCP_AUTH_SECRET_KEY`**             | 32+ char secret for JWT. **Required for `jwt` mode.**                    | **Yes (if `jwt`)**   | `undefined`              |\n| `OAUTH_ISSUER_URL`                    | URL of the OAuth 2.1 issuer.                                             | **Yes (if `oauth`)** | `undefined`              |\n| `OAUTH_AUDIENCE`                      | Audience claim for OAuth tokens.                                         | **Yes (if `oauth`)** | `undefined`              |\n| `OAUTH_JWKS_URI`                      | URI for the JSON Web Key Set (optional, derived from issuer if omitted). | No                   | (derived)                |\n| `MCP_LOG_LEVEL`                       | Logging level (`debug`, `info`, `error`, etc.).                          | No                   | `info`                   |\n| `OBSIDIAN_VERIFY_SSL`                 | Set to `false` to disable SSL verification.                              | No                   | `true`                   |\n| `OBSIDIAN_ENABLE_CACHE`               | Set to `true` to enable the in-memory vault cache.                       | No                   | `true`                   |\n| `OBSIDIAN_CACHE_REFRESH_INTERVAL_MIN` | Refresh interval for the vault cache in minutes.                         | No                   | `10`                     |\n\n### Connecting to the Obsidian API\n\nTo connect the MCP server to your Obsidian vault, you need to configure the base URL (`OBSIDIAN_BASE_URL`) and API key (`OBSIDIAN_API_KEY`). The Obsidian Local REST API plugin offers two ways to connect:\n\n1.  **Encrypted (HTTPS) - Default**:\n\n    - The plugin provides a secure `https://` endpoint (e.g., `https://127.0.0.1:27124`).\n    - This uses a self-signed certificate, which will cause connection errors by default.\n    - **To fix this**, you must set the `OBSIDIAN_VERIFY_SSL` environment variable to `\"false\"`. This tells the server to trust the self-signed certificate.\n\n2.  **Non-encrypted (HTTP) - Recommended for Simplicity**:\n    - In the plugin's settings within Obsidian, you can enable the \"Non-encrypted (HTTP) Server\".\n    - This provides a simpler `http://` endpoint (e.g., `http://127.0.0.1:27123`).\n    - When using this URL, you do not need to worry about SSL verification.\n\n**Example `env` configuration for your MCP client:**\n\n_Using the non-encrypted HTTP URL (recommended):_\n\n```json\n\"env\": {\n  \"OBSIDIAN_API_KEY\": \"YOUR_API_KEY_FROM_OBSIDIAN_PLUGIN\",\n  \"OBSIDIAN_BASE_URL\": \"http://127.0.0.1:27123\"\n}\n```\n\n_Using the encrypted HTTPS URL:_\n\n```json\n\"env\": {\n  \"OBSIDIAN_API_KEY\": \"YOUR_API_KEY_FROM_OBSIDIAN_PLUGIN\",\n  \"OBSIDIAN_BASE_URL\": \"https://127.0.0.1:27124\",\n  \"OBSIDIAN_VERIFY_SSL\": \"false\"\n}\n```\n\n## Project Structure\n\nThe codebase follows a modular structure within the `src/` directory:\n\n```\nsrc/\n├── index.ts           # Entry point: Initializes and starts the server\n├── config/            # Configuration loading (env vars, package info)\n│   └── index.ts\n├── mcp-server/        # Core MCP server logic and capability registration\n│   ├── server.ts      # Server setup, transport handling, tool/resource registration\n│   ├── resources/     # MCP Resource implementations (currently none)\n│   ├── tools/         # MCP Tool implementations (subdirs per tool)\n│   └── transports/    # Stdio and HTTP transport logic\n│       └── auth/      # Authentication strategies (JWT, OAuth)\n├── services/          # Abstractions for external APIs or internal caching\n│   └── obsidianRestAPI/ # Typed client for Obsidian Local REST API\n├── types-global/      # Shared TypeScript type definitions (errors, etc.)\n└── utils/             # Common utility functions (logger, error handler, security, etc.)\n```\n\nFor a detailed file tree, run `npm run tree` or see [docs/tree.md](docs/tree.md).\n\n## Vault Cache Service\n\nThis server includes an intelligent **in-memory cache** designed to enhance performance and resilience when interacting with your vault.\n\n### Purpose and Benefits\n\n- **Performance**: By caching file content and metadata, the server can perform search operations much faster, especially in large vaults. This reduces the number of direct requests to the Obsidian Local REST API, resulting in a snappier experience.\n- **Resilience**: The cache acts as a fallback for the `obsidian_global_search` tool. If the live API search fails or times out, the server seamlessly uses the cache to provide results, ensuring that search functionality remains available even if the Obsidian API is temporarily unresponsive.\n- **Efficiency**: The cache is designed to be efficient. It performs an initial build on startup and then periodically refreshes in the background by checking for file modifications, ensuring it stays reasonably up-to-date without constant, heavy API polling.\n\n### How It Works\n\n1.  **Initialization**: When enabled, the `VaultCacheService` builds an in-memory map of all `.md` files in your vault, storing their content and modification times.\n2.  **Periodic Refresh**: The cache automatically refreshes at a configurable interval (defaulting to 10 minutes). During a refresh, it only fetches content for files that are new or have been modified since the last check.\n3.  **Proactive Updates**: After a file is modified through a tool like `obsidian_update_file`, the service proactively updates the cache for that specific file, ensuring immediate consistency.\n4.  **Search Fallback**: The `obsidian_global_search` tool first attempts a live API search. If this fails, it automatically falls back to searching the in-memory cache.\n\n### Configuration\n\nThe cache is enabled by default but can be configured via environment variables:\n\n- **`OBSIDIAN_ENABLE_CACHE`**: Set to `true` (default) or `false` to enable or disable the cache service.\n- **`OBSIDIAN_CACHE_REFRESH_INTERVAL_MIN`**: Defines the interval in minutes for the periodic background refresh. Defaults to `10`.\n\n## Tools\n\nThe Obsidian MCP Server provides a suite of tools for interacting with your vault, callable via the Model Context Protocol.\n\n| Tool Name                     | Description                                               | Key Arguments                                                 |\n| :---------------------------- | :-------------------------------------------------------- | :------------------------------------------------------------ |\n| `obsidian_read_note`          | Retrieves the content and metadata of a note.             | `filePath`, `format?`, `includeStat?`                         |\n| `obsidian_update_note`        | Modifies a file by appending, prepending, or overwriting. | `targetType`, `content`, `targetIdentifier?`, `wholeFileMode` |\n| `obsidian_search_replace`     | Performs search-and-replace operations in a note.         | `targetType`, `replacements`, `useRegex?`, `replaceAll?`      |\n| `obsidian_global_search`      | Searches the entire vault for content.                    | `query`, `searchInPath?`, `useRegex?`, `page?`, `pageSize?`   |\n| `obsidian_list_notes`         | Lists notes and subdirectories in a folder.               | `dirPath`, `fileExtensionFilter?`, `nameRegexFilter?`         |\n| `obsidian_manage_frontmatter` | Gets, sets, or deletes keys in a note's frontmatter.      | `filePath`, `operation`, `key`, `value?`                      |\n| `obsidian_manage_tags`        | Adds, removes, or lists tags in a note.                   | `filePath`, `operation`, `tags`                               |\n| `obsidian_delete_note`        | Permanently deletes a note from the vault.                | `filePath`                                                    |\n\n_Note: All tools support comprehensive error handling and return structured JSON responses._\n\n## Resources\n\n**MCP Resources are not implemented in this version.**\n\nThis server currently focuses on providing interactive tools for vault manipulation. Future development may introduce resource capabilities (e.g., exposing notes or search results as readable resources).\n\n## Development\n\n### Build and Test\n\nTo get started with development, clone the repository, install dependencies, and use the following scripts:\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the project (compile TS to JS in dist/ and make executable)\nnpm run rebuild\n\n# Start the server locally using stdio transport\nnpm start:stdio\n\n# Start the server using http transport\nnpm run start:http\n\n# Format code using Prettier\nnpm run format\n\n# Inspect the server's capabilities using the MCP Inspector tool\nnpm run inspect:stdio\n# or for the http transport:\nnpm run inspect:http\n```\n\n## License\n\nThis project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.\n\n---\n\n<div align=\"center\">\nBuilt with the <a href=\"https://modelcontextprotocol.io/\">Model Context Protocol</a>\n</div>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "llms",
        "vaults",
        "obsidian",
        "llms obsidian",
        "obsidian vaults",
        "file management"
      ],
      "category": "file-management"
    },
    "dandeliongold--mcp-decent-sampler-drums": {
      "owner": "dandeliongold",
      "name": "mcp-decent-sampler-drums",
      "url": "https://github.com/dandeliongold/mcp-decent-sampler-drums",
      "imageUrl": "/freedevtools/mcp/pfp/dandeliongold.webp",
      "description": "Generates DecentSampler drum kit configurations and presets, focusing on WAV file analysis and XML generation for preset creation.",
      "stars": 0,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-17T06:28:05Z",
      "readme_content": "# Decent Sampler Drums MCP Server\n\nA Model Context Protocol server for generating [Decent Sampler](https://www.decentsamples.com/product/decent-sampler-plugin/) drum kit configurations.\n\nThis TypeScript-based MCP server provides specialized tools and prompts for creating DecentSampler drum kit presets, including WAV file analysis and XML generation.\n\n<a href=\"https://glama.ai/mcp/servers/phypkuqwcn\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/phypkuqwcn/badge\" alt=\"Decent-Sampler Drums Server MCP server\" /></a>\n\n## Demo Video\n\n[![Watch a simple demo video on YouTube here!](http://i.ytimg.com/vi/cftEq62gfDE/hqdefault.jpg)](https://www.youtube.com/watch?v=cftEq62gfDE)\n\n**Warning:** Creating complex presets may end up exceeding Claude Desktop's maximum message length. We are still working on streamlining this tool to work around this limitation. If you are creating simple presets without a lot of mics or other variations, the xml file should be small enough for Claude to write to a file.\n\n## Features\n\n- [WAV file analysis and validation](docs/tools.md#analyze_wav_samples)\n- [Global pitch and envelope controls](docs/tools.md#configure_drum_controls)\n- [Multi-mic routing with MIDI controls](docs/tools.md#configure_mic_routing)\n- [Round robin sample playback](docs/tools.md#configure_round_robin)\n- [Flexible velocity layer handling](docs/schemas.md#generate_drum_groups)\n- [Muting group support](docs/schemas.md#generate_drum_groups)\n- [Auxiliary output routing](docs/tools.md#configure_mic_routing)\n\n## Documentation\n\n- [How do I use these tools?](docs/workflows.md) - Step-by-step workflows with real examples\n- [Tools Documentation](docs/tools.md) - Detailed information about each available tool\n- [Input Schemas](docs/schemas.md) - TypeScript interfaces and parameter descriptions\n\n## Installation\n\n### Prerequisites\n- Node.js (v14 or higher)\n- npm (usually comes with Node.js)\n- Claude Desktop app (for use with Claude)\n\n### Setup\n\n1. Install dependencies:\n```bash\nnpm install\n```\n\n2. Build the server:\n```bash\nnpm run build\n```\n\n3. Add to your Claude Desktop config:\n\n**Windows:** `%APPDATA%/Claude/claude_desktop_config.json`\n**MacOS:** `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"decent-sampler-drums\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@dandeliongold/mcp-decent-sampler-drums\"\n      ],\n      \"env\": {}\n    }\n  }\n}\n```\n\n## Development\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\nFor debugging, use the MCP Inspector:\n```bash\nnpm run inspector\n```\n\n## Usage Guidelines\n\nWhen using this MCP server to generate simple presets, you should always reference the `simple_preset_guidelines` prompt.\n\nFor more complex presets (including sections such as buses, effects, etc.), reference the `advanced_preset_guidelines` prompt. Note that creating complex presets with a large number of samples can still be unstable and may exceed Claude Desktop's maximum message length.\n\nBoth prompts will ask you to provide a samplesDirectory argument - this should be the absolute path to your drum samples folder (e.g., \"C:/Users/username/Documents/DrumSamples\"). The prompt will then automatically use this directory in all examples and configurations, making it easier to follow along with the correct paths for your system.\n\n## About Decent Sampler\n\nDecent Sampler is a FREE sampling plugin that allows you to play samples in the Decent Sampler format.\n\n### Useful Links\n\n- [Download Decent Sampler Plugin](https://www.decentsamples.com/product/decent-sampler-plugin/)\n- [Decent Sampler Developer Resources](https://www.decentsamples.com/decent-sampler-developer-resources/)\n\n### Sample Sources\n\nThe goal of this MCP server is to make it easier to set up your own presets, whether you're playing your kitchen utensils into your phone, or recording a full kit in a studio. To create your own drum kits, you'll also need samples.\n\nIf you don't already have samples ready to go, here are some resources to get started:\n\n#### Free and Low-Cost Sample Resources\n\n- **99sounds.org**\n  - [Drum Samples Collection](https://99sounds.org/drum-samples/) - Various drum kits and percussion samples\n  - [Dub & Reggae Sounds](https://99sounds.org/dub-reggae-sounds/) - Specialized collection of reggae drum sounds\n\n- **Archive.org:** [Sample Pack Collection](https://archive.org/search?query=subject%3A%22Sample+Pack%22+drums&sort=-downloads) - Community-contributed drum samples, sorted by popularity. Includes some cool stuff like vintage drum machines and CMI Fairlight samples.\n\n- **Sample Pack Nation:** [Oberheim DMX/DX Drumkits](https://samplepacknation.bandcamp.com/album/oberheim-dmx-dx-drumkits-50-sounds) - Classic drum machine sounds (Under 10 USD/EUR)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sampler",
        "drums",
        "drum",
        "decentsampler drum",
        "sampler drums",
        "decent sampler"
      ],
      "category": "file-management"
    },
    "danielpodrazka--editor-mcp": {
      "owner": "danielpodrazka",
      "name": "editor-mcp",
      "url": "https://github.com/danielpodrazka/editor-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/danielpodrazka.webp",
      "description": "Manage and edit text files through a standardized API with features for syntax checking, file management, and a two-step editing process to enhance data integrity. Supports operations on Python and JavaScript/React files for reading, locating functions, and editing with a diff preview.",
      "stars": 10,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T22:32:25Z",
      "readme_content": "# Editor MCP\n\nA Python-based text editor server built with FastMCP that provides powerful tools for file operations. This server enables reading, editing, and managing text files through a standardized API with a unique multi-step approach that significantly improves code editing accuracy and reliability for LLMs and AI assistants.\n\n[![Verified on MSeeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/b23694aa-c58a-469d-ba3c-fb54eb4d0d88)\n\n## Features\n\n- **File Selection**: Set a file to work with using absolute paths\n- **Read Operations**:\n  - Read entire files with line numbers using `skim`\n  - Read specific line ranges with prefixed line numbers using `read`\n  - Find specific text within files using `find_line`\n  - Find and extract function definitions in Python and JavaScript/JSX files using `find_function`\n- **Edit Operations**:\n  - Two-step editing process with diff preview\n  - Select and overwrite text with ID verification\n  - Clean editing workflow with select → overwrite → confirm/cancel pattern\n  - Syntax checking for Python (.py) and JavaScript/React (.js, .jsx) files\n  - Create new files with content\n- **File Management**:\n  - Create new files with proper initialization\n  - Delete files from the filesystem\n  - List directory contents with `listdir`\n- **Testing Support**:\n  - Run Python tests with `run_tests`\n  - Set Python paths for proper module resolution\n- **Safety Features**:\n  - Content ID verification to prevent conflicts\n  - Line count limits to prevent resource exhaustion\n  - Syntax checking to maintain code integrity\n  - Protected paths to restrict access to sensitive files\n\n## Security Risks\n\nThe editor-mcp includes powerful capabilities that come with certain security considerations:\n\n- **Jailbreak Risk**: The editor-mcp can potentially be jailbroken when reading a file that has harmful instructions embedded inside. Malicious content in files being edited could contain instructions that manipulate the AI assistant.\n- **Arbitrary Code Execution**: If running tests is enabled, there is a risk of arbitrary code execution through manipulated test files or malicious Python code.\n- **Data Exposure**: Access to file system operations could potentially expose sensitive information if proper path protections aren't configured.\n\nTo mitigate these risks:\n\n1. Use the `PROTECTED_PATHS` environment variable to restrict access to sensitive files and directories.\n2. Disable test running capabilities in production environments unless absolutely necessary.\n3. Carefully review files before opening them, especially if they come from untrusted sources.\n4. Consider running the editor in a sandboxed environment with limited permissions.\n\n## Key Advantages For LLMs\n\nThis text editor's unique design solves critical problems that typically affect LLM code editing:\n\n- **Prevents Loss of Context** - Traditional approaches often lead to LLMs losing overview of the codebase after a few edits. This implementation maintains context through the multi-step process.\n\n- **Avoids Resource-Intensive Rewrites** - LLMs typically default to replacing entire files when confused, which is costly, slow, and inefficient. This editor enforces selective edits.\n\n- **Provides Visual Feedback** - The diff preview system allows the LLM to actually see and verify changes before committing them, dramatically reducing errors.\n\n- **Enforces Syntax Checking** - Automatic validation for Python and JavaScript/React ensures that broken code isn't committed.\n\n- **Improves Edit Reasoning** - The multi-step approach gives the LLM time to reason between steps, reducing haphazard token production.\n\n## Resource Management\n\nThe editor implements several safeguards to ensure system stability and prevent resource exhaustion:\n\n- **Maximum Edit Lines**: By default, the editor enforces a 50-line limit for any single edit operation\n## Installation\n\nThis MCP was developed and tested with Claude Desktop. You can download Claude Desktop on any platform.\nFor Claude Desktop on Linux, you can use an unofficial installation script (uses the official file), recommended repository:\nhttps://github.com/emsi/claude-desktop/tree/main\n\nOnce you have Claude Desktop installed, follow the instructions below to install this specific MCP:\n\n### Easy Installation with UVX (Recommended)\n\nThe easiest way to install the Editor MCP is using the provided installation script:\n\n```bash\n# Clone the repository\ngit clone https://github.com/danielpodrazka/editor-mcp.git\ncd editor-mcp\n\n# Run the installation script\nchmod +x install.sh\n./install.sh\n```\n\nThis script will:\n1. Check if UVX is installed and install it if necessary\n2. Install the Editor MCP in development mode\n3. Make the `editor-mcp` command available in your PATH\n\n### Manual Installation\n\n#### Using UVX\n\n```bash\n# Install directly from GitHub\nuvx install git+https://github.com/danielpodrazka/mcp-text-editor.git\n\n# Or install from a local clone\ngit clone https://github.com/danielpodrazka/mcp-text-editor.git\ncd mcp-text-editor\nuvx install -e .\n```\n\n#### Using Traditional pip\n\n```bash\npip install git+https://github.com/danielpodrazka/mcp-text-editor.git\n\n# Or from a local clone\ngit clone https://github.com/danielpodrazka/mcp-text-editor.git\ncd mcp-text-editor\npip install -e .\n```\n\n#### Using Requirements (Legacy)\n\nInstall from the lock file:\n```bash\nuv pip install -r uv.lock\n```\n\n### Generating a locked requirements file:\n```bash\nuv pip compile requirements.in -o uv.lock\n```\n\n## Usage\n\n### Starting the Server\n\nAfter installation, you can start the Editor MCP server using one of these methods:\n\n```bash\n# Using the installed script\neditor-mcp\n\n# Or using the Python module\npython -m text_editor.server\n```\n\n### MCP Configuration\n\nYou can add the Editor MCP to your MCP configuration file:\n\n```json\n{\n  \"mcpServers\": {\n     \"text-editor\": {\n       \"command\": \"editor-mcp\",\n       \"env\": {\n         \"MAX_SELECT_LINES\": \"100\",\n         \"ENABLE_JS_SYNTAX_CHECK\": \"0\",\n         \"FAIL_ON_PYTHON_SYNTAX_ERROR\": \"1\",\n         \"FAIL_ON_JS_SYNTAX_ERROR\": \"0\",\n         \"PROTECTED_PATHS\": \"*.env,.env*,config*.json,*secret*,/etc/passwd,/home/user/.ssh/id_rsa\"\n       }\n     }\n  }\n}\n```\n\n### Environment Variable Configuration\n\nThe Editor MCP supports several environment variables to customize its behavior:\n\n- **MAX_SELECT_LINES**: \"100\" - Maximum number of lines that can be edited in a single operation (default is 50)\n\n- **ENABLE_JS_SYNTAX_CHECK**: \"0\" - Enable/disable JavaScript and JSX syntax checking (default is \"1\" - enabled)\n\n- **FAIL_ON_PYTHON_SYNTAX_ERROR**: \"1\" - When enabled, Python syntax errors will automatically cancel the overwrite operation (default is enabled)\n\n- **FAIL_ON_JS_SYNTAX_ERROR**: \"0\" - When enabled, JavaScript/JSX syntax errors will automatically cancel the overwrite operation (default is disabled)\n\n- **PROTECTED_PATHS**: Comma-separated list of file patterns or paths that cannot be accessed, supporting wildcards (e.g., \"*.env,.env*,/etc/passwd\")\n\n### Sample MCP Config When Building From Source\n\n```json\n{\n  \"mcpServers\": {\n     \"text-editor\": {\n       \"command\": \"/home/daniel/pp/venvs/editor-mcp/bin/python\",\n       \"args\": [\"/home/daniel/pp/editor-mcp/src/text_editor/server.py\"],\n        \"env\": {\n          \"MAX_SELECT_LINES\": \"100\",\n          \"ENABLE_JS_SYNTAX_CHECK\": \"0\",\n          \"FAIL_ON_PYTHON_SYNTAX_ERROR\": \"1\",\n          \"FAIL_ON_JS_SYNTAX_ERROR\": \"0\",\n          \"PROTECTED_PATHS\": \"*.env,.env*,config*.json,*secret*,/etc/passwd,/home/user/.ssh/id_rsa\"\n        }\n     }\n  }\n}\n```\n\n## Available Tools\nThe Editor MCP provides 13 powerful tools for file manipulation, editing, and testing:\n\n#### 1. `set_file`\nSets the current file to work with.\n\n**Parameters**:\n- `filepath` (str): Absolute path to the file\n\n**Returns**:\n- Confirmation message with the file path\n\n#### 2. `skim`\nReads full text from the current file. Each line is prefixed with its line number.\n\n**Returns**:\n- Dictionary containing lines with their line numbers, total number of lines, and the max edit lines setting\n\n**Example output**:\n```\n{\n  \"lines\": [\n    [1, \"def hello():\"],\n    [2, \"    print(\\\"Hello, world!\\\")\"],\n    [3, \"\"],\n    [4, \"hello()\"]\n  ],\n  \"total_lines\": 4,\n  \"max_select_lines\": 50\n}\n```\n\n#### 3. `read`\nReads text from the current file from start line to end line.\n\n**Parameters**:\n- `start` (int): Start line number (1-based indexing)\n- `end` (int): End line number (1-based indexing)\n\n**Returns**:\n- Dictionary containing lines with their line numbers as keys, along with start and end line information\n\n**Example output**:\n```\n{\n  \"lines\": [\n    [1, \"def hello():\"],\n    [2, \"    print(\\\"Hello, world!\\\")\"],\n    [3, \"\"],\n    [4, \"hello()\"]\n  ],\n  \"start_line\": 1,\n  \"end_line\": 4\n}\n```\n\n#### 4. `select`\nSelect a range of lines from the current file for subsequent overwrite operation.\n\n**Parameters**:\n- `start` (int): Start line number (1-based)\n- `end` (int): End line number (1-based)\n\n**Returns**:\n- Dictionary containing the selected lines, line range, and ID for verification\n\n**Note**:\n- This tool validates the selection against max_select_lines\n- The selection details are stored for use in the overwrite tool\n- This must be used before calling the overwrite tool\n\n#### 5. `overwrite`\nPrepare to overwrite a range of lines in the current file with new text.\n\n**Parameters**:\n- `new_lines` (list): List of new lines to overwrite the selected range\n\n**Returns**:\n- Diff preview showing the proposed changes\n\n**Note**:\n- This is the first step in a two-step process:\n  1. First call overwrite() to generate a diff preview\n  2. Then call confirm() to apply or cancel() to discard the pending changes\n- This tool allows replacing the previously selected lines with new content\n- The number of new lines can differ from the original selection\n- For Python files (.py extension), syntax checking is performed before writing\n- For JavaScript/React files (.js, .jsx extensions), syntax checking is optional and can be disabled via the `ENABLE_JS_SYNTAX_CHECK` environment variable\n\n#### 6. `confirm`\nApply pending changes from the overwrite operation.\n\n**Returns**:\n- Operation result with status and message\n\n**Note**:\n- This is one of the two possible actions in the second step of the editing process\n- The selection is removed upon successful application of changes\n\n#### 7. `cancel`\nDiscard pending changes from the overwrite operation.\n\n**Returns**:\n- Operation result with status and message\n\n**Note**:\n- This is one of the two possible actions in the second step of the editing process\n- The selection remains intact when changes are cancelled\n\n#### 8. `delete_file`\nDelete the currently set file.\n\n**Returns**:\n- Operation result with status and message\n\n#### 9. `new_file`\nCreates a new file and automatically sets it as the current file for subsequent operations.\n\n**Parameters**:\n- `filepath` (str): Path of the new file\n\n**Returns**:\n- Operation result with status, message, and selection info\n- The first line is automatically selected for editing\n\n**Behavior**:\n- Automatically creates parent directories if they don't exist\n- Sets the newly created file as the current working file\n- The first line is pre-selected, ready for immediate editing\n\n**Protected Files Note**:\n- Files matching certain patterns (like `*.env`) can be created normally\n- However, once you move to another file, these protected files cannot be reopened\n- This allows for a \"write-once, protect-after\" workflow for sensitive configuration files\n- Example: You can create `config.env`, populate it with example config, but cannot reopen it later\n\n**Note**:\n- This tool will fail if the current file exists and is not empty\n\n#### 10. `find_line`\nFind lines that match provided text in the current file.\n\n**Parameters**:\n- `search_text` (str): Text to search for in the file\n\n**Returns**:\n- Dictionary containing matching lines with their line numbers and total matches\n\n**Example output**:\n```\n{\n  \"status\": \"success\",\n  \"matches\": [\n    [2, \"    print(\\\"Hello, world!\\\")\"]\n  ],\n  \"total_matches\": 1\n}\n```\n\n**Note**:\n- Returns an error if no file path is set\n- Searches for exact text matches within each line\n- The id can be used for subsequent edit operations\n\n#### 11. `find_function`\nFind a function or method definition in the current Python or JavaScript/JSX file.\n\n**Parameters**:\n- `function_name` (str): Name of the function or method to find\n\n**Returns**:\n- Dictionary containing the function lines with their line numbers, start_line, and end_line\n\n**Example output**:\n```\n{\n  \"status\": \"success\",\n  \"lines\": [\n    [10, \"def hello():\"],\n    [11, \"    print(\\\"Hello, world!\\\")\"],\n    [12, \"    return True\"]\n  ],\n  \"start_line\": 10,\n  \"end_line\": 12\n}\n```\n\n**Note**:\n- For Python files, this tool uses Python's AST and tokenize modules to accurately identify function boundaries including decorators and docstrings\n- For JavaScript/JSX files, this tool uses a combination of approaches:\n  - Primary method: Babel AST parsing when available (requires Node.js and Babel packages)\n  - Fallback method: Regex pattern matching for function declarations when Babel is unavailable\n- Supports various JavaScript function types including standard functions, async functions, arrow functions, and React hooks\n- Returns an error if no file path is set or if the function is not found\n\n#### 12. `listdir`\nLists the contents of a directory.\n\n**Parameters**:\n- `dirpath` (str): Path to the directory to list\n\n**Returns**:\n- Dictionary containing list of filenames and the path queried\n\n#### 13. `run_tests` and `set_python_path`\nTools for running Python tests with pytest and configuring the Python environment.\n  - Set to \"0\", \"false\", or \"no\" to disable JavaScript syntax checking\n  - Useful if you don't have Babel and related dependencies installed\n- `FAIL_ON_PYTHON_SYNTAX_ERROR`: Controls whether Python syntax errors automatically cancel the overwrite operation (default: 1)\n  - When enabled, syntax errors in Python files will cause the overwrite action to be automatically cancelled\n  - The lines will remain selected so you can fix the error and try again\n- `FAIL_ON_JS_SYNTAX_ERROR`: Controls whether JavaScript/JSX syntax errors automatically cancel the overwrite operation (default: 0)\n  - When enabled, syntax errors in JavaScript/JSX files will cause the overwrite action to be automatically cancelled\n  - The lines will remain selected so you can fix the error and try again\n- `DUCKDB_USAGE_STATS`: Controls whether usage statistics are collected in a DuckDB database (default: 0)\n  - Set to \"1\", \"true\", or \"yes\" to enable collection of tool usage statistics\n  - When enabled, records information about each tool call including timestamps and arguments\n- `STATS_DB_PATH`: Path where the DuckDB database for statistics will be stored (default: \"text_editor_stats.duckdb\")\n  - Only used when `DUCKDB_USAGE_STATS` is enabled\n- `PROTECTED_PATHS`: Comma-separated list of file patterns or absolute paths that will be denied access\n  - Example: `*.env,.env*,config*.json,*secret*,/etc/passwd,/home/user/credentials.txt`\n  - Supports both exact file paths and flexible glob patterns with wildcards in any position:\n    - `*.env` - matches files ending with .env, like `.env`, `dev.env`, `prod.env`\n    - `.env*` - matches files starting with .env, like `.env`, `.env.local`, `.env.production`\n    - `*secret*` - matches any file containing 'secret' in the name\n  - Provides protection against accidentally exposing sensitive configuration files and credentials\n  - The lines will remain selected so you can fix the error and try again\n\n## Development\n\n### Prerequisites\n\nThe editor-mcp requires:\n- Python 3.7+\n- FastMCP package\n- black (for Python code formatting checks)\n- Babel (for JavaScript/JSX syntax checks if working with those files)\n\nInstall development dependencies:\n\n```bash\n# Using pip\npip install pytest pytest-asyncio pytest-cov\n\n# Using uv\nuv pip install pytest pytest-asyncio pytest-cov\n```\n\nFor JavaScript/JSX syntax validation, you need Node.js and Babel. The text editor uses `npx babel` to check JS/JSX syntax when editing these file types:\n\n```bash\n# Required for JavaScript/JSX syntax checking\nnpm install --save-dev @babel/core @babel/cli @babel/preset-env @babel/preset-react\n# You can also install these globally if you prefer\n# npm install -g @babel/core @babel/cli @babel/preset-env @babel/preset-react\n```\n\nThe editor requires:\n- `@babel/core` and `@babel/cli` - Core Babel packages for syntax checking\n- `@babel/preset-env` - For standard JavaScript (.js) files\n- `@babel/preset-react` - For React JSX (.jsx) files\n\n### Running Tests\n\n```bash\n# Run tests\npytest -v\n\n# Run tests with coverage\npytest -v --cov=text_editor\n```\n\n### Test Structure\n\nThe test suite covers:\n\n1. **set_file tool**\n   - Setting valid files\n   - Setting non-existent files\n   \n2. **read tool**\n   - File state validation\n   - Reading entire files\n   - Reading specific line ranges\n   - Edge cases like empty files\n   - Invalid range handling\n\n3. **select tool**\n   - Line range validation\n   - Selection validation against max_select_lines\n   - Selection storage for subsequent operations\n\n4. **overwrite tool**\n   - Verification of selected content using ID\n   - Content replacement validation\n   - Syntax checking for Python and JavaScript/React files\n   - Generation of diff preview for changes\n\n5. **confirm and cancel tools**\n   - Applying or canceling pending changes\n   - Two-step verification process\n   \n6. **delete_file tool**\n   - File deletion validation\n\n7. **new_file tool**\n   - File creation validation\n   - Handling existing files\n\n8. **find_line tool**\n   - Finding text matches in files\n   - Handling specific search terms\n   - Error handling for non-existent files\n   - Handling cases with no matches\n   - Handling existing files\n\n## How it Works\n\n### The Multi-Step Editing Approach\n\nUnlike traditional code editing approaches where LLMs simply search for lines to edit and make replacements (often leading to confusion after multiple edits), this editor implements a structured multi-step workflow that dramatically improves editing accuracy:\n\n1. **set_file** - First, the LLM sets which file it wants to edit\n2. **skim** - The LLM reads the entire file to gain a complete overview\n3. **read** - The LLM examines specific sections relevant to the task, with lines shown alongside numbers for better context\n4. **select** - When ready to edit, the LLM selects specific lines (limited to a configurable number, default 50)\n5. **overwrite** - The LLM proposes replacement content, resulting in a git diff-style preview that shows exactly what will change\n6. **confirm/cancel** - After reviewing the preview, the LLM can either apply or discard the changes\n\nThis structured workflow forces the LLM to reason carefully about each edit and prevents common errors like accidentally overwriting entire files. By seeing previews of changes before committing them, the LLM can verify its edits are correct.\n\n### ID Verification System\n\nThe server uses FastMCP to expose text editing capabilities through a well-defined API. The ID verification system ensures data integrity by verifying that the content hasn't changed between reading and modifying operations.\n\nThe ID mechanism uses SHA-256 to generate a unique identifier of the file content or selected line ranges. For line-specific operations, the ID includes a prefix indicating the line range (e.g., \"L10-15-[hash]\"). This helps ensure that edits are being applied to the expected content.\n\n## Implementation Details\n\nThe main `TextEditorServer` class:\n\n1. Initializes with a FastMCP instance named \"text-editor\"\n2. Sets a configurable `max_select_lines` limit (default: 50) from environment variables\n3. Maintains the current file path as state\n4. Registers thirteen primary tools through FastMCP:\n   - `set_file`: Validates and sets the current file path\n   - `skim`: Reads the entire content of a file, returning a dictionary of line numbers to line text\n   - `read`: Reads lines from specified line range, returning a structured dictionary of line content\n   - `select`: Selects lines for subsequent overwrite operation\n   - `overwrite`: Takes a list of new lines and prepares diff preview for changing content\n   - `confirm`: Applies pending changes from the overwrite operation\n   - `cancel`: Discards pending changes from the overwrite operation\n   - `delete_file`: Deletes the current file\n   - `new_file`: Creates a new file\n   - `find_line`: Finds lines containing specific text\n   - `find_function`: Finds function or method definitions in Python and JavaScript/JSX files\n   - `listdir`: Lists contents of a directory\n   - `run_tests` and `set_python_path`: Tools for running Python tests\n\nThe server runs using FastMCP's stdio transport by default, making it easy to integrate with various clients.\n\n## System Prompt for Best Results\n\nFor optimal results with AI assistants, it's recommended to use the system prompt (see [system_prompt.md](system_prompt.md)) that helps guide the AI in making manageable, safe edits.\n\nThis system prompt helps the AI assistant:\n\n1. **Make incremental changes** - Breaking down edits into smaller parts\n2. **Maintain code integrity** - Making changes that keep the code functional\n3. **Work within resource limits** - Avoiding operations that could overwhelm the system\n4. **Follow a verification workflow** - Doing final checks for errors after edits\n\nBy incorporating this system prompt when working with AI assistants, you'll get more reliable editing behavior and avoid common pitfalls in automated code editing.\n\n\n\n## Usage Statistics\n\nThe text editor MCP can collect usage statistics when enabled, providing insights into how the editing tools are being used:\n\n- **Data Collection**: Statistics are collected in a DuckDB database when `DUCKDB_USAGE_STATS` is enabled\n- **Tracked Information**: Records tool name, arguments, timestamp, current file path, tool response, and request/client IDs\n- **Storage Location**: Data is stored in a DuckDB file specified by `STATS_DB_PATH`\n- **Privacy**: Everything is stored locally on your machine\n\nThe collected statistics can help understand usage patterns, identify common workflows, and optimize the editor for most frequent operations.\n\nYou can query the database using standard SQL via any DuckDB client to analyze usage patterns.\n## Troubleshooting\n\nIf you encounter issues:\n\n1. Check file permissions\n2. Verify that the file paths are absolute\n3. Ensure the environment is using Python 3.7+\n\n\n## Inspiration\n\nInspired by a similar project: https://github.com/tumf/mcp-text-editor, which at first I forked, however I decided to rewrite the whole codebase from scratch so only the general idea stayed the same.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "editor",
        "editing",
        "files",
        "danielpodrazka editor",
        "editor mcp",
        "file management"
      ],
      "category": "file-management"
    },
    "danielsuguimoto--readonly-filesystem-mcp": {
      "owner": "danielsuguimoto",
      "name": "readonly-filesystem-mcp",
      "url": "https://github.com/danielsuguimoto/readonly-filesystem-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/danielsuguimoto.webp",
      "description": "Provides secure readonly access to filesystem operations, including reading files, listing directories, searching for files, and retrieving file metadata within specified allowed directories.",
      "stars": 2,
      "forks": 0,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-16T03:37:33Z",
      "readme_content": "# Readonly Filesystem MCP Server\n\nNode.js server implementing Model Context Protocol (MCP) for readonly filesystem operations. A clone from [modelcontextprotocol/server-filesystem](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem).\n\n## Features\n\n- Read files\n- List directories\n- Search files\n- Get file metadata\n\n**Note**: The server will only allow operations within directories specified via `args`.\n\n## API\n\n### Resources\n\n- `file://system`: File system operations interface\n\n### Tools\n\n- **read_file**\n  - Read complete contents of a file\n  - Inputs:\n    - `path` (string): File path to read\n    - `from` (number): Optional. Start line number for reading. Defaults to 0.\n    - `to` (number): Optional. End line number. If not set, reads to the end of the file.\n  - Reads file contents (full or partial) with UTF-8 encoding\n\n- **read_multiple_files**\n  - Read multiple files simultaneously\n  - Input: `paths` (string[])\n  - Failed reads won't stop the entire operation\n\n- **list_directory**\n  - List directory contents with [FILE] or [DIR] prefixes\n  - Input: `path` (string)\n\n- **search_files**\n  - Recursively search for files/directories\n  - Inputs:\n    - `path` (string): Starting directory\n    - `pattern` (string): Search pattern\n    - `excludePatterns` (string[]): Exclude any patterns. Glob formats are supported.\n  - Case-insensitive matching\n  - Returns full paths to matches\n\n- **get_file_info**\n  - Get detailed file/directory metadata\n  - Input: `path` (string)\n  - Returns:\n    - Size\n    - Creation time\n    - Modified time\n    - Access time\n    - Type (file/directory)\n    - Permissions\n\n- **list_allowed_directories**\n  - List all directories the server is allowed to access\n  - No input required\n  - Returns:\n    - Directories that this server can read/write from\n\n## Usage with Claude Desktop\nAdd this to your `claude_desktop_config.json`:\n\nNote: you can provide sandboxed directories to the server by mounting them to `/projects`. Adding the `ro` flag will make the directory readonly by the server.\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@danielsuguimoto/readonly-server-filesystem\",\n        \"/Users/username/Desktop\",\n        \"/path/to/other/allowed/dir\"\n      ]\n    }\n  }\n}\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "files",
        "mcp",
        "filesystem mcp",
        "readonly filesystem",
        "access filesystem"
      ],
      "category": "file-management"
    },
    "deathrashed--filesystem-structures": {
      "owner": "deathrashed",
      "name": "filesystem-structures",
      "url": "https://github.com/deathrashed/filesystem-structures",
      "imageUrl": "/freedevtools/mcp/pfp/deathrashed.webp",
      "description": "Provides ready-to-use filesystem organization structures tailored for various use cases, enabling users to set up and optimize their digital content management with adaptable templates. Supports productivity, development, media management, and personal knowledge organization through structured directory hierarchies.",
      "stars": 1,
      "forks": 1,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-08-16T07:17:32Z",
      "readme_content": "# Filesystem Structures\n\n<div align=\"center\">\n\n  [![License](https://img.shields.io/badge/License-MIT-blue?style=for-the-badge)](https://opensource.org/licenses/MIT)  [![Structures](https://img.shields.io/badge/Structures-11+-green?style=for-the-badge)](https://github.com/username/filesystem-structures) [![macOS](https://img.shields.io/badge/macOS-Compatible-black?style=for-the-badge&logo=apple)](https://www.apple.com/macos/)  [![Linux](https://img.shields.io/badge/Linux-Compatible-orange?style=for-the-badge&logo=linux)](https://www.linux.org/)  [![Windows](https://img.shields.io/badge/Windows-Compatible-blue?style=for-the-badge&logo=windows)](https://www.microsoft.com/windows)\n\n  **A comprehensive collection of filesystem organization structures for different use cases, complexity levels, and workflows.**\n</div>\n\n## 🎯 Purpose\n\nThis repository provides ready-to-use filesystem organization structures that you can adopt or customize for your own needs. Whether you're:\n\n- Setting up a new system\n- Reorganizing your files\n- Looking for better ways to manage your digital content\n- Implementing a productivity system\n- Setting up a development environment\n\nThese structures offer practical starting points that are easy to implement and adapt.\n\n## 📊 Structure Comparison\n\n<table>\n  <tr>\n    <th>Structure</th>\n    <th>Complexity</th>\n    <th>Best For</th>\n    <th>Key Feature</th>\n    <th>Learning Curve</th>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 1 - Basic\">1: Basic</a></td>\n    <td>Low</td>\n    <td>General users, beginners</td>\n    <td>Standard directory conventions</td>\n    <td>Minimal</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 2 - Intermediate\">2: Intermediate</a></td>\n    <td>Low-Medium</td>\n    <td>General users with more needs</td>\n    <td>Extended top-level organization</td>\n    <td>Low</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 3 - Advanced\">3: Advanced</a></td>\n    <td>High</td>\n    <td>Power users, professionals</td>\n    <td>Granular organization, symlinks</td>\n    <td>Steep</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 4 - Multimedia\">4: Multimedia</a></td>\n    <td>Medium</td>\n    <td>Artists, media producers</td>\n    <td>Media type specialization</td>\n    <td>Moderate</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 5 - PARA Method\">5: PARA Method</a></td>\n    <td>Medium</td>\n    <td>Knowledge workers</td>\n    <td>Actionability-based organization</td>\n    <td>Moderate</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 6 - Johnny.Decimal\">6: Johnny.Decimal</a></td>\n    <td>Medium-High</td>\n    <td>Detail-oriented organizers</td>\n    <td>Numeric classification system</td>\n    <td>Moderate</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 7 - Action Oriented (GTD)\">7: Action-Oriented (GTD)</a></td>\n    <td>Medium</td>\n    <td>Task-focused workers</td>\n    <td>Status-based organization</td>\n    <td>Moderate</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 8 - Time Based\">8: Time-Based</a></td>\n    <td>Low-Medium</td>\n    <td>Project managers, archivists</td>\n    <td>Chronological organization</td>\n    <td>Low</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 9 - Developer Focused\">9: Developer-Focused</a></td>\n    <td>High</td>\n    <td>Software developers</td>\n    <td>Code-specific organization</td>\n    <td>Moderate-Steep</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 10 - Deep Hierarchy\">10: Deep Hierarchy</a></td>\n    <td>Very High</td>\n    <td>Taxonomists, librarians</td>\n    <td>Multi-level categorization</td>\n    <td>Very Steep</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 11 - Linux Based\">11: Linux-Based</a></td>\n    <td>Medium-High</td>\n    <td>Linux users, sysadmins</td>\n    <td>FHS-inspired organization</td>\n    <td>Moderate</td>\n  </tr>\n</table>\n\n## 📂 Available Structures\n\n<table>\n  <tr>\n    <td width=\"50%\" valign=\"top\">\n      <h3>🌱 For Beginners</h3>\n      <ul>\n        <li><b><a href=\"./Structure 1 - Basic\">Structure 1: Basic</a></b> - A simple, clean organization system suitable for most users with standard conventions and clear second-level organization.</li>\n        <li><b><a href=\"./Structure 2 - Intermediate\">Structure 2: Intermediate</a></b> - Expands on the basic layout with additional top-level directories and more detailed organization.</li>\n      </ul>\n      <h3>🧰 Special Purpose</h3>\n      <ul>\n        <li><b><a href=\"./Structure 4 - Multimedia\">Structure 4: Multimedia</a></b> - Optimized for users who work heavily with media files - audio, video, images, and graphics.</li>\n        <li><b><a href=\"./Structure 9 - Developer Focused\">Structure 9: Developer-Focused</a></b> - Optimized for software developers, separating code environments from documents and using symlinks for efficiency.</li>\n        <li><b><a href=\"./Structure 11 - Linux Based\">Structure 11: Linux Based</a></b> - Follows Linux filesystem hierarchy standards with appropriate modifications for personal use.</li>\n      </ul>\n    </td>\n    <td width=\"50%\" valign=\"top\">\n      <h3>🧠 Methodology-Based</h3>\n      <ul>\n        <li><b><a href=\"./Structure 5 - PARA Method\">Structure 5: PARA Method</a></b> - Based on Tiago Forte's PARA method (Projects, Areas, Resources, Archives).</li>\n        <li><b><a href=\"./Structure 6 - Johnny.Decimal\">Structure 6: Johnny.Decimal</a></b> - Implements the Johnny.Decimal system with numeric identifiers for improved navigation.</li>\n        <li><b><a href=\"./Structure 7 - Action Oriented (GTD)\">Structure 7: Action-Oriented (GTD)</a></b> - Inspired by David Allen's \"Getting Things Done\" methodology.</li>\n      </ul>\n      <h3>⚙️ Advanced Approaches</h3>\n      <ul>\n        <li><b><a href=\"./Structure 3 - Advanced\">Structure 3: Advanced</a></b> - For power users who need granular organization and sophisticated linking between resources.</li>\n        <li><b><a href=\"./Structure 8 - Time Based\">Structure 8: Time-Based</a></b> - Organizes files primarily by time periods for archival purposes and chronological work.</li>\n        <li><b><a href=\"./Structure 10 - Deep Hierarchy\">Structure 10: Deep Hierarchy</a></b> - Uses deep nesting and categorization for extremely detailed organization.</li>\n      </ul>\n    </td>\n  </tr>\n</table>\n\n## 🎭 Real-World Use Cases\n\n<details>\n<summary><b>Professional Scenarios</b></summary>\n<ul>\n  <li><b>Freelance Designer</b> - <a href=\"./Structure 4 - Multimedia\">Multimedia Structure</a> for organizing client work, design assets, and project files</li>\n  <li><b>Software Engineer</b> - <a href=\"./Structure 9 - Developer Focused\">Developer-Focused Structure</a> for managing codebases, development environments, and documentation</li>\n  <li><b>Project Manager</b> - <a href=\"./Structure 8 - Time Based\">Time-Based Structure</a> combined with <a href=\"./Structure 7 - Action Oriented (GTD)\">GTD approach</a> for tracking deliverables and timelines</li>\n  <li><b>Content Creator</b> - <a href=\"./Structure 4 - Multimedia\">Multimedia Structure</a> for organizing production assets across multiple platforms</li>\n  <li><b>Researcher/Academic</b> - <a href=\"./Structure 10 - Deep Hierarchy\">Deep Hierarchy</a> or <a href=\"./Structure 5 - PARA Method\">PARA Method</a> for organizing papers, references, and research materials</li>\n  <li><b>System Administrator</b> - <a href=\"./Structure 11 - Linux Based\">Linux-Based Structure</a> for maintaining configs, scripts, and documentation</li>\n  <li><b>Knowledge Worker</b> - <a href=\"./Structure 5 - PARA Method\">PARA Method</a> or <a href=\"./Structure 6 - Johnny.Decimal\">Johnny.Decimal</a> for personal knowledge management</li>\n</ul>\n</details>\n\n<details>\n<summary><b>Personal Use Cases</b></summary>\n<ul>\n  <li><b>Family Computer</b> - <a href=\"./Structure 1 - Basic\">Basic Structure</a> with separate user folders for each family member</li>\n  <li><b>Personal Knowledge Base</b> - <a href=\"./Structure 6 - Johnny.Decimal\">Johnny.Decimal</a> for organizing notes, references, and learning materials</li>\n  <li><b>Media Collection</b> - <a href=\"./Structure 4 - Multimedia\">Multimedia Structure</a> for organizing music, movies, and photos</li>\n  <li><b>Home Project Management</b> - <a href=\"./Structure 7 - Action Oriented (GTD)\">GTD Structure</a> for organizing renovation projects, financial planning, etc.</li>\n  <li><b>Digital Archiving</b> - <a href=\"./Structure 8 - Time Based\">Time-Based Structure</a> for preserving family history, photos, and important documents</li>\n</ul>\n</details>\n\n<details>\n<summary><b>Hybrid Approaches</b></summary>\n<ul>\n  <li><b>PARA + Multimedia</b> - Combining actionability-based organization with specialized media directories</li>\n  <li><b>GTD + Developer</b> - Task-oriented structure with specialized code organization</li>\n  <li><b>Johnny.Decimal + Time-Based</b> - Using numeric classification within chronological organization</li>\n  <li><b>Basic + PARA</b> - Starting with a simple structure and gradually implementing PARA principles</li>\n</ul>\n</details>\n\n## 📋 Implementation\n\nEach structure includes:\n\n- A detailed `README.md` explaining its purpose, benefits, and implementation tips\n- A `structure_schema.txt` showing the complete directory hierarchy\n- The actual directory structure to explore and use as a template\n\n## 🤖 Automation Scripts\n\n<details>\n<summary><b>Bash (macOS/Linux)</b></summary>\n\n```bash\n#!/bin/bash\n# Script to create a basic file structure (Structure 1)\n\n# Create main directories\nmkdir -p ~/Documents/{Personal,Work,School,Financial}\nmkdir -p ~/Downloads/{Installers,Documents,Images,Archives}\nmkdir -p ~/Pictures/{Personal,Work,Wallpapers,Screenshots}\nmkdir -p ~/Music/{Albums,Playlists,Podcasts,Audiobooks}\nmkdir -p ~/Videos/{Movies,\"TV Shows\",Personal,Tutorials}\nmkdir -p ~/Desktop/{\"Current Projects\",\"To Sort\"}\n\necho \"Basic directory structure created successfully!\"\n```\n</details>\n\n<details>\n<summary><b>PowerShell (Windows)</b></summary>\n\n```powershell\n# PowerShell script to create a basic file structure (Structure 1)\n\n# Create main directories\n$directories = @(\n    \"$HOME\\Documents\\Personal\",\n    \"$HOME\\Documents\\Work\",\n    \"$HOME\\Documents\\School\",\n    \"$HOME\\Documents\\Financial\",\n    \"$HOME\\Downloads\\Installers\",\n    \"$HOME\\Downloads\\Documents\",\n    \"$HOME\\Downloads\\Images\",\n    \"$HOME\\Downloads\\Archives\",\n    \"$HOME\\Pictures\\Personal\",\n    \"$HOME\\Pictures\\Work\",\n    \"$HOME\\Pictures\\Wallpapers\",\n    \"$HOME\\Pictures\\Screenshots\",\n    \"$HOME\\Music\\Albums\",\n    \"$HOME\\Music\\Playlists\",\n    \"$HOME\\Music\\Podcasts\",\n    \"$HOME\\Music\\Audiobooks\",\n    \"$HOME\\Videos\\Movies\",\n    \"$HOME\\Videos\\TV Shows\",\n    \"$HOME\\Videos\\Personal\",\n    \"$HOME\\Videos\\Tutorials\",\n    \"$HOME\\Desktop\\Current Projects\",\n    \"$HOME\\Desktop\\To Sort\"\n)\n\nforeach ($dir in $directories) {\n    if (!(Test-Path -Path $dir)) {\n        New-Item -ItemType Directory -Path $dir -Force\n    }\n}\n\nWrite-Host \"Basic directory structure created successfully!\" -ForegroundColor Green\n```\n</details>\n\n<details>\n<summary><b>Python (Cross-Platform)</b></summary>\n\n```python\n#!/usr/bin/env python3\n# Script to create any filesystem structure based on input\n\nimport os\nimport sys\nimport json\nfrom pathlib import Path\n\ndef create_structure(base_path, structure):\n    \"\"\"Recursively create directory structure from dict\"\"\"\n    for name, contents in structure.items():\n        path = os.path.join(base_path, name)\n        os.makedirs(path, exist_ok=True)\n        print(f\"Created: {path}\")\n        \n        if isinstance(contents, dict):\n            create_structure(path, contents)\n\nif __name__ == \"__main__\":\n    # Example structure (can be loaded from JSON file)\n    basic_structure = {\n        \"Documents\": {\n            \"Personal\": {},\n            \"Work\": {},\n            \"School\": {},\n            \"Financial\": {}\n        },\n        \"Downloads\": {\n            \"Installers\": {},\n            \"Documents\": {},\n            \"Images\": {},\n            \"Archives\": {}\n        },\n        \"Pictures\": {\n            \"Personal\": {},\n            \"Work\": {},\n            \"Wallpapers\": {},\n            \"Screenshots\": {}\n        },\n        \"Music\": {\n            \"Albums\": {},\n            \"Playlists\": {},\n            \"Podcasts\": {},\n            \"Audiobooks\": {}\n        },\n        \"Videos\": {\n            \"Movies\": {},\n            \"TV Shows\": {},\n            \"Personal\": {},\n            \"Tutorials\": {}\n        },\n        \"Desktop\": {\n            \"Current Projects\": {},\n            \"To Sort\": {}\n        }\n    }\n    \n    home_dir = str(Path.home())\n    create_structure(home_dir, basic_structure)\n    print(f\"Structure created successfully in {home_dir}\")\n```\n</details>\n\n## 🚀 Using These Structures\n\n<details>\n<summary><b>Browse & Explore</b></summary>\n<p>\nNavigate through each structure directory to understand its organization principles and advantages for different use cases. Compare multiple structures to find elements that might work best for your needs.\n</p>\n</details>\n\n<details>\n<summary><b>Copy & Implement</b></summary>\n<p>\nYou can copy entire structures or portions that fit your needs:\n\n```bash\n# Clone the entire repository\ngit clone https://github.com/deathrashed/filesystem-structures.git\n\n# Copy a specific structure to your home directory\ncp -r filesystem-structures/Structure\\ 1\\ -\\ Basic/* ~/\n\n# For Windows users (using PowerShell)\nCopy-Item -Path \"filesystem-structures\\Structure 1 - Basic\\*\" -Destination $HOME -Recurse\n```\n</p>\n</details>\n\n<details>\n<summary><b>Customize & Adapt</b></summary>\n<p>\nThese structures are starting points. Modify them to better match your specific requirements:\n\n- Rename directories to match your terminology preferences\n- Add or remove subdirectories based on your actual usage patterns\n- Combine elements from multiple structures to create a hybrid system\n- Create symlinks to frequently accessed locations\n</p>\n</details>\n\n## 💡 Customization Examples\n\n<details>\n<summary><b>Photo Organization Hybrid</b></summary>\n<p>\nA photographer combined the <a href=\"./Structure 4 - Multimedia\">Multimedia Structure</a> with <a href=\"./Structure 8 - Time Based\">Time-Based</a> approach:\n\n```\nPhotos/\n├── Projects/                # Active photo projects\n│   ├── Client_Shoots/       # Client work organized by client name\n│   └── Personal_Projects/   # Personal creative projects\n├── Archive/                 # Completed work\n│   ├── 2021/               \n│   │   ├── Q1/             # Quarterly organization\n│   │   ├── Q2/\n│   │   └── ...\n│   ├── 2022/\n│   └── ...\n├── Portfolio/               # Best work for showcase\n│   ├── Landscapes/\n│   ├── Portraits/\n│   └── ...\n└── Resources/               # Reference materials\n    ├── Presets/\n    ├── Textures/\n    └── Educational/\n```\n</p>\n</details>\n\n<details>\n<summary><b>Developer Knowledge Base</b></summary>\n<p>\nA software developer combined <a href=\"./Structure 9 - Developer Focused\">Developer-Focused</a> with <a href=\"./Structure 6 - Johnny.Decimal\">Johnny.Decimal</a>:\n\n```\nKnowledgeBase/\n├── 10-19 Development/\n│   ├── 11 Languages/\n│   │   ├── 11.01 Python/\n│   │   ├── 11.02 JavaScript/\n│   │   └── ...\n│   ├── 12 Frameworks/\n│   │   ├── 12.01 React/\n│   │   ├── 12.02 Django/\n│   │   └── ...\n│   └── ...\n├── 20-29 Systems/\n│   ├── 21 DevOps/\n│   ├── 22 Databases/\n│   └── ...\n├── 30-39 Projects/\n│   ├── 31 Personal/\n│   ├── 32 Work/\n│   └── ...\n└── 90-99 Meta/\n    ├── 91 Templates/\n    ├── 92 Scripts/\n    └── ...\n```\n</p>\n</details>\n\n<details>\n<summary><b>Small Business Admin Structure</b></summary>\n<p>\nA small business owner combined <a href=\"./Structure 7 - Action Oriented (GTD)\">GTD</a> with <a href=\"./Structure 5 - PARA Method\">PARA</a>:\n\n```\nBusiness/\n├── Projects/                     # Current business initiatives\n│   ├── Website_Redesign/\n│   ├── Product_Launch_Spring23/\n│   └── ...\n├── Areas/                        # Ongoing business functions\n│   ├── Accounting/\n│   │   ├── A_Pending/            # Needs action\n│   │   ├── A_Complete/           # Archived by year\n│   │   └── A_Reference/          # Templates, etc.\n│   ├── HR/\n│   │   ├── H_Pending/\n│   │   ├── H_Complete/\n│   │   └── H_Reference/\n│   └── ...\n├── Resources/                    # Business knowledge\n│   ├── Marketing/\n│   ├── Industry_Research/\n│   └── ...\n└── Archives/                     # Completed projects and old items\n    ├── 2021/\n    ├── 2022/\n    └── ...\n```\n</p>\n</details>\n\n## 🛠️ Customization Tips\n\n- **Use Consistent Naming** - Decide on naming conventions (CamelCase, kebab-case, snake_case) and apply them consistently\n- **Consider Automation** - Tools like Hazel (macOS), File Juggler (Windows), or inotify scripts (Linux) can help maintain your structure\n- **Start Small** - Implement a structure for new files first, then gradually organize existing files\n- **Include Metadata** - Consider adding tagging, color-coding, or README files within directories to add context\n- **Review Periodically** - Schedule regular reviews to adjust your structure as your needs evolve\n\n## 🔄 Maintenance Recommendations\n\n1. **Regular Reviews** - Schedule monthly or quarterly reviews of your structure\n2. **Inbox Processing** - Maintain an inbox system for temporary files before proper filing\n3. **Archive Old Content** - Move inactive files to an archive to keep active directories lean\n4. **Backup Strategy** - Implement backups that respect your organizational structure\n5. **Documentation** - Keep notes on your customizations for future reference\n\n## 🤝 Contributing\n\nContributions are welcome! Feel free to:\n- Submit additional structure designs\n- Suggest improvements to existing structures\n- Share your experiences and customizations\n- Report issues or suggest clarifications\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n---\n\n<div align=\"center\">\n  <p>Created for the organizationally obsessed</p>\n  <p>\n    <a href=\"https://github.com/deathrashed\"><img src=\"https://img.shields.io/badge/GitHub-100000?style=for-the-badge&logo=github&logoColor=white\" alt=\"GitHub\"></a>\n  </p>\n</div>\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "directory",
        "hierarchies",
        "deathrashed filesystem",
        "filesystem organization",
        "filesystem structures"
      ],
      "category": "file-management"
    },
    "delorenj--super-win-cli-mcp-server": {
      "owner": "delorenj",
      "name": "super-win-cli-mcp-server",
      "url": "https://github.com/delorenj/super-win-cli-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/delorenj.webp",
      "description": "Provides full access to Windows CLI environments and unrestricted execution of system commands, enabling broad control over the operating system and file system.",
      "stars": 6,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-28T18:40:10Z",
      "readme_content": "# Super Windows CLI MCP Server\n\nAn enhanced fork of the Windows CLI MCP Server with unrestricted system access capabilities.\n\n## Enhancements\n\n- Full system access through SYSTEM service installation\n- Unrestricted command execution\n- Network-level access controls\n- Unlimited process capabilities\n- Auto-recovery and fault tolerance\n- PowerShell telemetry disabled\n\n## Security Notice\n\nThis version removes application-level restrictions in favor of network-level security. It is designed for use in trusted environments where full system access is required.\n\n## Features\n\n- Complete access to Windows shell environments (PowerShell, CMD, Git Bash)\n- No command or argument restrictions\n- Full file system access\n- SYSTEM-level service installation\n- Automatic service recovery\n- Network binding controls\n- Process reuse for performance\n- Extended timeouts for long-running operations\n\n## Installation\n\n1. Build the project:\n```bash\nnpm install\nnpm run build\n```\n\n2. Copy the built files to your Windows machine\n\n3. Run the installation script as administrator:\n```powershell\n.\\install-service.ps1\n```\n\n## Configuration\n\nThe server is configured for maximum capability with these key features:\n\n- No command restrictions\n- Full filesystem access\n- Disabled injection protection\n- Unlimited process resources\n- Network-level access control\n- SYSTEM-level privileges\n\nSee `config.json` for the complete configuration.\n\n## Service Management\n\n### Installation\n```powershell\n.\\install-service.ps1\n```\n\n### Removal\n```powershell\n.\\uninstall-service.ps1\n```\n\n## Network Security\n\nWhile application-level restrictions are removed, the following network-level protections are in place:\n\n- Localhost binding by default\n- Configurable allowed IP ranges\n- Local network restriction\n- Optional VPN integration\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgments\n\nBased on the original [win-cli-mcp-server](https://github.com/SimonB97/win-cli-mcp-server) by SimonB97.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cli",
        "commands",
        "delorenj",
        "windows cli",
        "win cli",
        "cli mcp"
      ],
      "category": "file-management"
    },
    "diegofornalha--mcp-server-tess": {
      "owner": "diegofornalha",
      "name": "mcp-server-tess",
      "url": "https://github.com/diegofornalha/mcp-server-tess",
      "imageUrl": "/freedevtools/mcp/pfp/diegofornalha.webp",
      "description": "Integrate with the TESS API to manage and execute TESS agents, handle file associations, and customize messages for agent interactions. Provides an interface to streamline AI workflows with TESS functionalities.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-26T06:40:56Z",
      "readme_content": "# MCP-Server-TESS\n\nServidor MCP (Model Context Protocol) para integração com a API TESS.\n\n## Sobre\n\nEste projeto implementa um servidor que segue o protocolo MCP para interagir com a API TESS. O servidor expõe ferramentas que permitem:\n\n- Listar e gerenciar agentes\n- Executar agentes com mensagens personalizadas\n- Gerenciar arquivos e suas associações com agentes\n- E muito mais\n\n## Requisitos\n\n- Node.js 18+\n- Uma chave de API da plataforma TESS\n\n## Instalação\n\n### Via Smithery.ai (Recomendado)\n\nVocê pode usar este servidor diretamente no Smithery.ai:\n\n1. Acesse [https://smithery.ai/server/@diegofornalha/mcp-server-tess](https://smithery.ai/server/@diegofornalha/mcp-server-tess)\n2. Clique em \"Instalar\"\n3. Configure sua chave de API TESS quando solicitado\n4. Pronto! O servidor está disponível para uso com seu LLM favorito\n\n### Instalação Local\n\nClone o repositório e instale as dependências:\n\n```bash\ngit clone https://github.com/seu-usuario/mcp-server-tess.git\ncd mcp-server-tess\nnpm install\n```\n\n## Configuração\n\n1. Crie um arquivo `.env` baseado no `.env.example`\n2. Adicione sua chave de API da TESS:\n\n```\nTESS_API_KEY=sua_chave_api_aqui\nPORT=3000\n```\n\n## Compilação\n\n```bash\nnpm run build\n```\n\n## Execução\n\nPara iniciar o servidor em modo de produção:\n\n```bash\nnpm start\n```\n\nPara desenvolvimento com recarga automática:\n\n```bash\nnpm run dev\n```\n\n## Ferramentas disponíveis\n\nO servidor expõe as seguintes ferramentas via API HTTP:\n\n1. `listar_agentes_tess` - Lista todos os agentes disponíveis\n2. `obter_agente_tess` - Obtém detalhes de um agente específico\n3. `executar_agente_tess` - Executa um agente com mensagens personalizadas\n4. `listar_arquivos_agente_tess` - Lista arquivos associados a um agente\n5. `vincular_arquivo_agente_tess` - Vincula um arquivo a um agente\n6. `remover_arquivo_agente_tess` - Remove o vínculo de um arquivo com um agente\n7. `listar_arquivos_tess` - Lista todos os arquivos disponíveis\n8. `obter_arquivo_tess` - Obtém detalhes de um arquivo específico\n9. `enviar_arquivo_tess` - Envia um novo arquivo para a plataforma TESS\n10. `excluir_arquivo_tess` - Exclui um arquivo da plataforma TESS\n\n## Uso com Docker\n\nPara executar o servidor usando Docker:\n\n```bash\n# Construir a imagem\ndocker build -t mcp-server-tess .\n\n# Executar o container\ndocker run -p 3000:3000 -e TESS_API_KEY=sua_chave_api_aqui mcp-server-tess\n```\n\n## Endpoints da API\n\n- `GET /health` - Endpoint de verificação da saúde do servidor\n- `GET /capabilities` - Lista todas as ferramentas disponíveis com suas descrições e parâmetros\n- `POST /tools/:toolName` - Executa uma ferramenta específica (substitua `:toolName` pelo nome da ferramenta)\n\n## Exemplo de uso\n\n### Com Smithery.ai\n\nApós a instalação no Smithery.ai, você pode usar o servidor com qualquer LLM compatível com MCP:\n\n1. Selecione o servidor `@diegofornalha/mcp-server-tess` nas configurações do seu LLM\n2. As ferramentas da API TESS ficarão disponíveis automaticamente para seu modelo\n\n### Via API HTTP\n\nPara executar um agente:\n\n```bash\ncurl -X POST http://localhost:3000/tools/executar_agente_tess \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"agent_id\": \"seu_agent_id\",\n    \"model\": \"tess-ai-light\",\n    \"messages\": [\n      {\"role\": \"user\", \"content\": \"Olá, como você está?\"}\n    ]\n  }'\n```\n\n## Licença\n\nMIT ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tess",
        "workflows",
        "agents",
        "workflows tess",
        "server tess",
        "tess api"
      ],
      "category": "file-management"
    },
    "dinh-ai-system-exe-com-vn--file-system-mcp-sse": {
      "owner": "dinh-ai-system-exe-com-vn",
      "name": "file-system-mcp-sse",
      "url": "https://github.com/dinh-ai-system-exe-com-vn/file-system-mcp-sse",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Facilitates secure and efficient filesystem operations, enabling tasks such as reading, writing, editing, and searching files and directories. Provides capabilities for managing file metadata, directory structures, and advanced search functionalities within specified paths.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "files",
        "sse",
        "file management",
        "filesystem operations",
        "efficient filesystem"
      ],
      "category": "file-management"
    },
    "erikhoward--adls-mcp-server": {
      "owner": "erikhoward",
      "name": "adls-mcp-server",
      "url": "https://github.com/erikhoward/adls-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/erikhoward.webp",
      "description": "Standardized interface for interacting with Azure Data Lake Storage Gen2, facilitating file operations through MCP tools.",
      "stars": 4,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-06-05T06:47:58Z",
      "readme_content": "# ADLS2 MCP Server 🚀\n\nA Model Context Protocol (MCP) server implementation for Azure Data Lake Storage Gen2. This service provides a standardized interface for interacting with ADLS2 storage, enabling file operations through MCP tools.\n\n[![License](https://img.shields.io/github/license/erikhoward/adls-mcp-server)](https://opensource.org/licenses/MIT) [![Python Version](https://img.shields.io/badge/python-3.13%2B-blue.svg)](https://www.python.org/) [![uv](https://img.shields.io/badge/uv-package%20manager-blueviolet)](https://docs.astral.sh/uv/) [![MCP](https://img.shields.io/badge/MCP-compatible-green.svg)](https://github.com/modelcontextprotocol/spec)\n\n## Setup 🛠️\n\n### Installation 📦\n\nRequires Python 3.13 or higher.\n\nInstall the package using `uv`:\n\n```bash\nuv pip install adls2-mcp-server\n```\n\n### MCP Configuration ⚙️\n\n### Claude Desktop Configuration\n\n1 - Edit Claude Desktop Configuration:\n\nOpen `claude_desktop_config.json` and add the following configuration.\n\nOn MacOs, the file is located here:\n`~/Library/Application Support/Claude Desktop/claude_desktop_config.json`.\n\nOn Windows, the file is located here:\n`%APPDATA%\\Claude Desktop\\claude_desktop_config.json`.\n\n```json\n{\n    \"mcpServers\": {\n        \"adls2\": {\n            \"command\": \"adls2-mcp-server\",\n            \"env\": {\n                \"LOG_LEVEL\": \"DEBUG\",\n                \"UPLOAD_ROOT\": \"/path/to/store/uploads\",\n                \"DOWNLOAD_ROOT\": \"/path/to/store/downloads\",\n                \"AZURE_STORAGE_ACCOUNT_NAME\": \"your-azure-adls2-storage-account-name\",\n                \"READ_ONLY_MODE\": \"false\"\n            }\n        }\n    }\n}\n```\n\nThe following is a table of available environment configuration variables:\n\n| Variable | Description | Default |\n| --- | --- | --- |\n| `LOG_LEVEL` | Logging level | `INFO` |\n| `UPLOAD_ROOT` | Root directory for file uploads | `./uploads` |\n| `DOWNLOAD_ROOT` | Root directory for file downloads | `./downloads` |\n| `AZURE_STORAGE_ACCOUNT_NAME` | Azure ADLS2 storage account name | `None` |\n| `AZURE_STORAGE_ACCOUNT_KEY` | Azure ADLS2 storage account key (optional) | `None` |\n| `READ_ONLY_MODE` | Whether the server should operate in read-only mode | `true` |\n\n\nIf `AZURE_STORAGE_ACCOUNT_KEY` is not set, the server will attempt to authenticate using Azure CLI credentials. Ensure you have logged in with Azure CLI before running the server:\n\n```bash\naz login\n```\n\n2 - Restart Claude Desktop.\n\n### Available Tools 🔧\n\n#### Filesystem (container) Operations\n\n- `list_filesystems` - List all filesystems in the storage account\n- `create_filesystem` - Create a new filesystem\n- `delete_filesystem` - Delete an existing filesystem\n\n#### File Operations\n\n- `upload_file` - Upload a file to ADLS2\n- `download_file` - Download a file from ADLS2\n- `file_exists` - Check if a file exists\n- `rename_file` - Rename/move a file\n- `get_file_properties` - Get file properties\n- `get_file_metadata` - Get file metadata\n- `set_file_metadata` - Set file metadata\n- `set_file_metadata_json` - Set multiple metadata key-value pairs using JSON\n\n#### Directory Operations\n\n- `create_directory` - Create a new directory\n- `delete_directory` - Delete a directory\n- `rename_directory` - Rename/move a directory\n- `directory_exists` - Check if a directory exists\n- `directory_get_paths` - Get all paths under the specified directory\n\n## Development 💻\n\n### Local Development Setup\n\n1 - Clone the repository:\n\n```bash\ngit clone https://github.com/erikhoward/adls2-mcp-server.git\ncd adls2-mcp-server\n```\n\n2 - Create and activate virtual environment:\n\nLinux/macOS:\n\n```bash\npython -m venv .venv\nsource .venv/bin/activate\n```\n\nWindows:\n\n```bash\n.venv\\Scripts\\activate\n```\n\n3 - Install dependencies:\n\n```bash\npip install -e \".[dev]\"\n```\n\n4 - Copy and configure environment variables:\n\n```bash\ncp .env.example .env\n```\n\nEdit .env with your settings.\n\n```bash\nAZURE_STORAGE_ACCOUNT_NAME=your_azure_adls2_storage_account_name\nAZURE_STORAGE_ACCOUNT_KEY=your_azure_adls2_storage_key (optional)\nDOWNLOAD_ROOT=/path/to/download/folder\nUPLOAD_ROOT=/path/to/upload/folder\nREAD_ONLY_MODE=True\nLOG_LEVEL=INFO\n```\n\nIf `AZURE_STORAGE_ACCOUNT_KEY` is not set, the server will attempt to authenticate using Azure CLI credentials. Ensure you have logged in with Azure CLI before running the server:\n\n```bash\naz login\n```\n\n5 - Claude Desktop Configuration\n\nOpen `claude_desktop_config.json` and add the following configuration.\n\nOn MacOs, the file is located here:\n`~/Library/Application Support/Claude Desktop/claude_desktop_config.json`.\n\nOn Windows, the file is located here:\n`%APPDATA%\\Claude Desktop\\claude_desktop_config.json`.\n\n```json\n{\n    \"mcpServers\": {\n        \"adls2\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/path/to/adls2-mcp-server/repo\",\n                \"run\",\n                \"adls2-mcp-server\"\n            ],\n            \"env\": {\n                \"LOG_LEVEL\": \"DEBUG\",\n                \"UPLOAD_ROOT\": \"/path/to/store/uploads\",\n                \"DOWNLOAD_ROOT\": \"/path/to/store/downloads\",\n                \"AZURE_STORAGE_ACCOUNT_NAME\": \"your-azure-adls2-storage-account-name\",\n                \"READ_ONLY_MODE\": \"false\"\n            }\n        }\n    }\n}\n```\n\n6 - Restart Claude Desktop.\n\n## Contributions 🤝\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your changes (`git commit -m '✨ Add some AmazingFeature'`)\n4. Push to the branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n## License ⚖️\n\nLicensed under MIT - see [LICENSE.md](LICENSE) file.\n\n**This is not an official Microsoft product.**\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "azure",
        "storage",
        "adls",
        "storage gen2",
        "lake storage",
        "data lake"
      ],
      "category": "file-management"
    },
    "exoticknight--mcp-file-merger": {
      "owner": "exoticknight",
      "name": "mcp-file-merger",
      "url": "https://github.com/exoticknight/mcp-file-merger",
      "imageUrl": "/freedevtools/mcp/pfp/exoticknight.webp",
      "description": "Combine multiple files into a single file efficiently, providing detailed reports on file sizes and merge summaries. Access is restricted to user-defined directories for security.",
      "stars": 23,
      "forks": 11,
      "license": "Apache License 2.0",
      "language": "JavaScript",
      "updated_at": "2025-09-11T06:14:36Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/exoticknight-mcp-file-merger-badge.png)](https://mseep.ai/app/exoticknight-mcp-file-merger)\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/exoticknight/mcp-file-merger)](https://archestra.ai/mcp-catalog/exoticknight__mcp-file-merger)\n\n# File Merger MCP Server\n\nSimple utility to combine multiple files into one. Fast, secure, and easy to use.\n\n<a href=\"https://glama.ai/mcp/servers/@exoticknight/mcp-file-merger\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@exoticknight/mcp-file-merger/badge\" alt=\"File Merger Server MCP server\" />\n</a>\n\n## Features\n\n- **Simple** - Merge any number of files with a single command\n- **Fast** - Efficiently combines files of any size\n- **Secure** - Only accesses directories you allow\n- **Detailed** - Reports file sizes and merge summary\n\n## API\n\n### Tools\n\n- **merge_files**\n  - Inputs:\n    - `inputPaths` (string[]): Files to merge\n    - `outputPath` (string): Output file location\n  - Returns:\n    - Success message with merge details\n\n- **list_allowed_directories**\n  - Lists directories the server can access\n\n## Usage with Claude Desktop\n\nAdd to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"file-merger\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@exoticknight/mcp-file-merger\",\n        \"/path/to/allowed/dir\"\n      ]\n    }\n  }\n}\n```\n\n## Installation\n\n```bash\n# Clone and install\ngit clone https://github.com/exoticknight/mcp-file-merger.git\ncd mcp-file-merger\nnpm install\nnpm run build\n```\n\n## License\n\nApache License 2.0",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "merge",
        "file",
        "file merger",
        "file management",
        "mcp file"
      ],
      "category": "file-management"
    },
    "funchs--ifly-spark-agent-mcp": {
      "owner": "funchs",
      "name": "ifly-spark-agent-mcp",
      "url": "https://github.com/funchs/ifly-spark-agent-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/funchs.webp",
      "description": "Invokes the task chain of the iFlytek SparkAgent Platform through an MCP server interface, allowing users to upload files and interact with platform capabilities. Enables integration with AI models for automated workflows and task execution.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-04-20T13:44:44Z",
      "readme_content": "# ifly-spark-agent-mcp\n\nThis is a simple example of using MCP Server to invoke the task chain of the  iFlytek SparkAgent Platform.\n\n## Usage\n\n### Local debugging\n\nStart the server using either stdio (default) or SSE transport:\n\n```bash\n# Using stdio transport (default)\nuv run ifly-spark-agent-mcp\n\n# Using SSE transport on custom port\nuv run ifly-spark-agent-mcp --transport sse --port 8000\n```\n\nBy default, the server exposes a tool named \"upload_file\" that accepts one required argument:\n\n- `file`: The path of the uploaded file\n\n### MCP Client Example\n\nUsing the MCP client, you can use the tool like this using the STDIO transport:\n\n```python\nimport asyncio\nfrom mcp.client.session import ClientSession\nfrom mcp.client.stdio import StdioServerParameters, stdio_client\n\n\nasync def main():\n    async with stdio_client(\n        StdioServerParameters(command=\"uv\", args=[\"run\", \"ifly-spark-agent-mcp\"])\n    ) as (read, write):\n        async with ClientSession(read, write) as session:\n            await session.initialize()\n\n            # List available tools\n            tools = await session.list_tools()\n            print(tools)\n\n            # Call the upload_file tool\n            result = await session.call_tool(\"upload_file\", {\"file\": \"/path/to/file\"})\n            print(result)\n\n\nasyncio.run(main())\n\n```\n\n### Usage with MCP client\n\n#### Use on Claude\nTo add a persistent client, add the following to your `claude_desktop_config.json` or `mcp.json` file:\n\n##### 1. Use uv\n```json\n{\n  \"mcpServers\": {\n    \"ifly-spark-agent-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/ifly-spark-agent-mcp\",\n        \"run\",\n        \"ifly-spark-agent-mcp\"\n      ],\n      \"env\": {\n        \"IFLY_SPARK_AGENT_BASE_URL\": \"xxxx\",\n        \"IFLY_SPARK_AGENT_APP_ID\": \"xxxx\",\n        \"IFLY_SPARK_AGENT_APP_SECRET\": \"xxxx\"\n      }\n    }\n  }\n}\n```\n\n##### 2. Use uvx with github repository\n```json\n{\n    \"mcpServers\": {\n        \"ifly-spark-agent-mcp\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"--from\",\n                \"git+https://github.com/iflytek/ifly-spark-agent-mcp\",\n                \"ifly-spark-agent-mcp\"\n            ],\n            \"env\": {\n              \"IFLY_SPARK_AGENT_BASE_URL\": \"xxxx\",\n              \"IFLY_SPARK_AGENT_APP_ID\": \"xxxx\",\n              \"IFLY_SPARK_AGENT_APP_SECRET\": \"xxxx\"\n            }\n        }\n    }\n}\n```\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sparkagent",
        "spark",
        "agent",
        "sparkagent platform",
        "spark agent",
        "iflytek sparkagent"
      ],
      "category": "file-management"
    },
    "gabrielmaialva33--mcp-filesystem": {
      "owner": "gabrielmaialva33",
      "name": "mcp-filesystem",
      "url": "https://github.com/gabrielmaialva33/mcp-filesystem",
      "imageUrl": "/freedevtools/mcp/pfp/gabrielmaialva33.webp",
      "description": "Provides secure filesystem access for AI models through the Model Context Protocol with strict path validation to ensure authorized access to predefined directories, enabling seamless file and directory operations.",
      "stars": 7,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-03T15:12:37Z",
      "readme_content": "<h1 align=\"center\">\n  <br>\n  <img src=\"https://raw.githubusercontent.com/gabrielmaialva33/mcp-filesystem/master/.github/assets/mcp.png\" alt=\"MCP Filesystem\" width=\"200\">\n  <br>\n  Secure <a href=\"https://modelcontextprotocol.io/introduction\">MCP</a> Filesystem Server\n  <br>\n</h1>\n\n<p align=\"center\">\n  <strong>A secure Model Context Protocol (MCP) server providing filesystem access within predefined directories</strong>\n</p>\n\n<p align=\"center\">\n  <img src=\"https://img.shields.io/github/license/gabrielmaialva33/mcp-filesystem?color=00b8d3?style=flat&logo=appveyor\" alt=\"License\" />\n  <img src=\"https://img.shields.io/github/languages/top/gabrielmaialva33/mcp-filesystem?style=flat&logo=appveyor\" alt=\"GitHub top language\" >\n  <img src=\"https://img.shields.io/github/languages/count/gabrielmaialva33/mcp-filesystem?style=flat&logo=appveyor\" alt=\"GitHub language count\" >\n  <img src=\"https://img.shields.io/github/repo-size/gabrielmaialva33/mcp-filesystem?style=flat&logo=appveyor\" alt=\"Repository size\" >\n  <a href=\"https://github.com/gabrielmaialva33/mcp-filesystem/commits/master\">\n    <img src=\"https://img.shields.io/github/last-commit/gabrielmaialva33/mcp-filesystem?style=flat&logo=appveyor\" alt=\"GitHub last commit\" >\n    <img src=\"https://img.shields.io/badge/made%20by-Maia-15c3d6?style=flat&logo=appveyor\" alt=\"Maia\" >  \n  </a>\n</p>\n\n<br>\n\n<p align=\"center\">\n  <a href=\"#bookmark-about\">About</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\n  <a href=\"#computer-technologies\">Technologies</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\n  <a href=\"#wrench-tools\">Tools</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\n  <a href=\"#package-installation\">Installation</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\n  <a href=\"#gear-usage\">Usage</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\n  <a href=\"#memo-license\">License</a>\n</p>\n\n<br>\n\n## :bookmark: About\n\n**MCP Filesystem Server** provides secure filesystem access for AI models through the Model Context Protocol. It\nenforces strict path validation and only allows access to predefined directories.\n\n<br>\n\n## :computer: Technologies\n\n- **[TypeScript](https://www.typescriptlang.org/)**\n- **[Node.js](https://nodejs.org/)**\n- **[MCP SDK](https://github.com/modelcontextprotocol/typescript-sdk)**\n- **[Zod](https://zod.dev/)**\n- **[Docker](https://www.docker.com/)**\n- **[pnpm](https://pnpm.io/)**\n\n<br>\n\n## :wrench: Tools\n\n- **[Visual Studio Code](https://code.visualstudio.com/)**\n- **[ESLint](https://eslint.org/)**\n- **[Prettier](https://prettier.io/)**\n- **[Vitest](https://vitest.dev/)**\n- **[Docker Compose](https://docs.docker.com/compose/)**\n\n<br>\n\n## :package: Installation\n\n### :heavy_check_mark: **Prerequisites**\n\nThe following software must be installed:\n\n- **[Node.js](https://nodejs.org/en/)** (>=18.0.0)\n- **[Git](https://git-scm.com/)**\n- **[pnpm](https://pnpm.io/)** (>=8.0.0)\n- **[Docker](https://www.docker.com/)** (optional)\n- **[Docker Compose](https://docs.docker.com/compose/)** (optional)\n\n<br>\n\n### :arrow_down: **Cloning the repository**\n\n```sh\n  $ git clone https://github.com/gabrielmaialva33/mcp-filesystem.git\n  $ cd mcp-filesystem\n```\n\n<br>\n\n### :arrow_forward: **Running the application**\n\n#### Local Development\n\n```sh\n  # Install dependencies\n  $ pnpm install\n\n  # Build the application\n  $ pnpm build\n\n  # Run the server (specify directory to allow access to)\n  $ pnpm start /path/to/allowed/directory\n\n  # Or use configuration file\n  $ pnpm start --config=config.json\n```\n\n#### Using NPM Package\n\n```sh\n  # Install globally\n  $ npm install -g @gabrielmaialva33/mcp-filesystem\n\n  # Run the server\n  $ mcp-filesystem /path/to/allowed/directory\n\n  # Or use with npx (no installation needed)\n  $ npx @gabrielmaialva33/mcp-filesystem /path/to/allowed/directory\n\n  # Create a sample configuration file\n  $ npx @gabrielmaialva33/mcp-filesystem --create-config=config.json\n```\n\n#### Using Docker\n\n```sh\n  # Build the Docker image\n  $ docker build -t gabrielmaialva33/mcp-filesystem .\n\n  # Run using Docker\n  $ docker run -i --rm -v /path/to/data:/data:ro gabrielmaialva33/mcp-filesystem /data\n\n  # Use with config file\n  $ docker run -i --rm -v /path/to/config.json:/app/config.json -v /path/to/data:/data gabrielmaialva33/mcp-filesystem --config=/app/config.json\n```\n\n#### Using Docker Compose\n\n```sh\n  # Create a data directory\n  $ mkdir -p data\n\n  # Start the server\n  $ docker-compose up -d\n```\n\n<br>\n\n## :gear: Usage\n\n### Using with Claude Desktop\n\nClaude Desktop can be configured to use this MCP server for filesystem access. Add the following to your\n`claude_desktop_config.json`:\n\n#### Using Local Installation (Recommended)\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"mcp-filesystem\",\n      \"args\": [\n        \"/Users/gabrielmaia/Documents\",\n        \"/Users/gabrielmaia/Desktop\",\n        \"/Users/gabrielmaia/Downloads\"\n      ]\n    }\n  }\n}\n```\n\nMake sure to make the executable available globally:\n\n```sh\n# Make the binary executable\nchmod +x /Users/gabrielmaia/.nvm/versions/node/v22.14.0/bin/mcp-filesystem\n```\n\n#### Using NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@gabrielmaialva33/mcp-filesystem\",\n        \"/Users/username/Desktop\",\n        \"/path/to/other/allowed/dir\"\n      ]\n    }\n  }\n}\n```\n\n#### Using Docker\n\nNote: When using Docker, all directories must be mounted to `/projects` by default. Adding the `ro` flag will make the\ndirectory read-only.\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"--mount\",\n        \"type=bind,src=/Users/username/Desktop,dst=/projects/Desktop\",\n        \"--mount\",\n        \"type=bind,src=/path/to/other/allowed/dir,dst=/projects/other/allowed/dir,ro\",\n        \"--mount\",\n        \"type=bind,src=/path/to/file.txt,dst=/projects/path/to/file.txt\",\n        \"gabrielmaialva33/mcp-filesystem\",\n        \"/projects\"\n      ]\n    }\n  }\n}\n```\n\n### Available Tools\n\nThe MCP Filesystem Server provides these tools:\n\n#### File System Operations\n\n- **read_file**: Read a file's content\n- **read_multiple_files**: Read multiple files at once\n- **write_file**: Create or overwrite a file\n- **edit_file**: Make precise edits with diff preview\n- **create_directory**: Create directories recursively\n- **list_directory**: List directory contents\n- **directory_tree**: Get a recursive tree view\n- **move_file**: Move or rename files\n- **search_files**: Find files matching patterns\n- **get_file_info**: Get file metadata\n- **list_allowed_directories**: See accessible directories\n\n#### System & Network Operations\n\n- **get_metrics**: View server performance metrics (v0.3.0+)\n- **execute_command**: Execute system commands securely (v0.3.1+)\n- **curl_request**: Execute HTTP requests to external APIs (coming in v1.2.0)\n\n#### Using curl_request Tool (Coming in v1.2.0)\n\nThe `curl_request` tool will allow you to make HTTP requests to external APIs:\n\n```javascript\n// Example: Making a GET request with authentication\ncurl_request({\n  url: 'https://api.example.com/data',\n  method: 'GET',\n  headers: {\n    Authorization: 'Bearer your_token_here',\n  },\n})\n\n// Example: POST request with JSON data\ncurl_request({\n  url: 'https://api.example.com/create',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  data: '{\"name\":\"Example\",\"value\":123}',\n})\n```\n\nSee the `docs/curl-tool-examples.md` file for more detailed examples.\n\n<br>\n\n## :sparkles: Features\n\n### Core Features\n\n- **Secure Access**: Strict path validation prevents unauthorized access\n- **File Operations**: Read, write, edit, and move files\n- **Directory Operations**: Create, list, get tree views, and search directories\n- **Metadata Access**: View file and directory information\n- **Command Execution**: Securely execute system commands with strict validation\n- **Docker Support**: Easy deployment with Docker and Docker Compose\n\n### New Features in v0.3.0\n\n- **Structured Logging**: Detailed logging with different levels (debug, info, warn, error)\n- **Performance Metrics**: Track operation counts, errors, and execution times\n- **Configuration Management**: Support for JSON configuration files\n- **Path Caching**: Improved performance for frequently accessed paths\n- **Improved Error Handling**: Specialized error types with structured information\n- **File Size Validation**: Prevent loading excessively large files\n- **CLI Improvements**: Help command, version info, and config generation\n\n### Configuration Options\n\nYou can create a configuration file using:\n\n```sh\n$ mcp-filesystem --create-config=config.json\n```\n\nExample configuration:\n\n```json\n{\n  \"allowedDirectories\": [\"/path/to/allowed/dir1\", \"/path/to/allowed/dir2\"],\n  \"logLevel\": \"info\",\n  \"logFile\": \"/path/to/logs/mcp-filesystem.log\",\n  \"serverName\": \"secure-filesystem-server\",\n  \"serverVersion\": \"0.3.0\",\n  \"cache\": {\n    \"enabled\": true,\n    \"maxSize\": 1000,\n    \"ttlMs\": 60000\n  },\n  \"metrics\": {\n    \"enabled\": true,\n    \"reportIntervalMs\": 60000\n  },\n  \"security\": {\n    \"maxFileSize\": 10485760,\n    \"allowSymlinks\": true,\n    \"validateRealPath\": true\n  }\n}\n```\n\n<br>\n\n### :writing_hand: **Author**\n\n| [![Gabriel Maia](https://avatars.githubusercontent.com/u/26732067?size=100)](https://github.com/gabrielmaialva33) |\n| ----------------------------------------------------------------------------------------------------------------- |\n| [Gabriel Maia](https://github.com/gabrielmaialva33)                                                               |\n\n## License\n\n[MIT License](LICENSE)\n\n<p align=\"center\"><img alt=\"gray0_ctp_on_line_svg_sanitize_true\" src=\"https://raw.githubusercontent.com/gabrielmaialva33/gabrielmaialva33/master/assets/gray0_ctp_on_line.svg?sanitize=true\" /></p>\n<p align=\"center\">&copy; 2024-present <a href=\"https://github.com/gabrielmaialva33/\" target=\"_blank\">Maia</a>\n</p>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "file",
        "directory",
        "mcp filesystem",
        "secure filesystem",
        "filesystem access"
      ],
      "category": "file-management"
    },
    "git-jiadong--wechatDataBackup": {
      "owner": "git-jiadong",
      "name": "wechatDataBackup",
      "url": "https://github.com/git-jiadong/wechatDataBackup",
      "imageUrl": "/freedevtools/mcp/pfp/git-jiadong.webp",
      "description": "Export and permanently save WeChat chat records, allowing users to view messages such as images, videos, and files even if WeChat no longer supports them.",
      "stars": 5702,
      "forks": 491,
      "license": "Apache License 2.0",
      "language": "Go",
      "updated_at": "2025-10-04T08:18:33Z",
      "readme_content": "<p align=\"center\" style=\"text-align: center\">\n  <br/>\n</p>\n\n<p align=\"center\">\n  <b>wechatDataBackup: PC微信聊天记录数据导出工具</b>\n  <br/>\n  <br/>\n  <a href=\"https://github.com/git-jiadong/wechatDataBackup/stargazers\">\n    <img src=\"https://img.shields.io/github/stars/git-jiadong/wechatDataBackup\" alt=\"GitHub Star\"/>\n  </a>\n  <a href=\"https://github.com/git-jiadong/wechatDataBackup/releases\">\n    <img src=\"https://img.shields.io/github/downloads/git-jiadong/wechatDataBackup/total\" alt=\"downloads\" />\n  </a>\n  <a href=\"https://github.com/git-jiadong/wechatDataBackup/releases\">\n    <img src=\"https://img.shields.io/github/v/release/git-jiadong/wechatDataBackup\" alt=\"releases version\"/>\n  </a>\n  <a href=\"https://github.com/git-jiadong/wechatDataBackup/commits/main\">\n    <img src=\"https://img.shields.io/github/last-commit/git-jiadong/wechatDataBackup\" alt=\"last commit\" />\n  </a>\n  <a href=\"https://github.com/git-jiadong/wechatDataBackup\" >\n    <img src=\"https://img.shields.io/github/languages/top/git-jiadong/wechatDataBackup\" alt=\"languages\"/>\n  </a>\n  <a href=\"https://github.com/git-jiadong/wechatDataBackup\" >\n    <img src=\"https://img.shields.io/github/repo-size/git-jiadong/wechatDataBackup\" alt=\"repo size\" />\n  </a>\n  <a href=\"https://github.com/git-jiadong/wechatDataBackup/blob/main/LICENSE\">\n    <img src=\"https://img.shields.io/github/license/git-jiadong/wechatDataBackup\" alt=\"license\" />\n  </a>\n</p>\n# wechatDataBackup\n\n* 基于wails开发 + React前端，实现PC端微信聊天记录一键导出功能。\n* 导出后数据可以做永久化保存，即使微信停止支持，聊天记录也可以随时查看。\n* 前端界面尽量与微信界面保持一致，减少使用成本。\n* 理论上支持所有Windows 32/64位微信版本。\n\n效果图如下：\n\n\n\n\n## 演示视频\n[演示视频](https://www.bilibili.com/video/BV1bPH1eWEEy/?share_source=copy_web&vd_source=b5cfa9258a9ad9900a00e9c1ce3cb4b6)\n## 使用方法\n1. 下载release可执行文件直接打开 国内朋友也可以使用 [网盘下载](https://pan.quark.cn/s/fa157b13e762)\n2. 下载源码自行编译可执行文件 [安装wails环境](https://wails.io/zh-Hans/docs/gettingstarted/installation)\n\n```shell\ngit clone https://github.com/git-jiadong/wechatDataBackup.git\ncd wechatDataBackup\nwails build\n```\n\n编译成功后在可执行二进制文件路径`build\\bin\\wechatDataBackup.exe`\n\n如果编译错误可能是没有gcc环境导致的，可以安装 [tdm-gcc](https://jmeubank.github.io/tdm-gcc/) 后在尝试。\n\n3. 导出聊天记录\n电脑登陆微信，然后打开`wechatDataBackup.exe`后按照如图提示导出\n\n\n## 功能\n\n本项目目前的规划与实现进度：\n- [x] 支持图片消息\n- [x] 支持视频消息\n- [x] 支持链接消息\n- [x] 支持语音消息\n- [x] 支持文件消息\n- [x] 支持名片消息\n- [x] 支持定位消息\n- [x] 支持视频/语音通话消息\n- [x] 支持QQ音乐消息\n- [x] 支持第三方视频软件分享消息\n- [x] 支持分享表情集消息\n- [x] 支持小程序消息\n- [x] 支持视频号/直播消息\n- [x] 支持转账消息\n- [x] 支持腾讯游戏分享消息\n- [x] 支持原始表情显示\n- [x] 支持按类型检索\n- [x] 支持日期检索\n- [x] 支持按群成员检索\n- [x] 支持增量式导出\n- [x] 多开账号选择导出\n- [x] 多开账号数据切换\n- [x] 头像使用本地头像\n- [ ] 支持更多消息类型显示\n- [x] 图片查看器重绘\n- [x] 支持会话导出分享\n- [x] 支持自动定位到最后浏览位置\n- [x] 支持书签功能\n- [x] 支持单聊会话对话人位置调换功能\n- [ ] 实现表情预先下载（实现完全离线查看）\n- [ ] 聊天报告\n- [ ] AI本地模型应用\n- [ ] 导出数据本地加密\n- ...\n如果遇到什么问题，或者有更好的建议与优化点欢迎给作者提 [ISSUE](https://github.com/git-jiadong/wechatDataBackup/issues)\n\n\n### 常见问题\n**Q: 支持手机端的聊天记录备份吗？**<br>\nA: 手机端可以使用聊天数据迁移功能，将手机的数据迁移到电脑后再将数据导出。 [微信迁移聊天记录功能](https://www.bilibili.com/opus/974795819172495381)<br>\n**Q: 导出后界面是空白的、导出的数据比PC微信里面看到的少,数据不完整**<br>\nA: 这是由于可能数据存在于内存中还没有回写到磁盘导致的，退出微信时会将内存的数据全部回写到磁盘，导出数据时最好退出重新登陆一次微信，保证数据都在磁盘中再导出即可。<br>\n**Q: 有些图片、视频打不开**<br>\nA: 这是电脑端微信没有点开过这个消息，默认只加载了预览图而已，如果手机有打开过可以把手机的记录迁移到电脑，迁移后重新退出登陆一次微信导出即可。<br>\n**Q: Win7电脑不能使用**<br>\nA: Win7电脑需要安装WebView2运行时才能正常使用。github release版本做了Windows版本限制，[Win7用户请安装专属的版本](https://pan.quark.cn/s/fa157b13e762)\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=git-jiadong/wechatDataBackup&type=Date)](https://star-history.com/?utm_source=bestxtools.com#git-jiadong/wechatDataBackup&Date)\n\n## 免责声明\n**⚠️ 本项目仅供学习、研究使用，严禁商业使用**<br/>\n**⚠️ 用于网络安全用途的，请确保在国家法律法规下使用**<br/>\n**⚠️ 本项目完全免费，问你要钱的都是骗子**<br/>\n**⚠️ 使用本项目初衷是作者研究微信数据库的运行使用，您使用本软件导致的后果，包含但不限于数据损坏，记录丢失等问题，作者不承担相关责任。**<br/>\n**⚠️ 因软件特殊性质，请在使用时获得微信账号所有人授权，你当确保不侵犯他人个人隐私权，后果自行承担**<br/>\n\n## 前端代码\n由于前端代码不成熟，前端界面代码暂时不公开。\n\n## 参考/引用\n- 微信数据库解密和数据库的使用 [PyWxDump](https://github.com/xaoyaoo/PyWxDump/tree/master)\n- silk语音消息解码 [silk-v3-decoder](https://github.com/kn007/silk-v3-decoder)\n- PCM转MP3 [lame](https://github.com/viert/lame.git)\n- Dat图片解码 [wechatDatDecode](https://github.com/liuggchen/wechatDatDecode)\n\n## 交流/讨论",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "wechatdatabackup",
        "export",
        "wechat",
        "jiadong wechatdatabackup",
        "wechatdatabackup export",
        "files wechat"
      ],
      "category": "file-management"
    },
    "gregkonush--mcp-obsidian": {
      "owner": "gregkonush",
      "name": "mcp-obsidian",
      "url": "https://github.com/gregkonush/mcp-obsidian",
      "imageUrl": "/freedevtools/mcp/pfp/gregkonush.webp",
      "description": "Integrate with Obsidian to manage notes by reading, creating, and manipulating files in the vault. Supports various operations including searching notes and handling file content.",
      "stars": 5,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-13T19:40:26Z",
      "readme_content": "# MCP Obsidian\n\nA server implementation of the [Model Context Protocol (MCP)](https://github.com/modelcontextprotocol/protocol) for integrating with [Obsidian](https://obsidian.md/). This allows AI assistants to read, create, and manipulate notes in your Obsidian vault.\n\n## Features\n\n- Read the active file in Obsidian\n- Delete the active file\n- Insert content at specific positions (headings, block references, frontmatter)\n- Append content to files\n- Open specific files\n- List files in your vault\n- Search through your notes\n\n## Prerequisites\n\n- [Bun](https://bun.sh/) runtime\n- [Obsidian](https://obsidian.md/) desktop application\n- An MCP-compatible AI assistant\n\n## Add to cursor\nPlace your secret in .env file\n\nChoose command MCP and then enter this command\n\n```\nbun __REPO_PATH__/src/index.ts\n```\n\n## Installation\n\n1. Clone this repository:\n\n   ```bash\n   git clone https://github.com/gregkonush/mcp-obsidian.git\n   cd mcp-obsidian\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   bun install\n   ```\n\n3. Copy the example environment file and configure it:\n   ```bash\n   cp .env.example .env\n   ```\n\n## Configuration\n\nEdit the `.env` file with your specific configurations:\n\n```\nOBSIDIAN_BASE_URL=http://localhost:27123\nOBSIDIAN_TOKEN=your_token_here\nDEBUG=false\n```\n\n## Usage\n\nStart the MCP server:\n\n```bash\nbun run src/index.ts\n```\n\nThe server will start and communicate with MCP-compatible AI assistants via standard I/O.\n\n## Available Tools\n\nThis implementation provides the following tools to AI assistants:\n\n- `get_active_file` - Returns the content of the currently active file\n- `delete_active_file` - Deletes the currently active file\n- `insert_active_file` - Modifies content relative to a heading, block reference, or frontmatter field\n- `append_active_file` - Appends content to the end of the active file\n- `open_file` - Opens a specific file in Obsidian\n- `search_simple` - Searches for documents matching a text query\n- `list_files` - Lists files in the root directory of your vault\n- `list_directory_files` - Lists files in a specific directory of your vault\n\n## Development\n\n### Project Structure\n\n```\nmcp-obsidian/\n├── src/\n│   ├── index.ts            # Main server implementation\n│   └── tools/              # Individual tool implementations\n│       ├── get-active-file.ts\n│       ├── delete-active-file.ts\n│       └── ...\n├── .env                    # Environment configuration\n├── package.json            # Project dependencies\n└── tsconfig.json           # TypeScript configuration\n```\n\n### Adding New Tools\n\nTo add a new tool:\n\n1. Create a new file in the `src/tools/` directory\n2. Implement the tool using the MCP SDK\n3. Import and register the tool in `src/index.ts`\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "obsidian",
        "files",
        "vault",
        "mcp obsidian",
        "obsidian manage",
        "file management"
      ],
      "category": "file-management"
    },
    "hexitex--MCP-Backup-Server": {
      "owner": "hexitex",
      "name": "MCP-Backup-Server",
      "url": "https://github.com/hexitex/MCP-Backup-Server",
      "imageUrl": "/freedevtools/mcp/pfp/hexitex.webp",
      "description": "Provides backup and restoration capabilities specifically designed for AI agents and code editing tools, simplifying the backup process and preserving the context of changes without the complexity of traditional version control systems.",
      "stars": 10,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-27T17:58:32Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/hexitex-mcp-backup-server-badge.png)](https://mseep.ai/app/hexitex-mcp-backup-server)\n\n# MCP Backup Server\n[![smithery badge](https://smithery.ai/badge/@hexitex/MCP-Backup-Server)](https://smithery.ai/server/@hexitex/MCP-Backup-Server)\n\nA specialized MCP server that provides backup and restoration capabilities for AI agents and code editing tools. Tested in both Cursor and Windsurf editors.\n\nRepository: [https://github.com/hexitex/MCP-Backup-Server](https://github.com/hexitex/MCP-Backup-Server)\n\n## Why Use This (Not Git)\n\nThis system serves a different purpose than Git:\n\n**Pros:**\n- Creates instant, targeted backups with agent context\n- Simpler than Git for single-operation safety\n- Preserves thought process and intent in backups\n- No commit messages or branching required\n- Better for AI agents making critical changes\n- Works without repository initialization\n- Faster for emergency \"save points\" during edits\n\n**Cons:**\n- Not for long-term version tracking \n- Limited collaboration features\n- No merging or conflict resolution\n- No distributed backup capabilities\n- Not a replacement for proper version control\n- Stores complete file copies rather than diffs\n\n**When to use:** Before risky edits, folder restructuring, or when you need quick safety backups with context.\n\n**When to use Git instead:** For proper version history, collaboration, and project management.\n\n## Features\n- Preserves agent context and reasoning\n- Creates targeted, minimal backups\n- Supports file and folder operations\n- Maintains version history\n- Provides restore safety\n- Uses pattern filtering\n- Tracks operations\n- Allows cancellation\n\n## Setup\n\n### Installing via Smithery\n\nTo install Backup Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@hexitex/MCP-Backup-Server):\n\n```bash\nnpx -y @smithery/cli install @hexitex/MCP-Backup-Server --client claude\n```\n\n### Installing Manually\n```bash\n# Install dependencies\nnpm install\n\n# Build TypeScript files\nnpm run build\n\n# Start the backup server\nnpm start\n```\n\n## Config\n\nEnv:\n- `BACKUP_DIR`: Backup directory (./.code_backups)\n- `EMERGENCY_BACKUP_DIR`: Emergency backups (./.code_emergency_backups)\n- `MAX_VERSIONS`: Version limit (10)\n\nConfigure in editor:\n\nWindsurf MCP config:\n```json\n{\n  \"mcpServers\": {\n    \"backup\": {\n      \"command\": \"node\",\n      \"args\": [\"./dist/index.js\"],\n      \"env\": {\n        \"BACKUP_DIR\": \"./.code_backups\",\n        \"EMERGENCY_BACKUP_DIR\": \"./.code_emergency_backups\",\n        \"MAX_VERSIONS\": \"20\"\n      }\n    }\n  }\n}\n```\n\nCursor: Create `.cursor/mcp.json` with similar config.\n\n## Tools\n\n### File Operations\n- `backup_create`: Create backup with context\n- `backup_list`: List available backups\n- `backup_restore`: Restore with safety backup\n\n### Folder Operations  \n- `backup_folder_create`: Backup with pattern filtering\n- `backup_folder_list`: List folder backups\n- `backup_folder_restore`: Restore folder structure\n\n### Management\n- `backup_list_all`: List all backups\n- `mcp_cancel`: Cancel operations\n\n## When to Use Backups\n\nOnly create backups when truly needed:\n\n1. **Before Refactoring**: When changing important code\n2. **Before Removing Folders**: When reorganizing project structure\n3. **Multiple Related Changes**: When updating several connected files\n4. **Resuming Major Work**: When continuing significant changes\n5. **Before Restores**: Create safety backup before restoring\n\nKeep backups minimal and purposeful. Document why each backup is needed.\n\n## Rules for Copy-Paste\n\n```\nAlways try to use the backup MCP server for operations that require a backup, listing backups and restoring backups.\nOnly backup before critical code changes, folder removal, changes to multiple related files, resuming major work, or restoring files.\nKeep backups minimal and focused only on files being changed.\nAlways provide clear context for why a backup is being created.\nUse pattern filters to exclude irrelevant files from folder backups.\nUse relative file paths when creating backups.\nCreate emergency backups before restore operations.\nClean up old backups to maintain system efficiency.\nBackup tools: backup_create, backup_list, backup_restore, backup_folder_create, backup_folder_list, backup_folder_restore, backup_list_all, mcp_cancel.\n```\n\n## For Human Users\n\nSimple commands like these at the start you may have to mention MCP tool\n\n```\n# Back up an important file\n\"Back up my core file before refactoring\"\n\n# Back up a folder before changes\n\"Create backup of the API folder before restructuring\"\n\n# Find previous backups\n\"Show me my recent backups\"\n\n# Restore a previous version\n\"Restore my core file from this morning\"\n```\n\n## Agent Examples\n\n### Quick Backups\n```json\n// Before project changes\n{\n  \"name\": \"mcp0_backup_folder_create\",\n  \"parameters\": {\n    \"folder_path\": \"./src\",\n    \"include_pattern\": \"*.{js,ts}\",\n    \"exclude_pattern\": \"{node_modules,dist,test}/**\",\n    \"agent_context\": \"Start auth changes\"\n  }\n}\n\n// Before core fix\n{\n  \"name\": \"mcp0_backup_create\",\n  \"parameters\": {\n    \"file_path\": \"./src/core.js\",\n    \"agent_context\": \"Fix validation\"\n  }\n}\n```\n\n### Resume Session\n```json\n// View recent work\n{\n  \"name\": \"mcp0_backup_list_all\",\n  \"parameters\": {\n    \"include_pattern\": \"src/**/*.js\"\n  }\n}\n\n// Get last version\n{\n  \"name\": \"mcp0_backup_restore\",\n  \"parameters\": {\n    \"file_path\": \"./src/core.js\",\n    \"timestamp\": \"20250310-055950-000\",\n    \"create_emergency_backup\": true\n  }\n}\n```\n\n### Core Changes\n```json\n// Critical update\n{\n  \"name\": \"mcp0_backup_create\",\n  \"parameters\": {\n    \"file_path\": \"./src/core.js\",\n    \"agent_context\": \"Add validation\"\n  }\n}\n\n// Module update\n{\n  \"name\": \"mcp0_backup_folder_create\",\n  \"parameters\": {\n    \"folder_path\": \"./src/api\",\n    \"include_pattern\": \"*.js\",\n    \"exclude_pattern\": \"test/**\",\n    \"agent_context\": \"Refactor modules\"\n  }\n}\n```\n\n### Restore Points\n```json\n// Check versions\n{\n  \"name\": \"mcp0_backup_list\",\n  \"parameters\": {\n    \"file_path\": \"./src/core.js\"\n  }\n}\n\n{\n  \"name\": \"mcp0_backup_folder_list\",\n  \"parameters\": {\n    \"folder_path\": \"./src/api\"\n  }\n}\n\n// File restore\n{\n  \"name\": \"mcp0_backup_restore\",\n  \"parameters\": {\n    \"file_path\": \"./src/core.js\",\n    \"timestamp\": \"20250310-055950-000\",\n    \"create_emergency_backup\": true\n  }\n}\n\n// Folder restore\n{\n  \"name\": \"mcp0_backup_folder_restore\",\n  \"parameters\": {\n    \"folder_path\": \"./src/api\",\n    \"timestamp\": \"20250310-055950-000\",\n    \"create_emergency_backup\": true\n  }\n}\n```\n\n### Manage\n```json\n// List recent\n{\n  \"name\": \"mcp0_backup_list_all\",\n  \"parameters\": {\n    \"include_pattern\": \"src/**/*.js\"\n  }\n}\n\n// Stop backup\n{\n  \"name\": \"mcp0_mcp_cancel\",\n  \"parameters\": {\n    \"operationId\": \"backup_1234\"\n  }\n}\n```\n\n## License\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "backup",
        "hexitex",
        "restoration",
        "mcp backup",
        "provides backup",
        "backup restoration"
      ],
      "category": "file-management"
    },
    "hoonoh57--Append-Data-to-JSON-File-and-Display-JSON-data-to-HTML-Table-using-Ajax-Jquery-getJSON-method": {
      "owner": "hoonoh57",
      "name": "Append-Data-to-JSON-File-and-Display-JSON-data-to-HTML-Table-using-Ajax-Jquery-getJSON-method",
      "url": "https://github.com/hoonoh57/Append-Data-to-JSON-File-and-Display-JSON-data-to-HTML-Table-using-Ajax-Jquery-getJSON-method",
      "imageUrl": "/freedevtools/mcp/pfp/hoonoh57.webp",
      "description": "Append data to a JSON file and display it in an HTML table using Ajax and jQuery's getJSON method. This enables dynamic data loading for web applications, enhancing data management and user experience.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "PHP",
      "updated_at": "2018-02-25T23:56:53Z",
      "readme_content": "# Append-Data-to-JSON-File-and-Display-JSON-data-to-HTML-Table-using-Ajax-Jquery-getJSON-method\n### Final Result\n#### So this is gonna be final result but if you just want to display data from json there's sceeenshot down below.\n<img width=\"660\" alt=\"scmain\" src=\"https://user-images.githubusercontent.com/20491036/35260097-6e48efde-0059-11e8-9c04-7f2f815f0fd0.png\">\n\n### This is just data view, this is how its gonna look and load data like that bellow\n<img width=\"524\" alt=\"dataview\" src=\"https://user-images.githubusercontent.com/20491036/35260195-078e19da-005a-11e8-9bef-d3ac0de170f8.png\">\n\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "json",
        "ajax",
        "getjson",
        "json file",
        "data json",
        "json data"
      ],
      "category": "file-management"
    },
    "i-tozer--excalidraw-mcp": {
      "owner": "i-tozer",
      "name": "excalidraw-mcp",
      "url": "https://github.com/i-tozer/excalidraw-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/i-tozer.webp",
      "description": "Manage Excalidraw drawings using a straightforward API, providing capabilities to create, update, retrieve, and delete drawings. Export drawings in multiple formats such as SVG, PNG, and JSON while utilizing a simple file-based storage system.",
      "stars": 32,
      "forks": 15,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-28T16:12:34Z",
      "readme_content": "# Excalidraw MCP Server\n\nThis is a Model Context Protocol (MCP) server for Excalidraw, providing API functionality for operating on Excalidraw drawings.\n\n## Features\n\n- Create, read, update, and delete Excalidraw drawings\n- Export drawings to SVG, PNG, and JSON formats\n- Simple file-based storage system\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/excalidraw-mcp.git\ncd excalidraw-mcp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Usage\n\n### Starting the Server\n\n```bash\nnpm start\n```\n\n### API Endpoints\n\nThe server provides the following tools:\n\n#### Drawing Management\n\n- `create_drawing`: Create a new Excalidraw drawing\n- `get_drawing`: Get an Excalidraw drawing by ID\n- `update_drawing`: Update an Excalidraw drawing by ID\n- `delete_drawing`: Delete an Excalidraw drawing by ID\n- `list_drawings`: List all Excalidraw drawings\n\n#### Export Operations\n\n- `export_to_svg`: Export an Excalidraw drawing to SVG\n- `export_to_png`: Export an Excalidraw drawing to PNG\n- `export_to_json`: Export an Excalidraw drawing to JSON\n\n## Development\n\n### Project Structure\n\n```\nexcalidraw-mcp/\n├── src/\n│   ├── common/\n│   │   └── errors.ts\n│   └── operations/\n│       ├── drawings.ts\n│       └── export.ts\n├── index.ts\n├── package.json\n├── tsconfig.json\n└── README.md\n```\n\n### Building\n\n```bash\nnpm run build\n```\n\n### Running in Development Mode\n\n```bash\nnpm run dev\n```\n\n## License\n\nMIT ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "excalidraw",
        "drawings",
        "file",
        "excalidraw drawings",
        "manage excalidraw",
        "tozer excalidraw"
      ],
      "category": "file-management"
    },
    "jizihua1118--linux-remote-mcp": {
      "owner": "jizihua1118",
      "name": "linux-remote-mcp",
      "url": "https://github.com/jizihua1118/linux-remote-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/jizihua1118.webp",
      "description": "Connect to Linux servers for remote command execution, as well as for uploading and downloading files. This service facilitates efficient management of Linux servers through a Python-based interface.",
      "stars": 0,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-23T10:18:22Z",
      "readme_content": "# linux-remote-mcp\n这是一个基于Python的MCP（远程管理和控制）服务，可以用于：  1. 连接Linux服务器 2. 在远程Linux服务器上执行命令 3. 上传文件到Linux服务器 4. 从Linux服务器下载文件\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "linux",
        "mcp",
        "python",
        "remote mcp",
        "jizihua1118 linux",
        "servers python"
      ],
      "category": "file-management"
    },
    "joshrutkowski--applescript-mcp": {
      "owner": "joshrutkowski",
      "name": "applescript-mcp",
      "url": "https://github.com/joshrutkowski/applescript-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/joshrutkowski.webp",
      "description": "Enables interaction with macOS through AppleScript for system control, file management, and handling notifications. Provides functionalities like managing calendar events, clipboard operations, and system controls.",
      "stars": 315,
      "forks": 51,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T04:54:55Z",
      "readme_content": "# applescript-mcp MCP Server\n\nA Model Context Protocol server that enables LLM applications to interact with macOS through AppleScript.\nThis server provides a standardized interface for AI applications to control system functions, manage files, handle notifications, and more.\n\n[![Node.js CI](https://github.com/joshrutkowski/applescript-mcp/actions/workflows/node.js.yml/badge.svg)](https://github.com/joshrutkowski/applescript-mcp/actions/workflows/node.js.yml)\n\n<a href=\"https://glama.ai/mcp/servers/0t5gydjcqw\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/0t5gydjcqw/badge\" alt=\"applescript-mcp MCP server\" /></a>\n\n## Features\n\n- 🗓️ Calendar management (events, reminders)\n- 📋 Clipboard operations\n- 🔍 Finder integration\n- 🔔 System notifications\n- ⚙️ System controls (volume, dark mode, apps)\n- 📟 iTerm terminal integration\n- 📬 Mail (create new email, list emails, get email)\n- 🔄 Shortcuts automation\n- 💬 Messages (list chats, get messages, search messages, send a message)\n- 🗒️ Notes (create formatted notes, list notes, search notes)\n- 📄 Pages (create documents)\n\n### Planned Features\n\n- 🧭 Safari (open in Safari, save page content, get selected page/tab)\n- ✅ Reminders (create, get)\n\n## Prerequisites\n\n- macOS 10.15 or later\n- Node.js 18 or later\n\n## Available Categories\n\n### Calendar\n\n| Command | Description           | Parameters                                          |\n| ------- | --------------------- | --------------------------------------------------- |\n| `add`   | Create calendar event | `title`, `startDate`, `endDate`, `calendar` (optional) |\n| `list`  | List today's events   | None                                                |\n\n#### Examples\n\n```\n// Create a new calendar event\nCreate a calendar event titled \"Team Meeting\" starting tomorrow at 2pm for 1 hour\n\n// List today's events\nWhat events do I have scheduled for today?\n```\n\n### Clipboard\n\n| Command           | Description            | Parameters |\n| ----------------- | ---------------------- | ---------- |\n| `set_clipboard`   | Copy to clipboard      | `content`  |\n| `get_clipboard`   | Get clipboard contents | None       |\n| `clear_clipboard` | Clear clipboard        | None       |\n\n#### Examples\n\n```\n// Copy text to clipboard\nCopy \"Remember to buy groceries\" to my clipboard\n\n// Get clipboard contents\nWhat's currently in my clipboard?\n\n// Clear clipboard\nClear my clipboard\n```\n\n### Finder\n\n| Command              | Description        | Parameters                     |\n| -------------------- | ------------------ | ------------------------------ |\n| `get_selected_files` | Get selected files | None                           |\n| `search_files`       | Search for files   | `query`, `location` (optional) |\n| `quick_look`         | Preview file       | `path`                         |\n\n#### Examples\n\n```\n// Get selected files in Finder\nWhat files do I currently have selected in Finder?\n\n// Search for files\nFind all PDF files in my Documents folder\n\n// Preview a file\nShow me a preview of ~/Documents/report.pdf\n```\n\n### Notifications\n\n> Note: Sending notification requires that you enable notifications in System Settings > Notifications > Script Editor.\n\n| Command                 | Description       | Parameters                             |\n| ----------------------- | ----------------- | -------------------------------------- |\n| `send_notification`     | Show notification | `title`, `message`, `sound` (optional) |\n| `toggle_do_not_disturb` | Toggle DND mode   | None                                   |\n\n#### Examples\n\n```\n// Send a notification\nSend me a notification with the title \"Reminder\" and message \"Time to take a break\"\n\n// Toggle Do Not Disturb\nTurn on Do Not Disturb mode\n```\n\n### System\n\n| Command             | Description       | Parameters                 |\n| ------------------- | ----------------- | -------------------------- |\n| `volume`            | Set system volume | `level` (0-100)            |\n| `get_frontmost_app` | Get active app    | None                       |\n| `launch_app`        | Open application  | `name`                     |\n| `quit_app`          | Close application | `name`, `force` (optional) |\n| `toggle_dark_mode`  | Toggle dark mode  | None                       |\n\n#### Examples\n\n```\n// Set system volume\nSet my Mac's volume to 50%\n\n// Get active application\nWhat app am I currently using?\n\n// Launch an application\nOpen Safari\n\n// Quit an application\nClose Spotify\n\n// Toggle dark mode\nSwitch to dark mode\n```\n\n### iTerm\n\n| Command           | Description     | Parameters                        |\n| ----------------- | --------------- | --------------------------------- |\n| `paste_clipboard` | Paste to iTerm  | None                              |\n| `run`             | Execute command | `command`, `newWindow` (optional) |\n\n#### Examples\n\n```\n// Paste clipboard to iTerm\nPaste my clipboard contents into iTerm\n\n// Run a command in iTerm\nRun \"ls -la\" in iTerm\n\n// Run a command in a new iTerm window\nRun \"top\" in a new iTerm window\n```\n\n### Shortcuts\n\n| Command          | Description                                | Parameters                                           |\n| ---------------- | ------------------------------------------ | ---------------------------------------------------- |\n| `run_shortcut`   | Run a shortcut                             | `name`, `input` (optional)                           |\n| `list_shortcuts` | List all available shortcuts               | `limit` (optional)                                   |\n\n#### Examples\n\n```\n// List available shortcuts\nList all my available shortcuts\n\n// List with limit\nShow me my top 5 shortcuts\n\n// Run a shortcut\nRun my \"Daily Note in Bear\" shortcut\n\n// Run a shortcut with input\nRun my \"Add to-do\" shortcut with input \"Buy groceries\"\n```\n\n### Mail\n\n| Command       | Description                      | Parameters                                                |\n| ------------- | -------------------------------- | --------------------------------------------------------- |\n| `create_email`| Create a new email in Mail.app   | `recipient`, `subject`, `body`                            |\n| `list_emails` | List emails from a mailbox       | `mailbox` (optional), `count` (optional), `unreadOnly` (optional) |\n| `get_email`   | Get a specific email by search   | `subject` (optional), `sender` (optional), `dateReceived` (optional), `mailbox` (optional), `account` (optional), `unreadOnly` (optional), `includeBody` (optional) |\n\n#### Examples\n\n```\n// Create a new email\nCompose an email to john@example.com with subject \"Meeting Tomorrow\" and body \"Hi John, Can we meet tomorrow at 2pm?\"\n\n// List emails\nShow me my 10 most recent unread emails\n\n// Get a specific email\nFind the email from sarah@example.com about \"Project Update\"\n```\n\n### Messages\n\n| Command           | Description                                  | Parameters                                                |\n| ----------------- | -------------------------------------------- | --------------------------------------------------------- |\n| `list_chats`      | List available iMessage and SMS chats        | `includeParticipantDetails` (optional, default: false)    |\n| `get_messages`    | Get messages from the Messages app           | `limit` (optional, default: 100)                          |\n| `search_messages` | Search for messages containing specific text | `searchText`, `sender` (optional), `chatId` (optional), `limit` (optional, default: 50), `daysBack` (optional, default: 30) |\n| `compose_message` | Open Messages app with pre-filled message or auto-send   | `recipient` (required), `body` (optional), `auto` (optional, default: false) |\n\n#### Examples\n\n```\n// List available chats\nShow me my recent message conversations\n\n// Get recent messages\nShow me my last 20 messages\n\n// Search messages\nFind messages containing \"dinner plans\" from John in the last week\n\n// Compose a message\nSend a message to 555-123-4567 saying \"I'll be there in 10 minutes\"\n```\n\n### Notes\n\n| Command           | Description                                  | Parameters                                                |\n| ----------------- | -------------------------------------------- | --------------------------------------------------------- |\n| `create`          | Create a note with markdown-like formatting  | `title`, `content`, `format` (optional with formatting options) |\n| `createRawHtml`   | Create a note with direct HTML content       | `title`, `html`                                           |\n| `list`            | List notes, optionally from a specific folder| `folder` (optional)                                       |\n| `get`             | Get a specific note by title                 | `title`, `folder` (optional)                              |\n| `search`          | Search for notes containing specific text    | `query`, `folder` (optional), `limit` (optional, default: 5), `includeBody` (optional, default: true) |\n\n#### Examples\n\n```\n// Create a new note with markdown formatting\nCreate a note titled \"Meeting Minutes\" with content \"# Discussion Points\\n- Project timeline\\n- Budget review\\n- Next steps\" and format headings and lists\n\n// Create a note with HTML\nCreate a note titled \"Formatted Report\" with HTML content \"<h1>Quarterly Report</h1><p>Sales increased by <strong>15%</strong></p>\"\n\n// List notes\nShow me all my notes in the \"Work\" folder\n\n// Get a specific note\nShow me my note titled \"Shopping List\"\n\n// Search notes\nFind notes containing \"recipe\" in my \"Cooking\" folder\n```\n\n### Pages\n\n| Command            | Description                                  | Parameters                                                |\n| ----------------- | -------------------------------------------- | --------------------------------------------------------- |\n| `create_document` | Create a new Pages document with plain text  | `content`                                                 |\n\n#### Examples\n\n```\n// Create a new Pages document\nCreate a Pages document with the content \"Project Proposal\\n\\nThis document outlines the scope and timeline for the upcoming project.\"\n```\n\n## Architecture\n\nThe applescript-mcp server is built using TypeScript and follows a modular architecture:\n\n### Core Components\n\n1. **AppleScriptFramework** (`framework.ts`): The main server class that:\n   - Manages MCP protocol communication\n   - Handles tool registration and execution\n   - Provides logging functionality\n   - Executes AppleScript commands\n\n2. **Categories** (`src/categories/*.ts`): Modular script collections organized by functionality:\n   - Each category contains related scripts (e.g., calendar, system, notes)\n   - Categories are registered with the framework in `index.ts`\n\n3. **Types** (`src/types/index.ts`): TypeScript interfaces defining:\n   - `ScriptDefinition`: Structure for individual scripts\n   - `ScriptCategory`: Collection of related scripts\n   - `LogLevel`: Standard logging levels\n   - `FrameworkOptions`: Configuration options\n\n### Execution Flow\n\n1. Client sends a tool request via MCP protocol\n2. Server identifies the appropriate category and script\n3. Script content is generated (static or dynamically via function)\n4. AppleScript is executed via macOS `osascript` command\n5. Results are returned to the client\n\n### Logging System\n\nThe framework includes a comprehensive logging system that:\n- Logs to both stderr and MCP logging protocol\n- Supports multiple severity levels (debug, info, warning, error, etc.)\n- Provides detailed execution information for troubleshooting\n\n## Development\n\n### Setup\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the server\nnpm run build\n\n# Launch MCP Inspector\n# See: https://modelcontextprotocol.io/docs/tools/inspector\nnpx @modelcontextprotocol/inspector node path/to/server/index.js args...\n```\n\n### Adding New Functionality\n\n#### 1. Create Category File\n\nCreate `src/categories/newcategory.ts`:\n\n```typescript\nimport { ScriptCategory } from \"../types/index.js\";\n\nexport const newCategory: ScriptCategory = {\n  name: \"category_name\",\n  description: \"Category description\",\n  scripts: [\n    // Scripts will go here\n  ],\n};\n```\n\n#### 2. Add Scripts\n\n```typescript\n{\n  name: \"script_name\",\n  description: \"What the script does\",\n  schema: {\n    type: \"object\",\n    properties: {\n      paramName: {\n        type: \"string\",\n        description: \"Parameter description\"\n      }\n    },\n    required: [\"paramName\"]\n  },\n  script: (args) => `\n    tell application \"App\"\n      // AppleScript code using ${args.paramName}\n    end tell\n  `\n}\n```\n\n#### 3. Register Category\n\nUpdate `src/index.ts`:\n\n```typescript\nimport { newCategory } from \"./categories/newcategory.js\";\n// ...\nserver.addCategory(newCategory);\n```\n\n### Advanced Script Development\n\nFor more complex scripts, you can:\n\n1. **Use dynamic script generation**:\n   ```typescript\n   script: (args) => {\n     // Process arguments and build script dynamically\n     let scriptContent = `tell application \"App\"\\n`;\n     \n     if (args.condition) {\n       scriptContent += `  // Conditional logic\\n`;\n     }\n     \n     scriptContent += `end tell`;\n     return scriptContent;\n   }\n   ```\n\n2. **Process complex data**:\n   ```typescript\n   // Example from Notes category\n   function generateNoteHtml(args: any): string {\n     // Process markdown-like syntax into HTML\n     let processedContent = content;\n     \n     if (format.headings) {\n       processedContent = processedContent.replace(/^# (.+)$/gm, '<h1>$1</h1>');\n       // ...\n     }\n     \n     return processedContent;\n   }\n   ```\n\n## Debugging\n\n### Using MCP Inspector\n\nThe MCP Inspector provides a web interface for testing and debugging your server:\n\n```bash\nnpm run inspector\n```\n\n### Logging\n\nEnable debug logging by setting the environment variable:\n\n```bash\nDEBUG=applescript-mcp* npm start\n```\n\n### Example configuration\nAfter running `npm run build` add the following to your `mcp.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"applescript-mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/applescript-mcp/dist/index.js\"]\n    }\n  }\n}\n```\n\n### Common Issues\n\n- **Permission Errors**: Check System Preferences > Security & Privacy > Privacy > Automation\n- **Script Failures**: Test scripts directly in Script Editor.app before integration\n- **Communication Issues**: Check stdio streams aren't being redirected\n- **Database Access**: Some features (like Messages) require Full Disk Access permission\n\n## Resources\n\n- [AppleScript Language Guide](https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html)\n- [MCP Protocol Documentation](https://modelcontextprotocol.io)\n- [Issue Tracker](https://github.com/joshrutkowski/applescript-mcp/issues)\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a Pull Request\n\n## License\n\nMIT License - see [LICENSE](LICENSE) for details\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "applescript",
        "mcp",
        "macos",
        "applescript mcp",
        "macos applescript",
        "applescript control"
      ],
      "category": "file-management"
    },
    "kvas-it--mcp-server-fs": {
      "owner": "kvas-it",
      "name": "mcp-server-fs",
      "url": "https://github.com/kvas-it/mcp-server-fs",
      "imageUrl": "/freedevtools/mcp/pfp/kvas-it.webp",
      "description": "Provide basic file system operations including navigation, reading, writing, and analyzing files, as well as executing commands related to file management.",
      "stars": 3,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-10-03T22:32:13Z",
      "readme_content": "# MCP File System Server\n\nMCP server providing file system operations. Supports navigation, reading,\nwriting, analyzing files and command execution.\n\n## Tools\n\n### File and Directory Operations\n* `ls(path)` - List directory contents\n* `cd(path)` - Change working directory (supports home directory expansion with ~)\n* `read_file(path)` - Read file contents\n* `write_file(path, content)` - Write content to a file\n* `mkdir(path)` - Create directory\n* `rm(path)` - Remove file or empty directory\n* `rmdir(path)` - Remove directory and contents recursively  \n* `cp(src, dst)` - Copy file or directory\n* `mv(src, dst)` - Move file or directory\n\n### Editing and Searching\n* `edit_file(path, changes)` - Apply multiple search/replace operations to a\n  file, where changes is a list of (search_text, replace_text) tuples\n* `grep(pattern, path)` - Search for regex pattern in file(s)\n\n### Analysis\n* `summary(path)` - Generate summary of Python (.py) and Markdown (.md) files:\n  - Python: Lists functions and classes\n  - Markdown: Lists headers (lines starting with #)\n\n### Batch Operations\n* `read_files(paths)` - Read multiple files, returns dict mapping paths to contents\n* `summarize(paths)` - Generate summaries for multiple files, returns dict mapping paths to summaries\n\n### Project Navigation\n* `work_on(path)` - Change to directory, list its contents, and get the notes from CLAUDE.md.\n  Useful for getting familiar with a project at the start of a chat\n\n### Code Quality\n* `ruff_check(paths)` - Run ruff linter on specified files\n* `ruff_format(paths)` - Format files using ruff\n\n### Command Execution\n* `shell_command(command, args=None, cmdline=None, timeout=30)` - Run shell commands and capture their output\n  > **⚠️ Security Warning**: This tool allows arbitrary command execution on the host system. Always inspect and validate commands before allowing them to run, especially if the input source is untrusted.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kvas",
        "files",
        "file",
        "file management",
        "kvas mcp",
        "management kvas"
      ],
      "category": "file-management"
    },
    "lishenxydlgzs--simple-files-vectorstore": {
      "owner": "lishenxydlgzs",
      "name": "simple-files-vectorstore",
      "url": "https://github.com/lishenxydlgzs/simple-files-vectorstore",
      "imageUrl": "/freedevtools/mcp/pfp/lishenxydlgzs.webp",
      "description": "Creates a vector store from local directories and files, enabling semantic search across document contents. Monitors specified directories for file changes and generates vector embeddings to facilitate search functionality.",
      "stars": 33,
      "forks": 7,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-26T02:44:28Z",
      "readme_content": "# @lishenxydlgzs/simple-files-vectorstore\n\nA Model Context Protocol (MCP) server that provides semantic search capabilities across files. This server watches specified directories and creates vector embeddings of file contents, enabling semantic search across your documents.\n\n## Installation & Usage\nAdd to your MCP settings file:\n```json\n{\n  \"mcpServers\": {\n    \"files-vectorstore\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@lishenxydlgzs/simple-files-vectorstore\"\n      ],\n      \"env\": {\n        \"WATCH_DIRECTORIES\": \"/path/to/your/directories\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nMCP settings file locations:\n- VSCode Cline Extension: `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`\n- Claude Desktop App: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n## Configuration\n\nThe server requires configuration through environment variables:\n\n### Required Environment Variables\n\nYou must specify directories to watch using ONE of the following methods:\n\n- `WATCH_DIRECTORIES`: Comma-separated list of directories to watch\n- `WATCH_CONFIG_FILE`: Path to a JSON configuration file with a `watchList` array\n\nExample using WATCH_DIRECTORIES:\n```json\n{\n  \"mcpServers\": {\n    \"files-vectorstore\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@lishenxydlgzs/simple-files-vectorstore\"\n      ],\n      \"env\": {\n        \"WATCH_DIRECTORIES\": \"/path/to/dir1,/path/to/dir2\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nExample using WATCH_CONFIG_FILE:\n```json\n{\n  \"mcpServers\": {\n    \"files-vectorstore\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@lishenxydlgzs/simple-files-vectorstore\"\n      ],\n      \"env\": {\n        \"WATCH_CONFIG_FILE\": \"/path/to/watch-config.json\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nThe watch config file should have the following structure:\n```json\n{\n  \"watchList\": [\n    \"/path/to/dir1\",\n    \"/path/to/dir2\",\n    \"/path/to/specific/file.txt\"\n  ]\n}\n```\n\n### Optional Environment Variables\n\n- `CHUNK_SIZE`: Size of text chunks for processing (default: 1000)\n- `CHUNK_OVERLAP`: Overlap between chunks (default: 200)\n- `IGNORE_FILE`: Path to a .gitignore style file to exclude files/directories based on patterns\n\nExample with all optional parameters:\n\n```json\n  {\n    \"mcpServers\": {\n      \"files-vectorstore\": {\n        \"command\": \"npx\",\n        \"args\": [\n          \"-y\",\n          \"@lishenxydlgzs/simple-files-vectorstore\"\n        ],\n        \"env\": {\n          \"WATCH_DIRECTORIES\": \"/path/to/dir1,/path/to/dir2\",\n          \"CHUNK_SIZE\": \"2000\",\n          \"CHUNK_OVERLAP\": \"500\",\n          \"IGNORE_FILE\": \"/path/to/.gitignore\"\n        },\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n  ```\n## MCP Tools\n\nThis server provides the following MCP tools:\n\n### 1. search\n\nPerform semantic search across indexed files.\n\nParameters:\n- `query` (required): The search query string\n- `limit` (optional): Maximum number of results to return (default: 5, max: 20)\n\nExample response:\n```json\n[\n  {\n    \"content\": \"matched text content\",\n    \"source\": \"/path/to/file\",\n    \"fileType\": \"markdown\",\n    \"score\": 0.85\n  }\n]\n```\n\n### 2. get_stats\n\nGet statistics about indexed files.\n\nParameters: None\n\nExample response:\n```json\n{\n  \"totalDocuments\": 42,\n  \"watchedDirectories\": [\"/path/to/docs\"],\n  \"processingFiles\": []\n}\n```\n\n## Features\n\n- Real-time file watching and indexing\n- Semantic search using vector embeddings\n- Support for multiple file types\n- Configurable chunk size and overlap\n- Background processing of files\n- Automatic handling of file changes and deletions\n\n## Repository\n\n[GitHub Repository](https://github.com/lishenxydlgzs/simple-files-vectorstore)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "vectorstore",
        "files",
        "lishenxydlgzs",
        "files vectorstore",
        "vector store",
        "vectorstore creates"
      ],
      "category": "file-management"
    },
    "mamertofabian--mcp-everything-search": {
      "owner": "mamertofabian",
      "name": "mcp-everything-search",
      "url": "https://github.com/mamertofabian/mcp-everything-search",
      "imageUrl": "/freedevtools/mcp/pfp/mamertofabian.webp",
      "description": "Provides fast file searching capabilities across multiple operating systems, utilizing platform-specific tools for efficient file and folder retrieval. Supports advanced search syntax on Windows, basic filename and content search on macOS, and filename search on Linux.",
      "stars": 248,
      "forks": 30,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T18:27:23Z",
      "readme_content": "# Everything Search MCP Server\n\n[![smithery badge](https://smithery.ai/badge/mcp-server-everything-search)](https://smithery.ai/server/mcp-server-everything-search)\n\nAn MCP server that provides fast file searching capabilities across Windows, macOS, and Linux. On Windows, it uses the [Everything](https://www.voidtools.com/) SDK. On macOS, it uses the built-in `mdfind` command. On Linux, it uses the `locate`/`plocate` command.\n\n## Tools\n\n### search\n\nSearch for files and folders across your system. The search capabilities and syntax support vary by platform:\n\n- Windows: Full Everything SDK features (see syntax guide below)\n- macOS: Basic filename and content search using Spotlight database\n- Linux: Basic filename search using locate database\n\nParameters:\n\n- `query` (required): Search query string. See platform-specific notes below.\n- `max_results` (optional): Maximum number of results to return (default: 100, max: 1000)\n- `match_path` (optional): Match against full path instead of filename only (default: false)\n- `match_case` (optional): Enable case-sensitive search (default: false)\n- `match_whole_word` (optional): Match whole words only (default: false)\n- `match_regex` (optional): Enable regex search (default: false)\n- `sort_by` (optional): Sort order for results (default: 1). Available options:\n\n```\n  - 1: Sort by filename (A to Z)\n  - 2: Sort by filename (Z to A)\n  - 3: Sort by path (A to Z)\n  - 4: Sort by path (Z to A)\n  - 5: Sort by size (smallest first)\n  - 6: Sort by size (largest first)\n  - 7: Sort by extension (A to Z)\n  - 8: Sort by extension (Z to A)\n  - 11: Sort by creation date (oldest first)\n  - 12: Sort by creation date (newest first)\n  - 13: Sort by modification date (oldest first)\n  - 14: Sort by modification date (newest first)\n```\n\nExamples:\n\n```json\n{\n  \"query\": \"*.py\",\n  \"max_results\": 50,\n  \"sort_by\": 6\n}\n```\n\n```json\n{\n  \"query\": \"ext:py datemodified:today\",\n  \"max_results\": 10\n}\n```\n\nResponse includes:\n\n- File/folder path\n- File size in bytes\n- Last modified date\n\n### Search Syntax Guide\n\nFor detailed information about the search syntax supported on each platform (Windows, macOS, and Linux), please see [SEARCH_SYNTAX.md](SEARCH_SYNTAX.md).\n\n## Prerequisites\n\n### Windows\n\n1. [Everything](https://www.voidtools.com/) search utility:\n   - Download and install from https://www.voidtools.com/\n   - **Make sure the Everything service is running**\n2. Everything SDK:\n   - Download from https://www.voidtools.com/support/everything/sdk/\n   - Extract the SDK files to a location on your system\n\n### Linux\n\n1. Install and initialize the `locate` or `plocate` command:\n   - Ubuntu/Debian: `sudo apt-get install plocate` or `sudo apt-get install mlocate`\n   - Fedora: `sudo dnf install mlocate`\n2. After installation, update the database:\n   - For plocate: `sudo updatedb`\n   - For mlocate: `sudo /etc/cron.daily/mlocate`\n\n### macOS\n\nNo additional setup required. The server uses the built-in `mdfind` command.\n\n## Installation\n\n### Installing via Smithery\n\nTo install Everything Search for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-server-everything-search):\n\n```bash\nnpx -y @smithery/cli install mcp-server-everything-search --client claude\n```\n\n### Using uv (recommended)\n\nWhen using [`uv`](https://docs.astral.sh/uv/) no specific installation is needed. We will\nuse [`uvx`](https://docs.astral.sh/uv/guides/tools/) to directly run _mcp-server-everything-search_.\n\n### Using PIP\n\nAlternatively you can install `mcp-server-everything-search` via pip:\n\n```\npip install mcp-server-everything-search\n```\n\nAfter installation, you can run it as a script using:\n\n```\npython -m mcp_server_everything_search\n```\n\n## Configuration\n\n### Windows\n\nThe server requires the Everything SDK DLL to be available:\n\nEnvironment variable:\n\n```\nEVERYTHING_SDK_PATH=path\\to\\Everything-SDK\\dll\\Everything64.dll\n```\n\n### Linux and macOS\n\nNo additional configuration required.\n\n### Usage with Claude Desktop\n\nAdd one of these configurations to your `claude_desktop_config.json` based on your platform:\n\n<details>\n<summary>Windows (using uvx)</summary>\n\n```json\n\"mcpServers\": {\n  \"everything-search\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-everything-search\"],\n    \"env\": {\n      \"EVERYTHING_SDK_PATH\": \"path/to/Everything-SDK/dll/Everything64.dll\"\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary>Windows (using pip installation)</summary>\n\n```json\n\"mcpServers\": {\n  \"everything-search\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_everything_search\"],\n    \"env\": {\n      \"EVERYTHING_SDK_PATH\": \"path/to/Everything-SDK/dll/Everything64.dll\"\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary>Linux and macOS</summary>\n\n```json\n\"mcpServers\": {\n  \"everything-search\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-everything-search\"]\n  }\n}\n```\n\nOr if using pip installation:\n\n```json\n\"mcpServers\": {\n  \"everything-search\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_everything_search\"]\n  }\n}\n```\n\n</details>\n\n## Debugging\n\nYou can use the MCP inspector to debug the server. For uvx installations:\n\n```\nnpx @modelcontextprotocol/inspector uvx mcp-server-everything-search\n```\n\nOr if you've installed the package in a specific directory or are developing on it:\n\n```\ngit clone https://github.com/mamertofabian/mcp-everything-search.git\ncd mcp-everything-search/src/mcp_server_everything_search\nnpx @modelcontextprotocol/inspector uv run mcp-server-everything-search\n```\n\nTo view server logs:\n\nLinux/macOS:\n\n```bash\ntail -f ~/.config/Claude/logs/mcp*.log\n```\n\nWindows (PowerShell):\n\n```powershell\nGet-Content -Path \"$env:APPDATA\\Claude\\logs\\mcp*.log\" -Tail 20 -Wait\n```\n\n## Development\n\nIf you are doing local development, there are two ways to test your changes:\n\n1. Run the MCP inspector to test your changes. See [Debugging](#debugging) for run instructions.\n\n2. Test using the Claude desktop app. Add the following to your `claude_desktop_config.json`:\n\n```json\n\"everything-search\": {\n  \"command\": \"uv\",\n  \"args\": [\n    \"--directory\",\n    \"/path/to/mcp-everything-search/src/mcp_server_everything_search\",\n    \"run\",\n    \"mcp-server-everything-search\"\n  ],\n  \"env\": {\n    \"EVERYTHING_SDK_PATH\": \"path/to/Everything-SDK/dll/Everything64.dll\"\n  }\n}\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n\n## Disclaimer\n\nThis project is not affiliated with, endorsed by, or sponsored by voidtools (the creators of Everything search utility). This is an independent project that utilizes the publicly available Everything SDK.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mamertofabian",
        "searching",
        "search",
        "file searching",
        "filename search",
        "search macos"
      ],
      "category": "file-management"
    },
    "newbeb--clipboard-mcp": {
      "owner": "newbeb",
      "name": "clipboard-mcp",
      "url": "https://github.com/newbeb/clipboard-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/newbeb.webp",
      "description": "Access and retrieve content from the macOS clipboard in real-time, supporting text, images, and binary data. Enables integration with AI assistants for seamless interaction with clipboard contents.",
      "stars": 7,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-24T23:54:33Z",
      "readme_content": "# MacOS Clipboard MCP Server\n\nAn MCP server that provides access to the macOS clipboard via OSAScript. This tool allows AI assistants to see what content is on the user's clipboard, including text, images, and binary data.\n\n## Features\n\n- Retrieve content from the macOS clipboard\n- Supports multiple content types:\n  - Text\n  - Images (PNG)\n  - Raw binary data\n\n## Installation\n\n```bash\nbun install\n```\n\n## Usage\n\nTo start the server:\n\n```bash\nbun run start\n```\n\nFor development with hot reloading:\n\n```bash\nbun run dev\n```\n\nAlternative development modes:\n\n```bash\nbun run dev2      # Run with fastmcp dev\nbun run inspect   # Run with fastmcp inspector\nbun run mcp-cli   # Run with mcp-cli tool\n```\n\n## Implementation Notes\n\n- Uses AppleScript via the `osascript` command to interact with the macOS clipboard\n- Handles various clipboard content types\n- Content is returned with appropriate MIME types\n- The clipboard should always be checked on demand (not cached) as content can change between requests\n\n## Requirements\n\n- macOS operating system\n- Bun runtime\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "clipboard",
        "macos",
        "newbeb",
        "macos clipboard",
        "clipboard mcp",
        "newbeb clipboard"
      ],
      "category": "file-management"
    },
    "ngoiyaeric--mcp-filesystem-server": {
      "owner": "ngoiyaeric",
      "name": "mcp-filesystem-server",
      "url": "https://github.com/ngoiyaeric/mcp-filesystem-server",
      "imageUrl": "/freedevtools/mcp/pfp/ngoiyaeric.webp",
      "description": "Manage files and directories with operations like reading, writing, and organizing within specified directories. Securely perform file management tasks including searching and retrieving metadata.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-04-08T07:41:39Z",
      "readme_content": "[![smithery badge](https://smithery.ai/badge/@mark3labs/mcp-filesystem-server)](https://smithery.ai/server/@mark3labs/mcp-filesystem-server)\n\n# Filesystem MCP Server\n\nGo server implementing Model Context Protocol (MCP) for filesystem operations.\n\n## Features\n\n- Read/write files\n- Create/list/delete directories\n- Move files/directories\n- Search files\n- Get file metadata\n\n**Note**: The server will only allow operations within directories specified via `args`.\n\n## API\n\n### Resources\n\n- `file://system`: File system operations interface\n\n### Tools\n\n- **read_file**\n  - Read complete contents of a file\n  - Input: `path` (string)\n  - Reads complete file contents with UTF-8 encoding\n\n- **read_multiple_files**\n  - Read multiple files simultaneously\n  - Input: `paths` (string[])\n  - Failed reads won't stop the entire operation\n\n- **write_file**\n  - Create new file or overwrite existing (exercise caution with this)\n  - Inputs:\n    - `path` (string): File location\n    - `content` (string): File content\n\n- **create_directory**\n  - Create new directory or ensure it exists\n  - Input: `path` (string)\n  - Creates parent directories if needed\n  - Succeeds silently if directory exists\n\n- **list_directory**\n  - List directory contents with [FILE] or [DIR] prefixes\n  - Input: `path` (string)\n\n- **move_file**\n  - Move or rename files and directories\n  - Inputs:\n    - `source` (string)\n    - `destination` (string)\n  - Fails if destination exists\n\n- **search_files**\n  - Recursively search for files/directories\n  - Inputs:\n    - `path` (string): Starting directory\n    - `pattern` (string): Search pattern\n  - Case-insensitive matching\n  - Returns full paths to matches\n\n- **get_file_info**\n  - Get detailed file/directory metadata\n  - Input: `path` (string)\n  - Returns:\n    - Size\n    - Creation time\n    - Modified time\n    - Access time\n    - Type (file/directory)\n    - Permissions\n\n- **list_allowed_directories**\n  - List all directories the server is allowed to access\n  - No input required\n  - Returns:\n    - Directories that this server can read/write from\n\n## Usage with Claude Desktop\nInstall the server\n```bash\ngo install github.com/mark3labs/mcp-filesystem-server\n```\n\nAdd this to your `claude_desktop_config.json`:\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"mcp-filesystem-server\",\n      \"args\": [\n        \"/Users/username/Desktop\",\n        \"/path/to/other/allowed/dir\"\n      ]\n    }\n  }\n}\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "files",
        "mcp",
        "file management",
        "mcp filesystem",
        "manage files"
      ],
      "category": "file-management"
    },
    "onigeya--siyuan-mcp-server": {
      "owner": "onigeya",
      "name": "siyuan-mcp-server",
      "url": "https://github.com/onigeya/siyuan-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/onigeya.webp",
      "description": "Integrate with the SiYuan Note system to access and manage notebooks, documents, and content blocks while supporting SQL queries and various file operations.",
      "stars": 42,
      "forks": 8,
      "license": "ISC License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T12:46:53Z",
      "readme_content": "# SiYuan Note MCP Server\n[![smithery badge](https://smithery.ai/badge/@onigeya/siyuan-mcp-server)](https://smithery.ai/server/@onigeya/siyuan-mcp-server)\n\n一个 MCP 服务器实现，提供与思源笔记系统的集成，使 AI 模型能够访问和操作笔记数据。\n\nAn MCP server implementation that provides integration with the SiYuan Note system, enabling AI models to access and manipulate note data.\n\n## 功能特性 | Features\n\n* 笔记本管理 | Notebook Management\n* 文档操作 | Document Operations\n* 内容块控制 | Block Control\n* 文件和资源管理 | File and Asset Management\n* SQL 查询支持 | SQL Query Support\n* 属性管理 | Attribute Management\n* 导出和转换 | Export and Conversion\n* 系统功能 | System Functions\n\n## 命令列表 | Command List\n\n所有命令都支持使用 `help` 查询获取详细说明。例如：\n\nAll commands support detailed documentation via the `help` command. For example:\n\n```json\n{\n  \"type\": \"help\",\n  \"params\": {\n    \"type\": \"block.insertBlock\"\n  }\n}\n```\n\n### 资源管理 | Asset Management\n\n* `assets.uploadAssets` - 上传资源文件 | Upload assets\n\n### 属性管理 | Attribute Management\n\n* `attr.setBlockAttrs` - 设置块属性 | Set block attributes\n* `attr.getBlockAttrs` - 获取块属性 | Get block attributes\n\n### 内容块操作 | Block Operations\n\n* `block.insertBlock` - 插入内容块 | Insert a block\n* `block.updateBlock` - 更新内容块 | Update block content\n* `block.deleteBlock` - 删除内容块 | Delete a block\n* `block.moveBlock` - 移动内容块 | Move a block\n* `block.getBlockKramdown` - 获取块的 Markdown 内容 | Get block Kramdown content\n\n### 格式转换 | Format Conversion\n\n* `convert.pandoc` - 使用 Pandoc 转换内容 | Convert content using Pandoc\n\n### 导出功能 | Export Functions\n\n* `export.exportNotebook` - 导出笔记本 | Export notebook\n* `export.exportDoc` - 导出文档 | Export document\n\n### 文件操作 | File Operations\n\n* `file.getFile` - 获取文件内容 | Get file content\n* `file.putFile` - 写入文件内容 | Put file content\n* `file.removeFile` - 删除文件 | Remove file\n* `file.readDir` - 读取目录内容 | List files in directory\n\n### 文档树操作 | File Tree Operations\n\n* `filetree.createDocWithMd` - 使用 Markdown 创建文档 | Create document with Markdown\n* `filetree.renameDoc` - 重命名文档 | Rename document\n* `filetree.removeDoc` - 删除文档 | Remove document\n* `filetree.moveDocs` - 移动文档 | Move documents\n* `filetree.getHPathByPath` - 获取文档可读路径 | Get document HPath by path\n* `filetree.getHPathByID` - 通过 ID 获取文档可读路径 | Get document HPath by ID\n\n### 网络代理 | Network Proxy\n\n* `network.forwardProxy` - 网络请求代理 | Forward proxy request\n\n### 笔记本管理 | Notebook Management\n\n* `notebook.lsNotebooks` - 列出所有笔记本 | List all notebooks\n* `notebook.openNotebook` - 打开笔记本 | Open notebook\n* `notebook.closeNotebook` - 关闭笔记本 | Close notebook\n* `notebook.renameNotebook` - 重命名笔记本 | Rename notebook\n* `notebook.createNotebook` - 创建笔记本 | Create notebook\n* `notebook.removeNotebook` - 删除笔记本 | Remove notebook\n* `notebook.getNotebookConf` - 获取笔记本配置 | Get notebook configuration\n* `notebook.setNotebookConf` - 设置笔记本配置 | Set notebook configuration\n\n### 通知提醒 | Notifications\n\n* `notification.pushMsg` - 发送消息通知 | Push message notification\n* `notification.pushErrMsg` - 发送错误通知 | Push error message notification\n\n### 查询功能 | Query Functions\n\n* `query.sql` - 执行 SQL 查询 | Execute SQL query\n* `query.block` - 通过 ID 查询块 | Query block by ID\n\n### 搜索功能 | Search Functions\n\n* `search.fullTextSearch` - 全文搜索 | Full text search\n\n### SQL 查询 | SQL Query\n\n* `sql.sql` - 执行 SQL 查询 | Execute SQL query\n\n### 系统功能 | System Functions\n\n* `system.getBootProgress` - 获取启动进度 | Get boot progress\n* `system.getVersion` - 获取系统版本 | Get system version\n* `system.getCurrentTime` - 获取当前时间 | Get current time\n\n### 模板功能 | Template Functions\n\n* `template.renderTemplate` - 渲染模板 | Render template\n* `template.renderSprig` - 渲染 Sprig 模板 | Render Sprig template\n\n## 使用说明 | Usage\n\n### 环境变量配置 | Environment Variables\n\n服务器需要配置以下环境变量：\nThe server requires the following environment variables:\n\n* `SIYUAN_TOKEN` - 思源笔记 API 令牌（必需）| SiYuan Note API token (required)\n  * 在思源笔记设置 - 关于 中查看 | Check in SiYuan Note Settings - About\n  * 用于 API 认证 | Used for API authentication\n\n### 在 Claude Desktop 中使用 | Using in Claude Desktop\n\n将以下配置添加到 `claude_desktop_config.json`：\nAdd the following configuration to `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"siyuan\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@onigeya/siyuan-mcp-server\"\n      ],\n      \"env\": {\n        \"SIYUAN_TOKEN\": \"your-siyuan-token\"\n      }\n    }\n  }\n}\n```\n\n### 本地运行 | Local Run\n\n1. 安装依赖 | Install dependencies:\n```bash\npnpm install\n```\n\n2. 设置环境变量 | Set environment variables:\n```bash\n# Windows\nset SIYUAN_TOKEN=your-siyuan-token\n\n# Linux/macOS\nexport SIYUAN_TOKEN=your-siyuan-token\n```\n\n3. 启动服务 | Start service:\n```bash\npnpm start\n```\n\n### Docker 运行 | Docker Run\n\n```bash\ndocker run --rm -i \\\n  -e SIYUAN_TOKEN=your-siyuan-token \\\n  mcp/siyuan\n```\n\n## 构建 | Build\n\n### 环境要求 | Requirements\n\n* Node.js >= 23.10.0\n* pnpm\n\n### 本地构建 | Local Build\n\n```bash\npnpm build\n```\n\n### Docker 构建 | Docker Build\n\n```bash\ndocker build -t mcp/siyuan .\n```\n\n## 许可证 | License\n\n本项目基于 ISC 许可证发布。这意味着你可以自由使用、修改和分发本软件，但需要遵守 ISC 许可证的条款和条件。详细信息请参见项目仓库中的 LICENSE 文件。\n\nThis project is released under the ISC License. This means you can freely use, modify, and distribute this software, subject to the terms and conditions of the ISC License. For detailed information, please refer to the LICENSE file in the project repository.\n\n## 相关资源 | Related Resources\n\n- [思源笔记 | SiYuan Note](https://github.com/siyuan-note/siyuan)\n- [Model Context Protocol](https://modelcontextprotocol.io/)\n- [思源笔记 API 文档 | SiYuan Note API Documentation](https://github.com/siyuan-note/siyuan/blob/master/API.md)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "siyuan",
        "documents",
        "file",
        "siyuan note",
        "file management",
        "siyuan mcp"
      ],
      "category": "file-management"
    },
    "qpd-v--mcp-delete": {
      "owner": "qpd-v",
      "name": "mcp-delete",
      "url": "https://github.com/qpd-v/mcp-delete",
      "imageUrl": "/freedevtools/mcp/pfp/qpd-v.webp",
      "description": "Provides file deletion capabilities, supporting both relative and absolute paths with smart path resolution and existence checks to ensure safe file removal.",
      "stars": 1,
      "forks": 6,
      "license": "Apache License 2.0",
      "language": "JavaScript",
      "updated_at": "2025-03-05T22:05:32Z",
      "readme_content": "# @qpd-v/mcp-delete\n[![smithery badge](https://smithery.ai/badge/@qpd-v/mcp-delete)](https://smithery.ai/server/@qpd-v/mcp-delete)\n\nA Model Context Protocol (MCP) server that provides file deletion capabilities. This server allows AI assistants to safely delete files when needed, with support for both relative and absolute paths.\n\n## Features\n\n- Delete files using relative or absolute paths\n- Smart path resolution that tries multiple potential paths\n- Clear error messages with detailed path resolution information\n- Safe file existence checks before deletion\n- Works with Claude and other MCP-compatible AI assistants\n\n## Examples\n\n### Using with Claude Desktop\n\n\n### Using with VSCode Roo Cline Extension\n\n\n## Installation\n\n### Installing via Smithery\n\nTo install File Deletion for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@qpd-v/mcp-delete):\n\n```bash\nnpx -y @smithery/cli install @qpd-v/mcp-delete --client claude\n```\n\n### Manual Installation\n```bash\nnpx @qpd-v/mcp-delete\n```\n\nOr install globally:\n\n```bash\nnpm install -g @qpd-v/mcp-delete\n```\n\n## Configuration\n\n### Claude Desktop\n\nAdd the server configuration to your Claude Desktop config file:\n\nWindows:\n```json\n// %APPDATA%/Claude/claude_desktop_config.json\n{\n  \"mcpServers\": {\n    \"mcp-delete\": {\n      \"command\": \"npx\",\n      \"args\": [\"@qpd-v/mcp-delete\"]\n    }\n  }\n}\n```\n\nMacOS:\n```json\n// ~/Library/Application Support/Claude/claude_desktop_config.json\n{\n  \"mcpServers\": {\n    \"mcp-delete\": {\n      \"command\": \"npx\",\n      \"args\": [\"@qpd-v/mcp-delete\"]\n    }\n  }\n}\n}\n```\n\n### VSCode Extension\n\nAdd the server configuration to your Cline settings:\n\nWindows:\n```json\n// %APPDATA%/Code/User/globalStorage/rooveterinaryinc.roo-cline/settings/cline_mcp_settings.json\n{\n  \"mcpServers\": {\n    \"mcp-delete\": {\n      \"command\": \"npx\",\n      \"args\": [\"@qpd-v/mcp-delete\"]\n    }\n  }\n}\n```\n\nMacOS:\n```json\n// ~/Library/Application Support/Code/User/globalStorage/rooveterinaryinc.roo-cline/settings/cline_mcp_settings.json\n{\n  \"mcpServers\": {\n    \"mcp-delete\": {\n      \"command\": \"npx\",\n      \"args\": [\"@qpd-v/mcp-delete\"]\n    }\n  }\n}\n}\n```\n\n## Available Tools\n\n### delete_file\n\nDeletes a file at the specified path.\n\nParameters:\n- `path` (string, required): Path to the file to delete (relative to working directory or absolute)\n\nExample usage in Claude:\n```\nYou can ask me to delete a file like this:\n\"Please delete the file example.txt\"\n\nI will use the delete_file tool to safely remove the file.\n```\n\n## Path Resolution\n\nThe server intelligently handles path resolution by trying multiple approaches:\n1. The exact path as provided\n2. Path relative to the current working directory\n3. Path relative to a specified base directory\n\nThis makes it more user-friendly as files can be referenced by relative paths and the server will attempt to locate them correctly.\n\n## Development\n\nClone the repository:\n```bash\ngit clone https://github.com/qpd-v/mcp-delete.git\ncd mcp-delete\n```\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. Use the MCP Inspector for debugging:\n\n```bash\nnpm run inspector\n```\n\nThis will provide a URL to access debugging tools in your browser.\n\n## License\n\nMIT\n\n## Author\n\nqpd-v",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "qpd",
        "mcp",
        "removal",
        "file deletion",
        "mcp delete",
        "file removal"
      ],
      "category": "file-management"
    },
    "rishipradeep-think41--google-drive-mcp": {
      "owner": "rishipradeep-think41",
      "name": "google-drive-mcp",
      "url": "https://github.com/rishipradeep-think41/google-drive-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/rishipradeep-think41.webp",
      "description": "Integrate Google Drive functionalities with the Model Context Protocol (MCP) to facilitate file management, content retrieval, and permission handling. Access Google's Drive resources seamlessly from LLM applications through standardized tools.",
      "stars": 2,
      "forks": 8,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-11T00:35:40Z",
      "readme_content": "[![smithery badge](https://smithery.ai/badge/@rishipradeep-think41/google-drive-mcp)](https://smithery.ai/server/@rishipradeep-think41/google-drive-mcp)\n\n# Google Drive MCP Server\n\nGoogle Drive MCP Server is a stateless server that integrates Google Drive functionalities with the Model Context Protocol (MCP). It provides a suite of tools and resources to interact with Google Drive, enabling operations like file management, content retrieval, and permission handling through a standardized interface.\n\n## 🚀 Features\n\n- **Root Listing:** List top-level locations like \"My Drive\" and \"Shared with me\" using `drive_roots`.\n- **Folder Browsing:** List contents of any folder with `drive_folder_children`.\n- **File Metadata:** Retrieve detailed metadata for a file using `drive_file_metadata`.\n- **File Exporting:** Retrieve raw file content using `drive_file_content` (note: no built-in format conversion).\n- **File Uploading:** Create or update files with content using `drive_upload`.\n- **Text Appending:** Append plain text to existing text files using `drive_append_text`.\n- **File Deletion & Trash:** Move files to trash or delete them permanently with `drive_delete` and `drive_file_empty_trash`.\n- **Permission Management:** Add, update, remove, or list permissions for files/folders via `drive_share`, `drive_permission_update`, `drive_permission_delete`, etc.\n- **Commenting & Replies:** Add comments, reply to them, and list/delete comments or replies using tools like `drive_comment`, `drive_file_list_comments`, and related tools.\n- **Change Tracking:** Track changes in a user's Drive using `drive_changes`.\n- **File Search:** Search for files by name or other criteria using `drive_search`.\n\n🛠️ **Installation**\n\n1.  **Clone the Repository:**\n\n    ```bash\n    git clone [https://github.com/rishipradeep-think41/google-drive-mcp.git](https://github.com/rishipradeep-think41/google-drive-mcp.git)\n    cd google-drive-mcp\n    ```\n\n2.  **Install Dependencies:**\n\n    ```bash\n    npm install\n    ```\n\n3.  **Configure Environment Variables:**\n    Create a `.env` file in the root directory and add the following:\n\n    ```env\n    CLIENT_ID=your_google_client_id\n    CLIENT_SECRET=your_google_client_secret\n    REFRESH_TOKEN=your_google_refresh_token\n    PORT=8081\n    ```\n\n    Ensure you have a valid Google OAuth2 client and refresh token with appropriate Drive API scopes.\n\n4.  **Start the Server:**\n    ```bash\n    node index.js\n    ```\n    The server will start on `http://localhost:8081`.\n\n📚 **API Overview**\n\n**Resources**\n\n- `drive_roots`: Lists files in \"My Drive\" and \"Shared with me\".\n\n## Tool Categories\n\n### Basic Navigation & Information\n\n| Tool Name                 | Description                                |\n| ------------------------- | ------------------------------------------ |\n| `drive_roots`             | List roots (My Drive, Shared with me)      |\n| `drive_changes`           | List changes in Drive                      |\n| `drive_file_metadata`     | Get metadata of a file                     |\n| `drive_folder_children`   | List contents of a folder                  |\n| `drive_search`            | Search files in Google Drive               |\n| `drive_storage_quota`     | Get storage quota information for the user |\n| `drive_storage_breakdown` | Get storage usage breakdown by file type   |\n\n### File Content Operations\n\n| Tool Name            | Description                                         |\n| -------------------- | --------------------------------------------------- |\n| `drive_file_content` | Retrieve content of a Google Drive file             |\n| `drive_create`       | Create file or folder                               |\n| `drive_upload`       | Upload or update file content                       |\n| `drive_append_text`  | Append plain text to an existing text file in Drive |\n\n### File Management\n\n| Tool Name                | Description                                        |\n| ------------------------ | -------------------------------------------------- |\n| `drive_copy`             | Copy a file or folder to a new location            |\n| `drive_move`             | Move a file or folder to a different parent folder |\n| `drive_rename`           | Rename a file or folder                            |\n| `drive_delete`           | Trash or delete a file                             |\n| `drive_restore`          | Restore a file from the trash                      |\n| `drive_file_empty_trash` | Permanently delete all trashed files               |\n| `drive_star`             | Star or unstar a file or folder                    |\n| `drive_file_lock`        | Lock or unlock a file to prevent changes           |\n| `drive_shortcut_create`  | Create a shortcut to a file or folder              |\n\n### File Version Management\n\n| Tool Name               | Description                         |\n| ----------------------- | ----------------------------------- |\n| `drive_versions_list`   | List all versions of a file         |\n| `drive_versions_delete` | Delete a specific version of a file |\n\n### Permissions & Sharing\n\n| Tool Name                     | Description                                           |\n| ----------------------------- | ----------------------------------------------------- |\n| `drive_share`                 | Manage file permissions                               |\n| `drive_permissions_list`      | List all permissions of a file or folder              |\n| `drive_permission_update`     | Update a user's permission on a file or folder        |\n| `drive_permission_delete`     | Remove a user's access from a file or folder          |\n| `drive_permission_add_domain` | Share file or folder with everyone in a domain        |\n| `drive_permission_add_anyone` | Allow anyone with the link to access a file or folder |\n\n### Comments & Collaboration\n\n| Tool Name                     | Description                   |\n| ----------------------------- | ----------------------------- |\n| `drive_comment`               | Add a comment to a file       |\n| `drive_file_list_comments`    | List all comments on a file   |\n| `drive_file_delete_comment`   | Delete a comment from a file  |\n| `drive_file_reply_to_comment` | Reply to a comment on a file  |\n| `drive_file_list_replies`     | List all replies to a comment |\n| `drive_file_delete_reply`     | Delete a reply to a comment   |\n\n### Shared Drives (Team Drives)\n\n| Tool Name                   | Description                              |\n| --------------------------- | ---------------------------------------- |\n| `drive_shared_drives_list`  | List all accessible Shared Drives        |\n| `drive_shared_drive_get`    | Get metadata for a specific Shared Drive |\n| `drive_shared_drive_create` | Create a new Shared Drive                |\n| `drive_shared_drive_delete` | Delete a Shared Drive                    |\n| `drive_shared_drive_update` | Update a Shared Drive's metadata         |\n| `drive_shared_drive_files`  | List files in a Shared Drive             |\n\n### Batch Operations\n\n| Tool Name                        | Description                                         |\n| -------------------------------- | --------------------------------------------------- |\n| `drive_batch_get_metadata`       | Get metadata for multiple files in a single request |\n| `drive_batch_update_permissions` | Update permissions for multiple files at once       |\n| `drive_batch_delete`             | Delete multiple files or folders at once            |\n| `drive_batch_copy`               | Copy multiple files to a destination folder         |\n| `drive_batch_move`               | Move multiple files to a destination folder         |\n\n🔐 **Authentication**\n\nThe server uses OAuth2 for authentication with Google Drive. Ensure that the `CLIENT_ID`, `CLIENT_SECRET`, and `REFRESH_TOKEN` are correctly set in the `.env` file. These credentials should have the necessary scopes to access and modify files in Google Drive.\n\n🧪 **Testing**\n\nYou can test the endpoints using tools like MCPInspector. Ensure the server is running at `http://localhost:${port}`.\n\n🤝 **Contributing**\n\nContributions are welcome! Please fork the repository and submit a pull request for any enhancements or bug fixes.\n\n📄 **License**\n\nThis project is licensed under the [MIT License](LICENSE).\n\n📧 **Contact**\n\nFor any questions or feedback, please open an issue on the [GitHub repository](https://github.com/rishipradeep-think41/google-drive-mcp).\n\n---\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "protocol",
        "file",
        "google drive",
        "drive mcp",
        "mcp facilitate"
      ],
      "category": "file-management"
    },
    "safurrier--mcp-filesystem": {
      "owner": "safurrier",
      "name": "mcp-filesystem",
      "url": "https://github.com/safurrier/mcp-filesystem",
      "imageUrl": "/freedevtools/mcp/pfp/safurrier.webp",
      "description": "Access and manipulate files securely with advanced search and editing capabilities, enabling efficient interaction with large files and filesystems. Supports partial reading, precise context control, token-efficient searches, and multi-file operations.",
      "stars": 49,
      "forks": 9,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T18:46:04Z",
      "readme_content": "# MCP Filesystem Server\n\n[![License](https://img.shields.io/github/license/safurrier/mcp-filesystem.svg)](https://github.com/safurrier/mcp-filesystem/blob/main/LICENSE)\n\nA powerful Model Context Protocol (MCP) server for filesystem operations optimized for intelligent interaction with large files and filesystems. It provides secure access to files and directories with smart context management to maximize efficiency when working with extensive data.\n\n## Why MCP-Filesystem?\n\n- **Smart Context Management**: Work efficiently with large files and filesystems\n  - Partial reading to focus only on relevant content\n  - Precise context control for finding exactly what you need\n  - Token-efficient search results with pagination\n  - Multi-file operations to reduce request overhead\n\n- **Intelligent File Operations**:\n  - Line-targeted reading with configurable context windows\n  - Advanced editing with content verification to prevent conflicts\n  - Fine-grained search capabilities that exceed standard grep\n  - Relative line references for precise file manipulation\n\n## Key Features\n\n- **Secure File Access**: Only allows operations within explicitly allowed directories\n- **Comprehensive Operations**: Full set of file system capabilities\n  - Standard operations (read, write, list, move, delete)\n  - Enhanced operations (tree visualization, duplicate finding, etc.)\n  - Advanced search with grep integration (uses ripgrep when available)\n    - Context control (like grep's -A/-B/-C options)\n    - Result pagination for large result sets\n  - Line-targeted operations with content verification and relative line numbers\n- **Performance Optimized**:\n  - Efficiently handles large files and directories\n  - Ripgrep integration for blazing fast searches\n  - Line-targeted operations to avoid loading entire files\n- **Comprehensive Testing**: 75+ tests with behavior-driven approach\n- **Cross-Platform**: Works on Windows, macOS, and Linux\n\n## Quickstart Guide\n\n### 1. Clone and Setup\n\nFirst, install uv if you haven't already:\n\n```bash\n# Install uv using the official installer\ncurl -fsSL https://raw.githubusercontent.com/astral-sh/uv/main/install.sh | bash\n\n# Or with pipx\npipx install uv\n```\n\nThen clone the repository and install dependencies:\n\n```bash\n# Clone the repository\ngit clone https://github.com/safurrier/mcp-filesystem.git\ncd mcp-filesystem\n\n# Install dependencies with uv\nuv pip sync requirements.txt requirements-dev.txt\n```\n\n### 2. Get Absolute Paths\n\nYou'll need absolute paths both for the repository location and any directories you want to access:\n\n```bash\n# Get the absolute path to the repository\nREPO_PATH=$(pwd)\necho \"Repository path: $REPO_PATH\"\n\n# Get absolute paths to directories you want to access\nrealpath ~/Documents\nrealpath ~/Downloads\n# Or on systems without realpath:\necho \"$(cd ~/Documents && pwd)\"\n```\n\n### 3. Configure Claude Desktop\n\nOpen your Claude Desktop configuration file:\n- On macOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n- On Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\nAdd the following configuration (substitute your actual paths):\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-filesystem\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/absolute/path/to/mcp-filesystem\",\n        \"run\",\n        \"run_server.py\",\n        \"/absolute/path/to/dir1\",\n        \"/absolute/path/to/dir2\"\n      ]\n    }\n  }\n}\n```\n\n> **Important**: All paths must be absolute (full paths from root directory).\n> Use `realpath` or `pwd` to ensure you have the correct absolute paths.\n\n### 4. Restart Claude Desktop\n\nAfter saving your configuration, restart Claude Desktop for the changes to take effect.\n\n## Installation\n\n## Usage\n\n### Watch Server Logs\n\nYou can monitor the server logs from Claude Desktop with:\n\n```bash\n# On macOS\ntail -n 20 -f ~/Library/Logs/Claude/mcp-server-mcp-filesystem.log\n\n# On Windows (PowerShell)\nGet-Content -Path \"$env:APPDATA\\Claude\\Logs\\mcp-server-mcp-filesystem.log\" -Tail 20 -Wait\n```\n\nThis is particularly useful for debugging issues or seeing exactly what Claude is requesting.\n\n### Running the Server\n\nRun the server with access to specific directories:\n\n```bash\n# Using uv (recommended)\nuv run run_server.py /path/to/dir1 /path/to/dir2\n\n# Or using standard Python\npython run_server.py /path/to/dir1 /path/to/dir2\n\n# Example with actual paths\nuv run run_server.py /Users/username/Documents /Users/username/Downloads\n```\n\n#### Options\n\n- `--transport` or `-t`: Transport protocol (stdio or sse, default: stdio)\n- `--port` or `-p`: Port for SSE transport (default: 8000)\n- `--debug` or `-d`: Enable debug logging\n- `--version` or `-v`: Show version information\n\n### Using with MCP Inspector\n\nFor interactive testing and debugging with the MCP Inspector:\n\n```bash\n# Basic usage\nnpx @modelcontextprotocol/inspector uv run run_server.py /path/to/directory\n\n# With SSE transport\nnpx @modelcontextprotocol/inspector uv run run_server.py /path/to/directory --transport sse --port 8080\n\n# With debug output\nnpx @modelcontextprotocol/inspector uv run run_server.py /path/to/directory --debug\n```\n\nThis server has been built with the FastMCP SDK for better alignment with current MCP best practices. It uses an efficient component caching system and direct decorator pattern.\n\n## Claude Desktop Integration\n\nEdit your Claude Desktop config file to integrate MCP-Filesystem:\n\n**Config file location:**\n- On macOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n- On Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-filesystem\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/mcp-filesystem/repo\",\n        \"run\",\n        \"run_server.py\"\n      ]\n    }\n  }\n}\n```\n\nTo allow access to specific directories, add them as additional arguments:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-filesystem\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/mcp-filesystem/repo\",\n        \"run\",\n        \"run_server.py\",\n        \"/Users/yourusername/Projects\",\n        \"/Users/yourusername/Documents\"\n      ]\n    }\n  }\n}\n```\n\n> Note: The `--directory` flag is important as it tells uv where to find the repository containing run_server.py. Replace `/path/to/mcp-filesystem/repo` with the actual path to where you cloned the repository on your system.\n\n## Development\n\n### Running Tests\n\n```bash\n# Run all tests\nuv run -m pytest tests/\n\n# Run specific test file\nuv run -m pytest tests/test_operations_unit.py\n\n# Run with coverage\nuv run -m pytest tests/ --cov=mcp_filesystem --cov-report=term-missing\n```\n\n### Code Style and Quality\n\n```bash\n# Format code\nuv run -m ruff format mcp_filesystem\n\n# Lint code\nuv run -m ruff check --fix mcp_filesystem\n\n# Type check\nuv run -m mypy mcp_filesystem\n\n# Run all checks\nuv run -m ruff format mcp_filesystem && \\\nuv run -m ruff check --fix mcp_filesystem && \\\nuv run -m mypy mcp_filesystem && \\\nuv run -m pytest tests --cov=mcp_filesystem\n```\n\n## Available Tools\n\n### Basic File Operations\n\n- **read_file**: Read the complete contents of a file\n- **read_multiple_files**: Read multiple files simultaneously\n- **write_file**: Create a new file or overwrite an existing file\n- **create_directory**: Create a new directory or ensure a directory exists\n- **list_directory**: Get a detailed listing of files and directories\n- **move_file**: Move or rename files and directories\n- **get_file_info**: Retrieve detailed metadata about a file or directory\n- **list_allowed_directories**: List directories the server is allowed to access\n\n### Line-Targeted Operations\n\n- **read_file_lines**: Read specific line ranges with offset/limit parameters\n- **edit_file_at_line**: Make precise edits with content verification and relative line numbers\n  - Support for content verification to prevent editing outdated content\n  - Relative line numbers for easier regional editing\n  - Multiple edit actions (replace, insert_before, insert_after, delete)\n- **head_file**: Read the first N lines of a text file\n- **tail_file**: Read the last N lines of a text file\n\n### Advanced Search\n\n- **grep_files**: Search for patterns in files with powerful options\n  - Ripgrep integration for performance (with Python fallback)\n  - Fine-grained context control (like grep's -A/-B/-C options)\n  - Result pagination for large search results\n  - RegEx support with case sensitivity and whole word options\n- **search_files**: Search for files matching patterns with content search\n- **directory_tree**: Get a recursive tree view of files and directories\n\n### Analytics and Reporting\n\n- **calculate_directory_size**: Calculate the total size of a directory\n- **find_duplicate_files**: Find duplicate files by comparing content\n- **compare_files**: Compare two text files and show differences\n- **find_large_files**: Find files larger than a specified size\n- **find_empty_directories**: Find empty directories\n\n## Usage Examples\n\n### Reading File Lines\n\n```\nTool: read_file_lines\nArguments: {\n  \"path\": \"/path/to/file.txt\",\n  \"offset\": 99,        # 0-based indexing (line 100)\n  \"limit\": 51,         # Read 51 lines\n  \"encoding\": \"utf-8\"  # Optional encoding\n}\n```\n\n### Searching for Content with Grep\n\n```\nTool: grep_files\nArguments: {\n  \"path\": \"/path/to/search\",\n  \"pattern\": \"function\\\\s+\\\\w+\\\\(\",\n  \"is_regex\": true,\n  \"context_before\": 2,       # Show 2 lines before each match (like grep -B)\n  \"context_after\": 5,        # Show 5 lines after each match (like grep -A)\n  \"include_patterns\": [\"*.js\", \"*.ts\"],\n  \"results_offset\": 0,       # Start from the first match\n  \"results_limit\": 20        # Show at most 20 matches\n}\n```\n\n### Line-Targeted Editing\n\n```\nTool: edit_file_at_line\nArguments: {\n  \"path\": \"/path/to/file.txt\",\n  \"line_edits\": [\n    {\n      \"line_number\": 15,\n      \"action\": \"replace\",\n      \"content\": \"This is the new content for line 15\\n\",\n      \"expected_content\": \"Original content of line 15\\n\" # Verify content before editing\n    },\n    {\n      \"line_number\": 20,\n      \"action\": \"delete\"\n    }\n  ],\n  \"offset\": 0,                           # Start considering lines from this offset\n  \"relative_line_numbers\": false,        # Whether line numbers are relative to offset\n  \"abort_on_verification_failure\": true, # Stop on verification failure\n  \"dry_run\": true                        # Preview changes without applying\n}\n```\n\n### Finding Duplicate Files\n\n```\nTool: find_duplicate_files\nArguments: {\n  \"path\": \"/path/to/search\",\n  \"recursive\": true,\n  \"min_size\": 1024,\n  \"format\": \"text\"\n}\n```\n\n## Efficient Workflow for Large Files and Filesystems\n\nMCP-Filesystem is designed for intelligent interaction with large files and complex filesystems:\n\n1. **Smart Context Discovery**\n   - Use `grep_files` to find exactly what you need with precise context control\n   - Fine-grained control over context lines before/after matches prevents token waste\n   - Paginate through large result sets efficiently without overwhelming token limits\n   - Ripgrep integration handles massive filesystems with millions of files and lines\n\n2. **Targeted Reading**\n   - Examine only relevant sections with `read_file_lines` using offset/limit\n   - Zero-based indexing with simple offset/limit parameters for precise content retrieval\n   - Control exactly how many lines to read to maximize token efficiency\n   - Read multiple files simultaneously to reduce round-trips\n\n3. **Precise Editing**\n   - Make targeted edits with `edit_file_at_line` with content verification\n   - Verify content hasn't changed before editing to prevent conflicts\n   - Use relative line numbers for regional editing in complex files\n   - Multiple edit actions in a single operation for complex changes\n   - Dry-run capability to preview changes before applying\n\n4. **Advanced Analysis**\n   - Use specialized tools like `find_duplicate_files` and `compare_files`\n   - Generate directory trees with `directory_tree` for quick navigation\n   - Identify problematic areas with `find_large_files` and `find_empty_directories`\n\nThis workflow is particularly valuable for AI-powered tools that need to work with large files and filesystems. For example, Claude and other advanced AI assistants can leverage these capabilities to efficiently navigate codebases, analyze log files, or work with any large text-based datasets while maintaining token efficiency.\n\n## Advantages Over Standard Filesystem MCP Servers\n\nUnlike basic filesystem MCP servers, MCP-Filesystem offers:\n\n1. **Token Efficiency**\n   - Smart line-targeted operations avoid loading entire files into context\n   - Pagination controls for large results prevent context overflow\n   - Precise grep with context controls (not just whole file searches)\n   - Multi-file reading reduces round-trip requests\n\n2. **Intelligent Editing**\n   - Content verification to prevent edit conflicts\n   - Line-targeted edits that don't require the entire file\n   - Relative line number support for easier regional editing\n   - Dry-run capability to preview changes before applying\n\n3. **Advanced Search**\n   - Ripgrep integration for massive filesystem performance\n   - Context-aware results (not just matches)\n   - Fine-grained control over what gets returned\n   - Pattern-based file finding with exclusion support\n\n4. **Additional Utilities**\n   - File comparison and deduplication\n   - Directory size calculation and analysis\n   - Empty directory identification\n   - Tree-based directory visualization\n\n5. **Security Focus**\n   - Robust path validation and sandboxing\n   - Protection against path traversal attacks\n   - Symlink validation and security\n   - Detailed error reporting without sensitive exposure\n\n## Known Issues and Limitations\n\n- **Path Resolution**: Always use absolute paths for the most consistent results. Relative paths might be interpreted relative to the server's working directory rather than the allowed directories.\n- **Performance**: For large directories, operations like `find_duplicate_files` or recusrive search might take significant time to complete.\n- **Permission Handling**: The server operates with the same permissions as the user running it. Make sure the server has appropriate permissions for the directories it needs to access.\n\n## Security\n\nThe server enforces strict path validation to prevent access outside allowed directories:\n\n- Only allows operations within explicitly allowed directories\n- Provides protection against path traversal attacks\n- Validates symlinks to ensure they don't point outside allowed directories\n- Returns meaningful error messages without exposing sensitive information\n\n## Performance Considerations\n\nFor best performance with grep functionality:\n\n- Install [ripgrep](https://github.com/BurntSushi/ripgrep#installation) (`rg`)\n- The server automatically uses ripgrep if available, with a Python fallback\n\n## License\n\n[MIT License](LICENSE)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "filesystems",
        "files",
        "file management",
        "mcp filesystem",
        "files securely"
      ],
      "category": "file-management"
    },
    "seekrays--seekchat": {
      "owner": "seekrays",
      "name": "seekchat",
      "url": "https://github.com/seekrays/seekchat",
      "imageUrl": "/freedevtools/mcp/pfp/seekrays.webp",
      "description": "An AI desktop assistant that automates tasks such as file management, data analysis, and code development while providing a modern interface with multi-language support.",
      "stars": 55,
      "forks": 9,
      "license": "Apache License 2.0",
      "language": "JavaScript",
      "updated_at": "2025-10-03T22:33:49Z",
      "readme_content": "# SeekChat\n\n<div align=\"center\">\n  \n  <h3>✨ A Sleek and Powerful AI Desktop Assistant ✨</h3>\n  <p>\n    <a href=\"https://www.seekrays.com/chat\" target=\"_blank\">Official Website</a> |\n    <a href=\"README_zh-cn.md\">中文文档</a>\n  </p>\n</div>\n\n\n[![Discord](https://img.shields.io/badge/Discord-Join%20Chat-blue?logo=discord&logoColor=white)](https://discord.gg/qcSXXmX9Gx)\n[![WeChat](https://img.shields.io/badge/WeChat-Join%20Group-brightgreen?logo=wechat&logoColor=white)](https://seekrays.com/chat/zh-cn/docs/contacts/)\n\nSeekChat supports MCP tool execution, enabling AI to directly control your computer and perform various tasks. Easily automate file management, data analysis, code development, and more, turning AI into a truly intelligent assistant.\n\n\n## ✨ Key Features\n\n- **Multiple AI Providers**: Support for various AI service providers\n- **MCP Tool Integration**: Support for [Model Context Protocol](https://github.com/mccpros/model-context-protocol) tools that enhance AI capabilities\n- **Local Storage**: Chat history is stored locally to protect your privacy\n- **Multi-language Support**: Available in English and Chinese\n- **Modern UI**: Simple and intuitive user interface\n\n## 🌠 Screenshots\n\n### Chat Interface\n\n\n### MCP Tool Settings\n\n\n## 📦 Installation\n\n### Download Pre-compiled Version\n\nVisit the [Releases](https://github.com/seekrays/seekchat/releases) page to download the latest pre-compiled version.\n\n### Build from Source\n\n```bash\n# Clone the repository\ngit clone https://github.com/seekrays/seekchat.git\ncd seekchat\n\n# Install dependencies\nnpm install\n\n# Run in development mode\nnpm run dev\n\n# Build for production\n# For macOS\nnpm run electron:build:mac\n\n# For Windows\nnpm run electron:build:win\n\n# For Linux\nnpm run electron:build:linux\n```\n\n\n## Community\n\n### Discord Community\nJoin our [Discord community](https://discord.gg/qcSXXmX9Gx) to get the latest updates and participate in product discussions.\n\n### WeChat Community\n![qrcode_seekrays](https://seekrays.com/chat/images/qrcode_seekrays.jpg)\n\nAfter following our WeChat Official Account, send the message \"加群\" to join our WeChat community group and discuss with other users.\n\n## 🤝 Contributing\n\nPull Requests and Issues are welcome! If you have any suggestions or find a bug, please let us know.\n\n\n## 🙏 Acknowledgements\n\n- Thanks to all open-source project contributors\n- Thanks to the Electron and React communities\n- Special thanks to all users for their support and feedback",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "seekrays",
        "ai",
        "assistant",
        "ai desktop",
        "desktop assistant",
        "seekchat ai"
      ],
      "category": "file-management"
    },
    "sengokudaikon--aider-mcp-server": {
      "owner": "sengokudaikon",
      "name": "aider-mcp-server",
      "url": "https://github.com/sengokudaikon/aider-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/sengokudaikon.webp",
      "description": "Connects AI assistants to file editing capabilities for efficient project management, enabling users to edit, create, and manage files with integrated git status checks.",
      "stars": 34,
      "forks": 9,
      "license": "The Unlicense",
      "language": "Python",
      "updated_at": "2025-06-29T19:49:35Z",
      "readme_content": "# Aider MCP Server\n\nA Model Context Protocol (MCP) server that allows Claude and other MCP clients to connect to [Aider](https://github.com/paul-gauthier/aider) for efficient file editing capabilities.\n\n## Overview\n\nThis MCP server bridges the gap between AI assistants like Claude and Aider's powerful file editing capabilities. It provides a standardized interface through the Model Context Protocol, allowing Claude to:\n\n- Edit existing files using Aider's capabilities\n- Create new files with content\n- Extract code blocks from markdown text\n- Get git status information\n- Check Aider installation status\n- Access and use Aider's configuration system\n\n## Prerequisites\n\n- Python 3.8 or higher\n- Aider installed (`pip install aider-chat`)\n- An API key for OpenAI or Anthropic (depending on which model you want Aider to use)\n- Git repository for file editing\n\n## Installation\n\nYou can install the Aider MCP server in several ways:\n\n### Using UV (Recommended)\n\nIf you have [uv](https://github.com/astral-sh/uv) installed:\n\n```bash\n# Install uv if you don't have it\ncurl -fsSL https://astral.sh/uv/install.sh | bash\n\n# Run directly with uvx (no installation required)\nuvx aider-mcp\n```\n\n### Using PIP\n\n```bash\n# Install the package\npip install aider-mcp\n\n# Run the server\naider-mcp\n```\n\n## Usage\n\nThe Aider MCP server runs in MCP protocol mode over stdio by default, which is designed for direct integration with MCP clients like Claude Desktop and Cursor IDE.\n\n```bash\n# Run directly with uvx (recommended)\nuvx aider-mcp\n\n# With repository path specified\nuvx aider-mcp --repo-path=/path/to/your/repo\n\n# With custom Aider executable path\nuvx aider-mcp --aider-path=/path/to/aider\n\n# With environment variables\nREPO_PATH=/path/to/your/repo uvx aider-mcp\n```\n\n### Command Line Options\n\nYou can customize the server with these environment variables or command-line arguments:\n\n- `--aider-path`: Path to the Aider executable (default: \"aider\", automatically searches PATH)\n- `--repo-path`: Path to the git repository (default: current directory)\n- `--config-file`: Path to a custom Aider config file\n- `--env-file`: Path to a custom .env file\n- `--verbose`, `-v`: Enable verbose output\n\n## Client Configuration\n\n### Claude Desktop\n\nAdd this to your Claude Desktop configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"aider-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"aider-mcp\",\n        \"--repo-path\", \"/path/to/your/repo\"\n      ]\n    }\n  }\n}\n```\n\n### Cursor IDE\n\nTo integrate with Cursor IDE:\n\n1. Open Cursor Settings\n2. Navigate to `Features` > `MCP Servers`\n3. Click `Add new MCP server`\n4. Enter this configuration:\n   ```\n   name: aider-mcp\n   type: command\n   command: uvx aider-mcp --repo-path=/path/to/your/repo\n   ```\n5. After configuring, ensure you're in Agent mode in the Composer to use MCP tools\n\n## Aider Configuration Support\n\nThis MCP server supports Aider's configuration system, allowing you to:\n\n1. Use configuration from `.aider.conf.yml` files in:\n   - Your home directory\n   - The git repository root\n   - The current directory\n   - A custom path specified with `--config-file`\n\n2. Use environment variables from `.env` files in:\n   - Your home directory\n   - The git repository root\n   - The current directory\n   - A custom path specified with `--env-file`\n\n3. Pass custom Aider options when editing files through the MCP tools.\n\n## Example Prompts for Claude\n\nOnce connected to Claude, you can use prompts like:\n\n- \"Edit my app.py file to add error handling to the main function\"\n- \"Create a new file called utils.py with helper functions for date formatting\"\n- \"Show me the current git status of the repository\"\n- \"Extract the Python code from this explanation and save it to a file\"\n\n## Available Tools\n\nThe MCP server provides these directory-based tools:\n\n- `edit_files`: Make targeted code changes in a specified directory \n  - Requires a directory path and detailed instructions\n  - Automatically accepts all proposed changes (uses `--yes-always`)\n  - Additional Aider options can be specified when needed\n\n- `create_files`: Create new files with content in a specified directory\n  - You can provide multiple files to create at once\n  - Optionally commit the new files to git\n\n- `git_status`: Get git status of a specified directory's repository\n  - Quick way to check for modified, added, deleted, and untracked files\n\n- `extract_code`: Extract code blocks from markdown or text\n  - Can optionally save extracted code blocks to files in a specified directory\n  - Preserves language information from code block markers\n\n- `aider_status`: Check Aider installation and environment status\n  - Verifies Aider is correctly installed and accessible\n  - Can check specific directories for configuration\n  - Reports on API keys and environment variables\n\n- `aider_config`: Get detailed Aider configuration information\n  - Shows which configuration files are being used\n  - Displays settings from all layers of configuration\n  - Reports available environment variables\n\n## Environment Variables\n\nThe server uses environment variables which can be set directly or through `.env` files:\n\n- `AIDER_PATH`: Path to the Aider executable\n- `REPO_PATH`: Path to the git repository\n- `AIDER_CONFIG_FILE`: Path to a custom Aider config file\n- `AIDER_ENV_FILE`: Path to a custom .env file\n- `AIDER_MCP_VERBOSE`: Enable verbose logging\n- `OPENAI_API_KEY`: Your OpenAI API key (if using GPT-4 with Aider)\n- `ANTHROPIC_API_KEY`: Your Anthropic API key (if using Claude with Aider)\n\n## Debugging\n\nYou can use the MCP inspector to debug the server:\n\n```bash\n# Test with MCP inspector\nnpx @modelcontextprotocol/inspector uvx aider-mcp\n\n# Test with specific repository path\nnpx @modelcontextprotocol/inspector uvx aider-mcp --repo-path=/path/to/your/repo\n\n# If running from Python package\nnpx @modelcontextprotocol/inspector python -m aider_mcp\n```\n\nThe inspector provides an interactive UI to:\n1. View available tools and their schemas\n2. Call tools with test parameters\n3. See the responses and debug issues\n\n## Development\n\nFor local development:\n\n```bash\ngit clone https://github.com/yourusername/aider-mcp-server.git\ncd aider-mcp-server\npip install -e .\n```\n\n## License\n\nUnlicense",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "files",
        "mcp",
        "file management",
        "aider mcp",
        "integrated git"
      ],
      "category": "file-management"
    },
    "sergey-fintech--MCP": {
      "owner": "sergey-fintech",
      "name": "MCP",
      "url": "https://github.com/sergey-fintech/MCP",
      "imageUrl": "/freedevtools/mcp/pfp/sergey-fintech.webp",
      "description": "Search for files based on specified text fragments in their names, enabling efficient file retrieval based on keywords.",
      "stars": 0,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-05T10:05:37Z",
      "readme_content": "# MCP Серверы\n\nЭтот репозиторий содержит два MCP (Model Context Protocol) сервера:\n1. File Finder MCP - для поиска файлов\n2. Whisper STT MCP - для преобразования речи в текст\n\n## File Finder MCP Server\n\nЭто сервер Model Context Protocol (MCP), который предоставляет функциональность поиска файлов. Он позволяет искать файлы, содержащие указанный текстовый фрагмент в их именах.\n\n### Предварительные требования\n\n- Node.js (версия 14 или выше)\n- npm (версия 6 или выше)\n- Python 3.6 или выше (для HTTP сервера)\n\n### Установка\n\n1. Клонируйте или скачайте этот репозиторий\n2. Перейдите в директорию проекта\n3. Установите зависимости:\n   ```\n   npm install\n   ```\n4. Соберите проект:\n   ```\n   npm run build\n   ```\n\n### Запуск сервера\n\nПроект предоставляет несколько вариантов запуска MCP сервера:\n\n#### Вариант 1: Прямой запуск MCP сервера\n\nВы можете запустить MCP сервер напрямую с помощью Node.js:\n\n```\nnpm start\n```\n\nили\n\n```\nnode build/index.js\n```\n\nЭто запустит сервер, и он будет ожидать JSON-RPC запросы на stdin/stdout.\n\n#### Вариант 2: Запуск HTTP сервера и MCP прокси\n\nЭтот вариант использует Python HTTP сервер и MCP прокси, который перенаправляет запросы к HTTP серверу:\n\n1. Сначала запустите HTTP сервер:\n   ```\n   npm run start:python\n   ```\n   или\n   ```\n   python main.py\n   ```\n\n2. Затем в другом терминале запустите MCP прокси:\n   ```\n   npm run start:http\n   ```\n   или\n   ```\n   node build/index-http.js\n   ```\n\n#### Вариант 3: Интеграция с VS Code (расширение Cline)\n\nДля интеграции сервера с VS Code и расширением Cline:\n\n1. Найдите файл настроек MCP:\n   - Windows: `%APPDATA%\\Code\\User\\globalStorage\\saoudrizwan.claude-dev\\settings\\cline_mcp_settings.json`\n   - macOS: `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`\n   - Linux: `~/.config/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`\n\n2. Добавьте следующую конфигурацию в объект `mcpServers` в файле настроек:\n\n```json\n\"file-finder-mcp\": {\n  \"command\": \"node\",\n  \"args\": [\"<ПОЛНЫЙ_ПУТЬ_К_ПРОЕКТУ>/build/index.js\"],\n  \"disabled\": false,\n  \"autoApprove\": []\n}\n```\n\nДля использования HTTP прокси:\n\n```json\n\"file-finder-mcp-http\": {\n  \"command\": \"node\",\n  \"args\": [\"<ПОЛНЫЙ_ПУТЬ_К_ПРОЕКТУ>/build/index-http.js\"],\n  \"disabled\": false,\n  \"autoApprove\": []\n}\n```\n\nЗамените `<ПОЛНЫЙ_ПУТЬ_К_ПРОЕКТУ>` на фактический путь к директории вашего проекта.\n\n3. Перезапустите VS Code для загрузки обновленных настроек.\n\n### Доступные инструменты\n\nMCP сервер предоставляет один инструмент:\n\n- `search_files`: Ищет файлы, содержащие указанный фрагмент в их именах\n  - Параметры:\n    - `fragment` (строка, обязательный): Текстовый фрагмент для поиска в именах файлов\n\n### Пример использования\n\n```\n<use_mcp_tool>\n<server_name>file-finder-mcp</server_name>\n<tool_name>search_files</tool_name>\n<arguments>\n{\n  \"fragment\": \".py\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\nЭтот пример ищет все файлы, содержащие \".py\" в их именах.\n\n### HTTP сервер (main.py)\n\nВ корневой директории проекта находится файл `main.py`, который реализует HTTP сервер для поиска файлов. Этот сервер предоставляет REST API для поиска файлов, содержащих указанный фрагмент в их именах.\n\n#### Запуск HTTP сервера\n\n1. Перейдите в корневую директорию проекта\n2. Запустите сервер с помощью Python:\n   ```\n   python main.py\n   ```\n3. Сервер будет запущен на http://localhost:8080\n\n#### Использование API\n\nДля поиска файлов отправьте GET запрос на `/search` с параметром запроса `q`:\n\n```\nhttp://localhost:8080/search?q=.json\n```\n\nЭтот запрос вернет JSON-массив с информацией о всех файлах, содержащих \".json\" в их именах. Каждый элемент массива содержит следующие поля:\n- `name`: имя файла\n- `path`: абсолютный путь к файлу\n- `size`: размер файла в байтах\n- `created`: дата и время создания файла\n\nПример ответа:\n```json\n[\n    {\n        \"name\": \"package.json\",\n        \"path\": \"/absolute/path/to/package.json\",\n        \"size\": 1234,\n        \"created\": \"Wed Feb 26 17:00:00 2025\"\n    }\n]\n```\n\n## Whisper STT MCP Server\n\nЭто сервер Model Context Protocol (MCP), который предоставляет функциональность преобразования речи в текст с использованием библиотеки faster-whisper. Он позволяет транскрибировать аудиоданные в текст с автоматическим определением языка.\n\n### Предварительные требования\n\n- Node.js (версия 14 или выше)\n- npm (версия 6 или выше)\n- Python 3.6 или выше\n- faster-whisper (установите с помощью `pip install faster-whisper`)\n\n### Установка\n\n1. Клонируйте или скачайте этот репозиторий\n2. Перейдите в директорию проекта\n3. Установите зависимости:\n   ```\n   npm install\n   pip install faster-whisper\n   ```\n4. Соберите проект:\n   ```\n   npm run build\n   ```\n\n### Запуск сервера\n\nПроект предоставляет несколько вариантов запуска Whisper MCP сервера:\n\n#### Вариант 1: Прямой запуск MCP сервера\n\nВы можете запустить MCP сервер напрямую с помощью Node.js:\n\n```\nnpm run start:whisper\n```\n\nили\n\n```\nnode build/whisper-index.js\n```\n\nЭто запустит сервер, и он будет ожидать JSON-RPC запросы на stdin/stdout.\n\n#### Вариант 2: Запуск HTTP сервера и MCP прокси\n\nЭтот вариант использует Python HTTP сервер и MCP прокси, который перенаправляет запросы к HTTP серверу:\n\n1. Сначала запустите HTTP сервер:\n   ```\n   npm run start:whisper:python\n   ```\n   или\n   ```\n   python whisper_server.py\n   ```\n\n2. Затем в другом терминале запустите MCP прокси:\n   ```\n   npm run start:whisper:http\n   ```\n   или\n   ```\n   node build/whisper-index-http.js\n   ```\n\n#### Вариант 3: Интеграция с VS Code (расширение Cline)\n\nДля интеграции сервера с VS Code и расширением Cline:\n\n1. Найдите файл настроек MCP:\n   - Windows: `%APPDATA%\\Code\\User\\globalStorage\\saoudrizwan.claude-dev\\settings\\cline_mcp_settings.json`\n   - macOS: `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings\\cline_mcp_settings.json`\n   - Linux: `~/.config/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`\n\n2. Добавьте следующую конфигурацию в объект `mcpServers` в файле настроек:\n\n```json\n\"whisper-stt-mcp\": {\n  \"command\": \"node\",\n  \"args\": [\"<ПОЛНЫЙ_ПУТЬ_К_ПРОЕКТУ>/build/whisper-index.js\"],\n  \"disabled\": false,\n  \"autoApprove\": []\n}\n```\n\nДля использования HTTP прокси:\n\n```json\n\"whisper-stt-mcp-http\": {\n  \"command\": \"node\",\n  \"args\": [\"<ПОЛНЫЙ_ПУТЬ_К_ПРОЕКТУ>/build/whisper-index-http.js\"],\n  \"disabled\": false,\n  \"autoApprove\": []\n}\n```\n\nЗамените `<ПОЛНЫЙ_ПУТЬ_К_ПРОЕКТУ>` на фактический путь к директории вашего проекта.\n\n3. Перезапустите VS Code для загрузки обновленных настроек.\n\n### Доступные инструменты\n\nMCP сервер предоставляет один инструмент:\n\n- `transcribe_audio`: Преобразует аудиоданные в текст с использованием faster-whisper\n  - Параметры:\n    - `audio_base64` (строка, обязательный): Аудиоданные в формате base64\n    - `language` (строка, необязательный): Код языка (например, \"en\", \"ru\"). Если не указан, язык будет определен автоматически.\n\n### Пример использования\n\n```\n<use_mcp_tool>\n<server_name>whisper-stt-mcp</server_name>\n<tool_name>transcribe_audio</tool_name>\n<arguments>\n{\n  \"audio_base64\": \"BASE64_ENCODED_AUDIO_DATA\",\n  \"language\": \"ru\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\nЭтот пример преобразует аудиоданные в текст, предполагая, что аудио на русском языке.\n\n### HTTP сервер (whisper_server.py)\n\nВ корневой директории проекта находится файл `whisper_server.py`, который реализует HTTP сервер для преобразования речи в текст. Этот сервер предоставляет REST API для транскрибирования аудиоданных в текст.\n\n#### Запуск HTTP сервера\n\n1. Перейдите в корневую директорию проекта\n2. Запустите сервер с помощью Python:\n   ```\n   python whisper_server.py\n   ```\n3. Сервер будет запущен на http://localhost:8081\n\n#### Использование API\n\nДля транскрибирования аудио отправьте POST запрос на `/transcribe` с JSON-телом, содержащим:\n- `audio`: строка в формате base64, содержащая аудиоданные\n- `language` (необязательно): код языка (например, \"en\", \"ru\")\n\nПример запроса:\n```json\n{\n  \"audio\": \"BASE64_ENCODED_AUDIO_DATA\",\n  \"language\": \"ru\"\n}\n```\n\nОтвет будет содержать:\n- `text`: полный транскрибированный текст\n- `segments`: массив сегментов с временными метками\n- `language`: определенный язык\n- `language_probability`: вероятность определения языка\n\nПример ответа:\n```json\n{\n  \"text\": \"Это пример транскрибированного текста.\",\n  \"segments\": [\n    {\n      \"start\": 0.0,\n      \"end\": 2.5,\n      \"text\": \"Это пример\"\n    },\n    {\n      \"start\": 2.5,\n      \"end\": 4.0,\n      \"text\": \"транскрибированного текста.\"\n    }\n  ],\n  \"language\": \"ru\",\n  \"language_probability\": 0.98\n}\n```\n\n## Устранение неполадок\n\n- Если вы получаете ошибку \"No connection found for server\", убедитесь, что вы перезапустили VS Code после обновления настроек MCP.\n- Если сервер не отвечает, проверьте, что путь в настройках MCP правильный и указывает на собранный JavaScript файл.\n- Убедитесь, что сервер правильно собран, выполнив `npm run build` перед попыткой его использования.\n- Для использования HTTP прокси убедитесь, что соответствующий HTTP сервер запущен (на порту 8080 для file-finder или 8081 для whisper-stt).\n- Если возникают проблемы с faster-whisper, убедитесь, что библиотека правильно установлена и у вас есть необходимые зависимости для работы с GPU (если вы используете GPU).\n\n## Структура проекта\n\nНиже приведен список основных файлов проекта и их назначение:\n\n### Корневая директория\n- `src/index.ts` - Исходный код TypeScript MCP сервера для поиска файлов (прямая реализация)\n- `src/index-http.ts` - Исходный код TypeScript MCP прокси для HTTP сервера поиска файлов\n- `src/whisper-index.ts` - Исходный код TypeScript MCP сервера для преобразования речи в текст (прямая реализация)\n- `src/whisper-index-http.ts` - Исходный код TypeScript MCP прокси для HTTP сервера преобразования речи в текст\n- `build/index.js` - Скомпилированный JavaScript код MCP сервера для поиска файлов\n- `build/index-http.js` - Скомпилированный JavaScript код MCP прокси для поиска файлов\n- `build/whisper-index.js` - Скомпилированный JavaScript код MCP сервера для преобразования речи в текст\n- `build/whisper-index-http.js` - Скомпилированный JavaScript код MCP прокси для преобразования речи в текст\n- `tsconfig.json` - Конфигурация TypeScript\n- `package.json` - Описание пакета и зависимости\n- `main.py` - HTTP сервер на Python для поиска файлов\n- `whisper_server.py` - HTTP сервер на Python для преобразования речи в текст\n- `README.md` - Документация проекта (этот файл)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "retrieval",
        "search",
        "files",
        "file retrieval",
        "search files",
        "mcp search"
      ],
      "category": "file-management"
    },
    "shaike1--mcp-server-ssh": {
      "owner": "shaike1",
      "name": "mcp-server-ssh",
      "url": "https://github.com/shaike1/mcp-server-ssh",
      "imageUrl": "/freedevtools/mcp/pfp/shaike1.webp",
      "description": "Enable secure remote command execution and file operations through the SSH protocol, supporting both password and key-based authentication with detailed logging and progress tracking for file transfers.",
      "stars": 48,
      "forks": 11,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-24T20:36:34Z",
      "readme_content": "# MCP SSH Server\n\nA powerful SSH server implementation for Model Context Protocol (MCP). This server enables secure remote command execution and file operations through SSH protocol, supporting both password and key-based authentication.\n\n## Features\n\n- ✨ Secure SSH connection management\n- 🔑 Password and key-based authentication\n- 💻 Remote command execution\n- 📁 File operations (upload/download)\n- 📊 Progress tracking for file transfers\n- 🔐 Permission management\n- 📂 Directory operations\n- 🚀 Bulk file transfers\n- 📝 Detailed logging\n\n## Installation\n\n1. Install the package:\n```bash\nnpm install mcp-ssh\n```\n\n2. Add to your Claude desktop config (`claude_desktop_config.json`):\n```json\n{\n  \"mcpServers\": {\n    \"ssh\": {\n      \"command\": \"node\",\n      \"args\": [\"%APPDATA%/npm/node_modules/mcp-ssh/dist/server.js\"],\n      \"env\": {\n        \"SSH_PORT\": \"8889\",\n        \"SSH_LOG_LEVEL\": \"info\"\n      }\n    }\n  }\n}\n\n```\n\n## Usage\n\n### Password Authentication\n```powershell\n$body = @{\n    id = \"test\"\n    host = \"example.com\"\n    port = 22\n    username = \"user\"\n    password = \"pass123\"\n} | ConvertTo-Json\n\nInvoke-RestMethod -Uri \"http://localhost:8889/connect\" -Method Post -Body $body -ContentType \"application/json\"\n```\n\n### Key Authentication\n```powershell\n$body = @{\n    id = \"test\"\n    host = \"example.com\"\n    port = 22\n    username = \"user\"\n    privateKey = Get-Content ~/.ssh/id_rsa | Out-String\n    passphrase = \"optional-key-passphrase\"  # if your key is protected\n} | ConvertTo-Json\n\nInvoke-RestMethod -Uri \"http://localhost:8889/connect\" -Method Post -Body $body -ContentType \"application/json\"\n```\n\n### Execute Commands\n```powershell\n$execBody = @{\n    id = \"test\"\n    command = \"ls -la\"\n} | ConvertTo-Json\n\nInvoke-RestMethod -Uri \"http://localhost:8889/exec\" -Method Post -Body $execBody -ContentType \"application/json\"\n```\n\n### File Operations\n```powershell\n# Upload file\n$uploadForm = @{\n    file = Get-Item -Path \"localfile.txt\"\n    remotePath = \"/remote/path/file.txt\"\n}\nInvoke-RestMethod -Uri \"http://localhost:8889/upload/test\" -Method Post -Form $uploadForm\n\n# Download file\nInvoke-RestMethod -Uri \"http://localhost:8889/download/test?remotePath=/remote/path/file.txt\" -Method Get -OutFile \"downloaded.txt\"\n```\n\n### Directory Operations\n```powershell\n# List directory\nInvoke-RestMethod -Uri \"http://localhost:8889/ls/test?path=/remote/path\" -Method Get\n\n# Get connection status\nInvoke-RestMethod -Uri \"http://localhost:8889/status/test\" -Method Get\n```\n\n## Development\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/shaike1/mcp-server-ssh.git\ncd mcp-server-ssh\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build:\n```bash\nnpm run build\n```\n\n4. Start server:\n```bash\nnpm start\n```\n\n## Environment Variables\n\n- `SSH_PORT`: Server port (default: 8889)\n- `SSH_LOG_LEVEL`: Logging level (default: info)\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ssh",
        "authentication",
        "mcp",
        "mcp server",
        "ssh protocol",
        "shaike1 mcp"
      ],
      "category": "file-management"
    },
    "sigoden--dufs": {
      "owner": "sigoden",
      "name": "dufs",
      "url": "https://github.com/sigoden/dufs",
      "imageUrl": "/freedevtools/mcp/pfp/sigoden.webp",
      "description": "A utility file server that simplifies file management tasks by providing functionalities for uploading, downloading, and controlling access to files. It also supports static file serving, resumable uploads, and WebDAV integration.",
      "stars": 8882,
      "forks": 454,
      "license": "Other",
      "language": "Rust",
      "updated_at": "2025-10-04T07:08:45Z",
      "readme_content": "# Dufs\n\n[![CI](https://github.com/sigoden/dufs/actions/workflows/ci.yaml/badge.svg)](https://github.com/sigoden/dufs/actions/workflows/ci.yaml)\n[![Crates](https://img.shields.io/crates/v/dufs.svg)](https://crates.io/crates/dufs)\n[![Docker Pulls](https://img.shields.io/docker/pulls/sigoden/dufs)](https://hub.docker.com/r/sigoden/dufs)\n\nDufs is a distinctive utility file server that supports static serving, uploading, searching, accessing control, webdav...\n\n![demo](https://user-images.githubusercontent.com/4012553/220513063-ff0f186b-ac54-4682-9af4-47a9781dee0d.png)\n\n## Features\n\n- Serve static files\n- Download folder as zip file\n- Upload files and folders (Drag & Drop)\n- Create/Edit/Search files\n- Resumable/partial uploads/downloads\n- Access control\n- Support https\n- Support webdav\n- Easy to use with curl\n\n## Install\n\n### With cargo\n\n```\ncargo install dufs\n```\n\n### With docker\n\n```\ndocker run -v `pwd`:/data -p 5000:5000 --rm sigoden/dufs /data -A\n```\n\n### With [Homebrew](https://brew.sh)\n\n```\nbrew install dufs\n```\n\n### Binaries on macOS, Linux, Windows\n\nDownload from [Github Releases](https://github.com/sigoden/dufs/releases), unzip and add dufs to your $PATH.\n\n## CLI\n\n```\nDufs is a distinctive utility file server - https://github.com/sigoden/dufs\n\nUsage: dufs [OPTIONS] [serve-path]\n\nArguments:\n  [serve-path]  Specific path to serve [default: .]\n\nOptions:\n  -c, --config <file>        Specify configuration file\n  -b, --bind <addrs>         Specify bind address or unix socket\n  -p, --port <port>          Specify port to listen on [default: 5000]\n      --path-prefix <path>   Specify a path prefix\n      --hidden <value>       Hide paths from directory listings, e.g. tmp,*.log,*.lock\n  -a, --auth <rules>         Add auth roles, e.g. user:pass@/dir1:rw,/dir2\n  -A, --allow-all            Allow all operations\n      --allow-upload         Allow upload files/folders\n      --allow-delete         Allow delete files/folders\n      --allow-search         Allow search files/folders\n      --allow-symlink        Allow symlink to files/folders outside root directory\n      --allow-archive        Allow download folders as archive file\n      --enable-cors          Enable CORS, sets `Access-Control-Allow-Origin: *`\n      --render-index         Serve index.html when requesting a directory, returns 404 if not found index.html\n      --render-try-index     Serve index.html when requesting a directory, returns directory listing if not found index.html\n      --render-spa           Serve SPA(Single Page Application)\n      --assets <path>        Set the path to the assets directory for overriding the built-in assets\n      --log-format <format>  Customize http log format\n      --log-file <file>      Specify the file to save logs to, other than stdout/stderr\n      --compress <level>     Set zip compress level [default: low] [possible values: none, low, medium, high]\n      --completions <shell>  Print shell completion script for <shell> [possible values: bash, elvish, fish, powershell, zsh]\n      --tls-cert <path>      Path to an SSL/TLS certificate to serve with HTTPS\n      --tls-key <path>       Path to the SSL/TLS certificate's private key\n  -h, --help                 Print help\n  -V, --version              Print version\n```\n\n## Examples\n\nServe current working directory in read-only mode\n\n```\ndufs\n```\n\nAllow all operations like upload/delete/search/create/edit...\n\n```\ndufs -A\n```\n\nOnly allow upload operation\n\n```\ndufs --allow-upload\n```\n\nServe a specific directory\n\n```\ndufs Downloads\n```\n\nServe a single file\n\n```\ndufs linux-distro.iso\n```\n\nServe a single-page application like react/vue\n\n```\ndufs --render-spa\n```\n\nServe a static website with index.html\n\n```\ndufs --render-index\n```\n\nRequire username/password\n\n```\ndufs -a admin:123@/:rw\n```\n\nListen on specific host:ip \n\n```\ndufs -b 127.0.0.1 -p 80\n```\n\nListen on unix socket\n```\ndufs -b /tmp/dufs.socket\n```\n\nUse https\n\n```\ndufs --tls-cert my.crt --tls-key my.key\n```\n\n## API\n\nUpload a file\n\n```sh\ncurl -T path-to-file http://127.0.0.1:5000/new-path/path-to-file\n```\n\nDownload a file\n```sh\ncurl http://127.0.0.1:5000/path-to-file           # download the file\ncurl http://127.0.0.1:5000/path-to-file?hash      # retrieve the sha256 hash of the file\n```\n\nDownload a folder as zip file\n\n```sh\ncurl -o path-to-folder.zip http://127.0.0.1:5000/path-to-folder?zip\n```\n\nDelete a file/folder\n\n```sh\ncurl -X DELETE http://127.0.0.1:5000/path-to-file-or-folder\n```\n\nCreate a directory\n\n```sh\ncurl -X MKCOL http://127.0.0.1:5000/path-to-folder\n```\n\nMove the file/folder to the new path\n\n```sh\ncurl -X MOVE http://127.0.0.1:5000/path -H \"Destination: http://127.0.0.1:5000/new-path\"\n```\n\nList/search directory contents\n\n```sh\ncurl http://127.0.0.1:5000?q=Dockerfile           # search for files, similar to `find -name Dockerfile`\ncurl http://127.0.0.1:5000?simple                 # output names only, similar to `ls -1`\ncurl http://127.0.0.1:5000?json                   # output paths in json format\n```\n\nWith authorization (Both basic or digest auth works)\n\n```sh\ncurl http://127.0.0.1:5000/file --user user:pass                 # basic auth\ncurl http://127.0.0.1:5000/file --user user:pass --digest        # digest auth\n```\n\nResumable downloads\n\n```sh\ncurl -C- -o file http://127.0.0.1:5000/file\n```\n\nResumable uploads\n\n```sh\nupload_offset=$(curl -I -s http://127.0.0.1:5000/file | tr -d '\\r' | sed -n 's/content-length: //p')\ndd skip=$upload_offset if=file status=none ibs=1 | \\\n  curl -X PATCH -H \"X-Update-Range: append\" --data-binary @- http://127.0.0.1:5000/file\n```\n\nHealth checks\n\n```sh\ncurl http://127.0.0.1:5000/__dufs__/health\n```\n\n<details>\n<summary><h2>Advanced Topics</h2></summary>\n\n### Access Control\n\nDufs supports account based access control. You can control who can do what on which path with `--auth`/`-a`.\n\n```\ndufs -a admin:admin@/:rw -a guest:guest@/\ndufs -a user:pass@/:rw,/dir1 -a @/\n```\n\n1. Use `@` to separate the account and paths. No account means anonymous user.\n2. Use `:` to separate the username and password of the account.\n3. Use `,` to separate paths.\n4. Use path suffix `:rw`/`:ro` set permissions: `read-write`/`read-only`. `:ro` can be omitted.\n\n- `-a admin:admin@/:rw`: `admin` has complete permissions for all paths.\n- `-a guest:guest@/`: `guest` has read-only permissions for all paths.\n- `-a user:pass@/:rw,/dir1`: `user` has read-write permissions for `/*`, has read-only permissions for `/dir1/*`.\n- `-a @/`: All paths is publicly accessible, everyone can view/download it.\n\n**Auth permissions are restricted by dufs global permissions.** If dufs does not enable upload permissions via `--allow-upload`, then the account will not have upload permissions even if it is granted `read-write`(`:rw`) permissions.\n\n#### Hashed Password\n\nDUFS supports the use of sha-512 hashed password.\n\nCreate hashed password:\n\n```sh\n$ openssl passwd -6 123456 # or `mkpasswd -m sha-512 123456`\n$6$tWMB51u6Kb2ui3wd$5gVHP92V9kZcMwQeKTjyTRgySsYJu471Jb1I6iHQ8iZ6s07GgCIO69KcPBRuwPE5tDq05xMAzye0NxVKuJdYs/\n```\n\nUse hashed password:\n\n```sh\ndufs -a 'admin:$6$tWMB51u6Kb2ui3wd$5gVHP92V9kZcMwQeKTjyTRgySsYJu471Jb1I6iHQ8iZ6s07GgCIO69KcPBRuwPE5tDq05xMAzye0NxVKuJdYs/@/:rw'\n```\n> The hashed password contains `$6`, which can expand to a variable in some shells, so you have to use **single quotes** to wrap it.\n\nTwo important things for hashed passwords:\n\n1. Dufs only supports sha-512 hashed passwords, so ensure that the password string always starts with `$6$`.\n2. Digest authentication does not function properly with hashed passwords.\n\n\n### Hide Paths\n\nDufs supports hiding paths from directory listings via option `--hidden <glob>,...`.\n\n```\ndufs --hidden .git,.DS_Store,tmp\n```\n\n> The glob used in --hidden only matches file and directory names, not paths. So `--hidden dir1/file` is invalid.\n\n```sh\ndufs --hidden '.*'                          # hidden dotfiles\ndufs --hidden '*/'                          # hidden all folders\ndufs --hidden '*.log,*.lock'                # hidden by exts\ndufs --hidden '*.log' --hidden '*.lock'\n```\n\n### Log Format\n\nDufs supports customize http log format with option `--log-format`.\n\nThe log format can use following variables.\n\n| variable     | description                                                               |\n| ------------ | ------------------------------------------------------------------------- |\n| $remote_addr | client address                                                            |\n| $remote_user | user name supplied with authentication                                    |\n| $request     | full original request line                                                |\n| $status      | response status                                                           |\n| $http_       | arbitrary request header field. examples: $http_user_agent, $http_referer |\n\n\nThe default log format is `'$remote_addr \"$request\" $status'`.\n```\n2022-08-06T06:59:31+08:00 INFO - 127.0.0.1 \"GET /\" 200\n```\n\nDisable http log\n```\ndufs --log-format=''\n```\n\nLog user-agent\n```\ndufs --log-format '$remote_addr \"$request\" $status $http_user_agent'\n```\n```\n2022-08-06T06:53:55+08:00 INFO - 127.0.0.1 \"GET /\" 200 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\n```\n\nLog remote-user\n```\ndufs --log-format '$remote_addr $remote_user \"$request\" $status' -a /@admin:admin -a /folder1@user1:pass1\n```\n```\n2022-08-06T07:04:37+08:00 INFO - 127.0.0.1 admin \"GET /\" 200\n```\n\n## Environment variables\n\nAll options can be set using environment variables prefixed with `DUFS_`.\n\n```\n[serve-path]                DUFS_SERVE_PATH=\".\"\n    --config <file>         DUFS_CONFIG=config.yaml\n-b, --bind <addrs>          DUFS_BIND=0.0.0.0\n-p, --port <port>           DUFS_PORT=5000\n    --path-prefix <path>    DUFS_PATH_PREFIX=/dufs\n    --hidden <value>        DUFS_HIDDEN=tmp,*.log,*.lock\n-a, --auth <rules>          DUFS_AUTH=\"admin:admin@/:rw|@/\" \n-A, --allow-all             DUFS_ALLOW_ALL=true\n    --allow-upload          DUFS_ALLOW_UPLOAD=true\n    --allow-delete          DUFS_ALLOW_DELETE=true\n    --allow-search          DUFS_ALLOW_SEARCH=true\n    --allow-symlink         DUFS_ALLOW_SYMLINK=true\n    --allow-archive         DUFS_ALLOW_ARCHIVE=true\n    --enable-cors           DUFS_ENABLE_CORS=true\n    --render-index          DUFS_RENDER_INDEX=true\n    --render-try-index      DUFS_RENDER_TRY_INDEX=true\n    --render-spa            DUFS_RENDER_SPA=true\n    --assets <path>         DUFS_ASSETS=./assets\n    --log-format <format>   DUFS_LOG_FORMAT=\"\"\n    --log-file <file>       DUFS_LOG_FILE=./dufs.log\n    --compress <compress>   DUFS_COMPRESS=low\n    --tls-cert <path>       DUFS_TLS_CERT=cert.pem\n    --tls-key <path>        DUFS_TLS_KEY=key.pem\n```\n\n## Configuration File\n\nYou can specify and use the configuration file by selecting the option `--config <path-to-config.yaml>`.\n\nThe following are the configuration items:\n\n```yaml\nserve-path: '.'\nbind: 0.0.0.0\nport: 5000\npath-prefix: /dufs\nhidden:\n  - tmp\n  - '*.log'\n  - '*.lock'\nauth:\n  - admin:admin@/:rw\n  - user:pass@/src:rw,/share\n  - '@/'  # According to the YAML spec, quoting is required.\nallow-all: false\nallow-upload: true\nallow-delete: true\nallow-search: true\nallow-symlink: true\nallow-archive: true\nenable-cors: true\nrender-index: true\nrender-try-index: true\nrender-spa: true\nassets: ./assets/\nlog-format: '$remote_addr \"$request\" $status $http_user_agent'\nlog-file: ./dufs.log\ncompress: low\ntls-cert: tests/data/cert.pem\ntls-key: tests/data/key_pkcs1.pem\n```\n\n### Customize UI\n\nDufs allows users to customize the UI with your own assets.\n\n```\ndufs --assets my-assets-dir/\n```\n\n> If you only need to make slight adjustments to the current UI, you copy dufs's [assets](https://github.com/sigoden/dufs/tree/main/assets) directory and modify it accordingly. The current UI doesn't use any frameworks, just plain HTML/JS/CSS. As long as you have some basic knowledge of web development, it shouldn't be difficult to modify.\n\nYour assets folder must contains a `index.html` file.\n\n`index.html` can use the following placeholder variables to retrieve internal data.\n\n- `__INDEX_DATA__`: directory listing data\n- `__ASSETS_PREFIX__`: assets url prefix\n\n</details>\n\n## License\n\nCopyright (c) 2022-2024 dufs-developers.\n\ndufs is made available under the terms of either the MIT License or the Apache License 2.0, at your option.\n\nSee the LICENSE-APACHE and LICENSE-MIT files for license details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "dufs",
        "files",
        "webdav",
        "dufs utility",
        "file management",
        "file server"
      ],
      "category": "file-management"
    },
    "skydeckai--skydeckai-code": {
      "owner": "skydeckai",
      "name": "skydeckai-code",
      "url": "https://github.com/skydeckai/skydeckai-code",
      "imageUrl": "/freedevtools/mcp/pfp/skydeckai.webp",
      "description": "Provides tools for AI-driven development workflows, including file system operations, code analysis across multiple programming languages, code execution, and web content fetching with HTML-to-markdown conversion.",
      "stars": 74,
      "forks": 20,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-13T16:37:02Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/skydeckai-code-badge.png)](https://mseep.ai/app/skydeckai-code)\n\n# SkyDeckAI Code\n\nAn MCP server that provides a comprehensive set of tools for AI-driven development workflows. Features include file system operations, code analysis using tree-sitter for multiple programming languages, code execution, web content fetching with HTML-to-markdown conversion, multi-engine web search, code content searching, and system information retrieval. Designed to enhance AI's capability to assist in software development tasks by providing direct access to both local and remote resources.\n\n# Formerly Known As MCP-Server-AIDD\n\nThis mcp server was formerly known as `mcp-server-aidd`. It was renamed to `skydeckai-code` to credit the team at [SkyDeck.ai](https://skydeck.ai) with creating this application along with [East Agile](https://eastagile.com). But more importantly we realized that the term AI Driven Development (AIDD) was just not catching on. People did not understand at a glance what it was about. And nor did LLMs. \"Code\" was far more intuitive. And linguistically intuitive is important in the world of agentic AI.\n\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/fe7a40fd-30c1-4767-84f9-d33bf997497e)\n\n## Installation\n\n```bash\n# Using uvx\nuvx skydeckai-code\n```\n\n## Claude Desktop Setup\n\nAdd to your `claude_desktop_config.json`:\n\n```json\n{\n    \"mcpServers\": {\n        \"skydeckai-code\": {\n            \"command\": \"uvx\",\n            \"args\": [\"skydeckai-code\"]\n        }\n    }\n}\n```\n\n## SkyDeck AI Helper App\n\nIf you're using MseeP AI Helper app, you can search for \"SkyDeckAI Code\" and install it.\n\n\n\n## Key Features\n\n-   File system operations (read, write, edit, move, copy, delete)\n-   Directory management and traversal\n-   Multi-language code analysis using tree-sitter\n-   Code content searching with regex pattern matching\n-   Multi-language code execution with safety measures\n-   Web content fetching from APIs and websites with HTML-to-markdown conversion\n-   Multi-engine web search with reliable fallback mechanisms\n-   Batch operations for parallel and serial tool execution\n-   Security controls with configurable workspace boundaries\n-   Screenshot and screen context tools\n-   Image handling tools\n\n## Available Tools (29)\n\n| Category         | Tool Name                  | Description                                  |\n| ---------------- | -------------------------- | -------------------------------------------- |\n| **File System**  | `get_allowed_directory`    | Get the current working directory path       |\n|                  | `update_allowed_directory` | Change the working directory                 |\n|                  | `create_directory`         | Create a new directory or nested directories |\n|                  | `write_file`               | Create or overwrite a file with new content  |\n|                  | `edit_file`                | Make line-based edits to a text file         |\n|                  | `read_file`                | Read the contents of one or more files       |\n|                  | `list_directory`           | Get listing of files and directories         |\n|                  | `move_file`                | Move or rename a file or directory           |\n|                  | `copy_file`                | Copy a file or directory to a new location   |\n|                  | `search_files`             | Search for files matching a name pattern     |\n|                  | `delete_file`              | Delete a file or empty directory             |\n|                  | `get_file_info`            | Get detailed file metadata                   |\n|                  | `directory_tree`           | Get a recursive tree view of directories     |\n|                  | `read_image_file`          | Read an image file as base64 data            |\n| **Code Tools**   | `codebase_mapper`          | Analyze code structure across files          |\n|                  | `search_code`              | Find text patterns in code files             |\n|                  | `execute_code`             | Run code in various languages                |\n|                  | `execute_shell_script`     | Run shell/bash scripts                       |\n| **Web Tools**    | `web_fetch`                | Get content from a URL                       |\n|                  | `web_search`               | Perform a web search                         |\n| **Screen Tools** | `capture_screenshot`       | Take a screenshot of screen or window        |\n|                  | `get_active_apps`          | List running applications                    |\n|                  | `get_available_windows`    | List all open windows                        |\n| **System**       | `get_system_info`          | Get detailed system information              |\n| **Utility**      | `batch_tools`              | Run multiple tool operations together        |\n|                  | `think`                    | Document reasoning without making changes    |\n| **Todo**         | `todo_read`                | Read current workspace todo list             |\n|                  | `todo_write`               | Replace entire todo list with validation     |\n|                  | `todo_update`              | Update specific todo item by ID              |\n\n## Detailed Tool Documentation\n\n### Basic File Operations\n\n| Tool          | Parameters                                                 | Returns                                       |\n| ------------- | ---------------------------------------------------------- | --------------------------------------------- |\n| read_file     | files: [{path: string, offset?: integer, limit?: integer}] | File content (single or multiple files)       |\n| write_file    | path: string, content: string                              | Success confirmation                          |\n| move_file     | source: string, destination: string                        | Success confirmation                          |\n| copy_file     | source: string, destination: string, recursive?: boolean   | Success confirmation                          |\n| delete_file   | path: string                                               | Success confirmation                          |\n| get_file_info | path: string                                               | File metadata (size, timestamps, permissions) |\n\n### Complex File Operations\n\n#### edit_file\n\nPattern-based file editing with preview support:\n\n```json\n{\n    \"path\": \"src/main.py\",\n    \"edits\": [\n        {\n            \"oldText\": \"def old_function():\",\n            \"newText\": \"def new_function():\"\n        }\n    ],\n    \"dryRun\": false,\n    \"options\": {\n        \"partialMatch\": true\n    }\n}\n```\n\nReturns: Diff of changes or preview in dry run mode.\n\n### Directory Operations\n\n| Tool                     | Parameters                                               | Returns                        |\n| ------------------------ | -------------------------------------------------------- | ------------------------------ |\n| get_allowed_directory    | none                                                     | Current allowed directory path |\n| update_allowed_directory | directory: string (absolute path)                        | Success confirmation           |\n| list_directory           | path: string                                             | Directory contents list        |\n| create_directory         | path: string                                             | Success confirmation           |\n| search_files             | pattern: string, path?: string, include_hidden?: boolean | Matching files list            |\n\nThe `search_files` tool searches for files by name pattern, while the `search_code` tool searches within file contents using regex. Use `search_files` when looking for files with specific names or extensions, and `search_code` when searching for specific text patterns inside files.\n\n#### directory_tree\n\nGenerates complete directory structure:\n\n```json\n{\n    \"path\": \"src\",\n    \"include_hidden\": false\n}\n```\n\nReturns: JSON tree structure of directory contents.\n\n### Code Analysis\n\n#### codebase_mapper\n\nAnalyzes source code structure:\n\n```json\n{\n    \"path\": \"src\"\n}\n```\n\nReturns:\n\n-   Classes and their methods\n-   Functions and parameters\n-   Module structure\n-   Code organization statistics\n-   Inheritance relationships\n\nSupported Languages:\n\n-   Python (.py)\n-   JavaScript (.js/.jsx, .mjs, .cjs)\n-   TypeScript (.ts/.tsx)\n-   Java (.java)\n-   C++ (.cpp, .hpp, .cc)\n-   Ruby (.rb, .rake)\n-   Go (.go)\n-   Rust (.rs)\n-   PHP (.php)\n-   C# (.cs)\n-   Kotlin (.kt, .kts)\n\n#### search_code\n\nFast content search tool using regular expressions:\n\n```json\n{\n    \"patterns\": [\"function\\\\s+\\\\w+\", \"class\\\\s+\\\\w+\"],\n    \"include\": \"*.js\",\n    \"exclude\": \"node_modules/**\",\n    \"max_results\": 50,\n    \"case_sensitive\": false,\n    \"path\": \"src\"\n}\n```\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|------|----------|-------------|\n| patterns | array of strings | Yes | List of regular expression patterns to search for in file contents |\n| include | string | No | File pattern to include (glob syntax, default: \"\\*\") |\n| exclude | string | No | File pattern to exclude (glob syntax, default: \"\") |\n| max_results | integer | No | Maximum results to return per pattern (default: 100) |\n| case_sensitive | boolean | No | Whether search is case-sensitive (default: false) |\n| path | string | No | Base directory to search from (default: \".\") |\n\n**Returns:**\nMatching lines grouped by file with line numbers, sorted by file modification time with newest files first.\n\nThis tool uses ripgrep when available for optimal performance, with a Python fallback implementation. It's ideal for finding specific code patterns like function declarations, imports, variable usages, or error handling.\n\n### System Information\n\n| Tool            | Parameters | Returns                      |\n| --------------- | ---------- | ---------------------------- |\n| get_system_info | none       | Comprehensive system details |\n\nReturns:\n\n```json\n{\n  \"working_directory\": \"/path/to/project\",\n  \"system\": {\n    \"os\", \"os_version\", \"architecture\", \"python_version\"\n  },\n  \"wifi_network\": \"MyWiFi\",\n  \"cpu\": {\n    \"physical_cores\", \"logical_cores\", \"total_cpu_usage\"\n  },\n  \"memory\": { \"total\", \"available\", \"used_percentage\" },\n  \"disk\": { \"total\", \"free\", \"used_percentage\" },\n  \"mac_details\": {  // Only present on macOS\n    \"model\": \"Mac mini\",\n    \"chip\": \"Apple M2\",\n    \"serial_number\": \"XXX\"\n  }\n}\n```\n\nProvides essential system information in a clean, readable format.\n\n### Screen Context and Image Tools\n\n#### get_active_apps\n\nReturns a list of currently active applications on the user's system.\n\n```json\n{\n    \"with_details\": true\n}\n```\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| with_details | boolean | No | Whether to include additional details about each application (default: false) |\n\n**Returns:**\n\n```json\n{\n    \"success\": true,\n    \"platform\": \"macos\",\n    \"app_count\": 12,\n    \"apps\": [\n        {\n            \"name\": \"Firefox\",\n            \"has_windows\": true,\n            \"window_count\": 3,\n            \"visible_windows\": [\n                { \"name\": \"GitHub - Mozilla Firefox\", \"width\": 1200, \"height\": 800 }\n            ]\n        },\n        {\n            \"name\": \"VSCode\",\n            \"has_windows\": true\n        }\n    ]\n}\n```\n\nThis tool provides valuable context about applications currently running on the user's system, which can help with providing more relevant assistance.\n\n#### get_available_windows\n\nReturns detailed information about all available windows currently displayed on the user's screen.\n\n```json\n{}\n```\n\n**Returns:**\n\n```json\n{\n    \"success\": true,\n    \"platform\": \"macos\",\n    \"count\": 8,\n    \"windows\": [\n        {\n            \"id\": 42,\n            \"title\": \"Document.txt - Notepad\",\n            \"app\": \"Notepad\",\n            \"visible\": true\n        },\n        {\n            \"title\": \"Terminal\",\n            \"app\": \"Terminal\",\n            \"visible\": true,\n            \"active\": true\n        }\n    ]\n}\n```\n\nThis tool helps understand what's visible on the user's screen and can be used for context-aware assistance.\n\n#### capture_screenshot\n\nCaptures a screenshot of the user's screen or a specific window.\n\n```json\n{\n    \"output_path\": \"screenshots/capture.png\",\n    \"capture_mode\": {\n        \"type\": \"named_window\",\n        \"window_name\": \"Visual Studio Code\"\n    }\n}\n```\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| output_path | string | No | Path where the screenshot should be saved (default: generated path) |\n| capture_mode | object | No | Specifies what to capture |\n| capture_mode.type | string | No | Type of screenshot: 'full', 'active_window', or 'named_window' (default: 'full') |\n| capture_mode.window_name | string | No | Name of window to capture (required when type is 'named_window') |\n\n**Returns:**\n\n```json\n{\n    \"success\": true,\n    \"path\": \"/path/to/screenshots/capture.png\"\n}\n```\n\nThis tool captures screenshots for visualization, debugging, or context-aware assistance.\n\n#### read_image_file\n\nReads an image file from the file system and returns its contents as a base64-encoded string.\n\n```json\n{\n    \"path\": \"images/logo.png\"\n}\n```\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| path | string | Yes | Path to the image file to read |\n| max_size | integer | No | Maximum file size in bytes (default: 100MB) |\n\n**Returns:**\nBase64-encoded image data that can be displayed or processed.\n\nThis tool supports common image formats like PNG, JPEG, GIF, and WebP, and automatically resizes images for optimal viewing.\n\n### Web Tools\n\n#### web_fetch\n\nFetches content from a URL and optionally saves it to a file.\n\n```json\n{\n    \"url\": \"https://api.github.com/users/octocat\",\n    \"headers\": {\n        \"Accept\": \"application/json\"\n    },\n    \"timeout\": 15,\n    \"save_to_file\": \"downloads/octocat.json\",\n    \"convert_html_to_markdown\": true\n}\n```\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| url | string | Yes | URL to fetch content from (http/https only) |\n| headers | object | No | Optional HTTP headers to include in the request |\n| timeout | integer | No | Maximum time to wait for response (default: 10s) |\n| save_to_file | string | No | Path to save response content (within allowed directory) |\n| convert_html_to_markdown | boolean | No | When true, converts HTML content to markdown for better readability (default: true) |\n\n**Returns:**\nResponse content as text with HTTP status code and size information. For binary content, returns metadata and saves to file if requested. When convert_html_to_markdown is enabled, HTML content is automatically converted to markdown format for better readability.\n\nThis tool can be used to access web APIs, fetch documentation, or download content from the web while respecting size limits (10MB max) and security constraints.\n\n#### web_search\n\nPerforms a robust web search using multiple search engines and returns concise, relevant results.\n\n```json\n{\n    \"query\": \"latest python release features\",\n    \"num_results\": 8,\n    \"convert_html_to_markdown\": true,\n    \"search_engine\": \"bing\"\n}\n```\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| query | string | Yes | The search query to process. Be specific for better results. |\n| num_results | integer | No | Maximum number of search results to return (default: 10, max: 20) |\n| convert_html_to_markdown | boolean | No | When true, content will be converted from HTML to markdown for better readability (default: true) |\n| search_engine | string | No | Specifies which search engine to use: \"auto\" (default), \"bing\", or \"duckduckgo\" |\n\n**Returns:**\nA list of search results formatted in markdown, including titles, URLs, and snippets for each result. Results are deduplicated and organized hierarchically for easy reading.\n\nThis tool uses a multi-engine approach that tries different search engines with various parsing strategies to ensure reliable results. You can specify a preferred engine, but some engines may block automated access, in which case the tool will fall back to alternative engines when \"auto\" is selected.\n\n### Utility Tools\n\n#### batch_tools\n\nExecute multiple tool invocations in a single request with parallel execution when possible.\n\n```json\n{\n    \"description\": \"Setup new project\",\n    \"sequential\": true,\n    \"invocations\": [\n        {\n            \"tool\": \"create_directory\",\n            \"arguments\": {\n                \"path\": \"src\"\n            }\n        },\n        {\n            \"tool\": \"write_file\",\n            \"arguments\": {\n                \"path\": \"README.md\",\n                \"content\": \"# New Project\\n\\nThis is a new project.\"\n            }\n        },\n        {\n            \"tool\": \"execute_shell_script\",\n            \"arguments\": {\n                \"script\": \"git init\"\n            }\n        }\n    ]\n}\n```\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| description | string | Yes | Short description of the batch operation |\n| sequential | boolean | No | Whether to run tools in sequence (default: false) |\n| invocations | array | Yes | List of tool invocations to execute |\n| invocations[].tool | string | Yes | Name of the tool to invoke |\n| invocations[].arguments | object | Yes | Arguments for the specified tool |\n\n**Returns:**\nCombined results from all tool invocations, grouped by tool with success/error status for each. Results are presented in the original invocation order with clear section headers.\n\nThis tool provides efficient execution of multiple operations in a single request. When `sequential` is false (default), tools are executed in parallel for better performance. When `sequential` is true, tools are executed in order, and if any tool fails, execution stops.\n\n**IMPORTANT**: All tools in the batch execute in the same working directory context. If a tool creates a directory and a subsequent tool needs to work inside that directory, you must either:\n\n1. Use paths relative to the current working directory (e.g., \"project/src\" rather than just \"src\"), or\n2. Include an explicit tool invocation to change directories using `update_allowed_directory`\n\n#### think\n\nA tool for complex reasoning and brainstorming without making changes to the repository.\n\n```json\n{\n    \"thought\": \"Let me analyze the performance issue in the codebase:\\n\\n## Root Cause Analysis\\n\\n1. The database query is inefficient because:\\n   - It doesn't use proper indexing\\n   - It fetches more columns than needed\\n   - The JOIN operation is unnecessarily complex\\n\\n## Potential Solutions\\n\\n1. **Add database indexes**:\\n   - Create an index on the user_id column\\n   - Create a composite index on (created_at, status)\\n\\n2. **Optimize the query**:\\n   - Select only necessary columns\\n   - Rewrite the JOIN using a subquery\\n   - Add LIMIT clause for pagination\\n\\n3. **Add caching layer**:\\n   - Cache frequent queries using Redis\\n   - Implement cache invalidation strategy\\n\\nAfter weighing the options, solution #2 seems to be the simplest to implement with the highest impact.\"\n}\n```\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| thought | string | Yes | Your detailed thoughts, analysis or reasoning process |\n\n**Returns:**\nYour thoughts formatted as markdown, with a note indicating this was a thinking exercise.\n\nThis tool is useful for thinking through complex problems, brainstorming solutions, or laying out implementation plans without making any actual changes. It's a great way to document your reasoning process, evaluate different approaches, or plan out a multi-step strategy before taking action.\n\n### Code Execution\n\n#### execute_code\n\nExecutes code in various programming languages with safety measures and restrictions.\n\n```json\n{\n    \"language\": \"python\",\n    \"code\": \"print('Hello, World!')\",\n    \"timeout\": 5\n}\n```\n\n**Supported Languages:**\n\n-   Python (python3)\n-   JavaScript (Node.js)\n-   Ruby\n-   PHP\n-   Go\n-   Rust\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| language | string | Yes | Programming language to use |\n| code | string | Yes | Code to execute |\n| timeout | integer | No | Maximum execution time (default: 5s) |\n\n**Requirements:**\n\n-   Respective language runtimes must be installed\n-   Commands must be available in system PATH\n-   Proper permissions for temporary file creation\n\n⚠️ **Security Warning:**\nThis tool executes arbitrary code on your system. Always:\n\n1. Review code thoroughly before execution\n2. Understand the code's purpose and expected outcome\n3. Never execute untrusted code\n4. Be aware of potential system impacts\n5. Monitor execution output\n\n#### execute_shell_script\n\nExecutes shell scripts (bash/sh) with safety measures and restrictions.\n\n```json\n{\n    \"script\": \"echo \\\"Current directory:\\\" && pwd\",\n    \"timeout\": 300\n}\n```\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| script | string | Yes | Shell script to execute |\n| timeout | integer | No | Maximum execution time (default: 300s, max: 600s) |\n\n**Features:**\n\n-   Uses /bin/sh for maximum compatibility across systems\n-   Executes within the allowed directory\n-   Separate stdout and stderr output\n-   Proper error handling and timeout controls\n\n⚠️ **Security Warning:**\nThis tool executes arbitrary shell commands on your system. Always:\n\n1. Review the script thoroughly before execution\n2. Understand the script's purpose and expected outcome\n3. Never execute untrusted scripts\n4. Be aware of potential system impacts\n5. Monitor execution output\n\n### Todo Tools\n\nThe todo tools provide sequential task management capabilities for workspace-first development workflows. Tasks are executed in order without priority systems, ensuring structured progress through development phases.\n\n#### todo_read\n\nRead the current todo list for the workspace.\n\n```json\n{}\n```\n\n**Returns:**\n```json\n{\n  \"todos\": [\n    {\n      \"id\": \"abc123\",\n      \"content\": \"Implement user authentication\",\n      \"status\": \"in_progress\",\n      \"metadata\": {\n        \"custom_key\": \"custom_value\"\n      },\n      \"created_at\": \"2023-10-01T10:00:00Z\",\n      \"updated_at\": \"2023-10-01T11:30:00Z\"\n    }\n  ],\n  \"count\": 1,\n  \"workspace\": \"/path/to/workspace\"\n}\n```\n\n#### todo_write\n\nReplace the entire todo list for sequential execution workflow. Tasks are executed in array order, building upon previous work.\n\n```json\n{\n  \"todos\": [\n    {\n      \"id\": \"task1\",\n      \"content\": \"Set up database schema\",\n      \"status\": \"pending\"\n    },\n    {\n      \"id\": \"task2\", \n      \"content\": \"Create API endpoints\",\n      \"status\": \"pending\",\n      \"metadata\": {\n        \"custom_key\": \"custom_value\"\n      }\n    }\n  ]\n}\n```\n\n**Sequential Workflow Rules:**\n- Each todo must have unique ID\n- Only one task can be \"in_progress\" at a time (sequential execution)\n- Tasks execute in array order - no priority system\n- Required fields: id, content, status\n- Status values: \"pending\", \"in_progress\", \"completed\"\n- Workspace-first: Todo management is mandatory for all workspace operations\n\n#### todo_update\n\nUpdate a specific todo item by ID for sequential workflow progression.\n\n```json\n{\n  \"todo_id\": \"task1\",\n  \"updates\": {\n    \"status\": \"in_progress\",\n    \"metadata\": {\n        \"new_key\": \"new_value\"\n    }\n  }\n}\n```\n\n**Returns:**\n```json\n{\n  \"success\": true,\n  \"updated_todo\": {\n    \"id\": \"task1\",\n    \"content\": \"Set up database schema\",\n    \"status\": \"in_progress\",\n    \"updated_at\": \"2023-10-01T12:00:00Z\",\n    \"metadata\": {\n        \"new_key\": \"new_value\"\n    }\n  },\n  \"counts\": {\n    \"pending\": 1,\n    \"in_progress\": 1,\n    \"completed\": 0,\n    \"total\": 2\n  },\n  \"workspace\": \"/path/to/workspace\"\n}\n```\n\nThe todo system maintains separate sequential task lists for each workspace, enforcing mandatory usage for all workspace operations. Tasks execute in order, building upon previous work without priority-based scheduling.\n\n## Configuration\n\nConfiguration file: `~/.skydeckai_code/config.json`\n\n```json\n{\n    \"allowed_directory\": \"/path/to/workspace\"\n}\n```\n\n## Debugging\n\nUse MCP Inspector for debugging:\n\n```bash\nnpx @modelcontextprotocol/inspector run\n```\n\n## Security\n\n-   Operations restricted to configured allowed directory\n-   Path traversal prevention\n-   File permission preservation\n-   Safe operation handling\n\n## Upcoming Features\n\n-   GitHub tools:\n    -   PR Description Generator\n    -   Code Review\n    -   Actions Manager\n-   Pivotal Tracker tools:\n    -   Story Generator\n    -   Story Manager\n\n## Development Status\n\nCurrently in active development. Features and API may change.\n\n## License\n\nApache License 2.0 - see [LICENSE](LICENSE)\n\n[![Star History Chart](https://api.star-history.com/svg?repos=skydeckai/skydeckai-code&type=Date)](https://www.star-history.com/#skydeckai/skydeckai-code&Date)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "skydeckai",
        "programming",
        "code",
        "skydeckai code",
        "management skydeckai",
        "skydeckai skydeckai"
      ],
      "category": "file-management"
    },
    "sunjoonkim--fclones": {
      "owner": "sunjoonkim",
      "name": "fclones",
      "url": "https://github.com/sunjoonkim/fclones",
      "imageUrl": "/freedevtools/mcp/pfp/sunjoonkim.webp",
      "description": "Efficiently find and remove duplicate files using a command line utility with advanced filtering and flexible removal options. It integrates with Unix tools and produces JSON output for easy use and inspection before deletion.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-03-01T07:41:22Z",
      "readme_content": "fclones\n===============================================\n**Efficient duplicate file finder and remover**\n\n[![CircleCI](https://circleci.com/gh/pkolaczk/fclones.svg?style=shield)](https://circleci.com/gh/pkolaczk/fclones)\n[![crates.io](https://img.shields.io/crates/v/fclones.svg)](https://crates.io/crates/fclones)\n[![Documentation](https://docs.rs/fclones/badge.svg)](https://docs.rs/fclones)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nThis is the repo for command line fclones and its core libraries.\nFor the desktop frontend, see [fclones-gui](https://github.com/pkolaczk/fclones-gui).\n\n---\n\n`fclones` is a command line utility that identifies groups of identical files and gets rid \nof the file copies you no longer need. It comes with plenty of configuration options for controlling\nthe search scope and offers many ways of removing duplicates. For maximum flexibility,\nit integrates well with other Unix utilities like `find` and it speaks JSON, so you have a lot\nof control over the search and cleanup process.\n\n`fclones` treats your data seriously. You can inspect and modify the list of duplicate files before removing them.\nThere is also a `--dry-run` option that can tell you exactly what changes on the file system would be made.\n\n`fclones` has been implemented in Rust with a strong focus on high performance on modern hardware. \nIt employs several optimization techniques not present in many other programs. \nIt adapts to the type of the hard drive, orders file operations by physical data placement on HDDs, \nscans directory tree in parallel and uses prefix compression of paths to reduce memory consumption when working \nwith millions of files. It is also friendly to page-cache and does not push out your data out of cache.\nAs a result, `fclones` easily outperforms many other popular duplicate finders by a wide margin \non either SSD or HDD storage.\n\n`fclones` is available on a wide variety of operating systems, but it works best on Linux. \n\n- [Features](#features)\n- [Demo](#demo)\n- [Installation](#installation)\n- [Usage](#usage)\n- [Algorithm](#the-algorithm)\n- [Tuning](#tuning)\n- [Benchmarks](#benchmarks)\n\n## Features\n* Identifying groups of identical files\n  - finding duplicate files\n  - finding files with more than N replicas\n  - finding unique files\n  - finding files with fewer than N replicas\n* Advanced file selection for reducing the amount of data to process\n  - scanning multiple directory roots\n  - can work with a list of files piped directly from standard input\n  - recursive/non-recursive file selection\n  - recursion depth limit\n  - filtering names and paths by extended UNIX globs\n  - filtering names and paths by regular expressions\n  - filtering by min/max file size\n  - proper handling of symlinks and hardlinks\n* Removing redundant data\n  - removing, moving or replacing files with soft or hard links\n  - removing redundant file data using native copy-on-write (reflink) support on some file systems \n  - selecting files for removal by path or name patterns  \n  - prioritizing files to remove by creation, modification, last access time or nesting level\n* High performance\n  - parallel processing capability in all I/O and CPU heavy stages\n  - automatic tuning of parallelism and access strategy based on device type (SSD vs HDD)\n  - low memory footprint thanks to heavily optimized path representation\n  - variety of fast non-cryptographic and cryptographic hash functions up to 512 bits wide\n  - doesn't push data out of the page-cache (Linux-only)\n  - optional persistent caching of file hashes\n  - accurate progress reporting   \n* Variety of output formats for easy further processing of results  \n  - standard text format\n    - groups separated by group headers with file size and hash \n    - one path per line in a group  \n  - optional `fdupes` compatibility (no headers, no indent, groups separated by blank lines)    \n  - machine-readable formats: `CSV`, `JSON`\n\n### Limitations\nCopy-on-write file data deduplication (reflink) is not supported on Windows. \n\nSome optimisations are not available on platforms other than Linux:\n  - ordering of file accesses by physical placement\n  - page-cache drop-behind\n  \n## Demo\nLet's first create some files:\n\n    $ mkdir test\n    $ cd test\n    $ echo foo >foo1.txt\n    $ echo foo >foo2.txt\n    $ echo foo >foo3.txt\n    $ echo bar >bar1.txt\n    $ echo bar >bar2.txt\n\nNow let's identify the duplicates:\n\n    $ fclones group . >dupes.txt\n    [2021-06-05 18:21:33.358] fclones:  info: Started grouping\n    [2021-06-05 18:21:33.738] fclones:  info: Scanned 7 file entries\n    [2021-06-05 18:21:33.738] fclones:  info: Found 5 (20 B) files matching selection criteria\n    [2021-06-05 18:21:33.738] fclones:  info: Found 4 (16 B) candidates after grouping by size\n    [2021-06-05 18:21:33.738] fclones:  info: Found 4 (16 B) candidates after grouping by paths and file identifiers\n    [2021-06-05 18:21:33.739] fclones:  info: Found 3 (12 B) candidates after grouping by prefix\n    [2021-06-05 18:21:33.740] fclones:  info: Found 3 (12 B) candidates after grouping by suffix\n    [2021-06-05 18:21:33.741] fclones:  info: Found 3 (12 B) redundant files\n\n    $ cat dupes.txt\n    # Report by fclones 0.12.0\n    # Timestamp: 2021-06-05 18:21:33.741 +0200\n    # Command: fclones group .\n    # Found 2 file groups\n    # 12 B (12 B) in 3 redundant files can be removed\n    7d6ebf613bf94dfd976d169ff6ae02c3, 4 B (4 B) * 2:\n        /tmp/test/bar1.txt\n        /tmp/test/bar2.txt\n    6109f093b3fd5eb1060989c990d1226f, 4 B (4 B) * 3:\n        /tmp/test/foo1.txt\n        /tmp/test/foo2.txt\n        /tmp/test/foo3.txt\n\nFinally we can replace the duplicates by soft links:\n\n    $ fclones link --soft <dupes.txt \n    [2021-06-05 18:25:42.488] fclones:  info: Started deduplicating\n    [2021-06-05 18:25:42.493] fclones:  info: Processed 3 files and reclaimed 12 B space\n\n    $ ls -l\n    total 12\n    -rw-rw-r-- 1 pkolaczk pkolaczk   4 cze  5 18:19 bar1.txt\n    lrwxrwxrwx 1 pkolaczk pkolaczk  18 cze  5 18:25 bar2.txt -> /tmp/test/bar1.txt\n    -rw-rw-r-- 1 pkolaczk pkolaczk 382 cze  5 18:21 dupes.txt\n    -rw-rw-r-- 1 pkolaczk pkolaczk   4 cze  5 18:19 foo1.txt\n    lrwxrwxrwx 1 pkolaczk pkolaczk  18 cze  5 18:25 foo2.txt -> /tmp/test/foo1.txt\n    lrwxrwxrwx 1 pkolaczk pkolaczk  18 cze  5 18:25 foo3.txt -> /tmp/test/foo1.txt\n\n## Installation\nThe code has been thoroughly tested on Ubuntu Linux 21.10.\nOther systems like Windows or Mac OS X and other architectures may work. \nHelp test and/or port to other platforms is welcome.\nPlease report successes as well as failures.      \n\n### Official Packages\n[Snap store](https://snapcraft.io/fclones) (Linux):\n\n    snap install fclones\n\n[Homebrew](https://formulae.brew.sh/formula/fclones) (macOS and Linux)\n\n    brew install fclones\n\nInstallation packages and binaries for some platforms \nare also attached directly to [Releases](https://github.com/pkolaczk/fclones/releases).\n\n### Third-party Packages\n* [Arch Linux](https://aur.archlinux.org/packages/fclones/) \n* [Alpine Linux](https://pkgs.alpinelinux.org/package/edge/testing/x86_64/fclones)\n* [NixOS](https://search.nixos.org/packages?channel=unstable&show=fclones&from=0&size=50&sort=relevance&type=packages&query=fclones)\n\n### Building from Source \n[Install Rust Toolchain](https://www.rust-lang.org/tools/install) and then run:\n\n    cargo install fclones\n\nThe build will write the binary to `.cargo/bin/fclones`. \n\n## Usage\n\n`fclones` offers separate commands for finding and removing files. This way, you can inspect\nthe list of found files before applying any modifications to the file system. \n\n  - `group` – identifies groups of identical files and prints them to the standard output\n  - `remove` – removes redundant files earlier identified by `group`\n  - `link` – replaces redundant files with links (default: hard links)\n  - `dedupe` – does not remove any files, but deduplicates file data by using native copy-on-write capabilities of the file system (reflink) \n\n### Finding Files\n\nFind duplicate, unique, under-replicated or over-replicated files in the current directory, \nincluding subdirectories:\n\n    fclones group .\n    fclones group . --unique \n    fclones group . --rf-under 3\n    fclones group . --rf-over 3\n\nYou can search in multiple directories:\n\n    fclones group dir1 dir2 dir3\n\nBy default, hidden files and files matching patterns listed in `.gitignore` and `.fdignore` are\nignored. To search all files, use:\n\n    fclones group --no-ignore --hidden dir\n\nLimit the recursion depth:\n    \n    fclones group . --depth 1   # scan only files in the current dir, skip subdirs\n    fclones group * --depth 0   # similar as above in shells that expand `*` \n\nCaution: Versions up to 0.10 did not descend into directories by default.\nIn those old versions, add `-R` flag to enable recursive directory walking.\n\nFinding files that match across two directory trees, without matching identical files\nwithin each tree:\n\n    fclones group --isolate dir1 dir2\n\nFinding duplicate files of size at least 100 MB: \n\n    fclones group . -s 100M\n\nFilter by file name or path pattern:\n\n    fclones group . --name '*.jpg' '*.png' \n                \nRun `fclones` on files selected by `find` (note: this is likely slower than built-in filtering):\n\n    find . -name '*.c' | fclones group --stdin --depth 0\n\nFollow symbolic links, but don't escape out of the home folder:\n\n    fclones group . -L --path '/home/**'\n    \nExclude a part of the directory tree from the scan:\n\n    fclones group / --exclude '/dev/**' '/proc/**'\n\n### Removing Files\nTo remove duplicate files, move them to a different place or replace them by links, \nyou need to send the report produced by `fclones group` to the standard input \nof `fclones remove`, `fclones move` or `fclones link` command.\nThe report format is detected automatically. Currently, `default` and `json` report \nformats are supported. \n\nAssuming the list of duplicates has been saved in file `dupes.txt`, the following commands would remove\nthe redundant files: \n\n    fclones link <dupes.txt             # replace with hard links\n    fclones link -s <dupes.txt          # replace with symbolic links\n    fclones move target_dir <dupes.txt  # move to target_dir  \n    fclones remove <dupes.txt           # remove totally\n    \n\nIf you prefer to do everything at once without storing the list of groups in a file, you can pipe:\n\n    fclones group . | fclones link\n\nTo select the number of files to preserve, use the `-n`/`--rf-over` option.\nBy default, it is set to the value used when running `group` (which is 1 if it wasn't set explicitly). \nTo leave 2 replicas in each group, run: \n\n    fclones remove -n 2 <dupes.txt\n\nBy default, `fclones` follows the order of files specified in the input file. It keeps the files given at the beginning\nof each list, and removes / replaces the files given at the end of each list. It is possible to change that \norder by `--priority` option, for example:\n\n    fclones remove --priority newest <dupes.txt        # remove the newest replicas\n    fclones remove --priority oldest <dupes.txt        # remove the oldest replicas\n\nFor more priority options, see `fclones remove --help`.\n\nIt is also possible to restrict removing files to only files with names or paths matching a pattern:\n\n    fclones remove --name '*.jpg' <dupes.txt       # remove only jpg files\n    fclones remove --path '/trash/**' <dupes.txt   # remove only files in the /trash folder\n\nIf it is easier to specify a pattern for files which you do *not* want to remove, then use one of `keep` options:\n\n    fclones remove --keep-name '*.mov' <dupes.txt           # never remove mov files\n    fclones remove --keep-path '/important/**' <dupes.txt   # never remove files in the /important folder\n\nTo make sure you're not going to remove wrong files accidentally, use `--dry-run` option.\nThis option prints all the commands that would be executed, but it doesn't actually execute them:\n\n    fclones link --soft <dupes.txt --dry-run 2>/dev/null\n\n    mv /tmp/test/bar2.txt /tmp/test/bar2.txt.jkXswbsDxhqItPeOfCXsWN4d\n    ln -s /tmp/test/bar1.txt /tmp/test/bar2.txt\n    rm /tmp/test/bar2.txt.jkXswbsDxhqItPeOfCXsWN4d\n    mv /tmp/test/foo2.txt /tmp/test/foo2.txt.ze1hvhNjfre618TkRGUxJNzx\n    ln -s /tmp/test/foo1.txt /tmp/test/foo2.txt\n    rm /tmp/test/foo2.txt.ze1hvhNjfre618TkRGUxJNzx\n    mv /tmp/test/foo3.txt /tmp/test/foo3.txt.ttLAWO6YckczL1LXEsHfcEau\n    ln -s /tmp/test/foo1.txt /tmp/test/foo3.txt\n    rm /tmp/test/foo3.txt.ttLAWO6YckczL1LXEsHfcEau\n\n### Handling links\nFiles linked by symbolic links or hard links are not treated as duplicates.\nYou can change this behavior by setting the following flags:\n * When `--isolate` is set:\n   * links residing in different directory trees are treated as duplicates, \n   * links residing in the same directory tree are counted as a single replica.\n * When `--match-links` is set, fclones treats all linked files as duplicates.\n\nConsider the following directory structure, where all files are hard links sharing the same content:\n\n    dir1:\n      - file1\n      - file2\n    dir2:\n      - file3\n      - file4\n      \nBecause all files are essentially the same data, they will end up in the same file group, but\nthe actual number of replicas present in that file group will differ depending on the flags given:\n\n| Command                                 | Number of replicas | Group reported   | Files to remove     |\n|-----------------------------------------|--------------------|------------------|---------------------|\n| `fclones group dir1 dir2`               | 1                  | No               |                     |\n| `fclones group dir1 dir2 --isolate`     | 2                  | Yes              | file3, file4        | \n| `fclones group dir1 dir2 --match-links` | 4                  | Yes              | file2, file3, file4 |\n\n#### Symbolic links\nThe `group` command ignores symbolic links to files unless at least `--follow-links` \nor `--symbolic-links` flag is set. If only `--follow-links` is set, symbolic links to files\nare followed and resolved to their targets. \nIf `--symbolic-links` is set, symbolic links to files are not followed, \nbut treated as hard links and potentially reported in the output report.\nWhen both `--symbolic-links` and `--follow-links` are set, symbolic links to directories are followed,\nbut symbolic links to files are treated as hard links.\n\n**Caution**: Using `--match-links` together with `--symbolic-links` is very dangerous. \nIt is easy to end up deleting the only regular file you have, and to be left\nwith a bunch of orphan symbolic links. \n\n### Preprocessing Files\nUse `--transform` option to safely transform files by an external command.\nBy default, the transformation happens on a copy of file data, to avoid accidental data loss.\nNote that this option may significantly slow down processing of a huge number of files, \nbecause it invokes the external program for each file.\n\nThe following command will strip exif before matching duplicate jpg images:\n\n    fclones group . --name '*.jpg' -i --transform 'exiv2 -d a $IN' --in-place     \n    \n### Other    \n    \nList more options:\n    \n    fclones [command] -h      # short help\n    fclones [command] --help  # detailed help\n\n### Path Globbing\n`fclones` understands a subset of Bash Extended Globbing.\nThe following wildcards can be used:\n- `?`         matches any character except the directory separator\n- `[a-z]`     matches one of the characters or character ranges given in the square brackets\n- `[!a-z]`    matches any character that is not given in the square brackets\n- `*`         matches any sequence of characters except the directory separator\n- `**`        matches any sequence of characters including the directory separator\n- `{a,b}`     matches exactly one pattern from the comma-separated patterns given inside the curly brackets\n- `@(a|b)`    same as `{a,b}`\n- `?(a|b)`    matches at most one occurrence of the pattern inside the brackets\n- `+(a|b)`    matches at least occurrence of the patterns given inside the brackets\n- `*(a|b)`    matches any number of occurrences of the patterns given inside the brackets\n- `\\`         escapes wildcards on Unix-like systems, e.g. `\\?` would match `?` literally\n- `^`         escapes wildcards on Windows, e.g. `^?` would match `?` literally\n\n#### Caution\n\n* On Unix-like systems, when using globs, one must be very careful to avoid accidental expansion of globs by the shell.\n  In many cases having globs expanded by the shell instead of by `fclones` is not what you want. In such cases, you\n  need to quote the globs:\n    \n      fclones group . --name '*.jpg'       \n       \n* On Windows, the default shell doesn't remove quotes before passing the arguments to the program, \n  therefore you need to pass globs unquoted:\n  \n      fclones group . --name *.jpg\n      \n* On Windows, the default shell doesn't support path globbing, therefore wildcard characters such as * and ? used \n  in paths will be passed literally, and they are likely to create invalid paths. For example, the following \n  command that searches for duplicate files in the current directory in Bash, will likely fail in the default\n  Windows shell:\n  \n      fclones group *\n      \n  If you need path globbing, and your shell does not support it,\n  use the builtin path globbing provided by `--name` or `--path`.     \n                          \n## The Algorithm\nFiles are processed in several stages. Each stage except the last one is parallel, but \nthe previous stage must complete fully before the next one is started.\n1. Scan input files and filter files matching the selection criteria. Walk directories recursively if requested. \n   Follow symbolic links if requested. For files that match the selection criteria, read their size.\n2. Group collected files by size by storing them in a hash-map. Remove groups smaller than the desired lower-bound \n   (default 2). \n3. In each group, remove duplicate files with the same inode id. The same file could be reached through different\n   paths when hardlinks are present. This step can be optionally skipped.\n4. For each remaining file, compute a hash of a tiny block of initial data. Put files with different hashes \n   into separate groups. Prune result groups if needed. \n5. For each remaining file, compute a hash of a tiny block of data at the end of the file. \n   Put files with different hashes into separate groups. Prune small groups if needed.\n6. For each remaining file, compute a hash of the whole contents of the file. Note that for small files\n   we might have already computed a full contents hash in step 4, therefore these files can be safely\n   omitted. Same as in steps 4 and 5, split groups and remove the ones that are too small.\n7. Write report to the stdout.          \n    \nNote that there is no byte-by-byte comparison of files anywhere. All available hash functions are at least \n128-bit wide, and you don't need to worry about hash collisions. At 10<sup>15</sup> files, \nthe probability of collision is 0.000000001 when using a 128-bit hash, \nwithout taking into account the requirement for the files to also match by size.\n\n### Hashes\nYou can select the hash function with `--hash-fn` (default: `metro`).\nNon-cryptographic hashes are much more efficient than cryptographic, \nhowever you probably won't see much difference unless you're reading from a fast SSD or if file data is cached.\n\n| Hash function                                               | Hash width | Cryptographic | \n|-------------------------------------------------------------|------------|---------------|\n| [metro](http://www.jandrewrogers.com/2015/05/27/metrohash/) | 128-bit    | No            |\n| [xxhash3](https://cyan4973.github.io/xxHash/)               | 128-bit    | No            |\n| [blake3](https://github.com/BLAKE3-team/BLAKE3)             | 256-bit    | Yes           |         \n| [sha256](https://en.wikipedia.org/wiki/SHA-2)               | 256-bit    | Yes           | \n| [sha512](https://en.wikipedia.org/wiki/SHA-2)               | 512-bit    | Yes           | \n| [sha3-256](https://en.wikipedia.org/wiki/SHA-3)             | 256-bit    | Yes           |\n| [sha3-512](https://en.wikipedia.org/wiki/SHA-3)             | 512-bit    | Yes           |\n\n## Tuning\nThis section provides hints on getting the best performance from `fclones`.\n\n### Incremental Mode\nIf you expect to run `fclones group` more than once on the same set of files, \nyou might benefit from turning on the hash cache by adding the `--cache` flag:\n\n```\nfclones group --cache <dir>\n```\n\nCaching can dramatically improve grouping speed on subsequent runs of `fclones` at the expense of some additional\nstorage space needed for the cache. Caching also allows for resuming work quickly after interruption, so it is\nrecommended if you plan to run `fclones` on huge data sets.\n\nThe cache works as follows:\n- Each newly computed file hash is persisted in the cache together with some metadata of the file such as \n  its modification timestamp and length.\n- Whenever a file hash needs to be computed, it is first looked up in the cache. \n  The cached hash is used if the current metadata of the file strictly matches the metadata stored in the cache.  \n\nCached hashes are not invalidated by file moves because files are identified \nby their internal identifiers (inode identifiers on Unix), not by path names, and moves/renames typically preserve \nthose.   \n\nBeware that caching relies on file metadata to detect changes in file contents.\nThis might introduce some inaccuracies to the grouping process if a file modification timestamp and file length\nis not updated immediately whenever a file gets modified. \nMost file systems update the timestamps automatically on closing the file. Therefore, changed files that are held \nopen for a long time (e.g. by database systems) might be not noticed by `fclones group` and might use stale \ncached values.\n\nThe cache database is located in the standard cache directory of the user account. Typically, those are: \n* Linux: `$HOME/.cache/fclones`\n* macOS: `$HOME/Library/Caches/fclones`\n* Windows: `$HOME/AppData/Local/fclones`\n\n### Configuring Parallelism\nThe `--threads` parameter controls the sizes of the internal thread-pool(s). \nThis can be used to reduce parallelism level when you don't want `fclones` to \nimpact performance of your system too much, e.g. when you need to do some other work\nat the same time. We recommended reducing the parallelism level if you need\nto reduce memory usage. \n\nWhen using `fclones` up to version 0.6.x to deduplicate files of sizes of at least a few MBs each  \non spinning drives (HDD), it is recommended to set `--threads 1`, because accessing big files \nfrom multiple threads on HDD can be much slower than single-threaded access \n(YMMV, this is heavily OS-dependent, 2x-10x performance differences have been reported).\n \nSince version 0.7.0, fclones uses separate per-device thread-pools for final hashing \nand it will automatically tune the level of parallelism, memory buffer sizes and partial hashing sizes \nbased on the device type. These automatic settings can be overridden with `--threads` as well.\n\nThe following options can be passed to `--threads`. The more specific options override the less specific ones.\n- `main:<n>` – sets the size of the main thread-pool used for random I/O: directory tree scanning, \n   file metadata fetching and in-memory sorting/hashing.\n   These operations typically benefit from high parallelism level, even on spinning drives. \n   Unset by default, which means the pool will be configured to use all available CPU cores.\n- `dev:<device>:<r>,<s>` – sets the size of the thread-pool `r` used for random I/O and `s` used for \n   sequential I/O on the block device with the given name. The name of the device is OS-dependent. \n   Note this is not the same as the partition name or mount point.\n- `ssd:<r>,<s>` – sets the sizes of the thread-pools used for I/O on solid-state drives. Unset by default. \n- `hdd:<r>,<s>` – sets the sizes of the thread-pools used for I/O on spinning drives. \n   Defaults to `8,1`\n- `removable:<r>,<s>` –  sets the size of the thread-pools used for I/O \n   on removable devices (e.g. USB sticks). Defaults to `4,1`\n- `unknown:<r>,<s>` –  sets the size of the thread-pools used for I/O on devices of unknown type.\n   Sometimes the device type can't be determined e.g. if it is mounted as NAS.\n   Defaults to `4,1`\n- `default:<r>,<s>` – sets the pool sizes to be used by all unset options\n- `<r>,<s>` - same as `default:<r>,<s>`  \n- `<n>` - same as `default:<n>,<n>`\n\n### Examples\nTo limit the parallelism level for the main thread pool to 1:\n\n    fclones group <paths> --threads main:1  \n  \nTo limit the parallelism level for all I/O access for all SSD devices:\n\n    fclones group <paths> --threads ssd:1 \n\nTo set the parallelism level to the number of cores for random I/O access and to \n2 for sequential I/O access for `/dev/sda` block device:\n\n    fclones group <paths> --threads dev:/dev/sda:0,2 \n    \nMultiple `--threads` options can be given, separated by spaces:\n\n    fclones group <paths> --threads main:16 ssd:4 hdd:1,1     \n    \n    \n## Benchmarks\nDifferent duplicate finders were given a task to find duplicates in a large set of files. \nBefore each run, the system page cache was evicted with `echo 3 > /proc/sys/vm/drop_caches`.\n\n### SSD Benchmark\n- Model: Dell Precision 5520\n- CPU: Intel(R) Xeon(R) CPU E3-1505M v6 @ 3.00GHz\n- RAM: 32 GB\n- Storage: local NVMe SSD 512 GB \n- System: Ubuntu Linux 20.10, kernel 5.8.0-53-generic\n- Task: 1,460,720 paths, 316 GB of data       \n\nProgram                                                |  Version  | Language  | Time              | Peak Memory          \n-------------------------------------------------------|-----------|-----------|------------------:|--------------\nfclones                                                |  0.12.1   | Rust      |  0:34.59          | 266 MB\n[yadf](https://github.com/jRimbault/yadf)              |  0.15.2   | Rust      |  0:59.32          | 329 MB\n[czkawka](https://qarmin.github.io/czkawka/)           |  3.1.0    | Rust      |  2:09.00          | 1.4 GB\n[rmlint](https://github.com/sahib/rmlint)              |  2.9.0    | C, Python |  2:28.43          | 942 MB\n[jdupes](https://github.com/jbruchon/jdupes)           |  1.18.2   | C         |  5:01.91          | 332 MB\n[dupe-krill](https://github.com/kornelski/dupe-krill)  |  1.4.5    | Rust      |  5:09.52          | 706 MB\n[fdupes](https://github.com/adrianlopezroche/fdupes)   |  2.1.1    | C         |  5:46.19          | 342 MB\n[rdfind](https://github.com/pauldreik/rdfind)          |  1.4.1    | C++       |  5:53.07          | 496 MB\n[dupeguru](https://dupeguru.voltaicideas.net/)         |  4.1.1    | Python    |  7:49.89          | 1.4 GB\n[fdupes-java](https://github.com/cbismuth/fdupes-java) |  1.3.1    | Java      |  &gt; 20 minutes  | 4.2 GB    \n\n\n`fdupes-java` did not finish the test. I interrupted it after 20 minutes while\nit was still computing MD5 in stage 2/3. Unfortunately `fdupes-java` doesn't display\na useful progress bar, so it is not possible to estimate how long it would take.\n\n### HDD Benchmark \n- Model: Dell Precision M4600\n- CPU: Intel(R) Core(TM) i7-2760QM CPU @ 2.40GHz\n- RAM: 24 GB\n- System: Mint Linux 19.3, kernel 5.4.0-70-generic\n- Storage: Seagate Momentus 7200 RPM SATA drive, EXT4 filesystem  \n- Task: 51370 paths, 2 GB data, 6811 (471 MB) duplicate files\n\nCommands used:\n\n      /usr/bin/time -v fclones -R <file set root> \n      /usr/bin/time -v jdupes -R -Q <file set root>\n      /usr/bin/time -v fdupes -R <file set root>\n      /usr/bin/time -v rdfind <file set root>\n\nIn this benchmark, the page cache was dropped before each run.\n            \nProgram                                                |  Version  | Language | Threads |  Time           |  Peak Memory\n-------------------------------------------------------|-----------|----------|--------:|----------------:|-------------:\nfclones                                                |  0.9.1    | Rust     | 1       |   0:19.45       |  18.1 MB\n[rdfind](https://github.com/pauldreik/rdfind)          |  1.3.5    | C++      | 1       |   0:33.70       |  18.5 MB\n[yadf](https://github.com/jRimbault/yadf)              |  0.14.1   | Rust     |         |   1:11.69       |  22.9 MB\n[jdupes](https://github.com/jbruchon/jdupes)           |  1.9      | C        | 1       |   1:18.47       |  15.7 MB\n[fdupes](https://github.com/adrianlopezroche/fdupes)   |  1.6.1    | C        | 1       |   1:33.71       |  15.9 MB\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sunjoonkim",
        "fclones",
        "unix",
        "duplicate files",
        "sunjoonkim fclones",
        "remove duplicate"
      ],
      "category": "file-management"
    },
    "sylphxltd--filesystem-mcp": {
      "owner": "sylphxltd",
      "name": "filesystem-mcp",
      "url": "https://github.com/sylphxltd/filesystem-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/sylphxltd.webp",
      "description": "Provides secure access to project files with capabilities for performing batch operations on files and directories. Facilitates efficient workflow management with a comprehensive set of filesystem tools.",
      "stars": 6,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-10T06:26:46Z",
      "readme_content": "# Filesystem MCP Server (@sylphlab/filesystem-mcp)\n\n[![npm version](https://badge.fury.io/js/%40sylphlab%2Ffilesystem-mcp.svg)](https://badge.fury.io/js/%40sylphlab%2Ffilesystem-mcp)\n[![Docker Pulls](https://img.shields.io/docker/pulls/sylphlab/filesystem-mcp.svg)](https://hub.docker.com/r/sylphlab/filesystem-mcp)\n\n<!-- Add other badges like License, Build Status if applicable -->\n<a href=\"https://glama.ai/mcp/servers/@sylphlab/filesystem-mcp\">\n  \n</a>\n\n**Empower your AI agents (like Cline/Claude) with secure, efficient, and token-saving access to your project files.** This Node.js server implements the [Model Context Protocol (MCP)](https://docs.modelcontextprotocol.com/) to provide a robust set of filesystem tools, operating safely within a defined project root directory.\n\n## Installation\n\nThere are several ways to use the Filesystem MCP Server:\n\n**1. Recommended: `npx` (or `bunx`) via MCP Host Configuration**\n\nThe simplest way is via `npx` or `bunx`, configured directly in your MCP host environment (e.g., Roo/Cline's `mcp_settings.json`). This ensures you always use the latest version from npm without needing local installation or Docker.\n\n_Example (`npx`):_\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"@sylphlab/filesystem-mcp\"],\n      \"name\": \"Filesystem (npx)\"\n    }\n  }\n}\n```\n\n_Example (`bunx`):_\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem-mcp\": {\n      \"command\": \"bunx\",\n      \"args\": [\"@sylphlab/filesystem-mcp\"],\n      \"name\": \"Filesystem (bunx)\"\n    }\n  }\n}\n```\n\n**Important:** The server uses its own Current Working Directory (`cwd`) as the project root. Ensure your MCP Host (e.g., Cline/VSCode) is configured to launch the command with the `cwd` set to your active project's root directory.\n\n**2. Docker**\n\nUse the official Docker image for containerized environments.\n\n_Example MCP Host Configuration:_\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem-mcp\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-v\",\n        \"/path/to/your/project:/app\", // Mount your project to /app\n        \"sylphlab/filesystem-mcp:latest\"\n      ],\n      \"name\": \"Filesystem (Docker)\"\n    }\n  }\n}\n```\n\n**Remember to replace `/path/to/your/project` with the correct absolute path.**\n\n**3. Local Build (For Development)**\n\n1.  Clone: `git clone https://github.com/sylphlab/filesystem-mcp.git`\n2.  Install: `cd filesystem-mcp && pnpm install` (Using pnpm now)\n3.  Build: `pnpm run build`\n4.  Configure MCP Host:\n    ```json\n    {\n      \"mcpServers\": {\n        \"filesystem-mcp\": {\n          \"command\": \"node\",\n          \"args\": [\"/path/to/cloned/repo/filesystem-mcp/dist/index.js\"], // Updated build dir\n          \"name\": \"Filesystem (Local Build)\"\n        }\n      }\n    }\n    ```\n    **Note:** Launch the `node` command from the directory you intend as the project root.\n\n## Quick Start\n\nOnce the server is configured in your MCP host (see Installation), your AI agent can immediately start using the filesystem tools.\n\n_Example Agent Interaction (Conceptual):_\n\n```\nAgent: <use_mcp_tool>\n         <server_name>filesystem-mcp</server_name>\n         <tool_name>read_content</tool_name>\n         <arguments>{\"paths\": [\"src/index.ts\"]}</arguments>\n       </use_mcp_tool>\n\nServer Response: (Content of src/index.ts)\n```\n\n## Why Choose This Project?\n\n- **🛡️ Secure & Convenient Project Root Focus:** Operations confined to the project root (`cwd` at launch).\n- **⚡ Optimized & Consolidated Tools:** Batch operations reduce AI-server round trips, saving tokens and latency. Reliable results for each item in a batch.\n- **🚀 Easy Integration:** Quick setup via `npx`/`bunx`.\n- **🐳 Containerized Option:** Available as a Docker image.\n- **🔧 Comprehensive Functionality:** Covers a wide range of filesystem tasks.\n- **✅ Robust Validation:** Uses Zod schemas for argument validation.\n\n## Performance Advantages\n\n_(Placeholder: Add benchmark results and comparisons here, demonstrating advantages over alternative methods like individual shell commands.)_\n\n- **Batch Operations:** Significantly reduces overhead compared to single operations.\n- **Direct API Usage:** More efficient than spawning shell processes for each command.\n- _(Add specific benchmark data when available)_\n\n## Features\n\nThis server equips your AI agent with a powerful and efficient filesystem toolkit:\n\n- 📁 **Explore & Inspect (`list_files`, `stat_items`):** List files/directories (recursive, stats), get detailed status for multiple items.\n- 📄 **Read & Write Content (`read_content`, `write_content`):** Read/write/append multiple files, creates parent directories.\n- ✏️ **Precision Editing & Searching (`edit_file`, `search_files`, `replace_content`):** Surgical edits (insert, replace, delete) across multiple files with indentation preservation and diff output; regex search with context; multi-file search/replace.\n- 🏗️ **Manage Directories (`create_directories`):** Create multiple directories including intermediate parents.\n- 🗑️ **Delete Safely (`delete_items`):** Remove multiple files/directories recursively.\n- ↔️ **Move & Copy (`move_items`, `copy_items`):** Move/rename/copy multiple files/directories.\n- 🔒 **Control Permissions (`chmod_items`, `chown_items`):** Change POSIX permissions and ownership for multiple items.\n\n**Key Benefit:** All tools accepting multiple paths/operations process each item individually and return a detailed status report.\n\n## Design Philosophy\n\n_(Placeholder: Explain the core design principles.)_\n\n- **Security First:** Prioritize preventing access outside the project root.\n- **Efficiency:** Minimize communication overhead and token usage for AI interactions.\n- **Robustness:** Provide detailed results and error reporting for batch operations.\n- **Simplicity:** Offer a clear and consistent API via MCP.\n- **Standard Compliance:** Adhere strictly to the Model Context Protocol.\n\n## Comparison with Other Solutions\n\n_(Placeholder: Objectively compare with alternatives.)_\n\n| Feature/Aspect          | Filesystem MCP Server | Individual Shell Commands (via Agent) | Other Custom Scripts |\n| :---------------------- | :-------------------- | :------------------------------------ | :------------------- |\n| **Security**            | High (Root Confined)  | Low (Agent needs shell access)        | Variable             |\n| **Efficiency (Tokens)** | High (Batching)       | Low (One command per op)              | Variable             |\n| **Latency**             | Low (Direct API)      | High (Shell spawn overhead)           | Variable             |\n| **Batch Operations**    | Yes (Most tools)      | No                                    | Maybe                |\n| **Error Reporting**     | Detailed (Per item)   | Basic (stdout/stderr parsing)         | Variable             |\n| **Setup**               | Easy (npx/Docker)     | Requires secure shell setup           | Custom               |\n\n## Future Plans\n\n_(Placeholder: List upcoming features or improvements.)_\n\n- Explore file watching capabilities.\n- Investigate streaming support for very large files.\n- Enhance performance for specific operations.\n- Add more advanced filtering options for `list_files`.\n\n## Documentation\n\n_(Placeholder: Add link to the full documentation website once available.)_\n\nFull documentation, including detailed API references and examples, will be available at: [Link to Docs Site]\n\n## Contributing\n\nContributions are welcome! Please open an issue or submit a pull request on the [GitHub repository](https://github.com/sylphlab/filesystem-mcp).\n\n## License\n\nThis project is released under the [MIT License](LICENSE).\n\n---\n\n## Development\n\n1. Clone: `git clone https://github.com/sylphlab/filesystem-mcp.git`\n2. Install: `cd filesystem-mcp && pnpm install`\n3. Build: `pnpm run build` (compiles TypeScript to `dist/`)\n4. Watch: `pnpm run dev` (optional, recompiles on save)\n\n## Publishing (via GitHub Actions)\n\nThis repository uses GitHub Actions (`.github/workflows/publish.yml`) to automatically publish the package to [npm](https://www.npmjs.com/package/@sylphlab/filesystem-mcp) and build/push a Docker image to [Docker Hub](https://hub.docker.com/r/sylphlab/filesystem-mcp) on pushes of version tags (`v*.*.*`) to the `main` branch. Requires `NPM_TOKEN`, `DOCKERHUB_USERNAME`, and `DOCKERHUB_TOKEN` secrets configured in the GitHub repository settings.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "sylphxltd",
        "files",
        "sylphxltd filesystem",
        "filesystem mcp",
        "filesystem tools"
      ],
      "category": "file-management"
    },
    "taha-ghadirian--FileManagerMcp": {
      "owner": "taha-ghadirian",
      "name": "FileManagerMcp",
      "url": "https://github.com/taha-ghadirian/FileManagerMcp",
      "imageUrl": "/freedevtools/mcp/pfp/taha-ghadirian.webp",
      "description": "Manage remote FTP files and directories through an intuitive interface, allowing users to upload, download, delete, and organize files recursively.",
      "stars": 9,
      "forks": 0,
      "license": "GNU General Public License v3.0",
      "language": "C#",
      "updated_at": "2025-09-18T18:08:46Z",
      "readme_content": "# File Manager MCP 📂\n\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://github.com/yourusername/FileManagerMcp/graphs/commit-activity)\n[![smithery badge](https://smithery.ai/badge/@taha-ghadirian/filemanagermcp)](https://smithery.ai/server/@taha-ghadirian/filemanagermcp)\n\nA powerful and user-friendly File Manager application that provides a modern interface for managing FTP file operations.\n\n> 🤖 **AI-Powered Development**: This project is a result of vibe coding through AI prompt engineering. The entire codebase was developed by collaborating with AI, showcasing the potential of modern AI-assisted development practices.\n\n## 🚀 Features\n\n- 📁 Browse and manage remote FTP directories\n- ⬆️ Upload files and directories\n- ⬇️ Download files and directories\n- 🗑️ Delete files and directories\n- 📝 Create new directories\n- 🔄 Recursive file operations support\n- 💻 Clean and intuitive user interface\n\n## 🚀 Usage\n\n### Using Smithery Hosted Service (Recommended) \n\n1. Visit [File Manager on smithery](https://smithery.ai/server/@taha-ghadirian/filemanagermcp)\n\n2. Create an account or sign in\n\n3. Connect using your preferred development environment:\n   - Visual Studio Code\n   - Cursor\n   - Any IDE or tool with MCP integration\n\n### Alternative: Local Installation\n\nIf you prefer running the application locally, follow these steps:\n\n1. Make sure you have the [.NET 9.0 SDK](https://dotnet.microsoft.com/en-us/download/dotnet/9.0) installed\n2. Follow the installation steps below to build and run the application\n\n### 🛠️ Build and Run Locally\n\n1. Clone the repository:\n   \n   HTTPS:\n   ```bash\n   git clone https://github.com/taha-ghadirian/FileManagerMcp.git\n   ```\n   \n   SSH:\n   ```bash\n   git clone git@github.com:taha-ghadirian/FileManagerMcp.git\n   ```\n\n   Then navigate to the project directory:\n   ```bash\n   cd FileManagerMcp\n   ```\n\n2. Install dependencies:\n```bash\ndotnet restore\n```\n\n3. Build the project:\n```bash\ndotnet build\n```\n\n4. Run the application in inspector:\n```bash\nnpx @modelcontextprotocol/inspector dotnet run\n```\n\n## 🔧 Configuration\n\nThe application uses environment variables for configuration. Here are the required environment variables:\n\n| Option | Description | Required | Default |\n|----------|-------------|----------|---------|\n| `ftpHost` | FTP server hostname or IP address | Yes | - |\n| `ftpUsername` | FTP account username | Yes | - |\n| `ftpPassword` | FTP account password | Yes | - |\n| `ftpPort` | FTP server port | No | 21 |\n\nYou can set these environment variables in several ways:\n\n1. Setting them inline when running the application:\n   ```bash\n   ftpHost=ftp.example.com ftpUsername=myuser ftpPassword=mypassword npx @modelcontextprotocol/inspector dotnet run\n   ```\n\n⚠️ **Security Note**: Never commit sensitive information like passwords to version control. Always use environment variables or secure secrets management for production deployments.\n\n\n## 🤝 Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the project\n2. Create your feature branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n## 📝 License\n\nThis project is licensed under the GNU General Public License v3.0 - see the [LICENSE](LICENSE) file for details. This means:\n\n- You can freely use, modify, and distribute this software\n- If you modify and distribute this software, you must:\n  - Make your source code available\n  - License your modifications under GPL v3.0\n  - Document your changes\n  - Preserve the original copyright notices\n\n## 📞 Support\n\nIf you have any questions or need support, please open an issue in the GitHub repository.\n\n## ✨ Acknowledgments\n\n- Thanks to all contributors who have helped shape this project\n- Built with .NET and modern best practices\n\n---\n\nMade with ❤️ by Taha Ghadirian",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filemanagermcp",
        "ftp",
        "files",
        "ghadirian filemanagermcp",
        "filemanagermcp manage",
        "ftp files"
      ],
      "category": "file-management"
    },
    "tuki0918--eagle-mcp-server": {
      "owner": "tuki0918",
      "name": "eagle-mcp-server",
      "url": "https://github.com/tuki0918/eagle-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/tuki0918.webp",
      "description": "Integrates with the Eagle app to manage and interact with digital assets through a standardized MCP interface, enabling operations such as folder and item management, metadata retrieval, and media handling.",
      "stars": 3,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-22T11:24:54Z",
      "readme_content": "# Eagle MCP Server (Unofficial)\n\n> [!NOTE]\n> [Official MCP support is planned for Eagle v5 (public beta in Q1 2026)](https://eagle.cool/blog/post/eagle5-teaser)\n\n\n\nA Model Context Protocol (MCP) server for Eagle.\n\n<details>\n\n<summary>Supported file formats:</summary>\n\n- `JPG` / `JPEG`\n- `PNG`\n- `PDF`\n- `SVG`\n- `MP4`\n- `MP3`\n- `FBX`\n- `OBJ`\n- `EPS`\n- `TIF` / `TIFF`\n- `WebP`\n- `BMP`\n- `ICO`\n- `RAW`\n- etc\n\n</details>\n\n- Eagle: https://eagle.cool/<br />\n- Eagle API docs: https://api.eagle.cool/<br />\n\n## Requirements\n\n- Python 3.13\n- [uv](https://docs.astral.sh/uv/)\n\n## Prerequisites\n\nInstall the required dependencies:\n\n```bash\nuv sync\n```\n\n## Usage\n\n1. Launch the [Eagle](https://eagle.cool/) app.\n2. Launch this MCP server by running the following command:\n\n```bash\nuv run main.py\n```\n\n\n## Connecting to the MCP Server using Streamable HTTP\n\nExample config (Cursor editor recommended):\n\n```\n{\n  \"mcpServers\": {\n    \"eagle-mcp-server\": {\n      \"url\": \"http://localhost:8000/mcp\"\n    }\n  }\n}\n```\n\n## Tools\n\n| Supported | Eagle API endpoint | Operation ID | Enabled (default) | Category |\n|:----:|:---------------------------|:-------------------------|:----:|:------------|\n| ✅ | -               | `connect`                |  | MCP         |\n| ✅ | /api/application/info      | `get_application_info`   | ⚫︎ | Application |\n| ✅ | /api/folder/create         | `create_folder`          | ⚫︎ | Folder      |\n| ✅ | /api/folder/rename         | `rename_folder`          |  | Folder      |\n| ✅ | /api/folder/update         | `update_folder`          | ⚫︎ | Folder      |\n| ✅ | /api/folder/list           | `get_folder_list`        | ⚫︎ | Folder      |\n| ✅ | /api/folder/listRecent     | `get_folder_list_recent` |  | Folder      |\n| ✅ | /api/item/addFromURL       | `add_item_from_url`      |  | Item        |\n| ✅ | /api/item/addFromURLs      | `add_items_from_urls`    |  | Item        |\n| ✅ | /api/item/addFromPath      | `add_item_from_path`     | ⚫︎ | Item        |\n| ✅ | /api/item/addFromPaths     | `add_items_from_paths`   |  | Item        |\n| ✅ | /api/item/addBookmark      | `add_bookmark`           |  | Item        |\n| ✅ | /api/item/info             | `get_item_info`          | ⚫︎ | Item        |\n| ✅ | -           | `get_item_source`        | ⚫︎ | Item        |\n| ✅ | /api/item/thumbnail        | `get_item_thumbnail`     |  | Item        |\n| ✅ | /api/item/list             | `get_item_list`          | ⚫︎ | Item        |\n| ✅ | /api/item/moveToTrash      | `move_item_to_trash`     | ⚫︎ | Item        |\n| ✅ | /api/item/refreshPalette   | `refresh_item_palette`   |  | Item        |\n| ✅ | /api/item/refreshThumbnail | `refresh_item_thumbnail` |  | Item        |\n| ✅ | /api/item/update           | `update_item`            | ⚫︎ | Item        |\n| ✅ | /api/library/info          | `get_library_info`       | ⚫︎ | Library     |\n| ✅ | /api/library/history       | `get_library_history`    |  | Library     |\n| ✅ | /api/library/switch        | `switch_library`         |  | Library     |\n| ✅ | /api/library/icon          | `get_library_icon`       |  | Library     |\n\nMCP Server API docs: \n- https://tuki0918.github.io/eagle-mcp-server/\n- http://localhost:8000/redoc\n\n## Enabling Disabled Tools\n\nSome tools are disabled by default (shown as empty cells in the \"Enabled (default)\" column above). To enable these disabled tools:\n\n1. Locate the tool definition in the source code\n2. Remove the `tags=[\"Disabled\"]` line from the tool configuration\n3. Restart the MCP server\n\nThis will make the previously disabled tools available for use.\n\n## Use Cases\n\n### 1) Same Host (Recommended)\n\n```mermaid\nflowchart LR\n\n    subgraph 192.168.1.100\n        direction LR\n        \n        subgraph FileSystem [File System]\n        end\n        subgraph EagleApp [Eagle App<br/>localhost:41595]\n        end\n        subgraph MCPServer [MCP Server<br/>localhost:8000]\n        end\n        subgraph MCPClient [MCP Client]\n        end\n    end\n\n    EagleApp ==> MCPServer e1@==> MCPClient\n    MCPClient e2@==> MCPServer ==> EagleApp\n    EagleApp ==> FileSystem\n    FileSystem ==> EagleApp\n\n    e1@{ animate: true }\n    e2@{ animate: true }\n```\n\n> [!TIP]\n> You have direct access to the filesystem.\n\n### 2) Other Host (MCP Client) + Same Host (MCP Server, Eagle App)\n\n```mermaid\nflowchart LR\n  \n    subgraph 192.168.1.100\n        subgraph FileSystem [File System]\n        end\n        subgraph EagleApp [Eagle App<br/>localhost:41595]\n        end\n        subgraph MCPServer [MCP Server<br/>localhost:8000]\n        end\n    end\n\n    subgraph 192.168.1.xxx\n        subgraph MCPClient [MCP Client]\n        end\n    end\n\n    EagleApp ==> MCPServer e1@==> MCPClient\n    MCPClient e2@==> MCPServer ==> EagleApp\n    EagleApp ==> FileSystem\n    FileSystem ==> EagleApp\n\n    e1@{ animate: true }\n    e2@{ animate: true }\n```\n\n> [!WARNING]\n> You don't have access to the filesystem.\n\n### 3) Other Host\n\n```mermaid\nflowchart LR\n\n    subgraph 192.168.1.100\n        subgraph FileSystem [File System]\n        end\n        subgraph EagleApp [Eagle App<br/>localhost:41595]\n        end\n    end\n\n    subgraph 192.168.1.101\n        subgraph MCPServer [MCP Server<br/>localhost:8000]\n        end\n    end\n\n    subgraph 192.168.1.xxx\n        subgraph MCPClient [MCP Client]\n        end\n    end\n\n    EagleApp ==> MCPServer e1@==> MCPClient\n    MCPClient e2@==> MCPServer ==> EagleApp\n    EagleApp ==> FileSystem\n    FileSystem ==> EagleApp\n\n    e1@{ animate: true }\n    e2@{ animate: true }\n```\n\n> [!WARNING]\n> You don't have access to the filesystem.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "eagle",
        "mcp",
        "server",
        "eagle mcp",
        "integrates eagle",
        "mcp server"
      ],
      "category": "file-management"
    },
    "tuskermanshu--compress-mcp-server": {
      "owner": "tuskermanshu",
      "name": "compress-mcp-server",
      "url": "https://github.com/tuskermanshu/compress-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/tuskermanshu.webp",
      "description": "Provides file compression and decompression services that support multiple formats such as gzip, tar.gz, ZIP, and 7z, ensuring secure and efficient file processing. The server features strict parameter validation, detailed progress reporting, and precise error handling.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-08-26T01:55:01Z",
      "readme_content": "# Compress Files\n\n[![smithery badge](https://smithery.ai/badge/@tuskermanshu/compress-mcp-server)](https://smithery.ai/server/@tuskermanshu/compress-mcp-server)\n\n基于TypeScript和fastmcp框架实现的具有文件压缩和解压功能的MCP服务器。\n\n## 项目概述\n\n本项目使用Model Context Protocol (MCP)技术，结合fastmcp框架，实现一个可以提供文件压缩和解压缩服务的MCP服务器。服务器将能够接收客户端的压缩和解压缩请求，处理文件，并返回结果。\n\n## 技术栈\n\n- TypeScript\n- fastmcp\n- pnpm (包管理)\n- node-zlib (用于gzip压缩功能)\n- tar & tar-stream (用于文件夹压缩/解压)\n- jszip (用于ZIP格式支持)\n- node-7z (用于7z格式支持)\n- zod (用于参数验证)\n\n## 项目特点\n\n- 完全符合MCP规范的工具实现\n- 严格的参数验证和类型检查\n- 详细的进度报告\n- 精确的错误处理\n- 友好的用户反馈\n- 安全的文件处理（防止路径遍历攻击）\n- 多种压缩格式支持\n- 标准化的返回格式\n\n## 架构设计\n\n项目采用模块化、可扩展的架构，基于策略模式和工厂模式，使得添加新的压缩格式变得简单。\n\n### 核心组件\n\n1. **压缩处理器接口 (CompressionHandler)**：\n   - 定义了所有格式处理器必须实现的方法\n   - 包括压缩、解压和内容列表三个主要功能\n   - 提供格式检验和元数据访问方法\n\n2. **格式注册表 (FormatRegistry)**：\n   - 管理所有已注册的格式处理器\n   - 根据格式名称或文件扩展名查找对应处理器\n   - 支持动态注册新的处理器\n\n3. **统一压缩工具 (UnifiedCompressionTool)**：\n   - 提供单一工具入口\n   - 解析参数并路由到相应的处理器实例\n   - 标准化输入和输出\n\n4. **公共工具类 (CompressionUtils)**：\n   - 提供所有处理器共享的通用功能\n   - 处理路径规范化、文件存在检查等\n   - 格式化错误消息和操作结果\n\n### 扩展方式\n\n添加新的压缩格式只需要以下步骤：\n\n1. 创建新的格式处理器类，实现CompressionHandler接口\n2. 在主程序中注册新的处理器\n3. 无需修改统一工具接口或其他组件\n\n例如，添加新的RAR格式支持：\n\n```typescript\n// 1. 创建RAR处理器类\nclass RarHandler implements CompressionHandler {\n  // 实现必要的方法\n}\n\n// 2. 在注册函数中添加\nfunction registerHandlers() {\n  // 现有处理器\n  registry.register('gzip', new GzipHandler());\n  \n  // 添加新的RAR处理器\n  registry.register('rar', new RarHandler());\n}\n```\n\n### 架构优势\n\n1. **关注点分离** - 每个处理器只关心自己的格式实现\n2. **高度可扩展** - 轻松添加新的格式支持\n3. **代码复用** - 共享通用功能，减少重复代码\n4. **维护性好** - 修改一个格式不会影响其他格式\n5. **便于测试** - 可以单独测试每个组件\n\n## 实施步骤\n\n### 1. 项目初始化与环境搭建\n- [x] 创建项目目录\n- [x] 初始化pnpm项目\n- [x] 安装必要依赖(fastmcp, typescript等)\n- [x] 配置TypeScript\n\n### 2. 服务器基础架构设计\n- [x] 创建主服务器文件\n- [x] 配置服务器基本参数\n- [x] 设置服务器启动配置\n\n### 3. 压缩工具功能实现\n- [x] 设计压缩文件工具\n- [x] 实现单文件压缩功能\n- [x] 实现多文件/目录压缩功能\n- [x] 支持多种压缩格式(tar.gz, zip, 7z)\n\n### 4. 解压工具功能实现\n- [x] 设计解压文件工具\n- [x] 实现解压缩功能\n- [x] 添加解压路径选择功能\n\n### 5. 资源管理功能\n- [x] 实现压缩文件预览功能\n- [x] 实现压缩文件内容列表功能\n\n### 6. 用户交互优化\n- [x] 添加进度报告功能\n- [x] 实现错误处理机制\n- [x] 添加安全机制（路径验证等）\n- [x] 实现标准化返回格式\n\n### 7. MCP规范兼容性\n- [x] 更新工具输出格式以符合MCP规范\n- [x] 添加isError标识\n- [x] 标准化content字段\n- [x] 使用类型化的text返回\n\n### 8. 工具架构优化\n- [x] 重构为模块化架构\n- [x] 实现格式处理器接口\n- [x] 创建格式注册表\n- [x] 统一工具接口设计\n\n### 9. 测试与部署\n- [x] 基本功能测试\n- [ ] 编写单元测试\n- [ ] 进行集成测试\n- [ ] 优化性能\n- [ ] 准备部署文档\n\n## 当前进度\n\n目前已完成基本的服务器架构设计和主要功能实现，支持多种压缩格式。最新版本采用模块化、可扩展的架构，便于后续扩展和维护。\n\n### 支持的压缩格式:\n\n1. **gzip格式**：适用于单个文件压缩\n2. **tar.gz格式**：适用于文件夹压缩\n3. **ZIP格式**：通用的压缩格式，支持文件和文件夹\n4. **7z格式**：高压缩率格式，支持文件和文件夹\n\n所有工具都经过全面升级，具有以下功能：\n\n- 严格的参数验证和类型检查（使用zod）\n- 安全的文件路径处理（防止路径遍历攻击）\n- 详细的进度报告（支持实时进度百分比）\n- 精确的错误处理和友好的错误信息\n- 标准化的MCP返回格式\n\n## 目录结构\n\n```\nsrc/\n├── handlers/               # 各种格式的具体处理器实现\n│   ├── gzip-handler.ts     # GZIP格式处理器\n│   ├── tar-gz-handler.ts   # TAR.GZ格式处理器\n│   ├── zip-handler.ts      # ZIP格式处理器\n│   └── 7z-handler.ts       # 7Z格式处理器\n├── interfaces/             # 接口定义\n│   └── compression-handler.ts # 压缩处理器接口\n├── registry/               # 处理器注册表\n│   └── format-registry.ts  # 格式注册表实现\n├── tools/                  # MCP工具定义\n│   ├── unified-compression.ts # 统一压缩工具\n│   └── legacy/             # 旧版工具（保持兼容）\n├── utils/                  # 通用工具类\n│   └── compression-utils.ts # 压缩相关通用功能\n└── index.ts                # 主入口点\n```\n\n## 下一步计划\n\n1. 完成其他格式处理器的实现\n2. 优化压缩和解压性能\n3. 添加更多格式支持（如rar等）\n4. 实现流式处理以支持更大文件\n5. 添加文件加密/解密功能\n6. 编写测试用例\n7. 发布至NPM\n\n## 安装方法\n\n### Installing via Smithery\n\nTo install 压缩功能服务器 for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@tuskermanshu/compress-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @tuskermanshu/compress-mcp-server --client claude\n```\n\n### Manual Installation\n1. 克隆本仓库\n```bash\ngit clone <仓库地址>\ncd zip-mcp-server\n```\n\n2. 安装依赖\n```bash\npnpm install\n```\n\n3. 构建项目\n```bash\npnpm build\n```\n\n4. 运行服务器\n```bash\n# 直接启动\npnpm start\n\n# 开发模式\npnpm dev\n\n# 使用MCP Inspector测试\npnpm inspect\n```\n\n## 可用工具\n\n### 统一压缩工具（推荐使用）\n\n| 工具名称 | 描述 | 主要参数 |\n|---------|------|---------|\n| `compression` | 统一的压缩/解压/列表工具，支持多种格式 | operation, format, sourcePath, outputDirectory, outputFileName, compressionLevel, stripComponents, previewLength |\n\n### 原版独立工具（已弃用）\n\n| 工具名称 | 描述 | 主要参数 |\n|---------|------|---------|\n| `zip` | 压缩单个文件为gzip格式 | sourceFilePath, outputDirectory, outputFileName, compressionLevel |\n| `unzip` | 解压gzip格式的文件 | sourceFilePath, outputDirectory, outputFileName |\n| `list-zip-contents` | 列出压缩文件的内容预览 | sourceFilePath, previewLength |\n| `zip-folder` | 压缩文件夹为tar.gz格式 | sourceFolderPath, outputDirectory, outputFileName, compressionLevel |\n| `unzip-folder` | 解压tar.gz格式的压缩文件夹 | sourceArchivePath, outputDirectory, stripComponents |\n| `zip-archive` | 使用ZIP格式压缩文件或文件夹 | sourcePath, outputDirectory, outputFileName, compressionLevel |\n| `7z-archive` | 使用7z格式压缩文件或文件夹 | sourcePath, outputDirectory, outputFileName, compressionLevel |\n\n## 支持的压缩格式\n\n| 格式 | 特点 | 适用场景 |\n|------|------|---------|\n| gzip (.gz) | 单文件压缩，速度快 | 单个文本文件，日志文件等 |\n| tar.gz | 保留目录结构，Unix/Linux常用 | 文件夹压缩，特别是在Unix/Linux系统 |\n| ZIP (.zip) | 通用格式，兼容性好 | 跨平台场景，需要分享给Windows用户 |\n| 7z (.7z) | 高压缩比 | 大文件压缩，需要更高压缩率 |\n\n## 统一压缩工具详细说明\n\n新版本采用统一的压缩工具接口，提供一致的用户体验和更简单的接口。\n\n### compression (统一压缩工具)\n\n一站式工具，支持多种压缩格式和操作，包括压缩、解压和查看文件内容。\n\n参数：\n- `operation`: 操作类型（必需）\n  - `compress`: 压缩文件或文件夹\n  - `decompress`: 解压文件\n  - `list`: 列出压缩文件内容\n- `format`: 压缩格式（必需）\n  - `gzip`: 单文件压缩格式\n  - `tar.gz`: 文件夹压缩格式\n  - `zip`: 通用ZIP压缩格式\n  - `7z`: 高压缩比7z格式\n- `sourcePath`: 源文件或文件夹路径（必需）\n- `outputDirectory`: 输出目录，默认为源文件/文件夹所在目录\n- `outputFileName`: 输出文件名，默认基于源名称和格式自动生成\n- `compressionLevel`: 压缩级别(1-9)，默认为6\n- `stripComponents`: 解压时忽略的目录层级数量（仅用于解压tar.gz）\n- `previewLength`: 列出内容时的预览长度（字节数），默认为1000\n\n## 扩展指南\n\n### 添加新的压缩格式\n\n1. 在`src/handlers`目录下创建新的处理器类文件，例如`rar-handler.ts`\n2. 实现`CompressionHandler`接口的所有方法\n3. 在`src/index.ts`中的`registerHandlers`函数中注册新的处理器\n\n```typescript\n// src/handlers/rar-handler.ts\nexport class RarHandler implements CompressionHandler {\n  // 实现所有必要的接口方法\n}\n\n// src/index.ts\nfunction registerHandlers() {\n  // ...其他处理器\n  registry.register('rar', new RarHandler());\n}\n```\n\n不需要修改任何其他代码，统一工具会自动支持新的格式。\n\n## 使用示例\n\n使用Claude或其他支持MCP的工具连接到本服务器后，可以使用以下示例命令：\n\n### 使用统一工具压缩文件(gzip):\n```\ncompression工具可以处理多种压缩格式，例如:\n{\n  \"operation\": \"compress\",\n  \"format\": \"gzip\",\n  \"sourcePath\": \"/path/to/file.txt\",\n  \"compressionLevel\": 6\n}\n```\n\n### 使用统一工具压缩文件夹(tar.gz):\n```\ncompression工具可以处理文件夹压缩:\n{\n  \"operation\": \"compress\",\n  \"format\": \"tar.gz\",\n  \"sourcePath\": \"/path/to/folder\",\n  \"compressionLevel\": 9\n}\n```\n\n### 使用统一工具解压ZIP文件:\n```\ncompression工具可以解压多种格式:\n{\n  \"operation\": \"decompress\",\n  \"format\": \"zip\",\n  \"sourcePath\": \"/path/to/archive.zip\",\n  \"outputDirectory\": \"/path/to/output\"\n}\n```\n\n### 使用统一工具查看7z文件内容:\n```\ncompression工具可以列出压缩文件内容:\n{\n  \"operation\": \"list\",\n  \"format\": \"7z\",\n  \"sourcePath\": \"/path/to/archive.7z\"\n}\n```\n\n## 版本历史\n\n### v2.1.0\n- 重构为模块化、可扩展架构\n- 实现格式处理器接口设计\n- 创建格式注册表\n- 改进错误处理和进度报告\n\n### v2.0.0\n- 重构为统一压缩工具接口\n- 支持一致的参数结构\n- 改进错误处理和进度报告\n\n### v1.0.0\n- 初始版本\n- 支持多种独立的压缩和解压工具\n\n## 安全说明\n\n本项目实现了多种安全机制：\n\n1. **路径验证** - 防止路径遍历攻击，确保用户不能访问系统上的任意文件\n2. **参数验证** - 使用zod库进行严格的输入验证\n3. **错误处理** - 捕获所有可能的错误并提供友好的提示，不泄露系统信息\n4. **文件名安全检查** - 确保文件名不包含路径分隔符\n\n## 贡献指南\n\n欢迎对本项目做出贡献！请fork项目，创建分支，提交变更后发起pull request。\n\n## 许可证\n\nMIT许可证 ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gzip",
        "compression",
        "compress",
        "compress mcp",
        "file compression",
        "formats gzip"
      ],
      "category": "file-management"
    },
    "vini1994--mcp": {
      "owner": "vini1994",
      "name": "mcp",
      "url": "https://github.com/vini1994/mcp",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Manage files on remote FTP, SFTP, and SSH servers, enabling browsing, uploading, downloading, and modifying files and directories seamlessly. Supports multiple simultaneous connections for efficient server management.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ftp",
        "sftp",
        "mcp",
        "remote ftp",
        "ftp sftp",
        "files remote"
      ],
      "category": "file-management"
    },
    "w-jeon--mcp-gdrive": {
      "owner": "w-jeon",
      "name": "mcp-gdrive",
      "url": "https://github.com/w-jeon/mcp-gdrive",
      "imageUrl": "/freedevtools/mcp/pfp/w-jeon.webp",
      "description": "Integrates with Google Drive to enable the listing, reading, and searching of files, supporting various file types and converting Google Workspace documents into usable formats. Facilitates seamless access to file management features within applications.",
      "stars": 0,
      "forks": 3,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-12T04:07:04Z",
      "readme_content": "# Google Drive server\n\nThis MCP server integrates with Google Drive to allow listing, reading, and searching over files.\n\n## Components\n\n### Tools\n\n- **search**\n  - Search for files in Google Drive\n  - Input: `query` (string): Search query\n  - Returns file names and MIME types of matching files\n\n### Resources\n\nThe server provides access to Google Drive files:\n\n- **Files** (`gdrive:///<file_id>`)\n  - Supports all file types\n  - Google Workspace files are automatically exported:\n    - Docs → Markdown\n    - Sheets → CSV\n    - Presentations → Plain text\n    - Drawings → PNG\n  - Other files are provided in their native format\n\n## Getting started\n\n1. [Create a new Google Cloud project](https://console.cloud.google.com/projectcreate)\n2. [Enable the Google Drive API](https://console.cloud.google.com/workspace-api/products)\n3. [Configure an OAuth consent screen](https://console.cloud.google.com/apis/credentials/consent) (\"internal\" is fine for testing)\n4. Add OAuth scope `https://www.googleapis.com/auth/drive.readonly`\n5. [Create an OAuth Client ID](https://console.cloud.google.com/apis/credentials/oauthclient) for application type \"Desktop App\"\n6. Download the JSON file of your client's OAuth keys\n7. Rename the key file to `gcp-oauth.keys.json` and place into the root of this repo (i.e. `servers/gcp-oauth.keys.json`)\n\nMake sure to build the server with either `npm run build` or `npm run watch`.\n\n### Authentication\n\nTo authenticate and save credentials:\n\n1. Run the server with the `auth` argument: `node ./dist auth`\n2. This will open an authentication flow in your system browser\n3. Complete the authentication process\n4. Credentials will be saved in the root of this repo (i.e. `servers/.gdrive-server-credentials.json`)\n\n### Usage with Desktop App\n\nTo integrate this server with the desktop app, add the following to your app's server configuration:\n\n#### Docker\n\nAuthentication:\n\nAssuming you have completed setting up the OAuth application on Google Cloud, you can now auth the server with the following command, replacing `/path/to/gcp-oauth.keys.json` with the path to your OAuth keys file:\n\n```bash\ndocker run -i --rm --mount type=bind,source=/path/to/gcp-oauth.keys.json,target=/gcp-oauth.keys.json -v mcp-gdrive:/gdrive-server -e GDRIVE_OAUTH_PATH=/gcp-oauth.keys.json -e \"GDRIVE_CREDENTIALS_PATH=/gdrive-server/credentials.json\" -p 3000:3000 mcp/gdrive auth\n```\n\nThe command will print the URL to open in your browser. Open this URL in your browser and complete the authentication process. The credentials will be saved in the `mcp-gdrive` volume.\n\nOnce authenticated, you can use the server in your app's server configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"gdrive\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"-v\", \"mcp-gdrive:/gdrive-server\", \"-e\", \"GDRIVE_CREDENTIALS_PATH=/gdrive-server/credentials.json\", \"mcp/gdrive\"]\n    }\n  }\n}\n```\n\n#### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"gdrive\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-gdrive\"\n      ]\n    }\n  }\n}\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gdrive",
        "files",
        "documents",
        "google drive",
        "gdrive integrates",
        "mcp gdrive"
      ],
      "category": "file-management"
    },
    "webconsulting--mcp-server-wsl-filesystem": {
      "owner": "webconsulting",
      "name": "mcp-server-wsl-filesystem",
      "url": "https://github.com/webconsulting/mcp-server-wsl-filesystem",
      "imageUrl": "/freedevtools/mcp/pfp/webconsulting.webp",
      "description": "Facilitates efficient filesystem operations within Windows Subsystem for Linux (WSL) environments, enabling access, reading, writing, and management of files and directories across multiple WSL distributions. Optimizes file listing and search tasks, particularly in performance-sensitive applications.",
      "stars": 10,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-12T09:12:32Z",
      "readme_content": "> ⚠️ **IMPORTANT INFORMATION:**  \n> The original [Filesystem MCP Server](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem) can already access WSL files by simply using the network path `\\\\wsl.localhost\\DistributionName` as a parameter in the configuration.  \n> Example:\n> \n> ```json\n> {\n>   \"mcpServers\": {\n>     \"filesystem\": {\n>       \"command\": \"npx\",\n>       \"args\": [\n>         \"-y\",\n>         \"@modelcontextprotocol/server-filesystem\",\n>         \"\\\\\\\\wsl.localhost\\\\Debian\",\n>         \"C:\\\\path\\\\to\\\\other\\\\allowed\\\\dir\"\n>       ]\n>     }\n>   }\n> }\n> ```\n>\n> However, this project offers an **alternative implementation specifically optimized for WSL Linux distributions**.\n>\n> While the official server works by recursively walking directories using Node.js’s `fs` module, this implementation leverages **native Linux commands inside WSL** (such as `find`, `grep`, etc.), making **file listing and content search operations significantly faster**.\n>\n> This can be especially useful when dealing with large directory trees or when search performance is critical.\n>\n> So while the native network path may be simpler for many use cases, this project remains **a valuable solution** for WSL users looking for **better performance** or more **custom control** over the indexing and searching logic.\n\n---\n\n# Filesystem MCP Server for WSL\n\n[![npm version](https://img.shields.io/npm/v/mcp-server-wsl-filesystem.svg)](https://www.npmjs.com/package/mcp-server-wsl-filesystem)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nNode.js server implementing the Model Context Protocol (MCP), specifically designed for filesystem operations in Windows Subsystem for Linux (WSL).  \nThis project is a fork of the original [Filesystem MCP Server](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem) but completely reimagined for WSL environments.  \nUnlike the original project, which handles generic file operations, this version focuses exclusively on seamless interaction between Windows and Linux distributions under WSL.  \nBoth projects are compatible and can run in parallel on the same system.\n\n## Features\n\n- Access any WSL distribution from Windows\n- Read/write files in WSL from Windows host\n- Create/list/delete directories in WSL\n- Move files/directories across WSL filesystem\n- Search files within WSL \n- Get file metadata from the WSL filesystem\n- Support for multiple WSL distributions\n\n**Note**: The server only allows operations within directories specified via `args`.\n\n---\n\n## API\n\n### Resources\n\n- `wsl -d <distrib>`: Command for operations on WSL distributions\n\n### Tools\n\n- **read_file**\n  - Read complete contents of a file from WSL\n  - Input: `path` (string)\n  - Reads content as UTF-8 text\n\n- **read_file_by_parts**\n  - Read large files in parts of approximately 95,000 characters\n  - Inputs:\n    - `path` (string)\n    - `part_number` (positive integer: 1, 2, 3, etc.)\n  - Features:\n    - Part 1 starts from the beginning of the file\n    - Subsequent parts align to line boundaries (max 300 character adjustment)\n    - Returns error with actual file size if requested part doesn't exist\n    - Useful for files too large to read in one operation\n\n- **read_multiple_files**\n  - Read multiple files simultaneously from WSL\n  - Input: `paths` (string[])\n  - Failed reads won't stop the entire operation\n\n- **write_file**\n  - Create or overwrite a file in WSL (use with caution)\n  - Inputs:\n    - `path` (string)\n    - `content` (string)\n\n- **edit_file**\n  - Selective edits with advanced pattern matching and formatting\n  - Inputs:\n    - `path` (string)\n    - `edits` (array of `{ oldText, newText }`)\n    - `dryRun` (boolean, optional)\n  - Features:\n    - Multi-line matching\n    - Indentation preservation\n    - Git-style diff preview\n    - Non-destructive dry run mode\n\n- **create_directory**\n  - Create or ensure the existence of a directory in WSL\n  - Input: `path` (string)\n\n- **list_directory**\n  - List directory contents with `[FILE]` or `[DIR]` prefixes\n  - Input: `path` (string)\n\n- **directory_tree**\n  - Recursive JSON tree view of contents\n  - Input: `path` (string)\n\n- **move_file**\n  - Move or rename files/directories\n  - Inputs:\n    - `source` (string)\n    - `destination` (string)\n\n- **search_files**\n  - Recursively search by name\n  - Inputs:\n    - `path` (string)\n    - `pattern` (string)\n    - `excludePatterns` (string[], optional)\n\n- **search_in_files**\n  - Search for text patterns within files recursively\n  - Inputs:\n    - `path` (string) - root directory to search\n    - `pattern` (string) - text or regex pattern to find\n    - `caseInsensitive` (boolean, optional) - case-insensitive search\n    - `isRegex` (boolean, optional) - treat pattern as regex\n    - `includePatterns` (string[], optional) - file patterns to include (e.g., *.js)\n    - `excludePatterns` (string[], optional) - file patterns to exclude\n    - `maxResults` (number, optional, default: 1000) - maximum results to return\n    - `contextLines` (number, optional, default: 0) - lines of context before/after\n  - Features:\n    - Handles all special characters (apostrophes, quotes, $, backslashes)\n    - Supports plain text and regular expression searches\n    - Shows matching lines with file paths and line numbers\n    - Automatically excludes .git, node_modules, .svn, .hg directories\n    - Can show context lines around matches\n\n- **get_file_info**\n  - Detailed metadata\n  - Input: `path` (string)\n  - Returns: size, timestamps, type, permissions\n\n- **list_allowed_directories**\n  - Lists all directories accessible to the server\n\n- **list_wsl_distributions**\n  - Lists available distributions and shows the active one\n\n---\n\n## Requirements\n\n- [Windows Subsystem for Linux (WSL)](https://learn.microsoft.com/en-us/windows/wsl/install) properly configured\n- At least one Linux distribution installed in WSL\n\n**For Claude Desktop users:**  \nNo additional installation required — just configure your `claude_desktop_config.json`.\n\n**NPM Package:**  \nThe package is available on npm: [mcp-server-wsl-filesystem](https://www.npmjs.com/package/mcp-server-wsl-filesystem)\n\n**For development:**\n\n- [Node.js](https://nodejs.org/en/download/) (v18.0.0 or higher)\n- TypeScript (included as a dev dependency)\n\n### Installing Node.js on Windows\n\n1. Download the installer from [nodejs.org](https://nodejs.org/en/download/)\n2. Run it and follow the instructions\n3. Check versions:\n\n```bash\nnode --version\nnpm --version\n```\n\n## Usage\n\nBefore running the server, you need to build the TypeScript project:\n```bash\nnpm install\nnpm run build\n```\n\nRun the server by specifying which WSL distribution to use (optional) and which directories to expose:\n\n```bash\nnode dist/index.js [--distro=distribution_name] <allowed_directory> [additional_directories...]\n```\n\nIf no distribution is specified, the default WSL distribution will be used.\n\n### Examples\n\nAccess Ubuntu-20.04 distribution:\n```bash\nnode dist/index.js --distro=Ubuntu-20.04 /home/user/documents\n```\n\nUse default distribution:\n```bash\nnode dist/index.js /home/user/documents\n```\n\n## Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n### Option 1: Using a specific WSL distribution\n\n```json\n{\n  \"mcpServers\": {\n    \"wsl-filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-server-wsl-filesystem\",\n        \"--distro=Ubuntu-20.04\",\n        \"/home/user/documents\"\n      ]\n    }\n  }\n}\n```\n\n### Option 2: Using the default WSL distribution\n\n```json\n{\n  \"mcpServers\": {\n    \"wsl-filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-server-wsl-filesystem\",\n        \"/home/user/documents\"\n      ]\n    }\n  }\n}\n```\n\nIn the second example, the system will use your default WSL distribution without you needing to specify it.\n\n## Differences from original project\n\nThis fork adapts the original Filesystem MCP Server to work with WSL by:\n\n1. Replacing direct Node.js filesystem calls with WSL command executions\n2. Adding support for selecting specific WSL distributions\n3. Implementing path translation between Windows and Linux formats\n4. Enhancing file content handling for cross-platform compatibility\n5. Adding specialized tools for WSL management\n\n## License\n\nThis project is a fork of the original [Filesystem MCP Server](https://github.com/modelcontextprotocol/servers/blob/main/src/filesystem) created by the Model Context Protocol team.\n\nThis MCP server for WSL is licensed under the MIT License, following the original project's license. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the original project repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "wsl",
        "filesystem",
        "files",
        "wsl filesystem",
        "server wsl",
        "linux wsl"
      ],
      "category": "file-management"
    },
    "wesnermichel--nexus-mcp-claude-desktop-server": {
      "owner": "wesnermichel",
      "name": "nexus-mcp-claude-desktop-server",
      "url": "https://github.com/wesnermichel/nexus-mcp-claude-desktop-server",
      "imageUrl": "/freedevtools/mcp/pfp/wesnermichel.webp",
      "description": "Connects Claude Desktop to VSCode, allowing file reading and writing within projects. It facilitates directory management and provides security controls for path accessibility.",
      "stars": 8,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-30T19:21:50Z",
      "readme_content": "# Nexus MCP Bridge for VSCode\n\nA lightweight bridge extension that lets Claude Desktop connect to your VSCode workspace via Model Context Protocol (MCP).\n\n## Features\n\n- **Minimal Memory Footprint**: Designed to be lightweight and efficient\n- **Automatic Startup**: Can start automatically when VSCode launches\n- **Status Bar Integration**: Easily see and control the bridge status\n- **File System Access**: Enables Claude to read and write files in your workspace\n- **Directory Management**: Create directories and list contents\n- **Security Controls**: Configure which paths are accessible\n\n## Why Use This Bridge?\n\nIf you're using Claude Desktop with VSCode, this bridge allows you to:\n\n1. **Reduce Memory Usage**: Lightweight and efficient\n2. **Stay in VSCode**: No need to context switch between applications\n3. **Protect Your System**: Only expose directories you explicitly allow\n\n## Installation\n\n1. Install the extension from the VSIX file\n2. Configure your settings (optional)\n3. The bridge will start automatically if configured, or you can start it manually\n\n## Setup for Claude Desktop\n\nIn Claude Desktop, configure your `claude_desktop_config.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"nexus-bridge\": {\n      \"url\": \"http://localhost:3000/mcp\",\n      \"disabled\": false,\n      \"alwaysAllow\": [\n        \"get_system_info\",\n        \"read_file\",\n        \"write_file\",\n        \"create_directory\",\n        \"list_directory\",\n        \"get_project_status\"\n      ]\n    }\n  }\n}\n```\n\n## Configuration\n\nYou can configure the extension in your VSCode settings:\n\n```json\n{\n  \"nexusMcpBridge.port\": 3000,\n  \"nexusMcpBridge.startOnLaunch\": true,\n  \"nexusMcpBridge.allowedPaths\": [\n    \"/path/to/your/project\",\n    \"/path/to/another/project\"\n  ]\n}\n```\n\n## Commands\n\n- **Start Nexus MCP Bridge**: Start the MCP server\n- **Stop Nexus MCP Bridge**: Stop the MCP server\n- **Toggle Nexus MCP Bridge**: Toggle the server on/off (via status bar)\n\n## About \n\nA lightweight VSCode extension for connecting with Claude Desktop via MCP.\n\ngithub.com/wesnermichel\n\n## License\n\nMIT# nexus-mcp-claude-desktop-server\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "vscode",
        "file",
        "directory",
        "desktop vscode",
        "vscode allowing",
        "file management"
      ],
      "category": "file-management"
    },
    "wonderwhy-er--DesktopCommanderMCP": {
      "owner": "wonderwhy-er",
      "name": "DesktopCommanderMCP",
      "url": "https://github.com/wonderwhy-er/DesktopCommanderMCP",
      "imageUrl": "/freedevtools/mcp/pfp/wonderwhy-er.webp",
      "description": "Execute terminal commands, manage processes, and perform advanced file editing tasks, including text replacements and file rewrites. Enhance development workflows by automating repetitive tasks and running processes efficiently.",
      "stars": 4611,
      "forks": 511,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T08:03:00Z",
      "readme_content": "# Desktop Commander MCP\n### Search, update, manage files and run terminal commands with AI\n\n[![npm downloads](https://img.shields.io/npm/dw/@wonderwhy-er/desktop-commander)](https://www.npmjs.com/package/@wonderwhy-er/desktop-commander)\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/wonderwhy-er/DesktopCommanderMCP)](https://archestra.ai/mcp-catalog/wonderwhy-er__desktopcommandermcp)\n[![smithery badge](https://smithery.ai/badge/@wonderwhy-er/desktop-commander)](https://smithery.ai/server/@wonderwhy-er/desktop-commander)\n[![Buy Me A Coffee](https://img.shields.io/badge/Buy%20Me%20A%20Coffee-support-yellow.svg)](https://www.buymeacoffee.com/wonderwhyer)\n\n\n[![Discord](https://img.shields.io/badge/Join%20Discord-5865F2?style=for-the-badge&logo=discord&logoColor=white)](https://discord.gg/kQ27sNnZr7)\n\n\nWork with code and text, run processes, and automate tasks, going far beyond other AI editors - without API token costs.\n\n\n\n\n<a href=\"https://glama.ai/mcp/servers/zempur9oh4\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/zempur9oh4/badge\" alt=\"Desktop Commander MCP\" />\n</a>\n\n## Table of Contents\n- [Features](#features)\n- [How to install](#how-to-install)\n- [Getting Started](#getting-started)\n- [Usage](#usage)\n- [Handling Long-Running Commands](#handling-long-running-commands)\n- [Work in Progress and TODOs](#roadmap)\n- [Sponsors and Supporters](#support-desktop-commander)\n- [Website](#website)\n- [Media](#media)\n- [Testimonials](#testimonials)\n- [Frequently Asked Questions](#frequently-asked-questions)\n- [Contributing](#contributing)\n- [License](#license)\n\nAll of your AI development tools in one place.\nDesktop Commander puts all dev tools in one chat.\nExecute long-running terminal commands on your computer and manage processes through Model Context Protocol (MCP). Built on top of [MCP Filesystem Server](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem) to provide additional search and replace file editing capabilities.\n\n## Features\n\n- **Enhanced terminal commands with interactive process control**\n- **Execute code in memory (Python, Node.js, R) without saving files**\n- **Instant data analysis - just ask to analyze CSV/JSON files**\n- **Interact with running processes (SSH, databases, development servers)**\n- Execute terminal commands with output streaming\n- Command timeout and background execution support\n- Process management (list and kill processes)\n- Session management for long-running commands\n- Server configuration management:\n  - Get/set configuration values\n  - Update multiple settings at once\n  - Dynamic configuration changes without server restart\n- Full filesystem operations:\n  - Read/write files\n  - Create/list directories\n  - Move files/directories\n  - Search files\n  - Get file metadata\n  - **Negative offset file reading**: Read from end of files using negative offset values (like Unix tail)\n- Code editing capabilities:\n  - Surgical text replacements for small changes\n  - Full file rewrites for major changes\n  - Multiple file support\n  - Pattern-based replacements\n  - vscode-ripgrep based recursive code or text search in folders\n- Comprehensive audit logging:\n  - All tool calls are automatically logged\n  - Log rotation with 10MB size limit\n  - Detailed timestamps and arguments\n\n## How to install\n\nDesktop Commander offers multiple installation methods to fit different user needs and technical requirements.\n\n> **📋 Update & Uninstall Information:** Before choosing an installation option, note that **only Options 1, 2, 3, and 6 have automatic updates**. Options 4 and 5 require manual updates. See the sections below for update and uninstall instructions for each option.\n\n### Option 1: Install through npx ⭐ **Auto-Updates** **Requires Node.js**\nJust run this in terminal:\n```\nnpx @wonderwhy-er/desktop-commander@latest setup\n```\n\nFor debugging mode (allows Node.js inspector connection):\n```\nnpx @wonderwhy-er/desktop-commander@latest setup --debug\n```\n\n**Command line options during setup:**\n- `--debug`: Enable debugging mode for Node.js inspector\n- `--no-onboarding`: Disable onboarding prompts for new users\n\nRestart Claude if running.\n\n**✅ Auto-Updates:** Yes - automatically updates when you restart Claude  \n**🔄 Manual Update:** Run the setup command again  \n**🗑️ Uninstall:** Run `npx @wonderwhy-er/desktop-commander@latest remove`\n\n### Option 2: Using bash script installer (macOS) ⭐ **Auto-Updates** **Installs Node.js if needed**\nFor macOS users, you can use our automated bash installer which will check your Node.js version, install it if needed, and automatically configure Desktop Commander:\n```\ncurl -fsSL https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install.sh | bash\n```\nThis script handles all dependencies and configuration automatically for a seamless setup experience.\n\n**✅ Auto-Updates:** Yes - requires manual updates  \n**🔄 Manual Update:** Re-run the bash installer command above  \n**🗑️ Uninstall:** Run `npx @wonderwhy-er/desktop-commander@latest remove`\n\n### Option 3: Installing via Smithery ⭐ **Auto-Updates** **Requires Node.js**\n\nTo install Desktop Commander for Claude Desktop via [Smithery](https://smithery.ai/server/@wonderwhy-er/desktop-commander):\n\n1. **Visit the Smithery page:** https://smithery.ai/server/@wonderwhy-er/desktop-commander\n2. **Login to Smithery** if you haven't already\n3. **Select your client** (Claude Desktop) on the right side\n4. **Install with the provided key** that appears after selecting your client\n5. **Restart Claude Desktop**\n\nThe old command-line installation method is no longer supported. Please use the web interface above for the most reliable installation experience.\n\n**✅ Auto-Updates:** Yes - automatically updates when you restart Claude  \n**🔄 Manual Update:** Visit the Smithery page and reinstall  \n\n### Option 4: Add to claude_desktop_config manually ⭐ **Auto-Updates** **Requires Node.js**\nAdd this entry to your claude_desktop_config.json:\n\n- On Mac: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n- On Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n- On Linux: `~/.config/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"desktop-commander\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@wonderwhy-er/desktop-commander@latest\"\n      ]\n    }\n  }\n}\n```\nRestart Claude if running.\n\n**✅ Auto-Updates:** Yes - automatically updates when you restart Claude  \n**🔄 Manual Update:** Run the setup command again  \n**🗑️ Uninstall:** Run `npx @wonderwhy-er/desktop-commander@latest remove` or  remove the \"desktop-commander\" entry from your claude_desktop_config.json file\n\n### ### Option 5: Checkout locally ❌ **Manual Updates** **Requires Node.js** ❌ **Manual Updates** **Requires Node.js**\n1. Clone and build:\n```bash\ngit clone https://github.com/wonderwhy-er/DesktopCommanderMCP.git\ncd DesktopCommanderMCP\nnpm run setup\n```\nRestart Claude if running.\n\nThe setup command will:\n- Install dependencies\n- Build the server\n- Configure Claude's desktop app\n- Add MCP servers to Claude's config if needed\n\n**❌ Auto-Updates:** No - requires manual git updates  \n**🔄 Manual Update:** `cd DesktopCommanderMCP && git pull && npm run setup`  \n**🗑️ Uninstall:** Run `npx @wonderwhy-er/desktop-commander@latest remove` or remove the cloned directory and remove MCP server entry from Claude config\n\n### Option 6: Docker Installation 🐳 ⭐ **Auto-Updates** **No Node.js Required**\n\nPerfect for users who want complete or partial isolation or don't have Node.js installed. Desktop Commander runs in a sandboxed Docker container with a persistent work environment.\n\n#### Prerequisites\n- [Docker Desktop](https://www.docker.com/products/docker-desktop/) installed **and running**\n- Claude Desktop app installed\n\n**Important:** Make sure Docker Desktop is fully started before running the installer.\n\n#### Automated Installation (Recommended)\n\n**macOS/Linux:**\n```bash\nbash <(curl -fsSL https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.sh)\n```\n\n**Windows PowerShell:**\n```powershell\n# Download and run the installer (one-liner)\niex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.ps1'))\n```\n\nThe automated installer will:\n- Check Docker installation\n- Pull the latest Docker image \n- Prompt you to select folders for mounting\n- Configure Claude Desktop automatically\n- Restart Claude if possible\n\n#### How Docker Persistence Works\nDesktop Commander creates a persistent work environment that remembers everything between sessions:\n- **Your development tools**: Any software you install (Node.js, Python, databases, etc.) stays installed\n- **Your configurations**: Git settings, SSH keys, shell preferences, and other personal configs are preserved  \n- **Your work files**: Projects and files in the workspace area persist across restarts\n- **Package caches**: Downloaded packages and dependencies are cached for faster future installs\n\nThink of it like having your own dedicated development computer that never loses your setup, but runs safely isolated from your main system.\n\n#### Manual Docker Configuration\n\nIf you prefer manual setup, add this to your claude_desktop_config.json:\n\n**Basic setup (no file access):**\n```json\n{\n  \"mcpServers\": {\n    \"desktop-commander-in-docker\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"mcp/desktop-commander:latest\"\n      ]\n    }\n  }\n}\n```\n\n**With folder mounting:**\n```json\n{\n  \"mcpServers\": {\n    \"desktop-commander-in-docker\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-v\", \"/Users/username/Desktop:/mnt/desktop\",\n        \"-v\", \"/Users/username/Documents:/mnt/documents\",\n        \"mcp/desktop-commander:latest\"\n      ]\n    }\n  }\n}\n```\n\n**Advanced folder mounting:**\n```json\n{\n  \"mcpServers\": {\n    \"desktop-commander-in-docker\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"-i\", \"--rm\",\n        \"-v\", \"dc-system:/usr\",\n        \"-v\", \"dc-home:/root\", \n        \"-v\", \"dc-workspace:/workspace\",\n        \"-v\", \"dc-packages:/var\",\n        \"-v\", \"/Users/username/Projects:/mnt/Projects\",\n        \"-v\", \"/Users/username/Downloads:/mnt/Downloads\",\n        \"mcp/desktop-commander:latest\"\n      ]\n    }\n  }\n}\n```\n\n#### Docker Benefits\n✅ **Controlled Isolation:** Runs in sandboxed environment with persistent development state\n✅ **No Node.js Required:** Everything included in the container\n✅ **Cross-Platform:** Same experience on all operating systems\n✅ **Persistent Environment:** Your tools, files, configs, and work survives restarts\n\n**✅ Auto-Updates:** Yes - `latest` tag automatically gets newer versions  \n**🔄 Manual Update:** `docker pull mcp/desktop-commander:latest` then restart Claude  \n\n#### Docker Management Commands\n\n**macOS/Linux:**\n\nCheck installation status:\n```bash\nbash <(curl -fsSL https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.sh) --status\n```\n\nReset all persistent data (removes all installed tools and configs):\n```bash\nbash <(curl -fsSL https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.sh) --reset\n```\n\n**Windows PowerShell:**\n\nCheck status:\n```powershell\n$script = (New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.ps1'); & ([ScriptBlock]::Create(\"$script\")) -Status\n```\n\nReset all data:\n```powershell\n$script = (New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.ps1'); & ([ScriptBlock]::Create(\"$script\")) -Reset\n```\n\nShow help:\n```powershell\n$script = (New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.ps1'); & ([ScriptBlock]::Create(\"$script\")) -Help\n```\n\nVerbose output:\n```powershell\n$script = (New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.ps1'); & ([ScriptBlock]::Create(\"$script\")) -VerboseOutput\n```  \n\n#### Troubleshooting Docker Installation\nIf you broke the Docker container or need a fresh start:\n```bash\n# Reset and reinstall from scratch\nbash <(curl -fsSL https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.sh) --reset && bash <(curl -fsSL https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.sh)\n```\nThis will completely reset your persistent environment and reinstall everything fresh with exception of not touching mounted folders\n\n## Updating & Uninstalling Desktop Commander\n\n### Automatic Updates (Options 1, 2, 3, 4 & 6)\n**Options 1 (npx), Option 2 (bash installer), 3 (Smithery), 4 (manual config), and 6 (Docker)** automatically update to the latest version whenever you restart Claude. No manual intervention needed.\n\n### Manual Updates (Option 5)\n- **Option 5 (local checkout):** `cd DesktopCommanderMCP && git pull && npm run setup`\n\n### Uninstalling Desktop Commander\n#### 🤖 Automatic Uninstallation (Recommended)\n\nThe easiest way to completely remove Desktop Commander:\n\n```bash\nnpx @wonderwhy-er/desktop-commander@latest remove\n```\n\nThis automatic uninstaller will:\n- ✅ Remove Desktop Commander from Claude's MCP server configuration\n- ✅ Create a backup of your Claude config before making changes\n- ✅ Provide guidance for complete package removal\n- ✅ Restore from backup if anything goes wrong\n\n#### 🔧 Manual Uninstallation\n\nIf the automatic uninstaller doesn't work or you prefer manual removal:\n\n##### Remove from Claude Configuration\n\n1. **Locate your Claude Desktop config file:**\n  - **macOS:** `~/Library/Application Support/Claude/claude_desktop_config.json`\n  - **Windows:** `%APPDATA%\\Claude\\claude_desktop_config.json`\n  - **Linux:** `~/.config/Claude/claude_desktop_config.json`\n\n2. **Edit the config file:**\n  - Open the file in a text editor\n  - Find and remove the `\"desktop-commander\"` entry from the `\"mcpServers\"` section\n  - Save the file\n\n  **Example - Remove this section:**\n  ```json\n  {\n      \"desktop-commander\": {\n        \"command\": \"npx\",\n        \"args\": [\"@wonderwhy-er/desktop-commander@latest\"]\n      }\n  }\n  ```\n\nClose and restart Claude Desktop to complete the removal.\n\n#### 🆘 Troubleshooting\n\n**If automatic uninstallation fails:**\n- Use manual uninstallation as a fallback\n\n**If Claude won't start after uninstalling:**\n- Restore the backup config file created by the uninstaller\n- Or manually fix the JSON syntax in your claude_desktop_config.json\n\n**Need help?**\n- Join our Discord community: https://discord.com/invite/kQ27sNnZr7\n\n## Getting Started\n\nOnce Desktop Commander is installed and Claude Desktop is restarted, you're ready to supercharge your Claude experience!\n\n### 🚀 New User Onboarding\n\nDesktop Commander includes intelligent onboarding to help you discover what's possible:\n\n**For New Users:** When you're just getting started (fewer than 10 successful commands), Claude will automatically offer helpful getting-started guidance and practical tutorials after you use Desktop Commander successfully.\n\n**Request Help Anytime:** You can ask for onboarding assistance at any time by simply saying:\n- *\"Help me get started with Desktop Commander\"*\n- *\"Show me Desktop Commander examples\"* \n- *\"What can I do with Desktop Commander?\"*\n\nClaude will then show you beginner-friendly tutorials and examples, including:\n- 📁 Organizing your Downloads folder automatically\n- 📊 Analyzing CSV/Excel files with Python\n- ⚙️ Setting up GitHub Actions CI/CD\n- 🔍 Exploring and understanding codebases\n- 🤖 Running interactive development environments\n\n## Usage\n\nThe server provides a comprehensive set of tools organized into several categories:\n\n### Available Tools\n\n| Category | Tool | Description |\n|----------|------|-------------|\n| **Configuration** | `get_config` | Get the complete server configuration as JSON (includes blockedCommands, defaultShell, allowedDirectories, fileReadLineLimit, fileWriteLineLimit, telemetryEnabled) |\n| | `set_config_value` | Set a specific configuration value by key. Available settings: <br>• `blockedCommands`: Array of shell commands that cannot be executed<br>• `defaultShell`: Shell to use for commands (e.g., bash, zsh, powershell)<br>• `allowedDirectories`: Array of filesystem paths the server can access for file operations (⚠️ terminal commands can still access files outside these directories)<br>• `fileReadLineLimit`: Maximum lines to read at once (default: 1000)<br>• `fileWriteLineLimit`: Maximum lines to write at once (default: 50)<br>• `telemetryEnabled`: Enable/disable telemetry (boolean) |\n| **Terminal** | `start_process` | Start programs with smart detection of when they're ready for input |\n| | `interact_with_process` | Send commands to running programs and get responses |\n| | `read_process_output` | Read output from running processes |\n| | `force_terminate` | Force terminate a running terminal session |\n| | `list_sessions` | List all active terminal sessions |\n| | `list_processes` | List all running processes with detailed information |\n| | `kill_process` | Terminate a running process by PID |\n| **Filesystem** | `read_file` | Read contents from local filesystem or URLs with line-based pagination (supports positive/negative offset and length parameters) |\n| | `read_multiple_files` | Read multiple files simultaneously |\n| | `write_file` | Write file contents with options for rewrite or append mode (uses configurable line limits) |\n| | `create_directory` | Create a new directory or ensure it exists |\n| | `list_directory` | Get detailed recursive listing of files and directories (supports depth parameter, default depth=2) |\n| | `move_file` | Move or rename files and directories |\n| | `start_search` | Start streaming search for files by name or content patterns (unified ripgrep-based search) |\n| | `get_more_search_results` | Get paginated results from active search with offset support |\n| | `stop_search` | Stop an active search gracefully |\n| | `list_searches` | List all active search sessions |\n| | `get_file_info` | Retrieve detailed metadata about a file or directory |\n| **Text Editing** | `edit_block` | Apply targeted text replacements with enhanced prompting for smaller edits (includes character-level diff feedback) |\n| **Analytics** | `get_usage_stats` | Get usage statistics for your own insight |\n| | `get_recent_tool_calls` | Get recent tool call history with arguments and outputs for debugging and context recovery |\n| | `give_feedback_to_desktop_commander` | Open feedback form in browser to provide feedback to Desktop Commander Team |\n\n### Quick Examples\n\n**Data Analysis:**\n```\n\"Analyze sales.csv and show top customers\" → Claude runs Python code in memory\n```\n\n**Remote Access:**\n```\n\"SSH to my server and check disk space\" → Claude maintains SSH session\n```\n\n**Development:**\n```\n\"Start Node.js and test this API\" → Claude runs interactive Node session\n```\n\n### Tool Usage Examples\n\nSearch/Replace Block Format:\n```\nfilepath.ext\n<<<<<<< SEARCH\ncontent to find\n=======\nnew content\n>>>>>>> REPLACE\n```\n\nExample:\n```\nsrc/main.js\n<<<<<<< SEARCH\nconsole.log(\"old message\");\n=======\nconsole.log(\"new message\");\n>>>>>>> REPLACE\n```\n\n### Enhanced Edit Block Features\n\nThe `edit_block` tool includes several enhancements for better reliability:\n\n1. **Improved Prompting**: Tool descriptions now emphasize making multiple small, focused edits rather than one large change\n2. **Fuzzy Search Fallback**: When exact matches fail, it performs fuzzy search and provides detailed feedback\n3. **Character-level Diffs**: Shows exactly what's different using `{-removed-}{+added+}` format\n4. **Multiple Occurrence Support**: Can replace multiple instances with `expected_replacements` parameter\n5. **Comprehensive Logging**: All fuzzy searches are logged for analysis and debugging\n\nWhen a search fails, you'll see detailed information about the closest match found, including similarity percentage, execution time, and character differences. All these details are automatically logged for later analysis using the fuzzy search log tools.\n\n### Docker Support\n\n### 🐳 Isolated Environment Usage\n\nDesktop Commander can be run in Docker containers for **complete isolation from your host system**, providing **zero risk to your computer**. This is perfect for testing, development, or when you want complete sandboxing.\n\n### Installation Instructions\n\n1. **Install Docker for Windows/Mac**\n   - Download and install Docker Desktop from [docker.com](https://www.docker.com/products/docker-desktop/)\n\n2. **Get Desktop Commander Docker Configuration**\n   - Visit: https://hub.docker.com/mcp/server/desktop-commander/manual\n   - **Option A:** Use the provided terminal command for automated setup\n   - **Option B:** Click \"Standalone\" to get the config JSON and add it manually to your Claude Desktop config\n \n\n3. **Mount Your Machine Folders (Coming Soon)**\n   - Instructions on how to mount your local directories into the Docker container will be provided soon\n   - This will allow you to work with your files while maintaining complete isolation\n\n### Benefits of Docker Usage\n- **Complete isolation** from your host system\n- **Consistent environment** across different machines\n- **Easy cleanup** - just remove the container when done\n- **Perfect for testing** new features or configurations\n\n## URL Support\n- `read_file` can now fetch content from both local files and URLs\n- Example: `read_file` with `isUrl: true` parameter to read from web resources\n- Handles both text and image content from remote sources\n- Images (local or from URLs) are displayed visually in Claude's interface, not as text\n- Claude can see and analyze the actual image content\n- Default 30-second timeout for URL requests\n\n## Fuzzy Search Log Analysis (npm scripts)\n\nThe fuzzy search logging system includes convenient npm scripts for analyzing logs outside of the MCP environment:\n\n```bash\n# View recent fuzzy search logs\nnpm run logs:view -- --count 20\n\n# Analyze patterns and performance\nnpm run logs:analyze -- --threshold 0.8\n\n# Export logs to CSV or JSON\nnpm run logs:export -- --format json --output analysis.json\n\n# Clear all logs (with confirmation)\nnpm run logs:clear\n```\n\nFor detailed documentation on these scripts, see [scripts/README.md](scripts/README.md).\n\n## Fuzzy Search Logs\n\nDesktop Commander includes comprehensive logging for fuzzy search operations in the `edit_block` tool. When an exact match isn't found, the system performs a fuzzy search and logs detailed information for analysis.\n\n### What Gets Logged\n\nEvery fuzzy search operation logs:\n- **Search and found text**: The text you're looking for vs. what was found\n- **Similarity score**: How close the match is (0-100%)\n- **Execution time**: How long the search took\n- **Character differences**: Detailed diff showing exactly what's different\n- **File metadata**: Extension, search/found text lengths\n- **Character codes**: Specific character codes causing differences\n\n### Log Location\n\nLogs are automatically saved to:\n- **macOS/Linux**: `~/.claude-server-commander-logs/fuzzy-search.log`\n- **Windows**: `%USERPROFILE%\\.claude-server-commander-logs\\fuzzy-search.log`\n\n### What You'll Learn\n\nThe fuzzy search logs help you understand:\n1. **Why exact matches fail**: Common issues like whitespace differences, line endings, or character encoding\n2. **Performance patterns**: How search complexity affects execution time\n3. **File type issues**: Which file extensions commonly have matching problems\n4. **Character encoding problems**: Specific character codes that cause diffs\n\n## Audit Logging\n\nDesktop Commander now includes comprehensive logging for all tool calls:\n\n### What Gets Logged\n- Every tool call is logged with timestamp, tool name, and arguments (sanitized for privacy)\n- Logs are rotated automatically when they reach 10MB in size\n\n### Log Location\nLogs are saved to:\n- **macOS/Linux**: `~/.claude-server-commander/claude_tool_call.log`\n- **Windows**: `%USERPROFILE%\\.claude-server-commander\\claude_tool_call.log`\n\nThis audit trail helps with debugging, security monitoring, and understanding how Claude is interacting with your system.\n\n## Handling Long-Running Commands\n\nFor commands that may take a while:\n\n## Configuration Management\n\n### ⚠️ Important Security Warnings\n\n> **For comprehensive security information and vulnerability reporting**: See [SECURITY.md](SECURITY.md)\n\n1. **Known security limitations**: Directory restrictions and command blocking can be bypassed through various methods including symlinks, command substitution, and absolute paths or code execution\n\n2. **Always change configuration in a separate chat window** from where you're doing your actual work. Claude may sometimes attempt to modify configuration settings (like `allowedDirectories`) if it encounters filesystem access restrictions.\n\n3. **The `allowedDirectories` setting currently only restricts filesystem operations**, not terminal commands. Terminal commands can still access files outside allowed directories.\n\n4. **For production security**: Use the [Docker installation](#option-6-docker-installation-🐳-⭐-auto-updates-no-nodejs-required) which provides complete isolation from your host system.\n\n### Configuration Tools\n\nYou can manage server configuration using the provided tools:\n\n```javascript\n// Get the entire config\nget_config({})\n\n// Set a specific config value\nset_config_value({ \"key\": \"defaultShell\", \"value\": \"/bin/zsh\" })\n\n// Set multiple config values using separate calls\nset_config_value({ \"key\": \"defaultShell\", \"value\": \"/bin/bash\" })\nset_config_value({ \"key\": \"allowedDirectories\", \"value\": [\"/Users/username/projects\"] })\n```\n\nThe configuration is saved to `config.json` in the server's working directory and persists between server restarts.\n\n#### Understanding fileWriteLineLimit\n\nThe `fileWriteLineLimit` setting controls how many lines can be written in a single `write_file` operation (default: 50 lines). This limit exists for several important reasons:\n\n**Why the limit exists:**\n- **AIs are wasteful with tokens**: Instead of doing two small edits in a file, AIs may decide to rewrite the whole thing. We're trying to force AIs to do things in smaller changes as it saves time and tokens\n- **Claude UX message limits**: There are limits within one message and hitting \"Continue\" does not really work. What we're trying here is to make AI work in smaller chunks so when you hit that limit, multiple chunks have succeeded and that work is not lost - it just needs to restart from the last chunk\n\n**Setting the limit:**\n```javascript\n// You can set it to thousands if you want\nset_config_value({ \"key\": \"fileWriteLineLimit\", \"value\": 1000 })\n\n// Or keep it smaller to force more efficient behavior\nset_config_value({ \"key\": \"fileWriteLineLimit\", \"value\": 25 })\n```\n\n**Maximum value**: You can set it to thousands if you want - there's no technical restriction.\n\n**Best practices**:\n- Keep the default (50) to encourage efficient AI behavior and avoid token waste\n- The system automatically suggests chunking when limits are exceeded\n- Smaller chunks mean less work lost when Claude hits message limits\n\n### Best Practices\n\n1. **Create a dedicated chat for configuration changes**: Make all your config changes in one chat, then start a new chat for your actual work.\n\n2. **Be careful with empty `allowedDirectories`**: Setting this to an empty array (`[]`) grants access to your entire filesystem for file operations.\n\n3. **Use specific paths**: Instead of using broad paths like `/`, specify exact directories you want to access.\n\n4. **Always verify configuration after changes**: Use `get_config({})` to confirm your changes were applied correctly.\n\n## Command Line Options\n\nDesktop Commander supports several command line options for customizing behavior:\n\n### Disable Onboarding\n\nBy default, Desktop Commander shows helpful onboarding prompts to new users (those with fewer than 10 tool calls). You can disable this behavior:\n\n```bash\n# Disable onboarding for this session\nnode dist/index.js --no-onboarding\n\n# Or if using npm scripts\nnpm run start:no-onboarding\n\n# For npx installations, modify your claude_desktop_config.json:\n{\n  \"mcpServers\": {\n    \"desktop-commander\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@wonderwhy-er/desktop-commander@latest\",\n        \"--no-onboarding\"\n      ]\n    }\n  }\n}\n```\n\n**When onboarding is automatically disabled:**\n- When the MCP client name is set to \"desktop-commander\"\n- When using the `--no-onboarding` flag\n- After users have used onboarding prompts or made 10+ tool calls\n\n**Debug information:**\nThe server will log when onboarding is disabled: `\"Onboarding disabled via --no-onboarding flag\"`\n\n## Using Different Shells\n\nYou can specify which shell to use for command execution:\n\n```javascript\n// Using default shell (bash or system default)\nexecute_command({ \"command\": \"echo $SHELL\" })\n\n// Using zsh specifically\nexecute_command({ \"command\": \"echo $SHELL\", \"shell\": \"/bin/zsh\" })\n\n// Using bash specifically\nexecute_command({ \"command\": \"echo $SHELL\", \"shell\": \"/bin/bash\" })\n```\n\nThis allows you to use shell-specific features or maintain consistent environments across commands.\n\n1. `execute_command` returns after timeout with initial output\n2. Command continues in background\n3. Use `read_output` with PID to get new output\n4. Use `force_terminate` to stop if needed\n\n## Debugging\n\nIf you need to debug the server, you can install it in debug mode:\n\n```bash\n# Using npx\nnpx @wonderwhy-er/desktop-commander@latest setup --debug\n\n# Or if installed locally\nnpm run setup:debug\n```\n\nThis will:\n1. Configure Claude to use a separate \"desktop-commander\" server\n2. Enable Node.js inspector protocol with `--inspect-brk=9229` flag\n3. Pause execution at the start until a debugger connects\n4. Enable additional debugging environment variables\n\nTo connect a debugger:\n- In Chrome, visit `chrome://inspect` and look for the Node.js instance\n- In VS Code, use the \"Attach to Node Process\" debug configuration\n- Other IDEs/tools may have similar \"attach\" options for Node.js debugging\n\nImportant debugging notes:\n- The server will pause on startup until a debugger connects (due to the `--inspect-brk` flag)\n- If you don't see activity during debugging, ensure you're connected to the correct Node.js process\n- Multiple Node processes may be running; connect to the one on port 9229\n- The debug server is identified as \"desktop-commander-debug\" in Claude's MCP server list\n\nTroubleshooting:\n- If Claude times out while trying to use the debug server, your debugger might not be properly connected\n- When properly connected, the process will continue execution after hitting the first breakpoint\n- You can add additional breakpoints in your IDE once connected\n\n## Model Context Protocol Integration\n\nThis project extends the MCP Filesystem Server to enable:\n- Local server support in Claude Desktop\n- Full system command execution\n- Process management\n- File operations\n- Code editing with search/replace blocks\n\nCreated as part of exploring Claude MCPs: https://youtube.com/live/TlbjFDbl5Us\n\n## DONE\n- **20-05-2025 v0.1.40 Release** - Added audit logging for all tool calls, improved line-based file operations, enhanced edit_block with better prompting for smaller edits, added explicit telemetry opt-out prompting \n- **05-05-2025 Fuzzy Search Logging** - Added comprehensive logging system for fuzzy search operations with detailed analysis tools, character-level diffs, and performance metrics to help debug edit_block failures\n- **29-04-2025 Telemetry Opt Out through configuration** - There is now setting to disable telemetry in config, ask in chat\n- **23-04-2025 Enhanced edit functionality** - Improved format, added fuzzy search and multi-occurrence replacements, should fail less and use edit block more often\n- **16-04-2025 Better configurations** - Improved settings for allowed paths, commands and shell environments\n- **14-04-2025 Windows environment fixes** - Resolved issues specific to Windows platforms\n- **14-04-2025 Linux improvements** - Enhanced compatibility with various Linux distributions\n- **12-04-2025 Better allowed directories and blocked commands** - Improved security and path validation for file read/write and terminal command restrictions.\nTerminal still can access files ignoring allowed directories.\n- **11-04-2025 Shell configuration** - Added ability to configure preferred shell for command execution\n- **07-04-2025 Added URL support** - `read_file` command can now fetch content from URLs\n- **28-03-2025 Fixed \"Watching /\" JSON error** - Implemented custom stdio transport to handle non-JSON messages and prevent server crashes\n- **25-03-2025 Better code search** ([merged](https://github.com/wonderwhy-er/ClaudeServerCommander/pull/17)) - Enhanced code exploration with context-aware results\n\n## Roadmap\n\nThe following features are currently being explored:\n\n- **Support for WSL** - Windows Subsystem for Linux integration\n- **Support for SSH** - Remote server command execution\n- **Better file support for formats like CSV/PDF**\n- **Terminal sandboxing for Mac/Linux/Windows for better security**\n- **File reading modes** - For example, allow reading HTML as plain text or markdown\n- **Interactive shell support** - ssh, node/python repl\n- **Improve large file reading and writing**\n\n## Support Desktop Commander\n\n<div align=\"center\">\n  <h3>📢 SUPPORT THIS PROJECT</h3>\n  <p><strong>Desktop Commander MCP is free and open source, but needs your support to thrive!</strong></p>\n  \n  <div style=\"background-color: #f8f9fa; padding: 15px; border-radius: 10px; margin: 20px 0; border: 2px solid #007bff;\">\n    <p>Our philosophy is simple: we don't want you to pay for it if you're not successful. But if Desktop Commander contributes to your success, please consider contributing to ours.</p>\n    <p><strong>Ways to support:</strong></p>\n    <ul style=\"list-style-type: none; padding: 0;\">\n      <li>🌟 <a href=\"https://github.com/sponsors/wonderwhy-er\"><strong>GitHub Sponsors</strong></a> - Recurring support</li>\n      <li>☕ <a href=\"https://www.buymeacoffee.com/wonderwhyer\"><strong>Buy Me A Coffee</strong></a> - One-time contributions</li>\n      <li>💖 <a href=\"https://www.patreon.com/c/EduardsRuzga\"><strong>Patreon</strong></a> - Become a patron and support us monthly</li>\n      <li>⭐ <a href=\"https://github.com/wonderwhy-er/DesktopCommanderMCP\"><strong>Star on GitHub</strong></a> - Help others discover the project</li>\n    </ul>\n  </div>\n</div>\n\n\n### ❤️ Supporters Hall of Fame\n\nGenerous supporters are featured here. Thank you for helping make this project possible!\n\n<div align=\"center\">\n<table>\n  <tr>\n    <td align=\"center\">\n      <a href=\"https://github.com/jonrichards\">\n        <img src=\"https://github.com/jonrichards.png\" width=\"100px;\" alt=\"Jon Richards\"/>\n        <br />\n        <sub><b>Jon Richards</b></sub>\n      </a>\n    </td>\n    <td align=\"center\">\n      <a href=\"https://github.com/stepanic\">\n        <img src=\"https://github.com/stepanic.png\" width=\"100px;\" alt=\"Matija Stepanic\"/>\n        <br />\n        <sub><b>Matija Stepanic</b></sub>\n      </a>\n    </td>\n  </tr>\n</table>\n</div>\n\n<details>\n  <summary><strong>Why your support matters</strong></summary>\n  <p>Your support allows us to:</p>\n  <ul>\n    <li>Continue active development and maintenance</li>\n    <li>Add new features and integrations</li>\n    <li>Improve compatibility across platforms</li>\n    <li>Provide better documentation and examples</li>\n    <li>Build a stronger community around the project</li>\n  </ul>\n</details>\n\n## Website\n\nVisit our official website at [https://desktopcommander.app/](https://desktopcommander.app/) for the latest information, documentation, and updates.\n\n## Media\n\nLearn more about this project through these resources:\n\n### Article\n[Claude with MCPs replaced Cursor & Windsurf. How did that happen?](https://wonderwhy-er.medium.com/claude-with-mcps-replaced-cursor-windsurf-how-did-that-happen-c1d1e2795e96) - A detailed exploration of how Claude with Model Context Protocol capabilities is changing developer workflows.\n\n### Video\n[Claude Desktop Commander Video Tutorial](https://www.youtube.com/watch?v=ly3bed99Dy8) - Watch how to set up and use the Commander effectively.\n\n### Publication at AnalyticsIndiaMag\n[\nThis Developer Ditched Windsurf, Cursor Using Claude with MCPs](https://analyticsindiamag.com/ai-features/this-developer-ditched-windsurf-cursor-using-claude-with-mcps/)\n\n### Community\nJoin our [Discord server](https://discord.gg/kQ27sNnZr7) to get help, share feedback, and connect with other users.\n\n## Testimonials\n\n[![It's a life saver! I paid Claude + Cursor currently which I always feel it's kind of duplicated. This solves the problem ultimately. I am so happy. Thanks so much. Plus today Claude has added the web search support. With this MCP + Internet search, it writes the code with the latest updates. It's so good when Cursor doesn't work sometimes or all the fast requests are used.](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img.png) https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyyBt6_ShdDX_rIOad4AaABAg\n](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyyBt6_ShdDX_rIOad4AaABAg\n)\n\n[![This is the first comment I've ever left on a youtube video, THANK YOU! I've been struggling to update an old Flutter app in Cursor from an old pre null-safety version to a current version and implemented null-safety using Claude 3.7. I got most of the way but had critical BLE errors that I spent days trying to resolve with no luck. I tried Augment Code but it didn't get it either. I implemented your MCP in Claude desktop and was able to compare the old and new codebase fully, accounting for the updates in the code, and fix the issues in a couple of hours. A word of advice to people trying this, be sure to stage changes and commit when appropriate to be able to undo unwanted changes. Amazing!](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_1.png)\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgztdHvDMqTb9jiqnf54AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgztdHvDMqTb9jiqnf54AaABAg\n)\n\n[![Great! I just used Windsurf, bought license a week ago, for upgrading old fullstack socket project and it works many times good or ok but also many times runs away in cascade and have to revert all changes losing hundereds of cascade tokens. In just a week down to less than 100 tokens and do not want to buy only 300 tokens for 10$. This Claude MCP ,bought claude Pro finally needed but wanted very good reason to also have next to ChatGPT, and now can code as much as I want not worrying about token cost.\nAlso this is much more than code editing it is much more thank you for great video!](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_2.png)\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyQFTmYLJ4VBwIlmql4AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyQFTmYLJ4VBwIlmql4AaABAg)\n\n[![it is a great tool, thank you, I like using it, as it gives claude an ability to do surgical edits, making it more like a human developer.](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_3.png)\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=Ugy4-exy166_Ma7TH-h4AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=Ugy4-exy166_Ma7TH-h4AaABAg)\n\n[![You sir are my hero. You've pretty much summed up and described my experiences of late, much better than I could have. Cursor and Windsurf both had me frustrated to the point where I was almost yelling at my computer screen. Out of whimsy, I thought to myself why not just ask Claude directly, and haven't looked back since.\nClaude first to keep my sanity in check, then if necessary, engage with other IDEs, frameworks, etc. I thought I was the only one, glad to see I'm not lol.\n33\n1](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_4.png)\nhttps://medium.com/@pharmx/you-sir-are-my-hero-62cff5836a3e](https://medium.com/@pharmx/you-sir-are-my-hero-62cff5836a3e)\n\nIf you find this project useful, please consider giving it a ⭐ star on GitHub! This helps others discover the project and encourages further development.\n\nWe welcome contributions from the community! Whether you've found a bug, have a feature request, or want to contribute code, here's how you can help:\n\n- **Found a bug?** Open an issue at [github.com/wonderwhy-er/DesktopCommanderMCP/issues](https://github.com/wonderwhy-er/DesktopCommanderMCP/issues)\n- **Have a feature idea?** Submit a feature request in the issues section\n- **Want to contribute code?** Fork the repository, create a branch, and submit a pull request\n- **Questions or discussions?** Start a discussion in the GitHub Discussions tab\n\nAll contributions, big or small, are greatly appreciated!\n\nIf you find this tool valuable for your workflow, please consider [supporting the project](https://www.buymeacoffee.com/wonderwhyer).\n\n## Frequently Asked Questions\n\nHere are answers to some common questions. For a more comprehensive FAQ, see our [detailed FAQ document](FAQ.md).\n\n### What is Desktop Commander?\nIt's an MCP tool that enables Claude Desktop to access your file system and terminal, turning Claude into a versatile assistant for coding, automation, codebase exploration, and more.\n\n### How is this different from Cursor/Windsurf?\nUnlike IDE-focused tools, Claude Desktop Commander provides a solution-centric approach that works with your entire OS, not just within a coding environment. Claude reads files in full rather than chunking them, can work across multiple projects simultaneously, and executes changes in one go rather than requiring constant review.\n\n### Do I need to pay for API credits?\nNo. This tool works with Claude Desktop's standard Pro subscription ($20/month), not with API calls, so you won't incur additional costs beyond the subscription fee.\n\n### Does Desktop Commander automatically update?\nYes, when installed through npx or Smithery, Desktop Commander automatically updates to the latest version when you restart Claude. No manual update process is needed.\n\n### What are the most common use cases?\n- Exploring and understanding complex codebases\n- Generating diagrams and documentation\n- Automating tasks across your system\n- Working with multiple projects simultaneously\n- Making surgical code changes with precise control\n\n### I'm having trouble installing or using the tool. Where can I get help?\nJoin our [Discord server](https://discord.gg/kQ27sNnZr7) for community support, check the [GitHub issues](https://github.com/wonderwhy-er/DesktopCommanderMCP/issues) for known problems, or review the [full FAQ](FAQ.md) for troubleshooting tips. You can also visit our [website FAQ section](https://desktopcommander.app#faq) for a more user-friendly experience. If you encounter a new issue, please consider [opening a GitHub issue](https://github.com/wonderwhy-er/DesktopCommanderMCP/issues/new) with details about your problem.\n\n### How do I report security vulnerabilities?\nPlease create a [GitHub Issue](https://github.com/wonderwhy-er/DesktopCommanderMCP/issues) with detailed information about any security vulnerabilities you discover. See our [Security Policy](SECURITY.md) for complete guidelines on responsible disclosure.\n\n## Data Collection & Privacy\n\nDesktop Commander collects limited anonymous telemetry data to help improve the tool. No personal information, file contents, file paths, or command arguments are collected.\n\n### Usage Analytics (Local Only)\n- **Local usage statistics** are always collected and stored locally on your machine for functionality and the `get_usage_stats` tool\n- Use the `get_usage_stats` tool to view your personal usage patterns, success rates, and performance metrics\n- **This data is NOT sent anywhere** - it remains on your computer for your personal insights\n\n### Feedback System\n- Use the `give_feedback_to_desktop_commander` tool to provide feedback about Desktop Commander\n- Opens a browser-based feedback form to send suggestions and feedback to the development team\n- Only basic usage statistics (tool call count, days using, platform) are pre-filled to provide context but you can remove them\n\n### External Telemetry Opt-Out\nExternal telemetry (sent to analytics services) is enabled by default but can be disabled:\n\n1. Open the chat and simply ask:\n   **\"Disable telemetry\"**\n2. The chatbot will update your settings automatically.\n\n**Note:** This only disables external telemetry. Local usage analytics remain active for tool functionality but is not share externally\n\nFor complete details about data collection, please see our [Privacy Policy](https://legal.desktopcommander.app/privacy_desktop_commander_mcp).\n\n## Verifications\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/25ff7a06-58bc-40b8-bd79-ebb715140f1a)\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "desktopcommandermcp",
        "commands",
        "workflows",
        "file management",
        "file editing",
        "commands manage"
      ],
      "category": "file-management"
    },
    "zhanyiwp--DesktopCommanderMCP": {
      "owner": "zhanyiwp",
      "name": "DesktopCommanderMCP",
      "url": "https://github.com/zhanyiwp/DesktopCommanderMCP",
      "imageUrl": "/freedevtools/mcp/pfp/zhanyiwp.webp",
      "description": "Execute terminal commands and manage processes on a local computer. Features include advanced file editing capabilities and real-time output streaming to enhance development tasks.",
      "stars": 2,
      "forks": 1,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-05-14T08:01:01Z",
      "readme_content": "# Desktop Commander MCP\n\n\n[![npm downloads](https://img.shields.io/npm/dw/@wonderwhy-er/desktop-commander)](https://www.npmjs.com/package/@wonderwhy-er/desktop-commander)\n[![smithery badge](https://smithery.ai/badge/@wonderwhy-er/desktop-commander)](https://smithery.ai/server/@wonderwhy-er/desktop-commander)\n[![Buy Me A Coffee](https://img.shields.io/badge/Buy%20Me%20A%20Coffee-support-yellow.svg)](https://www.buymeacoffee.com/wonderwhyer)\n\n[![Discord](https://img.shields.io/badge/Join%20Discord-5865F2?style=for-the-badge&logo=discord&logoColor=white)](https://discord.gg/kQ27sNnZr7)\n\nShort version. Two key things. Terminal commands and diff based file editing.\n\n![Desktop Commander MCP](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/logo.png)\n\n<a href=\"https://glama.ai/mcp/servers/zempur9oh4\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/zempur9oh4/badge\" alt=\"Claude Desktop Commander MCP server\" />\n</a>\n\n## Table of Contents\n- [Features](#features)\n- [Installation](#installation)\n- [Usage](#usage)\n- [Handling Long-Running Commands](#handling-long-running-commands)\n- [Work in Progress and TODOs](#work-in-progress-and-todos)\n- [Media links](#media)\n- [Testimonials](#testimonials)\n- [Contributing](#contributing)\n- [License](#license)\n\nThis is server that allows Claude desktop app to execute long-running terminal commands on your computer and manage processes through Model Context Protocol (MCP) + Built on top of [MCP Filesystem Server](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem) to provide additional search and replace file editing capabilities .\n\n## Features\n\n- Execute terminal commands with output streaming\n- Command timeout and background execution support\n- Process management (list and kill processes)\n- Session management for long-running commands\n- Full filesystem operations:\n  - Read/write files\n  - Create/list directories\n  - Move files/directories\n  - Search files\n  - Get file metadata\n  - Code editing capabilities:\n  - Surgical text replacements for small changes\n  - Full file rewrites for major changes\n  - Multiple file support\n  - Pattern-based replacements\n  - vscode-ripgrep based recursive code or text search in folders\n\n## Installation\nFirst, ensure you've downloaded and installed the [Claude Desktop app](https://claude.ai/download) and you have [npm installed](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm).\n\n### Option 1: Installing via Smithery\n\nTo install Desktop Commander for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@wonderwhy-er/desktop-commander):\n\n```bash\nnpx -y @smithery/cli install @wonderwhy-er/desktop-commander --client claude\n```\n\n### Option 2: Install trough npx\nJust run this in terminal\n```\nnpx @wonderwhy-er/desktop-commander setup\n```\nRestart Claude if running\n\n### Option 3: Add to claude_desktop_config by hand\nAdd this entry to your claude_desktop_config.json (on Mac, found at ~/Library/Application\\ Support/Claude/claude_desktop_config.json):\n```json\n{\n  \"mcpServers\": {\n    \"desktop-commander\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@wonderwhy-er/desktop-commander\"\n      ]\n    }\n  }\n}\n```\nRestart Claude if running\n\n### Option 4: Checkout locally\n1. Clone and build:\n```bash\ngit clone https://github.com/wonderwhy-er/ClaudeComputerCommander.git\ncd ClaudeComputerCommander\nnpm run setup\n```\nRestart Claude if running\n\nThe setup command will:\n- Install dependencies\n- Build the server\n- Configure Claude's desktop app\n- Add MCP servers to Claude's config if needed\n\n## Usage\n\nThe server provides these tool categories:\n\n### Terminal Tools\n- `execute_command`: Run commands with configurable timeout\n- `read_output`: Get output from long-running commands\n- `force_terminate`: Stop running command sessions\n- `list_sessions`: View active command sessions\n- `list_processes`: View system processes\n- `kill_process`: Terminate processes by PID\n- `block_command`/`unblock_command`: Manage command blacklist\n\n### Filesystem Tools\n- `read_file`/`write_file`: File operations\n- `create_directory`/`list_directory`: Directory management  \n- `move_file`: Move/rename files\n- `search_files`: Pattern-based file search\n- `get_file_info`: File metadata\n- `code_search`: Recursive ripgrep based text and code search\n\n### Edit Tools\n- `edit_block`: Apply surgical text replacements (best for changes <20% of file size)\n- `write_file`: Complete file rewrites (best for large changes >20% or when edit_block fails)\n\nSearch/Replace Block Format:\n```\nfilepath.ext\n<<<<<<< SEARCH\nexisting code to replace\n=======\nnew code to insert\n>>>>>>> REPLACE\n```\n\nExample:\n```\nsrc/main.js\n<<<<<<< SEARCH\nconsole.log(\"old message\");\n=======\nconsole.log(\"new message\");\n>>>>>>> REPLACE\n```\n\n## Handling Long-Running Commands\n\nFor commands that may take a while:\n\n1. `execute_command` returns after timeout with initial output\n2. Command continues in background\n3. Use `read_output` with PID to get new output\n4. Use `force_terminate` to stop if needed\n\n## Model Context Protocol Integration\n\nThis project extends the MCP Filesystem Server to enable:\n- Local server support in Claude Desktop\n- Full system command execution\n- Process management\n- File operations\n- Code editing with search/replace blocks\n\nCreated as part of exploring Claude MCPs: https://youtube.com/live/TlbjFDbl5Us\n\n## DONE\n- **25-03-2025 Better code search** ([merged](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/17)) - Enhanced code exploration with context-aware results\n\n## Work in Progress and TODOs\n\nThe following features are currently being developed or planned:\n\n- **Better configurations** ([in progress](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/16)) - Improved settings for allowed paths, commands and shell environment\n- **Windows environment fixes** ([in progress](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/13)) - Resolving issues specific to Windows platforms\n- **Linux improvements** ([in progress](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/12)) - Enhancing compatibility with various Linux distributions\n- **Support for WSL** - Windows Subsystem for Linux integration\n- **Support for SSH** - Remote server command execution\n- **Installation troubleshooting guide** - Comprehensive help for setup issues\n\n## Website\n\nVisit our official website at [https://desktopcommander.app/](https://desktopcommander.app/) for the latest information, documentation, and updates.\n\n## Media\nLearn more about this project through these resources:\n\n### Article\n[Claude with MCPs replaced Cursor & Windsurf. How did that happen?](https://wonderwhy-er.medium.com/claude-with-mcps-replaced-cursor-windsurf-how-did-that-happen-c1d1e2795e96) - A detailed exploration of how Claude with Model Context Protocol capabilities is changing developer workflows.\n\n### Video\n[Claude Desktop Commander Video Tutorial](https://www.youtube.com/watch?v=ly3bed99Dy8) - Watch how to set up and use the Commander effectively.\n\n### Publication at AnalyticsIndiaMag\n[\nThis Developer Ditched Windsurf, Cursor Using Claude with MCPs](https://analyticsindiamag.com/ai-features/this-developer-ditched-windsurf-cursor-using-claude-with-mcps/)\n\n### Community\nJoin our [Discord server](https://discord.gg/7cbccwRp) to get help, share feedback, and connect with other users.\n\n## Testimonials\n\n[![It's a life saver! I paid Claude + Cursor currently which I always feel it's kind of duplicated. This solves the problem ultimately. I am so happy. Thanks so much. Plus today Claude has added the web search support. With this MCP + Internet search, it writes the code with the latest updates. It's so good when Cursor doesn't work sometimes or all the fast requests are used.](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img.png) https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyyBt6_ShdDX_rIOad4AaABAg\n](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyyBt6_ShdDX_rIOad4AaABAg\n)\n\n[![This is the first comment I've ever left on a youtube video, THANK YOU! I've been struggling to update an old Flutter app in Cursor from an old pre null-safety version to a current version and implemented null-safety using Claude 3.7. I got most of the way but had critical BLE errors that I spent days trying to resolve with no luck. I tried Augment Code but it didn't get it either. I implemented your MCP in Claude desktop and was able to compare the old and new codebase fully, accounting for the updates in the code, and fix the issues in a couple of hours. A word of advice to people trying this, be sure to stage changes and commit when appropriate to be able to undo unwanted changes. Amazing!](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_1.png)\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgztdHvDMqTb9jiqnf54AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgztdHvDMqTb9jiqnf54AaABAg\n)\n\n[![Great! I just used Windsurf, bought license a week ago, for upgrading old fullstack socket project and it works many times good or ok but also many times runs away in cascade and have to revert all changes loosing hundereds of cascade tokens. In just a week down to less than 100 tokens and do not want to buy only 300 tokens for 10$. This Claude MCP ,bought claude Pro finally needed but wanted very good reason to also have next to ChatGPT, and now can code as much as I want not worrying about token cost.\nAlso this is much more than code editing it is much more thank you for great video!](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_2.png)\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyQFTmYLJ4VBwIlmql4AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyQFTmYLJ4VBwIlmql4AaABAg)\n\n[![it is a great tool, thank you, I like using it, as it gives claude an ability to do surgical edits, making it more like a human developer.](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_3.png)\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=Ugy4-exy166_Ma7TH-h4AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=Ugy4-exy166_Ma7TH-h4AaABAg)\n\n[![You sir are my hero. You've pretty much summed up and described my experiences of late, much better than I could have. Cursor and Windsurf both had me frustrated to the point where I was almost yelling at my computer screen. Out of whimsy, I thought to myself why not just ask Claude directly, and haven't looked back since.\nClaude first to keep my sanity in check, then if necessary, engage with other IDEs, frameworks, etc. I thought I was the only one, glad to see I'm not lol.\n33\n1](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_4.png)\nhttps://medium.com/@pharmx/you-sir-are-my-hero-62cff5836a3e](https://medium.com/@pharmx/you-sir-are-my-hero-62cff5836a3e)\n\n## Contributing\n\nIf you find this project useful, please consider giving it a ⭐ star on GitHub! This helps others discover the project and encourages further development.\n\nWe welcome contributions from the community! Whether you've found a bug, have a feature request, or want to contribute code, here's how you can help:\n\n- **Found a bug?** Open an issue at [github.com/wonderwhy-er/ClaudeComputerCommander/issues](https://github.com/wonderwhy-er/ClaudeComputerCommander/issues)\n- **Have a feature idea?** Submit a feature request in the issues section\n- **Want to contribute code?** Fork the repository, create a branch, and submit a pull request\n- **Questions or discussions?** Start a discussion in the GitHub Discussions tab\n\nAll contributions, big or small, are greatly appreciated!\n\nIf you find this tool valuable for your workflow, please consider [supporting the project](https://www.buymeacoffee.com/wonderwhyer).\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "desktopcommandermcp",
        "commands",
        "terminal",
        "zhanyiwp desktopcommandermcp",
        "file management",
        "commands manage"
      ],
      "category": "file-management"
    },
    "zhixiaoqiang--desktop-image-manager-mcp": {
      "owner": "zhixiaoqiang",
      "name": "desktop-image-manager-mcp",
      "url": "https://github.com/zhixiaoqiang/desktop-image-manager-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/zhixiaoqiang.webp",
      "description": "Manage and optimize desktop images by counting, viewing, and compressing image files in formats like JPG, PNG, and WebP. Customizable quality settings enhance efficiency in image management tasks.",
      "stars": 3,
      "forks": 2,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-19T08:01:56Z",
      "readme_content": "# Desktop Image Manager MCP Server\n\n基于 Model Context Protocol (MCP) 开发的桌面图片管理服务器，提供图片文件统计、查看和压缩功能。\n\n<a href=\"https://glama.ai/mcp/servers/@zhixiaoqiang/desktop-image-manager-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@zhixiaoqiang/desktop-image-manager-mcp/badge\" alt=\"Desktop Image Manager Server MCP server\" />\n</a>\n\n## 操作示例：\n[![示例图片](https://github.com/zhixiaoqiang/desktop-image-manager-mcp/blob/main/assets/example.png?raw=true)](https://claude.ai/share/0ffbad1e-502e-4188-b008-0bb966acf06d)\n[https://claude.ai/share/0ffbad1e-502e-4188-b008-0bb966acf06d](https://claude.ai/share/0ffbad1e-502e-4188-b008-0bb966acf06d)\n\n## 功能特性\n\n- 统计桌面图片数量：快速获取桌面上的图片文件总数\n- 获取图片列表：列出桌面上所有图片文件的名称\n- 图片压缩：支持压缩 JPG、PNG、WebP 等格式的图片文件，可自定义压缩质量\n\n## 实现提示\n\n让 Trae 引用 `./demand.md` 进行功能代码生成，简化版如下\n\n```plaintext\n... （这里是已经引入的 domain knowledge）\n\n打造一个 MCP 服务器，它能够：\n- 功能：\n  - 统计当前桌面上的图片文件数量\n  - 获取对应文件的名称\n  - 支持压缩图片\n\n要求：\n- 不需要给出 prompt 和 resource 相关代码。\n- 你可以假设我的桌面路径为 /Users/{username}/Desktop\n```\n\n## 支持的图片格式\n\n- JPG/JPEG\n- PNG\n- GIF\n- BMP\n- WebP\n- TIFF\n- SVG\n\n## 环境要求\n\n- Node.js >= 16\n- pnpm >= 8\n\n## 安装\n\n```bash\n# 克隆项目\ngit clone <repository-url>\ncd desktop-image-manager\n\n# 安装依赖\npnpm install\n```\n\n## 开发\n\n```bash\n# 启动开发服务器\npnpm dev\n```\n\n## 构建和运行\n```bash\n# 构建项目\npnpm build\n\n# 运行服务器\npnpm start\n```\n\n## 调试\n\n```bash\n# 调试 MCP 服务\npnpm inspector\n```\n\n## MCP 工具使用说明\n### 1. 统计桌面图片数量\n```bash\n# 构建项目\npnpm build\n\n# 运行服务器\npnpm start\n```\n\n### 2. 获取图片列表\n```typescript\n// 工具名称: list-desktop-images\n// 参数: 无\nawait client.callTool({\n  name: \"list-desktop-images\"\n});\n```\n\n### 3. 压缩图片\n```typescript\n// 工具名称: compress-image\n// 参数:\n// - fileName: 要压缩的图片文件名\n// - quality: 压缩质量 (1-100)，默认 80\n// - outputName: 输出文件名（可选）\nawait client.callTool({\n  name: \"compress-image\",\n  arguments: {\n    fileName: \"example.jpg\",\n    quality: 75,\n    outputName: \"example-compressed.jpg\"\n  }\n});\n```\n\n## 开发\n\n```bash\n# 启动开发服务器\npnpm dev\n```\n\n## 安装\n使用 Claude Desktop 添加如下配置 config:\n\nMacOS: ~/Library/Application Support/Claude/claude_desktop_config.json Windows: %APPDATA%/Claude/claude_desktop_config.json\n\n```json\n{\n  \"desktop-image-manager\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@jzone-mcp/desktop-image-manager-mcp\"\n      ]\n    }\n}\n```\n\n## 注意事项\n1. 确保有足够的桌面访问权限\n2. 大文件压缩可能需要较长时间\n3. 压缩后的文件默认保存在桌面，文件名会添加 \"-compressed\" 后缀\n## 技术栈\n- TypeScript\n- MCP SDK\n- Sharp (图片处理)\n- fs-extra (文件操作)\n- zod (参数验证)\n\n## 许可证\nMIT License\n```plaintext\n这个 README 文件包含了项目的主要信息、安装说明、使用方法和注意事项。如果您需要添加或修改任何内容，请告诉我。\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "jpg",
        "png",
        "images",
        "image manager",
        "image management",
        "desktop images"
      ],
      "category": "file-management"
    }
  }
}