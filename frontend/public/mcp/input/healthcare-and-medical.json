{
  "category": "healthcare-and-medical",
  "categoryDisplay": "Healthcare and Medical",
  "description": "",
  "totalRepositories": 18,
  "repositories": {
    "ChristianHinge--dicom-mcp": {
      "owner": "ChristianHinge",
      "name": "dicom-mcp",
      "url": "https://github.com/ChristianHinge/dicom-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ChristianHinge.webp",
      "description": "Enables interaction with DICOM servers for querying patient information and analyzing medical imaging metadata. Extracts text from encapsulated PDF documents in DICOM format to enhance clinical report analysis and streamline medical data access.",
      "stars": 66,
      "forks": 21,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T17:50:16Z",
      "readme_content": "# DICOM MCP Server for Medical Imaging Systems üè•\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Python Version](https://img.shields.io/badge/python-3.12+-blue.svg)](https://www.python.org/downloads/)\n [![PyPI Version](https://img.shields.io/pypi/v/dicom-mcp.svg)](https://pypi.org/project/dicom-mcp/) [![PyPI Downloads](https://img.shields.io/pypi/dm/dicom-mcp.svg)](https://pypi.org/project/dicom-mcp/)  \n\nThe `dicom-mcp` server enables AI assistants to query, read, and move data on DICOM servers (PACS, VNA, etc.). \n\n<div align=\"center\">\n\nü§ù **[Contribute](#contributing)** ‚Ä¢\nüìù **[Report Bug](https://github.com/ChristianHinge/dicom-mcp/issues)**  ‚Ä¢\nüìù **[Blog Post 1](https://www.christianhinge.com/projects/dicom-mcp/)** \n\n</div>\n\n```text\n---------------------------------------------------------------------\nüßë‚Äç‚öïÔ∏è User: \"Any significant findings in John Doe's previous CT report?\"\n\nüß† LLM ‚Üí ‚öôÔ∏è Tools:\n   query_patients ‚Üí query_studies ‚Üí query_series ‚Üí extract_pdf_text_from_dicom\n\nüí¨ LLM Response: \"The report from 2025-03-26 mentions a history of splenomegaly (enlarged spleen)\"\n\nüßë‚Äç‚öïÔ∏è User: \"What's the volume of his spleen at the last scan and the scan today?\"\n\nüß† LLM ‚Üí ‚öôÔ∏è Tools:\n   (query_studies ‚Üí query_series ‚Üí move_series ‚Üí query_series ‚Üí extract_pdf_text_from_dicom) x2\n   (The move_series tool sends the latest CT to a DICOM segmentation node, which returns volume PDF report)\n\nüí¨ LLM Response: \"last year 2024-03-26: 412cm¬≥, today 2025-04-10: 350cm¬≥\"\n---------------------------------------------------------------------\n```\n\n\n## ‚ú® Core Capabilities\n\n`dicom-mcp` provides tools to:\n\n* **üîç Query Metadata**: Search for patients, studies, series, and instances using various criteria.\n* **üìÑ Read DICOM Reports (PDF)**: Retrieve DICOM instances containing encapsulated PDFs (e.g., clinical reports) and extract the text content.\n* **‚û°Ô∏è Send DICOM Images**: Send series or studies to other DICOM destinations, e.g. AI endpoints for image segmentation, classification, etc.\n* **‚öôÔ∏è Utilities**: Manage connections and understand query options.\n\n## üöÄ Quick Start\n### üì• Installation\nInstall using uv or pip:\n\n```bash\nuv tool install dicom-mcp\n```\nOr by cloning the repository:\n\n```bash\n# Clone and set up development environment\ngit clone https://github.com/ChristianHinge/dicom-mcp\ncd dicom mcp\n\n# Create and activate virtual environment\nuv venv\nsource .venv/bin/activate\n\n# Install with test dependencies\nuv pip install -e \".[dev]\"\n```\n\n\n### ‚öôÔ∏è Configuration\n\n`dicom-mcp` requires a YAML configuration file (`config.yaml` or similar) defining DICOM nodes and calling AE titles. Adapt the configuration or keep as is for compatibility with the sample ORTHANC  Server.\n\n```yaml\nnodes:\n  main:\n    host: \"localhost\"\n    port: 4242 \n    ae_title: \"ORTHANC\"\n    description: \"Local Orthanc DICOM server\"\n\ncurrent_node: \"main\"\ncalling_aet: \"MCPSCU\" \n```\n> [!WARNING]\nDICOM-MCP is not meant for clinical use, and should not be connected with live hospital databases or databases with patient-sensitive data. Doing so could lead to both loss of patient data, and leakage of patient data onto the internet. DICOM-MCP can be used with locally hosted open-weight LLMs for complete data privacy. \n\n### (Optional) Sample ORTHANC server\nIf you don't have a DICOM server available, you can run a local ORTHANC server using Docker:\n\nClone the repository and install test dependencies `pip install -e \".[dev]`\n\n```bash\ncd tests\ndocker ocmpose up -d\ncd ..\npytest # uploads dummy pdf data to ORTHANC server\n```\nUI at [http://localhost:8042](http://localhost:8042)\n\n### üîå MCP Integration\n\nAdd to your client configuration (e.g. `claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"dicom\": {\n      \"command\": \"uv\",\n      \"args\": [\"tool\",\"dicom-mcp\", \"/path/to/your_config.yaml\"]\n    }\n  }\n}\n```\n\nFor development:\n\n```json\n{\n    \"mcpServers\": {\n        \"arxiv-mcp-server\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"path/to/cloned/dicom-mcp\",\n                \"run\",\n                \"dicom-mcp\",\n                \"/path/to/your_config.yaml\"\n            ]\n        }\n    }\n}\n```\n\n\n## üõ†Ô∏è Tools Overview\n\n`dicom-mcp` provides four categories of tools for interaction with DICOM servers and DICOM data. \n\n### üîç Query Metadata\n\n* **`query_patients`**: Search for patients based on criteria like name, ID, or birth date.\n* **`query_studies`**: Find studies using patient ID, date, modality, description, accession number, or Study UID.\n* **`query_series`**: Locate series within a specific study using modality, series number/description, or Series UID.\n* **`query_instances`**: Find individual instances (images/objects) within a series using instance number or SOP Instance UID\n### üìÑ Read DICOM Reports (PDF)\n\n* **`extract_pdf_text_from_dicom`**: Retrieve a specific DICOM instance containing an encapsulated PDF and extract its text content.\n\n### ‚û°Ô∏è Send DICOM Images\n\n* **`move_series`**: Send a specific DICOM series to another configured DICOM node using C-MOVE.\n* **`move_study`**: Send an entire DICOM study to another configured DICOM node using C-MOVE.\n\n### ‚öôÔ∏è Utilities\n\n* **`list_dicom_nodes`**: Show the currently active DICOM node and list all configured nodes.\n* **`switch_dicom_node`**: Change the active DICOM node for subsequent operations.\n* **`verify_connection`**: Test the DICOM network connection to the currently active node using C-ECHO.\n* **`get_attribute_presets`**: List the available levels of detail (minimal, standard, extended) for metadata query results.<p>\n\n\n### Example interaction\nThe tools can be chained together to answer complex questions:\n\n\n<div align=\"center\">\n<img src=\"images/example.png\" alt=\"My Awesome Diagram\" width=\"700\">\n</div>\n\n\n## üìà Contributing\n### Running Tests\n\nTests require a running Orthanc DICOM server. You can use Docker:\n\n```bash\n# Navigate to the directory containing docker-compose.yml (e.g., tests/)\ncd tests\ndocker-compose up -d\n```\n\nRun tests using pytest:\n\n```bash\n# From the project root directory\npytest\n```\n\nStop the Orthanc container:\n\n```bash\ncd tests\ndocker-compose down\n```\n\n### Debugging\n\nUse the MCP Inspector for debugging the server communication:\n\n```bash\nnpx @modelcontextprotocol/inspector uv run dicom-mcp /path/to/your_config.yaml --transport stdio\n```\n\n## üôè Acknowledgments\n\n* Built using [pynetdicom](https://github.com/pydicom/pynetdicom)\n* Uses [PyPDF2](https://pypi.org/project/PyPDF2/) for PDF text extraction\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "dicom",
        "clinical",
        "medical",
        "documents dicom",
        "dicom format",
        "dicom mcp"
      ],
      "category": "healthcare-and-medical"
    },
    "HealthNoteLabs--Npub.Health": {
      "owner": "HealthNoteLabs",
      "name": "Npub.Health",
      "url": "https://github.com/HealthNoteLabs/Npub.Health",
      "imageUrl": "/freedevtools/mcp/pfp/HealthNoteLabs.webp",
      "description": "Manage health records securely with a user-controlled platform, enabling selective sharing of health data while maintaining privacy through end-to-end encryption.",
      "stars": 2,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-30T16:46:32Z",
      "readme_content": "# Npub.Health\n\nA decentralized health records platform built on Nostr protocol.\n\n## Project Overview\n\nNpub.Health provides a secure, user-controlled platform for managing health data using the Nostr protocol. This application gives individuals ownership over their health information while enabling selective sharing with healthcare providers.\n\n## Features\n\n- Secure health record storage using Nostr protocol\n- User-controlled data sharing and permissions\n- Provider verification system\n- Cross-platform support (web, mobile)\n- End-to-end encryption for sensitive health data\n\n## Tech Stack\n\n- **Frontend**: React, TypeScript, TailwindCSS\n- **Backend**: Node.js\n- **Database**: SQLite with Drizzle ORM\n- **Protocol**: Nostr\n\n## Getting Started\n\n### Prerequisites\n\n- Node.js v18 or higher\n- npm or yarn\n\n### Installation\n\n1. Clone the repository\n   ```bash\n   git clone https://github.com/HealthNoteLabs/Npub.Health.git\n   cd Npub.Health\n   ```\n\n2. Install dependencies\n   ```bash\n   npm install\n   ```\n\n3. Set up environment variables\n   ```bash\n   cp .env.example .env\n   # Edit .env with your configuration\n   ```\n\n4. Start the development server\n   ```bash\n   npm run dev\n   ```\n\n### Project Structure\n\n```\nNpub.Health/\n‚îú‚îÄ‚îÄ client/           # Frontend React application\n‚îú‚îÄ‚îÄ server/           # Backend Node.js server\n‚îú‚îÄ‚îÄ shared/           # Shared utilities and types\n‚îú‚îÄ‚îÄ scripts/          # Utility scripts\n‚îî‚îÄ‚îÄ ...\n```\n\n## Development\n\n### Running the app in development mode\n\n```bash\nnpm run dev\n```\n\n### Building for production\n\n```bash\nnpm run build\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Contact\n\nFor any questions or feedback, please open an issue on this repository.\n\n## AWS Integration for Blossom Server Deployment\n\nThis project includes AWS integration to automatically deploy Blossom servers for users. The implementation allows users to create their own private Blossom servers on AWS EC2 instances.\n\n### Setup Steps\n\n1. **Install AWS SDK**:\n   ```\n   npm install @aws-sdk/client-ec2\n   ```\n\n2. **Create Security Groups**:\n   The `scripts/create_aws_security_groups.js` script will create the necessary security groups in each AWS region:\n   ```\n   node scripts/create_aws_security_groups.js\n   ```\n   Make sure to update the VPC ID in the script for each region.\n\n3. **Configure AWS Credentials**:\n   Create a `.env` file with the following variables:\n   ```\n   AWS_ACCESS_KEY_ID=your_access_key_id\n   AWS_SECRET_ACCESS_KEY=your_secret_access_key\n   \n   # Security Groups for each region (output from the script)\n   SECURITY_GROUP_US_EAST=sg-xxxxxxxxxxxxxxxx\n   SECURITY_GROUP_US_WEST=sg-xxxxxxxxxxxxxxxx\n   SECURITY_GROUP_EU_CENTRAL=sg-xxxxxxxxxxxxxxxx\n   SECURITY_GROUP_AP_SOUTHEAST=sg-xxxxxxxxxxxxxxxx\n   \n   # Database URL\n   DATABASE_URL=postgres://postgres:postgres@localhost:5432/npubhealth\n   ```\n\n4. **Set up PostgreSQL database**:\n   Follow these steps to set up the database:\n   - Install PostgreSQL\n   - Create a database named `npubhealth`\n   - Run migrations to create tables:\n     ```\n     npm run db:push\n     ```\n\n5. **Test the integration**:\n   ```\n   npm run dev\n   ```\n\n### Architecture\n\nThe AWS integration consists of:\n\n1. **EC2 Manager** (`server/aws/ec2Manager.ts`): Handles creating and checking EC2 instances.\n2. **Server Monitor** (`server/aws/serverMonitor.ts`): Periodically checks and updates server status.\n3. **API Endpoints** (`server/routes.ts`): Provides REST endpoints for server management.\n4. **Database Integration** (`server/db`): Persists server information and status.\n\n### User Flow\n\n1. User selects a server tier, region, and name\n2. System generates a payment address\n3. User sends payment (simulated in development)\n4. System deploys an EC2 instance with the Blossom server installation script\n5. UI polls for server status until it's running\n6. User connects to their personal Blossom server\n\n### Security Considerations\n\n- The security groups allow HTTP, HTTPS, and the Blossom server port (3000)\n- SSH access should be restricted to specific IPs in production\n- AWS credentials should have limited permissions following the principle of least privilege\n- For production, consider using IAM roles instead of credentials\n\n### Troubleshooting\n\nIf you encounter issues:\n\n1. Check AWS credentials and permissions\n2. Verify that security groups are properly configured\n3. Look at server logs for deployment errors\n4. Check the database for server status information\n\nFor more information about the AWS SDK, refer to the [official documentation](https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/welcome.html). ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "healthnotelabs",
        "npub",
        "healthcare",
        "healthnotelabs npub",
        "npub health",
        "medical healthnotelabs"
      ],
      "category": "healthcare-and-medical"
    },
    "JackKuo666--ClinicalTrials-MCP-Server": {
      "owner": "JackKuo666",
      "name": "ClinicalTrials-MCP-Server",
      "url": "https://github.com/JackKuo666/ClinicalTrials-MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/JackKuo666.webp",
      "description": "Connects to ClinicalTrials.gov to search for and access detailed clinical trial information programmatically, facilitating efficient data retrieval for health sciences research and analysis.",
      "stars": 13,
      "forks": 7,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-02T06:11:52Z",
      "readme_content": "# ClinicalTrials MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@JackKuo666/clinicaltrials-mcp-server)](https://smithery.ai/server/@JackKuo666/clinicaltrials-mcp-server)\n\nüîç Enable AI assistants to search and access ClinicalTrials.gov data through a simple MCP interface.\n\nThe ClinicalTrials MCP Server provides a bridge between AI assistants and ClinicalTrials.gov's clinical trial repository through the Model Context Protocol (MCP). It allows AI models to search for clinical trials and access their content in a programmatic way.\n\nü§ù Contribute ‚Ä¢ üìù Report Bug\n\n## ‚ú® Core Features\n- üîé Trial Search: Query clinical trials with custom search strings or advanced search parameters ‚úÖ\n- üöÄ Efficient Retrieval: Fast access to trial metadata ‚úÖ\n- üìä Metadata Access: Retrieve detailed metadata for specific trials using NCT ID ‚úÖ\n- üìä Research Support: Facilitate health sciences research and analysis ‚úÖ\n- üìã CSV Management: Save, load, and list CSV files with trial data ‚úÖ\n- üóÉÔ∏è Local Storage: Trials are saved locally for faster access ‚úÖ\n- üìä Statistics: Get statistics about clinical trials ‚úÖ\n\n## üöÄ Quick Start\n\n### Installing via Smithery\n\nTo install ClinicalTrials Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/ClinicalTrials-mcp-server):\n\n#### Claude\n\n```bash\nnpx -y @smithery/cli@latest install ClinicalTrials-mcp-server --client claude --config \"{}\"\n```\n\n#### Cursor\n\nPaste the following into Settings ‚Üí Cursor Settings ‚Üí MCP ‚Üí Add new server: \n- Mac/Linux  \n```s\nnpx -y @smithery/cli@latest run ClinicalTrials-mcp-server --client cursor --config \"{}\" \n```\n#### Windsurf\n```sh\nnpx -y @smithery/cli@latest install ClinicalTrials-mcp-server --client windsurf --config \"{}\"\n```\n### CLine\n```sh\nnpx -y @smithery/cli@latest install ClinicalTrials-mcp-server --client cline --config \"{}\"\n```\n\n\n### Installing Manually\nInstall using uv:\n\n```bash\nuv tool install ClinicalTrials-mcp-server\n```\n\nFor development:\n\n```bash\n# Clone and set up development environment\ngit clone https://github.com/JackKuo666/ClinicalTrials-MCP-Server.git\ncd ClinicalTrials-MCP-Server\n\n# Create and activate virtual environment\nuv venv\nsource .venv/bin/activate\nuv pip install -r requirements.txt\n```\n\n## üìä Usage\n\nStart the MCP server:\n\n```bash\npython clinical_trials_server.py\n```\n\nOnce the server is running, you can use the provided MCP tools in your AI assistant or application. Here are some examples of how to use the tools:\n\n### Example 1: Search for clinical trials using a search expression and save to CSV\n\n```python\nresult = await mcp.use_tool(\"search_clinical_trials_and_save_studies_to_csv\", {\n    \"search_expr\": \"COVID-19 vaccine efficacy\",\n    \"max_studies\": 5\n})\nprint(result)\n```\n\n### Example 2: Get studies by keyword\n\n```python\nresult = await mcp.use_tool(\"get_studies_by_keyword\", {\n    \"keyword\": \"diabetes\",\n    \"max_studies\": 10\n})\nprint(result)\n```\n\n### Example 3: Get full study details for a specific trial\n\n```python\nresult = await mcp.use_tool(\"get_full_study_details\", {\n    \"nct_id\": \"NCT04280705\"\n})\nprint(result)\n```\n\n### Example 4: Search and save studies with custom fields\n\n```python\nresult = await mcp.use_tool(\"search_clinical_trials_and_save_studies_to_csv\", {\n    \"search_expr\": \"alzheimer\",\n    \"max_studies\": 20,\n    \"filename\": \"alzheimer_studies.csv\",\n    \"fields\": [\"NCT Number\", \"Study Title\", \"Brief Summary\", \"Conditions\"]\n})\nprint(result)\n```\n\nThese examples demonstrate how to use the main tools provided by the ClinicalTrials MCP Server. Adjust the parameters as needed for your specific use case.\n\n## üõ† MCP Tools\n\nThe ClinicalTrials MCP Server provides the following tools:\n\n### search_clinical_trials_and_save_studies_to_csv\n\nSearch for clinical trials using a search expression and save the results to a CSV file.\n\n**Parameters:**\n- `search_expr` (str): Search expression (e.g., \"Coronavirus+COVID\")\n- `max_studies` (int, optional): Maximum number of studies to return (default: 10)\n- `save_csv` (bool, optional): Whether to save the results as a CSV file (default: True)\n- `filename` (str, optional): Name of the CSV file to save (default: corona_fields.csv)\n- `fields` (list, optional): List of fields to include (default: NCT Number, Conditions, Study Title, Brief Summary)\n\n**Returns:** String representation of the search results\n\n### get_full_study_details\n\nGet detailed information about a specific clinical trial.\n\n**Parameters:**\n- `nct_id` (str): The NCT ID of the clinical trial\n\n**Returns:** String representation of the study details\n\n### get_studies_by_keyword\n\nGet studies related to a specific keyword.\n\n**Parameters:**\n- `keyword` (str): Keyword to search for\n- `max_studies` (int, optional): Maximum number of studies to return (default: 20)\n- `save_csv` (bool, optional): Whether to save the results as a CSV file (default: True)\n- `filename` (str, optional): Name of the CSV file to save (default: keyword_results_{keyword}.csv)\n\n**Returns:** String representation of the studies\n\n### get_study_statistics\n\nGet statistics about clinical trials.\n\n**Parameters:**\n- `condition` (str, optional): Optional condition to filter by\n\n**Returns:** String representation of the statistics\n\n### get_full_studies_and_save\n\nGet full studies data and save to CSV.\n\n**Parameters:**\n- `search_expr` (str): Search expression (e.g., \"Coronavirus+COVID\")\n- `max_studies` (int, optional): Maximum number of studies to return (default: 20)\n- `filename` (str, optional): Name of the CSV file to save (default: full_studies.csv)\n\n**Returns:** Message indicating the results were saved\n\n### load_csv_data\n\nLoad and display data from a CSV file.\n\n**Parameters:**\n- `filename` (str): Name of the CSV file to load\n\n**Returns:** String representation of the CSV data\n\n### list_saved_csv_files\n\nList all available CSV files in the current directory.\n\n**Returns:** String representation of the available CSV files\n\n## üîç MCP Resources\n\nThe ClinicalTrials MCP Server also provides the following resources:\n\n### clinicaltrials://corona_fields\n\nGet the corona fields data as a resource.\n\n### clinicaltrials://full_studies\n\nGet the full studies data as a resource.\n\n### clinicaltrials://csv/{filename}\n\nGet data from a specific CSV file.\n\n**Parameters:**\n- `filename` (str): Name of the CSV file\n\n### clinicaltrials://available_files\n\nGet a list of all available CSV files.\n\n### clinicaltrials://study/{nct_id}\n\nGet a specific study by NCT ID.\n\n**Parameters:**\n- `nct_id` (str): The NCT ID of the clinical trial\n\n### clinicaltrials://condition/{condition}\n\nGet studies related to a specific condition.\n\n**Parameters:**\n- `condition` (str): The condition to search for\n\n## Usage with Claude Desktop\n\nAdd this configuration to your `claude_desktop_config.json`:\n\n(Mac OS)\n\n```json\n{\n  \"mcpServers\": {\n    \"ClinicalTrials\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"ClinicalTrials-mcp-server\"]\n      }\n  }\n}\n```\n\n(Windows version):\n\n```json\n{\n  \"mcpServers\": {\n    \"ClinicalTrials\": {\n      \"command\": \"C:\\\\Users\\\\YOUR_USERNAME\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python311\\\\python.exe\",\n      \"args\": [\n        \"-m\",\n        \"ClinicalTrials-mcp-server\"\n      ]\n    }\n  }\n}\n```\nUsing with Cline\n```json\n{\n  \"mcpServers\": {\n    \"ClinicalTrials\": {\n      \"command\": \"bash\",\n      \"args\": [\n        \"-c\",\n        \"source /home/YOUR/PATH/ClinicalTrials-MCP-Server/.venv/bin/activate && python /home/YOUR/PATH/ClinicalTrials-MCP-Server/clinical_trials_server.py\"\n      ],\n      \"env\": {},\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nAfter restarting Claude Desktop, the following capabilities will be available:\n\n### Searching Clinical Trials\n\nYou can ask Claude to search for clinical trials using queries like:\n```\nCan you search for recent clinical trials about diabetes?\n```\n\nThe search will return basic information about matching trials including:\n\n‚Ä¢ Trial title\n\n‚Ä¢ NCT Number\n\n‚Ä¢ Conditions\n\n‚Ä¢ Brief Summary\n\n\n### Getting Trial Details\n\nOnce you have an NCT ID, you can ask for more details:\n```\nCan you show me the details for trial NCT04280705?\n```\n\nThis will return:\n\n‚Ä¢ Full trial title\n\n‚Ä¢ Conditions\n\n‚Ä¢ Brief Summary\n\n‚Ä¢ Other available details\n\n\n## üìÅ Project Structure\n\n- `clinical_trials_server.py`: The main MCP server implementation using FastMCP\n- `clinical_trials.py`: Contains helper functions for interacting with the ClinicalTrials.gov API\n\n## üîß Dependencies\n\n- Python 3.10+\n- FastMCP\n- pytrials\n- pandas\n\nYou can install the required dependencies using:\n\n```bash\npip install FastMCP pytrials pandas\n```\n\n## ü§ù Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## üìÑ License\n\nThis project is licensed under the MIT License.\n\n## ‚ö†Ô∏è Disclaimer\n\nThis tool is for research purposes only. Please respect ClinicalTrials.gov's terms of service and use this tool responsibly.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "clinical",
        "clinicaltrials",
        "mcp",
        "jackkuo666 clinicaltrials",
        "clinicaltrials mcp",
        "medical jackkuo666"
      ],
      "category": "healthcare-and-medical"
    },
    "NitayRabi--fitbit-mcp": {
      "owner": "NitayRabi",
      "name": "fitbit-mcp",
      "url": "https://github.com/NitayRabi/fitbit-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/NitayRabi.webp",
      "description": "Enables access and analysis of Fitbit health and fitness data, including activities, sleep logs, heart rate, steps, and body measurements through simple commands. Facilitates integration of Fitbit data insights into AI interactions.",
      "stars": 6,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-19T18:39:25Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/nitayrabi-fitbit-mcp-badge.png)](https://mseep.ai/app/nitayrabi-fitbit-mcp)\n\n# Fitbit MCP (Model Context Protocol)\n[![smithery badge](https://smithery.ai/badge/@NitayRabi/fitbit-mcp)](https://smithery.ai/server/@NitayRabi/fitbit-mcp)\n\n**Disclaimer:** This is an unofficial integration built using Fitbit's public API and is not affiliated with or endorsed by Fitbit Inc.\n\nA Model Context Protocol (MCP) implementation for Fitbit, enabling AI assistants to access and analyze your Fitbit health and fitness data.\n\n## Usage\n\nFor JSON configuration (for use with AI assistant frameworks):\n\n```json\n{\n  \"command\": \"npx\",\n  \"args\": [\"-y\", \"fitbit-mcp\", \"--stdio\"],\n  \"env\": {\n    \"FITBIT_ACCESS_TOKEN\": \"YOUR_FITBIT_ACCESS_TOKEN\"\n  }\n}\n```\n\nOr with arguments instead of environment variables:\n\n```json\n{\n  \"command\": \"npx\",\n  \"args\": [\"-y\", \"fitbit-mcp\", \"--stdio\", \"--fitbit-token=YOUR_FITBIT_ACCESS_TOKEN\"]\n}\n```\n\n## Available Tools\n\nThis MCP provides the following tools for AI assistants to access your Fitbit data:\n\n- **getUserProfile**: Get your Fitbit profile information\n- **getActivities**: Get activity data for a specified date\n- **getSleepLogs**: Get sleep data for a specified date\n- **getHeartRate**: Get heart rate data for a specified date and period\n- **getSteps**: Get step count for a specified date and period\n- **getBodyMeasurements**: Get weight and body fat data\n- **getFoodLogs**: Get food log data for a specified date\n- **getWaterLogs**: Get water consumption data for a specified date\n- **getLifetimeStats**: Get lifetime activity statistics\n- **getUserSettings**: Get user settings and preferences\n- **getFloorsClimbed**: Get floors climbed data\n- **getDistance**: Get distance data\n- **getCalories**: Get calories burned data\n- **getActiveZoneMinutes**: Get active zone minutes data\n- **getDevices**: Get information about connected Fitbit devices\n- **getBadges**: Get earned badges and achievements\n\nMost tools accept optional parameters:\n- `date`: Date in YYYY-MM-DD format (defaults to today)\n- `period`: Time period for data (1d, 7d, 30d, 1w, 1m)\n\n## Obtaining a Fitbit Access Token\n\nTo get a Fitbit access token:\n\n1. Create an application at [Fitbit Developer Portal](https://dev.fitbit.com/apps/new)\n2. Set OAuth 2.0 Application Type to \"Personal\"\n3. Set Callback URL to \"http://localhost:3000\"\n4. After creating the application, note your Client ID and Client Secret\n5. Use the OAuth 2.0 authorization flow to obtain an access token\n\nFor detailed instructions on OAuth authentication, see the [Fitbit API Documentation](https://dev.fitbit.com/build/reference/web-api/oauth2/).\n\n## Contributing\n\nContributions are welcome! Here's how you can contribute:\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\nEvery pull request triggers a GitHub Actions workflow that verifies the build process.\n\n### Development Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/your-username/fitbit-mcp.git\ncd fitbit-mcp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Run in development mode\nnpm run dev\n```\n\n### Release Process\n\nTo publish a new version to NPM:\n\n1. Update the version in `package.json`\n2. Create a new GitHub release with a tag like `v1.0.1`\n3. The GitHub Actions workflow will automatically build and publish the package to NPM\n\nMake sure you have the `NPM_TOKEN` secret configured in your GitHub repository settings.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fitbit",
        "fitness",
        "nitayrabi",
        "fitbit health",
        "nitayrabi fitbit",
        "fitbit mcp"
      ],
      "category": "healthcare-and-medical"
    },
    "Wendong-Fan--HowToLiveLonger": {
      "owner": "Wendong-Fan",
      "name": "HowToLiveLonger",
      "url": "https://github.com/Wendong-Fan/HowToLiveLonger",
      "imageUrl": "/freedevtools/mcp/pfp/Wendong-Fan.webp",
      "description": "Provides evidence-based lifestyle insights aimed at improving longevity through nutrition, exercise, and wellness practices. Users can explore actionable recommendations to reduce mortality risk.",
      "stars": 13,
      "forks": 0,
      "license": "The Unlicense",
      "language": "",
      "updated_at": "2025-09-11T07:34:26Z",
      "readme_content": "# Á®ãÂ∫èÂëòÂª∂ÂØøÊåáÂçó\n\n[![CN doc](https://img.shields.io/badge/ÊñáÊ°£-‰∏≠ÊñáÁâà-blue.svg)](README.md)\n[![EN doc](https://img.shields.io/badge/document-English-blue.svg)](README_en.md)\n[![MetaGPT](https://img.shields.io/badge/ÂáèÂ∞ëÂ∑•‰ΩúÊó∂Èó¥-MetaGPT-blue)](https://github.com/geekan/MetaGPT)\n\n\n- [1. ÊúØËØ≠](#1-ÊúØËØ≠)\n- [2. ÁõÆÊ†á](#2-ÁõÆÊ†á)\n- [3. ÂÖ≥ÈîÆÁªìÊûú](#3-ÂÖ≥ÈîÆÁªìÊûú)\n- [4. ÂàÜÊûê](#4-ÂàÜÊûê)\n- [5. Ë°åÂä®](#5-Ë°åÂä®)\n- [6. ËØÅÊçÆ](#6-ËØÅÊçÆ)\n  - [6.1. ËæìÂÖ•](#61-ËæìÂÖ•)\n    - [6.1.1. Âõ∫‰Ωì](#611-Âõ∫‰Ωì)\n    - [6.1.2. Ê∂≤‰Ωì](#612-Ê∂≤‰Ωì)\n    - [6.1.3. Ê∞î‰Ωì](#613-Ê∞î‰Ωì)\n    - [6.1.4. ÂÖâÁÖß](#614-ÂÖâÁÖß)\n    - [6.1.5. ËçØÁâ©](#615-ËçØÁâ©)\n  - [6.2. ËæìÂá∫](#62-ËæìÂá∫)\n    - [6.2.1. Êå•ÊãçËøêÂä®](#621-Êå•ÊãçËøêÂä®)\n    - [6.2.2. ÂâßÁÉàËøêÂä®](#622-ÂâßÁÉàËøêÂä®)\n    - [6.2.3. Ëµ∞Ë∑Ø](#623-Ëµ∞Ë∑Ø)\n    - [6.2.4. Âà∑Áâô](#624-Âà∑Áâô)\n    - [6.2.5. Ê≥°Êæ°](#625-Ê≥°Êæ°)\n    - [6.2.6. ÂÅöÂÆ∂Âä°ÔºàËÄÅÂπ¥Áî∑ÊÄßÔºâ](#626-ÂÅöÂÆ∂Âä°ËÄÅÂπ¥Áî∑ÊÄß)\n    - [6.2.7. Áù°Áú†](#627-Áù°Áú†)\n    - [6.2.8. ‰πÖÂùê](#628-‰πÖÂùê)\n  - [6.3. ‰∏ä‰∏ãÊñá](#63-‰∏ä‰∏ãÊñá)\n    - [6.3.1. ÊÉÖÁª™](#631-ÊÉÖÁª™)\n    - [6.3.2. Ë¥´ÂØå](#632-Ë¥´ÂØå)\n    - [6.3.3. ‰ΩìÈáç](#633-‰ΩìÈáç)\n    - [6.3.4. Êñ∞ÂÜ†](#634-Êñ∞ÂÜ†)\n\n---\n\n### 1. ÊúØËØ≠\n\n* ACM: All-Cause Mortality / ÂÖ®Âõ†Ê≠ª‰∫°Áéá\n\n### 2. ÁõÆÊ†á\n\n* Á®≥ÂÅ•ÁöÑÊ¥ªÂæóÊõ¥‰πÖ\n* Ëä±Êõ¥Â∞ëÊó∂Èó¥Â∑•‰ΩúÔºöËßÅ[MetaGPT](https://github.com/geekan/MetaGPT)\n\n### 3. ÂÖ≥ÈîÆÁªìÊûú\n\n* Èôç‰Ωé66.67%ÂÖ®Âõ†Ê≠ª‰∫°Áéá\n* Â¢ûÂä†\\~20Âπ¥È¢ÑÊúüÂØøÂëΩ\n* ~~Áª¥ÊåÅÂ§öÂ∑¥ËÉ∫‰∫é‰∏≠ËΩ¥~~\n\n### 4. ÂàÜÊûê\n\n* ‰∏ªË¶ÅÂèÇËÄÉÔºöÂØπACMÁöÑÂ≠¶ÊúØÊñáÁåÆÁõ∏ÂØπËæÉÂ§öÔºåÂèØ‰ª•‰Ωú‰∏∫‰∏ªË¶ÅÂèÇËÄÉ\n* Â¢ûÂä†ÂØøÂëΩ‰∏éACMÂÖ≥Á≥ªÈùûÁ∫øÊÄßÔºöÊòæÁÑ∂Â¢ûÂä†ÂØøÂëΩ‰∏éACMÂÖ≥Á≥ªÊòØÈùûÁ∫øÊÄßÂáΩÊï∞ÔºåËøôÈáåÂÅáËÆæ `ŒîLifeSpan=(1/(1+ŒîACM)-1)*10`ÔºàŒîACM‰∏∫ACMÂèòÂåñÂÄºÔºõÂÖ¨ÂºèÊ¨¢Ëøé‰ºòÂåñÔºâ\n* ÂèòÈáèÊó†Ê≥ïÁÆÄÂçïÂè†Âä†ÔºöÊòæÁÑ∂ÂêÑ‰∏™ÂèòÈáè‰πãÈó¥Âπ∂‰∏çÁ¨¶ÂêàÁã¨Á´ãÂêåÂàÜÂ∏ÉÂÅáËÆæÔºåÂèòÈáè‰πãÈó¥ÁöÑÂÆûÈôÖÂΩ±Âìç‰πüÂπ∂‰∏çÊòéÁ°Æ\n* Â≠òÂú®ÁüõÁõæËßÇÁÇπÔºöÊâÄÊúâÁöÑËØÅÊçÆÈÉΩÊúâÊñáÁåÆ/Á†îÁ©∂ÂØπÂ∫îÔºå‰ΩÜÊ≥®ÊÑèÂà∞ÔºöÊúâ‰∫õÊñáÁåÆ‰πãÈó¥ÊúâÊòæËëóÁüõÁõæÁöÑËßÇÁÇπÔºàÂ¶ÇÂØπ‰∫éÁ¢≥Ê∞¥ÊëÑÂÖ•ÊØî‰æãÁöÑÁüõÁõæÔºâÔºõÊúâ‰∫õÊñáÁåÆÂ≠òÂú®ËæÉÂ§ß‰∫âËÆÆÔºàÂ¶ÇËÆ§‰∏∫22ÁÇπÂâçÁù°Ëßâ‰ºöÊèêÂçá43%ÂÖ®Âõ†Ê≠ª‰∫°ÁéáÔºâ\n* Á†îÁ©∂‰ªÖË°®ËææÁõ∏ÂÖ≥ÔºöÊâÄÊúâÊñáÁåÆË°®ÊòéÁöÑÊõ¥Â§öÊòØÁõ∏ÂÖ≥ËÄåÈùûÂõ†ÊûúÔºåÂú®ÈòÖËØªÊó∂Ë¶ÅËÄÉËôëÊñáÁåÆÊòØÂê¶ÂÖÖÂàÜËØÅÊòé‰∫ÜÂõ†Êûú ‚Äî‚Äî Â¶ÇÊüêÊñáÁåÆË°®Êòé‰∫ÜÊó•Âùá>=7000Ê≠•ÁöÑ‰∫∫ÊúâÊòæËëó‰ΩéÁöÑÂÖ®Âõ†Ê≠ª‰∫°Áéá„ÄÇ‰ΩÜÊ≠•Êï∞Â∞ëÁöÑ‰∫∫ÂèØËÉΩÂåÖÂê´Êõ¥Â§öÈïøÊúüÁóÖÊÇ£ÔºåÂ¶ÇÊûúÊ≤°ÊúâÂêàÁêÜÁöÑÊéíÈô§ËøôÂùóÊï∞ÊçÆÔºåÈÇ£Ê≠§ÊñáÁåÆË∞ÉÊü•Â§±Áúü\n\n### 5. Ë°åÂä®\n\n* ËæìÂÖ•\n  * Âõ∫‰ΩìÔºöÂêÉÁôΩËÇâÔºà-11%\\~-3% ACMÔºâ„ÄÅËî¨Êûú‰∏∫‰∏ªÔºà-26%\\~-17% ACMÔºâÔºåÂ§öÂêÉËæ£Ôºà-23% ACMÔºâÔºåÂ§öÂêÉÂùöÊûúÔºà-27%\\~-4% ACMÔºâÔºå‰∏≠ÈáèÁ¢≥Ê∞¥„ÄÅÂ§öÂêÉÊ§çÁâ©ËõãÁôΩÔºà-10% ACMÔºâÔºåÂ∞ëÂêÉË∂ÖÂä†Â∑•È£üÁâ©Ôºà-62%\\~-18%Ôºâ\n  * Ê∂≤‰ΩìÔºöÂñùÂíñÂï°Ôºà-22%\\~-12% ACMÔºâÔºåÂñùÁâõÂ•∂Ôºà-17%\\~-10% ACMÔºâÔºåÂñùËå∂Ôºà-15%\\~-8% ACMÔºâÔºåÂ∞ëÂñùÊàñ‰∏çÂñùÁîúÂë≥È•ÆÊñôÔºàÂê¶ÂàôÊØèÂ§©‰∏ÄÊùØ+7% ACMÔºå+Â§öÂ∑¥ËÉ∫ÔºâÔºåÊàíÈÖíÔºàÂê¶Âàô+\\~50% ACMÔºåÊó†‰∏äÈôêÔºâ\n  * Ê∞î‰ΩìÔºö‰∏çÂê∏ÁÉüÔºàÂê¶Âàô+~50% ACMÔºå-12\\~-11Âπ¥ÂØøÂëΩÔºâ\n  * ÂÖâÁÖßÔºöÊôíÂ§™Èò≥Ôºà-~40% ACMÔºâ\n  * ËçØÁâ©Ôºö‰∫åÁî≤ÂèåËÉçÔºàÁ≥ñÂ∞øÁóÖ‰∫∫Áõ∏ÊØîÊ≠£Â∏∏‰∫∫ÂèØ‰ª•+3Âπ¥Ôºâ„ÄÅÂ§çÂêàÁª¥ÁîüÁ¥†Ôºà-8%ÁôåÁóáÈ£éÈô©Ôºâ„ÄÅ‰∫öÁ≤æËÉ∫Ôºà-60%\\~-30% ACMÔºâ„ÄÅËë°ËêÑÁ≥ñËÉ∫Ôºà-39% ACMÔºâ\n* ËæìÂá∫\n  * ËøêÂä®ÔºöÊØèÂë®3Ê¨°45ÂàÜÈíüÊå•ÊãçËøêÂä®Ôºà-47% ACMÔºâ\n  * Êó•Â∏∏ÔºöÂà∑ÁâôÔºà-25% ACMÔºâ\n  * Áù°Áú†ÔºöÊØèÂ§©Áù°7Â∞èÊó∂ÂÖ®Âõ†Ê≠ª‰∫°ÁéáÊúÄ‰ΩéÔºõ‰∏î22-24ÁÇπÈó¥ÊúÄÂ•ΩÔºå*Êó©Áù°+43% ACMÔºåÊôöÁù°+15% ACMÔºàÂ≠òÂú®‰∫âËÆÆÔºâ*\n* ‰∏ä‰∏ãÊñá\n  * ‰ΩìÈáçÔºöÂáèËÇ•Ôºà-54% ACMÔºâ\n\n### 6. ËØÅÊçÆ\n\n#### 6.1. ËæìÂÖ•\n\n##### 6.1.1. Âõ∫‰Ωì\n\n* ÁôΩËÇâ\n  * [JAMAÂ≠êÂàäÔºöÈ£üÁî®Á∫¢ËÇâÂíåÂä†Â∑•ËÇâÁ±ª‰ºöÂ¢ûÂä†ÂøÉËÑèÁóÖÂíåÊ≠ª‰∫°È£éÈô©ÔºÅÈ±ºËÇâÂíåÂÆ∂Á¶ΩËÇâÂàô‰∏ç‰ºö](https://zhuanlan.zhihu.com/p/268401670)\n    * Âá∫Â§ÑÔºö[Associations of Processed Meat, Unprocessed Red Meat, Poultry, or Fish Intake With Incident Cardiovascular Disease and All-Cause Mortality](https://jamanetwork.com/journals/jamainternalmedicine/articlepdf/2759737/jamainternal_zhong_2020_oi_190112.pdf)\n    * Â¢ûÂä†Á∫¢ËÇâÊëÑÂÖ•‰∏éÊ≠ª‰∫°È£éÈô©Áõ∏ÂÖ≥„ÄÇÂÖ´Âπ¥ÂÜÖÂπ≥ÂùáÊØèÂ§©Â¢ûÂä†Ëá≥Â∞ëÂçä‰ªΩÁ∫¢ËÇâÊëÑÂÖ•ÔºàÂçä‰ªΩÁ∫¢ËÇâÁõ∏ÂΩì‰∫é14gÂä†Â∑•Á∫¢ËÇâÊàñ40gÈùûÂä†Â∑•Á∫¢ËÇâÔºâÁöÑË∞ÉÊü•ÂØπË±°ÔºåÂú®Êé•‰∏ãÊù•ÂÖ´Âπ¥ÂÜÖÂÖ®Âõ†Ê≠ª‰∫°È£éÈô©Â¢ûÂä†10ÔºÖÔºàHR, 1.10; 95%CI, 1.04-1.17ÔºâÔºõÊØèÂë®ÂêÉ‰∏§‰ªΩÁ∫¢ËÇâÊàñÂä†Â∑•ËÇâÁ±ªÔºà‰ΩÜ‰∏çÂåÖÊã¨ÂÆ∂Á¶ΩÊàñÈ±ºÁ±ªÔºâ‰ºö‰ΩøÂÖ®Âõ†Ê≠ª‰∫°È£éÈô©Â¢ûÂä†3%\n    * ![Á∫¢ËÇâ](https://user-images.githubusercontent.com/2707039/163703960-6f321de5-4daa-4ea5-95b9-af9c96f1c1bc.jpg)\n  * [Á∫¢ËÇâÂíåÁôΩËÇâÊúÄÂ§ßÁöÑÂå∫Âà´ÊòØ‰ªÄ‰πàÔºü‰∏∫Âï•Ë¶ÅËøô‰πàÂàÜÂë¢Ôºü](https://www.zhihu.com/question/67223570/answer/809785380)\n* Ëî¨Êûú\n  * [ÊØèÂπ¥54‰∏á‰∫∫Ê≠ª‰∫°ÔºåÁ´üÊòØÂõ†‰∏∫Ê∞¥ÊûúÂêÉÂæóÂ∞ëÔºÅÔºüËøôÂ∑≤ÊàêÂçÅÂ§ßÊ≠ª‰∫°Âõ†Á¥†‰πã‰∏ÄÔºÅ](https://www.sohu.com/a/322360740_164924)\n    * Âá∫Â§ÑÔºö[Estimated Global, Regional, and National Cardiovascular Disease Burdens Related to Fruit and Vegetable Consumption: An Analysis from the Global Dietary Database (FS01-01-19) ](https://academic.oup.com/cdn/article-abstract/3/Supplement_1/nzz028.FS01-01-19/5516583)\n    * ÊØèÂ§©ÊëÑÂÖ•200ÂÖãÊñ∞È≤úÊ∞¥ÊûúÂèØ‰ΩøÊ≠ª‰∫°ÁéáÈôç‰Ωé17%ÔºåÁ≥ñÂ∞øÁóÖÂ§ßË°ÄÁÆ°Âπ∂ÂèëÁóáÔºàÂ¶Ç‰∏≠È£é„ÄÅÁº∫Ë°ÄÊÄßÂøÉËÑèÁóÖÁ≠âÔºâÈ£éÈô©Èôç‰Ωé13%ÔºåÂèäÁ≥ñÂ∞øÁóÖÂ∞èË°ÄÁÆ°Âπ∂ÂèëÁóáÔºàÂ¶ÇÁ≥ñÂ∞øÁóÖËÇæÁóÖ„ÄÅÁ≥ñÂ∞øÁóÖÁúºÁóÖ„ÄÅÁ≥ñÂ∞øÁóÖË∂≥ÁóÖÁ≠âÔºâÈ£éÈô©Èôç‰Ωé28%\n  * [„ÄäËá™ÁÑ∂„ÄãÂ≠êÂàäÔºöÊØèÂ§©‰∫å‰∏§Ë•øÂÖ∞Ëä±ÔºåÂÅ•Â∫∑ÈïøÂØøÈÉΩÊúâÂï¶ÔºÅÂàÜÊûêËøë6‰∏á‰∫∫23Âπ¥ÁöÑÊï∞ÊçÆÂèëÁé∞ÔºåÂêÉÂê´ÈªÑÈÖÆÁ±ªÈ£üÁâ©‰∏éÊ≠ª‰∫°È£éÈô©Èôç‰Ωé20%Áõ∏ÂÖ≥‰∏®‰∏¥Â∫äÂ§ßÂèëÁé∞](https://mp.weixin.qq.com/s/E6BAi-Vnhr1jXBm0Pys2ZQ)\n    * Âá∫Â§ÑÔºö[Flavonoid intake is associated with lower mortality in the Danish Diet Cancer and Health Cohort](https://www.nature.com/articles/s41467-019-11622-x)\n    * ÂêÉÂê´ÈªÑÈÖÆÁ±ªÈ£üÁâ©‰∏éÊ≠ª‰∫°È£éÈô©Èôç‰Ωé20%Áõ∏ÂÖ≥\n    * ![ÈªÑÈÖÆ](https://user-images.githubusercontent.com/2707039/163703969-42e64f88-e727-4e7d-85f2-07a92e29b613.jpg)\n    * BondonnoÂçöÂ£´ËØ¥ÈÅì‚ÄúÂêÉ‰∏çÂêåËî¨Ëèú„ÄÅÊ∞¥ÊûúË°•ÂÖÖÔºå‰∏çÂêåÁßçÁ±ªÁöÑÈªÑÈÖÆÁ±ªÂåñÂêàÁâ©ÊòØÂæàÈáçË¶ÅÁöÑÔºåËøôÂæàÂÆπÊòìÈÄöËøáÈ•ÆÈ£üÂÆûÁé∞Ôºö‰∏ÄÊùØËå∂„ÄÅ‰∏Ä‰∏™ËãπÊûú„ÄÅ‰∏Ä‰∏™Ê©òÂ≠ê„ÄÅ100ÂÖãËìùËéìÔºåÊàñ100ÂÖãË•øÂÖ∞Ëä±ÔºåÂ∞±ËÉΩÊèê‰æõÂêÑÁßçÈªÑÈÖÆÁ±ªÂåñÂêàÁâ©ÔºåÂπ∂‰∏îÊÄªÂê´ÈáèË∂ÖËøá500ÊØ´ÂÖã„ÄÇ\n* Ëæ£Ê§í\n  * [Ëæ£Ê§íÊàêÊ≠ª‰∫°ÂÖãÊòüÔºüÊçÆË∞ÉÁ†îÔºåÂ∏∏ÂêÉËæ£ÊÇ£ÁóÖÊ≠ª‰∫°È£éÈô©ÂèØÈôç‰Ωé61%](https://3g.163.com/dy/article/F6Q7I1ME053228ZU.html)\n    * Âá∫Â§Ñ1Ôºö[Chili pepper consumption and mortality in Italian adults](https://www.sciencedirect.com/science/article/pii/S0735109719382063)\n\t* Âá∫Â§Ñ2Ôºö[The Association of Hot Red Chili Pepper Consumption and Mortality: A Large Population-Based Cohort Study](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0169876)\n    * 2017Âπ¥Plos One ÁöÑÂè¶‰∏ÄÈ°πÊù•Ëá™ÁæéÂõΩÁöÑÁ†îÁ©∂‰ª•16179ÂêçÔºåÂπ¥ÈæÑÂú®18Â≤Å‰ª•‰∏äÁöÑ‰∫∫Áæ§‰∏∫ÂØπË±°ÔºåÂπ∂ÂØπÂÖ∂ËøõË°å‰∫ÜÈ´òËææ19Âπ¥ÁöÑÈöèËÆøÔºåÂèëÁé∞Âú®4946‰æãÊ≠ª‰∫°ÊÇ£ËÄÖ‰∏≠ÔºåÈ£üÁî®Ëæ£Ê§íÁöÑÂèÇ‰∏éËÄÖÁöÑÂÖ®Âõ†Ê≠ª‰∫°Áéá‰∏∫21.6ÔºÖÔºåËÄåÊú™È£üÁî®Ëæ£Ê§íÁöÑÂèÇ‰∏éËÄÖÁöÑÂÖ®Âõ†Ê≠ª‰∫°Áéá‰∏∫33.6ÔºÖ„ÄÇÁõ∏ËæÉ‰∫é‰∏çÂêÉËæ£ÊàñÂæàÂ∞ëÂêÉÔºàÂ∞ë‰∫éÊØèÂë®‰∏§Ê¨°ÔºâÁöÑ‰∫∫Áæ§ÔºåÊØèÂë®ÂêÉËæ£Ôºû4Ê¨°ÁöÑ‰∫∫Áæ§ÊÄªÊ≠ª‰∫°È£éÈô©Èôç‰Ωé23%ÔºåÂøÉË°ÄÁÆ°Ê≠ª‰∫°È£éÈô©Èôç‰Ωé34%„ÄÇ\n* È∏°Ëõã\n  * [ÊØèÂ§©Â§öÂêÉÂçä‰∏™ËõãÔºåÂ¢ûÂä†7%ÁöÑÂÖ®Âõ†ÂíåÂøÉË°ÄÁÆ°Ê≠ª‰∫°È£éÈô©Ôºü](https://m.thepaper.cn/baijiahao_11540780)\n    * Âá∫Â§ÑÔºö[NIH-AARPÂ∑•‰Ωú‰∏ªÈ°µ](https://dietandhealth.cancer.gov/)„ÄÅ[Egg and cholesterol consumption and mortality from cardiovascular and different causes in the United States: A population-based cohort study](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7872242/)\n    * ÊØèÂ§©Â§öÂêÉÂçä‰∏™ËõãÔºåÂ¢ûÂä†7%ÁöÑÂÖ®Âõ†ÂíåÂøÉË°ÄÁÆ°Ê≠ª‰∫°È£éÈô©ÔºüÂú®ÂÅáËÆæÊÄßÊõø‰ª£ÂàÜÊûê‰∏≠ÔºåÁ†îÁ©∂ËÄÖÂèëÁé∞ÔºåÁî®Á≠âÈáèÁöÑËõãÊ∏Ö/È∏°ËõãÊõø‰ª£Áâ©„ÄÅÂÆ∂Á¶Ω„ÄÅÈ±º„ÄÅ‰π≥Âà∂ÂìÅ„ÄÅÂùöÊûúÂíåË±ÜÁ±ªÂàÜÂà´Êõø‰ª£ÂçäÂè™ÂÖ®ËõãÔºà25ÂÖã/Â§©ÔºâÂèØ‰ª•Èôç‰Ωé6%„ÄÅ8%„ÄÅ9%„ÄÅ7%„ÄÅ13%Âíå10%ÁöÑÂÖ®Âõ†Ê≠ª‰∫°Áéá„ÄÇ\n\t*[È∏°Ëõã](https://raw.githubusercontent.com/qhy040404/Image-Resources-Repo/master/pmed.1003508.g002.jpg)\n* ÂùöÊûú\n  * [Âìà‰Ωõ20Âπ¥Á†îÁ©∂ÔºöÂêÉÊ†∏Ê°ÉÁöÑ‰∫∫Êõ¥ÈïøÂØøÔºåÊòæËëóÂáèÂ∞ëÂÖ®Âõ†Ê≠ª‰∫°ÔºåÂª∂ÈïøÂØøÂëΩ](https://www.163.com/dy/article/GKVOMMMF05148PF4.html)\n    * Âá∫Â§ÑÔºö[Association of Walnut Consumption with Total and Cause-Specific Mortality and Life Expectancy in US Adults](https://www.mdpi.com/2072-6643/13/8/2699/pdf)\n    * ÈÄöËøáÂàÜÊûêÂèëÁé∞ÔºåÁªèÂ∏∏È£üÁî®Ê†∏Ê°ÉÂèØ‰ª•Âª∂ÈïøÂØøÂëΩÔºåÈôç‰ΩéÂøÉË°ÄÁÆ°ÁñæÁóÖÊ≠ª‰∫°È£éÈô©„ÄÇÊØîËµ∑‰∏çÂêÉÊ†∏Ê°ÉÔºåÊØèÂë®È£üÁî®Ê†∏Ê°É5‰ªΩ‰ª•‰∏äÔºà1‰ªΩ28ÂÖãÔºâÁöÑÂÅ•Â∫∑È¢ÑÊúüÂØøÂëΩÂª∂Èïø1.3Â≤ÅÔºåÂÖ®Âõ†Ê≠ª‰∫°È£éÈô©Èôç‰Ωé14%ÔºåÂøÉË°ÄÁÆ°ÁñæÁóÖÊ≠ª‰∫°ÁéáÈôç‰Ωé25%„ÄÇ\n  * [Á†îÁ©∂ÔºöÊØèÊó•È£üÁîüÂùöÊûúÔºåÊ≠ª‰∫°ÁéáÈôç20%](https://zhuanlan.zhihu.com/p/44454030)\n    * Âá∫Â§Ñ1Ôºö[Association of nut consumption with total and cause-specific mortality](https://www.nejm.org/doi/full/10.1056/NEJMoa1307352)\n    * Âá∫Â§Ñ2Ôºö[APG_Health-&-Nutrition-Research-Brochure_DEC-19-18](https://americanpistachios.cn/sites/china/files/inline-files/APG_Health-%26-Nutrition-Research-Brochure_DEC-19-18.pdf)\n    * Á†îÁ©∂‰∫∫ÂëòÂèëÁé∞ÔºåÊØèÂë®ÂêÉÊ†ëÂùöÊûú‰Ωé‰∫é1ÁõéÂè∏‰ªΩÈáèÁöÑ‰∫∫ÔºåÊ≠ª‰∫°ÁéáÈôç‰Ωé7ÔºÖ„ÄÇËÄåÊØèÂë®ÂêÉ‰∫Ü1ÁõéÂè∏‰ªΩÈáèÁöÑ‰∫∫ÔºåÂáèÂ∞ë11ÔºÖÁöÑÊ≠ª‰∫°ÁéáÔºõÊØèÂë®ÂêÉ2‰ªΩÈáèÁöÑ‰∫∫ÔºåÂáè‰Ωé13ÔºÖÔºõÊØèÂë®5Ëá≥6‰ªΩÈáèËÄÖÔºåÂáèÂ∞ë‰∫Ü15ÔºÖÔºõ‰∏ÄÂë®7‰ªΩ‰ª•‰∏äÁöÑ‰∫∫ÔºåÊ≠ª‰∫°ÁéáÂàôÂáèÂ∞ë20ÔºÖ„ÄÇ\n    * Âè¶Â§ñ‰∏§ÁØáÂèëË°®Âú®„ÄäÂÖ¨ÂÖ±ÁßëÂ≠¶Âõæ‰π¶È¶ÜÂú®Á∫øÊúüÂàä„Äã(Public Library of Science Online Journal)Âíå„ÄäÁîüÁâ©ÂåªÂ≠¶‰∏≠ÂøÉ„Äã(BioMed Central)‰∏äÁöÑÂåªÂ≠¶È¢ÑÁßëÁ†îÁ©∂ËÆ∫ÊñáÔºåÂ±ïÁ§∫‰∫ÜËØïÈ™åÂºÄÂßãÊó∂ÁöÑÊ®™Êñ≠Èù¢Êï∞ÊçÆ„ÄÇËøô‰∏§È°πÁ†îÁ©∂ÈÉΩËØÑ‰º∞‰∫Ü7,216ÂêçÂØπË±°Ôºå‰ª•Âèä‰ªñ‰ª¨È£üÁî®ÂùöÊûúÁöÑÈ¢ëÁéáÂíåÊï∞Èáè‰πãÈó¥ÁöÑÂÖ≥Á≥ª„ÄÇÈÇ£‰∫õÊØèÂë®È£üÁî®‰∏â‰ªΩ‰ª•‰∏äÂùöÊûú(ÂåÖÊã¨ÂºÄÂøÉÊûú)ÁöÑÁ†îÁ©∂ÂØπË±°ÁöÑÊ≠ª‰∫°ÁéáÈôç‰Ωé39%„ÄÇ\n* Èí†ÔºàÂ≠òÊúâÂ§ßÈáè‰∫âËÆÆÔºâ\n  * [Eur Heart JÔºöÈí†ÊëÑÂÖ•Èáè‰∏éÈ¢ÑÊúüÂØøÂëΩ„ÄÅÂÖ®Âõ†Ê≠ª‰∫°ÁéáÁöÑÂÖ≥Á≥ª](https://nursing.medsci.cn/article/show_article.do;jsessionid=A34E8A33918A152CB55BDD2E5FB1798D?id=afe720486ee7)\n    * Âá∫Â§ÑÔºö[Messerli F H, Hofstetter L, Syrogiannouli L, et al. Sodium intake, life expectancy, and all-cause mortality[J]. European heart journal, 2021, 42(21): 2103-2112.](https://europepmc.org/backend/ptpmcrender.fcgi?accid=PMC8169157&blobtype=pdf)\n    * ![ehaa947f6](https://user-images.githubusercontent.com/2707039/164894778-9710f18d-e055-4f62-bdcb-618687771d77.jpeg)\n    * Âú®ËØ•ÂàÜÊûêÊâÄÂåÖÂê´ÁöÑ181‰∏™ÂõΩÂÆ∂‰∏≠ÔºåÁ†îÁ©∂‰∫∫ÂëòÂèëÁé∞Èí†ÊëÑÂÖ•Èáè‰∏éÂá∫ÁîüÊó∂ÁöÑÂÅ•Â∫∑È¢ÑÊúüÂØøÂëΩÔºàŒ≤=2.6Âπ¥/ÂÖãÊØèÊó•Èí†ÊëÑÂÖ•ÈáèÔºåR<sup>2</sup>=0.66ÔºåP<0.001ÔºâÂíå60Â≤ÅÊó∂ÁöÑÂÅ•Â∫∑È¢ÑÊúüÂØøÂëΩÔºàŒ≤=0.3Âπ¥/ÂÖãÊØèÊó•Èí†ÊëÑÂÖ•ÈáèÔºåR<sup>2</sup>=0.60ÔºåP=0.048Ôºâ‰πãÈó¥Â≠òÂú®Ê≠£Áõ∏ÂÖ≥ÂÖ≥Á≥ªÔºå‰ΩÜ‰∏éÈùû‰º†ÊüìÊÄßÁñæÁóÖÊ≠ª‰∫°ÔºàŒ≤=17Ê¨°‰∫ã‰ª∂/ÂÖãÊØèÊó•Èí†ÊëÑÂÖ•ÈáèÔºåR<sup>2</sup>=0.43ÔºåP=0.100ÔºâÊó†ÂÖ≥„ÄÇÁõ∏ÂèçÔºåÂÖ®Âõ†Ê≠ª‰∫°Áéá‰∏éÈí†ÊëÑÂÖ•ÈáèÊàêË¥üÁõ∏ÂÖ≥ÔºàŒ≤=‚àí131Ê¨°‰∫ã‰ª∂/ÂÖãÊØèÊó•Èí†ÊëÑÂÖ•ÈáèÔºåR<sup>2</sup>=0.60ÔºåP<0.001Ôºâ„ÄÇÂú®‰ªÖÈôê‰∫é46‰∏™Êî∂ÂÖ•ÊúÄÈ´òÂõΩÂÆ∂ÁöÑÊïèÊÑüÊÄßÂàÜÊûê‰∏≠ÔºåÈí†ÊëÑÂÖ•Èáè‰∏éÂá∫ÁîüÊó∂ÁöÑÂÅ•Â∫∑È¢ÑÊúüÂØøÂëΩÂëàÊ≠£Áõ∏ÂÖ≥ÔºàŒ≤=3.4Âπ¥/ÂÖãÊØèÊó•Èí†ÊëÑÂÖ•ÈáèÔºåR<sup>2</sup>=0.53ÔºåP<0.001ÔºâÔºåËÄå‰∏éÂÖ®Âõ†Ê≠ª‰∫°ÁéáÔºàŒ≤=‚àí168Ê¨°‰∫ã‰ª∂/ÂÖãÊØèÊó•Èí†ÊëÑÂÖ•ÈáèÔºåR<sup>2</sup>=0.50ÔºåP<0.001ÔºâÂëàË¥üÁõ∏ÂÖ≥„ÄÇ\n    * ËØ•ÔºàÂ§ßËåÉÂõ¥ÔºâÁ†îÁ©∂ËÆ§‰∏∫Êõ¥Â§öÁöÑÈí†ÊëÑÂÖ•‰∏éÊòæËëóÊõ¥‰ΩéÁöÑÂÖ®Âõ†Ê≠ª‰∫°ÁéáÊúâÂÖ≥\n    * [ÈíàÂØπËØ•ËÆ∫ÊñáÁöÑÂª∂‰º∏Ëß£ËØªÂíåËÆ®ËÆ∫ÔºöA Fresh Foray in the Salt Wars: Life Expectancy Higher With Greater Sodium Intake](https://www.tctmd.com/news/fresh-foray-salt-wars-life-expectancy-higher-greater-sodium-intake)\n  * [NEJM/LancetÔºö‰∏çË¶ÅÂêÉÂ§™Â§öÁõêÔºå‰∏≠ÂõΩÈ•ÆÈ£üÊâÄËá¥ÂøÉË°ÄÁÆ°ÁóÖÂíåÁôåÁóáÊ≠ª‰∫°ÂÖ®ÁêÉÁ¨¨‰∏ÄÔºåÂêÉ‰ΩéÈí†ÁõêÂèØÈôç‰ΩéÂÖ®Âõ†Ê≠ª‰∫°Áéá](https://ibook.antpedia.com/x/669028.html)\n    * ‰ΩÜ‰πüÊúâÂ§öÈ°πÁ†îÁ©∂ËÆ§‰∏∫Áî®‰ΩéÈí†ÁõêÂèØ‰ª•Èôç‰Ωé‰∏ÄÁ≥ªÂàóÁñæÁóÖÁöÑÂèëÁîüÊ¶ÇÁéáÔºåÂØπÂÖ®Âõ†Ê≠ª‰∫°ÁéáÁöÑÂáèÂ∞ëÊúâÁßØÊûÅÂΩ±Âìç\n* Á¢≥Ê∞¥ÔºàÂ≠òÊúâÂ§ßÈáè‰∫âËÆÆÔºâ\n  * [‰ΩéÁ¢≥ÁîüÈÖÆÈ•ÆÈ£üÔºàÂõõÔºâÁ¢≥Ê∞¥ÂåñÂêàÁâ©‰∏éÈïøÊúüÊ≠ª‰∫°Áéá](https://zhuanlan.zhihu.com/p/137815934)\n    * Âá∫Â§ÑÔºöThe Lancet Public Health - [Dietary carbohydrate intake and mortality: a prospective cohort study and meta-analysis](https://www.sciencedirect.com/science/article/pii/S246826671830135X)\n    * Á¢≥Ê∞¥Ë∂ä‰ΩéÔºåÂØøÂëΩË∂äÁü≠ÔºõÁ¢≥Ê∞¥Ë∂äÈ´òÔºåÂØøÂëΩ‰πüËΩªÂæÆÁº©Áü≠ÔºõÁ¢≥Ê∞¥50%Â∑¶Âè≥ÔºàÂÖ∂ÂÆûÊåâÁÖß‰∏ÄËà¨ÁöÑËØ¥Ê≥ïÔºåËøô‰πüÁÆóÈ´òÁ¢≥Ê∞¥ÔºâÊòØÊúÄÈïøÂØøÂëΩÂå∫Èó¥ \n    * ![Á¢≥Ê∞¥](https://user-images.githubusercontent.com/2707039/163703985-a2e2f8ac-101a-4f3c-903b-6850507f144b.jpg)\n  * [ÊúÄÂº∫Ëê•ÂÖªÊê≠ÈÖçÔºÅBMJÔºöËøô‰πàÂêÉÔºåÂøÉË°ÄÁÆ°ÁñæÁóÖÂíåÊ≠ª‰∫°È£éÈô©Êõ¥‰Ωé](https://www.chinacdc.cn/gwxx/202003/t20200323_214639.html)\n* ÊßüÊ¶î\n  * [Â¶Ç‰ΩïÁúãÂæÖÊßüÊ¶îÂöºÂá∫Êù•ÁöÑÁôåÁóáÔºüÊßüÊ¶îËá¥ÁôåÈ£éÈô©Á©∂Á´üÊúâÂ§öÂ§ßÔºü - ‰∏ÅÈ¶ôÂåªÁîüÁöÑÂõûÁ≠î - Áü•‰πé](https://www.zhihu.com/question/312784161/answer/603370131)\n    * Âá∫Â§ÑÔºöChewing Betel Quid and the Risk of Metabolic Disease, Cardiovascular Disease, and All-Cause Mortality: A Meta-Analysis(https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0070679)\n    * ÂöºÊßüÊ¶î‰ºöÂ¢ûÂä†21%ÁöÑÂÖ®Âõ†Ê≠ª‰∫°Áéá\n* ÁÉ≠ÈáèÈôêÂà∂\n  * [ÊÄé‰πàÁúãÂæÖBBC„ÄäËøõÈ£ü„ÄÅÊñ≠È£ü‰∏éÈïøÂØø„ÄãÔºü](https://www.zhihu.com/question/31395511)\n    * ÈôêÂà∂Âç°Ë∑ØÈáåÂä®Áâ©ÂÆûÈ™åÔºöCRÔºàÁÉ≠ÈáèÈôêÂà∂ÔºåÂç≥Â∞ëÂêÉÔºâÂª∂Ëøü‰∫ÜÊÅíÊ≤≥Áå¥ÁöÑÂ§öÁßçÁñæÁóÖÂèëÁóÖÂíåÊ≠ª‰∫°ÁéáÔºå‰∏éCRÂä®Áâ©Áõ∏ÊØîÔºåÊ≠£Â∏∏ÂñÇÂÖªÁöÑÁå¥Â≠êÁöÑÂêÑÁßçÁñæÁóÖÊÇ£ÁóÖÈ£éÈô©Â¢ûÂä†2.9ÂÄçÔºåÊ≠ª‰∫°È£éÈô©Â¢ûÂä†3.0ÂÄç„ÄÇ\n    * ![ÁÉ≠ÈáèÈôêÂà∂-ÊÅíÊ≤≥Áå¥](https://user-images.githubusercontent.com/2707039/163703988-8767185b-326a-4783-b2e2-f190322bb7d6.jpg)\n* ÁªºÂêà\n  * [ÊúÄÂº∫Ëê•ÂÖªÊê≠ÈÖçÔºÅBMJÔºöËøô‰πàÂêÉÔºåÂøÉË°ÄÁÆ°ÁñæÁóÖÂíåÊ≠ª‰∫°È£éÈô©Êõ¥‰Ωé](https://www.chinacdc.cn/gwxx/202003/t20200323_214639.html)\n  * [Associations of fat and carbohydrate intake with cardiovascular disease and mortality: prospective cohort study of UK Biobank participants](https://doi.org/10.1136/bmj.m688)\n    * ÈÄöËøáÂØπËøô‰∫õÂèÇ‰∏éËÄÖÁöÑÊï∞ÊçÆËøõË°åÂàÜÊûêÔºåÁ†îÁ©∂‰∫∫ÂëòÂèëÁé∞Á¢≥Ê∞¥ÂåñÂêàÁâ©ÔºàÁ≥ñ„ÄÅÊ∑ÄÁ≤âÂíåÁ∫§Áª¥ÔºâÂíåËõãÁôΩË¥®ÁöÑÊëÑÂÖ•‰∏éÂÖ®Âõ†Ê≠ª‰∫°ÁéáÂëàÈùûÁ∫øÊÄßÂÖ≥Á≥ªÔºåËÄåËÑÇËÇ™Âàô‰∏éÂÖ®Âõ†Ê≠ª‰∫°ÁéáÂëàÁ∫øÊÄßÁõ∏ÂÖ≥„ÄÇÂÖ∂‰∏≠ÔºåËæÉÈ´òÁöÑÁ≥ñÂàÜÊëÑÂÖ•‰∏éÂÖ®Âõ†Ê≠ª‰∫°È£éÈô©ÂíåÊÇ£ÂøÉË°ÄÁÆ°ÁñæÁóÖÁöÑÈ£éÈô©ËæÉÈ´òÂùáÊúâÂÖ≥ËÅîÔºåËÄåËæÉÈ´òÁöÑÈ•±ÂíåËÑÇËÇ™ÈÖ∏ÊëÑÂÖ•‰∏éÂÖ®Âõ†Ê≠ª‰∫°È£éÈô©ËæÉÈ´òÊúâÂÖ≥„ÄÇ\n    * Âõæ1ÔºöÂêÑÁßçËê•ÂÖªÂÖÉÁ¥†‰∏éÂÖ®Âõ†Ê≠ª‰∫°‰πãÈó¥ÁöÑÂÖ≥Á≥ª\n    * ![ÂêÑÁßçËê•ÂÖªÂÖÉÁ¥†‰∏éÂÖ®Âõ†Ê≠ª‰∫°‰πãÈó¥ÁöÑÂÖ≥Á≥ª](https://user-images.githubusercontent.com/2707039/163702022-8c2bfea9-ed5d-4fe0-8ead-e8740014b92b.jpg)\n    * Âõæ2ÔºöÂêÑÁßçËê•ÂÖªÂÖÉÁ¥†‰∏éÂøÉË°ÄÁÆ°ÁñæÁóÖ‰πãÈó¥ÁöÑÂÖ≥Á≥ª\n    * ![ÂêÑÁßçËê•ÂÖªÂÖÉÁ¥†‰∏éÂøÉË°ÄÁÆ°ÁñæÁóÖ‰πãÈó¥ÁöÑÂÖ≥Á≥ª](https://user-images.githubusercontent.com/2707039/163702084-97fb4a03-707c-475d-b88e-6fe2f8e87f92.jpg)\n    * **Ëøõ‰∏ÄÊ≠•Á†îÁ©∂Ë°®ÊòéÔºåÂú®ÊâÄÊúâÁöÑÈ•ÆÈ£üÊ®°Âºè‰∏≠ÔºåÂÖ®Âõ†Ê≠ª‰∫°ÁéáÈ£éÈô©ÊúÄ‰ΩéÁöÑÈ•ÆÈ£üÊñπÂºè‰∏∫Ôºö10-30gÈ´òÁ∫§Áª¥„ÄÅ14-30%ËõãÁôΩË¥®„ÄÅ10-25%Âçï‰∏çÈ•±ÂíåËÑÇËÇ™ÈÖ∏„ÄÅ5%-7%Â§ö‰∏çÈ•±ÂíåËÑÇËÇ™ÈÖ∏‰ª•Âèä20%-30%Ê∑ÄÁ≤âÊëÑÂÖ•„ÄÇ**\n    * **ÊúÄ‰ºòËÉΩÈáèÊù•Ê∫êÈÖçÊØîÔºö<24%Ê∑ÄÁ≤âÔºå15%-17%ËõãÁôΩË¥®Ôºå>15%Âçï‰∏çÈ•±ÂíåËÑÇËÇ™ÈÖ∏Ôºå<15%Á≥ñÔºå6%È•±ÂíåËÑÇËÇ™ÈÖ∏Ôºå6%Â§ö‰∏çÈ•±ÂíåËÑÇËÇ™ÈÖ∏Ôºå30g+È´òÁ∫§Áª¥**\n  * [BMJ | Â∏∏ÂêÉËñØÁâáÊ±âÂ†°Â∑ßÂÖãÂäõÁ≠âÈ£üÂìÅÔºåÂπ≥ÂùáÊ≠ª‰∫°Âπ¥ÈæÑ‰ªÖ‰ªÖ‰∏∫58Â≤ÅÔºåÊ≠ª‰∫°È£éÈô©ÂâßÂ¢û](https://med.ckcest.cn/details.html?id=5183272274855936&classesEn=news)\n    * [Rico-Camp√† A, Mart√≠nez-Gonz√°lez M A, Alvarez-Alvarez I, et al. Association between consumption of ultra-processed foods and all cause mortality: SUN prospective cohort study[J]. bmj, 2019, 365.](https://www.bmj.com/content/365/bmj.l1949.full)\n    * [Srour B, Fezeu L K, Kesse-Guyot E, et al. Ultra-processed food intake and risk of cardiovascular disease: prospective cohort study (NutriNet-Sant√©)[J]. bmj, 2019, 365.](https://www.bmj.com/content/365/bmj.l1451)\n    * [Lawrence M A, Baker P I. Ultra-processed food and adverse health outcomes[J]. bmj, 2019, 365.](https://www.researchgate.net/profile/Phillip-Baker-5/publication/333483796_Ultra-processed_food_and_adverse_health_outcomes/links/5f0c646ca6fdcc2f32336a95/Ultra-processed-food-and-adverse-health-outcomes.pdf)\n\n##### 6.1.2. Ê∂≤‰Ωì\n\n* ÁâõÂ•∂\n  * [„ÄäÊü≥Âè∂ÂàÄ„ÄãË∞ÉÁ†î21‰∏™ÂõΩÂÆ∂13‰∏á‰∫∫ÔºöÊØèÂ§©1Êñ§ÁâõÂ•∂ÊàñÈÖ∏Â•∂ÔºåÂøÉË°ÄÁÆ°Ê≠ª‰∫°È£éÈô©‰∏ãÈôç23%](https://www.sohu.com/a/253940257_419768)\n  * Âá∫Â§ÑÔºö[Association of dairy intake with cardiovascular disease and mortality in 21 countries from five continents (PURE): a prospective cohort study](http://mdrf-eprints.in/1114/1/Association_of_dietary_patterns_and_dietary_diversity_with_cardiometabolic_disease_risk_factors.pdf)\n  * ‰∏é‰∏çÈ£üÁî®‰π≥Âà∂ÂìÅÁöÑ‰∫∫Áõ∏ÊØîÔºåÊØèÂ§©ÊëÑÂÖ•‰∏§‰ªΩ‰π≥Âà∂ÂìÅÔºà‰∏Ä‰ªΩÊåá244ÂÖãÁâõÂ•∂/ÈÖ∏Â•∂Ôºå15ÂÖãÂ•∂ÈÖ™Êàñ5ÂÖãÈªÑÊ≤πÔºâÁöÑ‰∫∫Ôºå**ÂÖ®Âõ†Ê≠ª‰∫°È£éÈô©‰∏ãÈôç‰∫Ü17%**ÔºåÂøÉË°ÄÁÆ°Ê≠ª‰∫°È£éÈô©‰∏ãÈôç23%Ôºå‰∏≠È£éÈ£éÈô©‰∏ãÈôç33%\n* Ëå∂\n  * [10‰∏á‰∏≠ÂõΩ‰∫∫ÈöèËÆø7Âπ¥ÂèëÁé∞ÔºåÊØèÂë®Âñù‰∏âÊ¨°Ëå∂‰∏éÂÖ®Âõ†Ê≠ª‰∫°È£éÈô©Èôç‰Ωé15%ÔºåÈ¢ÑÊúüÂØøÂëΩÂ¢ûÂä†1.26Âπ¥Áõ∏ÂÖ≥ ](https://www.jianshu.com/p/5461a205cf95?utm_campaign=hugo)\n  * Âá∫Â§ÑÔºö[Tea consumption and the risk of atherosclerotic cardiovascular disease and all-cause mortality: The China-PAR project](https://www.researchgate.net/profile/Fangchao-Liu-4/publication/338483323_Tea_consumption_and_the_risk_of_atherosclerotic_cardiovascular_disease_and_all-cause_mortality_The_China-PAR_project/links/5e55e5e94585152ce8efe511/Tea-consumption-and-the-risk-of-atherosclerotic-cardiovascular-disease-and-all-cause-mortality-The-China-PAR-project.pdf)\n  * [‰∏≠ÂõΩÊàêÂπ¥‰∫∫È•ÆËå∂‰∏éÊ≠ª‰∫°È£éÈô©ÁöÑÂâçÁûªÊÄßÂÖ≥ËÅîÁ†îÁ©∂](http://rs.yiigle.com/CN112338202202/1351516.htm)\n  * Á∫≥ÂÖ•ÂàÜÊûêÁöÑ438 443‰æãÁ†îÁ©∂ÂØπË±°ÈöèËÆø11.1Âπ¥ÂÖ±ÂèëÁîüÊ≠ª‰∫°34 661‰æã„ÄÇ‰∏é‰ªé‰∏çÈ•ÆËå∂ËÄÖÁõ∏ÊØîÔºåÂΩìÂâçÈùûÊØèÊó•È•ÆËå∂ËÄÖÂíåÊØèÊó•È•ÆËå∂ËÄÖÂÖ®Âõ†Ê≠ª‰∫°HRÂÄºÔºà95%CIÔºâ‰æùÊ¨°‰∏∫0.89Ôºà0.86-0.91ÔºâÂíå0.92Ôºà0.88-0.95Ôºâ„ÄÇÂàÜÊÄßÂà´ÂàÜÊûêÊòæÁ§∫ÔºåÈ•ÆËå∂ÂØπÂÖ®Âõ†Ê≠ª‰∫°È£éÈô©ÁöÑ‰øùÊä§‰ΩúÁî®‰∏ªË¶ÅËßÅ‰∫éÁî∑ÊÄßÔºà‰∫§‰∫íP<0.05Ôºâ\n* Êó†Á≥ñÔºàÁîúÂë≥ÔºâÈ•ÆÊñô\n  * [„ÄåÊó†Á≥ñÈ•ÆÊñô‰ΩøÊ≠ª‰∫°È£éÈô©Â¢ûÂä† 26 %„ÄçÔºåÊòØÁúüÁöÑÂêóÔºü](https://www.zhihu.com/question/418598272/answer/1450648364)\n    * Áõ∏ÊØî‰∫éËΩØÈ•ÆÊñôÊëÑÂÖ•ÈáèÔºú1ÊùØ/ÊúàÁöÑÂèÇ‰∏éËÄÖÔºåÊ∑∑ÂêàËΩØÈ•ÆÊñôÊëÑÂÖ•‚â•1ÊùØ/Â§©ÁöÑÂèÇ‰∏éËÄÖÊ≠ª‰∫°È£éÈô©Â¢ûÂä†18%ÔºåËÄå**ÊëÑÂÖ•Âê´Á≥ñËΩØÈ•ÆÊñôÊàñÊó†Á≥ñËΩØÈ•ÆÊñô‰ºö‰ª§Ê≠ª‰∫°È£éÈô©ÂàÜÂà´Â¢ûÂä†11%Âíå27%„ÄÇ**\n    * ![È•ÆÊñô](https://user-images.githubusercontent.com/2707039/163704346-e7d92e7f-eba5-4673-8f15-3a96782c2e32.png)\n  * [Association Between Soft Drink Consumption and Mortality in 10 European Countries](https://jamanetwork.com/journals/jamainternalmedicine/fullarticle/2749350)\n* ÊúâÁ≥ñÈ•ÆÊñô\n  * [ÂèØ‰πêÂíåÂ•∂Ëå∂ÔºåÂ¢ûÂä†ÂÖ®Âõ†Ê≠ª‰∫°ÁéáÈ´òËææ62%ÔºÅÊûúÊ±ÅÈôç‰ΩéÂÖçÁñ´ÂäõÔºåÂΩ±ÂìçËÇù‰ª£Ë∞¢ÔºÅÂê´Á≥ñÈ•ÆÊñôÈÇ£‰∫õ‰∫ã](https://zhuanlan.zhihu.com/p/400746073)\n    * ÊØèÂ§©1ÊùØÂê´Á≥ñÈ•ÆÊñôÂ¢ûÂä†7%ÂÖ®Âõ†Ê≠ª‰∫°ÁéáÔºå2ÊùØ21%\n    * Âú®34Âπ¥ÁöÑÈöèËÆø‰∏≠ÔºåÁ†îÁ©∂‰∫∫ÂëòÂèëÁé∞ÔºåÁõ∏ÊØîÈÇ£‰∫õ‰∏Ä‰∏™ÊúàÂñù1ÊùØÊàñËÄÖÊõ¥Â∞ëÂê´Á≥ñÈ•ÆÊñôÁöÑ‰∫∫ÔºåÊØèÂ§©Âñù2ÊùØÁöÑ‰∫∫ÊÄª‰ΩìÊ≠ª‰∫°È£éÈô©ÂçáÈ´ò‰∫Ü21%ÔºåÂøÉË°ÄÁÆ°ÁñæÁóÖÊ≠ª‰∫°È£éÈô©ÂçáÈ´ò‰∫Ü31%ÔºåÁôåÁóáÊ≠ª‰∫°È£éÈô©‰∏äÂçá‰∫Ü16%„ÄÇ\n    * Âè™Ë¶ÅÊØèÂ§©Â§öÂñù‰∏ÄÊùØÂê´Á≥ñÈ•ÆÊñôÔºåÊÄª‰ΩìÊ≠ª‰∫°È£éÈô©Â∞ÜÂ¢ûÂä†7%ÔºåÂøÉË°ÄÁÆ°ÁñæÁóÖÁöÑÈ£éÈô©Â∞ÜÂ¢ûÂä†10%ÔºåÁôåÁóáÁõ∏ÂÖ≥ÁöÑÊ≠ª‰∫°È£éÈô©Â∞Ü16%„ÄÇ\n    * ÂèëË°®Âú®ÂõΩÈôÖÈ°∂Á∫ßÊúüÂàä„ÄäBMJ„Äã‰∏äÁöÑ‰∏ÄÁØáËÆ∫ÊñáÂ∞±ËØÅÊòé‰∫ÜÂê´Á≥ñÈ•ÆÊñô‰ºöÂú®Â¢ûÂä†ÊÇ£ÁôåÈ£éÈô©ÔºåÂΩìÁÑ∂ËøôÁØáÊñáÁ´†È™åËØÅÁöÑ‰∏ç‰ªÖ‰ªÖÊòØÊûúÊ±ÅÔºåÂ•∂Ëå∂‰πüÊúâ‰ªΩ‚Äî‚ÄîÂíåÂê´Á≥ñÈ•ÆÊñôÁõ∏ÂÖ≥ÁöÑÊÄª‰ΩìÊÇ£ÁôåÈ£éÈô©Ë¶ÅÈ´òÂá∫ÈÄöÂ∏∏ÂÄº18%Ôºå100%ÁöÑÈ≤úÊ¶®ÊûúÊ±Å‰πü‰ºö‰ΩøÂæóÊï¥‰ΩìÁöÑÊÇ£ÁôåÈ£éÈô©‰∏äÂçá12%„ÄÇ\n* ÊûúÊ±Å\n  * [JAMAÂ≠êÂàäÔºö100%Á∫ØÊûúÊ±ÅÂèØËÉΩÊØîÂê´Á≥ñÈ•ÆÊñôÊõ¥Âç±Èô©](https://zhuanlan.zhihu.com/p/66513350)\n    * ÊØèÂ§©Â§öÊëÑÂÖ•‰∏Ä‰ªΩ12ÁõéÂè∏ÁöÑÂê´Á≥ñÈ•ÆÊñôÔºåÂÖ®Âõ†Ê≠ª‰∫°ÁéáÈ£éÈô©Â¢ûÂä†11%Ôºõ\n    * ÊØèÂ§©Â§öÊëÑÂÖ•‰∏Ä‰ªΩ12ÁõéÂè∏ÁöÑÊûúÊ±ÅÔºåÂÖ®Âõ†Ê≠ª‰∫°ÁéáÈ£éÈô©Â¢ûÂä†24%„ÄÇ\n* ÂíñÂï°\n  * [ÈáçÁ£ÖÔºÅÂ§öÁØáÁ†îÁ©∂ËØÅÂÆûÂñùÂíñÂï°‰∏é‰∫∫Áæ§ÂÖ®Âõ†Ê≠ª‰∫°ÁéáÈôç‰ΩéÁõ¥Êé•Áõ∏ÂÖ≥](https://news.bioon.com/article/6725420.html)\n  * [ÁßëÊôÆ | ÂñùÂíñÂï°ÂèàÂ§ö‰∫Ü‰∏Ä‰∏™Êñ∞ÁêÜÁî±ÔºöÈôç‰ΩéÊ≠ª‰∫°ÁéáÔºÅ ](https://www.sohu.com/a/439412995_100003595)\n  * [Âú∞‰∏≠Êµ∑ÊàêÂπ¥‰∫∫ÂíñÂï°Ê∂àËÄóÈáèÂèäÂÖ®Âõ†ÔºåÂøÉË°ÄÁÆ°ÁñæÁóÖÂíåÁôåÁóáÁöÑÊ≠ª‰∫°Áéá](https://fanyi.pdf365.cn/help/249)\n    * Âú®ÊúÄËøëÁöÑËçüËêÉÂàÜÊûê‰∏≠ÔºåËØ•Á†îÁ©∂ÂåÖÊã¨Êù•Ëá™‰∏çÂêåÂõΩÂÆ∂ÁöÑ40È°πÁ†îÁ©∂Âíå3,852,651ÂêçÂèóËØïËÄÖ„ÄÇÂú®ËøôÈ°πËçüËêÉÂàÜÊûêÊòæÁ§∫ÔºåÂíñÂï°ÊëÑÂÖ•Èáè‰∏éÂêÑÁßçÂéüÂõ†ÁöÑÊ≠ª‰∫°ÁéáÔºåCVDÂíåÁôåÁóáÊ≠ª‰∫°Áéá‰πãÈó¥Â≠òÂú®ÈùûÁ∫øÊÄßÂÖ≥Á≥ªÔºåÊØèÂ§©ÊëÑÂÖ•‰∏§ÊùØÂíñÂï°ÁöÑÁôåÁóáÊ≠ª‰∫°ÁéáÊúÄ‰Ωé(RR = 0.96)ÔºåCVDÊúÄ‰ΩéÁöÑÊ≠ª‰∫°ÁéáÔºåÊØèÂ§©2.5ÊùØ(RR= 0.83)ÔºåÂÖ®Â§©ÊúÄ‰ΩéÊ≠ª‰∫°Áéá‰∏∫ÊØèÂ§©3.5ÊùØ(RR= 0.85)ÔºåÂπ∂‰∏îÈöèÁùÄÂíñÂï°Ê∂àË¥πÈáèÁöÑÂ¢ûÂä†ÔºåÊ≠ª‰∫°ÁéáÊ≤°ÊúâËøõ‰∏ÄÊ≠•Èôç‰ΩéÊàñÂ¢ûÂä†\n* ‰∫öÁ≤æËÉ∫\n  * [ScienceÔºöÁßëÂ≠¶ËÉå‰π¶ÔºÅ‰ªéÁ≤æÊ∂≤‰∏≠ÂèëÁé∞ÁöÑ‰∫öÁ≤æËÉ∫ÔºåÁ´üÁÑ∂ÊúâÁùÄÊäóË°∞ËÄÅ„ÄÅÊäóÁôå„ÄÅ‰øùÊä§ÂøÉË°ÄÁÆ°ÂíåÁ•ûÁªè„ÄÅÊîπÂñÑËÇ•ËÉñÂíå2ÂûãÁ≥ñÂ∞øÁóÖÁ≠âÈÄÜÂ§©Á•ûÊïà](https://www.medsci.cn/article/show_article.do?id=420d12904103)\n  * [È•ÆÈ£ü‰∏≠‰∫öÁ≤æËÉ∫ÊëÑÂÖ•ÈáèÈ´ò‰ºöÈôç‰ΩéÊ≠ª‰∫°Áéá](https://zhuanlan.zhihu.com/p/388942219)\n\n##### 6.1.3. Ê∞î‰Ωì\n\n* Âê∏ÁÉü\n  * [Âç≥‰ΩøÊòØ‰ΩéÂº∫Â∫¶Âê∏ÁÉüÔºå‰πüÂ¢ûÂä†Ê≠ª‰∫°È£éÈô©ÔºÅ](https://www.medsci.cn/article/show_article.do?id=02ca2083319b)\n    * Á†îÁ©∂ÂèëÁé∞ÔºöÂú®42 416ÂêçÁî∑ÊÄßÂíå86 735ÂêçÂ•≥ÊÄßÔºàÂπ¥ÈæÑÂú®35-89Â≤Å‰πãÈó¥Ôºå‰ª•ÂâçÊ≤°ÊúâÊÇ£ÁóÖÔºâ‰∏≠Ôºå18 985ÂêçÁî∑ÊÄßÔºà45%ÔºâÂíå18 072ÂêçÂ•≥ÊÄßÔºà21%ÔºâÁõÆÂâçÂê∏ÁÉüÔºåÂÖ∂‰∏≠33%ÁöÑÁî∑ÊÄßÂê∏ÁÉüËÄÖÂíå39%ÁöÑÂ•≥ÊÄßÂê∏ÁÉüËÄÖÂπ∂‰∏çÊØèÂ§©Âê∏ÁÉü„ÄÇ8866ÂêçÁî∑ÊÄßÔºà21%ÔºâÂíå53 912ÂêçÂ•≥ÊÄßÔºà62%Ôºâ‰ªé‰∏çÂê∏ÁÉü„ÄÇÂú®ÈöèËÆøÊúüÈó¥Ôºå‰∏é‰ªé‰∏çÂê∏ÁÉüÁõ∏ÊØîÔºåÊØèÂ§©<10ÊîØÁÉüÊàñÊØèÂ§©‚â•10ÊîØÁÉüÁöÑÂÖ®Âõ†Ê≠ª‰∫°ÁéáÂç±Èô©ÊØîÂàÜÂà´‰∏∫1.17Ôºà95%ÁΩÆ‰ø°Âå∫Èó¥1.10-1.25ÔºâÂíå1.54Ôºà1.42-1.67Ôºâ„ÄÇÊó†ËÆ∫Âπ¥ÈæÑÊàñÊÄßÂà´ÔºåÂç±Èô©ÊØîÁõ∏‰ºº„ÄÇ‰∏éÊØèÊó•Âê∏ÁÉüÂÖ≥Á≥ªÊúÄÂØÜÂàáÁöÑÁñæÁóÖÊòØÂëºÂê∏ÈÅìÁôåÁóá„ÄÅÊÖ¢ÊÄßÈòªÂ°ûÊÄßËÇ∫ÁóÖÂíåËÉÉËÇ†ÈÅìÂèäË°ÄÁÆ°ÁñæÁóÖ„ÄÇÂú®ÊãõÂãüÊó∂Â∑≤ÁªèÊàíÁÉüÁöÑ‰∫∫ÁöÑÊ≠ª‰∫°Áéá‰Ωé‰∫éÁé∞Âú®ÊØèÂ§©Âê∏ÁÉüËÄÖ„ÄÇ\n    * Âê∏ÁÉüËÄÖÂπ≥ÂùáÂáèÂ∞ëÂØøÂëΩ11-12Âπ¥\n  * [Âê∏ÁÉüËÆ©‰∫∫ËøáÁòæÊòØ‰ªÄ‰πàÂéüÁêÜÔºüÊúâËäÇÂà∂ÁöÑÂê∏ÁÉü‰æùÊóßÊúâÂÆ≥ÂêóÔºü](https://www.zhihu.com/question/24846224/answer/1719798177)\n\n##### 6.1.4. ÂÖâÁÖß\n\n* ÊôíÂ§™Èò≥\n  * [ÊôíÂ§™Èò≥ÂíåÊ≠ª‰∫°ÁéáÁöÑÂÖ≥Á≥ªÔºåÂ¶Ç‰ΩïÁßëÂ≠¶ÔºåÂÆâÂÖ®ÁöÑÊôíÂ§™Èò≥Ôºü\n](https://zhuanlan.zhihu.com/p/76301306)\n    * ‰∏πÈ∫¶‰∏ÄÈ°πÈïøËææ26Âπ¥ÁöÑÁ†îÁ©∂ÂèëÁé∞ÔºåÂ§öÊôíÂ§™Èò≥ËÉΩÊòæËëóÂª∂ÈïøÂØøÂëΩÔºåÂç≥‰ΩøÊòØÁî±‰∫éËøáÂ∫¶Êö¥ÊôíËØ±ÂèëÁöÆËÇ§ÁôåÁöÑÊÇ£ËÄÖÔºåÂπ≥ÂùáÂØøÂëΩ‰πüÊØîÊôÆÈÄö‰∫∫Èïø‰∫Ü6Â≤Å„ÄÇ\n\n##### 6.1.5. ËçØÁâ©\n\n* NMN\n* ‰∫åÁî≤ÂèåËÉç\n  * [‚ÄúËÉç‚ÄùÂêπÂøÖÁúã ‰∏®ÊàëÂ∞±ÊòØÁ•ûËçØ‚Äî‚Äî‰∫åÁî≤ÂèåËÉç](https://zhuanlan.zhihu.com/p/419202902)\n    * ‰∫åÁî≤ÂèåËÉç‰∏ç‰ªÖÂú®Â§öÁßçËÇøÁò§„ÄÅÂøÉË°ÄÁÆ°ÁñæÁóÖÂèäÁ≥ñÂ∞øÁóÖ‰∏≠ÂèëÊå•‰øùÊä§‰ΩúÁî®ÔºåËÄå‰∏îÂú®ËÇ•ËÉñ„ÄÅËÇùÁóÖ„ÄÅËÇæÁóÖÂèäË°∞ËÄÅÊñπÈù¢‰πüÂ§ßÊîæÂºÇÂΩ©„ÄÇ\n  * [‰∫åÁî≤ÂèåËÉç2020ÊúÄÂÄºÂæó‰∫ÜËß£ÁöÑ‚ÄúÂêÉÁìú‚ÄùÂ§ßÊñ∞Èóª‚Äî‚ÄîÊä§ËÉÉ„ÄÅÂÅ•ËÑë„ÄÅÊäóË°∞„ÄÅÈò≤ÁôåËøòÊòØËá¥ÁôåÔºü](https://zhuanlan.zhihu.com/p/357807109)\n  * [‰∫åÁî≤ÂèåËÉçÁúüÁöÑÈÇ£‰πàÁ•ûÂêóÔºüÁæéÁ†îÁ©∂ÔºöÁà∂‰∫≤ÊúçÁî®‰∫åÁî≤ÂèåËÉçÊàñËá¥Â≠êÂ•≥ÊúâÁº∫Èô∑](https://baijiahao.baidu.com/s?id=1729999374705305768)\n  * ![‰∫åÁî≤ÂèåËÉç](https://user-images.githubusercontent.com/2707039/163702325-5d427542-9ae5-4311-8979-d0d326a9832f.jpg)\n  * ‰∏çËâØÂèçÂ∫î\n    * ‰Ωú‰∏∫‰∏ÄÁßç‰ΩøÁî®ËøëÁôæÂπ¥ÁöÑËçØÁâ©Ôºå‰∫åÁî≤ÂèåËÉçÁöÑ‰∏çËâØÂèçÂ∫îÂ∑≤ÁªèÈùûÂ∏∏ÊòéÁ°ÆÔºåÂ∏∏ËßÅÁöÑÊúâÔºöÁª¥ÁîüÁ¥†B12Áº∫‰πèÔºà7%-17.4%ÔºâÔºåËÉÉËÇ†ÈÅì‰∏çËâØÂèçÂ∫îÔºàÊúÄÈ´ò53%ÔºâÔºåÁñ≤ÂÄ¶Ôºà9%ÔºâÔºåÂ§¥ÁóõÔºà6%ÔºâÔºõ‰∏•Èáç‰ΩÜ‰∏çÂ∏∏ËßÅÁöÑ‰∏çËâØÂèçÂ∫îÂåÖÊã¨‰π≥ÈÖ∏ÈÖ∏‰∏≠ÊØí„ÄÅËÇùÊçü‰º§Ôºõ‰πüÊúâÁ†îÁ©∂Ë°®ÊòéÂèØËÉΩÂØπËÉéÂÑøËá¥Áï∏\n* Â§çÂêàÁª¥ÁîüÁ¥†\n  * [ÊúçÁî®Â§çÂêàÁª¥ÁîüÁ¥†ÂèØÈôç‰ΩéÁôåÁóáÂç±Èô©8%ÔºåÂÖ∂‰ªñÊïàÊûúÂπ∂‰∏çÊòæËëó](https://health.qq.com/a/20121023/000026.htm)\n* Ëë°ËêÑÁ≥ñËÉ∫\n  * [Á•ûÂ•áÔºÅÊ∞®Á≥ñÈôç‰ΩéÂøÉË°ÄÁÆ°Ê≠ª‰∫°Áéá65%Ôºå‰∏éÂÆöÊúüËøêÂä®ÊïàÊûúÁõ∏ÂΩì](https://www.sohu.com/a/436372221_120873241)\n  * ÁæéÂõΩË•øÂºóÂêâÂ∞º‰∫öÂ§ßÂ≠¶ÊúÄÊñ∞Á†îÁ©∂ÂèëÁé∞ Ê∞®Á≥ñÔºàËΩØÈ™®Á¥†Ôºâ ÂèØ‰ª•Èôç‰ΩéÂøÉË°ÄÁÆ°Ê≠ª‰∫°Áéá65%ÔºåÈôç‰ΩéÊÄª‰ΩìÊ≠ª‰∫°Áéá39%ÔºåÊïàÊûú‰∏éÂùöÊåÅÂÆöÊúüËøêÂä®Áõ∏ÂØπ\n  * ËØ•Á†îÁ©∂‰ΩøÁî®1999Âπ¥Ëá≥2010Âπ¥Ôºå16,686ÂêçÊàêÂπ¥‰∫∫ÁöÑÂõΩÂÆ∂ÂÅ•Â∫∑ÂíåËê•ÂÖªÊ£ÄÊü•(NHANES)Êï∞ÊçÆÔºåÂèÇ‰∏éËÄÖÁöÑ‰∏≠‰ΩçËøΩË∏™Êó∂Èó¥‰∏∫107‰∏™ÊúàÔºåËÄåÂÖ∂‰∏≠Êúâ648‰ΩçÂèÇ‰∏éËÄÖÂÆöÊúü‰∏îÊØèÊúçÁî®Êó•500-1000ÊØ´ÂÖãÁöÑËë°ËêÑÁ≥ñËÉ∫/ËΩØÈ™®Á¥†‰∏ÄÂπ¥‰ª•‰∏ä„ÄÇ\n* ‰∫öÁ≤æËÉ∫\n  * [ScienceÔºöÁßëÂ≠¶ËÉå‰π¶ÔºÅ‰ªéÁ≤æÊ∂≤‰∏≠ÂèëÁé∞ÁöÑ‰∫öÁ≤æËÉ∫ÔºåÁ´üÁÑ∂ÊúâÁùÄÊäóË°∞ËÄÅ„ÄÅÊäóÁôå„ÄÅ‰øùÊä§ÂøÉË°ÄÁÆ°ÂíåÁ•ûÁªè„ÄÅÊîπÂñÑËÇ•ËÉñÂíå2ÂûãÁ≥ñÂ∞øÁóÖÁ≠âÈÄÜÂ§©Á•ûÊïà](https://www.medsci.cn/article/show_article.do?id=420d12904103)\n  * ‰∫öÁ≤æËÉ∫ÊòØÊúÄÂÆπÊòì‰ªé‰∫∫‰ΩìËÇ†ÈÅìÂê∏Êî∂ÁöÑÂ§öËÉ∫„ÄÇËÆ∏Â§öÁöÑÈ£üÁâ©‰∏≠ÈÉΩÂê´ÊúâÂ§ßÈáèÁöÑ‰∫öÁ≤æËÉ∫Ôºå‰æãÂ¶ÇÊñ∞È≤úÁöÑÈùíÊ§í„ÄÅÂ∞èÈ∫¶ËÉöËäΩ„ÄÅËä±Ê§∞Ëèú„ÄÅË•øÂÖ∞Ëä±„ÄÅËòëËèáÂíåÂêÑÁßçÂ•∂ÈÖ™ÔºåÂ∞§ÂÖ∂Âú®Á∫≥Ë±ÜÁ≠âÂ§ßË±ÜÂà∂ÂìÅ„ÄÅÈ¶ôËèáÂíåÊ¶¥Ëé≤‰∏≠Âê´ÈáèÊõ¥È´ò„ÄÇÂú®Êú¨ÂÆûÈ™å‰∏≠ÔºåÁ†îÁ©∂‰∫∫ÂëòÈÄâÊã©‰∫Ü829‰ΩçÂπ¥ÈæÑÂú®45-84Â≤Å‰πãÈó¥ÁöÑÂèÇ‰∏éËÄÖËøõË°å‰∫Ü‰∏∫Êúü20Âπ¥ÁöÑÈöèËÆøÔºåÂàÜÊûê‰∫ÜÈ•ÆÈ£ü‰∏≠‰∫öÁ≤æËÉ∫ÊëÑÂÖ•Èáè‰∏é‰∫∫Á±ªÊ≠ª‰∫°Áéá‰πãÈó¥ÁöÑÊΩúÂú®ÂÖ≥ËÅî„ÄÇ\n  * Á†îÁ©∂ÂèëÁé∞ÔºåÂ•≥ÊÄßÁöÑ‰∫öÁ≤æËÉ∫ÊëÑÂÖ•ÈáèÈ´ò‰∫éÁî∑ÊÄßÔºåÂπ∂‰∏îÊëÑÂÖ•ÈáèÈÉΩ‰ºöÈöèÁùÄÂπ¥ÈæÑÁöÑÂ¢ûÈïøËÄå‰∏ãÈôç„ÄÇ‰∫öÁ≤æËÉ∫ÁöÑ‰∏ªË¶ÅÊù•Ê∫êÊòØÂÖ®Ë∞∑Áâ©ÔºàÂç†13.4%Ôºâ„ÄÅËãπÊûúÂíåÊ¢®ÔºàÂç†13.3%Ôºâ„ÄÅÊ≤ôÊãâÔºàÂç†9.8%Ôºâ„ÄÅËäΩËèúÔºàÂç†7.3%ÔºâÂíåÈ©¨ÈìÉËñØÔºàÂç†6.4%Ôºâ„ÄÇÁ†îÁ©∂Ê†πÊçÆ‰∫öÁ≤æËÉ∫ÊëÑÂÖ•ÈáèÂ∞Ü‰∫∫Áæ§ÂàÜ‰∏∫‰∏âÁªÑÔºå‰ΩéÊëÑÂÖ•ÈáèÁªÑÔºà<62.2 ¬µmol / dÔºâ„ÄÅ‰∏≠ÊëÑÂÖ•ÈáèÁªÑÔºà62.2‚Äì79.8 ¬µmol / dÔºâÂíåÈ´òÊëÑÂÖ•ÈáèÁªÑÔºà> 79.8 ¬µmol / dÔºâ„ÄÇÈöèËÆøÊúüÈó¥ÂÖ±ËÆ∞ÂΩï‰∫Ü341‰æãÊ≠ª‰∫°ÔºåÂÖ∂‰∏≠Ë°ÄÁÆ°ÁñæÁóÖ137‰æãÔºåÁôåÁóá94‰æãÔºåÂÖ∂‰ªñÂéüÂõ†110‰æã„ÄÇÁªèËÆ°ÁÆó‰Ωé‰∏≠È´ò‰∏âÁªÑÁöÑÁ≤óÁï•Ê≠ª‰∫°ÁéáÂàÜÂà´‰∏∫40.5%„ÄÅ23.7%Âíå15.1%ÔºåËøô‰∫õÊï∞ÊçÆË°®Êòé‰∫öÁ≤æËÉ∫ÊëÑÂÖ•Èáè‰∏éÂÖ®Âõ†Ê≠ª‰∫°Áéá‰πãÈó¥ÁöÑË¥üÁõ∏ÂÖ≥ÂÖ≥Á≥ªÊòæËëó„ÄÇÈöèÁùÄÈÄêÊ≠•ÂØπÂπ¥ÈæÑ„ÄÅÊÄßÂà´ÂíåÁÉ≠ÈáèÁöÑÊØî‰æãËøõË°åË∞ÉÊï¥ÔºåËøôÁßçÁõ∏ÂÖ≥ÂÖ≥Á≥ª‰æùÁÑ∂ÊòæËëó„ÄÇ\n* ÁªºÂêà\n  * [„ÄäËá™ÁÑ∂„ÄãÂ≠êÂàäÊ∑±Â∫¶ÁªºËø∞ÔºöÂ¶Ç‰ΩïÂºÄÂèëÊäóË°∞ËÄÅËçØ](https://zhuanlan.zhihu.com/p/145495570)\n  * ![Â¶Ç‰ΩïÂºÄÂèëÊäóË°∞ËÄÅËçØ](https://user-images.githubusercontent.com/2707039/163702474-205baeec-f0ce-4e8d-96a4-36efe47534de.jpg)\n\n#### 6.2. ËæìÂá∫\n\n##### 6.2.1. Êå•ÊãçËøêÂä®\n\n* [Âì™ÁßçËøêÂä®ÊÄß‰ª∑ÊØîÊúÄÈ´òÔºüÊùÉÂ®ÅÂåªÂ≠¶ÊùÇÂøó‚ÄúÊü≥Âè∂ÂàÄ‚ÄùÁªôÂá∫Á≠îÊ°à‰∫Ü ](https://www.sohu.com/a/535581770_121124216)\n  * ‰∏ÄÂë®‰∏âÊ¨°ÔºåÊØèÊ¨°45-60ÂàÜÈíüÔºåÊå•ÊãçËøêÂä®ÔºåÈôç‰Ωé~47%ÂÖ®Âõ†Ê≠ª‰∫°Áéá\n  * ÁæΩÊØõÁêÉ„ÄÅ‰πí‰πìÁêÉ„ÄÅÁΩëÁêÉÁ≠âÈÉΩÁÆóÊå•ÊãçËøêÂä®Ôºå‰ΩÜÁî±‰∫éË•øÂåñÁ†îÁ©∂ËÉåÊôØÔºåÂèØËÉΩÊåáÁΩëÁêÉÊõ¥Â§ö„ÄÇËøôÈöêÂºèÁöÑË°®Ëææ‰∫ÜÂÖ®Ë∫´ÈîªÁÇºÊõ¥‰∏∫ÈáçË¶Å\n\n##### 6.2.2. ÂâßÁÉàËøêÂä®\n\n* [Êñ∞Á†îÁ©∂ÔºöÊØèÂ§©ÂâßÁÉàËøêÂä®8ÂàÜÈíüÔºåÂèØÈôç‰ΩéÂÖ®Âõ†Ê≠ª‰∫°ÂíåÂøÉËÑèÁóÖÈ£éÈô©](https://academic.oup.com/eurheartj/advance-article/doi/10.1093/eurheartj/ehac572/6771381)\n  * ÊØèÂë®15-20ÂàÜÈíüÁöÑÂâßÁÉàËøêÂä®ÔºåÈôç‰Ωé16-40%ÁöÑÂÖ®Âõ†Ê≠ª‰∫°ÁéáÔºåÂâßÁÉàËøêÂä®Êó∂Èó¥ËææÂà∞50-57ÂàÜÈíü/Âë®ÔºåÂèØ‰ª•Ëøõ‰∏ÄÊ≠•Èôç‰ΩéÂÖ®Âõ†Ê≠ª‰∫°Áéá„ÄÇËøô‰∫õÂèëÁé∞Ë°®ÊòéÔºåÈÄöËøáÂú®‰∏ÄÂë®ÁöÑÁü≠Êó∂Èó¥ÂÜÖÁ¥ØÁßØÁõ∏ÂØπÂ∞ëÈáèÁöÑÂâßÁÉàËøêÂä®ÂèØ‰ª•Èôç‰ΩéÂÅ•Â∫∑È£éÈô©„ÄÇ\n  \n##### 6.2.3. Ëµ∞Ë∑Ø\n\n* [Ëµ∞Ë∑ØÈôç‰ΩéÂÖ®Âõ†Ê≠ª‰∫°ÁéáË∂ÖËøá50%ÔºÅÊØèÂ§©Ëµ∞Â§öÂ∞ëÊ≠•ÊúÄÂêàÈÄÇÔºü„ÄäJAMA„ÄãÂ≠êÂàäË∂Ö10Âπ¥Á†îÁ©∂ÂëäËØâ‰Ω†Á≠îÊ°à](http://www.shcell.org/219/3571.html)\n  * ![Ëµ∞Ë∑ØÈôç‰ΩéÂÖ®Âõ†Ê≠ª‰∫°Áéá](https://user-images.githubusercontent.com/2707039/163704147-afec1c79-799b-4db8-b547-1a2431d504c9.jpg)\n  * Ê≥®1ÔºöËøôÈ°πÁ†îÁ©∂ÂèÇ‰∏éËÄÖÁöÑÂπ≥ÂùáÂπ¥ÈæÑ‰∏∫45.2Â≤Å\n  * Ê≥®2ÔºöÂπ≥ÂùáÊ≠•Êï∞ÁöÑÂ§öÂ∞ë‰∏éËÅå‰∏öÊúâÂÖ≥ÔºåÊ≠§È°πÁ†îÁ©∂‰ªÖË°®ÊòéÁõ∏ÂÖ≥ÊÄßÔºåËøòÊ≤°ÊúâÊõ¥Ê∑±Â∫¶ÁöÑÂõ†ÊûúÂàÜÊûê\n\n##### 6.2.4. Âà∑Áâô\n\n* [50‰∏áÂõΩ‰∫∫Á†îÁ©∂ËØÅÂÆûÔºö‰∏çÂ•ΩÂ•ΩÂà∑ÁâôÔºåËá¥ÁôåÔºÅË°ÄÁÆ°ÁñæÁóÖ‰πü‰ºöÂ¢ûÂ§öÔºÅ](https://www.cn-healthcare.com/articlewm/20211209/content-1293760.html)\n  * ÁªèÂ∏∏‰∏çÂà∑ÁâôÁöÑ‰∫∫ÔºöÁôåÁóá„ÄÅÊÖ¢ÊÄßÈòªÂ°ûÊÄßËÇ∫ÁóÖÂèäËÇùÁ°¨ÂåñÈ£éÈô©ÂàÜÂà´Â¢ûÂä†‰∫Ü9%„ÄÅ12%Âíå25%ÔºåËøáÊó©Ê≠ª‰∫°È£éÈô©Â¢ûÂä†25%„ÄÇ\n\n##### 6.2.5. Ê≥°Êæ°\n\n* [ÂÆöÊúüÊ¥óÊæ°Èôç‰ΩéÂøÉË°ÄÁÆ°ÁñæÁóÖÂèë‰ΩúÈ£éÈô©](https://www.cn-healthcare.com/article/20200326/content-533379.html)\n  * ‰∏éÊØèÂë®‰∏ÄËá≥‰∏§Ê¨°Ê≥°Êæ°ÊàñÊ†πÊú¨‰∏çÊ≥°Êæ°Áõ∏ÊØîÔºåÊØèÂ§©Ê¥óÁÉ≠Ê∞¥Êæ°ÂèØ‰ª•Èôç‰Ωé28%ÁöÑÂøÉË°ÄÁÆ°ÁñæÁóÖÊÄªÈ£éÈô©ÔºåÈôç‰Ωé26%ÁöÑ‰∏≠È£éÊÄªÈ£éÈô©ÔºåËÑëÂá∫Ë°ÄÈ£éÈô©‰∏ãÈôç46%„ÄÇËÄåÊµ¥Áº∏Êµ¥ÁöÑÈ¢ëÁéá‰∏éÂøÉÊ∫êÊÄßÁåùÊ≠ªÁöÑÈ£éÈô©Â¢ûÂä†Êó†ÂÖ≥„ÄÇ\n\n##### 6.2.6. ÂÅöÂÆ∂Âä°ÔºàËÄÅÂπ¥Áî∑ÊÄßÔºâ\n\n* [Housework Reduces All-Cause and Cancer Mortality in Chinese Men](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0061529)\n  * 72Â≤Å‰πãÂêéÁî∑ÊÄßÊØèÂë®ÂÅöÈáçÂûãÂÆ∂Âä°ÂèØ‰ª•ÂáèÂ∞ë29%Âπ≥ÂùáÊ≠ª‰∫°Áéá\n  * ÈáçÂûãÂÆ∂Âä°ÔºöÂê∏Â∞ò„ÄÅÊì¶Âú∞Êùø„ÄÅÊãñÂú∞„ÄÅÊì¶Ê¥óÁ™óÊà∑„ÄÅÊ¥óËΩ¶„ÄÅÊê¨Âä®ÂÆ∂ÂÖ∑„ÄÅÊê¨ÁÖ§Ê∞îÁΩêÁ≠âÁ≠â„ÄÇ\n  * ËΩªÂûãÂÆ∂Âä°ÔºöÊé∏ÁÅ∞Â∞ò„ÄÅÊ¥óÁ¢ó„ÄÅÊâãÊ¥óË°£Êúç„ÄÅÁÜ®ÁÉ´„ÄÅÊôæË°£Êúç„ÄÅÂÅöÈ•≠„ÄÅ‰π∞Êó•Áî®ÂìÅÁ≠âÁ≠â„ÄÇ\n\n##### 6.2.7. Áù°Áú†\n\n* [Ë∂Ö30‰∏á‰∫öÊ¥≤‰∫∫Êï∞ÊçÆÔºöÊØèÂ§©Áù°Âá†‰∏™Â∞èÊó∂ÊúÄÊúâÁõäÈïøÂØøÔºü](https://med.sina.com/article_detail_103_1_105491.html)\n  * Âú®Áî∑ÊÄß‰∏≠Ôºå‰∏éÁù°Áú†Êó∂Èïø‰∏∫7Â∞èÊó∂Áõ∏ÊØîÔºöÁù°Áú†ÊåÅÁª≠Êó∂Èó¥‚â•10Â∞èÊó∂‰∏éÂÖ®Âõ†Ê≠ª‰∫°È£éÈô©Â¢ûÂä†34%Áõ∏ÂÖ≥Ôºõ\n  * ![Áù°Áú†-Áî∑](https://user-images.githubusercontent.com/2707039/163704166-226b7ebb-92ce-4753-a3e7-77a87652a104.jpg)\n  * Âú®Â•≥ÊÄß‰∏≠Ôºå‰∏éÁù°Áú†ÊåÅÁª≠Êó∂Èó¥7Â∞èÊó∂Áõ∏ÊØîÔºöÁù°Áú†ÊåÅÁª≠Êó∂Èó¥‚â•10Â∞èÊó∂‰∏éÂÖ®Âõ†Ê≠ª‰∫°È£éÈô©Â¢ûÂä†48%Áõ∏ÂÖ≥Ôºõ\n  * ![Áù°Áú†-Â•≥](https://user-images.githubusercontent.com/2707039/163704169-c5c715aa-7130-403b-b0d1-ec34fab094d8.png)\n* [È¢†Ë¶ÜËÆ§Áü•ÔºÅÂä†ÊãøÂ§ßÁ†îÁ©∂ÂèëÁé∞ÔºöÊó©Áù°ÊØîÁÜ¨Â§úÊàñËÆ∏Êõ¥‰º§Ë∫´ÔºåÂá†ÁÇπÁù°ÊâçÂ•ΩÔºü](https://www.thepaper.cn/newsDetail_forward_14461799)\n  * ÂÖ∂‰∏≠‰∏Ä‰∏™ÁªìËÆ∫‰∏∫ÔºåÂ∞±ÂØùÊó∂Èó¥‰∏éÂÖ®Âõ†Ê≠ª‰∫°ÁéáÁöÑÂÖ≥ËÅîÊÄßÂº∫ÔºåËøáÊó©Áù°ËßâÂíåËøáÊôöÁù°ËßâÈÉΩ‰ºöÂΩ±ÂìçÂÅ•Â∫∑Ôºå‰ΩÜÊòØÊó©Áù°Â¢ûÂä†ÁöÑÂÖ®Âõ†Ê≠ª‰∫°ÁéáÊØîÊôöÁù°Â¢ûÂä†ÁöÑÊ≠ª‰∫°ÁéáÈ´òÔºåÊó©Áù°Â¢ûÂä†‰∫Ü43%ÁöÑÊ≠ª‰∫°È£éÈô©ÔºåËÄåÊôöÁù°Â¢ûÂä†‰∫Ü15%ÁöÑÊ≠ª‰∫°È£éÈô©„ÄÇ\n  * ËøôÈ°πË∞ÉÊü•Á†îÁ©∂ÔºåËøòÂ≠òÂú®ÂæàÂ§öÂ±ÄÈôêÊÄßÔºåÊØîÂ¶ÇÊ≤°ÊúâÁõ¥Êé•ËØÅÊòéÂ∞±ÂØùÊó∂Èó¥‰∏éÊ≠ª‰∫°ÁöÑÂÖ≥Á≥ªÔºå‰ªÖ‰ªÖËØ¥ÊòéÁõ∏ÂÖ≥ÊÄßÔºåÈÄöËøáÂèÇ‰∏é‰∫∫Áæ§Ëá™ÊàëÊä•ÂëäÁªüËÆ°Áù°Áú†Êó∂Èó¥ÔºåÊï∞ÊçÆ‰∏çÂ§üÂÆ¢ËßÇ\n\n##### 6.2.8. ‰πÖÂùê\n\n* [‰∏≠ÂõΩÂ±ÖÊ∞ëËÜ≥È£üÊåáÂçóÁßëÂ≠¶Á†îÁ©∂Êä•ÂëäÔºà2021Âπ¥Ôºâ](https://www.chinanutri.cn/yyjkzxpt/yyjkkpzx/yytsg/zgjm/202103/P020210311486742870527.pdf)\n  * ‰πÖÂùêÂíåÁúãÁîµËßÜÊó∂Èó¥‰∏éÂÖ®Âõ†Ê≠ª‰∫°„ÄÅÂøÉË°ÄÁÆ°ÁñæÁóÖ„ÄÅÁôåÁóáÂíå2ÂûãÁ≥ñÂ∞øÁóÖÂèëÁóÖÈ´òÈ£éÈô©Áõ∏ÂÖ≥ÔºåÊòØÁã¨Á´ãÈ£éÈô©Âõ†Á¥†„ÄÇ‰πÖÂùêÊó∂Èó¥ÊØèÂ§©ÊØèÂ¢ûÂä†1Â∞èÊó∂ÔºåÂøÉË°ÄÁÆ°ÁñæÁóÖÂèëÁîüÈ£éÈô©Â¢ûÂä†4%ÔºåÁôåÁóáÂ¢ûÂä†1%ÔºåÂÖ®Âõ†Ê≠ª‰∫°È£éÈô©Â¢ûÂä†3%„ÄÇÂÖ®Âõ†Ê≠ª‰∫°ÂíåCVDÊ≠ª‰∫°È£éÈô©Â¢ûÂä†ÁöÑ‰πÖÂùêÊó∂Èó¥ÈòàÂÄºÊòØ6\\~8h/dÔºåÁúãÁîµËßÜÊó∂Èó¥ÈòàÂÄºÊòØ3\\~4h/d„ÄÇ\n* [‰∏ñÂç´ÁªÑÁªáÂÖ≥‰∫éË∫´‰ΩìÊ¥ªÂä®Âíå‰πÖÂùêË°å‰∏∫ÁöÑÊåáÂçó](https://apps.who.int/iris/bitstream/handle/10665/337001/9789240014947-chi.pdf)\n\n#### 6.3. ‰∏ä‰∏ãÊñá\n\n##### 6.3.1. ÊÉÖÁª™\n\n* [ÊÇ≤ËßÇÊÉÖÁª™‰∏éÊõ¥È´òÁöÑÂÖ®Âõ†Ê≠ª‰∫°ÁéáÂíåÂøÉË°ÄÁÆ°ÁñæÁóÖÊ≠ª‰∫°ÁéáÊúâÂÖ≥Ôºå‰ΩÜ‰πêËßÇÊÉÖÁª™Âπ∂‰∏çËÉΩËµ∑Âà∞‰øùÊä§‰ΩúÁî®](https://www.x-mol.com/paper/1288184397379059712/t?recommendPaper=1263704526086578176)\n* [Pessimism is associated with greater all-cause and cardiovascular mortality, but optimism is not protective](https://www.nature.com/articles/s41598-020-69388-y?utm_source=xmol&utm_medium=affiliate&utm_content=meta&utm_campaign=DDCN_1_GL01_metadata_scirep)\n  * Âú®1993-1995Âπ¥Èó¥Ôºå‰∏ÄÈ°πÈíàÂØπ50Â≤Å‰ª•‰∏äÊæ≥Â§ßÂà©‰∫ö‰∫∫ÂÅ•Â∫∑ÁöÑÂèåËÉûËÉéÁ†îÁ©∂‰∏≠ÂåÖÊã¨‰∫ÜÁîüÊ¥ªÂèñÂêëÊµãËØïÔºàLOTÔºâÔºåÂÖ∂‰∏≠ÂåÖÂê´‰πêËßÇÂíåÊÇ≤ËßÇÁöÑÈ°πÁõÆ„ÄÇÂπ≥Âùá20Âπ¥ÂêéÔºåÂèÇ‰∏éËÄÖ‰∏éÊù•Ëá™Êæ≥Â§ßÂà©‰∫öÂõΩÂÆ∂Ê≠ª‰∫°ÊåáÊï∞ÁöÑÊ≠ª‰∫°‰ø°ÊÅØÁõ∏ÂåπÈÖç„ÄÇÂú®2,978ÂêçÂÖ∑ÊúâÂæàÂ§öÂèØÁî®ÂàÜÊï∞ÁöÑÂèÇ‰∏éËÄÖ‰∏≠ÔºåÊúâ1,068‰∫∫Ê≠ª‰∫°„ÄÇÁîüÂ≠òÂàÜÊûêÊµãËØï‰∫ÜÂêÑÁßç‰πêËßÇÂõ†Á¥†ÂíåÊÇ≤ËßÇÊÉÖÁª™ÂàÜÊï∞‰∏é‰ªª‰ΩïÂéüÂõ†ÔºåÁôåÁóáÔºåÂøÉË°ÄÁÆ°ÁñæÁóÖÊàñÂÖ∂‰ªñÂ∑≤Áü•ÂéüÂõ†ÁöÑÊ≠ª‰∫°Áéá‰πãÈó¥ÁöÑÂÖ≥ËÅî„ÄÇÂπ¥ÈæÑË∞ÉÊï¥ÂêéÁöÑÊÇ≤ËßÇÈáèË°®‰∏äÁöÑÊ†∏ÂøÉ‰∏éÂÖ®Âõ†ÂíåÂøÉË°ÄÁÆ°ÁñæÁóÖÊ≠ª‰∫°ÁéáÁõ∏ÂÖ≥ÔºàÊØè1‰∏™Ê†áÂáÜÂ∑ÆÂçï‰ΩçÁöÑÂç±Èô©ÊØîÔºå95ÔºÖÁΩÆ‰ø°Âå∫Èó¥ÂíåpÂÄº1.134„ÄÅ1.065‚Äì1.207„ÄÅ8.85√ó10 ‚Äì5Âíå1.196„ÄÅ1.045‚Äì1.368„ÄÅ0.0093 ÔºâÔºå‰ΩÜ‰∏ç‰ºöÂõ†ÁôåÁóáÊ≠ª‰∫°„ÄÇ‰πêËßÇÂæóÂàÜ‰∏éÊÇ≤ËßÇÂæóÂàÜ‰πãÈó¥ÁöÑÁõ∏ÂÖ≥ÊÄßÂæàÂº±ÔºàÂπ¥ÈæÑË∞ÉÊï¥ÂêéÁöÑÁ≠âÁ∫ßÁõ∏ÂÖ≥Á≥ªÊï∞= ‚àí 0.176ÔºâÔºå‰ΩÜ‰∏éÊÄªÊ≠ª‰∫°ÁéáÊàñÁâπÂÆöÂéüÂõ†Ê≠ª‰∫°ÁéáÊ≤°ÊúâÊòæÁùÄÁõ∏ÂÖ≥ÊÄß„ÄÇÂèçÂêëÂõ†ÊûúÂÖ≥Á≥ªÔºàÂºïËµ∑ÊÇ≤ËßÇÊÉÖÁª™ÁöÑÁñæÁóÖÔºâÊòØ‰∏çÂèØËÉΩÁöÑÔºåÂõ†‰∏∫Âú®ÈÇ£ÁßçÊÉÖÂÜµ‰∏ãÔºåÂøÉË°ÄÁÆ°ÁñæÁóÖÂíåÁôåÁóáÈÉΩ‰ºöÂØºËá¥ÊÇ≤ËßÇÊÉÖÁª™„ÄÇ\n\n##### 6.3.2. Ë¥´ÂØå\n\n* [JAMAÂ≠êÂàäÔºöË¥´ÂØåÂ∑ÆË∑ùÁúüËÉΩÂΩ±ÂìçÂØøÂëΩÔºüËøôÂèØËÉΩÊòØÁúüÁöÑÔºÅ](https://www.cn-healthcare.com/articlewm/20210727/content-1246348.html)\n  * ËØ•Á†îÁ©∂‰ΩøÁî®1994-1996Âπ¥Á¨¨‰∏ÄÊ¨°Êî∂ÈõÜÁöÑÊï∞ÊçÆÔºåÂπ∂ÈÄöËøáÁîüÂ≠òÊ®°ÂûãÊù•ÂàÜÊûêÂáÄËµÑ‰∫ßÂíåÈïøÂØø‰πãÈó¥ÁöÑÂÖ≥ËÅî„ÄÇÁªìÊûúÊòæÁ§∫ÔºåÂÖ±Êî∂Á∫≥5414 ÂêçÂèÇ‰∏éËÄÖÔºåÂπ≥ÂùáÂπ¥ÈæÑ‰∏∫ 46.7Â≤ÅÔºåÂåÖÊã¨ 2766 ÂêçÂ•≥ÊÄß„ÄÇËæÉÈ´òÁöÑÂáÄËµÑ‰∫ß‰∏éËæÉ‰ΩéÁöÑÊ≠ª‰∫°È£éÈô©Áõ∏ÂÖ≥„ÄÇÁâπÂà´ÊòØÂú®ÂÖÑÂºüÂßêÂ¶πÂíåÂèåËÉûËÉé‰∏≠Ôºàn = 2490ÔºâÔºåÂú®ËæÉÈ´òÁöÑÂáÄËµÑ‰∫ßÂíåËæÉ‰ΩéÁöÑÊ≠ª‰∫°Áéá‰πãÈó¥ËßÇÂØüÂà∞Á±ª‰ººÁöÑÂÖ≥ËÅîÔºåË°®ÊòéÊã•ÊúâÊõ¥Â§öË¥¢ÂØåÁöÑÂÖÑÂºüÂßêÂ¶πÊàñÂèåËÉûËÉéÊØîÊã•ÊúâÊõ¥Â∞ëË¥¢ÂØåÁöÑÂÖÑÂºüÂßêÂ¶π/ÂèåËÉûËÉéÊ¥ªÂæóÊõ¥‰πÖ„ÄÇ\n\n##### 6.3.3. ‰ΩìÈáç\n\n* [JAMAÂ≠êÂàäÔºöÂáèËÇ•Ë¶ÅË∂ÅÊó©ÔºåÊâçËÉΩÊúâÊïàÈôç‰ΩéÊ≠ª‰∫°ÁéáÈ£éÈô©](https://www.chinacdc.cn/gwxx/202009/t20200904_218959.html)\n  * ÂØπ‰ΩìÈáçÂáèËΩªÁöÑÊ≠ª‰∫°ÁéáÈ£éÈô©ËØÑ‰º∞ÂèëÁé∞Ôºå‰ΩìÈáç‰ªéËÇ•ËÉñÂáèËΩªÂà∞Ë∂ÖÈáçÁöÑÊàêÂπ¥‰∫∫‰∏éÁ®≥ÂÆöËÇ•ËÉñ‰∫∫Áæ§Áõ∏ÊØîÔºåÂÖ®Âõ†Ê≠ª‰∫°ÁéáÈôç‰Ωé‰∫Ü54ÔºÖÔºàÂç±Èô©ÊØî‰∏∫0.46ÔºâÔºåÁÑ∂ËÄå‰ªéÊàêÂπ¥ÂàùÊúüÁöÑË∂ÖÈáçÂáèËΩªÂà∞‰∏≠Âπ¥‰ª•ÂâçÁöÑÊ≠£Â∏∏‰ΩìÈáçÁöÑ‰∫∫Áæ§ÁöÑÊ≠ª‰∫°ÁéáÈ£éÈô©Âπ∂Êú™Èôç‰ΩéÔºàÈ£éÈô©ÊØî‰∏∫1.12Ôºâ„ÄÇ\n  * ![Table3](https://raw.githubusercontent.com/qhy040404/Image-Resources-Repo/master/zoi200509t3_1596761185.02415.png)\n\n##### 6.3.4. Êñ∞ÂÜ†\n\n* [Magnitude, demographics and dynamics of the effect of the first wave of the COVID-19 pandemic on all-cause mortality in 21 industrialized countries](https://www.nature.com/articles/s41591-020-1112-0.pdf)\n  * ÁõÆÂâçÊù•ÁúãÔºåÊñ∞ÂÜ†Ê≠ª‰∫°ÁéáÔºàÁæéÂõΩÔºâÂú®1.5%Â∑¶Âè≥Ôºå‰∫∫ÂùáÈ¢ÑÊúüÂØøÂëΩÂáèÂ∞ë‰∫Ü2Âπ¥\n* [Â¶Ç‰ΩïÁúãÂæÖÁæéÂõΩCDCÂÆ£Áß∞Êñ∞ÂÜ†Ê≠ª‰∫°‰∫∫Êï∞Ë¢´È´ò‰º∞Ôºü](https://www.zhihu.com/question/510943670/answer/2308499719)\n* [NVSS deaths](https://www.cdc.gov/nchs/nvss/deaths.htm)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "longevity",
        "wellness",
        "mortality",
        "improving longevity",
        "longevity nutrition",
        "lifestyle insights"
      ],
      "category": "healthcare-and-medical"
    },
    "ahmedjemaa-tech--medical-coding-reproducibility": {
      "owner": "ahmedjemaa-tech",
      "name": "medical-coding-reproducibility",
      "url": "https://github.com/ahmedjemaa-tech/medical-coding-reproducibility",
      "imageUrl": "/freedevtools/mcp/pfp/ahmedjemaa-tech.webp",
      "description": "Automates the process of assigning diagnosis and procedure codes from electronic health records. Utilizes advanced models to improve accuracy and efficiency in medical coding tasks, with tools and datasets from MIMIC-III and MIMIC-IV.",
      "stars": 0,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "",
      "updated_at": "2025-03-29T10:21:50Z",
      "readme_content": "# ‚öïÔ∏èAutomated Medical Coding on MIMIC-III and MIMIC-IV: A Critical Review and Replicability Study\n\nOfficial source code repository for the SIGIR 2023 paper [Automated Medical Coding on MIMIC-III and MIMIC-IV: A Critical Review and Replicability Study](https://dl.acm.org/doi/10.1145/3539618.3591918)\n\n\n```bibtex\n@inproceedings{edinAutomatedMedicalCoding2023,\n  address = {Taipei, Taiwan},\n  title = {Automated {Medical} {Coding} on {MIMIC}-{III} and {MIMIC}-{IV}: {A} {Critical} {Review} and {Replicability} {Study}},\n  isbn = {978-1-4503-9408-6},\n  shorttitle = {Automated {Medical} {Coding} on {MIMIC}-{III} and {MIMIC}-{IV}},\n  doi = {10.1145/3539618.3591918},\n  booktitle = {Proceedings of the 46th {International} {ACM} {SIGIR} {Conference} on {Research} and {Development} in {Information} {Retrieval}},\n  publisher = {ACM Press},\n  author = {Edin, Joakim and Junge, Alexander and Havtorn, Jakob D. and Borgholt, Lasse and Maistro, Maria and Ruotsalo, Tuukka and Maal√∏e, Lars},\n  year = {2023}\n}\n```\n\n## Update\nWe released a new [paper](https://arxiv.org/pdf/2406.08958) and [repository](https://github.com/JoakimEdin/explainable-medical-coding/tree/main) for explainable medical coding. The new repository offers the following:\n- **Explainability**: Multiple feature attribution methods and metrics for multi-label classification. \n- **Implementation of a modified PLM-ICD**: We have fixed the problem of PLM-ICD occasionally collapsing during training.\n- **Huggingface Datasets**: we implemented MIMIC-III, IV, and MDACE as HuggingFace datasets.\n- **Inference code**: We provide code for inference without needing the training dataset.\nThe new repository no longer supports CNN, Bi-GRU, CAML, LAAT, and MultiResCNN.\n\nAlso, check out [my blog post](https://substack.com/home/post/p-145913061?source=queue) criticizing popular ideas in automated medical coding. I think it will be interesting for most researchers in the field\n\n## Introduction \nAutomatic medical coding is the task of automatically assigning diagnosis and procedure codes based on discharge summaries from electronic health records. This repository contains the code used in the paper Automated medical coding on MIMIC-III and MIMIC-IV: A Critical Review and Replicability Study. The repository contains code for training and evaluating medical coding models and new splits for MIMIC-III and the newly released MIMIC-IV. The following models have been implemented:\n\n| Model | Paper | Original Code |\n| ----- | ----- | ------------- |\n| CNN   |[Explainable Prediction of Medical Codes from Clinical Text](https://aclanthology.org/N18-1100/) | [link](https://github.com/jamesmullenbach/caml-mimic) | \n| Bi-GRU|[Explainable Prediction of Medical Codes from Clinical Text](https://aclanthology.org/N18-1100/) | [link](https://github.com/jamesmullenbach/caml-mimic) | \n|CAML   |[Explainable Prediction of Medical Codes from Clinical Text](https://aclanthology.org/N18-1100/) | [link](https://github.com/jamesmullenbach/caml-mimic) | \n| MultiResCNN | [ICD Coding from Clinical Text Using Multi-Filter Residual Convolutional Neural Network](https://arxiv.org/pdf/1912.00862.pdf) | [link](https://github.com/foxlf823/Multi-Filter-Residual-Convolutional-Neural-Network) |\n| LAAT | [A Label Attention Model for ICD Coding from Clinical Text](https://arxiv.org/abs/2007.06351) | [link](https://github.com/aehrc/LAAT) |\n| PLM-ICD | [PLM-ICD: Automatic ICD Coding with Pretrained Language Models](https://aclanthology.org/2022.clinicalnlp-1.2/) | [link](https://github.com/MiuLab/PLM-ICD) |\n\nThe splits are found in `files/data`. The splits are described in the paper.\n\n## How to reproduce results\n### Setup Conda environment\n1. Create a conda environement `conda create -n coding python=3.10`\n2. Install the packages `pip install . -e`\n\n### Prepare MIMIC-III\nThis code has been developed on MIMIC-III v1.4. \n1. Download the MIMIC-III data into your preferred location `path/to/mimiciii`. Please note that you need to complete training to acces the data. The training is free, but takes a couple of hours.  - [link to data access](https://physionet.org/content/mimiciii/1.4/)\n2. Open the file `src/settings.py`\n3. Change the variable `DOWNLOAD_DIRECTORY_MIMICIII` to the path of your downloaded data `path/to/mimiciii`\n4. If you want to use the MIMIC-III full and MIMIC-III 50 from the [Explainable Prediction of Medical Codes from Clinical Text](https://aclanthology.org/N18-1100/) you need to run `python prepare_data/prepare_mimiciii_mullenbach.py`\n5. If you want to use MIMIC-III clean from our paper you need to run `python prepare_data/prepare_mimiciii.py`\n\n### Prepare MIMIC-IV\nThis code has been developed on MIMIC-IV and MIMIC-IV v2.2. \n1. Download MIMIC-IV and MIMIC-IV-NOTE into your preferred location `path/to/mimiciv` and `path/to/mimiciv-note`. Please note that you need to complete training to acces the data. The training is free, but takes a couple of hours.  - [mimiciv](https://physionet.org/content/mimiciv/2.2/) and [mimiciv-note](https://physionet.org/content/mimic-iv-note/2.2/)\n2. Open the file `src/settings.py`\n3. Change the variable `DOWNLOAD_DIRECTORY_MIMICIV` to the path of your downloaded data `path/to/mimiciv`\n4. Change the variable `DOWNLOAD_DIRECTORY_MIMICIV_NOTE` to the path of your downloaded data `path/to/mimiciv-note`\n5. Run `python prepare_data/prepare_mimiciv.py`\n\n### Before running experiments\n1. Create a weights and biases account. It is possible to run the experiments without wandb.\n2. Download the [model checkpoints](https://drive.google.com/file/d/1hYeJhztAd-JbhqHojY7ZpLtkBcthD8AK/view?usp=share_link) and unzip it. Please note that these model weights can't be used commercially due to the MIMIC License.\n3. If you want to train PLM-ICD, you need to download [RoBERTa-base-PM-M3-Voc](https://dl.fbaipublicfiles.com/biolm/RoBERTa-base-PM-M3-Voc-hf.tar.gz), unzip it and change the `model_path` parameter in `configs/model/plm_icd.yaml` and `configs/text_transform\n/huggingface.yaml` to the path of the download. \n\n### Running experiments\n#### Training\nYou can run any experiment found in `configs/experiment`. Here are some examples:\n   * Train PLM-ICD on MIMIC-III clean on GPU 0: `python main.py experiment=mimiciii_clean/plm_icd gpu=0`\n   * Train CAML on MIMIC-III full on GPU 6: `python main.py experiment=mimiciii_full/caml gpu=6`\n   * Train LAAT on MIMIC-IV ICD-9 full on GPU 6: `python main.py experiment=mimiciv_icd9/laat gpu=6`\n   * Train LAAT on MIMIC-IV ICD-9 full on GPU 6 without weights and biases: `python main.py experiment=mimiciv_icd9/laat gpu=6 callbacks=no_wandb trainer.print_metrics=true`\n   \n#### Evaluation\nIf you just want to evaluate the models using the provided model_checkpoints you need to do set `trainer.epochs=0` and provide the path to the models checkpoint `load_model=path/to/model_checkpoint`. Make sure you the correct model-checkpoint with the correct configs.\n\nExample:\nEvaluate PLM-ICD on MIMIC-IV ICD-10 on GPU 1: `python main.py experiment=mimiciv_icd10/plm_icd gpu=1 load_model=path/to/model_checkpoints/mimiciv_icd10/plm_icd trainer.epochs=0`\n\n## Overview of the repository\n#### configs\nWe use [Hydra](https://hydra.cc/docs/intro/) for configurations. The condigs for every experiment is found in `configs/experiments`. Furthermore, the configuration for the sweeps are found in `configs/sweeps`. We used [Weights and Biases Sweeps](https://docs.wandb.ai/guides/sweeps) for most of our experiments.\n\n#### files\nThis is where the images and data is stored.\n\n#### notebooks\nThe directory only contains one notebook used for the code analysis. The notebook is not aimed to be used by others, but is included for others to validate our data analysis.\n\n#### prepare_data\nThe directory contains all the code for preparing the datasets and generating splits.\n\n#### reports\nThis is the code used to generate the plots and tables used in the paper. The code uses the Weights and Biases API to fetch the experiment results. The code is not usable by others, but was included for the possibility to validate our figures and tables.\n\n#### src\nThis is were the code for running the experiments is found.\n\n#### tests\nThe directory contains the unit tests\n\n## My setup\nI ran the experiments on one RTX 2080 Ti 11GB per experiment. I had 128 GB RAM on my machine.\n\n## ‚ö†Ô∏è Known issues \n* LAAT and PLM-ICD are unstable. The loss will sometimes diverge during training. The issue seems to be overflow in the softmax function in the label-wise attention. Using batch norm or layer norm before the softmax function might solve the issue. We did not try to fix the issue as we didn't want to change the original method during our reproducibility.\n* The code was only tested on a server with 128 GB RAM. A user with 32 GB RAM reported issues fitting MIMIC-IV into memory.\n* There is an error in the collate function in the Huggingface dataset. The attention mask is being padded with 1s instead of 0s. I have not fixed this issue because I want people to be able to reproduce the results from the paper.\n\n## Acknowledgement\nThank you Sotiris Lamprinidis for providing an efficient implementation of our multi-label stratification algorithm and some data preprocessing helper functions.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "coding",
        "datasets",
        "medical",
        "medical coding",
        "datasets mimic",
        "coding reproducibility"
      ],
      "category": "healthcare-and-medical"
    },
    "ctvidic--whoop-mcp-server": {
      "owner": "ctvidic",
      "name": "whoop-mcp-server",
      "url": "https://github.com/ctvidic/whoop-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/ctvidic.webp",
      "description": "Access Whoop data for insights into cycles, recovery, strain, and workout metrics by querying the Whoop API. Retrieve data based on specific date ranges or calculate averages for strain over time.",
      "stars": 12,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-22T15:17:33Z",
      "readme_content": "# Whoop MCP Server\nPython Package License: MIT Python 3.12\n\nA Model Context Protocol (MCP) server that provides access to the Whoop API. It allows language models to query cycles, recovery, strain, and workout data from the Whoop API.\n\n## Available Tools\n\nThe server exposes the following tools:\n\n### Cycle Queries\n- `get_cycle_collection(start_date: str, end_date: str)`: Get cycle data for a specific date range\n- `get_latest_cycle()`: Get the most recent cycle data\n\n### Recovery and Strain\n- `get_recovery_data(start_date: str, end_date: str)`: Get recovery data for a specific date range\n- `get_strain_data(start_date: str, end_date: str)`: Get strain data for a specific date range\n- `get_average_strain(days: int = 7)`: Calculate average strain over specified number of days\n\n### Profile and Authentication\n- `get_profile()`: Get user profile information\n- `check_auth_status()`: Check authentication status with Whoop API\n\nDates should be provided in ISO format (YYYY-MM-DD).\n\n## Usage\n\nYou'll need Whoop credentials to use this server. The server uses email/password authentication with the Whoop API.\n\n### Claude for Desktop\n\nUpdate your `claude_desktop_config.json` (located in `~/Library/Application\\ Support/Claude/claude_desktop_config.json` on macOS and `%APPDATA%/Claude/claude_desktop_config.json` on Windows) to include the following:\n\n```json\n{\n    \"mcpServers\": {\n        \"Whoop\": {\n            \"command\": \"python\",\n            \"args\": [\"/path/to/whoop/src/whoop_server.py\"],\n            \"cwd\": \"/path/to/whoop\",\n            \"env\": {\n                \"WHOOP_EMAIL\": \"your.email@example.com\",\n                \"WHOOP_PASSWORD\": \"your_password\"\n            }\n        }\n    }\n}\n```\n\n### HTTP API Server\n\nThe project also includes an HTTP API server that exposes the same functionality over HTTP endpoints. To run it:\n\n```bash\n./run_whoop_server.sh\n```\n\n## Example Queries\n\nOnce connected, you can ask Claude questions like:\n\n- \"What's my recovery score for today?\"\n- \"Show me my strain data for the past week\"\n- \"What's my average strain over the last 7 days?\"\n- \"Get my latest cycle data\"\n\n## Error Handling\n\nThe server provides human-readable error messages for common issues:\n- Invalid date formats\n- API authentication errors\n- Network connectivity problems\n- Missing or invalid credentials\n\n## Project Structure\n\n```\nwhoop/\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îú‚îÄ‚îÄ whoop_server.py      # MCP server implementation\n‚îÇ   ‚îî‚îÄ‚îÄ whoop_http_server.py # HTTP API server implementation\n‚îú‚îÄ‚îÄ config/\n‚îÇ   ‚îî‚îÄ‚îÄ .env                 # Environment variables\n‚îú‚îÄ‚îÄ requirements.txt         # Python dependencies\n‚îî‚îÄ‚îÄ run_whoop_server.sh     # Script to run HTTP server\n```\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details. ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "whoop",
        "mcp",
        "api",
        "whoop data",
        "whoop api",
        "access whoop"
      ],
      "category": "healthcare-and-medical"
    },
    "eka-care--eka_mcp_server": {
      "owner": "eka-care",
      "name": "eka_mcp_server",
      "url": "https://github.com/eka-care/eka_mcp_server",
      "imageUrl": "/freedevtools/mcp/pfp/eka-care.webp",
      "description": "Provides healthcare professionals with curated medical knowledge and drug information specific to India, enhancing AI responses by grounding them in verified medical data and treatment protocols. Facilitates access to extensive branded drug databases and treatment guidelines to improve clinical decision-making.",
      "stars": 19,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-11T13:27:27Z",
      "readme_content": "# Eka MCP Server\n[![License: MIT](https://img.shields.io/badge/license-MIT-C06524)](https://github.com/eka-care/eka_mcp_server/blob/main/LICENSE)\n[![PyPI - Version](https://img.shields.io/pypi/v/eka_mcp_server.svg)](https://pypi.org/project/eka_mcp_server)\n[![Downloads](https://static.pepy.tech/badge/eka_mcp_server/month)](https://pepy.tech/project/eka_mcp_server)\n\n## Overview\n\nEka Care's Model Context Protocol (MCP) server facilitates interaction with medical knowledge-bases specifically curated for the Indian healthcare context. While advanced models from Claude, OpenAI, and others can perform adequately in medical contexts, their responses often lack grounding in factual information and published references. Additionally, India faces a significant challenge with the absence of centralized repositories for branded medications in the public domain.\n\nThe Eka MCP Server addresses these challenges by providing structured access to curated knowledge-bases through specialized tools:\n\n* **Indian Branded Drug Search**: Enables lookup across 500,000+ branded drugs available in India, returning comprehensive metadata including generic composition and manufacturer information to enhance LLM responses.\n* **Indian Treatment Protocol Search**: Provides contextual access to over 180 treatment protocol documents published by authoritative Indian healthcare institutions such as ICMR and RSSDI.\n\n\nKey Benefits:\n* ü©∫ Medical Accuracy: Grounds AI responses in verified healthcare information\n* üîÑ Seamless Workflow: Provides critical information without requiring context switching\n* üõ°Ô∏è Reduced Hallucinations: Relies on curated medical data rather than AI's implicit general knowledge\n* üåê Open Ecosystem: Integrates with the growing MCP open standard\n\n# Get Started\n## Get your developer key from eka.care\n> [!NOTE]  \n> To obtain the `client-id`, and `client-token` reach out to us on ekaconnect@eka.care\n\n\n## Installation and Setup for Claude Desktop\n1. Install UV - https://docs.astral.sh/uv/getting-started/installation/#installation-methods\n2. Install Claude desktop application - https://claude.ai/download\n3. Locate the configuration file:\n   - **macOS**: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n   - **Windows**: `%APPDATA%/Claude/claude_desktop_config.json`\n   \n   In case the file does not exist, create a new file named `claude_desktop_config.json` in the above directory.\n4. Modify/Create the configuration file with the following settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"eka-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"eka_mcp_server\",\n        \"--eka-api-host\",\n        \"https://api.eka.care\",\n        \"--client-id\",\n        \"<client_id>\",\n        \"--client-secret\",\n        \"<client_secret>\"\n      ]\n    }\n  }\n}\n```\n5. Replace the placeholder values:\n   - `<client_id>`: Your client ID\n   - `<client_secret>`: Your client secret\n\n## Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging experience, we recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uvx eka_mcp_server --eka-api-host https://api.eka.care --client-id <client_id> --client-secret <client_secret>\n```\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n## Troubleshooting common issues\n\n### spawn uvx ENOENT\nThis commonly happens when uvx is not installed or the command cannot be discovered.\n![spawn uvx ENOENT screenshot](assets/uvx_debug.png)\n\n\n1. Install uv through this command \n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n2. Find the path of our uvx installation\n```bash\nwhich uvx\n```\nThe output might be something like this\n```\n> /opt/homebrew/bin/uvx\n```\n\nIn your config, update the command to the full path of the `uvx` executable. For example:\n```json\n{\n  \"mcpServers\": {\n    \"eka-mcp-server\": {\n      \"command\": \"/opt/homebrew/bin/uvx\",\n      \"args\": [\n        \"eka_mcp_server\",\n        \"--eka-api-host\",\n        \"https://api.eka.care\",\n        \"--client-id\",\n        \"<client_id>\",\n        \"--client-secret\",\n        \"<client_secret>\"\n      ]\n    } \n  }\n}\n```\n### Latest version of eka_mcp_server is not being picked?\nRun the command below in case the latest version is not being picked.\nThis cleans up the local cache and fetches the latest version.\n```\nuv cache clean eka_mcp_server\n```\n\n\n# Tools\n> EKA MCP server tools are curated by the in-house doctors at eka.care and have been validated on an internal set of questionnaire \n\n## Medications tool suite\n### Indian branded drug search \n<details>\n<summary>Tool definition here</summary>\nhttps://github.com/eka-care/eka_mcp_server/blob/9520c346e19c6ccafe80ca770dea9b824871ef1d/src/eka_mcp_server/constants.py#L1\n</details>\n\nAccess comprehensive information about drugs from a corpus of drugs based on the drug name or generic composition and filtered further through the drug form and volume.\n\n![Indian branded drug search](assets/indian_branded_drug_search.png)\n\nAPIs required for this tool\n   - https://developer.eka.care/api-reference/eka_mcp/medications/search \n\n### Indian Pharmacology details\n<details>\n<summary>Tool definition here</summary>\n</details>\n\nGet details of a generic composition based on the 2011 published guidelines by the National Formulary of India. \n\n\n\n## Indian treatment protocol search\n<details>\n<summary>Tool definition here</summary>\nhttps://github.com/eka-care/eka_mcp_server/blob/9520c346e19c6ccafe80ca770dea9b824871ef1d/src/eka_mcp_server/constants.py#L10\n</details>\n\nStandardized guidelines, procedures, and decision pathways for healthcare professionals are published by medical bodies.\nThey serve as comprehensive roadmaps for clinical care, ensuring consistent and evidence-based treatment approaches.\n\nCurrent Coverage:\n* 175 medical conditions/tags\n* 180 treatment protocols\n* Multiple authoritative publishers\n\n### Indian treatment protocol search workflow\n1. For any given query, the LLM has to decide if the tag is supported or not through [this API](http://developer.eka.care/api-reference/eka_mcp/protocols/tags). During the init of the tool, we fetch the supported conditions.\n2. Then, for the given tag, the LLM has to get the publishers that address that tag through [this API](http://developer.eka.care/api-reference/eka_mcp/protocols/publishers_by_tag).\n3. Finally, with the tag, publisher and query, we fetch the relevant information from the repository of publishers through [this API](http://developer.eka.care/api-reference/eka_mcp/protocols/search).\n\nAPIs required for this tool\n1. http://developer.eka.care/api-reference/eka_mcp/protocols/tags\n2. http://developer.eka.care/api-reference/eka_mcp/protocols/publishers_by_tag\n3. http://developer.eka.care/api-reference/eka_mcp/protocols/search\n\n![Indian treatment protocol search](assets/indian_treatment_protocol_search.png)\n\n## Accuracy Disclaimer\n\nThe Eka MCP Server provides access to medical knowledge bases and drug information intended to support healthcare professionals in India. While we strive for accuracy and reliability, please note:\n\n- The information provided through this service is for informational purposes only and does not constitute medical advice.\n- Healthcare professionals should exercise their own clinical judgment when using this information.\n- Drug information and treatment protocols may change over time, and we make reasonable efforts to keep our databases updated.\n- We cannot guarantee 100% accuracy or completeness of all information, particularly for newly approved medications or recently updated treatment guidelines.\n- Users should verify critical information through official sources before making clinical decisions.\n- Our database of protocols is ever growing, but does not ensure completeness.\n\nEka Care assumes no liability for any errors, omissions, or outcomes resulting from the use of information provided through this service.\n\n\n### Bugs and Issue Reporting\nPlease report any issues or bugs on the GitHub issue tracker.\n\n## FAQ\n**Q: Can I use this without an eka.care account?**\n\nA: No, you need valid API credentials from eka.care to access the medical information.\n\n**Q: Is this service free?**\n\nA: While the MCP server code is open-source, access to eka.care's APIs requires valid credentials.\nFor the initial few days, we are offering free access to the APIs. However, we will be charging for the API usage in the future.\n\n**Q: Which LLMs support MCP natively?**\n\nA: Currently, Anthropic's Claude models have native MCP support and also Cursor and Windsurf applications.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "eka_mcp_server",
        "eka",
        "healthcare",
        "medical eka",
        "care eka_mcp_server",
        "eka_mcp_server provides"
      ],
      "category": "healthcare-and-medical"
    },
    "flexpa--mcp-fhir": {
      "owner": "flexpa",
      "name": "mcp-fhir",
      "url": "https://github.com/flexpa/mcp-fhir",
      "imageUrl": "/freedevtools/mcp/pfp/flexpa.webp",
      "description": "Access and search FHIR resources with standardized formats for healthcare data. Interact with FHIR resources via URIs and utilize search capabilities for efficient data retrieval.",
      "stars": 55,
      "forks": 9,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-01T17:08:53Z",
      "readme_content": "# @flexpa/mcp-fhir\n\n> [!WARNING]\n> This is an experimental demo not intended for production use.\n\nThis is a TypeScript-based MCP server that connects to a FHIR server. It provides core MCP functionality for interacting with FHIR resources by:\n\n- Accessing FHIR resources via URIs\n- Providing search capabilities for FHIR resources\n\n## Features\n\n### Resources\n\n> [!TIP]\n> \"Resources\" here refers to the MCP definition _not_ the FHIR one. MCP Resources are a core primitive in the Model Context Protocol (MCP) that allow servers to expose data and content that can be read by clients and used as context for LLM interactions.\n\n- List and access FHIR resources via `fhir://` URIs\n- Resources are returned in FHIR JSON format\n- Supports all FHIR Resource types available in the FHIR server's CapabilityStatement\n\n### Tools\n- `search_fhir` - Search FHIR resources\n  - Takes `resourceType` and `searchParams` as parameters\n  - Returns FHIR search results\n- `read_fhir` - Read an individual FHIR resource\n  - Takes `uri` as a parameter\n  - Returns the FHIR resource in JSON format\n\n## Configuration\n\nThe server requires the following environment variables:\n- `FHIR_BASE_URL`: The base URL of your FHIR server\n- `FHIR_ACCESS_TOKEN`: A SMART on FHIR access token for authentication\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"fhir\": {\n      \"command\": \"/path/to/@flexpa/mcp-fhir/build/index.js\"\n    },\n    \"env\": {\n      \"FHIR_BASE_URL\": \"<FHIR_BASE_URL>\",\n      \"FHIR_ACCESS_TOKEN\": \"<FHIR_ACCESS_TOKEN>\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fhir",
        "retrieval",
        "search",
        "search fhir",
        "fhir resources",
        "fhir access"
      ],
      "category": "healthcare-and-medical"
    },
    "jmandel--health-record-mcp": {
      "owner": "jmandel",
      "name": "health-record-mcp",
      "url": "https://github.com/jmandel/health-record-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/jmandel.webp",
      "description": "Connects AI models to Electronic Health Records (EHRs) using the SMART on FHIR standard to securely extract and analyze patient data, leveraging the Model Context Protocol for seamless access to structured health data and clinical notes.",
      "stars": 63,
      "forks": 21,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-13T17:30:01Z",
      "readme_content": "# EHR Tools with MCP and FHIR\n![EHR Tools Overview](static/overview.png)\n\nhttps://youtu.be/K0t6MRyIqZU?si=Mz4d65DcAD3i2YbO\n\nThis project acts as a specialized server providing tools for Large Language Models (LLMs) and other AI agents to interact with Electronic Health Records (EHRs). It leverages the **SMART on FHIR** standard for secure data access and the **Model Context Protocol (MCP)** to expose the tools.\n\nThink of it as a secure gateway and toolkit enabling AI to safely access and analyze patient data from diverse EHR systems.\n\n## The Core Idea\n\nThe system works in three main stages:\n\n1.  **SMART on FHIR Client (Implemented within this project):** Connects securely to an EHR using the standard SMART App Launch framework. It extracts a wide range of patient information, including both structured data (like conditions, medications, labs) and unstructured clinical notes or attachments.\n2.  **MCP Server (This Project):** Takes the extracted EHR data and makes it available through a set of powerful tools accessible via the Model Context Protocol. These tools allow external systems (like AI models) to query and analyze the data without needing direct access to the EHR itself.\n3.  **AI / LLM Interface (External Consumer):** An AI agent or Large Language Model connects to the MCP Server and uses the provided tools to \"ask questions\" about the patient's record, perform searches, or run custom analyses.\n\n## Available Tools\n\nThe MCP Server offers several tools for interacting with the loaded EHR data:\n\n*   `grep_record`: Performs text or regular expression searches across *all* parts of the fetched record (structured FHIR data + text from notes/attachments). Ideal for finding keywords or specific mentions (e.g., \"diabetes\", \"aspirin\").\n*   `query_record`: Executes read-only SQL `SELECT` queries directly against the structured FHIR data. Useful for precise lookups based on known FHIR resource structures (e.g., finding specific lab results by LOINC code).\n*   `eval_record`: Executes custom JavaScript code directly on the fetched data (FHIR resources + attachments). Offers maximum flexibility for complex calculations, combining data from multiple sources, or custom formatting.\n\nThis setup allows AI tools to leverage comprehensive EHR data through a standardized and secure interface.\n\n*(Developer setup and usage details can be found within the codebase and specific module documentation.)*\n\n---\n\n## Components & Usage\n\nThis project offers different ways to fetch EHR data and expose it via MCP tools:\n\n### 1. Standalone SMART on FHIR Web Client\n\nThis project includes a self-contained web application that allows users to connect to their EHR via SMART on FHIR and fetch their data.\n\n*   **Hosted Version:** You can use a publicly hosted version at: \\\n    [`https://mcp.fhir.me/ehr-connect#deliver-to-opener:$origin`](https://mcp.fhir.me/ehr-connect#deliver-to-opener:$origin) \\\n    (Replace `$origin` with the actual origin of the window that opens this link).\n*   **Filtering Brands (`?brandTags`):** You can filter the list of EHR providers shown on the connection page by adding the `brandTags` query parameter to the URL. Provide a comma-separated list of tags. Only brands matching *all* provided tags (from their configuration in `brandFiles`) will be displayed.\n    It supports both OR (comma-separated) and AND (caret `^` separated) logic, with AND taking precedence.\n    *   `?brandTags=epic,sandbox`: Shows brands tagged with `epic` OR `sandbox`.\n    *   `?brandTags=epic^dev`: Shows brands tagged with both `epic` AND `dev`.\n    *   `?brandTags=epic^dev,sandbox^prod`: Shows brands tagged with (`epic` AND `dev`) OR (`sandbox` AND `prod`).\n    *   If the parameter is omitted, it defaults to showing brands tagged with `prod`.\n    *   Example: `.../ehr-connect?brandTags=hospital^us`: Shows brands tagged with `hospital` AND `us`.\n*   **How it Works:** When opened, this page prompts the user to select their EHR provider. It then initiates the standard SMART App Launch flow, redirecting the user to their EHR's login page. After successful authentication and authorization, the client fetches a comprehensive set of FHIR resources (Patient, Conditions, Observations, Medications, Documents, etc.) and attempts to extract plaintext from any associated attachments (like PDFs, RTF, HTML found in `DocumentReference`).\n*   **Data Output (`ClientFullEHR`):** Once fetching is complete, the client gathers all the data into a `ClientFullEHR` JSON object. This object contains:\n    *   `fhir`: A dictionary where keys are FHIR resource types (e.g., \"Patient\") and values are arrays of the corresponding FHIR resources.\n    *   `attachments`: An array of processed attachment objects, each including metadata (source resource, path, content type) and the content itself (`contentBase64` for raw data, `contentPlaintext` for extracted text).\n*   **Data Delivery:** If opened with the `#deliver-to-opener:$origin` hash, the client will prompt the user for confirmation and then send the `ClientFullEHR` object back to the window that opened it using `window.opener.postMessage(data, targetOrigin)`.\n\n### 2. Local MCP Server via Stdio (`src/cli.ts`)\n\nThis mode is ideal for running the MCP server locally, often used with tools like Cursor or other command-line AI clients.\n\n*   **Two-Step Process:**\n    1.  **Fetch Data to Database:** First, run the command-line interface with the `--create-db` and `--db` flags. This starts a temporary web server and uses the same SMART on FHIR web client logic described above to fetch data. Instead of sending the data via `postMessage`, it saves the `ClientFullEHR` data into a local SQLite database file.\n        ```bash\n        # Example: Fetch data and save to data/my_record.sqlite\n        bun run src/cli.ts --create-db --db ./data/my_record.sqlite\n        ```\n        Follow the prompts (opening a link in your browser) to connect to your EHR.\n    2.  **Run MCP Server:** Once the database file is created, run the CLI again, pointing only to the database file. This loads the data into memory and starts the MCP server, listening for commands on standard input/output.\n        ```bash\n        # Example: Start the MCP server using the saved data\n        bun run src/cli.ts --db ./data/my_record.sqlite\n        ```\n    *   **Configuration (`config.*.json`):** This process relies on a configuration file (e.g., `config.epicsandbox.json`) which defines available EHR brands/endpoints in a `brandFiles` array. Each entry in this array specifies the brand's details, including:\n        *   `url`: Path/URL to the brand definition file (like `static/brands/epic-sandbox.json`).\n        *   `tags`: An array of strings (e.g., `[\"epic\", \"sandbox\"]`) used for categorization or filtering.\n        *   `vendorConfig`: Contains SMART on FHIR client details (`clientId`, `scopes`).\n*   **Client Configuration (e.g., Cursor):** Configure your MCP client to execute this command. **Crucially, use absolute paths** for both `src/cli.ts` and the database file.\n    ```json\n    {\n      \"mcpServers\": {\n        \"local-ehr\": {\n          \"name\": \"Local EHR Search\",\n          \"command\": \"bun\", // Or the absolute path to bun\n          \"args\": [\n              \"/home/user/projects/smart-mcp/src/cli.ts\", // Absolute path to cli.ts\n              \"--db\",\n              \"/home/user/projects/smart-mcp/data/my_record.sqlite\" // Absolute path to DB file\n            ]\n        }\n      }\n    }\n    ```\n\n### 3. Full MCP Server via SSE (`src/sse.ts` / `index.ts`)\n\nThis mode runs a persistent server suitable for scenarios where multiple clients might connect over the network. It uses Server-Sent Events (SSE) for the MCP communication channel.\n\n*   **Authentication:** Client authentication relies on OAuth 2.1, as specified by the Model Context Protocol. The server provides standard endpoints (`/authorize`, `/token`, `/register`, etc.).\n*   **Data Fetch:** When a client initiates an OAuth connection, the server handles the SMART on FHIR flow *itself*, fetches the `ClientFullEHR` data *during* the authorization process, and keeps it in memory (or a persisted session) for the duration of the client's connection.\n*   **Status:** While functional, the MCP specification for OAuth 2.1 client interaction is still evolving. Client support for this authentication method is **extremely limited** at present, making it difficult to test this mode with standard clients outside of specialized developer or debugging tools. This SSE mode should be considered **experimental**.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "models",
        "healthcare",
        "records",
        "health records",
        "health data",
        "health record"
      ],
      "category": "healthcare-and-medical"
    },
    "jpoles1--statpearls-mcp": {
      "owner": "jpoles1",
      "name": "statpearls-mcp",
      "url": "https://github.com/jpoles1/statpearls-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/jpoles1.webp",
      "description": "Fetches and retrieves reliable, peer-reviewed medical information about diseases and conditions from StatPearls, formatted in AI-friendly Markdown for enhanced conversation integration.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-07-09T10:33:41Z",
      "readme_content": "# StatPearls MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@jpoles1/statpearls-mcp)](https://smithery.ai/server/@jpoles1/statpearls-mcp)\n\nA [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) server that fetches disease information from [StatPearls](https://www.ncbi.nlm.nih.gov/books/NBK430685/), a trusted source of peer-reviewed medical content.\n\nGive your AI system a relaible source of medical knowledge for its next conversation.\n\n## Features\n\n- Searches for diseases and medical conditions on StatPearls\n- Retrieve comprehensive, reliable medical information from StatPearls\n- Convert HTML content to well-formatted Markdown to make it AI-friendly\n- Integrates with AI models via the Model Context Protocol\n\n![Image](StatPearlsMCPDemo.gif)\n\n### If you don't already have a Model Context Protocol (MCP) client:\n\nIf you are a casual user, you can use [Claude Desktop](https://modelcontextprotocol.io/quickstart/user) to get started using MCP servers. It is a free and open-source desktop application that allows you to run MCP servers locally and connect to them.\n\nIf you are a power user/developer, I recommend using VSCode with the [RooCode](https://docs.roocode.com/) extension which enables you to connect in [MCP servers](https://docs.roocode.com/features/mcp/what-is-mcp) to your development environment for infinite possibilities!\n\n## Installation\n\nOnce you have an MCP-capable AI client, you can run this server locally.\n\nThe easiest way to get up and running is to download the appropriate executable/binary for your OS from the [releases page](https://github.com/jpoles1/statpearls-mcp/releases). This will give you a self-contained executable that you can run without any additional setup.\n\nPlace this executable in a directory of your choice. Then simply add the following to your `mcp_settings.json` file:\n\n#### For Windows:\n\n```json\n{\n  \"mcpServers\": {\n    ...\n    \"statpearls\": {\n      \"command\": \"{path_to_executable_here}\\\\statpearls-mcp.exe\"\n    },\n    ...\n  }\n}\n\n#### For Mac/Linux:\n\n```json\n{\n  \"mcpServers\": {\n    ...\n    \"statpearls\": {\n      \"command\": \"{path_to_executable_here}/statpearls-mcp\"\n    },\n    ...\n  }\n}\n```\n\n### Installing via Smithery\n\nTo install statpearls-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@jpoles1/statpearls-mcp):\n\n```bash\nnpx -y @smithery/cli install @jpoles1/statpearls-mcp --client claude\n```\n\n### For Developers:\n\nYou can also run the server from source. This requires [Bun](https://bun.sh/) to be installed on your system.\n  1. Clone the repository\n  2. Install dependencies (`bun install`)\n  3. Compile the server (`bun run build`)\n  4. Now you can add the server to your `mcp_settings.json` file:\n  ```json\n  {\n    \"mcpServers\": {\n      ...\n      \"statpearls\": {\n        \"command\": \"node\",\n        \"args\": [\n          \"{path_to_proj_here}/dist/index.js\"\n        ]\n      },\n      ...\n    }\n  }\n  ```\n\n## Tool Definition\n\nThe server provides a single tool:\n\n- **statpearls_disease_info**: Fetches comprehensive, reliable medical information about diseases from StatPearls.\n\n### Input Schema\n\n```json\n{\n  \"query\": \"diabetes\",\n  \"format_options\": {\n    \"includeToc\": true,\n    \"maxLength\": 50000\n  }\n}\n```\n\n- `query`: Disease or medical condition to search for (required)\n- `format_options`: Optional formatting preferences\n  - `includeToc`: Whether to include a table of contents (default: true)\n  - `maxLength`: Maximum length of the returned content in characters (default: 50000)\n\n### Example Output\n\nThe tool returns formatted Markdown content with:\n\n- Title and source information\n- Table of contents (optional)\n- Structured sections including etiology, epidemiology, pathophysiology, clinical features, diagnosis, treatment, and prognosis (when available)\n\n## Development\n\n### Project Structure\n\n```\nstatpearls-mcp/\n‚îú‚îÄ‚îÄ src/                         # Source code\n‚îÇ   ‚îú‚îÄ‚îÄ index.ts                 # Main entry point and server setup\n‚îÇ   ‚îú‚îÄ‚îÄ test-html-parser.ts      # Test utility for HTML parser\n‚îÇ   ‚îú‚îÄ‚îÄ test-statpearls-parser.ts # Test utility for StatPearls parser\n‚îÇ   ‚îú‚îÄ‚îÄ testrun.ts               # Test runner utility\n‚îÇ   ‚îú‚îÄ‚îÄ tools/                   # Tool definitions and handlers\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ statpearls.ts        # StatPearls tool definition and handler\n‚îÇ   ‚îú‚îÄ‚îÄ services/                # Core functionality services\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ search.ts            # Search functionality\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ content.ts           # Content retrieval and processing\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ markdown.ts          # HTML to Markdown conversion\n‚îÇ   ‚îú‚îÄ‚îÄ types/                   # Type definitions\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts             # Common type definitions\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ statpearls.ts        # StatPearls-specific type definitions\n‚îÇ   ‚îî‚îÄ‚îÄ utils/                   # Utility functions\n‚îÇ       ‚îú‚îÄ‚îÄ html.ts              # HTML parsing utilities\n‚îÇ       ‚îú‚îÄ‚îÄ error.ts             # Error handling utilities\n‚îÇ       ‚îî‚îÄ‚îÄ statpearls-parser.ts # StatPearls content parsing utilities\n‚îú‚îÄ‚îÄ scripts/                     # Build and utility scripts\n‚îÇ   ‚îú‚îÄ‚îÄ build.ts                 # Build script for creating Node.js compatible bundle\n‚îÇ   ‚îú‚îÄ‚îÄ compile.ts               # Script for compiling executables\n‚îÇ   ‚îú‚îÄ‚îÄ release.ts               # Script for handling releases\n‚îÇ   ‚îî‚îÄ‚îÄ version.ts               # Script for managing versioning\n‚îú‚îÄ‚îÄ dist/                        # Build output directory (not in repository)\n‚îú‚îÄ‚îÄ package.json                 # Project configuration and dependencies\n‚îú‚îÄ‚îÄ tsconfig.json                # TypeScript configuration\n‚îú‚îÄ‚îÄ bun.lock                     # Bun dependency lock file\n‚îú‚îÄ‚îÄ README.md                    # Main project documentation\n‚îî‚îÄ‚îÄ RELEASE-PROCESS.md           # Documentation for release process\n```\n\n### Building and Releasing\n\n#### Building\n\nThe build process creates a single JavaScript file that can run with vanilla Node.js:\n\n```bash\n# Production build\nbun run build\n# or\nbun run build:prod\n\n# Development build\nbun run build:dev\n```\n\nThis creates a bundled file at `dist/index.js` that includes all dependencies.\n\n#### Compiling Executables\n\nYou can compile platform-specific executables using Bun's compilation feature:\n\n```bash\n# Compile for all platforms\nbun run compile:all\n\n# Compile for specific platforms\nbun run compile:linux\nbun run compile:windows\nbun run compile:mac\n```\n\nThis creates executable files in the `dist` directory:\n- `statpearls-mcp` (default executable)\n- `statpearls-mcp-linux-x64` (Linux)\n- `statpearls-mcp-windows-x64.exe` (Windows)\n- `statpearls-mcp-darwin-x64` (macOS)\n\n#### Releasing\n\nThe release process handles versioning, building, compiling, and Git operations:\n\n```bash\n# Release a patch version (bug fixes)\nbun run release:patch\n\n# Release a minor version (new features, backward compatible)\nbun run release:minor\n\n# Release a major version (breaking changes)\nbun run release:major\n```\n\nThis process:\n1. Updates the version in package.json\n2. Builds the distribution file\n3. Compiles executables for all platforms\n4. Creates a Git commit with the version number\n5. Creates a Git tag for the version\n6. Pushes the commit and tag to GitHub\n\n#### Versioning\n\nThe project follows semantic versioning. You can check the current version with:\n\n```bash\nbun run version\n```\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "statpearls",
        "jpoles1",
        "medical",
        "medical jpoles1",
        "statpearls formatted",
        "statpearls mcp"
      ],
      "category": "healthcare-and-medical"
    },
    "manolaz--emergency-medicare-planner-mcp-server": {
      "owner": "manolaz",
      "name": "emergency-medicare-planner-mcp-server",
      "url": "https://github.com/manolaz/emergency-medicare-planner-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/manolaz.webp",
      "description": "Connects to Google Maps to locate nearby hospitals and clinics based on patient needs, evaluates medical facilities, and calculates optimal routes for urgent care. Provides real-time availability checks and detailed service information to assist in emergency healthcare decisions.",
      "stars": 4,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-13T18:58:25Z",
      "readme_content": "# Emergency Medicare Management MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@manolaz/emergency-medicare-planner-mcp-server)](https://smithery.ai/server/@manolaz/emergency-medicare-planner-mcp-server)\n\n(@manolaz/emergency-medicare-planner-mcp-server)\n\nA powerful Model Context Protocol (MCP) server that integrates with Google Maps to locate and evaluate medical facilities in emergency situations. This server helps users find appropriate hospitals and clinics within 10km radius based on specific medical needs, emergency level, and facility capabilities.\n\nThe system provides real-time routing, availability checks, and detailed information about medical services, helping patients make informed decisions during urgent healthcare situations.\n\n**Key Feature**: Sequential Thinking for Medical Evaluation - Enables step-by-step clinical reasoning for more accurate medical facility matching based on patient symptoms and medical history.\n\n## Installation & Usage\n\n### Installing via Smithery\n\nTo install Emergency Medicare Planner for Claude Desktop automatically:\n\n```bash\nnpx -y @smithery/cli install @manolaz/emergency-medicare-planner-mcp-server --client claude\n```\n\n### Installing Manually\n\n```bash\n# Using npx (recommended)\nnpx @manolaz/emergency-medicare-planner-mcp-server\n\n# With environment variable for Google Maps API\nGOOGLE_MAPS_API_KEY=your_api_key npx @manolaz/emergency-medicare-planner-mcp-server\n```\n\nOr install globally:\n\n```bash\n# Install globally\nnpm install -g @manolaz/emergency-medicare-planner-mcp-server\n\n# Run after global installation\nGOOGLE_MAPS_API_KEY=your_api_key emergency-medicare-planner-mcp-server\n```\n\n## Components\n\n### Tools\n\n- **searchMedicalFacilities**\n  - Search for hospitals, clinics, and medical facilities using Google Places API\n  - Input:\n    - `query` (string): Search query (e.g., \"emergency room\", \"pediatric clinic\")\n    - `location`: Latitude and longitude of patient location\n    - `radius` (optional, default: 10000): Search radius in meters\n    - `specialtyNeeded` (optional): Medical specialty required\n\n- **getMedicalFacilityDetails**\n  - Get detailed information about a specific medical facility\n  - Input:\n    - `placeId` (string): Google Place ID of the medical facility\n  - Output:\n    - Hours of operation, services offered, contact information, etc.\n\n- **calculateRouteToFacility**\n  - Calculate fastest route to a medical facility\n  - Input:\n    - `origin`: Patient's current location\n    - `facilityId`: Place ID of the destination facility\n    - `transportMode` (optional): Travel mode (driving, walking, transit, ambulance)\n    - `avoidTraffic` (optional): Route planning to avoid traffic\n\n- **checkFacilityAvailability**\n  - Check if a facility is currently accepting patients\n  - Input:\n    - `facilityId`: Place ID of the medical facility\n    - `emergencyLevel`: Urgency level of the medical situation\n\n## Configuration\n\n### Usage with Claude Desktop\n\nTo use this server with the Claude Desktop app, add the following configuration to the \"mcpServers\" section of your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"emergency-medicare-planner\": {\n      \"command\": \"npx\",\n      \"args\": [\"@manolaz/emergency-medicare-planner-mcp-server\"],\n      \"env\": {\n        \"GOOGLE_MAPS_API_KEY\": \"your_google_maps_api_key\"\n      }\n    }\n  }\n}\n```\n\nAlternatively, you can use the node command directly if you have the package installed:\n\n```json\n{\n  \"mcpServers\": {\n    \"emergency-medicare-planner\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/dist/index.js\"],\n      \"env\": {\n        \"GOOGLE_MAPS_API_KEY\": \"your_google_maps_api_key\"\n      }\n    }\n  }\n}\n```\n\n## Development\n\n### Building from Source\n\n1. Clone the repository\n2. Install dependencies:\n\n   ```bash\n   npm install\n   ```\n\n3. Build the project:\n\n   ```bash\n   npm run build\n   ```\n\n### Environment Variables\n\n- `GOOGLE_MAPS_API_KEY` (required): Your Google Maps API key with the following APIs enabled:\n  - Places API\n  - Directions API\n  - Geocoding API\n  - Time Zone API\n  - Distance Matrix API\n\n### Testing\n\n```bash\n# Run test suite\nnpm test\n\n# Run with debug logging\nDEBUG=emergency-medicare:* npm start\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hospitals",
        "healthcare",
        "mcp",
        "emergency healthcare",
        "medical manolaz",
        "medicare planner"
      ],
      "category": "healthcare-and-medical"
    },
    "matthewdcage--pbs-mcp-server": {
      "owner": "matthewdcage",
      "name": "pbs-mcp-server",
      "url": "https://github.com/matthewdcage/pbs-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/matthewdcage.webp",
      "description": "Access up-to-date pharmaceutical data from the Australian PBS, including information on medicines, pricing, and availability. Facilitates seamless integration into AI workflows for real-time healthcare data retrieval.",
      "stars": 1,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-03-12T21:35:38Z",
      "readme_content": "# Pharmaceutical Benefits Scheme (PBS) MCP AI Enabled API Server ![MCP Server](https://badge.mcpx.dev?type=dev 'MCP Dev')\n\nA standalone Model Context Protocol (MCP) server for accessing the Australian Pharmaceutical Benefits Scheme (PBS) API.\n\n## About the Author\n\nThis PBS MCP server was developed by [Matthew Cage], Founder of https://ai-advantage.au, specialist in Automation, AI Engineering and AI integration and healthcare data systems.\n\nCollaborate with me:\nhttps://www.linkedin.com/in/digitalmarketingstrategyexpert/\n\n## Overview\n\nThis project provides a standalone MCP server that allows AI models to access the Australian Pharmaceutical Benefits Scheme (PBS) API, which contains information about medicines, pricing, and availability in Australia.\n\nThe project is built for the Public API, but can easily be adapted to the private API if you have been granted developer access.\n\nThe PBS API provides programmatic access to PBS data, including medicine listings, pricing, and availability. This MCP server makes it easy to integrate PBS data into AI workflows.\n\nThe MCP is available via HTTP and CLI.\n\n*Please be aware of the rate limits for the PBS and adjust your request frequency. I recommend a periodic call to store the information you require from the API and update it on a weekly basis.*\n\n## MCP Server Features ![MCP Server](https://badge.mcpx.dev?type=server&features=tools)\n\nThis MCP server implements the following Model Context Protocol features:\n\n- **Tools**: Provides tools for querying the PBS API endpoints, allowing AI models to access pharmaceutical data\n- **Transport Layers**: Supports both stdio and HTTP/SSE transport layers\n- **Error Handling**: Comprehensive error handling for API rate limits and authentication issues\n- **LLM Integration**: Receives tool calls and prompts directly from LLM components, enabling seamless AI interaction with PBS data\n\n### How It Works\n\nThe MCP Client ![MCP Client](https://badge.mcpx.dev?type=client&features=prompts,tools 'MCP Client'):\n\n1. **Receives Tool Calls**: When an LLM (like Claude) needs pharmaceutical data, it sends a tool call to this server\n2. **Processes Prompts**: Interprets natural language prompts about medication information\n3. **Executes API Queries**: Translates the requests into appropriate PBS API calls\n4. **Returns Structured Data**: Sends back formatted pharmaceutical data that the LLM can use in its responses\n\nThis enables AI assistants to access up-to-date PBS information without needing to have this data in their training.\n\n## Installation\n\n1. Clone this repository:\n   ```bash\n   git clone <repository-url>\n   cd pbs-mcp-standalone\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n\n## Usage\n\n### Starting the Server ![MCP Server](https://badge.mcpx.dev?type=server&features=tools)\n\nThe PBS MCP server can be run in different modes:\n\n#### Stdio Mode (Default)\n\nThis mode is compatible with the MCP protocol and communicates via standard input/output streams:\n\n```bash\nnpm start\n```\n\nOr use the provided start script:\n\n```bash\n./start.sh\n```\n\n#### HTTP Mode with SSE Support\n\nThis mode starts an HTTP server with Server-Sent Events (SSE) support:\n\n```bash\nnpm run start:http\n```\n\nOr use the provided start script:\n\n```bash\n./start.sh http 3000\n```\n\nWhere `3000` is the port number to listen on.\n\n#### Command-Line Interface\n\nThe PBS MCP server can also be used as a command-line tool:\n\n```bash\nnpm run cli -- <command>\n```\n\nOr use the provided start script:\n\n```bash\n./start.sh cli <command>\n```\n\nFor example:\n\n```bash\n./start.sh cli info\n```\n\n### Using as a Command-Line Tool\n\nTo use this MCP server as a command-line tool:\n\n1. Build the project:\n   ```bash\n   npm run build\n   ```\n\n2. Run the CLI with the desired command:\n   ```bash\n   npm run cli -- <command>\n   ```\n   \n   Or use the start script:\n   ```bash\n   ./start.sh cli <command>\n   ```\n\n### Integrating with MCP Clients ![MCP Client](https://badge.mcpx.dev?type=client)\n\nThis server can be integrated with any MCP-compatible client, such as:\n\n- Local AI Editors and AI/LLM Servers\n- Other AI assistants that support the Model Context Protocol\n- Custom applications using the MCP client libraries\n\n#### Client Configuration Example\n\nHere's an example of how to configure this server with an MCP client:\n\n```json\n{\n  \"mcpServers\": {\n    \"pbs-api\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/pbs-mcp-standalone/build/index.js\"],\n      \"env\": {\n        \"PBS_API_SUBSCRIPTION_KEY\": \"your-subscription-key-here\"\n      }\n    }\n  }\n}\n```\n\n#### Accessing the Server from a Client\n\nTo access this MCP server from a client:\n\n1. **For Claude Desktop or other MCP-compatible AI assistants**:\n   - Configure the assistant to use this server as an MCP tool provider\n   - The assistant will automatically discover and use the tools provided by this server\n   - The LLM can send natural language prompts about medications that will be processed by the server\n\n2. **For custom applications**:\n   - Use the HTTP API endpoints described below\n   - Connect to the SSE endpoint for real-time tool events\n   - Or spawn the server process and communicate via stdin/stdout\n\n#### Example LLM Prompts\n\nThe server can interpret various prompts from LLMs, such as:\n\n```\n\"Find information about metformin in the PBS\"\n\"What is the PBS code for insulin?\"\n\"List all prescribers who can prescribe antibiotics\"\n\"Get the latest pricing for asthma medications\"\n```\n\nThese natural language prompts are translated into appropriate PBS API calls.\n\n### API Tool Parameters\n\nThe PBS API tool can be used with the following parameters:\n\n```json\n{\n  \"endpoint\": \"prescribers\",\n  \"method\": \"GET\",\n  \"params\": {\n    \"get_latest_schedule_only\": \"true\",\n    \"limit\": \"20\"\n  }\n}\n```\n\n#### Parameters\n\n- `endpoint` (string, required): The specific PBS API endpoint to access (e.g., \"prescribers\", \"item-overview\")\n- `method` (string, optional): HTTP method to use (GET is recommended for most PBS API operations). Default: \"GET\"\n- `params` (object, optional): Query parameters to include in the request\n- `subscriptionKey` (string, optional): Custom subscription key. If not provided, the default public key will be used\n- `timeout` (number, optional): Request timeout in milliseconds. Default: 30000\n\n## HTTP API ![MCP Server](https://badge.mcpx.dev?type=server&features=tools)\n\nWhen running in HTTP mode, the following endpoints are available:\n\n### Health Check\n\n```\nGET /health\n```\n\nReturns the status of the server.\n\n### List Tools\n\n```\nGET /tools\n```\n\nReturns a list of available tools.\n\n### SSE Endpoint\n\n```\nGET /sse\n```\n\nEstablishes an SSE connection and sends tool events.\n\n### Tool Invocation (SSE)\n\n```\nPOST /sse/:toolName\n```\n\nInvokes a tool and sends the result via SSE.\n\n### Tool Invocation (REST)\n\n```\nPOST /api/:toolName\n```\n\nInvokes a tool and returns the result as JSON.\n\n## Command-Line Interface ![MCP Dev](https://badge.mcpx.dev?type=dev)\n\nThe PBS MCP server can be used as a command-line tool with the following commands:\n\n### List Endpoints\n\n```bash\n./start.sh cli list-endpoints\n```\n\nLists all available PBS API endpoints.\n\n### Get API Information\n\n```bash\n./start.sh cli info\n```\n\nReturns information about the PBS API.\n\n### Query Prescribers\n\n```bash\n./start.sh cli prescribers [options]\n```\n\nOptions:\n- `-l, --limit <number>`: Number of results per page (default: 10)\n- `-p, --page <number>`: Page number (default: 1)\n- `-c, --pbs-code <code>`: Filter by PBS code\n- `-s, --schedule-code <code>`: Filter by schedule code\n- `-t, --prescriber-type <type>`: Filter by prescriber type\n- `-f, --fields <fields>`: Specific fields to return\n- `--latest`: Get only the latest schedule\n\n### Query Item Overview\n\n```bash\n./start.sh cli item-overview [options]\n```\n\nOptions:\n- `-l, --limit <number>`: Number of results per page (default: 10)\n- `-p, --page <number>`: Page number (default: 1)\n- `-s, --schedule-code <code>`: Filter by schedule code\n- `-f, --fields <fields>`: Specific fields to return\n- `--latest`: Get only the latest schedule\n\n### Query Any Endpoint\n\n```bash\n./start.sh cli query <endpoint> [options]\n```\n\nOptions:\n- `-m, --method <method>`: HTTP method (default: GET)\n- `-p, --params <json>`: Query parameters as JSON string\n- `-k, --subscription-key <key>`: Custom subscription key\n- `-t, --timeout <milliseconds>`: Request timeout in milliseconds\n\n### Start HTTP Server\n\n```bash\n./start.sh cli serve [options]\n```\n\nOptions:\n- `-p, --port <number>`: Port to listen on (default: 3000)\n\n## Available Endpoints\n\nThe PBS API provides several endpoints for accessing different types of data:\n\n- `/` - Root endpoint, provides API information and changelog\n- `/prescribers` - Information about prescribers\n- `/item-overview` - Detailed information about PBS items\n- `/items` - Basic information about PBS items\n- `/schedules` - Information about PBS schedules\n- `/atc-codes` - Anatomical Therapeutic Chemical (ATC) classification codes\n- `/organisations` - Information about organisations\n- `/restrictions` - Information about restrictions\n- `/parameters` - Information about parameters\n- `/criteria` - Information about criteria\n- `/copayments` - Information about copayments\n- `/fees` - Information about fees\n- `/markup-bands` - Information about markup bands\n- `/programs` - Information about programs\n- `/summary-of-changes` - Summary of changes\n\nFor a complete list of endpoints, see the [PBS API documentation](https://data-api-portal.health.gov.au/api-details#api=pbs-prod-api-public-v3-v3).\n\n## Example Usage\n\n### Get API Information\n\n```json\n{\n  \"endpoint\": \"\"\n}\n```\n\n### Get Prescribers\n\n```json\n{\n  \"endpoint\": \"prescribers\",\n  \"params\": {\n    \"get_latest_schedule_only\": \"true\",\n    \"limit\": \"10\"\n  }\n}\n```\n\n### Get Item Overview with Latest Schedule\n\n```json\n{\n  \"endpoint\": \"item-overview\",\n  \"params\": {\n    \"get_latest_schedule_only\": \"true\",\n    \"limit\": \"5\"\n  }\n}\n```\n\n### Get Prescribers with Specific PBS Code\n\n```json\n{\n  \"endpoint\": \"prescribers\",\n  \"params\": {\n    \"pbs_code\": \"10001J\",\n    \"get_latest_schedule_only\": \"true\"\n  }\n}\n```\n\n## Authentication\n\nThe tool uses a subscription key for accessing the PBS API. You can obtain your own key by registering on the PBS Developer Portal.\n\nFor development purposes, see the `.env.example` file for configuration details.\n\n### Obtaining a PBS API Subscription Key\n\nTo obtain your own PBS API subscription key, follow these steps:\n\n1. **Visit the PBS Data API Portal**: \n   - Go to [https://data-api-portal.health.gov.au/](https://data-api-portal.health.gov.au/)\n\n2. **Create an Account**:\n   - Click on \"Sign Up\" to create a new account\n   - Fill in your details and verify your email address\n\n3. **Subscribe to the PBS API**:\n   - Once logged in, navigate to the \"Products\" section\n   - Select the \"PBS Public API v3\" product\n   - Click \"Subscribe\" to request access to the API\n\n4. **Retrieve Your Subscription Key**:\n   - After your subscription is approved, go to your profile\n   - Navigate to \"Subscriptions\" or \"API Keys\" section\n   - Copy your primary or secondary key\n\n5. **Configure Your Environment**:\n   - Create a `.env` file based on the `.env.example` template\n   - Replace `your-subscription-key-here` with your actual subscription key:\n     ```\n     PBS_API_SUBSCRIPTION_KEY=your-actual-subscription-key\n     ```\n\n**Note**: The PBS Public API is rate-limited to one request per 20 seconds. This limit is shared among all users of the public API. For higher rate limits or access to embargo data (future schedules), you may need to apply for special access through the PBS Developer Program.\n\n## Limitations\n\n- The PBS Public API is rate-limited to one request per 20 seconds (shared among all users)\n- Only the current schedule and those published in the past 12 months are available via the Public API\n- Some endpoints require specific parameters to be provided\n- The API structure and endpoints may change over time\n\n## Additional Resources\n\n- [PBS Website](https://www.pbs.gov.au/)\n- [PBS Data Website](https://data.pbs.gov.au/)\n- [PBS API Documentation](https://data-api-portal.health.gov.au/api-details#api=pbs-prod-api-public-v3-v3)\n- [Model Context Protocol Documentation](https://github.com/modelcontextprotocol/mcp)\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n---\n\n![MCP Server](https://badge.mcpx.dev?type=server&features=tools) ![MCP Client](https://badge.mcpx.dev?type=client) ![MCP Dev](https://badge.mcpx.dev?type=dev) ![MCP Enabled](https://badge.mcpx.dev?status=on) ‚ù§Ô∏è \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "healthcare",
        "pharmaceutical",
        "medical",
        "healthcare data",
        "pharmaceutical data",
        "information medicines"
      ],
      "category": "healthcare-and-medical"
    },
    "mattjoyce--senechal-mcp": {
      "owner": "mattjoyce",
      "name": "senechal-mcp",
      "url": "https://github.com/mattjoyce/senechal-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/mattjoyce.webp",
      "description": "Access and analyze health data from the Senechal API, providing health profiles, trends, and summaries for integration with LLM applications. Offers reusable templates for health data analysis, enhancing data insights and accessibility.",
      "stars": 0,
      "forks": 3,
      "license": "GNU General Public License v3.0",
      "language": "Python",
      "updated_at": "2025-03-08T00:11:02Z",
      "readme_content": "# Senechal MCP Server\n\nA Model Context Protocol (MCP) server that acts as a companion to the Senechal project, providing health data from the Senechal API to LLM applications.\n\n## Overview\n\nThis server provides a standardized interface for LLMs to access health data from the Senechal API. It exposes:\n\n- **Resources**: Health data that can be loaded into an LLM's context\n- **Tools**: Functions that can be called by LLMs to fetch health data\n- **Prompts**: Reusable templates for analyzing health data\n\n## Installation\n\n1. Clone this repository\n2. Create a virtual environment:\n   ```bash\n   python -m venv venv\n   source venv/bin/activate  # On Windows: venv\\Scripts\\activate\n   ```\n3. Install dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n## Configuration\n\nCopy the `.env.example` file to `.env` and add your Senechal API key and URL:\n\n```\n# Required: Senechal API Key\nSENECHAL_API_KEY=your_api_key_here\n\n# Required: API base URL\nSENECHAL_API_BASE_URL=https://your-api-host/api/senechal\n```\n\nBoth the API key and API URL are required for the server to function.\n\n### Windows Configuration\n\nWhen running on Windows, be sure to:\n\n1. Use backslashes or properly escaped paths in the configuration\n2. Use the full path to your Python virtual environment in the claude-desktop-config.json:\n\n```json\n{\n    \"mcpServers\": {\n        \"senechal-health\": {\n            \"command\": \"C:\\\\path\\\\to\\\\venv\\\\Scripts\\\\python.exe\",\n            \"args\": [\n                \"C:\\\\path\\\\to\\\\senechal_mcp_server.py\"\n            ],\n            \"env\": {\n                \"SENECHAL_API_KEY\": \"your_api_key_here\"\n            }\n        }\n    }\n}\n```\n\nNote that environment variables in the MCP configuration do not use the `.env` file, so you'll need to set them explicitly in the config.\n\n## Usage\n\n### Testing the Client/Server Setup\n\nThe simplest way to test the setup is to run the example client:\n\n```bash\n# In one terminal, start the server\npython senechal_mcp_server.py\n\n# In another terminal, run the example client\npython example_client.py\n```\n\n### Start the Server\n\n```bash\npython senechal_mcp_server.py\n```\n\n### Development Mode with MCP Inspector\n\n```bash\nmcp dev senechal_mcp_server.py\n```\n\n### Install in Claude Desktop\n\nThe server includes a configuration file for Claude Desktop:\n\n```bash\nmcp install senechal_mcp_server.py\n```\n\nYou can then select \"Senechal Health\" from the tools menu in Claude Desktop.\n\n## Available Resources\n\n- `senechal://health/summary/{period}` - Get health summary for day, week, month, or year\n  - Example: `senechal://health/summary/day?span=7&metrics=all`\n  - Parameters:\n    - `period`: day, week, month, year\n    - `span`: Number of periods (default: 1)\n    - `metrics`: Comma-separated list or \"all\" (default)\n    - `offset`: Number of periods to offset from now (default: 0)\n\n- `senechal://health/profile` - Get the user's health profile\n  - Contains demographics, medications, supplements\n\n- `senechal://health/current` - Get current health measurements\n  - Example: `senechal://health/current?types=1,2,3`\n  - Parameters:\n    - `types`: Optional comma-separated list of measurement type IDs\n\n- `senechal://health/trends` - Get health trends over time\n  - Example: `senechal://health/trends?days=30&types=1,2,3&interval=day`\n  - Parameters:\n    - `days`: Number of days to analyze (default: 30)\n    - `types`: Optional comma-separated list of measurement type IDs\n    - `interval`: Grouping interval - day, week, month (default: day)\n\n- `senechal://health/stats` - Get statistical analysis of health metrics\n  - Example: `senechal://health/stats?days=30&types=1,2,3`\n  - Parameters:\n    - `days`: Analysis period in days (default: 30)\n    - `types`: Optional comma-separated list of measurement type IDs\n\n## Available Tools\n\n- `fetch_health_summary` - Fetch a health summary for a specific period\n  - Parameters:\n    - `period` (required): day, week, month, year\n    - `metrics` (optional): Comma-separated metrics or \"all\" (default)\n    - `span` (optional): Number of periods to return (default: 1)\n    - `offset` (optional): Number of periods to offset (default: 0)\n\n- `fetch_health_profile` - Fetch the user's health profile\n  - No parameters required\n\n- `fetch_current_health` - Fetch the latest health measurements\n  - Parameters:\n    - `types` (optional): List of measurement type IDs to filter by\n\n- `fetch_health_trends` - Fetch health trend data\n  - Parameters:\n    - `days` (optional): Number of days to analyze (default: 30)\n    - `types` (optional): List of measurement type IDs to filter by\n    - `interval` (optional): Grouping interval - day, week, month (default: day)\n\n- `fetch_health_stats` - Fetch statistical analysis of health metrics\n  - Parameters:\n    - `days` (optional): Analysis period in days (default: 30)\n    - `types` (optional): List of measurement type IDs to filter by\n\n## Available Prompts\n\n- `analyze_health_summary` - Prompt to analyze health summaries\n  - Provides a template for identifying abnormal metrics, trends, and suggesting actions\n  - Intended to be used with data from `senechal://health/summary/day?span=7`\n\n- `compare_health_trends` - Prompt to compare health trends over different time periods\n  - Provides a template for comparing trends across different timeframes (7, 30, 90 days)\n  - Intended to be used with data from the health trends endpoint\n\n## Example Interactions\n\n### Loading Health Summary Data\n\n```python\n# In an LLM application, load a week of health summaries\ncontent, mime_type = await session.read_resource(\"senechal://health/summary/day?span=7\")\n```\n\n### Calling Health Data Tools\n\n```python\n# In an LLM conversation\nresult = await session.call_tool(\n    \"fetch_health_trends\", \n    arguments={\n        \"days\": 30, \n        \"interval\": \"day\"\n    }\n)\n\n# More complex example combining tools and resources\nprofile = await session.call_tool(\"fetch_health_profile\")\ntrends = await session.call_tool(\n    \"fetch_health_trends\", \n    arguments={\"days\": 90, \"interval\": \"week\"}\n)\n```\n\n### Using Health Analysis Prompts\n\n```python\n# Get a prompt for analyzing health data\nprompt_result = await session.get_prompt(\"analyze_health_summary\")\nfor message in prompt_result.messages:\n    print(f\"[{message.role}]: {message.content.text}\")\n```\n\nSee the `example_client.py` file for a complete working example.\n\n## API Endpoints\n\nThe Senechal MCP server communicates with the following Senechal API endpoints:\n\n- `/health/summary/{period}` - Get health summaries\n- `/health/profile` - Get health profile\n- `/health/current` - Get current measurements\n- `/health/trends` - Get health trends\n- `/health/stats` - Get health stats",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "healthcare",
        "health",
        "data",
        "health data",
        "senechal api",
        "analyze health"
      ],
      "category": "healthcare-and-medical"
    },
    "pickleton89--mutation-clinical-trial-matching-mcp": {
      "owner": "pickleton89",
      "name": "mutation-clinical-trial-matching-mcp",
      "url": "https://github.com/pickleton89/mutation-clinical-trial-matching-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/pickleton89.webp",
      "description": "Connects to clinicaltrials.gov to retrieve and summarize clinical trials related to specific genetic mutations through natural language queries.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-21T16:03:59Z",
      "readme_content": "# Mutation Clinical Trial Matching MCP\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)\n[![Version 0.2.1](https://img.shields.io/badge/version-0.2.1-blue.svg)](https://github.com/pickleton89/mutation-clinical-trial-matching-mcp/releases)\n[![Tests](https://img.shields.io/badge/tests-114%20tests-green.svg)](https://github.com/pickleton89/mutation-clinical-trial-matching-mcp/actions)\n[![Code Style: Ruff](https://img.shields.io/badge/code%20style-ruff-black.svg)](https://github.com/astral-sh/ruff)\n[![Code Deduplication](https://img.shields.io/badge/code%20deduplication-60%25%20reduction-brightgreen.svg)](https://github.com/pickleton89/mutation-clinical-trial-matching-mcp)\n[![Architecture](https://img.shields.io/badge/architecture-unified%20sync%2Fasync-blue.svg)](https://github.com/pickleton89/mutation-clinical-trial-matching-mcp)\n\nA high-performance **unified** Model Context Protocol (MCP) server that enables Claude Desktop to search for clinical trial matches on clinicaltrials.gov based on genetic mutations. \n\n## Status\n\n**Production Ready** - This project has completed a major architectural transformation, achieving a **unified codebase** with 60% code reduction while maintaining 100% backward compatibility:\n\n‚úÖ **Repository Quality Excellence**: 99.6% improvement in code quality with modern Python standards (Python 3.11+ compatibility)  \n‚úÖ **Professional Type Safety**: 69% reduction in type diagnostics with comprehensive typing standards  \n‚úÖ **Unified Architecture**: Single server supporting both sync and async modes with runtime selection  \n‚úÖ **Code Deduplication**: 60% reduction (~1,000 lines) through comprehensive 4-phase consolidation  \n‚úÖ **Legacy Cleanup**: Professional codebase structure with 3,435 lines of deprecated code removed  \n‚úÖ **Zero Breaking Changes**: Complete backward compatibility with automatic migration guidance via compatibility layer  \n‚úÖ **Enterprise Features**: Circuit breakers, metrics, retry logic, distributed caching, and monitoring  \n‚úÖ **High Performance**: Async architecture with 80% performance improvement and concurrent processing  \n‚úÖ **API Resilience**: Robust error handling with 403 Forbidden error resolution via unified HTTP client  \n‚úÖ **Comprehensive Testing**: Complete test suite with 114 tests covering unified components  \n‚úÖ **Modern Tooling**: Uses `uv` for dependency management and follows Python best practices  \n‚úÖ **Production Monitoring**: Prometheus metrics, cache analytics, and health monitoring dashboards  \n\nThe server is actively used and maintained, with the unified architecture documented in the [changelog](CHANGELOG.md).\n\n## **AI-Collaborative Development**\n\nThis project was developed through **human-AI collaboration**, combining domain expertise with LLM-directed implementation:\n\n- **üß† Domain Direction**: 20+ years cancer research experience guided architecture and feature requirements\n- **ü§ñ AI Implementation**: Code generation, API design, and performance optimization through systematic LLM direction\n- **üîÑ Quality Assurance**: Iterative refinement ensuring professional standards and production reliability\n- **üìà Development Approach**: Demonstrates how domain experts can effectively leverage AI tools to build bioinformatics platforms\n\n**Methodology**: This AI-collaborative approach combines biological expertise with AI capabilities to accelerate development while maintaining code quality and reliability standards.\n\n## Overview\n\nThis project follows the Agentic Coding principles to create a system that integrates Claude Desktop with the clinicaltrials.gov API. The server allows for natural language queries about genetic mutations and returns summarized information about relevant clinical trials.\n\n```mermaid\nflowchart LR\n    Claude[Claude Desktop] <-->|MCP Protocol| Server[Unified MCP Server]\n    \n    subgraph Detection[Runtime Mode Detection]\n        Auto[Auto-Detect Event Loop]\n        Env[MCP_ASYNC_MODE]\n        Config[Configuration Override]\n    end\n    \n    subgraph Cache[Distributed Cache]\n        Redis[(Redis)]\n        Memory[In-Memory]\n    end\n    \n    subgraph Flow[Unified PocketFlow]\n        QueryNode[Unified Query Node] -->|trials_data| SummarizeNode[Unified Summarize Node]\n    end\n    \n    subgraph Services[Service Abstraction Layer]\n        HttpClient[Unified HTTP Client]\n        TrialsService[Clinical Trials Service]\n        LLMService[LLM Service]\n    end\n    \n    subgraph Monitoring[Enterprise Features]\n        Metrics[Prometheus Metrics]\n        Circuit[Circuit Breaker]\n        Analytics[Cache Analytics]\n    end\n    \n    Server -->|mode selection| Detection\n    Detection -->|sync/async| Flow\n    Server -->|mutation| Flow\n    Flow -->|service calls| Services\n    Services <-->|cache| Cache\n    Services -->|concurrent/sequential requests| API[Clinicaltrials.gov API]\n    API -->|trial data| Services\n    Flow -->|summary| Server\n    Server -->|metrics| Monitoring\n    Server -->|formatted response| Claude\n```\n\nEach node in the flow follows the **Unified PocketFlow Node pattern** with `prep`, `exec`, and `post` methods that automatically handle both sync and async execution modes.\n\n## üöÄ Unified Architecture & Code Deduplication Achievement\n\nThis project has completed a comprehensive **4-phase code deduplication effort**, transforming from a duplicated codebase into a unified, maintainable architecture:\n\n### Code Deduplication Results\n\n| **Metric** | **Achievement** |\n|------------|-----------------|\n| **Code Reduction** | **60% reduction** (~1,000 lines eliminated) |\n| **Legacy Cleanup** | **3,435 lines removed** - Professional codebase structure |\n| **Code Quality** | **99.6% improvement** - 1,695 of 1,702 linting errors fixed |\n| **Type Safety** | **69% reduction** in type diagnostics (48 ‚Üí 15) |\n| **Components Unified** | **4 major consolidations** (Servers, Nodes, Services, HTTP) |\n| **Breaking Changes** | **Zero** - Complete backward compatibility with compatibility layer |\n| **Performance Gain** | **30-40% memory reduction**, **20-30% faster startup** |\n| **Test Coverage** | **114 tests** covering all unified components |\n\n### Before vs After Consolidation\n\n| **Component** | **Before** | **After** | **Reduction** |\n|---------------|------------|-----------|---------------|\n| **Servers** | `primary.py` + `sync_server.py` | `main.py` | **70%** |\n| **Nodes** | `nodes.py` + `async_nodes.py` | `unified_nodes.py` | **85%** |\n| **Services** | `query.py` + `async_query.py` | `service.py` | **95%** |\n| **LLM Client** | `call_llm.py` + `async_call_llm.py` | `llm_service.py` | **95%** |\n\n### Key Architectural Improvements\n\n‚úÖ **Runtime Mode Selection**: Automatic detection or explicit configuration via `MCP_ASYNC_MODE`  \n‚úÖ **Single Point of Truth**: Unified business logic across sync/async execution  \n‚úÖ **Auto-Detection**: Intelligent mode selection based on execution context  \n‚úÖ **Service Abstraction**: Unified HTTP client and service layer  \n‚úÖ **Configuration System**: Centralized configuration with environment overrides  \n‚úÖ **Backward Compatibility Layer**: Complete `utils/node.py` compatibility module for legacy imports  \n‚úÖ **Migration Support**: Deprecation warnings with clear migration guidance  \n\n## Project Structure\n\nThis project is organized according to the Agentic Coding paradigm:\n\n1. **Requirements** (Human-led):\n   - Search and summarize clinical trials related to specific genetic mutations\n   - Provide mutation information as contextual resources\n   - Integrate seamlessly with Claude Desktop\n\n2. **Flow Design** (Collaborative):\n   - User queries Claude Desktop about a genetic mutation\n   - Claude calls our MCP server tool\n   - Server queries clinicaltrials.gov API\n   - Server processes and summarizes the results\n   - Server returns formatted results to Claude\n\n3. **Utilities** (Collaborative):\n   - `clinicaltrials/query.py`: Handles API calls to clinicaltrials.gov\n   - `utils/call_llm.py`: Utilities for working with Claude\n\n4. **Node Design** (AI-led):\n   - `utils/node.py`: Implements base Node and BatchNode classes with prep/exec/post pattern\n   - `clinicaltrials/nodes.py`: Defines specialized nodes for querying and summarizing\n   - `clinicaltrials_mcp_server.py`: Orchestrates the flow execution\n\n5. **Implementation** (AI-led):\n   - FastMCP SDK for handling the protocol details\n   - Error handling at all levels\n   - Resources for common mutations\n\n## Architecture Components\n\n### Unified MCP Server (`servers/main.py`)\n\nThe main unified server implementing the Model Context Protocol with **runtime mode selection**:\n\n- **Unified Architecture**: Single implementation supporting both sync and async modes\n- **Runtime Mode Selection**: Automatic detection via event loop or explicit `MCP_ASYNC_MODE` configuration\n- **Enterprise Tools**: Health monitoring, metrics collection, cache management (mode-dependent)\n- **Auto-scaling**: Circuit breakers and retry logic for robust API communication\n- **Cache Warming**: Automatically pre-loads common mutations for instant responses (async mode)\n- **API Resilience**: Handles 403 Forbidden errors with unified HTTP client fallback mechanisms\n- **Backward Compatibility**: Legacy servers redirect with deprecation warnings\n\n### Unified Service Layer\n\n**Clinical Trials Service** (`clinicaltrials/service.py`): Unified API client with mode-aware processing\n- **Dual Mode Support**: Same interface for both sync (`query_trials`) and async (`aquery_trials`) calls\n- **Circuit Breaker Integration**: Automatic failure detection and recovery\n- **Distributed Caching**: Redis-backed caching with in-memory fallback\n- **Metrics Collection**: Detailed performance and usage analytics\n- **API Compatibility**: Uses unified HTTP client for reliable clinicaltrials.gov API access\n\n**LLM Service** (`utils/llm_service.py`): Unified LLM interaction client\n- **Mode-Aware Processing**: Supports both sync and async LLM calls\n- **Retry Logic**: Built-in retry mechanisms with exponential backoff\n- **Error Handling**: Comprehensive error handling with structured logging\n\n### Unified Nodes (`clinicaltrials/unified_nodes.py`)\n\nPocketFlow nodes with **automatic sync/async execution**:\n- **QueryTrialsNode**: Unified node with mode detection for API requests\n- **SummarizeTrialsNode**: Unified LLM-powered summarization with retry logic\n- **BatchQueryTrialsNode**: Batch processing with concurrency control (async) or sequential processing (sync)\n- **Auto-Detection**: Nodes automatically determine execution mode at runtime\n\n### Unified Foundation Layer\n\n- **Unified HTTP Client** (`utils/http_client.py`): Single HTTP client supporting both sync and async with connection pooling\n- **Unified Node Framework** (`utils/unified_node.py`): Base classes with automatic mode detection\n- **Shared Utilities** (`utils/shared.py`): Common validation, error handling, and metrics functions\n- **Cache Strategies** (`utils/cache_strategies.py`): Smart cache warming and invalidation (async mode)\n- **Configuration System** (`servers/config.py`): Centralized configuration with environment overrides\n- **Legacy Compatibility** (`servers/legacy_compat.py`): Backward compatibility layer with migration guidance\n\n## Unified Node Pattern Implementation\n\nThis project implements the **enhanced PocketFlow Node pattern** with unified sync/async execution, providing a modular, maintainable approach to building AI workflows:\n\n### Unified Core Node Classes (`utils/unified_node.py`)\n\n- **UnifiedNode**: Base class supporting both sync and async execution with automatic mode detection\n- **UnifiedBatchNode**: Extension for batch processing with concurrency control (async) or sequential processing (sync)\n- **UnifiedFlow**: Orchestrates execution with intelligent mode selection\n\n### Unified Implementation Nodes (`clinicaltrials/unified_nodes.py`)\n\n1. **QueryTrialsNode** (Unified):\n   ```python\n   # Single implementation supporting both modes\n   def prep(self, shared): return shared[\"mutation\"]\n   \n   def exec(self, mutation): \n       return self.trials_service.query_trials(mutation)  # Sync version\n   \n   async def aexec(self, mutation): \n       return await self.trials_service.aquery_trials(mutation)  # Async version\n   \n   def post(self, shared, mutation, result):\n       shared[\"trials_data\"] = result\n       shared[\"studies\"] = result.get(\"studies\", [])\n       return self.get_next_node_id(result)\n   ```\n\n2. **SummarizeTrialsNode** (Unified):\n   ```python\n   # Unified summarization with mode detection\n   def prep(self, shared): return shared[\"studies\"]\n   \n   def exec(self, studies): \n       return self.llm_service.call_llm(prompt)  # Sync version\n   \n   async def aexec(self, studies): \n       return await self.llm_service.acall_llm(prompt)  # Async version\n   \n   def post(self, shared, studies, summary):\n       shared[\"summary\"] = summary\n       return None  # End of flow\n   ```\n\n### Unified Flow Execution\n\nThe unified MCP server creates and runs flows with automatic mode detection:\n\n```python\n# Create unified nodes (mode determined at runtime)\nquery_node = QueryTrialsNode(async_mode=server.async_mode)\nsummarize_node = SummarizeTrialsNode(async_mode=server.async_mode)\n\n# Use PocketFlow chaining syntax\nquery_node >> summarize_node\n\n# Create unified flow\nflow = UnifiedFlow(start_node=query_node, async_mode=server.async_mode)\n\n# Run flow with shared context (automatically sync or async)\nshared = {\"mutation\": mutation}\nif server.async_mode:\n    result = await flow.aexecute(shared)\nelse:\n    result = flow.execute(shared)\n```\n\n### Key Advantages of Unified Pattern\n\n‚úÖ **Single Implementation**: One codebase supports both sync and async execution  \n‚úÖ **Auto-Detection**: Nodes automatically determine optimal execution mode  \n‚úÖ **Runtime Selection**: Mode can be selected at server startup or runtime  \n‚úÖ **Preserved Interface**: Same `prep`, `exec`, `post` pattern maintained  \n‚úÖ **Performance Optimization**: Mode-specific optimizations (timeouts, concurrency, batch limits)  \n‚úÖ **Backward Compatibility**: Legacy node patterns continue working with deprecation warnings  \n\nThis unified pattern eliminates code duplication while preserving the modular, testable nature of the original PocketFlow design. For more details, see the [design document](docs/design.md).\n\n## Usage\n\n1. Install dependencies with uv:\n   ```bash\n   uv sync\n   ```\n\n2. Configure Claude Desktop to use the **unified server**:\n   ```json\n   {\n     \"mcpServers\": {\n       \"mutation-clinical-trials-mcp\": {\n         \"command\": \"uv\",\n         \"args\": [\"run\", \"python\", \"servers/main.py\"],\n         \"description\": \"Unified clinical trials matching server with runtime mode selection\"\n       }\n     }\n   }\n   ```\n\n3. **Optional**: Configure execution mode via environment variables:\n   ```json\n   {\n     \"mcpServers\": {\n       \"mutation-clinical-trials-mcp\": {\n         \"command\": \"uv\",\n         \"args\": [\"run\", \"python\", \"servers/main.py\"],\n         \"env\": {\n           \"MCP_ASYNC_MODE\": \"true\"\n         },\n         \"description\": \"Unified server in explicit async mode\"\n       }\n     }\n   }\n   ```\n\n3. Start Claude Desktop and ask questions like:\n   - \"What clinical trials are available for EGFR L858R mutations?\"\n   - \"Are there any trials for BRAF V600E mutations?\"  \n   - \"Tell me about trials for ALK rearrangements\"\n   - \"Search for multiple mutations: EGFR L858R,BRAF V600E,KRAS G12C\"\n\n4. Use enterprise monitoring tools:\n   - \"Get the server health status\"\n   - \"Show me the cache performance report\"\n   - \"What are the current metrics?\"\n\n---\n\n## Integrating with Claude Desktop \n\nYou can configure this project as a Claude Desktop MCP tool. Use path placeholders in your configuration, and substitute them with your actual paths:\n\n### Recommended Configuration (Unified Server)\n\n```json\n\"mutation-clinical-trials-mcp\": {\n  \"command\": \"{PATH_TO_VENV}/bin/python\",\n  \"args\": [\n    \"{PATH_TO_PROJECT}/servers/main.py\"\n  ],\n  \"description\": \"Unified clinical trials matching server with automatic mode selection.\"\n}\n```\n\n### Legacy Compatibility (Still Supported)\n\n```json\n\"mutation-clinical-trials-mcp-legacy\": {\n  \"command\": \"{PATH_TO_VENV}/bin/python\",\n  \"args\": [\n    \"{PATH_TO_PROJECT}/servers/primary.py\"\n  ],\n  \"description\": \"Legacy async server (redirects to unified server with deprecation warnings).\"\n}\n```\n\n**Path Variables:**\n- `{PATH_TO_VENV}`: Full path to your virtual environment directory.\n- `{PATH_TO_PROJECT}`: Full path to the directory containing your project files.\n\n**Installation Instructions:**\n1. Clone the repository to your local machine.\n2. Install uv if you don't have it already:\n   ```bash\n   curl -LsSf https://astral.sh/uv/install.sh | sh    # macOS/Linux\n   # or\n   iwr -useb https://astral.sh/uv/install.ps1 | iex    # Windows PowerShell\n   ```\n3. Create a virtual environment and install dependencies in one step:\n   ```bash\n   uv sync\n   ```\n4. Activate the virtual environment when needed:\n   ```bash\n   source .venv/bin/activate    # macOS/Linux\n   .venv\\Scripts\\activate       # Windows\n   ```\n5. Determine the full path to your virtual environment and project directory.\n6. Update your configuration with these specific paths.\n\n**Examples:**\n- On macOS/Linux:\n  ```json\n  \"command\": \"/Users/username/projects/mutation_trial_matcher/.venv/bin/python\"\n  ```\n- On Windows:\n  ```json\n  \"command\": \"C:\\\\Users\\\\username\\\\projects\\\\mutation_trial_matcher\\\\.venv\\\\Scripts\\\\python.exe\"\n  ```\n\n**Path Finding Tips:**\n- To find the exact path to your Python interpreter in the virtual environment, run:\n  - `which python` (macOS/Linux)\n  - `where python` (Windows, after activating the venv)\n- For the project path, use the full path to the directory containing `servers/primary.py`.\n\n---\n\n## Future Improvements\n\nFor a comprehensive list of planned enhancements and future work, please see the [future_work.md](docs/future_work.md) document.\n\n\n## Dependencies\n\nThis project relies on the following key dependencies:\n\n- **Python 3.11+** - Base runtime environment (lowered from 3.13+ for broader compatibility)\n- **FastMCP** (`fastmcp>=2.10.2`) - High-performance async MCP framework\n- **PocketFlow** (`pocketflow>=0.0.1`) - Framework for building modular AI workflows with the Node pattern  \n- **Requests** (`requests==2.31.0`) - HTTP library for clinicaltrials.gov API calls (dev dependency for legacy test compatibility)\n- **HTTPX** (`httpx>=0.28.1`) - Async HTTP client for direct Anthropic API calls\n- **Redis** (`redis>=6.2.0`) - Optional distributed caching backend\n- **Python-dotenv** (`python-dotenv==1.1.0`) - Environment variable management\n\n**Enterprise Features:**\n- Prometheus metrics collection and monitoring\n- Circuit breaker patterns for fault tolerance\n- Distributed caching with Redis backend\n- Cache warming strategies for performance optimization\n\nAll dependencies can be installed using `uv sync` as described in the installation instructions.\n\n## Troubleshooting\n\nIf Claude Desktop disconnects from the MCP server:\n- Check logs at: `~/Library/Logs/Claude/mcp-server-mutation-clinical-trials-mcp.log`\n- Restart Claude Desktop  \n- Verify the server is running correctly with `uv run python servers/main.py`\n- Check for deprecation warnings if using legacy servers (`servers/primary.py` or `servers/legacy/sync_server.py`)\n\n**Redis Connection Warnings:**\n- Redis connection errors are expected if Redis is not installed - the server uses in-memory caching as fallback\n- To eliminate warnings: `brew install redis && brew services start redis`\n- The server works perfectly without Redis, just with reduced caching performance\n\n**Cache Warming on Startup:**\n- Server automatically queries 15 common mutations on startup for performance optimization\n- This is normal behavior and improves response times for frequent queries\n- To disable: comment out `asyncio.run(startup_tasks())` in `servers/primary.py`\n\n## Development History\n\nThis project evolved through multiple phases of AI-collaborative development:\n\n**Phase 1** (2024-04-30): Initial prototype using synchronous architecture  \n**Phase 2** (2024-12): Enhanced with comprehensive testing and documentation  \n**Phase 3** (2025-01): Major refactoring for improved organization and maintainability  \n**Phase 4** (2025-01): Full async migration with enterprise features and 80% performance improvement  \n**Phase 5** (2025-07): API resilience improvements and 403 error resolution  \n**Phase 6** (2025-07): **Code Deduplication Project** - Comprehensive 4-phase unification effort  \n**Phase 7** (2025-07): **Repository Quality Excellence** - Professional code standards and legacy cleanup\n\n### Recent Achievements (July 2025)\n\n**Code Deduplication Project**:  \n**Phase 1**: Foundation Layer - Unified HTTP client and shared utilities  \n**Phase 2**: Service Layer Consolidation - Unified LLM and Clinical Trials services  \n**Phase 3**: Node Layer Unification - Enhanced UnifiedNode framework  \n**Phase 4**: Server Consolidation - Complete unified architecture  \n\n**Repository Quality Excellence**:  \n- **Code Quality**: 99.6% improvement (1,695 of 1,702 linting errors fixed)  \n- **Type Safety**: 69% reduction in type diagnostics (48 ‚Üí 15)  \n- **Professional Cleanup**: 3,435 lines of deprecated code removed  \n- **Compatibility Layer**: Complete backward compatibility with `utils/node.py` compatibility module  \n- **Python Compatibility**: Lowered requirement from Python 3.13+ to 3.11+ for broader adoption\n\n**Results**: 60% code reduction (~1,000 lines eliminated), zero breaking changes, unified sync/async architecture, production-ready code quality\n\n**Current Version (v0.2.1)**: Production-ready unified server with enterprise features, automatic mode selection, professional type safety, and comprehensive backward compatibility. Developed through collaboration with Claude Code, leveraging 20+ years of cancer research domain expertise to guide AI implementation and architectural transformation.\n\n\n## Contributing\n\nWe welcome contributions to improve the Mutation Clinical Trial Matching MCP! Here's how you can get involved:\n\n### Development Setup\n\n1. **Clone the repository**:\n   ```bash\n   git clone https://github.com/pickleton89/mutation-clinical-trial-matching-mcp.git\n   cd mutation-clinical-trial-matching-mcp\n   ```\n\n2. **Install dependencies**:\n   ```bash\n   uv sync\n   ```\n\n3. **Run tests**:\n   ```bash\n   uv run python -m unittest discover tests/\n   ```\n\n### Contribution Guidelines\n\n- **Follow the PocketFlow Node pattern** for new features\n- **Add comprehensive tests** for any new functionality\n- **Update documentation** including relevant docstrings and README sections\n- **Follow Python best practices** and maintain type hints\n- **Run linting and type checking** before submitting PRs\n\n### Areas for Contribution\n\n- **Performance optimizations** for large-scale clinical trial searches\n- **Additional mutation formats** and standardization\n- **Enhanced summarization capabilities** with more detailed filtering\n- **Integration with other clinical databases** beyond ClinicalTrials.gov\n- **UI/UX improvements** for the Claude Desktop integration\n\n### Reporting Issues\n\nPlease use the [GitHub Issues](https://github.com/pickleton89/mutation-clinical-trial-matching-mcp/issues) page to report bugs or request features.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgements\n\nThis project was built using the [PocketFlow-Template-Python](https://github.com/The-Pocket/PocketFlow-Template-Python) as a starting point. Special thanks to the original contributors of that project for providing the foundation and structure that made this implementation possible.\n\nThe project follows the Agentic Coding methodology as outlined in the original template.\n\n---\n‚ö†Ô∏è **Disclaimer**\n\nThis project is a prototype and is intended for research and demonstration purposes only. It should not be used to make medical decisions or as a substitute for professional medical advice, diagnosis, or treatment. Due to the limitations of large language models (LLMs), the information provided by this tool may be incomplete, inaccurate, or outdated. Users should exercise caution and consult qualified healthcare professionals before making any decisions based on the outputs of this system.\n\n---\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "clinical",
        "mutations",
        "clinicaltrials",
        "mutation clinical",
        "pickleton89 mutation",
        "medical pickleton89"
      ],
      "category": "healthcare-and-medical"
    },
    "uh-joan--cortellis-mcp-server": {
      "owner": "uh-joan",
      "name": "cortellis-mcp-server",
      "url": "https://github.com/uh-joan/cortellis-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Access the Cortellis drug database to search for drugs, retrieve detailed information, and analyze drug development statuses. Provides tools for ontology exploration and financial insights.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ontology",
        "database",
        "cortellis",
        "drug database",
        "cortellis drug",
        "search drugs"
      ],
      "category": "healthcare-and-medical"
    },
    "wodiluluya--Viewers": {
      "owner": "wodiluluya",
      "name": "Viewers",
      "url": "https://github.com/wodiluluya/Viewers",
      "imageUrl": "/freedevtools/mcp/pfp/wodiluluya.webp",
      "description": "View and manipulate medical images directly in the browser with support for DICOMweb protocols. The platform features advanced functionalities like 2D and 3D rendering, measurement tracking, and customizable workflows for enhanced medical imaging capabilities.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2024-09-26T01:18:00Z",
      "readme_content": "<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<div align=\"center\">\n  <h1>OHIF Medical Imaging Viewer</h1>\n  <p><strong>The OHIF Viewer</strong> is a zero-footprint medical image viewer\nprovided by the <a href=\"https://ohif.org/\">Open Health Imaging Foundation (OHIF)</a>. It is a configurable and extensible progressive web application with out-of-the-box support for image archives which support <a href=\"https://www.dicomstandard.org/using/dicomweb/\">DICOMweb</a>.</p>\n</div>\n\n\n<div align=\"center\">\n  <a href=\"https://docs.ohif.org/\"><strong>Read The Docs</strong></a>\n</div>\n<div align=\"center\">\n  <a href=\"https://viewer.ohif.org/\">Live Demo</a> |\n  <a href=\"https://ui.ohif.org/\">Component Library</a>\n</div>\n<div align=\"center\">\n  üì∞ <a href=\"https://ohif.org/news/\"><strong>Join OHIF Newsletter</strong></a> üì∞\n</div>\n<div align=\"center\">\n  üì∞ <a href=\"https://ohif.org/news/\"><strong>Join OHIF Newsletter</strong></a> üì∞\n</div>\n\n\n\n<hr />\n\n[![NPM version][npm-version-image]][npm-url]\n[![MIT License][license-image]][license-url]\n[![This project is using Percy.io for visual regression testing.][percy-image]](percy-url)\n<!-- [![NPM downloads][npm-downloads-image]][npm-url] -->\n<!-- [![Pulls][docker-pulls-img]][docker-image-url] -->\n<!-- [![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2FOHIF%2FViewers.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2FOHIF%2FViewers?ref=badge_shield) -->\n\n<!-- [![Netlify Status][netlify-image]][netlify-url] -->\n<!-- [![CircleCI][circleci-image]][circleci-url] -->\n<!-- [![codecov][codecov-image]][codecov-url] -->\n<!-- [![All Contributors](https://img.shields.io/badge/all_contributors-10-orange.svg?style=flat-square)](#contributors) -->\n<!-- prettier-ignore-end -->\n\n\n|     |  | |\n| :-: | :---  | :--- |\n| <img src=\"https://github.com/OHIF/Viewers/blob/master/platform/docs/docs/assets/img/demo-measurements.webp?raw=true\" alt=\"Measurement tracking\" width=\"350\"/> | Measurement Tracking | [Demo](https://viewer.ohif.org/viewer?StudyInstanceUIDs=1.3.6.1.4.1.25403.345050719074.3824.20170125095438.5) |\n| <img src=\"https://github.com/OHIF/Viewers/blob/master/platform/docs/docs/assets/img/demo-segmentation.webp?raw=true\" alt=\"Segmentations\" width=\"350\"/> | Labelmap Segmentations  | [Demo](https://viewer.ohif.org/viewer?StudyInstanceUIDs=1.3.12.2.1107.5.2.32.35162.30000015050317233592200000046) |\n| <img src=\"https://github.com/OHIF/Viewers/blob/master/platform/docs/docs/assets/img/demo-ptct.webp?raw=true\" alt=\"Hanging Protocols\" width=\"350\"/> | Fusion and Custom Hanging protocols  | [Demo](https://viewer.ohif.org/tmtv?StudyInstanceUIDs=1.3.6.1.4.1.14519.5.2.1.7009.2403.334240657131972136850343327463) |\n| <img src=\"https://github.com/OHIF/Viewers/blob/master/platform/docs/docs/assets/img/demo-volume-rendering.webp?raw=true\" alt=\"Volume Rendering\" width=\"350\"/> | Volume Rendering  | [Demo](https://viewer.ohif.org/viewer?StudyInstanceUIDs=1.3.6.1.4.1.25403.345050719074.3824.20170125095438.5&hangingprotocolId=mprAnd3DVolumeViewport) |\n| <img src=\"https://github.com/OHIF/Viewers/blob/master/platform/docs/docs/assets/img/demo-pdf.webp?raw=true\" alt=\"PDF\" width=\"350\"/> | PDF  | [Demo](https://viewer.ohif.org/viewer?StudyInstanceUIDs=2.25.317377619501274872606137091638706705333) |\n| <img src=\"https://github.com/OHIF/Viewers/blob/master/platform/docs/docs/assets/img/demo-rtstruct.webp?raw=true\" alt=\"RTSTRUCT\" width=\"350\"/> | RT STRUCT  | [Demo](https://viewer.ohif.org/viewer?StudyInstanceUIDs=1.3.6.1.4.1.5962.99.1.2968617883.1314880426.1493322302363.3.0) |\n| <img src=\"https://github.com/OHIF/Viewers/blob/master/platform/docs/docs/assets/img/demo-4d.webp?raw=true\" alt=\"4D\" width=\"350\"/> | 4D  | [Demo](https://viewer.ohif.org/dynamic-volume?StudyInstanceUIDs=2.25.232704420736447710317909004159492840763) |\n| <img src=\"https://github.com/OHIF/Viewers/blob/master/platform/docs/docs/assets/img/demo-video.webp?raw=true\" alt=\"VIDEO\" width=\"350\"/> | Video  | [Demo](https://viewer.ohif.org/viewer?StudyInstanceUIDs=2.25.96975534054447904995905761963464388233) |\n| <img src=\"https://github.com/OHIF/Viewers/blob/master/platform/docs/docs/assets/img/microscopy.webp?raw=true\" alt=\"microscopy\" width=\"350\"/> | Slide Microscopy  | [Demo](https://viewer.ohif.org/microscopy?StudyInstanceUIDs=2.25.141277760791347900862109212450152067508) |\n\n## About\n\nThe OHIF Viewer can retrieve\nand load images from most sources and formats; render sets in 2D, 3D, and\nreconstructed representations; allows for the manipulation, annotation, and\nserialization of observations; supports internationalization, OpenID Connect,\noffline use, hotkeys, and many more features.\n\nAlmost everything offers some degree of customization and configuration. If it\ndoesn't support something you need, we accept pull requests and have an ever\nimproving Extension System.\n\n## Why Choose Us\n\n### Community & Experience\n\nThe OHIF Viewer is a collaborative effort that has served as the basis for many\nactive, production, and FDA Cleared medical imaging viewers. It benefits from\nour extensive community's collective experience, and from the sponsored\ncontributions of individuals, research groups, and commercial organizations.\n\n### Built to Adapt\n\nAfter more than 8-years of integrating with many companies and organizations,\nThe OHIF Viewer has been rebuilt from the ground up to better address the\nvarying workflow and configuration needs of its many users. All of the Viewer's\ncore features are built using it's own extension system. The same extensibility\nthat allows us to offer:\n\n- 2D and 3D medical image viewing\n- Multiplanar Reconstruction (MPR)\n- Maximum Intensity Project (MIP)\n- Whole slide microscopy viewing\n- PDF and Dicom Structured Report rendering\n- Segmentation rendering as labelmaps and contours\n- User Access Control (UAC)\n- Context specific toolbar and side panel content\n- and many others\n\nCan be leveraged by you to customize the viewer for your workflow, and to add\nany new functionality you may need (and wish to maintain privately without\nforking).\n\n### Support\n\n- [Report a Bug üêõ](https://github.com/OHIF/Viewers/issues/new?assignees=&labels=Community%3A+Report+%3Abug%3A%2CAwaiting+Reproduction&projects=&template=bug-report.yml&title=%5BBug%5D+)\n- [Request a Feature üöÄ](https://github.com/OHIF/Viewers/issues/new?assignees=&labels=Community%3A+Request+%3Ahand%3A&projects=&template=feature-request.yml&title=%5BFeature+Request%5D+)\n- [Ask a Question ü§ó](community.ohif.org)\n- [Slack Channel](https://join.slack.com/t/cornerstonejs/shared_invite/zt-1r8xb2zau-dOxlD6jit3TN0Uwf928w9Q)\n\nFor commercial support, academic collaborations, and answers to common\nquestions; please use [Get Support](https://ohif.org/get-support/) to contact\nus.\n\n\n## Developing\n\n### Branches\n\n#### `master` branch - The latest dev (beta) release\n\n- `master` - The latest dev release\n\nThis is typically where the latest development happens. Code that is in the master branch has passed code reviews and automated tests, but it may not be deemed ready for production. This branch usually contains the most recent changes and features being worked on by the development team. It's often the starting point for creating feature branches (where new features are developed) and hotfix branches (for urgent fixes).\n\nEach package is tagged with beta version numbers, and published to npm such as `@ohif/ui@3.6.0-beta.1`\n\n### `release/*` branches - The latest stable releases\nOnce the `master` branch code reaches a stable, release-ready state, we conduct a comprehensive code review and QA testing. Upon approval, we create a new release branch from `master`. These branches represent the latest stable version considered ready for production.\n\nFor example, `release/3.5` is the branch for version 3.5.0, and `release/3.6` is for version 3.6.0. After each release, we wait a few days to ensure no critical bugs. If any are found, we fix them in the release branch and create a new release with a minor version bump, e.g., 3.5.1 in the `release/3.5` branch.\n\nEach package is tagged with version numbers and published to npm, such as `@ohif/ui@3.5.0`. Note that `master` is always ahead of the `release` branch. We publish docker builds for both beta and stable releases.\n\nHere is a schematic representation of our development workflow:\n\n![alt text](platform/docs/docs/assets/img/github-readme-branches-Jun2024.png)\n\n\n\n\n\n### Requirements\n\n- [Yarn 1.17.3+](https://yarnpkg.com/en/docs/install)\n- [Node 18+](https://nodejs.org/en/)\n- Yarn Workspaces should be enabled on your machine:\n  - `yarn config set workspaces-experimental true`\n\n### Getting Started\n\n1. [Fork this repository][how-to-fork]\n2. [Clone your forked repository][how-to-clone]\n   - `git clone https://github.com/YOUR-USERNAME/Viewers.git`\n3. Navigate to the cloned project's directory\n4. Add this repo as a `remote` named `upstream`\n   - `git remote add upstream https://github.com/OHIF/Viewers.git`\n5. `yarn install` to restore dependencies and link projects\n\n#### To Develop\n\n_From this repository's root directory:_\n\n```bash\n# Enable Yarn Workspaces\nyarn config set workspaces-experimental true\n\n# Restore dependencies\nyarn install\n```\n\n## Commands\n\nThese commands are available from the root directory. Each project directory\nalso supports a number of commands that can be found in their respective\n`README.md` and `package.json` files.\n\n| Yarn Commands                | Description                                                   |\n| ---------------------------- | ------------------------------------------------------------- |\n| **Develop**                  |                                                               |\n| `dev` or `start`             | Default development experience for Viewer                     |\n| `test:unit`                  | Jest multi-project test runner; overall coverage              |\n| **Deploy**                   |                                                               |\n| `build`\\*                    | Builds production output for our PWA Viewer                   |  |\n\n\\* - For more information on our different builds, check out our [Deploy\nDocs][deployment-docs]\n\n## Project\n\nThe OHIF Medical Image Viewing Platform is maintained as a\n[`monorepo`][monorepo]. This means that this repository, instead of containing a\nsingle project, contains many projects. If you explore our project structure,\nyou'll see the following:\n\n```bash\n.\n‚îú‚îÄ‚îÄ extensions               #\n‚îÇ   ‚îú‚îÄ‚îÄ _example             # Skeleton of example extension\n‚îÇ   ‚îú‚îÄ‚îÄ default              # basic set of useful functionalities (datasources, panels, etc)\n‚îÇ   ‚îú‚îÄ‚îÄ cornerstone       # image rendering and tools w/ Cornerstone3D\n‚îÇ   ‚îú‚îÄ‚îÄ cornerstone-dicom-sr # DICOM Structured Report rendering and export\n‚îÇ   ‚îú‚îÄ‚îÄ cornerstone-dicom-sr # DICOM Structured Report rendering and export\n‚îÇ   ‚îú‚îÄ‚îÄ cornerstone-dicom-seg # DICOM Segmentation rendering and export\n‚îÇ   ‚îú‚îÄ‚îÄ cornerstone-dicom-rt # DICOM RTSTRUCT rendering\n‚îÇ   ‚îú‚îÄ‚îÄ cornerstone-microscopy # Whole Slide Microscopy rendering\n‚îÇ   ‚îú‚îÄ‚îÄ dicom-pdf # PDF rendering\n‚îÇ   ‚îú‚îÄ‚îÄ dicom-video # DICOM RESTful Services\n‚îÇ   ‚îú‚îÄ‚îÄ measurement-tracking # Longitudinal measurement tracking\n‚îÇ   ‚îú‚îÄ‚îÄ tmtv # Total Metabolic Tumor Volume (TMTV) calculation\n|\n\n‚îÇ\n‚îú‚îÄ‚îÄ modes                    #\n‚îÇ   ‚îú‚îÄ‚îÄ _example             # Skeleton of example mode\n‚îÇ   ‚îú‚îÄ‚îÄ basic-dev-mode       # Basic development mode\n‚îÇ   ‚îú‚îÄ‚îÄ longitudinal         # Longitudinal mode (measurement tracking)\n‚îÇ   ‚îú‚îÄ‚îÄ tmtv       # Total Metabolic Tumor Volume (TMTV) calculation mode\n‚îÇ   ‚îî‚îÄ‚îÄ microscopy          # Whole Slide Microscopy mode\n‚îÇ\n‚îú‚îÄ‚îÄ platform                 #\n‚îÇ   ‚îú‚îÄ‚îÄ core                 # Business Logic\n‚îÇ   ‚îú‚îÄ‚îÄ i18n                 # Internationalization Support\n‚îÇ   ‚îú‚îÄ‚îÄ ui                   # React component library\n‚îÇ   ‚îú‚îÄ‚îÄ docs                 # Documentation\n‚îÇ   ‚îî‚îÄ‚îÄ viewer               # Connects platform and extension projects\n‚îÇ\n‚îú‚îÄ‚îÄ ...                      # misc. shared configuration\n‚îú‚îÄ‚îÄ lerna.json               # MonoRepo (Lerna) settings\n‚îú‚îÄ‚îÄ package.json             # Shared devDependencies and commands\n‚îî‚îÄ‚îÄ README.md                # This file\n```\n\n## Acknowledgments\n\nTo acknowledge the OHIF Viewer in an academic publication, please cite\n\n> _Open Health Imaging Foundation Viewer: An Extensible Open-Source Framework\n> for Building Web-Based Imaging Applications to Support Cancer Research_\n>\n> Erik Ziegler, Trinity Urban, Danny Brown, James Petts, Steve D. Pieper, Rob\n> Lewis, Chris Hafey, and Gordon J. Harris\n>\n> _JCO Clinical Cancer Informatics_, no. 4 (2020), 336-345, DOI:\n> [10.1200/CCI.19.00131](https://www.doi.org/10.1200/CCI.19.00131)\n>\n> Open-Access on Pubmed Central:\n> https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7259879/\n\nor, for v1, please cite:\n\n> _LesionTracker: Extensible Open-Source Zero-Footprint Web Viewer for Cancer\n> Imaging Research and Clinical Trials_\n>\n> Trinity Urban, Erik Ziegler, Rob Lewis, Chris Hafey, Cheryl Sadow, Annick D.\n> Van den Abbeele and Gordon J. Harris\n>\n> _Cancer Research_, November 1 2017 (77) (21) e119-e122 DOI:\n> [10.1158/0008-5472.CAN-17-0334](https://www.doi.org/10.1158/0008-5472.CAN-17-0334)\n\n**Note:** If you use or find this repository helpful, please take the time to\nstar this repository on GitHub. This is an easy way for us to assess adoption\nand it can help us obtain future funding for the project.\n\nThis work is supported primarily by the National Institutes of Health, National\nCancer Institute, Informatics Technology for Cancer Research (ITCR) program,\nunder a\n[grant to Dr. Gordon Harris at Massachusetts General Hospital (U24 CA199460)](https://projectreporter.nih.gov/project_info_description.cfm?aid=8971104).\n\n[NCI Imaging Data Commons (IDC) project](https://imaging.datacommons.cancer.gov/) supported the development of new features and bug fixes marked with [\"IDC:priority\"](https://github.com/OHIF/Viewers/issues?q=is%3Aissue+is%3Aopen+label%3AIDC%3Apriority),\n[\"IDC:candidate\"](https://github.com/OHIF/Viewers/issues?q=is%3Aissue+is%3Aopen+label%3AIDC%3Acandidate) or [\"IDC:collaboration\"](https://github.com/OHIF/Viewers/issues?q=is%3Aissue+is%3Aopen+label%3AIDC%3Acollaboration). NCI Imaging Data Commons is supported by contract number 19X037Q from\nLeidos Biomedical Research under Task Order HHSN26100071 from NCI. [IDC Viewer](https://learn.canceridc.dev/portal/visualization) is a customized version of the OHIF Viewer.\n\nThis project is tested with BrowserStack. Thank you for supporting open-source!\n\n## License\n\nMIT ¬© [OHIF](https://github.com/OHIF)\n\n<!--\n  Links\n  -->\n\n<!-- prettier-ignore-start -->\n<!-- Badges -->\n[lerna-image]: https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg\n[lerna-url]: https://lerna.js.org/\n[netlify-image]: https://api.netlify.com/api/v1/badges/32708787-c9b0-4634-b50f-7ca41952da77/deploy-status\n[netlify-url]: https://app.netlify.com/sites/ohif-dev/deploys\n[all-contributors-image]: https://img.shields.io/badge/all_contributors-0-orange.svg?style=flat-square\n[circleci-image]: https://circleci.com/gh/OHIF/Viewers.svg?style=svg\n[circleci-url]: https://circleci.com/gh/OHIF/Viewers\n[codecov-image]: https://codecov.io/gh/OHIF/Viewers/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/OHIF/Viewers/branch/master\n[prettier-image]: https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square\n[prettier-url]: https://github.com/prettier/prettier\n[semantic-image]: https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg\n[semantic-url]: https://github.com/semantic-release/semantic-release\n<!-- ROW -->\n[npm-url]: https://npmjs.org/package/@ohif/app\n[npm-downloads-image]: https://img.shields.io/npm/dm/@ohif/app.svg?style=flat-square\n[npm-version-image]: https://img.shields.io/npm/v/@ohif/app.svg?style=flat-square\n[docker-pulls-img]: https://img.shields.io/docker/pulls/ohif/viewer.svg?style=flat-square\n[docker-image-url]: https://hub.docker.com/r/ohif/app\n[license-image]: https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\n[license-url]: LICENSE\n[percy-image]: https://percy.io/static/images/percy-badge.svg\n[percy-url]: https://percy.io/Open-Health-Imaging-Foundation/OHIF-Viewer\n<!-- Links -->\n[monorepo]: https://en.wikipedia.org/wiki/Monorepo\n[how-to-fork]: https://help.github.com/en/articles/fork-a-repo\n[how-to-clone]: https://help.github.com/en/articles/fork-a-repo#step-2-create-a-local-clone-of-your-fork\n[ohif-architecture]: https://docs.ohif.org/architecture/index.html\n[ohif-extensions]: https://docs.ohif.org/architecture/index.html\n[deployment-docs]: https://docs.ohif.org/deployment/\n[react-url]: https://reactjs.org/\n[pwa-url]: https://developers.google.com/web/progressive-web-apps/\n[ohif-viewer-url]: https://www.npmjs.com/package/@ohif/app\n[configuration-url]: https://docs.ohif.org/configuring/\n[extensions-url]: https://docs.ohif.org/extensions/\n<!-- Platform -->\n[platform-core]: platform/core/README.md\n[core-npm]: https://www.npmjs.com/package/@ohif/core\n[platform-i18n]: platform/i18n/README.md\n[i18n-npm]: https://www.npmjs.com/package/@ohif/i18n\n[platform-ui]: platform/ui/README.md\n[ui-npm]: https://www.npmjs.com/package/@ohif/ui\n[platform-viewer]: platform/app/README.md\n[viewer-npm]: https://www.npmjs.com/package/@ohif/app\n<!-- Extensions -->\n[extension-cornerstone]: extensions/cornerstone/README.md\n[cornerstone-npm]: https://www.npmjs.com/package/@ohif/extension-cornerstone\n[extension-dicom-html]: extensions/dicom-html/README.md\n[html-npm]: https://www.npmjs.com/package/@ohif/extension-dicom-html\n[extension-dicom-microscopy]: extensions/dicom-microscopy/README.md\n[microscopy-npm]: https://www.npmjs.com/package/@ohif/extension-dicom-microscopy\n[extension-dicom-pdf]: extensions/dicom-pdf/README.md\n[pdf-npm]: https://www.npmjs.com/package/@ohif/extension-dicom-pdf\n[extension-vtk]: extensions/vtk/README.md\n[vtk-npm]: https://www.npmjs.com/package/@ohif/extension-vtk\n<!-- prettier-ignore-end -->\n\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2FOHIF%2FViewers.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2FOHIF%2FViewers?ref=badge_large)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "dicomweb",
        "wodiluluya",
        "imaging",
        "medical wodiluluya",
        "wodiluluya viewers",
        "support dicomweb"
      ],
      "category": "healthcare-and-medical"
    },
    "zhaoyouj--mcp-slicer": {
      "owner": "zhaoyouj",
      "name": "mcp-slicer",
      "url": "https://github.com/zhaoyouj/mcp-slicer",
      "imageUrl": "/freedevtools/mcp/pfp/zhaoyouj.webp",
      "description": "Connect and control 3D Slicer through natural language for medical image processing and scene manipulation. Execute Python code directly in the Slicer environment to enhance workflow and automate tasks.",
      "stars": 18,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-10-04T05:11:32Z",
      "readme_content": "<img src=\"https://github.com/zhaoyouj/mcp-slicer/blob/main/docs/images/logo.jpeg?raw=true\" width=\"160\" alt=\"logo\">\n\n# MCP-Slicer - 3D Slicer Model Context Protocol Integration\n\n[English](README.md) | [ÁÆÄ‰Ωì‰∏≠Êñá](README_zh.md)\n\n[![Python Version](https://img.shields.io/badge/python-3.13%2B-blue.svg)](https://www.python.org/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![PyPI version](https://img.shields.io/pypi/v/mcp-slicer.svg)](https://pypi.org/project/mcp-slicer/)\n\nMCP-Slicer connects 3D Slicer with model clients like Claude Desktop or Cline through the Model Context Protocol (MCP), enabling direct interaction and control of 3D Slicer. This integration allows for medical image processing, scene creation, and manipulation using natural language.\n\n## Features\n\n1. list_nodes: List and filter Slicer MRML nodes and view their properties\n\n2. execute_python_code: Execute Python code in the Slicer environment\n\n## Installation\n\n### Prerequisites\n\n- 3D Slicer 5.8 or newer\n- Python 3.13 or newer\n- uv package manager\n\n**If you're on Mac, please install uv as**\n\n```bash\nbrew install uv\n```\n\n**On Windows**\n\n```bash\npowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\nand then\n\n```bash\nset Path=C:\\Users\\nntra\\.local\\bin;%Path%\n```\n\nOtherwise installation instructions are on their website: [Install uv](https://docs.astral.sh/uv/getting-started/installation/)\n\n**‚ö†Ô∏è Please install UV first**\n\n### Claude for Desktop Integration\n\nGo to Claude > Settings > Developer > Edit Config > claude_desktop_config.json to include the following:\n\n```json\n{\n  \"mcpServers\": {\n    \"slicer\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-slicer\"]\n    }\n  }\n}\n```\n\n### Cline Intergration\n\n```json\n{\n  \"mcpServers\": {\n    \"slicer\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-slicer\"]\n    }\n  }\n}\n```\n\n## Usage\n\n### Check Claude Settings\n\n<img width=\"1045\" alt=\"Image\" src=\"https://github.com/zhaoyouj/mcp-slicer/blob/main/docs/images/claude_check.png?raw=true\" />\nMake sure you see the corresponding slicer tools added to the Claude Desktop App\n\n<img width=\"300\" alt=\"Image\" src=\"https://github.com/zhaoyouj/mcp-slicer/blob/main/docs/images/toolsButton.png?raw=true\" />\n<img width=\"300\" alt=\"Image\" src=\"https://github.com/zhaoyouj/mcp-slicer/blob/main/docs/images/tools_check.png?raw=true\" />\n\n### Open Slicer Web Server\n\n1. Open the Slicer Web Server module,\n2. ensure the required interfaces are checked,\n3. then start the server\n\n<img width=\"1045\" alt=\"Image\" src=\"https://github.com/zhaoyouj/mcp-slicer/blob/main/docs/images/start_slicer_web_server.png?raw=true\" />\n\n## Examples\n\n### - list_nodes\n\n> What Markups nodes are in the Slicer scene now, list their names, what is their length if it is a line, and what is its angle if it is an angle\n\n<img width=\"1045\" alt=\"Image\" src=\"https://github.com/zhaoyouj/mcp-slicer/blob/main/docs/images/example_list_nodes_en.png?raw=true\" />\n\n### - execute python code\n\n> Draw a translucent green cube of 8 cm in the Slicer scene, mark its vertices, and then draw a red sphere inscribed in it.\n\n<img width=\"1045\" alt=\"example_code_execute_en\" src=\"https://github.com/zhaoyouj/mcp-slicer/blob/main/docs/images/example_code_execute_en.png?raw=true\" />\n\n## Technical Details\n\nUtilizes existing Slicer Web Server interfaces. For technical details, please see [Slicer web server user guide](https://slicer.readthedocs.io/en/latest/user_guide/modules/webserver.html)\n\n## Limitations & Security Considerations\n\n- The `execute_python_code` tool allows running arbitrary Python code in 3D Slicer, which is powerful but potentially dangerous.\n\n  **‚ö†Ô∏è Not recommended for production use.**\n\n- Complex operations may need to be broken down into smaller steps.\n\n## Contributing\n\nContributions are welcome! Feel free to submit Pull Requests.\n\n## Disclaimer\n\nThis is a third-party integration project, not developed by the 3D Slicer team.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "slicer",
        "python",
        "mcp",
        "mcp slicer",
        "3d slicer",
        "slicer environment"
      ],
      "category": "healthcare-and-medical"
    }
  }
}