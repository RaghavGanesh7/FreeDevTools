{
  "category": "gaming-and-game-development",
  "categoryDisplay": "Gaming and Game Development",
  "description": "",
  "totalRepositories": 26,
  "repositories": {
    "AllAboutAI-YT--mcpgame": {
      "owner": "AllAboutAI-YT",
      "name": "mcpgame",
      "url": "https://github.com/AllAboutAI-YT/mcpgame",
      "imageUrl": "/freedevtools/mcp/pfp/AllAboutAI-YT.webp",
      "description": "Multi-player control panel game featuring a virtual house environment with interactive elements like an image-generating TV and a computer terminal for accessing MCP systems. It enables real-time communication and user interaction within a detailed 3D setting.",
      "stars": 8,
      "forks": 5,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-05-15T21:59:02Z",
      "readme_content": "# MCPGame\n\nA multi-player control panel game with Node.js backend featuring a virtual house environment with interactive elements.\n\n## Features\n\n- Immersive first-person 3D virtual house with outdoor environment\n- Beautifully detailed house with interior and exterior features\n- Interactive door to enter and exit the house\n- Garden area with trees, plants, and decorative elements\n- Interactive TV with image generation capabilities\n- Computer terminal for accessing MCP systems\n- Realistic movement and collision detection\n- Real-time server communication\n\n## Setup\n\n1. Install dependencies:\n```\nnpm install\n```\n\n2. Run the server:\n```\nnpm start\n```\nOr for development with auto-restart:\n```\nnpm run dev\n```\n\nThe server will start on port 3002.\n\n## Game Controls\n\n- **Movement**: WASD keys\n- **Look around**: Mouse movement (click on game to enable)\n- **Interact**: Press ENTER when near interactive objects\n- **Exit interfaces**: ESC key\n- **Exit mouse lock**: ESC key\n\n## Interactive Elements\n\n### Outdoor Environment\n- Explore the terrain with trees and garden beds\n- Follow the path to the house entrance\n- Press ENTER when near the door to enter/exit the house\n\n### TV System\n- Approach the TV and press ENTER to access the remote control\n- Generate images that will display on the TV screen\n- Type a prompt for image generation in the terminal interface\n\n### MCP Terminal\n- Find the computer desk and press ENTER to access the terminal\n- Send commands to the MCP system\n- Access various virtual tools (email, web search, etc.)\n\n## Technical Details\n\n- Built with Three.js for 3D rendering\n- First-person camera with pointer lock controls\n- Outdoor environment with procedurally placed trees\n- Express.js server for backend communication\n- Canvas library for image generation\n- RESTful API for server communication\n\n# MCP Game Image System\n\nThis document explains how the image display system works in the MCP Game.\n\n## Overview\n\nThe system displays existing images from the `server/openai-server/public/image` directory on the TV in the virtual house. Instead of generating new images, which was causing 500 Internal Server errors, the system now checks for existing images in the specified directory.\n\n## How It Works\n\n1. The TV in the virtual house displays images that exist in the `server/openai-server/public/image` directory.\n2. The system checks for new images every 10 seconds.\n3. When a user requests a new image through the TV remote interface, the system selects a random image from the directory.\n\n## Adding New Images\n\nTo add new images to the TV:\n\n1. Place image files (jpg, jpeg, png, gif, webp) in the `server/openai-server/public/image` directory.\n2. The system will automatically detect and display them.\n3. Files should be a reasonable size for web display (recommended: 800x450 pixels).\n\n## Usage\n\n1. Approach the TV in the virtual house.\n2. Press Enter to access the TV remote control interface.\n3. Type any command related to displaying images.\n4. The system will select and display an image from the available ones in the directory.\n\n## Troubleshooting\n\n- If no images are displayed, check if the `server/openai-server/public/image` directory exists and contains image files.\n- Make sure the server is running on the correct port (default: 3002).\n- Check the browser console for any error messages related to image loading.\n\n## Technical Details\n\n- The system no longer attempts to generate images directly, avoiding the 500 Internal Server errors.\n- Images are selected randomly from the directory when requested.\n- The system provides appropriate feedback when no images are available.\n\n# Connecting to MCP Backend Server\n\nThe MCPGame can connect to an external MCP Backend Server to enable advanced AI functionality for the terminal and TV interactions.\n\n## Configuration\n\n1. Open the `main.js` file and locate the configuration section at the top:\n\n```javascript\n// --- Configuration ---\nconst MCP_BACKEND_URL = 'http://localhost:3001'; // MCP Terminal backend connection\nconst IMAGE_SERVER_URL = 'http://localhost:3002'; // Image server connection\n```\n\n2. Update the `MCP_BACKEND_URL` to point to your MCP Backend Server:\n   - For local development: `http://localhost:PORT` (replace PORT with your backend port)\n   - For production: Use the full URL to your deployed backend server\n\n## Required API Endpoints\n\nYour MCP Backend Server should implement these endpoints:\n\n1. `GET /api/status` - Returns the status of the MCP system\n2. `POST /api/query` - Accepts user queries and returns AI responses\n\n## Response Format\n\nThe query endpoint should return JSON in this format:\n\n```json\n{\n  \"response\": \"Text to display in the terminal\",\n  \"spokenResponse\": \"Optional text for voice synthesis\" \n}\n```\n\n## Testing the Connection\n\n1. Start your MCP Backend Server\n2. Start the MCPGame server (`node server.js`)\n3. Open the game in a browser\n4. Interact with the computer terminal in the virtual house\n5. The game will connect to your MCP Backend Server when you use the terminal ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gaming",
        "mcpgame",
        "interactive",
        "gaming game",
        "virtual house",
        "panel game"
      ],
      "category": "gaming-and-game-development"
    },
    "ErgodicLabs--TwoTruthsAndATwist": {
      "owner": "ErgodicLabs",
      "name": "TwoTruthsAndATwist",
      "url": "https://github.com/ErgodicLabs/TwoTruthsAndATwist",
      "imageUrl": "/freedevtools/mcp/pfp/ErgodicLabs.webp",
      "description": "Engage in a trivia game by identifying the false statement among two truths, facilitated by AI for unique gameplay experiences. The server supports interactive rounds, enhancing the fun of trivia quizzes.",
      "stars": 5,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-13T19:05:07Z",
      "readme_content": "# TwoTruthsAndATwist\n\nTwo Truths and a Twist: The world's first Model Context Protocol (MCP) game\n\n[![smithery badge](https://smithery.ai/badge/@ErgodicLabs/twotruthsandatwist)](https://smithery.ai/server/@ErgodicLabs/twotruthsandatwist)\n\n[Game design document](https://docs.google.com/document/d/1kW88UU5bjszQJgyB_JNkpvbnfaSNcKIP4mRR3R-HL1o/edit?usp=sharing)\n\n## Installation\n\n### Installing via Smithery\n\nTo install twotruthsandatwist for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@ErgodicLabs/twotruthsandatwist):\n\n```bash\nnpx -y @smithery/cli install @ErgodicLabs/twotruthsandatwist --client claude\n```\n\n### Requirements\n- Python 3.13 or higher\n- MCP-compatible LLM (like Claude 3)\n\nYou can install the game directly from PyPI:\n\n```bash\npip install ttaat\n```\n\nOr if you prefer using `uv`:\n\n```bash\nuv pip install ttaat\n```\n\n## Usage\n\n### Initialize the Database\nFirst, initialize the game database:\n\n```bash\nttaat db upgrade\n```\n\n### Start the Game Server\nTo start the MCP server:\n\n```bash\nttaat serve\n```\n\nThis will start the Two Truths and a Twist MCP server, which LLMs can connect to for playing the game.\n\n### View Game Statistics\nTo see game statistics:\n\n```bash\nttaat db stats\n```\n\n## Connecting to the Server\n\nTo connect an MCP-compatible LLM to the game server, you'll need to configure the MCP connection. Create a configuration file (e.g., `claude_desktop_config.json`) with the following content:\n\n```json\n{\n  \"mcpServers\": {\n    \"TwoTruthsAndATwist\": {\n      \"command\": \"ttaat\",\n      \"args\": [\"serve\"]\n    }\n  }\n}\n```\n\nFor Claude Desktop, place this file in:\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n- Linux: `~/.config/Claude/claude_desktop_config.json`\n\n## Game Mechanics\n\nTwo Truths and a Twist is a trivia game where:\n\n1. The AI creates a round with three statements about a topic - two truths and one \"twist\" (a playful, false statement)\n2. Players try to identify which statement is the twist \n3. The AI reveals the answer with entertaining explanations\n\nThe game leverages the MCP protocol to provide a fun, interactive trivia experience where AI models both generate the content and facilitate gameplay.\n\n## Example Prompts\n\nOnce connected to an MCP-enabled LLM, you can start a game with prompts like:\n\n```\nLet's play Two Truths and a Twist! Create a round about space exploration.\n```\n\n```\nCreate a game round about ancient civilizations.\n```\n\n## For Developers\n\nThis package implements an MCP server that provides custom game tools:\n- `create_round`: Creates a new game round with a question and three statements\n- `submit_guess`: Lets players submit their guess for which statement is the twist\n- `reveal_twist`: Reveals the answer with explanations for each statement\n- `get_round`: Retrieves details for a specific round\n- `get_last_round`: Gets details of the most recent round\n- `get_stats`: Retrieves game statistics\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twotruthsandatwist",
        "gameplay",
        "quizzes",
        "trivia quizzes",
        "engage trivia",
        "unique gameplay"
      ],
      "category": "gaming-and-game-development"
    },
    "MubarakHAlketbi--game-asset-mcp": {
      "owner": "MubarakHAlketbi",
      "name": "game-asset-mcp",
      "url": "https://github.com/MubarakHAlketbi/game-asset-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/MubarakHAlketbi.webp",
      "description": "Generates 2D and 3D game assets from text prompts using AI models. Integrates with Hugging Face Spaces for asset generation, facilitating rapid prototyping for game developers.",
      "stars": 85,
      "forks": 20,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-21T17:45:58Z",
      "readme_content": "# Game Asset Generator using MCP and Hugging Face Spaces\n\nThis project is an innovative tool that simplifies game asset creation by leveraging AI-powered generation. Whether you're a game developer seeking rapid prototypes or an AI enthusiast exploring generative models, this tool enables you to create **2D** and **3D game assets** from text prompts effortlessly. It integrates AI models from **Hugging Face Spaces**—powered by `\"gokaygokay/Flux-2D-Game-Assets-LoRA\"`, `\"gokaygokay/Flux-Game-Assets-LoRA-v2\"`, and one of three 3D model generation spaces (`InstantMesh`, `Hunyuan3D-2`, or `Hunyuan3D-2mini-Turbo`, which you must duplicate to your account)—and uses the **Model Context Protocol (MCP)** for seamless interaction with AI assistants like **Claude Desktop**.\n\n<p align=\"center\">\n  <a href=\"https://pay.ziina.com/MubarakHAlketbi\">\n    <img src=\"https://img.shields.io/badge/Support_Me-Donate-9626ff?style=for-the-badge&logo=https%3A%2F%2Fimgur.com%2FvwC39JY\" alt=\"Support Me - Donate\">\n  </a>\n  <a href=\"https://github.com/RooVetGit/Roo-Code\">\n    <img src=\"https://img.shields.io/badge/Built_With-Roo_Code-412894?style=for-the-badge\" alt=\"Built With - Roo Code\">\n  </a>\n  <br>\n  <a href=\"https://glama.ai/mcp/servers/@MubarakHAlketbi/game-asset-mcp\">\n    <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@MubarakHAlketbi/game-asset-mcp/badge\" />\n  </a>\n</p>\n\n---\n\n## Table of Contents\n\n1. [Project Overview](#project-overview)\n2. [Features](#features)\n3. [How It Works](#how-it-works)\n4. [Prerequisites](#prerequisites)\n5. [Installation](#installation)\n6. [Usage](#usage)\n7. [Configuration](#configuration)\n8. [File Management](#file-management)\n9. [MCP Integration](#mcp-integration)\n10. [Troubleshooting](#troubleshooting)\n11. [Advanced](#advanced)\n12. [Contributing](#contributing)\n13. [License](#license)\n\n---\n\n## Project Overview\n\nThe **Game Asset Generator** (version **0.3.0**) harnesses AI to streamline the creation of game assets. It supports generating **2D assets** (e.g., pixel art sprites) and **3D assets** (e.g., OBJ and GLB models) from text prompts, integrating with **Hugging Face Spaces** and the **Model Context Protocol (MCP)**. This release introduces support for multiple 3D model generation spaces—`InstantMesh`, `Hunyuan3D-2`, and `Hunyuan3D-2mini-Turbo`—offering flexibility and enhanced performance. Built with **Node.js** and the **MCP TypeScript SDK (v1.7.0)**, it provides a robust, cross-platform solution for asset generation.\n\n---\n\n## Features\n\n- **2D Asset Generation**: Create pixel art, sprites, or other 2D assets from text prompts (e.g., \"pixel art sword\").\n- **3D Asset Generation**: Generate 3D models (OBJ and GLB formats) from text descriptions, with automatic image-to-model conversion.\n- **Multiple 3D Model Spaces**: Supports `InstantMesh`, `Hunyuan3D-2`, and `Hunyuan3D-2mini-Turbo` for varied 3D generation workflows.\n- **MCP Integration**: Seamlessly interact with the tool via MCP-compatible clients like **Claude Desktop**.\n- **File Management**: Automatically saves and organizes assets in a local `assets` directory with resource URIs (e.g., `asset://{type}/{id}`).\n- **Robust Input Validation**: Uses **Zod** for secure and reliable input processing.\n- **Multi-Client Support**: Handles multiple simultaneous connections via **SSE transport**.\n- **Secure Remote Access**: Optional **HTTPS** support for safe remote communication.\n- **Extensible Backend**: Modular design for easy integration of new models or features.\n- **Cross-Platform**: Compatible with Windows, macOS, and Linux using **Node.js**.\n- **Configurable 3D Generation**: Customize parameters like inference steps, guidance scale, and turbo mode via environment variables.\n\n---\n\n## How It Works\n\nThe Game Asset Generator transforms text prompts into game-ready assets through an automated pipeline:\n\n1. **User Input**: Submit a text prompt (e.g., \"pixel art sword\" or \"isometric 3D castle\").\n2. **MCP Server**: Routes the prompt to the appropriate tool (`generate_2d_asset` or `generate_3d_asset`).\n3. **AI Model Interaction**:\n   - **2D Assets**: Utilizes the **Hugging Face Inference API** with `\"gokaygokay/Flux-2D-Game-Assets-LoRA\"` (50 steps).\n   - **3D Assets**:\n     - Generates an initial image using `\"gokaygokay/Flux-Game-Assets-LoRA-v2\"` (30 steps).\n     - Converts the image to a 3D model using one of:\n       - **InstantMesh**: Multi-step process (`/preprocess`, `/generate_mvs`, `/make3d`).\n       - **Hunyuan3D-2**: Single-step process (`/generation_all`).\n       - **Hunyuan3D-2mini-Turbo**: Single-step process (`/generation_all`) with configurable turbo modes.\n4. **File Output**: Saves assets (PNG for 2D, OBJ/GLB for 3D) in the `assets` directory.\n5. **Response**: Returns resource URIs (e.g., `asset://3d_model/filename.glb`) for immediate use.\n\n### Workflow Diagram\n```\nUser Prompt → MCP Server → AI Model(s) → Local File → Resource URI Response\n```\n\nPrompts are automatically enhanced with \"high detailed, complete object, not cut off, white solid background\" for optimal quality.\n\n---\n\n## Prerequisites\n\n- **Node.js**: Version 16+ (includes `npm`).\n- **Git**: For cloning the repository.\n- **Internet Access**: Required for Hugging Face API connectivity.\n- **Hugging Face Account**: Needed for API access; obtain your token from [huggingface.co/settings/tokens](https://huggingface.co/settings/tokens).\n- **NPM Packages**:\n  - `@gradio/client`: Interacts with Hugging Face Spaces.\n  - `@huggingface/inference`: For direct model inference.\n  - `@modelcontextprotocol/sdk`: Implements the MCP server.\n  - `dotenv`: Loads environment variables.\n  - `express`: Enables SSE transport.\n  - `zod`: Ensures input validation.\n  - `sharp`: Handles image processing.\n- **Optional**: **Claude Desktop** (or another MCP client) for enhanced interaction.\n\n---\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/yourusername/game-asset-mcp.git\n   cd game-asset-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n3. **Configure Environment**:\n   - Copy the example `.env` file:\n     ```bash\n     cp .env.example .env\n     ```\n   - Edit `.env` with your **Hugging Face API token** and duplicated **MODEL_SPACE**. See [Configuration](#configuration) for details.\n\n4. **Run the Server**:\n   - **Local (stdio transport)**:\n     ```bash\n     npm start\n     ```\n   - **Custom Working Directory**:\n     ```bash\n     node src/index.js /path/to/directory\n     ```\n   - **Remote (SSE transport)**:\n     ```bash\n     node src/index.js --sse\n     ```\n   - **Remote with HTTPS**:\n     ```bash\n     node src/index.js --sse --https\n     ```\n     Requires `ssl/key.pem` and `ssl/cert.pem` (see [ssl/README.md](ssl/README.md)).\n\n> **Note**: Uses ES modules (`\"type\": \"module\"` in `package.json`). Ensure Node.js 16+ is installed (`node --version`).\n\n---\n\n## Usage\n\nInteract with the server via an **MCP client** (e.g., Claude Desktop) or programmatically:\n\n- **Generate a 2D Asset**:\n  - **Command**: `generate_2d_asset prompt:\"pixel art sword\"`\n  - **Output**: Saves a PNG file (e.g., `2d_asset_generate_2d_asset_1698765432.png`) and returns its URI.\n\n- **Generate a 3D Asset**:\n  - **Command**: `generate_3d_asset prompt:\"isometric 3D castle\"`\n  - **Output**: Saves OBJ/GLB files and intermediate images, returning their URIs. Provides an operation ID for long-running tasks.\n\n### Prompt Examples\n- **Natural Interaction**:\n  - `generate_2d_sprite prompt:\"pixel art sword\"`\n  - `generate_3d_model prompt:\"isometric 3D castle\"`\n\n### With Claude Desktop\nAfter configuring (see [Configuration](#configuration)), type commands directly in the interface.\n\n---\n\n## Configuration\n\nCustomize the server via the `.env` file:\n\n### Required Settings\n- **HF_TOKEN**: Hugging Face API token.\n  ```plaintext\n  HF_TOKEN=your_hf_token\n  ```\n- **MODEL_SPACE**: Your duplicated 3D model space (e.g., `your-username/InstantMesh`).\n  - Duplicate one of:\n    - [InstantMesh](https://huggingface.co/spaces/tencentARC/InstantMesh)\n    - [Hunyuan3D-2](https://huggingface.co/spaces/tencent/Hunyuan3D-2)\n    - [Hunyuan3D-2mini-Turbo](https://huggingface.co/spaces/tencent/Hunyuan3D-2mini-Turbo)\n  ```plaintext\n  MODEL_SPACE=your-username/InstantMesh\n  ```\n\n### Optional 3D Model Settings\n| Variable                  | Description                                   | Valid Range/Default       |\n|---------------------------|-----------------------------------------------|---------------------------|\n| `MODEL_3D_STEPS`         | Inference steps                              | Varies by space (see below) |\n| `MODEL_3D_GUIDANCE_SCALE`| How closely the model follows the prompt     | 0.0-100.0 (default: 5.0-5.5) |\n| `MODEL_3D_OCTREE_RESOLUTION` | Detail level of the 3D model            | Varies by space (see below) |\n| `MODEL_3D_SEED`          | Randomness control                          | 0-10000000 (default: varies) |\n| `MODEL_3D_REMOVE_BACKGROUND` | Remove image background                | `true`/`false` (default: `true`) |\n| `MODEL_3D_TURBO_MODE`    | Generation mode (Hunyuan3D-2mini-Turbo only) | `Turbo`, `Fast`, `Standard` (default: `Turbo`) |\n| `MODEL_SPACE_TYPE`       | Override space type detection               | `instantmesh`, `hunyuan3d`, `hunyuan3d_mini_turbo` |\n\n#### Space-Specific Defaults\n- **InstantMesh**:\n  - Steps: 30-75 (default: 75)\n  - Seed: Default 42\n- **Hunyuan3D-2**:\n  - Steps: 20-50 (default: 20)\n  - Guidance Scale: Default 5.5\n  - Octree Resolution: `256`, `384`, `512` (default: `256`)\n  - Seed: Default 1234\n- **Hunyuan3D-2mini-Turbo**:\n  - Steps: 1-100 (default: 5 for `Turbo`, 10 for `Fast`, 20 for `Standard`)\n  - Guidance Scale: Default 5.0\n  - Octree Resolution: 16-512 (default: 256)\n  - Seed: Default 1234\n\n### Transport Settings\n- **PORT**: SSE transport port (default: 3000).\n  ```plaintext\n  PORT=3000\n  ```\n\n### Claude Desktop Setup\nEdit the config file:\n- **MacOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n```json\n{\n  \"mcpServers\": {\n    \"game-asset-generator\": {\n      \"command\": \"node\",\n      \"args\": [\"/full/path/to/game-asset-mcp/src/index.js\"]\n    }\n  }\n}\n```\nRestart Claude Desktop after editing.\n\n---\n\n## File Management\n\n- **Storage Location**: Assets are saved in `./assets` within the working directory.\n- **Naming Convention**: Files use a prefix, tool name, timestamp, and unique ID (e.g., `2d_asset_generate_2d_asset_1698765432_abcd1234.png`).\n- **Customization**: Set a custom directory:\n  ```bash\n  node src/index.js /path/to/custom/directory\n  ```\n- **Resource Access**: Use MCP URIs (e.g., `asset://2d_asset/filename.png`) to list or read assets.\n\n---\n\n## MCP Integration\n\nThe **Model Context Protocol (MCP)** enables this tool to serve AI clients securely:\n- **Tools**: `generate_2d_asset`, `generate_3d_asset`.\n- **Resources**: Managed via `asset://` URIs.\n- **Prompts**: `generate_2d_sprite`, `generate_3d_model`.\n- **Compatibility**: Works with **Claude Desktop** and other MCP clients.\n\n---\n\n## Troubleshooting\n\n- **API Errors**: Check network connectivity or rate limits; review `./logs/server.log`.\n- **Authentication Issues**: Verify `HF_TOKEN` and `MODEL_SPACE` in `.env`.\n- **ES Modules Error**: Ensure Node.js 16+ (`node --version`).\n- **Logs**: Inspect detailed logs:\n  ```bash\n  tail -f ./logs/server.log\n  ```\n\n---\n\n## Advanced\n\n### API Endpoints and Integration\n- **2D Asset Generation**: Uses `\"gokaygokay/Flux-2D-Game-Assets-LoRA\"` (50 steps).\n- **3D Asset Image Generation**: Uses `\"gokaygokay/Flux-Game-Assets-LoRA-v2\"` (30 steps).\n- **3D Model Conversion**:\n  - **InstantMesh**: Multi-step (`/check_input_image`, `/preprocess`, `/generate_mvs`, `/make3d`).\n  - **Hunyuan3D-2**: Single-step (`/generation_all`).\n  - **Hunyuan3D-2mini-Turbo**: Single-step (`/generation_all`) with turbo modes.\n\n### Versioning\n- **Current Version**: 0.3.0 (Added Hunyuan3D-2mini-Turbo support).\n- **MCP SDK Version**: 1.7.0.\n- **Format**: MAJOR.MINOR.PATCH (SemVer).\n\n### Backend Architecture\n- **Core File**: `src/index.js`.\n- **Dependencies**: See `package.json`.\n- **Security**: Zod validation, path traversal prevention, HTTPS support, rate limiting.\n- **Performance**: Async processing, retry with backoff, GPU quota handling.\n\n---\n\n## Contributing\n\nWe welcome contributions! To participate:\n1. **Fork the Repository**: Create your copy on GitHub.\n2. **Make Changes**: Add features, fix bugs, or enhance docs.\n3. **Submit a Pull Request**: Detail your changes.\n4. **Open Issues**: Report bugs or suggest improvements.\n\nFollow standard coding conventions and include tests where applicable.\n\n---\n\n## License\n\nLicensed under the **MIT License**. See the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "prototyping",
        "gaming",
        "game assets",
        "game asset",
        "game development"
      ],
      "category": "gaming-and-game-development"
    },
    "Saunved--mcp-server-clash-of-clans": {
      "owner": "Saunved",
      "name": "mcp-server-clash-of-clans",
      "url": "https://github.com/Saunved/mcp-server-clash-of-clans",
      "imageUrl": "/freedevtools/mcp/pfp/Saunved.webp",
      "description": "Obtain and analyze player and clan statistics from Clash of Clans to gain insights into war performance and strategies for gameplay improvement.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-04-25T22:20:18Z",
      "readme_content": "[![MseeP Badge](https://mseep.net/pr/saunved-mcp-server-clash-of-clans-badge.jpg)](https://mseep.ai/app/saunved-mcp-server-clash-of-clans)\n\nClash of Clans MCP server!\n\nFor usage with Claude Desktop, you can update the `claude_desktop_config.json` file to register this server.\n\n```json\n{\n    \"mcpServers\": {\n        \"Clash of Clans\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"-y\",\n                \"mcp-server-clash-of-clans\"\n            ],\n            \"env\": {\n                \"CLASH_API_KEY\": \"<your-api-key>\"\n            }\n        }\n    }\n}\n```\n\n# Available tools\n\n## get-player\nObtains information for a given player tag and summarizes it.\n\n## get-clan\nObtains information for a given clan and summarizes it.\n\n## clan-war-league-info\nObtains information about the most recent CWL rounds.\n\n## clan-war-league-war\nObtains information about a specific CWL war based on the round.\n\n## get-current-war\nGets the current war info for the clan (provided it is public).\n\n## get-war-log\nGets a clan's war log (provided it is public).\n\n## get-capital-raids\nGets information regarding the clan's capital raids.\n\n# Available prompts\n\n## analyze-current-war\nAnalyzes the current war. Provides an overview with the stats, top-performers, and potential strategy changes.\n\n## analyze-war-log\nAnalyzes a clan's war log and summarizes its overall performance.\n\n## analyze-cwl-war\nAnalyzes a given CWL war and summarizes the clan's overall performance in that war.\n\n## analyze-player\nAnalyzes a player's statistics and suggests scope for improvement.\n\n## analyze-clan\nAnalyzes a given clan and assesses it based on the members, their TH levels, war record, etc.\n\n## analyze-capital-raids\nAnalyzes a clan's last few capital raids (3 by default).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "clans",
        "clan",
        "clash",
        "clash clans",
        "clan statistics",
        "player clan"
      ],
      "category": "gaming-and-game-development"
    },
    "StevenFengLi--haiguitangmcp": {
      "owner": "StevenFengLi",
      "name": "haiguitangmcp",
      "url": "https://github.com/StevenFengLi/haiguitangmcp",
      "imageUrl": "/freedevtools/mcp/pfp/StevenFengLi.webp",
      "description": "Host interactive lateral thinking puzzle games by utilizing a large language model as the game master. Retrieve puzzle lists, access detailed puzzles, and implement game rules for solo or group gameplay with guided hints.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-04-21T12:03:30Z",
      "readme_content": "## 介绍\r\n\r\n本项目旨在让大语言模型扮演海龟汤游戏主持人，使你独自一人也能享受海龟汤游戏的快乐。\r\n\r\n## 快速开始\r\n\r\n在使用本项目前，你需要确保你的电脑上已经安装了Python和uv。\r\n\r\n\r\n你首先需要克隆整个项目，然后运行uv sync安装依赖。\r\n\r\n```bash\r\ngit clone https://github.com/wangyafu/haiguitangmcp/\r\ncd haiguitangmcp\r\nuv sync\r\n```\r\n\r\n其次，你需要修改配置文件（假设你将项目安装在了E盘）\r\n\r\n### 在vscode中配置\r\n\r\n```json\r\n\"mcp\":{\r\n    \"servers\":{\r\n        \"haiguitang-mcp\": {\r\n                \"type\": \"stdio\",\r\n                \"command\": \"uv\",\r\n                \"args\": [\r\n                    \"--directory\",\r\n                    \"E:\\\\haiguitangmcp\\\\haiguitang_mcp\",\r\n                    \"run\",\r\n                    \"server.py\"\r\n                ]\r\n            }\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\n### 在cherry studio中进行配置\r\n\r\n```json\r\n\"mcpServers\": {\r\n    \r\n    \"haiguitang\": {\r\n      \"isActive\": true,\r\n      \"name\": \"海龟汤MCP服务器\",\r\n      \"description\": \"和用户玩海龟汤\",\r\n      \"registryUrl\": \"\",\r\n      \"command\": \"uv\",\r\n      \"args\": [\r\n        \"--directory\",\r\n        \"E:/haiguitangmcp/haiguitang_mcp\",\r\n        \"run\",\r\n        \"server.py\"\r\n      ]\r\n    },\r\n   \r\n}\r\n\r\n```\r\n\r\n上述的\"E:/haiguitangmcp/haiguitang_mcp\"表示server.py所在的路径。\r\n\r\n在其他mcp client中的配置方法类似。\r\n\r\n## mcp相关内容\r\n\r\n本项目提供了三个工具:\r\n\r\n- `get_prompt`: 获取海龟汤游戏的完整玩法说明\r\n- `get_puzzle`: 获取一个特定谜题的完整内容，需要提供谜题标题作为参数\r\n- `list_puzzles_tool`: 列出所有可用的谜题列表\r\n\r\n同时，本项目还提供了以下资源:\r\n\r\n- `puzzles://{puzzle_title}`: 获取特定谜题的信息\r\n\r\n以及一个提示模板:\r\n\r\n- `game_rules`: 提供海龟汤游戏规则的提示模板\r\n\r\n## 游戏规则\r\n\r\n在本游戏中：\r\n\r\n- 海龟汤是一种情景推理游戏，谜题本身并没有很强的逻辑性，注重能否发现关键线索重现情景\r\n- 出题人提出一个看似不合常理的问题和情景（谜面），猜题者通过提问缩小范围并最终揭示完整故事情节（谜底）\r\n- 猜题者可以提出任何问题，出题人主要用\"是\"、\"不是\"、\"是也不是\"或\"没有关系\"来回答\r\n- 当问题中既有对的地方也有不对的地方时，出题人会回答\"是也不是\"\r\n- 当问题与谜题核心情节无关时，出题人会回答\"没有关系\"\r\n- 猜题者可以通过在消息开头加上\"汤底\"来尝试描述完整情景\r\n- 当猜题者掌握了关键线索时，出题人会提醒猜题者归纳线索，形成对谜底的完整描述\r\n- 猜题者可以请求引导和提示，出题人会给予尚未掌握的线索\r\n- 当猜题者的描述大致包含了谜题的关键情景时，出题人会确认\"完全正确\"\r\n\r\n\r\n### 小技巧\r\n\r\n- 从基本问题开始，如谜题涉及人数、死者的死因等。\r\n- 注意谜面中的每一个细节，它们可能是关键线索\r\n- 当你感到困惑时，尝试从不同角度思考问题\r\n- 记录已经确认的线索，以便归纳整理\r\n\r\n## 关于谜题\r\n\r\n目前本项目已经提供了35个谜题。\r\n本人曾开发[海龟汤模拟器](https://www.hgtang.com)，该网站有评分功能。目前的35个谜题来自于我和一些热心用户为该网站搜集的谜题。依据该网站上各谜题的评分，推荐游玩的谜题如下：\r\n\r\n- 忠诚的狗\r\n- 100元钱\r\n- 爱犬\r\n- 治病\r\n- 祭日\r\n- 电梯里的人\r\n- 延迟死亡\r\n- 生意\r\n- 裤子破了\r\n- 要好的朋友\r\n\r\n欢迎你为本项目贡献更多的谜题。你可以在haiguitang_mcp/puzzles文件夹中加入新的谜题文件然后发起Pull Request。\r\n\r\n注意：\r\n\r\n- 如果你希望用户游玩之前有所预警，你可以在标题，也就是谜题文件的名称中注明。\r\n- 请注意海龟汤的版权问题。\r\n- 你可以在海龟汤文件中添加作者和提交者信息。\r\n\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gameplay",
        "games",
        "interactive",
        "puzzle games",
        "implement game",
        "gameplay guided"
      ],
      "category": "gaming-and-game-development"
    },
    "TSavo--Unity-MCP": {
      "owner": "TSavo",
      "name": "Unity-MCP",
      "url": "https://github.com/TSavo/Unity-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/TSavo.webp",
      "description": "Enable interaction between AI assistants and Unity game environments through a standardized interface for tasks such as executing C# code, inspecting game objects, analyzing scenes, running tests, and modifying game state at runtime.",
      "stars": 3,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-02T13:58:24Z",
      "readme_content": "# Unity-MCP\n\nA bridge between Unity and AI assistants using the Model Context Protocol (MCP).\n\n## Overview\n\nUnity-MCP is an open-source implementation of the Model Context Protocol for Unity game development. It enables AI assistants to interact with Unity game environments through a standardized interface, allowing for AI-assisted game development, automated testing, scene analysis, and runtime debugging.\n\n### Architecture\n\nThe architecture has been simplified to use AILogger for persistence, removing the need for a separate server component:\n\n```\nAI Assistant <-> Unity-MCP STDIO Client <-> Unity Client <-> AILogger\n```\n\n- **AI Assistant**: Communicates with the Unity-MCP STDIO Client using the MCP protocol\n- **Unity-MCP STDIO Client**: Forwards commands to the Unity Client and stores results in AILogger\n- **Unity Client**: Executes commands in Unity and returns results\n- **AILogger**: Stores logs and results for later retrieval\n\nThe Unity-MCP STDIO Client communicates directly with the Unity Client, which provides endpoints for both code execution and queries. The query tool transforms queries into code execution by wrapping them in a `return` statement.\n\n## Features\n\n- Execute C# code in the Unity runtime environment\n- Inspect game objects and their components\n- Analyze scene hierarchies and structures\n- Run tests and receive results\n- Invoke methods on game objects and components\n- Modify game state during runtime\n\n## Deployment Options\n\n- Unity Editor Extension: An Editor extension that persists beyond game execution cycles\n- Docker Container: A containerized version that communicates with Unity over the network\n- NPX Package: A Node.js package that can be installed and run via NPX\n\n## Documentation\n\n- [MCP Architecture](docs/mcp-architecture.md): Overview of the MCP architecture and namespaces\n- [MCP STDIO Client](docs/mcp-stdio-client.md): Information about the MCP STDIO client and its logging capabilities\n- [Query Tool](docs/query-tool.md): Detailed information about the query tool and how it works\n- [AILogger Integration](docs/ai-logger-sdk.md): Detailed information about the AILogger integration\n- [API Reference](docs/api-reference.md): Detailed information about the API endpoints\n- [Installation Guide](docs/installation.md): Step-by-step instructions for installing and setting up Unity-MCP\n- [Development Guide](docs/development.md): Information about the development environment and workflow\n- [Hot Reloading Guide](docs/hot-reloading.md): Detailed information about hot reloading in the development environment\n- [Hot Reloading Quick Reference](docs/hot-reloading-quick-reference.md): Quick reference guide for hot reloading commands and tips\n- [Contributing Guide](docs/contributing-guide.md): Guidelines for contributing to the project\n\n## Getting Started\n\nTo get started with Unity-MCP, follow these steps:\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/TSavo/Unity-MCP.git\n   cd Unity-MCP\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n\n4. Start the MCP STDIO client:\n   ```bash\n   npm start\n   ```\n\n   This will start the MCP STDIO client that communicates with Unity and uses AILogger for persistence.\n\n   Note: Make sure AILogger is running on http://localhost:3030 or set the AI_LOGGER_URL environment variable to point to your AILogger instance.\n\n5. Run tests:\n   ```bash\n   # Run all tests\n   npm test\n\n   # Run only unit tests\n   npm run test:unit\n\n   # Run only e2e tests\n   npm run test:e2e\n\n   # Run tests with a specific pattern\n   npm test -- --testNamePattern=\"should return the server manifest\"\n   npm run test:unit -- --testNamePattern=\"should return the server manifest\"\n   npm run test:e2e -- --testNamePattern=\"should discover the test server\"\n   ```\n\nFor more detailed instructions, see the [Installation Guide](docs/installation.md).\n\n## Connecting to AI Assistants\n\nTo connect the Unity-MCP bridge to an AI assistant, you need to create an MCP configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"unity-ai-bridge\": {\n      \"url\": \"http://localhost:8080/sse\"\n    }\n  }\n}\n```\n\nPlace this file in the appropriate location for your AI assistant. For Claude, this would typically be in the Claude Desktop app's configuration directory.\n\n### Available Tools\n\nThe Unity-MCP bridge provides the following tools:\n\n1. **execute_code**: Execute C# code directly in Unity.\n2. **query**: Execute a query using dot notation to access objects, properties, and methods.\n3. **get_logs**: Retrieve logs from AILogger.\n4. **get_log_by_name**: Retrieve a specific log from AILogger.\n\n## Usage Examples\n\n### Executing Code in Unity\n\nYou can execute C# code in Unity using the `execute_code` tool. The code will be executed in the Unity runtime environment, and the result will be stored in AILogger for later retrieval.\n\n#### JSON-RPC Request\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"execute_code\",\n    \"arguments\": {\n      \"code\": \"Debug.Log(\\\"Hello from Unity!\\\"); return GameObject.FindObjectsOfType<GameObject>().Length;\",\n      \"timeout\": 5000\n    }\n  }\n}\n```\n\n#### JSON-RPC Response\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"{\\\"status\\\":\\\"success\\\",\\\"logName\\\":\\\"unity-execute-1712534400000\\\",\\\"result\\\":{\\\"success\\\":true,\\\"result\\\":42,\\\"logs\\\":[\\\"Hello from Unity!\\\"],\\\"executionTime\\\":123}}\"\n      }\n    ]\n  }\n}\n```\n\n### Querying Unity Objects\n\nYou can query Unity objects using the `query` tool. This allows you to access objects, properties, and methods using dot notation.\n\n#### JSON-RPC Request\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"query\",\n    \"arguments\": {\n      \"query\": \"Camera.main.transform.position\",\n      \"timeout\": 5000\n    }\n  }\n}\n```\n\n#### JSON-RPC Response\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"{\\\"status\\\":\\\"success\\\",\\\"logName\\\":\\\"unity-query-1712534400000\\\",\\\"result\\\":{\\\"success\\\":true,\\\"result\\\":{\\\"x\\\":0,\\\"y\\\":1,\\\"z\\\":-10},\\\"executionTime\\\":45}}\"\n      }\n    ]\n  }\n}\n```\n\n### Retrieving Results from AILogger\n\nYou can retrieve the results of previous operations from AILogger using the `get_log_by_name` tool.\n\n#### JSON-RPC Request\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_log_by_name\",\n    \"arguments\": {\n      \"log_name\": \"unity-execute-1712534400000\",\n      \"limit\": 1\n    }\n  }\n}\n```\n\n#### JSON-RPC Response\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"{\\\"status\\\":\\\"success\\\",\\\"name\\\":\\\"unity-execute-1712534400000\\\",\\\"entries\\\":[{\\\"id\\\":\\\"123e4567-e89b-12d3-a456-426614174000\\\",\\\"name\\\":\\\"unity-execute-1712534400000\\\",\\\"data\\\":{\\\"result\\\":{\\\"success\\\":true,\\\"result\\\":42,\\\"logs\\\":[\\\"Hello from Unity!\\\"],\\\"executionTime\\\":123},\\\"timestamp\\\":\\\"2025-04-08T00:00:00.000Z\\\"},\\\"timestamp\\\":\\\"2025-04-08T00:00:00.000Z\\\"}]}\"\n      }\n    ]\n  }\n}\n```\n\n### Example Usage\n\nOnce the AI assistant has access to the Unity tool, you can ask it to perform tasks like:\n\n```\nCan you execute the following C# code in Unity?\n\nGameObject.Find(\"Player\").transform.position = new Vector3(0, 1, 0);\n```\n\n## License\n\nMIT\n\n## Author\n\nT Savo ([@TSavo](https://github.com/TSavo))\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "unity",
        "tsavo",
        "unity mcp",
        "ai assistants",
        "assistants unity"
      ],
      "category": "gaming-and-game-development"
    },
    "TeglonLabs--coin-flip-mcp": {
      "owner": "TeglonLabs",
      "name": "coin-flip-mcp",
      "url": "https://github.com/TeglonLabs/coin-flip-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/TeglonLabs.webp",
      "description": "Generates true random coin flips using random.org's randomness API with configurable sides, allowing for outcomes like 'Heads', 'Tails', or custom sides for n-sided flips.",
      "stars": 0,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-16T01:31:45Z",
      "readme_content": "# Coin Flip MCP Server\n\nAn MCP server that provides true random coin flips using random.org's randomness API. This server demonstrates the Model Context Protocol by providing a tool for generating random outcomes with configurable sides.\n\n## Features\n\n### Tools\n- `flip_coin` - Flip a coin with configurable number of sides\n  - Optional `sides` parameter (default: 2)\n  - Uses true randomness from random.org\n  - Special handling for edge cases (0, 1, or negative sides)\n  - For 2 sides: Returns \"Heads\" or \"Tails\"\n  - For 3 sides: Returns \"Heads\", \"Tails\", or \"_\"\n  - For n>3 sides: Returns \"It landed on side X\"\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`  \nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"coin-flip\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-coin-flip\"]\n    }\n  }\n}\n```\n\n## Example Usage\n\nOnce connected to an MCP client like Claude Desktop, you can use natural language to interact with the coin flip tool. For example:\n\n- \"Flip a coin\"\n- \"Roll a 6-sided die\"\n- \"Give me a random number between 1 and 20\"\n\nThe server will use true randomness from random.org to generate the result.\n\n## Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector):\n\n```bash\nnpx @modelcontextprotocol/inspector node build/index.js\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "randomness",
        "random",
        "flips",
        "random coin",
        "flip mcp",
        "coin flips"
      ],
      "category": "gaming-and-game-development"
    },
    "awayzo--rpg": {
      "owner": "awayzo",
      "name": "rpg",
      "url": "https://github.com/awayzo/rpg",
      "imageUrl": "/freedevtools/mcp/pfp/awayzo.webp",
      "description": "A browser-based multiplayer RPG that facilitates empire expansion, strategic battles, and resource management among players. It supports the creation and sharing of platformer mini-games, offering rewards and robust community management features.",
      "stars": 1,
      "forks": 0,
      "license": "GNU General Public License v3.0",
      "language": "",
      "updated_at": "2025-07-28T16:52:02Z",
      "readme_content": "# Strategy Role-Playing Game\n\n<p align=\"center\">\n    <a href=\"https://www.youtube.com/watch?v=KABh8CwpSM4\">\n        <img src=\"https://repository-images.githubusercontent.com/330349397/ae90842e-d5aa-4326-a23c-7ff7e7a835cb\"/>\n    </a>\n</p>\n\nHost a stunning browser-based multiplayer RPG (Role-Playing Game) for the first time ever on WordPress.\n\n## Description\n\nRPG is a browser-based multi-player strategy role-playing game.\n\nThe main goal is to expand your empire and complete research activities in order to uncover the history of your species.\n\nYou can form cities, attack and spy on other players and robots, send resources between cities, complete research activities and use premium modifiers to boost your gameplay.\n\nCreate your own platformer mini-games and play games created by others to earn rewards.\n\n### Desktop version\n\nWe strongly believe in the right to be forgotten so when you're done testing the game just click on the \"Delete Account\" button from the game settings.\n\nA free Desktop Client is available on [Steam](https://store.steampowered.com/app/909060) and [GitHub](https://github.com/markjivko/rpg-Client-Desktop).\n\n### Artificial Intelligence\n\nYou can play this game by yourself or against robots or other players.\n\nRobots can perform the following tasks:\n\n * Create buildings according to the Building Advisor\n * Assign workers to buildings\n * Randomly upgrade existing buildings\n * Perform research activities\n \nRobots can also perform military activities:\n\n * Queue military units and ships\n * Estimate the best time for attack\n * Systematically attack other players\n\n### Internationalization\nEach player is free to choose their own language. \nSystem messages are translated just-in-time, meaning users can switch their language at any time and the inbox gets translated as well.\nGame language settings are separate from your WordPress language options.\n\n### WordPress Multi-site read\nYou can enable RPG on your entire network and run different games on each sub-site, similar to the concept of \"realms\". \n\n### Platformer\nDesign your own platformer mini-levels and play games created by others to earn gems!\n\n### Progressive Web Applicatio\nThe game can be played on any mobile device in landscape mode and on the desktop.\nIt functions as a progressive web application, handling offline mode and file requests in a way that mimics truly native applications.\n\n### Optimized CPU usage\nAll game resource and queue changes, convoy updates and robot actions are computed on-demand with time-lapse procedures that are optimized for speed and memory usage.\nDatabase interactions are optimized with minimal and fast select queries and multi-insert and multi-update queries in order provide a seamless real-time experience for all players.\nOptional performance optimizations are available in the Game Mechanics.\n\n### Optimized bandwidt\nUsing progressive web apps, game assets are automatically stored in the browser **cache storage** via service workers.\nThis results in 2ms fetch times and no requests made to your server, minimizing band width and drastically improving player experience.\nImage sprites are used to reduce the number of requests to your server further and all PNG files have been compressed with pngquant.\n\n### Game masters\nYou can promote players to the rank of game master, allowing them to moderate platformer games, access the Admin Console and more.\nGame admins (WordPress site super-admins) cannot be demoted and implicitly have game master abilities.\n\n### Command Line Interface\nAs a game master, you have complete control over your game.\nJust press **Alt+Ctrl+C** to toggle the console and type **help** to list all available commands.\nYou can add resources to players, change building levels, fast-forward the game and more.\n\n### Dashboard\nGet a birds-eye view of your game community in the Game Dashboard.\nYou can also send announcements to your players; MarkDown syntax is enabled.\n\n### Microtransactions (PRO)\nYou can enable microtransactions using PayPal and start monetizing your game.\n\n### Audio Experience (PRO)\nPlugins uploaded to WorPress.org are limited to 10MB in size so audio files and many other assets had to be packaged with the PRO plugin.\nControl the game music and ambiance and enjoy immersive stereo playback.\n\n### Game Mechanics (PRO)\nThe Game Mechanics is a comprehensive options panel that allows you to customize every aspect of the game from game labels - with internationalization support - to game objects.\nEvery option and feature is documented in English only.\n\n### Themes (PRO)\nYou can modify the design of your game to your heart's content directly from your browser.\nThemes are meant to be portable, i.e. you can export your game design and game mechanics changes as your very own themes\nin the form of Zip archives. \nAll themes are licensed under Creative Commons Attribution Share-Alike 4.0\n\n### Frequently Asked Questions\n\n#### How to get started?\nJust follow the short tutorial and the advice of the **Upgrade Advisor**.\nThe Codex is also available to learn more about how the game works (**Settings** > **Codex**).\nYou can also click on the question mark (?) symbols to learn more.\n\n#### How do I embed this?\nYou can use either the **[rpg]** shortcode or the **Role-playing game** Gutenberg block anywhere you want.\nUnauthenticated players will be greeted with a login page.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "rpg",
        "awayzo",
        "gaming",
        "awayzo rpg",
        "multiplayer rpg",
        "rpg browser"
      ],
      "category": "gaming-and-game-development"
    },
    "dsp--mcp-server-steam": {
      "owner": "dsp",
      "name": "mcp-server-steam",
      "url": "https://github.com/dsp/mcp-server-steam",
      "imageUrl": "/freedevtools/mcp/pfp/dsp.webp",
      "description": "Fetches user gaming information and preferences from Steam, providing AI assistants with context on users' gaming activities. Integrates with the Steam API to enhance gaming interactions.",
      "stars": 3,
      "forks": 4,
      "license": "MIT License",
      "language": "Java",
      "updated_at": "2025-08-03T00:38:52Z",
      "readme_content": "# MCP Steam Server\n\nA Model Context Protocol (MCP) server that provides Steam gaming context to AI assistants. This service integrates with the Steam API to fetch user gaming information and exposes it through the MCP protocol, allowing AI assistants to access and understand users' gaming activities and preferences.\n\n## Installation\n\n### Using Docker (Recommended)\n\nThe easiest way to run the MCP Steam server is using Docker:\n\n```bash\ndocker run --rm -i ghcr.io/dsp/mcp-server-steam:latest\n```\n\n### Configuration\n\nThe server can be configured using environment variables:\n\n```bash\n# Required configuration\nSTEAM_API_KEY=your_steam_api_key\n```\n\n## Development\n\n### Prerequisites\n\n- OpenJDK 21\n- Docker (for container builds)\n- Git\n- [devenv.sh](https://devenv.sh)\n\n### Setting Up Development Environment\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/dsp/mcp-steam.git\n   cd mcp-steam\n   ```\n\n2. Use the development shell:\n   ```bash\n   devshell shell\n   ```\n   This will set up the required development environment with all necessary dependencies.\n\n3. Build the project:\n   ```bash\n   mvn package\n   ```\n\n### Building Docker Image Locally\n\n```bash\ndocker build -t mcp-server-steam .\n```\n\n## API Documentation\n\nThe server implements the Model Context Protocol (MCP) specification. For detailed API documentation, please refer to the [MCP Documentation](https://modelcontextprotocol.io).\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT License\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "steam",
        "dsp",
        "gaming",
        "steam api",
        "server steam",
        "dsp mcp"
      ],
      "category": "gaming-and-game-development"
    },
    "freshlife001--mcp_poker": {
      "owner": "freshlife001",
      "name": "mcp_poker",
      "url": "https://github.com/freshlife001/mcp_poker",
      "imageUrl": "/freedevtools/mcp/pfp/freshlife001.webp",
      "description": "Connect to a Texas Hold'em poker game where players can strategize moves with LLM agents. The MCP server serves as the interface between AI models and gameplay, enhancing the poker experience with automated decisions and actions.",
      "stars": 1,
      "forks": 3,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-08T11:39:54Z",
      "readme_content": "# Texas Holdem MCP Server\n\nThis is an [Model Context Protocol server](https://github.com/modelcontextprotocol/servers) that allows an MCP client agents to play a game of [Texas Holdem poker game](<https://simple.wikipedia.org/wiki/Texas_hold_%27em>). It is implemented with Node.js and TypeScript, including game server, game client, and a MCP Server.\n\nMost Code in this project is generated by AI(Claude-3.7-Sonnet), and it tooks about 5 hours to improve and debug. Its Amazing!\n\n## Online Demo\n\n[Texas Holdem Online](<https://poker.ihuaj.com/>)\n\n\n<a href=\"https://glama.ai/mcp/servers/@freshlife001/mcp_poker\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@freshlife001/mcp_poker/badge\" alt=\"Texas Holdem Server MCP server\" />\n</a>\n\n![Screen capture](static/screen_01.png)\n\n![Screen capture](static/screen_02.png)\n\n![Screen capture](static/screen_03.png)\n\n## Getting started\n\n* Build :\n\n```bash\nnpm install\nnpm run build\n```\n\n* Run Poker Server:\n\n```bash\nnpm run dev\n```\n\n* Open Poker Client:\nOpen your browser visit http://localhost:3000/\n\n- Configure your MCP client to add the tool. For example, here is how to add the tool to Cline, assuming you cloned the repo at `/path/to/poker-mcp-server`:\n\n```JSON\n{\n  \"mcpServers\": {\n    \"poker-mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/poker-mcp-server/dist/mcpServer.js\"],\n      \"env\": {\n        \"DEBUG\": \"*\"\n      }\n    }\n  }\n}\n```\n\n- Cline:\n\n  ![Screenshot of install mcp server](static/add_tools.png)\n\n## Example prompt\n\n```\nYou are a Texas Hold'em poker expert. Please use the name \"Super Awesome Pro\" to join a Texas Hold'em poker game and win more chips. You can only use the functions provided by the poker-mcp-server MCP server. After joining the game, you must wait for your turn to act before proceeding to the next move.\n```\n\nEnjoy Playing Poker With LLM!",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_poker",
        "poker",
        "mcp",
        "mcp_poker connect",
        "freshlife001 mcp_poker",
        "poker game"
      ],
      "category": "gaming-and-game-development"
    },
    "johnnyinlee--lol-client-mcp": {
      "owner": "johnnyinlee",
      "name": "lol-client-mcp",
      "url": "https://github.com/johnnyinlee/lol-client-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/johnnyinlee.webp",
      "description": "Accesses real-time game data from the League of Legends client using the Live Client Data API. Provides tools for retrieving in-game statistics and other relevant information.",
      "stars": 7,
      "forks": 5,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-08-18T20:18:08Z",
      "readme_content": "# LoL Client MCP\n\nAn MCP (Model-Controller-Processor) server for accessing League of Legends client data. This server provides a collection of tools that communicate with the League of Legends Live Client Data API to retrieve in-game data.\n\n## Overview\n\nThis project accesses real-time game data using the League of Legends game client's Live Client Data API. It utilizes the FastMCP framework to expose various endpoints as tools.\n\nAPI information can be found at https://developer.riotgames.com/docs/lol.\n\n## Installation and Usage\n\n### Prerequisites\n\n- Python 3.8 or higher\n- [uv](https://github.com/astral-sh/uv) - Fast and reliable Python package manager\n  - Installation: `pip install uv`\n- League of Legends client installed\n\n### Project Setup\n\n1. Clone this repository:\n\n```bash\ngit clone https://github.com/yourusername/lol-client-mcp.git\ncd lol-client-mcp\n```\n\n2. Install required packages using uv:\n\n```bash\nuv pip install httpx fastmcp\n```\n\n### Running the MCP Server\n\nTo run directly:\n\n```bash\npython main.py\n```\n\n### Integration with Claude\n\nThere are two ways to use this with Claude:\n\n#### 1. Claude Desktop Configuration\n\nAdd the following to your `claude_desktop_config.json` file:\n\n```json\n{\n    \"mcpServers\": {\n        \"lol-client-mcp\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"C:\\\\ABSOLUTE\\\\PATH\\\\TO\\\\PARENT\\\\FOLDER\\\\lol-client-mcp\",\n                \"run\",\n                \"main.py\"\n            ]\n        }\n    }\n}\n```\n\n**Important**: Replace `C:\\\\ABSOLUTE\\\\PATH\\\\TO\\\\PARENT\\\\FOLDER\\\\lol-client-mcp` with the actual path to your project.\n\n#### 2. Using with Web Application\n\nTo connect the MCP server to the Claude web application:\n\n1. Run the MCP server:\n   ```bash\n   python main.py\n   ```\n\n2. Configure the server connection in the Claude web interface:\n   - Go to MCP settings at the bottom when starting a conversation\n   - Select 'lol-client-mcp' and connect\n\n## API Tools List\n\n### Game Data\n\n- `get_all_game_data()`: The Live League of Legends Client Data API has a number of endpoints that return a subset of the data returned by the /allgamedata endpoint. This endpoint is great for testing the Live Client Data API, but unless you actually need all the data from this endpoint, use one of the endpoints listed below that return a subset of the response.\n- `get_game_stats()`: Basic data about the game.\n- `get_event_data()`: Get a list of events that have occurred in the game.\n\n### Active Player Data\n\n- `get_active_player()`: Get all data about the active player.\n- `get_active_player_name()`: Returns the player name.\n- `get_active_player_abilities()`: Get Abilities for the active player.\n- `get_active_player_runes()`: Retrieve the full list of runes for the active player.\n\n### Player List and Individual Player Data\n\n- `get_player_list()`: Retrieve the list of heroes in the game and their stats.\n- `get_player_scores(riot_id)`: Retrieve the list of the current scores for the player.\n- `get_player_summoner_spells(riot_id)`: Retrieve the list of the summoner spells for the player.\n- `get_player_main_runes(riot_id)`: Retrieve the basic runes of any player.\n- `get_player_items(riot_id)`: Retrieve the list of items for the player.\n\n## Troubleshooting\n\n- **Connection Error**: Check if the League of Legends client is running.\n- **Timeout Error**: Verify that the game has actually started. This API does not work in the game lobby.\n\n## Precautions\n\n- This API only works when the League of Legends client is running and a game is in progress.\n- Use in compliance with Riot Games API policies.\n\n## License\n\nAll rights belong to Riot Games.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "client",
        "gaming",
        "api",
        "game data",
        "legends client",
        "retrieving game"
      ],
      "category": "gaming-and-game-development"
    },
    "kokushin--exia-mcp": {
      "owner": "kokushin",
      "name": "exia-mcp",
      "url": "https://github.com/kokushin/exia-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kokushin.webp",
      "description": "Generate interactive scenario files in the Kotonoha Sisters Explanation style for the Exia visual novel engine, converting natural language prompts into JSON format scenarios for display. Integrate setup and execution tools for seamless scenario creation and playback.",
      "stars": 9,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-27T21:20:40Z",
      "readme_content": "# exia-scenario-generator MCP Server\n\n[exia](https://github.com/kokushin/exia) というノベルゲームエンジン向けのシナリオファイルを作成する MCP サーバです。  \n「琴葉姉妹解説」形式のシナリオを生成し、exia で表示します。\n\n<img width=\"800\" alt=\"\" src=\"https://github.com/user-attachments/assets/f02cc41a-6456-44d3-bb22-190cb899515d\" />\n\n## 機能\n\n- 指定されたお題について「琴葉姉妹解説」形式のシナリオを生成\n- 生成したシナリオを exia 用の JSON 形式に変換\n- exia を GitHub からダウンロードしてセットアップ\n- 生成したシナリオを exia で表示\n\n## 必要条件\n\n- Node.js v20.x 以上\n- OpenAI API キー\n- Git\n\n## セットアップ\n\n1. リポジトリをクローンまたはダウンロード\n\n```bash\ngit clone https://github.com/kokushin/exia-mcp.git\ncd exia-mcp\n```\n\n2. 必要なパッケージをインストール\n\n```bash\nnpm install\n```\n\n3. TypeScript のコンパイル (変更を加えたら実行してください)\n\n```bash\nnpm run build\n```\n\n## Claude Desktop での利用方法\n\n1. Claude Desktop を起動\n\n2. 設定画面を開き、MCP サーバを追加\n\n```json\n{\n  \"mcpServers\": {\n    \"exia-scenario-generator\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"/path/to/exia-mcp\", //（clone した exia-mcp のパスに置き換えてください）\n        \"--openai-api-key=YOUR_API_KEY\", //（OpenAI API キーに置き換えてください）\n        \"--stdio\"\n      ]\n    }\n  }\n}\n```\n\n- ※ `YOUR_API_KEY` は実際の OpenAI API キーに置き換えてください\n- ※ `npx` が実行できない場合は絶対パスで指定してください `例: /path/to/.volta/bin/npx`\n\n3. Claude Desktop で以下のように使用\n   - 「exia で量子コンピュータについて解説して」と入力\n   - MCP サーバが起動し、シナリオを生成して exia を起動\n   - exia アプリケーション（Electron）が別ウィンドウで起動し、シナリオをプレイ\n\n## 利用可能なツール\n\n- `generateScenario`: お題からシナリオを生成\n- `setupExia`: exia をダウンロードしてセットアップ\n- `saveScenario`: 生成したシナリオを保存\n- `exiaVoiceroidExplain`: シナリオ生成から exia 起動までを一括実行（推奨）\n\n## 注意事項\n\n- 初回実行時は exia のダウンロードとセットアップに時間がかかります\n- キャラクター画像は自前で用意して手動で差し替える必要があります\n  - exia のドキュメントは[こちら](https://github.com/kokushin/exia?tab=readme-ov-file#%E7%94%BB%E5%83%8F%E3%82%84%E3%82%B7%E3%83%8A%E3%83%AA%E3%82%AA%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%97%E3%81%9F%E3%81%84%E5%A0%B4%E5%90%88)\n- OpenAI API の利用には料金がかかる場合があります\n\n## ライセンス\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "exia",
        "interactive",
        "kokushin",
        "exia visual",
        "kokushin exia",
        "development kokushin"
      ],
      "category": "gaming-and-game-development"
    },
    "mario-andreschak--mcp-gameboy": {
      "owner": "mario-andreschak",
      "name": "mcp-gameboy",
      "url": "https://github.com/mario-andreschak/mcp-gameboy",
      "imageUrl": "/freedevtools/mcp/pfp/mario-andreschak.webp",
      "description": "Interact with a GameBoy emulator by loading ROMs, controlling gameplay through key inputs, and capturing real-time screen visuals. Supports operations via standard input/output and offers a web interface for enhanced user interaction.",
      "stars": 15,
      "forks": 7,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-25T09:58:49Z",
      "readme_content": "# MCP GameBoy Server\n[![smithery badge](https://smithery.ai/badge/@mario-andreschak/mcp-gameboy)](https://smithery.ai/server/@mario-andreschak/mcp-gameboy)\n\n<a href=\"https://glama.ai/mcp/servers/@mario-andreschak/mcp-gameboy\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@mario-andreschak/mcp-gameboy/badge\" alt=\"GameBoy Server MCP server\" />\n</a>\n\n## Overview\nA Model Context Protocol (MCP) server for serverboy, allowing LLMs to interact with a GameBoy emulator.\nYour LLM can...\n- Load ROMS\n- Press Keys\n- Look at the Gameboy Screen\n- skip frames\n\nYou can...\n- control the gameboy emulator using the @modelcontextprotocol/inspector\n- control the gameboy emulator (and upload ROMs) using a web-interface at http://localhost:3001/emulator\n- install the gameboy emulator in your favorite MCP-Client\n\n![Screenshot 2025-04-25 183528](https://github.com/user-attachments/assets/a248ef8a-73bb-4fc7-9c7f-7832cea34498)\n\n![Screenshot 2025-04-25 081510](https://github.com/user-attachments/assets/dd47d7ea-fe93-4162-9da5-8da7d9aab469)\n\n![image](https://github.com/user-attachments/assets/b9565920-b2ae-41d5-8609-59d832a90d44)\n\n\n## Features\n\n- Supports both stdio and SSE transports\n- Provides tools for GameBoy controls (up, down, left, right, A, B, start, select)\n- Provides tools to load different ROMs\n- Provides tools to get the current screen\n- All tools return an ImageContent with the latest screen frame\n\n## Installation\n\n### Installing via Smithery\n\nTo install GameBoy Emulator Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@mario-andreschak/mcp-gameboy):\n\n```bash\nnpx -y @smithery/cli install @mario-andreschak/mcp-gameboy --client claude\n```\n\n### Installing in [FLUJO](https://github.com/mario-andreschak/FLUJO/)\n1. Click Add Server\n2. Copy & Paste Github URL into FLUJO\n3. Click Parse, Clone, Install, Build and Save.\n\n### Manual Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/mcp-gameboy.git\ncd mcp-gameboy\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n### Installing via Configuration Files\n\n!! **ATTENTION** : Many MCP Clients require to specify the ROM-Path in the .env vars as an **absolute path**\n\nTo integrate this MCP server with Cline or other MCP clients via configuration files:\n\n1. Open your Cline settings:\n   - In VS Code, go to File -> Preferences -> Settings\n   - Search for \"Cline MCP Settings\"\n   - Click \"Edit in settings.json\"\n\n2. Add the server configuration to the `mcpServers` object:\n   ```json\n   {\n     \"mcpServers\": {\n       \"mcp-gameboy\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"/path/to/mcp-gameboy/dist/index.js\"\n         ],\n         \"disabled\": false,\n         \"autoApprove\": []\n       }\n     }\n   }\n   ```\n\n3. Replace `/path/to/mcp-gameboy/dist/index.js` with the actual path to the `index.js` file in your project directory. Use forward slashes (/) or double backslashes (\\\\\\\\) for the path on Windows.\n\n4. Save the settings file. Cline should automatically connect to the server.\n\n\n## Usage\n\n### Environment Variables\n!! **ATTENTION** : Many MCP Clients require to specify the ROM-Path in the .env vars as an **absolute path**\n\nCreate a `.env` file in the root directory with the following variables:\n\n```\n# Server configuration\nPORT=3001\n\n# ROM path for stdio mode\nROM_PATH=./roms/dangan.gb\n```\n\n### Running in stdio Mode\n\nIn stdio mode, the server uses the ROM path specified in the `ROM_PATH` environment variable. It will open a browser window to display the GameBoy screen.\n\n```bash\nnpm run start\n```\n\n### Running in SSE Mode\n\nIn SSE mode, the server starts an Express server that serves a web page for ROM selection.\n\n```bash\nnpm run start-sse\n```\n\nThen open your browser to `http://localhost:3001` to select a ROM.\n\n## Tools\n\nThe server provides the following tools:\n\n- `press_up`: Press the UP button on the GameBoy\n- `press_down`: Press the DOWN button on the GameBoy\n- `press_left`: Press the LEFT button on the GameBoy\n- `press_right`: Press the RIGHT button on the GameBoy\n- `press_a`: Press the A button on the GameBoy\n- `press_b`: Press the B button on the GameBoy\n- `press_start`: Press the START button on the GameBoy\n- `press_select`: Press the SELECT button on the GameBoy\n- `load_rom`: Load a GameBoy ROM file\n- `get_screen`: Get the current GameBoy screen\n\nAll tools return an ImageContent with the latest screen frame.\n\n## Implementation Details\n\nThis server is built using the Model Context Protocol (MCP) TypeScript SDK. It uses:\n\n- `McpServer` from `@modelcontextprotocol/sdk/server/mcp.js` for the server implementation\n- `StdioServerTransport` from `@modelcontextprotocol/sdk/server/stdio.js` for stdio transport\n- `SSEServerTransport` from `@modelcontextprotocol/sdk/server/sse.js` for SSE transport\n- `serverboy` for the GameBoy emulation\n- `express` for the web server in SSE mode\n- `canvas` for rendering the GameBoy screen\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gameboy",
        "emulator",
        "mario",
        "gameboy emulator",
        "interact gameboy",
        "gameboy interact"
      ],
      "category": "gaming-and-game-development"
    },
    "monteslu--vibe-eyes": {
      "owner": "monteslu",
      "name": "vibe-eyes",
      "url": "https://github.com/monteslu/vibe-eyes",
      "imageUrl": "/freedevtools/mcp/pfp/monteslu.webp",
      "description": "Captures and visualizes browser game data in real-time using vectorized canvas outputs and detailed debug information. Integrates with AI models to enhance debugging and streamline development processes.",
      "stars": 41,
      "forks": 5,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-01T17:57:20Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/monteslu-vibe-eyes-badge.png)](https://mseep.ai/app/monteslu-vibe-eyes)\n\n# Vibe-Eyes\n\n[![smithery badge](https://smithery.ai/badge/@monteslu/vibe-eyes)](https://smithery.ai/server/@monteslu/vibe-eyes)\n\nAn MCP server that enables LLMs to \"see\" what's happening in browser-based games and applications through vectorized canvas visualization and debug information.\n\n<a href=\"https://glama.ai/mcp/servers/@monteslu/vibe-eyes\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@monteslu/vibe-eyes/badge\" alt=\"Vibe-Eyes MCP server\" />\n</a>\n\n<img src=\"./happy.jpg\" width=\"50%\" alt=\"Vibe-Eyes Logo\">\n\nVibe-Eyes uses a client-server architecture where a lightweight browser client captures canvas content and debug information, sends it to a Node.js server via WebSockets, which then vectorizes the images into compact SVG representations and makes them available to LLMs through the Model Context Protocol (MCP).\n\n```mermaid\nflowchart LR\n    A[\"Browser Game/App<br/>(Canvas + JavaScript)\"] -->|\"Captures\"| B[\"Vibe-Eyes Client<br/>(vibe-eyes-client)\"]\n    B -->|\"WebSocket<br/>(CORS-free)\"| C[\"Socket.IO Server\"]\n    \n    subgraph server[\"Vibe-Eyes Server (mcp.js)\"]\n        C -->|\"Process\"| D[\"Vectorization<br/>(vectorizer.js)\"]\n        C -->|\"Store\"| E[\"Debug Data<br/>(logs, errors, exceptions)\"]\n        D -->|\"Rough SVG\"| F[\"MCP Tool: getGameDebug()\"]\n        E --> F\n    end\n    \n    F -->|\"SVG + Debug Info\"| G[\"Claude/LLM<br/>(MCP Client)\"]\n    G -->|\"Debugging<br/>Assistance\"| A\n    \n    classDef default color:#000,font-weight:bold\n    classDef edgeLabel color:#333,font-size:12px\n    \n    style A fill:#c0e0ff,stroke:#000,stroke-width:2px\n    style B fill:#ffe0a0,stroke:#000,stroke-width:2px\n    style C fill:#a0d0ff,stroke:#000,stroke-width:2px\n    style D fill:#b0e0a0,stroke:#000,stroke-width:2px\n    style E fill:#ffb0b0,stroke:#000,stroke-width:2px\n    style F fill:#d0b0ff,stroke:#000,stroke-width:2px\n    style G fill:#ffb0d0,stroke:#000,stroke-width:2px\n    style server fill:#f0f0f0,stroke:#666,stroke-width:1px,stroke-dasharray: 5 5,color:#000\n```\n\n> Note: This project is experimental and designed to enhance \"vibe coding\" sessions with LLMs by providing visual context and rich debug information.\n\n## Video Explanation\n[![Vibe-Eyes Video Explanation](https://img.youtube.com/vi/z2on3KelaH4/0.jpg)](https://www.youtube.com/watch?v=z2on3KelaH4)\n\n\n## Key Capabilities\n\n- Captures and vectorizes canvas elements from browser games\n- Collects console logs and errors in real-time\n- Catches unhandled exceptions with full stack traces\n- Makes the visual and debug information available to LLMs via MCP\n- Creates a seamless debugging experience for developers working with LLMs\n\n## How It Works\n\n1. A lightweight client runs in the browser game/application\n2. The client captures canvas snapshots, console logs/errors, and unhandled exceptions\n3. Data is sent to the Vibe-Eyes server via WebSocket (avoiding CORS issues)\n4. The server vectorizes the canvas images and stores them with the debug information\n5. LLMs connect via the Model Context Protocol to access the latest data\n6. LLMs can \"see\" what's happening and help debug issues with full context\n## Components\n\n### 1. Vibe-Eyes MCP Server (`mcp.js`)\n\nThe core server that:\n- Receives canvas snapshots via Socket.IO\n- Vectorizes images to compact SVG representation (rough approximation)\n- Stores debug information (logs, errors, exceptions, timing)\n- Exposes the data via Model Context Protocol (MCP)\n- Provides HTTP endpoints for direct access\n- Processes images sequentially to manage resources\n\n### 2. Browser Client\n\nThe browser client is available at [vibe-eyes-client repository](https://github.com/monteslu/vibe-eyes-client).\n\nA lightweight browser integration that:\n- Finds canvas elements in the page\n- Captures canvas content as data URLs\n- Intercepts console logs and errors\n- Catches global unhandled exceptions with stack traces\n- Sends data to the Vibe-Eyes server via WebSockets\n- Minimizes performance impact on games\n- Supports explicit initialization to control when capturing starts\n\n### 3. Vectorization Engine (`vectorizer.js`)\n\nA high-quality SVG vectorization library that:\n- Converts raster images to vector SVGs\n- Optimizes SVGs for size and clarity\n- Preserves visual information while reducing data size\n\n## Getting Started\n\n### Installation\n\n### Installing via Smithery\n\nTo install Vibe-Eyes for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@monteslu/vibe-eyes):\n\n```bash\nnpx -y @smithery/cli install @monteslu/vibe-eyes --client claude\n```\n\n### Manual Installation\n```bash\n# Clone the repository\ngit clone https://github.com/monteslu/vibe-eyes.git\ncd vibe-eyes\n\n# Install dependencies\nnpm install\n```\n\n### Using with LLM Agents\n\nRegister the MCP server with your AI agent:\n\n```bash\n# For Claude Code\nclaude mcp add\n```\n\nThis enables Claude to use the Vibe-Eyes capabilities via MCP.\n\n### Integrating with Games/Applications\n\nAdd the client to your browser application by including the required scripts:\n\n```html\n<!-- Include Socket.IO client -->\n<script src=\"https://cdn.socket.io/4.7.4/socket.io.min.js\"></script>\n\n<!-- Include Vibe-Eyes client -->\n<script src=\"https://cdn.jsdelivr.net/npm/vibe-eyes-client/dist/index.min.js\"></script>\n\n<!-- Initialize the client -->\n<script>\n  // Import the initialization function if using as module\n  // import { initializeVibeEyes } from 'vibe-eyes-client';\n  \n  // Initialize with configuration\n  const vibeEyes = initializeVibeEyes({\n    // WebSocket URL to the Vibe-Eyes server\n    serverUrl: 'ws://localhost:8869',\n    // Capture interval in milliseconds\n    captureDelay: 1000,\n    // Start capturing automatically after connection\n    autoCapture: true\n  });\n</script>\n```\n\n### Using with Claude or Other LLMs\n\nThe MCP server exposes a tool for LLMs to access the latest visual and debug information via Model Context Protocol (MCP):\n\n```\ngetGameDebug({ includeSvg: true/false })\n```\n\nThe LLM will receive:\n- Recent console logs and errors from the application\n- Unhandled exceptions with full stack traces (if any occurred)\n- Vectorized SVG approximation of the canvas (if `includeSvg` is true)\n- Timing and correlation information to connect visual state with logs\n\nThis allows the LLM to \"see\" what's happening in the application and provide better assistance.\n\n#### Example MCP Config (for Claude Code)\n\nTo access Vibe-Eyes from Claude:\n\n```json\n{\n  \"name\": \"vibe-eyes\",\n  \"url\": \"http://localhost:8869\",\n  \"tools\": [\n    {\n      \"name\": \"getGameDebug\",\n      \"description\": \"Retrieves the most recent canvas visualization and debug information from a browser game or application\"\n    }\n  ]\n}\n```\n\n## How Vibe-Eyes Helps with \"Vibe Coding\"\n\nTraditional \"vibe coding\" sessions require developers to manually take screenshots and describe what's happening in their application. Vibe-Eyes automates this process by:\n\n1. **Providing Visual Context**: LLMs can see the actual visual state of the game/app\n2. **Correlating Visual and Code Issues**: Console logs are paired with visual state\n3. **Reducing Manual Work**: No need to manually capture and upload screenshots\n4. **Enabling Real-Time Debugging**: LLMs can observe changes as they happen\n5. **Optimizing Data Transfer**: Vector representation is more compact than screenshots\n\n## Performance Considerations\n\n- The browser client is designed to minimize impact on application performance\n- Creating canvas data URLs can be CPU-intensive, so capturing frequency is configurable\n- WebSocket transport avoids CORS issues common in cross-domain setups\n- The server processes images sequentially to prevent overload\n- SVG vectorization balances visual accuracy with size optimization\n\n## Direct SVG Access\n\nFor applications that want to reuse the vectorized SVG output:\n\n1. **WebSocket Response**: The server includes the SVG directly in WebSocket responses:\n   ```javascript\n   socket.on('debugCapture', (data, callback) => {\n     // Capture and process...\n     callback({\n       success: true,\n       id: \"capture_123\",\n       svg: \"<svg>...</svg>\",  // Vectorized SVG \n       stats: { /* stats data */ }\n     });\n   });\n   ```\n\n2. **HTTP Endpoint**: Access the latest capture via the `/latest` endpoint:\n   ```javascript\n   fetch('http://localhost:8869/latest')\n     .then(res => res.json())\n     .then(data => {\n       const svg = data.vectorized?.svg;\n       // Use the SVG...\n     });\n   ```\n\n## API Reference\n\n### Browser Client\n\n```javascript\n// Initialize the client\nconst vibeEyes = initializeVibeEyes({\n  serverUrl: 'ws://localhost:8869',\n  captureDelay: 1000, // ms between captures\n  maxLogs: 10,        // Max console.log entries to store\n  maxErrors: 10,      // Max console.error entries to store\n  autoCapture: true   // Start capturing automatically\n});\n\n// Manual control\nvibeEyes.startCaptureLoop(); // Start auto-capturing\nvibeEyes.stopCaptureLoop();  // Stop auto-capturing\nvibeEyes.captureAndSend();   // Trigger one capture immediately\n\n// The server responds with:\n// {\n//   success: true,\n//   id: \"capture_1234567890\",\n//   processedAt: 1616161616161,\n//   svg: \"<svg>...</svg>\",  // The vectorized SVG for direct use\n//   stats: {\n//     vectorizeTime: 120,\n//     optimizeTime: 30,\n//     originalSize: 50000,\n//     finalSize: 15000,\n//     sizeReduction: 70\n//   }\n// }\n```\n\n### MCP Tool\n\n```javascript\n// MCP tool available to LLMs\ngetGameDebug({\n  includeSvg: true  // Whether to include SVG visualization\n})\n\n// Returns\n{\n  success: true,\n  capture: {\n    id: \"capture_123456789\",\n    timestamp: 1616161616161,\n    console_logs: [\n      { timestamp: 1616161616000, data: [\"Player position:\", {x: 10, y: 20}] },\n      // ...more logs\n    ],\n    console_errors: [\n      // Any errors captured\n    ],\n    unhandled_exception: {\n      timestamp: 1616161616100,\n      message: \"Uncaught SyntaxError: Unexpected token ';'\",\n      stack: \"SyntaxError: Unexpected token ';'\\n    at game.js:42:10\\n...\",\n      type: \"SyntaxError\",\n      source: \"game.js\",\n      line: 42,\n      column: 10\n    },\n    vectorized: {\n      svg: \"<svg>...</svg>\",  // Only if includeSvg is true (rough approximation)\n      imageType: \"png\",\n      stats: {\n        vectorizeTime: 120,\n        optimizeTime: 30,\n        originalSize: 50000,\n        finalSize: 15000,\n        sizeReduction: 70\n      }\n    }\n  }\n}\n```\n\n## Standalone Vectorizer CLI\n\nThe project also includes a standalone CLI tool for vectorizing individual files:\n\n```bash\n# Install CLI globally\nnpm install -g vibe-eyes\n\n# Use the CLI\nvibe-eyes-vectorize input.png output.svg\n\n# With options\nvibe-eyes-vectorize photo.jpg --color-precision 10 --max-iterations 100\n```\n\n## License\n\nISC\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "debugging",
        "debug",
        "gaming",
        "game development",
        "enhance debugging",
        "browser game"
      ],
      "category": "gaming-and-game-development"
    },
    "planetarium--mcp-agent8": {
      "owner": "planetarium",
      "name": "mcp-agent8",
      "url": "https://github.com/planetarium/mcp-agent8",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Connects to the Agent8 SDK for optimized development by retrieving prompts and code examples, as well as searching for game development resources through a structured API.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "agent8",
        "sdk",
        "mcp",
        "agent8 sdk",
        "mcp agent8",
        "connects agent8"
      ],
      "category": "gaming-and-game-development"
    },
    "playcanvas--editor-mcp-server": {
      "owner": "playcanvas",
      "name": "editor-mcp-server",
      "url": "https://github.com/playcanvas/editor-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/playcanvas.webp",
      "description": "Automate the PlayCanvas Editor to enhance game development by managing entities, handling assets, and adjusting scene settings efficiently with AI-driven tools.",
      "stars": 66,
      "forks": 12,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T18:22:37Z",
      "readme_content": "    ██████╗ ██╗      █████╗ ██╗   ██╗ ██████╗ █████╗ ███╗   ██╗██╗   ██╗ █████╗ ███████╗\n    ██╔══██╗██║     ██╔══██╗╚██╗ ██╔╝██╔════╝██╔══██╗████╗  ██║██║   ██║██╔══██╗██╔════╝\n    ██████╔╝██║     ███████║ ╚████╔╝ ██║     ███████║██╔██╗ ██║██║   ██║███████║███████╗\n    ██╔═══╝ ██║     ██╔══██║  ╚██╔╝  ██║     ██╔══██║██║╚██╗██║╚██╗ ██╔╝██╔══██║╚════██║\n    ██║     ███████╗██║  ██║   ██║   ╚██████╗██║  ██║██║ ╚████║ ╚████╔╝ ██║  ██║███████║\n    ╚═╝     ╚══════╝╚═╝  ╚═╝   ╚═╝    ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝  ╚═══╝  ╚═╝  ╚═╝╚══════╝\n\n    ███╗   ███╗ ██████╗██████╗        ███████╗███████╗██████╗ ██╗   ██╗███████╗██████╗ \n    ████╗ ████║██╔════╝██╔══██╗       ██╔════╝██╔════╝██╔══██╗██║   ██║██╔════╝██╔══██╗\n    ██╔████╔██║██║     ██████╔╝       ███████╗█████╗  ██████╔╝██║   ██║█████╗  ██████╔╝\n    ██║╚██╔╝██║██║     ██╔═══╝        ╚════██║██╔══╝  ██╔══██╗╚██╗ ██╔╝██╔══╝  ██╔══██╗\n    ██║ ╚═╝ ██║╚██████╗██║            ███████║███████╗██║  ██║ ╚████╔╝ ███████╗██║  ██║\n    ╚═╝     ╚═╝ ╚═════╝╚═╝            ╚══════╝╚══════╝╚═╝  ╚═╝  ╚═══╝  ╚══════╝╚═╝  ╚═╝\n\nAn MCP Server for automating the [PlayCanvas Editor](https://playcanvas.com/products/editor) using an LLM.\n\n<img width=\"1864\" alt=\"Screenshot 2025-03-21 at 15 50 10\" src=\"https://github.com/user-attachments/assets/393ffe73-40eb-4e1b-9442-2295bbb63326\" />\n\n> [!IMPORTANT]  \n> At the moment, the MCP Server needs to be driven by Anthropic's Claude. Our experience shows that the free tier for Claude does not deliver a big enough chat context to operate the MCP Server reliably. Therefore, we strongly recommend subscribing to a Pro Claude account.\n\n## Available Tools\n\n* Entity\n  * `list_entities`\n  * `create_entities`\n  * `delete_entities`\n  * `duplicate_entities`\n  * `modify_entities`\n  * `reparent_entity`\n  * `add_components`\n  * `remove_components`\n  * `add_script_component_script`\n* Asset\n  * `list_assets`\n  * `create_assets`\n  * `delete_assets`\n  * `instantiate_template_assets`\n  * `set_script_text`\n  * `script_parse`\n  * `set_material_diffuse`\n* Scene\n  * `query_scene_settings`\n  * `modify_scene_settings`\n* Store\n  * `store_search`\n  * `store_get`\n  * `store_download`\n\n## Installation\n\nRun `npm install` to install all dependencies.\n\n### Install Chrome Extension\n\n1. Visit `chrome://extensions/` and enable Developer mode\n2. Click `Load unpacked` and select the `extensions` folder\n3. Load the PlayCanvas Editor. The extension should be loaded.\n\n### Run MCP Server\n\nThe MCP Server can be driven by Cursor or Claude Desktop.\n\n> [!TIP]  \n> We have found Claude Desktop to be generally more reliable.\n\n#### Claude Desktop\n\n1. Install [Claude Desktop](https://claude.ai/download).\n2. Go to `Claude` > `Settings`.\n3. Select `Developer` and then `Edit Config`.\n4. This will open `claude_desktop_config.json`, your MCP Config JSON file.\n\n#### Cursor\n\n1. Install [Cursor](https://www.cursor.com/).\n2. Select `File` > `Preferences` > `Cursor Settings`.\n3. Click `+ Add new global MCP server`.\n4. This will open `mcp.json`, your MCP Config JSON file.\n\n> [!TIP]  \n> Also in `Cursor Settings`, select `Features` and scroll to the `Chat` section. Activate `Enable auto-run mode` to allow the LLM to run MCP tools without requiring constant authorization. You do this at your own risk (but we prefer it)!\n\n> [!IMPORTANT]  \n> In Cursor, ensure you have `Agent` selected. `Ask` and `Edit` modes will not recognize the MCP Server.\n\n#### MCP Config JSON File\n\nThis is how your config should look:\n\nWindows\n\n```json\n{\n  \"mcpServers\": {\n    \"playcanvas\": {\n      \"command\": \"cmd\",\n      \"args\": [\n        \"/c\",\n        \"npx\",\n        \"tsx\",\n        \"C:\\\\path\\\\to\\\\mcp-editor\\\\src\\\\server.ts\"\n      ],\n      \"env\": {\n        \"PORT\": \"52000\"\n      }\n    }\n  }\n}\n```\n\nmacOS\n\n```json\n{\n  \"mcpServers\": {\n    \"playcanvas\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"tsx\",\n        \"/path/to/mcp-editor/src/server.ts\"\n      ],\n      \"env\": {\n        \"PORT\": \"52000\"\n      }\n    }\n  }\n}\n```\n\n## Connecting the Editor to the MCP Server\n\nThe PlayCanvas Editor does not connect to the MCP Server automatically. To connect:\n\n1. Activate a Chrome tab running the PlayCanvas Editor.\n1. Select the Extensions icon to the right of the address bar.\n2. Select PlayCanvas Editor MCP Extension to open the extension popup.\n3. Select `CONNECT` (the port number should match what is set in your MCP Config JSON File).\n\n> [!NOTE]\n> You can currently only connect one instance of the PlayCanvas Editor to the MCP Server at any one time.\n\nYou should now be able to issue commands in Claude Desktop or Cursor.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "editor",
        "playcanvas",
        "automate",
        "playcanvas editor",
        "automate playcanvas",
        "development playcanvas"
      ],
      "category": "gaming-and-game-development"
    },
    "saymondamasio--wongames-mcp": {
      "owner": "saymondamasio",
      "name": "wongames-mcp",
      "url": "https://github.com/saymondamasio/wongames-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/saymondamasio.webp",
      "description": "Integrate real-world data and tools to enhance user interactions in applications. Provide dynamic context adjustments to seamlessly connect AI models with various data sources.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-27T11:55:57Z",
      "readme_content": "# wongames-mcp\n\nTo install dependencies:\n\n```bash\nbun install\n```\n\nTo run:\n\n```bash\nbun run index.ts\n```\n\nThis project was created using `bun init` in bun v1.2.5. [Bun](https://bun.sh) is a fast all-in-one JavaScript runtime.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "gaming",
        "game",
        "connect ai",
        "gaming game",
        "ai models"
      ],
      "category": "gaming-and-game-development"
    },
    "shreyaskarnik--mcpet": {
      "owner": "shreyaskarnik",
      "name": "mcpet",
      "url": "https://github.com/shreyaskarnik/mcpet",
      "imageUrl": "/freedevtools/mcp/pfp/shreyaskarnik.webp",
      "description": "MCPet is a TypeScript-based server that simulates a virtual pet experience, allowing users to adopt, nurture, and engage with a digital companion that evolves based on user interaction. The pet's stats change over time, reflecting care tasks such as feeding, cleaning, and playing games.",
      "stars": 9,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-06T21:24:06Z",
      "readme_content": "# MCPet\n\n![MCPet](./image.webp)\n\n[![smithery badge](https://smithery.ai/badge/@shreyaskarnik/mcpet)](https://smithery.ai/service/@shreyaskarnik/mcpet)\n\nMCPet: A nostalgic virtual pet experience for the AI age! This [Model Context Protocol (MCP)](https://modelcontextprotocol.io/) server lets you adopt, nurture, and play with your very own digital companion that evolves based on your care. Feed them, clean them, play games together, and watch them grow from a baby to an adult. Your pet's stats change over time even when you're away - just like the classic Tamagotchi toys, but powered by modern AI through the Model Context Protocol. Adopt your digital friend today!\n\nThis is a TypeScript-based MCP server that implements a virtual pet simulation system. It demonstrates core MCP concepts by providing tools for pet care and interaction.\n\n## Features\n\n### Virtual Pet Types\n\n- Choose from four pet types:\n  - Cat - Slightly moody but lovable\n  - Dog - Energetic and always happy to see you\n  - Dragon - Unique and fiery personality\n  - Alien - Mysterious and curious\n\n### Pet Lifecycle\n\n- Watch your pet evolve through four stages:\n  - Baby - Small and vulnerable\n  - Child - Growing and playful\n  - Teen - Energetic and developing\n  - Adult - Fully grown and wise\n\n### Stats Management\n\n- Care for your pet by managing five key stats:\n  - Hunger - Keep your pet well-fed\n  - Happiness - Play with your pet to keep them happy\n  - Health - Overall wellbeing affected by other stats\n  - Energy - Depletes with activity, replenishes with rest\n  - Cleanliness - Regular baths keep your pet fresh\n\n### Tools\n\n- `create_pet` - Adopt a new pet with a custom name and type\n- `check_pet` - View your pet's current status and stats\n- `feed_pet` - Feed your pet with different food options:\n  - Snack - Small hunger boost\n  - Meal - Balanced nutrition\n  - Feast - Maximum feeding (but can be unhealthy)\n- `play_with_pet` - Play different games:\n  - Ball - Light exercise\n  - Chase - High energy fun\n  - Puzzle - Mental stimulation\n- `clean_pet` - Give your pet a bath to restore cleanliness\n- `put_to_bed` - Let your pet sleep to restore energy\n\n### Animations\n\n- Dynamic ASCII art animations for each pet type and activity\n- Randomized frames create a lively and engaging experience\n- Special animations for:\n  - Eating different foods\n  - Playing various games\n  - Bathing\n  - Sleeping\n  - Being sick\n  - And more!\n\n## Development\n\nInstall dependencies:\n\n```bash\nnpm install\n```\n\nBuild the server:\n\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n\n```bash\nnpm run watch\n```\n\n## Installation\n\n### Installing via Smithery\n\nTo install MCPet for Claude Desktop automatically via [Smithery](https://smithery.ai/service/@shreyaskarnik/mcpet):\n\n```bash\nnpx -y @smithery/cli install @shreyaskarnik/mcpet --client claude\n```\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mcpet\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/mcpet/build/index.js\"],\n      \"env\": {\n        \"PET_DATA_DIR\": \"/path/to/writable/directory\"\n      }\n    }\n  }\n}\n```\n\nNote: The `PET_DATA_DIR` environment variable specifies where pet data will be stored. Make sure this is a directory with write permissions.\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector):\n\n```bash\nnpx @modelcontextprotocol/inspector node /path/to/mcpet/build/index.js\n```\n\nThe Inspector will provide an interface for testing your pet interactions directly.\n\n## Usage Examples\n\nAsk Claude questions like:\n\n- \"Can you create a cat pet named Whiskers?\"\n- \"How is my pet doing?\"\n- \"Can you feed my pet a meal?\"\n- \"I'd like to play chase with my pet\"\n- \"My pet looks dirty, can you give it a bath?\"\n- \"My pet seems tired, can you put it to bed?\"\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcpet",
        "pet",
        "gaming",
        "mcpet mcpet",
        "mcpet typescript",
        "shreyaskarnik mcpet"
      ],
      "category": "gaming-and-game-development"
    },
    "spirita1204--AI-Villgers": {
      "owner": "spirita1204",
      "name": "AI-Villgers",
      "url": "https://github.com/spirita1204/AI-Villgers",
      "imageUrl": "/freedevtools/mcp/pfp/spirita1204.webp",
      "description": "Create an interactive 2D world where players engage with NPCs through tasks and conversations. It utilizes advanced AI technologies for dynamic NPC behaviors and real-time interactions based on player choices.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-03T18:11:10Z",
      "readme_content": "# AI村民\n\n✅ **專案構想**\n\n- **設計 2D 地圖與物件**：定義每個地點（如牆壁、商店等）的座標系統。\n- **NPC 行為與任務系統**：建立 NPC 狀態機，並根據時間或其他條件生成每日任務。\n- **地圖交互與路徑規劃**：實現路徑尋路演算法，讓 NPC 能夠在地圖上自由移動。\n- **聊天系統整合**：設計玩家與 NPC 之間的互動指令，讓玩家能夠直接控制 NPC。\n- **測試與優化**：測試 NPC 行為的正確性和流暢度，優化移動和任務生成的邏輯。\n\n---\n\n✅ **專案技術**\n\n### **1. 項目架構與後端技術**\n\n| **後端** | **Django**：用於處理聊天系統、任務生成和管理 NPC 行為。 |\n| --- | --- |\n| **資料庫** | **SQLite** 或 **MySQL**：用於存儲 NPC 設定、任務腳本和 NPC 狀態。\n**MongoDB**（如果需要更靈活的結構化數據）. |\n| **API 與聊天系統** | • **GPT-3**（或 GPT-4）API：生成日常任務、進行對話、解析玩家指令並指派給 NPC。\n• [**Socket.io**](http://socket.io/)：實現即時聊天功能，讓玩家可以與 NPC 互動。 |\n\n---\n\n**2. 人工智能與 NPC 行為控制**\n\n| **狀態機** | **Finite State Machine (FSM)**：用於建模 NPC 的狀態與行為（如等待、移動、互動等）。\n**Task Scheduler**：生成每日任務，並根據任務進行行為調度 |\n| --- | --- |\n| **NPC 任務生成** | **規則引擎**（如 **Drools** 或 **Prolog**）：根據設置的規則來生成任務（例如“早上去超市”）。\n**隨機生成系統**：基於規則和時間生成動態任務，增強遊戲性 |\n\n---\n\n### **3. 人工聊天系統與指令解析**\n\n| **自然語言處理 (NLP)** |  **GPT-3/4**：用於解析玩家指令，理解指令並生成合理的 NPC 行為。\n**spaCy** 或 **NLTK**：用於文本處理，提取指令中的關鍵資訊（例如 NPC 名稱、地點）。 |\n| --- | --- |\n| **聊天引擎** | **Dialogflow**（Google）：用於構建聊天機器人，處理複雜的對話流和指令解析。\n**Rasa**：開源對話式 AI 平台，可用於構建自定義聊天機器人。 |\n| **用戶交互接口** | **Telegram Bot API** 或 **Discord Bot API**：用於在聊天平台中與玩家互動，接收指令並回應。 |\n\n---\n\n### **4. 前端技術與遊戲引擎**\n\n| **遊戲引擎** | UnrealEngine：渲染 2D 地圖和物體，控制 NPC 行為。 |\n| --- | --- |\n\n---\n\n✅ **專案進度**\n\n[ To-Do](To-Do%201b0cfc67a80e81b58849e88014bba105.csv)\n\n✅ 專案素材,圖示\n\nUE素材: Paper ZD\n\n- ✅ 資料表\n    \n    ### **1. NPC 資料表 (`npc`)**\n    \n    這個資料表記錄所有 NPC 的基本資訊。\n    \n    | 欄位名稱 | 資料型態 | 說明 |\n    | --- | --- | --- |\n    | npc_id | INT | NPC 唯一識別 ID |\n    | name | VARCHAR | NPC 名稱 |\n    | description | TEXT | NPC 描述 |\n    | current_task | INT | 當前任務 ID（指向 `tasks` 資料表） |\n    | status | VARCHAR | NPC 狀態（例如：待命、移動中、執行任務） |\n    | position_x | INT | NPC 在地圖上的 X 座標 |\n    | position_y | INT | NPC 在地圖上的 Y 座標 |\n    | last_active | DATETIME | 上次執行任務的時間 |\n    \n    ---\n    \n    ### **2. 任務資料表 (`tasks`)**\n    \n    這個資料表記錄所有可分配的任務，包括每日任務和隨機任務。\n    \n    | 欄位名稱 | 資料型態 | 說明 |\n    | --- | --- | --- |\n    | task_id | INT | 任務唯一識別 ID |\n    | task_name | VARCHAR | 任務名稱 |\n    | description | TEXT | 任務描述 |\n    | task_type | VARCHAR | 任務類型（如日常、隨機、特殊） |\n    | start_time | DATETIME | 任務開始時間 |\n    | end_time | DATETIME | 任務結束時間 |\n    | is_completed | BOOLEAN | 任務是否完成 |\n    \n    ---\n    \n    ### **3. 任務日程表 (`npc_task_schedule`)**\n    \n    這個資料表記錄每個 NPC 每天需要執行的任務安排，類似日程表。\n    \n    | 欄位名稱 | 資料型態 | 說明 |\n    | --- | --- | --- |\n    | npc_id | INT | NPC ID（指向 `npc` 資料表） |\n    | task_id | INT | 任務 ID（指向 `tasks` 資料表） |\n    | date | DATE | 執行的日期 |\n    | time_slot | VARCHAR | 任務執行時間段（如：早上、中午、晚上） |\n    \n    ---\n    \n    ### **4. 地圖資料表 (`map`)**\n    \n    這個資料表記錄遊戲中的 2D 地圖資訊，每個位置對應不同的物件。\n    \n    | 欄位名稱 | 資料型態 | 說明 |\n    | --- | --- | --- |\n    | position_id | INT | 位置唯一識別 ID |\n    | x_coordinate | INT | X 座標 |\n    | y_coordinate | INT | Y 座標 |\n    | object_type | VARCHAR | 物件類型（牆壁、商店、飲料店等） |\n    | object_name | VARCHAR | 物件名稱（如牆、超市、飲料店等） |\n    \n    ---\n    \n    ### **5. NPC 路徑資料表 (`npc_path`)**\n    \n    這個資料表記錄 NPC 移動的路徑，讓 NPC 能夠根據路徑規劃自動移動。\n    \n    | 欄位名稱 | 資料型態 | 說明 |\n    | --- | --- | --- |\n    | path_id | INT | 路徑唯一識別 ID |\n    | npc_id | INT | NPC ID（指向 `npc` 資料表） |\n    | start_position | INT | 起始位置（對應 `map` 資料表中的位置 ID） |\n    | end_position | INT | 終點位置（對應 `map` 資料表中的位置 ID） |\n    | status | VARCHAR | 路徑狀態（如：未完成、完成） |\n    \n    ---\n    \n    ### **6. NPC 與物件互動記錄資料表 (`npc_interaction`)**\n    \n    這個資料表記錄 NPC 與物體的互動，例如與商店互動、與飲料機互動等。\n    \n    | 欄位名稱 | 資料型態 | 說明 |\n    | --- | --- | --- |\n    | interaction_id | INT | 互動記錄唯一識別 ID |\n    | npc_id | INT | NPC ID（指向 `npc` 資料表） |\n    | object_id | INT | 物件 ID（指向 `map` 資料表） |\n    | action | VARCHAR | 互動行為（如：購物、吃東西等） |\n    | timestamp | DATETIME | 互動時間 |\n    \n    ---\n    \n    ### **7. 玩家指令資料表 (`player_commands`)**\n    \n    如果你有人工聊天系統，這個資料表可以記錄玩家的指令並對應到 NPC 行為。\n    \n    | 欄位名稱 | 資料型態 | 說明 |\n    | --- | --- | --- |\n    | command_id | INT | 指令唯一識別 ID |\n    | player_id | INT | 玩家 ID（如果有玩家資料表） |\n    | command_text | TEXT | 玩家輸入的指令 |\n    | npc_id | INT | 被指定的 NPC ID（可選） |\n    | command_time | DATETIME | 指令執行時間 |\n    | status | VARCHAR | 指令狀態（如：待執行、已執行） |\n    \n    ---\n    \n    ### **8. 任務完成記錄資料表 (`task_completion`)**\n    \n    這個資料表記錄 NPC 完成的任務和狀態。\n    \n    | 欄位名稱 | 資料型態 | 說明 |\n    | --- | --- | --- |\n    | completion_id | INT | 任務完成唯一識別 ID |\n    | npc_id | INT | NPC ID（指向 `npc` 資料表） |\n    | task_id | INT | 任務 ID（指向 `tasks` 資料表） |\n    | completion_time | DATETIME | 任務完成時間 |\n    | status | VARCHAR | 任務狀態（如：完成、未完成） |\n    \n    ---\n    \n    ### **9. NPC 等級與經驗資料表 (`npc_experience`)**\n    \n    這個資料表記錄 NPC 的經驗值和等級，用來控制 NPC 成長。\n    \n    | 欄位名稱 | 資料型態 | 說明 |\n    | --- | --- | --- |\n    | npc_id | INT | NPC ID（指向 `npc` 資料表） |\n    | experience | INT | NPC 經驗值 |\n    | level | INT | NPC 等級 |\n    | last_level_up | DATETIME | 上次升級時間 |\n    \n    ---\n    \n    ### **10. 日誌資料表 (`logs`)**\n    \n    記錄遊戲中發生的重要事件或錯誤日誌。\n    \n    | 欄位名稱 | 資料型態 | 說明 |\n    | --- | --- | --- |\n    | log_id | INT | 日誌唯一識別 ID |\n    | log_type | VARCHAR | 日誌類型（如：錯誤、警告、訊息） |\n    | log_message | TEXT | 日誌訊息 |\n    | timestamp | DATETIME | 日誌時間 |\n\n```bash\npython manage.py runserver                     # 啟動server\npython manage.py runserver --noreload\npipreqs --force --encoding=utf-8               # 複寫套件資源版本\npip install -r requirements.txt                # 安裝對應版本套件\ndaphne AI_NPC_Backend.asgi:application -p 8080 # daphne server 8080\npython manage.py test api                      # 執行測試腳本\npython manage.py migrate   \n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "npcs",
        "npc",
        "ai villgers",
        "npc behaviors",
        "engage npcs"
      ],
      "category": "gaming-and-game-development"
    },
    "tonypan2--minesweeper-mcp-server": {
      "owner": "tonypan2",
      "name": "minesweeper-mcp-server",
      "url": "https://github.com/tonypan2/minesweeper-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/tonypan2.webp",
      "description": "Engage in strategic gameplay of Minesweeper while the server manages game state and interactions. This server enables MCP client agents to play and challenge their problem-solving skills in an interactive environment.",
      "stars": 106,
      "forks": 6,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-10-02T18:37:20Z",
      "readme_content": "# Minesweeper MCP Server\n\nThis is an [Model Context Protocol server](https://github.com/modelcontextprotocol/servers) that allows an MCP client agents to play a game of [Minesweeper](<https://en.wikipedia.org/wiki/Minesweeper_(video_game)>). It is intended to be run alongside the [Minesweeper game server](https://github.com/tonypan2/minesweeper-server).\n\n![Screen capture](static/screen_recording.gif?raw=true)\nView the entire video demo at https://youtu.be/CXXMafVtlEQ (16x speedup).\n\n## Getting started\n\n- Follow the [instructions](https://github.com/tonypan2/minesweeper-server) of the game server to start it locally.\n\n* Build the MCP server:\n\n```bash\nnpm install\nnpm run build\n```\n\n- Configure your MCP client to add the tool. For example, here is how to add the tool to Claude Desktop on Windows's `claude_desktop_config.json` ([locating the file](https://gist.github.com/feveromo/7a340d7795fca1ccd535a5802b976e1f#3-configure-claude-desktop)), assuming you cloned the repo at `C:\\path\\to\\repo\\minesweeper-mcp-server`:\n\n```JSON\n{\n  \"mcpServers\": {\n    \"mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"C:\\\\path\\\\to\\\\repo\\\\minesweeper-mcp-server\\\\build\\\\index.js\"],\n      \"env\": {\n        \"DEBUG\": \"*\"\n      }\n    }\n  }\n}\n\n```\n\n- Claude Desktop : Restart Claude Desktop to let it pick up the tools. Be sure to quit from the tray menu icon, not from the app (which simply hides the window). If you click the Tools icon, it should show the new tools:\n\n  ![Screenshot of Claude Desktop homepage](static/claude_home.png?raw=true)\n\n  ![Screenshot of new tools](static/claude_tools.png?raw=true)\n\n## Example prompt\n\n```\nStart a new game of Minesweeper. Try your best to keep playing until you have flagged all mines. Remember that the coordinates are 0-indexed.\n```\n\n## Example interaction\n\nThe actual conversation is very long. Here are some snippets:\n\n## Game start\n\n![Game starts](static/game-start.png)\n\n## Placing flag at the wrong place\n\n![Claude places flag at the wrong place](static/wrong-flag.png)\n\n## Giving up after several attempts\n\n![Claude gives up](static/gave-up.png)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "minesweeper",
        "mcp",
        "tonypan2",
        "minesweeper mcp",
        "gameplay minesweeper",
        "minesweeper server"
      ],
      "category": "gaming-and-game-development"
    },
    "turlockmike--chess-mcp": {
      "owner": "turlockmike",
      "name": "chess-mcp",
      "url": "https://github.com/turlockmike/chess-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/turlockmike.webp",
      "description": "Analyze chess positions using the Stockfish engine, providing professional evaluations and visual board representations. Users can also explore move variations and access a database of games played by high-rated players.",
      "stars": 15,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-13T04:51:54Z",
      "readme_content": "# Chess Analysis Assistant for Claude\n[![smithery badge](https://smithery.ai/badge/chess-mcp)](https://smithery.ai/server/chess-mcp)\nThis tool helps you analyze chess positions and get professional evaluations using Stockfish, right within Claude! You can:\n- Get position evaluations\n- See visual board representations\n- Analyze different moves and variations\n- Look up positions in the masters database (games played by 2200+ rated players)\n\n## Requirements\n\n- [Claude Desktop](https://claude.ai/desktop) installed on your computer\n- Git installed on your system\n\n## Quick Installation\n\n### Installing via Smithery\n\nTo install Chess Analysis Assistant for Claude Desktop automatically via [Smithery](https://smithery.ai/server/chess-mcp):\n\n```bash\nnpx -y @smithery/cli install chess-mcp --client claude\n```\n\n### Mac and Linux Users\n\nOpen Terminal and run this command:\n```bash\ncurl -fsSL https://raw.githubusercontent.com/turlockmike/chess-mcp/master/install.sh | bash\n```\n\nThat's it! The script will:\n1. Install required dependencies (Node.js 20+, Stockfish, Cairo)\n2. Configure Claude Desktop\n3. Set up the Chess Assistant\n\n## Manual Installation (Windows or Advanced Users)\n\nIf you prefer to install manually or are using Windows, follow these steps:\n\n### Requirements\n\n- [Claude Desktop](https://claude.ai/desktop)\n- [Node.js](https://nodejs.org/) version 20 or higher\n- [Stockfish](https://stockfishchess.org/) chess engine\n- [Cairo](https://github.com/Automattic/node-canvas/wiki/Installation:-Windows) graphics library (for board visualization)\n\n### Step-by-Step Installation\n\n#### Step 1: Install Dependencies\n\n**Mac Users:**\n```bash\n# Install Homebrew if you haven't already\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install required packages\nbrew install stockfish cairo pkg-config jq\n```\n\n**Windows Users:**\n1. Install [Node.js](https://nodejs.org/) (LTS version)\n2. Download [Stockfish](https://stockfishchess.org/download/) and add it to your PATH\n3. Install [Cairo](https://github.com/Automattic/node-canvas/wiki/Installation:-Windows)\n\n#### Step 2: Install Chess Assistant\n```bash\nnpm install -g chess-mcp\n```\n\n#### Step 3: Configure Claude Desktop\n1. Open Claude Desktop\n2. Navigate to the configuration file:\n   - Mac: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n3. Add this configuration:\n\n```json\n{\n    \"mcpServers\": {\n        \"chess\": {\n            \"command\": \"npx\",\n            \"args\": [\"chess-mcp\"]\n        }\n    }\n}\n```\n\n4. Save and restart Claude Desktop\n\n## Using the Chess Assistant\n\n1. Open Claude Desktop\n2. Look for the tools icon (🔧) - it should show chess analysis tools\n3. Try these example prompts:\n   - \"Analyze this position: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"\n   - \"Show me the current position\"\n   - \"What's the best move in this position?\"\n   - \"Look up this position in the masters database\"\n   - \"Show me master games from this position after 2000\"\n   - \"What are the most common moves played by masters in this position?\"\n\n## Features\n\n### Position Analysis\n- Engine evaluation using Stockfish\n- Visual board representation\n- Best move suggestions\n- Move validation\n\n### Masters Database\n- Search positions in games played by 2200+ rated players\n- Filter games by date range\n- See win/draw statistics\n- View most common moves with success rates\n- Browse recent master games with player ratings\n\n## Need Help?\n\nIf you run into any issues:\n1. Make sure all requirements are installed correctly\n2. Verify Stockfish is accessible from your command line\n3. Check that all paths in your Claude Desktop configuration are correct\n4. Restart Claude Desktop after making any changes\n\n## Common Issues\n\n- **\"Tools not showing up in Claude\"**: Make sure you've configured Claude Desktop correctly\n- **\"Stockfish not found\"**: Verify Stockfish is installed and accessible from the command line\n- **\"Node version error\"**: Make sure you have Node.js version 20 or higher installed\n- **\"Canvas installation failed\"**: Make sure Cairo is installed correctly for your operating system ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "chess",
        "stockfish",
        "turlockmike",
        "turlockmike chess",
        "analyze chess",
        "chess mcp"
      ],
      "category": "gaming-and-game-development"
    },
    "v9rt3x--cs2-rcon-mcp": {
      "owner": "v9rt3x",
      "name": "cs2-rcon-mcp",
      "url": "https://github.com/v9rt3x/cs2-rcon-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/v9rt3x.webp",
      "description": "Manage CS2 game servers using natural language commands through a standardized protocol. Allows execution of RCON commands, monitoring of server status, and remote control of game settings.",
      "stars": 5,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-01T08:50:34Z",
      "readme_content": "# CS2 RCON MCP\n\n[![Python](https://img.shields.io/badge/python-3.8%2B-blue.svg)](https://www.python.org/downloads/)\n[![MCP Compatible](https://img.shields.io/badge/MCP-Compatible-green.svg)](https://cursor.sh)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nA Model Context Protocol server for CS2 RCON management.\n\n## Description\n\nThis project provides a Model Context Protocol (MCP) server interface for managing CS2 game servers via RCON. It allows remote control and monitoring of CS2 servers through a standardized protocol.\n\n![CS2 RCON MCP Demo](cs2-rcon-mcp.gif)\n\n## Features\n\n- Manage your CS2 server in natural language\n- RCON command execution\n- Manage workshop maps (host, list, change) - [Explore Workshop Maps](https://steamcommunity.com/app/730/workshop/)\n- SSE-based communication\n- Docker support\n\n## Available Tools\n\n| Tool | Short Description |\n|------|-------------------|\n| `rcon` | Execute any RCON command |\n| `status` | Get current server status |\n| `list_workshop_maps` | List all workshop maps on the server |\n| `host_workshop_map` | Host a workshop map by its ID |\n| `workshop_changelevel` | Change the map to a given workshop map |\n\n## Installation\n\n### Environment Variables\n\n- `HOST`: CS2 server IP\n- `SERVER_PORT`: CS2 server port\n- `RCON_PASSWORD`: RCON password\n\n### Docker (recommended)\n\nPull the Docker image from GitHub Container Registry:\n\n```bash\ndocker pull ghcr.io/v9rt3x/cs2-rcon-mcp:latest\n```\n\n### Docker Environment Variables\n\nWhen running with Docker, you can set the environment variables in two ways:\n\n1. **Directly in the command**:\n   ```bash\n   docker run -p 8080:8080 \\\n     -e HOST=your_server_ip \\\n     -e SERVER_PORT=your_server_port \\\n     -e RCON_PASSWORD=your_password \\\n     ghcr.io/v9rt3x/cs2-rcon-mcp:latest\n   ```\n\n2. **Using a `.server-env` file**:\n   Create a file named `.server-env` with the following content:\n   ```\n   HOST=your_server_ip\n   SERVER_PORT=your_server_port\n   RCON_PASSWORD=your_password\n   ```\n\n   Then run the container like this:\n   ```bash\n   docker run -p 8080:8080 --env-file .server-env ghcr.io/v9rt3x/cs2-rcon-mcp:latest\n   ```\n\nThis provides users with an alternative method to set environment variables, making it easier to manage sensitive information like passwords.\n\n### Connecting from Visual Studio Code (GitHub Copilot)\n\nTo configure Visual Studio Code to work with the MCP server, follow these steps:\n\n1. **Start the MCP Server**: Ensure that your MCP server is running before attempting to connect from VS Code.\n\n2. **Open Visual Studio Code**: Launch VS Code and ensure that you have the GitHub Copilot extension installed and configured.\n\n3. **Configure GitHub Copilot**:\n   - Change the mode from \"Ask\" to \"Agent\" mode.\n\n4. **Add MCP Server Configuration**:\n   - Click on the toolbox icon in the upper left corner of the Copilot prompt.\n   - Select \"Add MCP Server\" and choose the option for **HTTP - server-sent events**.\n\n5. **Enter the Server URL**:\n   - For the URL, input: `http://localhost:8080/cs2server/sse`. This is the endpoint for the MCP server's SSE connection.\n\n### Alternative: Connecting from Cursor (or any other MCP-Client)\n\n1. Start the MCP server\n2. Configure Cursor's MCP settings by creating or updating `~/.cursor/mcp.json`:\n   ```json\n   {\n     \"mcpServers\": {\n       \"cs2server\": {\n         \"url\": \"http://localhost:8080/cs2server/sse\"\n       }\n     }\n   }\n   ```\n3. In Cursor, open the MCP panel (usually in the sidebar)\n4. The server should automatically connect using the configured URL\n\nOnce connected, you can manage your server in natural language.\n\nExample prompts:\n\n1. \"Add 5 bots to the server and start a competitive match on de_dust2\"\n2. \"What's the current server status? How many players are connected and what map are we on?\"\n\nHappy fragging! 😊\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cs2",
        "rcon",
        "commands",
        "cs2 rcon",
        "rcon commands",
        "rcon mcp"
      ],
      "category": "gaming-and-game-development"
    },
    "wangyafu--haiguitangmcp": {
      "owner": "wangyafu",
      "name": "haiguitangmcp",
      "url": "https://github.com/wangyafu/haiguitangmcp",
      "imageUrl": "/freedevtools/mcp/pfp/wangyafu.webp",
      "description": "Host interactive Turtle Soup games with an AI game master, enabling solo play and puzzle exploration with access to puzzles, game rules, and hints through standardized tools.",
      "stars": 6,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-02T08:53:43Z",
      "readme_content": "## 介绍\r\n\r\n本项目旨在让大语言模型扮演海龟汤游戏主持人，使你独自一人也能享受海龟汤游戏的快乐。\r\n\r\n## 快速开始\r\n\r\n在使用本项目前，你需要确保你的电脑上已经安装了Python和uv。\r\n\r\n\r\n你首先需要克隆整个项目，然后运行uv sync安装依赖。\r\n\r\n```bash\r\ngit clone https://github.com/wangyafu/haiguitangmcp/\r\ncd haiguitangmcp\r\nuv sync\r\n```\r\n\r\n其次，你需要修改配置文件（假设你将项目安装在了E盘）\r\n\r\n### 在vscode中配置\r\n\r\n```json\r\n\"mcp\":{\r\n    \"servers\":{\r\n        \"haiguitang-mcp\": {\r\n                \"type\": \"stdio\",\r\n                \"command\": \"uv\",\r\n                \"args\": [\r\n                    \"--directory\",\r\n                    \"E:\\\\haiguitangmcp\\\\haiguitang_mcp\",\r\n                    \"run\",\r\n                    \"server.py\"\r\n                ]\r\n            }\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\n### 在cherry studio中进行配置\r\n\r\n```json\r\n\"mcpServers\": {\r\n    \r\n    \"haiguitang\": {\r\n      \"isActive\": true,\r\n      \"name\": \"海龟汤MCP服务器\",\r\n      \"description\": \"和用户玩海龟汤\",\r\n      \"registryUrl\": \"\",\r\n      \"command\": \"uv\",\r\n      \"args\": [\r\n        \"--directory\",\r\n        \"E:/haiguitangmcp/haiguitang_mcp\",\r\n        \"run\",\r\n        \"server.py\"\r\n      ]\r\n    },\r\n   \r\n}\r\n\r\n```\r\n\r\n上述的\"E:/haiguitangmcp/haiguitang_mcp\"表示server.py所在的路径。\r\n\r\n在其他mcp client中的配置方法类似。\r\n\r\n## mcp相关内容\r\n\r\n本项目提供了三个工具:\r\n\r\n- `get_prompt`: 获取海龟汤游戏的完整玩法说明\r\n- `get_puzzle`: 获取一个特定谜题的完整内容，需要提供谜题标题作为参数\r\n- `list_puzzles_tool`: 列出所有可用的谜题列表\r\n\r\n同时，本项目还提供了以下资源:\r\n\r\n- `puzzles://{puzzle_title}`: 获取特定谜题的信息\r\n\r\n以及一个提示模板:\r\n\r\n- `game_rules`: 提供海龟汤游戏规则的提示模板\r\n\r\n## 游戏规则\r\n\r\n在本游戏中：\r\n\r\n- 海龟汤是一种情景推理游戏，谜题本身并没有很强的逻辑性，注重能否发现关键线索重现情景\r\n- 出题人提出一个看似不合常理的问题和情景（谜面），猜题者通过提问缩小范围并最终揭示完整故事情节（谜底）\r\n- 猜题者可以提出任何问题，出题人主要用\"是\"、\"不是\"、\"是也不是\"或\"没有关系\"来回答\r\n- 当问题中既有对的地方也有不对的地方时，出题人会回答\"是也不是\"\r\n- 当问题与谜题核心情节无关时，出题人会回答\"没有关系\"\r\n- 猜题者可以通过在消息开头加上\"汤底\"来尝试描述完整情景\r\n- 当猜题者掌握了关键线索时，出题人会提醒猜题者归纳线索，形成对谜底的完整描述\r\n- 猜题者可以请求引导和提示，出题人会给予尚未掌握的线索\r\n- 当猜题者的描述大致包含了谜题的关键情景时，出题人会确认\"完全正确\"\r\n\r\n\r\n### 小技巧\r\n\r\n- 从基本问题开始，如谜题涉及人数、死者的死因等。\r\n- 注意谜面中的每一个细节，它们可能是关键线索\r\n- 当你感到困惑时，尝试从不同角度思考问题\r\n- 记录已经确认的线索，以便归纳整理\r\n\r\n## 关于谜题\r\n\r\n目前本项目已经提供了35个谜题。\r\n本人曾开发[海龟汤模拟器](https://www.hgtang.com)，该网站有评分功能。目前的35个谜题来自于我和一些热心用户为该网站搜集的谜题。依据该网站上各谜题的评分，推荐游玩的谜题如下：\r\n\r\n- 忠诚的狗\r\n- 100元钱\r\n- 爱犬\r\n- 治病\r\n- 祭日\r\n- 电梯里的人\r\n- 延迟死亡\r\n- 生意\r\n- 裤子破了\r\n- 要好的朋友\r\n\r\n欢迎你为本项目贡献更多的谜题。你可以在haiguitang_mcp/puzzles文件夹中加入新的谜题文件然后发起Pull Request。\r\n\r\n注意：\r\n\r\n- 如果你希望用户游玩之前有所预警，你可以在标题，也就是谜题文件的名称中注明。\r\n- 请注意海龟汤的版权问题。\r\n- 你可以在海龟汤文件中添加作者和提交者信息。\r\n\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "games",
        "gaming",
        "haiguitangmcp",
        "soup games",
        "games ai",
        "turtle soup"
      ],
      "category": "gaming-and-game-development"
    },
    "yamaton--mcp-dice": {
      "owner": "yamaton",
      "name": "mcp-dice",
      "url": "https://github.com/yamaton/mcp-dice",
      "imageUrl": "/freedevtools/mcp/pfp/yamaton.webp",
      "description": "Rolls dice using standard notation and returns results with their total sum, including individual roll outcomes.",
      "stars": 1,
      "forks": 6,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-03-07T19:22:53Z",
      "readme_content": "# mcp-dice: A MCP Server for Rolling Dice\n\n[![smithery badge](https://smithery.ai/badge/mcp-dice)](https://smithery.ai/protocol/mcp-dice)\n![screenshot](https://github.com/user-attachments/assets/ff7615b8-46ba-4be5-8287-8e1bf348ae28)\n\nA Model Context Protocol (MCP) server that enables Large Language Models (LLMs) to roll dice. It accepts standard dice notation (e.g., `1d20`) and returns both individual rolls and their sum.\n\n<a href=\"https://glama.ai/mcp/servers/vzu553gv26\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/vzu553gv26/badge\" /></a>\n\n## Features\n\n- Supports standard dice notation (e.g., `1d20`, `3d6`, `2d8+1`)\n- Returns both individual rolls and the total sum\n- Easy integration with Claude Desktop\n- Compatible with MCP Inspector for debugging\n\n## Installation\n\n### Installing via Smithery\n\nTo install Dice Roller for Claude Desktop automatically via [Smithery](https://smithery.ai/protocol/mcp-dice):\n\n```bash\nnpx @smithery/cli install mcp-dice --client claude\n```\n\nMake `uv` available: https://docs.astral.sh/uv/getting-started/installation/\n\n## Usage\n\n### Basic Command Line Usage\n\n```shell\n# Using uvx\nuvx mcp-dice\n```\n\n### Input Format\n\nThe server accepts a JSON object with a `notation` field:\n```json\n{\n  \"notation\": \"2d6+3\"\n}\n```\n\nExample responses:\n```json\n{\n  \"rolls\": [\n    3,\n    1\n  ],\n  \"sum\": 4,\n  \"modifier\": 3,\n  \"total\": 7,\n  \"notation\": \"2d6+3\",\n  \"timestamp\": \"2024-12-03T16:36:38.926452\"\n}\n```\n\n## Claude Desktop Configuration\n\n### Location\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n### Examples\n\n<details>\n<summary>macOS Configuration</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"dice\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-dice\"]\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary>WSL Configuration</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"dice\": {\n      \"command\": \"wsl\",\n      \"args\": [\n        \"-e\",\n        \"zsh\",\n        \"-lc\",\n        \"uvx mcp-dice\"\n      ]\n    }\n  }\n}\n```\n\nNote: Replace `zsh` with your login shell.\n</details>\n\n## Development and Debugging\n\n### Installing Development Dependencies\n\n```shell\n# Clone the repository\ngit clone https://github.com/yourusername/mcp-dice\ncd mcp-dice\n\n# Install development dependencies\nuv pip install -e \".[dev]\"\n```\n\n### Running Tests\n\n```shell\nuv run pytest\n```\n\n### Using MCP Inspector\n\nThe [MCP Inspector](https://github.com/modelcontextprotocol/inspector) is a useful tool for debugging your MCP server. Install and run it using npm:\n\n```shell\nnpx @modelcontextprotocol/inspector uvx mcp-dice\n```\n\n### Claude Desktop Configuration for Development\n\n<details>\n<summary>macOS configuration (local dev)</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"dice\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--directory\",\n        \"path/to/mcp-dice-repo\",\n        \"mcp-dice\"\n      ]\n    }\n  }\n}\n```\n\nNote: Replace `path/to/mcp-dice-repo` with the path to the repository on your filesystem.\n</details>\n\n<details>\n<summary>Windows (WSL) configuration (local dev)</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"dice\": {\n      \"command\": \"wsl\",\n      \"args\": [\n        \"-e\",\n        \"zsh\",\n        \"-lc\",\n        \"uv run --directory path/to/mcp-dice-repo mcp-dice\"\n      ]\n    }\n  }\n}\n```\n\nNote: Replace `zsh` with your login shell. Also, replace `path/to/mcp-dice-repo` with the path to the repository on your WSL filesystem.\n</details>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "dice",
        "rolls",
        "outcomes",
        "mcp dice",
        "rolls dice",
        "dice rolls"
      ],
      "category": "gaming-and-game-development"
    },
    "yuniko-software--minecraft-mcp-server": {
      "owner": "yuniko-software",
      "name": "minecraft-mcp-server",
      "url": "https://github.com/yuniko-software/minecraft-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/yuniko-software.webp",
      "description": "Control a Minecraft character using natural language commands to perform various actions in the game world such as building, moving, and chatting. The bot integrates with the Mineflayer API and is designed to work with advanced language models via the Model Context Protocol.",
      "stars": 348,
      "forks": 28,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-04T11:24:30Z",
      "readme_content": "# Minecraft MCP Server\n\n> ⚠️ **CLAUDE DESKTOP DUAL LAUNCH WARNING**: Claude Desktop may sometimes launch MCP servers twice ([known issue](https://github.com/modelcontextprotocol/servers/issues/812)), which can lead to incorrect behavior of this MCP server. If you experience issues, restart Claude Desktop application to fix the problem. Alternatively, consider using other MCP clients.\n\nhttps://github.com/user-attachments/assets/6f17f329-3991-4bc7-badd-7cde9aacb92f\n\nA Minecraft bot powered by large language models and [Mineflayer API](https://github.com/PrismarineJS/mineflayer). This bot uses the [Model Context Protocol](https://github.com/modelcontextprotocol) (MCP) to enable Claude and other supported models to control a Minecraft character.\n\n<a href=\"https://glama.ai/mcp/servers/@yuniko-software/minecraft-mcp-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@yuniko-software/minecraft-mcp-server/badge\" alt=\"mcp-minecraft MCP server\" />\n</a>\n\n## Prerequisites\n\n- Git\n- Node.js\n- A running Minecraft game (the setup below was tested with Minecraft 1.21.8 Java Edition included in Microsoft Game Pass)\n- An MCP-compatible client. Claude Desktop will be used as an example, but other MCP clients are also supported\n\n## Getting started\n\nThis bot is designed to be used with Claude Desktop through the Model Context Protocol (MCP).\n\n### Run Minecraft\n\nCreate a singleplayer world and open it to LAN (`ESC -> Open to LAN`). Bot will try to connect using port `25565` and hostname `localhost`. These parameters could be configured in `claude_desktop_config.json` on a next step. \n\n### MCP Configuration\n\nMake sure that [Claude Desktop](https://claude.ai/download) is installed. Open `File -> Settings -> Developer -> Edit Config`. It should open installation directory. Find file with a name `claude_desktop_config.json` and insert the following code:\n\n```json\n{\n  \"mcpServers\": {\n    \"minecraft\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"github:yuniko-software/minecraft-mcp-server\",\n        \"--host\",\n        \"localhost\",\n        \"--port\",\n        \"25565\",\n        \"--username\",\n        \"ClaudeBot\"\n      ]\n    }\n  }\n}\n```\n\nDouble-check that right `--port` and `--host` parameters were used. Make sure to completely reboot the Claude Desktop application (should be closed in OS tray). \n\n## Running\n\nMake sure Minecraft game is running and the world is opened to LAN. Then start Claude Desktop application and the bot should join the game. \n\nIt could take some time for Claude Desktop to boot the MCP server. The marker that the server has booted successfully:\n\n![image](https://github.com/user-attachments/assets/39211d34-c3b3-46d6-bc80-353fd4fba690)\n\nYou can give bot any commands through any active Claude Desktop chat. You can also upload images of buildings and ask bot to build them 😁\n\nDon't forget to mention that bot should do something in Minecraft in your prompt. Because saying this is a trigger to run MCP server. It will ask for your permissions.\n\nUsing Claude 4.0 Sonnet could give you some interesting results. The bot-agent would be really smart 🫡\n\nExample usage: [shared Claude chat](https://claude.ai/share/535d5f69-f102-4cdb-9801-f74ea5709c0b)\n\n## Available Commands\n\nOnce connected to a Minecraft server, Claude can use these commands:\n\n### Movement\n- `get-position` - Get the current position of the bot\n- `move-to-position` - Move to specific coordinates\n- `look-at` - Make the bot look at specific coordinates\n- `jump` - Make the bot jump\n- `move-in-direction` - Move in a specific direction for a duration\n\n### Flight\n- `fly-to` - Make the bot fly directly to specific coordinates\n\n### Inventory\n- `list-inventory` - List all items in the bot's inventory\n- `find-item` - Find a specific item in inventory\n- `equip-item` - Equip a specific item\n\n### Block Interaction\n- `place-block` - Place a block at specified coordinates\n- `dig-block` - Dig a block at specified coordinates\n- `get-block-info` - Get information about a block\n- `find-block` - Find the nearest block of a specific type\n\n### Entity Interaction\n- `find-entity` - Find the nearest entity of a specific type\n\n### Communication\n- `send-chat` - Send a chat message in-game\n- `read-chat` - Get recent chat messages from players\n\n### Game State\n- `detect-gamemode` - Detect the gamemode on game\n\n## Contributing\n\nThis application was made in just two days, and the code is really simple and straightforward. All refactoring commits, functional and test contributions, issues and discussion are greatly appreciated!\n\nFeel free to submit pull requests or open issues for improvements. Some areas that could use enhancement:\n\n- Additional documentation\n- More robust error handling\n- Tests for different components\n- New functionality and commands\n\nTo get started with contributing, please see [CONTRIBUTING.md](CONTRIBUTING.md).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "minecraft",
        "yuniko",
        "commands",
        "software minecraft",
        "minecraft mcp",
        "control minecraft"
      ],
      "category": "gaming-and-game-development"
    },
    "zq19--CatchBall": {
      "owner": "zq19",
      "name": "CatchBall",
      "url": "https://github.com/zq19/CatchBall",
      "imageUrl": "/freedevtools/mcp/pfp/zq19.webp",
      "description": "Provide a relaxing game where players control a slide block to catch a falling ball using keyboard keys. Players can pause the game and choose to replay or exit when they miss the ball, with no scores or rankings to promote a stress-free experience.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2021-08-06T03:26:48Z",
      "readme_content": "# CatchBall\n_This is a game use a slide_block to catch the ball,you can play the game when you need relax._\n## Tips\n_Try to use the LEFT_KEY and the RIGHT_KEY to contrl the slide_block to catch the ball.\nwhen you miss the ball,you could chose replay or exit the game.\nYou can use SPACE_KEY to pause the game if you need._\n## Note\n_There is no score_board and rank,because i hope you can just to relax yourself when you need._\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "catchball",
        "replay",
        "zq19",
        "zq19 catchball",
        "catchball provide",
        "pause game"
      ],
      "category": "gaming-and-game-development"
    }
  }
}