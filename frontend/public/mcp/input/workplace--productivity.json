{
  "category": "workplace--productivity",
  "categoryDisplay": "Workplace & Productivity",
  "description": "",
  "totalRepositories": 5,
  "repositories": {
    "bivex--kanboard-mcp": {
      "owner": "bivex",
      "name": "kanboard-mcp",
      "url": "https://github.com/bivex/kanboard-mcp",
      "imageUrl": "",
      "description": "A Model Context Protocol (MCP) server written in Go that empowers AI agents and Large Language Models (LLMs) to seamlessly interact with Kanboard. It transforms natural language commands into Kanboard API calls, enabling intelligent automation of project, task, and user management, streamlining workflows, and enhancing productivity.",
      "stars": 11,
      "forks": 3,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-09-23T15:03:24Z",
      "readme_content": "# 🚀 Kanboard MCP Server\n\n> **Model Context Protocol (MCP) Server for Kanboard Integration**\n\nA powerful Go-based MCP server that enables seamless integration between AI assistants (like Claude Desktop, Cursor) and Kanboard project management system. Manage your Kanboard projects, tasks, users, and workflows directly through natural language commands.\n\n![Kanboard MCP Server Demo](new-project.gif)\n\n![Go](https://img.shields.io/badge/Go-1.21+-blue?style=for-the-badge&logo=go)\n![License](https://img.shields.io/badge/License-MIT-green?style=for-the-badge)\n![MCP](https://img.shields.io/badge/MCP-Protocol-orange?style=for-the-badge)\n\n⚠️ **Warning:** To avoid issues like these:\n\n![Proxy error example 1](https://github.com/user-attachments/assets/db9c0867-6cfd-4c30-831b-d2cc948a4ff5)\n![Proxy error example 2](https://github.com/user-attachments/assets/90a12994-62d1-426f-96af-c8fd63086884)\n\nWe recommend using [mcpproxy](https://github.com/bivex/mcpproxy) as a proxy solution.\n\n\n## 📋 Table of Contents\n\n- [✨ Features](#-features)\n- [🚀 Quick Start](#-quick-start)\n- [⚙️ Configuration](#️-configuration)\n- [🛠️ Available Tools](#️-available-tools)\n- [📖 Usage Examples](#-usage-examples)\n- [🔧 Development](#-development)\n- [📄 License](#-license)\n\n## ✨ Features\n\n- 🔗 **Seamless Kanboard Integration** - Direct API communication with Kanboard\n- 🤖 **Natural Language Processing** - Use plain English to manage your projects\n- 📊 **Complete Project Management** - Handle projects, tasks, users, columns, and more\n- 🔐 **Secure Authentication** - Support for both API key and username/password auth\n- ⚡ **High Performance** - Built with Go for optimal performance\n- 🎯 **MCP Standard** - Compatible with all MCP clients\n\n## 🚀 Quick Start\n\n### Prerequisites\n\n- Go 1.21 or higher\n- Kanboard instance with API access\n- MCP-compatible client (Cursor, Claude Desktop, etc.)\n\n### Installation\n\n1. **Clone the repository:**\n   ```bash\n   git clone https://github.com/bivex/kanboard-mcp.git\n   cd kanboard-mcp\n   ```\n\n2. **Build the executable:**\n\n   **On Windows:**\n   ```cmd\n   build-release.bat\n   ```\n\n   **On Linux/macOS:**\n   ```bash\n   ./build-release.sh\n   ```\n\n   **Manual build:**\n   ```bash\n   go build -ldflags=\"-s -w\" -o kanboard-mcp .\n   ```\n\n## ⚙️ Configuration\n\n### 1. Environment Variables\n\nSet up your Kanboard credentials using environment variables:\n\n```bash\nexport KANBOARD_API_ENDPOINT=\"https://your-kanboard-url/jsonrpc.php\"\nexport KANBOARD_API_KEY=\"your-kanboard-api-key\"\nexport KANBOARD_USERNAME=\"your-kanboard-username\"\nexport KANBOARD_PASSWORD=\"your-kanboard-password\"\n```\n\n### 2. MCP Client Configuration\n\nCreate the MCP configuration file for your client:\n\n**Location:**\n- **Windows:** `C:\\Users\\YOUR_USERNAME\\AppData\\Roaming\\Cursor\\.cursor\\mcp_config.json`\n- **Linux/macOS:** `~/.cursor/mcp_config.json`\n\n**Configuration:**\n```json\n{\n  \"mcpServers\": {\n    \"kanboard-mcp-server\": {\n      \"command\": \"/path/to/your/kanboard-mcp\",\n      \"args\": [],\n      \"env\": {\n        \"KANBOARD_API_ENDPOINT\": \"https://your-kanboard-url/jsonrpc.php\",\n        \"KANBOARD_API_KEY\": \"your-kanboard-api-key\",\n        \"KANBOARD_USERNAME\": \"your-kanboard-username\",\n        \"KANBOARD_PASSWORD\": \"your-kanboard-password\"\n      }\n    }\n  }\n}\n```\n\n### 3. Restart Your Client\n\nAfter saving the configuration, restart your MCP client (Cursor, Claude Desktop, etc.) for changes to take effect.\n\n## 🛠️ Available Tools\n\n### 📁 Project Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `get_projects` | 📋 List all projects | \"Show me all Kanboard projects\" |\n| `create_project` | ➕ Create new projects | \"Create a project called 'Website Redesign' with description 'Redesign the company website' and owner 1\" |\n| `get_project_by_id` | 🔍 Get project information by ID | \"Get project details for ID 123\" |\n| `get_project_by_name` | 🔍 Get project information by name | \"Get project details for name 'My Project'\" |\n| `get_project_by_identifier` | 🔍 Get project information by identifier | \"Get project details for identifier 'WEB-APP'\" |\n| `get_project_by_email` | 🔍 Get project information by email | \"Get project details for email 'project@example.com'\" |\n| `get_all_projects` | 📋 Get all available projects | \"Show me all available projects\" |\n| `update_project` | ✏️ Update a project | \"Update project 1 with new name 'New Website' and description 'Updated description'\" |\n| `remove_project` | 🗑️ Remove a project | \"Remove project with ID 456\" |\n| `enable_project` | ✅ Enable a project | \"Enable project 123\" |\n| `disable_project` | 🚫 Disable a project | \"Disable project 123\" |\n| `enable_project_public_access` | 🌐 Enable public access for a given project | \"Enable public access for project 123\" |\n| `disable_project_public_access` | 🔒 Disable public access for a given project | \"Disable public access for project 123\" |\n| `get_project_activity` | 📢 Get activity stream for a project | \"Show me activity for project 123\" |\n| `get_project_activities` | 📊 Get Activityfeed for Project(s) | \"Get activities for projects 1, 2, and 3\" |\n\n### 📝 Task Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `get_tasks` | 📋 Get project tasks | \"Get tasks for 'Website Redesign' project\" |\n| `create_task` | ➕ Create new tasks | \"Create task 'Design homepage' in 'Website Redesign'\" |\n| `update_task` | ✏️ Modify existing tasks | \"Update task 123 with description 'New requirements'\" |\n| `delete_task` | 🗑️ Remove tasks | \"Delete task with ID 456\" |\n| `get_task` | 🔍 Get task by the unique id | \"Get details for task 789\" |\n| `get_task_by_reference` | 🔍 Get task by the external reference | \"Get task for project 1 with reference 'TICKET-1234'\" |\n| `get_all_tasks` | 📋 Get all available tasks | \"Get all active tasks for project 1\" |\n| `get_overdue_tasks` | ⏰ Get all overdue tasks | \"Show me all overdue tasks\" |\n| `get_overdue_tasks_by_project` | ⏰ Get all overdue tasks for a special project | \"Show me overdue tasks for project 1\" |\n| `open_task` | ✅ Set a task to the status open | \"Open task 123\" |\n| `close_task` | ❌ Set a task to the status close | \"Close task 123\" |\n| `move_task_position` | ➡️ Move a task to another column, position or swimlane inside the same board | \"Move task 123 to column 2, position 1, swimlane 1 in project 1\" |\n| `move_task_to_project` | ➡️ Move a task to another project | \"Move task 123 to project 456\" |\n| `duplicate_task_to_project` | 📋 Duplicate a task to another project | \"Duplicate task 123 to project 456\" |\n| `search_tasks` | 🔍 Find tasks by using the search engine | \"Search tasks in project 2 for query 'assignee:nobody'\" |\n| `assign_task` | 👤 Assign tasks to users | \"Assign the API task to John\" |\n| `set_task_due_date` | 📅 Set task deadlines | \"Set due date for login task to 2024-01-15\" |\n\n### 💬 Comment Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `create_comment` | ➕ Create a new comment | \"Create a comment 'Meeting notes' for task 123 by user 1, visible to app-managers\" |\n| `get_task_comments` | 📋 Get task comments | \"Show all comments for task 123\" |\n| `get_comment` | 🔍 Get comment information | \"Get details for comment 789\" |\n| `update_comment` | ✏️ Update a comment | \"Update comment 456 content to 'Revised notes'\" |\n| `remove_comment` | 🗑️ Remove a comment | \"Remove comment with ID 101\" |\n\n### 🏗️ Column Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `get_columns` | 📋 List project columns | \"Show me all columns in project 123\" |\n| `get_column` | 🔍 Get a single column | \"Get details for column 456\" |\n| `create_column` | ➕ Add new columns | \"Create a 'Testing' column in project 123 with 5 task limit and description 'For UAT testing'\" |\n| `update_column` | ✏️ Modify column settings | \"Change column 123 title to 'Review' and limit to 3 tasks, with description 'Needs final review'\" |\n| `change_column_position` | 🔄 Change column positions | \"Move column 123 to position 3 in project 456\" |\n| `delete_column` | 🗑️ Remove columns | \"Delete the unused 'Draft' column\" |\n\n### 🏷️ Category Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `get_categories` | 📋 List project categories | \"Show me all task categories for project 123\" |\n| `get_category` | 🔍 Get category information | \"Get details for category 456\" |\n| `create_category` | ➕ Add task categories | \"Create a 'Bug Fixes' category in project 123 with color 'red'\" |\n| `update_category` | ✏️ Modify categories | \"Rename category 123 to 'Critical Issues' and set color to 'blue'\" |\n| `delete_category` | 🗑️ Remove categories | \"Delete the unused 'Archive' category\" |\n\n### 🏊 Swimlane Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `get_swimlanes` | 📋 List all swimlanes of a project (enabled or disabled) and sorted by position | \"Show me all swimlanes for project 1\" |\n| `get_active_swimlanes` | 📋 Get the list of enabled swimlanes of a project (include default swimlane if enabled) | \"Get active swimlanes for project 1\" |\n| `get_swimlane` | 🔍 Get a swimlane by ID | \"Get swimlane details for ID 1\" |\n| `get_swimlane_by_id` | 🔍 Get a swimlane by ID | \"Get swimlane details for ID 1\" |\n| `get_swimlane_by_name` | 🔍 Get a swimlane by name | \"Get swimlane details for project 1 with name 'Swimlane 1'\" |\n| `change_swimlane_position` | 🔄 Move a swimlane's position (only for active swimlanes) | \"Change swimlane 2 position to 3 in project 1\" |\n| `create_swimlane` | ➕ Add a new swimlane | \"Create a swimlane 'Frontend Team' in project 1\" |\n| `update_swimlane` | ✏️ Update swimlane properties | \"Update swimlane 1 for project 1 with new name 'Cross-Platform Team'\" |\n| `remove_swimlane` | 🗑️ Remove a swimlane | \"Remove swimlane 1 from project 2\" |\n| `disable_swimlane` | 🚫 Disable a swimlane | \"Disable swimlane 1 from project 2\" |\n| `enable_swimlane` | ✅ Enable a swimlane | \"Enable swimlane 1 from project 2\" |\n\n### 📋 Board Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `get_board` | 📋 Get all necessary information to display a board | \"Show me the board for project 123\" |\n\n### 🧑‍💻 Current User Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `get_me` | 👤 Get logged user session | \"Get my user session information\" |\n| `get_my_dashboard` | 📊 Get the dashboard of the logged user | \"Show me my dashboard\" |\n| `get_my_activity_stream` | 📢 Get the last 100 events for the logged user | \"Show me my recent activity\" |\n| `create_my_private_project` | ➕ Create a private project for the logged user | \"Create a private project named 'My Secret Project' with description 'For personal tasks'\" |\n| `get_my_projects_list` | 📋 Get projects of the connected user | \"List all projects I'm involved in\" |\n| `get_my_overdue_tasks` | ⏰ Get my overdue tasks | \"Show me all my tasks that are overdue\" |\n| `get_my_projects` | 📝 Get projects of connected user with full details | \"Get detailed information about all my projects\" |\n\n### 🔗 External Task Link Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `get_external_task_link_types` | 📋 Get all registered external link providers | \"Show me all external link types\" |\n| `get_ext_link_provider_deps` | ⛓️ Get available dependencies for a given provider | \"Get dependencies for 'weblink' provider\" |\n| `create_external_task_link` | ➕ Create a new external link | \"Create an external link for task 123 to 'http://example.com/doc.pdf' with dependency 'related' and type 'attachment'\" |\n| `update_external_task_link` | ✏️ Update external task link | \"Update external link 456 for task 789 with new title 'Updated Document' and URL 'http://new.example.com/doc.pdf'\" |\n| `get_external_task_link_by_id` | 🔍 Get an external task link by ID | \"Get external link 456 for task 789\" |\n| `get_all_external_task_links` | 📋 Get all external links attached to a task | \"Show all external links for task 123\" |\n| `remove_external_task_link` | 🗑️ Remove an external link | \"Remove external link 456 from task 789\" |\n\n### 🔗 Internal Task Link Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `create_task_link` | ➕ Create a link between two tasks | \"Create a link between task 123 and task 456 with link type 1\" |\n| `update_task_link` | ✏️ Update task link | \"Update task link 789 between task 123 and task 456 with new link type 2\" |\n| `get_task_link_by_id` | 🔍 Get a task link by ID | \"Get details for task link 101\" |\n| `get_all_task_links` | 📋 Get all links related to a task | \"Show all links for task 123\" |\n| `remove_task_link` | 🗑️ Remove a link between two tasks | \"Remove task link 101\" |\n\n### 🔗 Link Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `get_all_links` | 📋 Get the list of possible relations between tasks | \"Show all possible task relations\" |\n| `get_opposite_link_id` | 🔍 Get the opposite link id of a task link | \"Get the opposite link ID for link 2\" |\n| `get_link_by_label` | 🔍 Get a link by label | \"Get details for link with label 'blocks'\" |\n| `get_link_by_id` | 🔍 Get a link by ID | \"Get details for link with ID 4\" |\n| `create_link` | ➕ Create a new task relation | \"Create a link 'foo' with opposite label 'bar'\" |\n| `update_link` | ✏️ Update a link | \"Update link 14 with opposite link 12 and label 'boo'\" |\n| `remove_link` | 🗑️ Remove a link | \"Remove link with ID 14\" |\n\n### 📂 Project File Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `create_project_file` | ➕ Create and upload a new project attachment | \"Create a file 'My Document.pdf' for project 1 with base64 content 'Zm9vYmFy'\" |\n| `get_all_project_files` | 📋 Get all files attached to a project | \"Show all files for project 123\" |\n| `get_project_file` | 🔍 Get file information | \"Get details for file 456 in project 123\" |\n| `download_project_file` | 📥 Download project file contents (encoded in base64) | \"Download file 456 from project 123\" |\n| `remove_project_file` | 🗑️ Remove a file associated to a project | \"Remove file 456 from project 123\" |\n| `remove_all_project_files` | 🗑️ Remove all files associated to a project | \"Remove all files from project 123\" |\n\n### 📝 Project Metadata Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `get_project_metadata` | 📋 Get Project metadata | \"Get all metadata for project 123\" |\n| `get_project_metadata_by_name` | 🔍 Fetch single metadata value | \"Get metadata 'my_key' for project 123\" |\n| `save_project_metadata` | 💾 Add or update metadata | \"Save metadata 'key1:value1, key2:value2' for project 123\" |\n| `remove_project_metadata` | 🗑️ Remove a project metadata | \"Remove metadata 'my_key' from project 123\" |\n\n### 🔐 Project Permission Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `get_project_users` | 📋 Get all members of a project | \"Show all users in project 123\" |\n| `get_assignable_users` | 👥 Get users that can be assigned to a task for a project (all members except viewers) | \"Get assignable users for project 123\" |\n| `add_project_user` | ➕ Grant access to a project for a user | \"Add user 1 to project 123 with role 'project-member'\" |\n| `add_project_group` | ➕ Grant access to a project for a group | \"Add group 456 to project 123 with role 'project-viewer'\" |\n| `remove_project_user` | 🗑️ Revoke user access to a project | \"Remove user 1 from project 123\" |\n| `remove_project_group` | 🗑️ Revoke group access to a project | \"Remove group 456 from project 123\" |\n| `change_project_user_role` | ✏️ Change role of a user for a project | \"Change user 1's role in project 123 to 'project-manager'\" |\n| `change_project_group_role` | ✏️ Change role of a group for a project | \"Change group 456's role in project 123 to 'project-manager'\" |\n| `get_project_user_role` | 🔍 Get the role of a user for a given project | \"Get the role of user 1 in project 123\" |\n\n### 📝 Subtask Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `create_subtask` | ➕ Create a new subtask | \"Create a subtask 'Review designs' for task 123 with user 1 assigned\" |\n| `get_subtask` | 🔍 Get subtask information | \"Get details for subtask 456\" |\n| `get_all_subtasks` | 📋 Get all available subtasks for a task | \"Show all subtasks for task 123\" |\n| `update_subtask` | ✏️ Update a subtask | \"Update subtask 456 for task 123 to status 2 (Done)\" |\n| `remove_subtask` | 🗑️ Remove a subtask | \"Remove subtask with ID 456\" |\n\n### ⏰ Subtask Time Tracking\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `has_subtask_timer` | ⏱️ Check if a timer is started for the given subtask and user | \"Check if a timer is active for subtask 123 by user 4\" |\n| `set_subtask_start_time` | ▶️ Start subtask timer for a user | \"Start timer for subtask 123 by user 4\" |\n| `set_subtask_end_time` | ⏹️ Stop subtask timer for a user | \"Stop timer for subtask 123 by user 4\" |\n| `get_subtask_time_spent` | 📊 Get time spent on a subtask for a user | \"Get time spent on subtask 123 by user 4\" |\n\n### 🏷️ Tag Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `get_all_tags` | 📋 Get all tags | \"Show all available tags\" |\n| `get_tags_by_project` | 📋 Get all tags for a given project | \"Show tags for project 123\" |\n| `create_tag` | ➕ Create a new tag | \"Create tag 'backend' for project 123 with color 1\" |\n| `update_tag` | ✏️ Rename a tag | \"Rename tag 456 to 'frontend' and set color to 2\" |\n| `remove_tag` | 🗑️ Remove a tag | \"Remove tag with ID 456\" |\n| `set_task_tags` | 🏷️ Assign/Create/Update tags for a task | \"Set tags 'urgent', 'bug' for task 123 in project 456\" |\n| `get_task_tags` | 🔍 Get assigned tags to a task | \"Get tags assigned to task 123\" |\n\n### 📂 Task File Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `create_task_file` | ➕ Create and upload a new task attachment | \"Create a file 'meeting_notes.txt' for project 1 with task 2 and base64 content 'Zm9vYmFy'\" |\n| `get_all_task_files` | 📋 Get all files attached to task | \"Show all files for task 123\" |\n| `get_task_file` | 🔍 Get file information | \"Get details for file 456\" |\n| `download_task_file` | 📥 Download file contents (encoded in base64) | \"Download file 456\" |\n| `remove_task_file` | 🗑️ Remove file | \"Remove file with ID 456\" |\n| `remove_all_task_files` | 🗑️ Remove all files associated to a task | \"Remove all files from task 123\" |\n\n### 📝 Task Metadata Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `get_task_metadata` | 📋 Get all metadata related to a task by task unique id | \"Get all metadata for task 1\" |\n| `get_task_metadata_by_name` | 🔍 Get metadata related to a task by task unique id and metakey (name) | \"Get metadata 'metaKey1' for task 1\" |\n| `save_task_metadata` | 💾 Save/update task metadata | \"Save metadata 'metaName:metaValue' for task 1\" |\n| `remove_task_metadata` | 🗑️ Remove task metadata by name | \"Remove metadata 'metaKey1' from task 1\" |\n\n### ⚙️ Application Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `get_version` | 📋 Get the application version | \"What is the Kanboard version?\" |\n| `get_timezone` | 🌐 Get the timezone of the connected user | \"What is my current timezone?\" |\n| `get_default_task_colors` | 🌈 Get all default task colors | \"Show me all default task colors\" |\n| `get_default_task_color` | 🎨 Get default task color | \"What is the default task color?\" |\n| `get_color_list` | 📋 Get the list of task colors | \"List all available task colors\" |\n| `get_application_roles` | 👥 Get the application roles | \"List all application roles\" |\n| `get_project_roles` | 👥 Get the project roles | \"List all project roles\" |\n\n### 🤖 Automatic Actions Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `get_available_actions` | 📋 Get list of available automatic actions | \"Show available automatic actions\" |\n| `get_available_action_events` | 📋 Get list of available events for actions | \"Show available action events\" |\n| `get_compatible_action_events` | 🔍 Get list of events compatible with an action | \"Get compatible events for action 'TaskClose'\" |\n| `get_actions` | 📋 Get list of actions for a project | \"Get actions for project 123\" |\n| `create_action` | ➕ Create an action | \"Create an action for project 1, event 'task.move.column', action '\\Kanboard\\Action\\TaskClose', with params 'column_id:3'\" |\n| `remove_action` | 🗑️ Remove an action | \"Remove action with ID 456\" |\n\n### 👥 Group Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `create_group` | ➕ Create a new group | \"Create a group named 'Development Team' with external ID 'dev_001'\" |\n| `update_group` | ✏️ Update a group | \"Rename group 123 to 'QA Team' and change its external ID to 'qa_001'\" |\n| `remove_group` | 🗑️ Remove a group | \"Remove group with ID 456\" |\n| `get_group` | 🔍 Get one group | \"Get details for group 789\" |\n| `get_all_groups` | 📋 Get all groups | \"Show me all user groups\" |\n\n### 👥 Group Member Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `get_member_groups` | 📋 Get all groups for a given user | \"Show me all groups for user 1\" |\n| `get_group_members` | 👥 Get all members of a group | \"List all members of group 123\" |\n| `add_group_member` | ➕ Add a user to a group | \"Add user 456 to group 789\" |\n| `remove_group_member` | 🗑️ Remove a user from a group | \"Remove user 456 from group 789\" |\n| `is_group_member` | ❓ Check if a user is member of a group | \"Is user 456 a member of group 789?\" |\n\n### 👥 User Management\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `get_users` | 📋 List all system users | \"Show me all users\" |\n| `create_user` | ➕ Create a new user | \"Create user 'john' with password '123456'\" |\n| `create_ldap_user` | ➕ Create a new user authenticated by LDAP | \"Create LDAP user 'jane'\" |\n| `get_user` | 🔍 Get user information by ID | \"Get user details for ID 123\" |\n| `get_user_by_name` | 🔍 Get user information by username | \"Get user details for 'john'\" |\n| `update_user` | ✏️ Update a user | \"Update user 123 with role 'app-manager'\" |\n| `remove_user` | 🗑️ Remove a user | \"Remove user with ID 456\" |\n| `disable_user` | ❌ Disable a user | \"Disable user 123\" |\n| `enable_user` | ✅ Enable a user | \"Enable user 123\" |\n| `is_active_user` | 🔍 Check if a user is active | \"Check if user 123 is active\" |\n| `assign_user_to_project` | 👤 Assign a user to a project with a specific role | \"Assign user 1 to project 'Website' with role 'project-member'\" |\n\n### 🏃 ScrumSprint Plugin API\n\n| Tool | Description | Example |\n|------|-------------|---------|\n| `create_sprint` | ➕ Create a new sprint | \"Create a sprint named 'Sprint 1' in project 'My Project' starting '2024-01-01' and ending '2024-01-14' with goal 'Complete onboarding features'\" |\n| `get_sprint_by_id` | 🔍 Retrieve a sprint by its ID | \"Get details for sprint with ID 123\" |\n| `update_sprint` | ✏️ Update an existing sprint | \"Update sprint 123 in project 'My Project' to be completed\" |\n| `remove_sprint` | 🗑️ Remove a sprint by its ID | \"Remove sprint with ID 123\" |\n| `get_all_sprints_by_project` | 📋 Retrieve all sprints for a given project | \"Get all sprints for project 'My Project'\" |\n\n## 📖 Usage Examples\n\n### Project Workflow\n\n```bash\n# Create a new project\n\"Create a new project called 'Mobile App Development'\"\n\n# Add tasks to the project\n\"Create task 'Design UI mockups' in project 'Mobile App Development'\"\n\"Create task 'Set up development environment' in project 'Mobile App Development'\"\n\n# Get all tasks\n\"Get tasks for 'Mobile App Development' project\"\n\n# Move tasks between columns\n\"Move task 1 to 'In Progress' column\"\n\"Move task 2 to 'Done' column\"\n```\n\n### Team Management\n\n```bash\n# Create a new team member\n\"Create user 'alice.smith' with password 'secure123' and email 'alice@company.com'\"\n\n# Assign user to project\n\"Assign user 'alice.smith' to project 'Mobile App Development' as project-member\"\n\n# Assign tasks to team members\n\"Assign task 1 to user 'alice.smith'\"\n```\n\n### Task Organization\n\n```bash\n# Create categories for better organization\n\"Create category 'Critical Bugs'\"\n\"Create category 'Feature Requests'\"\n\n# Add comments to tasks\n\"Add comment 'This needs urgent attention' to task 5\"\n\n# Set deadlines\n\"Set due date for task 3 to 2024-01-20\"\n```\n\n## 🔧 Development\n\n### Building from Source\n\n```bash\n# Clone the repository\ngit clone https://github.com/bivex/kanboard-mcp.git\ncd kanboard-mcp\n\n# Install dependencies\ngo mod download\n\n# Build the application\ngo build -o kanboard-mcp .\n\n# Run tests\ngo test ./...\n```\n\n### Project Structure\n\n```\nkanboard-mcp/\n├── main.go              # Main application entry point\n├── go.mod               # Go module dependencies\n├── go.sum               # Dependency checksums\n├── build-release.bat    # Windows build script\n├── build-release.sh     # Unix build script\n├── README.md            # This file\n└── LICENSE.md           # License information\n```\n\n### Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details.\n\n---\n\n<div align=\"center\">\n\n**Made with ❤️ for the Kanboard community**\n\n[![GitHub stars](https://img.shields.io/github/stars/bivex/kanboard-mcp?style=social)](https://github.com/bivex/kanboard-mcp/stargazers)\n[![GitHub forks](https://img.shields.io/github/forks/bivex/kanboard-mcp?style=social)](https://github.com/bivex/kanboard-mcp/network)\n[![GitHub issues](https://img.shields.io/github/issues/bivex/kanboard-mcp)](https://github.com/bivex/kanboard-mcp/issues)\n\n</div>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kanboard",
        "workflows",
        "automation",
        "kanboard api",
        "kanboard mcp",
        "commands kanboard"
      ],
      "category": "workplace--productivity"
    },
    "giuseppe-coco--Google-Workspace-MCP-Server": {
      "owner": "giuseppe-coco",
      "name": "Google-Workspace-MCP-Server",
      "url": "https://github.com/giuseppe-coco/Google-Workspace-MCP-Server",
      "imageUrl": "",
      "description": "MCP server that seamlessly interacts with your Google Calendar, Gmail, Drive and so on.",
      "stars": 18,
      "forks": 7,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T00:35:33Z",
      "readme_content": "# Google Workspace MCP Server\n\nA Model Context Protocol (MCP) server that acts as a secure bridge between your personal Google Workspace account (Gmail, Calendar, etc.) and any MCP-compatible AI client, such as Claude Desktop.\n\n## Features\n\n*   **Google Calendar**:\n    *   Effortlessly list and search for events on your primary calendar within a specific date range.\n    *   Create new events with detailed information like title, description, start, and end times.\n    *   Update existing events, allowing for partial modifications such as changing the title or time.\n    *   Delete events directly from your calendar.\n*   **Gmail**:\n    *   Read the content of your most recent email to stay up-to-date.\n    *   Search for specific emails by their subject line to find important conversations.\n    *   Compose and send new emails directly from your account.\n*   **Google Drive**:\n    *   Search for files and folders using powerful query strings.\n    *   Create new Google Docs with a specified title and initial content.\n    *   Update the entire content of an existing Google Doc.\n    *   Manage your files by moving them to the bin or deleting them permanently.\n\n## Getting Started\n\nFollow these steps to set up the server and run the example AI agent.\n\n### Prerequisites\n\n*   Python 3.9+ and `uv` (or `pip`).\n*   A Google Cloud project with the necessary APIs enabled.\n*   Claude Desktop.\n\n### Step 1: Configure your Google Cloud Project\n\nYou need to authorize this application to access your Google data. This is a one-time setup.\n\n1.  **Go to the Google Cloud Console**: [https://console.cloud.google.com/](https://console.cloud.google.com/)\n2.  **Create a new project** (or use an existing one).\n3.  **Enable APIs**:\n    *   Go to \"APIs & Services\" -> \"Library\".\n    *   Search for and **Enable** the **Gmail API**.\n    *   Search for and **Enable** the **Google Calendar API**.\n    *   Search for and **Enable** the **Google Drive API**.\n4.  **Create OAuth Credentials**:\n    *   Go to \"APIs & Services\" -> \"Credentials\".\n    *   Click \"Create Credentials\" -> \"OAuth client ID\".\n    *   If prompted, configure the \"OAuth consent screen\". Choose **External** and provide a name for the app. You can skip most other fields for personal use. Add your Google account email as a Test User.\n    *   For \"Application type\", select **Desktop app**.\n    *   Give it a name (e.g., \"GSuite MCP Client\").\n5.  **Download Credentials**:\n    *   After creating the client ID, click the \"Download JSON\" icon.\n    *   Rename the downloaded file to `client_secrets.json` and place it in the **root directory of this project**.\n\n### Step 2: Install Dependencies\n\nClone this repository and install the required Python packages for both the server and the client.\n\n```bash\ngit clone <your-repo-url>\ncd <your-repo-name>\nuv venv # Create a virtual environment\nsource .venv/bin/activate # On Windows: .venv\\Scripts\\activate\n# Install server dependencies\nuv install -r requirements.txt\n```\n\n### Step 3: Run the One-Time Authorization\n\nBefore you can run the server, you need to authorize it with your Google account. Run the `get_credentials.py` script from your terminal:\n\n```bash\npython get_credentials.py\n```\n\n*   This will open a browser window.\n*   Log in with your Google account and grant the requested permissions.\n*   After you approve, the script will automatically create a `token.json` file in the project directory. This file stores your authorization tokens so you don't have to log in every time.\n\n### Step 4: Set Up and Run the AI Agent Client\n\nAs an example, I'll show you how to configure Claude Desktop as an MCP Client. However, you can use whatever MCP Client available on Internet.\n\n1.  **Configure Claude Desktop**:\n    \n    (Windows) Open `C:\\Users\\<user>\\AppData\\Roaming\\Claude\\claude_desktop_config.json` and add \n    ```json\n    {\n        \"mcpServers\": {\n            \"GsuiteMCPServer\": {\n                \"command\": \"absolute-path-to-your-python-executable-in-virtual-environment\",\n                \"args\": [\n                    \"<mcp_server.py-abs-path>\"\n                ]\n            }\n        }\n    }   \n    ```\n\n2.  **Use the available tools**:\n    Ask Claude something like:\n    \n    - Create a Google Calendar Event based on the content of the last mail being sent to my inbox.\n      If you cannot create an event, create a sort of 'reminder event' in order to remind me to check that email.\n    \n    - Create a Google Docs drafting a trip plan in San Francisco.\n    \n    - Check what are my availabilities next week for a two-hours call with a customer.\n\n    - Edit the start time of the meeting with the VCs to 10 A.M.\n\n    - Search for new e-mails in my inbox talking about AI news.\n\n    - Send an email to my supplier telling him he's late and I need the next lot as soon as possible.\n\n    - Much more.\n\n\n## Roadmap & Future Plans\n\nThis server is the foundation for a much larger vision. The goal is to provide a comprehensive MCP server for the entire Google Workspace suite. Future additions will include tools for:\n\n*   📝 **Google Docs**: More granular document manipulation, such as appending text or reading specific sections instead of overwriting the whole file.\n*   📊 **Google Sheets**: Read data from sheets, append new rows, update cells, and even perform calculations.\n*   📨 New functionalities for **Gmail**.\n*   📅 New functionalities for **Google Calendar**.\n*   🗂️ New functionalities for **Google Drive**.\n\nContributions are welcome!\n\n## Contributing\n\nIf you'd like to contribute, please feel free to fork the repository and submit a pull request. For major changes, please open an issue first to discuss what you would like to change.\n\n## License\n\nThis project is licensed under the MIT License. See the `LICENSE` file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "gmail",
        "workplace",
        "workspace mcp",
        "mcp server",
        "server mcp"
      ],
      "category": "workplace--productivity"
    },
    "taylorwilsdon--google_workspace_mcp": {
      "owner": "taylorwilsdon",
      "name": "google_workspace_mcp",
      "url": "https://github.com/taylorwilsdon/google_workspace_mcp",
      "imageUrl": "",
      "description": "Comprehensive Google Workspace MCP server with full support for Google Calendar, Drive, Gmail, and Docs, Forms, Chats, Slides and Sheets over stdio, Streamable HTTP and SSE transports.",
      "stars": 738,
      "forks": 192,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T22:32:34Z",
      "readme_content": "<div align=\"center\">\n\n# <span style=\"color:#cad8d9\">Google Workspace MCP Server</span> <img src=\"https://github.com/user-attachments/assets/b89524e4-6e6e-49e6-ba77-00d6df0c6e5c\" width=\"80\" align=\"right\" />\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Python 3.10+](https://img.shields.io/badge/Python-3.10%2B-blue.svg)](https://www.python.org/downloads/)\n[![PyPI](https://img.shields.io/pypi/v/workspace-mcp.svg)](https://pypi.org/project/workspace-mcp/)\n[![PyPI Downloads](https://static.pepy.tech/personalized-badge/workspace-mcp?period=total&units=INTERNATIONAL_SYSTEM&left_color=BLACK&right_color=BLUE&left_text=downloads)](https://pepy.tech/projects/workspace-mcp)\n[![Website](https://img.shields.io/badge/Website-workspacemcp.com-green.svg)](https://workspacemcp.com)\n\n*Full natural language control over Google Calendar, Drive, Gmail, Docs, Sheets, Slides, Forms, Tasks, and Chat through all MCP clients, AI assistants and developer tools.*\n\n**The most feature-complete Google Workspace MCP server**, now with Remote OAuth2.1 multi-user support and 1-click Claude installation.\n\n\n###### Support for all free Google accounts (Gmail, Docs, Drive etc) & Google Workspace plans (Starter, Standard, Plus, Enterprise, Non Profit) with expanded app options like Chat & Spaces. <br/> Interested in a private cloud instance? [That can be arranged.](https://workspacemcp.com/workspace-mcp-cloud)\n\n\n</div>\n\n<div align=\"center\">\n<a href=\"https://glama.ai/mcp/servers/@taylorwilsdon/google_workspace_mcp\">\n  <img width=\"195\" src=\"https://glama.ai/mcp/servers/@taylorwilsdon/google_workspace_mcp/badge\" alt=\"Google Workspace Server MCP server\" align=\"center\"/>\n</a>\n<a href=\"https://www.pulsemcp.com/servers/taylorwilsdon-google-workspace\">\n<img width=\"456\" src=\"https://github.com/user-attachments/assets/0794ef1a-dc1c-447d-9661-9c704d7acc9d\" align=\"center\"/>\n</a>\n</div>\n\n---\n\n\n**See it in action:**\n<div align=\"center\">\n  <video width=\"400\" src=\"https://github.com/user-attachments/assets/a342ebb4-1319-4060-a974-39d202329710\"></video>\n</div>\n\n---\n\n### A quick plug for AI-Enhanced Docs\n<details>\n<summary>◆ <b>But why?</b></summary>\n\n**This README was written with AI assistance, and here's why that matters**\n>\n> As a solo dev building open source tools, comprehensive documentation often wouldn't happen without AI help. Using agentic dev tools like **Roo** & **Claude Code** that understand the entire codebase, AI doesn't just regurgitate generic content - it extracts real implementation details and creates accurate, specific documentation.\n>\n> In this case, Sonnet 4 took a pass & a human (me) verified them 8/16/25.\n</details>\n\n## <span style=\"color:#adbcbc\">Overview</span>\n\nA production-ready MCP server that integrates all major Google Workspace services with AI assistants. It supports both single-user operation and multi-user authentication via OAuth 2.1, making it a powerful backend for custom applications. Built with FastMCP for optimal performance, featuring advanced authentication handling, service caching, and streamlined development patterns.\n\n**Simplified Setup**: Now uses Google Desktop OAuth clients - no redirect URIs or port configuration needed!\n\n## <span style=\"color:#adbcbc\">Features</span>\n\n<table align=\"center\" style=\"width: 100%; max-width: 100%;\">\n<tr>\n<td width=\"50%\" valign=\"top\">\n\n**<span style=\"color:#72898f\">@</span> Gmail** • **<span style=\"color:#72898f\">≡</span> Drive** • **<span style=\"color:#72898f\">⧖</span> Calendar** **<span style=\"color:#72898f\">≡</span> Docs**\n- Complete Gmail management, end to end coverage\n- Full calendar management with advanced features\n- File operations with Office format support\n- Document creation, editing & comments\n- Deep, exhaustive support for fine grained editing\n\n---\n\n**<span style=\"color:#72898f\">≡</span> Forms** • **<span style=\"color:#72898f\">@</span> Chat** • **<span style=\"color:#72898f\">≡</span> Sheets** • **<span style=\"color:#72898f\">≡</span> Slides**\n- Form creation, publish settings & response management\n- Space management & messaging capabilities\n- Spreadsheet operations with flexible cell management\n- Presentation creation, updates & content manipulation\n\n</td>\n<td width=\"50%\" valign=\"top\">\n\n**<span style=\"color:#72898f\">⊠</span> Authentication & Security**\n- Advanced OAuth 2.0 & OAuth 2.1 support\n- Automatic token refresh & session management\n- Transport-aware callback handling\n- Multi-user bearer token authentication\n- Innovative CORS proxy architecture\n\n---\n\n**<span style=\"color:#72898f\">✓</span> Tasks** • **<span style=\"color:#72898f\">◆</span> Custom Search** • **<span style=\"color:#72898f\">↻</span> Transport Support**\n- Full support for all MCP Transports\n- OpenAPI compatibility via `mcpo`\n- Task & task list management with hierarchy\n- Programmable Search Engine (PSE) integration\n\n</td>\n</tr>\n</table>\n\n---\n\n## ▶ Quick Start\n\n<details>\n<summary>≡ <b>Quick Reference Card</b> <sub><sup>← Essential commands & configs at a glance</sup></sub></summary>\n\n<table>\n<tr><td width=\"33%\" valign=\"top\">\n\n**⊠ Credentials**\n```bash\nexport GOOGLE_OAUTH_CLIENT_ID=\"...\"\nexport GOOGLE_OAUTH_CLIENT_SECRET=\"...\"\n```\n[Full setup →](#-credential-configuration)\n\n</td><td width=\"33%\" valign=\"top\">\n\n**▶ Launch Commands**\n```bash\nuvx workspace-mcp --tool-tier core\nuv run main.py --tools gmail drive\n```\n[More options →](#start-the-server)\n\n</td><td width=\"34%\" valign=\"top\">\n\n**★ Tool Tiers**\n- ● `core` - Essential tools\n- ◐ `extended` - Core + extras\n- ○ `complete` - Everything\n[Details →](#tool-tiers)\n\n</td></tr>\n</table>\n\n</details>\n\n### 1. One-Click Claude Desktop Install (Recommended)\n\n1. **Download:** Grab the latest `google_workspace_mcp.dxt` from the “Releases” page\n2. **Install:** Double-click the file – Claude Desktop opens and prompts you to **Install**\n3. **Configure:** In Claude Desktop → **Settings → Extensions → Google Workspace MCP**, paste your Google OAuth credentials\n4. **Use it:** Start a new Claude chat and call any Google Workspace tool\n\n>\n**Why DXT?**\n> Desktop Extensions (`.dxt`) bundle the server, dependencies, and manifest so users go from download → working MCP in **one click** – no terminal, no JSON editing, no version conflicts.\n\n#### Required Configuration\n<details>\n<summary>◆ <b>Environment Variables</b> <sub><sup>← Click to configure in Claude Desktop</sup></sub></summary>\n\n<table>\n<tr><td width=\"50%\" valign=\"top\">\n\n**Required**\n| Variable | Purpose |\n|----------|---------|\n| `GOOGLE_OAUTH_CLIENT_ID` | OAuth client ID from Google Cloud |\n| `GOOGLE_OAUTH_CLIENT_SECRET` | OAuth client secret |\n| `OAUTHLIB_INSECURE_TRANSPORT=1` | Development only (allows `http://` redirect) |\n\n</td><td width=\"50%\" valign=\"top\">\n\n**Optional**\n| Variable | Purpose |\n|----------|---------|\n| `USER_GOOGLE_EMAIL` | Default email for single-user auth |\n| `GOOGLE_PSE_API_KEY` | API key for Custom Search |\n| `GOOGLE_PSE_ENGINE_ID` | Search Engine ID for Custom Search |\n| `MCP_ENABLE_OAUTH21` | Set to `true` for OAuth 2.1 support |\n| `WORKSPACE_MCP_STATELESS_MODE` | Set to `true` for stateless operation (requires OAuth 2.1) |\n\n</td></tr>\n</table>\n\nClaude Desktop stores these securely in the OS keychain; set them once in the extension pane.\n</details>\n\n---\n\n<div align=\"center\">\n  <video width=\"832\" src=\"https://github.com/user-attachments/assets/83cca4b3-5e94-448b-acb3-6e3a27341d3a\"></video>\n</div>\n\n---\n\n### Prerequisites\n\n- **Python 3.10+**\n- **[uvx](https://github.com/astral-sh/uv)** (for instant installation) or [uv](https://github.com/astral-sh/uv) (for development)\n- **Google Cloud Project** with OAuth 2.0 credentials\n\n### Configuration\n\n<details open>\n<summary>◆ <b>Google Cloud Setup</b> <sub><sup>← OAuth 2.0 credentials & API enablement</sup></sub></summary>\n\n<table>\n<tr>\n<td width=\"33%\" align=\"center\">\n\n**1. Create Project**\n```text\nconsole.cloud.google.com\n\n→ Create new project\n→ Note project name\n```\n<sub>[Open Console →](https://console.cloud.google.com/)</sub>\n\n</td>\n<td width=\"33%\" align=\"center\">\n\n**2. OAuth Credentials**\n```text\nAPIs & Services → Credentials\n→ Create Credentials\n→ OAuth Client ID\n→ Desktop Application\n```\n<sub>Download & save credentials</sub>\n\n</td>\n<td width=\"34%\" align=\"center\">\n\n**3. Enable APIs**\n```text\nAPIs & Services → Library\n\nSearch & enable:\nCalendar, Drive, Gmail,\nDocs, Sheets, Slides,\nForms, Tasks, Chat, Search\n```\n<sub>See quick links below</sub>\n\n</td>\n</tr>\n<tr>\n<td colspan=\"3\">\n\n<details>\n<summary>≡ <b>OAuth Credential Setup Guide</b> <sub><sup>← Step-by-step instructions</sup></sub></summary>\n\n**Complete Setup Process:**\n\n1. **Create OAuth 2.0 Credentials** - Visit [Google Cloud Console](https://console.cloud.google.com/)\n   - Create a new project (or use existing)\n   - Navigate to **APIs & Services → Credentials**\n   - Click **Create Credentials → OAuth Client ID**\n   - Choose **Desktop Application** as the application type (no redirect URIs needed!)\n   - Download credentials and note the Client ID and Client Secret\n\n2. **Enable Required APIs** - In **APIs & Services → Library**\n   - Search for and enable each required API\n   - Or use the quick links below for one-click enabling\n\n3. **Configure Environment** - Set your credentials:\n   ```bash\n   export GOOGLE_OAUTH_CLIENT_ID=\"your-client-id\"\n   export GOOGLE_OAUTH_CLIENT_SECRET=\"your-secret\"\n   ```\n\n≡ [Full Documentation →](https://developers.google.com/workspace/guides/auth-overview)\n\n</details>\n\n</td>\n</tr>\n</table>\n\n<details>\n  <summary>⊥ <b>Quick API Enable Links</b> <sub><sup>← One-click enable each Google API</sup></sub></summary>\n  You can enable each one by clicking the links below (make sure you're logged into the Google Cloud Console and have the correct project selected):\n\n* [Enable Google Calendar API](https://console.cloud.google.com/flows/enableapi?apiid=calendar-json.googleapis.com)\n* [Enable Google Drive API](https://console.cloud.google.com/flows/enableapi?apiid=drive.googleapis.com)\n* [Enable Gmail API](https://console.cloud.google.com/flows/enableapi?apiid=gmail.googleapis.com)\n* [Enable Google Docs API](https://console.cloud.google.com/flows/enableapi?apiid=docs.googleapis.com)\n* [Enable Google Sheets API](https://console.cloud.google.com/flows/enableapi?apiid=sheets.googleapis.com)\n* [Enable Google Slides API](https://console.cloud.google.com/flows/enableapi?apiid=slides.googleapis.com)\n* [Enable Google Forms API](https://console.cloud.google.com/flows/enableapi?apiid=forms.googleapis.com)\n* [Enable Google Tasks API](https://console.cloud.google.com/flows/enableapi?apiid=tasks.googleapis.com)\n* [Enable Google Chat API](https://console.cloud.google.com/flows/enableapi?apiid=chat.googleapis.com)\n* [Enable Google Custom Search API](https://console.cloud.google.com/flows/enableapi?apiid=customsearch.googleapis.com)\n\n</details>\n\n</details>\n\n1.1. **Credentials**: See [Credential Configuration](#credential-configuration) for detailed setup options\n\n2. **Environment Configuration**:\n\n<details open>\n<summary>◆ <b>Environment Variables</b> <sub><sup>← Configure your runtime environment</sup></sub></summary>\n\n<table>\n<tr>\n<td width=\"33%\" align=\"center\">\n\n**◆ Development Mode**\n```bash\nexport OAUTHLIB_INSECURE_TRANSPORT=1\n```\n<sub>Allows HTTP redirect URIs</sub>\n\n</td>\n<td width=\"33%\" align=\"center\">\n\n**@ Default User**\n```bash\nexport USER_GOOGLE_EMAIL=\\\n  your.email@gmail.com\n```\n<sub>Single-user authentication</sub>\n\n</td>\n<td width=\"34%\" align=\"center\">\n\n**◆ Custom Search**\n```bash\nexport GOOGLE_PSE_API_KEY=xxx\nexport GOOGLE_PSE_ENGINE_ID=yyy\n```\n<sub>Optional: Search API setup</sub>\n\n</td>\n</tr>\n</table>\n\n</details>\n\n3. **Server Configuration**:\n\n<details open>\n<summary>◆ <b>Server Settings</b> <sub><sup>← Customize ports, URIs & proxies</sup></sub></summary>\n\n<table>\n<tr>\n<td width=\"33%\" align=\"center\">\n\n**◆ Base Configuration**\n```bash\nexport WORKSPACE_MCP_BASE_URI=\n  http://localhost\nexport WORKSPACE_MCP_PORT=8000\n```\n<sub>Server URL & port settings</sub>\n\n</td>\n<td width=\"33%\" align=\"center\">\n\n**↻ Proxy Support**\n```bash\nexport MCP_ENABLE_OAUTH21=\n  true\n```\n<sub>Leverage multi-user OAuth2.1 clients</sub>\n\n</td>\n<td width=\"34%\" align=\"center\">\n\n**@ Default Email**\n```bash\nexport USER_GOOGLE_EMAIL=\\\n  your.email@gmail.com\n```\n<sub>Skip email in auth flows in single user mode</sub>\n\n</td>\n</tr>\n</table>\n\n<details>\n<summary>≡ <b>Configuration Details</b> <sub><sup>← Learn more about each setting</sup></sub></summary>\n\n| Variable | Description | Default |\n|----------|-------------|---------|\n| `WORKSPACE_MCP_BASE_URI` | Base server URI (no port) | `http://localhost` |\n| `WORKSPACE_MCP_PORT` | Server listening port | `8000` |\n| `WORKSPACE_EXTERNAL_URL` | External URL for reverse proxy setups | None |\n| `GOOGLE_OAUTH_REDIRECT_URI` | Override OAuth callback URL | Auto-constructed |\n| `USER_GOOGLE_EMAIL` | Default auth email | None |\n\n</details>\n\n</details>\n\n### Google Custom Search Setup\n\n<details>\n<summary>◆ <b>Custom Search Configuration</b> <sub><sup>← Enable web search capabilities</sup></sub></summary>\n\n<table>\n<tr>\n<td width=\"33%\" align=\"center\">\n\n**1. Create Search Engine**\n```text\nprogrammablesearchengine.google.com\n/controlpanel/create\n\n→ Configure sites or entire web\n→ Note your Engine ID (cx)\n```\n<sub>[Open Control Panel →](https://programmablesearchengine.google.com/controlpanel/create)</sub>\n\n</td>\n<td width=\"33%\" align=\"center\">\n\n**2. Get API Key**\n```text\ndevelopers.google.com\n/custom-search/v1/overview\n\n→ Create/select project\n→ Enable Custom Search API\n→ Create credentials (API Key)\n```\n<sub>[Get API Key →](https://developers.google.com/custom-search/v1/overview)</sub>\n\n</td>\n<td width=\"34%\" align=\"center\">\n\n**3. Set Variables**\n```bash\nexport GOOGLE_PSE_API_KEY=\\\n  \"your-api-key\"\nexport GOOGLE_PSE_ENGINE_ID=\\\n  \"your-engine-id\"\n```\n<sub>Configure in environment</sub>\n\n</td>\n</tr>\n<tr>\n<td colspan=\"3\">\n\n<details>\n<summary>≡ <b>Quick Setup Guide</b> <sub><sup>← Step-by-step instructions</sup></sub></summary>\n\n**Complete Setup Process:**\n\n1. **Create Search Engine** - Visit the [Control Panel](https://programmablesearchengine.google.com/controlpanel/create)\n   - Choose \"Search the entire web\" or specify sites\n   - Copy the Search Engine ID (looks like: `017643444788157684527:6ivsjbpxpqw`)\n\n2. **Enable API & Get Key** - Visit [Google Developers Console](https://console.cloud.google.com/)\n   - Enable \"Custom Search API\" in your project\n   - Create credentials → API Key\n   - Restrict key to Custom Search API (recommended)\n\n3. **Configure Environment** - Add to your shell or `.env`:\n   ```bash\n   export GOOGLE_PSE_API_KEY=\"AIzaSy...\"\n   export GOOGLE_PSE_ENGINE_ID=\"01764344478...\"\n   ```\n\n≡ [Full Documentation →](https://developers.google.com/custom-search/v1/overview)\n\n</details>\n\n</td>\n</tr>\n</table>\n\n</details>\n\n### Start the Server\n\n<details open>\n<summary>▶ <b>Launch Commands</b> <sub><sup>← Choose your startup mode</sup></sub></summary>\n\n<table>\n<tr>\n<td width=\"33%\" align=\"center\">\n\n**▶ Quick Start**\n```bash\nuv run main.py\n```\n<sub>Default stdio mode</sub>\n\n</td>\n<td width=\"33%\" align=\"center\">\n\n**◆ HTTP Mode**\n```bash\nuv run main.py \\\n  --transport streamable-http\n```\n<sub>Web interfaces & debugging</sub>\n\n</td>\n<td width=\"34%\" align=\"center\">\n\n**@ Single User**\n```bash\nuv run main.py \\\n  --single-user\n```\n<sub>Simplified authentication</sub>\n\n</td>\n</tr>\n<tr>\n<td colspan=\"3\">\n\n<details>\n<summary>◆ <b>Advanced Options</b> <sub><sup>← Tool selection, tiers & Docker</sup></sub></summary>\n\n**▶ Selective Tool Loading**\n```bash\n# Load specific services only\nuv run main.py --tools gmail drive calendar\nuv run main.py --tools sheets docs\n\n# Combine with other flags\nuv run main.py --single-user --tools gmail\n```\n\n**★ Tool Tiers**\n```bash\nuv run main.py --tool-tier core      # ● Essential tools only\nuv run main.py --tool-tier extended  # ◐ Core + additional\nuv run main.py --tool-tier complete  # ○ All available tools\n```\n\n**◆ Docker Deployment**\n```bash\ndocker build -t workspace-mcp .\ndocker run -p 8000:8000 -v $(pwd):/app \\\n  workspace-mcp --transport streamable-http\n\n# With tool selection via environment variables\ndocker run -e TOOL_TIER=core workspace-mcp\ndocker run -e TOOLS=\"gmail drive calendar\" workspace-mcp\n```\n\n**Available Services**: `gmail` • `drive` • `calendar` • `docs` • `sheets` • `forms` • `tasks` • `chat` • `search`\n\n</details>\n\n</td>\n</tr>\n</table>\n\n</details>\n\n### Tool Tiers\n\nThe server organizes tools into **three progressive tiers** for simplified deployment. Choose a tier that matches your usage needs and API quota requirements.\n\n<table>\n<tr>\n<td width=\"65%\" valign=\"top\">\n\n#### <span style=\"color:#72898f\">Available Tiers</span>\n\n**<span style=\"color:#2d5b69\">●</span> Core** (`--tool-tier core`)\nEssential tools for everyday tasks. Perfect for light usage with minimal API quotas. Includes search, read, create, and basic modify operations across all services.\n\n**<span style=\"color:#72898f\">●</span> Extended** (`--tool-tier extended`)\nCore functionality plus management tools. Adds labels, folders, batch operations, and advanced search. Ideal for regular usage with moderate API needs.\n\n**<span style=\"color:#adbcbc\">●</span> Complete** (`--tool-tier complete`)\nFull API access including comments, headers/footers, publishing settings, and administrative functions. For power users needing maximum functionality.\n\n</td>\n<td width=\"35%\" valign=\"top\">\n\n#### <span style=\"color:#72898f\">Important Notes</span>\n\n<span style=\"color:#72898f\">▶</span> **Start with `core`** and upgrade as needed\n<span style=\"color:#72898f\">▶</span> **Tiers are cumulative** – each includes all previous\n<span style=\"color:#72898f\">▶</span> **Mix and match** with `--tools` for specific services\n<span style=\"color:#72898f\">▶</span> **Configuration** in `core/tool_tiers.yaml`\n<span style=\"color:#72898f\">▶</span> **Authentication** included in all tiers\n\n</td>\n</tr>\n</table>\n\n#### <span style=\"color:#72898f\">Usage Examples</span>\n\n```bash\n# Basic tier selection\nuv run main.py --tool-tier core                            # Start with essential tools only\nuv run main.py --tool-tier extended                        # Expand to include management features\nuv run main.py --tool-tier complete                        # Enable all available functionality\n\n# Selective service loading with tiers\nuv run main.py --tools gmail drive --tool-tier core        # Core tools for specific services\nuv run main.py --tools gmail --tool-tier extended          # Extended Gmail functionality only\nuv run main.py --tools docs sheets --tool-tier complete    # Full access to Docs and Sheets\n```\n\n## 📋 Credential Configuration\n\n<details open>\n<summary>🔑 <b>OAuth Credentials Setup</b> <sub><sup>← Essential for all installations</sup></sub></summary>\n\n<table>\n<tr>\n<td width=\"33%\" align=\"center\">\n\n**🚀 Environment Variables**\n```bash\nexport GOOGLE_OAUTH_CLIENT_ID=\\\n  \"your-client-id\"\nexport GOOGLE_OAUTH_CLIENT_SECRET=\\\n  \"your-secret\"\n```\n<sub>Best for production</sub>\n\n</td>\n<td width=\"33%\" align=\"center\">\n\n**📁 File-based**\n```bash\n# Download & place in project root\nclient_secret.json\n\n# Or specify custom path\nexport GOOGLE_CLIENT_SECRET_PATH=\\\n  /path/to/secret.json\n```\n<sub>Traditional method</sub>\n\n</td>\n<td width=\"34%\" align=\"center\">\n\n**⚡ .env File**\n```bash\ncp .env.oauth21 .env\n# Edit .env with credentials\n```\n<sub>Best for development</sub>\n\n</td>\n</tr>\n<tr>\n<td colspan=\"3\">\n\n<details>\n<summary>📖 <b>Credential Loading Details</b> <sub><sup>← Understanding priority & best practices</sup></sub></summary>\n\n**Loading Priority**\n1. Environment variables (`export VAR=value`)\n2. `.env` file in project root (warning - if you run via `uvx` rather than `uv run` from the repo directory, you are spawning a standalone process not associated with your clone of the repo and it will not find your .env file without specifying it directly) \n3. `client_secret.json` via `GOOGLE_CLIENT_SECRET_PATH`\n4. Default `client_secret.json` in project root\n\n**Why Environment Variables?**\n- ✅ **Docker/K8s ready** - Native container support\n- ✅ **Cloud platforms** - Heroku, Railway, Vercel\n- ✅ **CI/CD pipelines** - GitHub Actions, Jenkins\n- ✅ **No secrets in git** - Keep credentials secure\n- ✅ **Easy rotation** - Update without code changes\n\n</details>\n\n</td>\n</tr>\n</table>\n\n</details>\n\n---\n\n## 🧰 Available Tools\n\n> **Note**: All tools support automatic authentication via `@require_google_service()` decorators with 30-minute service caching.\n\n<table width=\"100%\">\n<tr>\n<td width=\"50%\" valign=\"top\">\n\n### 📅 **Google Calendar** <sub>[`calendar_tools.py`](gcalendar/calendar_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `list_calendars` | **Core** | List accessible calendars |\n| `get_events` | **Core** | Retrieve events with time range filtering |\n| `create_event` | **Core** | Create events with attachments & reminders |\n| `modify_event` | **Core** | Update existing events |\n| `delete_event` | Extended | Remove events |\n\n</td>\n<td width=\"50%\" valign=\"top\">\n\n### 📁 **Google Drive** <sub>[`drive_tools.py`](gdrive/drive_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `search_drive_files` | **Core** | Search files with query syntax |\n| `get_drive_file_content` | **Core** | Read file content (Office formats) |\n| `list_drive_items` | Extended | List folder contents |\n| `create_drive_file` | **Core** | Create files or fetch from URLs |\n\n</td>\n</tr>\n<tr>\n\n<tr>\n<td width=\"50%\" valign=\"top\">\n\n### 📧 **Gmail** <sub>[`gmail_tools.py`](gmail/gmail_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `search_gmail_messages` | **Core** | Search with Gmail operators |\n| `get_gmail_message_content` | **Core** | Retrieve message content |\n| `get_gmail_messages_content_batch` | **Core** | Batch retrieve message content |\n| `send_gmail_message` | **Core** | Send emails |\n| `get_gmail_thread_content` | Extended | Get full thread content |\n| `modify_gmail_message_labels` | Extended | Modify message labels |\n| `list_gmail_labels` | Extended | List available labels |\n| `manage_gmail_label` | Extended | Create/update/delete labels |\n| `draft_gmail_message` | Extended | Create drafts |\n| `get_gmail_threads_content_batch` | Complete | Batch retrieve thread content |\n| `batch_modify_gmail_message_labels` | Complete | Batch modify labels |\n| `start_google_auth` | Complete | Initialize authentication |\n\n</td>\n<td width=\"50%\" valign=\"top\">\n\n### 📝 **Google Docs** <sub>[`docs_tools.py`](gdocs/docs_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `get_doc_content` | **Core** | Extract document text |\n| `create_doc` | **Core** | Create new documents |\n| `modify_doc_text` | **Core** | Modify document text |\n| `search_docs` | Extended | Find documents by name |\n| `find_and_replace_doc` | Extended | Find and replace text |\n| `list_docs_in_folder` | Extended | List docs in folder |\n| `insert_doc_elements` | Extended | Add tables, lists, page breaks |\n| `insert_doc_image` | Complete | Insert images from Drive/URLs |\n| `update_doc_headers_footers` | Complete | Modify headers and footers |\n| `batch_update_doc` | Complete | Execute multiple operations |\n| `inspect_doc_structure` | Complete | Analyze document structure |\n| `export_doc_to_pdf` | Extended | Export document to PDF |\n| `create_table_with_data` | Complete | Create data tables |\n| `debug_table_structure` | Complete | Debug table issues |\n| `*_document_comments` | Complete | Read, Reply, Create, Resolve |\n\n</td>\n</tr>\n\n<tr>\n<td width=\"50%\" valign=\"top\">\n\n### 📊 **Google Sheets** <sub>[`sheets_tools.py`](gsheets/sheets_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `read_sheet_values` | **Core** | Read cell ranges |\n| `modify_sheet_values` | **Core** | Write/update/clear cells |\n| `create_spreadsheet` | **Core** | Create new spreadsheets |\n| `list_spreadsheets` | Extended | List accessible spreadsheets |\n| `get_spreadsheet_info` | Extended | Get spreadsheet metadata |\n| `create_sheet` | Complete | Add sheets to existing files |\n| `*_sheet_comment` | Complete | Read/create/reply/resolve comments |\n\n</td>\n<td width=\"50%\" valign=\"top\">\n\n### 🖼️ **Google Slides** <sub>[`slides_tools.py`](gslides/slides_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `create_presentation` | **Core** | Create new presentations |\n| `get_presentation` | **Core** | Retrieve presentation details |\n| `batch_update_presentation` | Extended | Apply multiple updates |\n| `get_page` | Extended | Get specific slide information |\n| `get_page_thumbnail` | Extended | Generate slide thumbnails |\n| `*_presentation_comment` | Complete | Read/create/reply/resolve comments |\n\n</td>\n</tr>\n<tr>\n<td width=\"50%\" valign=\"top\">\n\n### 📝 **Google Forms** <sub>[`forms_tools.py`](gforms/forms_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `create_form` | **Core** | Create new forms |\n| `get_form` | **Core** | Retrieve form details & URLs |\n| `set_publish_settings` | Complete | Configure form settings |\n| `get_form_response` | Complete | Get individual responses |\n| `list_form_responses` | Extended | List all responses with pagination |\n\n</td>\n<td width=\"50%\" valign=\"top\">\n\n### ✓ **Google Tasks** <sub>[`tasks_tools.py`](gtasks/tasks_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `list_tasks` | **Core** | List tasks with filtering |\n| `get_task` | **Core** | Retrieve task details |\n| `create_task` | **Core** | Create tasks with hierarchy |\n| `update_task` | **Core** | Modify task properties |\n| `delete_task` | Extended | Remove tasks |\n| `move_task` | Complete | Reposition tasks |\n| `clear_completed_tasks` | Complete | Hide completed tasks |\n| `*_task_list` | Complete | List/get/create/update/delete task lists |\n\n</td>\n</tr>\n<tr>\n<td width=\"50%\" valign=\"top\">\n\n### 💬 **Google Chat** <sub>[`chat_tools.py`](gchat/chat_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `list_spaces` | Extended | List chat spaces/rooms |\n| `get_messages` | **Core** | Retrieve space messages |\n| `send_message` | **Core** | Send messages to spaces |\n| `search_messages` | **Core** | Search across chat history |\n\n</td>\n<td width=\"50%\" valign=\"top\">\n\n### 🔍 **Google Custom Search** <sub>[`search_tools.py`](gsearch/search_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `search_custom` | **Core** | Perform web searches |\n| `get_search_engine_info` | Complete | Retrieve search engine metadata |\n| `search_custom_siterestrict` | Extended | Search within specific domains |\n\n</td>\n</tr>\n</table>\n\n\n**Tool Tier Legend:**\n- <span style=\"color:#2d5b69\">•</span> **Core**: Essential tools for basic functionality • Minimal API usage • Getting started\n- <span style=\"color:#72898f\">•</span> **Extended**: Core tools + additional features • Regular usage • Expanded capabilities\n- <span style=\"color:#adbcbc\">•</span> **Complete**: All available tools including advanced features • Power users • Full API access\n\n---\n\n### Connect to Claude Desktop\n\nThe server supports two transport modes:\n\n#### Stdio Mode (Default - Recommended for Claude Desktop)\n\nIn general, you should use the one-click DXT installer package for Claude Desktop.\nIf you are unable to for some reason, you can configure it manually via `claude_desktop_config.json`\n\n**Manual Claude Configuration (Alternative)**\n\n<details>\n<summary>📝 <b>Claude Desktop JSON Config</b> <sub><sup>← Click for manual setup instructions</sup></sub></summary>\n\n1. Open Claude Desktop Settings → Developer → Edit Config\n   - **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. Add the server configuration:\n```json\n{\n  \"mcpServers\": {\n    \"google_workspace\": {\n      \"command\": \"uvx\",\n      \"args\": [\"workspace-mcp\"],\n      \"env\": {\n        \"GOOGLE_OAUTH_CLIENT_ID\": \"your-client-id\",\n        \"GOOGLE_OAUTH_CLIENT_SECRET\": \"your-secret\",\n        \"OAUTHLIB_INSECURE_TRANSPORT\": \"1\"\n      }\n    }\n  }\n}\n```\n</details>\n\n### 2. Advanced / Cross-Platform Installation\n\nIf you’re developing, deploying to servers, or using another MCP-capable client, keep reading.\n\n#### Instant CLI (uvx)\n\n<details open>\n<summary>⚡ <b>Quick Start with uvx</b> <sub><sup>← No installation required!</sup></sub></summary>\n\n```bash\n# Requires Python 3.10+ and uvx\n# First, set credentials (see Credential Configuration above)\nuvx workspace-mcp --tool-tier core  # or --tools gmail drive calendar\n```\n\n> **Note**: Configure [OAuth credentials](#credential-configuration) before running. Supports environment variables, `.env` file, or `client_secret.json`.\n\n</details>\n\n### OAuth 2.1 Support (Multi-User Bearer Token Authentication)\n\nThe server includes OAuth 2.1 support for bearer token authentication, enabling multi-user session management. **OAuth 2.1 automatically reuses your existing `GOOGLE_OAUTH_CLIENT_ID` and `GOOGLE_OAUTH_CLIENT_SECRET` credentials** - no additional configuration needed!\n\n**When to use OAuth 2.1:**\n- Multiple users accessing the same MCP server instance\n- Need for bearer token authentication instead of passing user emails\n- Building web applications or APIs on top of the MCP server\n- Production environments requiring secure session management\n- Browser-based clients requiring CORS support\n\n**Enabling OAuth 2.1:**\nTo enable OAuth 2.1, set the `MCP_ENABLE_OAUTH21` environment variable to `true`.\n\n```bash\n# OAuth 2.1 requires HTTP transport mode\nexport MCP_ENABLE_OAUTH21=true\nuv run main.py --transport streamable-http\n```\n\nIf `MCP_ENABLE_OAUTH21` is not set to `true`, the server will use legacy authentication, which is suitable for clients that do not support OAuth 2.1.\n\n<details>\n<summary>🔐 <b>Innovative CORS Proxy Architecture</b> <sub><sup>← Advanced OAuth 2.1 details</sup></sub></summary>\n\nThis implementation solves two critical challenges when using Google OAuth in browser environments:\n\n1.  **Dynamic Client Registration**: Google doesn't support OAuth 2.1 dynamic client registration. Our server provides a clever proxy that accepts any client registration request and returns the pre-configured Google OAuth credentials, allowing standards-compliant clients to work seamlessly.\n\n2.  **CORS Issues**: Google's OAuth endpoints don't include CORS headers, blocking browser-based clients. We implement intelligent proxy endpoints that:\n   - Proxy authorization server discovery requests through `/auth/discovery/authorization-server/{server}`\n   - Proxy token exchange requests through `/oauth2/token`\n   - Add proper CORS headers to all responses\n   - Maintain security by only proxying to known Google OAuth endpoints\n\nThis architecture enables any OAuth 2.1 compliant client to authenticate users through Google, even from browser environments, without requiring changes to the client implementation.\n\n</details>\n\n### Stateless Mode (Container-Friendly)\n\nThe server supports a stateless mode designed for containerized environments where file system writes should be avoided:\n\n**Enabling Stateless Mode:**\n```bash\n# Stateless mode requires OAuth 2.1 to be enabled\nexport MCP_ENABLE_OAUTH21=true\nexport WORKSPACE_MCP_STATELESS_MODE=true\nuv run main.py --transport streamable-http\n```\n\n**Key Features:**\n- **No file system writes**: Credentials are never written to disk\n- **No debug logs**: File-based logging is completely disabled\n- **Memory-only sessions**: All tokens stored in memory via OAuth 2.1 session store\n- **Container-ready**: Perfect for Docker, Kubernetes, and serverless deployments\n- **Token per request**: Each request must include a valid Bearer token\n\n**Requirements:**\n- Must be used with `MCP_ENABLE_OAUTH21=true`\n- Incompatible with single-user mode\n- Clients must handle OAuth flow and send valid tokens with each request\n\nThis mode is ideal for:\n- Cloud deployments where persistent storage is unavailable\n- Multi-tenant environments requiring strict isolation\n- Containerized applications with read-only filesystems\n- Serverless functions and ephemeral compute environments\n\n**MCP Inspector**: No additional configuration needed with desktop OAuth client.\n\n**Claude Code Inspector**: No additional configuration needed with desktop OAuth client.\n\n### VS Code MCP Client Support\n\n<details>\n<summary>🆚 <b>VS Code Configuration</b> <sub><sup>← Setup for VS Code MCP extension</sup></sub></summary>\n\n```json\n{\n    \"servers\": {\n        \"google-workspace\": {\n            \"url\": \"http://localhost:8000/mcp/\",\n            \"type\": \"http\"\n        }\n    }\n}\n```\n</details>\n\n\n#### Reverse Proxy Setup\n\nIf you're running the MCP server behind a reverse proxy (nginx, Apache, Cloudflare, etc.), you have two configuration options:\n\n**Problem**: When behind a reverse proxy, the server constructs OAuth URLs using internal ports (e.g., `http://localhost:8000`) but external clients need the public URL (e.g., `https://your-domain.com`).\n\n**Solution 1**: Set `WORKSPACE_EXTERNAL_URL` for all OAuth endpoints:\n```bash\n# This configures all OAuth endpoints to use your external URL\nexport WORKSPACE_EXTERNAL_URL=\"https://your-domain.com\"\n```\n\n**Solution 2**: Set `GOOGLE_OAUTH_REDIRECT_URI` for just the callback:\n```bash\n# This only overrides the OAuth callback URL\nexport GOOGLE_OAUTH_REDIRECT_URI=\"https://your-domain.com/oauth2callback\"\n```\n\nYou also have options for:\n| `OAUTH_CUSTOM_REDIRECT_URIS` *(optional)* | Comma-separated list of additional redirect URIs |\n| `OAUTH_ALLOWED_ORIGINS` *(optional)* | Comma-separated list of additional CORS origins |\n\n**Important**:\n- Use `WORKSPACE_EXTERNAL_URL` when all OAuth endpoints should use the external URL (recommended for reverse proxy setups)\n- Use `GOOGLE_OAUTH_REDIRECT_URI` when you only need to override the callback URL\n- The redirect URI must exactly match what's configured in your Google Cloud Console\n- Your reverse proxy must forward OAuth-related requests (`/oauth2callback`, `/oauth2/*`, `/.well-known/*`) to the MCP server\n\n<details>\n<summary>🚀 <b>Advanced uvx Commands</b> <sub><sup>← More startup options</sup></sub></summary>\n\n```bash\n# Configure credentials first (see Credential Configuration section)\n\n# Start with specific tools only\nuvx workspace-mcp --tools gmail drive calendar tasks\n\n# Start with tool tiers (recommended for most users)\nuvx workspace-mcp --tool-tier core      # Essential tools\nuvx workspace-mcp --tool-tier extended  # Core + additional features\nuvx workspace-mcp --tool-tier complete  # All tools\n\n# Start in HTTP mode for debugging\nuvx workspace-mcp --transport streamable-http\n```\n</details>\n\n*Requires Python 3.10+ and [uvx](https://github.com/astral-sh/uv). The package is available on [PyPI](https://pypi.org/project/workspace-mcp).*\n\n### Development Installation\n\nFor development or customization:\n\n```bash\ngit clone https://github.com/taylorwilsdon/google_workspace_mcp.git\ncd google_workspace_mcp\nuv run main.py\n```\n\n**Development Installation (For Contributors)**:\n\n<details>\n<summary>🔧 <b>Developer Setup JSON</b> <sub><sup>← For contributors & customization</sup></sub></summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"google_workspace\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--directory\",\n        \"/path/to/repo/google_workspace_mcp\",\n        \"main.py\"\n      ],\n      \"env\": {\n        \"GOOGLE_OAUTH_CLIENT_ID\": \"your-client-id\",\n        \"GOOGLE_OAUTH_CLIENT_SECRET\": \"your-secret\",\n        \"OAUTHLIB_INSECURE_TRANSPORT\": \"1\"\n      }\n    }\n  }\n}\n```\n</details>\n\n#### HTTP Mode (For debugging or web interfaces)\nIf you need to use HTTP mode with Claude Desktop:\n\n```json\n{\n  \"mcpServers\": {\n    \"google_workspace\": {\n      \"command\": \"npx\",\n      \"args\": [\"mcp-remote\", \"http://localhost:8000/mcp\"]\n    }\n  }\n}\n```\n\n*Note: Make sure to start the server with `--transport streamable-http` when using HTTP mode.*\n\n### First-Time Authentication\n\nThe server uses **Google Desktop OAuth** for simplified authentication:\n\n- **No redirect URIs needed**: Desktop OAuth clients handle authentication without complex callback URLs\n- **Automatic flow**: The server manages the entire OAuth process transparently\n- **Transport-agnostic**: Works seamlessly in both stdio and HTTP modes\n\nWhen calling a tool:\n1. Server returns authorization URL\n2. Open URL in browser and authorize\n3. Google provides an authorization code\n4. Paste the code when prompted (or it's handled automatically)\n5. Server completes authentication and retries your request\n\n---\n\n## <span style=\"color:#adbcbc\">◆ Development</span>\n\n### <span style=\"color:#72898f\">Project Structure</span>\n\n```\ngoogle_workspace_mcp/\n├── auth/              # Authentication system with decorators\n├── core/              # MCP server and utilities\n├── g{service}/        # Service-specific tools\n├── main.py            # Server entry point\n├── client_secret.json # OAuth credentials (not committed)\n└── pyproject.toml     # Dependencies\n```\n\n### Adding New Tools\n\n```python\nfrom auth.service_decorator import require_google_service\n\n@require_google_service(\"drive\", \"drive_read\")  # Service + scope group\nasync def your_new_tool(service, param1: str, param2: int = 10):\n    \"\"\"Tool description\"\"\"\n    # service is automatically injected and cached\n    result = service.files().list().execute()\n    return result  # Return native Python objects\n```\n\n### Architecture Highlights\n\n- **Service Caching**: 30-minute TTL reduces authentication overhead\n- **Scope Management**: Centralized in `SCOPE_GROUPS` for easy maintenance\n- **Error Handling**: Native exceptions instead of manual error construction\n- **Multi-Service Support**: `@require_multiple_services()` for complex tools\n\n### Credential Store System\n\nThe server includes an abstract credential store API and a default backend for managing Google OAuth\ncredentials with support for multiple storage backends:\n\n**Features:**\n- **Abstract Interface**: `CredentialStore` base class defines standard operations (get, store, delete, list users)\n- **Local File Storage**: `LocalDirectoryCredentialStore` implementation stores credentials as JSON files\n- **Configurable Storage**: Environment variable `GOOGLE_MCP_CREDENTIALS_DIR` sets storage location\n- **Multi-User Support**: Store and manage credentials for multiple Google accounts\n- **Automatic Directory Creation**: Storage directory is created automatically if it doesn't exist\n\n**Configuration:**\n```bash\n# Optional: Set custom credentials directory\nexport GOOGLE_MCP_CREDENTIALS_DIR=\"/path/to/credentials\"\n\n# Default locations (if GOOGLE_MCP_CREDENTIALS_DIR not set):\n# - ~/.google_workspace_mcp/credentials (if home directory accessible)\n# - ./.credentials (fallback)\n```\n\n**Usage Example:**\n```python\nfrom auth.credential_store import get_credential_store\n\n# Get the global credential store instance\nstore = get_credential_store()\n\n# Store credentials for a user\nstore.store_credential(\"user@example.com\", credentials)\n\n# Retrieve credentials\ncreds = store.get_credential(\"user@example.com\")\n\n# List all users with stored credentials\nusers = store.list_users()\n```\n\nThe credential store automatically handles credential serialization, expiry parsing, and provides error handling for storage operations.\n\n---\n\n## <span style=\"color:#adbcbc\">⊠ Security</span>\n\n- **Credentials**: Never commit `.env`, `client_secret.json` or the `.credentials/` directory to source control!\n- **OAuth Callback**: Uses `http://localhost:8000/oauth2callback` for development (requires `OAUTHLIB_INSECURE_TRANSPORT=1`)\n- **Transport-Aware Callbacks**: Stdio mode starts a minimal HTTP server only for OAuth, ensuring callbacks work in all modes\n- **Production**: Use HTTPS & OAuth 2.1 and configure accordingly\n- **Network Exposure**: Consider authentication when using `mcpo` over networks\n- **Scope Minimization**: Tools request only necessary permissions\n\n---\n\n## <span style=\"color:#adbcbc\">◆ Integration with Open WebUI</span>\n\n<details open>\n<summary>◆ <b>Open WebUI Integration</b> <sub><sup>← Connect to Open WebUI as tool provider</sup></sub></summary>\n\n<table>\n<tr><td width=\"50%\" valign=\"top\">\n\n### ▶ Instant Start (No Config)\n```bash\n# Set credentials & launch in one command\nGOOGLE_OAUTH_CLIENT_ID=\"your_id\" \\\nGOOGLE_OAUTH_CLIENT_SECRET=\"your_secret\" \\\nuvx mcpo --port 8000 --api-key \"secret\" \\\n-- uvx workspace-mcp\n```\n\n</td><td width=\"50%\" valign=\"top\">\n\n### ◆ Manual Configuration\n1. Create `config.json`:\n```json\n{\n  \"mcpServers\": {\n    \"google_workspace\": {\n      \"type\": \"streamablehttp\",\n      \"url\": \"http://localhost:8000/mcp\"\n    }\n  }\n}\n```\n\n2. Start MCPO:\n```bash\nmcpo --port 8001 --config config.json\n```\n\n</td></tr>\n</table>\n\n### ≡ Configure Open WebUI\n1. Navigate to **Settings** → **Connections** → **Tools**\n2. Click **Add Tool** and enter:\n   - **Server URL**: `http://localhost:8001/google_workspace`\n   - **API Key**: Your mcpo `--api-key` (if set)\n3. Save - Google Workspace tools are now available!\n\n</details>\n\n---\n\n## <span style=\"color:#adbcbc\">≡ License</span>\n\nMIT License - see `LICENSE` file for details.\n\n---\n\nValidations:\n[![MCP Badge](https://lobehub.com/badge/mcp/taylorwilsdon-google_workspace_mcp)](https://lobehub.com/mcp/taylorwilsdon-google_workspace_mcp)\n\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/eebbc4a6-0f8c-41b2-ace8-038e5516dba0)\n\n\n<div align=\"center\">\n<img width=\"842\" alt=\"Batch Emails\" src=\"https://github.com/user-attachments/assets/0876c789-7bcc-4414-a144-6c3f0aaffc06\" />\n</div>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "google_workspace_mcp",
        "workspace",
        "mcp",
        "google_workspace_mcp comprehensive",
        "taylorwilsdon google_workspace_mcp",
        "workspace mcp"
      ],
      "category": "workplace--productivity"
    },
    "teamwork--mcp": {
      "owner": "teamwork",
      "name": "mcp",
      "url": "https://github.com/teamwork/mcp",
      "imageUrl": "",
      "description": "Project and resource management platform that keeps your client projects on track, makes managing resources a breeze, and keeps your profits on point.",
      "stars": 9,
      "forks": 5,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-10-01T22:15:29Z",
      "readme_content": "# Teamwork MCP Server\n\n> Model Context Protocol server for Teamwork.com integration with Large Language\n> Models\n\n[![Go](https://img.shields.io/badge/Go-1.25.1-blue.svg)](https://golang.org/)\n[![MCP](https://img.shields.io/badge/MCP-Compatible-green.svg)](https://modelcontextprotocol.io/)\n\n> 📌 Are you a Teamwork.com user wanting to connect AI tools (Claude Desktop, VS\n> Code Copilot Chat, Gemini, etc.) to your Teamwork.com site right now? Jump\n> straight to the **[Usage Guide (How to Connect)](usage.md)** for tokens,\n> enabling MCP and client configuration examples.\n\n## 📖 Overview\n\nThis MCP (Model Context Protocol) server enables seamless integration between\nLarge Language Models and Teamwork.com. It provides a standardized interface for\nLLMs to interact with Teamwork.com projects, allowing AI agents to perform\nvarious project management operations.\n\n### 🤖 What is MCP?\n\nModel Context Protocol (MCP) is an open protocol that standardizes how\napplications provide context to LLMs. This server describes all the actions\navailable in Teamwork.com (tools) in a way that LLMs can understand and execute\nthrough AI agents.\n\n## ✨ Features\n\n- **Multiple Transport Modes**: HTTP and STDIO interfaces for different deployment scenarios\n- **Secure Authentication**: Bearer token and OAuth2 integration with Teamwork.com\n- **Tool Framework**: Extensible toolset architecture for adding new capabilities\n- **Production Ready**: Comprehensive logging, monitoring, and observability\n- **Read-Only Mode**: Optional restriction to read-only operations for safety\n\n## 🚀 Available Servers\n\nThis project provides three different ways to interact with the Teamwork.com MCP\nserver:\n\n### 📡 HTTP Server\n\nProduction-ready HTTP server for cloud deployments and multi-client support.\n\n**📖 [Full HTTP Server Documentation](cmd/mcp-http/README.md)**\n\nQuick start:\n```bash\nTW_MCP_SERVER_ADDRESS=:8080 go run cmd/mcp-http/main.go\n```\n\n### 💬 STDIO Server\n\nDirect STDIO interface for desktop applications and development environments.\n\n**📖 [Full STDIO Server Documentation](cmd/mcp-stdio/README.md)**\n\nQuick start:\n```bash\nTW_MCP_BEARER_TOKEN=your-token go run cmd/mcp-stdio/main.go\n```\n\n### 🛠️ HTTP CLI\n\nCommand-line tool for testing and debugging MCP server functionality.\n\n**📖 [Full HTTP CLI Documentation](cmd/mcp-http-cli/README.md)**\n\nQuick start:\n```bash\ngo run cmd/mcp-http-cli/main.go -mcp-url=https://mcp.example.com list-tools\n```\n\n## 📋 Prerequisites\n\n- Go 1.25 or later\n- Valid Teamwork.com API credentials (bearer token or OAuth2 setup)\n\n## 🧪 Development & Testing\n\n### Running Tests\n```bash\n# Run all tests\ngo test ./...\n\n# Run specific package tests\ngo test ./internal/twprojects/\n```\n\n### MCP Inspector\nFor debugging purposes, use the [MCP Inspector tool](https://github.com/modelcontextprotocol/inspector):\n\n```bash\nNODE_EXTRA_CA_CERTS=letsencrypt-stg-root-x1.pem npx @modelcontextprotocol/inspector node build/index.js\n```\n\n> [!IMPORTANT]\n> **Note**: The `NODE_EXTRA_CA_CERTS` environment variable is required when\n> using OAuth2 authentication with the Let's Encrypt certification authority.\n> Download the certificate [here](https://letsencrypt.org/certs/staging/letsencrypt-stg-root-x1.pem).\n\n## 🏗️ Architecture\n\n```\n├── cmd/\n│   ├── mcp-http/          # HTTP server implementation\n│   ├── mcp-stdio/         # STDIO server implementation\n│   └── mcp-http-cli/      # CLI tool for testing via HTTP\n├── internal/\n│   ├── auth/              # Authentication helpers (bearer & OAuth2 token handling)\n│   ├── config/            # Configuration management (env, flags)\n│   ├── helpers/           # Shared utility functions (errors, link helpers, tool parsing)\n│   ├── request/           # HTTP request primitives / Teamwork API wiring\n│   ├── toolsets/          # Tool framework and registration logic\n│   └── twprojects/        # Teamwork project/domain tools (tasks, tags, timers, etc.)\n├── examples/              # Usage & integration examples (LangChain Node/Python)\n├── usage.md               # End-user setup & connection guide\n├── Makefile               # Common developer tasks\n├── Dockerfile             # Container build configuration\n├── CODE_OF_CONDUCT.md     # Community guidelines\n├── CONTRIBUTING.md        # Contribution guide\n└── SECURITY.md            # Security policy\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "workplace",
        "productivity",
        "mcp",
        "teamwork mcp",
        "workplace productivity",
        "productivity teamwork"
      ],
      "category": "workplace--productivity"
    },
    "tubasasakunn--context-apps-mcp": {
      "owner": "tubasasakunn",
      "name": "context-apps-mcp",
      "url": "https://github.com/tubasasakunn/context-apps-mcp",
      "imageUrl": "",
      "description": "AI-powered productivity suite connecting Todo, Idea, Journal, and Timer apps with Claude via Model Context Protocol.",
      "stars": 3,
      "forks": 2,
      "license": "No License",
      "language": "",
      "updated_at": "2025-09-18T10:47:49Z",
      "readme_content": "# Context Apps MCP\n\n**AI-powered productivity suite** connecting Todo, Idea, Journal, and Timer apps with Claude via Model Context Protocol.\n\n🌐 **Server URL**: `https://mcp-server.basaapp.com/mcp`  \n📱 **Learn More**: [mcp-app.basaapp.com](https://mcp-app.basaapp.com/)\n\n## Quick Start (30 seconds)\n\n### Claude Desktop\n1. Open Settings → **Manage connectors**\n2. Click **Add custom connector** \n3. Enter URL: `https://mcp-server.basaapp.com/mcp`\n4. Click **Connect** → Sign in with Apple ID\n5. ✅ Ready to use!\n\n### Other MCP Clients\n```json\n{\n  \"mcpServers\": {\n    \"context-apps\": {\n      \"url\": \"https://mcp-server.basaapp.com/mcp\"\n    }\n  }\n}\n```\n\n## Available Apps\n\nDownload all apps from App Store to unlock full functionality:\n\n| App | Purpose | Download |\n|-----|---------|----------|\n| 🎯 Context Todo | AI task management & scheduling | [App Store](https://apps.apple.com/jp/app/context-todo-mcp%E5%AF%BE%E5%BF%9Ctodo%E3%82%A2%E3%83%97%E3%83%AA/id6747934261) |\n| 💡 Context Idea | AI idea development & organization | [App Store](https://apps.apple.com/jp/app/context-idea-mcp%E5%AF%BE%E5%BF%9C%E3%82%A2%E3%82%A4%E3%83%87%E3%82%A2%E3%83%8E%E3%83%BC%E3%83%88/id6747934378) |\n| 📔 Context Journal | AI journal analysis & insights | [App Store](https://apps.apple.com/jp/app/context-journal-mcp%E5%AF%BE%E5%BF%9C%E6%97%A5%E8%A8%98%E3%82%A2%E3%83%97%E3%83%AA/id6747934304) |\n| ⏰ Context Timer | AI productivity & time tracking | [App Store](https://apps.apple.com/jp/app/context-timer-mcp%E5%AF%BE%E5%BF%9C%E3%82%BF%E3%82%A4%E3%83%9E%E3%83%BC/id6747934337) |\n\n## What You Get\n\n### 🎯 Smart Task Management\n* AI task breakdown and prioritization\n* Intelligent time estimation\n* Context-aware scheduling\n* Progress tracking and insights\n\n### 💡 Idea Development\n* AI-powered brainstorming assistance\n* Concept expansion and refinement\n* Knowledge linking and organization\n* Creative synthesis and insights\n\n### 📔 Journal Intelligence\n* Emotional pattern recognition\n* Personal growth tracking\n* AI-guided reflection prompts\n* Behavioral insight analysis\n\n### ⏰ Productivity Optimization\n* Focus session management\n* Work pattern analysis and optimization\n* Habit formation guidance\n* Performance metrics and recommendations\n\n## Authentication & Security\n\n* **Authentication**: Apple ID OAuth 2.0\n* **Requirements**: Context apps installed on iOS device\n* **Permissions**: Read/write access to your productivity data\n* **Privacy**: End-to-end encrypted communication\n* **Data Control**: You own your data, export anytime\n\n## Available MCP Tools\n\n* **Task Management**: `todo_search`, `todo_insert`, `todo_update`, `todo_delete`, `todo_status_list`\n* **Idea Development**: `idea_search`, `idea_insert`, `idea_update`, `idea_delete`\n* **Journal Analysis**: `journal_search`, `journal_insert`, `journal_update`, `journal_delete`, `journal_tag_list`\n* **Time Management**: `timer_search`, `timer_insert`, `timer_update`, `timer_delete`\n\n→ [View detailed tool documentation](docs/tools.md)\n\n## Example Interactions\n\n👤 \"Help me organize my day with 5 tasks and 3 meetings\"  \n🤖 *Analyzes tasks via Context Todo, estimates times, creates optimized schedule*\n\n👤 \"Expand my idea about sustainable urban transportation\"  \n🤖 *Uses Context Idea to develop concepts, suggest research areas, structure thinking*\n\n👤 \"How has my productivity changed this month compared to last?\"  \n🤖 *Analyzes patterns using Context Timer and Journal data, provides insights*\n\n👤 \"Create a reflection prompt based on my recent journal entries\"  \n🤖 *Reviews Context Journal data, generates personalized reflection questions*\n\n## Supported Platforms\n\n| Platform | Status | Setup Guide |\n|----------|--------|-------------|\n| 🖥 Claude Desktop | ✅ Full Support | [Quick Start](#quick-start-30-seconds) |\n| 📝 Cursor IDE | ✅ Compatible | Standard MCP config |\n| 🛠 Cline (VS Code) | ✅ Compatible | Standard MCP config |\n| 🌐 Other MCP Clients | ✅ Standard MCP | JSON config above |\n\n## System Requirements\n\n* **MCP Client**: Any MCP-compatible application\n* **Authentication**: Apple ID required\n* **iOS Apps**: Context apps installed on iOS device\n* **Internet**: Stable connection required\n\n## Troubleshooting\n\n**Connection Issues:**\n* Verify URL: `https://mcp-server.basaapp.com/mcp`\n* Check internet connectivity\n* Ensure MCP client supports remote servers\n\n**Authentication Problems:**\n* Confirm Apple ID credentials\n* Verify Context apps are installed on iOS device\n* Check app permissions in iOS Settings\n\n**Tool Errors:**\n* Ensure specific Context app is installed for tool category\n* Check app is signed in with same Apple ID\n* Verify app permissions are granted\n\n## Support & Community\n\n* 🌐 **Website**: [mcp-app.basaapp.com](https://mcp-app.basaapp.com/)\n* 📧 **Support**: support@basaapp.com\n* 🐛 **Issues**: [GitHub Issues](https://github.com/basaapp/context-apps-mcp/issues)\n* 💬 **Community**: Join our Discord server\n\n## Service Information\n\n* **Status**: Production (launched November 2024)\n* **Users**: 10,000+ active users\n* **Uptime**: 99.9% SLA\n* **Updates**: Automatic server updates\n* **Regions**: Global availability\n\n---\n\n## Legal\n\nThis is a hosted remote MCP server. Usage is governed by:\n* **Terms of Service**: [basaapp.com/terms](https://basaapp.com/terms)\n* **Privacy Policy**: [basaapp.com/privacy](https://basaapp.com/privacy)\n\nContext Apps mobile applications are available under their respective App Store licenses.\n\nCopyright © 2024 Basaapp. All rights reserved.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "productivity",
        "workplace",
        "apps",
        "productivity suite",
        "context apps",
        "workplace productivity"
      ],
      "category": "workplace--productivity"
    }
  }
}