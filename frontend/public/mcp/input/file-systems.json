{
  "category": "file-systems",
  "categoryDisplay": "File Systems",
  "description": "Provides direct access to local file systems with configurable permissions. Enables AI models to read, write, and manage files within specified directories.",
  "totalRepositories": 11,
  "repositories": {
    "8b-is--smart-tree": {
      "owner": "8b-is",
      "name": "smart-tree",
      "url": "https://github.com/8b-is/smart-tree",
      "imageUrl": "",
      "description": "AI-native directory visualization with semantic analysis, ultra-compressed formats for AI consumption, and 10x token reduction. Supports quantum-semantic mode with intelligent file categorization.",
      "stars": 149,
      "forks": 13,
      "license": "MIT License",
      "language": "Rust",
      "updated_at": "2025-10-04T01:15:40Z",
      "readme_content": "# 🌳 Smart Tree v5.2.0 - Lightning Fast Directory Visualization with Spicy TUI! 🌶️\n\n[![Version](https://img.shields.io/badge/version-5.2.0-blue)](https://github.com/8b-is/smart-tree)\n[![License](https://img.shields.io/badge/license-MIT-green)](LICENSE)\n[![Performance](https://img.shields.io/badge/speed-10--24x%20faster-brightgreen)](TERMINAL_EXAMPLES.md)\n[![MCP Tools](https://img.shields.io/badge/MCP_tools-30+-purple)](https://archestra.ai/mcp-catalog/8b-is__smart-tree)\n[![Spicy Mode](https://img.shields.io/badge/TUI-🌶️_Spicy-red)](docs/spicy-tui.md)\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/8b-is/smart-tree)](https://archestra.ai/mcp-catalog/8b-is__smart-tree)\n\n> **Smart Tree** is a blazingly fast, AI-friendly directory visualization tool that's 10-24x faster than traditional `tree`. Now with **Spicy TUI mode** for cyberpunk-cool directory browsing, **Smart Tips**, and **MCP Hook Management**! Built with Rust for maximum performance and featuring revolutionary compression algorithms.\n\n<div align=\"center\">\n\n## 🌟 What's NEW in v5.2.0\n\n| Feature | Description | Command |\n|---------|-------------|---------|\n| **🌶️ Spicy TUI** | Interactive terminal UI with fuzzy search & M8 caching | `st --spicy` |\n| **💡 Smart Tips** | Helpful hints that appear at the top | `st --tips on/off` |\n| **🎣 MCP Hooks** | Programmatic Claude Code hook management | Via MCP tools |\n| **🎸 Marqant Compression** | 70-90% markdown compression | `mq compress file.md` |\n| **🌊 SSE Streaming** | Real-time directory monitoring | `st --sse` |\n| **🧬 M8 Identity** | Filesystem verification & caching | `m8 init` |\n| **🌲 Tree-Sitter** | AST-aware code editing | `st --mode edit` |\n\n</div>\n\n## ⚡ Quick Start\n\n```bash\n# Install Smart Tree (choose your method)\n\n# Option 1: Homebrew (builds from source)\nbrew install --HEAD --formula https://raw.githubusercontent.com/8b-is/smart-tree/main/Formula/smart-tree.rb\n\n# Option 2: Install script (downloads binary)\ncurl -sSL https://raw.githubusercontent.com/8b-is/smart-tree/main/scripts/install.sh | bash\n\n# Option 3: Cargo (builds from source)\ncargo install --git https://github.com/8b-is/smart-tree --tag v5.2.0 st\n\n# 🎉 Experience the magic!\nst                          # Classic tree view\nst --spicy                  # 🌶️ NEW: Spicy interactive TUI mode!\nst --mode ai --compress     # AI-optimized (80% smaller)\nst --mode quantum           # Quantum compression (100x smaller!)\nst --search \"TODO\"          # Lightning-fast content search\n```\n\n## 🌶️ Spicy TUI Mode (NEW!)\n\nExperience directory browsing like never before with our cyberpunk-inspired terminal UI:\n\n```bash\nst --spicy\n```\n\n### Features:\n- **🔍 Dual-Mode Search**:\n  - `/` - Search file names with fuzzy matching\n  - `Ctrl+F` - Search file content across the tree\n- **🌲 Tree Navigation**: Navigate like a file tree!\n  - `←/h` - Collapse directory or go to parent\n  - `→/l` - Expand directory or enter\n  - `↑↓/jk` - Navigate up/down\n- **💾 M8 Context Caching**: Directory contexts cached with quantum wave signatures\n- **🎨 Syntax Highlighting**: Beautiful code previews with search highlighting\n- **🖼️ ASCII Art**: Image previews converted to ASCII (requires `artem`)\n- **🌊 Quantum Wave Signatures**: Each search result saved with unique signature\n\n### Keyboard Shortcuts:\n- **Navigation**:\n  - `j/k` or `↑↓` - Move selection up/down\n  - `h/l` or `←→` - Collapse/expand directories (tree navigation!)\n  - `Enter` - Open selected item\n- **Search Modes**:\n  - `/` - Fuzzy search file names\n  - `Ctrl+F` - Search content within files\n  - `Esc` - Exit search mode\n- **Features**:\n  - `Ctrl+H` - Toggle hidden files\n  - `Ctrl+S` - Save search results to M8 context\n  - `?` or `F1` - Toggle help overlay\n  - `q` or `Esc` - Quit\n\n## 💡 Smart Tips System\n\nSmart Tree now shows helpful tips at the top of the output!\n\n```bash\nst --tips off    # Disable tips\nst --tips on     # Re-enable tips\n```\n\n- Tips appear on first run, then randomly every 10-20 runs\n- Detects cool terminals (256color, iTerm, Alacritty, etc.) for fancy formatting\n- State persisted in `~/.st/tips_state.json`\n- 15+ different tips about Smart Tree features\n\nExample tip:\n```\n──── 🚀 Speed tip - Use --mode quantum for 100x compression! ─── --tips off ───\n```\n\n## 🎣 MCP Hook Management\n\nControl Claude Code hooks programmatically via MCP tools:\n\n```javascript\n// List all hooks\nhooks {operation:'list'}\n\n// Enable Smart Tree context hook\nhooks {operation:'set', hook_type:'UserPromptSubmit', enabled:true}\n\n// Test a hook\nhooks {operation:'test', hook_type:'UserPromptSubmit', input:'analyze /src'}\n```\n\nThe hooks provide:\n- 🌳 Automatic directory context when paths are detected\n- 🧠 MEM8 consciousness searching for relevant memories\n- 📦 Git repository context\n- ✨ All controlled programmatically via MCP!\n\n## 🚀 Why Smart Tree?\n\n### ⚡ Performance Benchmarks\n\n| Directory Size | `tree` | `exa --tree` | **Smart Tree** | Speedup |\n|---------------|--------|--------------|----------------|---------|\n| Small (100 files) | 15ms | 25ms | **2ms** | **7.5x** |\n| Medium (10K files) | 450ms | 380ms | **35ms** | **12.8x** |\n| Large (100K files) | 4.8s | 3.2s | **198ms** | **24.2x** |\n| Massive (1M files) | 45s | 28s | **1.9s** | **23.7x** |\n\n### 🧠 AI-Optimized Features\n\n- **30+ MCP Tools**: Comprehensive toolkit for AI assistants\n- **Token-Efficient Formats**: 70-90% reduction in token usage\n- **Quantum Compression**: Revolutionary format achieving 100:1 compression\n- **Semantic Analysis**: Understands code structure and relationships\n- **Context Preservation**: Maintains session state between interactions\n\n## 🎯 Core Features\n\n### Multiple Output Formats\n- **Classic** (`--mode classic`): Traditional tree view\n- **AI-Optimized** (`--mode ai`): Compressed for LLM context windows\n- **Quantum** (`--mode quantum`): Maximum compression using wave functions\n- **Markdown** (`--mode markdown`): Beautiful documentation format\n- **JSON/CSV/TSV**: Structured data formats\n- **Mermaid** (`--mode mermaid`): Flowchart diagrams\n\n### Advanced Capabilities\n- **Content Search**: Lightning-fast regex search across files\n- **Git Integration**: Shows repository status inline\n- **Streaming Mode**: Handles millions of files efficiently\n- **MCP Server**: Model Context Protocol for AI assistants\n- **Memory System**: Preserves context across sessions\n\n## 📦 Installation\n\n### macOS/Linux (Homebrew - builds from source)\n```bash\n# Direct formula installation (no tap needed!)\nbrew install --HEAD --formula https://raw.githubusercontent.com/8b-is/smart-tree/main/Formula/smart-tree.rb\n```\n\n### From Source (All Platforms)\n```bash\ngit clone https://github.com/8b-is/smart-tree\ncd smart-tree\ncargo build --release\nsudo cp target/release/st /usr/local/bin/\nsudo cp target/release/mq /usr/local/bin/\nsudo cp target/release/m8 /usr/local/bin/\n```\n\n### Binary Releases\nDownload pre-built binaries from [releases](https://github.com/8b-is/smart-tree/releases)\n\n## 🎮 Usage Examples\n\n### Basic Operations\n```bash\nst                           # Current directory, depth 3\nst /path/to/dir -d 5        # Specific path, depth 5\nst --all                    # Show hidden files\nst --size-sort              # Sort by file size\n```\n\n### AI Integration\n```bash\nst --mode ai --compress      # Token-efficient format\nst --mode quantum            # Maximum compression\nst --mode summary-ai         # Ultra-compressed summary\nst --mcp                     # Run as MCP server\n```\n\n### Search & Filter\n```bash\nst --search \"TODO\"           # Search file contents\nst --type rs                 # Only Rust files\nst --pattern \"test_*\"        # Glob pattern matching\nst --modified 7d             # Files modified in last 7 days\n```\n\n### Advanced Features\n```bash\nst --git-aware               # Show git status\nst --mode stats              # Directory statistics\nst --stream                  # Streaming mode for huge directories\nst --claude-save             # Save session consciousness\n```\n\n## 🔧 MCP Integration\n\nSmart Tree provides 30+ tools via Model Context Protocol:\n\n### Setup for Claude Desktop\n```bash\nst --mcp-config >> ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n### Available Tools\n- `overview`: Quick project understanding\n- `find`: Powerful file discovery\n- `search`: Content search with context\n- `analyze`: Deep code analysis\n- `edit`: AST-aware code editing\n- `history`: Track file changes\n- `memory`: Anchor insights for recall\n- `hooks`: Manage Claude Code hooks\n- And many more!\n\n## 🎨 Configuration\n\n### Environment Variables\n```bash\nexport ST_DEFAULT_DEPTH=5       # Default tree depth\nexport ST_COLOR=always          # Force colors\nexport ST_NO_ICONS=1            # Disable emoji icons\nexport ST_MAX_FILE_SIZE=10M    # Skip large files\n```\n\n### Config File\nCreate `~/.config/smart-tree/config.toml`:\n```toml\n[display]\ndefault_depth = 5\nshow_hidden = false\nuse_icons = true\ncolor_mode = \"auto\"\n\n[performance]\nmax_buffer_size = \"100MB\"\nthread_count = 8\nuse_streaming = true\n\n[mcp]\nenabled = true\nport = 3000\n```\n\n## 📊 Compression Formats\n\n### Marqant (.mq files)\nRevolutionary markdown compression achieving 70-90% size reduction:\n```bash\nmq compress README.md        # Compress single file\nmq aggregate docs/           # Compress directory\nmq decompress file.mq        # Restore original\n```\n\n### Quantum Format\nWave-function based compression for maximum efficiency:\n- 100:1 compression ratios\n- Preserves semantic meaning\n- Self-describing format\n- Progressive decompression\n\n## 🛠️ Development\n\n### Building from Source\n```bash\ngit clone https://github.com/8b-is/smart-tree\ncd smart-tree\ncargo build --release\ncargo test\n```\n\n### Running Tests\n```bash\ncargo test                    # Unit tests\n./scripts/test_all.sh        # Integration tests\ncargo bench                  # Performance benchmarks\n```\n\n### Contributing\nContributions welcome! Please read [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## 📚 Documentation\n\n- [API Documentation](https://docs.rs/smart-tree)\n- [MCP Tools Reference](docs/mcp-tools.md)\n- [Compression Formats](docs/compression.md)\n- [Performance Guide](docs/performance.md)\n- [Claude Integration](docs/claude.md)\n\n## 🎖️ Credits\n\nCreated by the [8b-is](https://8b.is) team with contributions from:\n- **8bit-wraith**: Core architecture & performance\n- **Claude**: AI integration & MCP tools\n- **Omni**: Quantum compression algorithms\n- **Community**: Features, bugs, and inspiration\n\n## 📄 License\n\nMIT License - see [LICENSE](LICENSE) for details\n\n## 🌟 Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=8b-is/smart-tree&type=Date)](https://star-history.com/#8b-is/smart-tree&Date)\n\n---\n\n<div align=\"center\">\n\n**Made with ❤️ and Rust**\n\n[Website](https://8b.is) • [Issues](https://github.com/8b-is/smart-tree/issues) • [Discussions](https://github.com/8b-is/smart-tree/discussions)\n\n</div>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "directories",
        "file",
        "file systems",
        "intelligent file",
        "file categorization"
      ],
      "category": "file-systems"
    },
    "box--mcp-server-box-remote": {
      "owner": "box",
      "name": "mcp-server-box-remote",
      "url": "https://github.com/box/mcp-server-box-remote/",
      "imageUrl": "",
      "description": "The Box MCP server allows third party AI agents to securely and seamlessly access Box content and use tools such as search, asking questions from files and folders, and data extraction.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-09-23T21:50:12Z",
      "readme_content": "# Box MCP Server (Remote)\n\nSecurely connect MCP-compatible agents to your Box content and Box AI—without moving data out of Box.\n\n> **Endpoint**: `https://mcp.box.com`\n\n---\n\n## Overview\n\nThe remote Box MCP server lets AI agent platforms (e.g., **Copilot Studio**, **Claude**, **Mistral Le Chat**) connect to Box to securely query and use Box data and AI-powered tools, while keeping content protected. Authorization is handled via OAuth so users can grant controlled access from within the client they’re using.\n\n[Learn more in the remote Box MCP server guide](https://developer.box.com/guides/box-mcp/remote/)\n\n> Looking for the self-hosted/local version? See [box-community/mcp-server-box](https://github.com/box-community/mcp-server-box).\n\n---\n\n## Capabilities\n\nThe remote Box MCP server provides tools across several areas, such as:  \n- **User info** (e.g., identify the authenticated user)  \n- **File and folder operations** (read content, list folders, search files/folders, etc.)  \n- **Box AI tools** (Q&A across files, metadata extraction, etc.)  \n\nFor the complete and most up-to-date set of supported tools, see the [remote Box MCP server documentation](https://developer.box.com/guides/box-mcp/remote/).\n\n---\n\n## Setup\n\nTo connect an MCP client to the remote Box MCP server, you’ll first configure an OAuth app in Box, then use its credentials in your client. The preferred path is to use the predefined **Box MCP Server** integration in the [Admin Console](https://support.box.com/hc/en-us/articles/360043695714-Admin-Console-Guide), but in certain flows (e.g., the [GitHub MCP registry](https://github.com/mcp)), you may need to create your own OAuth app in the [Developer Console](https://app.box.com/developers/console) instead.\n\n### 1. Configure an OAuth app in Box\n\nChoose one of the following options:  \n\n- **Admin Console flow (preferred):** Enable or configure the Box MCP server from **Admin Console → Integrations**.  \n- **Developer Console flow:** [Create an OAuth app](https://developer.box.com/guides/authentication/oauth2/oauth2-setup/) with the proper redirect URI and scopes.  \n\nFor detailed instructions, see the [remote Box MCP server guide](https://developer.box.com/guides/box-mcp/remote/).\n\n\n### 2. Connect from your MCP client\n\nMost clients or platforms let you add a remote MCP server by URL and will guide you through the OAuth flow. Here are some of the details you’ll typically need to provide:\n\n- **Endpoint URL:** `https://mcp.box.com`  \n- **Name:** a name of your choice (e.g., `box-remote-mcp`)  \n- **Authorization:** Bearer token (via OAuth 2.0)  \n- **Client ID** and **Client Secret**: obtained from your app’s credentials (Admin Console for the predefined **Box MCP Server** integration, or Developer Console if you created your own OAuth app)  \n- **Redirect URI**: provided by your client and must be added to your app configuration (via the Admin Console or Developer Console, depending on your flow)  \n\nSee the [remote Box MCP server guide](https://developer.box.com/guides/box-mcp/remote/) for client-specific connection examples (Claude, Copilot Studio, Le Chat).\n\n---\n\n## OAuth & Discovery\n\nThe remote Box MCP server is an **OAuth‑protected resource** backed by Box’s authorization server:\n\n- [Resource metadata](https://mcp.box.com/.well-known/oauth-protected-resource)  \n- [Authorization server metadata](https://api.box.com/.well-known/oauth-authorization-server)  \n\nFor implementation details, see the [Box authentication guide](https://developer.box.com/guides/authentication/).\n\n**Using tokens with the Box API**\n\nAll Box API calls require a valid [Access Token](https://developer.box.com/guides/authentication/tokens/access-tokens/). Example:\n\n```bash\ncurl https://api.box.com/2.0/users/me \\\n  -H \"authorization: Bearer <ACCESS_TOKEN>\"\n```\n\n---\n\n## Terms\n\nUse of the Box MCP server and Box APIs is subject to the **Box Terms of Service**:  \nhttps://www.box.com/legal/termsofservice\n\n---\n\n## Support & Docs\n\n- Remote Box MCP server: https://developer.box.com/guides/box-mcp/remote/  \n- Authentication guide: https://developer.box.com/guides/authentication/  \n- API status: https://status.box.com/  \n- Community: https://community.box.com/\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "folders",
        "server",
        "file systems",
        "mcp server",
        "box mcp"
      ],
      "category": "file-systems"
    },
    "cyberchitta--llm-context.py": {
      "owner": "cyberchitta",
      "name": "llm-context.py",
      "url": "https://github.com/cyberchitta/llm-context.py",
      "imageUrl": "",
      "description": "Share code context with LLMs via MCP or clipboard",
      "stars": 277,
      "forks": 24,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-03T22:31:00Z",
      "readme_content": "# LLM Context\n\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![PyPI version](https://img.shields.io/pypi/v/llm-context.svg)](https://pypi.org/project/llm-context/)\n[![Downloads](https://static.pepy.tech/badge/llm-context/week)](https://pepy.tech/project/llm-context)\n\n**Reduce friction when providing context to LLMs.** Share relevant project files instantly through smart selection and rule-based filtering.\n\n## The Problem\n\nGetting project context into LLM chats is tedious:\n\n- Manually copying/pasting files takes forever\n- Hard to identify which files are relevant\n- Including too much hits context limits, too little misses important details\n- AI requests for additional files require manual fetching\n- Repeating this process for every conversation\n\n## The Solution\n\n```bash\nlc-select # Smart file selection\nlc-context # Instant formatted context\n# Paste and work - AI can access additional files seamlessly\n```\n\n**Result**: From \"I need to share my project\" to productive AI collaboration in seconds.\n\n> **Note**: This project was developed in collaboration with several Claude Sonnets (3.5, 3.6, 3.7 and 4.0), as well as Groks (3 and 4), using LLM Context itself to share code during development. All code in the repository is heavily human-curated (by me 😇, @restlessronin).\n\n## Installation\n\n```bash\nuv tool install \"llm-context>=0.5.0\"\n```\n\n## Quick Start\n\n### Basic Usage\n\n```bash\n# One-time setup\ncd your-project\nlc-init\n# Daily usage\nlc-select\nlc-context\n```\n\n### MCP Integration (Recommended)\n\n```jsonc\n{\n  \"mcpServers\": {\n    \"llm-context\": {\n      \"command\": \"uvx\",\n      \"args\": [\"--from\", \"llm-context\", \"lc-mcp\"]\n    }\n  }\n}\n```\n\nWith MCP, AI can access additional files directly during conversations.\n\n### Project Customization\n\n```bash\n# Create project-specific filters\ncat > .llm-context/rules/flt-repo-base.md << 'EOF'\n---\ncompose:\n  filters: [lc/flt-base]\ngitignores:\n  full-files: [\"*.md\", \"/tests\", \"/node_modules\"]\n---\nEOF\n# Customize main development rule\ncat > .llm-context/rules/prm-code.md << 'EOF'\n---\ninstructions: [lc/ins-developer, lc/sty-python]\ncompose:\n  filters: [flt-repo-base]\n  excerpters: [lc/exc-base]\n---\nAdditional project-specific guidelines and context.\nEOF\n```\n\n## Core Commands\n\n| Command              | Purpose                                    |\n| -------------------- | ------------------------------------------ |\n| `lc-init`            | Initialize project configuration           |\n| `lc-select`          | Select files based on current rule         |\n| `lc-context`         | Generate and copy context                  |\n| `lc-context -nt`     | Generate context for non-MCP environments  |\n| `lc-set-rule <name>` | Switch between rules                       |\n| `lc-missing`         | Handle file and context requests (non-MCP) |\n\n## Rule System\n\nRules use a systematic five-category structure:\n\n- **Prompt Rules (`prm-`)**: Generate project contexts (e.g., `lc/prm-developer`, `lc/prm-rule-create`)\n- **Filter Rules (`flt-`)**: Control file inclusion (e.g., `lc/flt-base`, `lc/flt-no-files`)\n- **Instruction Rules (`ins-`)**: Provide guidelines (e.g., `lc/ins-developer`, `lc/ins-rule-framework`)\n- **Style Rules (`sty-`)**: Enforce coding standards (e.g., `lc/sty-python`, `lc/sty-code`)\n- **Excerpt Rules (`exc-`)**: Configure extractions for context reduction (e.g., `lc/exc-base`)\n\n### Example Rule\n\n```yaml\n---\ndescription: \"Debug API authentication issues\"\ncompose:\n  filters: [lc/flt-no-files]\n  excerpters: [lc/exc-base]\nalso-include:\n  full-files: [\"/src/auth/**\", \"/tests/auth/**\"]\n---\nFocus on authentication system and related tests.\n```\n\n## Workflow Patterns\n\n### Daily Development\n\n```bash\nlc-set-rule lc/prm-developer\nlc-select\nlc-context\n# AI can review changes, access additional files as needed\n```\n\n### Focused Tasks\n\n```bash\n# Let AI help create minimal context\nlc-set-rule lc/prm-rule-create\nlc-context -nt\n# Work with AI to create task-specific rule using tmp-prm- prefix\n```\n\n### MCP Benefits\n\n- **Code review**: AI examines your changes for completeness/correctness\n- **Additional files**: AI accesses initially excluded files when needed\n- **Change tracking**: See what's been modified during conversations\n- **Zero friction**: No manual file operations during development discussions\n\n## Key Features\n\n- **Smart File Selection**: Rules automatically include/exclude appropriate files\n- **Instant Context Generation**: Formatted context copied to clipboard in seconds\n- **MCP Integration**: AI can access additional files without manual intervention\n- **Systematic Rule Organization**: Five-category system for clear rule composition\n- **AI-Assisted Rule Creation**: Let AI help create minimal context for specific tasks\n- **Code Excerpting**: Extractions of significant content to reduce context while preserving structure\n\n## Learn More\n\n- [User Guide](docs/user-guide.md) - Complete documentation\n- [Design Philosophy](https://www.cyberchitta.cc/articles/llm-ctx-why.html)\n- [Real-world Examples](https://www.cyberchitta.cc/articles/full-context-magic.html)\n\n## License\n\nApache License, Version 2.0. See [LICENSE](LICENSE) for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "directories",
        "cyberchitta",
        "file systems",
        "directories cyberchitta",
        "manage files"
      ],
      "category": "file-systems"
    },
    "filesystem@quarkiverse--quarkus-mcp-servers": {
      "owner": "filesystem@quarkiverse",
      "name": "quarkus-mcp-servers",
      "url": "https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/filesystem",
      "imageUrl": "",
      "description": "A filesystem allowing for browsing and editing files implemented in Java using Quarkus. Available as jar or native image.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "files",
        "quarkus",
        "file systems",
        "filesystem quarkiverse",
        "files implemented"
      ],
      "category": "file-systems"
    },
    "hmk--box-mcp-server": {
      "owner": "hmk",
      "name": "box-mcp-server",
      "url": "https://github.com/hmk/box-mcp-server",
      "imageUrl": "",
      "description": "Box integration for listing, reading and searching files",
      "stars": 10,
      "forks": 10,
      "license": "BSD 3-Clause \"New\" or \"Revised\" License",
      "language": "JavaScript",
      "updated_at": "2025-08-28T08:58:29Z",
      "readme_content": "# box-mcp-server\n\n![CI](https://github.com/hmk/box-mcp-server/actions/workflows/jest.yml/badge.svg?branch=main)\n\n## Usage\n\nYou will need:\n\n- `BOX_USER_ID` \n\nand one of the following:\n\n- `BOX_JWT_BASE64` (recommended)\n- `BOX_JWT_CONFIG_PATH`\n- `BOX_JWT`\n\n## Auth\n\n### JSON Web Token (JWT) Authorization (recommended)\n\n#### How to get a JWT\n\nUsing a JWT Config allows persistent connection to Box.\n\n\nYou will need a paid Box enterprise account, or you can sign up for a [free developer account](https://account.box.com/signup/n/developer) (make sure you are signed out of Box before clicking that link).\n\nVisit the [Box Developer Console](https://app.box.com/developers/console) and create a new application. Make sure the authorization type is JSON Web Token.\n\nGo to `Configuration > Add and Manage Public Keys` and Generate a Public/Private Keypair.\nIf you have not already, Box prompt you to set up 2 factor authentication and Authorize the application as an administrator in your box account. You will need to:\n\n1. give the application `App + Enterprise Access`, and\n2. enable the `make API calls using the as-user header` option\n\nvia the Box Application's Configuration page. **Make sure to reauthorize the application if you are modifying these settings**.\n\n#### Base64 encoding JWT\n\nTo encode your JWT in Base64, you can use the following command in your terminal:\n\n```sh\ncat /path/to/your/box-jwt-config.json | base64\n```\n\nReplace `/path/to/your/box-jwt-config.json` with the actual path to your JWT configuration file. This will output the Base64 encoded JWT which you can then use in your environment variables.\n\n#### Claude Desktop Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"box\": {\n      \"command\": \"npx\",\n      \"args\": [\"box-mcp-server\"],\n      \"env\": {\n        \"BOX_JWT_BASE64\": \"YOUR_BASE64_ENCODED_JWT\",\n        \"BOX_USER_ID\": \"123456\"\n      }\n    }\n  }\n}\n```\n\n### Developer Token Authorization (easiest)\n\nUsing a developer token is the easiest way to integrate with Box, but will only last 60 minutes.\n\nTo get started, set the `BOX_DEV_TOKEN` to a [Box Developer Token](https://developer.box.com/guides/authentication/tokens/developer-tokens/).\n\nBegin by visiting the [Box Developer Console](https://app.box.com/developers/console) and create a new application. The authorization type does not currently matter, as all support Box Developer Token.\n\nOnce your application is created, navigate to its configuration setings and click `Generate Developer Token`.\n\n#### Claude Desktop Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"box\": {\n      \"command\": \"npx\",\n      \"args\": [\"box-mcp-server\"],\n      \"env\": {\n        \"BOX_DEV_TOKEN\": \"YOUR_DEV_TOKEN_GOES_HERE\"\n      }\n    }\n  }\n}\n```\n\n## Capabilities\n\n1. Searching files\n2. Reading files\n\n- [x] PDF\n- [x] Word\n- [ ] Others\n\n## Development\n\n### Prerequisites\n\nBefore you begin, ensure you have the following installed:\n\n- Node.js (recommended v22 or higher)\n- npm\n- git\n- dotenv\n\n### Setting up Development Environment\n\nTo set up the development environment, follow these steps:\n\n1. Fork the repository\n\n   - Click the \"Fork\" button in the top-right corner of this repository\n   - This creates your own copy of the repository under your Github acocunt\n\n1. Clone Your Fork:\n\n   ```sh\n   git clone https://github.com/YOUR_USERNAME/box-mcp-server.git\n   cd box-mcp-server\n   ```\n\n1. Add Upstream Remote\n   ```sh\n   git remote add upstream https://github.com/hmk/box-mcp-server.git\n   ```\n\n1. Copy the dotenv file\n    ```sh\n    cp .env.template .env\n    ```\n\n1. Install dependencies:\n\n   ```sh\n   npm install\n   ```\n\n1. Run watch to keep index.js updated:\n\n   ```sh\n   npm run watch\n   ```\n\n1. Start the model context protocol development server:\n\n   ```sh\n   dotenv npx @modelcontextprotocol/inspector node PATH_TO_YOUR_CLONED_REPO/dist/index.js\n   ```\n\n1. If the development server did not load the environment variable correctly, set the `BOX_DEV_TOKEN` on the left-hand side of the mcp inspector.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "directories",
        "file",
        "file systems",
        "manage files",
        "directories hmk"
      ],
      "category": "file-systems"
    },
    "isaacphi--mcp-gdrive": {
      "owner": "isaacphi",
      "name": "mcp-gdrive",
      "url": "https://github.com/isaacphi/mcp-gdrive",
      "imageUrl": "",
      "description": "Model Context Protocol (MCP) Server for reading from Google Drive and editing Google Sheets.",
      "stars": 209,
      "forks": 73,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T22:32:01Z",
      "readme_content": "# Google Drive server\n\nThis MCP server integrates with Google Drive to allow listing, reading, and searching files, as well as the ability to read and write to Google Sheets.\n\nThis project includes code originally developed by Anthropic, PBC, licensed under the MIT License from [this repo](https://github.com/modelcontextprotocol/servers/tree/main/src/gdrive).\n\n## Components\n\n### Tools\n\n- **gdrive_search**\n\n  - **Description**: Search for files in Google Drive.\n  - **Input**:\n    - `query` (string): Search query.\n    - `pageToken` (string, optional): Token for the next page of results.\n    - `pageSize` (number, optional): Number of results per page (max 100).\n  - **Output**: Returns file names and MIME types of matching files.\n\n- **gdrive_read_file**\n\n  - **Description**: Read contents of a file from Google Drive.\n  - **Input**:\n    - `fileId` (string): ID of the file to read.\n  - **Output**: Returns the contents of the specified file.\n\n- **gsheets_read**\n\n  - **Description**: Read data from a Google Spreadsheet with flexible options for ranges and formatting.\n  - **Input**:\n    - `spreadsheetId` (string): The ID of the spreadsheet to read.\n    - `ranges` (array of strings, optional): Optional array of A1 notation ranges (e.g., `['Sheet1!A1:B10']`). If not provided, reads the entire sheet.\n    - `sheetId` (number, optional): Specific sheet ID to read. If not provided with ranges, reads the first sheet.\n  - **Output**: Returns the specified data from the spreadsheet.\n\n- **gsheets_update_cell**\n  - **Description**: Update a cell value in a Google Spreadsheet.\n  - **Input**:\n    - `fileId` (string): ID of the spreadsheet.\n    - `range` (string): Cell range in A1 notation (e.g., `'Sheet1!A1'`).\n    - `value` (string): New cell value.\n  - **Output**: Confirms the updated value in the specified cell.\n\n### Resources\n\nThe server provides access to Google Drive files:\n\n- **Files** (`gdrive:///<file_id>`)\n  - Supports all file types\n  - Google Workspace files are automatically exported:\n    - Docs → Markdown\n    - Sheets → CSV\n    - Presentations → Plain text\n    - Drawings → PNG\n  - Other files are provided in their native format\n\n## Getting started\n\n1. [Create a new Google Cloud project](https://console.cloud.google.com/projectcreate)\n2. [Enable the Google Drive API](https://console.cloud.google.com/workspace-api/products)\n3. [Configure an OAuth consent screen](https://console.cloud.google.com/apis/credentials/consent) (\"internal\" is fine for testing)\n4. Add OAuth scopes `https://www.googleapis.com/auth/drive.readonly`, `https://www.googleapis.com/auth/spreadsheets`\n5. In order to allow interaction with sheets and docs you will also need to enable the [Google Sheets API](https://console.cloud.google.com/apis/api/sheets.googleapis.com/) and [Google Docs API](https://console.cloud.google.com/marketplace/product/google/docs.googleapis.com) in your workspaces Enabled API and Services section.\n6. [Create an OAuth Client ID](https://console.cloud.google.com/apis/credentials/oauthclient) for application type \"Desktop App\"\n7. Download the JSON file of your client's OAuth keys\n8. Rename the key file to `gcp-oauth.keys.json` and place into the path you specify with `GDRIVE_CREDS_DIR` (i.e. `/Users/username/.config/mcp-gdrive`)\n9. Note your OAuth Client ID and Client Secret. They must be provided as environment variables along with your configuration directory.\n10. You will also need to setup a .env file within the project with the following fields. You can find the Client ID and Client Secret in the Credentials section of the Google Cloud Console.\n\n```\nGDRIVE_CREDS_DIR=/path/to/config/directory\nCLIENT_ID=<CLIENT_ID>\nCLIENT_SECRET=<CLIENT_SECRET>\n```\n\nMake sure to build the server with either `npm run build` or `npm run watch`.\n\n### Authentication\n\nNext you will need to run `node ./dist/index.js` to trigger the authentication step\n\nYou will be prompted to authenticate with your browser. You must authenticate with an account in the same organization as your Google Cloud project.\n\nYour OAuth token is saved in the directory specified by the `GDRIVE_CREDS_DIR` environment variable.\n\n![Authentication Prompt](https://i.imgur.com/TbyV6Yq.png)\n\n### Usage with Desktop App\n\nTo integrate this server with the desktop app, add the following to your app's server configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"gdrive\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@isaacphi/mcp-gdrive\"],\n      \"env\": {\n        \"CLIENT_ID\": \"<CLIENT_ID>\",\n        \"CLIENT_SECRET\": \"<CLIENT_SECRET>\",\n        \"GDRIVE_CREDS_DIR\": \"/path/to/config/directory\"\n      }\n    }\n  }\n}\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "gdrive",
        "mcp",
        "file systems",
        "mcp gdrive",
        "mcp server"
      ],
      "category": "file-systems"
    },
    "jeannier--homebrew-mcp": {
      "owner": "jeannier",
      "name": "homebrew-mcp",
      "url": "https://github.com/jeannier/homebrew-mcp",
      "imageUrl": "",
      "description": "Control your macOS Homebrew setup using natural language via this MCP server. Simply manage your packages, or ask for suggestions, troubleshoot brew issues etc.",
      "stars": 17,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T23:17:18Z",
      "readme_content": "# Homebrew MCP Python Server\n\nA Model Context Protocol (MCP) server for Homebrew package management **on macOS**, designed for seamless integration with Claude Desktop and other MCP-compatible clients.\n\n- **Language:** Python 3.13\n- **MCP:** [Model Context Protocol](https://github.com/modelcontextprotocol/python-sdk)\n- **Package Manager:** Homebrew (macOS)\n- **Venv/Dependency Manager:** [uv](https://github.com/astral-sh/uv)\n\n---\n\n## Features\n\n- Exposes Homebrew commands as MCP tools. The supported commands are grouped by function:\n  - **Package Management:** `install`, `uninstall`, `upgrade`, `cleanup`\n  - **Information & Discovery:** `list`, `search`, `info`, `outdated`, `deps`\n  - **System Health & Updates:** `doctor`, `update`\n  - **Tap & Source Management:** `tap`, `untap`\n  - **Version Management:** `pin`, `unpin`\n  - **Service Management:** `services`\n- Runs real `brew` commands via subprocess (requires Homebrew on macOS).\n- Fully MCP spec-compliant (stdio, JSON-RPC 2.0, MCP spec 2025-06-18).\n- Designed for Claude Desktop and other LLM clients.\n- Functional, declarative Python (no classes).\n- Logs all requests/results to `homebrew_mcp.log`.\n- Includes an interactive test script (`test_claude_homebrew_mcp.py`) that:\n    - Dynamically fetches available tools from the MCP server.\n    - Allows Claude to make multiple tool calls for a single user prompt.\n    - Demonstrates advanced interaction patterns with the Anthropic API.\n\n---\n\n## Installation\n\n1. **Clone this repository:**\n   ```sh\n   git clone https://github.com/jeannier/homebrew-mcp\n   cd homebrew-mcp\n   ```\n2. **Install [uv](https://github.com/astral-sh/uv) (if not already):**\n   ```sh\n   brew install uv\n   ```\n3. **Create a virtual environment and install dependencies:**\n   ```sh\n   uv venv\n   source .venv/bin/activate  # Activate the virtual environment\n   uv pip install -r requirements.txt\n   ```\n4. **Run the MCP Server (for Local Testing):**\n   To test the server locally or during development, you can run it directly:\n   ```sh\n   uv run python homebrew_mcp.py\n   ```\n   The server will then start. If successful, there will be no immediate output; it will silently listen for MCP requests over stdio. You can confirm it's running by checking the `homebrew_mcp.log` file.\n\n   > **Note:** If you are integrating with Claude Desktop, you do **not** need to run this command manually. Claude Desktop will start the server automatically based on the configuration provided in the \"Claude Desktop Integration\" section. This command is for direct testing or development purposes.\n\n---\n\n## Cursor Integration\n\n**Prerequisite:** Before adding the tool, please complete the steps in the **[Installation](#installation)** section to set up the project and its dependencies. The \"Add to Cursor\" button assumes the project is located at `~/Documents/GitHub/homebrew-mcp`.\n\n<a href=\"cursor://anysphere.cursor-deeplink/mcp/install?name=homebrew-mcp&config=eyJjb21tYW5kIjoidXYgcnVuIC0tZGlyZWN0b3J5IH4vRG9jdW1lbnRzL0dpdEh1Yi9ob21lYnJldy1tY3AgaG9tZWJyZXdfbWNwLnB5In0=\">\n  <img src=\"https://img.shields.io/badge/add%20to-cursor-4285f4\" alt=\"Add to Cursor\">\n</a>\n\n1. **Install Cursor via Homebrew (macOS):**\n   ```sh\n   brew install --cask cursor\n   ```\n\n2. **Add the Tool to Cursor**:\n   - Click the \"Add to Cursor\" button above. This will open Cursor and automatically install the tool.\n   - If your project is not at the location assumed by the button, you will need to edit the generated configuration. On macOS, this file is located at `~/.cursor/mcp.json`. Open it and update the path inside the `command` string for the `homebrew-mcp` entry. The `mcp.json` file in this repository can be used as a reference.\n\n3. **Restart Cursor**:\n   - For the tool to become active, restart Cursor after installation.\n\n---\n\n## Claude Desktop Integration\n\n1. **Install Claude Desktop via Homebrew (macOS):**\n   ```sh\n   brew install --cask claude\n   ```\n\n2. **Ensure `uv` is in your PATH and the project is accessible.**\n\n3. **Configure Claude Desktop to use this MCP server:**\n   - On macOS, edit or create your user-level MCP configuration file at: `~/Library/Application Support/Claude/claude_desktop.json`.\n   - Add the following server definition, replacing `/path/to/your/project/` with the **absolute path** to the directory where you cloned this project. You can refer to the `claude_desktop_config.json` file in this repository for an example.\n\n```json\n{\n  \"mcpServers\": {\n    \"homebrew-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--directory\",\n        \"/path/to/your/project/\",\n        \"homebrew_mcp.py\"\n      ],\n      \"type\": \"stdio\"\n    }\n  }\n}\n```\n   *The `--directory` argument tells `uv` where to find the `homebrew_mcp.py` script and its context (like the `.venv`).*\n\n4. **Restart Claude Desktop.**\n\n---\n\n## Project Structure\n\n- **Python Scripts**\n  - `homebrew_mcp.py` — Main MCP server script.\n  - `test_claude_homebrew_mcp.py` — Interactive Claude integration test script.\n- **Configuration**\n  - `claude_desktop_config.json` — Example configuration for Claude Desktop.\n  - `mcp.json` — Example configuration for Cursor.\n  - `requirements.txt` — Python project dependencies.\n- **Documentation & Metadata**\n  - `README.md` — This file.\n  - `LICENSE` — The project's MIT license.\n  - `.gitignore` — Specifies files for Git to ignore.\n- **Generated Files (Not in Git)**\n  - `.venv/` — Python virtual environment managed by `uv`.\n  - `homebrew_mcp.log` — Log file for the MCP server.\n\n---\n\n## Monitoring Logs\n\nTo watch the server log in real time and pretty-print each JSON line:\n\n```sh\ntail -f homebrew_mcp.log | jq .\n```\n\n---\n\n## Tested Environment\n\nThis MCP server and its integration with Claude have been primarily tested on the following environment:\n\n- **macOS:** Sonoma 14.7.5\n- **Homebrew:** 4.5.8\n- **Python:** 3.13 (managed via `uv`)\n  - **mcp module:** 1.9.4 (installed using `uv pip`)\n- **anthropic module:** 0.55.0 (installed using `uv pip`)\n- **Claude Desktop:** 0.10.38 (installed via Homebrew Cask on macOS).\n- **Cursor:** 1.1.4\n\n---\n\n## Example Prompts\n\nHere are some example prompts you can use with Claude (or another MCP client) when interacting with this Homebrew MCP server:\n\n- provide a summary of all installed packages\n- check which packages are installed, and provide suggestions for other packages to install\n- are there any problems with my homebrew setup? and how can I fix them ?\n- show me information about the python 3.13 package\n- install the wget package\n\n---\n\n## Interactive Claude Test Script\n\nTo run the Claude integration test (`test_claude_homebrew_mcp.py`), you need an Anthropic Claude API key. Set your API key in the `ANTHROPIC_API_KEY` variable at the top of the test script. This script allows you to interact with Claude, which in turn uses the `homebrew_mcp.py` server. It demonstrates dynamic tool discovery and Claude's ability to make multiple tool calls.\n\n```sh\nuv run python test_claude_homebrew_mcp.py\n```\n\n---\n\n## Example Test Run Output\n\nThis section shows an example of the output when running the `test_claude_homebrew_mcp.py` script.\nIt demonstrates the interaction between Claude and the Homebrew MCP server, including dynamic tool discovery, multiple tool calls, and final responses.\n\n```\n$ uv run python test_claude_homebrew_mcp.py\n\n============================== Claude Prompt 1/7 ===============================\ninstall wget if not installed, or uninstall if already installed\n================================================================================\n============================= Claude's Answer 1/7 ==============================\nI've successfully installed wget on your system. Now that wget is installed, if you'd like me to uninstall it instead (as per your request to either install if not present or uninstall if already installed), I can do that for you.\n\nWould you like me to proceed with uninstalling wget now? Please let me know.\n================================================================================\n\n============================== Claude Prompt 2/7 ===============================\nrestore initial state of wget\n================================================================================\n============================= Claude's Answer 2/7 ==============================\nI've successfully uninstalled wget, returning your system to its initial state before our conversation. The wget package has been completely removed from your system.\n================================================================================\n\n============================== Claude Prompt 3/7 ===============================\ncheck for outdated packages\n================================================================================\n============================= Claude's Answer 3/7 ==============================\nYou have 3 outdated packages:\n1. libnghttp2\n2. uv\n3. yt-dlp\n\nThese packages have newer versions available and can be upgraded if you wish.\n================================================================================\n\n============================== Claude Prompt 4/7 ===============================\nprovide a summary of all installed packages\n================================================================================\n============================= Claude's Answer 4/7 ==============================\nHere's a summary of all installed packages on your system:\n\n1. **Command Line Tools & Utilities**: bash, coreutils, curl, git, jq, nmap, grep, watch, etc.\n2. **Programming Languages & Tools**: python (multiple versions), node, go, lua\n3. **Media Tools & Libraries**: ffmpeg and its dependencies (x264, x265, etc.), yt-dlp\n4. **Development Tools**: neovim, tree-sitter, shellcheck\n5. **Applications (Casks)**:\n   - Browsers: google-chrome, firefox\n   - Development: visual-studio-code, iterm2, cursor, github\n   - Communication: discord, whatsapp\n   - Media: vlc, spotify, stremio\n   - Utilities: docker-desktop, keepassxc, alt-tab, disk-inventory-x\n   - AI/ML tools: chatgpt, claude, ollama, superwhisper\n\nYou have 3 outdated packages (libnghttp2, uv, and yt-dlp) that could be updated.\n================================================================================\n\n============================== Claude Prompt 5/7 ===============================\nprovide 5 suggestions of other packages to install\n================================================================================\n============================= Claude's Answer 5/7 ==============================\nBased on your installed packages and common developer tools, here are 5 suggested packages that would complement your setup:\n\n1. **tmux** - A terminal multiplexer that allows you to manage multiple terminal sessions within a single window. Great companion to your iterm2 and neovim setup.\n\n2. **htop** - An interactive process viewer and system monitor, much more feature-rich than the standard top command.\n\n3. **ripgrep** - A faster alternative to grep, designed for searching code. Works well with your development tools.\n\n4. **fzf** - A command-line fuzzy finder that can dramatically improve your terminal workflow for searching files, command history, and more.\n\n5. **tldr** - Simplified and community-driven man pages with practical examples. Perfect for quickly finding common command usage patterns.\n\nThese tools would enhance your command-line productivity and integrate well with your existing development environment. Would you like more information about any of these packages?\n================================================================================\n\n============================== Claude Prompt 6/7 ===============================\nuse brew doctor to see if there are any issues, try to find a fix for all of these issues\n================================================================================\n============================= Claude's Answer 6/7 ==============================\nBased on the complete analysis, here's my recommendation to fix the one minor warning:\n\nSince this is just a warning about having both the core and tap version of nextdns available, and you're actually using the core version (as shown by the info command), this isn't causing any functional problems with your system. The warning is simply informing you that if you want to specifically use the tap version, you need to use the full name.\n\nIf you want to fully resolve this warning, you have two options:\n\n1. Continue using the core version of nextdns (which you are currently using) and untap the nextdns tap to remove the ambiguity. This would require identifying the exact tap name and then using the untap command.\n\n2. Keep both versions available and just be aware that you need to use the full name when referring to the tap version.\n\nSince the warning isn't causing any actual issues with your Homebrew installation and everything is functioning correctly, I would recommend option 2 - simply being aware of the naming convention when you need to use the tap version.\n\nThe brew doctor results suggest your Homebrew installation is actually in good shape with no critical issues that need fixing!\n================================================================================\n\n============================== Claude Prompt 7/7 ===============================\nprovide a summary of what was done\n================================================================================\n============================= Claude's Answer 7/7 ==============================\n# Homebrew Session Summary\n\nHere's a summary of what was done during our session:\n\n1. **Checked and installed wget**:\n   - Initially verified that wget was not installed on your system\n   - Installed wget version 1.25.0\n\n2. **Restored initial state**:\n   - Uninstalled wget to return to the original system state\n\n3. **Checked for outdated packages**:\n   - Found 3 outdated packages: libnghttp2, uv, and yt-dlp\n\n4. **Listed all installed packages**:\n   - Displayed a complete list of installed formulae and casks\n   - Your system has numerous development tools, utilities, and applications installed\n\n5. **Suggested 5 additional packages**:\n   - tmux: Terminal multiplexer\n   - htop: Interactive process viewer\n   - ripgrep: Fast alternative to grep\n   - fzf: Command-line fuzzy finder\n   - tldr: Simplified man pages\n\n6. **Ran system diagnostics**:\n   - Executed brew doctor to check for issues\n   - Found only one minor warning related to the nextdns package having the same name in both core formulae and a custom tap\n   - This warning is informational only and doesn't require action unless you experience issues with nextdns\n\n7. **Examined package versions**:\n   - Listed all installed packages with their versions to get a better understanding of your system configuration\n\nOverall, your Homebrew installation appears to be in good health with only a minor naming conflict that doesn't impact functionality.\n================================================================================\n```\n\n---\n\n## License\n\nMIT License\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "homebrew",
        "brew",
        "macos",
        "macos homebrew",
        "homebrew setup",
        "homebrew mcp"
      ],
      "category": "file-systems"
    },
    "mark3labs--mcp-filesystem-server": {
      "owner": "mark3labs",
      "name": "mcp-filesystem-server",
      "url": "https://github.com/mark3labs/mcp-filesystem-server",
      "imageUrl": "",
      "description": "Golang implementation for local file system access.",
      "stars": 524,
      "forks": 78,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-10-04T06:12:16Z",
      "readme_content": "# MCP Filesystem Server\n\nThis MCP server provides secure access to the local filesystem via the Model Context Protocol (MCP).\n\n## Components\n\n### Resources\n\n- **file://**\n  - Name: File System\n  - Description: Access to files and directories on the local file system\n\n### Tools\n\n#### File Operations\n\n- **read_file**\n  - Read the complete contents of a file from the file system\n  - Parameters: `path` (required): Path to the file to read\n\n- **read_multiple_files**\n  - Read the contents of multiple files in a single operation\n  - Parameters: `paths` (required): List of file paths to read\n\n- **write_file**\n  - Create a new file or overwrite an existing file with new content\n  - Parameters: `path` (required): Path where to write the file, `content` (required): Content to write to the file\n\n- **copy_file**\n  - Copy files and directories\n  - Parameters: `source` (required): Source path of the file or directory, `destination` (required): Destination path\n\n- **move_file**\n  - Move or rename files and directories\n  - Parameters: `source` (required): Source path of the file or directory, `destination` (required): Destination path\n\n- **delete_file**\n  - Delete a file or directory from the file system\n  - Parameters: `path` (required): Path to the file or directory to delete, `recursive` (optional): Whether to recursively delete directories (default: false)\n\n- **modify_file**\n  - Update file by finding and replacing text using string matching or regex\n  - Parameters: `path` (required): Path to the file to modify, `find` (required): Text to search for, `replace` (required): Text to replace with, `all_occurrences` (optional): Replace all occurrences (default: true), `regex` (optional): Treat find pattern as regex (default: false)\n\n#### Directory Operations\n\n- **list_directory**\n  - Get a detailed listing of all files and directories in a specified path\n  - Parameters: `path` (required): Path of the directory to list\n\n- **create_directory**\n  - Create a new directory or ensure a directory exists\n  - Parameters: `path` (required): Path of the directory to create\n\n- **tree**\n  - Returns a hierarchical JSON representation of a directory structure\n  - Parameters: `path` (required): Path of the directory to traverse, `depth` (optional): Maximum depth to traverse (default: 3), `follow_symlinks` (optional): Whether to follow symbolic links (default: false)\n\n#### Search and Information\n\n- **search_files**\n  - Recursively search for files and directories matching a pattern\n  - Parameters: `path` (required): Starting path for the search, `pattern` (required): Search pattern to match against file names\n\n- **search_within_files**\n  - Search for text within file contents across directory trees\n  - Parameters: `path` (required): Starting directory for the search, `substring` (required): Text to search for within file contents, `depth` (optional): Maximum directory depth to search, `max_results` (optional): Maximum number of results to return (default: 1000)\n\n- **get_file_info**\n  - Retrieve detailed metadata about a file or directory\n  - Parameters: `path` (required): Path to the file or directory\n\n- **list_allowed_directories**\n  - Returns the list of directories that this server is allowed to access\n  - Parameters: None\n\n## Features\n\n- Secure access to specified directories\n- Path validation to prevent directory traversal attacks\n- Symlink resolution with security checks\n- MIME type detection\n- Support for text, binary, and image files\n- Size limits for inline content and base64 encoding\n\n## Getting Started\n\n### Installation\n\n#### Using Go Install\n\n```bash\ngo install github.com/mark3labs/mcp-filesystem-server@latest\n```\n\n### Usage\n\n#### As a standalone server\n\nStart the MCP server with allowed directories:\n\n```bash\nmcp-filesystem-server /path/to/allowed/directory [/another/allowed/directory ...]\n```\n\n#### As a library in your Go project\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/mark3labs/mcp-filesystem-server/filesystemserver\"\n)\n\nfunc main() {\n\t// Create a new filesystem server with allowed directories\n\tallowedDirs := []string{\"/path/to/allowed/directory\", \"/another/allowed/directory\"}\n\tfs, err := filesystemserver.NewFilesystemServer(allowedDirs)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create server: %v\", err)\n\t}\n\n\t// Serve requests\n\tif err := fs.Serve(); err != nil {\n\t\tlog.Fatalf(\"Server error: %v\", err)\n\t}\n}\n```\n\n### Usage with Model Context Protocol\n\nTo integrate this server with apps that support MCP:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"mcp-filesystem-server\",\n      \"args\": [\"/path/to/allowed/directory\", \"/another/allowed/directory\"]\n    }\n  }\n}\n```\n\n### Docker\n\n#### Running with Docker\n\nYou can run the Filesystem MCP server using Docker:\n\n```bash\ndocker run -i --rm ghcr.io/mark3labs/mcp-filesystem-server:latest /path/to/allowed/directory\n```\n\n#### Docker Configuration with MCP\n\nTo integrate the Docker image with apps that support MCP:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"ghcr.io/mark3labs/mcp-filesystem-server:latest\",\n        \"/path/to/allowed/directory\"\n      ]\n    }\n  }\n}\n```\n\nIf you need changes made inside the container to reflect on the host filesystem, you can mount a volume. This allows the container to access and modify files on the host system. Here's an example:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"--volume=/allowed/directory/in/host:/allowed/directory/in/container\",\n        \"ghcr.io/mark3labs/mcp-filesystem-server:latest\",\n        \"/allowed/directory/in/container\"\n      ]\n    }\n  }\n}\n```\n\n## License\n\nSee the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "files",
        "golang",
        "file systems",
        "file access",
        "filesystem server"
      ],
      "category": "file-systems"
    },
    "mickaelkerjean--filestash": {
      "owner": "mickaelkerjean",
      "name": "filestash",
      "url": "https://github.com/mickael-kerjean/filestash/tree/master/server/plugin/plg_handler_mcp",
      "imageUrl": "",
      "description": "Remote Storage Access: SFTP, S3, FTP, SMB, NFS, WebDAV, GIT, FTPS, gcloud, azure blob, sharepoint, etc.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filestash",
        "files",
        "sftp",
        "file systems",
        "storage access",
        "filestash remote"
      ],
      "category": "file-systems"
    },
    "microsoft--markitdown": {
      "owner": "microsoft",
      "name": "markitdown",
      "url": "https://github.com/microsoft/markitdown/tree/main/packages/markitdown-mcp",
      "imageUrl": "",
      "description": "MCP tool access to MarkItDown -- a library that converts many file formats (local or remote) to Markdown for LLM consumption.",
      "stars": 80478,
      "forks": 4448,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-04T12:28:42Z",
      "readme_content": "# MarkItDown\n\n[![PyPI](https://img.shields.io/pypi/v/markitdown.svg)](https://pypi.org/project/markitdown/)\n![PyPI - Downloads](https://img.shields.io/pypi/dd/markitdown)\n[![Built by AutoGen Team](https://img.shields.io/badge/Built%20by-AutoGen%20Team-blue)](https://github.com/microsoft/autogen)\n\n> [!TIP]\n> MarkItDown now offers an MCP (Model Context Protocol) server for integration with LLM applications like Claude Desktop. See [markitdown-mcp](https://github.com/microsoft/markitdown/tree/main/packages/markitdown-mcp) for more information.\n\n> [!IMPORTANT]\n> Breaking changes between 0.0.1 to 0.1.0:\n> * Dependencies are now organized into optional feature-groups (further details below). Use `pip install 'markitdown[all]'` to have backward-compatible behavior. \n> * convert\\_stream() now requires a binary file-like object (e.g., a file opened in binary mode, or an io.BytesIO object). This is a breaking change from the previous version, where it previously also accepted text file-like objects, like io.StringIO.\n> * The DocumentConverter class interface has changed to read from file-like streams rather than file paths. *No temporary files are created anymore*. If you are the maintainer of a plugin, or custom DocumentConverter, you likely need to update your code. Otherwise, if only using the MarkItDown class or CLI (as in these examples), you should not need to change anything.\n\nMarkItDown is a lightweight Python utility for converting various files to Markdown for use with LLMs and related text analysis pipelines. To this end, it is most comparable to [textract](https://github.com/deanmalmgren/textract), but with a focus on preserving important document structure and content as Markdown (including: headings, lists, tables, links, etc.) While the output is often reasonably presentable and human-friendly, it is meant to be consumed by text analysis tools -- and may not be the best option for high-fidelity document conversions for human consumption.\n\nMarkItDown currently supports the conversion from:\n\n- PDF\n- PowerPoint\n- Word\n- Excel\n- Images (EXIF metadata and OCR)\n- Audio (EXIF metadata and speech transcription)\n- HTML\n- Text-based formats (CSV, JSON, XML)\n- ZIP files (iterates over contents)\n- Youtube URLs\n- EPubs\n- ... and more!\n\n## Why Markdown?\n\nMarkdown is extremely close to plain text, with minimal markup or formatting, but still\nprovides a way to represent important document structure. Mainstream LLMs, such as\nOpenAI's GPT-4o, natively \"_speak_\" Markdown, and often incorporate Markdown into their\nresponses unprompted. This suggests that they have been trained on vast amounts of\nMarkdown-formatted text, and understand it well. As a side benefit, Markdown conventions\nare also highly token-efficient.\n\n## Prerequisites\nMarkItDown requires Python 3.10 or higher. It is recommended to use a virtual environment to avoid dependency conflicts.\n\nWith the standard Python installation, you can create and activate a virtual environment using the following commands:\n\n```bash\npython -m venv .venv\nsource .venv/bin/activate\n```\n\nIf using `uv`, you can create a virtual environment with:\n\n```bash\nuv venv --python=3.12 .venv\nsource .venv/bin/activate\n# NOTE: Be sure to use 'uv pip install' rather than just 'pip install' to install packages in this virtual environment\n```\n\nIf you are using Anaconda, you can create a virtual environment with:\n\n```bash\nconda create -n markitdown python=3.12\nconda activate markitdown\n```\n\n## Installation\n\nTo install MarkItDown, use pip: `pip install 'markitdown[all]'`. Alternatively, you can install it from the source:\n\n```bash\ngit clone git@github.com:microsoft/markitdown.git\ncd markitdown\npip install -e 'packages/markitdown[all]'\n```\n\n## Usage\n\n### Command-Line\n\n```bash\nmarkitdown path-to-file.pdf > document.md\n```\n\nOr use `-o` to specify the output file:\n\n```bash\nmarkitdown path-to-file.pdf -o document.md\n```\n\nYou can also pipe content:\n\n```bash\ncat path-to-file.pdf | markitdown\n```\n\n### Optional Dependencies\nMarkItDown has optional dependencies for activating various file formats. Earlier in this document, we installed all optional dependencies with the `[all]` option. However, you can also install them individually for more control. For example:\n\n```bash\npip install 'markitdown[pdf, docx, pptx]'\n```\n\nwill install only the dependencies for PDF, DOCX, and PPTX files.\n\nAt the moment, the following optional dependencies are available:\n\n* `[all]` Installs all optional dependencies\n* `[pptx]` Installs dependencies for PowerPoint files\n* `[docx]` Installs dependencies for Word files\n* `[xlsx]` Installs dependencies for Excel files\n* `[xls]` Installs dependencies for older Excel files\n* `[pdf]` Installs dependencies for PDF files\n* `[outlook]` Installs dependencies for Outlook messages\n* `[az-doc-intel]` Installs dependencies for Azure Document Intelligence\n* `[audio-transcription]` Installs dependencies for audio transcription of wav and mp3 files\n* `[youtube-transcription]` Installs dependencies for fetching YouTube video transcription\n\n### Plugins\n\nMarkItDown also supports 3rd-party plugins. Plugins are disabled by default. To list installed plugins:\n\n```bash\nmarkitdown --list-plugins\n```\n\nTo enable plugins use:\n\n```bash\nmarkitdown --use-plugins path-to-file.pdf\n```\n\nTo find available plugins, search GitHub for the hashtag `#markitdown-plugin`. To develop a plugin, see `packages/markitdown-sample-plugin`.\n\n### Azure Document Intelligence\n\nTo use Microsoft Document Intelligence for conversion:\n\n```bash\nmarkitdown path-to-file.pdf -o document.md -d -e \"<document_intelligence_endpoint>\"\n```\n\nMore information about how to set up an Azure Document Intelligence Resource can be found [here](https://learn.microsoft.com/en-us/azure/ai-services/document-intelligence/how-to-guides/create-document-intelligence-resource?view=doc-intel-4.0.0)\n\n### Python API\n\nBasic usage in Python:\n\n```python\nfrom markitdown import MarkItDown\n\nmd = MarkItDown(enable_plugins=False) # Set to True to enable plugins\nresult = md.convert(\"test.xlsx\")\nprint(result.text_content)\n```\n\nDocument Intelligence conversion in Python:\n\n```python\nfrom markitdown import MarkItDown\n\nmd = MarkItDown(docintel_endpoint=\"<document_intelligence_endpoint>\")\nresult = md.convert(\"test.pdf\")\nprint(result.text_content)\n```\n\nTo use Large Language Models for image descriptions (currently only for pptx and image files), provide `llm_client` and `llm_model`:\n\n```python\nfrom markitdown import MarkItDown\nfrom openai import OpenAI\n\nclient = OpenAI()\nmd = MarkItDown(llm_client=client, llm_model=\"gpt-4o\", llm_prompt=\"optional custom prompt\")\nresult = md.convert(\"example.jpg\")\nprint(result.text_content)\n```\n\n### Docker\n\n```sh\ndocker build -t markitdown:latest .\ndocker run --rm -i markitdown:latest < ~/your-file.pdf > output.md\n```\n\n## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\n\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n### How to Contribute\n\nYou can help by looking at issues or helping review PRs. Any issue or PR is welcome, but we have also marked some as 'open for contribution' and 'open for reviewing' to help facilitate community contributions. These are of course just suggestions and you are welcome to contribute in any way you like.\n\n<div align=\"center\">\n\n|            | All                                                          | Especially Needs Help from Community                                                                                                      |\n| ---------- | ------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------- |\n| **Issues** | [All Issues](https://github.com/microsoft/markitdown/issues) | [Issues open for contribution](https://github.com/microsoft/markitdown/issues?q=is%3Aissue+is%3Aopen+label%3A%22open+for+contribution%22) |\n| **PRs**    | [All PRs](https://github.com/microsoft/markitdown/pulls)     | [PRs open for reviewing](https://github.com/microsoft/markitdown/pulls?q=is%3Apr+is%3Aopen+label%3A%22open+for+reviewing%22)              |\n\n</div>\n\n### Running Tests and Checks\n\n- Navigate to the MarkItDown package:\n\n  ```sh\n  cd packages/markitdown\n  ```\n\n- Install `hatch` in your environment and run tests:\n\n  ```sh\n  pip install hatch  # Other ways of installing hatch: https://hatch.pypa.io/dev/install/\n  hatch shell\n  hatch test\n  ```\n\n  (Alternative) Use the Devcontainer which has all the dependencies installed:\n\n  ```sh\n  # Reopen the project in Devcontainer and run:\n  hatch test\n  ```\n\n- Run pre-commit checks before submitting a PR: `pre-commit run --all-files`\n\n### Contributing 3rd-party Plugins\n\nYou can also contribute by creating and sharing 3rd party plugins. See `packages/markitdown-sample-plugin` for more details.\n\n## Trademarks\n\nThis project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft\ntrademarks or logos is subject to and must follow\n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "markitdown",
        "files",
        "markdown",
        "file systems",
        "microsoft markitdown",
        "access markitdown"
      ],
      "category": "file-systems"
    },
    "modelcontextprotocol--server-filesystem": {
      "owner": "modelcontextprotocol",
      "name": "server-filesystem",
      "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem",
      "imageUrl": "",
      "description": "Direct local file system access.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "files",
        "systems",
        "file systems",
        "file access",
        "server filesystem"
      ],
      "category": "file-systems"
    }
  }
}