{
  "category": "crm-and-sales-tools",
  "categoryDisplay": "CRM and Sales Tools",
  "description": "",
  "totalRepositories": 12,
  "repositories": {
    "KaranThink41--hubspot_private_app": {
      "owner": "KaranThink41",
      "name": "hubspot_private_app",
      "url": "https://github.com/KaranThink41/hubspot_private_app",
      "imageUrl": "/freedevtools/mcp/pfp/KaranThink41.webp",
      "description": "Interact with HubSpot CRM to manage Note engagements by creating, updating, deleting, and fetching summary records. Streamline communication by sending records via chat or email directly from the server.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-04-03T08:39:50Z",
      "readme_content": "# HubSpot MCP Server\n\nA Model Context Protocol (MCP) server that provides tools for interacting with HubSpot CRM. This server allows you to create, update, delete, and fetch summary records (stored as Note \nengagements) in HubSpot.\n\n## DockerFile\n- docker build -t mcp-hubspot-ts .\n- docker run --env-file .env -it mcp-hubspot-ts\n\n\n## Features\n\n- Create a summary as a Note engagement in HubSpot\n- Fetch all summary records (Notes) from HubSpot\n- Filter summary records by date\n- Update existing summary records\n- Delete summary records\n- Send summary records via chat or email\n\n\n\n## Testing with MCP Inspector\n\nTo inspect and test your MCP server implementation, you can use the MCP Inspector. For example:\n\n```bash\nnpx @modelcontextprotocol/inspector -e HUBSPOT_ACCESS_TOKEN=your_access_token_here node build/index.js\n```\n\nThis will start the MCP Inspector UI on http://localhost:5173. Use the UI to send JSON-RPC requests to your server.\n\n## Env\n\nCreate a `.env` file in the project root with your HubSpot credentials:\n\n```env\nHUBSPOT_ACCESS_TOKEN=your_access_token_here\nSHARED_CONTACT_ID=your_contact_id_here\n```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hubspot_private_app",
        "hubspot",
        "crm",
        "hubspot crm",
        "hubspot_private_app interact",
        "karanthink41 hubspot_private_app"
      ],
      "category": "crm-and-sales-tools"
    },
    "SheffieldP--hubspot_mcp": {
      "owner": "SheffieldP",
      "name": "hubspot_mcp",
      "url": "https://github.com/SheffieldP/hubspot_mcp",
      "imageUrl": "/freedevtools/mcp/pfp/SheffieldP.webp",
      "description": "Integrate with HubSpot CRM to access and manage contacts, companies, and engagements through a standardized interface. Utilize real-time HubSpot data to enhance application workflows.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-03-19T23:19:06Z",
      "readme_content": "# HubSpot MCP Server\n[![Docker Hub](https://img.shields.io/docker/v/buryhuang/mcp-hubspot?label=Docker%20Hub)](https://hub.docker.com/r/buryhuang/mcp-hubspot) [![smithery badge](https://smithery.ai/badge/mcp-hubspot)](https://smithery.ai/server/mcp-hubspot/prod)\n\n## Overview\n\nA Model Context Protocol (MCP) server implementation that provides integration with HubSpot CRM. This server enables AI models to interact with HubSpot data and operations through a standardized interface.\n\nFor more information about the Model Context Protocol and how it works, see [Anthropic's MCP documentation](https://www.anthropic.com/news/model-context-protocol).\n\n<a href=\"https://glama.ai/mcp/servers/vpoifk4jai\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/vpoifk4jai/badge\" alt=\"HubSpot Server MCP server\" /></a>\n\n## Components\n\n### Resources\n\nThe server exposes the following resources:\n\n* `hubspot://hubspot_contacts`: A dynamic resource that provides access to HubSpot contacts\n* `hubspot://hubspot_companies`: A dynamic resource that provides access to HubSpot companies\n* `hubspot://hubspot_recent_engagements`: A dynamic resource that provides access to HubSpot engagements from the last 3 days\n\nAll resources auto-update as their respective objects are modified in HubSpot.\n\n### Example Prompts\n\n- Create Hubspot contacts by copying from LinkedIn profile webpage: \n    ```\n    Create HubSpot contacts and companies from following:\n\n    John Doe\n    Software Engineer at Tech Corp\n    San Francisco Bay Area • 500+ connections\n    \n    Experience\n    Tech Corp\n    Software Engineer\n    Jan 2020 - Present · 4 yrs\n    San Francisco, California\n    \n    Previous Company Inc.\n    Senior Developer\n    2018 - 2020 · 2 yrs\n    \n    Education\n    University of California, Berkeley\n    Computer Science, BS\n    2014 - 2018\n    ```\n\n- Get latest activities for your company:\n    ```\n    What's happening latestly with my pipeline?\n    ```\n\n\n\n### Tools\n\nThe server offers several tools for managing HubSpot objects:\n\n#### Contact Management Tools\n* `hubspot_get_contacts`\n  * Retrieve contacts from HubSpot\n  * No input required\n  * Returns: Array of contact objects\n\n* `hubspot_create_contact`\n  * Create a new contact in HubSpot (checks for duplicates before creation)\n  * Input:\n    * `firstname` (string): Contact's first name\n    * `lastname` (string): Contact's last name\n    * `email` (string, optional): Contact's email address\n    * `properties` (dict, optional): Additional contact properties\n      * Example: `{\"phone\": \"123456789\", \"company\": \"HubSpot\"}`\n  * Behavior:\n    * Checks for existing contacts with the same first name and last name\n    * If `company` is provided in properties, also checks for matches with the same company\n    * Returns existing contact details if a match is found\n    * Creates new contact only if no match is found\n\n#### Company Management Tools\n* `hubspot_get_companies`\n  * Retrieve companies from HubSpot\n  * No input required\n  * Returns: Array of company objects\n\n* `hubspot_create_company`\n  * Create a new company in HubSpot (checks for duplicates before creation)\n  * Input:\n    * `name` (string): Company name\n    * `properties` (dict, optional): Additional company properties\n      * Example: `{\"domain\": \"example.com\", \"industry\": \"Technology\"}`\n  * Behavior:\n    * Checks for existing companies with the same name\n    * Returns existing company details if a match is found\n    * Creates new company only if no match is found\n\n* `hubspot_get_company_activity`\n  * Get activity history for a specific company\n  * Input:\n    * `company_id` (string): HubSpot company ID\n  * Returns: Array of activity objects\n\n#### Engagement Tools\n* `hubspot_get_recent_engagements`\n  * Get HubSpot engagements from all companies and contacts from the last 3 days\n  * No input required\n  * Returns: Array of engagement objects with full metadata\n\n\n## Multi-User Support\n\nThis MCP server is designed to work with multiple HubSpot users, each with their own access token. The server does not use a global environment variable for the access token.\n\nInstead, each request to the MCP server should include the user's specific access token in one of the following ways:\n\n1. In the request header: `X-HubSpot-Access-Token: your-token-here`\n2. In the request body as `accessToken`: `{\"accessToken\": \"your-token-here\"}`\n3. In the request body as `hubspotAccessToken`: `{\"hubspotAccessToken\": \"your-token-here\"}`\n\nThis design allows you to store user tokens in your own backend (e.g., Supabase) and pass them along with each request.\n\n### Example Multi-User Integration\n\n```javascript\n// Example of how to use this MCP server in a multi-user setup\nasync function makeHubSpotRequest(userId, action, params) {\n  // Retrieve the user's HubSpot token from your database\n  const userToken = await getUserHubSpotToken(userId); \n\n  // Make request to MCP server with the user's token\n  const response = await fetch('https://your-mcp-server.vercel.app/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-HubSpot-Access-Token': userToken\n    },\n    body: JSON.stringify({\n      action,\n      ...params\n    })\n  });\n  \n  return await response.json();\n}\n```\n\n## Setup\n\n### Prerequisites\n\nYou'll need a HubSpot access token for each user. You can obtain this by:\n1. Creating a private app in your HubSpot account:\n   Follow the [HubSpot Private Apps Guide](https://developers.hubspot.com/docs/guides/apps/private-apps/overview)\n   - Go to your HubSpot account settings\n   - Navigate to Integrations > Private Apps\n   - Click \"Create private app\"\n   - Fill in the basic information:\n     - Name your app\n     - Add description\n     - Upload logo (optional)\n   - Define required scopes:\n     - oauth (required)\n     \n   - Optional scopes:\n     - crm.dealsplits.read_write\n     - crm.objects.companies.read\n     - crm.objects.companies.write\n     - crm.objects.contacts.read\n     - crm.objects.contacts.write\n     - crm.objects.deals.read\n   - Review and create the app\n   - Copy the generated access token\n\nNote: Keep your access token secure and never commit it to version control.\n\n### Docker Installation\n\nYou can either build the image locally or pull it from Docker Hub. The image is built for the Linux platform.\n\n#### Supported Platforms\n- Linux/amd64\n- Linux/arm64\n- Linux/arm/v7\n\n#### Option 1: Pull from Docker Hub\n```bash\ndocker pull buryhuang/mcp-hubspot:latest\n```\n\n#### Option 2: Build Locally\n```bash\ndocker build -t mcp-hubspot .\n```\n\nRun the container:\n```bash\ndocker run \\\n  buryhuang/mcp-hubspot:latest\n```\n\n## Cross-Platform Publishing\n\nTo publish the Docker image for multiple platforms, you can use the `docker buildx` command. Follow these steps:\n\n1. **Create a new builder instance** (if you haven't already):\n   ```bash\n   docker buildx create --use\n   ```\n\n2. **Build and push the image for multiple platforms**:\n   ```bash\n   docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 -t buryhuang/mcp-hubspot:latest --push .\n   ```\n\n3. **Verify the image is available for the specified platforms**:\n   ```bash\n   docker buildx imagetools inspect buryhuang/mcp-hubspot:latest\n   ```\n\n\n## Usage with Claude Desktop\n\n### Installing via Smithery\n\nTo install mcp-hubspot for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-hubspot/prod):\n\n```bash\nnpx -y @smithery/cli@latest install mcp-hubspot --client claude\n```\n\n### Docker Usage\n```json\n{\n  \"mcpServers\": {\n    \"hubspot\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"buryhuang/mcp-hubspot:latest\"\n      ]\n    }\n  }\n}\n```\n\n## Development\n\nTo set up the development environment:\n\n```bash\npip install -e .\n```\n\n## License\n\nThis project is licensed under the MIT License. \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hubspot_mcp",
        "hubspot",
        "crm",
        "hubspot crm",
        "sheffieldp hubspot_mcp",
        "hubspot data"
      ],
      "category": "crm-and-sales-tools"
    },
    "hmk--attio-mcp-server": {
      "owner": "hmk",
      "name": "attio-mcp-server",
      "url": "https://github.com/hmk/attio-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/hmk.webp",
      "description": "Connects to the Attio API to read and write company records and notes for CRM management.",
      "stars": 15,
      "forks": 23,
      "license": "BSD 3-Clause \"New\" or \"Revised\" License",
      "language": "JavaScript",
      "updated_at": "2025-09-20T20:51:36Z",
      "readme_content": "# attio-mcp-server\n\nThis is an MCP server for [Attio](https://attio.com/), the AI-native CRM. It allows mcp clients (like Claude) to connect to the Attio API.\n\n#### Current Capabilities\n\n- [x] reading company records\n- [x] reading company notes\n- [x] writing company notes\n- [ ] other activities\n\n## Usage\n\nYou will need:\n\n- `ATTIO_API_KEY` \n\nThis is expected to be a *bearer token* which means you can get one through the [API Explorer](https://developers.attio.com/reference/get_v2-objects) on the right hand side or configure OAuth and retrieve one throught the Attio API.\n\n\n### Claude Desktop Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"attio\": {\n      \"command\": \"npx\",\n      \"args\": [\"attio-mcp-server\"],\n      \"env\": {\n        \"ATTIO_API_KEY\": \"YOUR_ATTIO_API_KEY\"\n      }\n    }\n  }\n}\n```\n## Development\n\n### Prerequisites\n\nBefore you begin, ensure you have the following installed:\n\n- Node.js (recommended v22 or higher)\n- npm\n- git\n- dotenv\n\n### Setting up Development Environment\n\nTo set up the development environment, follow these steps:\n\n1. Fork the repository\n\n   - Click the \"Fork\" button in the top-right corner of this repository\n   - This creates your own copy of the repository under your Github acocunt\n\n1. Clone Your Fork:\n\n   ```sh\n   git clone https://github.com/YOUR_USERNAME/attio-mcp-server.git\n   cd attio-mcp-server\n   ```\n\n1. Add Upstream Remote\n   ```sh\n   git remote add upstream https://github.com/hmk/attio-mcp-server.git\n   ```\n\n1. Copy the dotenv file\n    ```sh\n    cp .env.template .env\n    ```\n\n1. Install dependencies:\n\n   ```sh\n   npm install\n   ```\n\n1. Run watch to keep index.js updated:\n\n   ```sh\n   npm run build:watch\n   ```\n\n1. Start the model context protocol development server:\n\n   ```sh\n   dotenv npx @modelcontextprotocol/inspector node PATH_TO_YOUR_CLONED_REPO/dist/index.js\n   ```\n\n1. If the development server did not load the environment variable correctly, set the `ATTIO_API_KEY` on the left-hand side of the mcp inspector.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crm",
        "attio",
        "mcp",
        "attio api",
        "attio mcp",
        "crm management"
      ],
      "category": "crm-and-sales-tools"
    },
    "isaacraja--hubspot-mcp-server": {
      "owner": "isaacraja",
      "name": "hubspot-mcp-server",
      "url": "https://github.com/isaacraja/hubspot-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/isaacraja.webp",
      "description": "Provides access to HubSpot's contacts, deals, and engagement data, enabling real-time CRM insights and data manipulation.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-03-27T07:13:51Z",
      "readme_content": "# HubSpot MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@isaacraja/hubspot-mcp-server)](https://smithery.ai/server/@isaacraja/hubspot-mcp-server)\n\nA Model Context Protocol server that provides access to the HubSpot API. This server enables LLMs to interact with HubSpot contacts, deals, and engagement data.\nA Model Context Protocol server that provides access to the HubSpot API. This server enables LLMs to interact with HubSpot contacts, deals, and engagements.\n\n## Components\n\n### Tools\n\nThe server implements several tools for HubSpot interaction:\n\n#### Contact Tools\n- `get_contact_by_id`: Retrieve a contact by their HubSpot ID (supports both string and integer IDs)\n- `get_contact_by_email`: Find a contact by their email address\n- `search_contacts`: Search for contacts based on property criteria\n\n#### Deal Tools\n- `get_deal_by_id`: Retrieve a deal by its HubSpot ID\n- `get_contact_deals`: Get all deals associated with a contact\n- `get_deal_contacts`: Get all contacts associated with a deal\n\n#### Engagement Tools\n- `get_latest_marketing_campaign`: Get information about recent marketing campaigns\n- `get_campaign_engagement`: Get contacts who engaged with a specific campaign\n- `get_page_visits`: Get contacts who visited a specific page\n- `get_contact_analytics`: Get analytics data for a specific contact\n- `get_scheduled_meetings`: Get meetings scheduled within a time period\n- `get_meeting_details`: Get detailed information about a specific meeting\n\n### Resources\n\n- `hubspot://contacts/schema`: Information about the contact object structure\n- `hubspot://deals/schema`: Information about the deal object structure\n\n## Configuration\n\nThe server requires the following environment variables:\n\n- `HUBSPOT_API_KEY` (required): Your HubSpot API key\n\n## Quickstart\n\n### Install\n\n```bash\nuv pip install hubspot-mcp-server\n```\n\n### Claude Desktop Configuration\n\nAdd this to your Claude Desktop configuration file:\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n##### Installing via Smithery\n\nTo install HubSpot MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@isaacraja/hubspot-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @isaacraja/hubspot-mcp-server --client claude\n```\n\n##### Development Configuration\n\n```json\n\"mcpServers\": {\n  \"hubspot\": {\n    \"command\": \"uv\",\n    \"env\": {\n      \"HUBSPOT_API_KEY\": \"your_hubspot_api_key\"\n    },\n    \"args\": [\n      \"--directory\",\n      \"{{PATH_TO_REPO}}\",\n      \"run\",\n      \"hubspot-mcp-server\"\n    ]\n  }\n}\n```\n\nReplace `{{PATH_TO_REPO}}` with the path to your cloned repository and `your_hubspot_api_key` with your actual HubSpot API key.\n#### Development/Unpublished Server Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"hubspot-mcp-server\": {\n      \"command\": \"uv\",\n      \"env\": {\n        \"HUBSPOT_API_KEY\": \"your-api-key\"\n      },\n      \"args\": [\n        \"--directory\",\n        \"{{PATH_TO_REPO}}/src/hubspot_mcp_server\",\n        \"run\",\n        \"server.py\"\n      ]\n    }\n  }\n}\n```\n\n#### Published Server Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"hubspot-mcp-server\": {\n      \"command\": \"uvx\",\n      \"env\": {\n        \"HUBSPOT_API_KEY\": \"your-api-key\"\n      },\n      \"args\": [\n        \"hubspot-mcp-server\"\n      ]\n    }\n  }\n}\n```\n\nReplace `your-api-key` with your HubSpot API key.\n\n## Development\n\n### Building and Publishing\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Testing\n\nInstall test dependencies:\n\n```bash\nuv sync --extra test\n```\n\nRun tests:\n\n```bash\n# Run all tests\npytest\n\n# Run with coverage\npytest --cov=server\n```\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging experience, we recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory {{PATH_TO_REPO}} run hubspot-mcp-server\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hubspot",
        "crm",
        "mcp",
        "hubspot mcp",
        "crm insights",
        "crm sales"
      ],
      "category": "crm-and-sales-tools"
    },
    "lkm1developer--hubspot-mcp-server": {
      "owner": "lkm1developer",
      "name": "hubspot-mcp-server",
      "url": "https://github.com/lkm1developer/hubspot-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/lkm1developer.webp",
      "description": "Connects AI assistants to HubSpot CRM, enabling operations such as managing contacts and accessing real-time data through natural language commands.",
      "stars": 13,
      "forks": 8,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-01T22:24:33Z",
      "readme_content": "# HubSpot MCP Server\n\n[![TypeScript](https://img.shields.io/badge/TypeScript-4.9.5-blue.svg)](https://www.typescriptlang.org/)\n[![HubSpot API](https://img.shields.io/badge/HubSpot%20API-v3-orange.svg)](https://developers.hubspot.com/docs/api/overview)\n[![MCP SDK](https://img.shields.io/badge/MCP%20SDK-1.8.0-green.svg)](https://github.com/modelcontextprotocol/sdk)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nA powerful Model Context Protocol (MCP) server implementation for seamless HubSpot CRM integration, enabling AI assistants to interact with your HubSpot data.\n\n## Overview\n\nThis MCP server provides a comprehensive set of tools for interacting with the HubSpot CRM API, allowing AI assistants to:\n\n- Create and manage contacts and companies in your HubSpot CRM\n- Retrieve detailed company activity history and engagement timelines\n- Access recent engagement data across your entire HubSpot instance\n- Get lists of recently active companies and contacts\n- Perform CRM operations without leaving your AI assistant interface\n\n## Why Use This MCP Server?\n\n- **Seamless AI Integration**: Connect your AI assistants directly to your HubSpot CRM data\n- **Simplified CRM Operations**: Perform common HubSpot tasks through natural language commands\n- **Real-time Data Access**: Get up-to-date information from your HubSpot instance\n- **Secure Authentication**: Uses HubSpot's secure API token authentication\n- **Extensible Design**: Easily add more HubSpot API capabilities as needed\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/lkm1developer/hubspot-mcp-server.git\ncd hubspot-mcp-server\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Configuration\n\nThe server requires a HubSpot API access token. You can obtain one by:\n\n1. Going to your [HubSpot Developer Account](https://developers.hubspot.com/)\n2. Creating a private app with the necessary scopes (contacts, companies, engagements)\n3. Copying the generated access token\n\nYou can provide the token in two ways:\n\n1. As an environment variable:\n   ```\n   HUBSPOT_ACCESS_TOKEN=your-access-token\n   ```\n\n2. As a command-line argument:\n   ```\n   npm start -- --access-token=your-access-token\n   ```\n\nFor development, create a `.env` file in the project root to store your environment variables:\n\n```\nHUBSPOT_ACCESS_TOKEN=your-access-token\n```\n\n## Usage\n\n### Starting the Server\n\n```bash\n# Start the server\nnpm start\n\n# Or with a specific access token\nnpm start -- --access-token=your-access-token\n\n# Run the SSE server with authentication\nnpx mcp-proxy-auth node dist/index.js\n```\n\n### Implementing Authentication in SSE Server\n\nThe SSE server uses the [mcp-proxy-auth](https://www.npmjs.com/package/mcp-proxy-auth) package for authentication. To implement authentication:\n\n1. Install the package:\n   ```bash\n   npm install mcp-proxy-auth\n   ```\n\n2. Set the `AUTH_SERVER_URL` environment variable to point to your API key verification endpoint:\n   ```bash\n   export AUTH_SERVER_URL=https://your-auth-server.com/verify\n   ```\n\n3. Run the SSE server with authentication:\n   ```bash\n   npx mcp-proxy-auth node dist/index.js\n   ```\n\n4. The SSE URL will be available at:\n   ```\n   localhost:8080/sse?apiKey=apikey\n   ```\n\n   Replace `apikey` with your actual API key for authentication.\n\nThe `mcp-proxy-auth` package acts as a proxy that:\n- Intercepts requests to your SSE server\n- Verifies API keys against your authentication server\n- Only allows authenticated requests to reach your SSE endpoint\n\n### Integrating with AI Assistants\n\nThis MCP server is designed to work with AI assistants that support the Model Context Protocol. Once running, the server exposes a set of tools that can be used by compatible AI assistants to interact with your HubSpot CRM data.\n\n### Available Tools\n\nThe server exposes the following powerful HubSpot integration tools:\n\n1. **hubspot_create_contact**\n   - Create a new contact in HubSpot with duplicate checking\n   - Parameters:\n     - `firstname` (string, required): Contact's first name\n     - `lastname` (string, required): Contact's last name\n     - `email` (string, optional): Contact's email address\n     - `properties` (object, optional): Additional contact properties like company, phone, etc.\n   - Example:\n     ```json\n     {\n       \"firstname\": \"John\",\n       \"lastname\": \"Doe\",\n       \"email\": \"john.doe@example.com\",\n       \"properties\": {\n         \"company\": \"Acme Inc\",\n         \"phone\": \"555-123-4567\",\n         \"jobtitle\": \"Software Engineer\"\n       }\n     }\n     ```\n\n2. **hubspot_create_company**\n   - Create a new company in HubSpot with duplicate checking\n   - Parameters:\n     - `name` (string, required): Company name\n     - `properties` (object, optional): Additional company properties\n   - Example:\n     ```json\n     {\n       \"name\": \"Acme Corporation\",\n       \"properties\": {\n         \"domain\": \"acme.com\",\n         \"industry\": \"Technology\",\n         \"phone\": \"555-987-6543\",\n         \"city\": \"San Francisco\",\n         \"state\": \"CA\"\n       }\n     }\n     ```\n\n3. **hubspot_get_company_activity**\n   - Get comprehensive activity history for a specific company\n   - Parameters:\n     - `company_id` (string, required): HubSpot company ID\n   - Returns detailed engagement data including emails, calls, meetings, notes, and tasks\n\n4. **hubspot_get_recent_engagements**\n   - Get recent engagement activities across all contacts and companies\n   - Parameters:\n     - `days` (number, optional, default: 7): Number of days to look back\n     - `limit` (number, optional, default: 50): Maximum number of engagements to return\n   - Returns a chronological list of all recent CRM activities\n\n5. **hubspot_get_active_companies**\n   - Get most recently active companies from HubSpot\n   - Parameters:\n     - `limit` (number, optional, default: 10): Maximum number of companies to return\n   - Returns companies sorted by last modified date\n\n6. **hubspot_get_active_contacts**\n   - Get most recently active contacts from HubSpot\n   - Parameters:\n     - `limit` (number, optional, default: 10): Maximum number of contacts to return\n   - Returns contacts sorted by last modified date\n\n7. **hubspot_update_contact**\n   - Update an existing contact in HubSpot (ignores if contact does not exist)\n   - Parameters:\n     - `contact_id` (string, required): HubSpot contact ID to update\n     - `properties` (object, required): Contact properties to update\n   - Example:\n     ```json\n     {\n       \"contact_id\": \"12345\",\n       \"properties\": {\n         \"email\": \"updated.email@example.com\",\n         \"phone\": \"555-987-6543\",\n         \"jobtitle\": \"Senior Software Engineer\"\n       }\n     }\n     ```\n\n8. **hubspot_update_company**\n   - Update an existing company in HubSpot (ignores if company does not exist)\n   - Parameters:\n     - `company_id` (string, required): HubSpot company ID to update\n     - `properties` (object, required): Company properties to update\n   - Example:\n     ```json\n     {\n       \"company_id\": \"67890\",\n       \"properties\": {\n         \"domain\": \"updated-domain.com\",\n         \"phone\": \"555-123-4567\",\n         \"industry\": \"Software\",\n         \"city\": \"New York\",\n         \"state\": \"NY\"\n       }\n     }\n     ```\n\n## Extending the Server\n\nThe server is designed to be easily extensible. To add new HubSpot API capabilities:\n\n1. Add new methods to the `HubSpotClient` class in `src/hubspot-client.ts`\n2. Register new tools in the `setupToolHandlers` method in `src/index.ts`\n3. Rebuild the project with `npm run build`\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Keywords\n\nHubSpot, CRM, Model Context Protocol, MCP, AI Assistant, TypeScript, API Integration, HubSpot API, CRM Integration, Contact Management, Company Management, Engagement Tracking, AI Tools\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hubspot",
        "crm",
        "lkm1developer",
        "hubspot crm",
        "assistants hubspot",
        "hubspot mcp"
      ],
      "category": "crm-and-sales-tools"
    },
    "peakmojo--mcp-hubspot": {
      "owner": "peakmojo",
      "name": "mcp-hubspot",
      "url": "https://github.com/peakmojo/mcp-hubspot",
      "imageUrl": "/freedevtools/mcp/pfp/peakmojo.webp",
      "description": "Integrate with HubSpot CRM to access contacts, companies, and engagement data. Utilize built-in vector storage and caching to enhance performance and overcome API limitations.",
      "stars": 104,
      "forks": 52,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-27T21:24:40Z",
      "readme_content": "# HubSpot MCP Server\n[![Docker Hub](https://img.shields.io/docker/pulls/buryhuang/mcp-hubspot?label=Docker%20Hub)](https://hub.docker.com/r/buryhuang/mcp-hubspot) \n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n## Overview\n\nA Model Context Protocol (MCP) server that enables AI assistants to interact with HubSpot CRM data. This server bridges AI models with your HubSpot account, providing direct access to contacts, companies, and engagement data. Built-in vector storage and caching mechanisms help overcome HubSpot API limitations while improving response times.\n\nOur implementation prioritizes the most frequently used, high-value HubSpot operations with robust error handling and API stability. Each component is optimized for AI-friendly interactions, ensuring reliable performance even during complex, multi-step CRM workflows.\n\n## Why MCP-HubSpot?\n\n- **Direct CRM Access**: Connect Claude and other AI assistants to your HubSpot data without intermediary steps\n- **Context Retention**: Vector storage with FAISS enables semantic search across previous interactions\n- **Zero Configuration**: Simple Docker deployment with minimal setup\n\n## Example Prompts\n\n```\nCreate HubSpot contacts and companies from this LinkedIn profile:\n[Paste LinkedIn profile text]\n```\n\n```\nWhat's happening lately with my pipeline?\n```\n\n## Available Tools\n\nThe server offers tools for HubSpot management and data retrieval:\n\n| Tool | Purpose |\n|------|---------|\n| `hubspot_create_contact` | Create contacts with duplicate prevention |\n| `hubspot_create_company` | Create companies with duplicate prevention |\n| `hubspot_get_company_activity` | Retrieve activity for specific companies |\n| `hubspot_get_active_companies` | Retrieve most recently active companies |\n| `hubspot_get_active_contacts` | Retrieve most recently active contacts |\n| `hubspot_get_recent_conversations` | Retrieve recent conversation threads with messages |\n| `hubspot_search_data` | Semantic search across previously retrieved HubSpot data |\n\n## Performance Features\n\n- **Vector Storage**: Utilizes FAISS for efficient semantic search and retrieval\n- **Thread-Level Indexing**: Stores each conversation thread individually for precise retrieval\n- **Embedding Caching**: Uses SentenceTransformer with automatic caching\n- **Persistent Storage**: Data persists between sessions in configurable storage directory\n- **Multi-platform Support**: Optimized Docker images for various architectures\n\n## Setup\n\n### Prerequisites\n\nYou'll need a HubSpot access token with these scopes:\n- crm.objects.contacts (read/write)\n- crm.objects.companies (read/write)\n- sales-email-read\n\n### Quick Start\n\n```bash\n# Install via Smithery (recommended)\nnpx -y @smithery/cli@latest install mcp-hubspot --client claude\n\n# Or pull Docker image directly\ndocker run -e HUBSPOT_ACCESS_TOKEN=your_token buryhuang/mcp-hubspot:latest\n```\n\n### Docker Configuration\n\nFor manual configuration in Claude desktop:\n\n```json\n{\n  \"mcpServers\": {\n    \"hubspot\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"-i\", \"--rm\",\n        \"-e\", \"HUBSPOT_ACCESS_TOKEN=your_token\",\n        \"-v\", \"/path/to/storage:/storage\",  # Optional persistent storage\n        \"buryhuang/mcp-hubspot:latest\"\n      ]\n    }\n  }\n}\n```\n\n### Building Docker Image\n\nTo build the Docker image locally:\n\n```bash\ngit clone https://github.com/buryhuang/mcp-hubspot.git\ncd mcp-hubspot\ndocker build -t mcp-hubspot .\n```\n\nFor multi-platform builds:\n\n```bash\ndocker buildx create --use\ndocker buildx build --platform linux/amd64,linux/arm64 -t buryhuang/mcp-hubspot:latest --push .\n```\n\n## Development\n\n```bash\npip install -e .\n```\n\n## License\n\nMIT License \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hubspot",
        "crm",
        "peakmojo",
        "hubspot crm",
        "mcp hubspot",
        "integrate hubspot"
      ],
      "category": "crm-and-sales-tools"
    },
    "peancor--moodle-mcp-server": {
      "owner": "peancor",
      "name": "moodle-mcp-server",
      "url": "https://github.com/peancor/moodle-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/peancor.webp",
      "description": "Manage Moodle courses, students, assignments, and quizzes through integration with LLMs, enabling automation of feedback and progress tracking.",
      "stars": 19,
      "forks": 8,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-04T09:57:07Z",
      "readme_content": "# Moodle MCP Server\n\nAn MCP (Model Context Protocol) server that enables LLMs to interact with the Moodle platform to manage courses, students, assignments, and quizzes.\n\n## Features\n\n### Student Management Tools\n- `list_students` - Retrieves the list of students enrolled in the course\n  - Displays ID, name, email, and last access time for each student\n\n### Assignment Management Tools\n- `get_assignments` - Retrieves all available assignments in the course\n  - Includes information such as ID, name, description, due date, and maximum grade\n- `get_student_submissions` - Examines a student's submissions for a specific assignment\n  - Requires the assignment ID and optionally the student ID\n- `provide_assignment_feedback` - Provides grades and comments for a student's submission\n  - Requires student ID, assignment ID, grade, and feedback comment\n\n### Quiz Management Tools\n- `get_quizzes` - Retrieves all available quizzes in the course\n  - Includes information such as ID, name, description, opening/closing dates, and maximum grade\n- `get_quiz_attempts` - Examines a student's attempts on a specific quiz\n  - Requires the quiz ID and optionally the student ID\n- `provide_quiz_feedback` - Provides comments for a quiz attempt\n  - Requires the attempt ID and feedback comment\n\n## Requirements\n\n- Node.js (v14 or higher)\n- Moodle API token with appropriate permissions\n- Moodle course ID\n\n## Installation\n\n1. Clone this repository:\n```bash\ngit clone https://github.com/your-username/moodle-mcp-server.git\ncd moodle-mcp-server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Create a `.env` file with the following configuration:\n```\nMOODLE_API_URL=https://your-moodle.com/webservice/rest/server.php\nMOODLE_API_TOKEN=your_api_token\nMOODLE_COURSE_ID=1  # Replace with your course ID\n```\n\n4. Build the server:\n```bash\nnpm run build\n```\n\n## Usage with Claude\n\nTo use with Claude Desktop, add the server configuration:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`  \nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"moodle-mcp-server\": {\n      \"command\": \"/path/to/node\",\n      \"args\": [\n        \"/path/to/moodle-mcp-server/build/index.js\"\n      ],\n      \"env\": {\n        \"MOODLE_API_URL\": \"https://your-moodle.com/webservice/rest/server.php\",\n        \"MOODLE_API_TOKEN\": \"your_moodle_api_token\",\n        \"MOODLE_COURSE_ID\": \"your_course_id\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nFor Windows users, the paths would use backslashes:\n\n```json\n{\n  \"mcpServers\": {\n    \"moodle-mcp-server\": {\n      \"command\": \"C:\\\\path\\\\to\\\\node.exe\",\n      \"args\": [\n        \"C:\\\\path\\\\to\\\\moodle-mcp-server\\\\build\\\\index.js\"\n      ],\n      \"env\": {\n        \"MOODLE_API_URL\": \"https://your-moodle.com/webservice/rest/server.php\",\n        \"MOODLE_API_TOKEN\": \"your_moodle_api_token\",\n        \"MOODLE_COURSE_ID\": \"your_course_id\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nOnce configured, Claude will be able to interact with your Moodle course to:\n- View the list of students and their submissions\n- Provide comments and grades for assignments\n- Examine quiz attempts and offer feedback\n\n## Development\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n### Debugging\n\nMCP servers communicate through stdio, which can make debugging challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector):\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## Obtaining a Moodle API Token\n\n1. Log in to your Moodle site as an administrator\n2. Go to Site Administration > Plugins > Web Services > Manage tokens\n3. Create a new token with the necessary permissions to manage courses\n4. Copy the generated token and add it to your `.env` file\n\n## Security\n\n- Never share your `.env` file or Moodle API token\n- Ensure the MCP server only has access to the courses it needs to manage\n- Use a token with the minimum necessary permissions\n\n## License\n\n[MIT](LICENSE)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "moodle",
        "crm",
        "llms",
        "manage moodle",
        "moodle courses",
        "moodle mcp"
      ],
      "category": "crm-and-sales-tools"
    },
    "salesforce-mcp--salesforce-mcp": {
      "owner": "salesforce-mcp",
      "name": "salesforce-mcp",
      "url": "https://github.com/salesforce-mcp/salesforce-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Interact with Salesforce data and metadata through natural language commands to gain insights, manage records, and configure the platform. Perform actions like creating, updating, and deleting Salesforce objects and fields, as well as automating tasks.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crm",
        "mcp",
        "tools",
        "mcp salesforce",
        "salesforce mcp",
        "tools salesforce"
      ],
      "category": "crm-and-sales-tools"
    },
    "scopiousdigital--hubspot-mcp": {
      "owner": "scopiousdigital",
      "name": "hubspot-mcp",
      "url": "https://github.com/scopiousdigital/hubspot-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/scopiousdigital.webp",
      "description": "Interact with HubSpot CRM to access and manage contacts, deals, and companies for sales analysis. Use powerful analytics tools to drive insights and optimize sales performance.",
      "stars": 9,
      "forks": 1,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-05-01T11:33:29Z",
      "readme_content": "# HubSpot MCP Server\n\nMCP Server for the HubSpot API, enabling Claude to interact with HubSpot CRM for sales analysis and insights.\n\n> #### Disclaimer\n>\n> This open-source project is not affiliated with or endorsed by HubSpot. It is an independent implementation that interacts with HubSpot's API.\n\n## Tools\n\n### Core CRM Tools\n\n1. `hubspot_search_contacts`\n\n   - Search for contacts in HubSpot using a query string\n   - Required inputs:\n     - `query` (string): Search query string (email, name, etc.)\n   - Optional inputs:\n     - `count` (number, default: 10): Maximum number of contacts to return\n     - `propertyList` (array): List of properties to include in results\n   - Returns: List of matching contacts with their properties\n\n2. `hubspot_get_contact`\n\n   - Get a specific contact by ID\n   - Required inputs:\n     - `contactId` (string): The ID of the contact to retrieve\n   - Optional inputs:\n     - `properties` (array): List of properties to include in results\n   - Returns: Contact details with specified properties\n\n3. `hubspot_create_contact`\n\n   - Create a new contact in HubSpot\n   - Required inputs:\n     - `properties` (object): Contact properties with at least `email` field\n   - Returns: Created contact details\n\n4. `hubspot_update_contact`\n\n   - Update an existing contact in HubSpot\n   - Required inputs:\n     - `contactId` (string): The ID of the contact to update\n     - `properties` (object): Contact properties to update\n   - Returns: Updated contact confirmation\n\n5. `hubspot_list_deals`\n\n   - List deals in HubSpot with pagination\n   - Optional inputs:\n     - `limit` (number, default: 10, max: 100): Maximum number of deals to return\n     - `after` (string): Pagination cursor for next page\n     - `properties` (array): List of properties to include in results\n   - Returns: List of deals with their details\n\n6. `hubspot_get_deal`\n\n   - Get a specific deal by ID\n   - Required inputs:\n     - `dealId` (string): The ID of the deal to retrieve\n   - Optional inputs:\n     - `properties` (array): List of properties to include in results\n   - Returns: Deal details with specified properties\n\n7. `hubspot_create_deal`\n\n   - Create a new deal in HubSpot\n   - Required inputs:\n     - `properties` (object): Deal properties with at least `dealname` field\n   - Returns: Created deal details\n\n8. `hubspot_update_deal`\n\n   - Update an existing deal in HubSpot\n   - Required inputs:\n     - `dealId` (string): The ID of the deal to update\n     - `properties` (object): Deal properties to update\n   - Returns: Updated deal confirmation\n\n9. `hubspot_list_companies`\n\n   - List companies in HubSpot with pagination\n   - Optional inputs:\n     - `limit` (number, default: 10, max: 100): Maximum number of companies to return\n     - `after` (string): Pagination cursor for next page\n     - `properties` (array): List of properties to include in results\n   - Returns: List of companies with their details\n\n10. `hubspot_get_company`\n    - Get a specific company by ID\n    - Required inputs:\n      - `companyId` (string): The ID of the company to retrieve\n    - Optional inputs:\n      - `properties` (array): List of properties to include in results\n    - Returns: Company details with specified properties\n\n### Sales Analytics Tools\n\n11. `hubspot_get_sales_analytics`\n\n    - Get aggregated sales analytics data for specific time periods\n    - Required inputs:\n      - `period` (string): Time period to group analytics data by (daily, weekly, monthly, quarterly, yearly)\n      - `startDate` (string): Start date for analysis in ISO format (YYYY-MM-DD)\n    - Optional inputs:\n      - `endDate` (string): End date for analysis in ISO format\n      - `pipeline` (string): Pipeline ID to filter by\n      - `dealStage` (string): Deal stage ID to filter by\n      - `dealOwner` (string): Deal owner ID to filter by\n    - Returns: Aggregated sales metrics grouped by time period\n\n12. `hubspot_get_deal_history`\n\n    - Get the complete history of changes to a deal\n    - Required inputs:\n      - `dealId` (string): The ID of the deal to get history for\n    - Returns: History of deal changes with timestamps and modified properties\n\n13. `hubspot_get_deal_notes`\n\n    - Get notes associated with a specific deal\n    - Required inputs:\n      - `dealId` (string): The ID of the deal to get notes for\n    - Optional inputs:\n      - `limit` (number, default: 20): Maximum number of notes to return\n      - `after` (string): Pagination cursor for next page of results\n    - Returns: List of notes with their content and creation timestamps\n\n14. `hubspot_get_engagements_by_deal`\n\n    - Get all engagement activities associated with a deal\n    - Required inputs:\n      - `dealId` (string): The ID of the deal to get engagements for\n    - Optional inputs:\n      - `types` (array): Types of engagements to include (CALL, EMAIL, MEETING, TASK, NOTE)\n      - `limit` (number, default: 20): Maximum number of engagements to return\n      - `after` (string): Pagination cursor for next page of results\n    - Returns: List of engagements with their details and type information\n\n15. `hubspot_get_sales_performance`\n\n    - Get performance metrics for sales reps over a specific time period\n    - Required inputs:\n      - `period` (string): Time period to group performance data by (daily, weekly, monthly, quarterly, yearly)\n      - `startDate` (string): Start date for analysis in ISO format (YYYY-MM-DD)\n    - Optional inputs:\n      - `endDate` (string): End date for analysis in ISO format\n      - `ownerIds` (array): List of owner IDs to include in the analysis\n      - `pipeline` (string): Pipeline ID to filter by\n    - Returns: Performance metrics for each sales rep including deal counts, revenue, and win rates\n\n16. `hubspot_get_pipeline_analytics`\n\n    - Get analytics for a specific sales pipeline including conversion rates between stages\n    - Required inputs:\n      - `pipelineId` (string): The ID of the pipeline to analyze\n      - `period` (string): Time period to group analytics data by (daily, weekly, monthly, quarterly, yearly)\n      - `startDate` (string): Start date for analysis in ISO format (YYYY-MM-DD)\n    - Optional inputs:\n      - `endDate` (string): End date for analysis in ISO format\n    - Returns: Pipeline stage metrics including deal counts, values, conversion rates, and time in stage\n\n17. `hubspot_get_forecast_analytics`\n    - Get forecasted sales data based on current pipeline and historical performance\n    - Required inputs:\n      - `period` (string): Time period to group forecast data by (monthly, quarterly, yearly)\n    - Optional inputs:\n      - `numberOfPeriods` (number, default: 3): Number of future periods to forecast\n      - `pipeline` (string): Pipeline ID to filter by\n    - Returns: Forecasted sales metrics for future periods based on historical data and current pipeline\n\n## Setup\n\n1. Create a HubSpot Private App:\n\n   - Go to your HubSpot account\n   - Navigate to Settings → Account Setup → Integrations → Private Apps\n   - Click \"Create private app\"\n   - Name your app and set appropriate scopes (contacts, deals, and companies)\n   - Create the app and copy your private app token\n\n2. Required Scopes:\n   - `crm.objects.contacts.read`\n   - `crm.objects.contacts.write`\n   - `crm.objects.deals.read`\n   - `crm.objects.deals.write`\n   - `crm.objects.companies.read`\n   - `crm.objects.companies.write`\n   - `crm.objects.owners.read`\n   - `crm.objects.quotes.read`\n   - `crm.objects.line_items.read`\n   - `crm.objects.custom.read`\n   - `crm.schemas.deals.read`\n   - `crm.schemas.contacts.read`\n   - `crm.schemas.companies.read`\n   - `crm.schemas.custom.read`\n\n### Usage with Claude Desktop\n\nAdd the following to your `claude_desktop_config.json`:\n\n#### npx\n\n```json\n{\n  \"mcpServers\": {\n    \"hubspot\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-hubspot\"],\n      \"env\": {\n        \"HUBSPOT_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n```\n\n#### docker\n\n```json\n{\n  \"mcpServers\": {\n    \"hubspot\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"-e\", \"HUBSPOT_API_KEY\", \"mcp/hubspot\"],\n      \"env\": {\n        \"HUBSPOT_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n```\n\n### Troubleshooting\n\nIf you encounter errors, verify that:\n\n1. All required scopes are added to your HubSpot private app\n2. The API key is correctly copied to your configuration\n3. Your HubSpot plan includes access to the APIs you're trying to use\n\n## Build\n\nDocker build:\n\n```bash\ndocker build -t mcp/hubspot -f Dockerfile .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hubspot",
        "crm",
        "analytics",
        "hubspot crm",
        "hubspot mcp",
        "crm sales"
      ],
      "category": "crm-and-sales-tools"
    },
    "shinzo-labs--hubspot-mcp": {
      "owner": "shinzo-labs",
      "name": "hubspot-mcp",
      "url": "https://github.com/shinzo-labs/hubspot-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/shinzo-labs.webp",
      "description": "Access and manage CRM data through the HubSpot API, offering functionalities for handling Contacts, Companies, and their Associations. Supports complete coverage of standard CRM objects and advanced association management.",
      "stars": 22,
      "forks": 16,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-01T22:22:11Z",
      "readme_content": "<div align=\"center\">\n    <h1 align=\"center\">HubSpot MCP Server</h1>\n    <p align=center>\n        <a href=\"https://badge.fury.io/js/@shinzolabs%2Fhubspot-mcp\"><img src=\"https://badge.fury.io/js/@shinzolabs%2Fhubspot-mcp.svg\" alt=\"NPM Version\"></a>\n        <a href=\"https://github.com/shinzo-labs/hubspot-mcp/stargazers\"><img src=\"https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fapi.github.com%2Frepos%2Fshinzo-labs%2Fhubspot-mcp%2Fstargazers&query=%24.length&logo=github&label=stars&color=e3b341\" alt=\"Stars\"></a>\n        <a href=\"https://github.com/shinzo-labs/hubspot-mcp/forks\"><img src=\"https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fapi.github.com%2Frepos%2Fshinzo-labs%2Fhubspot-mcp%2Fforks&query=%24.length&logo=github&label=forks&color=8957e5\" alt=\"Forks\"></a>\n        <a href=\"https://smithery.ai/server/@shinzo-labs/hubspot-mcp\"><img src=\"https://smithery.ai/badge/@shinzo-labs/hubspot-mcp\" alt=\"Smithery Calls\"></a>\n        <a href=\"https://www.npmjs.com/package/@shinzolabs/hubspot-mcp\"><img src=\"https://img.shields.io/npm/dm/%40shinzolabs%2Fhubspot-mcp\" alt=\"NPM Downloads\"></a>\n</div>\n\nA [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) server implementation for the [HubSpot](https://hubspot.com/) API, providing a standardized interface for accessing and managing CRM data.\n\n<p align=\"center\"><img height=\"512\" src=https://github.com/user-attachments/assets/6a0febe5-1aa5-4998-affb-6c5874ed00c4></p>\n\n## Features\n\n- Complete coverage of the HubSpot CRM API\n- Support for all standard CRM objects (companies, contacts, deals, etc.)\n- Advanced association management with CRM Associations v4\n- Company-specific endpoints with property validation\n- Batch operations for efficient data management\n- Advanced search and filtering capabilities\n- Type-safe parameter validation with [Zod](https://zod.dev/)\n\n## Prerequisites\n\nIf you don't have an API key, follow the steps [here](https://developers.hubspot.com/docs/guides/api/overview) to obtain an access token. OAuth support is planned as a future enhancement.\n\n## Client Configuration\n\nThere are several options to configure your MCP client with the server. For hosted/remote server setup, use Smithery's CLI with a [Smithery API Key](https://smithery.ai/docs/registry#registry-api). For local installation, use `npx` or build from source. Each of these options is explained below.\n\n### Smithery Remote Server (Recommended)\n\nTo add a remote server to your MCP client `config.json`, run the following command from [Smithery CLI](https://github.com/smithery-ai/cli?tab=readme-ov-file#smithery-cli--):\n\n```bash\nnpx -y @smithery/cli install @shinzo-labs/hubspot-mcp\n```\n\nEnter your `HUBSPOT_ACCESS_TOKEN` when prompted.\n\n### Smithery SDK\n\nIf you are developing your own agent application, you can use the boilerplate code [here](https://smithery.ai/server/@shinzo-labs/hubspot-mcp/api).\n\n### NPX Local Install\n\nTo install the server locally with `npx`, add the following to your MCP client `config.json`:\n```javascript\n{\n  \"mcpServers\": {\n    \"hubspot\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@shinzolabs/hubspot-mcp\"\n      ],\n      \"env\": {\n        \"HUBSPOT_ACCESS_TOKEN\": \"your-access-token-here\"\n      }\n    }\n  }\n}\n```\n\n### Build from Source\n\n1. Download the repo:\n```bash\ngit clone https://github.com/shinzo-labs/hubspot-mcp.git\n```\n\n2. Install packages (inside cloned repo):\n```bash\npnpm i\n```\n\n3. Add the following to your MCP client `config.json`:\n```javascript\n{\n  \"mcpServers\": {\n    \"hubspot\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/hubspot-mcp/index.js\"\n      ],\n      \"env\": {\n        \"HUBSPOT_ACCESS_TOKEN\": \"your-access-token-here\"\n      }\n    }\n  }\n}\n```\n\n## Config Variables\n\n| Variable               | Description                               | Required? | Default |\n|------------------------|-------------------------------------------|-----------|---------|\n| `HUBSPOT_ACCESS_TOKEN` | Access Token for Hubspot Application      | Yes       |         |\n| `PORT                ` | Port for Streamable HTTP transport method | No        | `3000`  |\n| `TELEMETRY_ENABLED`    | Enable telemetry                          | No        | `true`  |\n\n## Supported Tools\n\n### Core CRM Objects\n\n  - `crm_list_objects`: List CRM objects with optional filtering and pagination\n  - `crm_get_object`: Get a single CRM object by ID\n  - `crm_create_object`: Create a new CRM object\n  - `crm_update_object`: Update an existing CRM object\n  - `crm_archive_object`: Archive (delete) a CRM object\n  - `crm_search_objects`: Search CRM objects using advanced filters\n  - `crm_batch_create_objects`: Create multiple objects in a single request\n  - `crm_batch_read_objects`: Read multipl objects in a single request\n  - `crm_batch_update_objects`: Update multiple objects in a single request\n  - `crm_batch_archive_objects`: Archive (delete) multiple objects in a single request\n\n### Companies\n\n  - `crm_create_company`: Create a new company with validated properties\n  - `crm_update_company`: Update an existing company\n  - `crm_get_company`: Get a single company by ID\n  - `crm_search_companies`: Search companies with specific filters\n  - `crm_batch_create_companies`: Create multiple companies in a single request\n  - `crm_batch_update_companies`: Update multiple companies in a single request\n  - `crm_get_company_properties`: Get all available company properties\n  - `crm_create_company_property`: Create a new company property\n\n### Contacts\n\n  - `crm_create_contact`: Create a new contact with validated properties\n  - `crm_update_contact`: Update an existing contact's information\n  - `crm_get_contact`: Get a single contact by ID\n  - `crm_search_contacts`: Search contacts with specific filters\n  - `crm_batch_create_contacts`: Create multiple contacts in a single request\n  - `crm_batch_update_contacts`: Update multiple contacts in a single request\n  - `crm_get_contact_properties`: Get all available contact properties\n  - `crm_create_contact_property`: Create a new contact property\n\n### Leads\n\n  - `crm_create_lead`: Create a new lead with validated properties\n  - `crm_update_lead`: Update an existing lead's information\n  - `crm_get_lead`: Get a single lead by ID\n  - `crm_search_leads`: Search leads with specific filters\n  - `crm_batch_create_leads`: Create multiple leads in a single request\n  - `crm_batch_update_leads`: Update multiple leads in a single request\n  - `crm_get_lead_properties`: Get all available lead properties\n  - `crm_create_lead_property`: Create a new lead property\n\n### Engagement Management\n\n  - `engagement_details_get`: Get details of a specific engagement\n  - `engagement_details_create`: Create a new engagement\n  - `engagement_details_update`: Update an existing engagement\n  - `engagement_details_archive`: Archive (delete) an engagement\n  - `engagement_details_list`: List all engagements with filtering\n  - `engagement_details_get_associated`: Get associated engagements\n\n### Calls\n\n  - `calls_create`: Create a new call record\n  - `calls_get`: Get call details\n  - `calls_update`: Update a call record\n  - `calls_archive`: Archive a call\n  - `calls_list`: List all calls\n  - `calls_search`: Search calls\n  - `calls_batch_create`: Create multiple calls\n  - `calls_batch_read`: Read multiple calls\n  - `calls_batch_update`: Update multiple calls\n  - `calls_batch_archive`: Archive multiple calls\n\n### Emails\n\n  - `emails_create`: Create a new email record\n  - `emails_get`: Get email details\n  - `emails_update`: Update an email\n  - `emails_archive`: Archive an email\n  - `emails_list`: List all emails\n  - `emails_search`: Search emails\n  - `emails_batch_create`: Create multiple emails\n  - `emails_batch_read`: Read multiple emails\n  - `emails_batch_update`: Update multiple emails\n  - `emails_batch_archive`: Archive multiple emails\n\n### Meetings\n\n  - `meetings_create`: Create a new meeting\n  - `meetings_get`: Get meeting details\n  - `meetings_update`: Update a meeting\n  - `meetings_archive`: Archive (delete) a meeting\n  - `meetings_list`: List all meetings\n  - `meetings_search`: Search meetings\n  - `meetings_batch_create`: Create multiple meetings\n  - `meetings_batch_update`: Update multiple meetings\n  - `meetings_batch_archive`: Archive multiple meetings\n\n### Notes\n\n  - `notes_create`: Create a new note\n  - `notes_get`: Get note details\n  - `notes_update`: Update a note\n  - `notes_archive`: Archive a note\n  - `notes_list`: List all notes\n  - `notes_search`: Search notes\n  - `notes_batch_create`: Create multiple notes\n  - `notes_batch_read`: Read multiple notes\n  - `notes_batch_update`: Update multiple notes\n  - `notes_batch_archive`: Archive multiple notes\n\n### Tasks\n\n  - `tasks_create`: Create a new task\n  - `tasks_get`: Get task details\n  - `tasks_update`: Update a task\n  - `tasks_archive`: Archive a task\n  - `tasks_list`: List all tasks\n  - `tasks_search`: Search tasks\n  - `tasks_batch_create`: Create multiple tasks\n  - `tasks_batch_read`: Read multiple tasks\n  - `tasks_batch_update`: Update multiple tasks\n  - `tasks_batch_archive`: Archive multiple tasks\n\n### Associations and Relationships\n\n  - `crm_list_association_types`: List available association types\n  - `crm_get_associations`: Get all associations between objects\n  - `crm_create_association`: Create an association\n  - `crm_archive_association`: Archive (delete) an association\n  - `crm_batch_create_associations`: Create multiple associations\n  - `crm_batch_archive_associations`: Archive (delete) multiple associations\n\n### Communication Preferences\n\n  - `communications_get_preferences`: Get contact preferences\n  - `communications_update_preferences`: Update contact preferences\n  - `communications_unsubscribe_contact`: Global unsubscribe\n  - `communications_subscribe_contact`: Global subscribe\n  - `communications_get_subscription_definitions`: Get subscription definitions\n  - `communications_get_subscription_status`: Get status for multiple contacts\n  - `communications_update_subscription_status`: Update status for multiple contacts\n\n### Products\n\n  - `products_create`: Create a product with the given properties and return a copy of the object, including the ID.\n  - `products_read`: Read an Object identified by ID\n  - `products_update`: Perform a partial update of an Object identified by ID. Read-only and non-existent properties will result in an error. Properties values can be cleared by passing an empty string.\n  - `products_archive`: Move an Object identified by ID to the recycling bin.\n  - `products_list`: Read a page of products. Control what is returned via the `properties` query param. `after` is the paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.\n  - `products_search`: Search products\n  - `products_batch_create`: Create a batch of products\n  - `products_batch_read`: Read a batch of products by internal ID, or unique property values. Retrieve records by the `idProperty` parameter to retrieve records by a custom unique value property.\n  - `products_batch_update`: Update a batch of products by internal ID, or unique values specified by the `idProperty` query param.\n  - `products_batch_archive`: Archive a batch of products by ID\n\n## Contributing\n\nContributions are welcomed and encouraged! Please read [CONTRIBUTING.md](./CONTRIBUTING.md) for guidelines on issues, contributions, and contact information.\n\n## Data Collection and Privacy\n\nShinzo Labs collects limited anonymous telemetry from this server to help improve our products and services. No personally identifiable information is collected as part of this process. Please review the [Privacy Policy](./PRIVACY.md) for more details on the types of data collected and how to opt-out of this telemetry.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crm",
        "hubspot",
        "tools",
        "hubspot api",
        "manage crm",
        "crm data"
      ],
      "category": "crm-and-sales-tools"
    },
    "smn2gnt--MCP-Salesforce": {
      "owner": "smn2gnt",
      "name": "MCP-Salesforce",
      "url": "https://github.com/smn2gnt/MCP-Salesforce",
      "imageUrl": "/freedevtools/mcp/pfp/smn2gnt.webp",
      "description": "Interact with Salesforce using SOQL and SOSL queries for data retrieval and manipulation, including CRUD operations on records and metadata access for Salesforce objects.",
      "stars": 140,
      "forks": 47,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-27T12:21:32Z",
      "readme_content": "# MCP Salesforce Connector\n\nA Model Context Protocol (MCP) server implementation for Salesforce integration, allowing LLMs to interact with Salesforce data through SOQL queries and SOSL searches.\n\n## Features\n\n- Execute SOQL (Salesforce Object Query Language) queries\n- Perform SOSL (Salesforce Object Search Language) searches\n- Retrieve metadata for Salesforce objects, including field names, labels, and types\n- Retrieve, create, update, and delete records\n- Execute Tooling API requests\n- Execute Apex REST requests\n- Make direct REST API calls to Salesforce\n\n\n## Configuration\n### Model Context Protocol\n\nTo use this server with the Model Context Protocol, you need to configure it in your `claude_desktop_config.json` file. Add the following entry to the `mcpServers` section:\n\n\n    {\n        \"mcpServers\": {\n            \"salesforce\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"--from\",\n                \"mcp-salesforce-connector\",\n                \"salesforce\"\n            ],\n            \"env\": {\n                \"SALESFORCE_ACCESS_TOKEN\": \"SALESFORCE_ACCESS_TOKEN\",\n                \"SALESFORCE_INSTANCE_URL\": \"SALESFORCE_INSTANCE_URL\",\n                \"SALESFORCE_DOMAIN\": \"SALESFORCE_DOMAIN\"\n                }\n            }\n        }\n    }\n    \n\n\n**Note on Salesforce Authentication Methods**\n\nThis server supports two authentication methods:\n\n- **OAuth (Recommended):** Set `SALESFORCE_ACCESS_TOKEN` and `SALESFORCE_INSTANCE_URL` as environment variables. \n- **Username/Password (Legacy):** If `SALESFORCE_ACCESS_TOKEN` and `SALESFORCE_INSTANCE_URL` are not set, the server will fall back to using `SALESFORCE_USERNAME`, `SALESFORCE_PASSWORD`, and `SALESFORCE_SECURITY_TOKEN`. \n\n**Environment Configuration**\n\n- **`SALESFORCE_DOMAIN` (Optional):** Set to `test` to connect to a Salesforce sandbox environment. If not set or left empty, the server will connect to the production environment. \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "smn2gnt",
        "crm",
        "mcp",
        "mcp salesforce",
        "tools smn2gnt",
        "smn2gnt mcp"
      ],
      "category": "crm-and-sales-tools"
    },
    "usama-dtc--salesforce_mcp": {
      "owner": "usama-dtc",
      "name": "salesforce_mcp",
      "url": "https://github.com/usama-dtc/salesforce_mcp",
      "imageUrl": "/freedevtools/mcp/pfp/usama-dtc.webp",
      "description": "Integrate natural language queries to manage and modify Salesforce data and metadata, facilitating effortless interactions with Salesforce objects and records.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-03-24T21:20:56Z",
      "readme_content": "# Salesforce MCP Server\n\nAn MCP (Model Context Protocol) server implementation that integrates Claude with Salesforce, enabling natural language interactions with your Salesforce data and metadata. This server allows Claude to query, modify, and manage your Salesforce objects and records using everyday language.\n\n<a href=\"https://glama.ai/mcp/servers/n1rsv1aiee\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/n1rsv1aiee/badge\" alt=\"Salesforce Server MCP server\" />\n</a>\n\n## Features\n\n* **Object and Field Management**: Create and modify custom objects and fields using natural language\n* **Smart Object Search**: Find Salesforce objects using partial name matches\n* **Detailed Schema Information**: Get comprehensive field and relationship details for any object\n* **Flexible Data Queries**: Query records with relationship support and complex filters\n* **Data Manipulation**: Insert, update, delete, and upsert records with ease\n* **Cross-Object Search**: Search across multiple objects using SOSL\n* **Intuitive Error Handling**: Clear feedback with Salesforce-specific error details\n\n## Installation\n\n```bash\nnpm install -g @surajadsul02/mcp-server-salesforce\n```\n\n## Setup\n\n### Salesforce Authentication\nYou can authenticate with Salesforce using one of two methods:\n\n#### 1. Username/Password Authentication\n1. Set up your Salesforce credentials\n2. Get your security token (Reset from Salesforce Settings)\n3. Configure the environment variables as shown in the configuration section\n\n#### 2. OAuth2 Authentication with Consumer Key/Secret\n1. Set up a Connected App in Salesforce\n2. Get the Consumer Key and Consumer Secret\n3. Configure the environment variables as shown in the configuration section\n\n### IDE Integration\n\n#### Cursor IDE Setup\n\n1. Install the package globally:\n```bash\nnpm install -g @surajadsul02/mcp-server-salesforce\n```\n\n2. Configure the MCP server in Cursor IDE `.cursor/mcp.json`:\n\n##### Using env Command\n```json\n{\n  \"mcpServers\": {\n    \"salesforce\": {\n      \"command\": \"env\",\n      \"args\": [\n        \"SALESFORCE_USERNAME=your.actual.email@example.com\",\n        \"SALESFORCE_PASSWORD=YourActualPassword123\",\n        \"SALESFORCE_TOKEN=YourActualSecurityToken123\",\n        \"SALESFORCE_INSTANCE_URL=https://login.salesforce.com\",\n        \"npx\",\n        \"-y\",\n        \"@surajadsul02/mcp-server-salesforce\"\n      ]\n    }\n  }\n}\n```\n\n##### For OAuth2 Authentication in Cursor\n```json\n{\n  \"mcpServers\": {\n    \"salesforce\": {\n      \"command\": \"env\",\n      \"args\": [\n        \"SALESFORCE_USERNAME=your.actual.email@example.com\",\n        \"SALESFORCE_PASSWORD=YourActualPassword123\",\n        \"SALESFORCE_TOKEN=YourActualSecurityToken123\",\n        \"SALESFORCE_INSTANCE_URL=https://login.salesforce.com\",\n        \"SALESFORCE_CONSUMER_KEY=YourConsumerKey\",\n        \"SALESFORCE_CONSUMER_SECRET=YourConsumerSecret\",\n        \"npx\",\n        \"-y\",\n        \"@surajadsul02/mcp-server-salesforce\"\n      ]\n    }\n  }\n}\n```\n\n#### Claude Desktop Setup\n\n1. Install the package globally (if not already installed):\n```bash\nnpm install -g @surajadsul02/mcp-server-salesforce\n```\n\n2. Add to your `claude_desktop_config.json`:\n\n##### For Username/Password Authentication\n```json\n{\n  \"mcpServers\": {\n    \"salesforce\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@surajadsul02/mcp-server-salesforce\"],\n      \"env\": {\n        \"SALESFORCE_USERNAME\": \"your_username\",\n        \"SALESFORCE_PASSWORD\": \"your_password\",\n        \"SALESFORCE_TOKEN\": \"your_security_token\",\n        \"SALESFORCE_INSTANCE_URL\": \"https://login.salesforce.com\"\n      }\n    }\n  }\n}\n```\n\n##### For OAuth2 Authentication\n```json\n{\n  \"mcpServers\": {\n    \"salesforce\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@surajadsul02/mcp-server-salesforce\"],\n      \"env\": {\n        \"SALESFORCE_USERNAME\": \"your_username\",\n        \"SALESFORCE_PASSWORD\": \"your_password\",\n        \"SALESFORCE_CONSUMER_KEY\": \"your_consumer_key\",\n        \"SALESFORCE_CONSUMER_SECRET\": \"your_consumer_secret\",\n        \"SALESFORCE_INSTANCE_URL\": \"https://login.salesforce.com\"\n      }\n    }\n  }\n}\n```\n\n3. Configuration File Location:\n   - macOS: `~/Library/Application Support/Claude Desktop/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude Desktop\\claude_desktop_config.json`\n   - Linux: `~/.config/Claude Desktop/claude_desktop_config.json`\n\n### Required Environment Variables\n\nFor Username/Password Authentication:\n- `SALESFORCE_USERNAME`: Your Salesforce username/email\n- `SALESFORCE_PASSWORD`: Your Salesforce password\n- `SALESFORCE_TOKEN`: Your Salesforce security token\n- `SALESFORCE_INSTANCE_URL`: Your Salesforce instance URL (Optional, default: https://login.salesforce.com)\n\nFor OAuth2 Authentication:\n- `SALESFORCE_USERNAME`: Your Salesforce username/email\n- `SALESFORCE_PASSWORD`: Your Salesforce password\n- `SALESFORCE_CONSUMER_KEY`: Your Connected App's consumer key\n- `SALESFORCE_CONSUMER_SECRET`: Your Connected App's consumer secret\n- `SALESFORCE_INSTANCE_URL`: Your Salesforce instance URL (Optional, default: https://login.salesforce.com)\n\n## Example Usage\n\n### Searching Objects\n```\n\"Find all objects related to Accounts\"\n\"Show me objects that handle customer service\"\n\"What objects are available for order management?\"\n```\n\n### Getting Schema Information\n```\n\"What fields are available in the Account object?\"\n\"Show me the picklist values for Case Status\"\n\"Describe the relationship fields in Opportunity\"\n```\n\n### Querying Records\n```\n\"Get all Accounts created this month\"\n\"Show me high-priority Cases with their related Contacts\"\n\"Find all Opportunities over $100k\"\n```\n\n### Managing Custom Objects\n```\n\"Create a Customer Feedback object\"\n\"Add a Rating field to the Feedback object\"\n\"Update sharing settings for the Service Request object\"\n```\n\n### Searching Across Objects\n```\n\"Search for 'cloud' in Accounts and Opportunities\"\n\"Find mentions of 'network issue' in Cases and Knowledge Articles\"\n\"Search for customer name across all relevant objects\"\n```\n\n## Development\n\n### Building from source\n```bash\n# Clone the repository\ngit clone https://github.com/surajadsul02/mcp-server-salesforce.git\n\n# Navigate to directory\ncd mcp-server-salesforce\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Troubleshooting\n\n1. **Authentication Errors**\n   - Verify your credentials are correct\n   - For username/password auth: ensure security token is correct\n   - For OAuth2: verify consumer key and secret\n\n2. **Connection Issues**\n   - Check your Salesforce instance URL\n   - Verify network connectivity\n   - Ensure proper API access permissions\n\n3. **Cursor IDE Integration**\n   - Restart Cursor IDE after configuration changes\n   - Check Developer Tools (Help > Toggle Developer Tools) for error messages\n   - Verify the package is installed globally\n\n4. **Claude Desktop Integration**\n   - Verify configuration file location\n   - Check file permissions\n   - Restart Claude Desktop after configuration changes\n   - Ensure environment variables are properly set\n\n## Contributing\nContributions are welcome! Feel free to submit a Pull Request.\n\n## License\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Issues and Support\nIf you encounter any issues or need support, please file an issue on the GitHub repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "salesforce_mcp",
        "crm",
        "tools",
        "tools usama",
        "dtc salesforce_mcp",
        "sales tools"
      ],
      "category": "crm-and-sales-tools"
    }
  }
}