{
  "category": "customer-data-platforms",
  "categoryDisplay": "Customer Data Platforms",
  "description": "Provides access to customer profiles inside of customer data platforms",
  "totalRepositories": 5,
  "repositories": {
    "antv--mcp-server-chart": {
      "owner": "antv",
      "name": "mcp-server-chart",
      "url": "https://github.com/antvis/mcp-server-chart",
      "imageUrl": "",
      "description": "A Model Context Protocol server for generating visual charts using [AntV](https://github.com/antvis).",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "charts",
        "chart",
        "antvis",
        "server chart",
        "customer data",
        "customer profiles"
      ],
      "category": "customer-data-platforms"
    },
    "hustcc--mcp-echarts": {
      "owner": "hustcc",
      "name": "mcp-echarts",
      "url": "https://github.com/hustcc/mcp-echarts",
      "imageUrl": "",
      "description": "Generate visual charts using [Apache ECharts](https://echarts.apache.org) with AI MCP dynamically.",
      "stars": 116,
      "forks": 19,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T05:10:05Z",
      "readme_content": "# <img alt=\"favicon\" src=\"https://echarts.apache.org/zh/images/favicon.png\" height=\"24\"/> MCP ECharts ![](https://badge.mcpx.dev?type=server 'MCP Server')  [![build](https://github.com/hustcc/mcp-echarts/actions/workflows/build.yml/badge.svg)](https://github.com/hustcc/mcp-echarts/actions/workflows/build.yml) [![npm Version](https://img.shields.io/npm/v/mcp-echarts.svg)](https://www.npmjs.com/package/mcp-echarts) [![smithery badge](https://smithery.ai/badge/@hustcc/mcp-echarts)](https://smithery.ai/server/@hustcc/mcp-echarts) [![npm License](https://img.shields.io/npm/l/mcp-echarts.svg)](https://www.npmjs.com/package/mcp-echarts) [![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/hustcc/mcp-echarts)](https://archestra.ai/mcp-catalog/hustcc__mcp-echarts)\n\nGenerate <img alt=\"favicon\" src=\"https://echarts.apache.org/zh/images/favicon.png\" height=\"14\"/> [Apache ECharts](https://echarts.apache.org/) with AI MCP dynamically for chart generation and data analysis. _Also you can use <img alt=\"original\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZFK8SrovcqgAAAAAAAAAAAAAemJ7AQ/original\" height=\"14\"/> [mcp-server-chart](https://github.com/antvis/mcp-server-chart) to generate chart, graph, map._\n\n<a href=\"https://glama.ai/mcp/servers/@hustcc/mcp-echarts\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@hustcc/mcp-echarts/badge\" alt=\"ECharts MCP server\" />\n</a>\n\n<div align=\"center\">\n  <img width=\"648\" alt=\"mcp-echarts\" src=\"https://mdn.alipayobjects.com/huamei_1gdzij/afts/img/A*s3w3SpMMPDQAAAAARzAAAAgAemB7AQ/original\" />\n</div>\n\n## ‚ú® Features\n\n- Fully support all features and syntax of `ECharts`, include data, style, theme and so on.\n- Support exporting to `png`, `svg`, and `option` formats, with validation for `ECharts` to facilitate the model's multi-round output of correct syntax and graphics.\n- MinIO Integration, store charts in `MinIO` object storage and return URLs instead of Base64 data for better performance and sharing capabilities.\n- Lightweight, we can install it easily with `zero dependence`.\n- Extremely `secure`, fully generated locally, without relying on any remote services.\n\n\n## ü§ñ Usage\n\n### Desktop Applications (stdio transport)\n\nTo use with `Desktop APP`, such as Claude, VSCode, Cline, Cherry Studio, and so on, add the  MCP server config below. On Mac system:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-echarts\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-echarts\"\n      ]\n    }\n  }\n}\n```\n\nOn Window system:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-echarts\": {\n      \"command\": \"cmd\",\n      \"args\": [\n        \"/c\",\n        \"npx\",\n        \"-y\",\n        \"mcp-echarts\"\n      ]\n    }\n  }\n}\n```\n\nAlso, you can use it on [modelscope](https://www.modelscope.cn/mcp/servers/hustcc/MCP-ECharts), [glama.ai](https://glama.ai/mcp/servers/@hustcc/mcp-echarts), [smithery.ai](https://smithery.ai/server/@hustcc/mcp-echarts) or others with HTTP, SSE Protocol.\n\n\n## üö∞ Run with SSE or Streamable transport\n\nInstall the package globally.\n\n```bash\nnpm install -g mcp-echarts\n```\n\nRun the server with your preferred transport option:\n\n```bash\n# For SSE transport (default endpoint: /sse)\nmcp-echarts -t sse\n\n# For Streamable transport with custom endpoint\nmcp-echarts -t streamable\n```\n\nThen you can access the server at:\n- SSE transport: `http://localhost:3033/sse`\n- Streamable transport: `http://localhost:3033/mcp`\n\n\n## üéÆ CLI Options\n\nYou can also use the following CLI options when running the MCP server. Command options by run cli with `-h`.\n\n```plain\nMCP ECharts CLI\n\nOptions:\n  --transport, -t  Specify the transport protocol: \"stdio\", \"sse\", or \"streamable\" (default: \"stdio\")\n  --port, -p       Specify the port for SSE or streamable transport (default: 3033)\n  --endpoint, -e   Specify the endpoint for the transport:\n                    - For SSE: default is \"/sse\"\n                    - For streamable: default is \"/mcp\"\n  --help, -h       Show this help message\n```\n\n\n## üóÇÔ∏è MinIO Configuration (Optional)\n\nFor better performance and sharing capabilities, you can configure MinIO object storage to store chart images as URLs instead of Base64 data.\n\n> [!NOTE]\n> If MinIO is not configured or unavailable, the system automatically falls back to `Base64` data output, ensuring compatibility.\n\nWe can Integrate with `MinIO` object storage providers below.\n\n - [MinIO](https://min.io/): High-performance, S3-compatible object storage. Use [MinIO JavaScript Client](https://min.io/docs/minio/linux/developers/javascript/minio-javascript.html) for direct integration.\n - [Amazon S3](https://aws.amazon.com/s3/): Use [AWS SDK](https://aws.amazon.com/sdk-for-javascript/) with compatible API endpoint.\n - [Alibaba Cloud OSS](https://www.alibabacloud.com/product/object-storage-service): Use the [Alibaba Cloud SDK](https://www.alibabacloud.com/help/en/sdk) for OSS services.\n - [Google Cloud Storage](https://cloud.google.com/storage): Integrate using [Google Cloud SDK](https://cloud.google.com/sdk) or compatible API.\n - [Microsoft Azure Blob Storage](https://azure.microsoft.com/en-us/products/storage/blobs): Use [Azure SDK](https://azure.microsoft.com/en-us/downloads/) for Blob storage access.\n - [Tencent Cloud COS](https://intl.cloud.tencent.com/product/cos): Use the [Tencent Cloud SDK](https://intl.cloud.tencent.com/document/product/436/6474) for COS integration.\n\nAlso, we can setup MinIO locally for free.\n\n1. **Install and start MinIO locally:**\n\n   ```bash\n   # Download MinIO (macOS example)\n   brew install minio/stable/minio\n   \n   # Start MinIO server\n   minio server ~/minio-data --console-address :9001\n   ```\n\n3. **Configure environment variables:**\n\n   ```bash\n   # Copy the example environment file\n   cp .env.example .env\n   \n   # Edit .env with your MinIO settings\n   MINIO_ENDPOINT=localhost\n   MINIO_PORT=9000\n   MINIO_USE_SSL=false\n   MINIO_ACCESS_KEY=minioadmin\n   MINIO_SECRET_KEY=minioadmin\n   MINIO_BUCKET_NAME=mcp-echarts\n   ```\n\n\n## üî® Development\n\nInstall dependencies:\n\n```bash\nnpm install\n```\n\nBuild the server:\n\n```bash\nnpm run build\n```\n\nStart the MCP server:\n\n```bash\nnpm run start\n```\n\n\n## üßëüèª‚Äçüíª Contributors\n\n- [lyw405](https://github.com/lyw405): Supports `15+` charting MCP tool. [#2](https://github.com/hustcc/mcp-echarts/issues/2)\n- [2niuhe](https://github.com/2niuhe): Support MCP with SSE and Streaming HTTP. [#17](https://github.com/hustcc/mcp-echarts/issues/17)\n- [susuperli](https://github.com/susuperli): Use `MinIO` to save the chart image base64 and return the url. [#10](https://github.com/hustcc/mcp-echarts/issues/10)\n- [BQXBQX](https://github.com/BQXBQX): Use `@napi-rs/canvas` instead node-canvas. [#3](https://github.com/hustcc/mcp-echarts/issues/3)\n- [Meet-student](https://github.com/Meet-student): Add `outputType` schema for all chart tools. [#24](https://github.com/hustcc/mcp-echarts/issues/24)\n- [hustcc](https://github.com/hustcc): Initial the repo.\n\n\n## üìÑ License\n\nMIT@[hustcc](https://github.com/hustcc).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "charts",
        "echarts",
        "mcp",
        "mcp echarts",
        "visual charts",
        "echarts generate"
      ],
      "category": "customer-data-platforms"
    },
    "hustcc--mcp-mermaid": {
      "owner": "hustcc",
      "name": "mcp-mermaid",
      "url": "https://github.com/hustcc/mcp-mermaid",
      "imageUrl": "",
      "description": "Generate [mermaid](https://mermaid.js.org/) diagram and chart with AI MCP dynamically.",
      "stars": 225,
      "forks": 26,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T10:38:06Z",
      "readme_content": "# <img alt=\"favicon\" src=\"https://mermaid.js.org/favicon.svg\" height=\"24\"/> MCP Mermaid ![](https://badge.mcpx.dev?type=server 'MCP Server')  [![build](https://github.com/hustcc/mcp-mermaid/actions/workflows/build.yml/badge.svg)](https://github.com/hustcc/mcp-mermaid/actions/workflows/build.yml) [![npm Version](https://img.shields.io/npm/v/mcp-mermaid.svg)](https://www.npmjs.com/package/mcp-mermaid) [![smithery badge](https://smithery.ai/badge/@hustcc/mcp-mermaid)](https://smithery.ai/server/@hustcc/mcp-mermaid) [![npm License](https://img.shields.io/npm/l/mcp-mermaid.svg)](https://www.npmjs.com/package/mcp-mermaid) [![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/hustcc/mcp-mermaid)](https://archestra.ai/mcp-catalog/hustcc__mcp-mermaid)\n\nGenerate <img alt=\"favicon\" src=\"https://mermaid.js.org/favicon.svg\" height=\"14\"/> [mermaid](https://mermaid.js.org/) diagram and chart with AI MCP dynamically. Also you can use <img alt=\"original\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ZFK8SrovcqgAAAAAAAAAAAAAemJ7AQ/original\" height=\"14\"/> [mcp-server-chart](https://github.com/antvis/mcp-server-chart) to generate chart, graph, map.\n\n\n## ‚ú® Features\n\n- Fully support all features and syntax of `Mermaid`.\n- Support configuration of `backgroundColor` and `theme`, enabling large AI models to output rich style configurations.\n- Support exporting to `png`, `svg`, and `mermaid` formats, with validation for `Mermaid` to facilitate the model's multi-round output of correct syntax and graphics.\n\n<img width=\"720\" alt=\"mcp-mermaid\" src=\"https://mermaid.js.org/header.png\" />\n\n\n## ü§ñ Usage\n\nTo use with `Desktop APP`, such as Claude, VSCode, Cline, Cherry Studio, and so on, add the  MCP server config below. On Mac system:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-mermaid\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-mermaid\"\n      ]\n    }\n  }\n}\n```\n\nOn Window system:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-mermaid\": {\n      \"command\": \"cmd\",\n      \"args\": [\n        \"/c\",\n        \"npx\",\n        \"-y\",\n        \"mcp-mermaid\"\n      ]\n    }\n  }\n}\n```\n\nAlso, you can use it on aliyun, modelscope, glama.ai, smithery.ai or others with HTTP, SSE Protocol.\n\n\n## üö∞ Run with SSE or Streamable transport\n\n### Option 1: Global Installation\n\nInstall the package globally:\n\n```bash\nnpm install -g mcp-mermaid\n```\n\nRun the server with your preferred transport option:\n\n```bash\n# For SSE transport (default endpoint: /sse)\nmcp-mermaid -t sse\n\n# For Streamable transport with custom endpoint\nmcp-mermaid -t streamable\n```\n\n### Option 2: Local Development\n\nIf you're working with the source code locally:\n\n```bash\n# Clone and setup\ngit clone https://github.com/hustcc/mcp-mermaid.git\ncd mcp-mermaid\nnpm install\nnpm run build\n\n# Run with npm scripts\nnpm run start:sse        # SSE transport on port 3033\nnpm run start:streamable # Streamable transport on port 1122\n```\n\n### Access Points\n\nThen you can access the server at:\n\n- SSE transport: `http://localhost:3033/sse`\n- Streamable transport: `http://localhost:1122/mcp` (local) or `http://localhost:3033/mcp` (global)\n\n## üéÆ CLI Options\n\nYou can also use the following CLI options when running the MCP server. Command options by run cli with `-h`.\n\n```plain\nMCP Mermaid CLI\n\nOptions:\n  --transport, -t  Specify the transport protocol: \"stdio\", \"sse\", or \"streamable\" (default: \"stdio\")\n  --port, -p       Specify the port for SSE or streamable transport (default: 3033)\n  --endpoint, -e   Specify the endpoint for the transport:\n                    - For SSE: default is \"/sse\"\n                    - For streamable: default is \"/mcp\"\n  --help, -h       Show this help message\n```\n\n## üî® Development\n\nInstall dependencies:\n\n```bash\nnpm install\n```\n\nBuild the server:\n\n```bash\nnpm run build\n```\n\n### Start the MCP server\n\n**Using MCP Inspector (for debugging):**\n\n```bash\nnpm run start\n```\n\n**Using different transport protocols:**\n\n```bash\n# SSE transport (Server-Sent Events)\nnpm run start:sse\n\n# Streamable HTTP transport\nnpm run start:streamable\n```\n\n**Direct node commands:**\n\n```bash\n# SSE transport on port 3033\nnode build/index.js --transport sse --port 3033\n\n# Streamable HTTP transport on port 1122\nnode build/index.js --transport streamable --port 1122\n\n# STDIO transport (for MCP client integration)\nnode build/index.js --transport stdio\n```\n\n## üìÑ License\n\nMIT@[hustcc](https://github.com/hustcc).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mermaid",
        "profiles",
        "mcp",
        "mcp mermaid",
        "customer profiles",
        "customer data"
      ],
      "category": "customer-data-platforms"
    },
    "iaptic--mcp-server-iaptic": {
      "owner": "iaptic",
      "name": "mcp-server-iaptic",
      "url": "https://github.com/iaptic/mcp-server-iaptic",
      "imageUrl": "",
      "description": "Connect with [iaptic](https://www.iaptic.com) to ask about your Customer Purchases, Transaction data and App Revenue statistics.",
      "stars": 4,
      "forks": 7,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-05-09T10:55:25Z",
      "readme_content": "# MCP Server for Iaptic\n[![smithery badge](https://smithery.ai/badge/mcp-server-iaptic)](https://smithery.ai/server/mcp-server-iaptic)\n\nA Model Context Protocol server for interacting with the [Iaptic API](https://www.iaptic.com). This server allows Claude or other AIs to interact with your Iaptic data to answer questions about your customers, purchases, transactions, and statistics.\n\n## Installation\n\n### Installing via Smithery\n\nTo install Iaptic for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-server-iaptic):\n\n```bash\nnpx -y @smithery/cli install mcp-server-iaptic --client claude\n```\n\n### Manual Installation\n```bash\n# Run directly with npx\nnpx mcp-server-iaptic --api-key YOUR_API_KEY --app-name YOUR_APP_NAME\n\n# Or install globally\nnpm install -g mcp-server-iaptic\nmcp-server-iaptic --api-key YOUR_API_KEY --app-name YOUR_APP_NAME\n```\n\n## Usage with Claude Desktop\n\nAdd to your Claude Desktop configuration file:\n\n```json\n{\n  \"iaptic\": {\n    \"command\": \"npx\",\n    \"args\": [\n      \"mcp-server-iaptic\",\n      \"--api-key\", \"your-api-key-here\",\n      \"--app-name\", \"your-app-name-here\"\n    ]\n  }\n}\n```\n\n## Available Tools\n\n### Customers\n- `customer_list`: List customers\n- `customer_get`: Get customer details by ID\n\n### Purchases\n- `purchase_list`: List purchases\n  - `limit`: Maximum number of purchases to return (default: 100, max: 1000)\n  - `offset`: Number of purchases to skip for pagination\n  - `startdate`: Filter purchases after this date (ISO format, e.g. 2024-01-01)\n  - `enddate`: Filter purchases before this date (ISO format, e.g. 2024-12-31)\n  - `customerId`: Filter by customer ID\n- `purchase_get`: Get purchase details by ID\n\n### Transactions\n- `transaction_list`: List transactions with pagination and date filtering\n  - `limit`: Maximum number of transactions to return (default: 100, max: 1000)\n  - `offset`: Number of transactions to skip for pagination\n  - `startdate`: Filter transactions after this date (ISO format, e.g. 2024-01-01)\n  - `enddate`: Filter transactions before this date (ISO format, e.g. 2024-12-31)\n  - `purchaseId`: Filter by purchase ID\n- `transaction_get`: Get transaction details by ID\n\n### Statistics\n- `stats_get`: Get general statistics about transactions and revenue\n- `stats_app`: Get app-specific statistics\n\n### Events\n- `event_list`: List recent events with pagination and date filtering\n  - `limit`: Maximum number of events to return (default: 100)\n  - `offset`: Number of events to skip for pagination\n  - `startdate`: Filter events after this date (ISO format, e.g. 2024-01-01)\n  - `enddate`: Filter events before this date (ISO format, e.g. 2024-12-31)\n\n### App Management\n- `iaptic_switch_app`: Switch to a different Iaptic app\n  - `appName`: Name of the app to switch to\n  - `apiKey`: API key for the app\n- `iaptic_reset_app`: Reset to the default Iaptic app\n- `iaptic_current_app`: Get information about the currently active app\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Run in development mode\nnpm run dev\n\n# Build for production\nnpm run build\n\n# Run production build\nnpm start\n```\n\n## Requirements\n\n- Node.js >= 18\n- An Iaptic account with API credentials\n\n## License\n\nMIT \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "iaptic",
        "data",
        "mcp",
        "customer data",
        "server iaptic",
        "iaptic mcp"
      ],
      "category": "customer-data-platforms"
    },
    "sergehuber--inoyu-mcp-unomi-server": {
      "owner": "sergehuber",
      "name": "inoyu-mcp-unomi-server",
      "url": "https://github.com/sergehuber/inoyu-mcp-unomi-server",
      "imageUrl": "",
      "description": "An MCP server to access and updates profiles on an Apache Unomi CDP server.",
      "stars": 6,
      "forks": 9,
      "license": "Apache License 2.0",
      "language": "JavaScript",
      "updated_at": "2025-09-12T12:17:08Z",
      "readme_content": "# Inoyu Apache Unomi MCP Server\n\nA Model Context Protocol server enabling Claude to maintain user context through Apache Unomi profile management.\n\n> ‚ö†Ô∏è **Early Implementation Notice**\n>\n> This is an early implementation intended for demonstration purposes:\n> - Not validated for production use\n> - Subject to changes\n> - Not (yet) officially supported\n> - For learning and experimentation only\n\n## Current Scope\n\nThis implementation provides:\n- Profile lookup and creation using email\n- Profile property management\n- Basic session handling\n- Scope management for context isolation\n\nOther Unomi features (events, segments, session properties, etc.) are not currently implemented. Community feedback welcome on future development priorities.\n\n## Demo\n\nWatch how the MCP server enables Claude to maintain context and manage user profiles:\n\n[![Apache Unomi MCP Server Demo](https://img.youtube.com/vi/YqPkUhBlcrs/0.jpg)](https://www.youtube.com/watch?v=YqPkUhBlcrs)\n\n## Installation\n\nTo use with Claude Desktop, add the server config and environment variables:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"unomi-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"@inoyu/mcp-unomi-server\"],\n      \"env\": {\n        \"UNOMI_BASE_URL\": \"http://your-unomi-server:8181\",\n        \"UNOMI_VERSION\": \"3\", // Use \"2\" for Unomi V2, \"3\" for Unomi V3 (default)\n        \"UNOMI_USERNAME\": \"your-username\", // Required for V2, fallback for V3\n        \"UNOMI_PASSWORD\": \"your-password\", // Required for V2, fallback for V3\n        \"UNOMI_PROFILE_ID\": \"your-profile-id\",\n        \"UNOMI_KEY\": \"your-unomi-key\", // Required for V2 only\n        \"UNOMI_EMAIL\": \"your-email@example.com\",\n        \"UNOMI_SOURCE_ID\": \"claude-desktop\",\n        \"UNOMI_TENANT_ID\": \"your-tenant-id\", // Required for V3\n        \"UNOMI_PUBLIC_KEY\": \"your-public-key\", // Required for V3\n        \"UNOMI_PRIVATE_KEY\": \"your-private-key\" // Required for V3\n      }\n    }\n  }\n}\n```\n\nThe `env` section in the configuration allows you to set the required environment variables for the server. Replace the values with your actual Unomi server details.\n\nMake sure to restart Claude Desktop after updating the configuration. You can then click on the tools icon on the lower right of the chat window to make sure it has found all the tools provided by this server.\n\n## Features\n\n### Profile Access\n- Email-based profile lookup with automatic creation\n- Profile properties, segments, and scores access\n- JSON format for all data exchange\n- Automatic session management with date-based IDs\n\n### Tools\n- `get_my_profile` - Get your profile using environment variables\n  - Uses UNOMI_PROFILE_ID from environment or email lookup\n  - Automatically generates a session ID based on the current date\n  - Optional parameters:\n    - requireSegments: Include segment information\n    - requireScores: Include scoring information\n- `update_my_profile` - Update properties of your profile\n  - Uses UNOMI_PROFILE_ID from environment or email lookup\n  - Takes a properties object with key-value pairs to update\n  - Supports string, number, boolean, and null values\n  - Example:\n    ```json\n    {\n      \"properties\": {\n        \"firstName\": \"John\",\n        \"age\": 30,\n        \"isSubscribed\": true,\n        \"oldProperty\": null\n      }\n    }\n    ```\n- `get_profile` - Retrieve a specific profile by ID\n  - Takes profileId as required parameter\n  - Returns full profile data from Unomi\n- `search_profiles` - Search for profiles\n  - Takes query string and optional limit/offset parameters\n  - Searches across firstName, lastName, and email fields\n- `create_scope` - Create a new Unomi scope\n  - Takes scope identifier and optional name/description\n  - Required for event tracking and profile updates\n  - Example:\n    ```json\n    {\n      \"scope\": \"my-app\",\n      \"name\": \"My Application\",\n      \"description\": \"Scope for my application events\"\n    }\n    ```\n- `get_tenant_info` - Get information about the current tenant (V3 only)\n  - Returns tenant details, version information, and key status\n  - Only available when using Unomi V3\n  - No parameters required\n\n### Consent Management Tools\n- `update_consent` - Update a user's consent status using the modifyConsent event\n  - Uses the Apache Unomi Consent API as described in the [official documentation](https://unomi.apache.org/manual/latest/#_consent_api)\n  - Required parameters:\n    - consentId: Unique identifier for the consent\n    - status: Consent status (GRANTED, DENIED, or REVOKED)\n  - Optional parameters:\n    - typeIdentifier: Type identifier of the consent\n    - scope: Scope for the consent (defaults to claude-desktop)\n    - metadata: Additional metadata for the consent\n  - GDPR Compliance: \n    - GRANTED consents expire after 1 year (GDPR recommendation)\n    - DENIED/REVOKED consents expire immediately\n  - Example:\n    ```json\n    {\n      \"consentId\": \"marketing-consent\",\n      \"status\": \"GRANTED\",\n      \"typeIdentifier\": \"marketing\",\n      \"scope\": \"claude-desktop\",\n      \"metadata\": {\n        \"source\": \"claude-desktop\",\n        \"timestamp\": \"2024-01-15T10:30:00Z\"\n      }\n    }\n    ```\n\n- `get_consent` - Get specific consent information for a profile\n  - Takes consentId as required parameter\n  - Returns consent details including status, timestamp, and metadata\n  - Uses your profile by default (from environment or email lookup)\n  - Example:\n    ```json\n    {\n      \"consentId\": \"marketing-consent\"\n    }\n    ```\n\n- `list_consents` - List all consents for a profile with optional filtering\n  - Optional parameters:\n    - profileId: Profile ID to list consents for (uses your profile if not provided)\n    - status: Filter by consent status (GRANTED, DENIED, or REVOKED)\n    - scope: Filter by scope\n  - Returns filtered list of consents with metadata\n  - Example:\n    ```json\n    {\n      \"status\": \"GRANTED\",\n      \"scope\": \"claude-desktop\"\n    }\n    ```\n\n### Scope Management\nThe server automatically manages scopes for you:\n\n1. Default Scope:\n   - A default scope `claude-desktop` is used for all operations\n   - Created automatically when needed\n   - Used for profile updates and event tracking\n\n2. Custom Scopes:\n   - Can be created using the `create_scope` tool\n   - Useful for separating different applications or contexts\n   - Must exist before using in profile operations\n\n3. Automatic Scope Creation:\n   - The server checks if required scopes exist\n   - Creates them automatically if missing\n   - Uses meaningful defaults for scope metadata\n\n> **Note**: While scopes are created automatically when needed, you can still create them manually with custom names and descriptions using the `create_scope` tool.\n\n## Apache Unomi V2/V3 Compatibility\n\nThis MCP server supports both Apache Unomi V2 and V3 with automatic version detection and appropriate authentication methods.\n\n### Version Detection\n\nThe server automatically detects the Unomi version based on the `UNOMI_VERSION` environment variable:\n- `UNOMI_VERSION=2` - Uses V2 authentication (system administrator)\n- `UNOMI_VERSION=3` - Uses V3 authentication (tenant-based) - **Default**\n\n### V2 vs V3 Authentication\n\n**V2 (Legacy):**\n- Uses system administrator authentication (`karaf/karaf` by default)\n- All operations use the same authentication method\n- Requires `UNOMI_USERNAME`, `UNOMI_PASSWORD`, and `UNOMI_KEY`\n\n**V3 (Multi-tenant):**\n- Uses tenant-based authentication with API keys\n- Different authentication for different endpoint types:\n  - **Public endpoints** (`/context.json`): Uses `X-Unomi-Api-Key` header with public key\n  - **Private endpoints** (profiles, scopes): Uses tenant authentication (`tenantId:privateKey`)\n  - **System operations**: Falls back to system administrator authentication\n- Requires `UNOMI_TENANT_ID`, `UNOMI_PUBLIC_KEY`, and `UNOMI_PRIVATE_KEY`\n\n### Migration from V2 to V3\n\n1. **Update environment variables:**\n   ```bash\n   # Remove V2-specific variables\n   # UNOMI_KEY (no longer needed)\n   \n   # Add V3-specific variables\n   UNOMI_VERSION=3\n   UNOMI_TENANT_ID=your-tenant-id\n   UNOMI_PUBLIC_KEY=your-public-key\n   UNOMI_PRIVATE_KEY=your-private-key\n   ```\n\n2. **Benefits of V3:**\n   - Complete data isolation between tenants\n   - Enhanced security with tenant-specific API keys\n   - Better scalability for multi-tenant deployments\n   - Improved compliance with data privacy regulations\n\n## Overview\n\nThis MCP server enables Claude to maintain context about users through Apache Unomi's profile management system. Here's what you can achieve with it:\n\n### Key Capabilities\n1. **User Recognition**:\n   - Identify users across conversations using email or profile ID\n   - Maintain consistent user context between sessions\n   - Automatically create and manage user profiles\n\n2. **Context Management**:\n   - Store and retrieve user preferences\n   - Manage user consent preferences\n   - Track consent status and history\n\n3. **Consent Management**:\n   - Update user consent status using Apache Unomi's Consent API\n   - Retrieve specific consent information\n   - List and filter consents by status and scope\n   - Automatic consent expiration handling (GDPR compliant)\n   - Support for GDPR and privacy compliance\n\n4. **Integration Features**:\n   - Seamless Claude Desktop integration\n   - Automatic session management\n   - Scope-based context isolation\n\n### What You Can Do\n- Have Claude remember user preferences across conversations\n- Store and retrieve user-specific information\n- Maintain consistent user context\n- Manage multiple users through email identification\n- Track and manage user consent preferences\n- Comply with privacy regulations (GDPR, CCPA, etc.)\n- Update consent status in real-time\n- Query consent history and status\n\n### Prerequisites\n- Running Apache Unomi server\n- Claude Desktop installation\n- Network access to Unomi server\n- Proper security configuration\n- Required environment variables\n\n## Configuration\n\n### Environment Variables\n\nThe server requires the following environment variables:\n\n```bash\nUNOMI_BASE_URL=http://your-unomi-server:8181\nUNOMI_USERNAME=your-username\nUNOMI_PASSWORD=your-password\nUNOMI_PROFILE_ID=your-profile-id\nUNOMI_SOURCE_ID=your-source-id\nUNOMI_KEY=your-unomi-key\nUNOMI_EMAIL=your-email\n```\n\n### Profile Resolution\n\nThe server uses a two-step process to resolve the profile ID:\n\n1. Email Lookup (if `UNOMI_EMAIL` is set):\n   - Searches for a profile with matching email\n   - If found, uses that profile's ID\n   - Useful for maintaining consistent profile across sessions\n\n2. Fallback Profile ID:\n   - If email lookup fails or `UNOMI_EMAIL` is not set\n   - Uses the `UNOMI_PROFILE_ID` from environment\n   - Ensures a profile is always available\n\nThe response will indicate which method was used via the `source` field:\n- `\"email_lookup\"`: Profile found via email\n- `\"environment\"`: Using fallback profile ID\n\n### Unomi Server Configuration\n\n1. Configure protected events in `etc/org.apache.unomi.cluster.cfg`:\n   ```properties\n   # Required for protected events like property updates\n   org.apache.unomi.cluster.authorization.key=your-unomi-key\n   \n   # Required to allow Claude Desktop to access Unomi\n   # Replace your-claude-desktop-ip with your actual IP\n   org.apache.unomi.ip.ranges=127.0.0.1,::1,your-claude-desktop-ip\n   ```\n\n2. Ensure your Unomi server has CORS properly configured in `etc/org.apache.unomi.cors.cfg`:\n   ```properties\n   # Add your Claude Desktop origin if needed\n   org.apache.unomi.cors.allowed.origins=http://localhost:*\n   ```\n\n3. Restart Unomi server to apply changes\n\n> **Important**: The Unomi key must match exactly between your server configuration and the UNOMI_KEY environment variable in Claude Desktop.\n\n## Configuration\n\n### Environment Variables\n\nThe server requires the following environment variables:\n\n```bash\nUNOMI_BASE_URL=http://your-unomi-server:8181\nUNOMI_USERNAME=your-username\nUNOMI_PASSWORD=your-password\nUNOMI_PROFILE_ID=your-profile-id\nUNOMI_SOURCE_ID=your-source-id\nUNOMI_KEY=your-unomi-key\nUNOMI_EMAIL=your-email\n```\n\n### Profile Resolution\n\nThe server uses a two-step process to resolve the profile ID:\n\n1. Email Lookup (if `UNOMI_EMAIL` is set):\n   - Searches for a profile with matching email\n   - If found, uses that profile's ID\n   - Useful for maintaining consistent profile across sessions\n\n2. Fallback Profile ID:\n   - If email lookup fails or `UNOMI_EMAIL` is not set\n   - Uses the `UNOMI_PROFILE_ID` from environment\n   - Ensures a profile is always available\n\nThe response will indicate which method was used via the `source` field:\n- `\"email_lookup\"`: Profile found via email\n- `\"environment\"`: Using fallback profile ID\n\n### Unomi Server Configuration\n\n1. Configure protected events in `etc/org.apache.unomi.cluster.cfg`:\n   ```properties\n   # Required for protected events like property updates\n   org.apache.unomi.cluster.authorization.key=your-unomi-key\n   \n   # Required to allow Claude Desktop to access Unomi\n   # Replace your-claude-desktop-ip with your actual IP\n   org.apache.unomi.ip.ranges=127.0.0.1,::1,your-claude-desktop-ip\n   ```\n\n2. Ensure your Unomi server has CORS properly configured in `etc/org.apache.unomi.cors.cfg`:\n   ```properties\n   # Add your Claude Desktop origin if needed\n   org.apache.unomi.cors.allowed.origins=http://localhost:*\n   ```\n\n3. Restart Unomi server to apply changes\n\n> **Important**: The Unomi key must match exactly between your server configuration and the UNOMI_KEY environment variable in Claude Desktop.\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\nYou can also tail the Claude Desktop logs to see MCP requests and responses:\n\n```bash\n# Follow logs in real-time\ntail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n```\n\n### Session ID Format\nWhen using `get_my_profile`, the session ID is automatically generated using the format:\n```\n[profileId]-YYYYMMDD\n```\nFor example, if your profile ID is \"user123\" and today is March 15, 2024, the session ID would be:\n```\nuser123-20240315\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Protected Events Failing**\n   - Verify Unomi key matches exactly in both configurations\n   - Check IP address is correctly whitelisted\n   - Ensure scope exists before updating properties\n   - Verify CORS configuration if needed\n\n2. **Profile Not Found**\n   - Check if UNOMI_EMAIL is correctly set\n   - Verify email format is valid\n   - Ensure profile exists in Unomi\n   - Check if fallback UNOMI_PROFILE_ID is valid\n\n3. **Session Issues**\n   - Remember sessions are date-based\n   - Only one session per profile per day\n   - Check session ID format matches `profileId-YYYYMMDD`\n   - Verify scope exists for session\n\n4. **Connection Problems**\n   - Verify Unomi server is running\n   - Check network connectivity\n   - Ensure UNOMI_BASE_URL is correct\n   - Verify authentication credentials\n\n### Logs to Check\n\n1. **Claude Desktop Logs**:\n   ```bash\n   # MacOS\n   ~/Library/Logs/Claude/mcp*.log\n   \n   # Windows\n   %APPDATA%\\Claude\\mcp*.log\n   ```\n\n2. **Unomi Server Logs**:\n   ```bash\n   # Usually in\n   $UNOMI_HOME/logs/karaf.log\n   ```\n\n### Quick Fixes\n\n1. **Reset State**:\n   ```bash\n   # Stop Claude Desktop\n   # Clear logs\n   rm ~/Library/Logs/Claude/mcp*.log\n   # Restart Claude Desktop\n   ```\n\n2. **Verify Configuration**:\n   ```bash\n   # Check Unomi connection\n   curl -u username:password http://your-unomi-server:8181/cxs/cluster\n   \n   # Test scope exists\n   curl -u username:password http://your-unomi-server:8181/cxs/scopes/claude-desktop\n   ```\n\n### Claude Desktop Configuration options\n\n1. Create or edit your Claude Desktop configuration:\n   - MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n2. Add the server configuration using NPX:\n   ```json\n   {\n     \"mcpServers\": {\n       \"unomi-server\": {\n         \"command\": \"npx\",\n         \"args\": [\"@inoyu/mcp-unomi-server\"],\n         \"env\": {\n           \"UNOMI_BASE_URL\": \"http://your-unomi-server:8181\",\n           \"UNOMI_USERNAME\": \"your-username\",\n           \"UNOMI_PASSWORD\": \"your-password\",\n           \"UNOMI_PROFILE_ID\": \"your-profile-id\",\n           \"UNOMI_KEY\": \"your-unomi-key\",\n           \"UNOMI_EMAIL\": \"your-email@example.com\",\n           \"UNOMI_SOURCE_ID\": \"claude-desktop\"\n         }\n       }\n     }\n   }\n   ```\n\n> **Note**: Using NPX ensures you're always running the latest published version of the server.\n\nAlternatively, if you want to use a specific version:\n```json\n{\n  \"mcpServers\": {\n    \"unomi-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"@inoyu/mcp-unomi-server@0.1.0\"],\n      \"env\": {\n        // ... environment variables ...\n      }\n    }\n  }\n}\n```\n\nFor development or local installations:\n```json\n{\n  \"mcpServers\": {\n    \"unomi-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/local/mcp-unomi-server/build/index.js\"],\n      \"env\": {\n        // ... environment variables ...\n      }\n    }\n  }\n}\n```\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "profiles",
        "cdp",
        "unomi",
        "customer profiles",
        "cdp server",
        "customer data"
      ],
      "category": "customer-data-platforms"
    }
  }
}