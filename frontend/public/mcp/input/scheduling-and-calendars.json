{
  "category": "scheduling-and-calendars",
  "categoryDisplay": "Scheduling and Calendars",
  "description": "",
  "totalRepositories": 36,
  "repositories": {
    "CDataSoftware--google-calendars-mcp-server-by-cdata": {
      "owner": "CDataSoftware",
      "name": "google-calendars-mcp-server-by-cdata",
      "url": "https://github.com/CDataSoftware/google-calendars-mcp-server-by-cdata",
      "imageUrl": "/freedevtools/mcp/pfp/CDataSoftware.webp",
      "description": "Query live Google Calendar data through a read-only interface using natural language. Retrieve calendar events and related information seamlessly integrated into AI workflows.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Java",
      "updated_at": "2025-08-06T15:12:27Z",
      "readme_content": "# google-calendars-mcp-server-by-cdata\nCData's Model Context Protocol (MCP) Server for Google Calendars\n\n:heavy_exclamation_mark: This project builds a read-only MCP server. For full read, write, update, delete, and action capabilities and a simplified setup, check out our free [CData MCP Server for Google Calendars (beta)](https://www.cdata.com/download/download.aspx?sku=EGZM-V&type=beta). \n## Purpose\nWe created this read-only MCP Server to allow LLMs (like Claude Desktop) to query live data Google Calendars supported by the [CData JDBC Driver for Google Calendars](https://www.cdata.com/drivers/googlecalendar/jdbc).\n\nCData JDBC Driver connects to Google Calendars by exposing them as relational SQL models.\n\nThis server wraps that driver and makes Google Calendars data available through a simple MCP interface, so LLMs can retrieve live information by asking natural language questions — no SQL required.\n\n## Setup Guide\n1. Clone the repository:\n      ```bash\n      git clone https://github.com/cdatasoftware/google-calendars-mcp-server-by-cdata.git\n      cd google-calendars-mcp-server-by-cdata\n      ```\n2. Build the server:\n      ```bash\n      mvn clean install\n      ``` \n      This creates the JAR file: CDataMCP-jar-with-dependencies.jar\n2. Download and install the CData JDBC Driver for {source}: [https://www.cdata.com/drivers/googlecalendar/download/jdbc](https://www.cdata.com/drivers/googlecalendar/download/jdbc)\n3. License the CData JDBC Driver:\n    * Navigate to the `lib` folder in the installation directory, typically:\n        * (Windows) `C:\\Program Files\\CData\\CData JDBC Driver for Google Calendars\\`\n        * (Mac/Linux) `/Applications/CData JDBC Driver for Google Calendars/`\n    * Run the command `java -jar cdata.jdbc.googlecalendar.jar --license`\n    * Enter your name, email, and \"TRIAL\" (or your license key).\n4. Configure your connection to the data source (Salesforce as an example):\n    * Run the command `java -jar cdata.jdbc.googlecalendar.jar` to open the Connection String utility.\n      \n      <img src=\"https://github.com/user-attachments/assets/a5b5237b-79c1-472c-8c2f-3f9eb1ac9627\" title=\"CData JDBC Driver Connectiong String utility.\" width=384px />\n    * Configure the connection string and click \"Test Connection\"\n      > **Note:** If the data sources uses OAuth, you will need to authenticate in your browser.\n    * Once successful, copy the connection string for use later.\n5. Create a `.prp` file for your JDBC connection (e.g. `google-calendars.prp`) using the following properties and format:\n    * **Prefix** - a prefix to be used for the tools exposed\n    * **ServerName** - a name for your server\n    * **ServerVersion** - a version for your server\n    * **DriverPath** - the full path to the JAR file for your JDBC driver\n    * **DriverClass** - the name of the JDBC Driver Class (e.g. cdata.jdbc.googlecalendar.GoogleCalendarDriver)\n    * **JdbcUrl** - the JDBC connection string to use with the CData JDBC Driver to connect to your data (copied from above)\n    * **Tables** - leave blank to access all data, otherwise you can explicitly declare the tables you wish to create access for\n      ```env\n      Prefix=googlecalendar\n      ServerName=CDataGoogleCalendar\n      ServerVersion=1.0\n      DriverPath=PATH\\TO\\cdata.jdbc.googlecalendar.jar\n      DriverClass=cdata.jdbc.googlecalendar.GoogleCalendarDriver\n      JdbcUrl=jdbc:googlecalendar:InitiateOAuth=GETANDREFRESH;\n      Tables=\n      ```\n\n## Using the Server with Claude Desktop\n1. Create the config file for Claude Desktop ( claude_desktop_config.json) to add the new MCP server, using the format below. If the file already exists, add the entry to the `mcpServers` in the config file.\n\n      **Windows**\n      ```json\n      {\n        \"mcpServers\": {\n          \"{classname_dash}\": {\n            \"command\": \"PATH\\\\TO\\\\java.exe\",\n            \"args\": [\n              \"-jar\",\n              \"PATH\\\\TO\\\\CDataMCP-jar-with-dependencies.jar\",\n              \"PATH\\\\TO\\\\google-calendars.prp\"\n            ]\n          },\n          ...\n        }\n      }\n      ```\n      \n      **Linux/Mac**\n      ```json\n      {\n        \"mcpServers\": {\n          \"{classname_dash}\": {\n            \"command\": \"/PATH/TO/java\",\n            \"args\": [\n              \"-jar\",\n              \"/PATH/TO/CDataMCP-jar-with-dependencies.jar\",\n              \"/PATH/TO/google-calendars.prp\"\n            ]\n          },\n          ...\n        }\n      }\n      ```\n      If needed, copy the config file to the appropriate directory (Claude Desktop as the example).\n      **Windows**\n      ```bash\n      cp C:\\PATH\\TO\\claude_desktop_config.json %APPDATA%\\Claude\\claude_desktop_config.json\n      ```\n      **Linux/Mac**\n      ```bash\n      cp /PATH/TO/claude_desktop_config.json /Users/{user}/Library/Application\\ Support/Claude/claude_desktop_config.json'\n      ```\n2. Run or refresh your client (Claude Desktop).\n   \n> **Note:** You may need to fully exit or quit your Claude Desktop client and re-open it for the MCP Servers to appear.\n\n## Running the Server\n1. Run the follow the command to run the MCP Server on its own\n      ```bash\n      java -jar /PATH/TO/CDataMCP-jar-with-dependencies.jar /PATH/TO/Salesforce.prp\n> **Note:** The server uses `stdio` so can only be used with clients that run on the same machine as the server.\n## Usage Details\nOnce the MCP Server is configured, the AI client will be able to use the built-in tools to read, write, update, and delete the underlying data. In general, you do not need to call the tools explicitly. Simply ask the client to answer questions about the underlying data system. For example:\n* \"What is the correlation between my closed won opportunities and the account industry?\"\n* \"How many open tickets do I have in the SUPPORT project?\"\n* \"Can you tell me what calendar events I have today?\"\n\nThe list of tools available and their descriptions follow:\n### Tools & Descriptions\nIn the definitions below, `{servername}` refers to the name of the MCP Server in the config file (e.g. `{classname_dash}` above).\n* `{servername}_get_tables` - Retrieves a list of tables available in the data source. Use the `{servername}_get_columns` tool to list available columns on a table. The output of the tool will be returned in CSV format, with the first line containing column headers.\n* `{servername}_get_columns` - Retrieves a list of columns for a table. Use the `{servername}_get_tables` tool to get a list of available tables. The output of the tool will be returned in CSV format, with the first line containing column headers.\n* `{servername}_run_query` - Execute a SQL SELECT query\n\n## JSON-RPC Request Examples\nIf you are scripting out the requests sent to the MCP Server instead of using an AI Client (e.g. Claude), then you can refer to the JSON payload examples below – following the JSON-RPC 2.0 specification - when calling the available tools. \n\n#### google_calendars_get_tables\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"tools/call\",\n    \"params\": {\n        \"name\": \"google_calendars_get_tables\",\n        \"arguments\": {}\n    }\n}\n```\n\n#### google_calendars_get_columns\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 2,\n    \"method\": \"tools/call\",\n    \"params\": {\n        \"name\": \"google_calendars_get_columns\",\n        \"arguments\": {\n            \"table\":  \"Account\"\n        }\n    }\n}\n```\n\n#### google_calendars_run_query\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"method\": \"tools/call\",\n    \"params\": {\n        \"name\": \"google_calendars_run_query\",\n        \"arguments\": {\n            \"sql\":  \"SELECT * FROM [Account] WHERE [IsDeleted] = true\"\n        }\n    }\n}\n```\n\n## Troubleshooting\n1. If you cannot see your CData MCP Server in Claude Desktop, be sure that you have fully quit Claude Desktop (Windows: use the Task Manager, Mac: use the Activity Monitor)\n2. If Claude Desktop is unable to retrieve data, be sure that you have configured your connection properly. Use the Connection String builder to create the connection string (see above) and copy the connection string into the property (.prp) file.\n3. If you are having trouble connecting to your data source, contact the [CData Support Team](https://www.cdata.com/support/submit.aspx).\n4. If you are having trouble using the MCP server, or have any other feedback, join the [CData Community](https://community.cdata.com).\n\n## License\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the [LICENSE](./LICENSE) file in the project repository.\n\n## All Supported Sources\n<table>\n<tr><td>Access</td><td>Act CRM</td><td>Act-On</td><td>Active Directory</td></tr>\n<tr><td>ActiveCampaign</td><td>Acumatica</td><td>Adobe Analytics</td><td>Adobe Commerce</td></tr>\n<tr><td>ADP</td><td>Airtable</td><td>AlloyDB</td><td>Amazon Athena</td></tr>\n<tr><td>Amazon DynamoDB</td><td>Amazon Marketplace</td><td>Amazon S3</td><td>Asana</td></tr>\n<tr><td>Authorize.Net</td><td>Avalara AvaTax</td><td>Avro</td><td>Azure Active Directory</td></tr>\n<tr><td>Azure Analysis Services</td><td>Azure Data Catalog</td><td>Azure Data Lake Storage</td><td>Azure DevOps</td></tr>\n<tr><td>Azure Synapse</td><td>Azure Table</td><td>Basecamp</td><td>BigCommerce</td></tr>\n<tr><td>BigQuery</td><td>Bing Ads</td><td>Bing Search</td><td>Bitbucket</td></tr>\n<tr><td>Blackbaud FE NXT</td><td>Box</td><td>Bullhorn CRM</td><td>Cassandra</td></tr>\n<tr><td>Certinia</td><td>Cloudant</td><td>CockroachDB</td><td>Confluence</td></tr>\n<tr><td>Cosmos DB</td><td>Couchbase</td><td>CouchDB</td><td>CSV</td></tr>\n<tr><td>Cvent</td><td>Databricks</td><td>DB2</td><td>DocuSign</td></tr>\n<tr><td>Dropbox</td><td>Dynamics 365</td><td>Dynamics 365 Business Central</td><td>Dynamics CRM</td></tr>\n<tr><td>Dynamics GP</td><td>Dynamics NAV</td><td>eBay</td><td>eBay Analytics</td></tr>\n<tr><td>Elasticsearch</td><td>Email</td><td>EnterpriseDB</td><td>Epicor Kinetic</td></tr>\n<tr><td>Exact Online</td><td>Excel</td><td>Excel Online</td><td>Facebook</td></tr>\n<tr><td>Facebook Ads</td><td>FHIR</td><td>Freshdesk</td><td>FTP</td></tr>\n<tr><td>GitHub</td><td>Gmail</td><td>Google Ad Manager</td><td>Google Ads</td></tr>\n<tr><td>Google Analytics</td><td>Google Calendar</td><td>Google Campaign Manager 360</td><td>Google Cloud Storage</td></tr>\n<tr><td>Google Contacts</td><td>Google Data Catalog</td><td>Google Directory</td><td>Google Drive</td></tr>\n<tr><td>Google Search</td><td>Google Sheets</td><td>Google Spanner</td><td>GraphQL</td></tr>\n<tr><td>Greenhouse</td><td>Greenplum</td><td>HarperDB</td><td>HBase</td></tr>\n<tr><td>HCL Domino</td><td>HDFS</td><td>Highrise</td><td>Hive</td></tr>\n<tr><td>HubDB</td><td>HubSpot</td><td>IBM Cloud Data Engine</td><td>IBM Cloud Object Storage</td></tr>\n<tr><td>IBM Informix</td><td>Impala</td><td>Instagram</td><td>JDBC-ODBC Bridge</td></tr>\n<tr><td>Jira</td><td>Jira Assets</td><td>Jira Service Management</td><td>JSON</td></tr>\n<tr><td>Kafka</td><td>Kintone</td><td>LDAP</td><td>LinkedIn</td></tr>\n<tr><td>LinkedIn Ads</td><td>MailChimp</td><td>MariaDB</td><td>Marketo</td></tr>\n<tr><td>MarkLogic</td><td>Microsoft Dataverse</td><td>Microsoft Entra ID</td><td>Microsoft Exchange</td></tr>\n<tr><td>Microsoft OneDrive</td><td>Microsoft Planner</td><td>Microsoft Project</td><td>Microsoft Teams</td></tr>\n<tr><td>Monday.com</td><td>MongoDB</td><td>MYOB AccountRight</td><td>MySQL</td></tr>\n<tr><td>nCino</td><td>Neo4J</td><td>NetSuite</td><td>OData</td></tr>\n<tr><td>Odoo</td><td>Office 365</td><td>Okta</td><td>OneNote</td></tr>\n<tr><td>Oracle</td><td>Oracle Eloqua</td><td>Oracle Financials Cloud</td><td>Oracle HCM Cloud</td></tr>\n<tr><td>Oracle Sales</td><td>Oracle SCM</td><td>Oracle Service Cloud</td><td>Outreach.io</td></tr>\n<tr><td>Parquet</td><td>Paylocity</td><td>PayPal</td><td>Phoenix</td></tr>\n<tr><td>PingOne</td><td>Pinterest</td><td>Pipedrive</td><td>PostgreSQL</td></tr>\n<tr><td>Power BI XMLA</td><td>Presto</td><td>Quickbase</td><td>QuickBooks</td></tr>\n<tr><td>QuickBooks Online</td><td>QuickBooks Time</td><td>Raisers Edge NXT</td><td>Reckon</td></tr>\n<tr><td>Reckon Accounts Hosted</td><td>Redis</td><td>Redshift</td><td>REST</td></tr>\n<tr><td>RSS</td><td>Sage 200</td><td>Sage 300</td><td>Sage 50 UK</td></tr>\n<tr><td>Sage Cloud Accounting</td><td>Sage Intacct</td><td>Salesforce</td><td>Salesforce Data Cloud</td></tr>\n<tr><td>Salesforce Financial Service Cloud</td><td>Salesforce Marketing</td><td>Salesforce Marketing Cloud Account Engagement</td><td>Salesforce Pardot</td></tr>\n<tr><td>Salesloft</td><td>SAP</td><td>SAP Ariba Procurement</td><td>SAP Ariba Source</td></tr>\n<tr><td>SAP Business One</td><td>SAP BusinessObjects BI</td><td>SAP ByDesign</td><td>SAP Concur</td></tr>\n<tr><td>SAP Fieldglass</td><td>SAP HANA</td><td>SAP HANA XS Advanced</td><td>SAP Hybris C4C</td></tr>\n<tr><td>SAP Netweaver Gateway</td><td>SAP SuccessFactors</td><td>SAS Data Sets</td><td>SAS xpt</td></tr>\n<tr><td>SendGrid</td><td>ServiceNow</td><td>SFTP</td><td>SharePoint</td></tr>\n<tr><td>SharePoint Excel Services</td><td>ShipStation</td><td>Shopify</td><td>SingleStore</td></tr>\n<tr><td>Slack</td><td>Smartsheet</td><td>Snapchat Ads</td><td>Snowflake</td></tr>\n<tr><td>Spark</td><td>Splunk</td><td>SQL Analysis Services</td><td>SQL Server</td></tr>\n<tr><td>Square</td><td>Stripe</td><td>Sugar CRM</td><td>SuiteCRM</td></tr>\n<tr><td>SurveyMonkey</td><td>Sybase</td><td>Sybase IQ</td><td>Tableau CRM Analytics</td></tr>\n<tr><td>Tally</td><td>TaxJar</td><td>Teradata</td><td>Tier1</td></tr>\n<tr><td>TigerGraph</td><td>Trello</td><td>Trino</td><td>Twilio</td></tr>\n<tr><td>Twitter</td><td>Twitter Ads</td><td>Veeva CRM</td><td>Veeva Vault</td></tr>\n<tr><td>Wave Financial</td><td>WooCommerce</td><td>WordPress</td><td>Workday</td></tr>\n<tr><td>xBase</td><td>Xero</td><td>XML</td><td>YouTube Analytics</td></tr>\n<tr><td>Zendesk</td><td>Zoho Books</td><td>Zoho Creator</td><td>Zoho CRM</td></tr>\n<tr><td>Zoho Inventory</td><td>Zoho Projects</td><td>Zuora</td><td>... Dozens More</td></tr>\n</table>\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calendars",
        "calendar",
        "scheduling",
        "calendars cdatasoftware",
        "calendar data",
        "scheduling calendars"
      ],
      "category": "scheduling-and-calendars"
    },
    "DynamicEndpoints--m365-bookings-mcp": {
      "owner": "DynamicEndpoints",
      "name": "m365-bookings-mcp",
      "url": "https://github.com/DynamicEndpoints/m365-bookings-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/DynamicEndpoints.webp",
      "description": "Interact with Microsoft Bookings through the Microsoft Graph API for managing bookings, staff, services, and appointments. Enhance scheduling capabilities with tools designed for efficiency and ease of use.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-31T04:59:39Z",
      "readme_content": "# Microsoft 365 Bookings MCP Server\r\n[![smithery badge](https://smithery.ai/badge/@DynamicEndpoints/m365-bookings-mcp)](https://smithery.ai/server/@DynamicEndpoints/m365-bookings-mcp)\r\n\r\nAn MCP server that provides tools for interacting with Microsoft Bookings through the Microsoft Graph API.\r\n\r\n## Features\r\n\r\n- List Bookings businesses\r\n- Get staff members for a business\r\n- Get services offered by a business\r\n- Get appointments for a business\r\n\r\n## Setup\r\n\r\n### Installing via Smithery\r\n\r\nTo install Microsoft 365 Bookings for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@DynamicEndpoints/m365-bookings-mcp):\r\n\r\n```bash\r\nnpx -y @smithery/cli install @DynamicEndpoints/m365-bookings-mcp --client claude\r\n```\r\n\r\n### Manual Installation\r\n1. Create an Azure AD application registration:\r\n   - Go to Azure Portal > Azure Active Directory > App registrations\r\n   - Create a new registration\r\n   - Add Microsoft Graph API permissions:\r\n     - BookingsAppointment.ReadWrite.All\r\n     - BookingsBusiness.ReadWrite.All\r\n     - BookingsStaffMember.ReadWrite.All\r\n\r\n2. Create a .env file with the following variables:\r\n```\r\nMICROSOFT_GRAPH_CLIENT_ID=your-client-id\r\nMICROSOFT_GRAPH_CLIENT_SECRET=your-client-secret\r\nMICROSOFT_GRAPH_TENANT_ID=your-tenant-id\r\n```\r\n\r\n3. Install dependencies:\r\n```bash\r\nnpm install\r\n```\r\n\r\n4. Build the server:\r\n```bash\r\nnpm run build\r\n```\r\n\r\n## Available Tools\r\n\r\n### get_bookings_businesses\r\nGet a list of all Bookings businesses in the organization.\r\n\r\n### get_business_staff\r\nGet staff members for a specific Bookings business.\r\n- Required parameter: businessId\r\n\r\n### get_business_services\r\nGet services offered by a specific Bookings business.\r\n- Required parameter: businessId\r\n\r\n### get_business_appointments\r\nGet appointments for a specific Bookings business.\r\n- Required parameter: businessId\r\n- Optional parameters: \r\n  - startDate (ISO format)\r\n  - endDate (ISO format)\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "bookings",
        "scheduling",
        "calendars",
        "microsoft bookings",
        "bookings microsoft",
        "m365 bookings"
      ],
      "category": "scheduling-and-calendars"
    },
    "GongRzhe--Calendar-Autoauth-MCP-Server": {
      "owner": "GongRzhe",
      "name": "Calendar-Autoauth-MCP-Server",
      "url": "https://github.com/GongRzhe/Calendar-Autoauth-MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/GongRzhe.webp",
      "description": "Integrates Google Calendar for managing events through natural language interactions with automatic authentication support.",
      "stars": 10,
      "forks": 6,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-03T22:32:05Z",
      "readme_content": "# Calendar AutoAuth MCP Server\n\nA Model Context Protocol (MCP) server for Google Calendar integration in Cluade Desktop with auto authentication support. This server enables AI assistants to manage Google Calendar events through natural language interactions.\n\n![](https://badge.mcpx.dev?type=server 'MCP Server')\n[![smithery badge](https://smithery.ai/badge/@gongrzhe/server-calendar-autoauth-mcp)](https://smithery.ai/server/@gongrzhe/server-calendar-autoauth-mcp)\n[![npm version](https://badge.fury.io/js/%40gongrzhe%2Fserver-calendar-autoauth-mcp.svg)](https://www.npmjs.com/package/@gongrzhe/server-calendar-autoauth-mcp)\n[![License: ISC](https://img.shields.io/badge/License-ISC-blue.svg)](https://opensource.org/licenses/ISC)\n\n## Features\n\n- Create calendar events with title, time, description, and location\n- Retrieve event details by event ID\n- Update existing events (title, time, description, location)\n- Delete events\n- List events within a specified time range\n- Full integration with Google Calendar API\n- Simple OAuth2 authentication flow with auto browser launch\n- Support for both Desktop and Web application credentials\n- Global credential storage for convenience\n\n## Installation & Authentication\n\n### Installing via Smithery\n\nTo install Calendar AutoAuth Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@gongrzhe/server-calendar-autoauth-mcp):\n\n```bash\nnpx -y @smithery/cli install @gongrzhe/server-calendar-autoauth-mcp --client claude\n```\n\n1. Create a Google Cloud Project and obtain credentials:\n\n   a. Create a Google Cloud Project:\n      - Go to [Google Cloud Console](https://console.cloud.google.com/)\n      - Create a new project or select an existing one\n      - Enable the Google Calendar API for your project\n\n   b. Create OAuth 2.0 Credentials:\n      - Go to \"APIs & Services\" > \"Credentials\"\n      - Click \"Create Credentials\" > \"OAuth client ID\"\n      - Choose either \"Desktop app\" or \"Web application\" as application type\n      - Give it a name and click \"Create\"\n      - For Web application, add `http://localhost:3000/oauth2callback` to the authorized redirect URIs\n      - Download the JSON file of your client's OAuth keys\n      - Rename the key file to `gcp-oauth.keys.json`\n\n2. Run Authentication:\n\n   You can authenticate in two ways:\n\n   a. Global Authentication (Recommended):\n   ```bash\n   # First time: Place gcp-oauth.keys.json in your home directory's .calendar-mcp folder\n   mkdir -p ~/.calendar-mcp\n   mv gcp-oauth.keys.json ~/.calendar-mcp/\n\n   # Run authentication from anywhere\n   npx @gongrzhe/server-calendar-autoauth-mcp auth\n   ```\n\n   b. Local Authentication:\n   ```bash\n   # Place gcp-oauth.keys.json in your current directory\n   # The file will be automatically copied to global config\n   npx @gongrzhe/server-calendar-autoauth-mcp auth\n   ```\n\n   The authentication process will:\n   - Look for `gcp-oauth.keys.json` in the current directory or `~/.calendar-mcp/`\n   - If found in current directory, copy it to `~/.calendar-mcp/`\n   - Open your default browser for Google authentication\n   - Save credentials as `~/.calendar-mcp/credentials.json`\n\n   > **Note**: \n   > - After successful authentication, credentials are stored globally in `~/.calendar-mcp/` and can be used from any directory\n   > - Both Desktop app and Web application credentials are supported\n   > - For Web application credentials, make sure to add `http://localhost:3000/oauth2callback` to your authorized redirect URIs\n\n3. Configure in Claude Desktop:\n\n```json\n{\n  \"mcpServers\": {\n    \"calendar\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@gongrzhe/server-calendar-autoauth-mcp\"\n      ]\n    }\n  }\n}\n```\n\n### Docker Support\n\nIf you prefer using Docker:\n\n1. Authentication:\n```bash\ndocker run -i --rm \\\n  --mount type=bind,source=/path/to/gcp-oauth.keys.json,target=/gcp-oauth.keys.json \\\n  -v mcp-calendar:/calendar-server \\\n  -e CALENDAR_OAUTH_PATH=/gcp-oauth.keys.json \\\n  -e \"CALENDAR_CREDENTIALS_PATH=/calendar-server/credentials.json\" \\\n  -p 3000:3000 \\\n  mcp/calendar auth\n```\n\n2. Usage:\n```json\n{\n  \"mcpServers\": {\n    \"calendar\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-v\",\n        \"mcp-calendar:/calendar-server\",\n        \"-e\",\n        \"CALENDAR_CREDENTIALS_PATH=/calendar-server/credentials.json\",\n        \"mcp/calendar\"\n      ]\n    }\n  }\n}\n```\n\n## Usage Examples\n\nThe server provides several tools that can be used through the Claude Desktop:\n\n### Create Event\n```json\n{\n  \"summary\": \"Team Meeting\",\n  \"start\": {\n    \"dateTime\": \"2024-01-20T10:00:00Z\"\n  },\n  \"end\": {\n    \"dateTime\": \"2024-01-20T11:00:00Z\"\n  },\n  \"description\": \"Weekly team sync\",\n  \"location\": \"Conference Room A\"\n}\n```\n\n### List Events\n```json\n{\n  \"timeMin\": \"2024-01-01T00:00:00Z\",\n  \"timeMax\": \"2024-12-31T23:59:59Z\",\n  \"maxResults\": 10,\n  \"orderBy\": \"startTime\"\n}\n```\n\n### Update Event\n```json\n{\n  \"eventId\": \"event123\",\n  \"summary\": \"Updated Meeting Title\",\n  \"start\": {\n    \"dateTime\": \"2024-01-20T11:00:00Z\"\n  },\n  \"end\": {\n    \"dateTime\": \"2024-01-20T12:00:00Z\"\n  }\n}\n```\n\n### Delete Event\n```json\n{\n  \"eventId\": \"event123\"\n}\n```\n\n## Security Notes\n\n- OAuth credentials are stored securely in your local environment (`~/.calendar-mcp/`)\n- The server uses offline access to maintain persistent authentication\n- Never share or commit your credentials to version control\n- Regularly review and revoke unused access in your Google Account settings\n- Credentials are stored globally but are only accessible by the current user\n\n## Troubleshooting\n\n1. **OAuth Keys Not Found**\n   - Make sure `gcp-oauth.keys.json` is in either your current directory or `~/.calendar-mcp/`\n   - Check file permissions\n\n2. **Invalid Credentials Format**\n   - Ensure your OAuth keys file contains either `web` or `installed` credentials\n   - For web applications, verify the redirect URI is correctly configured\n\n3. **Port Already in Use**\n   - If port 3000 is already in use, please free it up before running authentication\n   - You can find and stop the process using that port\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the ISC License.\n\n## Author\n\ngongrzhe\n\n## Support\n\nIf you encounter any issues or have questions, please file an issue on the GitHub repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calendars",
        "calendar",
        "autoauth",
        "calendar autoauth",
        "google calendar",
        "scheduling calendars"
      ],
      "category": "scheduling-and-calendars"
    },
    "ITworkonline--GoogleCalendarMCP": {
      "owner": "ITworkonline",
      "name": "GoogleCalendarMCP",
      "url": "https://github.com/ITworkonline/GoogleCalendarMCP",
      "imageUrl": "/freedevtools/mcp/pfp/ITworkonline.webp",
      "description": "Manage Google Calendar events by creating and customizing event details including time, location, and attendees. Streamline scheduling processes and integrate calendar functionalities into applications.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-06-06T04:30:43Z",
      "readme_content": "# GoogleCalendarMCP\n\nA [Model Completion Prompt (MCP)](https://github.com/model-completion-prompt/mcp) plugin for interacting with Google Calendar.\n\n## Features\n\n- Create events in Google Calendar with customizable:\n  - Start and end times\n  - Description\n  - Location\n  - Attendees\n  - Timezone\n\n## Installation\n\n1. Clone this repository:\n```bash\ngit clone https://github.com/ITworkonline/GoogleCalendarMCP.git\ncd GoogleCalendarMCP\n```\n\n2. Create a virtual environment and install dependencies:\n```bash\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\npip install -e .\n```\n\n3. Set up Google Calendar API:\n   - Go to the [Google Cloud Console](https://console.cloud.google.com/)\n   - Create a new project\n   - Enable the Google Calendar API\n   - Create OAuth 2.0 credentials (Desktop app)\n   - Download the credentials JSON file and save it as `credentials.json` in the project root\n\n## Usage\n\n```python\nfrom GoogleCalendarMCP.main import create_event\n\n# Create a calendar event\nresult = await create_event(\n    summary=\"Meeting with Team\",\n    start_time=\"2025-04-01T10:00:00\",\n    end_time=\"2025-04-01T11:00:00\",\n    description=\"Discuss project progress\",\n    location=\"Conference Room 3\",\n    attendees=[\"colleague@example.com\"],\n    timezone=\"America/New_York\"\n)\n```\n\n## Authentication\n\nThe first time you run the program, it will open a browser window for you to authenticate with your Google account. After authentication, a `token.json` file will be created to store your credentials for subsequent runs.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "googlecalendarmcp",
        "calendars",
        "calendar",
        "itworkonline googlecalendarmcp",
        "googlecalendarmcp manage",
        "calendars itworkonline"
      ],
      "category": "scheduling-and-calendars"
    },
    "JavaProgrammerLB--zoom-mcp-server": {
      "owner": "JavaProgrammerLB",
      "name": "zoom-mcp-server",
      "url": "https://github.com/JavaProgrammerLB/zoom-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/JavaProgrammerLB.webp",
      "description": "Schedule Zoom meetings using AI assistance to simplify the setup process. Manage meeting listings, create new meetings, and delete existing ones directly through commands.",
      "stars": 13,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-26T03:56:05Z",
      "readme_content": "# Zoom MCP Server\n\n[![NPM Version](https://img.shields.io/npm/v/@yitianyigexiangfa/zoom-mcp-server)](https://www.npmjs.com/package/@yitianyigexiangfa/zoom-mcp-server) ![MIT licensed](https://img.shields.io/npm/l/@yitianyigexiangfa/zoom-mcp-server) [![smithery badge](https://smithery.ai/badge/@JavaProgrammerLB/zoom-mcp-server)](https://smithery.ai/server/@JavaProgrammerLB/zoom-mcp-server) ![Zoom MCP Server](https://badge.mcpx.dev?type=server \"MCP Server\")\n\nNow you can date a Zoom meeting with AI's help\n![about.jpg](about.jpg)\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/javaprogrammerlb-zoom-mcp-server-badge.png)](https://mseep.ai/app/javaprogrammerlb-zoom-mcp-server)\n\n## Usage\n\n### 1. list meetings\n\n- `list my meetings`\n- `list my upcoming meetings`\n\n### 2. create a meeting\n\n- `Schedule a meeting at today 3 pm with a introduce mcp topic`\n\n### 3. delete a meeting\n\n- `delete the latest meeting`\n- `delete the 86226580854 meeting`\n\n### 4. get a meeting detail\n\n- `Retrieve the latest meeting's details`\n- `Retrieve 86226580854 meeting's details`\n\n## Usage with VS Code\n [![Install with NPX in VS Code](https://img.shields.io/badge/VS_Code-NPM-0098FF?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=zoom-mcp-server&inputs=%5B%7B%22type%22%3A%22promptString%22%2C%22id%22%3A%22ZOOM_ACCOUNT_ID%22%7D%2C%20%7B%22type%22%3A%22promptString%22%2C%22id%22%3A%22ZOOM_CLIENT_ID%22%7D%2C%20%7B%22type%22%3A%22promptString%22%2C%22id%22%3A%22ZOOM_CLIENT_SECRET%22%7D%5D&config=%7B%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22%40yitianyigexiangfa%2Fzoom-mcp-server%40latest%22%5D%2C%22env%22%3A%7B%22ZOOM_ACCOUNT_ID%22%3A%22%24%7Binput%3AZOOM_ACCOUNT_ID%7D%22%2C%20%22ZOOM_CLIENT_ID%22%3A%22%24%7Binput%3AZOOM_CLIENT_ID%7D%22%2C%20%22ZOOM_CLIENT_SECRET%22%3A%22%24%7Binput%3AZOOM_CLIENT_SECRET%7D%22%7D%7D)\n\n## 2 Steps to play with zoom-mcp-server\n\n- Get Zoom Client ID, Zoom Client Secret and Account ID\n- Config MCP server\n\n### 1. Get Zoom Client ID, Zoom Client Secret and Account ID\n\n1. vist [Zoom Marketplace](https://marketplace.zoom.us/)\n1. Build App and choose **Server to Server OAuth App**\n1. Add Scope > Meeting > Select All Meeting Permissions\n1. Active your app\n   then you can get **Account ID**, **Client ID**, **Client Secret** in App Credentials page\n\n### 2. Config MCP Server\n\n```json\n{\n  \"mcpServers\": {\n    \"zoom-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@yitianyigexiangfa/zoom-mcp-server@latest\"],\n      \"env\": {\n        \"ZOOM_ACCOUNT_ID\": \"${ZOOM_ACCOUNT_ID}\",\n        \"ZOOM_CLIENT_ID\": \"${ZOOM_CLIENT_ID}\",\n        \"ZOOM_CLIENT_SECRET\": \"${ZOOM_CLIENT_SECRET}\"\n      }\n    }\n  }\n}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "scheduling",
        "meetings",
        "javaprogrammerlb",
        "schedule zoom",
        "zoom meetings",
        "javaprogrammerlb zoom"
      ],
      "category": "scheduling-and-calendars"
    },
    "MarkusPfundstein--mcp-gsuite": {
      "owner": "MarkusPfundstein",
      "name": "mcp-gsuite",
      "url": "https://github.com/MarkusPfundstein/mcp-gsuite",
      "imageUrl": "/freedevtools/mcp/pfp/MarkusPfundstein.webp",
      "description": "Interact with Gmail and Google Calendar to manage multiple Google accounts, search and compose emails, and handle calendar events.",
      "stars": 437,
      "forks": 87,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T22:31:57Z",
      "readme_content": "# mcp-gsuite MCP server\n\n[![smithery badge](https://smithery.ai/badge/mcp-gsuite)](https://smithery.ai/server/mcp-gsuite)\nMCP server to interact with Google products.\n\n## Example prompts\n\nRight now, this MCP server supports Gmail and Calendar integration with the following capabilities:\n\n1. General\n* Multiple google accounts\n\n2. Gmail\n* Get your Gmail user information\n* Query emails with flexible search (e.g., unread, from specific senders, date ranges, with attachments)\n* Retrieve complete email content by ID\n* Create new draft emails with recipients, subject, body and CC options\n* Delete draft emails\n* Reply to existing emails (can either send immediately or save as draft)\n* Retrieve multiple emails at once by their IDs.\n* Save multiple attachments from emails to your local system.\n\n3. Calendar\n* Manage multiple calendars\n* Get calendar events within specified time ranges\n* Create calendar events with:\n  + Title, start/end times\n  + Optional location and description\n  + Optional attendees\n  + Custom timezone support\n  + Notification preferences\n* Delete calendar events\n\nExample prompts you can try:\n\n* Retrieve my latest unread messages\n* Search my emails from the Scrum Master\n* Retrieve all emails from accounting\n* Take the email about ABC and summarize it\n* Write a nice response to Alice's last email and upload a draft.\n* Reply to Bob's email with a Thank you note. Store it as draft\n\n* What do I have on my agenda tomorrow?\n* Check my private account's Family agenda for next week\n* I need to plan an event with Tim for 2hrs next week. Suggest some time slots.\n\n## Quickstart\n\n### Install\n\n### Installing via Smithery\n\nTo install mcp-gsuite for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-gsuite):\n\n```bash\nnpx -y @smithery/cli install mcp-gsuite --client claude\n```\n\n#### Oauth 2\n\nGoogle Workspace (G Suite) APIs require OAuth2 authorization. Follow these steps to set up authentication:\n\n1. Create OAuth2 Credentials:\n   - Go to the [Google Cloud Console](https://console.cloud.google.com/)\n   - Create a new project or select an existing one\n   - Enable the Gmail API and Google Calendar API for your project\n   - Go to \"Credentials\" → \"Create Credentials\" → \"OAuth client ID\"\n   - Select \"Desktop app\" or \"Web application\" as the application type\n   - Configure the OAuth consent screen with required information\n   - Add authorized redirect URIs (include `http://localhost:4100/code` for local development)\n\n2. Required OAuth2 Scopes:\n   \n\n```json\n   [\n     \"openid\",\n     \"https://mail.google.com/\",\n     \"https://www.googleapis.com/auth/calendar\",\n     \"https://www.googleapis.com/auth/userinfo.email\"\n   ]\n```\n\n3. Then create a `.gauth.json` in your working directory with client\n\n```json\n{\n    \"web\": {\n        \"client_id\": \"$your_client_id\",\n        \"client_secret\": \"$your_client_secret\",\n        \"redirect_uris\": [\"http://localhost:4100/code\"],\n        \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n        \"token_uri\": \"https://oauth2.googleapis.com/token\"\n    }\n}\n```\n\n4. Create a `.accounts.json` file with account information\n\n```json\n{\n    \"accounts\": [\n        {\n            \"email\": \"alice@bob.com\",\n            \"account_type\": \"personal\",\n            \"extra_info\": \"Additional info that you want to tell Claude: E.g. 'Contains Family Calendar'\"\n        }\n    ]\n}\n```\n\nYou can specifiy multiple accounts. Make sure they have access in your Google Auth app. The `extra_info` field is especially interesting as you can add info here that you want to tell the AI about the account (e.g. whether it has a specific agenda)\n\nNote: When you first execute one of the tools for a specific account, a browser will open, redirect you to Google and ask for your credentials, scope, etc. After a successful login, it stores the credentials in a local file called `.oauth.{email}.json` . Once you are authorized, the refresh token will be used.\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  \n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-gsuite\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<dir_to>/mcp-gsuite\",\n        \"run\",\n        \"mcp-gsuite\"\n      ]\n    }\n  }\n}\n```\n\n\nNote: You can also use the `uv run mcp-gsuite --accounts-file /path/to/custom/.accounts.json` to specify a different accounts file or `--credentials-dir /path/to/custom/credentials` to specify a different credentials directory.\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-gsuite\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<dir_to>/mcp-gsuite\",\n        \"run\",\n        \"mcp-gsuite\",\n        \"--accounts-file\",\n        \"/path/to/custom/.accounts.json\",\n        \"--credentials-dir\",\n        \"/path/to/custom/credentials\"\n      ]\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  \n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-gsuite\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-gsuite\",\n        \"--accounts-file\",\n        \"/path/to/custom/.accounts.json\",\n        \"--credentials-dir\",\n        \"/path/to/custom/credentials\"\n      ]\n    }\n  }\n}\n```\n\n</details>\n\n### Configuration Options\n\nThe MCP server can be configured with several command-line options to specify custom paths for authentication and account information:\n\n* `--gauth-file`: Specifies the path to the `.gauth.json` file containing OAuth2 client configuration. Default is `./.gauth.json`.\n* `--accounts-file`: Specifies the path to the `.accounts.json` file containing information about the Google accounts. Default is `./.accounts.json`.\n* `--credentials-dir`: Specifies the directory where OAuth credentials are stored after successful authentication. Default is the current working directory with a subdirectory for each account as `.oauth.{email}.json`.\n\nThese options allow for flexibility in managing different environments or multiple sets of credentials and accounts, especially useful in development and testing scenarios.\n\nExample usage:\n\n```bash\nuv run mcp-gsuite --gauth-file /path/to/custom/.gauth.json --accounts-file /path/to/custom/.accounts.json --credentials-dir /path/to/custom/credentials\n```\n\nThis configuration is particularly useful when you have multiple instances of the server running with different configurations or when deploying to environments where the default paths are not suitable.\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n\n```bash\nuv sync\n```\n\n2. Build package distributions:\n\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n* Token: `--token` or `UV_PUBLISH_TOKEN`\n* Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [ `npm` ](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /path/to/mcp-gsuite run mcp-gsuite\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\nYou can also watch the server logs with this command:\n\n```bash\ntail -n 20 -f ~/Library/Logs/Claude/mcp-server-mcp-gsuite.log\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gsuite",
        "calendar",
        "calendars",
        "mcp gsuite",
        "google calendar",
        "gsuite interact"
      ],
      "category": "scheduling-and-calendars"
    },
    "Meeting-BaaS--meeting-mcp": {
      "owner": "Meeting-BaaS",
      "name": "meeting-mcp",
      "url": "https://github.com/Meeting-BaaS/meeting-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Meeting-BaaS.webp",
      "description": "Manage meeting data including transcripts, recordings, and calendar events while providing search functionality for easy organization and retrieval.",
      "stars": 20,
      "forks": 7,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-12T20:09:05Z",
      "readme_content": "# Meeting BaaS MCP Server\n[![Project Logo](MCPServer@2x.png)](https://meetingBaaS.com)\n\n<p align=\"center\"><a href=\"https://discord.com/invite/dsvFgDTr6c\"><img height=\"60px\" src=\"https://user-images.githubusercontent.com/31022056/158916278-4504b838-7ecb-4ab9-a900-7dc002aade78.png\" alt=\"Join our Discord!\"></a></p>\n\nA Model Context Protocol (MCP) server that provides tools for managing meeting data, including transcripts, recordings, calendar events, and search functionality.\n\n## QUICK START: Claude Desktop Integration\n\nTo use Meeting BaaS with Claude Desktop:\n\n1. Edit the Claude Desktop configuration file:\n   ```bash\n   vim ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n   ```\n\n2. Add the Meeting BaaS configuration:\n   ```json\n   \"meetingbaas\": {\n     \"command\": \"/bin/bash\",\n     \"args\": [\n       \"-c\",\n       \"cd /path/to/meeting-mcp && (npm run build 1>&2) && export MCP_FROM_CLAUDE=true && node dist/index.js\"\n     ],\n     \"headers\": {\n       \"x-api-key\": \"YOUR_API_KEY\"\n     }\n   }\n   ```\n\n3. For calendar integration, you can add the `calendarOAuth` section to your `botConfig`:\n   ```json\n   \"botConfig\": {\n     \"calendarOAuth\": {\n       \"platform\": \"Google\",  // or \"Microsoft\"\n       \"clientId\": \"YOUR_OAUTH_CLIENT_ID\",\n       \"clientSecret\": \"YOUR_OAUTH_CLIENT_SECRET\", \n       \"refreshToken\": \"YOUR_REFRESH_TOKEN\",\n       \"rawCalendarId\": \"primary@gmail.com\"  // Optional\n     }\n   }\n   ```\n\n4. Save the file and restart Claude Desktop.\n\n> **Note:** Calendar integration is optional. Meeting BaaS can be used without connecting a calendar by simply omitting the `calendarOAuth` section.\n\n## Overview\n\nThis project implements a Model Context Protocol (MCP) server that allows AI assistants like Claude and Cursor to access and manipulate meeting data. It exposes a set of tools and resources that can be used to:\n\n- **Invite Meeting Bots**: Create and invite bots to your video conferences that automatically record and transcribe meetings\n\n  ```\n  \"Create a new meeting bot for my Zoom call tomorrow\"\n  ```\n\n- **Query Meeting Data**: Search through meeting transcripts and find specific information without watching entire recordings\n\n  ```\n  \"Search my recent meetings for discussions about the quarterly budget\"\n  \"Find all mentions of Project Apollo in yesterday's team meeting\"\n  \"Show me parts of the meeting where Jane was speaking\"\n  ```\n\n- **Manage Calendar Events**: View and organize calendar entries and upcoming meetings\n\n- **Access Recording Information**: Get metadata about meeting recordings and their status\n\n## Prerequisites\n\n- Node.js (v16 or later)\n- npm\n- **MeetingBaaS Account**: You need access to a MeetingBaaS account using your corporate email address\n  - All logs, bots, and shared links are available to colleagues with the same corporate domain (not personal emails like gmail.com)\n  - This enables seamless collaboration where all team members can access meeting recordings and transcripts created by anyone in your organization\n\n## Installation\n\n1. Clone the repository:\n\n   ```bash\n   git clone <repository-url>\n   cd mcp-baas\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   npm install\n   ```\n\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n\n## Usage\n\nStart the server:\n\n```bash\nnpm run start\n```\n\nBy default, the server runs on port 7017 and exposes the MCP endpoint at `http://localhost:7017/mcp`.\n\n## Available Tools\n\nThe server exposes several tools through the MCP protocol:\n\n### Calendar Tools\n\n- `oauthGuidance`: Get detailed step-by-step instructions on setting up OAuth for Google or Microsoft calendars\n  - No parameters required\n  - Returns comprehensive instructions for obtaining OAuth credentials and setting up calendar integration\n\n- `listRawCalendars`: Lists available calendars from Google or Microsoft before integration\n  - Parameters: `platform` (\"Google\" or \"Microsoft\"), `clientId`, `clientSecret`, `refreshToken`\n  - Returns a list of available calendars with their IDs and primary status\n\n- `setupCalendarOAuth`: Integrates a calendar using OAuth credentials\n  - Parameters: `platform` (\"Google\" or \"Microsoft\"), `clientId`, `clientSecret`, `refreshToken`, `rawCalendarId` (optional)\n  - Returns confirmation of successful integration with calendar details\n\n- `listCalendars`: Lists all integrated calendars\n  - No parameters required\n  - Returns a list of all calendars with their names, email addresses, and UUIDs\n\n- `getCalendar`: Gets detailed information about a specific calendar integration\n  - Parameters: `calendarId` (UUID of the calendar)\n  - Returns comprehensive calendar details\n\n- `deleteCalendar`: Permanently removes a calendar integration\n  - Parameters: `calendarId` (UUID of the calendar)\n  - Returns confirmation of successful deletion\n\n- `resyncAllCalendars`: Forces a refresh of all connected calendars\n  - No parameters required\n  - Returns the status of the sync operation\n\n- `listUpcomingMeetings`: Lists upcoming meetings from a calendar\n  - Parameters: `calendarId`, `status` (optional: \"upcoming\", \"past\", \"all\"), `limit` (optional)\n  - Returns a list of meetings with their names, times, and recording status\n\n- `listEvents`: Lists calendar events with comprehensive filtering options\n  - Parameters: `calendarId`, plus optional filters like `startDateGte`, `startDateLte`, `attendeeEmail`, etc.\n  - Returns detailed event listings with rich information\n\n- `listEventsWithCredentials`: Lists calendar events with credentials provided directly in the query\n  - Parameters: `calendarId`, `apiKey`, plus same optional filters as `listEvents`\n  - Returns the same detailed information as `listEvents` but with direct authentication\n\n- `getEvent`: Gets detailed information about a specific calendar event\n  - Parameters: `eventId` (UUID of the event)\n  - Returns comprehensive event details including attendees and recording status\n\n- `scheduleRecording`: Schedules a bot to record an upcoming meeting\n  - Parameters: `eventId`, `botName`, plus optional settings like `botImage`, `recordingMode`, etc.\n  - Returns confirmation of successful scheduling\n\n- `scheduleRecordingWithCredentials`: Schedules recording with credentials provided directly in the query\n  - Parameters: `eventId`, `apiKey`, `botName`, plus same optional settings as `scheduleRecording`\n  - Returns confirmation of successful scheduling\n\n- `cancelRecording`: Cancels a previously scheduled recording\n  - Parameters: `eventId`, `allOccurrences` (optional, for recurring events)\n  - Returns confirmation of successful cancellation\n\n- `cancelRecordingWithCredentials`: Cancels recording with credentials provided directly in the query\n  - Parameters: `eventId`, `apiKey`, `allOccurrences` (optional)\n  - Returns confirmation of successful cancellation\n\n- `checkCalendarIntegration`: Checks and diagnoses calendar integration status\n  - No parameters required\n  - Returns a comprehensive status report and troubleshooting tips\n\n### Meeting Tools\n\n- `createBot`: Creates a meeting bot that can join video conferences to record and transcribe meetings\n  - Parameters: \n    - `meeting_url` (URL of the meeting to join)\n    - `name` (optional bot name)\n    - `botImage` (optional URL to an image for the bot's avatar) \n    - `entryMessage` (optional message the bot will send when joining)\n    - `deduplicationKey` (optional key to override the 5-minute restriction on joining the same meeting)\n    - `nooneJoinedTimeout` (optional timeout in seconds for bot to leave if no one joins)\n    - `waitingRoomTimeout` (optional timeout in seconds for bot to leave if stuck in waiting room)\n    - `speechToTextProvider` (optional provider for transcription: \"Gladia\", \"Runpod\", or \"Default\")\n    - `speechToTextApiKey` (optional API key for the speech-to-text provider)\n    - `streamingInputUrl` (optional WebSocket URL to stream audio input)\n    - `streamingOutputUrl` (optional WebSocket URL to stream audio output)\n    - `streamingAudioFrequency` (optional frequency for streaming: \"16khz\" or \"24khz\")\n    - `extra` (optional object with additional metadata about the meeting, such as meeting type, custom summary prompt, search keywords)\n  - Returns: Bot details including ID and join status\n- `getBots`: Lists all bots and their associated meetings\n- `getBotsByMeeting`: Gets bots for a specific meeting URL\n- `getRecording`: Retrieves recording information for a specific bot/meeting\n- `getRecordingStatus`: Checks the status of a recording in progress\n- `getMeetingData`: Gets transcript and recording data for a specific meeting\n  - Parameters: `meetingId` (ID of the meeting to get data for)\n  - Returns: Information about the meeting recording including duration and transcript segment count\n- `getMeetingDataWithCredentials`: Gets transcript and recording data using direct API credentials\n  - Parameters: `meetingId` (ID of the meeting), `apiKey` (API key for authentication)\n  - Returns: Same information as `getMeetingData` but with direct authentication\n\n### Transcript Tools\n\n- `getMeetingTranscript`: Gets a meeting transcript with speaker names and content grouped by speaker\n  - Parameters: `botId` (the bot that recorded the meeting)\n  - Returns: Complete transcript with speaker information, formatted as paragraphs grouped by speaker\n  - Example output:\n    ```\n    Meeting: \"Weekly Team Meeting\"\n    Duration: 45m 30s\n    Transcript:\n\n    John Smith: Hello everyone, thanks for joining today's call. We have a lot to cover regarding the Q3 roadmap and our current progress on the platform redesign.\n\n    Sarah Johnson: Thanks John. I've prepared some slides about the user testing results we got back yesterday. The feedback was generally positive but there are a few areas we need to address.\n    ```\n\n- `findKeyMoments`: Automatically identifies and shares links to important moments in a meeting\n  - Parameters: `botId`, optional `meetingTitle`, optional list of `topics` to look for, and optional `maxMoments`\n  - Returns: Markdown-formatted list of key moments with links, automatically detected based on transcript\n  - Uses AI-powered analysis to find significant moments without requiring manual timestamp selection\n\n### QR Code Tools\n\n- `generateQRCode`: Creates an AI-generated QR code image that can be used as a bot avatar\n  - Parameters:\n    - `type`: Type of QR code (url, email, phone, sms, text)\n    - `to`: Destination for the QR code (URL, email, phone number, or text)\n    - `prompt`: AI prompt to customize the QR code (max 1000 characters). You can include your API key directly in the prompt text by typing \"API key: qrc_your_key\" or similar phrases.\n    - `style`: Style of the QR code (style_default, style_dots, style_rounded, style_crystal)\n    - `useAsBotImage`: Whether to use the generated QR code as the bot avatar (default: true)\n    - `template`: Template ID for the QR code (optional)\n    - `apiKey`: Your QR Code AI API key (optional, will use default if not provided)\n  - Returns: URL to the generated QR code image that can be used directly with the joinMeeting tool\n  - Example usage:\n    ```\n    \"Generate a QR code with my email lazare@spoke.app that looks like a Tiger in crystal style\"\n    ```\n  - Example with API key in the prompt:\n    ```\n    \"Generate a QR code for my website https://example.com that looks like a mountain landscape. Use API key: qrc_my-personal-api-key-123456\"\n    ```\n  - Example with formal parameter:\n    ```\n    \"Generate a QR code with the following parameters:\n    - Type: email\n    - To: john.doe@example.com\n    - Prompt: Create a QR code that looks like a mountain landscape\n    - Style: style_rounded\n    - API Key: qrc_my-personal-api-key-123456\"\n    ```\n\n### Link Sharing Tools\n\n- `shareableMeetingLink`: Generates a nicely formatted, shareable link to a meeting recording\n  - Parameters: `botId`, plus optional `timestamp`, `title`, `speakerName`, and `description`\n  - Returns: Markdown-formatted link with metadata that can be shared directly in chat\n  - Example: \n    ```\n    📽️ **Meeting Recording: Weekly Team Sync**\n    ⏱️ Timestamp: 00:12:35\n    🎤 Speaker: Sarah Johnson\n    📝 Discussing the new product roadmap\n\n    🔗 [View Recording](https://meetingbaas.com/viewer/abc123?t=755)\n    ```\n\n- `shareMeetingSegments`: Creates a list of links to multiple important moments in a meeting\n  - Parameters: `botId` and an array of `segments` with timestamps, speakers, and descriptions\n  - Returns: Markdown-formatted list of segments with direct links to each moment\n  - Useful for creating a table of contents for a long meeting\n\n## Example Workflows\n\n### Recording a Meeting\n\n1. Create a bot for your upcoming meeting:\n\n   ```\n   \"Create a bot for my Zoom meeting at https://zoom.us/j/123456789\"\n   ```\n\n2. The bot joins the meeting automatically and begins recording.\n\n3. Check recording status:\n   ```\n   \"What's the status of my meeting recording for the Zoom call I started earlier?\"\n   ```\n\n### Calendar Integration and Automatic Recording\n\n1. Get guidance on obtaining OAuth credentials:\n\n   ```\n   \"I want to integrate my Google Calendar. How do I get OAuth credentials?\"\n   ```\n\n2. List your available calendars before integration:\n\n   ```\n   \"List my available Google calendars. Here are my OAuth credentials:\n   - Client ID: my-client-id-123456789.apps.googleusercontent.com\n   - Client Secret: my-client-secret-ABCDEF123456\n   - Refresh Token: my-refresh-token-ABCDEF123456789\"\n   ```\n\n3. Set up calendar integration with a specific calendar:\n\n   ```\n   \"Integrate my Google Calendar using these credentials:\n   - Platform: Google\n   - Client ID: my-client-id-123456789.apps.googleusercontent.com\n   - Client Secret: my-client-secret-ABCDEF123456\n   - Refresh Token: my-refresh-token-ABCDEF123456789\n   - Raw Calendar ID: primary@gmail.com\"\n   ```\n\n4. View your upcoming meetings:\n\n   ```\n   \"Show me my upcoming meetings from calendar 1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d\"\n   ```\n\n5. Schedule recording for an upcoming meeting:\n\n   ```\n   \"Schedule a recording for my team meeting with event ID 7a8b9c0d-1e2f-3a4b-5c6d-7e8f9a0b1c2d.\n   Configure the bot with:\n   - Name: Team Meeting Bot\n   - Recording Mode: gallery_view\n   - Entry Message: Hello everyone, I'm here to record the meeting\"\n   ```\n\n6. Check all recordings scheduled in your calendar:\n\n   ```\n   \"Show me all meetings in my calendar that have recordings scheduled\"\n   ```\n\n7. Cancel a previously scheduled recording:\n\n   ```\n   \"Cancel the recording for event 7a8b9c0d-1e2f-3a4b-5c6d-7e8f9a0b1c2d\"\n   ```\n\n8. Refresh calendar data if meetings are missing:\n\n   ```\n   \"Force a resync of all my connected calendars\"\n   ```\n\n### Analyzing Meeting Content\n\n1. Get the full transcript of a meeting:\n\n   ```\n   \"Get the transcript from my team meeting with bot ID abc-123\"\n   ```\n\n2. Find key moments in a meeting:\n\n   ```\n   \"Identify key moments from yesterday's product planning meeting with bot ID xyz-456\"\n   ```\n\n3. Share a specific moment from a meeting:\n\n   ```\n   \"Create a shareable link to the part of meeting abc-123 at timestamp 12:45 where John was talking about the budget\"\n   ```\n\n### Using Direct Credential Tools\n\nYou can provide API credentials directly in your queries:\n\n1. List events with direct credentials:\n\n   ```\n   \"List events from calendar 5c99f8a4-f498-40d0-88f0-29f698c53c51 using API key tesban where attendee is philipe@spoke.app\"\n   ```\n\n2. Schedule a recording with direct credentials:\n\n   ```\n   \"Schedule a recording for event 78d06b42-794f-4efe-8195-62db1f0052d5 using API key tesban with bot name 'Weekly Meeting Bot'\"\n   ```\n\n3. Cancel a recording with direct credentials:\n\n   ```\n   \"Cancel the recording for event 97cd62f0-ea9b-42b3-add5-7a607ce6d80f using API key tesban\"\n   ```\n\n4. Get meeting data with direct credentials:\n\n   ```\n   \"Get meeting data for meeting 47de9462-bea7-406c-b79a-fd6b82c3de76 using API key tesban\"\n   ```\n\n### Using AI-Generated QR Codes as Bot Avatars\n\n1. Generate a QR code with your contact information and a custom design:\n\n   ```\n   \"Generate a QR code with the following parameters:\n   - Type: email\n   - To: john.doe@company.com\n   - Prompt: Create a professional-looking QR code with abstract blue patterns that resemble a corporate logo\n   - Style: style_crystal\"\n   ```\n\n2. Use the generated QR code as a bot avatar in a meeting:\n\n   ```\n   \"Join my Zoom meeting at https://zoom.us/j/123456789 with the following parameters:\n   - Bot name: QR Code Assistant\n   - Bot image: [URL from the generated QR code]\n   - Entry message: Hello everyone, I'm here to record the meeting. You can scan my avatar to get my contact information.\"\n   ```\n\n3. Generate a QR code with a meeting link for easy sharing:\n\n   ```\n   \"Generate a QR code with the following parameters:\n   - Type: url\n   - To: https://zoom.us/j/123456789\n   - Prompt: Create a colorful QR code with a calendar icon in the center\n   - Style: style_rounded\"\n   ```\n\n### Accessing Meeting Recordings\n\nMeeting recordings can be accessed directly through the Meeting BaaS viewer using the bot ID:\n\n```\nhttps://meetingbaas.com/viewer/{BOT_ID}\n```\n\nFor example:\n```\nhttps://meetingbaas.com/viewer/67738f48-2360-4f9e-a999-275a74208ff5\n```\n\nThis viewer provides:\n- The meeting video recording\n- Synchronized transcript with speaker identification\n- Navigation by speaker or topic\n- Direct link sharing with teammates\n\nWhen using the `createBot`, `getBots`, or search tools, you'll receive bot IDs that can be used to construct these viewer URLs for easy access to recordings.\n\n> **Important**: All meeting recordings and links are automatically shared with colleagues who have the same corporate email domain (e.g., @yourcompany.com). This allows your entire team to access recordings without requiring individual permissions, creating a collaborative environment where meeting knowledge is accessible to everyone in your organization.\n\n## Configuration\n\nThe server can be configured through environment variables or by editing the `src/config.ts` file.\n\nKey configuration options:\n\n- `PORT`: The port the server listens on (default: 7017)\n- `API_BASE_URL`: The base URL for the Meeting BaaS API\n- `DEFAULT_API_KEY`: Default API key for testing\n\n## Integration with Cursor\n\nTo integrate with Cursor:\n\n1. Open Cursor\n2. Go to Settings\n3. Navigate to \"Model Context Protocol\"\n4. Add a new server with:\n   - Name: \"Meeting BaaS MCP\"\n   - Type: \"sse\"\n   - Server URL: \"http://localhost:7017/mcp\"\n   - Optionally add headers if authentication is required\n\n## Development\n\n### Build\n\n```bash\nnpm run build\n```\n\n### Test with MCP Inspector\n\n```bash\nnpm run inspect\n```\n\n### Development mode (with auto-reload)\n\n```bash\nnpm run dev\n```\n\n### Log Management\n\nThe server includes optimized logging with:\n\n```bash\nnpm run cleanup\n```\n\nThis command:\n- Cleans up unnecessary log files and cached data\n- Filters out repetitive ping messages from logs\n- Reduces disk usage while preserving important log information\n- Maintains a smaller log footprint for long-running servers\n\n## Project Structure\n\n- `src/index.ts`: Main entry point\n- `src/tools/`: Tool implementations\n- `src/resources/`: Resource definitions\n- `src/api/`: API client for the Meeting BaaS backend\n- `src/types/`: TypeScript type definitions\n- `src/config.ts`: Server configuration\n- `src/utils/`: Utility functions\n  - `logging.ts`: Log filtering and management\n  - `tinyDb.ts`: Persistent bot tracking database\n\n## Authentication\n\nThe server expects an API key in the `x-api-key` header for authentication. You can configure the default API key in the configuration.\n\nDirect authentication is also supported in many tools (named with \"WithCredentials\") where you can provide the API key directly as a parameter rather than in headers.\n\n## License\n\n[MIT](LICENSE)\n\n## QR Code API Key Configuration\n\nThe QR code generator tool requires an API key from QR Code AI API. There are several ways to provide this:\n\n1. **Directly in the prompt**: Include your API key directly in the prompt text when using the `generateQRCode` tool, e.g., \"Generate a QR code for my website https://example.com with API key: qrc_your_key\"\n\n2. **As a parameter**: Provide your API key as the `apiKey` parameter when using the `generateQRCode` tool\n\n3. **Environment variable**: Set the `QRCODE_API_KEY` environment variable\n\n4. **Claude Desktop config**: Add the API key to your Claude Desktop configuration file located at:\n   - Mac/Linux: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n   Example configuration:\n   ```json\n   {\n     \"headers\": {\n       \"x-api-key\": \"qrc_your_key_here\" \n     }\n   }\n   ```\n\nThe tool will check for the API key in the order listed above. If no API key is provided, the default API key will be used if available.\n\nYou can obtain an API key by signing up at [QR Code AI API](https://qrcode-ai.com).\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "meeting",
        "calendars",
        "scheduling",
        "baas meeting",
        "calendars meeting",
        "manage meeting"
      ],
      "category": "scheduling-and-calendars"
    },
    "Omar-V2--mcp-ical": {
      "owner": "Omar-V2",
      "name": "mcp-ical",
      "url": "https://github.com/Omar-V2/mcp-ical",
      "imageUrl": "/freedevtools/mcp/pfp/Omar-V2.webp",
      "description": "Transform calendar management on macOS into a conversational experience using natural language to check schedules and manage events.",
      "stars": 183,
      "forks": 45,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T15:53:24Z",
      "readme_content": "# MCP iCal Server\n\n<div align=\"center\">\n\n🗓️ Natural Language Calendar Management for macOS\n\n[![MIT License](https://img.shields.io/badge/License-MIT-green.svg)](https://choosealicense.com/licenses/mit/)\n[![Python 3.12+](https://img.shields.io/badge/python-3.12+-blue.svg)](https://www.python.org/downloads/)\n[![MCP Compatible](https://img.shields.io/badge/MCP-Compatible-purple.svg)](https://modelcontextprotocol.io)\n\n</div>\n\n## 🌟 Overview\n\nTransform how you interact with your macOS calendar using natural language! The mcp-ical server leverages the Model Context Protocol (MCP) to turn your calendar management into a conversational experience.\n\n```bash\nYou: \"What's my schedule for next week?\"\nClaude: \"Let me check that for you...\"\n[Displays a clean overview of your upcoming week]\n\nYou: \"Add a lunch meeting with Sarah tomorrow at noon\"\nClaude: \"✨ 📅 Created: Lunch with Sarah Tomorrow, 12:00 PM\"\n```\n\n## ✨ Features\n\n### 📅 Event Creation\n\nTransform natural language into calendar events instantly!\n\n```text\n\"Schedule a team lunch next Thursday at 1 PM at Bistro Garden\"\n↓\n📎 Created: Team Lunch\n   📅 Thursday, 1:00 PM\n   📍 Bistro Garden\n```\n\n#### Supported Features\n\n- Custom calendar selection\n- Location and notes\n- Smart reminders\n- Recurring events\n\n#### Power User Examples\n\n```text\n🔄 Recurring Events:\n\"Set up my weekly team sync every Monday at 9 AM with a 15-minute reminder\"\n\n📝 Detailed Events:\n\"Schedule a product review meeting tomorrow from 2-4 PM in the Engineering calendar, \nadd notes about reviewing Q1 metrics, and remind me 1 hour before\"\n\n📱 Multi-Calendar Support:\n\"Add a dentist appointment to my Personal calendar for next Wednesday at 3 PM\"\n```\n\n### 🔍 Smart Schedule Management & Availability\n\nQuick access to your schedule with natural queries:\n\n```text\n\"What's on my calendar for next week?\"\n↓\n📊 Shows your upcoming events with smart formatting\n\n\"When am I free to schedule a 2-hour meeting next Tuesday?\"\n↓\n🕒 Available time slots found:\n   • Tuesday 10:00 AM - 12:00 PM\n   • Tuesday 2:00 PM - 4:00 PM\n```\n\n### ✏️ Intelligent Event Updates\n\nModify events naturally:\n\n```text\nBefore: \"Move tomorrow's team meeting to 3 PM instead\"\n↓\nAfter: ✨ Meeting rescheduled to 3:00 PM\n```\n\n#### Update Capabilities\n\n- Time and date modifications\n- Calendar transfers\n- Location updates\n- Note additions\n- Reminder adjustments\n- Recurring pattern changes\n\n### 📊 Calendar Management\n\n- View all available calendars\n- Smart calendar suggestions\n- Seamless Google Calendar integration when configured with iCloud\n\n> 💡 **Pro Tip**: Since you can create events in custom calendars, if you have your Google Calendar synced with your iCloud Calendar, you can use this MCP server to create events in your Google Calendar too! Just specify the Google calendar when creating/updating events.\n\n## 🚀 Quick Start\n\n> 💡 **Note**: While these instructions focus on setting up the MCP server with Claude for Desktop, this server can be used with any MCP-compatible client. For more details on using different clients, see [the MCP documentation](https://modelcontextprotocol.io/quickstart/client).\n\n### Prerequisites\n\n- [uv package manager](https://github.com/astral-sh/uv)\n- macOS with Calendar app configured\n- An MCP client - [Claude for desktop](https://claude.ai/download) is recommended\n\n### Installation\n\nWhilst this MCP server can be used with any MCP compatible client, the instructions below are for use with Claude for desktop.\n\n1. **Clone and Setup**\n\n    ```bash\n    # Clone the repository\n    git clone https://github.com/Omar-V2/mcp-ical.git\n    cd mcp-ical\n\n    # Install dependencies\n    uv sync\n    ```\n\n2. **Configure Claude for Desktop**\n\n    Create or edit `~/Library/Application\\ Support/Claude/claude_desktop_config.json`:\n\n    ```json\n    {\n        \"mcpServers\": {\n            \"mcp-ical\": {\n                \"command\": \"uv\",\n                \"args\": [\n                    \"--directory\",\n                    \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-ical\",\n                    \"run\",\n                    \"mcp-ical\"\n                ]\n            }\n        }\n    }\n    ```\n\n3. **Launch Claude for Calendar Access**\n\n    > ⚠️ **Critical**: Claude must be launched from the terminal to properly request calendar permissions. Launching directly from Finder will not trigger the permissions prompt.\n\n    Run the following command in your terminal.\n\n    ```bash\n    /Applications/Claude.app/Contents/MacOS/Claude\n    ```\n\n    > ⚠️ **Warning**: Alternatively, you can [manually grant calendar access](docs/install.md#method-2-manually-grant-calendar-access), but this involves modifying system files and should only be done if you understand the risks involved.\n\n4. **Start Using!**\n\n    ```text\n    Try: \"What's my schedule looking like for next week?\"\n    ```\n\n> 🔑 **Note**: When you first use a calendar-related command, macOS will prompt for calendar access. This prompt will only appear if you launched Claude from the terminal as specified above.\n\n## 🧪 Testing\n\n> ⚠️ **Warning**: Tests will create temporary calendars and events. While cleanup is automatic, only run tests in development environments.\n\n```bash\n# Install dev dependencies\nuv sync --dev\n\n# Run test suite\nuv run pytest tests\n```\n\n## 🐛 Known Issues\n\n### Recurring Events\n\n- Non-standard recurring schedules may not always be set correctly\n- Better results with Claude 3.5 Sonnet compared to Haiku\n- Reminder timing for recurring all-day events may be off by one day\n\n## 🤝 Contributing\n\nFeedback and contributions are welcome. Here's how you can help:\n\n1. Fork the repository\n2. Create your feature branch\n3. Commit your changes\n4. Push to the branch\n5. Open a Pull Request\n\n## 📝 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- Built with [Model Context Protocol](https://modelcontextprotocol.io)\n- macOS Calendar integration built with [PyObjC](https://github.com/ronaldoussoren/pyobjc)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calendars",
        "calendar",
        "schedules",
        "calendar management",
        "calendars omar",
        "scheduling calendars"
      ],
      "category": "scheduling-and-calendars"
    },
    "SecretiveShell--MCP-timeserver": {
      "owner": "SecretiveShell",
      "name": "MCP-timeserver",
      "url": "https://github.com/SecretiveShell/MCP-timeserver",
      "imageUrl": "/freedevtools/mcp/pfp/SecretiveShell.webp",
      "description": "Provides current date and time information across various timezones using a datetime URI scheme, and offers a tool for retrieving the local system time.",
      "stars": 38,
      "forks": 16,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T22:32:03Z",
      "readme_content": "# MCP-timeserver\n\nA simple MCP server that exposes datetime information to agentic systems and chat REPLs\n\n<a href=\"https://glama.ai/mcp/servers/tth5eto5n7\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/tth5eto5n7/badge\" alt=\"MCP-timeserver MCP server\" /></a>\n\n## Components\n\n### Resources\n\nThe server implements a simple datetime:// URI scheme for accessing the current date/time in a given timezone, for example:\n```\ndatetime://Africa/Freetown/now\ndatetime://Europe/London/now\ndatetime://America/New_York/now\n```\n\n### Tools\n\nThe server exposes a tool to get the current local time in the system timezone:\n```python\n>>> get_current_time()\n\"The current time is 2024-12-18 19:59:36\"\n```\n\n## Quickstart\n\n### Install\n\nuse the following json\n\n```json\n{\n  \"mcpServers\": {\n    \"MCP-timeserver\": {\n      \"command\": \"uvx\",\n      \"args\": [\"MCP-timeserver\"]\n    }\n  }\n}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "timeserver",
        "datetime",
        "timezones",
        "mcp timeserver",
        "timeserver provides",
        "datetime uri"
      ],
      "category": "scheduling-and-calendars"
    },
    "Soho-Spring--vue3-datapicker": {
      "owner": "Soho-Spring",
      "name": "vue3-datapicker",
      "url": "https://github.com/Soho-Spring/vue3-datapicker",
      "imageUrl": "/freedevtools/mcp/pfp/Soho-Spring.webp",
      "description": "A responsive date range picker for Vue.js that facilitates effortless selection of date ranges with features like customizable check-in/check-out rules and localization support. It displays the number of nights selected and offers a user-friendly interface.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Vue",
      "updated_at": "2023-09-30T01:17:54Z",
      "readme_content": "[![npm](https://img.shields.io/npm/dt/vue-hotel-datepicker.svg)](vue-hotel-datepicker)\n[![Build Status](https://travis-ci.org/krystalcampioni/vue-hotel-datepicker.svg?branch=main)](https://travis-ci.org/krystalcampioni/vue-hotel-datepicker)\n\nA responsive date range picker for Vue.js that displays the number of nights selected and allow several useful options like custom check-in/check-out rules, localization support and more.\n\n\n![demo gif](https://github.com/ZestfulNation/vue-hotel-datepicker/blob/main/demo.gif?raw=true)\n\n\n\n## Demo\n[https://ZestfulNation.github.io/vue-hotel-datepicker/](https://ZestfulNation.github.io/vue-hotel-datepicker/)\n\n## Installation\n\n#### NPM\n\n```bash\nnpm install vue-hotel-datepicker\n```\n\n#### PNPM\n\n```bash\npnpm install vue-hotel-datepicker\n```\n\n#### YARN\n\n```bash\nyarn add vue-hotel-datepicker\n```\n\n\n```javascript\nimport HotelDatePicker from 'vue-hotel-datepicker'\nimport 'vue-hotel-datepicker/dist/vueHotelDatepicker.css';\n\nexport default {\n  components: {\n    HotelDatePicker,\n  },\n}\n```\n\n```html\n<HotelDatePicker />\n```\n\n\n## Props/Options\n\n| Name | Type | Default | Description |\n|--|--|--|--|\n|**alwaysVisible**|`Boolean`|`false`|If true shows display calendar in the page without an input.\n|**bookings**|`Array`|`[]`|If you want to show bookings.\n|**closeDatepickerOnClickOutside**|`Boolean`|`true`|Closes the date picker when the user clicks outside the date picker.\n|**disableCheckoutOnCheckin**|`Boolean`|`false`|If set to true, disable checkout on the same date has checkin.\n|**disabledDates**|`Array`|`[]`|An array of strings in this format: `YYYY-MM-DD`. All the dates passed to the list will be disabled.\n|**disabledDaysOfWeek**|`Array`|`[]`| **DEPRECATED**: An array of strings in this format: `['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']`. All the days passed to the list will be disabled. It depends on the translated names.\n|**disabledWeekDays**|`Object`|`{}`| An object with the following properties: `sunday`, `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, the value indicates if that day is disabled (true) or enabled (false).\n|**displayClearButton**|`Boolean`|`true`|If set to true, displays a clear button on the right side of the input if there are dates set.\n|**enableCheckout**|`Boolean`|`false`|If `true`, allows the checkout on a disabled date.\n|**endDate**|`[Date, String, Number]`|`Infinity`|The end view date. All the dates after this date will be disabled.\n|**endingDateValue**|`Date`|`null`|The initial value of the end date.\n|**firstDayOfWeek**|`Number`|`0`|The first day of the week. Where Sun = 0, Mon = 1, ... Sat = 6. You need to set the right order in `i18n.day-names` too.\n|**format**|`String`|`'YYYY-MM-DD'`|The date format string.\n|**gridStyle**|`Boolean`|`true`|If false hides the grid around the days.\n|**halfDay**|`Boolean`|`true`|Allows to have half a day, if you have check in at noon and checkout before noon\n|**hoveringTooltip**|`[Boolean, Function]`|`true`|Shows a tooltip with the number of nights when hovering a date.\n|**i18n**|`Object`| see below | Holds the traslation of the date picker.\n|**lastDateAvailable**|`[Number, Date]`|`Infinity`|Allows to stop calendar pagination after the month of that date\n|**maxNights**|`Number`|`null`|Maximum nights required to select a range of dates. `0` or `null` for no limit.\n|**minNights**|`Number`|`1`|Minimum nights required to select a range of dates.\n|**periodDates**|`Array`| `[]` | If you want to have specific startAt and endAt period with different duration or price or type of period. See below for more information\n|**positionRight**|`Boolean`|`false`|If true shows the calendar on the **right** of the input.\n|**priceDecimals**|`Number`|`0`|The price decimals for weekly periods (see `periodDates`).\n|**priceSymbol**|`String`|`''`|The price symbol added before the price when `showPrice` is true and a `price` has been set in one of the `periodDates` array items (period).\n|**showPrice**|`Boolean`|`false`|If set to true, displays a price contains on your `periodDates`.\n|**showSingleMonth**|`Boolean`|`false`|If set to true, display one month only.\n|**showWeekNumbers**|`Boolean`|`false`|If set to true, displays the week numbers.\n|**showYear**|`Boolean`|`true`|Shows the year next to the month.\n|**singleDaySelection**|`Boolean`|`false`|When true only one day can be selected instead of a range.\n|**startDate**|`[Date, String]`|`new Date()`|The start view date. All the dates before this date will be disabled.\n|**startingDateValue**|`Date`|`null`|The initial value of the start date.\n|**tooltipMessage**|`String`|`null`|If provided, it will override the default tooltip \"X nights\" with the text provided. You can use HTML in the string.\n|**value**|`Boolean`|`false`| The v-model prop, controls the visibility of the date picker.\n|**yearBeforeMonth**|`Boolean`|`false`| Show the year before the month, only when showYear is true.\n\n## i18n Defaults:\n\n```js\ni18n: {\n  \"night\": \"Night\",\n  \"nights\": \"Nights\",\n  \"week\": \"week\",\n  \"weeks\": \"weeks\",\n  \"day-names\": [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\", \"Sat\"],\n  \"check-in\": \"Check-in\",\n  \"check-out\": \"Check-out\",\n  \"month-names\": [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n  ],\n  \"tooltip\": {\n      \"halfDayCheckIn\": \"Available CheckIn\",\n      \"halfDayCheckOut\": \"Available CheckOut\",\n      \"saturdayToSaturday\": \"Only Saturday to Saturday\",\n      \"sundayToSunday\": \"Only Sunday to Sunday\",\n      \"minimumRequiredPeriod\": \"%{minNightInPeriod} %{night} minimum.\",\n  },\n}\n```\n\n## periodDates\n- Type: `Array`\n- Default: `[]`\nIf you want to have specific startAt and endAt period with different duration or price or type of period-\n\nKey                                  | Type       | Description\n-------------------------------------|------------|-------------------------\n  endAt                              | String     | YYYY-MM-DD\n  startAt                            | String     | YYYY-MM-DD\n  minimumDuration                    | Number     | Minimum stay (Type: weekly => per_week \\| Type: nightly => per night)\n  periodType                         | String     | *nightly*, *weekly_by_saturday*, *weekly_by_sunday*\n  price                              | Float      | Price displayed on each day for this period\n\n\n**Example:**\n```js\nperiodDates: [\n  {\n    startAt: \"2020-06-09\",\n    endAt: \"2020-07-26\",\n    minimumDuration: 4,\n    periodType: \"nightly\"\n  },\n  {\n    startAt: \"2020-07-26\",\n    endAt: \"2020-09-30\",\n    minimumDuration: 1,\n    periodType: \"weekly_by_saturday\"\n  },\n  {\n    startAt: \"2020-09-30\",\n    endAt: \"2020-11-30\",\n    minimumDuration: 2,\n    periodType: \"weekly_by_sunday\",\n    price: 4000.0\n  }\n],\n```\n\n#### `MinimumDuration` with a periodType `weekly-~` equals to a week\n\n## bookings\nIf you want to show bookings\n- Type: `Array`\n- Default: `[]`\n\nKey              | Type        | Description\n-----------------|-------------|-------------------------\n  `checkInDate`  | `String`    | `'YYYY-MM-DD'`\n  `checkOutDate` | `String`    | `'YYYY-MM-DD'`\n  `style`        | `Object`    | Style, (see the example)\n\n**Example:**\n```js\nbookings: [\n  {\n    event: true,\n    checkInDate: \"2020-08-26\",\n    checkOutDate: \"2020-08-29\",\n    style: {\n      backgroundColor: \"#399694\"\n    }\n  },\n  {\n    event: false,\n    checkInDate: \"2020-07-01\",\n    checkOutDate: \"2020-07-08\",\n    style: {\n      backgroundColor: \"#9DC1C9\"\n    }\n  }\n],\n```\n\n\n## Methods\n⚠️ In order to open/close the datepicker from an external element, such as a button make sure to set `closeDatepickerOnClickOutside` to `false`\n\n| Name | Description |\n|--|--|\n|`hideDatepicker`  | Hides the datepicker\n|`showDatepicker`  | Shows the datepicker\n|`toggleDatepicker`| Toggles (shows or hides) the datepicker\n\n## Events\n\n| Name | Params enum | Description |\n|--|--|--|\n|`booking-clicked`|`MouseEvent`, `Date`, `Object`|Emitted every time a booking is clicked. The first param is the mouse javascript event, the second is the clicked Date and the third is the clicked booking.\n|`check-in-changed`|  | Emitted every time a new check in date is selected with the new date as payload.\n|`check-out-changed`|  | Emitted every time a new check out date is selected with the new date as payload.\n|`clear-selection`|  | Emitted every time you clicked on clear Date button.\n|`day-clicked`| `Date`, `String`, `Date\\|Number\\|String`  | Emitted every time when day is clicked. The params are clicked: date, format and next disabled date.\n|<span style=\"white-space: pre;\">`handle-checkin-checkout-half-day`</span>| `Object` | Emitted on [`beforeMount`, `clear-selection`, `checkout`]. Param: Object of checkin-checkout date.\n|`next-month-rendered`|  | Emitted every time the next month is rendered.\n|`period-selected`| `Event`, `Date`, `Date`  | Emitted every time when a checkOut is clicked. Params: Mouse Event, checkIn, checkOut\n\n### `booking-clicked` examples\n```js\n{\n  checkInDate: \"YYYY-MM-DD\",\n  checkOutDate: \"YYYY-MM-DD\",\n  style: {\n    backgroundColor: \"#399694\",\n  }\n}\n```\n\n## Credits\nThis component was originally built as a Vue wrapper component for the [Hotel Datepicker](https://github.com/benitolopez/hotel-datepicker) by @benitolopez. Version 2.0.0 was completely rewritten with Vue, removing the original library, removing some features and introducing others.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calendars",
        "vue3",
        "vue",
        "vue3 datapicker",
        "picker vue",
        "calendars soho"
      ],
      "category": "scheduling-and-calendars"
    },
    "ZeparHyfar--mcp-datetime": {
      "owner": "ZeparHyfar",
      "name": "mcp-datetime",
      "url": "https://github.com/ZeparHyfar/mcp-datetime",
      "imageUrl": "/freedevtools/mcp/pfp/ZeparHyfar.webp",
      "description": "Generates datetime strings in various formats suitable for integration with applications. It is optimized for use with the Claude Desktop Application.",
      "stars": 22,
      "forks": 12,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-23T08:27:36Z",
      "readme_content": "# mcp-datetime\n\n[![Python Version](https://img.shields.io/badge/python-3.12-blue.svg)](https://www.python.org/downloads/)\n[![MCP Version](https://img.shields.io/badge/mcp-1.1.1-green.svg)](https://github.com/anaisbetts/mcp)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n\nEnglish | [日本語](README_ja.md)\n\nA datetime formatting service implemented as an MCP server for the Claude Desktop Application. Supports generation of datetime strings in various formats.\n\n> **Note**: This package has been tested only on macOS. Windows compatibility has not been verified.\n\n## Prerequisites\n\nBefore using mcp-datetime, ensure you have the following tools installed:\n\n- Python 3.12 or later\n- uv (Python package installer)\n- uvx (Python package runner)\n\n## Features\n\n- ✨ Support for various datetime formats\n- 🇯🇵 Japanese language support\n- 📁 Optimized formats for filename generation\n- 🌏 Accurate timezone handling\n- 🔧 Seamless integration with Claude Desktop App\n\n## MCP Server Components\n\n### Tools\n\nThe server implements one tool:\n\n- `get_datetime`: Get current date and time in various formats\n  - Takes \"format\" as a required string argument\n  - Returns formatted datetime string based on specified format\n  - Supports multiple format types including standard, Japanese, and ISO formats\n\n## Usage with Claude Desktop App\n\nAdd the following to your config file:\n\nConfig file location (macOS):\n`~/Library/Application Support/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-datetime\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-datetime\"]\n    }\n  }\n}\n```\n\n## About Installation\n\nIf you need to install the package directly (e.g., for development or source code inspection), you can use one of these methods:\n\n- Install from PyPI\n\n  ```bash\n  pip install mcp-datetime\n  ```\n\n- Install from GitHub Source\n\n  ```bash\n  git clone https://github.com/ZeparHyfar/mcp-datetime.git\n  cd mcp-datetime\n  pip install -e .\n  ```\n\n- Example `claude_desktop_config.json` for manual installation\n\n  ```json\n  {\n    \"mcpServers\": {\n      \"mcp-datetime\": {\n        \"command\": \"python\",\n        \"args\": [\"-m\", \"mcp_datetime\"],\n        \"env\": {\n          \"PYTHON\": \"/path/to/your/python\"\n        }\n      }\n    }\n  }\n  ```\n\n  Replace \"/path/to/your/python\" with your actual Python interpreter path\n  > e.g., \"/usr/local/bin/python3\" or \"/Users/username/.pyenv/versions/3.12.0/bin/python3\"\n\n## Basic Examples\n\n- Command format\n\n  ```\n  # Standard datetime format\n  call datetime-service.get_datetime {\"format\": \"datetime\"}\n  # Result: 2024-12-10 00:54:01\n\n  # Japanese format\n  call datetime-service.get_datetime {\"format\": \"datetime_jp\"}\n  # Result: 2024年12月10日 00時54分01秒\n\n  # Filename format\n  call datetime-service.get_datetime {\"format\": \"filename_md\"}\n  # Result: 20241210005401.md\n  ```\n\n- Claude Desktop App prompt examples\n\n  - User\n\n    ```\n    Please tell me the current time in date_slash format\n    ```\n\n  - Claude\n\n    ```\n    I'll get the current date in date_slash format.\n\n    The current date is 2024/12/12\n    ```\n\n## Supported Formats\n\n| Format Name  | Example                     | Description                  |\n| ------------ | --------------------------- | ---------------------------- |\n| date         | 2024-12-10                  | Standard date format         |\n| date_slash   | 2024/12/10                  | Date with slashes            |\n| date_jp      | 2024年12月10日              | Japanese date format         |\n| datetime     | 2024-12-10 00:54:01         | Standard datetime            |\n| datetime_jp  | 2024年12月10日 00時54分01秒 | Japanese datetime            |\n| datetime_t   | 2024-12-10T00:54:01         | DateTime with T separator    |\n| compact      | 20241210005401              | Compact format for IDs       |\n| compact_date | 20241210                    | Compact date only            |\n| compact_time | 005401                      | Compact time only            |\n| filename_md  | 20241210005401.md           | Markdown filename            |\n| filename_txt | 20241210005401.txt          | Text filename                |\n| filename_log | 20241210005401.log          | Log filename                 |\n| iso          | 2024-12-10T00:54:01+0900    | ISO 8601 format              |\n| iso_basic    | 20241210T005401+0900        | Basic ISO format             |\n| log          | 2024-12-10 00:54:01.123456  | Log format with microseconds |\n| log_compact  | 20241210_005401             | Compact log format           |\n| time         | 00:54:01                    | Time only                    |\n| time_jp      | 00時54分01秒                | Japanese time format         |\n\n## Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector):\n\n- Using PyPI package\n\n  ```\n  npx @modelcontextprotocol/inspector uvx mcp-datetime\n  ```\n\n- Using downloaded source code from GitHub\n\n  ```\n  git clone https://github.com/ZeparHyfar/mcp-datetime.git\n  npx @modelcontextprotocol/inspector uvx --directory ./mcp-datetime run mcp-datetime\n  ```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "datetime",
        "calendars",
        "scheduling",
        "mcp datetime",
        "datetime strings",
        "generates datetime"
      ],
      "category": "scheduling-and-calendars"
    },
    "am2rican5--mcp-google-calendar": {
      "owner": "am2rican5",
      "name": "mcp-google-calendar",
      "url": "https://github.com/am2rican5/mcp-google-calendar",
      "imageUrl": "/freedevtools/mcp/pfp/am2rican5.webp",
      "description": "Integrate with Google Calendar to manage events such as creation, reading, updating, and deletion. Authenticate using OAuth 2.0 and receive real-time updates via Server-Sent Events.",
      "stars": 12,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T17:19:01Z",
      "readme_content": "# Google Calendar MCP Server\n\nA Model Context Protocol (MCP) server that integrates with Google Calendar, built with TypeScript.\n\n## Features\n\n- Seamless Google Calendar integration with OAuth 2.0 authentication\n- Persistent token storage for automatic authentication\n- List and manage calendars with comprehensive event operations\n- Create, read, update, and delete calendar events\n- Fetch calendar events between specified dates\n- Server-Sent Events (SSE) transport option for real-time updates\n- Simple integration with Claude and other MCP-compatible AI assistants\n\n## Installation\n\n```bash\nnpm install -g mcp-google-calendar\n```\n\nOr run directly with:\n\n```bash\nnpx -y mcp-google-calendar\n```\n\n## Prerequisites\n\n1. Node.js (v16 or higher)\n2. Google Cloud Platform account\n3. Google Calendar API enabled\n4. OAuth 2.0 credentials\n\n## Setup\n\n### 1. Google Cloud Configuration\n\n1. Go to [Google Cloud Console](https://console.cloud.google.com/)\n2. Create a new project or select an existing one\n3. Enable the Google Calendar API:\n   - Navigate to \"APIs & Services\" > \"Library\"\n   - Search for \"Google Calendar API\"\n   - Click \"Enable\"\n4. Configure OAuth consent screen:\n   - Go to \"APIs & Services\" > \"OAuth consent screen\"\n   - Choose \"External\" user type (or \"Internal\" for Google Workspace)\n   - Fill in required information:\n     - App name: mcp-calendar\n     - User support email: (your email)\n     - Developer contact information: (your email)\n   - Add scopes:\n     - Click \"Add or Remove Scopes\"\n     - Find and select \"https://www.googleapis.com/auth/calendar.events\"\n     - Add your email as a test user\n   - Complete the setup\n5. Create OAuth credentials:\n   - Go to \"Credentials\"\n   - Click \"Create Credentials\" > \"OAuth Client ID\"\n   - Choose \"Desktop app\" as application type\n   - Name it (e.g., \"MCP Calendar Desktop Client\")\n   - Download the JSON file and save as `credentials.json` in your project directory\n\n### 2. Environment Configuration\n\nCreate a `.env` file in your project root:\n\n```\n# Server configuration\nPORT=3420\n\n# Google Calendar API configuration\nCREDENTIALS_PATH=./credentials.json\n```\n\n## Usage\n\n### Starting the Server\n\nStart with standard WebSockets:\n```bash\nnpx -y mcp-google-calendar\n```\n\nStart with Server-Sent Events (SSE):\n```bash\nnpx -y mcp-google-calendar --sse\n```\n\n### With Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n```json\n{\n   \"mcpServers\": {\n      \"mcp-google-calendar\": {\n         \"command\": \"npx\",\n         \"args\": [\"-y\", \"mcp-google-calendar\"],\n         \"env\": {\n            \"CREDENTIALS_PATH\": \"/path/to/your/credentials.json\"\n         }\n      }\n   }\n}\n```\n\n### Authentication Process\n\nThe first time you run the server:\n1. A browser window will open automatically\n2. Sign in with your Google account\n3. Grant the requested calendar permissions\n4. The authentication token is saved to `token.json`\n\nOn subsequent launches:\n- The server uses the saved token automatically\n- No browser interaction is required unless the token expires\n\n## Available Tools\n\n| Tool | Description |\n|------|-------------|\n| `list_calendars` | Get all available calendars |\n| `list_calendar_events` | Retrieve events between specified dates |\n| `create_calendar_event` | Add a new event to your calendar |\n| `get_calendar_event` | Fetch details for a specific event |\n| `edit_calendar_event` | Modify an existing calendar event |\n| `delete_calendar_event` | Remove an event from your calendar |\n\n## Development\n\nClone and set up the project:\n```bash\ngit clone https://github.com/am2rican5/mcp-google-calendar.git\ncd mcp-google-calendar\nnpm install\n```\n\nBuild the project:\n```bash\nnpm run build\n```\n\nRun in development mode:\n```bash\nnpm start\n```\n\n## Security Considerations\n\n⚠️ **Important Security Warning** ⚠️\n\n- `credentials.json` and `token.json` contain sensitive authentication information\n- Never commit these files to version control or share them publicly\n- Each user should create their own OAuth credentials\n- If you suspect credential compromise, revoke them immediately in Google Cloud Console\n- The token grants access to your Google Calendar data\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calendars",
        "calendar",
        "scheduling",
        "calendars am2rican5",
        "google calendar",
        "scheduling calendars"
      ],
      "category": "scheduling-and-calendars"
    },
    "anoopt--outlook-meetings-scheduler-mcp-server": {
      "owner": "anoopt",
      "name": "outlook-meetings-scheduler-mcp-server",
      "url": "https://github.com/anoopt/outlook-meetings-scheduler-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/anoopt.webp",
      "description": "Schedule and manage Microsoft Outlook calendar events using Microsoft Graph API. Create, update, list, and delete meetings, as well as find attendees and integrate with other MCP servers.",
      "stars": 12,
      "forks": 6,
      "license": "ISC License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T17:04:15Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/anoopt-outlook-meetings-scheduler-mcp-server-badge.png)](https://mseep.ai/app/anoopt-outlook-meetings-scheduler-mcp-server)\n\n# Outlook Meetings Scheduler MCP Server\n\nMCP Server for scheduling meetings in Microsoft Outlook using Microsoft Graph API.\n\nThis MCP server allows you to create calendar events, create events with attendees (including finding their email addresses).\nIt integrates seamlessly with other MCP servers, such as the GitHub MCP server, to enhance your workflow.\n\n<a href=\"https://glama.ai/mcp/servers/@anoopt/outlook-meetings-scheduler-mcp-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@anoopt/outlook-meetings-scheduler-mcp-server/badge\" alt=\"Outlook Meetings Scheduler Server MCP server\" />\n</a>\n\n## Sample queries\n\n- Schedule a meeting with Sarah for tomorrow at 3 PM.\n- Create a meeting called \"Project Kickoff\" for tomorrow at 2 PM. Add Megan and John as required attendees.\n\n### Usage with GitHub MCP Server\n- Create an issue in the organization/repo repository titled \"Fix pagination bug in user dashboard\" with the description \"Users report seeing duplicate entries when navigating between pages.\" Then schedule a calendar reminder for me to review this issue tomorrow at 3 PM.\n\n## Demo\n![Demo](./assets/demo.gif)\n\n## Tools\n\n1. `find-person`\n   - Find a person's email address by their name\n   - Input: `name` (string)\n   - Returns: List of matching people with names and email addresses\n\n2. `create-event`\n   - Create a calendar event using Microsoft Graph API\n   - Inputs:\n     - `subject` (string): Subject of the calendar event\n     - `body` (string): Content/body of the calendar event\n     - `start` (optional): ISO format datetime (e.g., 2025-04-20T12:00:00)\n     - `end` (optional): ISO format datetime (e.g., 2025-04-20T13:00:00)\n     - `timeZone` (optional): Time zone for the event (default: \"GMT Standard Time\")\n   - Returns: Event details including URL and ID\n\n3. `create-event-with-attendees`\n   - Create a calendar event with attendees using Microsoft Graph API\n   - Inputs:\n     - `subject` (string): Subject of the calendar event\n     - `body` (string): Content/body of the calendar event\n     - `start` (optional): ISO format datetime (e.g., 2025-04-20T12:00:00)\n     - `end` (optional): ISO format datetime (e.g., 2025-04-20T13:00:00)\n     - `timeZone` (optional): Time zone for the event (default: \"GMT Standard Time\")\n     - `location` (optional): Location of the event\n     - `attendees`: Array of { email, name (optional), type (optional) }\n   - Returns: Event details including URL, ID, and attendees list\n\n4. `get-event`\n   - Get details of a calendar event by its ID\n   - Input:\n     - `eventId` (string): ID of the event to retrieve\n   - Returns: Detailed event information including subject, time, attendees, and URL\n\n5. `list-events`\n   - List calendar events with optional filtering\n   - Inputs:\n     - `subject` (optional): Filter events by subject containing this text\n     - `startDate` (optional): Start date in ISO format (e.g., 2025-04-20T00:00:00) to filter events from\n     - `endDate` (optional): End date in ISO format (e.g., 2025-04-20T23:59:59) to filter events until\n     - `maxResults` (optional): Maximum number of events to return\n   - Returns: List of calendar events with basic information and IDs\n\n6. `delete-event`\n   - Delete a calendar event\n   - Input:\n     - `eventId` (string): ID of the event to delete\n   - Returns: Confirmation of event deletion\n\n7. `update-event`\n   - Update an existing calendar event\n   - Inputs:\n     - `eventId` (string): ID of the event to update\n     - `subject` (optional): New subject for the calendar event\n     - `body` (optional): New content/body for the calendar event\n     - `start` (optional): New start time in ISO format (e.g., 2025-04-20T12:00:00)\n     - `end` (optional): New end time in ISO format (e.g., 2025-04-20T13:00:00)\n     - `timeZone` (optional): New time zone for the event\n     - `location` (optional): New location for the event\n     - `attendees` (optional): Array of { email, name (optional), type (optional) }\n   - Returns: Updated event details showing changes\n\n8. `update-event-attendees`\n   - Add or remove attendees from a calendar event\n   - Inputs:\n     - `eventId` (string): ID of the event to update\n     - `addAttendees` (optional): Array of attendees to add: { email, name (optional), type (optional) }\n     - `removeAttendees` (optional): Array of email addresses to remove from the event\n   - Returns: Updated event attendee information\n\n## Setup\n\n### Authentication Modes\n\nThis MCP server supports three authentication modes:\n\n#### 1. Interactive (Delegated)\nThank you [Lokka](https://lokka.dev/)\n\nBest for: User-impersonation scenarios, accessing user-specific data\n- Prompts user to login interactively\n- Uses delegated permissions\n- Authenticates as the signed-in user\n\n#### 2. Client Credentials (App-Only)\nBest for: Server-to-server scenarios, automated processes\n- Uses Azure AD application credentials\n- Requires Application permissions\n- Works without user interaction\n\n#### 3. Client Provided Token\nBest for: Custom token management, pre-acquired tokens\n- Uses a token provided by the client\n- Requires managing token refresh externally\n\n### Microsoft Graph API Setup\n\n#### For Interactive (Delegated) Mode\n1. Register an application in the [Microsoft Azure Portal](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade) (or use an existing app)\n2. Add a redirect URI: `http://localhost` (Mobile and desktop applications platform)\n3. **Enable public client flows**: Go to Authentication > Advanced settings > \"Allow public client flows\" = **YES**\n4. Grant necessary **Delegated permissions**: Microsoft Graph API > Delegated permissions > Calendars.ReadWrite, People.Read, User.Read\n5. Note your Client ID and Tenant ID (Client Secret not needed for interactive mode with custom app)\n\n> **Note:** The server uses a built-in multi-tenant app by default, so custom app setup is optional. When authentication is needed, the device code and login URL will appear directly in your MCP client chat interface.\n\n#### For Client Credentials (App-Only) Mode\n1. Register an application in the [Microsoft Azure Portal](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade)\n2. Create a client secret\n3. Grant necessary **Application permissions**: Microsoft Graph API > Application permissions > Calendars.ReadWrite, People.Read.All, User.ReadBasic.All\n4. Grant admin consent for your organization\n5. Note your Client ID, Client Secret, and Tenant ID\n\n### Usage with VS Code\n\n#### Authentication Mode Configuration\n\nThe MCP server supports different authentication modes via the `AUTH_MODE` environment variable:\n- `interactive` (default) - User authentication with browser or device code flow  \n- `client_credentials` - App-only authentication with client secret\n- `client_provided_token` - Use a pre-acquired token\n\n**Backward Compatibility**: If `AUTH_MODE` is not specified, the server automatically detects the mode:\n- Presence of `CLIENT_SECRET` → `client_credentials` mode\n- Presence of `ACCESS_TOKEN` → `client_provided_token` mode  \n- Neither present → `interactive` mode (default)\n\n#### Local Node.js\n\nYou can run the MCP server directly with Node.js from your local build:\n\n1. Clone the repository and build the project:\n```bash\ngit clone https://github.com/anoopt/outlook-meetings-scheduler-mcp-server.git\ncd outlook-meetings-scheduler-mcp-server\nnpm install\nnpm run build\n```\n\n2. For manual installation, add the following JSON block to your User Settings (JSON) file in VS Code. You can do this by pressing `Ctrl + Shift + P` and typing Preferences: `Open User Settings (JSON)`.\n\nOptionally, you can add it to a file called `.vscode/mcp.json` in your workspace. This will allow you to share the configuration with others:\n\n**Interactive Mode (Default - Zero Configuration):**\n```json\n{\n  \"mcpServers\": {\n    \"outlook-meetings-scheduler\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/outlook-meetings-scheduler-mcp-server/build/index.js\"\n      ]\n    }\n  }\n}\n```\n\n**Interactive Mode with Custom App:**\n```json\n{\n  \"mcpServers\": {\n    \"outlook-meetings-scheduler\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/outlook-meetings-scheduler-mcp-server/build/index.js\"\n      ],\n      \"env\": {\n        \"AUTH_MODE\": \"interactive\",\n        \"CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"TENANT_ID\": \"<YOUR_TENANT_ID>\"\n      }\n    }\n  }\n}\n```\n\n**Client Credentials Mode:**\n```json\n{\n  \"mcpServers\": {\n    \"outlook-meetings-scheduler\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/outlook-meetings-scheduler-mcp-server/build/index.js\"\n      ],\n      \"env\": {\n        \"AUTH_MODE\": \"client_credentials\",\n        \"CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"CLIENT_SECRET\": \"<YOUR_CLIENT_SECRET>\",\n        \"TENANT_ID\": \"<YOUR_TENANT_ID>\",\n        \"USER_EMAIL\": \"<YOUR_EMAIL>\"\n      }\n    }\n  }\n}\n```\n\n**Client Provided Token Mode:**\n```json\n{\n  \"mcpServers\": {\n    \"outlook-meetings-scheduler\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/outlook-meetings-scheduler-mcp-server/build/index.js\"\n      ],\n      \"env\": {\n        \"AUTH_MODE\": \"client_provided_token\",\n        \"ACCESS_TOKEN\": \"<YOUR_ACCESS_TOKEN>\",\n        \"TOKEN_EXPIRES_ON\": \"2025-10-03T12:00:00Z\",\n        \"USER_EMAIL\": \"<YOUR_EMAIL>\"\n      }\n    }\n  }\n}\n```\n\n> **Note:** \n> - Uses a built-in multi-tenant Azure AD app (works for any organization)\n> - USER_EMAIL is automatically determined from the signed-in user\n> - Users will see a one-time consent prompt (no admin approval needed)\n> - Zero configuration required - works out of the box\n\n**Interactive Mode with Custom App:**\n```json\n{\n  \"mcpServers\": {\n    \"outlook-meetings-scheduler\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/outlook-meetings-scheduler-mcp-server/build/index.js\"\n      ],\n      \"env\": {\n        \"AUTH_MODE\": \"interactive\",\n        \"CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"TENANT_ID\": \"<YOUR_TENANT_ID>\"\n      }\n    }\n  }\n}\n```\n\n> Use a custom app if you need specific branding or tenant restrictions.\n\nReplace `/path/to/outlook-meetings-scheduler-mcp-server` with the absolute path to your cloned repository.\n\n#### Docker\n\nRun the MCP server using Docker locally. Build the Docker image with the following command: \n\n``` bash\ndocker build -t mcp/outlook-meetings-scheduler .\n```\n\nFor manual installation, add the following JSON block to your User Settings (JSON) file in VS Code. You can do this by pressing `Ctrl + Shift + P` and typing Preferences: `Open User Settings (JSON)`.\n\nOptionally, you can add it to a file called `.vscode/mcp.json` in your workspace. This will allow you to share the configuration with others.\n\n```json\n{\n     \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"client_secret\",\n        \"description\": \"Enter the client secret\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n        \"outlook-meetings-scheduler\": {\n            \"command\": \"docker\",\n            \"args\": [\n                \"run\",\n                \"-i\",\n                \"--rm\",\n                \"-e\",\n                \"CLIENT_ID\",\n                \"-e\",\n                \"CLIENT_SECRET\",\n                \"-e\",\n                \"TENANT_ID\",\n                \"-e\",\n                \"USER_EMAIL\",\n                \"mcp/outlook-meetings-scheduler\"\n            ],\n            \"env\": {\n                \"USER_EMAIL\": \"<YOUR_EMAIL>\",\n                \"CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n                \"CLIENT_SECRET\": \"${input:client_secret}\",\n                \"TENANT_ID\": \"<YOUR_TENANT_ID>\"\n            }\n        }\n    }\n}\n```\n\n#### NPX\n\n**Interactive Mode (Default - Zero Configuration):**\n```json\n{\n  \"mcpServers\": {\n    \"outlook-meetings-scheduler\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"outlook-meetings-scheduler\"\n      ]\n    }\n  }\n}\n```\n\n**Interactive Mode with Custom App:**\n```json\n{\n  \"mcpServers\": {\n    \"outlook-meetings-scheduler\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"outlook-meetings-scheduler\"\n      ],\n      \"env\": {\n        \"AUTH_MODE\": \"interactive\",\n        \"CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"TENANT_ID\": \"<YOUR_TENANT_ID>\"\n      }\n    }\n  }\n}\n```\n\n**Client Credentials Mode:**\n```json\n{\n  \"mcpServers\": {\n    \"outlook-meetings-scheduler\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"outlook-meetings-scheduler\"\n      ],\n      \"env\": {\n        \"AUTH_MODE\": \"client_credentials\",\n        \"CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"CLIENT_SECRET\": \"<YOUR_CLIENT_SECRET>\",\n        \"TENANT_ID\": \"<YOUR_TENANT_ID>\",\n        \"USER_EMAIL\": \"<YOUR_EMAIL>\"\n      }\n    }\n  }\n}\n```\n\n**Client Provided Token Mode:**\n```json\n{\n  \"mcpServers\": {\n    \"outlook-meetings-scheduler\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"outlook-meetings-scheduler\"\n      ],\n      \"env\": {\n        \"AUTH_MODE\": \"client_provided_token\",\n        \"ACCESS_TOKEN\": \"<YOUR_ACCESS_TOKEN>\",\n        \"TOKEN_EXPIRES_ON\": \"2025-10-03T12:00:00Z\",\n        \"USER_EMAIL\": \"<YOUR_EMAIL>\"\n      }\n    }\n  }\n}\n```\n\n### Usage with Claude Desktop\n\n#### Docker\n\n1. Run the MCP server using Docker locally. Build the Docker image with the following command: \n\n``` bash\ndocker build -t mcp/outlook-meetings-scheduler .\n```\n\n2. Add the following to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"outlook-meetings-scheduler\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"CLIENT_ID\",\n        \"-e\",\n        \"CLIENT_SECRET\",\n        \"-e\",\n        \"TENANT_ID\",\n        \"-e\",\n        \"USER_EMAIL\",\n        \"mcp/outlook-meetings-scheduler\"\n      ],\n      \"env\": {\n        \"CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"CLIENT_SECRET\": \"<YOUR_CLIENT_SECRET>\",\n        \"TENANT_ID\": \"<YOUR_TENANT_ID>\",\n        \"USER_EMAIL\": \"<YOUR_EMAIL>\"\n      }\n    }\n  }\n}\n```\n\n#### NPX\n\n**Interactive Mode (Default - Zero Configuration):**\n```json\n{\n  \"mcpServers\": {\n    \"outlook-meetings-scheduler\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"outlook-meetings-scheduler\"\n      ]\n    }\n  }\n}\n```\n\n**Interactive Mode with Custom App:**\n```json\n{\n  \"mcpServers\": {\n    \"outlook-meetings-scheduler\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"outlook-meetings-scheduler\"\n      ],\n      \"env\": {\n        \"AUTH_MODE\": \"interactive\",\n        \"CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"TENANT_ID\": \"<YOUR_TENANT_ID>\"\n      }\n    }\n  }\n}\n```\n\n**Client Credentials Mode:**\n```json\n{\n  \"mcpServers\": {\n    \"outlook-meetings-scheduler\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"outlook-meetings-scheduler\"\n      ],\n      \"env\": {\n        \"AUTH_MODE\": \"client_credentials\",\n        \"CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"CLIENT_SECRET\": \"<YOUR_CLIENT_SECRET>\",\n        \"TENANT_ID\": \"<YOUR_TENANT_ID>\",\n        \"USER_EMAIL\": \"<YOUR_EMAIL>\"\n      }\n    }\n  }\n}\n```\n\n**Client Provided Token Mode:**\n```json\n{\n  \"mcpServers\": {\n    \"outlook-meetings-scheduler\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"outlook-meetings-scheduler\"\n      ],\n      \"env\": {\n        \"AUTH_MODE\": \"client_provided_token\",\n        \"ACCESS_TOKEN\": \"<YOUR_ACCESS_TOKEN>\",\n        \"TOKEN_EXPIRES_ON\": \"2025-10-03T12:00:00Z\",\n        \"USER_EMAIL\": \"<YOUR_EMAIL>\"\n      }\n    }\n  }\n}\n```\n\n## Example Scenarios\n\n### Integration with GitHub MCP Server\n\nYou can combine this MCP server with other MCP servers like the GitHub MCP server for powerful workflows.\n\n#### Create an Issue and Schedule a Follow-up Review\n```\nCreate an issue in the organization/repo repository titled \"Fix pagination bug in user dashboard\" with the description \"Users report seeing duplicate entries when navigating between pages.\" Then schedule a calendar reminder for me to review this issue tomorrow at 3 PM.\n```\n\nThis will:\n1. Use the GitHub MCP server to create the issue\n2. Use the Outlook Meetings Scheduler MCP server to create a calendar event for the review\n\n#### Schedule a Code Review Meeting Based on a Pull Request\n```\nFind the open PR about the authentication feature in the organization/app-backend repository and schedule a code review meeting with the contributors for tomorrow morning.\n```\n\nThis will:\n1. Use GitHub MCP server to find the pull request and identify contributors\n2. Use the Outlook Meetings Scheduler MCP server to schedule a meeting with those team members\n\n## Configuration for Multi-MCP Setup\n\nTo use both GitHub and Outlook MCP servers together :\n\n```json\n{\n  \"mcpServers\": {\n    \"outlook-meetings-scheduler\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"outlook-meetings-scheduler\"\n      ],\n      \"env\": {\n        \"CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"CLIENT_SECRET\": \"<YOUR_CLIENT_SECRET>\",\n        \"TENANT_ID\": \"<YOUR_TENANT_ID>\",\n        \"USER_EMAIL\": \"<YOUR_EMAIL>\"\n      }\n    },\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/github-mcp\"\n      ],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"<YOUR_GITHUB_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n### Direct Usage\n\n#### Finding a Colleague's Email\n```\nI need to schedule a meeting with John Smith. Can you find his email address?\n```\n\n#### Creating a Simple Calendar Event\n```\nSchedule a meeting titled \"Weekly Team Sync\" for next Monday at 10 AM with the following agenda:\n- Project updates\n- Resource allocation\n- Questions and concerns\n```\n\n#### Scheduling a Meeting with Single Attendee\n```\nSchedule a 1:1 meeting with Sarah for tomorrow at 3 PM.\n```\nThis will find Sarah's email address and create a calendar event.\nTo find Sarah's email address, the MCP server will use the `find-person` tool - which uses the Microsoft Graph API to find relevant people for `USER_EMAIL` or searches for the name in the organization.\n\n#### Scheduling a Meeting with Multiple Attendees\n```\nCreate a meeting called \"Project Kickoff\" for tomorrow at 2 PM. \nAdd sarah.jones@example.com and mike.thompson@example.com as required attendees.\nThe agenda is:\n1. Project overview\n2. Timeline discussion\n3. Role assignments\n4. Next steps\n```\n\n## Environment Variables\n\n### Interactive Mode (Default)\n\n| Variable | Description | Required | Default |\n|----------|-------------|----------|---------|\n| `AUTH_MODE` | Authentication mode | No | `interactive` |\n| `CLIENT_ID` | Azure AD Application (Client) ID | No | Built-in multi-tenant app |\n| `TENANT_ID` | Azure AD Tenant ID | No | `common` (multi-tenant) |\n| `USER_EMAIL` | Email address of the user | No | Auto-detected from signed-in user |\n| `REDIRECT_URI` | Custom redirect URI | No | `http://localhost` |\n\n### Client Credentials Mode\n\n| Variable | Description | Required |\n|----------|-------------|----------|\n| `AUTH_MODE` | Authentication mode | Yes |\n| `CLIENT_ID` | Azure AD Application (Client) ID | Yes |\n| `CLIENT_SECRET` | Azure AD Application Client Secret | Yes |\n| `TENANT_ID` | Azure AD Tenant ID | Yes |\n| `USER_EMAIL` | Email address of the user whose calendar to access | Yes |\n\n### Client Provided Token Mode\n\n| Variable | Description | Required | Default |\n|----------|-------------|----------|---------|\n| `AUTH_MODE` | Authentication mode | Yes | - |\n| `ACCESS_TOKEN` | Pre-acquired access token | Yes | - |\n| `USER_EMAIL` | Email address of the user | Yes | - |\n| `TOKEN_EXPIRES_ON` | Token expiration date (ISO format) | No | 1 hour from start time |\n\n#### How to Obtain an Access Token\n\nYou can obtain an access token through several methods:\n\n**1. Azure CLI (For Microsoft Graph - Recommended for testing):**\n```bash\n# Login to Azure\naz login\n\n# Get token specifically for Microsoft Graph with correct scopes\naz account get-access-token --resource=https://graph.microsoft.com --query accessToken --output tsv\n```\n\n> **Note:** The Azure CLI token has broad permissions but may not include specific calendar scopes (Calendars.ReadWrite). For production use, consider methods 3 or 4 below with explicit scope configuration.\n\n**2. PowerShell REST API (Recommended for Windows):**\n```powershell\n# For client credentials flow (app-only) - most reliable method\n$clientId = \"your-client-id\"\n$clientSecret = \"your-client-secret\" \n$tenantId = \"your-tenant-id\"\n\n$body = @{\n    grant_type = \"client_credentials\"\n    client_id = $clientId\n    client_secret = $clientSecret\n    scope = \"https://graph.microsoft.com/.default\"\n}\n\n$response = Invoke-RestMethod -Uri \"https://login.microsoftonline.com/$tenantId/oauth2/v2.0/token\" -Method Post -Body $body\n$token = $response.access_token\nWrite-Host \"Access Token: $token\"\n```\n\n**3. From Your Own Application (Most Reliable):**\n```javascript\n// Using @azure/identity with specific scopes\nimport { ClientSecretCredential } from '@azure/identity';\n\nconst credential = new ClientSecretCredential(\n  'your-tenant-id',\n  'your-client-id', \n  'your-client-secret'\n);\n\n// Request token with specific Microsoft Graph scopes\nconst token = await credential.getToken([\n  'https://graph.microsoft.com/Calendars.ReadWrite',\n  'https://graph.microsoft.com/People.Read', \n  'https://graph.microsoft.com/User.Read'\n]);\n\n// Use token.token as your ACCESS_TOKEN\nconsole.log(token.token);\n```\n\n**4. Using OAuth2 Device Code Flow (Interactive):**\n```bash\n# For personal Microsoft accounts or when you need user consent\ncurl -X POST \\\n  https://login.microsoftonline.com/common/oauth2/v2.0/devicecode \\\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\n  -d 'client_id={your-client-id}&scope=https://graph.microsoft.com/Calendars.ReadWrite https://graph.microsoft.com/People.Read https://graph.microsoft.com/User.Read'\n\n# Follow the device code instructions, then exchange for token\ncurl -X POST \\\n  https://login.microsoftonline.com/common/oauth2/v2.0/token \\\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\n  -d 'grant_type=urn:ietf:params:oauth:grant-type:device_code&client_id={your-client-id}&device_code={device-code-from-step-1}'\n```\n\n**5. Client Credentials Flow (App-Only):**\n```bash\ncurl -X POST \\\n  https://login.microsoftonline.com/{tenant-id}/oauth2/v2.0/token \\\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\n  -d 'grant_type=client_credentials&client_id={client-id}&client_secret={client-secret}&scope=https://graph.microsoft.com/.default'\n```\n\n**Important:** Ensure your Azure AD app registration has the required **delegated** or **application** permissions:\n- **Delegated**: Calendars.ReadWrite, People.Read, User.Read  \n- **Application**: Calendars.ReadWrite, People.Read.All, User.ReadBasic.All (requires admin consent)\n\n### Authentication Mode Details\n\n#### client_credentials\n- **Best for:** Automated scenarios, server-to-server communication\n- **Requires:** `CLIENT_ID`, `CLIENT_SECRET`, `TENANT_ID`, `USER_EMAIL`\n- **Permissions:** Application permissions (e.g., Calendars.ReadWrite)\n- **Note:** Requires admin consent for the application\n\n#### interactive (Default)\n- **Best for:** User-impersonation scenarios, delegated access (most common use case)\n- **Setup:** Zero configuration required - works out of the box\n- **Requires:** Nothing (uses built-in multi-tenant app)\n- **Optional:** `CLIENT_ID` and `TENANT_ID` for custom app\n- **Permissions:** Delegated permissions (e.g., Calendars.ReadWrite)\n- **Authentication Flow:** \n  - Attempts browser-based interactive login first\n  - Falls back to device code flow if browser auth fails\n  - **Device code and URL appear in MCP client chat** for easy access\n  - User will be prompted to authenticate in their browser\n- **Note:** Uses built-in multi-tenant app (works for any organization)\n\n#### client_provided_token\n- **Best for:** Custom token management, integration with existing auth systems\n- **Requires:** `ACCESS_TOKEN`, `USER_EMAIL`\n- **Optional:** `TOKEN_EXPIRES_ON` (if not provided, assumes 1-hour validity from start time)\n- **Token Sources:** Microsoft Graph PowerShell, custom applications, OAuth2 flows, Azure CLI (with limitations)\n- **Use Cases:** Testing with specific scopes, integration with existing auth flows, CI/CD pipelines, development/debugging\n- **Note:** Token refresh must be handled externally\n\n## Build\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Docker build\ndocker build -t mcp/outlook-meetings-scheduler .\n```\n\n## License\n\nThis MCP server is licensed under the ISC License. For more details, please see the LICENSE file in the project repository.\n\n## Disclaimer\n\nThis MCP server is not affiliated with Microsoft or Microsoft Graph API. Use at your own risk. Ensure you comply with your organization's policies and guidelines when using this tool.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calendars",
        "scheduler",
        "calendar",
        "outlook meetings",
        "outlook calendar",
        "meetings scheduler"
      ],
      "category": "scheduling-and-calendars"
    },
    "bossjones--datetime-mcp-server": {
      "owner": "bossjones",
      "name": "datetime-mcp-server",
      "url": "https://github.com/bossjones/datetime-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/bossjones.webp",
      "description": "Provides datetime information and simple note management functionalities, including current time, date formatting, and event scheduling prompts.",
      "stars": 0,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-02T16:32:41Z",
      "readme_content": "# DateTime MCP Server\n\nA MCP (Model Completions Protocol) server that provides datetime functionality along with simple note management.\n\n## Overview\n\nThis server implements the MCP protocol and offers various datetime-related tools and resources, including:\n\n- Current date and time in different formats\n- Date formatting utilities\n- Event scheduling prompts\n- Simple note management functionality\n\nThe server can be used by any MCP client to access date and time information and manage simple notes.\n\n## Features\n\n### Resources\n\nThe server provides the following resources:\n\n- `datetime://current` - The current date and time\n- `datetime://today` - Today's date in ISO format\n- `datetime://time` - The current time in 24-hour format\n- `note://internal/{name}` - User-created notes\n\n### Tools\n\nThe server provides the following tools:\n\n- `add-note` - Add a new note with a name and content\n- `get-current-time` - Get the current time in various formats (ISO, readable, Unix timestamp, RFC3339)\n- `format-date` - Format a date string according to a specified format pattern\n\n### Prompts\n\nThe server provides the following prompts:\n\n- `summarize-notes` - Creates a summary of all notes\n- `schedule-event` - Helps schedule an event at a specific time\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/bossjones/datetime-mcp-server.git\ncd datetime-mcp-server\n```\n\n2. Create a virtual environment:\n```bash\nuv venv\nsource .venv/bin/activate\n```\n\n3. Install the dependencies:\n```bash\nuv sync\n```\n\n## Usage\n\n### Running the Server\n\nTo run the server:\n\n```bash\nuv run python -m datetime_mcp_server.server\n```\n\nThe server will start and listen on stdin/stdout for MCP protocol messages.\n\n### Connecting to the Server\n\nYou can connect to the server using any MCP client. For example, using the MCP CLI:\n\n```bash\nuv run mcp connect datetime-mcp-server\n```\n\n## Development\n\n### Installing Development Dependencies\n\n```bash\n# Install all dependencies including development dependencies\nuv sync --dev\n```\n\n### Running Tests\n\nTo run the tests:\n\n```bash\nuv run pytest tests/\n```\n\n#### Unit Tests\n\nUnit tests verify that individual server functions work correctly:\n\n```bash\nuv run pytest tests/acceptance/test_server.py\n```\n\n#### Integration Tests\n\nIntegration tests verify that the server implements the MCP protocol correctly:\n\n```bash\nuv run pytest tests/acceptance/test_server_integration.py\n```\n\n### Dependency Management\n\n```bash\n# Add a production dependency\nuv add package_name\n\n# Add a development dependency\nuv add --dev package_name\n\n# Sync dependencies from lockfile\nuv sync --frozen\n\n# List outdated packages\nuv outdated\n```\n\n## Examples\n\n### Using the Server with MCP CLI\n\nList available resources:\n```bash\nuv run mcp resources list\n```\n\nRead a datetime resource:\n```bash\nuv run mcp resources read datetime://current\n```\n\nAdd a note:\n```bash\nuv run mcp tools call add-note --arguments '{\"name\": \"meeting\", \"content\": \"Team meeting at 3pm\"}'\n```\n\nGet the current time in ISO format:\n```bash\nuv run mcp tools call get-current-time --arguments '{\"format\": \"iso\"}'\n```\n\nFormat a date:\n```bash\nuv run mcp tools call format-date --arguments '{\"date\": \"2023-10-15\", \"format\": \"%B %d, %Y\"}'\n```\n\n## Makefile Tasks\n\nThe project includes several Makefile tasks to streamline development:\n\n```bash\n# Sync all dependencies with frozen lockfile\nmake uv-sync-all\n\n# Sync only development dependencies\nmake uv-sync-dev\n\n# Run tests\nmake test\n```\n\n## Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n## Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/malcolm/dev/bossjones/datetime-mcp-server run datetime-mcp-server\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n## License\n\nMIT\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Run the tests with `uv run pytest`\n5. Submit a pull request\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "scheduling",
        "datetime",
        "calendars",
        "datetime mcp",
        "bossjones datetime",
        "provides datetime"
      ],
      "category": "scheduling-and-calendars"
    },
    "cablate--mcp-google-calendar": {
      "owner": "cablate",
      "name": "mcp-google-calendar",
      "url": "https://github.com/cablate/mcp-google-calendar",
      "imageUrl": "/freedevtools/mcp/pfp/cablate.webp",
      "description": "Manage calendar events by creating, listing, updating, and deleting them efficiently.",
      "stars": 3,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-15T18:56:26Z",
      "readme_content": "# Calendar Tools MCP Server\n\nA powerful Model Context Protocol (MCP) server providing comprehensive calendar management capabilities.\n\n## Features\n\n### Calendar Management\n\n- Create calendar events\n- List calendar events\n- Update existing events\n- Delete events\n\n## Demo on Dive Desktop\n\n![Calendar Tools Demo](docs/Demo-on-Dive-Desktop.png)\n\n## Installation\n\n### Manual Installation\n\n```bash\nnpm install -g @cablate/mcp-google-calendar\n```\n\n## Usage\n\n### Cli\n\n```bash\nmcp-google-calendar\n```\n\n### With [Dive Desktop](https://github.com/OpenAgentPlatform/Dive)\n\n1. Click \"+ Add MCP Server\" in Dive Desktop\n2. Copy and paste this configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"calendar\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@cablate/mcp-google-calendar\"],\n      \"env\": {\n        \"GOOGLE_CALENDAR_ID\": \"your_calendar_id\",\n        \"GOOGLE_TIME_ZONE\": \"your_time_zone\",\n        \"GOOGLE_CREDENTIALS_PATH\": \"your_credentials_path\"\n      },\n      \"enabled\": true\n    }\n  }\n}\n```\n\n3. Click \"Save\" to install the MCP server\n\n## Google Service Account and Credentials\n\nHere is the simple steps to create a google service account and credentials:\n\n1. Go to [Google Cloud Console](https://console.cloud.google.com/)\n2. Create a new project or select an existing project\n3. Navigate to the \"IAM & Admin\" section\n4. Click on \"Service Accounts\"\n5. Click on \"Create Service Account\"\n6. Enter a name for the service account (e.g., \"MCP Google Calendar\")\n7. Click on \"Create\"\n8. Click on \"Create Key\"\n9. Select \"JSON\" as the key type\n10. Click on \"Create\"\n11. Download the JSON file and save it as `credentials.json`\n\nif still got any question, google and find the answer.\n\n## License\n\nMIT\n\n## Contributing\n\nWelcome community participation and contributions! Here are ways to contribute:\n\n- ⭐️ Star the project if you find it helpful\n- 🐛 Submit Issues: Report problems or provide suggestions\n- 🔧 Create Pull Requests: Submit code improvements\n\n## Contact\n\nIf you have any questions or suggestions, feel free to reach out:\n\n- 📧 Email: [reahtuoo310109@gmail.com](mailto:reahtuoo310109@gmail.com)\n- 📧 GitHub: [CabLate](https://github.com/cablate/)\n- 🤝 Collaboration: Welcome to discuss project cooperation\n- 📚 Technical Guidance: Sincere welcome for suggestions and guidance\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calendars",
        "calendar",
        "scheduling",
        "scheduling calendars",
        "calendar manage",
        "manage calendar"
      ],
      "category": "scheduling-and-calendars"
    },
    "cool-man-vk--google-meet-mcp-server": {
      "owner": "cool-man-vk",
      "name": "google-meet-mcp-server",
      "url": "https://github.com/cool-man-vk/google-meet-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/cool-man-vk.webp",
      "description": "Interact with Google Meet programmatically by creating, managing, and retrieving meetings through the Google Calendar API for streamlined scheduling tasks.",
      "stars": 0,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-08-25T12:53:43Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/mseep-audited.png)](https://mseep.ai/app/cool-man-vk-google-meet-mcp-server)\n\n# Google Meet MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@cool-man-vk/google-meet-mcp-server)](https://smithery.ai/server/@cool-man-vk/google-meet-mcp-server)\n\nA Model Context Protocol (MCP) server for interacting with Google Meet through the Google Calendar API. This server provides tools for creating and managing Google Meet meetings programmatically.\n\n## Description\n\nThis project implements an MCP server that allows AI agents to interact with Google Meet by creating, retrieving, and managing meetings through the Google Calendar API. It leverages the MCP (Model Context Protocol) specification to expose these capabilities as tools that can be used by compatible AI systems.\n\n## Installation\n\n### Installing via Smithery\n\nTo install Google Meet MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@cool-man-vk/google-meet-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @cool-man-vk/google-meet-mcp-server --client claude\n```\n\n### Manual Installation\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/google-meet-mcp.git\n\n# Navigate to the project directory\ncd google-meet-mcp\n\n# Install dependencies\nnpm install\n```\n\n## Setup\n\nBefore using the Google Meet MCP server, you need to set up your Google API credentials:\n\n1. Visit the [Google Cloud Console](https://console.cloud.google.com/)\n2. Create a new project or select an existing one\n3. Enable the Google Calendar API\n4. Create OAuth 2.0 credentials (Desktop application)\n5. Download the credentials JSON file and save it as `credentials.json` in the project root directory\n6. Run the setup script to authenticate and generate the token:\n\n```bash\nnpm run setup\n```\n\nThis will open a browser window where you can authorize the application to access your Google Calendar.\n\n## Usage\n\nOnce setup is complete, you can start the MCP server:\n\n```bash\nnpm run start\n```\n\nThe server will run and expose the following tools:\n\n- `create-meeting`: Create a new Google Meet meeting\n- `list-meetings`: List upcoming Google Meet meetings\n- `get-meeting-details`: Get details about a specific meeting\n- `update-meeting`: Update an existing meeting\n- `delete-meeting`: Delete a meeting\n\n## MCP Configuration\n\nTo use this server with MCP-compatible systems, add the following to your MCP settings configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"google-meet\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/google-meet-mcp/src/index.js\"],\n      \"env\": {},\n      \"disabled\": false\n    }\n  }\n}\n```\n\n## Features\n\n- Create Google Meet meetings with custom settings\n- Retrieve meeting details including join URLs\n- Update existing meetings\n- Delete meetings\n- List upcoming meetings\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "meetings",
        "meet",
        "scheduling",
        "google meet",
        "meetings google",
        "meet programmatically"
      ],
      "category": "scheduling-and-calendars"
    },
    "deciduus--calendar-mcp": {
      "owner": "deciduus",
      "name": "calendar-mcp",
      "url": "https://github.com/deciduus/calendar-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/deciduus.webp",
      "description": "Integrate with the Google Calendar API for calendar management and scheduling through natural language processing. Perform operations such as listing, creating, updating, and deleting events with OAuth 2.0 authentication.",
      "stars": 17,
      "forks": 8,
      "license": "Other",
      "language": "Python",
      "updated_at": "2025-10-03T17:21:14Z",
      "readme_content": "# Google Calendar MCP Server (Python)\n\nThis project implements a Python-based MCP (Model Context Protocol) server that acts as an interface between Large Language Models (LLMs) and the Google Calendar API. It enables LLMs to perform calendar operations via natural language requests.\n\n## Features\n\n*   **Authentication:** Secure Google Calendar API access using OAuth 2.0 (Desktop App Flow with automatic token storage/refresh).\n*   **Core Calendar Actions:**\n    *   List calendars (`mcp_google_calendar_list_calendars`).\n    *   Create calendars (`mcp_google_calendar_create_calendar`).\n    *   Find events with basic and advanced filtering (`mcp_google_calendar_find_events`).\n    *   Create detailed events (`mcp_google_calendar_create_event`).\n    *   Quick-add events from text (`mcp_google_calendar_quick_add_event`).\n    *   Update events (`mcp_google_calendar_update_event`).\n    *   Delete events (`mcp_google_calendar_delete_event`).\n    *   Add attendees to events (`mcp_google_calendar_add_attendee`).\n*   **Advanced Scheduling & Analysis:**\n    *   Check attendee response status (`mcp_google_calendar_check_attendee_status`).\n    *   Query free/busy information for multiple calendars (`mcp_google_calendar_query_free_busy`).\n    *   Find mutual free slots and schedule meetings automatically (`mcp_google_calendar_schedule_mutual`).\n    *   Analyze daily event counts and durations (`mcp_google_calendar_analyze_busyness`).\n    *   *(Recurring event projection feature potentially added in Task 3.5, but not explicitly exposed as a tool yet)*\n*   **Server:** FastAPI-based server exposing actions via a RESTful API.\n*   **MCP Integration:** Provides MCP-compatible tools via stdio using the `mcp_sdk` library.\n\n## Setup\n\n1.  **Prerequisites:**\n    *   Python 3.8+ installed.\n    *   Git installed.\n    *   Access to a Google Cloud Platform project.\n\n2.  **Clone Repository:**\n    ```bash\n    git clone <repository-url> # Replace with your repo URL\n    cd <repository-directory>\n    ```\n\n3.  **Google Cloud Setup (OAuth Credentials):**\n    *   Go to the [Google Cloud Console](https://console.cloud.google.com/).\n    *   Create a new project or select an existing one.\n    *   **Enable the Google Calendar API** for your project.\n    *   Navigate to \"APIs & Services\" > \"Credentials\".\n    *   Click \"+ CREATE CREDENTIALS\" > \"OAuth client ID\".\n    *   Select **Application type: Desktop app**. Give it a name (e.g., \"Calendar MCP Local\").\n    *   Click \"CREATE\". A pop-up will show your **Client ID** and **Client Secret**. **Copy these now** - you'll need them for the `.env` file. You *do not* need to download the JSON file offered for other app types.\n    *   Configure the **OAuth consent screen**:\n        *   Set User Type to \"External\".\n        *   Fill in required app info (App name, User support email, Developer contact).\n        *   Add Scopes: Click \"Add or Remove Scopes\", search for `calendar`, add the `.../auth/calendar` scope (read/write access). Click \"Update\".\n        *   Add Test Users: Add the Google Account email address(es) you will authenticate with.\n        *   Save and return to the dashboard.\n    *   Go back to \"APIs & Services\" > \"Credentials\" and click on the name of the Desktop App credential you created.\n    *   Under \"Authorized redirect URIs\", click \"+ ADD URI\" and enter `http://localhost:8080/oauth2callback`. Click \"Save\". (Adjust the port if you change `OAUTH_CALLBACK_PORT` in `.env`).\n\n4.  **Environment Configuration (`.env` file):**\n    *   In the project's root directory, copy the `env.example` file and rename the copy to `.env`.\n    *   Open the `.env` file and paste your **Client ID** and **Client Secret** obtained from Google Cloud:\n        ```dotenv\n        # Google OAuth 2.0 Client Credentials (from Google Cloud Console - Desktop app type)\n        GOOGLE_CLIENT_ID='YOUR_GOOGLE_CLIENT_ID_HERE'\n        GOOGLE_CLIENT_SECRET='YOUR_GOOGLE_CLIENT_SECRET_HERE'\n\n        # Path to the file where the user's OAuth tokens will be stored after first auth\n        # This file is created automatically. Default is .gcp-saved-tokens.json\n        TOKEN_FILE_PATH='.gcp-saved-tokens.json'\n\n        # Port for the local webserver during the OAuth callback (must match Google Cloud redirect URI)\n        OAUTH_CALLBACK_PORT=8080\n\n        # Google Calendar API Scopes (read/write is default)\n        # Use 'https://www.googleapis.com/auth/calendar.readonly' for read-only access\n        CALENDAR_SCOPES='https://www.googleapis.com/auth/calendar'\n        ```\n    *   Ensure `TOKEN_FILE_PATH` points to a location where the app can write the token file (the default `.gcp-saved-tokens.json` in the root is usually fine). This file is automatically added to `.gitignore`.\n\n5.  **Install Dependencies:**\n    *   Navigate to the project directory in your terminal.\n    *   Install the required Python packages:\n        ```bash\n        pip install -r requirements.txt\n        ```\n    *   *(Using a Python virtual environment is recommended but optional)*\n\n## Running the Server (for Initial Authentication & Testing)\n\nYou only need to run the server manually **once** to complete the initial Google OAuth authentication flow. After that, your MCP client will launch the server automatically using the command specified in its configuration.\n\n1.  **First Run (Authentication):**\n    *   Run the server script from your terminal:\n        ```bash\n        python run_server.py\n        ```\n    *   The script checks for saved tokens (`.gcp-saved-tokens.json`). Since they don't exist yet, it will:\n        *   Print an authorization URL.\n        *   Automatically open your browser to that URL.\n        *   Guide you through logging into your Google Account and granting calendar permissions.\n        *   After you grant permissions, Google redirects back to a local URL (`http://localhost:8080/oauth2callback`).\n        *   The script captures the authorization code and **saves the necessary tokens** to the file specified in `.env` (`.gcp-saved-tokens.json`).\n    *   Once tokens are saved, the script will typically start the FastAPI server (e.g., on `http://localhost:8000`). You can usually stop it (Ctrl+C) after you see confirmation that tokens were saved or the server has started.\n\n2.  **Optional: Testing the Server Directly:**\n    *   If you want to test the FastAPI server directly (e.g., by sending HTTP requests with tools like `curl` or Postman), you can run `python run_server.py` again. It will load the saved tokens and start the server without requiring browser authentication.\n\n**Note:** For regular use with an MCP client, you **do not** need to run `python run_server.py` manually after the initial authentication. The client handles launching it.\n\n## MCP Client Configuration (Example for Cursor/Claude Desktop)\n\nTo use this server as a tool within an MCP client, you need to configure the client to run the `run_server.py` script. This is typically done in a JSON settings file.\n\n**Example `mcp.json` Entry:**\n\n```json\n{\n  \"tools\": {\n    \"google_calendar\": {\n      \"command\": \"python\",\n      \"args\": [\n        \"C:/path/to/your/calendar-mcp/run_server.py\"\n      ]\n    }\n  }\n}\n```\n\n**Configuration Details:**\n\n*   **`google_calendar`:** A unique name you choose for this tool instance within your MCP client.\n*   **`command`:** Set this to `python` if it's in your system's PATH. If not, provide the *full absolute path* to the `python.exe` or `python` executable (e.g., `/path/to/your/venv/bin/python` or `C:/path/to/your/venv/Scripts/python.exe`).\n*   **`args`:** Provide the *full, absolute path* to the `run_server.py` script in your project directory. **Replace the placeholder `/path/to/your/calendar-mcp/run_server.py` with the actual path on your system.**\n*   **(Optional) `api`:** Some clients might still need the `api` field to point to the underlying FastAPI server (e.g., `\"api\": \"http://localhost:8000\"`) for schema discovery, even though communication happens via stdio.\n*   **(Optional) `timeout`:** You can add a timeout (e.g., `\"timeout\": 30000` for 30 seconds).\n\n**How it Works:** When the MCP client invokes this tool, it executes the specified `command` with the `args`. The `run_server.py` script detects it's being run this way (via piped stdin/stdout) and automatically starts the MCP communication bridge instead of just the HTTP server.\n\n**Important:**\n*   Your Google Client ID/Secret remain secure in your project's `.env` file, *not* in the MCP client configuration.\n*   Consult your specific MCP client's documentation for the exact configuration file location and required fields.\n\n## Development\n\n*   **Code Structure:**\n    *   `run_server.py`: Main entry point, handles server startup and MCP detection.\n    *   `src/server.py`: FastAPI application definition, HTTP endpoints.\n    *   `src/calendar_actions.py`: Core logic interacting with the Google Calendar API.\n    *   `src/analysis.py`: Advanced analysis functions.\n    *   `src/auth.py`: Handles OAuth 2.0 authentication flow and token management.\n    *   `src/models.py`: Pydantic models for request/response data structures.\n    *   `src/mcp_bridge.py`: Implements the MCP tool definitions using `mcp_sdk`, delegating to the FastAPI server.\n*   **Logging:** Logs are written to `calendar_mcp.log` in the project root.\n*   **Testing:** (Details TBD)\n*   **Contributing:** (Details TBD)\n\n## Next Steps (Planned Tasks)\n\n*   Implement MCP Resources/Prompts support (Task 6.1, 6.2).\n*   Enhance MCP tool argument validation and response formatting (Task 6.3, 6.4).\n*   Improve MCP error handling (Task 6.5).\n*   Refine development workflow (Task 7).\n\n## License\n\nThis project is dual-licensed to support both open-source collaboration and sustainable development:\n\n1.  **GNU Affero General Public License v3.0 (AGPL-3.0):**\n    *   This software is free to use, modify, and distribute under the terms of the AGPLv3 license. \n    *   Key conditions include that derivative works (including modifications used over a network) must also be licensed under AGPLv3 and their source code made available.\n    *   This license is suitable for open-source projects or internal use where AGPLv3 compliance is feasible.\n    *   See the [LICENSE](LICENSE) file for the full text.\n\n2.  **Commercial License:**\n    *   If the terms of the AGPLv3 are not suitable for your specific use case (e.g., integrating this software into a proprietary, closed-source commercial product or service without complying with AGPLv3's source-sharing requirements), a separate commercial license is available.\n    *   Please contact **deciduusleaf@gmail.com** for inquiries regarding commercial licensing options.\n\nBy using, modifying, or distributing this software, you agree to be bound by the terms of either the AGPLv3 or a separately negotiated commercial license. ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calendars",
        "calendar",
        "scheduling",
        "calendars deciduus",
        "deciduus calendar",
        "calendar api"
      ],
      "category": "scheduling-and-calendars"
    },
    "epaproditus--google-workspace-mcp-server": {
      "owner": "epaproditus",
      "name": "google-workspace-mcp-server",
      "url": "https://github.com/epaproditus/google-workspace-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/epaproditus.webp",
      "description": "Interact with Gmail and Calendar APIs to manage emails and calendar events programmatically. Perform actions such as listing, searching, sending, and modifying emails, as well as creating, updating, and deleting calendar events.",
      "stars": 25,
      "forks": 17,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-03T22:32:04Z",
      "readme_content": "# Google Workspace MCP Server\n\nA Model Context Protocol (MCP) server that provides tools for interacting with Gmail and Calendar APIs. This server enables you to manage your emails and calendar events programmatically through the MCP interface.\n\n## Features\n\n### Gmail Tools\n- `list_emails`: List recent emails from your inbox with optional filtering\n- `search_emails`: Advanced email search with Gmail query syntax\n- `send_email`: Send new emails with support for CC and BCC\n- `modify_email`: Modify email labels (archive, trash, mark read/unread)\n\n### Calendar Tools\n- `list_events`: List upcoming calendar events with date range filtering\n- `create_event`: Create new calendar events with attendees\n- `update_event`: Update existing calendar events\n- `delete_event`: Delete calendar events\n\n## Prerequisites\n\n1. **Node.js**: Install Node.js version 14 or higher\n2. **Google Cloud Console Setup**:\n   - Go to [Google Cloud Console](https://console.cloud.google.com/)\n   - Create a new project or select an existing one\n   - Enable the Gmail API and Google Calendar API:\n     1. Go to \"APIs & Services\" > \"Library\"\n     2. Search for and enable \"Gmail API\"\n     3. Search for and enable \"Google Calendar API\"\n   - Set up OAuth 2.0 credentials:\n     1. Go to \"APIs & Services\" > \"Credentials\"\n     2. Click \"Create Credentials\" > \"OAuth client ID\"\n     3. Choose \"Web application\"\n     4. Set \"Authorized redirect URIs\" to include: `http://localhost:4100/code`\n     5. Note down the Client ID and Client Secret\n\n## Setup Instructions\n\n1. **Clone and Install**:\n   ```bash\n   git clone https://github.com/epaproditus/google-workspace-mcp-server.git\n   cd google-workspace-mcp-server\n   npm install\n   ```\n\n2. **Create OAuth Credentials**:\n   Create a `credentials.json` file in the root directory:\n   ```json\n   {\n       \"web\": {\n           \"client_id\": \"YOUR_CLIENT_ID\",\n           \"client_secret\": \"YOUR_CLIENT_SECRET\",\n           \"redirect_uris\": [\"http://localhost:4100/code\"],\n           \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n           \"token_uri\": \"https://oauth2.googleapis.com/token\"\n       }\n   }\n   ```\n\n3. **Get Refresh Token**:\n   ```bash\n   node get-refresh-token.js\n   ```\n   This will:\n   - Open your browser for Google OAuth authentication\n   - Request the following permissions:\n     - `https://www.googleapis.com/auth/gmail.modify`\n     - `https://www.googleapis.com/auth/calendar`\n     - `https://www.googleapis.com/auth/gmail.send`\n   - Save the credentials to `token.json`\n   - Display the refresh token in the console\n\n4. **Configure MCP Settings**:\n   Add the server configuration to your MCP settings file:\n   - For VSCode Claude extension: `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`\n   - For Claude desktop app: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n   Add this to the `mcpServers` object:\n   ```json\n   {\n     \"mcpServers\": {\n       \"google-workspace\": {\n         \"command\": \"node\",\n         \"args\": [\"/path/to/google-workspace-server/build/index.js\"],\n         \"env\": {\n           \"GOOGLE_CLIENT_ID\": \"your_client_id\",\n           \"GOOGLE_CLIENT_SECRET\": \"your_client_secret\",\n           \"GOOGLE_REFRESH_TOKEN\": \"your_refresh_token\"\n         }\n       }\n     }\n   }\n   ```\n\n5. **Build and Run**:\n   ```bash\n   npm run build\n   ```\n\n## Usage Examples\n\n### Gmail Operations\n\n1. **List Recent Emails**:\n   ```json\n   {\n     \"maxResults\": 5,\n     \"query\": \"is:unread\"\n   }\n   ```\n\n2. **Search Emails**:\n   ```json\n   {\n     \"query\": \"from:example@gmail.com has:attachment\",\n     \"maxResults\": 10\n   }\n   ```\n\n3. **Send Email**:\n   ```json\n   {\n     \"to\": \"recipient@example.com\",\n     \"subject\": \"Hello\",\n     \"body\": \"Message content\",\n     \"cc\": \"cc@example.com\",\n     \"bcc\": \"bcc@example.com\"\n   }\n   ```\n\n4. **Modify Email**:\n   ```json\n   {\n     \"id\": \"message_id\",\n     \"addLabels\": [\"UNREAD\"],\n     \"removeLabels\": [\"INBOX\"]\n   }\n   ```\n\n### Calendar Operations\n\n1. **List Events**:\n   ```json\n   {\n     \"maxResults\": 10,\n     \"timeMin\": \"2024-01-01T00:00:00Z\",\n     \"timeMax\": \"2024-12-31T23:59:59Z\"\n   }\n   ```\n\n2. **Create Event**:\n   ```json\n   {\n     \"summary\": \"Team Meeting\",\n     \"location\": \"Conference Room\",\n     \"description\": \"Weekly sync-up\",\n     \"start\": \"2024-01-24T10:00:00Z\",\n     \"end\": \"2024-01-24T11:00:00Z\",\n     \"attendees\": [\"colleague@example.com\"]\n   }\n   ```\n\n3. **Update Event**:\n   ```json\n   {\n     \"eventId\": \"event_id\",\n     \"summary\": \"Updated Meeting Title\",\n     \"location\": \"Virtual\",\n     \"start\": \"2024-01-24T11:00:00Z\",\n     \"end\": \"2024-01-24T12:00:00Z\"\n   }\n   ```\n\n4. **Delete Event**:\n   ```json\n   {\n     \"eventId\": \"event_id\"\n   }\n   ```\n\n## Troubleshooting\n\n1. **Authentication Issues**:\n   - Ensure all required OAuth scopes are granted\n   - Verify client ID and secret are correct\n   - Check if refresh token is valid\n\n2. **API Errors**:\n   - Check Google Cloud Console for API quotas and limits\n   - Ensure APIs are enabled for your project\n   - Verify request parameters match the required format\n\n## License\n\nThis project is licensed under the MIT License.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calendars",
        "calendar",
        "gmail",
        "calendars epaproditus",
        "gmail calendar",
        "calendar apis"
      ],
      "category": "scheduling-and-calendars"
    },
    "erickva--google-workspace-mcp-server-no-calendar-deletetion": {
      "owner": "erickva",
      "name": "google-workspace-mcp-server-no-calendar-deletetion",
      "url": "https://github.com/erickva/google-workspace-mcp-server-no-calendar-deletetion",
      "imageUrl": "/freedevtools/mcp/pfp/erickva.webp",
      "description": "Manage emails and calendar events programmatically through a unified interface, interacting with Gmail and Calendar APIs to automate tasks. Support for listing, searching, and sending emails, as well as listing and modifying calendar events is included.",
      "stars": 1,
      "forks": 1,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-16T01:34:26Z",
      "readme_content": "[![smithery badge](https://smithery.ai/badge/@erickva/google-workspace-mcp-server-no-calendar-deletetion)](https://smithery.ai/server/@erickva/google-workspace-mcp-server-no-calendar-deletetion)\n\n# Google Workspace MCP Server\n\nA Model Context Protocol (MCP) server that provides tools for interacting with Gmail and Calendar APIs. This server enables you to manage your emails and calendar events programmatically through the MCP interface.\n\n## Features\n\n### Gmail Tools\n- `list_emails`: List recent emails from your inbox with optional filtering\n- `search_emails`: Advanced email search with Gmail query syntax\n- `send_email`: Send new emails with support for CC and BCC\n- `modify_email`: Modify email labels (archive, trash, mark read/unread)\n\n### Calendar Tools\n- `list_events`: List upcoming calendar events with date range filtering\n- `create_event`: Create new calendar events with attendees\n- The events below were removed from this server for security measures since Google Cloud Calendar API does not have a scope that allows creation but prevents deletion or updates.\n- <s>`update_event`: Update existing calendar events</s>\n- <s>`delete_event`: Delete calendar events</s>\n\n## Prerequisites\n\n1. **Node.js**: Install Node.js version 14 or higher\n2. **Google Cloud Console Setup**:\n   - Go to [Google Cloud Console](https://console.cloud.google.com/)\n   - Create a new project or select an existing one\n   - Enable the Gmail API and Google Calendar API:\n     1. Go to \"APIs & Services\" > \"Library\"\n     2. Search for and enable \"Gmail API\"\n     3. Search for and enable \"Google Calendar API\"\n   - Set up OAuth 2.0 credentials:\n     1. Go to \"APIs & Services\" > \"Credentials\"\n     2. Click \"Create Credentials\" > \"OAuth client ID\"\n     3. Choose \"Web application\"\n     4. Set \"Authorized redirect URIs\" to include: `http://localhost:4100/code`\n     5. Note down the Client ID and Client Secret\n\n## Setup Instructions\n\n### Installing via Smithery\n\nTo install Google Workspace Server - No Calendar Deletion for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@erickva/google-workspace-mcp-server-no-calendar-deletetion):\n\n```bash\nnpx -y @smithery/cli install @erickva/google-workspace-mcp-server-no-calendar-deletetion --client claude\n```\n\n### Installing Manually\n\n1. **Clone and Install**:\n   ```bash\n   git clone https://github.com/epaproditus/google-workspace-mcp-server.git\n   cd google-workspace-mcp-server\n   npm install\n   ```\n\n2. **Create OAuth Credentials**:\n   Create a `credentials.json` file in the root directory:\n   ```json\n   {\n       \"web\": {\n           \"client_id\": \"YOUR_CLIENT_ID\",\n           \"client_secret\": \"YOUR_CLIENT_SECRET\",\n           \"redirect_uris\": [\"http://localhost:4100/code\"],\n           \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n           \"token_uri\": \"https://oauth2.googleapis.com/token\"\n       }\n   }\n   ```\n\n3. **Get Refresh Token**:\n   ```bash\n   node get-refresh-token.js\n   ```\n   This will:\n   - Open your browser for Google OAuth authentication\n   - Request the following permissions:\n     - `https://www.googleapis.com/auth/gmail.modify`\n     - `https://www.googleapis.com/auth/calendar`\n     - `https://www.googleapis.com/auth/gmail.send`\n   - Save the credentials to `token.json`\n   - Display the refresh token in the console\n\n4. **Configure MCP Settings**:\n   Add the server configuration to your MCP settings file:\n   - For VSCode Claude extension: `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`\n   - For Claude desktop app: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n   Add this to the `mcpServers` object:\n   ```json\n   {\n     \"mcpServers\": {\n       \"google-workspace\": {\n         \"command\": \"node\",\n         \"args\": [\"/path/to/google-workspace-server/build/index.js\"],\n         \"env\": {\n           \"GOOGLE_CLIENT_ID\": \"your_client_id\",\n           \"GOOGLE_CLIENT_SECRET\": \"your_client_secret\",\n           \"GOOGLE_REFRESH_TOKEN\": \"your_refresh_token\"\n         }\n       }\n     }\n   }\n   ```\n\n5. **Build and Run**:\n   ```bash\n   npm run build\n   ```\n\n## Usage Examples\n\n### Gmail Operations\n\n1. **List Recent Emails**:\n   ```json\n   {\n     \"maxResults\": 5,\n     \"query\": \"is:unread\"\n   }\n   ```\n\n2. **Search Emails**:\n   ```json\n   {\n     \"query\": \"from:example@gmail.com has:attachment\",\n     \"maxResults\": 10\n   }\n   ```\n\n3. **Send Email**:\n   ```json\n   {\n     \"to\": \"recipient@example.com\",\n     \"subject\": \"Hello\",\n     \"body\": \"Message content\",\n     \"cc\": \"cc@example.com\",\n     \"bcc\": \"bcc@example.com\"\n   }\n   ```\n\n4. **Modify Email**:\n   ```json\n   {\n     \"id\": \"message_id\",\n     \"addLabels\": [\"UNREAD\"],\n     \"removeLabels\": [\"INBOX\"]\n   }\n   ```\n\n### Calendar Operations\n\n1. **List Events**:\n   ```json\n   {\n     \"maxResults\": 10,\n     \"timeMin\": \"2024-01-01T00:00:00Z\",\n     \"timeMax\": \"2024-12-31T23:59:59Z\"\n   }\n   ```\n\n2. **Create Event**:\n   ```json\n   {\n     \"summary\": \"Team Meeting\",\n     \"location\": \"Conference Room\",\n     \"description\": \"Weekly sync-up\",\n     \"start\": \"2024-01-24T10:00:00Z\",\n     \"end\": \"2024-01-24T11:00:00Z\",\n     \"attendees\": [\"colleague@example.com\"]\n   }\n   ```\n\n<s>3. **Update Event**:\n   ```json\n   {\n     \"eventId\": \"event_id\",\n     \"summary\": \"Updated Meeting Title\",\n     \"location\": \"Virtual\",\n     \"start\": \"2024-01-24T11:00:00Z\",\n     \"end\": \"2024-01-24T12:00:00Z\"\n   }\n   ```\n</s>\n\n<s>4. **Delete Event**:\n   ```json\n   {\n     \"eventId\": \"event_id\"\n   }\n   ```\n</s>\n\n## Troubleshooting\n\n1. **Authentication Issues**:\n   - Ensure all required OAuth scopes are granted\n   - Verify client ID and secret are correct\n   - Check if refresh token is valid\n\n2. **API Errors**:\n   - Check Google Cloud Console for API quotas and limits\n   - Ensure APIs are enabled for your project\n   - Verify request parameters match the required format\n\n## License\n\nThis project is licensed under the MIT License.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calendars",
        "calendar",
        "scheduling",
        "gmail calendar",
        "scheduling calendars",
        "calendars erickva"
      ],
      "category": "scheduling-and-calendars"
    },
    "j3k0--mcp-google-workspace": {
      "owner": "j3k0",
      "name": "mcp-google-workspace",
      "url": "https://github.com/j3k0/mcp-google-workspace",
      "imageUrl": "/freedevtools/mcp/pfp/j3k0.webp",
      "description": "Interact with Gmail and Google Calendar through a unified protocol, enabling advanced email management and calendar event handling across multiple Google accounts.",
      "stars": 13,
      "forks": 9,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-04T06:59:57Z",
      "readme_content": "# MCP Google Workspace Server\n\nA Model Context Protocol server for Google Workspace services. This server provides tools to interact with Gmail and Google Calendar through the MCP protocol.\n\n## Features\n\n- **Multiple Google Account Support**\n  - Use and switch between multiple Google accounts\n  - Each account can have custom metadata and descriptions\n\n- **Gmail Integration**\n  - Query emails with advanced search\n  - Read full email content and attachments\n  - Create and manage drafts\n  - Reply to emails\n  - Archive emails\n  - Handle attachments\n  - Bulk operations support\n\n- **Calendar Integration**\n  - List available calendars\n  - View calendar events\n  - Create new events\n  - Delete events\n  - Support for multiple calendars\n  - Custom timezone support\n\n## Example Prompts\n\nTry these example prompts with your AI assistant:\n\n### Gmail\n- \"Retrieve my latest unread messages\"\n- \"Search my emails from the Scrum Master\"\n- \"Retrieve all emails from accounting\"\n- \"Take the email about ABC and summarize it\"\n- \"Write a nice response to Alice's last email and upload a draft\"\n- \"Reply to Bob's email with a Thank you note. Store it as draft\"\n\n### Calendar\n- \"What do I have on my agenda tomorrow?\"\n- \"Check my private account's Family agenda for next week\"\n- \"I need to plan an event with Tim for 2hrs next week. Suggest some time slots\"\n\n## Prerequisites\n\n- Node.js >= 18\n- A Google Cloud project with Gmail and Calendar APIs enabled\n- OAuth 2.0 credentials for Google APIs\n\n## Installation\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/j3k0/mcp-google-workspace.git\n   cd mcp-google-workspace\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n3. Build the TypeScript code:\n   ```bash\n   npm run build\n   ```\n\n## Configuration\n\n### OAuth 2.0 Setup\n\nGoogle Workspace (G Suite) APIs require OAuth2 authorization. Follow these steps to set up authentication:\n\n1. Create OAuth2 Credentials:\n   - Go to the [Google Cloud Console](https://console.cloud.google.com/)\n   - Create a new project or select an existing one\n   - Enable the Gmail API and Google Calendar API for your project\n   - Go to \"Credentials\" → \"Create Credentials\" → \"OAuth client ID\"\n   - Select \"Desktop app\" or \"Web application\" as the application type\n   - Configure the OAuth consent screen with required information\n   - Add authorized redirect URIs (include `http://localhost:4100/code` for local development)\n\n2. Required OAuth2 Scopes:\n   ```json\n   [\n     \"openid\",\n     \"https://mail.google.com/\",\n     \"https://www.googleapis.com/auth/calendar\",\n     \"https://www.googleapis.com/auth/userinfo.email\"\n   ]\n   ```\n\n3. Create a `.gauth.json` file in the project root with your Google OAuth 2.0 credentials:\n   ```json\n   {\n     \"installed\": {\n       \"client_id\": \"your_client_id\",\n       \"project_id\": \"your_project_id\",\n       \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n       \"token_uri\": \"https://oauth2.googleapis.com/token\",\n       \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n       \"client_secret\": \"your_client_secret\",\n       \"redirect_uris\": [\"http://localhost:4100/code\"]\n     }\n   }\n   ```\n\n4. Create a `.accounts.json` file to specify which Google accounts can use the server:\n   ```json\n   {\n     \"accounts\": [\n       {\n         \"email\": \"your.email@gmail.com\",\n         \"account_type\": \"personal\",\n         \"extra_info\": \"Primary account with Family Calendar\"\n       }\n     ]\n   }\n   ```\n\n   You can specify multiple accounts. Make sure they have access in your Google Auth app. The `extra_info` field is especially useful as you can add information here that you want to tell the AI about the account (e.g., whether it has a specific calendar).\n\n### Claude Desktop Configuration\n\nConfigure Claude Desktop to use the mcp-google-workspace server:\n\nOn MacOS: Edit `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n\nOn Windows: Edit `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  \n```json\n{\n  \"mcpServers\": {\n    \"mcp-google-workspace\": {\n      \"command\": \"<dir_to>/mcp-google-workspace/launch\"\n    }\n  }\n}\n```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  \n```json\n{\n  \"mcpServers\": {\n    \"mcp-google-workspace\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-google-workspace\"\n      ]\n    }\n  }\n}\n```\n</details>\n\n## Usage\n\n1. Start the server:\n   ```bash\n   npm start\n   ```\n\n   Optional arguments:\n   - `--gauth-file`: Path to the OAuth2 credentials file (default: ./.gauth.json)\n   - `--accounts-file`: Path to the accounts configuration file (default: ./.accounts.json)\n   - `--credentials-dir`: Directory to store OAuth credentials (default: current directory)\n\n2. The server will start and listen for MCP commands via stdin/stdout.\n\n3. On first run for each account, it will:\n   - Open a browser window for OAuth2 authentication\n   - Listen on port 4100 for the OAuth2 callback\n   - Store the credentials for future use in a file named `.oauth2.{email}.json`\n\n## Available Tools\n\n### Account Management\n\n1. `gmail_list_accounts` / `calendar_list_accounts`\n   - List all configured Google accounts\n   - View account metadata and descriptions\n   - No user_id required\n\n### Gmail Tools\n\n1. `gmail_query_emails`\n   - Search emails with Gmail's query syntax (e.g., 'is:unread', 'from:example@gmail.com', 'newer_than:2d', 'has:attachment')\n   - Returns emails in reverse chronological order\n   - Includes metadata and content summary\n\n2. `gmail_get_email`\n   - Retrieve complete email content by ID\n   - Includes full message body and attachment info\n\n3. `gmail_bulk_get_emails`\n   - Retrieve multiple emails by ID in a single request\n   - Efficient for batch processing\n\n4. `gmail_create_draft`\n   - Create new email drafts\n   - Support for CC recipients\n\n5. `gmail_delete_draft`\n   - Delete draft emails by ID\n\n6. `gmail_reply`\n   - Reply to existing emails\n   - Option to send immediately or save as draft\n   - Support for \"Reply All\" via CC\n\n7. `gmail_get_attachment`\n   - Download email attachments\n   - Save to disk or return as embedded resource\n\n8. `gmail_bulk_save_attachments`\n   - Save multiple attachments in a single operation\n\n9. `gmail_archive` / `gmail_bulk_archive`\n   - Move emails out of inbox\n   - Support for individual or bulk operations\n\n### Calendar Tools\n\n1. `calendar_list`\n   - List all accessible calendars\n   - Includes calendar metadata, access roles, and timezone information\n\n2. `calendar_get_events`\n   - Retrieve events in a date range\n   - Support for multiple calendars\n   - Filter options (deleted events, max results)\n   - Timezone customization\n\n3. `calendar_create_event`\n   - Create new calendar events\n   - Support for attendees and notifications\n   - Location and description fields\n   - Timezone handling\n\n4. `calendar_delete_event`\n   - Delete events by ID\n   - Option for cancellation notifications\n\n## Development\n\n- Source code is in TypeScript under the `src/` directory\n- Build output goes to `dist/` directory\n- Uses ES modules for better modularity\n- Follows Google API best practices\n\n### Project Structure\n\n```\nmcp-google-workspace/\n├── src/\n│   ├── server.ts           # Main server implementation\n│   ├── services/\n│   │   └── gauth.ts        # Google authentication service\n│   ├── tools/\n│   │   ├── gmail.ts        # Gmail tools implementation\n│   │   └── calendar.ts     # Calendar tools implementation\n│   └── types/\n│       └── tool-handler.ts # Common types and interfaces\n├── .gauth.json             # OAuth2 credentials\n├── .accounts.json          # Account configuration\n├── package.json            # Project dependencies\n└── tsconfig.json           # TypeScript configuration\n```\n\n### Development Commands\n\n- `npm run build`: Build TypeScript code\n- `npm start`: Start the server\n- `npm run dev`: Start in development mode with auto-reload\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a Pull Request\n\n## License\n\nMIT License - see LICENSE file for details",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gmail",
        "calendars",
        "calendar",
        "calendars j3k0",
        "google calendar",
        "interact gmail"
      ],
      "category": "scheduling-and-calendars"
    },
    "jharkins--mcp-time-srv": {
      "owner": "jharkins",
      "name": "mcp-time-srv",
      "url": "https://github.com/jharkins/mcp-time-srv",
      "imageUrl": "/freedevtools/mcp/pfp/jharkins.webp",
      "description": "Provides accurate current time information and timezone conversions. Queries can be made for the current time in any IANA timezone and for converting times between different timezones.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-04-26T02:01:48Z",
      "readme_content": "# MCP Time Server (`mcp-time-srv`)\n\nA simple Model Context Protocol (MCP) server implemented in TypeScript that provides tools for time-related queries, including getting the current time in various timezones and converting times between timezones.\n\nThis server supports both modern Streamable HTTP and legacy HTTP+SSE MCP transport protocols.\n\n## Features\n\nProvides the following MCP tools:\n\n*   **`get_current_time`**: Returns the current time in a specified IANA timezone.\n*   **`convert_time`**: Converts a given time from a source IANA timezone to a target IANA timezone.\n\n## Prerequisites\n\n*   [Node.js](https://nodejs.org/) (v18 or later recommended)\n*   [npm](https://www.npmjs.com/) (usually comes with Node.js)\n*   [Docker](https://www.docker.com/) (Optional, for running in a container)\n\n## Setup\n\n1.  **Clone the repository (if you haven't already):**\n    ```bash\n    # git clone <your-repo-url>\n    # cd mcp-time-srv\n    ```\n\n2.  **Install dependencies:**\n    ```bash\n    npm install\n    ```\n\n## Running Locally\n\n1.  **Build the TypeScript code:**\n    ```bash\n    npm run build\n    ```\n    This compiles the TypeScript source in `src/` to JavaScript in `dist/`.\n\n2.  **Run the server:**\n    You can run the server using `ts-node` (for development) or directly with `node` after building.\n\n    *   **Using `ts-node`:**\n        ```bash\n        npx ts-node src/server.ts\n        ```\n    *   **Using `node` (after building):**\n        ```bash\n        node dist/server.js\n        ```\n\nThe server will start, typically listening on port 3000.\n```\nMCP Time server listening on http://localhost:3000\n```\n\n## Running with Docker (Optional)\n\nA `Dockerfile` is provided for building and running the server in a container.\n\n1.  **Build the Docker image:**\n    ```bash\n    docker build -t mcp-time-srv .\n    ```\n\n2.  **Run the container:**\n    ```bash\n    docker run -d -p 3000:3000 --name my-mcp-server mcp-time-srv\n    ```\n    *   `-d`: Run in detached mode (in the background).\n    *   `-p 3000:3000`: Map port 3000 on your host to port 3000 in the container.\n    *   `--name my-mcp-server`: Assign a name to the container for easier management.\n\nThe server will be running inside the container, accessible at `http://localhost:3000`.\n\nTo stop the container:\n```bash\ndocker stop my-mcp-server\n```\nTo view logs:\n```bash\ndocker logs my-mcp-server\n```\n\n## Testing with the Client\n\nA simple test client script (`src/client.ts`) is included to demonstrate interacting with the server's tools.\n\n1.  **Ensure the server is running** (either locally or in Docker).\n2.  **Run the client:**\n    ```bash\n    npx ts-node src/client.ts\n    ```\nThe client will connect to the server (using SSE transport by default), list the available tools, call each tool with example arguments (including some designed to test error handling), and print the results.\n\n## Tool Details\n\n### `get_current_time`\n\nReturns the current time in the specified timezone.\n\n*   **Input Argument:**\n    *   `timezone` (string, optional): An IANA timezone name (e.g., `America/New_York`, `Europe/London`). If omitted, defaults to the server's local timezone.\n*   **Output:** A JSON object containing:\n    *   `timezone` (string): The effective timezone used.\n    *   `datetime` (string): The current time in ISO 8601 format with offset (e.g., `2025-04-26T01:39:15Z`).\n\n### `convert_time`\n\nConverts a time from a source timezone to a target timezone.\n\n*   **Input Arguments:**\n    *   `source_timezone` (string, optional): Source IANA timezone name. Defaults to server's local timezone if omitted.\n    *   `time` (string, required): The time to convert in 24-hour HH:MM format (e.g., `14:30`).\n    *   `target_timezone` (string, optional): Target IANA timezone name. Defaults to server's local timezone if omitted.\n*   **Output:** A JSON object containing:\n    *   `source` (object): Details of the time in the source timezone (`timezone`, `datetime`).\n    *   `target` (object): Details of the converted time in the target timezone (`timezone`, `datetime`).\n    *   `time_difference` (string): The difference between the target and source timezone offsets (e.g., `+8h`, `-5h`, `+5.75h`). \n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details. ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "timezones",
        "timezone",
        "calendars",
        "calendars jharkins",
        "timezone conversions",
        "time srv"
      ],
      "category": "scheduling-and-calendars"
    },
    "merajmehrabi--Outlook_Calendar_MCP": {
      "owner": "merajmehrabi",
      "name": "Outlook_Calendar_MCP",
      "url": "https://github.com/merajmehrabi/Outlook_Calendar_MCP",
      "imageUrl": "/freedevtools/mcp/pfp/merajmehrabi.webp",
      "description": "Manage and access Microsoft Outlook calendar events, including viewing, creating, and updating events. Provides functionality for finding optimal meeting times and supporting multiple calendars within the Outlook profile.",
      "stars": 30,
      "forks": 8,
      "license": "MIT License",
      "language": "VBScript",
      "updated_at": "2025-09-20T22:48:06Z",
      "readme_content": "# Outlook Calendar MCP Tool\n\nA Model Context Protocol (MCP) server that allows Claude to access and manage your local Microsoft Outlook calendar (Windows only).\n\n<a href=\"https://glama.ai/mcp/servers/08enllwrbp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/08enllwrbp/badge\" alt=\"Outlook Calendar MCP server\" />\n</a>\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n## Features\n\n- **View Calendar Events**: List events within a date range, view event details, check attendee status\n- **Manage Calendar Events**: Create new events and meetings, update existing events\n- **Calendar Intelligence**: Find free time slots for scheduling, identify optimal meeting times\n- **Multiple Calendar Support**: Access different calendars in your Outlook profile\n\n## Prerequisites\n\n- Windows operating system\n- Microsoft Outlook desktop client installed\n- **VBScript support** (see VBScript Installation below if you're on Windows 11 24H2+)\n- Node.js (version 14.x or higher)\n- npm (comes with Node.js)\n\n### VBScript Installation (Windows 11 24H2+ Users)\n\n**Important**: Starting with Windows 11 24H2, VBScript is no longer installed by default and must be enabled as an optional feature.\n\nIf you're experiencing issues with the MCP server not working after a Windows update, you likely need to install VBScript:\n\n1. Open **Settings** (Windows + I)\n2. Go to **Apps** → **Optional features**\n3. Click **\"View features\"** next to **\"Add an optional feature\"**\n4. Search for **\"VBScript\"**\n5. Select **VBScript** and click **Install**\n6. Restart your computer after installation\n\n**VBScript Deprecation Timeline:**\n- **Phase 1** (Late 2024+): Available as optional feature in Windows 11 24H2\n- **Phase 2** (~2027): Will no longer be enabled by default\n- **Phase 3** (Future): Complete removal from Windows\n\n*Note: Thanks to community feedback about VBScript deprecation, I'm considering architectural improvements to make the project more future-proof.*\n\n## Installation\n\n### Option 1: Install from npm\n\n```bash\nnpm install -g outlook-calendar-mcp\n```\n\nYou can also run it directly without installation using npx:\n\n```bash\nnpx outlook-calendar-mcp\n```\n\n### Option 2: Install from source\n\n1. Clone this repository or download the source code\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n3. Run the server:\n\n```bash\nnpm start\n```\n\n## MCP Server Configuration\n\nTo use this tool with Claude, you need to add it to your MCP settings configuration file.\n\n### For Claude Desktop App\n\nAdd the following to your Claude Desktop configuration file (located at `%APPDATA%\\Claude\\claude_desktop_config.json`):\n\n#### If installed globally via npm:\n\n```json\n{\n  \"mcpServers\": {\n    \"outlook-calendar\": {\n      \"command\": \"outlook-calendar-mcp\",\n      \"args\": [],\n      \"env\": {}\n    }\n  }\n}\n```\n\n#### Using npx (without installation):\n\n```json\n{\n  \"mcpServers\": {\n    \"outlook-calendar\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"outlook-calendar-mcp\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\n#### If installed from source:\n\n```json\n{\n  \"mcpServers\": {\n    \"outlook-calendar\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/outlook-calendar-mcp/src/index.js\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\n### For Claude VSCode Extension\n\nAdd the following to your Claude VSCode extension MCP settings file (located at `%APPDATA%\\Code\\User\\globalStorage\\saoudrizwan.claude-dev\\settings\\cline_mcp_settings.json`):\n\n#### If installed globally via npm:\n\n```json\n{\n  \"mcpServers\": {\n    \"outlook-calendar\": {\n      \"command\": \"outlook-calendar-mcp\",\n      \"args\": [],\n      \"env\": {}\n    }\n  }\n}\n```\n\n#### Using npx (without installation):\n\n```json\n{\n  \"mcpServers\": {\n    \"outlook-calendar\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"outlook-calendar-mcp\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\n#### If installed from source:\n\n```json\n{\n  \"mcpServers\": {\n    \"outlook-calendar\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/outlook-calendar-mcp/src/index.js\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\nFor source installation, replace `path/to/outlook-calendar-mcp` with the actual path to where you installed this tool.\n\n## Usage\n\nOnce configured, Claude will have access to the following tools:\n\n### List Calendar Events\n\n```\nlist_events\n- startDate: Start date in MM/DD/YYYY format\n- endDate: End date in MM/DD/YYYY format (optional)\n- calendar: Calendar name (optional)\n```\n\nExample: \"List my calendar events for next week\"\n\n### Create Calendar Event\n\n```\ncreate_event\n- subject: Event subject/title\n- startDate: Start date in MM/DD/YYYY format\n- startTime: Start time in HH:MM AM/PM format\n- endDate: End date in MM/DD/YYYY format (optional)\n- endTime: End time in HH:MM AM/PM format (optional)\n- location: Event location (optional)\n- body: Event description (optional)\n- isMeeting: Whether this is a meeting with attendees (optional)\n- attendees: Semicolon-separated list of attendee email addresses (optional)\n- calendar: Calendar name (optional)\n```\n\nExample: \"Add a meeting with John about the project proposal on Friday at 2 PM\"\n\n### Find Free Time Slots\n\n```\nfind_free_slots\n- startDate: Start date in MM/DD/YYYY format\n- endDate: End date in MM/DD/YYYY format (optional)\n- duration: Duration in minutes (optional)\n- workDayStart: Work day start hour (0-23) (optional)\n- workDayEnd: Work day end hour (0-23) (optional)\n- calendar: Calendar name (optional)\n```\n\nExample: \"When am I free for a 1-hour meeting this week?\"\n\n### Get Attendee Status\n\n```\nget_attendee_status\n- eventId: Event ID\n- calendar: Calendar name (optional)\n```\n\nExample: \"Who hasn't responded to my team meeting invitation?\"\n\n> **Important Note**: When using operations that require an event ID (update_event, delete_event, get_attendee_status), you must use the `id` field from the list_events response. This is the unique EntryID that Outlook uses to identify events.\n\n### Update Calendar Event\n\n```\nupdate_event\n- eventId: Event ID to update\n- subject: New event subject/title (optional)\n- startDate: New start date in MM/DD/YYYY format (optional)\n- startTime: New start time in HH:MM AM/PM format (optional)\n- endDate: New end date in MM/DD/YYYY format (optional)\n- endTime: New end time in HH:MM AM/PM format (optional)\n- location: New event location (optional)\n- body: New event description (optional)\n- calendar: Calendar name (optional)\n```\n\nExample: \"Update my team meeting tomorrow to start at 3 PM instead of 2 PM\"\n\n### Get Calendars\n\n```\nget_calendars\n```\n\nExample: \"Show me my available calendars\"\n\n## Security Notes\n\n- On first use, Outlook may display security prompts to allow script access\n- The tool only accesses your local Outlook client and does not send calendar data to external servers\n- All calendar operations are performed locally on your computer\n\n## Troubleshooting\n\n- **VBScript Not Available (Windows 11 24H2+)**: If you get errors after a Windows update, VBScript may need to be installed. See [VBScript Installation](#vbscript-installation-windows-11-24h2-users) section above\n- **\"Script execution failed\" errors**: Usually indicates VBScript is not available or Outlook is not accessible\n- **Outlook Security Prompts**: If you see security prompts from Outlook, you need to allow the script to access your Outlook data\n- **Script Execution Policy**: If you encounter script execution errors, you may need to adjust your PowerShell execution policy\n- **Path Issues**: Ensure the path in your MCP configuration file points to the correct location of the tool\n\n## Contributing\n\nWe welcome contributions to the Outlook Calendar MCP Tool! Please see our [Contributing Guide](CONTRIBUTING.md) for details on how to get started.\n\nBy participating in this project, you agree to abide by our [Code of Conduct](CODE_OF_CONDUCT.md).\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "outlook_calendar_mcp",
        "calendar",
        "calendars",
        "merajmehrabi outlook_calendar_mcp",
        "outlook_calendar_mcp manage",
        "outlook calendar"
      ],
      "category": "scheduling-and-calendars"
    },
    "mumunha--cal_dot_com_mcpserver": {
      "owner": "mumunha",
      "name": "cal_dot_com_mcpserver",
      "url": "https://github.com/mumunha/cal_dot_com_mcpserver",
      "imageUrl": "/freedevtools/mcp/pfp/mumunha.webp",
      "description": "Integrates with the Cal.com Calendar API to manage calendar appointments, enabling users to schedule, update, delete, and list appointments efficiently.",
      "stars": 2,
      "forks": 3,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-06-13T09:55:05Z",
      "readme_content": "# Cal.com Calendar MCP Server\n\nAn MCP server implementation that integrates with Cal.com Calendar API, providing appointment scheduling capabilities.\n\n## Features\n\n- **Add Appointments**: Schedule new calendar appointments with attendee details\n- **Update Appointments**: Modify existing appointment details such as time and notes\n- **Delete Appointments**: Cancel and remove existing appointments\n- **List Appointments**: View scheduled appointments for specific date ranges\n\n## Tools\n\n- **calcom_add_appointment**\n  - Create new calendar appointments\n  - Inputs:\n    - `eventTypeId` (number): The Cal.com event type ID\n    - `startTime` (string): Start time in ISO format (YYYY-MM-DDTHH:mm:ss.sssZ)\n    - `endTime` (string): End time in ISO format (YYYY-MM-DDTHH:mm:ss.sssZ)\n    - `name` (string): Attendee's name\n    - `email` (string): Attendee's email\n    - `notes` (string, optional): Additional notes for the appointment\n\n- **calcom_update_appointment**\n  - Update existing calendar appointments\n  - Inputs:\n    - `bookingId` (number): The Cal.com booking ID to update\n    - `startTime` (string, optional): New start time in ISO format\n    - `endTime` (string, optional): New end time in ISO format\n    - `notes` (string, optional): New notes for the appointment\n\n- **calcom_delete_appointment**\n  - Delete existing calendar appointments\n  - Inputs:\n    - `bookingId` (number): The Cal.com booking ID to delete\n    - `reason` (string, optional): Reason for cancellation\n\n- **calcom_list_appointments**\n  - List calendar appointments in a date range\n  - Inputs:\n    - `startDate` (string): Start date in YYYY-MM-DD format\n    - `endDate` (string): End date in YYYY-MM-DD format\n\n\n## Configuration\n\n### Getting an API Key\n1. Sign up for a [Cal.com account](https://cal.com)\n2. Navigate to Settings > Developer > API Keys\n3. Generate a new API key with appropriate permissions\n\n### Usage with Claude Desktop\nAdd this to your `claude_desktop_config.json`:\n\n### Docker\n\n```json\n{\n  \"mcpServers\": {\n    \"calcom-calendar\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"CALCOM_API_KEY\",\n        \"mcp/calcom-calendar\"\n      ],\n      \"env\": {\n        \"CALCOM_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"calcom-calendar\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-calcom-calendar\"\n      ],\n      \"env\": {\n        \"CALCOM_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n\n## Build\n\nDocker build:\n\n```bash\ndocker build -t mcp/calcom-calendar:latest -f Dockerfile .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calendars",
        "calendar",
        "appointments",
        "calendars mumunha",
        "scheduling calendars",
        "calendar appointments"
      ],
      "category": "scheduling-and-calendars"
    },
    "nspady--google-calendar-mcp": {
      "owner": "nspady",
      "name": "google-calendar-mcp",
      "url": "https://github.com/nspady/google-calendar-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/nspady.webp",
      "description": "Integrates with Google Calendar to manage events, enabling functionalities such as reading, creating, updating, and searching for calendar events through a standardized interface.",
      "stars": 667,
      "forks": 207,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T07:04:35Z",
      "readme_content": "# Google Calendar MCP Server\n\nA Model Context Protocol (MCP) server that provides Google Calendar integration for AI assistants like Claude.\n\n## Features\n\n- **Multi-Calendar Support**: List events from multiple calendars simultaneously\n- **Event Management**: Create, update, delete, and search calendar events\n- **Recurring Events**: Advanced modification capabilities for recurring events\n- **Free/Busy Queries**: Check availability across calendars\n- **Smart Scheduling**: Natural language understanding for dates and times\n- **Inteligent Import**: Add calendar events from images, PDFs or web links\n\n## Quick Start\n\n### Prerequisites\n\n1. A Google Cloud project with the Calendar API enabled\n2. OAuth 2.0 credentials (Desktop app type)\n\n### Google Cloud Setup\n\n1. Go to the [Google Cloud Console](https://console.cloud.google.com)\n2. Create a new project or select an existing one.\n3. Enable the [Google Calendar API](https://console.cloud.google.com/apis/library/calendar-json.googleapis.com) for your project. Ensure that the right project is selected from the top bar before enabling the API.\n4. Create OAuth 2.0 credentials:\n   - Go to Credentials\n   - Click \"Create Credentials\" > \"OAuth client ID\"\n   - Choose \"User data\" for the type of data that the app will be accessing\n   - Add your app name and contact information\n   - Add the following scopes (optional):\n     - `https://www.googleapis.com/auth/calendar.events` and `https://www.googleapis.com/auth/calendar`\n   - Select \"Desktop app\" as the application type (Important!)\n   - Save the auth key, you'll need to add its path to the JSON in the next step\n   - Add your email address as a test user under the [Audience screen](https://console.cloud.google.com/auth/audience)\n      - Note: it might take a few minutes for the test user to be added. The OAuth consent will not allow you to proceed until the test user has propagated.\n      - Note about test mode: While an app is in test mode the auth tokens will expire after 1 week and need to be refreshed (see Re-authentication section below).\n\n### Installation\n\n**Option 1: Use with npx (Recommended)**\n\nAdd to your Claude Desktop configuration:\n\n**macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n**Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n```json\n{\n  \"mcpServers\": {\n    \"google-calendar\": {\n      \"command\": \"npx\",\n      \"args\": [\"@cocal/google-calendar-mcp\"],\n      \"env\": {\n        \"GOOGLE_OAUTH_CREDENTIALS\": \"/path/to/your/gcp-oauth.keys.json\"\n      }\n    }\n  }\n}\n```\n\n**⚠️ Important Note for npx Users**: When using npx, you **must** specify the credentials file path using the `GOOGLE_OAUTH_CREDENTIALS` environment variable.\n\n**Option 2: Local Installation**\n\n```bash\ngit clone https://github.com/nspady/google-calendar-mcp.git\ncd google-calendar-mcp\nnpm install\nnpm run build\n```\n\nThen add to Claude Desktop config using the local path or by specifying the path with the `GOOGLE_OAUTH_CREDENTIALS` environment variable.\n\n**Option 3: Docker Installation**\n\n```bash\ngit clone https://github.com/nspady/google-calendar-mcp.git\ncd google-calendar-mcp\ncp /path/to/your/gcp-oauth.keys.json .\ndocker compose up\n```\n\nSee the [Docker deployment guide](docs/docker.md) for detailed configuration options including HTTP transport mode.\n\n### First Run\n\n1. Start Claude Desktop\n2. The server will prompt for authentication on first use\n3. Complete the OAuth flow in your browser\n4. You're ready to use calendar features!\n\n### Re-authentication\n\nIf you're in test mode (default), tokens expire after 7 days. If you are using a client like Claude Desktop it should open up a browser window to automatically re-auth. However, if you see authentication errors you can also resolve by following these steps:\n\n**For npx users:**\n```bash\nexport GOOGLE_OAUTH_CREDENTIALS=\"/path/to/your/gcp-oauth.keys.json\"\nnpx @cocal/google-calendar-mcp auth\n```\n\n**For local installation:**\n```bash\nnpm run auth\n```\n\n**To avoid weekly re-authentication**, publish your app to production mode (without verification):\n1. Go to Google Cloud Console → \"APIs & Services\" → \"OAuth consent screen\"\n2. Click \"PUBLISH APP\" and confirm\n3. Your tokens will no longer expire after 7 days but Google will show a more threatning warning when connecting to the app about it being unverified. \n\nSee [Authentication Guide](docs/authentication.md#moving-to-production-mode-recommended) for details.\n\n## Example Usage\n\nAlong with the normal capabilities you would expect for a calendar integration you can also do really dynamic, multi-step processes like:\n\n1. **Cross-calendar availability**:\n   ```\n   Please provide availability looking at both my personal and work calendar for this upcoming week.\n   I am looking for a good time to meet with someone in London for 1 hr.\n   ```\n\n2. Add events from screenshots, images and other data sources:\n   ```\n   Add this event to my calendar based on the attached screenshot.\n   ```\n   Supported image formats: PNG, JPEG, GIF\n   Images can contain event details like date, time, location, and description\n\n3. Calendar analysis:\n   ```\n   What events do I have coming up this week that aren't part of my usual routine?\n   ```\n4. Check attendance:\n   ```\n   Which events tomorrow have attendees who have not accepted the invitation?\n   ```\n5. Auto coordinate events:\n   ```\n   Here's some available that was provided to me by someone. {available times}\n   Take a look at the times provided and let me know which ones are open on my calendar.\n   ```\n\n## Available Tools\n\n| Tool | Description |\n|------|-------------|\n| `list-calendars` | List all available calendars |\n| `list-events` | List events with date filtering |\n| `search-events` | Search events by text query |\n| `create-event` | Create new calendar events |\n| `update-event` | Update existing events |\n| `delete-event` | Delete events |\n| `get-freebusy` | Check availability across calendars, including external calendars |\n| `list-colors` | List available event colors |\n\n## Documentation\n\n- [Authentication Setup](docs/authentication.md) - Detailed Google Cloud setup\n- [Advanced Usage](docs/advanced-usage.md) - Multi-account, batch operations\n- [Deployment Guide](docs/deployment.md) - HTTP transport, remote access\n- [Docker Guide](docs/docker.md) - Docker deployment with stdio and HTTP modes\n- [OAuth Verification](docs/oauth-verification.md) - Moving from test to production mode\n- [Architecture](docs/architecture.md) - Technical architecture overview\n- [Development](docs/development.md) - Contributing and testing\n- [Testing](docs/testing.md) - Unit and integration testing guide\n\n## Configuration\n\n**Environment Variables:**\n- `GOOGLE_OAUTH_CREDENTIALS` - Path to OAuth credentials file\n- `GOOGLE_CALENDAR_MCP_TOKEN_PATH` - Custom token storage location (optional)\n\n**Claude Desktop Config Location:**\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n\n## Security\n\n- OAuth tokens are stored securely in your system's config directory\n- Credentials never leave your local machine\n- All calendar operations require explicit user consent\n\n### Troubleshooting\n\n1. **OAuth Credentials File Not Found:**\n   - For npx users: You **must** specify the credentials file path using `GOOGLE_OAUTH_CREDENTIALS`\n   - Verify file paths are absolute and accessible\n\n2. **Authentication Errors:**\n   - Ensure your credentials file contains credentials for a **Desktop App** type\n   - Verify your user email is added as a **Test User** in the Google Cloud OAuth Consent screen\n   - Try deleting saved tokens and re-authenticating\n   - Check that no other process is blocking ports 3000-3004\n\n3. **Build Errors:**\n   - Run `npm install && npm run build` again\n   - Check Node.js version (use LTS)\n   - Delete the `build/` directory and run `npm run build`\n4. **\"Something went wrong\" screen during browser authentication**\n   - Perform manual authentication per the below steps\n   - Use a Chromium-based browser to open the authentication URL. Test app authentication may not be supported on some non-Chromium browsers.\n\n### Manual Authentication\nFor re-authentication or troubleshooting:\n```bash\n# For npx installations\nexport GOOGLE_OAUTH_CREDENTIALS=\"/path/to/your/credentials.json\"\nnpx @cocal/google-calendar-mcp auth\n\n# For local installations\nnpm run auth\n```\n\n## License\n\nMIT\n\n## Support\n\n- [GitHub Issues](https://github.com/nspady/google-calendar-mcp/issues)\n- [Documentation](docs/)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calendars",
        "calendar",
        "scheduling",
        "calendars nspady",
        "google calendar",
        "calendar mcp"
      ],
      "category": "scheduling-and-calendars"
    },
    "odgrim--mcp-datetime": {
      "owner": "odgrim",
      "name": "mcp-datetime",
      "url": "https://github.com/odgrim/mcp-datetime",
      "imageUrl": "/freedevtools/mcp/pfp/odgrim.webp",
      "description": "Provides datetime and timezone information for AI agents and chat interfaces, enabling access to the current time, listing available timezones, and retrieving timezone-specific data.",
      "stars": 3,
      "forks": 2,
      "license": "Mozilla Public License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-08-20T14:37:49Z",
      "readme_content": "# MCP DateTime\n\nA TypeScript implementation of a Model Context Protocol (MCP) server that provides datetime and timezone information to agentic systems and chat REPLs.\n\n## Overview\n\nMCP DateTime is a simple server that implements the [Model Context Protocol](https://github.com/model-context-protocol/mcp) to provide datetime and timezone information to AI agents and chat interfaces. It allows AI systems to:\n\n- Get the current time in the local system timezone\n- Get the current time in any valid timezone\n- List all available timezones\n- Access timezone information through URI resources\n\n## Installation\n\n### From npm\n\n```bash\nnpm install -g mcp-datetime\n```\n\n### From source\n\n```bash\ngit clone https://github.com/odgrmi/mcp-datetime.git\ncd mcp-datetime\nnpm install\nnpm run build\n```\n\n## Usage\n\n### Command Line\n\nMCP DateTime can be run in two modes:\n\n#### 1. Standard I/O Mode (Default)\n\nThis mode is ideal for integrating with AI systems that support the MCP protocol through standard input/output:\n\n```bash\nmcp-datetime\n```\n\n#### 2. Server-Sent Events (SSE) Mode\n\nThis mode starts an HTTP server that provides SSE transport for the MCP protocol:\n\n```bash\nmcp-datetime --sse\n```\n\nYou can also specify a custom port and URI prefix:\n\n```bash\nmcp-datetime --sse --port=8080 --prefix=/api/datetime\n```\n\n### Environment Variables\n\n- `PORT`: Sets the port for SSE mode (default: 3000)\n- `URI_PREFIX`: Sets the URI prefix for SSE mode (default: none)\n\n## Available Tools\n\nMCP DateTime provides the following tools:\n\n### `get-current-time`\n\nReturns the current time in the system's local timezone.\n\n### `get-current-timezone`\n\nReturns the current system timezone.\n\n### `get-time-in-timezone`\n\nReturns the current time in a specified timezone.\n\nParameters:\n- `timezone`: The timezone to get the current time for (e.g., \"America/New_York\")\n\n### `list-timezones`\n\nReturns a list of all available timezones.\n\n## Resource URIs\n\nMCP DateTime also provides access to timezone information through resource URIs:\n\n### `datetime://{timezone}`\n\nReturns the current time in the specified timezone.\n\nExample: `datetime://America/New_York`\n\n### `datetime://list`\n\nReturns a list of all available timezones.\n\n## Common Timezones\n\nThe following common timezones are always available:\n\n- UTC\n- Europe/London\n- Europe/Paris\n- Europe/Berlin\n- America/New_York\n- America/Chicago\n- America/Denver\n- America/Los_Angeles\n- Asia/Tokyo\n- Asia/Shanghai\n- Asia/Kolkata\n- Australia/Sydney\n- Pacific/Auckland\n\n## SSE Endpoints\n\nWhen running in SSE mode, the following endpoints are available:\n\n- `/sse`: SSE connection endpoint\n- `/message`: Message endpoint for client-to-server communication\n- `/info`: Basic server information\n\nIf a URI prefix is specified, it will be prepended to all endpoints.\n\n## Integration with AI Systems\n\nMCP DateTime can be integrated with AI systems that support the Model Context Protocol. This allows AI agents to access accurate timezone and datetime information.\n\n## Development\n\n### Prerequisites\n\n- Node.js 14.16 or higher\n- npm\n\n### Setup\n\n```bash\ngit clone https://github.com/odgrim/mcp-datetime.git\ncd mcp-datetime\nnpm install\n```\n\n### Build\n\n```bash\nnpm run build\n```\n\n### Run in Development Mode\n\n```bash\nnpm run dev        # Standard I/O mode\nnpm run dev:sse    # SSE mode\n```\n\n## License\n\nThis project is licensed under the Mozilla Public License 2.0 - see the [LICENSE](LICENSE) file for details. \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "datetime",
        "timezones",
        "timezone",
        "calendars odgrim",
        "mcp datetime",
        "datetime provides"
      ],
      "category": "scheduling-and-calendars"
    },
    "raghavared--calendar-mcp": {
      "owner": "raghavared",
      "name": "calendar-mcp",
      "url": "https://github.com/raghavared/calendar-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/raghavared.webp",
      "description": "Manage Google Calendar events using natural language commands, enabling users to create, update, list, and delete events with automatic OAuth2 authentication. It offers seamless integration with the Google Calendar API for efficient event management.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-04-19T11:59:10Z",
      "readme_content": "# Calendar AutoAuth MCP Server\n\nA Model Context Protocol (MCP) server for Google Calendar integration in Cluade Desktop with auto authentication support. This server enables AI assistants to manage Google Calendar events through natural language interactions.\n\n![](https://badge.mcpx.dev?type=server 'MCP Server')\n[![smithery badge](https://smithery.ai/badge/@raghavared/calendar-mcp)](https://smithery.ai/server/@raghavared/calendar-mcp)\n[![License: ISC](https://img.shields.io/badge/License-ISC-blue.svg)](https://opensource.org/licenses/ISC)\n\n## Features\n\n- Create calendar events with title, time, description, and location\n- Retrieve event details by event ID\n- Update existing events (title, time, description, location)\n- Delete events\n- List events within a specified time range\n- Full integration with Google Calendar API\n- Simple OAuth2 authentication flow with auto browser launch\n- Support for both Desktop and Web application credentials\n- Global credential storage for convenience\n\n## Installation & Authentication\n\n### Installing via Smithery\n\nTo install Calendar AutoAuth Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@raghavared/calendar-mcp):\n\n```bash\nnpx -y @smithery/cli install @raghavared/calendar-mcp --client claude\n```\n\n1. Create a Google Cloud Project and obtain credentials:\n\n   a. Create a Google Cloud Project:\n      - Go to [Google Cloud Console](https://console.cloud.google.com/)\n      - Create a new project or select an existing one\n      - Enable the Google Calendar API for your project\n\n   b. Create OAuth 2.0 Credentials:\n      - Go to \"APIs & Services\" > \"Credentials\"\n      - Click \"Create Credentials\" > \"OAuth client ID\"\n      - Choose either \"Desktop app\" or \"Web application\" as application type\n      - Give it a name and click \"Create\"\n      - For Web application, add `http://localhost:3000/v2/auth/google/callback` to the authorized redirect URIs\n      - Download the JSON file of your client's OAuth keys\n      - Rename the key file to `token.json`\n\n2. Run Authentication:\n\n   You can authenticate in two ways:\n\n   a. Global Authentication (Recommended):\n   ```bash\n   # First time: Place token.json in your home directory's .calendar-mcp folder\n   mkdir -p ~/.calendar-mcp\n   mv token.json ~/.calendar-mcp/\n\n   # Run authentication from anywhere\n   npx @raghavared/calendar-mcp auth\n   ```\n\n   b. Local Authentication:\n   ```bash\n   # Place token.json in your current directory\n   # The file will be automatically copied to global config\n   npx @raghavared/calendar-mcp auth\n   ```\n\n   The authentication process will:\n   - Look for `token.json` in the current directory or `~/.calendar-mcp/`\n   - If found in current directory, copy it to `~/.calendar-mcp/`\n   - Open your default browser for Google authentication\n   - Save credentials as `~/.calendar-mcp/credentials.json`\n\n   > **Note**: \n   > - After successful authentication, credentials are stored globally in `~/.calendar-mcp/` and can be used from any directory\n   > - Both Desktop app and Web application credentials are supported\n   > - For Web application credentials, make sure to add `http://localhost:3000/v2/auth/google/callback` to your authorized redirect URIs\n\n3. Configure in Claude Desktop:\n\n```json\n{\n  \"mcpServers\": {\n    \"calendar\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@raghavared/calendar-mcp\"\n      ]\n    }\n  }\n}\n```\n\n### Docker Support\n\nIf you prefer using Docker:\n\n1. Authentication:\n```bash\ndocker run -i --rm \\\n  --mount type=bind,source=/path/to/token.json,target=/token.json \\\n  -v mcp-calendar:/path \\\n  -e CALENDAR_OAUTH_PATH=/token.json \\\n  -e \"CALENDAR_CREDENTIALS_PATH=/path/credentials.json\" \\\n  -p 3000:3000 \\\n  mcp/calendar auth\n```\n\n2. Usage:\n```json\n{\n  \"mcpServers\": {\n    \"calendar\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-v\",\n        \"mcp-calendar:/path\",\n        \"-e\",\n        \"CALENDAR_CREDENTIALS_PATH=/path/credentials.json\",\n        \"mcp/calendar\"\n      ]\n    }\n  }\n}\n```\n\n## Usage Examples\n\nThe server provides several tools that can be used through the Claude Desktop:\n\n### Create Event\n```json\n{\n  \"summary\": \"Team Meeting\",\n  \"start\": {\n    \"dateTime\": \"2024-01-20T10:00:00Z\"\n  },\n  \"end\": {\n    \"dateTime\": \"2024-01-20T11:00:00Z\"\n  },\n  \"description\": \"Weekly team sync\",\n  \"location\": \"Conference Room A\"\n}\n```\n\n### List Events\n```json\n{\n  \"timeMin\": \"2024-01-01T00:00:00Z\",\n  \"timeMax\": \"2024-12-31T23:59:59Z\",\n  \"maxResults\": 10,\n  \"orderBy\": \"startTime\"\n}\n```\n\n### Update Event\n```json\n{\n  \"eventId\": \"event123\",\n  \"summary\": \"Updated Meeting Title\",\n  \"start\": {\n    \"dateTime\": \"2024-01-20T11:00:00Z\"\n  },\n  \"end\": {\n    \"dateTime\": \"2024-01-20T12:00:00Z\"\n  }\n}\n```\n\n### Delete Event\n```json\n{\n  \"eventId\": \"event123\"\n}\n```\n\n## Security Notes\n\n- OAuth credentials are stored securely in your local environment (`~/.calendar-mcp/`)\n- The server uses offline access to maintain persistent authentication\n- Never share or commit your credentials to version control\n- Regularly review and revoke unused access in your Google Account settings\n- Credentials are stored globally but are only accessible by the current user\n\n## Troubleshooting\n\n1. **OAuth Keys Not Found**\n   - Make sure `token.json` is in either your current directory or `~/.calendar-mcp/`\n   - Check file permissions\n\n2. **Invalid Credentials Format**\n   - Ensure your OAuth keys file contains either `web` or `installed` credentials\n   - For web applications, verify the redirect URI is correctly configured\n\n3. **Port Already in Use**\n   - If port 3000 is already in use, please free it up before running authentication\n   - You can find and stop the process using that port\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the ISC License.\n\n## Author\n\nRaghava Reddy\n\n## Support\n\nIf you encounter any issues or have questions, please file an issue on the GitHub repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calendars",
        "calendar",
        "scheduling",
        "google calendar",
        "calendars raghavared",
        "calendar api"
      ],
      "category": "scheduling-and-calendars"
    },
    "rishipradeep-think41--google-calendar-mcp": {
      "owner": "rishipradeep-think41",
      "name": "google-calendar-mcp",
      "url": "https://github.com/rishipradeep-think41/google-calendar-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/rishipradeep-think41.webp",
      "description": "Manage events, retrieve calendar data, and automate scheduling tasks through Google Calendar. Facilitate seamless interaction with calendar functionalities using a standardized protocol.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-05-07T18:51:10Z",
      "readme_content": "# google-calendar-mcp",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calendars",
        "calendar",
        "scheduling",
        "google calendar",
        "scheduling calendars",
        "calendars rishipradeep"
      ],
      "category": "scheduling-and-calendars"
    },
    "rishipradeep-think41--gsuite-mcp": {
      "owner": "rishipradeep-think41",
      "name": "gsuite-mcp",
      "url": "https://github.com/rishipradeep-think41/gsuite-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/rishipradeep-think41.webp",
      "description": "Manage emails and calendar events through a unified interface by interacting with Gmail and Calendar APIs. Automate tasks such as sending emails and scheduling events programmatically.",
      "stars": 25,
      "forks": 17,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-23T09:49:14Z",
      "readme_content": "# Google Workspace MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@rishipradeep-think41/gsuite-mcp)](https://smithery.ai/server/@rishipradeep-think41/gsuite-mcp)\n\nA Model Context Protocol (MCP) server that provides tools for interacting with Gmail and Calendar APIs. This server enables you to manage your emails and calendar events programmatically through the MCP interface.\n\n## Features\n\n### Gmail Tools\n- `list_emails`: List recent emails from your inbox with optional filtering\n- `search_emails`: Advanced email search with Gmail query syntax\n- `send_email`: Send new emails with support for CC and BCC\n- `modify_email`: Modify email labels (archive, trash, mark read/unread)\n\n### Calendar Tools\n- `list_events`: List upcoming calendar events with date range filtering\n- `create_event`: Create new calendar events with attendees\n- `update_event`: Update existing calendar events\n- `delete_event`: Delete calendar events\n\n## Prerequisites\n\n1. **Node.js**: Install Node.js version 14 or higher\n2. **Google Cloud Console Setup**:\n   - Go to [Google Cloud Console](https://console.cloud.google.com/)\n   - Create a new project or select an existing one\n   - Enable the Gmail API and Google Calendar API:\n     1. Go to \"APIs & Services\" > \"Library\"\n     2. Search for and enable \"Gmail API\"\n     3. Search for and enable \"Google Calendar API\"\n   - Set up OAuth 2.0 credentials:\n     1. Go to \"APIs & Services\" > \"Credentials\"\n     2. Click \"Create Credentials\" > \"OAuth client ID\"\n     3. Choose \"Web application\"\n     4. Set \"Authorized redirect URIs\" to include: `http://localhost:4100/code`\n     5. Note down the Client ID and Client Secret\n\n## Setup Instructions\n\n### Installing via Smithery\n\nTo install gsuite-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@rishipradeep-think41/gsuite-mcp):\n\n```bash\nnpx -y @smithery/cli install @rishipradeep-think41/gsuite-mcp --client claude\n```\n\n### Installing Manually\n1. **Clone and Install**:\n   ```bash\n   git clone https://github.com/epaproditus/google-workspace-mcp-server.git\n   cd google-workspace-mcp-server\n   npm install\n   ```\n\n2. **Create OAuth Credentials**:\n   Create a `credentials.json` file in the root directory:\n   ```json\n   {\n       \"web\": {\n           \"client_id\": \"YOUR_CLIENT_ID\",\n           \"client_secret\": \"YOUR_CLIENT_SECRET\",\n           \"redirect_uris\": [\"http://localhost:4100/code\"],\n           \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n           \"token_uri\": \"https://oauth2.googleapis.com/token\"\n       }\n   }\n   ```\n\n3. **Get Refresh Token**:\n   ```bash\n   node get-refresh-token.js\n   ```\n   This will:\n   - Open your browser for Google OAuth authentication\n   - Request the following permissions:\n     - `https://www.googleapis.com/auth/gmail.modify`\n     - `https://www.googleapis.com/auth/calendar`\n     - `https://www.googleapis.com/auth/gmail.send`\n   - Save the credentials to `token.json`\n   - Display the refresh token in the console\n\n4. **Configure MCP Settings**:\n   Add the server configuration to your MCP settings file:\n   - For VSCode Claude extension: `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`\n   - For Claude desktop app: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n   Add this to the `mcpServers` object:\n   ```json\n   {\n     \"mcpServers\": {\n       \"google-workspace\": {\n         \"command\": \"node\",\n         \"args\": [\"/path/to/google-workspace-server/build/index.js\"],\n         \"env\": {\n           \"GOOGLE_CLIENT_ID\": \"your_client_id\",\n           \"GOOGLE_CLIENT_SECRET\": \"your_client_secret\",\n           \"GOOGLE_REFRESH_TOKEN\": \"your_refresh_token\"\n         }\n       }\n     }\n   }\n   ```\n\n5. **Build and Run**:\n   ```bash\n   npm run build\n   ```\n\n## Usage Examples\n\n### Gmail Operations\n\n1. **List Recent Emails**:\n   ```json\n   {\n     \"maxResults\": 5,\n     \"query\": \"is:unread\"\n   }\n   ```\n\n2. **Search Emails**:\n   ```json\n   {\n     \"query\": \"from:example@gmail.com has:attachment\",\n     \"maxResults\": 10\n   }\n   ```\n\n3. **Send Email**:\n   ```json\n   {\n     \"to\": \"recipient@example.com\",\n     \"subject\": \"Hello\",\n     \"body\": \"Message content\",\n     \"cc\": \"cc@example.com\",\n     \"bcc\": \"bcc@example.com\"\n   }\n   ```\n\n4. **Modify Email**:\n   ```json\n   {\n     \"id\": \"message_id\",\n     \"addLabels\": [\"UNREAD\"],\n     \"removeLabels\": [\"INBOX\"]\n   }\n   ```\n\n### Calendar Operations\n\n1. **List Events**:\n   ```json\n   {\n     \"maxResults\": 10,\n     \"timeMin\": \"2024-01-01T00:00:00Z\",\n     \"timeMax\": \"2024-12-31T23:59:59Z\"\n   }\n   ```\n\n2. **Create Event**:\n   ```json\n   {\n     \"summary\": \"Team Meeting\",\n     \"location\": \"Conference Room\",\n     \"description\": \"Weekly sync-up\",\n     \"start\": \"2024-01-24T10:00:00Z\",\n     \"end\": \"2024-01-24T11:00:00Z\",\n     \"attendees\": [\"colleague@example.com\"]\n   }\n   ```\n\n3. **Update Event**:\n   ```json\n   {\n     \"eventId\": \"event_id\",\n     \"summary\": \"Updated Meeting Title\",\n     \"location\": \"Virtual\",\n     \"start\": \"2024-01-24T11:00:00Z\",\n     \"end\": \"2024-01-24T12:00:00Z\"\n   }\n   ```\n\n4. **Delete Event**:\n   ```json\n   {\n     \"eventId\": \"event_id\"\n   }\n   ```\n\n## Troubleshooting\n\n1. **Authentication Issues**:\n   - Ensure all required OAuth scopes are granted\n   - Verify client ID and secret are correct\n   - Check if refresh token is valid\n\n2. **API Errors**:\n   - Check Google Cloud Console for API quotas and limits\n   - Ensure APIs are enabled for your project\n   - Verify request parameters match the required format\n\n## License\n\nThis project is licensed under the MIT License.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gsuite",
        "scheduling",
        "calendars",
        "gsuite mcp",
        "gmail calendar",
        "emails scheduling"
      ],
      "category": "scheduling-and-calendars"
    },
    "samay58--time-mcp": {
      "owner": "samay58",
      "name": "time-mcp",
      "url": "https://github.com/samay58/time-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/samay58.webp",
      "description": "Provides real-time, timezone-aware date and time information. Integrates seamlessly with Claude AI to retrieve the current time in any IANA timezone via simple JSON responses.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-12T00:23:15Z",
      "readme_content": "# time-mcp\n\nA Claude Model Configuration Protocol (MCP) server that provides real-time timezone-aware date and time information.\n\n## Features\n\n- Get current time in any IANA timezone\n- Easy integration with Claude AI through MCP\n- Comprehensive timezone support using Python's zoneinfo module\n- Simple JSON responses in ISO format\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/time-mcp.git\ncd time-mcp\n\n# Set up virtual environment (using uv)\nuv venv\nsource .venv/bin/activate\n\n# Install the package\npip install -e .\n```\n\n## Usage\n\n### Running the Server\n\n```bash\npython -m src.time_mcp.server\n```\n\nThis starts the MCP server locally, making the time tool available to Claude.\n\n### Available Tools\n\n- `get_current_time`: Returns the current time in the specified timezone\n  - Parameter: `timezone` (string) - Any valid IANA timezone (e.g., \"America/New_York\", \"Europe/London\", \"Asia/Tokyo\")\n  - Default: \"UTC\" if no timezone is specified\n\n## Development\n\n```bash\n# Run tests\npytest tests/\n\n# Lint code\nruff check .\n\n# Format code\nruff format .\n```\n\n## Requirements\n\n- Python 3.10+\n- MCP library\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "timezone",
        "scheduling",
        "calendars",
        "samay58 time",
        "calendars samay58",
        "timezone aware"
      ],
      "category": "scheduling-and-calendars"
    },
    "shadowfax92--apple-calendar-mcp": {
      "owner": "shadowfax92",
      "name": "apple-calendar-mcp",
      "url": "https://github.com/shadowfax92/apple-calendar-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/shadowfax92.webp",
      "description": "Interact with Apple Calendars by accessing, creating, updating, and deleting calendar events through a standardized interface on macOS.",
      "stars": 4,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-23T06:00:44Z",
      "readme_content": "# MCP Apple Calendars\n\nA Model Context Protocol (MCP) server for interacting with Apple Calendars on macOS. This module allows AI models to access and manipulate calendar data through a standardized interface.\n\n## Prerequisites\n\n- macOS 12.0 or later\n- Node.js 16.0 or later\n- [Calendar API Bridge](https://github.com/your-username/swift-apple-api) running locally\n\n## Installation\n\n1. Clone this repository\n2. Install dependencies:\n   ```\n   npm install\n   ```\n3. Build the TypeScript code:\n   ```\n   npm run build\n   ```\n\n## Usage\n\n1. Make sure the Calendar API Bridge is running on port 8080\n2. Start the MCP server:\n   ```\n   npm start\n   ```\n\n## Available Tools\n\nThe MCP server provides the following tools for AI models:\n\n- `getCalendars`: List all available calendars\n- `getCalendarEvents`: Get events from a specific calendar\n- `createCalendarEvent`: Create a new event in a calendar\n- `updateCalendarEvent`: Update an existing event\n- `deleteCalendarEvent`: Delete an event from a calendar\n\n## Date Formats\n\nWhen creating or updating events, you can use any of the following date formats:\n\n1. ISO8601 with milliseconds and Z timezone (recommended):\n   ```\n   2025-03-09T10:00:00.000Z\n   ```\n\n2. ISO8601 without milliseconds:\n   ```\n   2025-03-09T10:00:00\n   ```\n\n3. ISO8601 with space instead of T:\n   ```\n   2025-03-09 10:00:00\n   ```\n\n4. ISO8601 with forward slashes:\n   ```\n   2025/03/09 10:00:00\n   ```\n\nThe Calendar API Bridge has been updated to handle these date formats automatically.\n\n## Development\n\nTo run the server in development mode with automatic reloading:\n\n```\nnpm run dev\n```\n\n## License\n\nMIT ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calendars",
        "calendar",
        "scheduling",
        "calendar mcp",
        "calendars shadowfax92",
        "apple calendars"
      ],
      "category": "scheduling-and-calendars"
    },
    "takumi0706--google-calendar-mcp": {
      "owner": "takumi0706",
      "name": "google-calendar-mcp",
      "url": "https://github.com/takumi0706/google-calendar-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/takumi0706.webp",
      "description": "Integrate with Google Calendar to manage events using natural language commands, enabling the creation, updating, and deletion of calendar events. Supports recurring events through designated parameters for enhanced scheduling flexibility.",
      "stars": 53,
      "forks": 7,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T02:55:36Z",
      "readme_content": "# Google Calendar MCP Server\n![Apr-15-2025 12-17-08](https://github.com/user-attachments/assets/8970351e-c90d-42e3-8609-b4dfe33f8615)\n\n\n> **🔔 VERSION UPDATE NOTICE 🔔**  \n> Version 1.0.5 adds support for recurring events through the `recurrence` parameter in both `createEvent` and `updateEvent` tools. This allows you to create and modify recurring events directly without having to set them up manually after creation.\n\n![](https://badge.mcpx.dev?type=server 'MCP Server')\n![Version](https://img.shields.io/badge/version-1.0.7-blue.svg)\n![License](https://img.shields.io/badge/license-MIT-green.svg)\n\n[![日本語](https://img.shields.io/badge/日本語-クリック-青)](README.ja.md)\n[![English](https://img.shields.io/badge/English-Click-blue)](README.md)\n\n\n## Project Overview\n\nGoogle Calendar MCP Server is an MCP (Model Context Protocol) server implementation that enables integration between Google Calendar and Claude Desktop. This project enables Claude to interact with the user's Google Calendar, providing the ability to display, create, update, and delete calendar events through natural language interaction.\n\n### Core Features\n\n- **Google Calendar integration**: Provides a bridge between Claude Desktop and the Google Calendar API\n- **MCP implementation**: Follows the Model Context Protocol specification for AI assistant tool integration\n- **OAuth2 authentication**: Handles the Google API authentication flow securely\n- **Event management**: Supports comprehensive calendar event operations (get, create, update, delete)\n- **Color support**: Ability to set and update event colors using colorId parameter\n- **STDIO transport**: Uses standard input/output for communication with Claude Desktop\n\n## Technical Architecture\n\nThis project uses:\n\n- **TypeScript**: For type-safe code development\n- **MCP SDK**: Uses `@modelcontextprotocol/sdk` for integration with Claude Desktop\n- **Google API**: Uses `googleapis` for Google Calendar API access\n- **Hono**: Lightweight and fast web framework for the authentication server\n- **OAuth2 Providers**: Uses `@hono/oauth-providers` for PKCE-enabled OAuth2 flow\n- **Zod**: Implements schema validation for request/response data\n- **Environment-based configuration**: Uses dotenv for configuration management\n- **AES-256-GCM**: For token encryption using Node.js crypto module\n- **Open**: For automatic browser launching during authentication\n- **Readline**: For manual authentication input in server environments\n- **Jest**: For unit testing and coverage\n- **GitHub Actions**: For CI/CD\n\n## Main Components\n\n1. **MCP Server**: Core server implementation that handles communication with Claude Desktop\n2. **Google Calendar Tools**: Calendar operations (retrieval, creation, update, deletion)\n3. **Authentication Handler**: Management of OAuth2 flow with Google API\n4. **Schema Validation**: Ensuring data integrity in all operations\n5. **Token Manager**: Secure handling of authentication tokens\n\n## Available Tools\n\nThis MCP server provides the following tools for interacting with Google Calendar:\n\n### 1. getEvents\n\nRetrieves calendar events with various filtering options.\n\n**Parameters:**\n- `calendarId` (optional): Calendar ID (uses primary calendar if omitted, empty string, null, or undefined)\n- `timeMin` (optional): Start time for event retrieval (ISO 8601 format, e.g., \"2025-03-01T00:00:00Z\"). Empty strings, null, or undefined values are ignored\n- `timeMax` (optional): End time for event retrieval (ISO 8601 format). Empty strings, null, or undefined values are ignored\n- `maxResults` (optional): Maximum number of events to retrieve (default: 10)\n- `orderBy` (optional): Sort order (\"startTime\" or \"updated\"). Defaults to \"startTime\" if empty string, null, or undefined\n\n### 2. createEvent\n\nCreates a new calendar event.\n\n**Parameters:**\n- `calendarId` (optional): Calendar ID (uses primary calendar if omitted)\n- `event`: Event details object containing:\n  - `summary` (required): Event title\n  - `description` (optional): Event description\n  - `location` (optional): Event location\n  - `start`: Start time object with:\n    - `dateTime` (optional): ISO 8601 format (e.g., \"2025-03-15T09:00:00+09:00\")\n    - `date` (optional): YYYY-MM-DD format for all-day events\n    - `timeZone` (optional): Time zone (e.g., \"Asia/Tokyo\")\n  - `end`: End time object (same format as start)\n  - `attendees` (optional): Array of attendees with email and optional displayName\n  - `colorId` (optional): Event color ID (1-11)\n  - `recurrence` (optional): Array of recurrence rules in RFC5545 format (e.g., [\"RRULE:FREQ=WEEKLY;BYDAY=MO,WE,FR\"])\n\n### 3. updateEvent\n\nUpdates an existing calendar event. The function fetches the existing event data first and merges it with the update data, preserving fields that are not included in the update request.\n\n**Parameters:**\n- `calendarId` (optional): Calendar ID (uses primary calendar if omitted)\n- `eventId` (required): ID of the event to update\n- `event`: Event details object containing fields to update (same structure as createEvent, all fields optional)\n  - Only fields that are explicitly provided will be updated\n  - Fields not included in the update request will retain their existing values\n  - This allows for partial updates without losing data\n  - `recurrence` parameter can be updated to modify recurring event patterns\n\n### 4. deleteEvent\n\nDeletes a calendar event.\n\n**Parameters:**\n- `calendarId` (optional): Calendar ID (uses primary calendar if omitted)\n- `eventId` (required): ID of the event to delete\n\n### 5. authenticate\n\nRe-authenticates with Google Calendar. This is useful when you want to switch between different Google accounts without having to restart Claude.\n\n**Parameters:**\n- None\n\n## Development Guidelines\n\nWhen adding new functions, modifying code, or fixing bugs, please semantically increase the version for each change using `npm version` command.\nAlso, please make sure that your coding is clear and follows all the necessary coding rules, such as OOP.\nThe version script will automatically run `npm install` when the version is updated, but you should still build, run lint, and test your code before submitting it.\n\n### Code Structure\n\n- **src/**: Source code directory\n  - **auth/**: Authentication handling\n  - **config/**: Configuration settings\n  - **mcp/**: MCP server implementation\n  - **tools/**: Google Calendar tool implementations\n  - **utils/**: Utility functions and helpers\n\n### Best Practices\n\n- Proper typing according to TypeScript best practices\n- Maintaining comprehensive error handling\n- Ensure proper authentication flow\n- Keep dependencies up to date\n- Write clear documentation for all functions\n- Implement security best practices\n- Follow the OAuth 2.1 authentication standards\n- Use schema validation for all input/output data\n\n### Testing\n\n- Implement unit tests for core functionality\n- Thoroughly test authentication flow\n- Verify calendar manipulation against Google API\n- Run tests with coverage reports\n- Ensure security tests are included\n\n## Deployment\n\nThis package is published on npm as `@takumi0706/google-calendar-mcp`:\n\n```bash\nnpx @takumi0706/google-calendar-mcp@1.0.7\n```\n\n### Prerequisites\n\n1. Create a Google Cloud Project and enable the Google Calendar API\n2. Configure OAuth2 credentials in the Google Cloud Console\n3. Set up environment variables:\n\n```bash\n# Create a .env file with your Google OAuth credentials\nGOOGLE_CLIENT_ID=your_client_id\nGOOGLE_CLIENT_SECRET=your_client_secret\nGOOGLE_REDIRECT_URI=http://localhost:4153/oauth2callback\n# Optional: Token encryption key (auto-generated if not provided)\nTOKEN_ENCRYPTION_KEY=32-byte-hex-key\n# Optional: Auth server port and host (default port: 4153, host: localhost)\nAUTH_PORT=4153\nAUTH_HOST=localhost\n# Optional: MCP server port and host (default port: 3000, host: localhost)\nPORT=3000\nHOST=localhost\n# Optional: Enable manual authentication (useful when localhost is not accessible)\nUSE_MANUAL_AUTH=true\n```\n\n### Claude Desktop Configuration\n\nAdd the server to your `claude_desktop_config.json`. If you're running in an environment where localhost is not accessible, add the `USE_MANUAL_AUTH` environment variable set to \"true\".\n\n```json\n{\n  \"mcpServers\": {\n    \"google-calendar\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@takumi0706/google-calendar-mcp\"\n      ],\n      \"env\": {\n        \"GOOGLE_CLIENT_ID\": \"your_client_id\",\n        \"GOOGLE_CLIENT_SECRET\": \"your_client_secret\",\n        \"GOOGLE_REDIRECT_URI\": \"http://localhost:4153/oauth2callback\"\n      }\n    }\n  }\n}\n```\n\n## Security Considerations\n\n- **OAuth tokens** are stored in memory only (not stored in a file-based storage)\n- **Sensitive credentials** must be provided as environment variables\n- **Token encryption** using AES-256-GCM for secure storage\n- **PKCE implementation** with explicit code_verifier and code_challenge generation\n- **State parameter validation** for CSRF protection\n- **Rate limiting** for API endpoint protection\n- **Input validation** with Zod schema\n\nFor more details, see [SECURITY.md](SECURITY.md).\n\n## Maintenance\n\n- Regular updates to maintain compatibility with the Google Calendar API\n- Version updates are documented in README.md\n\n## Troubleshooting\n\nIf you encounter any issues:\n\n1. Make sure your Google OAuth credentials are correctly configured\n2. Ensure you have sufficient permissions for Google Calendar API access\n3. Verify your Claude Desktop configuration is correct\n\n### Common Errors\n\n- **JSON Parsing Errors**: If you see errors like `Unexpected non-whitespace character after JSON at position 4 (line 1 column 5)`, it's typically due to malformed JSON-RPC messages. This issue has been fixed in version 0.6.7 and later. If you're still experiencing these errors, please update to the latest version.\n- **Authentication Errors**: Verify your Google OAuth credentials\n- **Invalid state parameter**: If you see `Authentication failed: Invalid state parameter` when re-authenticating, update to version 1.0.3 or later which fixes the OAuth server lifecycle management. In older versions, you may need to close port 4153 and restart the application.\n- **Connection Errors**: Make sure only one instance of the server is running\n- **Disconnection Issues**: Ensure your server is properly handling MCP messages without custom TCP sockets\n- **Cannot access localhost**: If you're running the application in an environment where localhost is not accessible (like a remote server or container), enable manual authentication by setting `USE_MANUAL_AUTH=true`. This will allow you to manually enter the authorization code shown by Google after authorizing the application.\n- **MCP Parameter Validation Errors**: If you see error -32602 with empty string parameters, update to version 1.0.7 or later which handles empty strings, null, and undefined values properly.\n\n## Version History\n\n### Version 1.0.7 Changes\n- Enhanced parameter validation for MCP tools to properly handle empty strings, null, and undefined values\n- Fixed MCP error -32602 when empty string parameters were passed to getEvents tool\n- Improved preprocessArgs function to skip empty values, allowing Zod schema defaults to be applied correctly\n- Added comprehensive test coverage for empty parameter handling\n\n### Version 1.0.6 Changes\n- Fixed the scope is not needed in this google calendar mcp server\n\n### Version 1.0.5 Changes\n- Added support for recurring events through the `recurrence` parameter in both `createEvent` and `updateEvent` tools\n- Allows creation and modification of recurring events directly without manual setup\n\n### Version 1.0.4 Changes\n- Maintenance release with version number update\n- No functional changes from version 1.0.3\n- Ensures compatibility with the latest dependencies\n\n### Version 1.0.3 Changes\n- Added new `authenticate` tool to allow re-authentication without restarting Claude\n- Made it possible to switch between different Google accounts during a session\n- Exposed authentication functionality through the MCP interface\n- Enhanced user experience by eliminating the need to restart for account switching\n- Added manual authentication option for environments where localhost is not accessible\n- Implemented readline interface for entering authorization codes manually\n- Added USE_MANUAL_AUTH environment variable to enable manual authentication\n- Updated zod dependency to the latest version (3.24.2)\n- Improved schema validation with the latest zod features\n- Enhanced code stability and security\n- Fixed \"Invalid state parameter\" error during re-authentication\n- Modified OAuth server to start on-demand and shut down after authentication\n- Improved server lifecycle management to prevent port conflicts\n- Enhanced error handling for authentication flow\n\n### Version 1.0.2 Changes\n- Fixed `updateEvent` function to preserve existing event data when performing partial updates\n- Added `getEvent` function to fetch existing event data before updating\n- Modified `updateEvent` to merge update data with existing data to prevent data loss\n- Updated schema validation to make all fields optional in update requests\n- Improved documentation for the `updateEvent` function\n\n### Version 1.0.1 Changes\n- Fixed compatibility issue with Node.js v20.9.0+ and the 'open' package (v10+)\n- Replaced static import with dynamic import for the ESM-only 'open' package\n- Improved error handling for browser opening during OAuth authentication\n- Enhanced code comments for better maintainability\n\n### Version 1.0.0 Changes\n- Major version release marking production readiness\n- Comprehensive code refactoring for improved maintainability\n- Internationalization of all messages and comments (translated Japanese to English)\n- Enhanced code consistency and readability\n- Improved error messages for better user experience\n- Updated documentation to reflect current state of the project\n- Standardized coding style throughout the codebase\n\n### Version 0.8.0 Changes\n- Enhanced OAuth authentication flow to handle refresh token issues\n- Added `prompt: 'consent'` parameter to force Google to show the consent screen and provide a new refresh token\n- Modified authentication flow to work with just an access token if a refresh token is not available\n- Improved token refresh logic to handle cases where there's no refresh token or if the refresh token is invalid\n- Updated token storage to save refreshed access tokens for better token management\n- Fixed potential infinite loop in token refresh logic\n\n## Installation\n\n### Quick Start (Recommended)\n\nInstall directly from npm:\n\n```bash\nnpm install -g @takumi0706/google-calendar-mcp\n```\n\n### Manual Installation\n\nFor development or customization:\n\n```bash\n# Clone the repository\ngit clone https://github.com/takumi0706/google-calendar-mcp.git\ncd google-calendar-mcp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Run the server\nnpm start\n```\n\n## Production Deployment\n\nFor production use, the server requires valid Google OAuth credentials. The server will fail to start without proper credentials, ensuring security compliance.\n\n## Testing\n\nTo run the tests:\n\n```bash\n# Run all tests\nnpm test\n\n# Run tests with coverage report\nnpm test -- --coverage\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calendars",
        "calendar",
        "scheduling",
        "scheduling calendars",
        "calendars takumi0706",
        "calendar mcp"
      ],
      "category": "scheduling-and-calendars"
    },
    "thisnick--google-calendar-mcp": {
      "owner": "thisnick",
      "name": "google-calendar-mcp",
      "url": "https://github.com/thisnick/google-calendar-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/thisnick.webp",
      "description": "Manage Google Calendar events by creating, modifying, and accessing scheduled items through MCP URIs. Features include structured event data handling and tools for generating calendar insights and listing upcoming events.",
      "stars": 2,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-07T18:23:04Z",
      "readme_content": "# Google Calendar MCP Server\n\nInteract with your Google Calendar through Claude Desktop using the Model Context Protocol (MCP).\n\nThis is a TypeScript-based MCP server that implements Google Calendar integration. It demonstrates core MCP concepts while providing:\n\n- Calendar event management through MCP URIs\n- Tools for creating and modifying events\n- Prompts for generating calendar insights\n\n## Features\n\n### Resources\n- Access calendar events via MCP URIs\n- Each event has title, time, description, and attendees\n- Structured event data with proper mime types\n\n### Tools\n- `create_event` - Create new calendar events\n  - Takes title, time, and other event details as parameters\n  - Directly interfaces with Google Calendar API\n- `list_events` - View upcoming calendar events\n- [Add other tools you've implemented]\n\n### Prompts\n- `analyze_schedule` - Generate insights about your calendar\n  - Includes upcoming events as embedded resources\n  - Returns structured prompt for LLM analysis\n- [Add other prompts you've implemented]\n\n## Prerequisites\n\n- Node.js (v14 or higher)\n- A Google Cloud Project with Calendar API enabled\n- OAuth 2.0 Client credentials\n\n## Development\n\nInstall devbox by following instructions at [devbox.sh](https://www.jetpack.io/devbox)\n```bash\ncurl -fsSL https://get.jetpack.io/devbox | bash\n```\n\nInitialize devbox in the project directory:\n```bash\ndevbox init\n```\n\nStart the devbox shell:\n```bash\ndevbox shell\n```\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"Google Calendar\": {\n      \"command\": \"/path/to/Google Calendar/build/index.js\"\n    }\n  }\n}\n```\n\n## First-Time Setup\n\n1. Set up Google Cloud credentials:\n   - Go to [Google Cloud Console](https://console.cloud.google.com)\n   - Create a new project or select an existing one\n   - Enable the Google Calendar API\n   - Create OAuth 2.0 credentials (Desktop application type)\n   - Download the client secret JSON file\n   - Rename it to `.client_secret.json` and place it in the project root\n\n2. Initial Authentication:\n   - When first running the server, it will provide an authentication URL\n   - Visit the URL in your browser\n   - Grant the requested permissions\n   - Copy the provided authorization code\n   - Paste the code back into the CLI prompt\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calendars",
        "calendar",
        "scheduling",
        "google calendar",
        "calendar mcp",
        "calendars thisnick"
      ],
      "category": "scheduling-and-calendars"
    },
    "v-3--google-calendar": {
      "owner": "v-3",
      "name": "google-calendar",
      "url": "https://github.com/v-3/google-calendar",
      "imageUrl": "/freedevtools/mcp/pfp/v-3.webp",
      "description": "Manage events and find available time slots in Google Calendar, enabling users to create and list meetings efficiently.",
      "stars": 66,
      "forks": 19,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-26T17:39:08Z",
      "readme_content": "# Google Calendar MCP Server\n\nThis MCP server allows Claude to interact with your Google Calendar, enabling capabilities like listing events, creating meetings, and finding free time slots.\n\n## Prerequisites\n\n- Node.js (v16 or higher)\n- Claude Desktop App\n- A Google Cloud Project\n- Google Calendar API enabled\n- OAuth 2.0 credentials\n\n## Setup Instructions\n\n### 1. Create a Google Cloud Project\n\n1. Go to the [Google Cloud Console](https://console.cloud.google.com/)\n2. Create a new project or select an existing one\n3. Enable the Google Calendar API:\n   - Go to \"APIs & Services\" > \"Library\"\n   - Search for \"Google Calendar API\"\n   - Click \"Enable\"\n\n### 2. Configure OAuth Consent Screen\n\n1. Go to \"APIs & Services\" > \"OAuth consent screen\"\n2. Select \"External\" user type (unless you have a Google Workspace organization)\n3. Fill in the required information:\n   - App name\n   - User support email\n   - Developer contact information\n4. Add the following scopes:\n   - `https://www.googleapis.com/auth/calendar`\n   - `https://www.googleapis.com/auth/calendar.events`\n5. Add your email address as a test user\n\n### 3. Create OAuth 2.0 Credentials\n\n1. Go to \"APIs & Services\" > \"Credentials\"\n2. Click \"Create Credentials\" > \"OAuth client ID\"\n3. Select \"Desktop app\" as the application type\n4. Name your client (e.g., \"MCP Calendar Client\")\n5. Click \"Create\"\n6. Download the client configuration file (you'll need the client ID and client secret)\n\n### 4. Get Refresh Token\n\n1. Create a new file named `getToken.js`:\n\n```javascript\nconst { google } = require('googleapis');\nconst http = require('http');\nconst url = require('url');\n\n// Replace these with your OAuth 2.0 credentials\nconst CLIENT_ID = 'your-client-id';\nconst CLIENT_SECRET = 'your-client-secret';\nconst REDIRECT_URI = 'http://localhost:3000/oauth2callback';\n\n// Configure OAuth2 client\nconst oauth2Client = new google.auth.OAuth2(\n  CLIENT_ID,\n  CLIENT_SECRET,\n  REDIRECT_URI\n);\n\n// Define scopes\nconst scopes = [\n  'https://www.googleapis.com/auth/calendar',\n  'https://www.googleapis.com/auth/calendar.events'\n];\n\nasync function getRefreshToken() {\n  return new Promise((resolve, reject) => {\n    try {\n      // Create server to handle OAuth callback\n      const server = http.createServer(async (req, res) => {\n        try {\n          const queryParams = url.parse(req.url, true).query;\n          \n          if (queryParams.code) {\n            // Get tokens from code\n            const { tokens } = await oauth2Client.getToken(queryParams.code);\n            console.log('\\n=================');\n            console.log('Refresh Token:', tokens.refresh_token);\n            console.log('=================\\n');\n            console.log('Save this refresh token in your configuration!');\n            \n            // Send success response\n            res.end('Authentication successful! You can close this window.');\n            \n            // Close server\n            server.close();\n            resolve(tokens);\n          }\n        } catch (error) {\n          console.error('Error getting tokens:', error);\n          res.end('Authentication failed! Please check console for errors.');\n          reject(error);\n        }\n      }).listen(3000, () => {\n        // Generate auth url\n        const authUrl = oauth2Client.generateAuthUrl({\n          access_type: 'offline',\n          scope: scopes,\n          prompt: 'consent'  // Force consent screen to ensure refresh token\n        });\n\n        console.log('1. Copy this URL and paste it in your browser:');\n        console.log('\\n', authUrl, '\\n');\n        console.log('2. Follow the Google authentication process');\n        console.log('3. Wait for the refresh token to appear here');\n      });\n\n    } catch (error) {\n      console.error('Server creation error:', error);\n      reject(error);\n    }\n  });\n}\n\n// Run the token retrieval\ngetRefreshToken().catch(console.error);\n```\n\n2. Install required dependency:\n```bash\nnpm install googleapis\n```\n\n3. Update the script with your OAuth credentials:\n   - Replace `your-client-id` with your actual client ID\n   - Replace `your-client-secret` with your actual client secret\n\n4. Run the script:\n```bash\nnode getToken.js\n```\n\n5. Follow the instructions in the console:\n   - Copy the provided URL\n   - Paste it into your browser\n   - Complete the Google authentication process\n   - Copy the refresh token that appears in the console\n\n### 5. Configure Claude Desktop\n\n1. Open your Claude Desktop configuration file:\n\n**For MacOS:**\n```bash\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n**For Windows:**\n```bash\ncode %AppData%\\Claude\\claude_desktop_config.json\n```\n\n2. Add or update the configuration:\n```json\n{\n    \"mcpServers\": {\n        \"google-calendar\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"/ABSOLUTE/PATH/TO/YOUR/build/index.js\"\n            ],\n            \"env\": {\n                \"GOOGLE_CLIENT_ID\": \"your_client_id_here\",\n                \"GOOGLE_CLIENT_SECRET\": \"your_client_secret_here\",\n                \"GOOGLE_REDIRECT_URI\": \"http://localhost\",\n                \"GOOGLE_REFRESH_TOKEN\": \"your_refresh_token_here\"\n            }\n        }\n    }\n}\n```\n\n3. Save the file and restart Claude Desktop\n\n## Initial Project Setup\n\n1. Create a new directory for your project:\n```bash\nmkdir google-calendar-mcp\ncd google-calendar-mcp\n```\n\n2. Initialize a new npm project:\n```bash\nnpm init -y\n```\n\n3. Install dependencies:\n```bash\nnpm install @modelcontextprotocol/sdk googleapis google-auth-library zod\nnpm install -D @types/node typescript\n```\n\n4. Create a tsconfig.json file:\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"module\": \"Node16\",\n    \"moduleResolution\": \"Node16\",\n    \"outDir\": \"./build\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n5. Update package.json:\n```json\n{\n  \"type\": \"module\",\n  \"scripts\": {\n    \"build\": \"tsc && node -e \\\"require('fs').chmodSync('build/index.js', '755')\\\"\"\n  }\n}\n```\n\n6. Create your source directory:\n```bash\nmkdir src\n```\n\n7. Create a .env file for local development (don't commit this file):\n```bash\nGOOGLE_CLIENT_ID=your_client_id_here\nGOOGLE_CLIENT_SECRET=your_client_secret_here\nGOOGLE_REDIRECT_URI=http://localhost\nGOOGLE_REFRESH_TOKEN=your_refresh_token_here\n```\n\n## Building and Running\n\n1. Build the server:\n```bash\nnpm run build\n```\n\n2. The server will automatically start when you open Claude Desktop\n\n## Available Tools\n\nThe server provides the following tools:\n\n1. `list_events`: List calendar events within a specified time range\n2. `create_event`: Create a new calendar event\n3. `update_event`: Update an existing calendar event\n4. `delete_event`: Delete a calendar event\n5. `find_free_time`: Find available time slots in the calendar\n\n## Example Usage in Claude\n\nAfter setup, you can use commands like:\n\n- \"Show me my calendar events for next week\"\n- \"Schedule a meeting with [email_id] tomorrow at 2 PM for 1 hour\"\n- \"Find a free 30-minute slot this afternoon\"\n- \"Update my 3 PM meeting to 4 PM\"\n- \"Cancel my meeting with ID [event_id]\"\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Tools not appearing in Claude:**\n   - Check Claude Desktop logs: `tail -f ~/Library/Logs/Claude/mcp*.log`\n   - Verify all environment variables are set correctly\n   - Ensure the path to index.js is absolute and correct\n\n2. **Authentication Errors:**\n   - Verify your OAuth credentials are correct\n   - Check if refresh token is valid\n   - Ensure required scopes are enabled\n\n3. **Server Connection Issues:**\n   - Check if the server built successfully\n   - Verify file permissions on build/index.js (should be 755)\n   - Try running the server directly: `node /path/to/build/index.js`\n\n### Viewing Logs\n\nTo view server logs:\n```bash\n# For MacOS/Linux:\ntail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n\n# For Windows:\nGet-Content -Path \"$env:AppData\\Claude\\Logs\\mcp*.log\" -Wait -Tail 20\n```\n\n### Environment Variables\n\nIf you're getting environment variable errors, verify each one:\n\n1. GOOGLE_CLIENT_ID: Should start with something like \"123456789-...\"\n2. GOOGLE_CLIENT_SECRET: Usually ends in \".apps.googleusercontent.com\"\n3. GOOGLE_REDIRECT_URI: Should be \"http://localhost\"\n4. GOOGLE_REFRESH_TOKEN: A long string that doesn't expire\n\n## Security Considerations\n\n- Keep your OAuth credentials secure\n- Don't commit credentials to version control\n- Use environment variables for sensitive data\n- Regularly rotate refresh tokens\n- Monitor API usage in Google Cloud Console\n\n## License\n\nMIT License - See LICENSE file for details.\n\n## Support\n\nIf you encounter any issues:\n1. Check the troubleshooting section above\n2. Review Claude Desktop logs\n3. Open an issue on GitHub\n4. Contact the maintainer",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calendars",
        "calendar",
        "scheduling",
        "scheduling calendars",
        "calendars google",
        "google calendar"
      ],
      "category": "scheduling-and-calendars"
    },
    "vakharwalad23--google-mcp": {
      "owner": "vakharwalad23",
      "name": "google-mcp",
      "url": "https://github.com/vakharwalad23/google-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/vakharwalad23.webp",
      "description": "Integrate Google services such as Gmail and Calendar to enhance AI capabilities. Manage emails, schedule events, and automate workflows directly within the AI interface.",
      "stars": 11,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T07:00:52Z",
      "readme_content": "# Google MCP Tools\n\n[![smithery badge](https://smithery.ai/badge/@vakharwalad23/google-mcp)](https://smithery.ai/server/@vakharwalad23/google-mcp)\n\nThis is a collection of Google-native tools (e.g., Gmail, Calendar) for the [MCP protocol](https://modelcontextprotocol.com/docs/mcp-protocol), designed to integrate seamlessly with AI clients like Claude or Cursor.\n\n<a href=\"https://glama.ai/mcp/servers/@vakharwalad23/google-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@vakharwalad23/google-mcp/badge\" alt=\"Google MCP server\" />\n</a>\n\n## Quick Install\n\nClick below for one-click install with `.mcpb`:\n\n<a href=\"https://github.com/vakharwalad23/google-mcp/releases/download/v1.1.0/google-mcp.mcpb\">\n  <img width=\"280\" alt=\"Install with Claude MCPB\" src=\"https://github.com/user-attachments/assets/dfcf4fe2-d94d-4b6b-86e4-2794fea74fff\" />\n</a>\n\n<details>\n<summary>JSON configs</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"google-mcp\": {\n      \"command\": \"bunx\",\n      \"args\": [\"--no-cache\", \"google-mcp@latest\"],\n      \"env\": {\n        // Either can be used, but not both\n        // Use OAuth\n        \"GOOGLE_OAUTH_CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"GOOGLE_OAUTH_CLIENT_SECRET\": \"<YOUR_CLIENT_SECRET>\",\n        \"GOOGLE_OAUTH_TOKEN_PATH\": \"<PATH_TO_STORE_TOKENS> CAN_BE_ANYWHERE_ON_YOUR_SYSTEM\",\n        // Use Service Account\n        \"GOOGLE_CLIENT_EMAIL\": \"<YOUR_SERVICE_ACCOUNT_EMAIL>\",\n        \"GOOGLE_PRIVATE_KEY\": \"<YOUR_SERVICE_ACCOUNT_PRIVATE_KEY>\",\n        \"GMAIL_USER_TO_IMPERSONATE\": \"<USER_TO_IMPERSONATE>\"\n      }\n    }\n  }\n}\n```\n\n</details>\n\n## What's New in v1.1.0\n\n### 🆕 Major Features\n\n- **Complete Email Attachment Support**:\n  - ✉️ **Send emails with attachments** from local files or Google Drive\n  - 📥 **Download all email attachments** to local storage\n  - 🔄 **Dual attachment sources**: Local file paths or Google Drive file IDs\n  - 📁 **Smart file handling**: Automatic MIME type detection and filename sanitization\n\n### 🔧 Enhanced Email Capabilities\n\n- **Multi-source attachments**: Attach files from local storage or Google Drive in the same email\n- **Custom filenames**: Override original filenames for attachments\n- **File size validation**: Automatic 25MB Gmail limit enforcement\n- **Cross-platform downloads**: Auto-detection of Downloads folder on Windows, macOS, and Linux\n- **Conflict resolution**: Automatic file renaming to prevent overwrites\n\n### 📁 New & Enhanced Tools\n\n- `google_gmail_send_email`: Now supports attachments from local files and Google Drive\n- `google_gmail_draft_email`: Create drafts with attachments\n- `google_gmail_download_attachments`: Download all email attachments with customizable path\n\n## Features\n\n- **OAuth Management**:\n\n  - Refresh expired access tokens automatically\n  - Update tokens in the token file without re-authentication\n  - Complete re-authentication with automated token cleanup\n  - Maintain session continuity across long-running operations\n\n- **Gmail**:\n\n  - Send emails with multiple recipients (to, cc, bcc) and **attachments from local files or Google Drive**.\n  - **Download all email attachments** to local storage with cross-platform support.\n  - List emails with custom queries, labels, and result limits.\n  - Read specific emails by ID with attachment information.\n  - Manage labels (add, remove, list).\n  - Draft and delete emails.\n\n- **Calendar**:\n\n  - List calendars and set a default calendar.\n  - Create events with details (summary, start/end time, attendees, etc.).\n  - List upcoming events with customizable filters.\n  - Update or delete existing events.\n  - Find free time slots for scheduling.\n\n- **Drive**:\n\n  - Filter with search queries\n  - Sort by modification date or other criteria\n  - Customize display count\n  - View detailed file metadata\n  - Read file content (text, docs, spreadsheets)\n  - Create new files with specified content\n  - Update existing files\n  - Delete files (trash or permanent)\n  - Share files with specific permissions\n\n- **Tasks**:\n\n  - View all task lists\n  - Create new task lists\n  - Delete existing task lists\n  - Set default task list\n  - List tasks with filters\n  - View task details\n  - Create tasks with title, notes, and due dates\n  - Update task properties\n  - Mark tasks as complete\n  - Delete tasks\n\n- **TODO Plans**:\n  - Google Contacts: Search and manage contacts.\n  - And Many More...\n\nYou can chain commands for workflows, e.g.:\n\n\"List my unread emails, draft a reply to the latest one, and schedule a follow-up meeting tomorrow at 2 PM.\"\n\n## OAuth Token Management\n\nThe server includes built-in OAuth token management to handle expired access tokens gracefully:\n\n- **Automatic Token Refresh**: When access tokens expire, you can refresh them without going through the full OAuth flow again\n- **Complete Re-authentication**: Automatically handle cases where refresh tokens are invalid or expired\n- **Persistent Storage**: Refreshed tokens are automatically saved to your configured token file path\n- **Session Continuity**: All Google services are re-initialized with fresh tokens after refresh\n\n### Refreshing Tokens\n\nIf you encounter authentication errors or want to proactively refresh your tokens, simply ask:\n\n```\nRefresh my Google OAuth tokens\n```\n\nThis will:\n\n1. Use your stored refresh token to get new access tokens\n2. Update the token file with the new credentials\n3. Re-initialize all Google services with fresh authentication\n4. Show you the new token expiration time\n\n### Complete Re-authentication\n\nIf you get `invalid_grant` errors or your refresh token has expired, you can start fresh:\n\n```\nRe-authenticate my Google account\n```\n\nThis automated process will:\n\n1. **Delete existing tokens** from your token file\n2. **Start OAuth server** to handle the callback\n3. **Open browser** for fresh authentication\n4. **Save new tokens** automatically\n5. **Re-initialize services** with fresh credentials\n\nYou'll only need to click \"Allow\" in the browser - everything else is automated!\n\n**Note**: If you don't have a valid refresh token, you'll need to go through the initial OAuth authentication flow again.\n\n### Manual Installation\n\n1. Prerequisites:\n\n   - Install Bun:\n\n   ```bash\n   brew install oven-sh/bun/bun  # macOS/Linux with Homebrew\n   ```\n\n2. Set Up OAuth:\n\n   - Create a Google Cloud project in the [Google Cloud Console](https://console.cloud.google.com/).\n   - Set up OAuth 2.0 credentials (Client ID, Client Secret).\n   - Choose the type Desktop app.\n   - If using test mode, add your email to the test users list.\n   - Make sure to enable API access for desired services (Gmail, Calendar, Drive etc.).\n\n3. Configure Your Client: Edit your claude_desktop_config.json (or equivalent config file for your client):\n\n```json\n{\n  \"mcpServers\": {\n    \"google-mcp\": {\n      \"command\": \"bunx\",\n      \"args\": [\"--no-cache\", \"google-mcp@latest\"],\n      \"env\": {\n        // Either can be used, but not both\n        // Use OAuth\n        \"GOOGLE_OAUTH_CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"GOOGLE_OAUTH_CLIENT_SECRET\": \"<YOUR_CLIENT_SECRET>\",\n        \"GOOGLE_OAUTH_TOKEN_PATH\": \"<PATH_TO_STORE_TOKENS>\",\n        // Use Service Account\n        \"GOOGLE_CLIENT_EMAIL\": \"<YOUR_SERVICE_ACCOUNT_EMAIL>\",\n        \"GOOGLE_PRIVATE_KEY\": \"<YOUR_SERVICE_ACCOUNT_PRIVATE_KEY>\",\n        \"GMAIL_USER_TO_IMPERSONATE\": \"<USER_TO_IMPERSONATE>\"\n      }\n    }\n  }\n}\n```\n\n4. Authenticate:\n   - The first time you run the server, it will open a browser for OAuth authentication. Follow the prompts to grant access, and tokens will be saved to GOOGLE_OAUTH_TOKEN_PATH.\n\n## Usage\n\nNow, ask Claude to use the `google-mcp` tool.\n\n```\nSend an email to jane.doe@example.com with the subject \"Meeting Notes\" and body \"Here are the notes from today.\"\n```\n\n```\nList my upcoming calendar events for the next 3 days.\n```\n\n```\nCreate a calendar event titled \"Team Sync\" tomorrow at 10 AM for 1 hour.\n```\n\n```\nRefresh my Google OAuth tokens\n```\n\n```\nRe-authenticate my Google account\n```\n\n## Transport Support\n\nThis MCP server supports both stdio and HTTP transports via environment variables:\n\n### Stdio Transport (Default)\n\n```bash\n# Default mode - uses stdio transport\nbun run dev\n# Or explicitly\nMCP_TRANSPORT=stdio bun run index.ts\n```\n\n### HTTP Transport (Streamable HTTP)\n\n```bash\n# HTTP mode with Streamable HTTP support\nMCP_TRANSPORT=http bun run index.ts\n# Or with custom port\nMCP_TRANSPORT=http PORT=3000 bun run index.ts\n```\n\nWhen running in HTTP mode, the server provides these endpoints:\n\n- `GET /health` - Health check endpoint with session count\n- `GET /mcp` - Session info and server status\n- `POST /mcp` - Main MCP JSON-RPC endpoint for sending requests\n- `DELETE /mcp` - End session endpoint\n\n### Session Management\n\nThe Streamable HTTP transport uses the official MCP SDK with automatic session management:\n\n1. **Automatic Sessions**: The server automatically generates secure session IDs\n2. **SSE Streaming**: Supports Server-Sent Events for real-time communication\n3. **JSON Responses**: Falls back to JSON responses when SSE is not available\n4. **DNS Protection**: Built-in security features for production deployment\n\n### Configuration for HTTP Transport\n\nFor HTTP transport, configure your client with the server URL:\n\n```json\n{\n  \"mcpServers\": {\n    \"google-mcp-http\": {\n      \"url\": \"http://localhost:3000/mcp\"\n    }\n  }\n}\n```\n\n## Local Development\n\n```bash\ngit clone https://github.com/vakharwalad23/google-mcp.git\ncd google-mcp\nbun install\n\n# Run in stdio mode (default)\nbun run dev:stdio\n\n# Run in HTTP mode\nbun run dev:http\n```\n\nThank you for using Google MCP Tools! If you have any questions or suggestions, feel free to open an issue or contribute to the project.\n\nPlay around with the tools and enjoy!!\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gmail",
        "calendars",
        "scheduling",
        "gmail calendar",
        "services gmail",
        "google services"
      ],
      "category": "scheduling-and-calendars"
    },
    "watanka--schedulia-mcp": {
      "owner": "watanka",
      "name": "schedulia-mcp",
      "url": "https://github.com/watanka/schedulia-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/watanka.webp",
      "description": "Manage meeting schedules and send or respond to meeting requests while integrating with external calendars like Google Calendar. Provide an intuitive interface for organizing and tracking appointments.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-08T04:25:26Z",
      "readme_content": "## 📅 Schedulia MCP - Meeting Scheduling Assistant\n\n## 🚀 Getting Started\n### Prerequisites\n✅ Git  \n✅ Python  \n✅ UV (Python Package Manager) - [UV Installation Guide](https://github.com/astral-sh/uv)\n  \n\n### ⚙️ Setup Instructions\n1. Get Your API Key\n    - Get your API key from [schedulia.org](https://schedulia.org) 🔑  \n\n2. Clone Repository\n    ```\n    git clone https://github.com/watanka/schedulia-mcp.git\n    cd schedulia-mcp\n    ```\n\n3. Run Server\n    ```\n    uv run server.py --api-key={your-api-key}  # Replace with your API key!\n    ```\n\n\n4. Configure MCP Server\n    ```\n    {\n        \"mcpServers\": {\n            \"schedulia-mcp\": {\n                \"command\": \"uv\",\n                \"args\": [\n                    \"--directory\",\n                    \"/path/to/mcp/server\",\n                    \"run\",\n                    \"server.py\",\n                    \"--api-key\",\n                    \"{your-api-key}\"\n                ]\n            }\n        }\n    }\n    ```\n    \n5. Register MCP Server on your host(Claude Desktop, Cursor)\n#### 🔧 Integration Options  \nFor Claude Desktop users: [Configuration Guide](https://modelcontextprotocol.io/quickstart/user)  \nFor Cursor users: [Configuration Guide ](https://docs.cursor.com/context/model-context-protocol#configuring-mcp-servers)  \n\n\n<br>\n\n## 🛠️ Available Tools\n### 📊 View Meeting Schedules\n`view_meeting_schedules(date)`: Check all scheduled meetings for a specific date\n\n<details>\n<summary>How to Use</summary>\n\nAsk to see your meetings using the `view_meeting_schedules` tool. You can specify a date or view all schedules.\n\n**Prompt Examples:**\n- \"Please show me my meeting schedules\"\n- \"Can you check my meetings for today using view_meeting_schedules?\"\n- \"Use view_meeting_schedules to show my upcoming meetings\"\n\n**Example Response:**\n```json\n{\n    \"id\": 1,\n    \"host\": {\"name\": \"John Doe\", \"email\": \"john@example.com\"},\n    \"participants\": [\n        {\"name\": \"Alice Smith\", \"email\": \"alice@example.com\"}\n    ],\n    \"time\": {\n        \"start_time\": \"2024-03-20T14:00:00\",\n        \"end_time\": \"2024-03-20T15:00:00\"\n    },\n    \"title\": \"Project Review\",\n    \"description\": \"Weekly sync meeting\"\n}\n```\n</details>\n\n### 📬 View Meeting Requests\n`view_meeting_requests()`: Check all incoming meeting requests\n\n<details>\n<summary>How to Use</summary>\n\nUse the `view_meeting_requests` tool to check any pending meeting invitations.\n\n**Prompt Examples:**\n- \"Use view_meeting_requests to show my pending invitations\"\n- \"Check my meeting requests using view_meeting_requests tool\"\n- \"Show me all meeting requests in the system\"\n\n**Example Response:**\n```json\n{\n    \"request_id\": 1,\n    \"sender\": {\"name\": \"Alice Smith\", \"email\": \"alice@example.com\"},\n    \"receiver_email\": \"john@example.com\",\n    \"available_times\": [\n        {\n            \"start_time\": \"2024-03-21T15:00:00\",\n            \"end_time\": \"2024-03-21T16:00:00\"\n        }\n    ],\n    \"status\": \"PENDING\",\n    \"title\": \"Product Discussion\"\n}\n```\n</details>\n\n### ✅ Respond to Meeting Request\n`respond_to_meeting_request(request_id, accept, selected_time)`: Accept or decline meeting requests\n\n<details>\n<summary>How to Use</summary>\n\nThis is a two-step process using both `view_meeting_requests` and `respond_to_meeting_request` tools.\n\n**Step 1 - View Requests:**\n- \"First, use view_meeting_requests to show me pending invitations\"\n- \"Let me check the meeting requests using view_meeting_requests tool\"\n\n**Step 2 - Respond:**\n- \"Use respond_to_meeting_request to accept request ID 1 with the proposed time slot\"\n- \"Please use respond_to_meeting_request to decline meeting request #2\"\n\n**Example Conversation:**\n```\nUser: \"First, show me my meeting requests using view_meeting_requests\"\nAssistant: \"Here are your pending meeting requests: [shows requests]\"\nUser: \"Great, I want to accept request ID 1 using respond_to_meeting_request for the March 21st 15:00-16:00 slot\"\n```\n</details>\n\n### 📨 Send Meeting Request\n`request_meeting(receiver_email, available_times, title, description)`: Create and send new meeting requests\n\n<details>\n<summary>How to Use</summary>\n\nUse the `request_meeting` tool to create new meeting requests. You'll need to provide receiver's email, available times, title, and description.\n\n**Prompt Examples:**\n- \"Use request_meeting to schedule a meeting with alice@example.com\"\n- \"I need to send a meeting request using request_meeting tool for tomorrow\"\n- \"Create a new meeting request with request_meeting for the team sync\"\n\n**Example Request:**\n```\n\"Please use request_meeting to set up a meeting with following details:\n- Receiver: alice@example.com\n- Title: Project Kickoff\n- Description: Initial project planning meeting\n- Available times: \n  - March 25th, 2024 14:00-15:00\n  - March 26th, 2024 11:00-12:00\"\n```\n\n**Example Response:**\n```json\n{\n    \"request_id\": 3,\n    \"sender\": {\"name\": \"John Doe\", \"email\": \"john@example.com\"},\n    \"receiver_email\": \"alice@example.com\",\n    \"available_times\": [\n        {\n            \"start_time\": \"2024-03-25T14:00:00\",\n            \"end_time\": \"2024-03-25T15:00:00\"\n        },\n        {\n            \"start_time\": \"2024-03-26T11:00:00\",\n            \"end_time\": \"2024-03-26T12:00:00\"\n        }\n    ],\n    \"status\": \"PENDING\",\n    \"title\": \"Project Kickoff\",\n    \"description\": \"Initial project planning meeting\"\n}\n```\n</details> \n\n\n## Demo\n- Need help? Check out demo videos! 🎥  \n\n[![Schedulia Demo](https://img.youtube.com/vi/vLkg-0RX5mQ/maxresdefault.jpg)](https://youtu.be/vLkg-0RX5mQ)\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "schedules",
        "scheduling",
        "appointments",
        "calendars watanka",
        "scheduling calendars",
        "meeting schedules"
      ],
      "category": "scheduling-and-calendars"
    },
    "yokingma--time-mcp": {
      "owner": "yokingma",
      "name": "time-mcp",
      "url": "https://github.com/yokingma/time-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/yokingma.webp",
      "description": "Provides time awareness functionalities, including accessing the current time, converting between timezones, and generating timestamps.",
      "stars": 47,
      "forks": 9,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-02T09:00:45Z",
      "readme_content": "# 🚀 Time MCP Server: Giving LLMs Time Awareness Capabilities\n\n[![smithery badge](https://smithery.ai/badge/@yokingma/time-mcp)](https://smithery.ai/server/@yokingma/time-mcp) <a href=\"https://github.com/yokingma/time-mcp/stargazers\"><img src=\"https://img.shields.io/github/stars/yokingma/time-mcp\" alt=\"Github Stars\"></a> <a href=\"https://github.com/yokingma/time-mcp/blob/main/LICENSE\"><img src=\"https://img.shields.io/badge/license-MIT-purple\" alt=\"License\"></a> <a href=\"https://github.com/yokingma/time-mcp/issues/new\"><img src=\"https://img.shields.io/badge/Report a bug-Github-%231F80C0\" alt=\"Report a bug\"></a>\n\nA Model Context Protocol (MCP) server implementation that allows LLMs to have time awareness capabilities.\n\n<div align=\"center\">\n <img src=\"./assets/cursor.png\"></img>\n</div>\n\n## Tools\n\n- `current_time`: Get current time (UTC and local time)\n- `relative_time`: Get relative time\n- `get_timestamp`: Get timestamp for the time\n- `days_in_month`: Get days in month\n- `convert_time`: Convert time between timezones\n- `get_week_year`: Get week and isoWeek of the year\n\n## Installation\n\n### Installing via Smithery\n\nTo install time-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@yokingma/time-mcp):\n\n```bash\nnpx -y @smithery/cli install @yokingma/time-mcp --client claude\n```\n\n### Manually install (Optional)\n```shell\nnpm install -g time-mcp\n```\n\n### using npx\n```shell\nnpx -y time-mcp\n```\n\n## Running on Cursor\n\nYour `mcp.json` file will look like this:\n\n```json\n{\n  \"mcpServers\": {\n    \"time-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"time-mcp\"]\n    }\n  }\n}\n```\n\n## Running on Windsurf\n\nAdd this to your `./codeium/windsurf/model_config.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"time-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"time-mcp\"]\n    }\n  }\n}\n```\n\n## License\n\nMIT License - see [LICENSE](./LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "timezones",
        "scheduling",
        "timestamps",
        "calendars yokingma",
        "time mcp",
        "yokingma time"
      ],
      "category": "scheduling-and-calendars"
    }
  }
}