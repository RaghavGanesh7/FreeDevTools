{
  "category": "math-and-statistics",
  "categoryDisplay": "Math and Statistics",
  "description": "",
  "totalRepositories": 15,
  "repositories": {
    "EthanHenrickson--math-mcp": {
      "owner": "EthanHenrickson",
      "name": "math-mcp",
      "url": "https://github.com/EthanHenrickson/math-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/EthanHenrickson.webp",
      "description": "Perform accurate numerical calculations and statistical operations through a simple API. The server provides basic arithmetic functions along with rounding and statistical calculations.",
      "stars": 40,
      "forks": 8,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-02T09:28:32Z",
      "readme_content": "# Math-MCP\n\n[![smithery badge](https://smithery.ai/badge/@EthanHenrickson/math-mcp)](https://smithery.ai/server/@EthanHenrickson/math-mcp)\n\nA Model Context Protocol (MCP) server that provides basic mathematical, statistical and trigonometric functions to Large Language Models (LLMs). This server enables LLMs to perform accurate numerical calculations through a simple API.\n\n<a href=\"https://glama.ai/mcp/servers/exa5lt8dgd\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/exa5lt8dgd/badge\" alt=\"Math-MCP MCP server\" />\n</a>\n\n## Features\n\n- Basic arithmetic operations (addition, subtraction, multiplication, division)\n- Statistical functions (sum, mean, median, mode, min, max)\n- Rounding functions (floor, ceiling, round)\n- Trigonometric functions (sin, cos, tan, and their inverses; degrees/radians conversions)\n\n## Installation\n### Installing via Smithery\n\nTo install Math-MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@EthanHenrickson/math-mcp):\n\n```bash\nnpx -y @smithery/cli install @EthanHenrickson/math-mcp --client claude\n```\n\n### Installing Manually\n\nJust clone this repository and save it locally somewhere on your computer.\n\nThen add this server to your MCP configuration file:\n\n```json\n\"math\": {\n  \"command\": \"node\",\n  \"args\": [\"PATH\\\\TO\\\\PROJECT\\\\math-mcp\\\\build\\\\index.js\"]\n}\n```\n\nReplace `PATH\\\\TO\\\\PROJECT` with the actual path to where you cloned the repository.\n\n## Available Functions\n\nThe Math-MCP server provides the following mathematical operations:\n\n### Arithmetic Operations\n| Function | Description | Parameters |\n|----------|-------------|------------|\n| `add` | Adds two numbers together | `firstNumber`: The first addend<br>`secondNumber`: The second addend |\n| `subtract` | Subtracts the second number from the first number | `minuend`: The number to subtract from (minuend)<br>`subtrahend`: The number being subtracted (subtrahend) |\n| `multiply` | Multiplies two numbers together | `firstNumber`: The first number<br>`SecondNumber`: The second number |\n| `division` | Divides the first number by the second number | `numerator`: The number being divided (numerator)<br>`denominator`: The number to divide by (denominator) |\n| `sum` | Adds any number of numbers together | `numbers`: Array of numbers to sum |\n| `modulo` | Divides two numbers and returns the remainder | `numerator`: The number being divided (numerator)<br>`denominator`: The number to divide by (denominator) |\n| `floor` | Rounds a number down to the nearest integer | `number`: The number to round down |\n| `ceiling` | Rounds a number up to the nearest integer | `number`: The number to round up |\n| `round` | Rounds a number to the nearest integer | `number`: The number to round |\n\n### Statistical Operations\n| Function | Description | Parameters |\n|----------|-------------|------------|\n| `mean` | Calculates the arithmetic mean of a list of numbers | `numbers`: Array of numbers to find the mean of |\n| `median` | Calculates the median of a list of numbers | `numbers`: Array of numbers to find the median of |\n| `mode` | Finds the most common number in a list of numbers | `numbers`: Array of numbers to find the mode of |\n| `min` | Finds the minimum value from a list of numbers | `numbers`: Array of numbers to find the minimum of |\n| `max` | Finds the maximum value from a list of numbers | `numbers`: Array of numbers to find the maximum of |\n\n### Trigonometric Operations\n| Function | Description | Parameters |\n|----------|-------------|------------|\n| `sin` | Calculates the sine of a number in radians | `number`: The number in radians to find the sine of |\n| `arcsin` | Calculates the arcsine of a number in radians | `number`: The number to find the arcsine of |\n| `cos` | Calculates the cosine of a number in radians | `number`: The number in radians to find the cosine of |\n| `arccos` | Calculates the arccosine of a number in radians | `number`: The number to find the arccosine of |\n| `tan` | Calculates the tangent of a number in radians | `number`: The number in radians to find the tangent of |\n| `arctan` | Calculates the arctangent of a number in radians | `number`: The number to find the arctangent of |\n| `radiansToDegrees` | Converts a radian value to its equivalent in degrees | `number`: The number in radians to convert to degrees |\n| `degreesToRadians` | Converts a degree value to its equivalent in radians | `number`: The number in degrees to convert to radians |\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "numerical",
        "rounding",
        "math",
        "math mcp",
        "statistical operations",
        "math statistics"
      ],
      "category": "math-and-statistics"
    },
    "QuantGeekDev--mcp-add-sse": {
      "owner": "QuantGeekDev",
      "name": "mcp-add-sse",
      "url": "https://github.com/QuantGeekDev/mcp-add-sse",
      "imageUrl": "/freedevtools/mcp/pfp/QuantGeekDev.webp",
      "description": "Provides functionality for executing mathematical operations and tools through the Model Context Protocol.",
      "stars": 5,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-06-17T05:50:19Z",
      "readme_content": "# calculator\n[![smithery badge](https://smithery.ai/badge/@QuantGeekDev/mcp-add-sse)](https://smithery.ai/server/@QuantGeekDev/mcp-add-sse)\n\nA Model Context Protocol (MCP) server built with mcp-framework.\n\n## Quick Start\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n```\n\n## Project Structure\n\n```\ncalculator/\n├── src/\n│   ├── tools/        # MCP Tools\n│   │   └── ExampleTool.ts\n│   └── index.ts      # Server entry point\n├── package.json\n└── tsconfig.json\n```\n\n## Adding Components\n\nThe project comes with an example tool in `src/tools/ExampleTool.ts`. You can add more tools using the CLI:\n\n```bash\n# Add a new tool\nmcp add tool my-tool\n\n# Example tools you might create:\nmcp add tool data-processor\nmcp add tool api-client\nmcp add tool file-handler\n```\n\n## Tool Development\n\nExample tool structure:\n\n```typescript\nimport { MCPTool } from \"mcp-framework\";\nimport { z } from \"zod\";\n\ninterface MyToolInput {\n  message: string;\n}\n\nclass MyTool extends MCPTool<MyToolInput> {\n  name = \"my_tool\";\n  description = \"Describes what your tool does\";\n\n  schema = {\n    message: {\n      type: z.string(),\n      description: \"Description of this input parameter\",\n    },\n  };\n\n  async execute(input: MyToolInput) {\n    // Your tool logic here\n    return `Processed: ${input.message}`;\n  }\n}\n\nexport default MyTool;\n```\n\n## Publishing to npm\n\n1. Update your package.json:\n   - Ensure `name` is unique and follows npm naming conventions\n   - Set appropriate `version`\n   - Add `description`, `author`, `license`, etc.\n   - Check `bin` points to the correct entry file\n\n2. Build and test locally:\n   ```bash\n   npm run build\n   npm link\n   calculator  # Test your CLI locally\n   ```\n\n3. Login to npm (create account if necessary):\n   ```bash\n   npm login\n   ```\n\n4. Publish your package:\n   ```bash\n   npm publish\n   ```\n\nAfter publishing, users can add it to their claude desktop client (read below) or run it with npx\n```\n\n## Using with Claude Desktop\n\n### Installing via Smithery\n\nTo install Calculator for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@QuantGeekDev/mcp-add-sse):\n\n```bash\nnpx -y @smithery/cli install @QuantGeekDev/mcp-add-sse --client claude\n```\n\n### Local Development\n\nAdd this configuration to your Claude Desktop config file:\n\n**MacOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n**Windows**: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"calculator\": {\n      \"command\": \"node\",\n      \"args\":[\"/absolute/path/to/calculator/dist/index.js\"]\n    }\n  }\n}\n```\n\n### After Publishing\n\nAdd this configuration to your Claude Desktop config file:\n\n**MacOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n**Windows**: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"calculator\": {\n      \"command\": \"npx\",\n      \"args\": [\"calculator\"]\n    }\n  }\n}\n```\n\n## Building and Testing\n\n1. Make changes to your tools\n2. Run `npm run build` to compile\n3. The server will automatically load your tools on startup\n\n## Learn More\n\n- [MCP Framework Github](https://github.com/QuantGeekDev/mcp-framework)\n- [MCP Framework Docs](https://mcp-framework.com)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sse",
        "quantgeekdev",
        "mcp",
        "quantgeekdev mcp",
        "sse provides",
        "add sse"
      ],
      "category": "math-and-statistics"
    },
    "YuheiNakasaka--arithmetic-mcp-server": {
      "owner": "YuheiNakasaka",
      "name": "arithmetic-mcp-server",
      "url": "https://github.com/YuheiNakasaka/arithmetic-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/YuheiNakasaka.webp",
      "description": "Perform basic arithmetic operations such as addition, subtraction, multiplication, and division. Handle errors like division by zero gracefully and ensure accurate results quickly.",
      "stars": 0,
      "forks": 3,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-02-25T15:50:02Z",
      "readme_content": "# 四則演算 MCP サーバー\n\nこのMCPサーバーは、基本的な四則演算（足し算、引き算、掛け算、割り算）を実行するためのツールを提供します。\n\n## 機能\n\nこのサーバーは以下の四則演算ツールを提供します：\n\n1. **add** - 2つの数値を足し算します\n2. **subtract** - 2つの数値を引き算します\n3. **multiply** - 2つの数値を掛け算します\n4. **divide** - 2つの数値を割り算します（ゼロ除算の場合はエラーを返します）\n\n## インストール方法\n\n1. このリポジトリをクローンまたはダウンロードします\n2. 依存パッケージをインストールします：\n   ```\n   npm install\n   ```\n3. TypeScriptをコンパイルします：\n   ```\n   npm run build\n   ```\n\n## Clineでの設定方法\n\nClineでこのサーバーを使用するには、Claude Desktop Appの設定ファイルを編集する必要があります：\n\n1. 以下のパスに設定ファイルを作成または編集します：\n   ```\n   ~/Library/Application Support/Claude/claude_desktop_config.json\n   ```\n\n2. 以下の内容を追加します（既存のmcpServersオブジェクトがある場合は、その中に追加します）：\n   ```json\n   {\n     \"mcpServers\": {\n       \"arithmetic\": {\n         \"command\": \"node\",\n         \"args\": [\"/Users/y_nakasaka/Documents/Cline/MCP/arithmetic-server/src/index.js\"],\n         \"disabled\": false,\n         \"autoApprove\": []\n       }\n     }\n   }\n   ```\n\n3. Claude Desktop Appを再起動します\n\n## 使用例\n\nClineで以下のようなプロンプトを使用することで、四則演算ツールを呼び出すことができます：\n\n- 「5と3を足し算してください」\n- 「10から7を引いてください」\n- 「6と8を掛け算してください」\n- 「20を4で割ってください」\n\n## 技術的な詳細\n\nこのサーバーは以下の技術を使用しています：\n\n- TypeScript\n- Model Context Protocol (MCP) SDK\n- Zod（バリデーション用）\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "arithmetic",
        "operations",
        "multiplication",
        "arithmetic mcp",
        "yuheinakasaka arithmetic",
        "arithmetic operations"
      ],
      "category": "math-and-statistics"
    },
    "bombe89--mcp-servers-test": {
      "owner": "bombe89",
      "name": "mcp-servers-test",
      "url": "https://github.com/bombe89/mcp-servers-test",
      "imageUrl": "/freedevtools/mcp/pfp/bombe89.webp",
      "description": "Provides mathematical computation capabilities by enabling arithmetic operations through a standardized protocol. Facilitates the integration of various math functions into applications and workflows.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-05-09T02:14:07Z",
      "readme_content": "# mcp-servers-test\n[![smithery badge](https://smithery.ai/badge/@bombe89/mcp-servers-test)](https://smithery.ai/server/@bombe89/mcp-servers-test)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "computation",
        "math",
        "mcp",
        "bombe89 mcp",
        "mcp servers",
        "enabling arithmetic"
      ],
      "category": "math-and-statistics"
    },
    "brighteen--math": {
      "owner": "brighteen",
      "name": "math",
      "url": "https://github.com/brighteen/math",
      "imageUrl": "/freedevtools/mcp/pfp/brighteen.webp",
      "description": "Provides tools for performing linear algebra, probability, and statistics calculations, streamlining complex mathematical tasks and enhancing data analysis capabilities.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-09-07T10:40:57Z",
      "readme_content": "# math\nLinearAlgebra, Probability, Statistics, Optimization\n\n```mermaid\nmindmap\n  root\n    모집단\n      집합\n        필요충분조건\n          동치\n      표본\n    글2\n      글2_1\n      글2_2\n\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mathematical",
        "statistics",
        "math",
        "math statistics",
        "math provides",
        "statistics brighteen"
      ],
      "category": "math-and-statistics"
    },
    "colesmcintosh--numpy-mcp": {
      "owner": "colesmcintosh",
      "name": "numpy-mcp",
      "url": "https://github.com/colesmcintosh/numpy-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/colesmcintosh.webp",
      "description": "Perform numerical computations using NumPy, including basic arithmetic operations and linear algebra tasks such as matrix multiplication and statistical analysis. Interface seamlessly with LLMs through a standardized MCP protocol.",
      "stars": 2,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-05-30T23:36:07Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/colesmcintosh-numpy-mcp-badge.png)](https://mseep.ai/app/colesmcintosh-numpy-mcp)\n\n# NumPy MCP Server\n\n<div align=\"center\">\n\n<strong>A Model Context Protocol (MCP) server for numerical computations with NumPy</strong>\n\n[![MIT licensed][mit-badge]][mit-url]\n\n</div>\n\n[mit-badge]: https://img.shields.io/badge/license-MIT-blue.svg\n[mit-url]: ./LICENSE\n[python-badge]: https://img.shields.io/badge/python-3.8%2B-blue.svg\n[python-url]: https://www.python.org/downloads/\n\nA Model Context Protocol (MCP) server that provides mathematical calculations and operations using NumPy. This server exposes various mathematical tools through a standardized MCP interface, making it easy to perform numerical computations directly through Claude or other MCP-compatible LLMs.\n\n## Features\n\n- Basic arithmetic operations (addition)\n- Linear algebra computations (matrix multiplication, eigendecomposition)\n- Statistical analysis (mean, median, standard deviation, min, max)\n- Polynomial fitting\n\n## Installation\n\n### Quick Setup with Claude Desktop\n\nThe fastest way to get started is to install this server directly in Claude Desktop:\n\n```bash\n# Install the server in Claude Desktop\nmcp install server.py --name \"NumPy Calculator\"\n```\n\n### Manual Installation\n\nThis project uses UV for dependency management. To install:\n\n```bash\n# Install UV if you haven't already\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Clone the repository\ngit clone https://github.com/yourusername/math-mcp.git\ncd math-mcp\n\n# Create virtual environment and install dependencies\nuv venv\nsource .venv/bin/activate  # On Unix/macOS\n# or\n# .venv\\Scripts\\activate  # On Windows\nuv pip install -r requirements.txt\n```\n\n## Usage\n\n### Development Testing\n\nTest the server locally with the MCP Inspector:\n\n```bash\nmcp dev server.py\n```\n\n### Claude Desktop Integration\n\n1. Install the server in Claude Desktop:\n   ```bash\n   mcp install server.py --name \"NumPy Calculator\"\n   ```\n\n2. The server will now be available in Claude Desktop under \"NumPy Calculator\"\n\n3. You can use it by asking Claude to perform mathematical operations, for example:\n   - \"Calculate the eigenvalues of matrix [[1, 2], [3, 4]]\"\n   - \"Find the mean and standard deviation of [1, 2, 3, 4, 5]\"\n   - \"Multiply matrices [[1, 0], [0, 1]] and [[2, 3], [4, 5]]\"\n\n### Direct Execution\n\nFor advanced usage or custom deployments:\n\n```bash\npython server.py\n# or\nmcp run server.py\n```\n\n## Available Functions\n\nThe server provides the following mathematical functions through the MCP interface:\n\n### Basic Arithmetic\n\n- `add(a: int, b: int) -> int`: Add two integers together\n\n### Linear Algebra\n\n- `matrix_multiply(matrix_a: List[List[float]], matrix_b: List[List[float]]) -> List[List[float]]`: Multiply two matrices\n- `eigen_decomposition(matrix: List[List[float]]) -> Tuple[List[float], List[List[float]]]`: Compute eigenvalues and eigenvectors of a square matrix\n\n### Statistics\n\n- `statistical_analysis(data: List[float]) -> dict[str, float]`: Calculate basic statistics for a dataset including:\n  - Mean\n  - Median\n  - Standard deviation\n  - Minimum value\n  - Maximum value\n\n### Data Analysis\n\n- `polynomial_fit(x: List[float], y: List[float], degree: int = 2) -> List[float]`: Fit a polynomial of specified degree to the given data points\n\n## Development\n\n### Project Structure\n\n```\nmath-mcp/\n├── requirements.txt\n├── README.md\n└── server.py\n```\n\n### Code Quality\n\nThis project adheres to strict code quality standards:\n- Type hints throughout the codebase\n- Comprehensive docstrings following Google style\n- Error handling for numerical operations\n\n## Dependencies\n\n- NumPy: For numerical computations and linear algebra operations\n- FastMCP: For Model Context Protocol server implementation\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n- NumPy team for their excellent scientific computing library\n- Model Context Protocol (MCP) for enabling standardized LLM interactions\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "numpy",
        "mcp",
        "computations",
        "numpy mcp",
        "numpy including",
        "colesmcintosh numpy"
      ],
      "category": "math-and-statistics"
    },
    "githubpradeep--calc-mcp72": {
      "owner": "githubpradeep",
      "name": "calc-mcp72",
      "url": "https://github.com/githubpradeep/calc-mcp72",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Provide basic arithmetic operations as callable tools for Large Language Models via the Model Context Protocol. Perform addition, subtraction, multiplication, and division with input validation to prevent errors like division by zero. Enable seamless integration of calculator functions into LLM workflows for enhanced computational capabilities.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calculator",
        "arithmetic",
        "multiplication",
        "calculator functions",
        "arithmetic operations",
        "calc mcp72"
      ],
      "category": "math-and-statistics"
    },
    "nbiish--mcp-calc-tools": {
      "owner": "nbiish",
      "name": "mcp-calc-tools",
      "url": "https://github.com/nbiish/mcp-calc-tools",
      "imageUrl": "/freedevtools/mcp/pfp/nbiish.webp",
      "description": "Provides advanced mathematical and financial computation capabilities through a standardized interface, enabling AI assistants to perform symbolic calculus, numerical methods, and complex equation solving without manual algorithm implementation.",
      "stars": 4,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-09T09:07:50Z",
      "readme_content": "# MCP Calc Tools\n\nA Model Context Protocol (MCP) server that provides advanced mathematical and financial calculation tools for integration with AI code assistants like Cline and Roo Code.\n\n## Overview\n\nMCP Calc Tools exposes mathematical computation capabilities through a standardized interface that AI assistants can interact with. This enables AI tools to perform complex calculations without having to implement mathematical algorithms directly.\n\n## Features\n\n### Mathematical Tools\n- **Symbolic Calculus**\n  - `derivative`: Calculate symbolic derivatives of expressions\n  - `integral`: Compute symbolic integrals\n  - `limit`: Evaluate limits as variables approach specified values\n  - `solve`: Solve equations for specific variables\n\n### Numerical Methods\n- `riemann_sum`: Calculate definite integrals using Riemann sums with multiple methods (left, right, midpoint, trapezoid)\n- `darboux_sum`: Calculate upper and lower Darboux sums for integral approximation\n- `area`: Calculate the area under a curve between two points\n- `volume`: Calculate volume of revolution around x-axis\n\n### Mathematical Transforms\n- `laplace_transform`: Calculate Laplace transforms of functions\n- `fourier_transform`: Calculate Fourier transforms of functions\n- `z_transform`: Calculate Z-transforms of discrete-time functions\n\n### Financial Tools\n- `compound_interest`: Calculate compound interest with customizable compounding periods\n- `present_value`: Calculate present value of future cash flows\n- `npv`: Calculate Net Present Value of cash flow series\n- `black_scholes`: Calculate option prices using the Black-Scholes model\n- `option_greeks`: Calculate option Greeks (delta, gamma, vega, theta, rho)\n\n### Utility Functions\n- `logarithm`: Calculate logarithm with any base\n- `exponential`: Calculate exponential function (e^x)\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/mcp-calc-tools.git\n\n# Navigate to project directory\ncd mcp-calc-tools\n\n# Install dependencies\nnpm install\n# or\npnpm install\n```\n\n## Usage\n\n### Starting the MCP server\n\n```bash\n# Make the script executable (if needed)\nchmod +x index.js\n\n# Run the server\nnpm start\n# or\nnode index.js\n```\n\n### Integrating with AI Assistants\n\nTo use MCP Calc Tools with AI coding assistants:\n\n1. Configure your AI assistant (Cline/Roo Code) to use the MCP server\n2. Set the server URL to your running instance\n3. The AI assistant will now have access to all the mathematical tools\n\nExample request to calculate a derivative:\n```\nCalculate the derivative of x^2*sin(x)\n```\n\n## Requirements\n\n- Node.js v14 or higher\n- Required packages:\n  - genkit (^1.0.5)\n  - genkitx-mcp (^1.0.5)\n  - mathjs (^12.0.0)\n\n## Development\n\nThe project is structured as follows:\n\n- index.js: Main server implementation with all tool definitions\n- package.json: Project dependencies and script definitions\n\n## License\n\n[Add your license information here]\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "numerical",
        "computation",
        "mcp calc",
        "calc tools",
        "nbiish mcp"
      ],
      "category": "math-and-statistics"
    },
    "pwh-pwh--cal-mcp": {
      "owner": "pwh-pwh",
      "name": "cal-mcp",
      "url": "https://github.com/pwh-pwh/cal-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/pwh-pwh.webp",
      "description": "Evaluate mathematical expressions using the `expr-eval` library, supporting built-in constants like E and PI for quick calculations. It interacts through standard input and output, providing an efficient lightweight service for mathematical evaluations.",
      "stars": 13,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-07T09:58:19Z",
      "readme_content": "# Cal Server\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/pwh-pwh/cal-mcp)](https://archestra.ai/mcp-catalog/pwh-pwh__cal-mcp)\n[![smithery badge](https://smithery.ai/badge/@pwh-pwh/cal-mcp)](https://smithery.ai/server/@pwh-pwh/cal-mcp)\n\n<a href=\"https://glama.ai/mcp/servers/@pwh-pwh/cal-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@pwh-pwh/cal-mcp/badge\" alt=\"Cal Server MCP server\" />\n</a>\n\n## 项目简介\n\n`Cal Server` 是一个基于 `FastMCP` 框架构建的简单数学表达式计算服务，使用 Bun 运行时环境。它利用 `expr-eval` 库解析和计算用户输入的数学表达式，并通过标准输入输出（stdio）与外界交互。该项目旨在提供一个轻量、高效的计算工具，支持基本数学运算和内置常量。\n\n## 功能\n\n- **表达式计算**：支持用户输入数学表达式并返回计算结果。\n- **内置常量**：\n    - `E`：Bun 环境中的 `Math.E`。\n    - `PI`：Bun 环境中的 `Math.PI`。\n    - `true`：逻辑真值。\n    - `false`：逻辑假值。\n- **工具名称**：`cal`。\n- **参数**：接受一个字符串类型的数学表达式（`exp`）。\n\n## 依赖\n\n- `fastmcp`：用于构建 MCP 服务。\n- `expr-eval`：用于解析和计算数学表达式。\n- `zod`：用于参数验证。\n\n## 前置条件\n\n- 确保已安装 [Bun](https://bun.sh/) 运行时（推荐最新版本）。\n\n## 安装\n### Installing via Smithery\n\nTo install cal-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@pwh-pwh/cal-mcp):\n\n```bash\nnpx -y @smithery/cli install @pwh-pwh/cal-mcp --client claude\n```\n\n### mcp客户端配置\n```json\n\"cal-mcp\": {\n      \"name\": \"计算\",\n      \"description\": \"\",\n      \"isActive\": true,\n      \"command\": \"bunx\",\n      \"args\": [\n        \"cal-mcp\"\n      ]\n    }\n```\n\n### Manual Installation\n1. 克隆项目仓库：\n   ```bash\n   git clone <仓库地址>\n   ```\n2. 进入项目目录并安装依赖：\n   ```bash\n   bun install\n   ```\n\n## 使用方法\n\n1. 启动服务：\n   ```bash\n   bun run index.ts\n   ```\n   服务将通过标准输入输出（stdio）运行。\n\n2. 输入数学表达式：\n    - 示例输入：`2 + 3 * PI`\n    - 输出：计算结果（字符串形式）。\n\n3. 支持的表达式示例：\n    - 基本运算：`2 + 2` → `4`\n    - 使用常量：`PI * 2` → `6.283185307179586`\n    - 复杂表达式：`E ^ 2 + 1` → `8.38905609893065`\n\n## 注意事项\n\n- 输入的表达式必须是有效的数学表达式，否则可能抛出错误。\n- 服务当前仅支持通过 `stdio` 交互。\n- 项目使用 Bun 运行时，确保命令与 Bun 兼容。",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "expressions",
        "calculations",
        "evaluate",
        "mcp evaluate",
        "mathematical evaluations",
        "using expr"
      ],
      "category": "math-and-statistics"
    },
    "rishipradeep-think41--math-mcp": {
      "owner": "rishipradeep-think41",
      "name": "math-mcp",
      "url": "https://github.com/rishipradeep-think41/math-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/rishipradeep-think41.webp",
      "description": "Provides a comprehensive set of mathematical calculation tools via the Model Context Protocol, enabling precise and diverse math operations. Supports basic arithmetic, trigonometry, logarithmic functions, and conversion between degrees and radians.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-30T08:50:16Z",
      "readme_content": "# Calculator MCP Server\n[![smithery badge](https://smithery.ai/badge/@rishipradeep-think41/math-mcp)](https://smithery.ai/server/@rishipradeep-think41/math-mcp)\n\nA comprehensive calculator implemented as a Model Context Protocol (MCP) server using TypeScript.\n\nThis server exposes a wide range of mathematical functions as MCP tools, allowing language models connected via MCP clients (like Claude for Desktop, Cursor, etc.) to perform calculations.\n\n## Features\n\nProvides MCP tools for:\n\n*   **Basic Arithmetic:** Addition, Subtraction, Multiplication, Division\n*   **Exponents & Roots:** Power (`^`), Square Root\n*   **Trigonometry:** Sine, Cosine, Tangent (input in radians)\n*   **Inverse Trigonometry:** Arcsine, Arccosine, Arctangent, Arctan2 (output in radians)\n*   **Degree/Radian Conversion:** Convert between degrees and radians\n*   **Logarithms:** Natural Log (ln), Base-10 Log (log10), Log with arbitrary base\n*   **Constants:** Pi (π), Euler's number (e)\n*   **Factorial:** `n!`\n*   **Percentage:** Calculate percentage of a number\n*   **Modulo:** Remainder operation\n*   **Absolute Value:** `abs()`\n*   **Rounding:** Floor, Ceiling, Round to nearest integer\n\n## Prerequisites\n\n*   [Node.js](https://nodejs.org/) (v16 or higher recommended)\n*   [npm](https://www.npmjs.com/) (usually included with Node.js)\n\n## Installation\n\n### Installing via Smithery\n\nTo install math-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@rishipradeep-think41/math-mcp):\n\n```bash\nnpx -y @smithery/cli install @rishipradeep-think41/math-mcp --client claude\n```\n\n### Manual Installation\n1.  Clone the repository:\n    ```bash\n    git clone https://github.com/mvavassori/calculator-mcp-server.git\n    ```\n\n2.  Navigate into the project directory:\n    ```bash\n    cd calculator-mcp-server\n    ```\n\n3.  Install dependencies:\n    ```bash\n    npm install\n    ```\n\n## Running the Server\n\n1.  Build the TypeScript code:\n    ```bash\n    npm run build\n    ```\n    This compiles the code into the `build` directory.\n\n2.  Run the server:\n    ```bash\n    npm run start\n    # OR directly using node:\n    # node build/index.js\n    ```\n\nThe server will start and listen for MCP connections via standard input/output (stdio). You should see a message like `Calculator MCP Server connected via stdio and ready.` printed to your terminal's *standard error*. Keep this terminal window open while using the server with Claude Desktop.\n\n## Connecting to Clients (Claude Desktop Example)\n\nThis server communicates using the MCP stdio transport. To connect it to Claude for Desktop:\n\n1.  **Find Claude Desktop's MCP Configuration File:**\n    *   **macOS:** `~/Library/Application Support/Claude/claude_desktop_config.json`\n    *   **Windows:** `%APPDATA%\\Claude\\claude_desktop_config.json` (You can paste this path into the File Explorer address bar).\n    *   **Linux:** `~/.config/Claude/claude_desktop_config.json`\n    *   If the file or the `Claude` directory doesn't exist, you might need to create it, or open Claude Desktop's Settings (`Claude Menu > Settings... > Developer > Edit Config`) which should create the file for you.\n\n2.  **Edit the Configuration File:** Open the `claude_desktop_config.json` file in a text editor.\n\n3.  **Add the Server Configuration:** Modify the file to include the `mcpServers` object with your calculator server entry. If the file was empty or didn't exist, its entire content should look like this:\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"calculator\": {\n          \"command\": \"node\",\n          \"args\": [\n            \"/home/marco/code/calculator-mcp-server/build/index.js\"\n            // IMPORTANT: Replace this path with the ACTUAL ABSOLUTE PATH\n            // to the 'build/index.js' file on YOUR system.\n          ]\n        }\n        // You can add other servers here under different keys, like:\n        // \"another_server\": { ... }\n      }\n    }\n    ```\n\n    **Notes:**\n    *   **CRITICAL:** Replace `/home/marco/code/calculator-mcp-server/build/index.js` with the correct *absolute path* to the `build/index.js` file within your cloned project directory on your computer.\n    *   On Windows, use double backslashes (`\\\\`) for the path separators, e.g., `\"C:\\\\Users\\\\YourUser\\\\path\\\\to\\\\calculator-mcp-server\\\\build\\\\index.js\"`.\n    *   The key `\"calculator\"` is just a name you give this server connection within Claude's config; it can be anything descriptive.\n    *   If the `mcpServers` object already exists, just add the `\"calculator\": { ... }` entry inside it, separated by a comma if other servers are present.\n\n4.  **Restart Claude for Desktop:** Ensure Claude for Desktop is fully closed and reopened for the new configuration to take effect.\n\nClaude for Desktop should now show the MCP tools icon (a hammer <img src=\"https://mintlify.s3.us-west-1.amazonaws.com/mcp/images/claude-desktop-mcp-hammer-icon.svg\" style=\"display: inline; margin: 0; height: 1em;\"/> ) and be able to use the calculator tools when you ask it to perform calculations.\n\n## License\n\nMIT License\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "mathematical",
        "radians",
        "calculation tools",
        "math mcp",
        "mcp provides"
      ],
      "category": "math-and-statistics"
    },
    "rohinigaonkar--mcp-math-macos": {
      "owner": "rohinigaonkar",
      "name": "mcp-math-macos",
      "url": "https://github.com/rohinigaonkar/mcp-math-macos",
      "imageUrl": "/freedevtools/mcp/pfp/rohinigaonkar.webp",
      "description": "Perform mathematical calculations and visually present results in Keynote on macOS. The agent supports drawing shapes and adding text to slides for creating mathematical presentations.",
      "stars": 4,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-12T01:32:22Z",
      "readme_content": "# Introduction to MCP; Draw & Add Text to Keynote on MacOS\n\nThis project implements a math agent using Model Control Protocol (MCP) that can perform mathematical calculations and present results visually in Keynote on macOS. The agent can draw shapes and add text to Keynote slides, making it useful for creating mathematical presentations.\n\n## Features\n\n- Mathematical operations (addition, subtraction, multiplication, division, etc.)\n- Advanced mathematical functions (factorial, logarithms, trigonometric functions)\n- ASCII value calculations and exponential sum operations\n- Visual presentation in Keynote:\n  - Drawing rectangles\n  - Adding text to slides\n  - Automatic slide management\n\n## Prerequisites\n\n- Python 3.x\n- macOS (for Keynote integration)\n- Keynote installed on your system\n- Google Gemini API key\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone <your-repository-url>\ncd keynote-drawing-text\n```\n\n2. Install required dependencies:\n```bash\npip install -r requirements.txt\n```\n\n3. Create a `.env` file in the project root and add your Gemini API key:\n```\nGEMINI_API_KEY=your_api_key_here\n```\n\n## Project Structure\n\n- `mcp-server.py`: Contains the server implementation with mathematical tools and Keynote integration\n- `mcp-client.py`: Implements the client that communicates with the LLM and manages the workflow\n- `requirements.txt`: Lists all Python dependencies\n\n## Usage\n\nThe client script (`mcp-client.py`) automatically handles the MCP server startup and communication. You only need to run the client with your query:\n\n```bash\npython mcp-client.py \"Your mathematical query here\"\n```\n\nFor example:\n```bash\npython mcp-client.py \"Find the ASCII values of characters in INDIA and then return sum of exponentials of those values\"\n```\n\nIf no query is provided, the script will use a default query mentioned in the above example.\n\nThe client will:\n1. Automatically start the MCP server in the background\n2. Open Keynote and create a new document\n3. Perform the requested mathematical operations\n4. Draw a rectangle on the slide\n5. Add the result as text within the rectangle\n\nNote: The MCP server is managed internally by the client script, so you don't need to start it manually. The server handles all the mathematical operations and Keynote interactions, while the client manages the communication with the language model and orchestrates the overall workflow.\n\n## Available Mathematical Tools\n\n- Basic Operations:\n  - Addition (`add`)\n  - Subtraction (`subtract`)\n  - Multiplication (`multiply`)\n  - Division (`divide`)\n  - Power (`power`)\n  - Square root (`sqrt`)\n  - Cube root (`cbrt`)\n\n- Advanced Operations:\n  - Factorial (`factorial`)\n  - Natural logarithm (`log`)\n  - Remainder (`remainder`)\n  - Trigonometric functions (`sin`, `cos`, `tan`)\n  - Fibonacci sequence (`fibonacci_numbers`)\n  - ASCII value calculations (`strings_to_chars_to_int`)\n  - Exponential sum (`int_list_to_exponential_sum`)\n\n## Keynote Integration\n\nThe project includes tools for Keynote integration:\n- `mac_open_keynote`: Opens Keynote and creates a new document\n- `mac_draw_rectangle`: Draws a rectangle on the current slide\n- `mac_add_text_in_keynote`: Adds text to the current slide\n\n## Error Handling\n\nThe system includes comprehensive error handling for:\n- API communication issues\n- Invalid mathematical operations\n- Keynote integration problems\n- Timeout handling for LLM responses\n\n## Tools\n\n- Model Control Protocol (MCP) for the framework\n- Google Gemini for the language model\n- Apple Keynote for the presentation platform \n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "keynote",
        "macos",
        "presentations",
        "math macos",
        "keynote macos",
        "mathematical presentations"
      ],
      "category": "math-and-statistics"
    },
    "simonberner--mcp-server-calculator": {
      "owner": "simonberner",
      "name": "mcp-server-calculator",
      "url": "https://github.com/simonberner/mcp-server-calculator",
      "imageUrl": "/freedevtools/mcp/pfp/simonberner.webp",
      "description": "Provides basic mathematical operations such as addition, subtraction, multiplication, and division to enhance AI models.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-05-09T11:45:18Z",
      "readme_content": "# How to build an MCP server - Calculator Example\n\n[![smithery badge](https://smithery.ai/badge/@simonberner/mcp-server-calculator)](https://smithery.ai/server/@simonberner/mcp-server-calculator)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/simonberner/mcp-server-calculator/blob/main/LICENSE)\n\n## About\n\nThis is a very simple example of how to build an MCP server that provides basic math operations to an MCP client.\n\n### What is MCP?\n\nModel Context Protocol (MCP) is a protocol that enables LLMs to access custom tools and services. An MCP client can make requests to MCP servers to access tools that they provide. This example represents a simple calculator server that provides basic math operations to a client.\n\n> \"MCP can provide a single, standardized way for AI models to interact with external systems. You write code once and all AI systems can use it.\" [1](#resources)\n\n> \"Servers are the fundamental building block that enriches LLMs with external data and context.\" [2](#resources)\n\n![Chat MCP Calculator](./chat-mcp-calculator.webp)\n\n## Tech Stack\n\n- Python3\n- Pytest\n- MCP SDK\n- MCP CLI\n- Nix (optional)\n\n## How to setup and use\n\n### Smithery\n\nTo install mcp-server-calculator for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@simonberner/mcp-server-calculator):\n\n```bash\nnpx -y @smithery/cli install @simonberner/mcp-server-calculator --client claude\n```\n\n### Development Setup\n\nAs we are using Nix in this project for having a reproducible and isolated development environment, there is no need to install Python or any other dependencies. You will get everything you need out of the box. Also there is no need to create a virtual environment in Python using `venv` or `poetry`, but you have to be willing to install Nix on your system.\n\n- Install [direnv](https://github.com/direnv/direnv) (used to load the development environment)\n- Install [Lix](https://lix.systems/install/)\n- Clone this repository\n- cd into the directory\n- Run `direnv allow`\n- Run `pytest`\n\n### Alternative\n\nIf you don't want to take the Smithery or the Nix route, you can of course also use [uv](https://docs.astral.sh/uv/) to build the package/project. Here is some guidance:\n\n```shell\n# Install uv (see https://docs.astral.sh/uv/getting-started/installation/)\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Create a virtual environment named .venv\nuv venv\n\n# Activate the virtual environment (example for bash/zsh)\nsource .venv/bin/activate\n\n# Now run the install or build commands\nuv pip install -e .\n# or\nuv pip wheel . -w dist\n```\n\n### Running & Testing the Server locally\n\n- [MCP Inspector](https://modelcontextprotocol.io/docs/tools/inspector) is a handy GUI tool that lets you test your custom MCP server via web interface at http://localhost:5173 without integrating it with LLM / AI agents.\n\n```shell\nmcp dev src/mcp_server_calculator/calculator.py\n```\n\n### Host/Client integration\n\n- Add the following to your mcp config:\n\n```json\n{\n  \"mcpServers\": {\n    \"calculator\": {\n      \"command\": \"python\",\n      \"args\": [\n        \"<YOUR-PATH>/mcp-server-calculator/src/mcp_server_calculator/calculator.py\"\n      ]\n    }\n  }\n}\n```\n\n### Notes\n\n- When using [Windsurf IDE](https://codeium.com/windsurf) as MCP Host, you need to have a [Pro Plan](https://codeium.com/pricing) to be able to use Cascade (as MCP Client) with MCP Servers.\n\n## Issues\n\nCheck [Issues](https://github.com/simonberner/mcp-server-calculator/issues) for seeing the current issues or for opening a new one.\n\n## Resources\n\n- [1] [MCP server: A step-by-step guide to building from scratch](https://composio.dev/blog/mcp-server-step-by-step-guide-to-building-from-scrtch/)\n- [2] [What is Model Context Protocol (MCP)?](https://composio.dev/blog/what-is-model-context-protocol-mcp-explained/)\n- [Understanding MCP and how AI engineers can leverage it](https://dev.to/luxdevhq/understanding-mcp-and-how-ai-engineers-can-leverage-it-3e2i`)\n- [MCP SDK](https://pypi.org/project/mcp/)\n- [MCP CLI](https://pypi.org/project/mcp-cli/)\n- [MCP Inspector](https://github.com/modelcontextprotocol/inspector)\n- [The largest collection of MCP Servers](https://mcp.so/)\n- [A Beginner's Guide to using MCP](https://youtu.be/Y_kaQmhGmZk)\n- [Claude MCP has Changed AI Forever - Here's What You NEED to Know](https://www.youtube.com/watch?v=v_6EXt6T83I)\n- [Find MCP servers](https://windsurf.run/mcp)\n- [Build your first MCP server with TypeScript in under 10 minutes](https://hackteam.io/blog/build-your-first-mcp-server-with-typescript-in-under-10-minutes/)\n- [Model Context Protocol (MCP) Introduction](https://modelcontextprotocol.io/introduction)\n\n## Credits\n\n- Nix-Setup taken from [ical2json](https://github.com/CodersOnlyCH/ical2json)\n\n## Nice things to know\n\n### Nix\n\n- [Why using Nix?](https://nixos.org/)\n- [Why using Lix?](https://lix.systems/about/#why-lix)\n- [Nix packages](https://search.nixos.org/packages)\n- [nix-shell](https://nix.dev/manual/nix/2.26/command-ref/nix-shell.html)\n\n### Cloudflare\n\n- [Build a Remote MCP server](https://developers.cloudflare.com/agents/guides/remote-mcp-server/)\n- [Wrangler configuration](https://developers.cloudflare.com/workers/wrangler/configuration/)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "calculator",
        "mathematical",
        "math",
        "server calculator",
        "calculator provides",
        "simonberner mcp"
      ],
      "category": "math-and-statistics"
    },
    "swaroopkasaraneni--math-mcp-server": {
      "owner": "swaroopkasaraneni",
      "name": "math-mcp-server",
      "url": "https://github.com/swaroopkasaraneni/math-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/swaroopkasaraneni.webp",
      "description": "Exposes a range of mathematical operations, enabling integration with applications through the Model Context Protocol (MCP). It provides a standardized interface for performing dynamic computations within large language models.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-04T19:39:57Z",
      "readme_content": "# math-mcp-server\n\n[![smithery badge](https://smithery.ai/badge/@swaroopkasaraneni/math-mcp-server)](https://smithery.ai/server/@swaroopkasaraneni/math-mcp-server)\n\nMath MCP is a protocol that exposes mathematical operations for Claude Desktop. This project fulfills the Model Context Protocol (MCP) standard, allowing dynamic integration of large language models with external applications. Once you start the Math MCP, the protocol will listen for calls from an MCP client, and respond with the operations it exposes via MCP.\n\n### Installing via Smithery\n\nTo install math-mcp-server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@swaroopkasaraneni/math-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @swaroopkasaraneni/math-mcp-server --client claude\n```\n\n### Manual Installation\n\n1. Clone the repository:\n   \n```\ngit clone https://github.com/swaroopkasaraneni/math-mcp-server/\ncd math-mcp-server\n```\n\n2. Install dependencies and build:\n\n```\nnpm install\nnpm run build\n```\n\n### Usage\n\nStart the server with:\n\n```\nnpm start\n```\n\nThe client will then be able to call methods exposed by this protocol. More details about implementing MCP can be found in the [Model Context Protocol Documentation](https://github.com/model-context/protocol).\n\n### License\n\nThis project is licensed under the MIT License.\n\n### Credits\n- Developed by Swaroop Kasaraneni\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "computations",
        "mcp",
        "models",
        "protocol mcp",
        "dynamic computations",
        "swaroopkasaraneni math"
      ],
      "category": "math-and-statistics"
    },
    "swaroopkasaraneni--mcp-servers": {
      "owner": "swaroopkasaraneni",
      "name": "mcp-servers",
      "url": "https://github.com/swaroopkasaraneni/mcp-servers",
      "imageUrl": "/freedevtools/mcp/pfp/swaroopkasaraneni.webp",
      "description": "Provides capabilities for performing complex mathematical computations and operations through a standardized interface, allowing for efficient processing of mathematical tasks.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-30T18:32:44Z",
      "readme_content": "# mcp-servers\n\n[![smithery badge](https://smithery.ai/badge/@swaroopkasaraneni/mcp-servers)](https://smithery.ai/server/@swaroopkasaraneni/mcp-servers)\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "computations",
        "mcp",
        "servers",
        "mcp servers",
        "swaroopkasaraneni mcp",
        "mathematical computations"
      ],
      "category": "math-and-statistics"
    },
    "vinhphamai23--mcp-server-calculator": {
      "owner": "vinhphamai23",
      "name": "mcp-server-calculator",
      "url": "https://github.com/vinhphamai23/mcp-server-calculator",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Enable precise numerical calculations by evaluating mathematical expressions, simplifying complex computations seamlessly within applications.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "numerical",
        "computations",
        "calculator",
        "server calculator",
        "numerical calculations",
        "precise numerical"
      ],
      "category": "math-and-statistics"
    }
  }
}