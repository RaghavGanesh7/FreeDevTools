{
  "category": "git-workflow-management",
  "categoryDisplay": "Git Workflow Management",
  "description": "",
  "totalRepositories": 129,
  "repositories": {
    "AdamPippert--multi-service-mcp-server": {
      "owner": "AdamPippert",
      "name": "multi-service-mcp-server",
      "url": "https://github.com/AdamPippert/multi-service-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/AdamPippert.webp",
      "description": "Integrate and automate various tools such as GitHub, GitLab, Google Maps, and Puppeteer through a unified gateway for efficient data retrieval and workflow enhancement. The modular architecture allows for easy addition or removal of individual tool modules.",
      "stars": 3,
      "forks": 3,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-04-21T16:09:22Z",
      "readme_content": "** NOTE: This project is no longer being maintained, as issues with model memory for smaller models means my preferred method for MCP servers is as individual containerized server providers rather than a monolithic routing provider.  Code is being kept up in case others still want to try to go down this route.\n\n\n\n\n# Model Context Protocol (MCP) Server\n\nA modular server that implements the [Model Context Protocol](https://modelcontextprotocol.io/) standard, providing tools for GitHub, GitLab, Google Maps, Memory storage, and Puppeteer web automation.\n\n## Architecture\n\nThe MCP server is built with a modular architecture, where each tool is implemented as a separate module. The server provides a unified gateway that routes requests to the appropriate tool.\n\n![MCP Server Architecture](./architecture.png)\n\n## Features\n\n- **MCP Gateway**: A unified endpoint for all tool requests following the MCP standard\n- **MCP Manifest**: An endpoint that describes all available tools and their capabilities\n- **Direct Tool Access**: Each tool can be accessed directly via its own API endpoints\n- **Modular Design**: Easy to add or remove tools as needed\n\n### Included Tools\n\n1. **GitHub Tool**: Interact with GitHub repositories, issues, and search\n2. **GitLab Tool**: Interact with GitLab projects, issues, and pipelines\n3. **Google Maps Tool**: Geocoding, directions, and places search\n4. **Memory Tool**: Store and retrieve data persistently\n5. **Puppeteer Tool**: Take screenshots, generate PDFs, and extract content from websites\n\n## Getting Started\n\n### Prerequisites\n\n- Python 3.8 or higher\n- Node.js 14 or higher\n- A Red Hat-based Linux distribution (RHEL, CentOS, Fedora) or any Linux/macOS system\n\n### Installation\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/yourusername/mcp-server.git\n   cd mcp-server\n   ```\n\n2. Install Python dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n3. Install Node.js dependencies:\n   ```bash\n   npm install\n   ```\n\n4. Create a `.env` file with your configuration:\n   ```\n   SECRET_KEY=your-secret-key\n   DEBUG=False\n   \n   # GitHub configuration\n   GITHUB_TOKEN=your-github-token\n   \n   # GitLab configuration\n   GITLAB_TOKEN=your-gitlab-token\n   \n   # Google Maps configuration\n   GMAPS_API_KEY=your-google-maps-api-key\n   \n   # Memory configuration\n   MEMORY_DB_URI=sqlite:///memory.db\n   \n   # Puppeteer configuration\n   PUPPETEER_HEADLESS=true\n   CHROME_PATH=/usr/bin/chromium-browser\n   ```\n\n5. Start the server:\n   ```bash\n   python app.py\n   ```\n\n### Containerized Deployment\n\nYou can run the server using either Docker or Podman (Red Hat's container engine).\n\n#### Docker Deployment\n\nIf you already have Docker and docker-compose installed:\n\n1. Build the Docker image:\n   ```bash\n   docker build -t mcp-server .\n   ```\n\n2. Run the container:\n   ```bash\n   docker run -p 5000:5000 --env-file .env mcp-server\n   ```\n\n3. Alternatively, use docker-compose:\n   \n   Create a `docker-compose.yml` file:\n   ```yaml\n   version: '3'\n   services:\n     mcp-server:\n       build: .\n       ports:\n         - \"5000:5000\"\n       volumes:\n         - ./data:/app/data\n       env_file:\n         - .env\n       restart: unless-stopped\n   ```\n\n   Then run:\n   ```bash\n   docker-compose up -d\n   ```\n\n#### Podman Deployment\n\nFor Red Hat based systems (RHEL, CentOS, Fedora) using Podman:\n\n1. Build the container image:\n   ```bash\n   podman build -t mcp-server .\n   ```\n\n2. Run the container:\n   ```bash\n   podman run -p 5000:5000 --env-file .env mcp-server\n   ```\n\n3. If you need persistent storage:\n   ```bash\n   mkdir -p ./data\n   podman run -p 5000:5000 --env-file .env -v ./data:/app/data:Z mcp-server\n   ```\n   Note: The `:Z` suffix is important for SELinux-enabled systems.\n\n4. Using Podman Compose (if installed):\n   ```bash\n   # Install podman-compose if needed\n   pip install podman-compose\n   \n   # Use the same docker-compose.yml file as above\n   podman-compose up -d\n   ```\n\n## Using the MCP Server\n\n### MCP Gateway\n\nThe MCP Gateway is the main endpoint for accessing all tools using the MCP standard.\n\n**Endpoint**: `POST /mcp/gateway`\n\n**Request format**:\n```json\n{\n  \"tool\": \"github\",\n  \"action\": \"listRepos\",\n  \"parameters\": {\n    \"username\": \"octocat\"\n  }\n}\n```\n\n**Response format**:\n```json\n{\n  \"tool\": \"github\",\n  \"action\": \"listRepos\",\n  \"status\": \"success\",\n  \"result\": [\n    {\n      \"id\": 1296269,\n      \"name\": \"Hello-World\",\n      \"full_name\": \"octocat/Hello-World\",\n      \"owner\": {\n        \"login\": \"octocat\",\n        \"id\": 1\n      },\n      ...\n    }\n  ]\n}\n```\n\n### MCP Manifest\n\nThe MCP Manifest describes all available tools and their capabilities.\n\n**Endpoint**: `GET /mcp/manifest`\n\n**Response format**:\n```json\n{\n  \"manifestVersion\": \"1.0\",\n  \"tools\": {\n    \"github\": {\n      \"actions\": {\n        \"listRepos\": {\n          \"description\": \"List repositories for a user or organization\",\n          \"parameters\": {\n            \"username\": {\n              \"type\": \"string\",\n              \"description\": \"GitHub username or organization name\"\n            }\n          },\n          \"returns\": {\n            \"type\": \"array\",\n            \"description\": \"List of repository objects\"\n          }\n        },\n        ...\n      }\n    },\n    ...\n  }\n}\n```\n\n### Direct Tool Access\n\nEach tool can also be accessed directly via its own API endpoints:\n\n- GitHub: `/tool/github/...`\n- GitLab: `/tool/gitlab/...`\n- Google Maps: `/tool/gmaps/...`\n- Memory: `/tool/memory/...`\n- Puppeteer: `/tool/puppeteer/...`\n\nSee the API documentation for each tool for details on the available endpoints.\n\n## Tool Documentation\n\n### GitHub Tool\n\nThe GitHub tool provides access to the GitHub API for repositories, issues, and search.\n\n**Actions**:\n- `listRepos`: List repositories for a user or organization\n- `getRepo`: Get details for a specific repository\n- `searchRepos`: Search for repositories\n- `getIssues`: Get issues for a repository\n- `createIssue`: Create a new issue in a repository\n\n### GitLab Tool\n\nThe GitLab tool provides access to the GitLab API for projects, issues, and pipelines.\n\n**Actions**:\n- `listProjects`: List all projects accessible by the authenticated user\n- `getProject`: Get details for a specific project\n- `searchProjects`: Search for projects on GitLab\n- `getIssues`: Get issues for a project\n- `createIssue`: Create a new issue in a project\n- `getPipelines`: Get pipelines for a project\n\n### Google Maps Tool\n\nThe Google Maps tool provides access to the Google Maps API for geocoding, directions, and places search.\n\n**Actions**:\n- `geocode`: Convert an address to geographic coordinates\n- `reverseGeocode`: Convert geographic coordinates to an address\n- `getDirections`: Get directions between two locations\n- `searchPlaces`: Search for places using the Google Places API\n- `getPlaceDetails`: Get details for a specific place\n\n### Memory Tool\n\nThe Memory tool provides a persistent key-value store for storing and retrieving data.\n\n**Actions**:\n- `get`: Get a memory item by key\n- `set`: Create or update a memory item\n- `delete`: Delete a memory item by key\n- `list`: List all memory items, with optional filtering\n- `search`: Search memory items by value\n\n### Puppeteer Tool\n\nThe Puppeteer tool provides web automation capabilities for taking screenshots, generating PDFs, and extracting content from websites.\n\n**Actions**:\n- `screenshot`: Take a screenshot of a webpage\n- `pdf`: Generate a PDF of a webpage\n- `extract`: Extract content from a webpage\n\n## Contributing\n\nContributions are welcome! Here's how you can extend the MCP server:\n\n### Adding a New Tool\n\n1. Create a new file in the `tools` directory, e.g., `tools/newtool_tool.py`\n2. Implement the tool with actions following the same pattern as existing tools\n3. Add the tool to the manifest in `app.py`\n4. Register the tool's blueprint in `tools/__init__.py`\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgements\n\n- [Model Context Protocol](https://modelcontextprotocol.io/) for the standard specification\n- [Flask](https://flask.palletsprojects.com/) for the web framework\n- [Puppeteer](https://pptr.dev/) for web automation\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "gitlab",
        "git workflow",
        "tools github",
        "gitlab google"
      ],
      "category": "git-workflow-management"
    },
    "AlexKissiJr--unreal-mcp-server": {
      "owner": "AlexKissiJr",
      "name": "unreal-mcp-server",
      "url": "https://github.com/AlexKissiJr/unreal-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/AlexKissiJr.webp",
      "description": "Interact with GitHub repositories to perform file operations, manage branches, and conduct advanced searches. This server supports batch operations and maintains Git history, facilitating effective repository management.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-20T23:01:39Z",
      "readme_content": "# GitHub MCP Server\n\nMCP Server for the GitHub API, enabling file operations, repository management, search functionality, and more.\n\n### Features\n\n- **Automatic Branch Creation**: When creating/updating files or pushing changes, branches are automatically created if they don't exist\n- **Comprehensive Error Handling**: Clear error messages for common issues\n- **Git History Preservation**: Operations maintain proper Git history without force pushing\n- **Batch Operations**: Support for both single-file and multi-file operations\n- **Advanced Search**: Support for searching code, issues/PRs, and users\n\n\n## Tools\n\n1. `create_or_update_file`\n   - Create or update a single file in a repository\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `path` (string): Path where to create/update the file\n     - `content` (string): Content of the file\n     - `message` (string): Commit message\n     - `branch` (string): Branch to create/update the file in\n     - `sha` (optional string): SHA of file being replaced (for updates)\n   - Returns: File content and commit details\n\n2. `push_files`\n   - Push multiple files in a single commit\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `branch` (string): Branch to push to\n     - `files` (array): Files to push, each with `path` and `content`\n     - `message` (string): Commit message\n   - Returns: Updated branch reference\n\n3. `search_repositories`\n   - Search for GitHub repositories\n   - Inputs:\n     - `query` (string): Search query\n     - `page` (optional number): Page number for pagination\n     - `perPage` (optional number): Results per page (max 100)\n   - Returns: Repository search results\n\n4. `create_repository`\n   - Create a new GitHub repository\n   - Inputs:\n     - `name` (string): Repository name\n     - `description` (optional string): Repository description\n     - `private` (optional boolean): Whether repo should be private\n     - `autoInit` (optional boolean): Initialize with README\n   - Returns: Created repository details\n\n5. `get_file_contents`\n   - Get contents of a file or directory\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `path` (string): Path to file/directory\n     - `branch` (optional string): Branch to get contents from\n   - Returns: File/directory contents\n\n6. `create_issue`\n   - Create a new issue\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `title` (string): Issue title\n     - `body` (optional string): Issue description\n     - `assignees` (optional string[]): Usernames to assign\n     - `labels` (optional string[]): Labels to add\n     - `milestone` (optional number): Milestone number\n   - Returns: Created issue details\n\n7. `create_pull_request`\n   - Create a new pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `title` (string): PR title\n     - `body` (optional string): PR description\n     - `head` (string): Branch containing changes\n     - `base` (string): Branch to merge into\n     - `draft` (optional boolean): Create as draft PR\n     - `maintainer_can_modify` (optional boolean): Allow maintainer edits\n   - Returns: Created pull request details\n\n8. `fork_repository`\n   - Fork a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `organization` (optional string): Organization to fork to\n   - Returns: Forked repository details\n\n9. `create_branch`\n   - Create a new branch\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `branch` (string): Name for new branch\n     - `from_branch` (optional string): Source branch (defaults to repo default)\n   - Returns: Created branch reference\n\n10. `list_issues`\n    - List and filter repository issues\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `state` (optional string): Filter by state ('open', 'closed', 'all')\n      - `labels` (optional string[]): Filter by labels\n      - `sort` (optional string): Sort by ('created', 'updated', 'comments')\n      - `direction` (optional string): Sort direction ('asc', 'desc')\n      - `since` (optional string): Filter by date (ISO 8601 timestamp)\n      - `page` (optional number): Page number\n      - `per_page` (optional number): Results per page\n    - Returns: Array of issue details\n\n11. `update_issue`\n    - Update an existing issue\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `issue_number` (number): Issue number to update\n      - `title` (optional string): New title\n      - `body` (optional string): New description\n      - `state` (optional string): New state ('open' or 'closed')\n      - `labels` (optional string[]): New labels\n      - `assignees` (optional string[]): New assignees\n      - `milestone` (optional number): New milestone number\n    - Returns: Updated issue details\n\n12. `add_issue_comment`\n    - Add a comment to an issue\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `issue_number` (number): Issue number to comment on\n      - `body` (string): Comment text\n    - Returns: Created comment details\n\n13. `search_code`\n    - Search for code across GitHub repositories\n    - Inputs:\n      - `q` (string): Search query using GitHub code search syntax\n      - `sort` (optional string): Sort field ('indexed' only)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: Code search results with repository context\n\n14. `search_issues`\n    - Search for issues and pull requests\n    - Inputs:\n      - `q` (string): Search query using GitHub issues search syntax\n      - `sort` (optional string): Sort field (comments, reactions, created, etc.)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: Issue and pull request search results\n\n15. `search_users`\n    - Search for GitHub users\n    - Inputs:\n      - `q` (string): Search query using GitHub users search syntax\n      - `sort` (optional string): Sort field (followers, repositories, joined)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: User search results\n\n16. `list_commits`\n   - Gets commits of a branch in a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `page` (optional string): page number\n     - `per_page` (optional string): number of record per page\n     - `sha` (optional string): branch name\n   - Returns: List of commits\n\n17. `get_issue`\n   - Gets the contents of an issue within a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `issue_number` (number): Issue number to retrieve\n   - Returns: Github Issue object & details\n\n18. `get_pull_request`\n   - Get details of a specific pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Pull request details including diff and review status\n\n19. `list_pull_requests`\n   - List and filter repository pull requests\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `state` (optional string): Filter by state ('open', 'closed', 'all')\n     - `head` (optional string): Filter by head user/org and branch\n     - `base` (optional string): Filter by base branch\n     - `sort` (optional string): Sort by ('created', 'updated', 'popularity', 'long-running')\n     - `direction` (optional string): Sort direction ('asc', 'desc')\n     - `per_page` (optional number): Results per page (max 100)\n     - `page` (optional number): Page number\n   - Returns: Array of pull request details\n\n20. `create_pull_request_review`\n   - Create a review on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `body` (string): Review comment text\n     - `event` (string): Review action ('APPROVE', 'REQUEST_CHANGES', 'COMMENT')\n     - `commit_id` (optional string): SHA of commit to review\n     - `comments` (optional array): Line-specific comments, each with:\n       - `path` (string): File path\n       - `position` (number): Line position in diff\n       - `body` (string): Comment text\n   - Returns: Created review details\n\n21. `merge_pull_request`\n   - Merge a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `commit_title` (optional string): Title for merge commit\n     - `commit_message` (optional string): Extra detail for merge commit\n     - `merge_method` (optional string): Merge method ('merge', 'squash', 'rebase')\n   - Returns: Merge result details\n\n22. `get_pull_request_files`\n   - Get the list of files changed in a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of changed files with patch and status details\n\n23. `get_pull_request_status`\n   - Get the combined status of all status checks for a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Combined status check results and individual check details\n\n24. `update_pull_request_branch`\n   - Update a pull request branch with the latest changes from the base branch (equivalent to GitHub's \"Update branch\" button)\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `expected_head_sha` (optional string): The expected SHA of the pull request's HEAD ref\n   - Returns: Success message when branch is updated\n\n25. `get_pull_request_comments`\n   - Get the review comments on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of pull request review comments with details like the comment text, author, and location in the diff\n\n26. `get_pull_request_reviews`\n   - Get the reviews on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of pull request reviews with details like the review state (APPROVED, CHANGES_REQUESTED, etc.), reviewer, and review body\n\n## Search Query Syntax\n\n### Code Search\n- `language:javascript`: Search by programming language\n- `repo:owner/name`: Search in specific repository\n- `path:app/src`: Search in specific path\n- `extension:js`: Search by file extension\n- Example: `q: \"import express\" language:typescript path:src/`\n\n### Issues Search\n- `is:issue` or `is:pr`: Filter by type\n- `is:open` or `is:closed`: Filter by state\n- `label:bug`: Search by label\n- `author:username`: Search by author\n- Example: `q: \"memory leak\" is:issue is:open label:bug`\n\n### Users Search\n- `type:user` or `type:org`: Filter by account type\n- `followers:>1000`: Filter by followers\n- `location:London`: Search by location\n- Example: `q: \"fullstack developer\" location:London followers:>100`\n\nFor detailed search syntax, see [GitHub's searching documentation](https://docs.github.com/en/search-github/searching-on-github).\n\n## Setup\n\n### Personal Access Token\n[Create a GitHub Personal Access Token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens) with appropriate permissions:\n   - Go to [Personal access tokens](https://github.com/settings/tokens) (in GitHub Settings > Developer settings)\n   - Select which repositories you'd like this token to have access to (Public, All, or Select)\n   - Create a token with the `repo` scope (\"Full control of private repositories\")\n     - Alternatively, if working only with public repositories, select only the `public_repo` scope\n   - Copy the generated token\n\n### Usage with Claude Desktop\nTo use this with Claude Desktop, add the following to your `claude_desktop_config.json`:\n\n#### Docker\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"mcp/github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n## Build\n\nDocker build:\n\n```bash\ndocker build -t mcp/github -f src/github/Dockerfile .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "github",
        "repositories",
        "git workflow",
        "maintains git",
        "git history"
      ],
      "category": "git-workflow-management"
    },
    "AndyManastorm--smithery-reference-servers": {
      "owner": "AndyManastorm",
      "name": "smithery-reference-servers",
      "url": "https://github.com/AndyManastorm/smithery-reference-servers",
      "imageUrl": "/freedevtools/mcp/pfp/AndyManastorm.webp",
      "description": "Interact with GitHub repositories to perform file operations, manage repositories, search for code and issues, and automate workflows. Supports automatic branch creation, comprehensive error handling, and preservation of Git history while allowing batch and single-file operations.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-04-09T04:34:38Z",
      "readme_content": "# Model Context Protocol servers\n\nThis repository is a collection of *reference implementations* for the [Model Context Protocol](https://modelcontextprotocol.io/) (MCP), as well as references\nto community built servers and additional resources.\n\nThe servers in this repository showcase the versatility and extensibility of MCP, demonstrating how it can be used to give Large Language Models (LLMs) secure, controlled access to tools and data sources.\nEach MCP server is implemented with either the [Typescript MCP SDK](https://github.com/modelcontextprotocol/typescript-sdk) or [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk).\n\n> Note: Lists in this README are maintained in alphabetical order to minimize merge conflicts when adding new items.\n\n## 🌟 Reference Servers\n\nThese servers aim to demonstrate MCP features and the Typescript and Python SDK.\n\n- **[AWS KB Retrieval](src/aws-kb-retrieval-server)** - Retrieval from AWS Knowledge Base using Bedrock Agent Runtime\n- **[Brave Search](src/brave-search)** - Web and local search using Brave's Search API\n- **[EverArt](src/everart)** - AI image generation using various models\n- **[Everything](src/everything)** - Reference / test server with prompts, resources, and tools\n- **[Fetch](src/fetch)** - Web content fetching and conversion for efficient LLM usage\n- **[Filesystem](src/filesystem)** - Secure file operations with configurable access controls\n- **[Git](src/git)** - Tools to read, search, and manipulate Git repositories\n- **[GitHub](src/github)** - Repository management, file operations, and GitHub API integration\n- **[GitLab](src/gitlab)** - GitLab API, enabling project management\n- **[Google Drive](src/gdrive)** - File access and search capabilities for Google Drive\n- **[Google Maps](src/google-maps)** - Location services, directions, and place details\n- **[Memory](src/memory)** - Knowledge graph-based persistent memory system\n- **[PostgreSQL](src/postgres)** - Read-only database access with schema inspection\n- **[Puppeteer](src/puppeteer)** - Browser automation and web scraping\n- **[Sentry](src/sentry)** - Retrieving and analyzing issues from Sentry.io\n- **[Sequential Thinking](src/sequentialthinking)** - Dynamic and reflective problem-solving through thought sequences\n- **[Slack](src/slack)** - Channel management and messaging capabilities\n- **[Sqlite](src/sqlite)** - Database interaction and business intelligence capabilities\n- **[Time](src/time)** - Time and timezone conversion capabilities\n\n## 🤝 Third-Party Servers\n\n### 🎖️ Official Integrations\n\nOfficial integrations are maintained by companies building production ready MCP servers for their platforms.\n\n- <img height=\"12\" width=\"12\" src=\"https://axiom.co/favicon.ico\" alt=\"Axiom Logo\" /> **[Axiom](https://github.com/axiomhq/mcp-server-axiom)** - Query and analyze your Axiom logs, traces, and all other event data in natural language\n- <img height=\"12\" width=\"12\" src=\"https://browserbase.com/favicon.ico\" alt=\"Browserbase Logo\" /> **[Browserbase](https://github.com/browserbase/mcp-server-browserbase)** - Automate browser interactions in the cloud (e.g. web navigation, data extraction, form filling, and more)\n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/cloudflare\" /> **[Cloudflare](https://github.com/cloudflare/mcp-server-cloudflare)** - Deploy, configure & interrogate your resources on the Cloudflare developer platform (e.g. Workers/KV/R2/D1)\n- <img height=\"12\" width=\"12\" src=\"https://e2b.dev/favicon.ico\" alt=\"E2B Logo\" /> **[E2B](https://github.com/e2b-dev/mcp-server)** - Run code in secure sandboxes hosted by [E2B](https://e2b.dev)\n- <img height=\"12\" width=\"12\" src=\"https://exa.ai/images/favicon-32x32.png\" alt=\"Exa Logo\" /> **[Exa](https://github.com/exa-labs/exa-mcp-server)** - Search Engine made for AIs by [Exa](https://exa.ai)\n- <img height=\"12\" width=\"12\" src=\"https://fireproof.storage/favicon.ico\" alt=\"Fireproof Logo\" /> **[Fireproof](https://github.com/fireproof-storage/mcp-database-server)** - Immutable ledger database with live synchronization\n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/jetbrains\" /> **[JetBrains](https://github.com/JetBrains/mcp-jetbrains)** – Work on your code with JetBrains IDEs\n- <img height=\"12\" width=\"12\" src=\"https://kagi.com/favicon.ico\" alt=\"Kagi Logo\" /> **[Kagi Search](https://github.com/kagisearch/kagimcp)** - Search the web using Kagi's search API\n- <img height=\"12\" width=\"12\" src=\"https://www.meilisearch.com/favicon.ico\" alt=\"Meilisearch Logo\" /> **[Meilisearch](https://github.com/meilisearch/meilisearch-mcp)** - Interact & query with Meilisearch (Full-text & semantic search API)\n- <img height=\"12\" width=\"12\" src=\"https://metoro.io/static/images/logos/Metoro.svg\" /> **[Metoro](https://github.com/metoro-io/metoro-mcp-server)** - Query and interact with kubernetes environments monitored by Metoro\n- <img height=\"12\" width=\"12\" src=\"https://www.motherduck.com/favicon.ico\" alt=\"MotherDuck Logo\" /> **[MotherDuck](https://github.com/motherduckdb/mcp-server-motherduck)** - Query and analyze data with MotherDuck and local DuckDB\n- <img height=\"12\" width=\"12\" src=\"https://needle-ai.com/images/needle-logo-orange-2-rounded.png\" alt=\"Needle AI Logo\" /> **[Needle](https://github.com/needle-ai/needle-mcp)** - Production-ready RAG out of the box to search and retrieve data from your own documents.\n- <img height=\"12\" width=\"12\" src=\"https://neo4j.com/favicon.ico\" alt=\"Neo4j Logo\" /> **[Neo4j](https://github.com/neo4j-contrib/mcp-neo4j/)** - Neo4j graph database server (schema + read/write-cypher) and separate graph database backed memory\n- **[Neon](https://github.com/neondatabase/mcp-server-neon)** - Interact with the Neon serverless Postgres platform\n- <img height=\"12\" width=\"12\" src=\"https://qdrant.tech/img/brand-resources-logos/logomark.svg\" /> **[Qdrant](https://github.com/qdrant/mcp-server-qdrant/)** - Implement semantic memory layer on top of the Qdrant vector search engine\n- **[Raygun](https://github.com/MindscapeHQ/mcp-server-raygun)** - Interact with your crash reporting and real using monitoring data on your Raygun account\n- <img height=\"12\" width=\"12\" src=\"https://pics.fatwang2.com/56912e614b35093426c515860f9f2234.svg\" /> [Search1API](https://github.com/fatwang2/search1api-mcp) - One API for Search, Crawling, and Sitemaps\n- <img height=\"12\" width=\"12\" src=\"https://www.tinybird.co/favicon.ico\" alt=\"Tinybird Logo\" /> **[Tinybird](https://github.com/tinybirdco/mcp-tinybird)** - Interact with Tinybird serverless ClickHouse platform\n\n### 🌎 Community Servers\n\nA growing set of community-developed and maintained servers demonstrates various applications of MCP across different domains.\n\n> **Note:** Community servers are **untested** and should be used at **your own risk**. They are not affiliated with or endorsed by Anthropic.\n\n- **[AWS S3](https://github.com/aws-samples/sample-mcp-server-s3)** - A sample MCP server for AWS S3 that flexibly fetches objects from S3 such as PDF documents\n- **[AWS](https://github.com/rishikavikondala/mcp-server-aws)** - Perform operations on your AWS resources using an LLM\n- **[Airtable](https://github.com/domdomegg/airtable-mcp-server)** - Read and write access to [Airtable](https://airtable.com/) databases, with schema inspection.\n- **[Airtable](https://github.com/felores/airtable-mcp)** - Airtable Model Context Protocol Server.\n- **[AlphaVantage](https://github.com/calvernaz/alphavantage)** - MCP server for stock market data API [AlphaVantage](https://www.alphavantage.co)\n- **[Anki](https://github.com/scorzeth/anki-mcp-server)** - An MCP server for interacting with your [Anki](https://apps.ankiweb.net) decks and cards.\n- **[Any Chat Completions](https://github.com/pyroprompts/any-chat-completions-mcp)** - Interact with any OpenAI SDK Compatible Chat Completions API like OpenAI, Perplexity, Groq, xAI and many more.\n- **[Atlassian](https://github.com/sooperset/mcp-atlassian)** - Interact with Atlassian Cloud products (Confluence and Jira) including searching/reading Confluence spaces/pages, accessing Jira issues, and project metadata.\n- **[BigQuery](https://github.com/LucasHild/mcp-server-bigquery)** (by LucasHild) - This server enables LLMs to inspect database schemas and execute queries on BigQuery.\n- **[BigQuery](https://github.com/ergut/mcp-bigquery-server)** (by ergut) - Server implementation for Google BigQuery integration that enables direct BigQuery database access and querying capabilities\n- **[ChatMCP](https://github.com/AI-QL/chat-mcp)** – An Open Source Cross-platform GUI Desktop application compatible with Linux, macOS, and Windows, enabling seamless interaction with MCP servers across dynamically selectable LLMs, by **[AIQL](https://github.com/AI-QL)**\n- **[ChatSum](https://github.com/mcpso/mcp-server-chatsum)** - Query and Summarize chat messages with LLM. by [mcpso](https://mcp.so)\n- **[Chroma](https://github.com/privetin/chroma)** - Vector database server for semantic document search and metadata filtering, built on Chroma\n- **[Cloudinary](https://github.com/felores/cloudinary-mcp-server)** - Cloudinary Model Context Protocol Server to upload media to Cloudinary and get back the media link and details.\n- **[cognee-mcp](https://github.com/topoteretes/cognee-mcp-server)** - GraphRAG memory server with customizable ingestion, data processing and search\n- **[coin_api_mcp](https://github.com/longmans/coin_api_mcp)** - Provides access to [coinmarketcap](https://coinmarketcap.com/) cryptocurrency data.\n- **[Contentful-mcp](https://github.com/ivo-toby/contentful-mcp)** - Read, update, delete, publish content in your [Contentful](https://contentful.com) space(s) from this MCP Server.\n- **[Data Exploration](https://github.com/reading-plus-ai/mcp-server-data-exploration)** - MCP server for autonomous data exploration on .csv-based datasets, providing intelligent insights with minimal effort. NOTE: Will execute arbitrary Python code on your machine, please use with caution!\n- **[Dataset Viewer](https://github.com/privetin/dataset-viewer)** - Browse and analyze Hugging Face datasets with features like search, filtering, statistics, and data export\n- **[DevRev](https://github.com/kpsunil97/devrev-mcp-server)** - An MCP server to integrate with DevRev APIs to search through your DevRev Knowledge Graph where objects can be imported from diff. sources listed [here](https://devrev.ai/docs/import#available-sources).\n- **[Dify](https://github.com/YanxingLiu/dify-mcp-server)** - A simple implementation of an MCP server for dify workflows.\n- **[Docker](https://github.com/ckreiling/mcp-server-docker)** - Integrate with Docker to manage containers, images, volumes, and networks.\n- **[Drupal](https://github.com/Omedia/mcp-server-drupal)** - Server for interacting with [Drupal](https://www.drupal.org/project/mcp) using STDIO transport layer.\n- **[Elasticsearch](https://github.com/cr7258/elasticsearch-mcp-server)** - MCP server implementation that provides Elasticsearch interaction.\n- **[Fetch](https://github.com/zcaceres/fetch-mcp)** - A server that flexibly fetches HTML, JSON, Markdown, or plaintext.\n- **[FireCrawl](https://github.com/vrknetha/mcp-server-firecrawl)** - Advanced web scraping with JavaScript rendering, PDF support, and smart rate limiting\n- **[FlightRadar24](https://github.com/sunsetcoder/flightradar24-mcp-server)** - A Claude Desktop MCP server that helps you track flights in real-time using Flightradar24 data.\n- **[Glean](https://github.com/longyi1207/glean-mcp-server)** - A server that uses Glean API to search and chat.\n- **[Google Calendar](https://github.com/v-3/google-calendar)** - Integration with Google Calendar to check schedules, find time, and add/delete events\n- **[Google Tasks](https://github.com/zcaceres/gtasks-mcp)** - Google Tasks API Model Context Protocol Server.\n- **[Home Assistant](https://github.com/tevonsb/homeassistant-mcp)** - Interact with [Home Assistant](https://www.home-assistant.io/) including viewing and controlling lights, switches, sensors, and all other Home Assistant entities.\n- **[HuggingFace Spaces](https://github.com/evalstate/mcp-hfspace)** - Server for using HuggingFace Spaces, supporting Open Source Image, Audio, Text Models and more. Claude Desktop mode for easy integration.\n- **[Inoyu](https://github.com/sergehuber/inoyu-mcp-unomi-server)** - Interact with an Apache Unomi CDP customer data platform to retrieve and update customer profiles\n- **[Keycloak MCP](https://github.com/ChristophEnglisch/keycloak-model-context-protocol)** - This MCP server enables natural language interaction with Keycloak for user and realm management including creating, deleting, and listing users and realms.\n- **[Kubernetes](https://github.com/Flux159/mcp-server-kubernetes)** - Connect to Kubernetes cluster and manage pods, deployments, and services.\n- **[Linear](https://github.com/jerhadf/linear-mcp-server)** - Allows LLM to interact with Linear's API for project management, including searching, creating, and updating issues.\n- **[LlamaCloud](https://github.com/run-llama/mcp-server-llamacloud)** (by marcusschiesser) - Integrate the data stored in a managed index on [LlamaCloud](https://cloud.llamaindex.ai/)\n- **[MCP Installer](https://github.com/anaisbetts/mcp-installer)** - This server is a server that installs other MCP servers for you.\n- **[mcp-k8s-go](https://github.com/strowk/mcp-k8s-go)** - Golang-based Kubernetes server for MCP to browse pods and their logs, events, namespaces and more. Built to be extensible.\n- **[MSSQL](https://github.com/aekanun2020/mcp-server/)** - MSSQL database integration with configurable access controls and schema inspection\n- **[Markdownify](https://github.com/zcaceres/mcp-markdownify-server)** - MCP to convert almost anything to Markdown (PPTX, HTML, PDF, Youtube Transcripts and more)\n- **[Minima](https://github.com/dmayboroda/minima)** - MCP server for RAG on local files\n- **[MongoDB](https://github.com/kiliczsh/mcp-mongo-server)** - A Model Context Protocol Server for MongoDB.\n- **[MySQL](https://github.com/benborla/mcp-server-mysql)** (by benborla) - MySQL database integration in NodeJS with configurable access controls and schema inspection\n- **[MySQL](https://github.com/designcomputer/mysql_mcp_server)** (by DesignComputer) - MySQL database integration in Python with configurable access controls and schema inspection\n- **[NS Travel Information](https://github.com/r-huijts/ns-mcp-server)** - Access Dutch Railways (NS) real-time train travel information and disruptions through the official NS API.\n- **[Notion](https://github.com/suekou/mcp-notion-server)** (by suekou) - Interact with Notion API.\n- **[Notion](https://github.com/v-3/notion-server)** (by v-3) - Notion MCP integration. Search, Read, Update, and Create pages through Claude chat.\n- **[oatpp-mcp](https://github.com/oatpp/oatpp-mcp)** - C++ MCP integration for Oat++. Use [Oat++](https://oatpp.io) to build MCP servers.\n- **[Obsidian Markdown Notes](https://github.com/calclavia/mcp-obsidian)** - Read and search through your Obsidian vault or any directory containing Markdown notes\n- **[OpenAPI](https://github.com/snaggle-ai/openapi-mcp-server)** - Interact with [OpenAPI](https://www.openapis.org/) APIs.\n- **[OpenCTI](https://github.com/Spathodea-Network/opencti-mcp)** - Interact with OpenCTI platform to retrieve threat intelligence data including reports, indicators, malware and threat actors.\n- **[OpenRPC](https://github.com/shanejonas/openrpc-mpc-server)** - Interact with and discover JSON-RPC APIs via [OpenRPC](https://open-rpc.org).\n- **[Pandoc](https://github.com/vivekVells/mcp-pandoc)** - MCP server for seamless document format conversion using Pandoc, supporting Markdown, HTML, and plain text, with other formats like PDF, csv and docx in development.\n- **[Pinecone](https://github.com/sirmews/mcp-pinecone)** - MCP server for searching and uploading records to Pinecone. Allows for simple RAG features, leveraging Pinecone's Inference API.\n- **[Placid.app](https://github.com/felores/placid-mcp-server)** - Generate image and video creatives using Placid.app templates\n- **[Playwright](https://github.com/executeautomation/mcp-playwright)** - This MCP Server will help you run browser automation and webscraping using Playwright\n- **[Postman](https://github.com/shannonlal/mcp-postman)** - MCP server for running Postman Collections locally via Newman. Allows for simple execution of Postman Server and returns the results of whether the collection passed all the tests.\n- **[RAG Web Browser](https://github.com/apify/mcp-server-rag-web-browser)** An MCP server for Apify's RAG Web Browser Actor to perform web searches, scrape URLs, and return content in Markdown.\n- **[Rememberizer AI](https://github.com/skydeckai/mcp-server-rememberizer)** - An MCP server designed for interacting with the Rememberizer data source, facilitating enhanced knowledge retrieval.\n- **[Salesforce MCP](https://github.com/smn2gnt/MCP-Salesforce)** - Interact with Salesforce Data and Metadata\n- **[Scholarly](https://github.com/adityak74/mcp-scholarly)** - A MCP server to search for scholarly and academic articles.\n- **[Snowflake](https://github.com/isaacwasserman/mcp-snowflake-server)** - This MCP server enables LLMs to interact with Snowflake databases, allowing for secure and controlled data operations.\n- **[Spotify](https://github.com/varunneal/spotify-mcp)** - This MCP allows an LLM to play and use Spotify.\n- **[TMDB](https://github.com/Laksh-star/mcp-server-tmdb)** - This MCP server integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.\n- **[Tavily search](https://github.com/RamXX/mcp-tavily)** - An MCP server for Tavily's search & news API, with explicit site inclusions/exclusions\n- **[Todoist](https://github.com/abhiz123/todoist-mcp-server)** - Interact with Todoist to manage your tasks.\n- **[Vega-Lite](https://github.com/isaacwasserman/mcp-vegalite-server)** - Generate visualizations from fetched data using the VegaLite format and renderer.\n- **[Windows CLI](https://github.com/SimonB97/win-cli-mcp-server)** - MCP server for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, and Git Bash shells.\n- **[X (Twitter)](https://github.com/EnesCinr/twitter-mcp)** (by EnesCinr) - Interact with twitter API. Post tweets and search for tweets by query.\n- **[X (Twitter)](https://github.com/vidhupv/x-mcp)** (by vidhupv) - Create, manage and publish X/Twitter posts directly through Claude chat.\n- **[XMind](https://github.com/apeyroux/mcp-xmind)** - Read and search through your XMind directory containing XMind files.\n\n## 📚 Frameworks\n\nThese are high-level frameworks that make it easier to build MCP servers.\n\n* [EasyMCP](https://github.com/zcaceres/easy-mcp/) (TypeScript)\n* [FastMCP](https://github.com/punkpeye/fastmcp) (TypeScript)\n\n## 📚 Resources\n\nAdditional resources on MCP.\n\n- **[AiMCP](https://www.aimcp.info)** - A collection of MCP clients&servers to find the right mcp tools by **[Hekmon](https://github.com/hekmon8)**\n- **[Awesome Crypto MCP Servers by badkk](https://github.com/badkk/awesome-crypto-mcp-servers)** - A curated list of MCP servers by **[Luke Fan](https://github.com/badkk)**\n- **[Awesome MCP Servers by appcypher](https://github.com/appcypher/awesome-mcp-servers)** - A curated list of MCP servers by **[Stephen Akinyemi](https://github.com/appcypher)**\n- **[Awesome MCP Servers by punkpeye](https://github.com/punkpeye/awesome-mcp-servers)** (**[website](https://glama.ai/mcp/servers)**) - A curated list of MCP servers by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Awesome MCP Servers by wong2](https://github.com/wong2/awesome-mcp-servers)** (**[website](https://mcpservers.org)**) - A curated list of MCP servers by **[wong2](https://github.com/wong2)**\n- **[Discord Server](https://glama.ai/mcp/discord)** – A community discord server dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[MCP Badges](https://github.com/mcpx-dev/mcp-badges)** – Quickly highlight your MCP project with clear, eye-catching badges, by **[Ironben](https://github.com/nanbingxyz)**\n- **[MCP X Community](https://x.com/i/communities/1861891349609603310)** – A X community for MCP by **[Xiaoyi](https://x.com/chxy)**\n- **[mcp-cli](https://github.com/wong2/mcp-cli)** - A CLI inspector for the Model Context Protocol by **[wong2](https://github.com/wong2)**\n- **[mcp-get](https://mcp-get.com)** - Command line tool for installing and managing MCP servers by **[Michael Latman](https://github.com/michaellatman)**\n- **[mcp-manager](https://github.com/zueai/mcp-manager)** - Simple Web UI to install and manage MCP servers for Claude Desktop by **[Zue](https://github.com/zueai)**\n- **[MCPHub](https://github.com/Jeamee/MCPHub-Desktop)** – An Open Source MacOS & Windows GUI Desktop app for discovering, installing and managing MCP servers by **[Jeamee](https://github.com/jeamee)**\n- **[mcp.run](https://mcp.run)** - A hosted registry and control plane to install & run secure + portable MCP Servers.\n- **[Open-Sourced MCP Servers Directory](https://github.com/chatmcp/mcp-directory)** - A curated list of MCP servers by **[mcpso](https://mcp.so)**\n- **[PulseMCP](https://www.pulsemcp.com)** ([API](https://www.pulsemcp.com/api)) - Community hub & weekly newsletter for discovering MCP servers, clients, articles, and news by **[Tadas Antanavicius](https://github.com/tadasant)**, **[Mike Coughlin](https://github.com/macoughl)**, and **[Ravina Patel](https://github.com/ravinahp)**\n- **[r/mcp](https://www.reddit.com/r/mcp)** – A Reddit community dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Smithery](https://smithery.ai/)** - A registry of MCP servers to find the right tools for your LLM agents by **[Henry Mao](https://github.com/calclavia)**\n\n## 🚀 Getting Started\n\n### Using MCP Servers in this Repository\nTypescript-based servers in this repository can be used directly with `npx`.\n\nFor example, this will start the [Memory](src/memory) server:\n```sh\nnpx -y @modelcontextprotocol/server-memory\n```\n\nPython-based servers in this repository can be used directly with [`uvx`](https://docs.astral.sh/uv/concepts/tools/) or [`pip`](https://pypi.org/project/pip/). `uvx` is recommended for ease of use and setup.\n\nFor example, this will start the [Git](src/git) server:\n```sh\n# With uvx\nuvx mcp-server-git\n\n# With pip\npip install mcp-server-git\npython -m mcp_server_git\n```\n\nFollow [these](https://docs.astral.sh/uv/getting-started/installation/) instructions to install `uv` / `uvx` and [these](https://pip.pypa.io/en/stable/installation/) to install `pip`.\n\n### Using an MCP Client\nHowever, running a server on its own isn't very useful, and should instead be configured into an MCP client. For example, here's the Claude Desktop configuration to use the above server:\n\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-memory\"]\n    }\n  }\n}\n```\n\nAdditional examples of using the Claude Desktop as an MCP client might look like:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/path/to/allowed/files\"]\n    },\n    \"git\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-git\", \"--repository\", \"path/to/git/repo\"]\n    },\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    },\n    \"postgres\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\", \"postgresql://localhost/mydb\"]\n    }\n  }\n}\n```\n\n## 🛠️ Creating Your Own Server\n\nInterested in creating your own MCP server? Visit the official documentation at [modelcontextprotocol.io](https://modelcontextprotocol.io/introduction) for comprehensive guides, best practices, and technical details on implementing MCP servers.\n\n## 🤝 Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributing to this repository.\n\n## 🔒 Security\n\nSee [SECURITY.md](SECURITY.md) for reporting security vulnerabilities.\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 💬 Community\n\n- [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions)\n\n## ⭐ Support\n\nIf you find MCP servers useful, please consider starring the repository and contributing new servers or improvements!\n\n---\n\nManaged by Anthropic, but built together with the community. The Model Context Protocol is open source and we encourage everyone to contribute their own servers and improvements!\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflows",
        "git workflow",
        "git history",
        "github repositories"
      ],
      "category": "git-workflow-management"
    },
    "Arclio--github-projects-mcp": {
      "owner": "Arclio",
      "name": "github-projects-mcp",
      "url": "https://github.com/Arclio/github-projects-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Arclio.webp",
      "description": "Manage GitHub Projects V2 by listing projects, viewing and updating project fields and items, creating issues, and organizing project workflows effectively through MCP clients.",
      "stars": 25,
      "forks": 7,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-23T05:32:05Z",
      "readme_content": "# GitHub Projects V2 MCP Server\n\nA Model Context Protocol (MCP) server that provides tools for managing GitHub\nProjects V2 through Claude and other MCP clients. This server uses the GitHub\nGraphQL API for interacting with GitHub Projects V2.\n\n## Features\n\n- List and view GitHub Projects V2 for users and organizations\n- Get project fields and items (issues, PRs, draft issues)\n- Create issues and add them to projects\n- Create draft issues directly in projects\n- Update project item field values\n- Delete items from projects\n\n## Usage\n\nThis server can be used with any MCP client, such as Claude Desktop. Add it to\nyour MCP client configuration (e.g., `claude_desktop_config.json`).\n\n### Option 1: Using Published Package\n\nHere's an example configuration using `uvx` as the command runner:\n\n```json\n{\n  \"mcpServers\": {\n    \"github-projects\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-github-projects\"\n      ],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"your_pat_here\"\n      }\n    }\n  }\n}\n```\n\nMake sure to replace `your_pat_here` with your actual GitHub Personal Access\nToken.\n\n### Option 2: From Source Code\n\nTo run the project directly from source code, follow these steps:\n\n#### Setup\n\n1. Clone the repository:\n\n   ```\n   git clone git@github.com:Arclio/github-projects-mcp.git\n   cd github-projects-mcp\n   ```\n\n2. Create and activate a virtual environment:\n\n   ```\n   uv venv\n   source venv/bin/activate\n   ```\n\n3. Install dependencies:\n\n   ```\n   uv pip install -e .\n   ```\n\n4. Set your GitHub token as an environment variable:\n\n   [Create a GitHub Personal Access Token](https://github.com/settings/personal-access-tokens/new) and give it the necessary permissions.\n   The required permissions are: `repo`, `project`, and `read:org`.\n\n\n   Add the token to your `.env` file after running this command:\n\n   ```\n   cp .env.example .env\n   ```\n\n   Then add the following to your `.env` file:\n\n   ```\n   export GITHUB_TOKEN=your_personal_access_token\n   ```\n\n### Usage from source code\n\n  When using from source code, configure your MCP client as follows:\n\n  ```json\n  {\n    \"mcpServers\": {\n      \"github-projects\": {\n        \"command\": \"uv\",\n        \"args\": [\n          \"--directory\",\n          \"/path/to/github-projects-mcp\",\n          \"run\",\n          \"mcp-github-projects\"\n        ],\n        \"env\": {\n          \"GITHUB_TOKEN\": \"your_pat_here\"\n        }\n      }\n    }\n  }\n  ```\n\n  Make sure to replace `/path/to/github-projects-mcp` and `your_pat_here` with\n  your actual repository path and GitHub Personal Access Token.\n\n## Available Tools\n\n- `list_projects`: List GitHub Projects V2 for a given organization or user\n- `get_project_fields`: Get fields available in a GitHub Project V2\n- `get_project_items`: Get items in a GitHub Project V2 (supports filtering by\n  state or custom single-select fields)\n- `create_issue`: Create a new GitHub issue\n- `add_issue_to_project`: Add an existing GitHub issue to a Project V2\n- `update_project_item_field`: Update a field value for a project item\n- `create_draft_issue`: Create a draft issue directly in a GitHub Project V2\n- `delete_project_item`: Delete an item from a GitHub Project V2\n\nSee tool documentation in the server code for detailed usage information.\n\n## Development\n\nThe project is structured as follows:\n\n- `src/github_projects_mcp/`: Main package directory\n  - `server.py`: MCP server implementation with tool definitions\n  - `github_client.py`: GraphQL client for GitHub API interactions\n\nTo contribute, make sure to:\n\n1. Add proper error handling for all GraphQL operations\n2. Add type annotations for all functions and parameters\n3. Update documentation when adding new tools or features\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflows",
        "github projects",
        "git workflow",
        "manage github"
      ],
      "category": "git-workflow-management"
    },
    "AstroMined--pygithub-mcp-server": {
      "owner": "AstroMined",
      "name": "pygithub-mcp-server",
      "url": "https://github.com/AstroMined/pygithub-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/AstroMined.webp",
      "description": "Interact with the GitHub API to manage issues, repositories, and pull requests seamlessly. Utilize a modular tool architecture for flexible configuration and efficient handling of GitHub operations.",
      "stars": 1,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-06-11T02:47:53Z",
      "readme_content": "# PyGithub MCP Server\n\nA Model Context Protocol server that provides tools for interacting with the GitHub API through PyGithub. This server enables AI assistants to perform GitHub operations like managing issues, repositories, and pull requests.\n\n## Features\n\n- Modular Tool Architecture:\n  - Configurable tool groups that can be enabled/disabled\n  - Domain-specific organization (issues, repositories, etc.)\n  - Flexible configuration via file or environment variables\n  - Clear separation of concerns with modular design\n  - Easy extension with consistent patterns\n\n- Complete GitHub Issue Management:\n  - Create and update issues\n  - Get issue details and list repository issues\n  - Add, list, update, and delete comments\n  - Manage issue labels\n  - Handle assignees and milestones\n\n- Smart Parameter Handling:\n  - Dynamic kwargs building for optional parameters\n  - Proper type conversion for GitHub objects\n  - Validation for all input parameters\n  - Clear error messages for invalid inputs\n\n- Robust Implementation:\n  - Object-oriented GitHub API interactions via PyGithub\n  - Centralized GitHub client management\n  - Proper error handling and rate limiting\n  - Clean API abstraction through MCP tools\n  - Comprehensive pagination support\n  - Detailed logging for debugging\n\n## Documentation\n\nComprehensive guides are available in the docs/guides directory:\n\n- error-handling.md: Error types, handling patterns, and best practices\n- security.md: Authentication, access control, and content security\n- tool-reference.md: Detailed tool documentation with examples\n\nSee these guides for detailed information about using the PyGithub MCP Server.\n\n## Usage Examples\n\n### Issue Operations\n\n1. Creating an Issue\n```json\n{\n  \"owner\": \"username\",\n  \"repo\": \"repository\",\n  \"title\": \"Issue Title\",\n  \"body\": \"Issue description\",\n  \"assignees\": [\"username1\", \"username2\"],\n  \"labels\": [\"bug\", \"help wanted\"],\n  \"milestone\": 1\n}\n```\n\n2. Getting Issue Details\n```json\n{\n  \"owner\": \"username\",\n  \"repo\": \"repository\",\n  \"issue_number\": 1\n}\n```\n\n3. Updating an Issue\n```json\n{\n  \"owner\": \"username\",\n  \"repo\": \"repository\",\n  \"issue_number\": 1,\n  \"title\": \"Updated Title\",\n  \"body\": \"Updated description\",\n  \"state\": \"closed\",\n  \"labels\": [\"bug\", \"wontfix\"]\n}\n```\n\n### Comment Operations\n\n1. Adding a Comment\n```json\n{\n  \"owner\": \"username\",\n  \"repo\": \"repository\",\n  \"issue_number\": 1,\n  \"body\": \"This is a comment\"\n}\n```\n\n2. Listing Comments\n```json\n{\n  \"owner\": \"username\",\n  \"repo\": \"repository\",\n  \"issue_number\": 1,\n  \"per_page\": 10\n}\n```\n\n3. Updating a Comment\n```json\n{\n  \"owner\": \"username\",\n  \"repo\": \"repository\",\n  \"issue_number\": 1,\n  \"comment_id\": 123456789,\n  \"body\": \"Updated comment text\"\n}\n```\n\n### Label Operations\n\n1. Adding Labels\n```json\n{\n  \"owner\": \"username\",\n  \"repo\": \"repository\",\n  \"issue_number\": 1,\n  \"labels\": [\"enhancement\", \"help wanted\"]\n}\n```\n\n2. Removing a Label\n```json\n{\n  \"owner\": \"username\",\n  \"repo\": \"repository\",\n  \"issue_number\": 1,\n  \"label\": \"enhancement\"\n}\n```\n\nAll operations handle optional parameters intelligently:\n- Only includes provided parameters in API calls\n- Converts primitive types to GitHub objects (e.g., milestone number to Milestone object)\n- Provides clear error messages for invalid parameters\n- Handles pagination automatically where applicable\n\n## Installation\n\n1. Create and activate a virtual environment:\n```bash\nuv venv\nsource .venv/bin/activate\n```\n\n2. Install dependencies:\n```bash\nuv pip install -e .\n```\n\n## Configuration\n\n### Basic Configuration\n\nAdd the server to your MCP settings (e.g., `claude_desktop_config.json` or `cline_mcp_settings.json`):\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"/path/to/repo/.venv/bin/python\",\n      \"args\": [\"-m\", \"pygithub_mcp_server\"],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"your-token-here\"\n      }\n    }\n  }\n}\n```\n\n### Tool Group Configuration\n\nThe server supports selectively enabling or disabling tool groups through configuration. You can configure this in two ways:\n\n#### 1. Configuration File\n\nCreate a JSON configuration file (e.g., `pygithub_mcp_config.json`):\n```json\n{\n  \"tool_groups\": {\n    \"issues\": {\"enabled\": true},\n    \"repositories\": {\"enabled\": true},\n    \"pull_requests\": {\"enabled\": false},\n    \"discussions\": {\"enabled\": false},\n    \"search\": {\"enabled\": true}\n  }\n}\n```\n\nThen specify this file in your environment:\n```bash\nexport PYGITHUB_MCP_CONFIG=/path/to/pygithub_mcp_config.json\n```\n\n#### 2. Environment Variables\n\nAlternatively, use environment variables to configure tool groups:\n```bash\nexport PYGITHUB_ENABLE_ISSUES=true\nexport PYGITHUB_ENABLE_REPOSITORIES=true\nexport PYGITHUB_ENABLE_PULL_REQUESTS=false\n```\n\nBy default, only the `issues` tool group is enabled. See `README.config.md` for more detailed configuration options.\n\n## Development\n\n### Testing\nThe project includes a comprehensive test suite:\n\n```bash\n# Run all tests\npytest\n\n# Run tests with coverage report\npytest --cov\n\n# Run specific test file\npytest tests/test_operations/test_issues.py\n\n# Run tests matching a pattern\npytest -k \"test_create_issue\"\n```\n\nNote: Many tests are currently failing and under investigation. This is a known issue being actively worked on.\n\n### Testing with MCP Inspector\nTest MCP tools during development using the MCP Inspector:\n```bash\nsource .venv/bin/activate  # Ensure venv is activated\nnpx @modelcontextprotocol/inspector -e GITHUB_PERSONAL_ACCESS_TOKEN=your-token-here uv run pygithub-mcp-server\n```\n\nUse the MCP Inspector's Web UI to:\n- Experiment with available tools\n- Test with real GitHub repositories\n- Verify success and error cases\n- Document working payloads\n\n### Project Structure\n\n```\ntests/\n├── unit/                # Fast tests without external dependencies\n│   ├── config/          # Configuration tests\n│   ├── tools/           # Tool registration tests\n│   └── ...              # Other unit tests\n└── integration/         # Tests with real GitHub API\n    ├── issues/          # Issue tools tests\n    └── ...              # Other integration tests\n```\n\n```\nsrc/\n└── pygithub_mcp_server/\n    ├── __init__.py\n    ├── __main__.py\n    ├── server.py        # Server factory (create_server)\n    ├── version.py\n    ├── config/          # Configuration system\n    │   ├── __init__.py\n    │   └── settings.py  # Configuration management\n    ├── tools/           # Modular tool system\n    │   ├── __init__.py  # Tool registration framework\n    │   └── issues/      # Issue tools\n    │       ├── __init__.py\n    │       └── tools.py # Issue tool implementations\n    ├── client/          # GitHub client functionality\n    │   ├── __init__.py\n    │   ├── client.py    # Core GitHub client\n    │   └── rate_limit.py # Rate limit handling\n    ├── converters/      # Data transformation\n    │   ├── __init__.py\n    │   ├── parameters.py # Parameter formatting\n    │   ├── responses.py # Response formatting\n    │   ├── common/      # Common converters\n    │   ├── issues/      # Issue-related converters\n    │   ├── repositories/ # Repository converters\n    │   └── users/       # User-related converters\n    ├── errors/          # Error handling\n    │   ├── __init__.py\n    │   └── exceptions.py # Custom exceptions\n    ├── operations/      # GitHub operations\n    │   ├── __init__.py\n    │   └── issues.py\n    ├── schemas/         # Data models\n    │   ├── __init__.py\n    │   ├── base.py\n    │   ├── issues.py\n    │   └── ...\n    └── utils/           # General utilities\n        ├── __init__.py\n        └── environment.py # Environment utilities\n```\n\n### Troubleshooting\n\n1. Server fails to start:\n   - Verify venv Python path in MCP settings\n   - Ensure all requirements are installed in venv\n   - Check GITHUB_PERSONAL_ACCESS_TOKEN is set and valid\n\n2. Build errors:\n   - Use --no-build-isolation flag with uv build\n   - Ensure Python 3.10+ is being used\n   - Verify all dependencies are installed\n\n3. GitHub API errors:\n   - Check token permissions and validity\n   - Review pygithub_mcp_server.log for detailed error traces\n   - Verify rate limits haven't been exceeded\n\n## Dependencies\n- Python 3.10+\n- MCP Python SDK\n- Pydantic\n- PyGithub\n- UV package manager\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "pygithub",
        "git workflow",
        "github operations",
        "handling github"
      ],
      "category": "git-workflow-management"
    },
    "AsyncFuncAI--github-chat-mcp": {
      "owner": "AsyncFuncAI",
      "name": "github-chat-mcp",
      "url": "https://github.com/AsyncFuncAI/github-chat-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/AsyncFuncAI.webp",
      "description": "Analyze and query GitHub repositories to gain insights into their architecture and technology stack. Index repositories to enhance development workflows with detailed inquiries about codebases.",
      "stars": 64,
      "forks": 12,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-25T11:17:40Z",
      "readme_content": "# GitHub Chat MCP\n\nA Model Context Protocol (MCP) for analyzing and querying GitHub repositories using the GitHub Chat API. Official Site: https://github-chat.com\n\n## Installation\n\n```bash\n# Install with pip\npip install github-chat-mcp\n\n# Or install with the newer uv package manager\nuv install github-chat-mcp\n```\n\n\n\n3. Start using it with Claude!\n\nExample prompts:\n- \"Use github-chat-mcp to analyze the React repository\"\n- \"Index the TypeScript repository with github-chat-mcp and ask about its architecture\"\n\n# GitHub Chat MCP server\n\n[![smithery badge](https://smithery.ai/badge/github-chat-mcp)](https://smithery.ai/server/github-chat-mcp)\n\n## Setup Instructions\n> Before anything, ensure you have a GitHub Chat API key. This is required to use the service.\n\nInstall uv first.\n\nMacOS/Linux:\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\nWindows:\n```\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\n### Setup with Cursor (Recommended)\nIn mcp.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"github-chat\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"github-chat-mcp\"\n      ]\n    }\n  }\n}\n```\n\nWith above, no envs required since it's a freemium release.\n\n### Setup with Claude Desktop\n```json\n# claude_desktop_config.json\n# Can find location through:\n# Hamburger Menu -> File -> Settings -> Developer -> Edit Config\n# Must perform: brew install uv\n{\n  \"mcpServers\": {\n    \"github-chat\": {\n      \"command\": \"uvx\",\n      \"args\": [\"github-chat-mcp\"],\n      \"env\": {\n      }\n    }\n  }\n}\n```\n\n### Installing via Smithery\n\nYou can install GitHub Chat for Claude Desktop automatically via Smithery:\n\n```bash\nnpx -y @smithery/cli install github-chat-mcp --client claude\n```\n\n### Using GitHub Chat with Claude\n1. Index a GitHub repository first:\n   \"Index the GitHub repository at https://github.com/username/repo\"\n\n2. Then ask questions about the repository:\n   \"What is the core tech stack used in this repository?\"\n\n### Debugging\nRun:\n```bash\nnpx @modelcontextprotocol/inspector uvx github-chat-mcp\n```\n\n## Local/Dev Setup Instructions\n\n### Clone repo\n`git clone https://github.com/yourusername/github-chat-mcp.git`\n\n### Install dependencies\nInstall uv first.\n\nMacOS/Linux:\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\nWindows:\n```\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\nThen install MCP server dependencies:\n```bash\ncd github-chat-mcp\n\n# Create virtual environment and activate it\nuv venv\n\nsource .venv/bin/activate # MacOS/Linux\n# OR\n.venv/Scripts/activate # Windows\n\n# Install dependencies\nuv sync\n```\n### Setup with Claude Desktop\n\n#### Using MCP CLI SDK\n```bash\n# `pip install mcp[cli]` if you haven't\nmcp install /ABSOLUTE/PATH/TO/PARENT/FOLDER/github-chat-mcp/src/github_chat_mcp/server.py -v \"GITHUB_API_KEY=API_KEY_HERE\"\n```\n\n#### Manually\n```json\n# claude_desktop_config.json\n# Can find location through:\n# Hamburger Menu -> File -> Settings -> Developer -> Edit Config\n{\n  \"mcpServers\": {\n    \"github-chat\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/github-chat-mcp\",\n        \"run\",\n        \"github-chat-mcp\"\n      ],\n      \"env\": {\n      }\n    }\n  }\n}\n```\n\n### Using GitHub Chat with Claude\n1. Index a GitHub repository first:\n   \"Index the GitHub repository at https://github.com/username/repo\"\n\n2. Then ask questions about the repository:\n   \"What is the core tech stack used in this repository?\"\n\n### Debugging\nRun:\n```bash\n# If mcp cli installed (`pip install mcp[cli]`)\nmcp dev /ABSOLUTE/PATH/TO/PARENT/FOLDER/github-chat-mcp/src/github_chat_mcp/server.py\n\n# If not\nnpx @modelcontextprotocol/inspector \\\n      uv \\\n      --directory /ABSOLUTE/PATH/TO/PARENT/FOLDER/github-chat-mcp \\\n      run \\\n      github-chat-mcp\n```\nThen access MCP Inspector at `http://localhost:5173`. You may need to add your GitHub API key in the environment variables in the inspector under `GITHUB_API_KEY`.\n\n# Notes\n- Level of logging is adjustable through the `FASTMCP_LOG_LEVEL` environment variable (e.g. `FASTMCP_LOG_LEVEL=\"ERROR\"`)\n- This MCP server provides two main tools:\n  1. Repository Indexing - Index and analyze a GitHub repository\n  2. Repository Querying - Ask questions about the indexed repository",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "repositories",
        "git workflow",
        "github repositories",
        "github chat"
      ],
      "category": "git-workflow-management"
    },
    "CodeByWaqas--MRConfluenceLinker-mcp-server": {
      "owner": "CodeByWaqas",
      "name": "MRConfluenceLinker-mcp-server",
      "url": "https://github.com/CodeByWaqas/MRConfluenceLinker-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/CodeByWaqas.webp",
      "description": "Fetch and analyze GitLab merge requests, and store the analysis results in Confluence documentation to enhance documentation workflows.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-03-22T15:44:53Z",
      "readme_content": "# GitLab PR Analysis MCP Server\n\nThis project provides an MCP (Model Control Protocol) server that integrates GitLab merge request analysis with Confluence documentation. It allows you to fetch merge request details, analyze code changes, and store the results in Confluence pages.\n\n## Features\n\n- Fetch merge request details from GitLab\n- Analyze code changes in merge requests\n- Generate detailed reports including:\n  - Basic merge request information\n  - Code change statistics\n  - File type analysis\n  - Detailed file changes\n- Store analysis results in Confluence\n- Comprehensive logging for debugging\n\n## Prerequisites\n\n- Python 3.8 or higher\n- GitLab account with API access\n- Confluence account (optional, for storing analysis results)\n- Access to the required GitLab project(s)\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit https://github.com/CodeByWaqas/MRConfluenceLinker-mcp-server.git\ncd MRConfluenceLinker-mcp-server\n```\n\n2. Create and activate a virtual environment:\n```bash\npython -m venv .venv\nsource .venv/bin/activate  # On Windows, use: .venv\\Scripts\\activate\n```\n\n3. Install dependencies:\n```bash\npip install -r requirements.txt\n```\nor\n```bash\nuv add \"mcp[cli]\" python-gitlab python-dotenv atlassian-python-api requests\n```\n\n## Configuration\n\n1. Copy the example environment file:\n```bash\ncp .env.example .env\n```\n\n2. Edit the `.env` file with your credentials:\n```env\nGITLAB_URL=https://gitlab.com\nGITLAB_TOKEN=your_gitlab_token\nGITLAB_PROJECT_ID=your_project_id\n\n# Optional Confluence integration\nCONFLUENCE_URL=your_confluence_url\nCONFLUENCE_USERNAME=your_username\nCONFLUENCE_TOKEN=your_confluence_token\nCONFLUENCE_SPACE=your_space_key\n```\n\n### Obtaining Credentials\n\n- **GitLab Token**: Generate a personal access token in GitLab with `api` scope\n- **Confluence Token**: Generate an API token in your Atlassian account settings\n\n## Usage\n\n1. Start the MCP server:\n```bash\npython src/MRConfluenceLinker-mcp-server/server.py\n```\nor \n\n### Setup with Claude Desktop\n```json\n# claude_desktop_config.json\n# Can find location through:\n# Claude -> Settings -> Developer -> Edit Config\n{\n  \"mcpServers\": {\n      \"MRConfluenceLinker-mcp-server\": {\n          \"command\": \"uv\",\n          \"args\": [\n              \"--directory\",\n              \"/<Absolute-path-to-folder>/MRConfluenceLinker-mcp-server/src/MRConfluenceLinker-mcp-server\",\n              \"run\",\n              \"server.py\"\n          ]\n      }\n  }\n}\n\n2. The server will listen for commands through stdin/stdout. You can interact with it using prompts like:\n\n```\nCan you fetch details for merge request #1 from project \"my-project\"?\nCan you analyze code changes in merge request #1 from project \"my-project\"?\nCan you store a summary of merge request #1 from project \"my-project\" in Confluence?\n```\n\n## Available Tools\n\nThe server provides the following tools:\n\n1. `fetch_mr_details`: Fetches details of a specific merge request or all merge requests\n   - Parameters:\n     - `project_id`: The GitLab project ID\n     - `mr_id` (optional): Specific merge request ID\n\n2. `analyze_code_changes`: Analyzes code changes in a merge request\n   - Parameters:\n     - `project_id`: The GitLab project ID\n     - `mr_id`: The merge request ID to analyze\n\n3. `store_in_confluence`: Stores analysis results in Confluence\n   - Parameters:\n     - `project_id`: The GitLab project ID\n     - `mr_id` (optional): Specific merge request ID\n     - `analysis` (optional): Analysis results to store\n\n## Logging\n\nThe server generates detailed logs in `mcp_server.log` and outputs to stderr. This helps in debugging issues with:\n- GitLab API access\n- Confluence integration\n- Code analysis\n- Page creation and updates\n\n## Error Handling\n\nThe server includes comprehensive error handling for:\n- Missing environment variables\n- API authentication issues\n- Network connectivity problems\n- Invalid project or merge request IDs\n- Confluence permission issues\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Support\n\nFor support, please [create an issue](https://github.com/CodeByWaqas/MRConfluenceLinker-mcp-server/issues) or contact the maintainers.\n\n## Project Structure\n\n```\nMRConfluenceLinker-mcp-server/\n├── src/                           # Source code directory\n│   └── MRConfluenceLinker-mcp-server/  # Main server package\n│       ├── resources/            # Resource modules\n│       │   ├── __init__.py\n│       │   ├── client.py        # Client implementation / GitLab PR integration\n│       ├── server.py            # Main server implementation\n│       └── mcp_server.log       # Server logs\n├── __pycache__/                 # Python cache files\n├── .git/                        # Git repository\n├── .gitignore                   # Git ignore rules\n├── CONTRIBUTING.md              # Contributing guidelines\n├── LICENSE                      # Project license\n├── README.md                    # Project documentation\n├── pyproject.toml              # Python project configuration\n├── requirements.txt            # Project dependencies\n└── uv.lock                     # Dependency lock file\n```\n\n### Key Components\n\n- **Source Code**: Located in the `src/MRConfluenceLinker-mcp-server/` directory\n  - `server.py`: Main MCP server implementation\n  - `resources/client.py`: Client-side implementation contains GitLab PR integration\n\n- **Configuration Files**:\n  - `requirements.txt`: Python package dependencies\n  - `pyproject.toml`: Project metadata and build configuration\n  - `uv.lock`: Locked dependency versions\n  - `.env.example`: Environment variables template\n\n- **Documentation**:\n  - `README.md`: Project overview and setup instructions\n  - `CONTRIBUTING.md`: Contribution guidelines\n  - `LICENSE`: Project license\n\n- **Development**:\n  - `__pycache__/`: Python cache files\n  - `mcp_server.log`: Server logs for debugging\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "confluence",
        "git",
        "workflows",
        "git workflow",
        "documentation workflows",
        "confluence documentation"
      ],
      "category": "git-workflow-management"
    },
    "Din-djarin2--custom-gitlab": {
      "owner": "Din-djarin2",
      "name": "custom-gitlab",
      "url": "https://github.com/Din-djarin2/custom-gitlab",
      "imageUrl": "/freedevtools/mcp/pfp/Din-djarin2.webp",
      "description": "Integrate with GitLab repositories for project search, file management, and issue handling. Supports multi-file commits, repository forking, and creating branches with enhanced schema validation.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-04-16T19:26:34Z",
      "readme_content": "# Custom GitLab MCP Server\n\nA custom implementation of the GitLab MCP (Model Context Protocol) server for integration with Claude and other MCP-compliant AI assistants.\n\n## Overview\n\nThis MCP server provides seamless integration with GitLab repositories, allowing AI assistants to:\n- Search GitLab repositories\n- Fetch file contents\n- Create or update files\n- Push multiple files in a single commit\n- Create issues and merge requests\n- Fork repositories\n- Create branches\n\n## Fixed Implementation\n\nThis custom implementation fixes issues with schema validation that were present in the standard GitLab MCP server implementation, specifically for the `search_repositories` tool.\n\n## Installation\n\n1. Clone this repository\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Configure in your Claude settings file or Claude Desktop config file:\n   ```json\n   {\n     \"mcpServers\": {\n       \"github.com/modelcontextprotocol/servers/tree/main/src/gitlab\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"/path/to/custom-gitlab-server/index.js\"\n         ],\n         \"env\": {\n           \"GITLAB_PERSONAL_ACCESS_TOKEN\": \"your-gitlab-token\",\n           \"GITLAB_API_URL\": \"https://your-gitlab-instance/api/v4\"\n         }\n       }\n     }\n   }\n   ```\n\n## Prerequisites\n\n- Node.js (v14 or higher)\n- GitLab Personal Access Token with appropriate scopes:\n  - `api` for full API access\n  - `read_api` for read-only access\n  - `read_repository` and `write_repository` for repository operations\n\n## Available Tools\n\n| Tool Name | Description |\n|-----------|-------------|\n| `search_repositories` | Search for GitLab projects |\n| `get_file_contents` | Get contents of a file or directory |\n| `create_or_update_file` | Create or update a single file |\n| `push_files` | Push multiple files in a single commit |\n| `create_repository` | Create a new GitLab project |\n| `create_issue` | Create a new issue |\n| `create_merge_request` | Create a new merge request |\n| `fork_repository` | Fork a project |\n| `create_branch` | Create a new branch |\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gitlab",
        "git",
        "commits",
        "gitlab repositories",
        "custom gitlab",
        "git workflow"
      ],
      "category": "git-workflow-management"
    },
    "DivyanshKushwaha--GitHub-MCP-Server-Claude": {
      "owner": "DivyanshKushwaha",
      "name": "GitHub-MCP-Server-Claude",
      "url": "https://github.com/DivyanshKushwaha/GitHub-MCP-Server-Claude",
      "imageUrl": "/freedevtools/mcp/pfp/DivyanshKushwaha.webp",
      "description": "Interact with GitHub to fetch user details, repository information, and authenticated user data using the REST API. This tool simplifies API interactions through modular command processing.",
      "stars": 0,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-18T19:59:38Z",
      "readme_content": "# GitHub MCP Server\n\n## Overview\n\nGitHub MCP Server is an API-based tool that interacts with GitHub using the [MCP (Modular Command Processor)](https://github.com/mcp-framework) framework. It provides various functionalities, including fetching user details, repository information, and authenticated user data using GitHub's REST API.\n\nThis project is built using Python and leverages `httpx` for asynchronous API calls. It also uses `dotenv` for secure handling of GitHub authentication tokens.\n\n## Features\n\n- Fetch GitHub user information by username.\n- Retrieve details of a GitHub repository.\n- Get authenticated user details using a GitHub personal access token.\n- Utilizes `FastMCP` for modular command processing.\n\n## Project Structure\n```bash\nD:/MCP_Project/ \n|----.env\n│----.gitignore\n│----claude_desktop_config.json  (Create this file in C:\\Users\\your_username\\AppData\\Roaming\\Claude\\)\n│----main.py\n│----pyproject.toml\n│----README.md\n│----requirements.txt\n```\n\n<br>\n\n- `main.py`: Core logic of the GitHub MCP Server.\n- `.env`: Stores environment variables (e.g., GitHub Token).\n- `claude_desktop_config.json`: Configuration for running the MCP Server.\n- `requirements.txt`: Lists required dependencies.\n- `explanation_video.mp4`: A video explaining the project.\n\n## Setup Instructions\n\n### Prerequisites\n\n- Python >=3.10\n- GitHub personal access token (for authenticated requests)\n- `conda` or `venv` for virtual environment management\n\n### Setup and Usage\n\n1. **Clone the Repository**\n   ```bash\n   git clone https://github.com/DivyanshKushwaha/GitHub-MCP-Server-Claude.git\n   cd GitHub-MCP-Server-Claude\n   ```\n2. **Create Python environment**\n```bash \npython -m venv venv\nsource venv/bin/activate  \n```\n\n3. **Install Dependencies**\n```bash\npip install -r requirements.txt\n```\n\n4. **Set Up Environment Variables (Create .env file)**\n```bash\nGITHUB_TOKEN=your_personal_access_token\n```\n\n5. **Setup claude_desktop_config.json**\n\n```bash\n{\n    \"mcpServers\": {\n        \"MCP_Server\": {\n            \"command\": \"my_env/Scripts/uv\",\n            \"args\": [\n                \"run\",\n                \"D:/MCP_Project/main.py\"\n            ]\n        }\n    }\n}\n```\n\n- The command key specifies the path to the uv script located in the conda environment. This is used to run the server.\n\n- The args key provides additional arguments for the uv script:\n\n    - \"run\": Indicates the action to run the server.\n    - my_env : python environment 'my_env'\n    - \"D:/MCP_Project/main.py\": Specifies the path to the main.py script, which contains the implementation of the MCP server.\n\n\n6. **Launch the Claude Desktop Application**\n- Open the Claude Desktop Application. \n- It will use the MCP Server as configured in the claude_desktop_config.json file to fetch and process data.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflow",
        "git workflow",
        "interact github",
        "github mcp"
      ],
      "category": "git-workflow-management"
    },
    "DynamicEndpoints--cloudflare-github-backup-mcp": {
      "owner": "DynamicEndpoints",
      "name": "cloudflare-github-backup-mcp",
      "url": "https://github.com/DynamicEndpoints/cloudflare-github-backup-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/DynamicEndpoints.webp",
      "description": "Automates the backup of Cloudflare projects by transferring them to a specified GitHub repository, ensuring secure and accessible storage of project data.",
      "stars": 0,
      "forks": 2,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-23T12:51:29Z",
      "readme_content": "# Cloudflare to GitHub Backup MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@DynamicEndpoints/cloudflare-github-backup-mcp)](https://smithery.ai/server/@DynamicEndpoints/cloudflare-github-backup-mcp)\n\nThis is an MCP (Model Context Protocol) server that backs up Cloudflare projects to a GitHub repository.\n\n## Prerequisites\n\n- Node.js and npm installed.\n- A Cloudflare account and API token with read access to your projects.\n- A GitHub account and personal access token with \"repo\" scope.\n- A GitHub repository where you want to store the backups.\n\n## Installation\n\n### Installing via Smithery\n\nTo install Cloudflare to GitHub Backup for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@DynamicEndpoints/cloudflare-github-backup-mcp):\n\n```bash\nnpx -y @smithery/cli install @DynamicEndpoints/cloudflare-github-backup-mcp --client claude\n```\n\n### Manual Installation\n1. Clone this repository:\n   ```bash\n   git clone <repository_url>\n   cd cloudflare-github-backup\n   ```\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Build the project\n    ```bash\n    npm run build\n    ```\n\n## Configuration\n\n1. Obtain your Cloudflare API token:\n   - Go to your Cloudflare dashboard.\n   - Navigate to \"My Profile\" -> \"API Tokens\".\n   - Click \"Create Token\".\n   - Ensure the token has the necessary permissions to read your projects.\n   - Copy the token.\n\n2. Obtain your GitHub personal access token:\n   - Go to your GitHub settings.\n   - Navigate to \"Developer settings\" -> \"Personal access tokens\".\n   - Click \"Generate new token\".\n   - Select the \"repo\" scope.\n   - Copy the token.\n\n3. Edit the `cline_mcp_settings.json` file:\n    ```json\n    {\n      \"mcpServers\": {\n        \"cloudflare-backup\": {\n          \"command\": \"node\",\n          \"args\": [\"/path/to/cloudflare-github-backup/build/index.js\"],\n          \"env\": {\n            \"CLOUDFLARE_API_TOKEN\": \"your_cloudflare_api_token\",\n            \"GITHUB_ACCESS_TOKEN\": \"your_github_access_token\",\n            \"GITHUB_REPO_NAME\": \"your_github_repo_name\"\n          }\n        }\n      }\n    }\n    ```\n    - Replace `/path/to/cloudflare-github-backup` with the actual path to the `cloudflare-github-backup` directory.\n    - Replace `your_cloudflare_api_token`, `your_github_access_token`, and `your_github_repo_name` with your actual tokens and repository name.\n\n## Usage\n\n1. Start the MCP server by restarting the VS Code extension.\n2. Use the `use_mcp_tool` tool to call the `backup_projects` tool:\n\n   ```xml\n   <use_mcp_tool>\n   <server_name>cloudflare-backup</server_name>\n   <tool_name>backup_projects</tool_name>\n   <arguments>\n   {}\n   </arguments>\n   </use_mcp_tool>\n   ```\n\n   This will trigger the backup process. The server will log messages to the console indicating the progress.\n\n## Note\n\nCurrently, the backup logic is just a placeholder. It will log messages to the console but won't perform actual backups. The next step is to implement the actual backup logic using the Cloudflare and GitHub APIs.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "cloudflare",
        "cloudflare github",
        "github backup",
        "git workflow"
      ],
      "category": "git-workflow-management"
    },
    "F4biox--hello-github-actions": {
      "owner": "F4biox",
      "name": "hello-github-actions",
      "url": "https://github.com/F4biox/hello-github-actions",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Guide users through creating their first GitHub Action and integrating it into a workflow file. The server provides a structured approach for hands-on learning with practical examples.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "https://www.npmjs.com/package/hello-github-actions",
      "npm_downloads": 3055,
      "keywords": [
        "github",
        "git",
        "workflow",
        "github actions",
        "git workflow",
        "github action"
      ],
      "category": "git-workflow-management"
    },
    "HeskeyBaozi--servers": {
      "owner": "HeskeyBaozi",
      "name": "servers",
      "url": "https://github.com/HeskeyBaozi/servers",
      "imageUrl": "/freedevtools/mcp/pfp/HeskeyBaozi.webp",
      "description": "Integrate with the GitHub API to manage repositories, perform file operations, and execute advanced searches. Automate workflows with features like automatic branch creation and comprehensive error handling.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-04-09T11:35:15Z",
      "readme_content": "# Model Context Protocol servers\n\nThis repository is a collection of *reference implementations* for the [Model Context Protocol](https://modelcontextprotocol.io/) (MCP), as well as references\nto community built servers and additional resources.\n\nThe servers in this repository showcase the versatility and extensibility of MCP, demonstrating how it can be used to give Large Language Models (LLMs) secure, controlled access to tools and data sources.\nEach MCP server is implemented with either the [Typescript MCP SDK](https://github.com/modelcontextprotocol/typescript-sdk) or [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk).\n\n> Note: Lists in this README are maintained in alphabetical order to minimize merge conflicts when adding new items.\n\n## 🌟 Reference Servers\n\nThese servers aim to demonstrate MCP features and the TypeScript and Python SDKs.\n\n- **[AWS KB Retrieval](src/aws-kb-retrieval-server)** - Retrieval from AWS Knowledge Base using Bedrock Agent Runtime\n- **[Brave Search](src/brave-search)** - Web and local search using Brave's Search API\n- **[EverArt](src/everart)** - AI image generation using various models\n- **[Everything](src/everything)** - Reference / test server with prompts, resources, and tools\n- **[Fetch](src/fetch)** - Web content fetching and conversion for efficient LLM usage\n- **[Filesystem](src/filesystem)** - Secure file operations with configurable access controls\n- **[Git](src/git)** - Tools to read, search, and manipulate Git repositories\n- **[GitHub](src/github)** - Repository management, file operations, and GitHub API integration\n- **[GitLab](src/gitlab)** - GitLab API, enabling project management\n- **[Google Drive](src/gdrive)** - File access and search capabilities for Google Drive\n- **[Google Maps](src/google-maps)** - Location services, directions, and place details\n- **[Memory](src/memory)** - Knowledge graph-based persistent memory system\n- **[PostgreSQL](src/postgres)** - Read-only database access with schema inspection\n- **[Puppeteer](src/puppeteer)** - Browser automation and web scraping\n- **[Redis](src/redis)** - Interact with Redis key-value stores\n- **[Sentry](src/sentry)** - Retrieving and analyzing issues from Sentry.io\n- **[Sequential Thinking](src/sequentialthinking)** - Dynamic and reflective problem-solving through thought sequences\n- **[Slack](src/slack)** - Channel management and messaging capabilities\n- **[Sqlite](src/sqlite)** - Database interaction and business intelligence capabilities\n- **[Time](src/time)** - Time and timezone conversion capabilities\n\n## 🤝 Third-Party Servers\n\n### 🎖️ Official Integrations\n\nOfficial integrations are maintained by companies building production ready MCP servers for their platforms.\n\n- <img height=\"12\" width=\"12\" src=\"https://www.21st.dev/favicon.ico\" alt=\"21st.dev Logo\" /> **[21st.dev Magic](https://github.com/21st-dev/magic-mcp)** - Create crafted UI components inspired by the best 21st.dev design engineers.\n- <img height=\"12\" width=\"12\" src=\"https://invoxx-public-bucket.s3.eu-central-1.amazonaws.com/frontend-resources/adfin-logo-small.svg\" alt=\"Adfin Logo\" /> **[Adfin](https://github.com/Adfin-Engineering/mcp-server-adfin)** - The only platform you need to get paid - all payments in one place, invoicing and accounting reconciliations with [Adfin](https://www.adfin.com/).\n- <img height=\"12\" width=\"12\" src=\"https://www.agentql.com/favicon/favicon.png\" alt=\"AgentQL Logo\" /> **[AgentQL](https://github.com/tinyfish-io/agentql-mcp)** - Enable AI agents to get structured data from unstructured web with [AgentQL](https://www.agentql.com/).\n- <img height=\"12\" width=\"12\" src=\"https://agentrpc.com/favicon.ico\" alt=\"AgentRPC Logo\" /> **[AgentRPC](https://github.com/agentrpc/agentrpc)** - Connect to any function, any language, across network boundaries using [AgentRPC](https://www.agentrpc.com/).\n- <img height=\"12\" width=\"12\" src=\"https://aiven.io/favicon.ico\" alt=\"Aiven Logo\" /> **[Aiven](https://github.com/Aiven-Open/mcp-aiven)** - Navigate your [Aiven projects](https://go.aiven.io/mcp-server) and interact with the PostgreSQL®, Apache Kafka®, ClickHouse® and OpenSearch® services\n- <img height=\"12\" width=\"12\" src=\"https://iotdb.apache.org/img/logo.svg\" alt=\"Apache IoTDB Logo\" /> **[Apache IoTDB](https://github.com/apache/iotdb-mcp-server)** - MCP Server for [Apache IoTDB](https://github.com/apache/iotdb) database and its tools\n- <img height=\"12\" width=\"12\" src=\"https://apify.com/favicon.ico\" alt=\"Apify Logo\" /> **[Apify](https://github.com/apify/actors-mcp-server)** - [Actors MCP Server](https://apify.com/apify/actors-mcp-server): Use 3,000+ pre-built cloud tools to extract data from websites, e-commerce, social media, search engines, maps, and more\n- <img height=\"12\" width=\"12\" src=\"https://2052727.fs1.hubspotusercontent-na1.net/hubfs/2052727/cropped-cropped-apimaticio-favicon-1-32x32.png\" alt=\"APIMatic Logo\" /> **[APIMatic MCP](https://github.com/apimatic/apimatic-validator-mcp)** - APIMatic MCP Server is used to validate OpenAPI specifications using [APIMatic](https://www.apimatic.io/). The server processes OpenAPI files and returns validation summaries by leveraging APIMatic’s API.\n- <img height=\"12\" width=\"12\" src=\"https://resources.audiense.com/hubfs/favicon-1.png\" alt=\"Audiense Logo\" /> **[Audiense Insights](https://github.com/AudienseCo/mcp-audiense-insights)** - Marketing insights and audience analysis from [Audiense](https://www.audiense.com/products/audiense-insights) reports, covering demographic, cultural, influencer, and content engagement analysis.\n- <img height=\"12\" width=\"12\" src=\"https://axiom.co/favicon.ico\" alt=\"Axiom Logo\" /> **[Axiom](https://github.com/axiomhq/mcp-server-axiom)** - Query and analyze your Axiom logs, traces, and all other event data in natural language\n- <img height=\"12\" width=\"12\" src=\"https://www.bankless.com/favicon.ico\" alt=\"Bankless Logo\" /> **[Bankless Onchain](https://github.com/bankless/onchain-mcp)** - Query Onchain data, like ERC20 tokens, transaction history, smart contract state.\n- <img height=\"12\" width=\"12\" src=\"https://bicscan.io/favicon.png\" alt=\"BICScan Logo\" /> **[BICScan](https://github.com/ahnlabio/bicscan-mcp)** - Risk score / asset holdings of EVM blockchain address (EOA, CA, ENS) and even domain names.\n- <img height=\"12\" width=\"12\" src=\"https://www.box.com/favicon.ico\" alt=\"Box Logo\" /> **[Box](https://github.com/box-community/mcp-server-box)** - Interact with the Intelligent Content Management platform through Box AI.\n- <img height=\"12\" width=\"12\" src=\"https://browserbase.com/favicon.ico\" alt=\"Browserbase Logo\" /> **[Browserbase](https://github.com/browserbase/mcp-server-browserbase)** - Automate browser interactions in the cloud (e.g. web navigation, data extraction, form filling, and more)\n- <img height=\"12\" width=\"12\" src=\"https://www.chargebee.com/static/resources/brand/favicon.png\" /> **[Chargebee](https://github.com/chargebee/agentkit/tree/main/modelcontextprotocol)** - MCP Server that connects AI agents to [Chargebee platform](https://www.chargebee.com).\n- <img height=\"12\" width=\"12\" src=\"https://trychroma.com/_next/static/media/chroma-logo.ae2d6e4b.svg\" /> **[Chroma](https://github.com/chroma-core/chroma-mcp)** - Embeddings, vector search, document storage, and full-text search with the open-source AI application database\n- <img height=\"12\" width=\"12\" src=\"https://www.chronulus.com/favicon/chronulus-logo-blue-on-alpha-square-128x128.ico\" alt=\"Chronulus AI Logo\" /> **[Chronulus AI](https://github.com/ChronulusAI/chronulus-mcp)** - Predict anything with Chronulus AI forecasting and prediction agents.\n- <img height=\"12\" width=\"12\" src=\"https://circleci.com/favicon.ico\" alt=\"CircleCI Logo\" /> **[CircleCI](https://github.com/CircleCI-Public/mcp-server-circleci)** - Enable AI Agents to fix build failures from CircleCI.\n- <img height=\"12\" width=\"12\" src=\"https://clickhouse.com/favicon.ico\" alt=\"ClickHouse Logo\" /> **[ClickHouse](https://github.com/ClickHouse/mcp-clickhouse)** - Query your [ClickHouse](https://clickhouse.com/) database server.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/cloudflare\" /> **[Cloudflare](https://github.com/cloudflare/mcp-server-cloudflare)** - Deploy, configure & interrogate your resources on the Cloudflare developer platform (e.g. Workers/KV/R2/D1)\n- <img height=\"12\" width=\"12\" src=\"https://codelogic.com/wp-content/themes/codelogic/assets/img/favicon.png\" alt=\"CodeLogic Logo\" /> **[CodeLogic](https://github.com/CodeLogicIncEngineering/codelogic-mcp-server)** - Interact with [CodeLogic](https://codelogic.com), a Software Intelligence platform that graphs complex code and data architecture dependencies, to boost AI accuracy and insight.\n- <img height=\"12\" width=\"12\" src=\"https://www.comet.com/favicon.ico\" alt=\"Comet Logo\" /> **[Comet Opik](https://github.com/comet-ml/opik-mcp)** - Query and analyze your [Opik](https://github.com/comet-ml/opik) logs, traces, prompts and all other telemtry data from your LLMs in natural language.\n- <img height=\"12\" width=\"12\" src=\"https://www.convex.dev/favicon.ico\" /> **[Convex](https://stack.convex.dev/convex-mcp-server)** - Introspect and query your apps deployed to Convex.\n- <img height=\"12\" width=\"12\" src=\"http://app.itsdart.com/static/img/favicon.png\" alt=\"Dart Logo\" /> **[Dart](https://github.com/its-dart/dart-mcp-server)** - Interact with task, doc, and project data in [Dart](https://itsdart.com), an AI-native project management tool\n- <img height=\"12\" width=\"12\" src=\"https://www.devhub.com/img/upload/favicon-196x196-dh.png\" alt=\"DevHub Logo\" /> **[DevHub](https://github.com/devhub/devhub-cms-mcp)** - Manage and utilize website content within the [DevHub](https://www.devhub.com) CMS platform\n- <img height=\"12\" width=\"12\" src=\"https://e2b.dev/favicon.ico\" alt=\"E2B Logo\" /> **[E2B](https://github.com/e2b-dev/mcp-server)** - Run code in secure sandboxes hosted by [E2B](https://e2b.dev)\n- <img height=\"12\" width=\"12\" src=\"https://static.edubase.net/media/brand/favicon/favicon-32x32.png\" alt=\"EduBase Logo\" /> **[EduBase](https://github.com/EduBase/MCP)** - Interact with [EduBase](https://www.edubase.net), a comprehensive e-learning platform with advanced quizzing, exam management, and content organization capabilities\n- <img height=\"12\" width=\"12\" src=\"https://www.elastic.co/favicon.ico\" alt=\"Elasticsearch Logo\" /> **[Elasticsearch](https://github.com/elastic/mcp-server-elasticsearch)** - Query your data in [Elasticsearch](https://www.elastic.co/elasticsearch)\n- <img height=\"12\" width=\"12\" src=\"https://esignatures.com/favicon.ico\" alt=\"eSignatures Logo\" /> **[eSignatures](https://github.com/esignaturescom/mcp-server-esignatures)** - Contract and template management for drafting, reviewing, and sending binding contracts.\n- <img height=\"12\" width=\"12\" src=\"https://exa.ai/images/favicon-32x32.png\" alt=\"Exa Logo\" /> **[Exa](https://github.com/exa-labs/exa-mcp-server)** - Search Engine made for AIs by [Exa](https://exa.ai)\n- <img height=\"12\" width=\"12\" src=\"https://fewsats.com/favicon.svg\" alt=\"Fewsats Logo\" /> **[Fewsats](https://github.com/Fewsats/fewsats-mcp)** - Enable AI Agents to purchase anything in a secure way using [Fewsats](https://fewsats.com)\n- <img height=\"12\" width=\"12\" src=\"https://fibery.io/favicon.svg\" alt=\"Fibery Logo\" /> **[Fibery](https://github.com/Fibery-inc/fibery-mcp-server)** - Perform queries and entity operations in your [Fibery](https://fibery.io) workspace.\n- <img height=\"12\" width=\"12\" src=\"https://financialdatasets.ai/favicon.ico\" alt=\"Financial Datasets Logo\" /> **[Financial Datasets](https://github.com/financial-datasets/mcp-server)** - Stock market API made for AI agents\n- <img height=\"12\" width=\"12\" src=\"https://firecrawl.dev/favicon.ico\" alt=\"Firecrawl Logo\" /> **[Firecrawl](https://github.com/mendableai/firecrawl-mcp-server)** - Extract web data with [Firecrawl](https://firecrawl.dev)\n- <img height=\"12\" width=\"12\" src=\"https://fireproof.storage/favicon.ico\" alt=\"Fireproof Logo\" /> **[Fireproof](https://github.com/fireproof-storage/mcp-database-server)** - Immutable ledger database with live synchronization\n- <img height=\"12\" width=\"12\" src=\"https://gitee.com/favicon.ico\" alt=\"Gitee Logo\" /> **[Gitee](https://github.com/oschina/mcp-gitee)** - Gitee API integration, repository, issue, and pull request management, and more.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6605a2979ff17b2cd1939cd4/6605a460de47e7596ed84f06_icon256.png\" alt=\"gotoHuman Logo\" /> **[gotoHuman](https://github.com/gotohuman/gotohuman-mcp-server)** - Human-in-the-loop platform - Allow AI agents and automations to send requests for approval to your [gotoHuman](https://www.gotohuman.com) inbox.\n- <img height=\"12\" width=\"12\" src=\"https://grafana.com/favicon.ico\" alt=\"Grafana Logo\" /> **[Grafana](https://github.com/grafana/mcp-grafana)** - Search dashboards, investigate incidents and query datasources in your Grafana instance\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/KCOWBYLKunDff1Dr452y6EfjiU.png\" alt=\"Graphlit Logo\" /> **[Graphlit](https://github.com/graphlit/graphlit-mcp-server)** - Ingest anything from Slack to Gmail to podcast feeds, in addition to web crawling, into a searchable [Graphlit](https://www.graphlit.com) project.\n- <img height=\"12\" width=\"12\" src=\"https://greptime.com/favicon.ico\" alt=\"Greptime Logo\" /> **[GreptimeDB](https://github.com/GreptimeTeam/greptimedb-mcp-server)** - Provides AI assistants with a secure and structured way to explore and analyze data in [GreptimeDB](https://github.com/GreptimeTeam/greptimedb).\n- <img height=\"12\" width=\"12\" src=\"https://www.herokucdn.com/favicons/favicon.ico\" alt=\"Heroku Logo\" /> **[Heroku](https://github.com/heroku/heroku-mcp-server)** - Interact with the Heroku Platform through LLM-driven tools for managing apps, add-ons, dynos, databases, and more.\n- <img height=\"12\" width=\"12\" src=\"https://img.alicdn.com/imgextra/i3/O1CN01d9qrry1i6lTNa2BRa_!!6000000004364-2-tps-218-200.png\" alt=\"Hologres Logo\" /> **[Hologres](https://github.com/aliyun/alibabacloud-hologres-mcp-server)** - Connect to a [Hologres](https://www.alibabacloud.com/en/product/hologres) instance, get table metadata, query and analyze data.\n- <img height=\"12\" width=\"12\" src=\"https://hyperbrowser-assets-bucket.s3.us-east-1.amazonaws.com/Hyperbrowser-logo.png\" alt=\"Hyperbrowsers23 Logo\" /> **[Hyperbrowser](https://github.com/hyperbrowserai/mcp)** - [Hyperbrowser](https://www.hyperbrowser.ai/) is the next-generation platform empowering AI agents and enabling effortless, scalable browser automation.\n- **[IBM wxflows](https://github.com/IBM/wxflows/tree/main/examples/mcp/javascript)** - Tool platform by IBM to build, test and deploy tools for any data source\n- <img height=\"12\" width=\"12\" src=\"https://forevervm.com/icon.png\" alt=\"ForeverVM Logo\" /> **[ForeverVM](https://github.com/jamsocket/forevervm/tree/main/javascript/mcp-server)** - Run Python in a code sandbox.\n- <img height=\"12\" width=\"12\" src=\"https://www.getinboxzero.com/icon.png\" alt=\"Inbox Zero Logo\" /> **[Inbox Zero](https://github.com/elie222/inbox-zero/tree/main/apps/mcp-server)** - AI personal assistant for email [Inbox Zero](https://www.getinboxzero.com)\n- <img height=\"12\" width=\"12\" src=\"https://inkeep.com/favicon.ico\" alt=\"Inkeep Logo\" /> **[Inkeep](https://github.com/inkeep/mcp-server-python)** - RAG Search over your content powered by [Inkeep](https://inkeep.com)\n- <img height=\"12\" width=\"12\" src=\"https://integration.app/favicon.ico\" alt=\"Integration App Icon\" /> **[Integration App](https://github.com/integration-app/mcp-server)** - Interact with any other SaaS applications on behalf of your customers.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/jetbrains\" /> **[JetBrains](https://github.com/JetBrains/mcp-jetbrains)** – Work on your code with JetBrains IDEs\n- <img height=\"12\" width=\"12\" src=\"https://kagi.com/favicon.ico\" alt=\"Kagi Logo\" /> **[Kagi Search](https://github.com/kagisearch/kagimcp)** - Search the web using Kagi's search API\n- <img height=\"12\" width=\"12\" src=\"https://connection.keboola.com/favicon.ico\" alt=\"Keboola Logo\" /> **[Keboola](https://github.com/keboola/keboola-mcp-server)** - Build robust data workflows, integrations, and analytics on a single intuitive platform.\n- <img height=\"12\" width=\"12\" src=\"https://laratranslate.com/favicon.ico\" alt=\"Lara Translate Logo\" /> **[Lara Translate](https://github.com/translated/lara-mcp)** - MCP Server for Lara Translate API, enabling powerful translation capabilities with support for language detection and context-aware translations.\n- <img height=\"12\" width=\"12\" src=\"https://logfire.pydantic.dev/favicon.ico\" alt=\"Logfire Logo\" /> **[Logfire](https://github.com/pydantic/logfire-mcp)** - Provides access to OpenTelemetry traces and metrics through Logfire.\n- <img height=\"12\" width=\"12\" src=\"https://langfuse.com/favicon.ico\" alt=\"Langfuse Logo\" /> **[Langfuse Prompt Management](https://github.com/langfuse/mcp-server-langfuse)** - Open-source tool for collaborative editing, versioning, evaluating, and releasing prompts.\n- <img height=\"12\" width=\"12\" src=\"https://lingo.dev/favicon.ico\" alt=\"Lingo.dev Logo\" /> **[Lingo.dev](https://github.com/lingodotdev/lingo.dev/blob/main/mcp.md)** - Make your AI agent speak every language on the planet, using [Lingo.dev](https://lingo.dev) Localization Engine.\n- <img height=\"12\" width=\"12\" src=\"https://www.mailgun.com/favicon.ico\" alt=\"Mailgun Logo\" /> **[Mailgun](https://github.com/mailgun/mailgun-mcp-server)** - Interact with Mailgun API.\n- <img height=\"12\" width=\"12\" src=\"https://www.make.com/favicon.ico\" alt=\"Make Logo\" /> **[Make](https://github.com/integromat/make-mcp-server)** - Turn your [Make](https://www.make.com/) scenarios into callable tools for AI assistants.\n- <img height=\"12\" width=\"12\" src=\"https://www.meilisearch.com/favicon.ico\" alt=\"Meilisearch Logo\" /> **[Meilisearch](https://github.com/meilisearch/meilisearch-mcp)** - Interact & query with Meilisearch (Full-text & semantic search API)\n- <img height=\"12\" width=\"12\" src=\"https://metoro.io/static/images/logos/Metoro.svg\" /> **[Metoro](https://github.com/metoro-io/metoro-mcp-server)** - Query and interact with kubernetes environments monitored by Metoro\n- <img height=\"12\" width=\"12\" src=\"https://milvus.io/favicon-32x32.png\" /> **[Milvus](https://github.com/zilliztech/mcp-server-milvus)** - Search, Query and interact with data in your Milvus Vector Database.\n- <img height=\"12\" width=\"12\" src=\"https://www.motherduck.com/favicon.ico\" alt=\"MotherDuck Logo\" /> **[MotherDuck](https://github.com/motherduckdb/mcp-server-motherduck)** - Query and analyze data with MotherDuck and local DuckDB\n- <img height=\"12\" width=\"12\" src=\"https://needle-ai.com/images/needle-logo-orange-2-rounded.png\" alt=\"Needle AI Logo\" /> **[Needle](https://github.com/needle-ai/needle-mcp)** - Production-ready RAG out of the box to search and retrieve data from your own documents.\n- <img height=\"12\" width=\"12\" src=\"https://neo4j.com/favicon.ico\" alt=\"Neo4j Logo\" /> **[Neo4j](https://github.com/neo4j-contrib/mcp-neo4j/)** - Neo4j graph database server (schema + read/write-cypher) and separate graph database backed memory\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/183852044?s=48&v=4\" alt=\"Neon Logo\" /> **[Neon](https://github.com/neondatabase/mcp-server-neon)** - Interact with the Neon serverless Postgres platform\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/82347605?s=48&v=4\" alt=\"OceanBase Logo\" /> **[OceanBase](https://github.com/oceanbase/mcp-oceanbase)** - MCP Server for OceanBase database and its tools\n- <img height=\"12\" width=\"12\" src=\"https://docs.octagonagents.com/logo.svg\" alt=\"Octagon Logo\" /> **[Octagon](https://github.com/OctagonAI/octagon-mcp-server)** - Deliver real-time investment research with extensive private and public market data.\n- <img height=\"12\" width=\"12\" src=\"https://oxylabs.io/favicon.ico\" alt=\"Oxylabs Logo\" /> **[Oxylabs](https://github.com/oxylabs/oxylabs-mcp)** - Scrape websites with Oxylabs Web API, supporting dynamic rendering and parsing for structured data extraction.\n- <img height=\"12\" width=\"12\" src=\"https://developer.paddle.com/favicon.svg\" alt=\"Paddle Logo\" /> **[Paddle](https://github.com/PaddleHQ/paddle-mcp-server)** - Interact with the Paddle API. Manage product catalog, billing and subscriptions, and reports.\n- <img height=\"12\" width=\"12\" src=\"https://www.paypalobjects.com/webstatic/icon/favicon.ico\" alt=\"PayPal Logo\" /> **[PayPal](https://mcp.paypal.com)** - PayPal's official MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://www.perplexity.ai/favicon.ico\" alt=\"Perplexity Logo\" /> **[Perplexity](https://github.com/ppl-ai/modelcontextprotocol)** - An MCP server that connects to Perplexity's Sonar API, enabling real-time web-wide research in conversational AI.\n- <img height=\"12\" width=\"12\" src=\"https://qdrant.tech/img/brand-resources-logos/logomark.svg\" /> **[Qdrant](https://github.com/qdrant/mcp-server-qdrant/)** - Implement semantic memory layer on top of the Qdrant vector search engine\n- <img height=\"12\" width=\"12\" src=\"https://www.ramp.com/favicon.ico\" /> **[Ramp](https://github.com/ramp-public/ramp-mcp)** - Interact with [Ramp](https://ramp.com)'s Developer API to run analysis on your spend and gain insights leveraging LLMs\n- **[Raygun](https://github.com/MindscapeHQ/mcp-server-raygun)** - Interact with your crash reporting and real using monitoring data on your Raygun account\n- <img height=\"12\" width=\"12\" src=\"https://www.rember.com/favicon.ico\" alt=\"Rember Logo\" /> **[Rember](https://github.com/rember/rember-mcp)** - Create spaced repetition flashcards in [Rember](https://rember.com) to remember anything you learn in your chats\n- <img height=\"12\" width=\"12\" src=\"https://riza.io/favicon.ico\" alt=\"Riza logo\" /> **[Riza](https://github.com/riza-io/riza-mcp)** - Arbitrary code execution and tool-use platform for LLMs by [Riza](https://riza.io)\n- <img height=\"12\" width=\"12\" src=\"https://pics.fatwang2.com/56912e614b35093426c515860f9f2234.svg\" /> [Search1API](https://github.com/fatwang2/search1api-mcp) - One API for Search, Crawling, and Sitemaps\n- <img height=\"12\" width=\"12\" src=\"https://screenshotone.com/favicon.ico\" alt=\"ScreenshotOne Logo\" /> **[ScreenshotOne](https://github.com/screenshotone/mcp/)** - Render website screenshots with [ScreenshotOne](https://screenshotone.com/)\n- <img height=\"12\" width=\"12\" src=\"https://semgrep.dev/favicon.ico\" alt=\"Semgrep Logo\" /> **[Semgrep](https://github.com/semgrep/mcp)** - Enable AI agents to secure code with [Semgrep](https://semgrep.dev/).\n- <img height=\"12\" width=\"12\" src=\"https://www.singlestore.com/favicon-32x32.png?v=277b9cbbe31e8bc416504cf3b902d430\"/> **[SingleStore](https://github.com/singlestore-labs/mcp-server-singlestore)** - Interact with the SingleStore database platform\n- <img height=\"12\" width=\"12\" src=\"https://www.starrocks.io/favicon.ico\" alt=\"StarRocks Logo\" /> **[StarRocks](https://github.com/StarRocks/mcp-server-starrocks)** - Interact with [StarRocks](https://www.starrocks.io/)\n- <img height=\"12\" width=\"12\" src=\"https://stripe.com/favicon.ico\" alt=\"Stripe Logo\" /> **[Stripe](https://github.com/stripe/agent-toolkit)** - Interact with Stripe API\n- <img height=\"12\" width=\"12\" src=\"https://tavily.com/favicon.ico\" alt=\"Tavily Logo\" /> **[Tavily](https://github.com/tavily-ai/tavily-mcp)** - Search engine for AI agents (search + extract) powered by [Tavily](https://tavily.com/)\n- <img height=\"12\" width=\"12\" src=\"https://thirdweb.com/favicon.ico\" alt=\"Thirdweb Logo\" /> **[Thirdweb](https://github.com/thirdweb-dev/ai/tree/main/python/thirdweb-mcp)** - Read/write to over 2k blockchains, enabling data querying, contract analysis/deployment, and transaction execution, powered by [Thirdweb](https://thirdweb.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.tinybird.co/favicon.ico\" alt=\"Tinybird Logo\" /> **[Tinybird](https://github.com/tinybirdco/mcp-tinybird)** - Interact with Tinybird serverless ClickHouse platform\n- <img height=\"12\" width=\"12\" src=\"https://unifai.network/favicon.ico\" alt=\"UnifAI Logo\" /> **[UnifAI](https://github.com/unifai-network/unifai-mcp-server)** - Dynamically search and call tools using [UnifAI Network](https://unifai.network)\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/plcQevjrOYnyriuGw90NfQBPoQ.jpg\" alt=\"Unstructured Logo\" /> **[Unstructured](https://github.com/Unstructured-IO/UNS-MCP)** - Set up and interact with your unstructured data processing workflows in [Unstructured Platform](https://unstructured.io)\n- **[Vectorize](https://github.com/vectorize-io/vectorize-mcp-server/)** - [Vectorize](https://vectorize.io) MCP server for advanced retrieval, Private Deep Research, Anything-to-Markdown file extraction and text chunking.\n- <img height=\"12\" width=\"12\" src=\"https://verodat.io/assets/favicon-16x16.png\" alt=\"Verodat Logo\" /> **[Verodat](https://github.com/Verodat/verodat-mcp-server)** - Interact with Verodat AI Ready Data platform\n- <img height=\"12\" width=\"12\" src=\"https://www.veyrax.com/favicon.ico\" alt=\"VeyraX Logo\" /> **[VeyraX](https://github.com/VeyraX/veyrax-mcp)** - Single tool to control all 100+ API integrations, and UI components\n- <img height=\"12\" width=\"12\" src=\"https://www.xero.com/favicon.ico\" alt=\"Xero Logo\" /> **[Xero](https://github.com/XeroAPI/xero-mcp-server)** - Interact with the accounting data in your business using our official MCP server\n- <img height=\"12\" width=\"12\" src=\"https://cdn.zapier.com/zapier/images/favicon.ico\" alt=\"Zapier Logo\" /> **[Zapier](https://zapier.com/mcp)** - Connect your AI Agents to 8,000 apps instantly.\n- **[ZenML](https://github.com/zenml-io/mcp-zenml)** - Interact with your MLOps and LLMOps pipelines through your [ZenML](https://www.zenml.io) MCP server\n\n### 🌎 Community Servers\n\nA growing set of community-developed and maintained servers demonstrates various applications of MCP across different domains.\n\n> **Note:** Community servers are **untested** and should be used at **your own risk**. They are not affiliated with or endorsed by Anthropic.\n- **[Ableton Live](https://github.com/Simon-Kansara/ableton-live-mcp-server)** - an MCP server to control Ableton Live.\n- **[Airbnb](https://github.com/openbnb-org/mcp-server-airbnb)** - Provides tools to search Airbnb and get listing details.\n- **[AI Agent Marketplace Index](https://github.com/AI-Agent-Hub/ai-agent-marketplace-index-mcp)** - MCP server to search more than 5000+ AI agents and tools of various categories from [AI Agent Marketplace Index](http://www.deepnlp.org/store/ai-agent) and monitor traffic of AI Agents.\n- **[Algorand](https://github.com/GoPlausible/algorand-mcp)** - A comprehensive MCP server for tooling interactions (40+) and resource accessibility (60+) plus many useful prompts for interacting with the Algorand blockchain.\n- **[Airflow](https://github.com/yangkyeongmo/mcp-server-apache-airflow)** - A MCP Server that connects to [Apache Airflow](https://airflow.apache.org/) using official python client.\n- **[Airtable](https://github.com/domdomegg/airtable-mcp-server)** - Read and write access to [Airtable](https://airtable.com/) databases, with schema inspection.\n- **[Airtable](https://github.com/felores/airtable-mcp)** - Airtable Model Context Protocol Server.\n- **[AlphaVantage](https://github.com/calvernaz/alphavantage)** - MCP server for stock market data API [AlphaVantage](https://www.alphavantage.co)\n- **[Anki](https://github.com/scorzeth/anki-mcp-server)** - An MCP server for interacting with your [Anki](https://apps.ankiweb.net) decks and cards.\n- **[Any Chat Completions](https://github.com/pyroprompts/any-chat-completions-mcp)** - Interact with any OpenAI SDK Compatible Chat Completions API like OpenAI, Perplexity, Groq, xAI and many more.\n- **[Apple Calendar](https://github.com/Omar-v2/mcp-ical)** - An MCP server that allows you to interact with your MacOS Calendar through natural language, including features such as event creation, modification, schedule listing, finding free time slots etc.\n- **[ArangoDB](https://github.com/ravenwits/mcp-server-arangodb)** - MCP Server that provides database interaction capabilities through [ArangoDB](https://arangodb.com/).\n- **[Arduino](https://github.com/vishalmysore/choturobo)** - MCP Server that enables AI-powered robotics using Claude AI and Arduino (ESP32) for real-world automation and interaction with robots.\n- **[Atlassian](https://github.com/sooperset/mcp-atlassian)** - Interact with Atlassian Cloud products (Confluence and Jira) including searching/reading Confluence spaces/pages, accessing Jira issues, and project metadata.\n- **[Attestable MCP](https://github.com/co-browser/attestable-mcp-server)** - An MCP server running inside a trusted execution environment (TEE) via Gramine, showcasing remote attestation using [RA-TLS](https://gramine.readthedocs.io/en/stable/attestation.html). This allows an MCP client to verify the server before conencting.\n- **[AWS](https://github.com/rishikavikondala/mcp-server-aws)** - Perform operations on your AWS resources using an LLM.\n- **[AWS Athena](https://github.com/lishenxydlgzs/aws-athena-mcp)** - A MCP server for AWS Athena to run SQL queries on Glue Catalog.\n- **[AWS Cost Explorer](https://github.com/aarora79/aws-cost-explorer-mcp-server)** - Optimize your AWS spend (including Amazon Bedrock spend) with this MCP server by examining spend across regions, services, instance types and foundation models ([demo video](https://www.youtube.com/watch?v=WuVOmYLRFmI&feature=youtu.be)).\n- **[AWS Resources Operations](https://github.com/baryhuang/mcp-server-aws-resources-python)** - Run generated python code to securely query or modify any AWS resources supported by boto3.\n- **[AWS S3](https://github.com/aws-samples/sample-mcp-server-s3)** - A sample MCP server for AWS S3 that flexibly fetches objects from S3 such as PDF documents.\n- **[Azure ADX](https://github.com/pab1it0/adx-mcp-server)** - Query and analyze Azure Data Explorer databases.\n- **[Azure DevOps](https://github.com/Vortiago/mcp-azure-devops)** - An MCP server that provides a bridge to Azure DevOps services, enabling AI assistants to query and manage work items.\n- **[Baidu AI Search](https://github.com/baidubce/app-builder/tree/master/python/mcp_server/ai_search)** - Web search with Baidu Cloud's AI Search\n- **[Base Free USDC Transfer](https://github.com/magnetai/mcp-free-usdc-transfer)** - Send USDC on [Base](https://base.org) for free using Claude AI! Built with [Coinbase CDP](https://docs.cdp.coinbase.com/mpc-wallet/docs/welcome).\n* **[Basic Memory](https://github.com/basicmachines-co/basic-memory)** - Local-first knowledge management system that builds a semantic graph from Markdown files, enabling persistent memory across conversations with LLMs.\n- **[BigQuery](https://github.com/LucasHild/mcp-server-bigquery)** (by LucasHild) - This server enables LLMs to inspect database schemas and execute queries on BigQuery.\n- **[BigQuery](https://github.com/ergut/mcp-bigquery-server)** (by ergut) - Server implementation for Google BigQuery integration that enables direct BigQuery database access and querying capabilities\n- **[Bing Web Search API](https://github.com/leehanchung/bing-search-mcp)** (by hanchunglee) - Server implementation for Microsoft Bing Web Search API.\n- **[Bitable MCP](https://github.com/lloydzhou/bitable-mcp)** (by lloydzhou) - MCP server provides access to Lark Bitable through the Model Context Protocol. It allows users to interact with Bitable tables using predefined tools.\n- **[Blender](https://github.com/ahujasid/blender-mcp)** (by ahujasid) - Blender integration allowing prompt enabled 3D scene creation, modeling and manipulation.\n- **[browser-use](https://github.com/co-browser/browser-use-mcp-server)** (by co-browser) - browser-use MCP server with dockerized playwright + chromium + vnc. supports stdio & resumable http.\n- **[Bsc-mcp](https://github.com/TermiX-official/bsc-mcp)** The first MCP server that serves as the bridge between AI and BNB Chain, enabling AI agents to execute complex on-chain operations through seamless integration with the BNB Chain, including transfer, swap, launch, security check on any token and even more.\n- **[Calculator](https://github.com/githejie/mcp-server-calculator)** - This server enables LLMs to use calculator for precise numerical calculations.\n- **[CFBD API](https://github.com/lenwood/cfbd-mcp-server)** - An MCP server for the [College Football Data API](https://collegefootballdata.com/).\n- **[ChatMCP](https://github.com/AI-QL/chat-mcp)** – An Open Source Cross-platform GUI Desktop application compatible with Linux, macOS, and Windows, enabling seamless interaction with MCP servers across dynamically selectable LLMs, by **[AIQL](https://github.com/AI-QL)**\n- **[ChatSum](https://github.com/mcpso/mcp-server-chatsum)** - Query and Summarize chat messages with LLM. by [mcpso](https://mcp.so)\n- **[Chroma](https://github.com/privetin/chroma)** - Vector database server for semantic document search and metadata filtering, built on Chroma\n- **[ClaudePost](https://github.com/ZilongXue/claude-post)** - ClaudePost enables seamless email management for Gmail, offering secure features like email search, reading, and sending.\n- **[Cloudinary](https://github.com/felores/cloudinary-mcp-server)** - Cloudinary Model Context Protocol Server to upload media to Cloudinary and get back the media link and details.\n- **[code-assistant](https://github.com/stippi/code-assistant)** - A coding assistant MCP server that allows to explore a code-base and make changes to code. Should be used with trusted repos only (insufficient protection against prompt injections).\n- **[code-executor](https://github.com/bazinga012/mcp_code_executor)** - An MCP server that allows LLMs to execute Python code within a specified Conda environment.\n- **[code-sandbox-mcp](https://github.com/Automata-Labs-team/code-sandbox-mcp)** - An MCP server to create secure code sandbox environment for executing code within Docker containers.\n- **[cognee-mcp](https://github.com/topoteretes/cognee/tree/main/cognee-mcp)** - GraphRAG memory server with customizable ingestion, data processing and search\n- **[coin_api_mcp](https://github.com/longmans/coin_api_mcp)** - Provides access to [coinmarketcap](https://coinmarketcap.com/) cryptocurrency data.\n- **[Contentful-mcp](https://github.com/ivo-toby/contentful-mcp)** - Read, update, delete, publish content in your [Contentful](https://contentful.com) space(s) from this MCP Server.\n- **[crypto-feargreed-mcp](https://github.com/kukapay/crypto-feargreed-mcp)**  -  Providing real-time and historical Crypto Fear & Greed Index data.\n- **[cryptopanic-mcp-server](https://github.com/kukapay/cryptopanic-mcp-server)** - Providing latest cryptocurrency news to AI agents, powered by CryptoPanic.\n- **[Dappier](https://github.com/DappierAI/dappier-mcp)** - Connect LLMs to real-time, rights-cleared, proprietary data from trusted sources. Access specialized models for Real-Time Web Search, News, Sports, Financial Data, Crypto, and premium publisher content. Explore data models at [marketplace.dappier.com](https://marketplace.dappier.com/marketplace).\n- **[Databricks](https://github.com/JordiNeil/mcp-databricks-server)** - Allows LLMs to run SQL queries, list and get details of jobs executions in a Databricks account.\n- **[Datadog](https://github.com/GeLi2001/datadog-mcp-server)** - Datadog MCP Server for application tracing, monitoring, dashboard, incidents queries built on official datadog api.\n- **[Data Exploration](https://github.com/reading-plus-ai/mcp-server-data-exploration)** - MCP server for autonomous data exploration on .csv-based datasets, providing intelligent insights with minimal effort. NOTE: Will execute arbitrary Python code on your machine, please use with caution!\n- **[Dataset Viewer](https://github.com/privetin/dataset-viewer)** - Browse and analyze Hugging Face datasets with features like search, filtering, statistics, and data export\n- **[DBHub](https://github.com/bytebase/dbhub/)** - Universal database MCP server connecting to MySQL, PostgreSQL, SQLite, DuckDB and etc.\n- **[DeepSeek MCP Server](https://github.com/DMontgomery40/deepseek-mcp-server)** - Model Context Protocol server integrating DeepSeek's advanced language models, in addition to [other useful API endpoints](https://github.com/DMontgomery40/deepseek-mcp-server?tab=readme-ov-file#features)\n- **[Deepseek_R1](https://github.com/66julienmartin/MCP-server-Deepseek_R1)** - A Model Context Protocol (MCP) server implementation connecting Claude Desktop with DeepSeek's language models (R1/V3)\n- **[deepseek-thinker-mcp](https://github.com/ruixingshi/deepseek-thinker-mcp)** - A MCP (Model Context Protocol) provider Deepseek reasoning content to MCP-enabled AI Clients, like Claude Desktop. Supports access to Deepseek's thought processes from the Deepseek API service or from a local Ollama server.\n- **[Descope](https://github.com/descope-sample-apps/descope-mcp-server)** - An MCP server to integrate with [Descope](https://descope.com) to search audit logs, manage users, and more.\n- **[DevRev](https://github.com/kpsunil97/devrev-mcp-server)** - An MCP server to integrate with DevRev APIs to search through your DevRev Knowledge Graph where objects can be imported from diff. sources listed [here](https://devrev.ai/docs/import#available-sources).\n- **[Dicom](https://github.com/ChristianHinge/dicom-mcp)** - An MCP server to query and retrieve medical images and for parsing and reading dicom-encapsulated documents (pdf etc.). \n- **[Dify](https://github.com/YanxingLiu/dify-mcp-server)** - A simple implementation of an MCP server for dify workflows.\n- **[Discord](https://github.com/v-3/discordmcp)** - A MCP server to connect to Discord guilds through a bot and read and write messages in channels\n- **[Discord](https://github.com/SaseQ/discord-mcp)** - A MCP server, which connects to Discord through a bot, and provides comprehensive integration with Discord.\n- **[Discourse](https://github.com/AshDevFr/discourse-mcp-server)** - A MCP server to search Discourse posts on a Discourse forum.\n- **[Docker](https://github.com/ckreiling/mcp-server-docker)** - Integrate with Docker to manage containers, images, volumes, and networks.\n- **[Drupal](https://github.com/Omedia/mcp-server-drupal)** - Server for interacting with [Drupal](https://www.drupal.org/project/mcp) using STDIO transport layer.\n- **[dune-analytics-mcp](https://github.com/kukapay/dune-analytics-mcp)** -  A mcp server that bridges Dune Analytics data to AI agents.\n- **[EdgeOne Pages MCP](https://github.com/TencentEdgeOne/edgeone-pages-mcp)** - An MCP service for deploying HTML content to EdgeOne Pages and obtaining a publicly accessible URL.\n- **[Elasticsearch](https://github.com/cr7258/elasticsearch-mcp-server)** - MCP server implementation that provides Elasticsearch interaction.\n- **[ElevenLabs](https://github.com/mamertofabian/elevenlabs-mcp-server)** - A server that integrates with ElevenLabs text-to-speech API capable of generating full voiceovers with multiple voices.\n- **[Ergo Blockchain MCP](https://github.com/marctheshark3/ergo-mcp)** -An MCP server to integrate Ergo Blockchain Node and Explorer APIs for checking address balances, analyzing transactions, viewing transaction history, performing forensic analysis of addresses, searching for tokens, and monitoring network status.\n- **[Eunomia](https://github.com/whataboutyou-ai/eunomia-MCP-server)** - Extension of the Eunomia framework that connects Eunomia instruments with MCP servers\n- **[EVM MCP Server](https://github.com/mcpdotdirect/evm-mcp-server)** - Comprehensive blockchain services for 30+ EVM networks, supporting native tokens, ERC20, NFTs, smart contracts, transactions, and ENS resolution.\n- **[Everything Search](https://github.com/mamertofabian/mcp-everything-search)** - Fast file searching capabilities across Windows (using [Everything SDK](https://www.voidtools.com/support/everything/sdk/)), macOS (using mdfind command), and Linux (using locate/plocate command).\n- **[Excel](https://github.com/haris-musa/excel-mcp-server)** - Excel manipulation including data reading/writing, worksheet management, formatting, charts, and pivot table.\n- **[Fantasy PL](https://github.com/rishijatia/fantasy-pl-mcp)** - Give your coding agent direct access to up-to date Fantasy Premier League data\n- **[fastn.ai – Unified API MCP Server](https://github.com/fastnai/mcp-fastn)** - A remote, dynamic MCP server with a unified API that connects to 1,000+ tools, actions, and workflows, featuring built-in authentication and monitoring.\n- **[Fetch](https://github.com/zcaceres/fetch-mcp)** - A server that flexibly fetches HTML, JSON, Markdown, or plaintext.\n- **[Fingertip](https://github.com/fingertip-com/fingertip-mcp)** - MCP server for Fingertip.com to search and create new sites.\n- **[Figma](https://github.com/GLips/Figma-Context-MCP)** - Give your coding agent direct access to Figma file data, helping it one-shot design implementation.\n- **[Firebase](https://github.com/gannonh/firebase-mcp)** - Server to interact with Firebase services including Firebase Authentication, Firestore, and Firebase Storage.\n- **[FireCrawl](https://github.com/vrknetha/mcp-server-firecrawl)** - Advanced web scraping with JavaScript rendering, PDF support, and smart rate limiting\n- **[FlightRadar24](https://github.com/sunsetcoder/flightradar24-mcp-server)** - A Claude Desktop MCP server that helps you track flights in real-time using Flightradar24 data.\n- **[Ghost](https://github.com/MFYDev/ghost-mcp)** - A Model Context Protocol (MCP) server for interacting with Ghost CMS through LLM interfaces like Claude.\n- **[Github Actions](https://github.com/ko1ynnky/github-actions-mcp-server)** - A Model Context Protocol (MCP) server for interacting with Github Actions.\n- **[Glean](https://github.com/longyi1207/glean-mcp-server)** - A server that uses Glean API to search and chat.\n- **[Gmail](https://github.com/GongRzhe/Gmail-MCP-Server)** - A Model Context Protocol (MCP) server for Gmail integration in Claude Desktop with auto authentication support.\n- **[Gmail Headless](https://github.com/baryhuang/mcp-headless-gmail)** - Remote hostable MCP server that can get and send Gmail messages without local credential or file system setup.\n- **[Goal Story](https://github.com/hichana/goalstory-mcp)** - a Goal Tracker and Visualization Tool for personal and professional development.\n- **[GOAT](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-framework/model-context-protocol)** - Run more than +200 onchain actions on any blockchain including Ethereum, Solana and Base.\n- **[Godot](https://github.com/Coding-Solo/godot-mcp)** - A MCP server providing comprehensive Godot engine integration for project editing, debugging, and scene management.\n- **[Golang Filesystem Server](https://github.com/mark3labs/mcp-filesystem-server)** - Secure file operations with configurable access controls built with Go!\n- **[Goodnews](https://github.com/VectorInstitute/mcp-goodnews)** - A simple MCP server that delivers curated positive and uplifting news stories.\n- **[Google Calendar](https://github.com/v-3/google-calendar)** - Integration with Google Calendar to check schedules, find time, and add/delete events\n- **[Google Calendar](https://github.com/nspady/google-calendar-mcp)** - Google Calendar MCP Server for managing Google calendar events. Also supports searching for events by attributes like title and location.\n- **[Google Custom Search](https://github.com/adenot/mcp-google-search)** - Provides Google Search results via the Google Custom Search API\n- **[Google Tasks](https://github.com/zcaceres/gtasks-mcp)** - Google Tasks API Model Context Protocol Server.\n- **[GraphQL Schema](https://github.com/hannesj/mcp-graphql-schema)** - Allow LLMs to explore large GraphQL schemas without bloating the context.\n- **[HDW LinkedIn](https://github.com/horizondatawave/hdw-mcp-server)** - Access to profile data and management of user account with [HorizonDataWave.ai](https://horizondatawave.ai/).\n- **[Heurist Mesh Agent](https://github.com/heurist-network/heurist-mesh-mcp-server)** - Access specialized web3 AI agents for blockchain analysis, smart contract security, token metrics, and blockchain interactions through the [Heurist Mesh network](https://github.com/heurist-network/heurist-agent-framework/tree/main/mesh).\n- **[Holaspirit](https://github.com/syucream/holaspirit-mcp-server)** - Interact with [Holaspirit](https://www.holaspirit.com/).\n- **[Home Assistant](https://github.com/tevonsb/homeassistant-mcp)** - Interact with [Home Assistant](https://www.home-assistant.io/) including viewing and controlling lights, switches, sensors, and all other Home Assistant entities.\n- **[Home Assistant](https://github.com/voska/hass-mcp)** - Docker-ready MCP server for Home Assistant with entity management, domain summaries, automation support, and guided conversations. Includes pre-built container images for easy installation.\n- **[HubSpot](https://github.com/buryhuang/mcp-hubspot)** - HubSpot CRM integration for managing contacts and companies. Create and retrieve CRM data directly through Claude chat.\n- **[HuggingFace Spaces](https://github.com/evalstate/mcp-hfspace)** - Server for using HuggingFace Spaces, supporting Open Source Image, Audio, Text Models and more. Claude Desktop mode for easy integration.\n- **[Hyperliquid](https://github.com/mektigboy/server-hyperliquid)** - An MCP server implementation that integrates the Hyperliquid SDK for exchange data.\n- **[iFlytek Workflow](https://github.com/iflytek/ifly-workflow-mcp-server)** - Connect to iFlytek Workflow via the MCP server and run your own Agent.\n- **[Image Generation](https://github.com/GongRzhe/Image-Generation-MCP-Server)** - This MCP server provides image generation capabilities using the Replicate Flux model.\n- **[InfluxDB](https://github.com/idoru/influxdb-mcp-server)** - Run queries against InfluxDB OSS API v2.\n- **[Inoyu](https://github.com/sergehuber/inoyu-mcp-unomi-server)** - Interact with an Apache Unomi CDP customer data platform to retrieve and update customer profiles\n- **[Intercom](https://github.com/raoulbia-ai/mcp-server-for-intercom)** - An MCP-compliant server for retrieving customer support tickets from Intercom. This tool enables AI assistants like Claude Desktop and Cline to access and analyze your Intercom support tickets.\n- **[iOS Simulator](https://github.com/InditexTech/mcp-server-simulator-ios-idb)** - A Model Context Protocol (MCP) server that enables LLMs to interact with iOS simulators (iPhone, iPad, etc.) through natural language commands.\n- **[iTerm MCP](https://github.com/ferrislucas/iterm-mcp)** - Integration with iTerm2 terminal emulator for macOS, enabling LLMs to execute and monitor terminal commands.\n- **[JavaFX](https://github.com/mcpso/mcp-server-javafx)** - Make drawings using a JavaFX canvas\n- **[JDBC](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc)** - Connect to any JDBC-compatible database and query, insert, update, delete, and more. Supports MySQL, PostgreSQL, Oracle, SQL Server, sqllite and [more](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc#supported-jdbc-variants).\n- **[JSON](https://github.com/GongRzhe/JSON-MCP-Server)** - JSON handling and processing server with advanced query capabilities using JSONPath syntax and support for array, string, numeric, and date operations.\n- **[KiCad MCP](https://github.com/lamaalrajih/kicad-mcp)** - MCP server for KiCad on Mac, Windows, and Linux.\n- **[Keycloak MCP](https://github.com/ChristophEnglisch/keycloak-model-context-protocol)** - This MCP server enables natural language interaction with Keycloak for user and realm management including creating, deleting, and listing users and realms.\n- **[Kibela](https://github.com/kiwamizamurai/mcp-kibela-server)** (by kiwamizamurai) - Interact with Kibela API.\n- **[kintone](https://github.com/macrat/mcp-server-kintone)** - Manage records and apps in [kintone](https://kintone.com) through LLM tools.\n- **[Kong Konnect](https://github.com/Kong/mcp-konnect)** - A Model Context Protocol (MCP) server for interacting with Kong Konnect APIs, allowing AI assistants to query and analyze Kong Gateway configurations, traffic, and analytics.\n- **[Kubernetes](https://github.com/Flux159/mcp-server-kubernetes)** - Connect to Kubernetes cluster and manage pods, deployments, and services.\n- **[Kubernetes and OpenShift](https://github.com/manusa/kubernetes-mcp-server)** - A powerful Kubernetes MCP server with additional support for OpenShift. Besides providing CRUD operations for any Kubernetes resource, this server provides specialized tools to interact with your cluster.\n- **[Langflow-DOC-QA-SERVER](https://github.com/GongRzhe/Langflow-DOC-QA-SERVER)** - A Model Context Protocol server for document Q&A powered by Langflow. It demonstrates core MCP concepts by providing a simple interface to query documents through a Langflow backend.\n- **[Lightdash](https://github.com/syucream/lightdash-mcp-server)** - Interact with [Lightdash](https://www.lightdash.com/), a BI tool.\n- **[Linear](https://github.com/jerhadf/linear-mcp-server)** - Allows LLM to interact with Linear's API for project management, including searching, creating, and updating issues.\n- **[Linear (Go)](https://github.com/geropl/linear-mcp-go)** - Allows LLM to interact with Linear's API via a single static binary.\n- **[LINE](https://github.com/amornpan/py-mcp-line)** (by amornpan) - Implementation for LINE Bot integration that enables Language Models to read and analyze LINE conversations through a standardized interface. Features asynchronous operation, comprehensive logging, webhook event handling, and support for various message types.\n- **[LlamaCloud](https://github.com/run-llama/mcp-server-llamacloud)** (by marcusschiesser) - Integrate the data stored in a managed index on [LlamaCloud](https://cloud.llamaindex.ai/)\n- **[llm-context](https://github.com/cyberchitta/llm-context.py)** - Provides a repo-packing MCP tool with configurable profiles that specify file inclusion/exclusion patterns and optional prompts.\n- **[mac-messages-mcp](https://github.com/carterlasalle/mac_messages_mcp)** - An MCP server that securely interfaces with your iMessage database via the Model Context Protocol (MCP), allowing LLMs to query and analyze iMessage conversations. It includes robust phone number validation, attachment processing, contact management, group chat handling, and full support for sending and receiving messages.\n- **[MariaDB](https://github.com/abel9851/mcp-server-mariadb)** - MariaDB database integration with configurable access controls in Python.\n- **[Maton](https://github.com/maton-ai/agent-toolkit/tree/main/modelcontextprotocol)** - Connect to your SaaS tools like HubSpot, Salesforce, and more.\n- **[MCP Compass](https://github.com/liuyoshio/mcp-compass)** - Suggest the right MCP server for your needs\n- **[MCP Create](https://github.com/tesla0225/mcp-create)** - A dynamic MCP server management service that creates, runs, and manages Model Context Protocol servers on-the-fly.\n- **[MCP Installer](https://github.com/anaisbetts/mcp-installer)** - This server is a server that installs other MCP servers for you.\n- **[mcp-k8s-go](https://github.com/strowk/mcp-k8s-go)** - Golang-based Kubernetes server for MCP to browse pods and their logs, events, namespaces and more. Built to be extensible.\n- **[mcp-local-rag](https://github.com/nkapila6/mcp-local-rag)** - \"primitive\" RAG-like web search model context protocol (MCP) server that runs locally using Google's MediaPipe Text Embedder and DuckDuckGo Search. ✨ no APIs required ✨.\n- **[mcp-proxy](https://github.com/sparfenyuk/mcp-proxy)** - Connect to MCP servers that run on SSE transport, or expose stdio servers as an SSE server.\n- **[mem0-mcp](https://github.com/mem0ai/mem0-mcp)** - A Model Context Protocol server for Mem0, which helps with managing coding preferences.\n- **[MSSQL](https://github.com/aekanun2020/mcp-server/)** - MSSQL database integration with configurable access controls and schema inspection\n- **[MSSQL](https://github.com/JexinSam/mssql_mcp_server)** (by jexin) - MCP Server for MSSQL database in Python\n- **[MSSQL-Python](https://github.com/amornpan/py-mcp-mssql)** (by amornpan) - A read-only Python implementation for MSSQL database access with enhanced security features, configurable access controls, and schema inspection capabilities. Focuses on safe database interaction through Python ecosystem.\n- **[MSSQL-MCP](https://github.com/daobataotie/mssql-mcp)** (by daobataotie) - MSSQL MCP that refer to the official website's SQLite MCP for modifications to adapt to MSSQL\n- **[Markdownify](https://github.com/zcaceres/mcp-markdownify-server)** - MCP to convert almost anything to Markdown (PPTX, HTML, PDF, Youtube Transcripts and more)\n- **[Microsoft Teams](https://github.com/InditexTech/mcp-teams-server)** - MCP server that integrates Microsoft Teams messaging (read, post, mention, list members and threads) \n- **[Mindmap](https://github.com/YuChenSSR/mindmap-mcp-server)** (by YuChenSSR) - A server that generates mindmaps from input containing markdown code.\n- **[Minima](https://github.com/dmayboroda/minima)** - MCP server for RAG on local files\n- **[Mobile MCP](https://github.com/mobile-next/mobile-mcp)** (by Mobile Next) - MCP server for Mobile(iOS/Android) automation, app scraping and development using physical devices or simulators/emulators.\n- **[MongoDB](https://github.com/kiliczsh/mcp-mongo-server)** - A Model Context Protocol Server for MongoDB.\n- **[MongoDB Lens](https://github.com/furey/mongodb-lens)** - Full Featured MCP Server for MongoDB Databases.\n- **[Monday.com](https://github.com/sakce/mcp-server-monday)** - MCP Server to interact with Monday.com boards and items.\n- **[Multicluster-MCP-Sever](https://github.com/yanmxa/multicluster-mcp-server)** - The gateway for GenAI systems to interact with multiple Kubernetes clusters.\n- **[MySQL](https://github.com/benborla/mcp-server-mysql)** (by benborla) - MySQL database integration in NodeJS with configurable access controls and schema inspection\n- **[MySQL](https://github.com/designcomputer/mysql_mcp_server)** (by DesignComputer) - MySQL database integration in Python with configurable access controls and schema inspection\n- **[n8n](https://github.com/leonardsellem/n8n-mcp-server)** - This MCP server provides tools and resources for AI assistants to manage n8n workflows and executions, including listing, creating, updating, and deleting workflows, as well as monitoring their execution status.\n- **[NASA](https://github.com/ProgramComputer/NASA-MCP-server)** (by ProgramComputer) - Access to a unified gateway of NASA's data sources including but not limited to APOD, NEO, EPIC, GIBS.\n- **[Nasdaq Data Link](https://github.com/stefanoamorelli/nasdaq-data-link-mcp)** (by stefanoamorelli) - An MCP server to access, explore, and interact with Nasdaq Data Link’s extensive and valuable financial and economic datasets.\n- **[National Parks](https://github.com/KyrieTangSheng/mcp-server-nationalparks)** - The server provides latest information of park details, alerts, visitor centers, campgrounds, hiking trails, and events for U.S. National Parks.\n- **[NAVER](https://github.com/pfldy2850/py-mcp-naver)** (by pfldy2850) - This MCP server provides tools to interact with various Naver services, such as searching blogs, news, books, and more.\n- **[NS Travel Information](https://github.com/r-huijts/ns-mcp-server)** - Access Dutch Railways (NS) real-time train travel information and disruptions through the official NS API.\n- **[Neo4j](https://github.com/da-okazaki/mcp-neo4j-server)** - A community built server that interacts with Neo4j Graph Database.\n- **[Neovim](https://github.com/bigcodegen/mcp-neovim-server)** - An MCP Server for your Neovim session.\n- **[Notion](https://github.com/suekou/mcp-notion-server)** (by suekou) - Interact with Notion API.\n- **[Notion](https://github.com/v-3/notion-server)** (by v-3) - Notion MCP integration. Search, Read, Update, and Create pages through Claude chat.\n- **[ntfy-mcp](https://github.com/teddyzxcv/ntfy-mcp)** (by teddyzxcv) - The MCP server that keeps you informed by sending the notification on phone using ntfy\n- **[oatpp-mcp](https://github.com/oatpp/oatpp-mcp)** - C++ MCP integration for Oat++. Use [Oat++](https://oatpp.io) to build MCP servers.\n- **[Obsidian Markdown Notes](https://github.com/calclavia/mcp-obsidian)** - Read and search through your Obsidian vault or any directory containing Markdown notes\n- **[obsidian-mcp](https://github.com/StevenStavrakis/obsidian-mcp)** - (by Steven Stavrakis) An MCP server for Obsidian.md with tools for searching, reading, writing, and organizing notes.\n- **[OceanBase](https://github.com/yuanoOo/oceanbase_mcp_server)** - (by yuanoOo) A Model Context Protocol (MCP) server that enables secure interaction with OceanBase databases.\n- **[Okta](https://github.com/kapilduraphe/okta-mcp-server)** - Interact with Okta API.\n- **[OneNote](https://github.com/rajvirtual/MCP-Servers/tree/master/onenote)** - (by Rajesh Vijay) An MCP server that connects to Microsoft OneNote using the Microsoft Graph API. Reading notebooks, sections, and pages from OneNote,Creating new notebooks, sections, and pages in OneNote.\n- **[OpenAI WebSearch MCP](https://github.com/ConechoAI/openai-websearch-mcp)** - This is a Python-based MCP server that provides OpenAI `web_search` build-in tool.\n- **[OpenAPI](https://github.com/snaggle-ai/openapi-mcp-server)** - Interact with [OpenAPI](https://www.openapis.org/) APIs.\n- **[OpenAPI AnyApi](https://github.com/baryhuang/mcp-server-any-openapi)** - Interact with large [OpenAPI](https://www.openapis.org/) docs using built-in semantic search for endpoints. Allows for customizing the MCP server prefix.\n- **[OpenAPI Schema](https://github.com/hannesj/mcp-openapi-schema)** - Allow LLMs to explore large [OpenAPI](https://www.openapis.org/) schemas without bloating the context.\n- **[OpenCTI](https://github.com/Spathodea-Network/opencti-mcp)** - Interact with OpenCTI platform to retrieve threat intelligence data including reports, indicators, malware and threat actors.\n- **[OpenDota](https://github.com/asusevski/opendota-mcp-server)** - Interact with OpenDota API to retrieve Dota 2 match data, player statistics, and more.\n- **[OpenRPC](https://github.com/shanejonas/openrpc-mpc-server)** - Interact with and discover JSON-RPC APIs via [OpenRPC](https://open-rpc.org).\n- **[Open Strategy Partners Marketing Tools](https://github.com/open-strategy-partners/osp_marketing_tools)** - Content editing codes, value map, and positioning tools for product marketing.\n- **[Pandoc](https://github.com/vivekVells/mcp-pandoc)** - MCP server for seamless document format conversion using Pandoc, supporting Markdown, HTML, PDF, DOCX (.docx), csv and more.\n- **[PIF](https://github.com/hungryrobot1/MCP-PIF)** - A Personal Intelligence Framework (PIF), providing tools for file operations, structured reasoning, and journal-based documentation to support continuity and evolving human-AI collaboration across sessions.\n- **[Pinecone](https://github.com/sirmews/mcp-pinecone)** - MCP server for searching and uploading records to Pinecone. Allows for simple RAG features, leveraging Pinecone's Inference API.\n- **[Placid.app](https://github.com/felores/placid-mcp-server)** - Generate image and video creatives using Placid.app templates\n- **[Playwright](https://github.com/executeautomation/mcp-playwright)** - This MCP Server will help you run browser automation and webscraping using Playwright\n- **[Postman](https://github.com/shannonlal/mcp-postman)** - MCP server for running Postman Collections locally via Newman. Allows for simple execution of Postman Server and returns the results of whether the collection passed all the tests.\n- **[Productboard](https://github.com/kenjihikmatullah/productboard-mcp)** - Integrate the Productboard API into agentic workflows via MCP.\n- **[Prometheus](https://github.com/pab1it0/prometheus-mcp-server)** - Query and analyze Prometheus - open-source monitoring system.\n- **[Pulumi](https://github.com/dogukanakkaya/pulumi-mcp-server)** - MCP Server to Interact with Pulumi API, creates and lists Stacks\n- **[Pushover](https://github.com/ashiknesin/pushover-mcp)** - Send instant notifications to your devices using [Pushover.net](https://pushover.net/)\n- **[QGIS](https://github.com/jjsantos01/qgis_mcp)** - connects QGIS to Claude AI through the MCP. This integration enables prompt-assisted project creation, layer loading, code execution, and more.\n- **[QuickChart](https://github.com/GongRzhe/Quickchart-MCP-Server)** - A Model Context Protocol server for generating charts using QuickChart.io\n- **[Qwen_Max](https://github.com/66julienmartin/MCP-server-Qwen_Max)** - A Model Context Protocol (MCP) server implementation for the Qwen models.\n- **[RabbitMQ](https://github.com/kenliao94/mcp-server-rabbitmq)** - The MCP server that interacts with RabbitMQ to publish and consume messages.\n- **[RAG Web Browser](https://github.com/apify/mcp-server-rag-web-browser)** An MCP server for Apify's open-source RAG Web Browser [Actor](https://apify.com/apify/rag-web-browser) to perform web searches, scrape URLs, and return content in Markdown.\n- **[Reaper](https://github.com/dschuler36/reaper-mcp-server)** - Interact with your [Reaper](https://www.reaper.fm/) (Digital Audio Workstation) projects.\n- **[Redis](https://github.com/GongRzhe/REDIS-MCP-Server)** - Redis database operations and caching microservice server with support for key-value operations, expiration management, and pattern-based key listing.\n- **[Redis](https://github.com/prajwalnayak7/mcp-server-redis)** MCP server to interact with Redis Server, AWS Memory DB, etc for caching or other use-cases where in-memory and key-value based storage is appropriate\n- **[Rememberizer AI](https://github.com/skydeckai/mcp-server-rememberizer)** - An MCP server designed for interacting with the Rememberizer data source, facilitating enhanced knowledge retrieval.\n- **[Replicate](https://github.com/deepfates/mcp-replicate)** - Search, run and manage machine learning models on Replicate through a simple tool-based interface. Browse models, create predictions, track their status, and handle generated images.\n- **[Rquest](https://github.com/xxxbrian/mcp-rquest)** - An MCP server providing realistic browser-like HTTP request capabilities with accurate TLS/JA3/JA4 fingerprints for bypassing anti-bot measures.\n- **[Rijksmuseum](https://github.com/r-huijts/rijksmuseum-mcp)** - Interface with the Rijksmuseum API to search artworks, retrieve artwork details, access image tiles, and explore user collections.\n- **[Salesforce MCP](https://github.com/smn2gnt/MCP-Salesforce)** - Interact with Salesforce Data and Metadata\n- **[Scholarly](https://github.com/adityak74/mcp-scholarly)** - A MCP server to search for scholarly and academic articles.\n- **[scrapling-fetch](https://github.com/cyberchitta/scrapling-fetch-mcp)** - Access text content from bot-protected websites. Fetches HTML/markdown from sites with anti-automation measures using Scrapling.\n- **[SearXNG](https://github.com/ihor-sokoliuk/mcp-searxng)** - A Model Context Protocol Server for [SearXNG](https://docs.searxng.org)\n- **[ServiceNow](https://github.com/osomai/servicenow-mcp)** - A MCP server to interact with a ServiceNow instance\n- **[Shopify](https://github.com/GeLi2001/shopify-mcp)** - MCP to interact with Shopify API including order, product, customers and so on.\n- **[Siri Shortcuts](https://github.com/dvcrn/mcp-server-siri-shortcuts)** - MCP to interact with Siri Shortcuts on macOS. Exposes all Shortcuts as MCP tools.\n- **[Snowflake](https://github.com/isaacwasserman/mcp-snowflake-server)** - This MCP server enables LLMs to interact with Snowflake databases, allowing for secure and controlled data operations.\n- **[Solana Agent Kit](https://github.com/sendaifun/solana-agent-kit/tree/main/examples/agent-kit-mcp-server)** - This MCP server enables LLMs to interact with the Solana blockchain with help of Solana Agent Kit by SendAI, allowing for 40+ protcool actions and growing\n- **[Spotify](https://github.com/varunneal/spotify-mcp)** - This MCP allows an LLM to play and use Spotify.\n- **[Starwind UI](https://github.com/Boston343/starwind-ui-mcp/)** - This MCP provides relevant commands, documentation, and other information to allow LLMs to take full advantage of Starwind UI's open source Astro components.\n- **[Stripe](https://github.com/atharvagupta2003/mcp-stripe)** - This MCP allows integration with Stripe for handling payments, customers, and refunds.\n- **[ShaderToy](https://github.com/wilsonchenghy/ShaderToy-MCP)** - This MCP server lets LLMs to interact with the ShaderToy API, allowing LLMs to learn from compute shaders examples and enabling them to create complex GLSL shaders that they are previously not capable of.\n- **[TMDB](https://github.com/Laksh-star/mcp-server-tmdb)** - This MCP server integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.\n- **[Tavily search](https://github.com/RamXX/mcp-tavily)** - An MCP server for Tavily's search & news API, with explicit site inclusions/exclusions\n- **[Telegram](https://github.com/chigwell/telegram-mcp)** - An MCP server that provides paginated chat reading, message retrieval, and message sending capabilities for Telegram through Telethon integration.\n- **[Terminal-Control](https://github.com/GongRzhe/terminal-controller-mcp)** - A MCP server that enables secure terminal command execution, directory navigation, and file system operations through a standardized interface.\n- **[TFT-Match-Analyzer](https://github.com/GeLi2001/tft-mcp-server)** - MCP server for teamfight tactics match history & match details fetching, providing user the detailed context for every match.\n- **[Ticketmaster](https://github.com/delorenj/mcp-server-ticketmaster)** - Search for events, venues, and attractions through the Ticketmaster Discovery API\n- **[Todoist](https://github.com/abhiz123/todoist-mcp-server)** - Interact with Todoist to manage your tasks.\n- **[Typesense](https://github.com/suhail-ak-s/mcp-typesense-server)** - A Model Context Protocol (MCP) server implementation that provides AI models with access to Typesense search capabilities. This server enables LLMs to discover, search, and analyze data stored in Typesense collections.\n- **[Travel Planner](https://github.com/GongRzhe/TRAVEL-PLANNER-MCP-Server)** - Travel planning and itinerary management server integrating with Google Maps API for location search, place details, and route calculations.\n- **[Unity Catalog](https://github.com/ognis1205/mcp-server-unitycatalog)** - An MCP server that enables LLMs to interact with Unity Catalog AI, supporting CRUD operations on Unity Catalog Functions and executing them as MCP tools.\n- **[Unity3d Game Engine](https://github.com/CoderGamester/mcp-unity)** - An MCP server that enables LLMs to interact with Unity3d Game Engine, supporting access to a variety of the Unit's Editor engine tools (e.g. Console Logs, Test Runner logs, Editor functions, hierarchy state, etc) and executing them as MCP tools or gather them as resources.\n- **[Unity Integration (Advanced)](https://github.com/quazaai/UnityMCPIntegration)** - Advanced Unity3d Game Engine MCP which supports ,Execution of Any Editor Related Code Directly Inside of Unity, Fetch Logs, Get Editor State and Allow File Access of the Project making it much more useful in Script Editing or asset creation.\n- **[Vega-Lite](https://github.com/isaacwasserman/mcp-vegalite-server)** - Generate visualizations from fetched data using the VegaLite format and renderer.\n- **[Video Editor](https://github.com/burningion/video-editing-mcp)** - A Model Context Protocol Server to add, edit, and search videos with [Video Jungle](https://www.video-jungle.com/).\n- **[Virtual location (Google Street View,etc.)](https://github.com/mfukushim/map-traveler-mcp)** - Integrates Google Map, Google Street View, PixAI, Stability.ai, ComfyUI API and Bluesky to provide a virtual location simulation in LLM (written in Effect.ts)\n- **[VolcEngine TOS](https://github.com/dinghuazhou/sample-mcp-server-tos)** - A sample MCP server for VolcEngine TOS that flexibly get objects from TOS.\n- **[Wanaku MCP Router](https://github.com/wanaku-ai/wanaku/)** - The Wanaku MCP Router is a SSE-based MCP server that provides an extensible routing engine that allows integrating your enterprise systems with AI agents.\n- **[Webflow](https://github.com/kapilduraphe/webflow-mcp-server)** - Interfact with the Webflow APIs\n- **[whale-tracker-mcp](https://github.com/kukapay/whale-tracker-mcp)**  -  A mcp server for tracking cryptocurrency whale transactions. \n- **[Whois MCP](https://github.com/bharathvaj-ganesan/whois-mcp)** - MCP server that performs whois lookup against domain, IP, ASN and TLD. \n- **[Wikidata MCP](https://github.com/zzaebok/mcp-wikidata)** - Wikidata MCP server that interact with Wikidata, by searching identifiers, extracting metadata, and executing sparql query.\n- **[WildFly MCP](https://github.com/wildfly-extras/wildfly-mcp)** - WildFly MCP server that enables LLM to interact with running WildFly servers (retrieve metrics, logs, invoke operations, ...).\n- **[Windows CLI](https://github.com/SimonB97/win-cli-mcp-server)** - MCP server for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, and Git Bash shells.\n- **[World Bank data API](https://github.com/anshumax/world_bank_mcp_server)** - A server that fetches data indicators available with the World Bank as part of their data API\n- **[X (Twitter)](https://github.com/EnesCinr/twitter-mcp)** (by EnesCinr) - Interact with twitter API. Post tweets and search for tweets by query.\n- **[X (Twitter)](https://github.com/vidhupv/x-mcp)** (by vidhupv) - Create, manage and publish X/Twitter posts directly through Claude chat.\n- **[xcodebuild](https://github.com/ShenghaiWang/xcodebuild)**  - 🍎 Build iOS Xcode workspace/project and feed back errors to llm.\n- **[Xero-mcp-server](https://github.com/john-zhang-dev/xero-mcp)** - Enabling clients to interact with Xero system for streamlined accounting, invoicing, and business operations.\n- **[XiYan](https://github.com/XGenerationLab/xiyan_mcp_server)** - 🗄️ An MCP server that supports fetching data from a database using natural language queries, powered by XiyanSQL as the text-to-SQL LLM.\n- **[XMind](https://github.com/apeyroux/mcp-xmind)** - Read and search through your XMind directory containing XMind files.\n- **[YouTube](https://github.com/ZubeidHendricks/youtube-mcp-server)** - Comprehensive YouTube API integration for video management, Shorts creation, and analytics.\n\n## 📚 Frameworks\n\nThese are high-level frameworks that make it easier to build MCP servers or clients.\n\n### For servers\n\n* **[EasyMCP](https://github.com/zcaceres/easy-mcp/)** (TypeScript)\n- **[FastAPI to MCP auto generator](https://github.com/tadata-org/fastapi_mcp)** – A zero-configuration tool for automatically exposing FastAPI endpoints as MCP tools by **[Tadata](https://tadata.com/)**\n* **[FastMCP](https://github.com/punkpeye/fastmcp)** (TypeScript)\n* **[Foxy Contexts](https://github.com/strowk/foxy-contexts)** – A library to build MCP servers in Golang by **[strowk](https://github.com/strowk)**\n* **[Higress MCP Server Hosting](https://github.com/alibaba/higress/tree/main/plugins/wasm-go/mcp-servers)** - A solution for hosting MCP Servers by extending the API Gateway (based on Envoy) with wasm plugins.\n* **[MCP-Framework](https://mcp-framework.com)** Build MCP servers with elegance and speed in Typescript. Comes with a CLI to create your project with `mcp create app`. Get started with your first server in under 5 minutes by **[Alex Andru](https://github.com/QuantGeekDev)**\n* **[Quarkus MCP Server SDK](https://github.com/quarkiverse/quarkus-mcp-server)** (Java)\n* **[Template MCP Server](https://github.com/mcpdotdirect/template-mcp-server)** - A CLI tool to create a new Model Context Protocol server project with TypeScript support, dual transport options, and an extensible structure\n\n### For clients\n\n* **[codemirror-mcp](https://github.com/marimo-team/codemirror-mcp)** - CodeMirror extension that implements the Model Context Protocol (MCP) for resource mentions and prompt commands\n\n## 📚 Resources\n\nAdditional resources on MCP.\n\n- **[AiMCP](https://www.aimcp.info)** - A collection of MCP clients&servers to find the right mcp tools by **[Hekmon](https://github.com/hekmon8)**\n- **[Awesome Crypto MCP Servers by badkk](https://github.com/badkk/awesome-crypto-mcp-servers)** - A curated list of MCP servers by **[Luke Fan](https://github.com/badkk)**\n- **[Awesome MCP Servers by appcypher](https://github.com/appcypher/awesome-mcp-servers)** - A curated list of MCP servers by **[Stephen Akinyemi](https://github.com/appcypher)**\n- **[Awesome MCP Servers by punkpeye](https://github.com/punkpeye/awesome-mcp-servers)** (**[website](https://glama.ai/mcp/servers)**) - A curated list of MCP servers by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Awesome MCP Servers by wong2](https://github.com/wong2/awesome-mcp-servers)** (**[website](https://mcpservers.org)**) - A curated list of MCP servers by **[wong2](https://github.com/wong2)**\n- **[Discord Server](https://glama.ai/mcp/discord)** – A community discord server dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Discord Server (ModelContextProtocol)](https://discord.gg/jHEGxQu2a5)** – Connect with developers, share insights, and collaborate on projects in an active Discord community dedicated to the Model Context Protocol by **[Alex Andru](https://github.com/QuantGeekDev)**\n\n- **[MCP Badges](https://github.com/mcpx-dev/mcp-badges)** – Quickly highlight your MCP project with clear, eye-catching badges, by **[Ironben](https://github.com/nanbingxyz)**\n- **[MCP Servers Hub](https://github.com/apappascs/mcp-servers-hub)** (**[website](https://mcp-servers-hub-website.pages.dev/)**) - A curated list of MCP servers by **[apappascs](https://github.com/apappascs)**\n- **[MCP X Community](https://x.com/i/communities/1861891349609603310)** – A X community for MCP by **[Xiaoyi](https://x.com/chxy)**\n- **[mcp-cli](https://github.com/wong2/mcp-cli)** - A CLI inspector for the Model Context Protocol by **[wong2](https://github.com/wong2)**\n- **[mcp-get](https://mcp-get.com)** - Command line tool for installing and managing MCP servers by **[Michael Latman](https://github.com/michaellatman)**\n- **[mcp-guardian](https://github.com/eqtylab/mcp-guardian)** - GUI application + tools for proxying / managing control of MCP servers by **[EQTY Lab](https://eqtylab.io)**\n- **[mcp-manager](https://github.com/zueai/mcp-manager)** - Simple Web UI to install and manage MCP servers for Claude Desktop by **[Zue](https://github.com/zueai)**\n- **[MCPHub](https://github.com/Jeamee/MCPHub-Desktop)** – An Open Source MacOS & Windows GUI Desktop app for discovering, installing and managing MCP servers by **[Jeamee](https://github.com/jeamee)**\n- **[mcp.natoma.id](https://mcp.natoma.id)** - A Hosted MCP Platform to discover, install, manage and deploy MCP servers by **[Natoma Labs](https://www.natoma.id)**\n- **[mcp.run](https://mcp.run)** - A hosted registry and control plane to install & run secure + portable MCP Servers.\n- **[mcp-dockmaster](https://mcp-dockmaster.com)** - An Open-Sourced UI to install and manage MCP servers for Windows, Linux and MacOS.\n- **[MCP Servers Rating and User Reviews](http://www.deepnlp.org/store/ai-agent/mcp-server)** - Website to rate MCP servers, write authentic user reviews, and [search engine for agent & mcp](http://www.deepnlp.org/search/agent)\n- <img height=\"12\" width=\"12\" src=\"https://mkinf.io/favicon-lilac.png\" alt=\"mkinf Logo\" /> **[mkinf](https://mkinf.io)** - An Open Source registry of hosted MCP Servers to accelerate AI agent workflows.\n- **[Open-Sourced MCP Servers Directory](https://github.com/chatmcp/mcp-directory)** - A curated list of MCP servers by **[mcpso](https://mcp.so)**\n- <img height=\"12\" width=\"12\" src=\"https://opentools.com/favicon.ico\" alt=\"OpenTools Logo\" /> **[OpenTools](https://opentools.com)** - An open registry for finding, installing, and building with MCP servers by **[opentoolsteam](https://github.com/opentoolsteam)**\n- **[PulseMCP](https://www.pulsemcp.com)** ([API](https://www.pulsemcp.com/api)) - Community hub & weekly newsletter for discovering MCP servers, clients, articles, and news by **[Tadas Antanavicius](https://github.com/tadasant)**, **[Mike Coughlin](https://github.com/macoughl)**, and **[Ravina Patel](https://github.com/ravinahp)**\n- **[r/mcp](https://www.reddit.com/r/mcp)** – A Reddit community dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[r/modelcontextprotocol](https://www.reddit.com/r/modelcontextprotocol)** – A Model Context Protocol community Reddit page - discuss ideas, get answers to your questions, network with like-minded people, and showcase your projects! by **[Alex Andru](https://github.com/QuantGeekDev)**\n\n\n- **[Smithery](https://smithery.ai/)** - A registry of MCP servers to find the right tools for your LLM agents by **[Henry Mao](https://github.com/calclavia)**\n- **[Toolbase](https://gettoolbase.ai)** - Desktop application that manages tools and MCP servers with just a few clicks - no coding required by **[gching](https://github.com/gching)**\n\n## 🚀 Getting Started\n\n### Using MCP Servers in this Repository\nTypescript-based servers in this repository can be used directly with `npx`.\n\nFor example, this will start the [Memory](src/memory) server:\n```sh\nnpx -y @modelcontextprotocol/server-memory\n```\n\nPython-based servers in this repository can be used directly with [`uvx`](https://docs.astral.sh/uv/concepts/tools/) or [`pip`](https://pypi.org/project/pip/). `uvx` is recommended for ease of use and setup.\n\nFor example, this will start the [Git](src/git) server:\n```sh\n# With uvx\nuvx mcp-server-git\n\n# With pip\npip install mcp-server-git\npython -m mcp_server_git\n```\n\nFollow [these](https://docs.astral.sh/uv/getting-started/installation/) instructions to install `uv` / `uvx` and [these](https://pip.pypa.io/en/stable/installation/) to install `pip`.\n\n### Using an MCP Client\nHowever, running a server on its own isn't very useful, and should instead be configured into an MCP client. For example, here's the Claude Desktop configuration to use the above server:\n\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-memory\"]\n    }\n  }\n}\n```\n\nAdditional examples of using the Claude Desktop as an MCP client might look like:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/path/to/allowed/files\"]\n    },\n    \"git\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-git\", \"--repository\", \"path/to/git/repo\"]\n    },\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    },\n    \"postgres\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\", \"postgresql://localhost/mydb\"]\n    }\n  }\n}\n```\n\n## 🛠️ Creating Your Own Server\n\nInterested in creating your own MCP server? Visit the official documentation at [modelcontextprotocol.io](https://modelcontextprotocol.io/introduction) for comprehensive guides, best practices, and technical details on implementing MCP servers.\n\n## 🤝 Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributing to this repository.\n\n## 🔒 Security\n\nSee [SECURITY.md](SECURITY.md) for reporting security vulnerabilities.\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 💬 Community\n\n- [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions)\n\n## ⭐ Support\n\nIf you find MCP servers useful, please consider starring the repository and contributing new servers or improvements!\n\n---\n\nManaged by Anthropic, but built together with the community. The Model Context Protocol is open source and we encourage everyone to contribute their own servers and improvements!\n",
      "npm_url": "https://www.npmjs.com/package/servers",
      "npm_downloads": 2441,
      "keywords": [
        "github",
        "git",
        "workflows",
        "git workflow",
        "github api",
        "integrate github"
      ],
      "category": "git-workflow-management"
    },
    "Hint-Services--obsidian-github-mcp": {
      "owner": "Hint-Services",
      "name": "obsidian-github-mcp",
      "url": "https://github.com/Hint-Services/obsidian-github-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Hint-Services.webp",
      "description": "Facilitates searching private GitHub repositories while managing rate limiting and error handling. Access file contents and issues securely using a GitHub token.",
      "stars": 5,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-14T15:17:36Z",
      "readme_content": "[![smithery badge](https://smithery.ai/badge/@Hint-Services/obsidian-github-mcp)](https://smithery.ai/server/@Hint-Services/obsidian-github-mcp)\n[![npm version](https://img.shields.io/npm/v/obsidian-github-mcp)](https://www.npmjs.com/package/obsidian-github-mcp)\n\n# Obsidian GitHub MCP\n\nA Model Context Protocol (MCP) server that connects AI assistants to GitHub repositories containing Obsidian vaults. This server enables seamless integration with your knowledge base stored on GitHub, allowing AI assistants to read, search, and analyze your Obsidian notes and documentation.\n\n## Why This Tool?\n\nMany Obsidian users store their vaults in GitHub for backup, versioning, and collaboration. This MCP server bridges the gap between your GitHub-hosted Obsidian vault and AI assistants, enabling:\n\n- **Knowledge Base Access**: Retrieve specific notes and documents from your Obsidian vault\n- **Intelligent Search**: Find relevant content across your entire knowledge base\n- **Evolution Tracking**: See how your ideas and notes have developed over time\n- **Task Integration**: Connect with issues and project management workflows\n\n## Features\n\n- **GitHub Repository Access**: Connect to any GitHub repository containing your Obsidian vault\n- **Type-Safe Implementation**: Written in TypeScript with comprehensive type definitions\n- **Input Validation**: Robust validation for all API inputs using Zod schemas\n- **Error Handling**: Graceful error handling with informative messages\n- **MCP Integration**: Full compatibility with Claude, Cursor, Windsurf, Cline, and other MCP hosts\n\n## Available Tools\n\n### Knowledge Base Access\n\n- **getFileContents**: Retrieve the contents of specific notes, documents, or files from your Obsidian vault\n- **searchFiles**: Enhanced search with multiple modes:\n  - `filename`: Find files by exact filename (perfect for \"OKR 2025\" type searches)\n  - `path`: Search anywhere in file paths \n  - `content`: Search within file contents\n  - `all`: Comprehensive search across filenames, paths, and content\n\n### Project Management Integration\n\n- **searchIssues**: Search for issues and discussions related to your knowledge base projects\n- **getCommitHistory**: Track how your knowledge base has evolved over time with detailed commit history and diffs\n\n## Use Cases\n\n### For Knowledge Workers\n- **Research Assistant**: AI can access your research notes and reference materials\n- **Writing Support**: Pull relevant background information from your knowledge base\n- **Idea Development**: Track how concepts have evolved across your notes\n\n### For Developers\n- **Documentation Access**: Retrieve project documentation and technical notes\n- **Learning Journals**: Access your learning notes and code examples\n- **Project Planning**: Integrate with GitHub issues for comprehensive project management\n\n### For Students & Academics\n- **Study Materials**: Access lecture notes and study guides\n- **Research Papers**: Retrieve research notes and citations\n- **Collaboration**: Work with shared knowledge bases stored in GitHub\n\n## Installation\n\n### Using Smithery (Recommended)\n\nThe easiest way to install Obsidian GitHub MCP is using Smithery:\n\n```bash\n# For Claude Desktop\nnpx -y @smithery/cli install @Hint-Services/obsidian-github-mcp --client claude\n\n# For Cursor\nnpx -y @smithery/cli install @Hint-Services/obsidian-github-mcp --client cursor\n\n# For Windsurf\nnpx -y @smithery/cli install @Hint-Services/obsidian-github-mcp --client windsurf\n\n# For Cline\nnpx -y @smithery/cli install @Hint-Services/obsidian-github-mcp --client cline\n```\n\n### Manual Installation\n\n```bash\nnpm install obsidian-github-mcp\n```\n\n## Configuration\n\nAdd the server to your MCP settings file with the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"obsidianGithub\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"obsidian-github-mcp\"],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"your-github-token\",\n        \"GITHUB_OWNER\": \"your-github-username\",\n        \"GITHUB_REPO\": \"your-obsidian-vault-repo\"\n      }\n    }\n  }\n}\n```\n\n### Required Environment Variables\n\n- `GITHUB_TOKEN`: Your GitHub personal access token ([create one here](https://github.com/settings/tokens))\n- `GITHUB_OWNER`: The owner/organization of the GitHub repository\n- `GITHUB_REPO`: The name of the repository containing your Obsidian vault\n\n### GitHub Token Permissions\n\nYour GitHub token needs the following permissions:\n- `repo` (for private repositories) or `public_repo` (for public repositories)\n- `read:org` (if accessing organization repositories)\n\n## Example Workflows\n\n### Accessing Your Daily Notes\n\n```json\n{\n  \"tool\": \"getFileContents\",\n  \"arguments\": {\n    \"filePath\": \"Daily Notes/2024-01-15.md\"\n  }\n}\n```\n\n### Finding Files by Name (Perfect for \"OKR 2025\" example!)\n\n```json\n{\n  \"tool\": \"searchFiles\",\n  \"arguments\": {\n    \"query\": \"OKR 2025\",\n    \"searchIn\": \"filename\"\n  }\n}\n```\n\n### Finding Files by Path\n\n```json\n{\n  \"tool\": \"searchFiles\",\n  \"arguments\": {\n    \"query\": \"Daily Notes\",\n    \"searchIn\": \"path\"\n  }\n}\n```\n\n### Finding Research on a Topic (Content Search)\n\n```json\n{\n  \"tool\": \"searchFiles\",\n  \"arguments\": {\n    \"query\": \"machine learning algorithms\",\n    \"searchIn\": \"content\",\n    \"perPage\": 10\n  }\n}\n```\n\n### Comprehensive Search (Filename, Path, and Content)\n\n```json\n{\n  \"tool\": \"searchFiles\",\n  \"arguments\": {\n    \"query\": \"project planning\",\n    \"searchIn\": \"all\"\n  }\n}\n```\n\n### Advanced GitHub Search Syntax\n\n```json\n{\n  \"tool\": \"searchFiles\",\n  \"arguments\": {\n    \"query\": \"path:*.md extension:md\",\n    \"searchIn\": \"content\"\n  }\n}\n```\n\n### Tracking Knowledge Evolution\n\n```json\n{\n  \"tool\": \"getCommitHistory\",\n  \"arguments\": {\n    \"days\": 30,\n    \"includeDiffs\": true,\n    \"maxCommits\": 10\n  }\n}\n```\n\n## Search Tips & Troubleshooting\n\n### Can't Find Your File by Name?\n\n**Problem**: Searching for \"OKR 2025\" doesn't find your file named \"OKR 2025.md\"\n\n**Solution**: Use the `searchIn: \"filename\"` parameter:\n\n```json\n{\n  \"tool\": \"searchFiles\",\n  \"arguments\": {\n    \"query\": \"OKR 2025\",\n    \"searchIn\": \"filename\"\n  }\n}\n```\n\n### Advanced Search Techniques\n\n1. **Exact Phrases**: Use quotes for multi-word searches\n   ```json\n   {\n     \"query\": \"\\\"project planning 2025\\\"\",\n     \"searchIn\": \"content\"\n   }\n   ```\n\n2. **File Extensions**: Find specific file types\n   ```json\n   {\n     \"query\": \"path:*.md\",\n     \"searchIn\": \"content\"\n   }\n   ```\n\n3. **Directory Specific**: Search within folders\n   ```json\n   {\n     \"query\": \"path:\\\"Daily Notes/\\\"\",\n     \"searchIn\": \"content\"\n   }\n   ```\n\n## Project Structure\n\n```\nobsidian-github-mcp/\n├── src/\n│   ├── index.ts          # Main MCP server entry point\n│   └── github/           # GitHub API integration\n│       ├── client.ts     # GitHub client implementation\n│       └── types.ts      # TypeScript type definitions\n├── docs/                 # Documentation\n├── package.json          # Project configuration\n└── tsconfig.json         # TypeScript configuration\n```\n\n## For Developers\n\nIf you're interested in contributing to this project or developing your own tools with this server, please see the [Development Guide](docs/development.md).\n\n### Development Commands\n\n- `pnpm install` - Install dependencies\n- `pnpm run build` - Build the project\n- `pnpm run dev` - Run in development mode with inspector\n- `pnpm run inspector` - Launch MCP inspector for testing\n\n## Migration from mcp-private-github-search\n\nIf you're migrating from the older `mcp-private-github-search` package:\n\n1. Update your package name in configuration:\n   ```json\n   {\n     \"mcpServers\": {\n       \"obsidianGithub\": {\n         \"command\": \"npx\",\n         \"args\": [\"-y\", \"obsidian-github-mcp\"]\n       }\n     }\n   }\n   ```\n\n2. The functionality remains the same - all existing tools work identically\n3. Consider the new Obsidian-focused use cases and workflows\n\n## Learn More\n\nFor further information on the MCP ecosystem, refer to:\n\n- [Model Context Protocol Documentation](https://modelcontextprotocol.io): Detailed coverage of MCP architecture and design principles\n- [Smithery - MCP Server Registry](https://smithery.ai/docs): Guidelines for publishing MCP servers\n- [MCP TypeScript SDK Documentation](https://modelcontextprotocol.io/typescript): Comprehensive TypeScript SDK documentation\n- [Obsidian](https://obsidian.md): The knowledge management app that inspired this tool\n\n## About Hint Services\n\n> \"The future is already here, it's just unevenly distributed\"\n>\n> — William Gibson, Author\n\nHint Services is a boutique consultancy with a mission to develop and expand how user interfaces leverage artificial intelligence technology. We architect ambition at the intersection of AI and User Experience, founded and led by Ben Hofferber.\n\nWe offer specialized AI workshops for design teams looking to embrace AI tools without becoming developers. [Learn more about our training and workshops](https://hint.services/training-workshops).",
      "npm_url": "https://www.npmjs.com/package/obsidian-github-mcp",
      "npm_downloads": 167,
      "keywords": [
        "github",
        "git",
        "repositories",
        "github mcp",
        "git workflow",
        "github repositories"
      ],
      "category": "git-workflow-management"
    },
    "JJ-H--mcp-gitee": {
      "owner": "JJ-H",
      "name": "mcp-gitee",
      "url": "https://github.com/JJ-H/mcp-gitee",
      "imageUrl": "/freedevtools/mcp/pfp/JJ-H.webp",
      "description": "Enable management of Gitee repositories, issues, pull requests, and notifications through seamless API integration. Automate repository operations and streamline collaboration workflows with configurable options.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-04-25T08:01:57Z",
      "readme_content": "# Gitee MCP Server\n\nGitee MCP Server is a Model Context Protocol (MCP) server implementation for Gitee. It provides a set of tools for interacting with Gitee's API, allowing AI assistants to manage repositories, issues, pull requests, and more.\n\n## Features\n\n- Interact with Gitee repositories, issues, pull requests, and notifications\n- Configurable API base URL to support different Gitee instances\n- Command-line flags for easy configuration\n- Supports both personal, organization, and enterprise operations\n\n<details>\n<summary><b>Practical scenario: Obtain Issue from the repository, implement and create a Pull Request</b></summary>\n\n1. Get repository Issues\n![get_repo_issues](./docs/images/get_repo_issues.jpg)\n2. Implement coding & create Pull Request based on Issue details\n![implement_issue](./docs/images/implement_issue.jpg)\n3. Comment & Close Issue\n![comment_and_close_issue](./docs/images/comment_and_close_issue.jpg)\n</details>\n\n## Installation(This step can be skipped directly when starting npx)\n\n### Prerequisites\n\n- Go 1.23.0 or higher\n- Gitee account with an access token, [Go to get](https://gitee.com/profile/personal_access_tokens)\n\n### Building from Source\n\n1. Clone the repository:\n   ```bash\n   git clone https://gitee.com/oschina/mcp-gitee.git\n   cd mcp-gitee\n   ```\n\n2. Build the project:\n   ```bash\n   make build\n   ```\n   Move ./bin/mcp-gitee PATH env\n\n### Use go install\n   ```bash\n   go install gitee.com/oschina/mcp-gitee@latest\n   ```\n\n## Usage\n\nCheck mcp-gitee version:\n\n```bash\nmcp-gitee --version\n```\n\n## MCP Hosts Configuration\n<div align=\"center\">\n  <a href=\"docs/install/claude.md\" title=\"Claude\"><img src=\"docs/install/logos/Claude.png\" width=80 height=80></a>\n  <a href=\"docs/install/cursor.md\" title=\"Cursor\"><img src=\"docs/install/logos/Cursor.png\" width=80 height=80></a>\n  <a href=\"docs/install/trae.md\" title=\"Trae\"><img src=\"docs/install/logos/Trae.png\" width=80 height=80></a>\n  <a href=\"docs/install/cline.md\" title=\"Cline\"><img src=\"docs/install/logos/Cline.png\" width=80 height=80></a>\n  <a href=\"docs/install/windsurf.md\" title=\"Windsurf\"><img src=\"docs/install/logos/Windsurf.png\" width=80 height=80></a>\n</div>\n\nconfig example: [Click to view more application configuration](./docs/install/)\n- npx\n```json\n{\n  \"mcpServers\": {\n    \"gitee\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@gitee/mcp-gitee@latest\"\n      ],\n      \"env\": {\n        \"GITEE_API_BASE\": \"https://gitee.com/api/v5\",\n        \"GITEE_ACCESS_TOKEN\": \"<your personal access token>\"\n      }\n    }\n  }\n}\n```\n- executable\n```json\n{\n  \"mcpServers\": {\n    \"gitee\": {\n      \"command\": \"mcp-gitee\",\n      \"env\": {\n        \"GITEE_API_BASE\": \"https://gitee.com/api/v5\",\n        \"GITEE_ACCESS_TOKEN\": \"<your personal access token>\"\n      }\n    }\n  }\n}\n```\n\n### Command-line Options\n\n- `-token`: Gitee access token\n- `-api-base`: Gitee API base URL (default: https://gitee.com/api/v5)\n- `-version`: Show version information\n- `-transport`: Transport type (stdio or sse, default: stdio)\n- `-sse-address`: The host and port to start the SSE server on (default: localhost:8000)\n\n### Environment Variables\n\nYou can also configure the server using environment variables:\n\n- `GITEE_ACCESS_TOKEN`: Gitee access token\n- `GITEE_API_BASE`: Gitee API base URL\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for more details.\n\n## Available Tools\n\nThe server provides various tools for interacting with Gitee:\n\n| Tool                                | Category | Description |\n|-------------------------------------|----------|-------------|\n| **list_user_repos**                 | Repository | List user authorized repositories |\n| **get_file_content**                | Repository | Get the content of a file in a repository |\n| **create_user_repo**                | Repository | Create a user repository |\n| **create_org_repo**                 | Repository | Create an organization repository |\n| **create_enter_repo**               | Repository | Create an enterprise repository |\n| **fork_repository**                 | Repository | Fork a repository |\n| **create_release**                  | Repository | Create a release for a repository |\n| **list_releases**                   | Repository | List repository releases |\n| **search_open_source_repositories** | Repository | Search open source repositories on Gitee |\n| **list_repo_pulls**                 | Pull Request | List pull requests in a repository |\n| **merge_pull**                      | Pull Request | Merge a pull request |\n| **create_pull**                     | Pull Request | Create a pull request |\n| **update_pull**                     | Pull Request | Update a pull request |\n| **get_pull_detail**                 | Pull Request | Get details of a pull request |\n| **comment_pull**                    | Pull Request | Comment on a pull request |\n| **list_pull_comments**              | Pull Request | List all comments for a pull request |\n| **create_issue**                    | Issue | Create an issue |\n| **update_issue**                    | Issue | Update an issue |\n| **get_repo_issue_detail**           | Issue | Get details of a repository issue |\n| **list_repo_issues**                | Issue | List repository issues |\n| **comment_issue**                   | Issue | Comment on an issue |\n| **list_issue_comments**             | Issue | List comments on an issue |\n| **get_user_info**                   | User | Get current authenticated user information |\n| **search_users**                    | User | Search for users |\n| **list_user_notifications**         | Notification | List user notifications |\n\n## Contribution\n\nWe welcome contributions from the open-source community! If you'd like to contribute to this project, please follow these guidelines:\n\n1. Fork the repository.\n2. Create a new branch for your feature or bug fix.\n3. Make your changes and ensure the code is well-documented.\n4. Submit a pull request with a clear description of your changes.\n\nFor more information, please refer to the [CONTRIBUTING](CONTRIBUTING.md) file.\n",
      "npm_url": "https://www.npmjs.com/package/@jj-h/mcp-gitee",
      "npm_downloads": 30,
      "keywords": [
        "git",
        "workflows",
        "repositories",
        "git workflow",
        "gitee repositories",
        "workflow management"
      ],
      "category": "git-workflow-management"
    },
    "Jehan26--MCP-Inspector-v0.6.0": {
      "owner": "Jehan26",
      "name": "MCP-Inspector-v0.6.0",
      "url": "https://github.com/Jehan26/MCP-Inspector-v0.6.0",
      "imageUrl": "/freedevtools/mcp/pfp/Jehan26.webp",
      "description": "Interact with GitHub repositories, manage issues, and handle pull requests through a structured API. Gain insights and statistics to enhance development workflows.",
      "stars": 0,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-16T10:14:10Z",
      "readme_content": "# MCP-Inspector-v0.6.0\n# GitHub MCP Server\n\nA Model Context Protocol (MCP) server that enables AI assistants like Claude to interact with GitHub repositories, issues, and pull requests.\n\n## Features\n\n- **Repository Search**: Find GitHub repositories based on search queries\n- **Issue Management**: Get, create, and comment on issues\n- **Pull Request Handling**: View and manage pull requests\n- **Repository Analysis**: Get statistics and insights about repositories\n\n## Installation\n\n### Prerequisites\n\n- Python 3.8+\n- GitHub API token\n\n### Steps\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/yourusername/github-mcp-server.git\n   cd github-mcp-server\n   ```\n\n2. Install dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n3. Set up your GitHub token as an environment variable:\n   ```bash\n   export GITHUB_TOKEN=your_github_token_here\n   ```\n\n4. Run the server:\n   ```bash\n   python server.py\n   ```\n\nThe server will start running on `http://localhost:5000`.\n\n## Usage\n\n### Endpoints\n\nThe MCP server provides the following endpoints:\n\n- **GET /mcp/discover**: Returns available operations and their parameters\n- **POST /mcp/execute**: Executes operations based on provided parameters\n\n### Example Requests\n\n#### Discovery\n\n```bash\ncurl -X GET http://localhost:5000/mcp/discover\n```\n\n#### Execute Repository Search\n\n```bash\ncurl -X POST http://localhost:5000/mcp/execute \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"endpoint\": \"search_repositories\",\n    \"parameters\": {\n      \"query\": \"machine learning\"\n    }\n  }'\n```\n\n#### Get Repository Issues\n\n```bash\ncurl -X POST http://localhost:5000/mcp/execute \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"endpoint\": \"get_repo_issues\",\n    \"parameters\": {\n      \"owner\": \"openai\",\n      \"repo\": \"whisper\"\n    }\n  }'\n```\n\n## Architecture\n\nThe server follows the Model Context Protocol specification to allow AI assistants to:\n\n1. Discover available operations\n2. Execute operations with appropriate parameters\n3. Process and return results in a structured format\n\n## Extending the Server\n\nYou can extend this server by:\n\n1. Adding new endpoints in the `discover()` function\n2. Implementing corresponding handler functions\n3. Updating the routing in the `execute()` function\n\n## Security Considerations\n\n- The server uses an API token for authentication with GitHub\n- Implement rate limiting to prevent abuse\n- Add input validation for all parameters\n- Consider implementing OAuth for more secure token management\n\n## Demo\n\nSee the [demo video](https://example.com/demo-video) for a walkthrough of the server's capabilities.\n\n## License\n\nMIT License\n\n## Contact\n\nFor questions or support, please open an issue on this repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflows",
        "git workflow",
        "interact github",
        "development workflows"
      ],
      "category": "git-workflow-management"
    },
    "Job28703--my-github-project": {
      "owner": "Job28703",
      "name": "my-github-project",
      "url": "https://github.com/Job28703/my-github-project",
      "imageUrl": "/freedevtools/mcp/pfp/Job28703.webp",
      "description": "Enhance applications by connecting to various data sources and tools to integrate and manipulate data workflows. Enable agents to interact with real-world data in a secure and efficient manner.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-03-20T12:33:12Z",
      "readme_content": "# my-github-project\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflows",
        "git workflow",
        "job28703 github",
        "github project"
      ],
      "category": "git-workflow-management"
    },
    "KalyankumarKonduru--MCP_test": {
      "owner": "KalyankumarKonduru",
      "name": "MCP_test",
      "url": "https://github.com/KalyankumarKonduru/MCP_test",
      "imageUrl": "/freedevtools/mcp/pfp/KalyankumarKonduru.webp",
      "description": "Integrate with GitHub and Notion to streamline pull request reviews, automate task management, and enhance collaboration between platforms.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-05T02:06:24Z",
      "readme_content": "# PR Reviewer Setup Guide\r\n\r\nThis guide provides step-by-step instructions to set up the PR Reviewer project, which includes integrations with GitHub and Notion.\r\n\r\n## Prerequisites\r\n- `curl` (for MacOS/Linux)\r\n- Python 3.x installed on your system\r\n\r\n## Setup Instructions\r\n\r\n### Step 1: Install `uv`\r\n\r\n**MacOS/Linux:**\r\n```bash\r\ncurl -LsSf https://astral.sh/uv/install.sh | sh\r\n```\r\n\r\n> 🔁 Restart your terminal afterwards to ensure that the `uv` command is available.\r\n\r\n---\r\n\r\n### Step 2: Create and Set Up the Project\r\n\r\n**MacOS/Linux:**\r\n```bash\r\n# Create a new directory for the project\r\nuv init pr_reviewer\r\ncd pr_reviewer\r\n\r\n# Create and activate a virtual environment\r\nuv venv\r\nsource .venv/bin/activate\r\n\r\n# Install core dependencies\r\nuv add \"mcp[cli]\" requests python-dotenv notion-client\r\n```\r\n\r\n---\r\n\r\n### Step 3: Create `requirements.txt` and Install from It\r\n\r\nCreate a file called `requirements.txt` with the following content:\r\n\r\n```txt\r\n# Core dependencies for PR Analyzer\r\nrequests>=2.31.0          # For GitHub API calls\r\npython-dotenv>=1.0.0      # For environment variables\r\nmcp[cli]>=1.4.0           # For MCP server functionality\r\nnotion-client>=2.3.0      # For Notion integration\r\n```\r\n\r\nInstall the packages:\r\n```bash\r\nuv pip install -r requirements.txt\r\npip install -r requirements.txt\r\n```\r\n\r\n---\r\n\r\n### Step 4: Set Up Environment Variables\r\n\r\nCreate a `.env` file in the root directory and add the following:\r\n\r\n```env\r\nGITHUB_TOKEN=your_github_token\r\nNOTION_API_KEY=your_notion_api_key\r\nNOTION_PAGE_ID=your_notion_page_id\r\n```\r\n\r\n#### GitHub Token:\r\n\r\n1. Go to GitHub → Settings → Developer Settings → Personal Access Tokens.\r\n2. Click **\"Generate new token (classic)\"**.\r\n3. Enable these scopes:\r\n   - `read:org`\r\n   - `read:repo_hook`\r\n   - `repo`\r\n4. Copy and paste the token into your `.env` file as `GITHUB_TOKEN`.\r\n\r\n#### Notion Integration:\r\n\r\n1. Go to [Notion Integrations](https://www.notion.so/my-integrations).\r\n2. Click **\"New integration\"** and set the type to **Internal**.\r\n3. Add it to your workspace.\r\n4. Copy the **Internal Integration Secret** as `NOTION_API_KEY`.\r\n5. Copy the **UUID at the end of the integration URL** as `NOTION_PAGE_ID`.\r\n\r\n---\r\n\r\n### Step 5: Create the Main Script\r\n\r\nCreate an empty script file for your server logic:\r\n\r\n```bash\r\ntouch pr_reviewer\r\n```\r\n\r\nAdd your application logic inside this file.\r\n\r\n---\r\n\r\n### Step 6: Run the Application\r\n\r\nTo run the project, make sure your environment is activated and `.env` is configured:\r\n\r\n```bash\r\npython pr_reviewer.py\r\n```\r\n\r\n---\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "github",
        "workflow",
        "git workflow",
        "github notion",
        "workflow management"
      ],
      "category": "git-workflow-management"
    },
    "MatanYemini--bitbucket-mcp": {
      "owner": "MatanYemini",
      "name": "bitbucket-mcp",
      "url": "https://github.com/MatanYemini/bitbucket-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/MatanYemini.webp",
      "description": "Integrate with Bitbucket repositories, manage pull requests, and retrieve repository content through a standardized protocol interface. Ensures code security by analyzing pull requests with CodeQL, while operating safely without any delete operations.",
      "stars": 41,
      "forks": 24,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-02T17:41:18Z",
      "readme_content": "# Bitbucket MCP\n\nA Model Context Protocol (MCP) server for integrating with Bitbucket Cloud and Server APIs. This MCP server enables AI assistants like Cursor to interact with your Bitbucket repositories, pull requests, and other resources.\n\n## Safety First\nThis is a safe and responsible package — no DELETE operations are used, so there's no risk of data loss.\nEvery pull request is analyzed with CodeQL to ensure the code remains secure.\n\n[![CodeQL](https://github.com/MatanYemini/bitbucket-mcp/actions/workflows/github-code-scanning/codeql/badge.svg)](https://github.com/MatanYemini/bitbucket-mcp/actions/workflows/github-code-scanning/codeql)\n[![GitHub Repository](https://img.shields.io/badge/GitHub-Repository-blue.svg)](https://github.com/MatanYemini/bitbucket-mcp)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![npm version](https://badge.fury.io/js/bitbucket-mcp.svg)](https://www.npmjs.com/package/bitbucket-mcp)\n\n## Overview\nCheckout out the [official npm package](https://www.npmjs.com/package/bitbucket-mcp)\nThis server implements the Model Context Protocol standard to provide AI assistants with access to Bitbucket data and operations. It includes tools for:\n\n- Listing and retrieving repositories\n- Getting repository details\n- Fetching pull requests\n- And more...\n\n## Installation\n\n### Using NPX (Recommended)\n\nThe easiest way to use this MCP server is via NPX, which allows you to run it without installing it globally:\n\n```bash\n# Run with environment variables\nBITBUCKET_URL=\"https://bitbucket.org/your-workspace\" \\\nBITBUCKET_USERNAME=\"your-username\" \\\nBITBUCKET_PASSWORD=\"your-app-password\" \\\nnpx -y bitbucket-mcp@latest\n```\n\n### Manual Installation\n\nAlternatively, you can install it globally or as part of your project:\n\n```bash\n# Install globally\nnpm install -g bitbucket-mcp\n\n# Or install in your project\nnpm install bitbucket-mcp\n```\n\nThen run it with:\n\n```bash\n# If installed globally\nBITBUCKET_URL=\"https://bitbucket.org/your-workspace\" \\\nBITBUCKET_USERNAME=\"your-username\" \\\nBITBUCKET_PASSWORD=\"your-app-password\" \\\nbitbucket-mcp\n\n# If installed in your project\nBITBUCKET_URL=\"https://bitbucket.org/your-workspace\" \\\nBITBUCKET_USERNAME=\"your-username\" \\\nBITBUCKET_PASSWORD=\"your-app-password\" \\\nnpx bitbucket-mcp\n```\n\n## Configuration\n\n### Environment Variables\n\nConfigure the server using the following environment variables:\n\n| Variable              | Description                                                       | Required |\n| --------------------- | ----------------------------------------------------------------- | -------- |\n| `BITBUCKET_URL`       | Bitbucket base URL (e.g., \"https://bitbucket.org/your-workspace\") | Yes      |\n| `BITBUCKET_USERNAME`  | Your Bitbucket username                                           | Yes\\*    |\n| `BITBUCKET_PASSWORD`  | Your Bitbucket app password                                       | Yes\\*    |\n| `BITBUCKET_TOKEN`     | Your Bitbucket access token (alternative to username/password)    | No       |\n| `BITBUCKET_WORKSPACE` | Default workspace to use when not specified                       | No       |\n\n\\* Either `BITBUCKET_TOKEN` or both `BITBUCKET_USERNAME` and `BITBUCKET_PASSWORD` must be provided.\n\n### Creating a Bitbucket App Password\n\n1. Log in to your Bitbucket account\n2. Go to Personal Settings > App Passwords\n3. Create a new app password with the following permissions:\n   - Repositories: Read\n   - Pull requests: Read, Write\n   - Pipelines: Read (required for pipeline operations)\n4. Copy the generated password and use it as the `BITBUCKET_PASSWORD` environment variable\n\n## Troubleshooting\n\n### 401 Authentication Errors\n\nIf you're getting 401 authentication errors, check the following:\n\n1. **Verify your app password**: Make sure you're using an App Password, not your regular Bitbucket password\n2. **Verify app password permissions**: Your app password needs at least \"Repositories: Read\" permission\n3. **Try the API URL format**: If you're still getting 401 errors, try using the direct API URL format:\n   ```bash\n   BITBUCKET_URL=\"https://api.bitbucket.org/2.0\"\n   ```\n4. **Test API access**: Verify your credentials work by testing the Bitbucket API directly:\n   ```bash\n   # Test with curl (replace with your actual values)\n   curl -u \"your-username:your-app-password\" \\\n     \"https://api.bitbucket.org/2.0/repositories/your-workspace\"\n   ```5. **Atlassian API Key**: Put the Atlassian API Key in the BITBUCKET_PASSWORD variable, not BITBUCKET_TOKEN\n\n### Getting Help\n\nIf you encounter issues:\n\n1. Check the [Bitbucket REST API documentation](https://developer.atlassian.com/cloud/bitbucket/rest/intro/) for API details\n2. Review the [Bitbucket Cloud documentation](https://support.atlassian.com/bitbucket-cloud/) for general help\n\n## Integration with Cursor\n\nTo integrate this MCP server with Cursor:\n\n1. Open Cursor\n2. Go to Settings > Extensions\n3. Click on \"Model Context Protocol\"\n4. Add a new MCP configuration:\n\n```json\n\"bitbucket\": {\n  \"command\": \"npx\",\n  \"env\": {\n    \"BITBUCKET_URL\": \"https://bitbucket.org/your-workspace\",\n    \"BITBUCKET_USERNAME\": \"your-username\",\n    \"BITBUCKET_PASSWORD\": \"your-app-password\"\n  },\n  \"args\": [\"-y\", \"bitbucket-mcp@latest\"]\n}\n```\n\n5. Save the configuration\n6. Use the \"/bitbucket\" command in Cursor to access Bitbucket repositories and pull requests\n\n### Using a Local Build with Cursor\n\nIf you're developing locally and want to test your changes:\n\n```json\n\"bitbucket-local\": {\n  \"command\": \"node\",\n  \"env\": {\n    \"BITBUCKET_URL\": \"https://bitbucket.org/your-workspace\",\n    \"BITBUCKET_USERNAME\": \"your-username\",\n    \"BITBUCKET_PASSWORD\": \"your-app-password\"\n  },\n  \"args\": [\"/path/to/your/local/bitbucket-mcp/dist/index.js\"]\n}\n```\n\n## Available Tools\n\nThis MCP server provides tools for interacting with Bitbucket repositories and pull requests. Below is a comprehensive list of the available operations:\n\n### Repository Operations\n\n#### `listRepositories`\n\nLists repositories in a workspace.\n\n**Parameters:**\n\n- `workspace` (optional): Bitbucket workspace name\n- `limit` (optional): Maximum number of repositories to return\n\n#### `getRepository`\n\nGets details for a specific repository.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n\n### Pull Request Operations\n\n#### `getPullRequests`\n\nGets pull requests for a repository.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `state` (optional): Pull request state (`OPEN`, `MERGED`, `DECLINED`, `SUPERSEDED`)\n- `limit` (optional): Maximum number of pull requests to return\n\n#### `createPullRequest`\n\nCreates a new pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `title`: Pull request title\n- `description`: Pull request description\n- `sourceBranch`: Source branch name\n- `targetBranch`: Target branch name\n- `reviewers` (optional): List of reviewer usernames\n- `draft` (optional): Whether to create the pull request as a draft\n\n#### `getPullRequest`\n\nGets details for a specific pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n\n#### `updatePullRequest`\n\nUpdates a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n- Various optional update parameters (title, description, etc.)\n\n#### `getPullRequestActivity`\n\nGets the activity log for a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n\n#### `approvePullRequest`\n\nApproves a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n\n#### `unapprovePullRequest`\n\nRemoves an approval from a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n\n#### `declinePullRequest`\n\nDeclines a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n- `message` (optional): Reason for declining\n\n#### `mergePullRequest`\n\nMerges a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n- `message` (optional): Merge commit message\n- `strategy` (optional): Merge strategy (`merge-commit`, `squash`, `fast-forward`)\n\n#### `requestChanges`\n\nRequests changes on a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n\n#### `removeChangeRequest`\n\nRemoves a change request from a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n\n#### `createDraftPullRequest`\n\nCreates a new draft pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `title`: Pull request title\n- `description`: Pull request description\n- `sourceBranch`: Source branch name\n- `targetBranch`: Target branch name\n- `reviewers` (optional): List of reviewer usernames\n\n**Note:** This is equivalent to calling `createPullRequest` with `draft: true`.\n\n#### `publishDraftPullRequest`\n\nPublishes a draft pull request to make it ready for review.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n\n#### `convertTodraft`\n\nConverts a regular pull request to draft status.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n\n### Pull Request Comment Operations\n\n#### `getPullRequestComments`\n\nLists comments on a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n\n#### `addPullRequestComment`\n\nCreates a comment on a pull request (general or inline).\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n- `content`: Comment content in markdown format\n- `inline` (optional): Inline comment information for commenting on specific lines\n\n**Inline Comment Format:**\n\nThe `inline` parameter allows you to create comments on specific lines of code in the pull request diff:\n\n```json\n{\n  \"path\": \"src/file.ts\",\n  \"to\": 15,     // Line number in NEW version (for added/modified lines)\n  \"from\": 10    // Line number in OLD version (for deleted/modified lines) \n}\n```\n\n**Examples:**\n\n- **General comment**: Omit the `inline` parameter for a general pull request comment\n- **Comment on new line**: Use only `to` parameter\n- **Comment on deleted line**: Use only `from` parameter  \n- **Comment on modified line**: Use both `from` and `to` parameters\n\n**Usage:**\n```javascript\n// General comment\naddPullRequestComment(workspace, repo, pr_id, \"Great work!\")\n\n// Inline comment on new line 25\naddPullRequestComment(workspace, repo, pr_id, \"Consider error handling here\", {\n  path: \"src/service.ts\",\n  to: 25\n})\n```\n\n#### `getPullRequestComment`\n\nGets a specific comment on a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n- `comment_id`: Comment ID\n\n#### `updatePullRequestComment`\n\nUpdates a comment on a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n- `comment_id`: Comment ID\n- `content`: Updated comment content\n\n#### `deletePullRequestComment`\n\nDeletes a comment on a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n- `comment_id`: Comment ID\n\n#### `resolveComment`\n\nResolves a comment thread on a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n- `comment_id`: Comment ID\n\n#### `reopenComment`\n\nReopens a resolved comment thread on a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n- `comment_id`: Comment ID\n\n### Pull Request Diff Operations\n\n#### `getPullRequestDiff`\n\nGets the diff for a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n\n#### `getPullRequestDiffStat`\n\nGets the diff statistics for a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n\n#### `getPullRequestPatch`\n\nGets the patch for a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n\n### Pull Request Task Operations\n\n#### `getPullRequestTasks`\n\nLists tasks on a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n\n#### `createPullRequestTask`\n\nCreates a task on a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n- `content`: Task content\n- `comment` (optional): Comment ID to associate with the task\n- `pending` (optional): Whether the task is pending\n\n#### `getPullRequestTask`\n\nGets a specific task on a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n- `task_id`: Task ID\n\n#### `updatePullRequestTask`\n\nUpdates a task on a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n- `task_id`: Task ID\n- `content` (optional): Updated task content\n- `state` (optional): Updated task state\n\n#### `deletePullRequestTask`\n\nDeletes a task on a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n- `task_id`: Task ID\n\n### Other Pull Request Operations\n\n#### `getPullRequestCommits`\n\nLists commits on a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n\n#### `getPullRequestStatuses`\n\nLists commit statuses for a pull request.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pull_request_id`: Pull request ID\n\n### Pipeline Operations\n\n#### `listPipelineRuns`\n\nLists pipeline runs for a repository.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `limit` (optional): Maximum number of pipelines to return\n- `status` (optional): Filter pipelines by status (`PENDING`, `IN_PROGRESS`, `SUCCESSFUL`, `FAILED`, `ERROR`, `STOPPED`)\n- `target_branch` (optional): Filter pipelines by target branch\n- `trigger_type` (optional): Filter pipelines by trigger type (`manual`, `push`, `pullrequest`, `schedule`)\n\n#### `getPipelineRun`\n\nGets details for a specific pipeline run.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pipeline_uuid`: Pipeline UUID\n\n#### `runPipeline`\n\nTriggers a new pipeline run.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `target`: Pipeline target configuration (object with `ref_type`, `ref_name`, and optional `commit_hash`, `selector_type`, `selector_pattern`)\n- `variables` (optional): Array of pipeline variables (objects with `key`, `value`, and optional `secured` fields)\n\n#### `stopPipeline`\n\nStops a running pipeline.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pipeline_uuid`: Pipeline UUID\n\n#### `getPipelineSteps`\n\nLists steps for a pipeline run.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pipeline_uuid`: Pipeline UUID\n\n#### `getPipelineStep`\n\nGets details for a specific pipeline step.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pipeline_uuid`: Pipeline UUID\n- `step_uuid`: Step UUID\n\n#### `getPipelineStepLogs`\n\nGets logs for a specific pipeline step.\n\n**Parameters:**\n\n- `workspace`: Bitbucket workspace name\n- `repo_slug`: Repository slug\n- `pipeline_uuid`: Pipeline UUID\n- `step_uuid`: Step UUID\n\n## Development\n\n### Prerequisites\n\n- Node.js 18 or higher\n- npm or yarn\n\n### Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/MatanYemini/bitbucket-mcp.git\ncd bitbucket-mcp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Run in development mode\nnpm run dev\n```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Links\n\n- [GitHub Repository](https://github.com/MatanYemini/bitbucket-mcp)\n- [npm Package](https://www.npmjs.com/package/bitbucket-mcp)\n- [Model Context Protocol](https://modelcontextprotocol.io/)\n- [Bitbucket REST API Documentation](https://developer.atlassian.com/cloud/bitbucket/rest/intro/)\n- [Bitbucket Cloud Documentation](https://support.atlassian.com/bitbucket-cloud/)",
      "npm_url": "https://www.npmjs.com/package/bitbucket-mcp",
      "npm_downloads": 4563,
      "keywords": [
        "bitbucket",
        "git",
        "repositories",
        "git workflow",
        "bitbucket repositories",
        "integrate bitbucket"
      ],
      "category": "git-workflow-management"
    },
    "Maxteabag--GithubWorkflowMCP": {
      "owner": "Maxteabag",
      "name": "GithubWorkflowMCP",
      "url": "https://github.com/Maxteabag/GithubWorkflowMCP",
      "imageUrl": "/freedevtools/mcp/pfp/Maxteabag.webp",
      "description": "Diagnose and fix GitHub Actions workflow failures by fetching workflow run information and analyzing jobs and steps. Identifies common failure patterns and suggests specific fixes for issues, along with options to view and update workflow files.",
      "stars": 1,
      "forks": 3,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-28T04:32:55Z",
      "readme_content": "# GitHub Workflow Debugger MCP\n[![smithery badge](https://smithery.ai/badge/@Maxteabag/githubworkflowmcp)](https://smithery.ai/server/@Maxteabag/githubworkflowmcp)\n\nA Multi-Choice Prompt (MCP) utility for diagnosing and fixing GitHub Actions workflow failures using the GitHub API.\n\n## Overview\n\nThis tool helps users diagnose and fix GitHub Actions workflow failures through a structured decision tree. It uses the GitHub API to fetch workflow run information, analyze failures, and provide actionable solutions.\n\n## Features\n\n- Fetch recent failed workflow runs for a repository\n- Analyze workflow run jobs and steps\n- Identify common failure patterns\n- Suggest specific fixes for common issues\n- View and update workflow files\n\n## Installation\n\n### Installing via Smithery\n\nTo install githubworkflowmcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@Maxteabag/githubworkflowmcp):\n\n```bash\nnpx -y @smithery/cli install @Maxteabag/githubworkflowmcp --client claude\n```\n\n### Manual Installation\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/github-workflow-debugger-mcp.git\ncd github-workflow-debugger-mcp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Link the binary for local use\nnpm link\n```\n\n## Usage\n\nThe GitHub Workflow Debugger MCP is designed to be used with AI assistants that support the Model Context Protocol (MCP). It provides several tools that can be used to diagnose and fix GitHub Actions workflow failures.\n\n### Required Permissions\n\nTo use this tool, you'll need a GitHub Personal Access Token (PAT) with the following permissions:\n- `repo` - Full control of private repositories\n- `workflow` - Update GitHub Action workflows\n\nYou must set this token as an environment variable named `GITHUB_PERSONAL_ACCESS_TOKEN`.\n\n### Configuration\n\nWhen using this tool with an MCP-compatible client, you can configure it as follows:\n\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\nReplace `<YOUR_TOKEN>` with your GitHub Personal Access Token.\n\n### Available Tools\n\n1. **get-failed-workflow-runs** - Fetches recent failed workflow runs for a repository\n2. **get-workflow-run-jobs** - Gets jobs for a specific workflow run\n3. **get-workflow-file** - Retrieves the content of a workflow file\n4. **update-workflow-file** - Updates a workflow file with fixes\n5. **analyze-workflow-failure** - Analyzes a failed workflow run and suggests fixes\n\n### Example Usage\n\nHere's an example of how to use the GitHub Workflow Debugger MCP with an AI assistant:\n\n1. First, get recent failed workflow runs:\n   ```\n   I need to check recent failed workflow runs for my repository \"username/repo\".\n   ```\n\n2. Analyze a specific failed run:\n   ```\n   Can you analyze workflow run #123456 and suggest fixes?\n   ```\n\n3. View the workflow file:\n   ```\n   Show me the content of the workflow file at .github/workflows/main.yml\n   ```\n\n4. Update the workflow file with fixes:\n   ```\n   Update the workflow file with the suggested fixes.\n   ```\n\n## Development\n\n### Prerequisites\n\n- Node.js 16 or higher\n- npm or yarn\n\n### Setup\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n### Project Structure\n\n- `src/index.ts` - Main entry point for the MCP server\n- `build/` - Compiled JavaScript files\n\n## License\n\nISC ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "githubworkflowmcp",
        "github",
        "git",
        "githubworkflowmcp diagnose",
        "maxteabag githubworkflowmcp",
        "git workflow"
      ],
      "category": "git-workflow-management"
    },
    "Maxteabag--github-actions-mcp": {
      "owner": "Maxteabag",
      "name": "github-actions-mcp",
      "url": "https://github.com/Maxteabag/github-actions-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Maxteabag.webp",
      "description": "Interact with GitHub Actions workflows to monitor and query workflow runs. Provides filtering options to access the status of CI/CD processes efficiently.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "",
      "updated_at": "2025-04-22T15:56:49Z",
      "readme_content": "# GitHub Actions MCP Server\n\nAn MCP server for interacting with GitHub Actions workflows. This server provides tools to query and monitor GitHub Actions workflow runs.\n\n## Features\n\n- List workflow runs with filtering options\n- Get the latest workflow run\n- Get failed workflow runs\n- Filter by status, branch, and event type\n\n## Installation\n\n```bash\nnpm install\n```\n\n## Usage\n\n1. Build the project:\n```bash\nnpm run build\n```\n\n2. Start the server:\n```bash\nnpm start\n```\n\n## Available Tools\n\n### list-workflow-runs\nLists GitHub Actions workflow runs for a repository with filtering options.\n\n### get-latest-workflow-run\nGets the most recent workflow run, with optional filtering by workflow ID.\n\n### get-failed-workflow-runs\nGets a list of failed workflow runs, with configurable limit.\n\n## Configuration\n\nYou'll need a GitHub personal access token with appropriate permissions to access private repositories.\n\n## License\n\nMIT",
      "npm_url": "https://www.npmjs.com/package/github-actions-mcp",
      "npm_downloads": 220,
      "keywords": [
        "github",
        "git",
        "workflows",
        "git workflow",
        "github actions",
        "actions workflows"
      ],
      "category": "git-workflow-management"
    },
    "MissionSquad--mcp-github": {
      "owner": "MissionSquad",
      "name": "mcp-github",
      "url": "https://github.com/MissionSquad/mcp-github",
      "imageUrl": "/freedevtools/mcp/pfp/MissionSquad.webp",
      "description": "Manage GitHub repositories, including file operations, issue tracking, and pull request handling while preserving Git history. Features include automated branch creation, error handling, and support for both single and batch operations.",
      "stars": 2,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-06-11T02:18:18Z",
      "readme_content": "# GitHub MCP Server\n\nMCP Server for the GitHub API, enabling file operations, repository management, search functionality, and more.\n\n## Mission Squad modifications\n- github pat is now dynamic per request and does not have to be included via environment variables, but still falls back to environment variables.\n- name: mcp-github\n\n### Features\n\n- **Automatic Branch Creation**: When creating/updating files or pushing changes, branches are automatically created if they don't exist\n- **Comprehensive Error Handling**: Clear error messages for common issues\n- **Git History Preservation**: Operations maintain proper Git history without force pushing\n- **Batch Operations**: Support for both single-file and multi-file operations\n- **Advanced Search**: Support for searching code, issues/PRs, and users\n\n\n## Tools\n\n1. `create_or_update_file`\n   - Create or update a single file in a repository\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `path` (string): Path where to create/update the file\n     - `content` (string): Content of the file\n     - `message` (string): Commit message\n     - `branch` (string): Branch to create/update the file in\n     - `sha` (optional string): SHA of file being replaced (for updates)\n   - Returns: File content and commit details\n\n2. `push_files`\n   - Push multiple files in a single commit\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `branch` (string): Branch to push to\n     - `files` (array): Files to push, each with `path` and `content`\n     - `message` (string): Commit message\n   - Returns: Updated branch reference\n\n3. `search_repositories`\n   - Search for GitHub repositories\n   - Inputs:\n     - `query` (string): Search query\n     - `page` (optional number): Page number for pagination\n     - `perPage` (optional number): Results per page (max 100)\n   - Returns: Repository search results\n\n4. `create_repository`\n   - Create a new GitHub repository\n   - Inputs:\n     - `name` (string): Repository name\n     - `description` (optional string): Repository description\n     - `private` (optional boolean): Whether repo should be private\n     - `autoInit` (optional boolean): Initialize with README\n   - Returns: Created repository details\n\n5. `get_file_contents`\n   - Get contents of a file or directory\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `path` (string): Path to file/directory\n     - `branch` (optional string): Branch to get contents from\n   - Returns: File/directory contents\n\n6. `create_issue`\n   - Create a new issue\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `title` (string): Issue title\n     - `body` (optional string): Issue description\n     - `assignees` (optional string[]): Usernames to assign\n     - `labels` (optional string[]): Labels to add\n     - `milestone` (optional number): Milestone number\n   - Returns: Created issue details\n\n7. `create_pull_request`\n   - Create a new pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `title` (string): PR title\n     - `body` (optional string): PR description\n     - `head` (string): Branch containing changes\n     - `base` (string): Branch to merge into\n     - `draft` (optional boolean): Create as draft PR\n     - `maintainer_can_modify` (optional boolean): Allow maintainer edits\n   - Returns: Created pull request details\n\n8. `fork_repository`\n   - Fork a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `organization` (optional string): Organization to fork to\n   - Returns: Forked repository details\n\n9. `create_branch`\n   - Create a new branch\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `branch` (string): Name for new branch\n     - `from_branch` (optional string): Source branch (defaults to repo default)\n   - Returns: Created branch reference\n\n10. `list_issues`\n    - List and filter repository issues\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `state` (optional string): Filter by state ('open', 'closed', 'all')\n      - `labels` (optional string[]): Filter by labels\n      - `sort` (optional string): Sort by ('created', 'updated', 'comments')\n      - `direction` (optional string): Sort direction ('asc', 'desc')\n      - `since` (optional string): Filter by date (ISO 8601 timestamp)\n      - `page` (optional number): Page number\n      - `per_page` (optional number): Results per page\n    - Returns: Array of issue details\n\n11. `update_issue`\n    - Update an existing issue\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `issue_number` (number): Issue number to update\n      - `title` (optional string): New title\n      - `body` (optional string): New description\n      - `state` (optional string): New state ('open' or 'closed')\n      - `labels` (optional string[]): New labels\n      - `assignees` (optional string[]): New assignees\n      - `milestone` (optional number): New milestone number\n    - Returns: Updated issue details\n\n12. `add_issue_comment`\n    - Add a comment to an issue\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `issue_number` (number): Issue number to comment on\n      - `body` (string): Comment text\n    - Returns: Created comment details\n\n13. `search_code`\n    - Search for code across GitHub repositories\n    - Inputs:\n      - `q` (string): Search query using GitHub code search syntax\n      - `sort` (optional string): Sort field ('indexed' only)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: Code search results with repository context\n\n14. `search_issues`\n    - Search for issues and pull requests\n    - Inputs:\n      - `q` (string): Search query using GitHub issues search syntax\n      - `sort` (optional string): Sort field (comments, reactions, created, etc.)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: Issue and pull request search results\n\n15. `search_users`\n    - Search for GitHub users\n    - Inputs:\n      - `q` (string): Search query using GitHub users search syntax\n      - `sort` (optional string): Sort field (followers, repositories, joined)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: User search results\n\n16. `list_commits`\n   - Gets commits of a branch in a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `page` (optional string): page number\n     - `per_page` (optional string): number of record per page\n     - `sha` (optional string): branch name\n   - Returns: List of commits\n\n17. `get_issue`\n   - Gets the contents of an issue within a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `issue_number` (number): Issue number to retrieve\n   - Returns: Github Issue object & details\n\n18. `get_pull_request`\n   - Get details of a specific pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Pull request details including diff and review status\n\n19. `list_pull_requests`\n   - List and filter repository pull requests\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `state` (optional string): Filter by state ('open', 'closed', 'all')\n     - `head` (optional string): Filter by head user/org and branch\n     - `base` (optional string): Filter by base branch\n     - `sort` (optional string): Sort by ('created', 'updated', 'popularity', 'long-running')\n     - `direction` (optional string): Sort direction ('asc', 'desc')\n     - `per_page` (optional number): Results per page (max 100)\n     - `page` (optional number): Page number\n   - Returns: Array of pull request details\n\n20. `create_pull_request_review`\n   - Create a review on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `body` (string): Review comment text\n     - `event` (string): Review action ('APPROVE', 'REQUEST_CHANGES', 'COMMENT')\n     - `commit_id` (optional string): SHA of commit to review\n     - `comments` (optional array): Line-specific comments, each with:\n       - `path` (string): File path\n       - `position` (number): Line position in diff\n       - `body` (string): Comment text\n   - Returns: Created review details\n\n21. `merge_pull_request`\n   - Merge a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `commit_title` (optional string): Title for merge commit\n     - `commit_message` (optional string): Extra detail for merge commit\n     - `merge_method` (optional string): Merge method ('merge', 'squash', 'rebase')\n   - Returns: Merge result details\n\n22. `get_pull_request_files`\n   - Get the list of files changed in a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of changed files with patch and status details\n\n23. `get_pull_request_status`\n   - Get the combined status of all status checks for a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Combined status check results and individual check details\n\n24. `update_pull_request_branch`\n   - Update a pull request branch with the latest changes from the base branch (equivalent to GitHub's \"Update branch\" button)\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `expected_head_sha` (optional string): The expected SHA of the pull request's HEAD ref\n   - Returns: Success message when branch is updated\n\n25. `get_pull_request_comments`\n   - Get the review comments on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of pull request review comments with details like the comment text, author, and location in the diff\n\n26. `get_pull_request_reviews`\n   - Get the reviews on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of pull request reviews with details like the review state (APPROVED, CHANGES_REQUESTED, etc.), reviewer, and review body\n\n## Search Query Syntax\n\n### Code Search\n- `language:javascript`: Search by programming language\n- `repo:owner/name`: Search in specific repository\n- `path:app/src`: Search in specific path\n- `extension:js`: Search by file extension\n- Example: `q: \"import express\" language:typescript path:src/`\n\n### Issues Search\n- `is:issue` or `is:pr`: Filter by type\n- `is:open` or `is:closed`: Filter by state\n- `label:bug`: Search by label\n- `author:username`: Search by author\n- Example: `q: \"memory leak\" is:issue is:open label:bug`\n\n### Users Search\n- `type:user` or `type:org`: Filter by account type\n- `followers:>1000`: Filter by followers\n- `location:London`: Search by location\n- Example: `q: \"fullstack developer\" location:London followers:>100`\n\nFor detailed search syntax, see [GitHub's searching documentation](https://docs.github.com/en/search-github/searching-on-github).\n\n## Setup\n\n### Personal Access Token\n[Create a GitHub Personal Access Token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens) with appropriate permissions:\n   - Go to [Personal access tokens](https://github.com/settings/tokens) (in GitHub Settings > Developer settings)\n   - Select which repositories you'd like this token to have access to (Public, All, or Select)\n   - Create a token with the `repo` scope (\"Full control of private repositories\")\n     - Alternatively, if working only with public repositories, select only the `public_repo` scope\n   - Copy the generated token\n\n### Usage with Claude Desktop\nTo use this with Claude Desktop, add the following to your `claude_desktop_config.json`:\n\n#### Docker\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"mcp/github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n## Build\n\nDocker build:\n\n```bash\ndocker build -t mcp/github -f src/github/Dockerfile .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "https://www.npmjs.com/package/@missionsquad/mcp-github",
      "npm_downloads": 6134,
      "keywords": [
        "git",
        "github",
        "workflow",
        "git workflow",
        "github manage",
        "manage github"
      ],
      "category": "git-workflow-management"
    },
    "MrOrz--mcp-git-commit-aider": {
      "owner": "MrOrz",
      "name": "mcp-git-commit-aider",
      "url": "https://github.com/MrOrz/mcp-git-commit-aider",
      "imageUrl": "/freedevtools/mcp/pfp/MrOrz.webp",
      "description": "Commits staged changes in a Git repository with a custom message, while automatically appending '(aider)' to the committer's name. It reads committer details from environment variables or Git configuration settings.",
      "stars": 7,
      "forks": 2,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-05-13T10:38:50Z",
      "readme_content": "# git-commit-aider MCP Server\n\nMake git commits on behalf of AI, so that you can track AI contribution in your codebase.\n\nThis is a TypeScript-based MCP server that provides a tool to commit staged changes in a Git repository while appending \"(aider)\" to the committer's name.\n\n## Features\n\nThis MCP server provides only one tool:\n\n`commit_staged` - Commit staged changes with a specific message.\n- Takes `message` (string, required) as the commit message.\n- Takes `cwd` (string, optional) to specify the working directory for the git command.\n- Appends \"(aider)\" to the committer name automatically.\n- Reads committer name and email from environment variables (`GIT_COMMITTER_NAME`, `GIT_COMMITTER_EMAIL`) if set, otherwise falls back to `git config user.name` and `git config user.email`.\n\nWith this tool installed in your code editor, you can prompt the AI by something like:\n\n> Commit the changes for me\n\nThis usually happens after the AI has made some changes to your codebase, so often times AI is able to provide a good commit message from the context.\n\n## Installation\n\nTo use this server, add its configuration to your MCP settings file.\n\n```json\n{\n  \"mcpServers\": {\n    \"git-commit-aider\": {\n      \"command\": \"npx\",\n      \"args\": [\"mcp-git-commit-aider\"]\n    }\n  }\n}\n```\n\nThe committer information is retrieved from:\n1. Environment variables `GIT_COMMITTER_NAME` and `GIT_COMMITTER_EMAIL`, which follows [git's convention](https://git-scm.com/book/en/v2/Git-Internals-Environment-Variables).\n2. Output of `git config user.name` and `git config user.email` commands.\n\n### Alternative: amend author after commit\n\nIf you don't want to use this MCP server, you can also use the `git` command directly in your terminal.\n\nYou can proceed with normal commit first, and then use the following git command to change the author of the last commit:\n\n```sh\ngit commit --amend --author=\"$(git config user.name) (aider) <$(git config user.email)>\"\n```\n\nThis will change the author of the last commit to your name with \"(aider)\" appended.\n\nTo simplify the process, you can set up a Git alias. Run the following command in your terminal:\n\n```sh\ngit config --global alias.aimend '!git commit --amend --author=\"$(git config user.name) (aider) <$(git config user.email)>\"'\n```\n\nOnce set up, you can use the alias by running:\n\n```sh\ngit aimend\n```\n\n## Calculating AI contribution\n\nCommits with \"(aider)\" can be picked up by [`aider --stats`](https://github.com/Aider-AI/aider/pull/2883) command, which will show you the contribution of AI in your codebase.\n\nAlternatively, you can use the following script to calculate the contribution of AI in your codebase, measured in lines of code (added, deleted, and total changes).\n\n```sh\n#!/bin/bash\n\n# Script to calculate line changes (added, deleted, total) by AI and human authors\n# between two commits.\n# Output is in JSON format.\n#\n# This logic is extracted and altered from git-quick-stats.sh, MIT license.\n\n# --- Configuration ---\n# You may change the config to match your repository's convention.\n\n# String to identify AI-generated commits in author names\nAI_MATCHER=\"(aider)\"\n\n# Define patterns for files/paths to be excluded from the calculation.\n# These will be converted to git pathspecs like \":(exclude)*package-lock.json\"\nIGNORE_PATTERNS=(\n  \"*package-lock.json\"\n  \"*.lock\"\n)\n\n# --- Helper Functions ---\nfunction print_usage() {\n  echo \"Usage: $0 <REVISION_RANGE>\"\n  echo \"  <REVISION_RANGE>: The revision range to analyze (e.g., HEAD~5..HEAD, my-branch, commit_sha).\"\n  echo \"  Refer to 'git help log' or 'git help revisions' for more range options.\"\n  echo \"Example: $0 HEAD~5..HEAD\"\n  echo \"Example: $0 origin..HEAD\"\n  echo \"Example: $0 my-feature-branch\"\n  echo \"Example: $0 abcdef1..fedcba2\"\n}\n\n# --- Argument Parsing ---\nif [ \"$#\" -ne 1 ]; then\n  echo \"Error: Incorrect number of arguments. Please provide a single revision range.\"\n  print_usage\n  exit 1\nfi\n\nREVISION_RANGE=\"$1\"\n\n# --- Main Logic ---\n\n# Construct pathspec arguments for git log\npathspec_args=()\nfor pattern in \"${IGNORE_PATTERNS[@]}\"; do\n  pathspec_args+=(\":(exclude)$pattern\")\ndone\n\ngit_log_output=$(git log \"$REVISION_RANGE\" --numstat --pretty=\"format:AuthorName:%an\" -- \"${pathspec_args[@]}\")\n\n# DEBUG: Uncomment to check the calculation for each commit.\n# echo \"$git_log_output\"\n\n# Process the log output with awk\nresult_json=$(echo \"$git_log_output\" | awk -v ai_matcher=\"$AI_MATCHER\" '\nBEGIN {\n  ai_added = 0\n  ai_deleted = 0\n  human_added = 0\n  human_deleted = 0\n  current_author = \"\"\n  is_ai_author = 0\n}\n\n/^AuthorName:/ {\n  # Extract author name\n  current_author = substr($0, length(\"AuthorName:\") + 1)\n  if (index(current_author, ai_matcher) > 0) {\n    is_ai_author = 1\n  } else {\n    is_ai_author = 0\n  }\n  next\n}\n\n# Skip empty lines between commit blocks or lines that are not numstat\nNF == 0 || !($1 ~ /^[0-9]+$/ && $2 ~ /^[0-9]+$/) {\n  next\n}\n\n# Process numstat line: <added> <deleted> <file>\n{\n  added_lines = $1\n  deleted_lines = $2\n\n  # Skip binary files where numstat shows \"-\" for lines\n  if (added_lines == \"-\" || deleted_lines == \"-\") {\n    next\n  }\n\n  # Aggregate stats per author and file for details array\n  file_name = $3\n  # Robust key using File Separator character \\034\n  key = current_author \"\\034\" file_name\n\n  file_author_added[key] += added_lines\n  file_author_deleted[key] += deleted_lines\n\n  if (is_ai_author) {\n    ai_added += added_lines\n    ai_deleted += deleted_lines\n  } else {\n    human_added += added_lines\n    human_deleted += deleted_lines\n  }\n}\n\nEND {\n  ai_total_changed = ai_added + ai_deleted\n  human_total_changed = human_added + human_deleted\n  overall_total_changed = ai_total_changed + human_total_changed\n  ai_percentage = 0.00\n\n  if (overall_total_changed > 0) {\n    ai_percentage = (ai_total_changed / overall_total_changed) * 100\n  }\n\n  printf \"{\\n\"\n  printf \"  \\\"ai_percentage\\\": %.2f,\\n\", ai_percentage\n  printf \"  \\\"ai_changes\\\": {\\\"added\\\": %d, \\\"deleted\\\": %d, \\\"total\\\": %d},\\n\", ai_added, ai_deleted, ai_total_changed\n  printf \"  \\\"human_changes\\\": {\\\"added\\\": %d, \\\"deleted\\\": %d, \\\"total\\\": %d},\\n\", human_added, human_deleted, human_total_changed\n\n  # Details array\n  printf \"  \\\"details\\\": [\\n\"\n  first_detail = 1\n  # Iterate over one of the arrays, keys should be consistent\n  for (key in file_author_added) {\n    if (!first_detail) {\n      printf \",\\n\"\n    }\n    first_detail = 0\n\n    # Split key \"author\\034fileName\" into key_parts array\n    # key_parts[1] will be author, key_parts[2] will be fileName\n    split(key, key_parts, \"\\034\")\n    author = key_parts[1]\n    fileName = key_parts[2]\n\n    # Escape double quotes for JSON compatibility\n    gsub(/\"/, \"\\\\\\\"\", author)\n    gsub(/\"/, \"\\\\\\\"\", fileName)\n\n    detail_added = file_author_added[key] + 0 # Ensure numeric\n    detail_deleted = file_author_deleted[key] + 0 # Ensure numeric\n    detail_total = detail_added + detail_deleted\n\n    printf \"    {\\n\"\n    printf \"      \\\"fileName\\\": \\\"%s\\\",\\n\", fileName\n    printf \"      \\\"author\\\": \\\"%s\\\", \\\"isAI\\\": %s,\\n\", author, (index(author, ai_matcher) > 0 ? \"true\" : \"false\")\n    printf \"      \\\"added\\\": %d, \\\"deleted\\\": %d, \\\"total\\\": %d\\n\", detail_added, detail_deleted, detail_total\n    printf \"    }\"\n  }\n  printf \"\\n  ]\\n\"\n  printf \"}\\n\"\n}\n')\n\n# --- Output ---\necho \"$result_json\"\n```\n\nUsage example:\n\n```sh\n# Assume the script is saved as `calculate_ai_contribution.sh` and is executable (chmod +x calculate_ai_contribution.sh)\n\n# Example 1: Analyze the last 5 commits\n./calculate_ai_contribution.sh HEAD~5..HEAD\n\n# Example 2: Analyze commits between a specific commit and HEAD\n./calculate_ai_contribution.sh 90a5fcd4..HEAD\n\n# Example 3: Analyze all commits on a feature branch not yet in main\n./calculate_ai_contribution.sh main..my-feature-branch\n\n# Example 4: Analyze commits between two tags\n./calculate_ai_contribution.sh v1.0..v1.1\n\n# Example output (will vary based on your repository and range):\n# {\n#   \"ai_percentage\": 48.53,\n#   \"ai_changes\": { \"added\": 100, \"deleted\": 32, \"total\": 132 },\n#   \"human_changes\": { \"added\": 103, \"deleted\": 37, \"total\": 140 },\n#   \"details\": [\n#     {\n#       \"fileName\": \"src/featureA.js\",\n#       \"author\": \"Developer One (aider)\", \"isAI\": true,\n#       \"added\": 60, \"deleted\": 10, \"total\": 70\n#     },\n#     {\n#       \"fileName\": \"src/featureB.js\",\n#       \"author\": \"Developer One (aider)\", \"isAI\": true,\n#       \"added\": 40, \"deleted\": 22, \"total\": 62\n#     },\n#     {\n#       \"fileName\": \"src/utils.js\",\n#       \"author\": \"Developer Two\", \"isAI\": false,\n#       \"added\": 80, \"deleted\": 15, \"total\": 95\n#     },\n#     {\n#       \"fileName\": \"README.md\",\n#       \"author\": \"Developer Two\", \"isAI\": false,\n#       \"added\": 23, \"deleted\": 22, \"total\": 45\n#     }\n#   ]\n# }\n```\n### Output Fields Description\n\nThe JSON output contains the following fields:\n\n-   `ai_percentage`: (Number) The percentage of total lines changed (sum of added and deleted lines) that were contributed by AI authors (identified by `AI_MATCHER`).\n-   `ai_changes`: (Object) An object detailing the aggregated line changes (lines `added`, `deleted`, and their `total`) made by AI authors.\n-   `human_changes`: (Object) An object detailing the aggregated line changes (lines `added`, `deleted`, and their `total`) made by human authors.\n-   `details`: (Array of Objects) Provides a detailed breakdown of changes. Each object in the array represents the contribution of a specific `author` to a particular `fileName`, including lines `added`, `deleted`, and the `total` changes for that file by that author.\n",
      "npm_url": "https://www.npmjs.com/package/mcp-git-commit-aider",
      "npm_downloads": 3933,
      "keywords": [
        "commits",
        "committer",
        "commit",
        "committer details",
        "aider commits",
        "commit aider"
      ],
      "category": "git-workflow-management"
    },
    "NZenitram--github-mcp": {
      "owner": "NZenitram",
      "name": "github-mcp",
      "url": "https://github.com/NZenitram/github-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/NZenitram.webp",
      "description": "Interact with GitHub repositories, manage issues and pull requests, configure repository settings, and handle workflows and collaborators.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-23T03:02:51Z",
      "readme_content": "# GitHub MCP Tools\n\nA Multi-Claude Program (MCP) for interacting with GitHub APIs through Claude Desktop.\n\n## Features\n\n- Search GitHub repositories and issues\n- Create, update, and manage GitHub issues and pull requests\n- Manage repository settings and configurations\n- Handle repository workflows and actions\n- Search for users and organizations\n- Manage repository collaborators and teams\n\n## Installation\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/yourusername/github-mcp.git\n   cd github-mcp\n   ```\n\n2. Create and activate a virtual environment:\n   ```bash\n   # On macOS/Linux\n   python -m venv venv\n   source venv/bin/activate\n\n   # On Windows\n   python -m venv venv\n   .\\venv\\Scripts\\activate\n   ```\n\n3. Install dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n4. Create a `.env` file in the project root:\n   ```bash\n   touch .env\n   ```\n\n5. Add your GitHub credentials to the `.env` file:\n   ```\n   GITHUB_TOKEN=your_personal_access_token_here\n   GITHUB_USERNAME=your_github_username\n   ```\n\n6. Test the installation:\n   ```bash\n   # Run all tests\n   python -m pytest\n\n   # Run a specific test file\n   python -m pytest tests/test_search_repos.py\n   ```\n\n7. Start the MCP server:\n   ```bash\n   python run.py\n   ```\n\n## Environment Setup\n\n### GitHub Personal Access Token\nYou'll need a fine-grained personal access token to authenticate with GitHub:\n\n1. Log in to your GitHub account\n2. Go to Settings > Developer settings > Personal access tokens > Fine-grained tokens\n3. Click \"Generate new token\"\n4. Configure the token:\n   - Token name: \"Claude Desktop Integration\"\n   - Description: \"Token for Claude Desktop GitHub integration\"\n   - Expiration: Choose an appropriate expiration date\n   - Repository access: Select \"All repositories\" or specific repositories\n   - Permissions:\n     - Repository permissions:\n       - Actions: Read and write\n       - Contents: Read and write\n       - Issues: Read and write\n       - Pull requests: Read and write\n       - Repository hooks: Read and write\n       - Repository settings: Read and write\n     - Organization permissions (if working with organization repositories):\n       - Members: Read-only\n       - Teams: Read-only\n5. Click \"Generate token\" and save the generated token securely\n\n## Tools\n\n### Search Repositories\nSearch for GitHub repositories using various criteria.\n\n**Parameters:**\n- query: Search query string\n- sort: Sort field (stars, forks, updated, etc.)\n- order: Sort order (asc or desc)\n- max_results: Maximum number of results to return (default: 10)\n\n### Create Issue\nCreate a new GitHub issue in a specified repository.\n\n**Parameters:**\n- owner: Repository owner\n- repo: Repository name\n- title: Issue title\n- body: Issue description\n- labels: List of labels to apply\n- assignees: List of assignee usernames\n\n### Create Pull Request\nCreate a new pull request.\n\n**Parameters:**\n- owner: Repository owner\n- repo: Repository name\n- title: PR title\n- body: PR description\n- head: Source branch\n- base: Target branch\n- draft: Whether to create as draft PR\n\n### Manage Repository Settings\nUpdate repository settings and configurations.\n\n**Parameters:**\n- owner: Repository owner\n- repo: Repository name\n- settings: Dictionary of settings to update\n\n### Search Issues\nSearch for issues across repositories.\n\n**Parameters:**\n- query: Search query string\n- state: Issue state (open, closed, all)\n- sort: Sort field\n- order: Sort order\n- max_results: Maximum number of results\n\n### Manage Workflows\nManage GitHub Actions workflows.\n\n**Parameters:**\n- owner: Repository owner\n- repo: Repository name\n- workflow_file: Workflow file path\n- action: Action to perform (enable, disable, trigger)\n\n### Manage Collaborators\nManage repository collaborators.\n\n**Parameters:**\n- owner: Repository owner\n- repo: Repository name\n- username: Collaborator username\n- permission: Permission level (pull, push, admin, maintain, triage)\n\n## Example Usage\n\n```python\n# Search for repositories\nsearch_repos(query=\"python web framework\", sort=\"stars\", max_results=5)\n\n# Create a new issue\ncreate_issue(\n    owner=\"username\",\n    repo=\"repository\",\n    title=\"Bug: Login not working\",\n    body=\"Users cannot log in using the login button\",\n    labels=[\"bug\", \"high-priority\"]\n)\n\n# Create a pull request\ncreate_pull_request(\n    owner=\"username\",\n    repo=\"repository\",\n    title=\"Feature: Add user authentication\",\n    body=\"Implements JWT-based authentication\",\n    head=\"feature/auth\",\n    base=\"main\"\n)\n\n# Search for issues\nsearch_issues(query=\"is:open is:issue author:username\", max_results=10)\n\n# Manage repository settings\nmanage_repo_settings(\n    owner=\"username\",\n    repo=\"repository\",\n    settings={\n        \"has_issues\": True,\n        \"has_projects\": True,\n        \"has_wiki\": True\n    }\n)\n```\n\n## Development\n\n### Running Tests\n```bash\n# Run all tests\npython -m pytest\n\n# Run with coverage\npython -m pytest --cov=src tests/\n\n# Run specific test file\npython -m pytest tests/test_search_repos.py\n```\n\n### Adding New Tools\n1. Create a new file in `src/tools/`\n2. Implement your tool function\n3. Register the tool in `src/main.py`\n4. Add tests in `tests/`\n5. Update documentation in README.md\n\n### Contributing\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Run tests\n5. Submit a pull request\n\n## License\nMIT License ",
      "npm_url": "https://www.npmjs.com/package/github-mcp-server",
      "npm_downloads": 15187,
      "keywords": [
        "github",
        "git",
        "workflows",
        "git workflow",
        "nzenitram github",
        "interact github"
      ],
      "category": "git-workflow-management"
    },
    "ParasSolanki--github-mcp-server": {
      "owner": "ParasSolanki",
      "name": "github-mcp-server",
      "url": "https://github.com/ParasSolanki/github-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/ParasSolanki.webp",
      "description": "Integrate with GitHub to interact with repositories, manage issues, and automate workflows through a simple interface.",
      "stars": 2,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-30T01:57:35Z",
      "readme_content": "# Github MCP Server\n\nA [Model Context Protocol](https://github.com/modelcontextprotocol) Server for Github.\n\nProvides integration with Github through MCP, allowing LLMs to interact with it.\n\n[Github REST Api Docs](https://docs.github.com/en/rest)\n\n## Installation\n\n### Manual Installation\n\n1. Create or get access token for your Github Account: [Guide](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-fine-grained-personal-access-token)\n\n2. Add server config to Claude Desktop:\n\n   - MacOS: ~/Library/Application Support/Claude/claude_desktop_config.json\n   - Windows: [Check this Guide](https://gist.github.com/feveromo/7a340d7795fca1ccd535a5802b976e1f)\n\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"github-mcp-server\"],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"your_personal_github_access_token\"\n      }\n    }\n  }\n}\n```\n\n## Components\n\n### Tools\n\n1.  `search_repositories`: Search GitHub for a repository.\n\n    - Required inputs:\n      - `query` (string): The query to search for repository.\n      - `page` (number, default: 30, max: 100): Page number for pagination.\n      - `per_page` (number, default: 30, max: 100): Number of results per page.\n\n2.  `search_issues`: Search issues from a repository.\n\n    - Required inputs:\n      - `query` (string): The query to search for repository.\n      - `page` (number, default: 1): Page number for pagination.\n      - `per_page` (number, default: 30, max: 100): Number of results per page.\n      - `order` (optional string, default: `desc`): Sort of order (`asc` or `desc`).\n      - `sort` (optional string, default: `best match`): Sort field (can be one of: `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, `interactions`, `created` or `updated`).\n\n3.  `search_commits`: Search commits from a repository.\n\n    - Required inputs:\n      - `query` (string): The query to search for repository.\n      - `page` (number, default: 1): Page number for pagination.\n      - `per_page` (number, default: 30, max: 100): Number of results per page.\n      - `order` (optional string, default: `desc`): Sort of order (`asc` or `desc`).\n      - `sort` (optional string, default: `best match`): Sort field (can be one of: `committer-date` or `author-date`).\n\n4.  `search_code`: Search code from a repository.\n\n    - Required inputs:\n      - `query` (string): The query to search for repository.\n      - `page` (number, default: 1): Page number for pagination.\n      - `per_page` (number, default: 30, max: 100): Number of results per page.\n\n5.  `search_users`: Search users from a repository.\n\n    - Required inputs:\n      - `query` (string): The query to search for repository.\n      - `page` (number, default: 1): Page number for pagination.\n      - `per_page` (number, default: 30, max: 100): Number of results per page.\n      - `order` (optional string, default: `desc`): Sort of order (`asc` or `desc`).\n      - `sort` (optional string, default: `best match`): Sort field (can be one of: `followers`, `repositories` or `joined`).\n\n6.  `search_topics`: Search topics.\n\n    - Required inputs:\n      - `query` (string): The query to search for repository.\n      - `page` (number, default: 1): Page number for pagination.\n      - `per_page` (number, default: 30, max: 100): Number of results per page.\n\n7.  `search_labels`: Search labels in a repository.\n\n    - Required inputs:\n      - `query` (string): The query to search for repository.\n      - `page` (number, default: 1): Page number for pagination.\n      - `per_page` (number, default: 30, max: 100): Number of results per page.\n      - `order` (optional string, default: `desc`): Sort of order (`asc` or `desc`).\n      - `sort` (optional string, default: `best match`): Sort field (can be one of: `created` or `updated`).\n\n8.  `list_repositories_issues`: List issues from a repository.\n\n    - Required inputs:\n      - `owner` (string): The owner of the repository.\n      - `repo` (string): The repository name.\n      - `page` (optional number, default: 1): Page number for pagination.\n      - `per_page` (optional number, default: 30, max: 100): Number of results per page.\n      - `direction` (optional string, default: `desc`): Direction of sort (`asc` or `desc`).\n      - `sort` (optional string, default: `created`): Sort field (can be one of: `created`, `comments` or `updated`).\n      - `since` (optional string): Results last updated after the given time (ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.).\n      - `labels` (optional string): Comma separated label names. Example: bug,ui,@high.\n      - `milestone` (optional string): Milestone number.\n      - `assignee` (optional string): Name of assignee user (`*` for all).\n      - `creator` (optional string): The user that created the issue. (`*` for all).\n      - `mentioned` (optional string): A user that's mentioned in the issue.\n\n9.  `get_issue`: Get an issue from a repository.\n\n    - Required inputs:\n      - `owner` (string): The owner of the repository.\n      - `repo` (string): The repository name.\n      - `issue_number` (number): The issue number.\n\n10. `list_repositories_pull_requests`: List pull requests from a repository.\n\n    - Required inputs:\n      - `owner` (string): The owner of the repository.\n      - `repo` (string): The repository name.\n      - `page` (optional number, default: 1): Page number for pagination.\n      - `per_page` (optional number, default: 30, max: 100): Number of results per page.\n      - `direction` (optional string, default: `desc`): Direction of sort (`asc` or `desc`).\n      - `sort` (optional string, default: `created`): Sort field (can be one of: `created`, `popularity`, `long-running` or `updated`).\n      - `head` (optional string): Filter pulls by head user or head organization and branch name in the format of user:ref-name or organization:ref-name (For example: github:new-script-format or octocat:test-branch).\n      - `base` (optional string): Filter pulls by base branch name. (For example: gh-pages).\n\n11. `get_pull_request`: Get a pull request from a repository.\n    - Required inputs:\n      - `owner` (string): The owner of the repository.\n      - `repo` (string): The repository name.\n      - `pull_request_number` (number): The pull request number.\n\n## Usage examples\n\nSome example prompts you can use to interact with Github:\n\n1. \"modelcontextprotocol\" → execute the `search_repositories` tool to find repositories where modelcontextprotocol mentioned.\n2. \"What is the 739 issue on modelcontextprotocol servers repo\" → execute the `get_issue` tool to find 739 issue from modelcontextprotocol servers repo.\n3. \"What is the 717 PR on modelcontextprotocol servers repo\" → execute the `get_pull_request` tool to find 717 PR from modelcontextprotocol servers repo.\n\n## Development\n\n1. Install dependencies:\n\n```shell\npnpm install\n```\n\n2. Configure Github Access token in `.env`:\n\n```shell\nGITHUB_PERSONAL_ACCESS_TOKEN=<your_personal_github_access_token>\n```\n\n3. Run locally with watch:\n\n```shell\npnpm dev\n```\n\n4. Build the server:\n\n```shell\npnpm build\n```\n\n5. Local debugging with inspector:\n\n```shell\npnpm inspector\n```\n",
      "npm_url": "https://www.npmjs.com/package/github-mcp-server",
      "npm_downloads": 15187,
      "keywords": [
        "github",
        "git",
        "workflows",
        "git workflow",
        "github mcp",
        "github interact"
      ],
      "category": "git-workflow-management"
    },
    "PhialsBasement--mcp-github-server-plus": {
      "owner": "PhialsBasement",
      "name": "mcp-github-server-plus",
      "url": "https://github.com/PhialsBasement/mcp-github-server-plus",
      "imageUrl": "/freedevtools/mcp/pfp/PhialsBasement.webp",
      "description": "Interact with GitHub repositories, perform file operations, manage branches, and utilize search functionality through the GitHub API.",
      "stars": 4,
      "forks": 7,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-05-11T10:39:41Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/phialsbasement-mcp-github-server-plus-badge.png)](https://mseep.ai/app/phialsbasement-mcp-github-server-plus)\n\n# GitHub MCP Server Plus\n![npm downloads](https://img.shields.io/npm/dt/improved-github-mcp)\n\nMCP Server for the GitHub API, enabling file operations, repository management, search functionality, and more.\n\n<a href=\"https://glama.ai/mcp/servers/qmvm4mx87p\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/qmvm4mx87p/badge\" alt=\"GitHub Server Plus MCP server\" /></a>\n\n### Features\n\n- **Automatic Branch Creation**: When creating/updating files or pushing changes, branches are automatically created if they don't exist\n- **Comprehensive Error Handling**: Clear error messages for common issues\n- **Git History Preservation**: Operations maintain proper Git history without force pushing\n- **Batch Operations**: Support for both single-file and multi-file operations with content or file paths\n- **Advanced Search**: Support for searching code, issues/PRs, and users\n\n\n## Tools\n\n1. `create_or_update_file`\n   - Create or update a single file in a repository\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `path` (string): Path where to create/update the file\n     - `content` (string): Content of the file\n     - `message` (string): Commit message\n     - `branch` (string): Branch to create/update the file in\n     - `sha` (optional string): SHA of file being replaced (for updates)\n   - Returns: File content and commit details\n\n2. `push_files_content`\n   - Push multiple files with direct content in a single commit\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `branch` (string): Branch to push to\n     - `files` (array): Files to push, each with `path` and `content`\n     - `message` (string): Commit message\n   - Returns: Updated branch reference\n\n3. `push_files_from_path`\n   - Push multiple files from filesystem paths in a single commit\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `branch` (string): Branch to push to\n     - `files` (array): Files to push, each with:\n       - `path` (string): Target path in the repository\n       - `filepath` (string): Source filesystem path to read from\n     - `message` (string): Commit message\n   - Returns: Updated branch reference\n\n4. `search_repositories`\n   - Search for GitHub repositories\n   - Inputs:\n     - `query` (string): Search query\n     - `page` (optional number): Page number for pagination\n     - `perPage` (optional number): Results per page (max 100)\n   - Returns: Repository search results\n\n5. `create_repository`\n   - Create a new GitHub repository\n   - Inputs:\n     - `name` (string): Repository name\n     - `description` (optional string): Repository description\n     - `private` (optional boolean): Whether repo should be private\n     - `autoInit` (optional boolean): Initialize with README\n   - Returns: Created repository details\n\n6. `get_file_contents`\n   - Get contents of a file or directory\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `path` (string): Path to file/directory\n     - `branch` (optional string): Branch to get contents from\n   - Returns: File/directory contents\n\n7. `create_issue`\n   - Create a new issue\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `title` (string): Issue title\n     - `body` (optional string): Issue description\n     - `assignees` (optional string[]): Usernames to assign\n     - `labels` (optional string[]): Labels to add\n     - `milestone` (optional number): Milestone number\n   - Returns: Created issue details\n\n8. `create_pull_request`\n   - Create a new pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `title` (string): PR title\n     - `body` (optional string): PR description\n     - `head` (string): Branch containing changes\n     - `base` (string): Branch to merge into\n     - `draft` (optional boolean): Create as draft PR\n     - `maintainer_can_modify` (optional boolean): Allow maintainer edits\n   - Returns: Created pull request details\n\n9. `fork_repository`\n   - Fork a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `organization` (optional string): Organization to fork to\n   - Returns: Forked repository details\n\n10. `create_branch`\n    - Create a new branch\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `branch` (string): Name for new branch\n      - `from_branch` (optional string): Source branch (defaults to repo default)\n    - Returns: Created branch reference\n\n11. `list_issues`\n    - List and filter repository issues\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `state` (optional string): Filter by state ('open', 'closed', 'all')\n      - `labels` (optional string[]): Filter by labels\n      - `sort` (optional string): Sort by ('created', 'updated', 'comments')\n      - `direction` (optional string): Sort direction ('asc', 'desc')\n      - `since` (optional string): Filter by date (ISO 8601 timestamp)\n      - `page` (optional number): Page number\n      - `per_page` (optional number): Results per page\n    - Returns: Array of issue details\n\n12. `update_issue`\n    - Update an existing issue\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `issue_number` (number): Issue number to update\n      - `title` (optional string): New title\n      - `body` (optional string): New description\n      - `state` (optional string): New state ('open' or 'closed')\n      - `labels` (optional string[]): New labels\n      - `assignees` (optional string[]): New assignees\n      - `milestone` (optional number): New milestone number\n    - Returns: Updated issue details\n\n13. `add_issue_comment`\n    - Add a comment to an issue\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `issue_number` (number): Issue number to comment on\n      - `body` (string): Comment text\n    - Returns: Created comment details\n\n14. `search_code`\n    - Search for code across GitHub repositories\n    - Inputs:\n      - `q` (string): Search query using GitHub code search syntax\n      - `sort` (optional string): Sort field ('indexed' only)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: Code search results with repository context\n\n15. `search_issues`\n    - Search for issues and pull requests\n    - Inputs:\n      - `q` (string): Search query using GitHub issues search syntax\n      - `sort` (optional string): Sort field (comments, reactions, created, etc.)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: Issue and pull request search results\n\n16. `search_users`\n    - Search for GitHub users\n    - Inputs:\n      - `q` (string): Search query using GitHub users search syntax\n      - `sort` (optional string): Sort field (followers, repositories, joined)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: User search results\n\n17. `list_commits`\n    - Gets commits of a branch in a repository\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `page` (optional string): page number\n      - `per_page` (optional string): number of record per page\n      - `sha` (optional string): branch name\n    - Returns: List of commits\n\n18. `get_issue`\n    - Gets the contents of an issue within a repository\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `issue_number` (number): Issue number to retrieve\n    - Returns: GitHub Issue object & details\n\n19. `get_pull_request`\n    - Get details of a specific pull request\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `pull_number` (number): Pull request number\n    - Returns: Pull request details including diff and review status\n\n20. `list_pull_requests`\n    - List and filter repository pull requests\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `state` (optional string): Filter by state ('open', 'closed', 'all')\n      - `head` (optional string): Filter by head user/org and branch\n      - `base` (optional string): Filter by base branch\n      - `sort` (optional string): Sort by ('created', 'updated', 'popularity', 'long-running')\n      - `direction` (optional string): Sort direction ('asc', 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: Array of pull request details\n\n21. `create_pull_request_review`\n    - Create a review on a pull request\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `pull_number` (number): Pull request number\n      - `body` (string): Review comment text\n      - `event` (string): Review action ('APPROVE', 'REQUEST_CHANGES', 'COMMENT')\n      - `commit_id` (optional string): SHA of commit to review\n      - `comments` (optional array): Line-specific comments, each with:\n        - `path` (string): File path\n        - `position` (number): Line position in diff\n        - `body` (string): Comment text\n    - Returns: Created review details\n\n22. `merge_pull_request`\n    - Merge a pull request\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `pull_number` (number): Pull request number\n      - `commit_title` (optional string): Title for merge commit\n      - `commit_message` (optional string): Extra detail for merge commit\n      - `merge_method` (optional string): Merge method ('merge', 'squash', 'rebase')\n    - Returns: Merge result details\n\n23. `get_pull_request_files`\n    - Get the list of files changed in a pull request\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `pull_number` (number): Pull request number\n    - Returns: Array of changed files with patch and status details\n\n24. `get_pull_request_status`\n    - Get the combined status of all status checks for a pull request\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `pull_number` (number): Pull request number\n    - Returns: Combined status check results and individual check details\n\n25. `update_pull_request_branch`\n    - Update a pull request branch with the latest changes from the base branch\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `pull_number` (number): Pull request number\n      - `expected_head_sha` (optional string): The expected SHA of the pull request's HEAD ref\n    - Returns: Success message when branch is updated\n\n26. `get_pull_request_comments`\n    - Get the review comments on a pull request\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `pull_number` (number): Pull request number\n    - Returns: Array of pull request review comments\n\n27. `get_pull_request_reviews`\n    - Get the reviews on a pull request\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `pull_number` (number): Pull request number\n    - Returns: Array of pull request reviews\n\n## Search Query Syntax\n\n### Code Search\n- `language:javascript`: Search by programming language\n- `repo:owner/name`: Search in specific repository\n- `path:app/src`: Search in specific path\n- `extension:js`: Search by file extension\n- Example: `q: \"import express\" language:typescript path:src/`\n\n### Issues Search\n- `is:issue` or `is:pr`: Filter by type\n- `is:open` or `is:closed`: Filter by state\n- `label:bug`: Search by label\n- `author:username`: Search by author\n- Example: `q: \"memory leak\" is:issue is:open label:bug`\n\n### Users Search\n- `type:user` or `type:org`: Filter by account type\n- `followers:>1000`: Filter by followers\n- `location:London`: Search by location\n- Example: `q: \"fullstack developer\" location:London followers:>100`\n\nFor detailed search syntax, see [GitHub's searching documentation](https://docs.github.com/en/search-github/searching-on-github).\n\n## Setup\n\n### Personal Access Token\n[Create a GitHub Personal Access Token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens) with appropriate permissions:\n   - Go to [Personal access tokens](https://github.com/settings/tokens) (in GitHub Settings > Developer settings)\n   - Select which repositories you'd like this token to have access to (Public, All, or Select)\n   - Create a token with the `repo` scope (\"Full control of private repositories\")\n     - Alternatively, if working only with public repositories, select only the `public_repo` scope\n   - Copy the generated token\n\n### Usage with Claude Desktop\nTo use this with Claude Desktop, add the following to your `claude_desktop_config.json`:\n\n#### Docker\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"mcp/github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n## Build\n\nDocker build:\n\n```bash\ndocker build -t mcp/github -f src/github/Dockerfile .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflow",
        "git workflow",
        "functionality github",
        "github server"
      ],
      "category": "git-workflow-management"
    },
    "PoliTwit1984--github-meta-mcp-server": {
      "owner": "PoliTwit1984",
      "name": "github-meta-mcp-server",
      "url": "https://github.com/PoliTwit1984/github-meta-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/PoliTwit1984.webp",
      "description": "Interact with GitHub repositories by creating, updating, and configuring them through natural language commands. Automate repository management tasks such as adding topics, setting homepages, and initializing with README files.",
      "stars": 0,
      "forks": 3,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-01-10T08:37:05Z",
      "readme_content": "# GitHub MCP Server\n\nA Model Context Protocol (MCP) server that provides tools for interacting with GitHub's API. Currently supports creating repositories with descriptions, topics, and website URLs.\n\n## Features\n\n- Create GitHub repositories with auto-generated names from descriptions\n- Add topics/tags to repositories\n- Set repository homepages\n- Auto-initialize repositories with README files\n\n## Installation\n\n1. Clone the repository\n2. Install dependencies:\n```bash\nnpm install\n```\n3. Build the server:\n```bash\nnpm run build\n```\n\n## Configuration\n\nThe server requires a GitHub personal access token with repository creation permissions. Add the following to your MCP settings file:\n\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/github-server/build/index.js\"],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"your-github-token\"\n      }\n    }\n  }\n}\n```\n\n## Available Tools\n\n### create_repo\n\nCreate or update GitHub repositories using natural language commands.\n\n#### Command Format\n\nThe tool accepts natural language commands for different operations:\n\nCreating repositories:\n```\nCreate a repository for [description] with tags [tag1 tag2 tag3] website [url]\n```\nor\n```\nMake a new repository called [description] tagged with [tag1, tag2, tag3]\n```\n\nUpdating repository description:\n```\nUpdate [owner/repo] description to [new description]\n```\nor\n```\nChange [repo-name] description as [new description]\n```\n\nUpdating repository tags:\n```\nUpdate [owner/repo] tags to [tag1 tag2 tag3]\n```\nor\n```\nSet [repo-name] topics as [tag1, tag2, tag3]\n```\n\nUpdating repository website:\n```\nUpdate [owner/repo] website to [url]\n```\nor\n```\nSet [repo-name] homepage as [url]\n```\n\n#### Example Usage\n\nCreating a new repository:\n```typescript\nconst result = await use_mcp_tool({\n  server_name: \"github\",\n  tool_name: \"create_repo\",\n  arguments: {\n    command: \"Create a repository for my machine learning image classifier with tags python tensorflow computer-vision website https://example.com/docs\"\n  }\n});\n```\n\nThis will:\n1. Create a repository named \"my-machine-learning-image-classifier\"\n2. Set the description as \"my machine learning image classifier\"\n3. Add \"python\", \"tensorflow\", and \"computer-vision\" as repository topics\n4. Set the website to \"https://example.com/docs\"\n5. Initialize with a README file\n\nUpdating repository description:\n```typescript\nconst result = await use_mcp_tool({\n  server_name: \"github\",\n  tool_name: \"create_repo\",\n  arguments: {\n    command: \"Update username/existing-repo description to Updated ML project for image classification\"\n  }\n});\n```\n\nUpdating repository tags:\n```typescript\nconst result = await use_mcp_tool({\n  server_name: \"github\",\n  tool_name: \"create_repo\",\n  arguments: {\n    command: \"Update username/existing-repo tags to machine-learning python updated\"\n  }\n});\n```\n\nUpdating repository website:\n```typescript\nconst result = await use_mcp_tool({\n  server_name: \"github\",\n  tool_name: \"create_repo\",\n  arguments: {\n    command: \"Update username/existing-repo website to https://example.com/new-docs\"\n  }\n});\n```\n\nThe tool understands various natural language patterns and keywords:\n- Create/make/new for creating repositories\n- Update/change/set/modify for updating repositories\n- \"description to/as\" for updating descriptions\n- \"tags/topics to/as\" for updating tags\n- \"website/homepage/url to/as\" for updating websites\n\n## Development\n\nTo modify or extend the server:\n\n1. Make changes to `src/index.ts`\n2. Rebuild the server:\n```bash\nnpm run build\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "repositories",
        "git workflow",
        "github meta",
        "github repositories"
      ],
      "category": "git-workflow-management"
    },
    "RusianHu--GitHubDailyTrendingFetcher-mcp": {
      "owner": "RusianHu",
      "name": "GitHubDailyTrendingFetcher-mcp",
      "url": "https://github.com/RusianHu/GitHubDailyTrendingFetcher-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/RusianHu.webp",
      "description": "Fetches daily trending GitHub repositories with detailed information such as name, link, description, and README content. Supports customization of the number of repositories, proxy settings, and automatic saving of results as Markdown files.",
      "stars": 1,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-17T08:30:52Z",
      "readme_content": "# GitHub Trending MCP\n\n这是一个基于 FastMCP 框架的 GitHub 热门仓库获取工具，可以一次性获取 GitHub 当日的可选个数的热门仓库的详细信息，包括名称、链接、描述和 README 内容。\n这样你就不用一篇一篇的翻README来总结博客了，可以节省AI 的 Tokens 。\n\n## 功能特点\n\n- 获取 GitHub 当日热门仓库列表\n- 支持自定义获取仓库数量\n- 支持代理配置（通过环境变量）\n- 支持将结果保存为 Markdown 文件\n- 自动处理同名文件，避免覆盖\n\n## 安装方法\n\n### 从仓库安装\n\n```bash\n# 使用pip从GitHub仓库安装\npip install git+https://github.com/RusianHu/GitHubDailyTrendingFetcher-mcp.git\n```\n\n### 从本地安装\n\n```bash\n# 克隆仓库\ngit clone https://github.com/RusianHu/GitHubDailyTrendingFetcher-mcp.git\ncd GitHubDailyTrendingFetcher-mcp\n\n# 安装到本地环境\npip install -e .\n```\n\n## 使用方法\n\n### 作为命令行工具运行\n\n安装后，可以直接在命令行中运行：\n\n```bash\n# 使用 Python 模块方式运行（推荐）\npython -m github_trending_mcp\n```\n\n### 作为 MCP 服务集成到 Roo Code\n\n1. 打开 Roo Code 的 MCP 配置文件：\n   ```\n   %APPDATA%\\Code\\User\\globalStorage\\rooveterinaryinc.roo-cline\\settings\\mcp_settings.json\n   ```\n\n2. 添加 GitHub Trending MCP 服务配置：\n   ```json\n   {\n     \"mcpServers\": {\n       // 其他服务配置...\n       \"github-trending-mcp\": {\n         \"command\": \"python\",\n         \"args\": [\n           \"-m\",\n           \"github_trending_mcp\"\n         ],\n         \"alwaysAllow\": [\n           \"get_github_trending\",\n           \"get_proxy_status\"\n         ],\n         \"disabled\": false\n       }\n     }\n   }\n   ```\n\n3. 保存配置文件并重启 Roo Code\n\n## 环境变量配置\n\n可以通过以下环境变量配置代理：\n\n- `PROXY_HOST`: 代理主机地址（默认为 \"127.0.0.1\"）\n- `PROXY_PORT`: 代理端口（默认为 \"10808\"）\n- `PROXY_PROTOCOL`: 代理协议（默认为 \"socks5\"）\n\n### 设置环境变量示例\n\n**Windows PowerShell**：\n```powershell\n$env:PROXY_HOST = \"127.0.0.1\"\n$env:PROXY_PORT = \"10808\"\n$env:PROXY_PROTOCOL = \"socks5\"\n```\n\n**Windows CMD**：\n```cmd\nset PROXY_HOST=127.0.0.1\nset PROXY_PORT=10808\nset PROXY_PROTOCOL=socks5\n```\n\n**Linux/macOS**：\n```bash\nexport PROXY_HOST=127.0.0.1\nexport PROXY_PORT=10808\nexport PROXY_PROTOCOL=socks5\n```\n\n### 在 Roo Code MCP 配置中使用环境变量\n\n```json\n{\n  \"mcpServers\": {\n    \"github-trending-mcp\": {\n      \"command\": \"python\",\n      \"args\": [\n        \"-m\",\n        \"github_trending_mcp\"\n      ],\n      \"env\": {\n        \"PROXY_HOST\": \"127.0.0.1\",\n        \"PROXY_PORT\": \"10808\",\n        \"PROXY_PROTOCOL\": \"socks5\"\n      },\n      \"alwaysAllow\": [\n        \"get_github_trending\",\n        \"get_proxy_status\"\n      ],\n      \"disabled\": false\n    }\n  }\n}\n```\n\n## API 参考\n\n### 工具：get_github_trending\n\n获取 GitHub 当日热门仓库，包括名称、链接、描述和 README 内容。\n\n**参数：**\n- `repo_limit`: 要获取的仓库数量，默认为 5\n- `use_proxy`: 是否使用代理，默认为 False\n- `save_to_file`: 是否保存结果到文件，默认为 True\n\n**返回：**\n- Markdown 格式的热门仓库信息\n\n**示例调用：**\n```json\n{\n  \"repo_limit\": 10,\n  \"use_proxy\": true,\n  \"save_to_file\": true\n}\n```\n\n### 工具：get_proxy_status\n\n获取当前代理配置状态。\n\n**参数：** 无\n\n**返回：**\n- 包含代理配置信息的字典\n\n## 输出示例\n\n下面是一个输出示例：\n\n```\n## GitHub 今日热门仓库 Top 5\n\n### 1. [username/repo-name](https://github.com/username/repo-name)\n**About:** 仓库描述信息\n**README:**\n​```markdown\nREADME 内容...\n​```\n\n### 2. [username2/repo-name2](https://github.com/username2/repo-name2)\n**About:** 仓库描述信息\n**README:**\n​```markdown\nREADME 内容...\n​```\n\n---\n**总输出文本长度:** 12345\n\n报告已保存到: C:\\path\\to\\github_trending_2023-05-01.md\n```\n\n> 注意：实际输出中的代码块会正确显示，这里为了展示嵌套的代码块而做了特殊处理。\n\n## 文件保存\n\n结果将保存为 Markdown 文件，文件名格式为：\n- `github_trending_YYYY-MM-DD.md`\n\n如果同名文件已存在，将自动添加序号：\n- `github_trending_YYYY-MM-DD_1.md`\n- `github_trending_YYYY-MM-DD_2.md`\n- ...\n\n## 注意事项\n\n1. 确保网络连接正常，或配置正确的代理\n2. GitHub 页面结构可能会变化，如果遇到解析错误，可能需要更新解析逻辑\n3. 请遵守 GitHub 的使用条款和爬虫政策\n\n## 许可证\n\n[MIT](LICENSE) © RusianHu\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "githubdailytrendingfetcher",
        "git",
        "trending github",
        "rusianhu githubdailytrendingfetcher",
        "git workflow"
      ],
      "category": "git-workflow-management"
    },
    "Ryan0204--github-repo-mcp": {
      "owner": "Ryan0204",
      "name": "github-repo-mcp",
      "url": "https://github.com/Ryan0204/github-repo-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Ryan0204.webp",
      "description": "Browse and explore public GitHub repositories seamlessly, navigate directories, and view file contents. Interact with repository data effortlessly to enhance AI capabilities.",
      "stars": 15,
      "forks": 7,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-23T03:10:32Z",
      "readme_content": "# GitHub Repo MCP\n\n[![smithery badge](https://smithery.ai/badge/@Ryan0204/github-repo-mcp)](https://smithery.ai/server/@Ryan0204/github-repo-mcp)\n\n<p class=\"center-text\">\n  <strong>GitHub Repo MCP is an open-source MCP server that lets your AI assistants browse GitHub repositories, explore directories, and view file contents.</strong>\n</p>\n\n<a href=\"https://glama.ai/mcp/servers/@Ryan0204/github-repo-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@Ryan0204/github-repo-mcp/badge\" alt=\"github-repo-mcp MCP server\" />\n</a>\n\n## Table of contents\n\n<p class=\"center-text\">\n  <a href=\"#getting-started\">Getting started</a> •\n  <a href=\"#feature-overview\">Feature overview</a>\n</p>\n\n## ✨ Key features\n\n- 💻 Compatible with Cursor, Windsurf, Claude Desktop, and other MCP clients supporting `stdio` protocol\n- 🔎 Browse the contents of any public GitHub repository\n- 📂 Navigate through repository directories and subdirectories\n- 📝 View the content of code and text files\n- 📦 Easy installation via package manager\n\n## Getting Started\n\n### Prerequisites\n\nInstalling the server requires the following on your system:\n- Node.js 18+\n- npm or yarn\n\n### Step 1. Installation\n\nYou can install and run GitHub Repo MCP using Smithery, NPX, or setting in mcp.json of your IDE:\n\n#### MacOS\n\n```bash\nnpx github-repo-mcp\n```\n\n#### Windows NPX\n\n```bash\ncmd /c npx -y github-repo-mcp\n```\n\n#### Windows NPX via .cursor/mcp.json\n\n```json\n{\n  \"mcpServers\": {\n    \"github-repo-mcp\": {\n      \"command\": \"wsl\",\n      \"args\": [\n        \"bash\",\n        \"-c\",\n        \"cmd /c npx -y github-repo-mcp\"\n      ],\n      \"enabled\": true\n    }\n  }\n}\n```\n\n#### Windows NPX via .cursor/mcp.json (if path not set)\n\n```bash\n# Find the full path to npx first\nwhich npx\n```\n\n```json\n{\n  \"mcpServers\": {\n    \"github-repo-mcp\": {\n      \"command\": \"wsl\",\n      \"args\": [\n        \"bash\",\n        \"-c\",\n        \"'/home/[username]/.nvm/versions/node/v20.18.0/bin/npx github-repo-mcp'\"\n      ],\n      \"enabled\": true\n    }\n  }\n}\n```\n\n#### Installing via Smithery\n\nTo install GitHub Repo MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@Ryan0204/github-repo-mcp):\n\n```bash\nnpx -y @smithery/cli install @Ryan0204/github-repo-mcp --client claude\n```\n\n\nWait a few seconds or click on the refresh button a few times if it does not register. If it still won't register, make sure you entered the right command.\n\n### Step 2. Configuration\n\nThe GitHub Repo MCP server can use a GitHub token for higher rate limits when accessing the GitHub API.\n\n#### Environment Variables\n\n| Variable | Required | Default | Description |\n|----------|----------|---------|-------------|\n| `GITHUB_TOKEN` | No | None | Your GitHub personal access token for higher rate limits |\n\n#### Setting Up a GitHub Token (Optional)\n\nWhile the server works without authentication, GitHub API has rate limits that are much lower for unauthenticated requests. To increase your rate limit:\n\n1. Create a personal access token at https://github.com/settings/tokens\n2. Set the token as an environment variable in mcp.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"github-repo-mcp\": {\n      \"command\": \"...\",\n      \"args\": [\n        ...\n      ],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"Your_Github_Token\"\n      }\n      \"enabled\": true,\n    }\n  }\n}\n```\n\n## Feature Overview\n\n### Repository Browsing Tools\n\nThe server provides three main tools for interacting with GitHub repositories:\n\n#### 1. `getRepoAllDirectories`\n\nLists all files and directories at the root of a GitHub repository.\n\n- **Parameters**:\n  - `repoUrl`: The URL of the GitHub repository (e.g., \"https://github.com/owner/repo\")\n\n#### 2. `getRepoDirectories`\n\nLists contents of a specific directory in a GitHub repository.\n\n- **Parameters**:\n  - `repoUrl`: The URL of the GitHub repository\n  - `path`: The directory path to fetch (e.g., \"src\")\n\n#### 3. `getRepoFile`\n\nRetrieves and displays the content of a specific file from a GitHub repository.\n\n- **Parameters**:\n  - `repoUrl`: The URL of the GitHub repository\n  - `path`: The file path to fetch (e.g., \"src/index.js\")\n\n### Usage Examples\n\nHere are some examples of how to use these tools with an AI assistant:\n\n1. **Browsing a repository root**:\n   Ask your AI assistant to \"Show me the contents of the repository at https://github.com/Ryan0204/github-repo-mcp\"\n\n2. **Exploring a specific directory**:\n   Ask \"What files are in the src directory of https://github.com/Ryan0204/github-repo-mcp?\"\n\n3. **Viewing a file**:\n   Ask \"Show me the README.md file from https://github.com/Ryan0204/github-repo-mcp\"\n\n### Limitations\n\n- **Rate Limiting**: Without authentication, GitHub API has strict rate limits (60 requests per hour)\n- **Private Repositories**: Can only access public repositories unless a token with appropriate permissions is provided\n- **Binary Files**: The server detects common binary file extensions and won't display their contents\n- **Large Files**: GitHub API has limitations on the size of files that can be retrieved\n\n## Troubleshooting\n\nHere are some common issues and their solutions:\n\n- **Rate limit exceeded**: Set up a GitHub token as described in the Configuration section\n- **Command not found**: Ensure the package is installed globally\n- **Connection errors**: Check your internet connection and GitHub API status\n\nIf you encounter any issues, please check the output for error messages or create an issue in the GitHub repository.\n\n---\n\nEnjoy! ☺️ \n",
      "npm_url": "https://www.npmjs.com/package/github-repo-mcp",
      "npm_downloads": 5131,
      "keywords": [
        "github",
        "git",
        "repositories",
        "git workflow",
        "github repositories",
        "github repo"
      ],
      "category": "git-workflow-management"
    },
    "Sheshiyer--git-mcp-v2": {
      "owner": "Sheshiyer",
      "name": "git-mcp-v2",
      "url": "https://github.com/Sheshiyer/git-mcp-v2",
      "imageUrl": "/freedevtools/mcp/pfp/Sheshiyer.webp",
      "description": "Provides enhanced Git operations through a standardized interface for AI assistants, enabling efficient management of repositories, branches, tags, and remote interactions.",
      "stars": 6,
      "forks": 8,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-24T18:43:38Z",
      "readme_content": "# Git MCP Server\n\nA Model Context Protocol (MCP) server that provides enhanced Git operations through a standardized interface. This server integrates with the MCP ecosystem to provide Git functionality to AI assistants.\n\n## Features\n\n- **Core Git Operations**: init, clone, status, add, commit, push, pull\n- **Branch Management**: list, create, delete, checkout\n- **Tag Operations**: list, create, delete\n- **Remote Management**: list, add, remove\n- **Stash Operations**: list, save, pop\n- **Bulk Actions**: Execute multiple Git operations in sequence\n- **GitHub Integration**: Built-in GitHub support via Personal Access Token\n- **Path Resolution**: Smart path handling with optional default path configuration\n- **Error Handling**: Comprehensive error handling with custom error types\n- **Repository Caching**: Efficient repository state management\n- **Performance Monitoring**: Built-in performance tracking\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/yourusername/git-mcp-v2.git\ncd git-mcp-v2\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the project:\n```bash\nnpm run build\n```\n\n## Configuration\n\nAdd to your MCP settings file:\n\n```json\n{\n  \"mcpServers\": {\n    \"git-v2\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/git-mcp-v2/build/index.js\"],\n      \"env\": {\n        \"GIT_DEFAULT_PATH\": \"/path/to/default/git/directory\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"your-github-pat\"\n      }\n    }\n  }\n}\n```\n\n## Environment Variables\n\n- `GIT_DEFAULT_PATH`: (Optional) Default path for Git operations\n- `GITHUB_PERSONAL_ACCESS_TOKEN`: (Optional) GitHub Personal Access Token for GitHub operations\n\n## Available Tools\n\n### Basic Operations\n- `init`: Initialize a new Git repository\n- `clone`: Clone a repository\n- `status`: Get repository status\n- `add`: Stage files\n- `commit`: Create a commit\n- `push`: Push commits to remote\n- `pull`: Pull changes from remote\n\n### Branch Operations\n- `branch_list`: List all branches\n- `branch_create`: Create a new branch\n- `branch_delete`: Delete a branch\n- `checkout`: Switch branches or restore working tree files\n\n### Tag Operations\n- `tag_list`: List tags\n- `tag_create`: Create a tag\n- `tag_delete`: Delete a tag\n\n### Remote Operations\n- `remote_list`: List remotes\n- `remote_add`: Add a remote\n- `remote_remove`: Remove a remote\n\n### Stash Operations\n- `stash_list`: List stashes\n- `stash_save`: Save changes to stash\n- `stash_pop`: Apply and remove a stash\n\n### Bulk Operations\n- `bulk_action`: Execute multiple Git operations in sequence\n\n## Development\n\n```bash\n# Run tests\nnpm test\n\n# Run tests with coverage\nnpm run test:coverage\n\n# Run linter\nnpm run lint\n\n# Format code\nnpm run format\n```\n\n## License\n\nMIT\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "workflow",
        "repositories",
        "git workflow",
        "git operations",
        "enhanced git"
      ],
      "category": "git-workflow-management"
    },
    "Shougakusei--plan_pr_mcp": {
      "owner": "Shougakusei",
      "name": "plan_pr_mcp",
      "url": "https://github.com/Shougakusei/plan_pr_mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Shougakusei.webp",
      "description": "Automates the creation of pull requests and code generation by leveraging AI for task planning and code synthesis. Integrates seamlessly with GitHub to enhance development workflows through AI-driven productivity enhancements.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-05-03T03:29:47Z",
      "readme_content": "# AI Pull Request Generator\n\nAn AI-powered tool for automating pull request creation and code generation using FastMCP framework.\n\n## Features\n\n- Task planning using AI (GPT-4)\n- Code generation based on plans\n- Automated GitHub pull request creation\n- Integration with FastMCP framework\n\n## Requirements\n\n- Python 3.8+\n- GitHub token with repository access\n- OpenAI API key\n- Required Python packages (see requirements.txt)\n\n## Setup\n\n1. Install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n2. Set up environment variables:\nCreate a `.env` file with the following variables:\n```\nGITHUB_TOKEN=your_github_token\nAPI_KEY=your_openai_api_key\nAPI_BASE=your_api_base_url\n```\n\n## Usage\n\nThe tool provides three main functions:\n\n1. Task Planning\n```python\nawait task_planning(task_file=\"path/to/task.txt\", plan_file=\"path/to/plan.txt\")\n```\n\n2. Code Generation\n```python\nawait code_for_plan(plan_file=\"path/to/plan.txt\", code_file=\"path/to/code.py\")\n```\n\n3. Pull Request Creation\n```python\nawait create_github_pull_request(\n    repository=\"owner/repo\",\n    branch_name=\"feature-branch\",\n    file_path=\"path/to/file.py\",\n    file_content=\"your code\",\n    commit_message=\"feat: add new feature\",\n    title=\"Add new feature\",\n    body=\"Description of changes\",\n    base_branch=\"main\"\n)\n```\n\n## Development\n\nThe tool uses FastMCP framework for communication and runs as a server. To run locally:\n\n```bash\npython pull-request.py\n```\n\n## License\n\nMIT License\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a pull request.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "workflows",
        "github",
        "git workflow",
        "development workflows",
        "workflows ai"
      ],
      "category": "git-workflow-management"
    },
    "SiddheshDongare--GIT-Pilot": {
      "owner": "SiddheshDongare",
      "name": "GIT-Pilot",
      "url": "https://github.com/SiddheshDongare/GIT-Pilot",
      "imageUrl": "/freedevtools/mcp/pfp/SiddheshDongare.webp",
      "description": "Automate GitHub repository management, issue tracking, and pull request handling through a comprehensive API wrapper. It includes features for secure authentication, rate limit management, and error handling.",
      "stars": 4,
      "forks": 1,
      "license": "GNU General Public License v3.0",
      "language": "Python",
      "updated_at": "2025-06-17T08:20:30Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/siddheshdongare-git-pilot-badge.png)](https://mseep.ai/app/siddheshdongare-git-pilot)\n\n# GIT-Pilot\n\n<div align=\"center\">\n  <img src=\"images/logo.jpg\" alt=\"GIT-Pilot Logo\" width=\"200\"/>\n</div>\n\n[![Python Version](https://img.shields.io/badge/python-3.12%2B-blue)](https://www.python.org/downloads/)\n[![License](https://img.shields.io/badge/license-MIT-green)](LICENSE)\n[![GitHub](https://img.shields.io/badge/GitHub-GIT--Pilot-blue)](https://github.com/yourusername/GIT-Pilot)\n\n<div align=\"center\">\n  <h3>⭐️ If you find this project helpful, please give it a star! ⭐️</h3>\n</div>\n\nGIT-Pilot is a powerful GitHub automation and management tool that provides a comprehensive API wrapper for GitHub operations. It simplifies GitHub interactions through a FastMCP-based server, making it easy to manage repositories, pull requests, issues, and more.\n\n## 🌟 Features\n\n### 🔐 Authentication & Security\n- Secure token management with encryption using Fernet\n- Token expiration and automatic cleanup\n- Rate limit handling and automatic retries\n- Configurable authentication timeouts\n\n### 📦 Repository Management\n- Create and manage repositories\n- Handle branches and commits\n- File operations (create, update, delete)\n- Repository search and filtering\n- Commit comparison and history\n\n### 🔄 Pull Request Operations\n- Create and manage pull requests\n- Merge strategies (merge, squash, rebase)\n- Status check validation\n- Conflict detection and handling\n- Draft PR support\n\n### 📝 Issue Management\n- Create and update issues\n- Label management\n- Assignee handling\n- Comment management\n- Issue search and filtering\n\n### 🛠 Technical Features\n- Thread-safe operations\n- Resource management\n- Comprehensive error handling\n- Detailed logging\n- Type safety\n- Configuration management\n- FastMCP server integration\n\n## 🚀 Getting Started\n\n### Prerequisites\n- Python 3.12 or higher\n- GitHub account\n- GitHub Personal Access Token\n- FastMCP CLI (optional)\n\n### Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/yourusername/GIT-Pilot.git\ncd GIT-Pilot\n```\n\n2. Install uv (if not already installed):\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n3. Create and activate a virtual environment:\n```bash\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n```\n\n4. Install the package using uv:\n```bash\nuv pip install -e .\n```\n\n5. Set up environment variables:\nCreate a `.env` file in the project root:\n```env\nGITHUB_TOKEN=your_github_token_here\n```\n\n### Basic Usage\n\n#### Setting Up Claude Desktop Integration\n\n1. Start the GIT-Pilot server:\n```bash\nuv run main.py\n```\n\n2. Download and install [Claude Desktop](https://claude.ai/download)\n\n3. Configure Claude Desktop:\n   - Open Claude Desktop\n   - Go to `File > Settings > Developer > Edit Config`\n   - Add the following configuration:\n```json\n{\n    \"mcpServers\": {\n        \"GIT-Pilot\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"path\\\\to\\\\repo\",\n                \"run\",\n                \"main.py\"\n            ]\n        }\n    }\n}\n```\n4. Restart Claude Desktop\n5. Look for the hammer icon in the chat window - this indicates the MCP server is ready to use\n\n### API Examples\n\n```python\n# Create a repository\nawait call_tool(\"create_repository\",\n    name=\"my-repo\",\n    description=\"My awesome repository\",\n    private=True,\n    has_issues=True,\n    has_wiki=True,\n    has_projects=True,\n    auto_init=True\n)\n\n# Create a pull request\nawait call_tool(\"create_pull_request\",\n    repo_path=\"owner/repo\",\n    title=\"New feature\",\n    head=\"feature-branch\",\n    base=\"main\",\n    body=\"Description of changes\",\n    draft=False\n)\n\n# List commits with filtering\nawait call_tool(\"list_commits\",\n    repo_path=\"owner/repo\",\n    branch=\"main\",\n    author=\"username\",\n    since=\"2024-01-01\",\n    until=\"2024-04-21\",\n    max_results=30\n)\n```\n\n## 🔧 Configuration\n\nThe service can be configured through the `Config` class:\n\n```python\n@dataclass\nclass Config:\n    TOKEN_TTL_HOURS: int = 24\n    MAX_STORED_TOKENS: int = 1000\n    CLEANUP_INTERVAL_SECONDS: int = 3600\n    MAX_RETRIES: int = 3\n    RETRY_DELAY_SECONDS: int = 5\n    MAX_RESULTS_PER_PAGE: int = 100\n    ENCRYPTION_KEY: bytes = Fernet.generate_key()\n```\n\n## 🛡 Security\n\n- Tokens are encrypted at rest using Fernet\n- Automatic token expiration and cleanup\n- Rate limit protection with retries\n- Input validation\n- Comprehensive error handling\n- Secure token cleanup\n\n## 🔄 Rate Limiting\n\nThe service includes built-in rate limit handling:\n- Automatic retry on rate limit\n- Configurable retry attempts\n- Delay between retries\n- Rate limit status logging\n- Exponential backoff\n\n## 🧪 Error Handling\n\nComprehensive error handling for:\n- Authentication failures\n- API errors\n- Rate limits\n- Invalid inputs\n- Resource conflicts\n- Network issues\n- Token validation\n- File operations\n\n## 📈 Logging\n\nDetailed logging with:\n- Timestamp\n- Log level\n- Function name\n- Line number\n- Error details\n- Stack traces\n- Rate limit information\n- Token operations\n\n## 🤝 Contributing\n\nWe welcome contributions! Please follow these steps:\n\n1. Fork the repository\n2. Create a feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a Pull Request\n\n## 📝 License\n\nThis project is licensed under the GNU General Public License v3.0 - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- [PyGithub](https://github.com/PyGithub/PyGithub) for the GitHub API wrapper\n- [FastMCP](https://gofastmcp.com) for the server framework\n- [Fernet](https://cryptography.io/en/latest/fernet/) for secure token encryption\n---\n\nMade with ❤️ by the GIT-Pilot team\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflow",
        "git workflow",
        "automate github",
        "workflow management"
      ],
      "category": "git-workflow-management"
    },
    "Sunwood-ai-labs--aira-mcp-server": {
      "owner": "Sunwood-ai-labs",
      "name": "aira-mcp-server",
      "url": "https://github.com/Sunwood-ai-labs/aira-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Sunwood-ai-labs.webp",
      "description": "Creates commit messages from git staged files, retrieves git status information, and manages Gitflow operations.",
      "stars": 1,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2024-12-22T14:18:28Z",
      "readme_content": "<div align=\"center\">\n  <img src=\"assets/header.svg\" alt=\"Aira MCP Server\" width=\"800\" />\n\n  # aira-mcp-server MCP Server\n\n  <a href=\"README.md\"><img src=\"https://img.shields.io/badge/english-document-white.svg\" alt=\"EN doc\"></a>\n  <a href=\"README.ja.md\"><img src=\"https://img.shields.io/badge/ドキュメント-日本語-white.svg\" alt=\"JA doc\"/></a>\n</div>\n\nA Model Context Protocol server for creating commit messages from git staged files\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Git status information retrieval\n- Commit message creation with conventional commit format\n- Gitflow initialization and management\n- Branch operations (create, merge, list)\n\n<a href=\"https://glama.ai/mcp/servers/dwd1o4okcw\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/dwd1o4okcw/badge\" alt=\"aira-mcp-server MCP server\" /></a>\n\n## 🚀 Features\n\n- 📝 Conventional commit message generation\n- 🌳 Gitflow workflow support\n- 🔍 Git status checking\n- 🔄 Branch management\n\n## 🛠️ Installation\n\n```bash\nnpm install\nnpm run build\n```\n\n## 📖 Usage\n\nConfigure the MCP server in your settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"aira\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/aira-mcp-server/build/index.js\"]\n    }\n  }\n}\n```\n\n## 🔧 Available Tools\n\n### get_status\nRetrieves Git status information.\n\n### create_commit\nCreates and executes a commit for specified files.\n\n### init_gitflow\nInitializes Gitflow.\n\n### create_branch\nCreates a new branch.\n\n### merge_branch\nMerges branches according to Gitflow.\n\n### list_branches\nLists all Gitflow branches.\n\n## 📄 License\n\nMIT License\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "commit",
        "workflow",
        "git workflow",
        "git status",
        "messages git"
      ],
      "category": "git-workflow-management"
    },
    "Sunwood-ai-labs--github-kanban-mcp-server": {
      "owner": "Sunwood-ai-labs",
      "name": "github-kanban-mcp-server",
      "url": "https://github.com/Sunwood-ai-labs/github-kanban-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Sunwood-ai-labs.webp",
      "description": "Manage GitHub issues in a Kanban board format for streamlined task oversight and enhanced collaboration. Automate workflows and visualize project progress using large language models (LLMs).",
      "stars": 6,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-12T08:59:54Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/sunwood-ai-labs-github-kanban-mcp-server-badge.png)](https://mseep.ai/app/sunwood-ai-labs-github-kanban-mcp-server)\n\n<div align=\"center\">\n\n# 🎯 GitHub Kanban MCP Server\n\n<img src=\"https://raw.githubusercontent.com/Sunwood-ai-labs/github-kanban-mcp-server/main/assets/header.svg\" alt=\"GitHub Kanban MCP Server\" width=\"100%\" />\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![TypeScript](https://img.shields.io/badge/TypeScript-4.9.5-blue.svg)](https://www.typescriptlang.org/)\n[![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)](https://nodejs.org/)\n[![npm](https://img.shields.io/badge/npm-9.x-red.svg)](https://www.npmjs.com/)\n\n</div>\n\n## 📋 概要\n\nGitHub Kanban MCP Serverは、GitHubのissueをカンバンボード形式で管理し、LLMのタスク管理を効率化するためのModel Context Protocol（MCP）サーバーです。\n\n## 🚀 特徴\n\n- 🔄 GitHubのissueをカンバン形式で管理\n- 🤖 LLMによる自動タスク管理\n- 📊 プロジェクトの進捗可視化\n- 🔗 GitHubとの完全な統合\n- 💬 タスクへのコメント機能\n\n## 📁 プロジェクト構造\n\n```\nkanban-server/\n├── src/                    # ソースコードディレクトリ\n│   ├── handlers/          # リクエストハンドラー\n│   │   ├── comment-handlers.ts  # コメント関連の処理\n│   │   ├── issue-handlers.ts    # Issue関連の処理\n│   │   ├── label-handlers.ts    # ラベル関連の処理\n│   │   └── tool-handlers.ts     # ツールリクエストの処理\n│   ├── schemas/           # 入力スキーマ定義\n│   │   ├── comment-schemas.ts   # コメント関連のスキーマ\n│   │   └── issue-schemas.ts     # Issue関連のスキーマ\n│   ├── utils/             # ユーティリティ関数\n│   │   ├── error-handler.ts     # エラー処理\n│   │   └── exec.ts             # コマンド実行関連\n│   ├── server.ts          # MCPサーバーの実装\n│   └── types.ts           # 型定義\n├── docs/                  # ドキュメント\n│   └── v0.2.0/           # バージョン別ドキュメント\n└── assets/               # アセットファイル\n```\n\n## 🛠️ インストール\n\n### 前提条件\n\n- Node.js 18.x以上\n- npm 9.x以上\n- GitHub CLI (gh)\n\n```bash\n# パッケージのインストール\nnpm install @sunwood-ai-labs/github-kanban-mcp-server\n\n# GitHub CLIの認証設定\ngh auth login\n```\n\n## ⚙️ 設定\n\nMCPの設定ファイルに以下を追加:\n\n```json\n{\n  \"mcpServers\": {\n    \"github-kanban\": {\n      \"command\": \"github-kanban-mcp-server\"\n    }\n  }\n}\n```\n\n## 🔧 使用可能なツール\n\n### 1. list_issues\nカンバンボードのissue一覧を取得します。\n\n**入力パラメータ:**\n- `repo`: GitHubリポジトリ名（必須）\n- `state`: issueの状態（'open', 'closed', 'all'）\n- `labels`: フィルタリングするラベルの配列\n\n### 2. create_issue\n新しいissueを作成します。\n\n**入力パラメータ:**\n- `repo`: GitHubリポジトリ名（必須）\n- `title`: issueのタイトル（必須）\n- `emoji`: タイトルの先頭に付与する絵文字\n- `body`: issueの本文\n- `labels`: ラベルの配列\n- `assignees`: アサインするユーザーの配列\n\n### 3. update_issue\n既存のissueを更新します。\n\n**入力パラメータ:**\n- `repo`: GitHubリポジトリ名（必須）\n- `issue_number`: issue番号（必須）\n- `title`: 新しいタイトル\n- `emoji`: タイトルの先頭に付与する絵文字\n- `body`: 新しい本文\n- `state`: 新しい状態（'open', 'closed'）\n- `labels`: 新しいラベルの配列\n- `assignees`: 新しいアサインの配列\n\n### 4. add_comment\nタスクにコメントを追加します。\n\n**入力パラメータ:**\n- `repo`: GitHubリポジトリ名（必須）\n- `issue_number`: タスク（Issue）のID（必須）\n- `body`: コメントの内容（Markdown形式対応）（必須）\n- `state`: コメント時に変更するissueの状態（'open', 'closed'）\n\n## 📝 ライセンス\n\nMIT License - [LICENSE](LICENSE)ファイルを参照してください。\n\n## 🤝 コントリビューション\n\n1. このリポジトリをフォーク\n2. 機能ブランチを作成 (`git checkout -b feature/amazing-feature`)\n3. 変更をコミット (`git commit -m '✨ feat: 素晴らしい機能を追加'`)\n4. ブランチにプッシュ (`git push origin feature/amazing-feature`)\n5. プルリクエストを作成\n\n## 📮 フィードバック\n\n問題や提案がありましたら、[Issueを作成](https://github.com/sunwood-ai-labs/github-kanban-mcp-server/issues)してください。\n",
      "npm_url": "https://www.npmjs.com/package/@sunwood-ai-labs/github-kanban-mcp-server",
      "npm_downloads": 3312,
      "keywords": [
        "github",
        "git",
        "workflows",
        "github kanban",
        "git workflow",
        "manage github"
      ],
      "category": "git-workflow-management"
    },
    "Sunwood-ai-labs--gitlab-kanban-mcp-server": {
      "owner": "Sunwood-ai-labs",
      "name": "gitlab-kanban-mcp-server",
      "url": "https://github.com/Sunwood-ai-labs/gitlab-kanban-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Sunwood-ai-labs.webp",
      "description": "Manage GitLab Kanban boards by creating, updating, and deleting tasks through a standardized protocol, enabling efficient project management and seamless integration with applications.",
      "stars": 1,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2024-12-17T10:11:55Z",
      "readme_content": "<div align=\"center\">\n  <img src=\"assets/header.svg\" alt=\"GitLab Kanban MCP\" width=\"800\">\n\n  <div>\n    <a href=\"README.md\"><img src=\"https://img.shields.io/badge/english-document-white.svg\" alt=\"EN doc\"></a>\n    <a href=\"README.ja.md\"><img src=\"https://img.shields.io/badge/ドキュメント-日本語-white.svg\" alt=\"JA doc\"/></a>\n  </div>\n\n  <div>\n    <a href=\"https://gitlab.com\"><img src=\"https://img.shields.io/badge/GitLab-FC6D26?style=for-the-badge&logo=gitlab&logoColor=white\" alt=\"GitLab\"></a>\n    <a href=\"https://www.typescriptlang.org/\"><img src=\"https://img.shields.io/badge/TypeScript-007ACC?style=for-the-badge&logo=typescript&logoColor=white\" alt=\"TypeScript\"></a>\n    <a href=\"https://nodejs.org/\"><img src=\"https://img.shields.io/badge/Node.js-339933?style=for-the-badge&logo=nodedotjs&logoColor=white\" alt=\"Node.js\"></a>\n    <a href=\"https://github.com/modelcontextprotocol/sdk\"><img src=\"https://img.shields.io/badge/MCP_SDK-0.6.0-blue?style=for-the-badge\" alt=\"MCP SDK\"></a>\n    <a href=\"LICENSE\"><img src=\"https://img.shields.io/badge/License-MIT-yellow.svg?style=for-the-badge\" alt=\"MIT License\"></a>\n  </div>\n</div>\n\n# 🎯 GitLab Kanban MCP Server\n\nA Model Context Protocol server for managing GitLab Kanban board operations.\n\n## ✨ Features\n\n### 🛠️ Available Tools\n\n- `list_tasks` - Retrieve task list from project's Kanban board\n- `create_task` - Create a new task on the Kanban board\n- `update_task` - Update an existing task\n- `delete_task` - Delete a task from the board\n- `add_comment` - Add a comment to a task\n\n## 🏗️ Project Structure\n\n```\nsrc/\n├── api/\n│   └── gitlab.ts      # GitLab API client and methods\n├── config/\n│   └── gitlab.ts      # GitLab configuration\n├── tools/\n│   ├── handlers.ts    # Tool handler implementations\n│   └── schemas.ts     # Tool schema definitions\n└── index.ts          # MCP server main entry point\n```\n\n## 🚀 Getting Started\n\n### 📦 Installation\n\n```bash\nnpm install\n```\n\n### 🔧 Configuration\n\nCreate a `.env` file with the following environment variables:\n\n```env\nGITLAB_TOKEN=your_gitlab_token\nGITLAB_URL=your_gitlab_url  # default: https://gitlab.com\n```\n\n### 🛠️ Build\n\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n\n```bash\nnpm run watch\n```\n\n## 🔍 Debugging\n\nSince MCP servers communicate over stdio, we recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector):\n\n```bash\nnpm run inspector\n```\n\n## 📝 Usage\n\n### Cline Configuration\n\nAdd the following to your `cline_mcp_settings.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"gitlab-kanban-mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/gitlab-kanban-mcp-server/build/index.js\"],\n      \"env\": {\n        \"GITLAB_TOKEN\": \"your_gitlab_token\",\n        \"GITLAB_URL\": \"your_gitlab_url\"\n      }\n    }\n  }\n}\n```\n\n## 🤝 Contributing\n\n1. Fork this repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m '✨ feat: Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Create a Pull Request\n\n## 📄 License\n\nThis project is licensed under the MIT License.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gitlab",
        "git",
        "kanban",
        "manage gitlab",
        "git workflow",
        "gitlab kanban"
      ],
      "category": "git-workflow-management"
    },
    "Sunwood-ai-labs--release-notes-generator-iris-mcp-server": {
      "owner": "Sunwood-ai-labs",
      "name": "release-notes-generator-iris-mcp-server",
      "url": "https://github.com/Sunwood-ai-labs/release-notes-generator-iris-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Sunwood-ai-labs.webp",
      "description": "Automatically generates structured release notes by detecting differences between Git repository tags and saves the output in Markdown format. Provides customizable templates for categorizing new features, improvements, and bug fixes to enhance the release documentation process.",
      "stars": 0,
      "forks": 2,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2024-12-18T12:57:52Z",
      "readme_content": "# 🌈 Iris MCP Server\n\n<div align=\"center\">\n  <img src=\"assets/header.svg\" alt=\"Iris MCP Server Header\">\n</div>\n\n## 📝 概要\n\nIris MCP Serverは、Gitリポジトリのタグベースのリリースノートを自動生成するためのModel Context Protocolサーバーです。タグ間の差分を解析し、構造化されたリリースノートを`.iris`ディレクトリに生成します。\n\n## ✨ 特徴\n\n- 🏷️ タグ間の差分を自動検出\n- 📊 カスタマイズ可能なリリースノートテンプレート\n- 🗂️ 新機能、改善項目、バグ修正などのカテゴリ分け\n- 📄 Markdown形式での出力\n- 📁 `.iris`フォルダへの自動保存\n\n## 🚀 インストール\n\n```bash\nnpm install iris-mcp-server\n```\n\n## 💡 使用方法\n\n### リリースノートの生成\n\n```typescript\nconst result = await mcpClient.useTool('iris-mcp-server', 'generate_release_note', {\n  startTag: 'v1.0.0',\n  endTag: 'v1.1.0',\n  title: 'Version 1.1.0 リリース',\n  features: [\n    '新しいダッシュボード機能の追加',\n    'ユーザー管理システムの実装'\n  ],\n  improvements: [\n    'パフォーマンスの最適化',\n    'UIの改善'\n  ],\n  bugfixes: [\n    'ログイン時のエラー修正',\n    'データ同期の問題を解決'\n  ],\n  breaking: [\n    'APIエンドポイントの変更',\n    '設定ファイルのフォーマット更新'\n  ]\n});\n```\n\n## 📄 出力例\n\n```markdown\n# Version 1.1.0 リリース\n\nリリース日: 2024-01-20\n\n## 💥 破壊的変更\n\n- APIエンドポイントの変更\n- 設定ファイルのフォーマット更新\n\n## ✨ 新機能\n\n- 新しいダッシュボード機能の追加\n- ユーザー管理システムの実装\n\n## 🔧 改善項目\n\n- パフォーマンスの最適化\n- UIの改善\n\n## 🐛 バグ修正\n\n- ログイン時のエラー修正\n- データ同期の問題を解決\n\n## 📝 変更されたファイル\n\n- `src/dashboard/index.ts`\n- `src/users/management.ts`\n- `config/settings.json`\n```\n\n## 🛠️ 開発\n\n### ビルド\n\n```bash\nnpm run build\n```\n\n### 開発モード\n\n```bash\nnpm run watch\n```\n\n## 🤝 コントリビューション\n\nプルリクエストやイシューは大歓迎です！以下の手順で貢献できます：\n\n1. このリポジトリをフォーク\n2. 新しいブランチを作成 (`git checkout -b feature/amazing-feature`)\n3. 変更をコミット (`git commit -m '✨ Add amazing feature'`)\n4. ブランチをプッシュ (`git push origin feature/amazing-feature`)\n5. プルリクエストを作成\n\n## 📜 ライセンス\n\nMIT\n\n## 👥 作者\n\n- 作成者: [Your Name]\n- メール: [your.email@example.com]\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "documentation",
        "git",
        "repository",
        "release documentation",
        "release notes",
        "git workflow"
      ],
      "category": "git-workflow-management"
    },
    "Yash-Kavaiya--github-mcp-server": {
      "owner": "Yash-Kavaiya",
      "name": "github-mcp-server",
      "url": "https://github.com/Yash-Kavaiya/github-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Yash-Kavaiya.webp",
      "description": "Integrate directly with GitHub APIs to automate workflows, extract repository data, and create AI-powered tools for interaction within the GitHub ecosystem.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-04-29T09:06:21Z",
      "readme_content": "# GitHub MCP Server\n\nThe GitHub MCP Server is a [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction)\nserver that provides seamless integration with GitHub APIs, enabling advanced\nautomation and interaction capabilities for developers and tools.\n\n[![Install with Docker in VS Code](https://img.shields.io/badge/VS_Code-Install_Server-0098FF?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=github&inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D) [![Install with Docker in VS Code Insiders](https://img.shields.io/badge/VS_Code_Insiders-Install_Server-24bfa5?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=github&inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D&quality=insiders)\n\n## Use Cases\n\n- Automating GitHub workflows and processes.\n- Extracting and analyzing data from GitHub repositories.\n- Building AI powered tools and applications that interact with GitHub's ecosystem.\n\n## Prerequisites\n\n1. To run the server in a container, you will need to have [Docker](https://www.docker.com/) installed.\n2. Once Docker is installed, you will also need to ensure Docker is running. The image is public; if you get errors on pull, you may have an expired token and need to `docker logout ghcr.io`.\n3. Lastly you will need to [Create a GitHub Personal Access Token](https://github.com/settings/personal-access-tokens/new).\nThe MCP server can use many of the GitHub APIs, so enable the permissions that you feel comfortable granting your AI tools (to learn more about access tokens, please check out the [documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens)).\n\n## Installation\n\n### Usage with VS Code\n\nFor quick installation, use one of the one-click install buttons at the top of this README. Once you complete that flow, toggle Agent mode (located by the Copilot Chat text input) and the server will start.\n\nFor manual installation, add the following JSON block to your User Settings (JSON) file in VS Code. You can do this by pressing `Ctrl + Shift + P` and typing `Preferences: Open User Settings (JSON)`.\n\n```json\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"github_token\",\n        \"description\": \"GitHub Personal Access Token\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"github\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"-i\",\n          \"--rm\",\n          \"-e\",\n          \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n          \"ghcr.io/github/github-mcp-server\"\n        ],\n        \"env\": {\n          \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"${input:github_token}\"\n        }\n      }\n    }\n  }\n}\n```\n\nOptionally, you can add a similar example (i.e. without the mcp key) to a file called `.vscode/mcp.json` in your workspace. This will allow you to share the configuration with others.\n\n\n```json\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"github_token\",\n      \"description\": \"GitHub Personal Access Token\",\n      \"password\": true\n    }\n  ],\n  \"servers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"ghcr.io/github/github-mcp-server\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"${input:github_token}\"\n      }\n    }\n  }\n}\n\n```\n\nMore about using MCP server tools in VS Code's [agent mode documentation](https://code.visualstudio.com/docs/copilot/chat/mcp-servers).\n\n### Usage with Claude Desktop\n\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"ghcr.io/github/github-mcp-server\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n### Build from source\n\nIf you don't have Docker, you can use `go build` to build the binary in the\n`cmd/github-mcp-server` directory, and use the `github-mcp-server stdio` command with the `GITHUB_PERSONAL_ACCESS_TOKEN` environment variable set to your token. To specify the output location of the build, use the `-o` flag. You should configure your server to use the built executable as its `command`. For example:\n\n```JSON\n{\n  \"mcp\": {\n    \"servers\": {\n      \"github\": {\n        \"command\": \"/path/to/github-mcp-server\",\n        \"args\": [\"stdio\"],\n        \"env\": {\n          \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n        }\n      }\n    }\n  }\n}\n```\n\n## Tool Configuration\n\nThe GitHub MCP Server supports enabling or disabling specific groups of functionalities via the `--toolsets` flag. This allows you to control which GitHub API capabilities are available to your AI tools. Enabling only the toolsets that you need can help the LLM with tool choice and reduce the context size.\n\n### Available Toolsets\n\nThe following sets of tools are available (all are on by default):\n\n| Toolset                 | Description                                                   |\n| ----------------------- | ------------------------------------------------------------- |\n| `repos`                 | Repository-related tools (file operations, branches, commits) |\n| `issues`                | Issue-related tools (create, read, update, comment)           |\n| `users`                 | Anything relating to GitHub Users                             |\n| `pull_requests`         | Pull request operations (create, merge, review)               |\n| `code_security`         | Code scanning alerts and security features                    |\n| `experiments`           | Experimental features (not considered stable)                 |\n\n#### Specifying Toolsets\n\nTo specify toolsets you want available to the LLM, you can pass an allow-list in two ways:\n\n1. **Using Command Line Argument**:\n\n   ```bash\n   github-mcp-server --toolsets repos,issues,pull_requests,code_security\n   ```\n\n2. **Using Environment Variable**:\n   ```bash\n   GITHUB_TOOLSETS=\"repos,issues,pull_requests,code_security\" ./github-mcp-server\n   ```\n\nThe environment variable `GITHUB_TOOLSETS` takes precedence over the command line argument if both are provided.\n\n### Using Toolsets With Docker\n\nWhen using Docker, you can pass the toolsets as environment variables:\n\n```bash\ndocker run -i --rm \\\n  -e GITHUB_PERSONAL_ACCESS_TOKEN=<your-token> \\\n  -e GITHUB_TOOLSETS=\"repos,issues,pull_requests,code_security,experiments\" \\\n  ghcr.io/github/github-mcp-server\n```\n\n### The \"all\" Toolset\n\nThe special toolset `all` can be provided to enable all available toolsets regardless of any other configuration:\n\n```bash\n./github-mcp-server --toolsets all\n```\n\nOr using the environment variable:\n\n```bash\nGITHUB_TOOLSETS=\"all\" ./github-mcp-server\n```\n\n## Dynamic Tool Discovery\n\n**Note**: This feature is currently in beta and may not be available in all environments. Please test it out and let us know if you encounter any issues.\n\nInstead of starting with all tools enabled, you can turn on dynamic toolset discovery. Dynamic toolsets allow the MCP host to list and enable toolsets in response to a user prompt. This should help to avoid situations where the model gets confused by the shear number of tools available.\n\n### Using Dynamic Tool Discovery\n\nWhen using the binary, you can pass the `--dynamic-toolsets` flag.\n\n```bash\n./github-mcp-server --dynamic-toolsets\n```\n\nWhen using Docker, you can pass the toolsets as environment variables:\n\n```bash\ndocker run -i --rm \\\n  -e GITHUB_PERSONAL_ACCESS_TOKEN=<your-token> \\\n  -e GITHUB_DYNAMIC_TOOLSETS=1 \\\n  ghcr.io/github/github-mcp-server\n```\n\n## GitHub Enterprise Server\n\nThe flag `--gh-host` and the environment variable `GITHUB_HOST` can be used to set\nthe GitHub Enterprise Server hostname.\n\n## i18n / Overriding Descriptions\n\nThe descriptions of the tools can be overridden by creating a\n`github-mcp-server-config.json` file in the same directory as the binary.\n\nThe file should contain a JSON object with the tool names as keys and the new\ndescriptions as values. For example:\n\n```json\n{\n  \"TOOL_ADD_ISSUE_COMMENT_DESCRIPTION\": \"an alternative description\",\n  \"TOOL_CREATE_BRANCH_DESCRIPTION\": \"Create a new branch in a GitHub repository\"\n}\n```\n\nYou can create an export of the current translations by running the binary with\nthe `--export-translations` flag.\n\nThis flag will preserve any translations/overrides you have made, while adding\nany new translations that have been added to the binary since the last time you\nexported.\n\n```sh\n./github-mcp-server --export-translations\ncat github-mcp-server-config.json\n```\n\nYou can also use ENV vars to override the descriptions. The environment\nvariable names are the same as the keys in the JSON file, prefixed with\n`GITHUB_MCP_` and all uppercase.\n\nFor example, to override the `TOOL_ADD_ISSUE_COMMENT_DESCRIPTION` tool, you can\nset the following environment variable:\n\n```sh\nexport GITHUB_MCP_TOOL_ADD_ISSUE_COMMENT_DESCRIPTION=\"an alternative description\"\n```\n\n## Tools\n\n### Users\n\n- **get_me** - Get details of the authenticated user\n  - No parameters required\n\n### Issues\n\n- **get_issue** - Gets the contents of an issue within a repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number (number, required)\n\n- **get_issue_comments** - Get comments for a GitHub issue\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number (number, required)\n\n- **create_issue** - Create a new issue in a GitHub repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `title`: Issue title (string, required)\n  - `body`: Issue body content (string, optional)\n  - `assignees`: Usernames to assign to this issue (string[], optional)\n  - `labels`: Labels to apply to this issue (string[], optional)\n\n- **add_issue_comment** - Add a comment to an issue\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number (number, required)\n  - `body`: Comment text (string, required)\n\n- **list_issues** - List and filter repository issues\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `state`: Filter by state ('open', 'closed', 'all') (string, optional)\n  - `labels`: Labels to filter by (string[], optional)\n  - `sort`: Sort by ('created', 'updated', 'comments') (string, optional)\n  - `direction`: Sort direction ('asc', 'desc') (string, optional)\n  - `since`: Filter by date (ISO 8601 timestamp) (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **update_issue** - Update an existing issue in a GitHub repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number to update (number, required)\n  - `title`: New title (string, optional)\n  - `body`: New description (string, optional)\n  - `state`: New state ('open' or 'closed') (string, optional)\n  - `labels`: New labels (string[], optional)\n  - `assignees`: New assignees (string[], optional)\n  - `milestone`: New milestone number (number, optional)\n\n- **search_issues** - Search for issues and pull requests\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n### Pull Requests\n\n- **get_pull_request** - Get details of a specific pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **list_pull_requests** - List and filter repository pull requests\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `state`: PR state (string, optional)\n  - `sort`: Sort field (string, optional)\n  - `direction`: Sort direction (string, optional)\n  - `perPage`: Results per page (number, optional)\n  - `page`: Page number (number, optional)\n\n- **merge_pull_request** - Merge a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n  - `commit_title`: Title for the merge commit (string, optional)\n  - `commit_message`: Message for the merge commit (string, optional)\n  - `merge_method`: Merge method (string, optional)\n\n- **get_pull_request_files** - Get the list of files changed in a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **get_pull_request_status** - Get the combined status of all status checks for a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **update_pull_request_branch** - Update a pull request branch with the latest changes from the base branch\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n  - `expectedHeadSha`: The expected SHA of the pull request's HEAD ref (string, optional)\n\n- **get_pull_request_comments** - Get the review comments on a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **get_pull_request_reviews** - Get the reviews on a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **create_pull_request_review** - Create a review on a pull request review\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n  - `body`: Review comment text (string, optional)\n  - `event`: Review action ('APPROVE', 'REQUEST_CHANGES', 'COMMENT') (string, required)\n  - `commitId`: SHA of commit to review (string, optional)\n  - `comments`: Line-specific comments array of objects to place comments on pull request changes (array, optional)\n    - For inline comments: provide `path`, `position` (or `line`), and `body`\n    - For multi-line comments: provide `path`, `start_line`, `line`, optional `side`/`start_side`, and `body`\n\n- **create_pull_request** - Create a new pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `title`: PR title (string, required)\n  - `body`: PR description (string, optional)\n  - `head`: Branch containing changes (string, required)\n  - `base`: Branch to merge into (string, required)\n  - `draft`: Create as draft PR (boolean, optional)\n  - `maintainer_can_modify`: Allow maintainer edits (boolean, optional)\n\n- **add_pull_request_review_comment** - Add a review comment to a pull request or reply to an existing comment\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pull_number`: Pull request number (number, required)\n  - `body`: The text of the review comment (string, required)\n  - `commit_id`: The SHA of the commit to comment on (string, required unless using in_reply_to)\n  - `path`: The relative path to the file that necessitates a comment (string, required unless using in_reply_to)\n  - `line`: The line of the blob in the pull request diff that the comment applies to (number, optional)\n  - `side`: The side of the diff to comment on (LEFT or RIGHT) (string, optional)\n  - `start_line`: For multi-line comments, the first line of the range (number, optional)\n  - `start_side`: For multi-line comments, the starting side of the diff (LEFT or RIGHT) (string, optional)\n  - `subject_type`: The level at which the comment is targeted (line or file) (string, optional)\n  - `in_reply_to`: The ID of the review comment to reply to (number, optional). When specified, only body is required and other parameters are ignored.\n\n- **update_pull_request** - Update an existing pull request in a GitHub repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number to update (number, required)\n  - `title`: New title (string, optional)\n  - `body`: New description (string, optional)\n  - `state`: New state ('open' or 'closed') (string, optional)\n  - `base`: New base branch name (string, optional)\n  - `maintainer_can_modify`: Allow maintainer edits (boolean, optional)\n\n### Repositories\n\n- **create_or_update_file** - Create or update a single file in a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `path`: File path (string, required)\n  - `message`: Commit message (string, required)\n  - `content`: File content (string, required)\n  - `branch`: Branch name (string, optional)\n  - `sha`: File SHA if updating (string, optional)\n\n- **list_branches** - List branches in a GitHub repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **push_files** - Push multiple files in a single commit\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `branch`: Branch to push to (string, required)\n  - `files`: Files to push, each with path and content (array, required)\n  - `message`: Commit message (string, required)\n\n- **search_repositories** - Search for GitHub repositories\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **create_repository** - Create a new GitHub repository\n  - `name`: Repository name (string, required)\n  - `description`: Repository description (string, optional)\n  - `private`: Whether the repository is private (boolean, optional)\n  - `autoInit`: Auto-initialize with README (boolean, optional)\n\n- **get_file_contents** - Get contents of a file or directory\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `path`: File path (string, required)\n  - `ref`: Git reference (string, optional)\n\n- **fork_repository** - Fork a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `organization`: Target organization name (string, optional)\n\n- **create_branch** - Create a new branch\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `branch`: New branch name (string, required)\n  - `sha`: SHA to create branch from (string, required)\n\n- **list_commits** - Get a list of commits of a branch in a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `sha`: Branch name, tag, or commit SHA (string, optional)\n  - `path`: Only commits containing this file path (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **get_commit** - Get details for a commit from a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `sha`: Commit SHA, branch name, or tag name (string, required)\n  - `page`: Page number, for files in the commit (number, optional)\n  - `perPage`: Results per page, for files in the commit (number, optional)\n\n- **search_code** - Search for code across GitHub repositories\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n### Users\n\n- **search_users** - Search for GitHub users\n  - `q`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n### Code Scanning\n\n- **get_code_scanning_alert** - Get a code scanning alert\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `alertNumber`: Alert number (number, required)\n\n- **list_code_scanning_alerts** - List code scanning alerts for a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `ref`: Git reference (string, optional)\n  - `state`: Alert state (string, optional)\n  - `severity`: Alert severity (string, optional)\n  - `tool_name`: The name of the tool used for code scanning (string, optional)\n\n### Secret Scanning\n\n- **get_secret_scanning_alert** - Get a secret scanning alert\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `alertNumber`: Alert number (number, required)\n\n- **list_secret_scanning_alerts** - List secret scanning alerts for a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `state`: Alert state (string, optional)\n  - `secret_type`: The secret types to be filtered for in a comma-separated list (string, optional)\n  - `resolution`: The resolution status (string, optional)\n\n## Resources\n\n### Repository Content\n\n- **Get Repository Content**\n  Retrieves the content of a repository at a specific path.\n\n  - **Template**: `repo://{owner}/{repo}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Branch**\n  Retrieves the content of a repository at a specific path for a given branch.\n\n  - **Template**: `repo://{owner}/{repo}/refs/heads/{branch}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `branch`: Branch name (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Commit**\n  Retrieves the content of a repository at a specific path for a given commit.\n\n  - **Template**: `repo://{owner}/{repo}/sha/{sha}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `sha`: Commit SHA (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Tag**\n  Retrieves the content of a repository at a specific path for a given tag.\n\n  - **Template**: `repo://{owner}/{repo}/refs/tags/{tag}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `tag`: Tag name (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Pull Request**\n  Retrieves the content of a repository at a specific path for a given pull request.\n\n  - **Template**: `repo://{owner}/{repo}/refs/pull/{prNumber}/head/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `prNumber`: Pull request number (string, required)\n    - `path`: File or directory path (string, optional)\n\n## Library Usage\n\nThe exported Go API of this module should currently be considered unstable, and subject to breaking changes. In the future, we may offer stability; please file an issue if there is a use case where this would be valuable.\n\n## License\n\nThis project is licensed under the terms of the MIT open source license. Please refer to [MIT](./LICENSE) for the full terms.\n",
      "npm_url": "https://www.npmjs.com/package/github-mcp-server",
      "npm_downloads": 15187,
      "keywords": [
        "github",
        "git",
        "workflows",
        "git workflow",
        "github ecosystem",
        "github apis"
      ],
      "category": "git-workflow-management"
    },
    "ZephyrDeng--mcp-server-gitlab": {
      "owner": "ZephyrDeng",
      "name": "mcp-server-gitlab",
      "url": "https://github.com/ZephyrDeng/mcp-server-gitlab",
      "imageUrl": "/freedevtools/mcp/pfp/ZephyrDeng.webp",
      "description": "Integrate with GitLab to manage projects, tasks, and merge requests while automating interactions using GitLab's RESTful APIs.",
      "stars": 5,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T08:36:29Z",
      "readme_content": "[中文版](./README.md)\n\n![](https://badge.mcpx.dev?type=server&features=tools 'MCP server with tools') [![Build Status](https://github.com/ZephyrDeng/mcp-server-gitlab/actions/workflows/ci.yml/badge.svg)](https://github.com/ZephyrDeng/mcp-server-gitlab/actions) [![Node Version](https://img.shields.io/node/v/@zephyr-mcp/gitlab)](https://nodejs.org) [![License](https://img.shields.io/badge/license-MIT-blue)](./LICENSE)\n\n[![Downloads](https://img.shields.io/npm/dm/@zephyr-mcp/gitlab)](https://npmjs.com/package/@zephyr-mcp/gitlab) [![npm version](https://img.shields.io/npm/v/@zephyr-mcp/gitlab)](https://npmjs.com/package/@zephyr-mcp/gitlab) [![smithery badge](https://smithery.ai/badge/@ZephyrDeng/mcp-server-gitlab)](https://smithery.ai/server/@ZephyrDeng/mcp-server-gitlab)\n\n\n\n<a href=\"https://glama.ai/mcp/servers/@ZephyrDeng/mcp-server-gitlab\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@ZephyrDeng/mcp-server-gitlab/badge\" />\n</a>\n\n# mcp-gitlab MCP Server (English)\n\nA GitLab integration server built on the fastmcp framework, providing various GitLab RESTful API tools. Supports integration with Claude, Smithery, and other platforms.\n\n## Features\n\n- **GitlabSearchUserProjectsTool**: Search users and their active projects by username\n- **GitlabGetUserTasksTool**: Get current user's pending tasks\n- **GitlabSearchProjectDetailsTool**: Search projects and details\n- **GitlabCreateMRCommentTool**: Add comments to merge requests\n- **GitlabAcceptMRTool**: Accept and merge merge requests\n- **GitlabUpdateMRTool**: Update merge request assignee, reviewers, title, description, and labels\n- **GitlabCreateMRTool**: Create a new merge request with assignee and reviewers\n- **GitlabRawApiTool**: Call any GitLab API with custom parameters\n\n## Quick Start\n\n### Stdio Mode (Default)\n```bash\n# Install dependencies\nbun install\n\n# Build the project\nbun run build\n\n# Start the server with stdio transport (default)\nbun run start\n```\n\n### HTTP Stream Mode (Server Deployment)\n```bash\n# Install dependencies\nbun install\n\n# Build the project\nbun run build\n\n# Start the server with HTTP stream transport\nMCP_TRANSPORT_TYPE=httpStream MCP_PORT=3000 bun run start\n\n# Or using command line flag\nbun dist/index.js --http-stream\n```\n\n## Environment Variables\n\n```env\nGITLAB_API_URL=https://your-gitlab-instance.com\nGITLAB_TOKEN=your_access_token\n\n# Optional: Provide a mapping from usernames to user IDs (JSON string)\n# This can reduce API calls, especially when referencing the same users frequently\n# Example: '{\"username1\": 123, \"username2\": 456}'\nGITLAB_USER_MAPPING={\"username1\": 123, \"username2\": 456}\n\n# Optional: Provide a mapping from project names to project IDs (JSON string)\n# Project IDs can be numbers or strings (e.g., 'group/project')\n# This can reduce API calls and ensure the correct project is used\n# Example: '{\"project-name-a\": 1001, \"group/project-b\": \"group/project-b\"}'\nGITLAB_PROJECT_MAPPING={\"project-name-a\": 1001, \"group/project-b\": \"group/project-b\"}\n\n# MCP Transport Configuration (Optional)\n# Transport type: stdio (default) or httpStream  \nMCP_TRANSPORT_TYPE=stdio\n\n# HTTP Stream Configuration (Only used when MCP_TRANSPORT_TYPE=httpStream)\n# Server binding address (default: 0.0.0.0 for httpStream, localhost for stdio)\n# For Docker deployments, use 0.0.0.0 to allow external access\nMCP_HOST=0.0.0.0\n\n# Server port (default: 3000)\nMCP_PORT=3000\n\n# API endpoint path (default: /mcp)\nMCP_ENDPOINT=/mcp\n```\n\n## Usage Examples\n\nSee [USAGE.md](./USAGE.md) for detailed examples of each tool's parameters.\n\n## Transport Modes\n\nThis server supports two transport modes:\n\n### 1. Stdio Transport (Default)\n- Best for local development and direct integration with MCP clients\n- Uses stdin/stdout for communication\n- No network configuration needed\n\n### 2. HTTP Stream Transport\n- Enables server deployment for remote access\n- Uses HTTP POST requests with streaming responses\n- Allows multiple clients to connect to the same server instance\n- Ideal for production deployments\n\nWhen using HTTP Stream mode, clients can connect to:\n```\nPOST http://localhost:3000/mcp\nContent-Type: application/json\n```\n\n## Project Structure\n\n```\nsrc/\n├── server/\n│   └── GitlabMCPServer.ts          # MCP server entry point\n├── tools/\n│   ├── GitlabAcceptMRTool.ts\n│   ├── GitlabCreateMRCommentTool.ts\n│   ├── GitlabGetUserTasksTool.ts\n│   ├── GitlabRawApiTool.ts\n│   ├── GitlabSearchProjectDetailsTool.ts\n│   ├── GitlabSearchUserProjectsTool.ts\n│   └── gitlab/\n│       ├── FieldFilterUtils.ts\n│       ├── GitlabApiClient.ts\n│       └── GitlabApiTypes.ts\n├── utils/\n│   ├── is.ts\n│   └── sensitive.ts\nsmithery.json                      # Smithery config\nUSAGE.md                          # Usage examples\npackage.json\ntsconfig.json\n```\n\n## Integration\n\n### Claude Desktop Client\n\n#### Stdio Mode (Default)\nAdd to your config:\n\n```json\n{\n  \"mcpServers\": {\n    \"@zephyr-mcp/gitlab\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@zephyr-mcp/gitlab\"]\n    }\n  }\n}\n```\n\n#### HTTP Stream Mode (Server Deployment)\nFor remote server deployment, first start the server:\n\n```bash\n# On your server\nMCP_TRANSPORT_TYPE=httpStream MCP_PORT=3000 npx @zephyr-mcp/gitlab\n```\n\nThen configure Claude Desktop with HTTP transport:\n\n```json\n{\n  \"mcpServers\": {\n    \"@zephyr-mcp/gitlab\": {\n      \"command\": \"npx\",\n      \"args\": [\"@modelcontextprotocol/client-cli\", \"http://your-server:3000/mcp\"]\n    }\n  }\n}\n```\n\n### Smithery\n\nUse directly on Smithery platform:\n\n```bash\nsmithery add @zephyr-mcp/gitlab\n```\n\nOr search \"@zephyr-mcp/gitlab\" in Smithery UI and add to your workspace.\n\nEnvironment variables:\n\n- `GITLAB_API_URL`: Base URL of your GitLab API\n- `GITLAB_TOKEN`: Access token for GitLab API authentication\n- `MCP_TRANSPORT_TYPE`: Transport type (stdio/httpStream)\n- `MCP_HOST`: Server binding address for HTTP stream mode\n- `MCP_PORT`: HTTP port for HTTP stream mode\n- `MCP_ENDPOINT`: HTTP endpoint path for HTTP stream mode\n\n## Deployment\n\n### Docker Deployment\n\nThe repository includes a Dockerfile for easy deployment:\n\n```bash\n# Build the Docker image\ndocker build -t gitlab-mcp-server .\n\n# Run with environment variables\ndocker run -d \\\n  -p 3000:3000 \\\n  -e GITLAB_API_URL=https://your-gitlab-instance.com \\\n  -e GITLAB_TOKEN=your_access_token \\\n  -e MCP_TRANSPORT_TYPE=httpStream \\\n  -e MCP_HOST=0.0.0.0 \\\n  -e MCP_PORT=3000 \\\n  gitlab-mcp-server\n```\n\n#### Docker Compose Example\n\n```yaml\nservices:\n  gitlab-mcp:\n    image: node:22.14.0\n    container_name: gitlab-mcp\n    ports:\n      - \"3000:3000\"\n    environment:\n      - GITLAB_TOKEN=your_gitlab_token\n      - GITLAB_API_URL=your-gitlab-instance.com\n      - MCP_TRANSPORT_TYPE=httpStream\n      - MCP_HOST=0.0.0.0\n      - MCP_PORT=3000\n    command: npx -y @zephyr-mcp/gitlab@latest\n```\n\n**Important for Docker:** When running in Docker containers, make sure to set `MCP_HOST=0.0.0.0` to allow external access. The default value for httpStream transport is already `0.0.0.0`, but setting it explicitly ensures compatibility.\n\n### Manual Deployment\n\n```bash\n# Install dependencies and build\nnpm install\nnpm run build\n\n# Start the server in HTTP stream mode\nexport GITLAB_API_URL=https://your-gitlab-instance.com\nexport GITLAB_TOKEN=your_access_token\nexport MCP_TRANSPORT_TYPE=httpStream\nexport MCP_PORT=3000\n\n# Run the server\nnode dist/index.js\n```\n\n### Process Manager (PM2)\n\n```bash\n# Install PM2\nnpm install -g pm2\n\n# Create ecosystem file\ncat > ecosystem.config.js << EOF\nmodule.exports = {\n  apps: [{\n    name: 'gitlab-mcp-server',\n    script: 'dist/index.js',\n    env: {\n      GITLAB_API_URL: 'https://your-gitlab-instance.com',\n      GITLAB_TOKEN: 'your_access_token',\n      MCP_TRANSPORT_TYPE: 'httpStream',\n      MCP_PORT: 3000\n    }\n  }]\n}\nEOF\n\n# Start with PM2\npm2 start ecosystem.config.js\npm2 save\npm2 startup\n```\n\n## Related Links\n\n- [fastmcp](https://github.com/punkpeye/fastmcp)\n- [Smithery](https://smithery.ai/docs)\n- [GitLab API](https://docs.gitlab.com/ee/api/rest/)",
      "npm_url": "https://www.npmjs.com/package/mcp-server-gitlab",
      "npm_downloads": 0,
      "keywords": [
        "gitlab",
        "git",
        "workflow",
        "gitlab manage",
        "using gitlab",
        "server gitlab"
      ],
      "category": "git-workflow-management"
    },
    "a1351995160--gitskills": {
      "owner": "a1351995160",
      "name": "gitskills",
      "url": "https://github.com/a1351995160/gitskills",
      "imageUrl": "/freedevtools/mcp/pfp/a1351995160.webp",
      "description": "Interactive platform for learning Git commands and workflows through practical exercises and tutorials. Focuses on enhancing version control skills and repository management.",
      "stars": 0,
      "forks": 0,
      "license": "Other",
      "language": "",
      "updated_at": "2021-10-27T03:13:00Z",
      "readme_content": "# gitskills",
      "npm_url": "https://www.npmjs.com/package/gitskills",
      "npm_downloads": 60,
      "keywords": [
        "git",
        "workflows",
        "workflow",
        "git workflow",
        "learning git",
        "git commands"
      ],
      "category": "git-workflow-management"
    },
    "aashari--mcp-server-atlassian-bitbucket": {
      "owner": "aashari",
      "name": "mcp-server-atlassian-bitbucket",
      "url": "https://github.com/aashari/mcp-server-atlassian-bitbucket",
      "imageUrl": "/freedevtools/mcp/pfp/aashari.webp",
      "description": "Access and manage Bitbucket repositories, pull requests, and commits through AI integrations. Connect AI systems securely and efficiently with Bitbucket data using minimal identifiers.",
      "stars": 78,
      "forks": 32,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-26T20:00:27Z",
      "readme_content": "# Connect AI to Your Bitbucket Repositories\n\nTransform how you work with Bitbucket by connecting Claude, Cursor AI, and other AI assistants directly to your repositories, pull requests, and code. Get instant insights, automate code reviews, and streamline your development workflow.\n\n[![NPM Version](https://img.shields.io/npm/v/@aashari/mcp-server-atlassian-bitbucket)](https://www.npmjs.com/package/@aashari/mcp-server-atlassian-bitbucket)\n\n## What You Can Do\n\n✅ **Ask AI about your code**: \"What's the latest commit in my main repository?\"  \n✅ **Get PR insights**: \"Show me all open pull requests that need review\"  \n✅ **Search your codebase**: \"Find all JavaScript files that use the authentication function\"  \n✅ **Review code changes**: \"Compare the differences between my feature branch and main\"  \n✅ **Manage pull requests**: \"Create a PR for my new-feature branch\"  \n✅ **Automate workflows**: \"Add a comment to PR #123 with the test results\"  \n\n## Perfect For\n\n- **Developers** who want AI assistance with code reviews and repository management\n- **Team Leads** needing quick insights into project status and pull request activity  \n- **DevOps Engineers** automating repository workflows and branch management\n- **Anyone** who wants to interact with Bitbucket using natural language\n\n## Quick Start\n\nGet up and running in 2 minutes:\n\n### 1. Get Your Bitbucket Credentials\n\n> ⚠️ **IMPORTANT**: Bitbucket App Passwords are being deprecated and will be removed by **June 2026**. We recommend using **Scoped API Tokens** for new setups.\n\n#### Option A: Scoped API Token (Recommended - Future-Proof)\n\n**Bitbucket is deprecating app passwords**. Use the new scoped API tokens instead:\n\n1. Go to [Atlassian API Tokens](https://id.atlassian.com/manage-profile/security/api-tokens)\n2. Click **\"Create API token with scopes\"**\n3. Select **\"Bitbucket\"** as the product\n4. Choose the appropriate scopes:\n   - **For read-only access**: `repository`, `workspace`\n   - **For full functionality**: `repository`, `workspace`, `pullrequest`\n5. Copy the generated token (starts with `ATATT`)\n6. Use with your Atlassian email as the username\n\n#### Option B: App Password (Legacy - Will be deprecated)\n\nGenerate a Bitbucket App Password (legacy method):\n1. Go to [Bitbucket App Passwords](https://bitbucket.org/account/settings/app-passwords/)\n2. Click \"Create app password\"\n3. Give it a name like \"AI Assistant\"\n4. Select these permissions:\n   - **Workspaces**: Read\n   - **Repositories**: Read (and Write if you want AI to create PRs/comments)\n   - **Pull Requests**: Read (and Write for PR management)\n\n### 2. Try It Instantly\n\n```bash\n# Set your credentials (choose one method)\n\n# Method 1: Scoped API Token (recommended - future-proof)\nexport ATLASSIAN_USER_EMAIL=\"your.email@company.com\"\nexport ATLASSIAN_API_TOKEN=\"your_scoped_api_token\"  # Token starting with ATATT\n\n# OR Method 2: Legacy App Password (will be deprecated June 2026)\nexport ATLASSIAN_BITBUCKET_USERNAME=\"your_username\"\nexport ATLASSIAN_BITBUCKET_APP_PASSWORD=\"your_app_password\"\n\n# List your workspaces\nnpx -y @aashari/mcp-server-atlassian-bitbucket ls-workspaces\n\n# List repositories in your workspace\nnpx -y @aashari/mcp-server-atlassian-bitbucket ls-repos --workspace-slug your-workspace\n\n# Get details about a specific repository  \nnpx -y @aashari/mcp-server-atlassian-bitbucket get-repo --workspace-slug your-workspace --repo-slug your-repo\n```\n\n## Connect to AI Assistants\n\n### For Claude Desktop Users\n\nAdd this to your Claude configuration file (`~/.claude/claude_desktop_config.json`):\n\n**Option 1: Scoped API Token (recommended - future-proof)**\n```json\n{\n  \"mcpServers\": {\n    \"bitbucket\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@aashari/mcp-server-atlassian-bitbucket\"],\n      \"env\": {\n        \"ATLASSIAN_USER_EMAIL\": \"your.email@company.com\",\n        \"ATLASSIAN_API_TOKEN\": \"your_scoped_api_token\"\n      }\n    }\n  }\n}\n```\n\n**Option 2: Legacy App Password (will be deprecated June 2026)**\n```json\n{\n  \"mcpServers\": {\n    \"bitbucket\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@aashari/mcp-server-atlassian-bitbucket\"],\n      \"env\": {\n        \"ATLASSIAN_BITBUCKET_USERNAME\": \"your_username\",\n        \"ATLASSIAN_BITBUCKET_APP_PASSWORD\": \"your_app_password\"\n      }\n    }\n  }\n}\n```\n\nRestart Claude Desktop, and you'll see \"🔗 bitbucket\" in the status bar.\n\n### For Other AI Assistants\n\nMost AI assistants support MCP. Install the server globally:\n\n```bash\nnpm install -g @aashari/mcp-server-atlassian-bitbucket\n```\n\nThen configure your AI assistant to use the MCP server with STDIO transport.\n\n### Alternative: Configuration File\n\nCreate `~/.mcp/configs.json` for system-wide configuration:\n\n**Option 1: Scoped API Token (recommended - future-proof)**\n```json\n{\n  \"bitbucket\": {\n    \"environments\": {\n      \"ATLASSIAN_USER_EMAIL\": \"your.email@company.com\",\n      \"ATLASSIAN_API_TOKEN\": \"your_scoped_api_token\",\n      \"BITBUCKET_DEFAULT_WORKSPACE\": \"your_main_workspace\"\n    }\n  }\n}\n```\n\n**Option 2: Legacy App Password (will be deprecated June 2026)**\n```json\n{\n  \"bitbucket\": {\n    \"environments\": {\n      \"ATLASSIAN_BITBUCKET_USERNAME\": \"your_username\",\n      \"ATLASSIAN_BITBUCKET_APP_PASSWORD\": \"your_app_password\",\n      \"BITBUCKET_DEFAULT_WORKSPACE\": \"your_main_workspace\"\n    }\n  }\n}\n```\n\n**Alternative config keys:** The system also accepts `\"atlassian-bitbucket\"`, `\"@aashari/mcp-server-atlassian-bitbucket\"`, or `\"mcp-server-atlassian-bitbucket\"` instead of `\"bitbucket\"`.\n\n## Real-World Examples\n\n### 🔍 Explore Your Repositories\n\nAsk your AI assistant:\n- *\"List all repositories in my main workspace\"*\n- *\"Show me details about the backend-api repository\"*\n- *\"What's the commit history for the feature-auth branch?\"*\n- *\"Get the content of src/config.js from the main branch\"*\n\n### 📋 Manage Pull Requests\n\nAsk your AI assistant:\n- *\"Show me all open pull requests that need review\"*\n- *\"Get details about pull request #42 including the code changes\"*\n- *\"Create a pull request from feature-login to main branch\"*\n- *\"Add a comment to PR #15 saying the tests passed\"*\n- *\"Approve pull request #33\"*\n\n### 🔧 Work with Branches and Code\n\nAsk your AI assistant:\n- *\"Compare my feature branch with the main branch\"*\n- *\"Create a new branch called hotfix-login from the main branch\"*\n- *\"List all branches in the user-service repository\"*\n- *\"Show me the differences between commits abc123 and def456\"*\n\n### 🔎 Search and Discovery\n\nAsk your AI assistant:\n- *\"Search for JavaScript files that contain 'authentication'\"*\n- *\"Find all pull requests related to the login feature\"*\n- *\"Search for repositories in the mobile project\"*\n- *\"Show me code files that use the React framework\"*\n\n## Troubleshooting\n\n### \"Authentication failed\" or \"403 Forbidden\"\n\n1. **Choose the right authentication method**:\n   - **Standard Atlassian method**: Use your Atlassian account email + API token (works with any Atlassian service)\n   - **Bitbucket-specific method**: Use your Bitbucket username + App password (Bitbucket only)\n\n2. **For Bitbucket App Passwords** (if using Option 2):\n   - Go to [Bitbucket App Passwords](https://bitbucket.org/account/settings/app-passwords/)\n   - Make sure your app password has the right permissions (Workspaces: Read, Repositories: Read, Pull Requests: Read)\n\n3. **For Scoped API Tokens** (recommended):\n   - Go to [Atlassian API Tokens](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Make sure your token is still active and has the right scopes\n   - Update your `~/.mcp/configs.json` file to use the new scoped API token format:\n   ```json\n   {\n     \"@aashari/mcp-server-atlassian-bitbucket\": {\n       \"environments\": {\n         \"ATLASSIAN_USER_EMAIL\": \"your.email@company.com\",\n         \"ATLASSIAN_API_TOKEN\": \"ATATT3xFfGF0...\"\n       }\n     }\n   }\n   ```\n\n4. **Verify your credentials**:\n   ```bash\n   # Test your credentials work\n   npx -y @aashari/mcp-server-atlassian-bitbucket ls-workspaces\n   ```\n\n### \"Workspace not found\" or \"Repository not found\"\n\n1. **Check your workspace slug**:\n   ```bash\n   # List your workspaces to see the correct slugs\n   npx -y @aashari/mcp-server-atlassian-bitbucket ls-workspaces\n   ```\n\n2. **Use the exact slug from Bitbucket URL**:\n   - If your repo URL is `https://bitbucket.org/myteam/my-repo`\n   - Workspace slug is `myteam`\n   - Repository slug is `my-repo`\n\n### \"No default workspace configured\"\n\nSet a default workspace to avoid specifying it every time:\n```bash\nexport BITBUCKET_DEFAULT_WORKSPACE=\"your-main-workspace-slug\"\n```\n\n### Claude Desktop Integration Issues\n\n1. **Restart Claude Desktop** after updating the config file\n2. **Check the status bar** for the \"🔗 bitbucket\" indicator\n3. **Verify config file location**:\n   - macOS: `~/.claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n### Getting Help\n\nIf you're still having issues:\n1. Run a simple test command to verify everything works\n2. Check the [GitHub Issues](https://github.com/aashari/mcp-server-atlassian-bitbucket/issues) for similar problems\n3. Create a new issue with your error message and setup details\n\n## Frequently Asked Questions\n\n### What permissions do I need?\n\n**For Scoped API Tokens** (recommended):\n- Your regular Atlassian account with access to Bitbucket\n- Scoped API token created at [id.atlassian.com/manage-profile/security/api-tokens](https://id.atlassian.com/manage-profile/security/api-tokens)\n- Required scopes: `repository`, `workspace` (add `pullrequest` for PR management)\n\n**For Bitbucket App Passwords** (legacy - being deprecated):\n- For **read-only access** (viewing repos, PRs, commits):\n  - Workspaces: Read\n  - Repositories: Read  \n  - Pull Requests: Read\n- For **full functionality** (creating PRs, commenting):\n  - Add \"Write\" permissions for Repositories and Pull Requests\n\n### Can I use this with private repositories?\n\nYes! This works with both public and private repositories. You just need the appropriate permissions through your Bitbucket App Password.\n\n### Do I need to specify workspace every time?\n\nNo! Set `BITBUCKET_DEFAULT_WORKSPACE` in your environment or config file, and it will be used automatically when you don't specify one.\n\n### What AI assistants does this work with?\n\nAny AI assistant that supports the Model Context Protocol (MCP):\n- Claude Desktop (most popular)\n- Cursor AI\n- Continue.dev\n- Many others\n\n### Is my data secure?\n\nYes! This tool:\n- Runs entirely on your local machine\n- Uses your own Bitbucket credentials\n- Never sends your data to third parties\n- Only accesses what you give it permission to access\n\n### Can I use this for multiple Bitbucket accounts?\n\nCurrently, each installation supports one set of credentials. For multiple accounts, you'd need separate configurations.\n\n## Support\n\nNeed help? Here's how to get assistance:\n\n1. **Check the troubleshooting section above** - most common issues are covered there\n2. **Visit our GitHub repository** for documentation and examples: [github.com/aashari/mcp-server-atlassian-bitbucket](https://github.com/aashari/mcp-server-atlassian-bitbucket)\n3. **Report issues** at [GitHub Issues](https://github.com/aashari/mcp-server-atlassian-bitbucket/issues)\n4. **Start a discussion** for feature requests or general questions\n\n---\n\n*Made with ❤️ for developers who want to bring AI into their Bitbucket workflow.*\n",
      "npm_url": "https://www.npmjs.com/package/@aashari/mcp-server-atlassian-bitbucket",
      "npm_downloads": 33955,
      "keywords": [
        "bitbucket",
        "git",
        "repositories",
        "atlassian bitbucket",
        "efficiently bitbucket",
        "manage bitbucket"
      ],
      "category": "git-workflow-management"
    },
    "agentience--practices_mcp_server": {
      "owner": "agentience",
      "name": "practices_mcp_server",
      "url": "https://github.com/agentience/practices_mcp_server",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Automate Git operations and enforce consistent development practices with tools for branch validation, version management, and pull request preparation. Integrates with platforms like GitHub and Jira to streamline the development workflow.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "github",
        "workflow",
        "git workflow",
        "automate git",
        "git operations"
      ],
      "category": "git-workflow-management"
    },
    "ahchenjie--mcp-github-test": {
      "owner": "ahchenjie",
      "name": "mcp-github-test",
      "url": "https://github.com/ahchenjie/mcp-github-test",
      "imageUrl": "/freedevtools/mcp/pfp/ahchenjie.webp",
      "description": "Integrate with GitHub's APIs to automate workflows, manage issues, and analyze repository data. Build AI tools that interact with the GitHub ecosystem through customizable toolsets.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-05-16T10:28:11Z",
      "readme_content": "# GitHub MCP Server\n\nThe GitHub MCP Server is a [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction)\nserver that provides seamless integration with GitHub APIs, enabling advanced\nautomation and interaction capabilities for developers and tools.\n\n[![Install with Docker in VS Code](https://img.shields.io/badge/VS_Code-Install_Server-0098FF?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=github&inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D) [![Install with Docker in VS Code Insiders](https://img.shields.io/badge/VS_Code_Insiders-Install_Server-24bfa5?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=github&inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D&quality=insiders)\n\n## Use Cases\n\n- Automating GitHub workflows and processes.\n- Extracting and analyzing data from GitHub repositories.\n- Building AI powered tools and applications that interact with GitHub's ecosystem.\n\n## Prerequisites\n\n1. To run the server in a container, you will need to have [Docker](https://www.docker.com/) installed.\n2. Once Docker is installed, you will also need to ensure Docker is running. The image is public; if you get errors on pull, you may have an expired token and need to `docker logout ghcr.io`.\n3. Lastly you will need to [Create a GitHub Personal Access Token](https://github.com/settings/personal-access-tokens/new).\nThe MCP server can use many of the GitHub APIs, so enable the permissions that you feel comfortable granting your AI tools (to learn more about access tokens, please check out the [documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens)).\n\n## Installation\n\n### Usage with VS Code\n\nFor quick installation, use one of the one-click install buttons at the top of this README. Once you complete that flow, toggle Agent mode (located by the Copilot Chat text input) and the server will start.\n\nFor manual installation, add the following JSON block to your User Settings (JSON) file in VS Code. You can do this by pressing `Ctrl + Shift + P` and typing `Preferences: Open User Settings (JSON)`.\n\n```json\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"github_token\",\n        \"description\": \"GitHub Personal Access Token\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"github\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"-i\",\n          \"--rm\",\n          \"-e\",\n          \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n          \"ghcr.io/github/github-mcp-server\"\n        ],\n        \"env\": {\n          \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"${input:github_token}\"\n        }\n      }\n    }\n  }\n}\n```\n\nOptionally, you can add a similar example (i.e. without the mcp key) to a file called `.vscode/mcp.json` in your workspace. This will allow you to share the configuration with others.\n\n\n```json\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"github_token\",\n      \"description\": \"GitHub Personal Access Token\",\n      \"password\": true\n    }\n  ],\n  \"servers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"ghcr.io/github/github-mcp-server\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"${input:github_token}\"\n      }\n    }\n  }\n}\n\n```\n\nMore about using MCP server tools in VS Code's [agent mode documentation](https://code.visualstudio.com/docs/copilot/chat/mcp-servers).\n\n### Usage with Claude Desktop\n\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"ghcr.io/github/github-mcp-server\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n### Build from source\n\nIf you don't have Docker, you can use `go build` to build the binary in the\n`cmd/github-mcp-server` directory, and use the `github-mcp-server stdio` command with the `GITHUB_PERSONAL_ACCESS_TOKEN` environment variable set to your token. To specify the output location of the build, use the `-o` flag. You should configure your server to use the built executable as its `command`. For example:\n\n```JSON\n{\n  \"mcp\": {\n    \"servers\": {\n      \"github\": {\n        \"command\": \"/path/to/github-mcp-server\",\n        \"args\": [\"stdio\"],\n        \"env\": {\n          \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n        }\n      }\n    }\n  }\n}\n```\n\n## Tool Configuration\n\nThe GitHub MCP Server supports enabling or disabling specific groups of functionalities via the `--toolsets` flag. This allows you to control which GitHub API capabilities are available to your AI tools. Enabling only the toolsets that you need can help the LLM with tool choice and reduce the context size.\n\n### Available Toolsets\n\nThe following sets of tools are available (all are on by default):\n\n| Toolset                 | Description                                                   |\n| ----------------------- | ------------------------------------------------------------- |\n| `repos`                 | Repository-related tools (file operations, branches, commits) |\n| `issues`                | Issue-related tools (create, read, update, comment)           |\n| `users`                 | Anything relating to GitHub Users                             |\n| `pull_requests`         | Pull request operations (create, merge, review)               |\n| `code_security`         | Code scanning alerts and security features                    |\n| `experiments`           | Experimental features (not considered stable)                 |\n\n#### Specifying Toolsets\n\nTo specify toolsets you want available to the LLM, you can pass an allow-list in two ways:\n\n1. **Using Command Line Argument**:\n\n   ```bash\n   github-mcp-server --toolsets repos,issues,pull_requests,code_security\n   ```\n\n2. **Using Environment Variable**:\n   ```bash\n   GITHUB_TOOLSETS=\"repos,issues,pull_requests,code_security\" ./github-mcp-server\n   ```\n\nThe environment variable `GITHUB_TOOLSETS` takes precedence over the command line argument if both are provided.\n\n### Using Toolsets With Docker\n\nWhen using Docker, you can pass the toolsets as environment variables:\n\n```bash\ndocker run -i --rm \\\n  -e GITHUB_PERSONAL_ACCESS_TOKEN=<your-token> \\\n  -e GITHUB_TOOLSETS=\"repos,issues,pull_requests,code_security,experiments\" \\\n  ghcr.io/github/github-mcp-server\n```\n\n### The \"all\" Toolset\n\nThe special toolset `all` can be provided to enable all available toolsets regardless of any other configuration:\n\n```bash\n./github-mcp-server --toolsets all\n```\n\nOr using the environment variable:\n\n```bash\nGITHUB_TOOLSETS=\"all\" ./github-mcp-server\n```\n\n## Dynamic Tool Discovery\n\n**Note**: This feature is currently in beta and may not be available in all environments. Please test it out and let us know if you encounter any issues.\n\nInstead of starting with all tools enabled, you can turn on dynamic toolset discovery. Dynamic toolsets allow the MCP host to list and enable toolsets in response to a user prompt. This should help to avoid situations where the model gets confused by the shear number of tools available.\n\n### Using Dynamic Tool Discovery\n\nWhen using the binary, you can pass the `--dynamic-toolsets` flag.\n\n```bash\n./github-mcp-server --dynamic-toolsets\n```\n\nWhen using Docker, you can pass the toolsets as environment variables:\n\n```bash\ndocker run -i --rm \\\n  -e GITHUB_PERSONAL_ACCESS_TOKEN=<your-token> \\\n  -e GITHUB_DYNAMIC_TOOLSETS=1 \\\n  ghcr.io/github/github-mcp-server\n```\n\n## GitHub Enterprise Server\n\nThe flag `--gh-host` and the environment variable `GITHUB_HOST` can be used to set\nthe GitHub Enterprise Server hostname.\nPrefix the hostname with the `https://` URI scheme, as it otherwise defaults to `http://` which GitHub Enterprise Server does not support.\n\n``` json\n\"github\": {\n    \"command\": \"docker\",\n    \"args\": [\n    \"run\",\n    \"-i\",\n    \"--rm\",\n    \"-e\",\n    \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n    \"-e\",\n    \"GITHUB_HOST\",\n    \"ghcr.io/github/github-mcp-server\"\n    ],\n    \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"${input:github_token}\",\n        \"GITHUB_HOST\": \"https://<your GHES domain name>\"\n    }\n}\n```\n\n## i18n / Overriding Descriptions\n\nThe descriptions of the tools can be overridden by creating a\n`github-mcp-server-config.json` file in the same directory as the binary.\n\nThe file should contain a JSON object with the tool names as keys and the new\ndescriptions as values. For example:\n\n```json\n{\n  \"TOOL_ADD_ISSUE_COMMENT_DESCRIPTION\": \"an alternative description\",\n  \"TOOL_CREATE_BRANCH_DESCRIPTION\": \"Create a new branch in a GitHub repository\"\n}\n```\n\nYou can create an export of the current translations by running the binary with\nthe `--export-translations` flag.\n\nThis flag will preserve any translations/overrides you have made, while adding\nany new translations that have been added to the binary since the last time you\nexported.\n\n```sh\n./github-mcp-server --export-translations\ncat github-mcp-server-config.json\n```\n\nYou can also use ENV vars to override the descriptions. The environment\nvariable names are the same as the keys in the JSON file, prefixed with\n`GITHUB_MCP_` and all uppercase.\n\nFor example, to override the `TOOL_ADD_ISSUE_COMMENT_DESCRIPTION` tool, you can\nset the following environment variable:\n\n```sh\nexport GITHUB_MCP_TOOL_ADD_ISSUE_COMMENT_DESCRIPTION=\"an alternative description\"\n```\n\n## Tools\n\n### Users\n\n- **get_me** - Get details of the authenticated user\n  - No parameters required\n\n### Issues\n\n- **get_issue** - Gets the contents of an issue within a repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number (number, required)\n\n- **get_issue_comments** - Get comments for a GitHub issue\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number (number, required)\n\n- **create_issue** - Create a new issue in a GitHub repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `title`: Issue title (string, required)\n  - `body`: Issue body content (string, optional)\n  - `assignees`: Usernames to assign to this issue (string[], optional)\n  - `labels`: Labels to apply to this issue (string[], optional)\n\n- **add_issue_comment** - Add a comment to an issue\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number (number, required)\n  - `body`: Comment text (string, required)\n\n- **list_issues** - List and filter repository issues\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `state`: Filter by state ('open', 'closed', 'all') (string, optional)\n  - `labels`: Labels to filter by (string[], optional)\n  - `sort`: Sort by ('created', 'updated', 'comments') (string, optional)\n  - `direction`: Sort direction ('asc', 'desc') (string, optional)\n  - `since`: Filter by date (ISO 8601 timestamp) (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **update_issue** - Update an existing issue in a GitHub repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number to update (number, required)\n  - `title`: New title (string, optional)\n  - `body`: New description (string, optional)\n  - `state`: New state ('open' or 'closed') (string, optional)\n  - `labels`: New labels (string[], optional)\n  - `assignees`: New assignees (string[], optional)\n  - `milestone`: New milestone number (number, optional)\n\n- **search_issues** - Search for issues and pull requests\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n### Pull Requests\n\n- **get_pull_request** - Get details of a specific pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **list_pull_requests** - List and filter repository pull requests\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `state`: PR state (string, optional)\n  - `sort`: Sort field (string, optional)\n  - `direction`: Sort direction (string, optional)\n  - `perPage`: Results per page (number, optional)\n  - `page`: Page number (number, optional)\n\n- **merge_pull_request** - Merge a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n  - `commit_title`: Title for the merge commit (string, optional)\n  - `commit_message`: Message for the merge commit (string, optional)\n  - `merge_method`: Merge method (string, optional)\n\n- **get_pull_request_files** - Get the list of files changed in a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **get_pull_request_status** - Get the combined status of all status checks for a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **update_pull_request_branch** - Update a pull request branch with the latest changes from the base branch\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n  - `expectedHeadSha`: The expected SHA of the pull request's HEAD ref (string, optional)\n\n- **get_pull_request_comments** - Get the review comments on a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **get_pull_request_reviews** - Get the reviews on a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **create_pull_request_review** - Create a review on a pull request review\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n  - `body`: Review comment text (string, optional)\n  - `event`: Review action ('APPROVE', 'REQUEST_CHANGES', 'COMMENT') (string, required)\n  - `commitId`: SHA of commit to review (string, optional)\n  - `comments`: Line-specific comments array of objects to place comments on pull request changes (array, optional)\n    - For inline comments: provide `path`, `position` (or `line`), and `body`\n    - For multi-line comments: provide `path`, `start_line`, `line`, optional `side`/`start_side`, and `body`\n\n- **create_pull_request** - Create a new pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `title`: PR title (string, required)\n  - `body`: PR description (string, optional)\n  - `head`: Branch containing changes (string, required)\n  - `base`: Branch to merge into (string, required)\n  - `draft`: Create as draft PR (boolean, optional)\n  - `maintainer_can_modify`: Allow maintainer edits (boolean, optional)\n\n- **add_pull_request_review_comment** - Add a review comment to a pull request or reply to an existing comment\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pull_number`: Pull request number (number, required)\n  - `body`: The text of the review comment (string, required)\n  - `commit_id`: The SHA of the commit to comment on (string, required unless using in_reply_to)\n  - `path`: The relative path to the file that necessitates a comment (string, required unless using in_reply_to)\n  - `line`: The line of the blob in the pull request diff that the comment applies to (number, optional)\n  - `side`: The side of the diff to comment on (LEFT or RIGHT) (string, optional)\n  - `start_line`: For multi-line comments, the first line of the range (number, optional)\n  - `start_side`: For multi-line comments, the starting side of the diff (LEFT or RIGHT) (string, optional)\n  - `subject_type`: The level at which the comment is targeted (line or file) (string, optional)\n  - `in_reply_to`: The ID of the review comment to reply to (number, optional). When specified, only body is required and other parameters are ignored.\n\n- **update_pull_request** - Update an existing pull request in a GitHub repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number to update (number, required)\n  - `title`: New title (string, optional)\n  - `body`: New description (string, optional)\n  - `state`: New state ('open' or 'closed') (string, optional)\n  - `base`: New base branch name (string, optional)\n  - `maintainer_can_modify`: Allow maintainer edits (boolean, optional)\n\n### Repositories\n\n- **create_or_update_file** - Create or update a single file in a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `path`: File path (string, required)\n  - `message`: Commit message (string, required)\n  - `content`: File content (string, required)\n  - `branch`: Branch name (string, optional)\n  - `sha`: File SHA if updating (string, optional)\n\n- **list_branches** - List branches in a GitHub repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **push_files** - Push multiple files in a single commit\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `branch`: Branch to push to (string, required)\n  - `files`: Files to push, each with path and content (array, required)\n  - `message`: Commit message (string, required)\n\n- **search_repositories** - Search for GitHub repositories\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **create_repository** - Create a new GitHub repository\n  - `name`: Repository name (string, required)\n  - `description`: Repository description (string, optional)\n  - `private`: Whether the repository is private (boolean, optional)\n  - `autoInit`: Auto-initialize with README (boolean, optional)\n\n- **get_file_contents** - Get contents of a file or directory\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `path`: File path (string, required)\n  - `ref`: Git reference (string, optional)\n\n- **fork_repository** - Fork a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `organization`: Target organization name (string, optional)\n\n- **create_branch** - Create a new branch\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `branch`: New branch name (string, required)\n  - `sha`: SHA to create branch from (string, required)\n\n- **list_commits** - Get a list of commits of a branch in a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `sha`: Branch name, tag, or commit SHA (string, optional)\n  - `path`: Only commits containing this file path (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **get_commit** - Get details for a commit from a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `sha`: Commit SHA, branch name, or tag name (string, required)\n  - `page`: Page number, for files in the commit (number, optional)\n  - `perPage`: Results per page, for files in the commit (number, optional)\n\n- **search_code** - Search for code across GitHub repositories\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n### Users\n\n- **search_users** - Search for GitHub users\n  - `q`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n### Code Scanning\n\n- **get_code_scanning_alert** - Get a code scanning alert\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `alertNumber`: Alert number (number, required)\n\n- **list_code_scanning_alerts** - List code scanning alerts for a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `ref`: Git reference (string, optional)\n  - `state`: Alert state (string, optional)\n  - `severity`: Alert severity (string, optional)\n  - `tool_name`: The name of the tool used for code scanning (string, optional)\n\n### Secret Scanning\n\n- **get_secret_scanning_alert** - Get a secret scanning alert\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `alertNumber`: Alert number (number, required)\n\n- **list_secret_scanning_alerts** - List secret scanning alerts for a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `state`: Alert state (string, optional)\n  - `secret_type`: The secret types to be filtered for in a comma-separated list (string, optional)\n  - `resolution`: The resolution status (string, optional)\n\n## Resources\n\n### Repository Content\n\n- **Get Repository Content**\n  Retrieves the content of a repository at a specific path.\n\n  - **Template**: `repo://{owner}/{repo}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Branch**\n  Retrieves the content of a repository at a specific path for a given branch.\n\n  - **Template**: `repo://{owner}/{repo}/refs/heads/{branch}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `branch`: Branch name (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Commit**\n  Retrieves the content of a repository at a specific path for a given commit.\n\n  - **Template**: `repo://{owner}/{repo}/sha/{sha}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `sha`: Commit SHA (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Tag**\n  Retrieves the content of a repository at a specific path for a given tag.\n\n  - **Template**: `repo://{owner}/{repo}/refs/tags/{tag}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `tag`: Tag name (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Pull Request**\n  Retrieves the content of a repository at a specific path for a given pull request.\n\n  - **Template**: `repo://{owner}/{repo}/refs/pull/{prNumber}/head/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `prNumber`: Pull request number (string, required)\n    - `path`: File or directory path (string, optional)\n\n## Library Usage\n\nThe exported Go API of this module should currently be considered unstable, and subject to breaking changes. In the future, we may offer stability; please file an issue if there is a use case where this would be valuable.\n\n## License\n\nThis project is licensed under the terms of the MIT open source license. Please refer to [MIT](./LICENSE) for the full terms.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflows",
        "git workflow",
        "github test",
        "github ecosystem"
      ],
      "category": "git-workflow-management"
    },
    "ankur-1garg--mcp": {
      "owner": "ankur-1garg",
      "name": "mcp",
      "url": "https://github.com/ankur-1garg/mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ankur-1garg.webp",
      "description": "Analyzes Git repositories to provide Dockerfile creation guidance, detect dependencies, and identify programming languages. Offers detailed recommendations for both public and private repositories to streamline development workflows.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-09T20:01:50Z",
      "readme_content": "# Repo Analyzer MCP Server (Local)\n\nAn MCP server that analyzes Git repositories and provides Dockerfile creation guidance. Runs locally using stdio transport.\n\n## Features\n\n- Analyzes repository structure and dependencies\n- Detects primary programming language\n- Identifies exposed ports\n- Handles monorepo detection\n- Supports private GitHub repositories (with GITHUB_TOKEN)\n- Provides detailed Dockerfile recommendations\n\n## Prerequisites\n\n- Python >= 3.10\n- Git command-line tool in PATH\n- (Optional) GitHub Personal Access Token for private repos\n\n## Installation\n\n1. Create and activate a virtual environment:\n\n```bash\npython -m venv .venv\nsource .venv/bin/activate  # Linux/macOS\n# or\n.venv\\Scripts\\activate     # Windows\n```\n\n2. Install dependencies:\n\n```bash\npip install -e .\n```\n\n## Usage\n\n### With MCP Inspector\n\n```bash\nmcp-inspector python src/repo_analyzer_mcp/server.py\n```\n\n### With VS Code / GitHub Copilot\n\nAdd to VS Code settings (JSON) or create `.vscode/mcp.json`:\n\n```json\n{\n  \"mcp.servers\": {\n    \"repo-analyzer-local\": {\n      \"type\": \"stdio\",\n      \"command\": \"/path/to/venv/python\",\n      \"args\": [\"/path/to/src/repo_analyzer_mcp/server.py\"],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"${env:GITHUB_TOKEN}\"\n      },\n      \"displayName\": \"Repo Analyzer (Local)\"\n    }\n  }\n}\n```\n\nReplace `/path/to/` with actual paths on your system.\n\n## Environment Variables\n\n- `GITHUB_TOKEN`: GitHub Personal Access Token (required for private repos)\n",
      "npm_url": "https://www.npmjs.com/package/mcp",
      "npm_downloads": 17624,
      "keywords": [
        "git",
        "workflows",
        "repositories",
        "git workflow",
        "git repositories",
        "analyzes git"
      ],
      "category": "git-workflow-management"
    },
    "antonioevans--github-mcp-server": {
      "owner": "antonioevans",
      "name": "github-mcp-server",
      "url": "https://github.com/antonioevans/github-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/antonioevans.webp",
      "description": "Interact with GitHub repositories, manage issues, and automate workflows through GitHub's API, enabling data extraction and analysis for developers. Build AI-powered tools that integrate seamlessly with the GitHub ecosystem, providing configurable functionalities based on user needs.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-05-08T12:55:39Z",
      "readme_content": "# GitHub MCP Server\n\nThe GitHub MCP Server is a [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction)\nserver that provides seamless integration with GitHub APIs, enabling advanced\nautomation and interaction capabilities for developers and tools.\n\n[![Install with Docker in VS Code](https://img.shields.io/badge/VS_Code-Install_Server-0098FF?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=github&inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D) [![Install with Docker in VS Code Insiders](https://img.shields.io/badge/VS_Code_Insiders-Install_Server-24bfa5?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=github&inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D&quality=insiders)\n\n## Use Cases\n\n- Automating GitHub workflows and processes.\n- Extracting and analyzing data from GitHub repositories.\n- Building AI powered tools and applications that interact with GitHub's ecosystem.\n\n## Prerequisites\n\n1. To run the server in a container, you will need to have [Docker](https://www.docker.com/) installed.\n2. Once Docker is installed, you will also need to ensure Docker is running. The image is public; if you get errors on pull, you may have an expired token and need to `docker logout ghcr.io`.\n3. Lastly you will need to [Create a GitHub Personal Access Token](https://github.com/settings/personal-access-tokens/new).\nThe MCP server can use many of the GitHub APIs, so enable the permissions that you feel comfortable granting your AI tools (to learn more about access tokens, please check out the [documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens)).\n\n## Installation\n\n### Usage with VS Code\n\nFor quick installation, use one of the one-click install buttons at the top of this README. Once you complete that flow, toggle Agent mode (located by the Copilot Chat text input) and the server will start.\n\nFor manual installation, add the following JSON block to your User Settings (JSON) file in VS Code. You can do this by pressing `Ctrl + Shift + P` and typing `Preferences: Open User Settings (JSON)`.\n\n```json\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"github_token\",\n        \"description\": \"GitHub Personal Access Token\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"github\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"-i\",\n          \"--rm\",\n          \"-e\",\n          \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n          \"ghcr.io/github/github-mcp-server\"\n        ],\n        \"env\": {\n          \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"${input:github_token}\"\n        }\n      }\n    }\n  }\n}\n```\n\nOptionally, you can add a similar example (i.e. without the mcp key) to a file called `.vscode/mcp.json` in your workspace. This will allow you to share the configuration with others.\n\n\n```json\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"github_token\",\n      \"description\": \"GitHub Personal Access Token\",\n      \"password\": true\n    }\n  ],\n  \"servers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"ghcr.io/github/github-mcp-server\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"${input:github_token}\"\n      }\n    }\n  }\n}\n\n```\n\nMore about using MCP server tools in VS Code's [agent mode documentation](https://code.visualstudio.com/docs/copilot/chat/mcp-servers).\n\n### Usage with Claude Desktop\n\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"ghcr.io/github/github-mcp-server\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n### Build from source\n\nIf you don't have Docker, you can use `go build` to build the binary in the\n`cmd/github-mcp-server` directory, and use the `github-mcp-server stdio` command with the `GITHUB_PERSONAL_ACCESS_TOKEN` environment variable set to your token. To specify the output location of the build, use the `-o` flag. You should configure your server to use the built executable as its `command`. For example:\n\n```JSON\n{\n  \"mcp\": {\n    \"servers\": {\n      \"github\": {\n        \"command\": \"/path/to/github-mcp-server\",\n        \"args\": [\"stdio\"],\n        \"env\": {\n          \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n        }\n      }\n    }\n  }\n}\n```\n\n## Tool Configuration\n\nThe GitHub MCP Server supports enabling or disabling specific groups of functionalities via the `--toolsets` flag. This allows you to control which GitHub API capabilities are available to your AI tools. Enabling only the toolsets that you need can help the LLM with tool choice and reduce the context size.\n\n### Available Toolsets\n\nThe following sets of tools are available (all are on by default):\n\n| Toolset                 | Description                                                   |\n| ----------------------- | ------------------------------------------------------------- |\n| `repos`                 | Repository-related tools (file operations, branches, commits) |\n| `issues`                | Issue-related tools (create, read, update, comment)           |\n| `users`                 | Anything relating to GitHub Users                             |\n| `pull_requests`         | Pull request operations (create, merge, review)               |\n| `code_security`         | Code scanning alerts and security features                    |\n| `experiments`           | Experimental features (not considered stable)                 |\n\n#### Specifying Toolsets\n\nTo specify toolsets you want available to the LLM, you can pass an allow-list in two ways:\n\n1. **Using Command Line Argument**:\n\n   ```bash\n   github-mcp-server --toolsets repos,issues,pull_requests,code_security\n   ```\n\n2. **Using Environment Variable**:\n   ```bash\n   GITHUB_TOOLSETS=\"repos,issues,pull_requests,code_security\" ./github-mcp-server\n   ```\n\nThe environment variable `GITHUB_TOOLSETS` takes precedence over the command line argument if both are provided.\n\n### Using Toolsets With Docker\n\nWhen using Docker, you can pass the toolsets as environment variables:\n\n```bash\ndocker run -i --rm \\\n  -e GITHUB_PERSONAL_ACCESS_TOKEN=<your-token> \\\n  -e GITHUB_TOOLSETS=\"repos,issues,pull_requests,code_security,experiments\" \\\n  ghcr.io/github/github-mcp-server\n```\n\n### The \"all\" Toolset\n\nThe special toolset `all` can be provided to enable all available toolsets regardless of any other configuration:\n\n```bash\n./github-mcp-server --toolsets all\n```\n\nOr using the environment variable:\n\n```bash\nGITHUB_TOOLSETS=\"all\" ./github-mcp-server\n```\n\n## Dynamic Tool Discovery\n\n**Note**: This feature is currently in beta and may not be available in all environments. Please test it out and let us know if you encounter any issues.\n\nInstead of starting with all tools enabled, you can turn on dynamic toolset discovery. Dynamic toolsets allow the MCP host to list and enable toolsets in response to a user prompt. This should help to avoid situations where the model gets confused by the shear number of tools available.\n\n### Using Dynamic Tool Discovery\n\nWhen using the binary, you can pass the `--dynamic-toolsets` flag.\n\n```bash\n./github-mcp-server --dynamic-toolsets\n```\n\nWhen using Docker, you can pass the toolsets as environment variables:\n\n```bash\ndocker run -i --rm \\\n  -e GITHUB_PERSONAL_ACCESS_TOKEN=<your-token> \\\n  -e GITHUB_DYNAMIC_TOOLSETS=1 \\\n  ghcr.io/github/github-mcp-server\n```\n\n## GitHub Enterprise Server\n\nThe flag `--gh-host` and the environment variable `GITHUB_HOST` can be used to set\nthe GitHub Enterprise Server hostname.\nPrefix the hostname with the `https://` URI scheme, as it otherwise defaults to `http://` which GitHub Enterprise Server does not support.\n\n``` json\n\"github\": {\n    \"command\": \"docker\",\n    \"args\": [\n    \"run\",\n    \"-i\",\n    \"--rm\",\n    \"-e\",\n    \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n    \"-e\",\n    \"GITHUB_HOST\",\n    \"ghcr.io/github/github-mcp-server\"\n    ],\n    \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"${input:github_token}\",\n        \"GITHUB_HOST\": \"https://<your GHES domain name>\"\n    }\n}\n```\n\n## i18n / Overriding Descriptions\n\nThe descriptions of the tools can be overridden by creating a\n`github-mcp-server-config.json` file in the same directory as the binary.\n\nThe file should contain a JSON object with the tool names as keys and the new\ndescriptions as values. For example:\n\n```json\n{\n  \"TOOL_ADD_ISSUE_COMMENT_DESCRIPTION\": \"an alternative description\",\n  \"TOOL_CREATE_BRANCH_DESCRIPTION\": \"Create a new branch in a GitHub repository\"\n}\n```\n\nYou can create an export of the current translations by running the binary with\nthe `--export-translations` flag.\n\nThis flag will preserve any translations/overrides you have made, while adding\nany new translations that have been added to the binary since the last time you\nexported.\n\n```sh\n./github-mcp-server --export-translations\ncat github-mcp-server-config.json\n```\n\nYou can also use ENV vars to override the descriptions. The environment\nvariable names are the same as the keys in the JSON file, prefixed with\n`GITHUB_MCP_` and all uppercase.\n\nFor example, to override the `TOOL_ADD_ISSUE_COMMENT_DESCRIPTION` tool, you can\nset the following environment variable:\n\n```sh\nexport GITHUB_MCP_TOOL_ADD_ISSUE_COMMENT_DESCRIPTION=\"an alternative description\"\n```\n\n## Tools\n\n### Users\n\n- **get_me** - Get details of the authenticated user\n  - No parameters required\n\n### Issues\n\n- **get_issue** - Gets the contents of an issue within a repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number (number, required)\n\n- **get_issue_comments** - Get comments for a GitHub issue\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number (number, required)\n\n- **create_issue** - Create a new issue in a GitHub repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `title`: Issue title (string, required)\n  - `body`: Issue body content (string, optional)\n  - `assignees`: Usernames to assign to this issue (string[], optional)\n  - `labels`: Labels to apply to this issue (string[], optional)\n\n- **add_issue_comment** - Add a comment to an issue\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number (number, required)\n  - `body`: Comment text (string, required)\n\n- **list_issues** - List and filter repository issues\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `state`: Filter by state ('open', 'closed', 'all') (string, optional)\n  - `labels`: Labels to filter by (string[], optional)\n  - `sort`: Sort by ('created', 'updated', 'comments') (string, optional)\n  - `direction`: Sort direction ('asc', 'desc') (string, optional)\n  - `since`: Filter by date (ISO 8601 timestamp) (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **update_issue** - Update an existing issue in a GitHub repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number to update (number, required)\n  - `title`: New title (string, optional)\n  - `body`: New description (string, optional)\n  - `state`: New state ('open' or 'closed') (string, optional)\n  - `labels`: New labels (string[], optional)\n  - `assignees`: New assignees (string[], optional)\n  - `milestone`: New milestone number (number, optional)\n\n- **search_issues** - Search for issues and pull requests\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n### Pull Requests\n\n- **get_pull_request** - Get details of a specific pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **list_pull_requests** - List and filter repository pull requests\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `state`: PR state (string, optional)\n  - `sort`: Sort field (string, optional)\n  - `direction`: Sort direction (string, optional)\n  - `perPage`: Results per page (number, optional)\n  - `page`: Page number (number, optional)\n\n- **merge_pull_request** - Merge a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n  - `commit_title`: Title for the merge commit (string, optional)\n  - `commit_message`: Message for the merge commit (string, optional)\n  - `merge_method`: Merge method (string, optional)\n\n- **get_pull_request_files** - Get the list of files changed in a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **get_pull_request_status** - Get the combined status of all status checks for a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **update_pull_request_branch** - Update a pull request branch with the latest changes from the base branch\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n  - `expectedHeadSha`: The expected SHA of the pull request's HEAD ref (string, optional)\n\n- **get_pull_request_comments** - Get the review comments on a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **get_pull_request_reviews** - Get the reviews on a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **create_pull_request_review** - Create a review on a pull request review\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n  - `body`: Review comment text (string, optional)\n  - `event`: Review action ('APPROVE', 'REQUEST_CHANGES', 'COMMENT') (string, required)\n  - `commitId`: SHA of commit to review (string, optional)\n  - `comments`: Line-specific comments array of objects to place comments on pull request changes (array, optional)\n    - For inline comments: provide `path`, `position` (or `line`), and `body`\n    - For multi-line comments: provide `path`, `start_line`, `line`, optional `side`/`start_side`, and `body`\n\n- **create_pull_request** - Create a new pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `title`: PR title (string, required)\n  - `body`: PR description (string, optional)\n  - `head`: Branch containing changes (string, required)\n  - `base`: Branch to merge into (string, required)\n  - `draft`: Create as draft PR (boolean, optional)\n  - `maintainer_can_modify`: Allow maintainer edits (boolean, optional)\n\n- **add_pull_request_review_comment** - Add a review comment to a pull request or reply to an existing comment\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pull_number`: Pull request number (number, required)\n  - `body`: The text of the review comment (string, required)\n  - `commit_id`: The SHA of the commit to comment on (string, required unless using in_reply_to)\n  - `path`: The relative path to the file that necessitates a comment (string, required unless using in_reply_to)\n  - `line`: The line of the blob in the pull request diff that the comment applies to (number, optional)\n  - `side`: The side of the diff to comment on (LEFT or RIGHT) (string, optional)\n  - `start_line`: For multi-line comments, the first line of the range (number, optional)\n  - `start_side`: For multi-line comments, the starting side of the diff (LEFT or RIGHT) (string, optional)\n  - `subject_type`: The level at which the comment is targeted (line or file) (string, optional)\n  - `in_reply_to`: The ID of the review comment to reply to (number, optional). When specified, only body is required and other parameters are ignored.\n\n- **update_pull_request** - Update an existing pull request in a GitHub repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number to update (number, required)\n  - `title`: New title (string, optional)\n  - `body`: New description (string, optional)\n  - `state`: New state ('open' or 'closed') (string, optional)\n  - `base`: New base branch name (string, optional)\n  - `maintainer_can_modify`: Allow maintainer edits (boolean, optional)\n\n### Repositories\n\n- **create_or_update_file** - Create or update a single file in a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `path`: File path (string, required)\n  - `message`: Commit message (string, required)\n  - `content`: File content (string, required)\n  - `branch`: Branch name (string, optional)\n  - `sha`: File SHA if updating (string, optional)\n\n- **list_branches** - List branches in a GitHub repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **push_files** - Push multiple files in a single commit\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `branch`: Branch to push to (string, required)\n  - `files`: Files to push, each with path and content (array, required)\n  - `message`: Commit message (string, required)\n\n- **search_repositories** - Search for GitHub repositories\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **create_repository** - Create a new GitHub repository\n  - `name`: Repository name (string, required)\n  - `description`: Repository description (string, optional)\n  - `private`: Whether the repository is private (boolean, optional)\n  - `autoInit`: Auto-initialize with README (boolean, optional)\n\n- **get_file_contents** - Get contents of a file or directory\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `path`: File path (string, required)\n  - `ref`: Git reference (string, optional)\n\n- **fork_repository** - Fork a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `organization`: Target organization name (string, optional)\n\n- **create_branch** - Create a new branch\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `branch`: New branch name (string, required)\n  - `sha`: SHA to create branch from (string, required)\n\n- **list_commits** - Get a list of commits of a branch in a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `sha`: Branch name, tag, or commit SHA (string, optional)\n  - `path`: Only commits containing this file path (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **get_commit** - Get details for a commit from a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `sha`: Commit SHA, branch name, or tag name (string, required)\n  - `page`: Page number, for files in the commit (number, optional)\n  - `perPage`: Results per page, for files in the commit (number, optional)\n\n- **search_code** - Search for code across GitHub repositories\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n### Users\n\n- **search_users** - Search for GitHub users\n  - `q`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n### Code Scanning\n\n- **get_code_scanning_alert** - Get a code scanning alert\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `alertNumber`: Alert number (number, required)\n\n- **list_code_scanning_alerts** - List code scanning alerts for a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `ref`: Git reference (string, optional)\n  - `state`: Alert state (string, optional)\n  - `severity`: Alert severity (string, optional)\n  - `tool_name`: The name of the tool used for code scanning (string, optional)\n\n### Secret Scanning\n\n- **get_secret_scanning_alert** - Get a secret scanning alert\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `alertNumber`: Alert number (number, required)\n\n- **list_secret_scanning_alerts** - List secret scanning alerts for a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `state`: Alert state (string, optional)\n  - `secret_type`: The secret types to be filtered for in a comma-separated list (string, optional)\n  - `resolution`: The resolution status (string, optional)\n\n## Resources\n\n### Repository Content\n\n- **Get Repository Content**\n  Retrieves the content of a repository at a specific path.\n\n  - **Template**: `repo://{owner}/{repo}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Branch**\n  Retrieves the content of a repository at a specific path for a given branch.\n\n  - **Template**: `repo://{owner}/{repo}/refs/heads/{branch}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `branch`: Branch name (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Commit**\n  Retrieves the content of a repository at a specific path for a given commit.\n\n  - **Template**: `repo://{owner}/{repo}/sha/{sha}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `sha`: Commit SHA (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Tag**\n  Retrieves the content of a repository at a specific path for a given tag.\n\n  - **Template**: `repo://{owner}/{repo}/refs/tags/{tag}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `tag`: Tag name (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Pull Request**\n  Retrieves the content of a repository at a specific path for a given pull request.\n\n  - **Template**: `repo://{owner}/{repo}/refs/pull/{prNumber}/head/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `prNumber`: Pull request number (string, required)\n    - `path`: File or directory path (string, optional)\n\n## Library Usage\n\nThe exported Go API of this module should currently be considered unstable, and subject to breaking changes. In the future, we may offer stability; please file an issue if there is a use case where this would be valuable.\n\n## License\n\nThis project is licensed under the terms of the MIT open source license. Please refer to [MIT](./LICENSE) for the full terms.\n",
      "npm_url": "https://www.npmjs.com/package/github-mcp-server",
      "npm_downloads": 15187,
      "keywords": [
        "github",
        "git",
        "workflows",
        "workflows github",
        "git workflow",
        "github ecosystem"
      ],
      "category": "git-workflow-management"
    },
    "asbloom-py--mcp-servers": {
      "owner": "asbloom-py",
      "name": "mcp-servers",
      "url": "https://github.com/asbloom-py/mcp-servers",
      "imageUrl": "/freedevtools/mcp/pfp/asbloom-py.webp",
      "description": "Interact with GitHub repositories, manage files, perform repository operations, and search code, issues, and users utilizing the GitHub API.",
      "stars": 1,
      "forks": 3,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-01-07T01:03:46Z",
      "readme_content": "# GitHub MCP Server\n\nMCP Server for the GitHub API, enabling file operations, repository management, search functionality, and more.\n\n### Features\n\n- **Automatic Branch Creation**: When creating/updating files or pushing changes, branches are automatically created if they don't exist\n- **Comprehensive Error Handling**: Clear error messages for common issues\n- **Git History Preservation**: Operations maintain proper Git history without force pushing\n- **Batch Operations**: Support for both single-file and multi-file operations\n- **Advanced Search**: Support for searching code, issues/PRs, and users\n\n\n## Tools\n\n1. `create_or_update_file`\n   - Create or update a single file in a repository\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `path` (string): Path where to create/update the file\n     - `content` (string): Content of the file\n     - `message` (string): Commit message\n     - `branch` (string): Branch to create/update the file in\n     - `sha` (optional string): SHA of file being replaced (for updates)\n   - Returns: File content and commit details\n\n2. `push_files`\n   - Push multiple files in a single commit\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `branch` (string): Branch to push to\n     - `files` (array): Files to push, each with `path` and `content`\n     - `message` (string): Commit message\n   - Returns: Updated branch reference\n\n3. `search_repositories`\n   - Search for GitHub repositories\n   - Inputs:\n     - `query` (string): Search query\n     - `page` (optional number): Page number for pagination\n     - `perPage` (optional number): Results per page (max 100)\n   - Returns: Repository search results\n\n4. `create_repository`\n   - Create a new GitHub repository\n   - Inputs:\n     - `name` (string): Repository name\n     - `description` (optional string): Repository description\n     - `private` (optional boolean): Whether repo should be private\n     - `autoInit` (optional boolean): Initialize with README\n   - Returns: Created repository details\n\n5. `get_file_contents`\n   - Get contents of a file or directory\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `path` (string): Path to file/directory\n     - `branch` (optional string): Branch to get contents from\n   - Returns: File/directory contents\n\n6. `create_issue`\n   - Create a new issue\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `title` (string): Issue title\n     - `body` (optional string): Issue description\n     - `assignees` (optional string[]): Usernames to assign\n     - `labels` (optional string[]): Labels to add\n     - `milestone` (optional number): Milestone number\n   - Returns: Created issue details\n\n7. `create_pull_request`\n   - Create a new pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `title` (string): PR title\n     - `body` (optional string): PR description\n     - `head` (string): Branch containing changes\n     - `base` (string): Branch to merge into\n     - `draft` (optional boolean): Create as draft PR\n     - `maintainer_can_modify` (optional boolean): Allow maintainer edits\n   - Returns: Created pull request details\n\n8. `fork_repository`\n   - Fork a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `organization` (optional string): Organization to fork to\n   - Returns: Forked repository details\n\n9. `create_branch`\n   - Create a new branch\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `branch` (string): Name for new branch\n     - `from_branch` (optional string): Source branch (defaults to repo default)\n   - Returns: Created branch reference\n\n10. `list_issues`\n    - List and filter repository issues\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `state` (optional string): Filter by state ('open', 'closed', 'all')\n      - `labels` (optional string[]): Filter by labels\n      - `sort` (optional string): Sort by ('created', 'updated', 'comments')\n      - `direction` (optional string): Sort direction ('asc', 'desc')\n      - `since` (optional string): Filter by date (ISO 8601 timestamp)\n      - `page` (optional number): Page number\n      - `per_page` (optional number): Results per page\n    - Returns: Array of issue details\n\n11. `update_issue`\n    - Update an existing issue\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `issue_number` (number): Issue number to update\n      - `title` (optional string): New title\n      - `body` (optional string): New description\n      - `state` (optional string): New state ('open' or 'closed')\n      - `labels` (optional string[]): New labels\n      - `assignees` (optional string[]): New assignees\n      - `milestone` (optional number): New milestone number\n    - Returns: Updated issue details\n\n12. `add_issue_comment`\n    - Add a comment to an issue\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `issue_number` (number): Issue number to comment on\n      - `body` (string): Comment text\n    - Returns: Created comment details\n\n13. `search_code`\n    - Search for code across GitHub repositories\n    - Inputs:\n      - `q` (string): Search query using GitHub code search syntax\n      - `sort` (optional string): Sort field ('indexed' only)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: Code search results with repository context\n\n14. `search_issues`\n    - Search for issues and pull requests\n    - Inputs:\n      - `q` (string): Search query using GitHub issues search syntax\n      - `sort` (optional string): Sort field (comments, reactions, created, etc.)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: Issue and pull request search results\n\n15. `search_users`\n    - Search for GitHub users\n    - Inputs:\n      - `q` (string): Search query using GitHub users search syntax\n      - `sort` (optional string): Sort field (followers, repositories, joined)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: User search results\n\n16. `list_commits`\n   - Gets commits of a branch in a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `page` (optional string): page number\n     - `per_page` (optional string): number of record per page\n     - `sha` (optional string): branch name\n   - Returns: List of commits\n\n17. `get_issue`\n   - Gets the contents of an issue within a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `issue_number` (number): Issue number to retrieve\n   - Returns: Github Issue object & details\n\n18. `get_issue_comments`\n   - Gets the comments on an issue or pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `issue_number` (number): Issue/PR number to retrieve comments from\n   - Returns: Array of GitHub comment objects containing comment ID, body text, author, and timestamps\n\n## Search Query Syntax\n\n### Code Search\n- `language:javascript`: Search by programming language\n- `repo:owner/name`: Search in specific repository\n- `path:app/src`: Search in specific path\n- `extension:js`: Search by file extension\n- Example: `q: \"import express\" language:typescript path:src/`\n\n### Issues Search\n- `is:issue` or `is:pr`: Filter by type\n- `is:open` or `is:closed`: Filter by state\n- `label:bug`: Search by label\n- `author:username`: Search by author\n- Example: `q: \"memory leak\" is:issue is:open label:bug`\n\n### Users Search\n- `type:user` or `type:org`: Filter by account type\n- `followers:>1000`: Filter by followers\n- `location:London`: Search by location\n- Example: `q: \"fullstack developer\" location:London followers:>100`\n\nFor detailed search syntax, see [GitHub's searching documentation](https://docs.github.com/en/search-github/searching-on-github).\n\n## Setup\n\n### Personal Access Token\n[Create a GitHub Personal Access Token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens) with appropriate permissions:\n   - Go to [Personal access tokens](https://github.com/settings/tokens) (in GitHub Settings > Developer settings)\n   - Select which repositories you'd like this token to have access to (Public, All, or Select)\n   - Create a token with the `repo` scope (\"Full control of private repositories\")\n     - Alternatively, if working only with public repositories, select only the `public_repo` scope\n   - Copy the generated token\n\n### Usage with Claude Desktop\nTo use this with Claude Desktop, add the following to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "https://www.npmjs.com/package/mcp-servers",
      "npm_downloads": 854,
      "keywords": [
        "github",
        "git",
        "repositories",
        "git workflow",
        "utilizing github",
        "github api"
      ],
      "category": "git-workflow-management"
    },
    "asifdotpy--github-mcp-server": {
      "owner": "asifdotpy",
      "name": "github-mcp-server",
      "url": "https://github.com/asifdotpy/github-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/asifdotpy.webp",
      "description": "Integrates with GitHub APIs for advanced automation and interaction capabilities for developers. Facilitates repository management, issue tracking, and workflow automation.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-04-05T07:42:20Z",
      "readme_content": "# GitHub MCP Server\n\nThe GitHub MCP Server is a [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction)\nserver that provides seamless integration with GitHub APIs, enabling advanced\nautomation and interaction capabilities for developers and tools.\n\n[![Install with Docker in VS Code](https://img.shields.io/badge/VS_Code-Install_Server-0098FF?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=github&inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D) [![Install with Docker in VS Code Insiders](https://img.shields.io/badge/VS_Code_Insiders-Install_Server-24bfa5?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=github&inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D&quality=insiders)\n\n## Use Cases\n\n- Automating GitHub workflows and processes.\n- Extracting and analyzing data from GitHub repositories.\n- Building AI powered tools and applications that interact with GitHub's ecosystem.\n\n## Prerequisites\n\n1. To run the server in a container, you will need to have [Docker](https://www.docker.com/) installed.\n2. [Create a GitHub Personal Access Token](https://github.com/settings/personal-access-tokens/new).\nThe MCP server can use many of the GitHub APIs, so enable the permissions that you feel comfortable granting your AI tools (to learn more about access tokens, please check out the [documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens)).\n\n\n\n## Installation\n\n### Usage with VS Code\n\nFor quick installation, use one of the one-click install buttons at the top of this README.\n\nFor manual installation, add the following JSON block to your User Settings (JSON) file in VS Code. You can do this by pressing `Ctrl + Shift + P` and typing `Preferences: Open User Settings (JSON)`.\n\nOptionally, you can add it to a file called `.vscode/mcp.json` in your workspace. This will allow you to share the configuration with others.\n\n> Note that the `mcp` key is not needed in the `.vscode/mcp.json` file.\n\n```json\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"github_token\",\n        \"description\": \"GitHub Personal Access Token\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"github\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"-i\",\n          \"--rm\",\n          \"-e\",\n          \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n          \"ghcr.io/github/github-mcp-server\"\n        ],\n        \"env\": {\n          \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"${input:github_token}\"\n        }\n      }\n    }\n  }\n}\n```\n\nMore about using MCP server tools in VS Code's [agent mode documentation](https://code.visualstudio.com/docs/copilot/chat/mcp-servers).\n\n### Usage with Claude Desktop\n\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"ghcr.io/github/github-mcp-server\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n### Build from source\n\nIf you don't have Docker, you can use `go` to build the binary in the\n`cmd/github-mcp-server` directory, and use the `github-mcp-server stdio`\ncommand with the `GITHUB_PERSONAL_ACCESS_TOKEN` environment variable set to\nyour token.\n\n## GitHub Enterprise Server\n\nThe flag `--gh-host` and the environment variable `GH_HOST` can be used to set\nthe GitHub Enterprise Server hostname.\n\n## i18n / Overriding Descriptions\n\nThe descriptions of the tools can be overridden by creating a\n`github-mcp-server-config.json` file in the same directory as the binary.\n\nThe file should contain a JSON object with the tool names as keys and the new\ndescriptions as values. For example:\n\n```json\n{\n  \"TOOL_ADD_ISSUE_COMMENT_DESCRIPTION\": \"an alternative description\",\n  \"TOOL_CREATE_BRANCH_DESCRIPTION\": \"Create a new branch in a GitHub repository\"\n}\n```\n\nYou can create an export of the current translations by running the binary with\nthe `--export-translations` flag.\n\nThis flag will preserve any translations/overrides you have made, while adding\nany new translations that have been added to the binary since the last time you\nexported.\n\n```sh\n./github-mcp-server --export-translations\ncat github-mcp-server-config.json\n```\n\nYou can also use ENV vars to override the descriptions. The environment\nvariable names are the same as the keys in the JSON file, prefixed with\n`GITHUB_MCP_` and all uppercase.\n\nFor example, to override the `TOOL_ADD_ISSUE_COMMENT_DESCRIPTION` tool, you can\nset the following environment variable:\n\n```sh\nexport GITHUB_MCP_TOOL_ADD_ISSUE_COMMENT_DESCRIPTION=\"an alternative description\"\n```\n\n## Tools\n\n### Users\n\n- **get_me** - Get details of the authenticated user\n  - No parameters required\n\n### Issues\n\n- **get_issue** - Gets the contents of an issue within a repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number (number, required)\n\n- **create_issue** - Create a new issue in a GitHub repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `title`: Issue title (string, required)\n  - `body`: Issue body content (string, optional)\n  - `assignees`: Usernames to assign to this issue (string[], optional)\n  - `labels`: Labels to apply to this issue (string[], optional)\n\n- **add_issue_comment** - Add a comment to an issue\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number (number, required)\n  - `body`: Comment text (string, required)\n\n- **list_issues** - List and filter repository issues\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `state`: Filter by state ('open', 'closed', 'all') (string, optional)\n  - `labels`: Labels to filter by (string[], optional)\n  - `sort`: Sort by ('created', 'updated', 'comments') (string, optional)\n  - `direction`: Sort direction ('asc', 'desc') (string, optional)\n  - `since`: Filter by date (ISO 8601 timestamp) (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **update_issue** - Update an existing issue in a GitHub repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number to update (number, required)\n  - `title`: New title (string, optional)\n  - `body`: New description (string, optional)\n  - `state`: New state ('open' or 'closed') (string, optional)\n  - `labels`: New labels (string[], optional)\n  - `assignees`: New assignees (string[], optional)\n  - `milestone`: New milestone number (number, optional)\n\n- **search_issues** - Search for issues and pull requests\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `per_page`: Results per page (number, optional)\n\n### Pull Requests\n\n- **get_pull_request** - Get details of a specific pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **list_pull_requests** - List and filter repository pull requests\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `state`: PR state (string, optional)\n  - `sort`: Sort field (string, optional)\n  - `direction`: Sort direction (string, optional)\n  - `perPage`: Results per page (number, optional)\n  - `page`: Page number (number, optional)\n\n- **merge_pull_request** - Merge a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n  - `commit_title`: Title for the merge commit (string, optional)\n  - `commit_message`: Message for the merge commit (string, optional)\n  - `merge_method`: Merge method (string, optional)\n\n- **get_pull_request_files** - Get the list of files changed in a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **get_pull_request_status** - Get the combined status of all status checks for a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **update_pull_request_branch** - Update a pull request branch with the latest changes from the base branch\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n  - `expectedHeadSha`: The expected SHA of the pull request's HEAD ref (string, optional)\n\n- **get_pull_request_comments** - Get the review comments on a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **get_pull_request_reviews** - Get the reviews on a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **create_pull_request_review** - Create a review on a pull request review\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n  - `body`: Review comment text (string, optional)\n  - `event`: Review action ('APPROVE', 'REQUEST_CHANGES', 'COMMENT') (string, required)\n  - `commitId`: SHA of commit to review (string, optional)\n  - `comments`: Line-specific comments array of objects, each object with path (string), position (number), and body (string) (array, optional)\n\n- **create_pull_request** - Create a new pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `title`: PR title (string, required)\n  - `body`: PR description (string, optional)\n  - `head`: Branch containing changes (string, required)\n  - `base`: Branch to merge into (string, required)\n  - `draft`: Create as draft PR (boolean, optional)\n  - `maintainer_can_modify`: Allow maintainer edits (boolean, optional)\n\n### Repositories\n\n- **create_or_update_file** - Create or update a single file in a repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `path`: File path (string, required)\n  - `message`: Commit message (string, required)\n  - `content`: File content (string, required)\n  - `branch`: Branch name (string, optional)\n  - `sha`: File SHA if updating (string, optional)\n\n- **push_files** - Push multiple files in a single commit\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `branch`: Branch to push to (string, required)\n  - `files`: Files to push, each with path and content (array, required)\n  - `message`: Commit message (string, required)\n\n- **search_repositories** - Search for GitHub repositories\n\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **create_repository** - Create a new GitHub repository\n\n  - `name`: Repository name (string, required)\n  - `description`: Repository description (string, optional)\n  - `private`: Whether the repository is private (boolean, optional)\n  - `autoInit`: Auto-initialize with README (boolean, optional)\n\n- **get_file_contents** - Get contents of a file or directory\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `path`: File path (string, required)\n  - `ref`: Git reference (string, optional)\n\n- **fork_repository** - Fork a repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `organization`: Target organization name (string, optional)\n\n- **create_branch** - Create a new branch\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `branch`: New branch name (string, required)\n  - `sha`: SHA to create branch from (string, required)\n\n- **list_commits** - Gets commits of a branch in a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `sha`: Branch name, tag, or commit SHA (string, optional)\n  - `path`: Only commits containing this file path (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n### Search\n\n- **search_code** - Search for code across GitHub repositories\n\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **search_users** - Search for GitHub users\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n### Code Scanning\n\n- **get_code_scanning_alert** - Get a code scanning alert\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `alertNumber`: Alert number (number, required)\n\n- **list_code_scanning_alerts** - List code scanning alerts for a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `ref`: Git reference (string, optional)\n  - `state`: Alert state (string, optional)\n  - `severity`: Alert severity (string, optional)\n\n## Resources\n\n### Repository Content\n\n- **Get Repository Content**\n  Retrieves the content of a repository at a specific path.\n\n  - **Template**: `repo://{owner}/{repo}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Branch**\n  Retrieves the content of a repository at a specific path for a given branch.\n\n  - **Template**: `repo://{owner}/{repo}/refs/heads/{branch}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `branch`: Branch name (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Commit**\n  Retrieves the content of a repository at a specific path for a given commit.\n\n  - **Template**: `repo://{owner}/{repo}/sha/{sha}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `sha`: Commit SHA (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Tag**\n  Retrieves the content of a repository at a specific path for a given tag.\n\n  - **Template**: `repo://{owner}/{repo}/refs/tags/{tag}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `tag`: Tag name (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Pull Request**\n  Retrieves the content of a repository at a specific path for a given pull request.\n\n  - **Template**: `repo://{owner}/{repo}/refs/pull/{prNumber}/head/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `prNumber`: Pull request number (string, required)\n    - `path`: File or directory path (string, optional)\n\n## License\n\nThis project is licensed under the terms of the MIT open source license. Please refer to [MIT](./LICENSE) for the full terms.\n",
      "npm_url": "https://www.npmjs.com/package/github-mcp-server",
      "npm_downloads": 15187,
      "keywords": [
        "github",
        "git",
        "workflow",
        "github apis",
        "git workflow",
        "github mcp"
      ],
      "category": "git-workflow-management"
    },
    "bduke011--openhands-project": {
      "owner": "bduke011",
      "name": "openhands-project",
      "url": "https://github.com/bduke011/openhands-project",
      "imageUrl": "/freedevtools/mcp/pfp/bduke011.webp",
      "description": "Integrate GitHub repositories into workflows to manage issues, automate project management tasks, and enhance collaboration among development teams.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "HTML",
      "updated_at": "2024-11-11T05:29:34Z",
      "readme_content": "# OpenHands Project\nThis project demonstrates GitHub integration.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflows",
        "repositories workflows",
        "git workflow",
        "github repositories"
      ],
      "category": "git-workflow-management"
    },
    "celyes--github-mcp-server": {
      "owner": "celyes",
      "name": "github-mcp-server",
      "url": "https://github.com/celyes/github-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/celyes.webp",
      "description": "Integrate with GitHub APIs for automation and interaction, enabling the ability to extract repository data and manage workflows. Build AI-powered tools that connect with GitHub's ecosystem and customize functionalities through configurable toolsets.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-04-20T18:33:18Z",
      "readme_content": "# GitHub MCP Server\n\nThe GitHub MCP Server is a [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction)\nserver that provides seamless integration with GitHub APIs, enabling advanced\nautomation and interaction capabilities for developers and tools.\n\n[![Install with Docker in VS Code](https://img.shields.io/badge/VS_Code-Install_Server-0098FF?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=github&inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D) [![Install with Docker in VS Code Insiders](https://img.shields.io/badge/VS_Code_Insiders-Install_Server-24bfa5?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=github&inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D&quality=insiders)\n\n## Use Cases\n\n- Automating GitHub workflows and processes.\n- Extracting and analyzing data from GitHub repositories.\n- Building AI powered tools and applications that interact with GitHub's ecosystem.\n\n## Prerequisites\n\n1. To run the server in a container, you will need to have [Docker](https://www.docker.com/) installed.\n2. Once Docker is installed, you will also need to ensure Docker is running.\n3. Lastly you will need to [Create a GitHub Personal Access Token](https://github.com/settings/personal-access-tokens/new).\nThe MCP server can use many of the GitHub APIs, so enable the permissions that you feel comfortable granting your AI tools (to learn more about access tokens, please check out the [documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens)).\n\n## Installation\n\n### Usage with VS Code\n\nFor quick installation, use one of the one-click install buttons at the top of this README. Once you complete that flow, toggle Agent mode (located by the Copilot Chat text input) and the server will start.\n\nFor manual installation, add the following JSON block to your User Settings (JSON) file in VS Code. You can do this by pressing `Ctrl + Shift + P` and typing `Preferences: Open User Settings (JSON)`.\n\nOptionally, you can add it to a file called `.vscode/mcp.json` in your workspace. This will allow you to share the configuration with others.\n\n> Note that the `mcp` key is not needed in the `.vscode/mcp.json` file.\n\n```json\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"github_token\",\n        \"description\": \"GitHub Personal Access Token\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"github\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"-i\",\n          \"--rm\",\n          \"-e\",\n          \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n          \"ghcr.io/github/github-mcp-server\"\n        ],\n        \"env\": {\n          \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"${input:github_token}\"\n        }\n      }\n    }\n  }\n}\n```\n\nMore about using MCP server tools in VS Code's [agent mode documentation](https://code.visualstudio.com/docs/copilot/chat/mcp-servers).\n\n### Usage with Claude Desktop\n\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"ghcr.io/github/github-mcp-server\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n### Build from source\n\nIf you don't have Docker, you can use `go build` to build the binary in the\n`cmd/github-mcp-server` directory, and use the `github-mcp-server stdio` command with the `GITHUB_PERSONAL_ACCESS_TOKEN` environment variable set to your token. To specify the output location of the build, use the `-o` flag. You should configure your server to use the built executable as its `command`. For example:\n\n```JSON\n{\n  \"mcp\": {\n    \"servers\": {\n      \"github\": {\n        \"command\": \"/path/to/github-mcp-server\",\n        \"args\": [\"stdio\"],\n        \"env\": {\n          \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n        }\n      }\n    }\n  }\n}\n```\n\n## Tool Configuration\n\nThe GitHub MCP Server supports enabling or disabling specific groups of functionalities via the `--toolsets` flag. This allows you to control which GitHub API capabilities are available to your AI tools. Enabling only the toolsets that you need can help the LLM with tool choice and reduce the context size.\n\n### Available Toolsets\n\nThe following sets of tools are available (all are on by default):\n\n| Toolset                 | Description                                                   |\n| ----------------------- | ------------------------------------------------------------- |\n| `repos`                 | Repository-related tools (file operations, branches, commits) |\n| `issues`                | Issue-related tools (create, read, update, comment)           |\n| `users`                 | Anything relating to GitHub Users                             |\n| `pull_requests`         | Pull request operations (create, merge, review)               |\n| `code_security`         | Code scanning alerts and security features                    |\n| `experiments`           | Experimental features (not considered stable)                 |\n\n#### Specifying Toolsets\n\nTo specify toolsets you want available to the LLM, you can pass an allow-list in two ways:\n\n1. **Using Command Line Argument**:\n\n   ```bash\n   github-mcp-server --toolsets repos,issues,pull_requests,code_security\n   ```\n\n2. **Using Environment Variable**:\n   ```bash\n   GITHUB_TOOLSETS=\"repos,issues,pull_requests,code_security\" ./github-mcp-server\n   ```\n\nThe environment variable `GITHUB_TOOLSETS` takes precedence over the command line argument if both are provided.\n\n### Using Toolsets With Docker\n\nWhen using Docker, you can pass the toolsets as environment variables:\n\n```bash\ndocker run -i --rm \\\n  -e GITHUB_PERSONAL_ACCESS_TOKEN=<your-token> \\\n  -e GITHUB_TOOLSETS=\"repos,issues,pull_requests,code_security,experiments\" \\\n  ghcr.io/github/github-mcp-server\n```\n\n### The \"all\" Toolset\n\nThe special toolset `all` can be provided to enable all available toolsets regardless of any other configuration:\n\n```bash\n./github-mcp-server --toolsets all\n```\n\nOr using the environment variable:\n\n```bash\nGITHUB_TOOLSETS=\"all\" ./github-mcp-server\n```\n\n## Dynamic Tool Discovery\n\n**Note**: This feature is currently in beta and may not be available in all environments. Please test it out and let us know if you encounter any issues.\n\nInstead of starting with all tools enabled, you can turn on dynamic toolset discovery. Dynamic toolsets allow the MCP host to list and enable toolsets in response to a user prompt. This should help to avoid situations where the model gets confused by the shear number of tools available.\n\n### Using Dynamic Tool Discovery\n\nWhen using the binary, you can pass the `--dynamic-toolsets` flag.\n\n```bash\n./github-mcp-server --dynamic-toolsets\n```\n\nWhen using Docker, you can pass the toolsets as environment variables:\n\n```bash\ndocker run -i --rm \\\n  -e GITHUB_PERSONAL_ACCESS_TOKEN=<your-token> \\\n  -e GITHUB_DYNAMIC_TOOLSETS=1 \\\n  ghcr.io/github/github-mcp-server\n```\n\n## GitHub Enterprise Server\n\nThe flag `--gh-host` and the environment variable `GITHUB_HOST` can be used to set\nthe GitHub Enterprise Server hostname.\n\n## i18n / Overriding Descriptions\n\nThe descriptions of the tools can be overridden by creating a\n`github-mcp-server-config.json` file in the same directory as the binary.\n\nThe file should contain a JSON object with the tool names as keys and the new\ndescriptions as values. For example:\n\n```json\n{\n  \"TOOL_ADD_ISSUE_COMMENT_DESCRIPTION\": \"an alternative description\",\n  \"TOOL_CREATE_BRANCH_DESCRIPTION\": \"Create a new branch in a GitHub repository\"\n}\n```\n\nYou can create an export of the current translations by running the binary with\nthe `--export-translations` flag.\n\nThis flag will preserve any translations/overrides you have made, while adding\nany new translations that have been added to the binary since the last time you\nexported.\n\n```sh\n./github-mcp-server --export-translations\ncat github-mcp-server-config.json\n```\n\nYou can also use ENV vars to override the descriptions. The environment\nvariable names are the same as the keys in the JSON file, prefixed with\n`GITHUB_MCP_` and all uppercase.\n\nFor example, to override the `TOOL_ADD_ISSUE_COMMENT_DESCRIPTION` tool, you can\nset the following environment variable:\n\n```sh\nexport GITHUB_MCP_TOOL_ADD_ISSUE_COMMENT_DESCRIPTION=\"an alternative description\"\n```\n\n## Tools\n\n### Users\n\n- **get_me** - Get details of the authenticated user\n  - No parameters required\n\n### Issues\n\n- **get_issue** - Gets the contents of an issue within a repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number (number, required)\n\n- **get_issue_comments** - Get comments for a GitHub issue\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number (number, required)\n\n- **create_issue** - Create a new issue in a GitHub repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `title`: Issue title (string, required)\n  - `body`: Issue body content (string, optional)\n  - `assignees`: Usernames to assign to this issue (string[], optional)\n  - `labels`: Labels to apply to this issue (string[], optional)\n\n- **add_issue_comment** - Add a comment to an issue\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number (number, required)\n  - `body`: Comment text (string, required)\n\n- **list_issues** - List and filter repository issues\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `state`: Filter by state ('open', 'closed', 'all') (string, optional)\n  - `labels`: Labels to filter by (string[], optional)\n  - `sort`: Sort by ('created', 'updated', 'comments') (string, optional)\n  - `direction`: Sort direction ('asc', 'desc') (string, optional)\n  - `since`: Filter by date (ISO 8601 timestamp) (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **update_issue** - Update an existing issue in a GitHub repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number to update (number, required)\n  - `title`: New title (string, optional)\n  - `body`: New description (string, optional)\n  - `state`: New state ('open' or 'closed') (string, optional)\n  - `labels`: New labels (string[], optional)\n  - `assignees`: New assignees (string[], optional)\n  - `milestone`: New milestone number (number, optional)\n\n- **search_issues** - Search for issues and pull requests\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n### Pull Requests\n\n- **get_pull_request** - Get details of a specific pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **list_pull_requests** - List and filter repository pull requests\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `state`: PR state (string, optional)\n  - `sort`: Sort field (string, optional)\n  - `direction`: Sort direction (string, optional)\n  - `perPage`: Results per page (number, optional)\n  - `page`: Page number (number, optional)\n\n- **merge_pull_request** - Merge a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n  - `commit_title`: Title for the merge commit (string, optional)\n  - `commit_message`: Message for the merge commit (string, optional)\n  - `merge_method`: Merge method (string, optional)\n\n- **get_pull_request_files** - Get the list of files changed in a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **get_pull_request_status** - Get the combined status of all status checks for a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **update_pull_request_branch** - Update a pull request branch with the latest changes from the base branch\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n  - `expectedHeadSha`: The expected SHA of the pull request's HEAD ref (string, optional)\n\n- **get_pull_request_comments** - Get the review comments on a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **get_pull_request_reviews** - Get the reviews on a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **create_pull_request_review** - Create a review on a pull request review\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n  - `body`: Review comment text (string, optional)\n  - `event`: Review action ('APPROVE', 'REQUEST_CHANGES', 'COMMENT') (string, required)\n  - `commitId`: SHA of commit to review (string, optional)\n  - `comments`: Line-specific comments array of objects to place comments on pull request changes (array, optional)\n    - For inline comments: provide `path`, `position` (or `line`), and `body`\n    - For multi-line comments: provide `path`, `start_line`, `line`, optional `side`/`start_side`, and `body`\n\n- **create_pull_request** - Create a new pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `title`: PR title (string, required)\n  - `body`: PR description (string, optional)\n  - `head`: Branch containing changes (string, required)\n  - `base`: Branch to merge into (string, required)\n  - `draft`: Create as draft PR (boolean, optional)\n  - `maintainer_can_modify`: Allow maintainer edits (boolean, optional)\n\n- **add_pull_request_review_comment** - Add a review comment to a pull request or reply to an existing comment\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pull_number`: Pull request number (number, required)\n  - `body`: The text of the review comment (string, required)\n  - `commit_id`: The SHA of the commit to comment on (string, required unless using in_reply_to)\n  - `path`: The relative path to the file that necessitates a comment (string, required unless using in_reply_to)\n  - `line`: The line of the blob in the pull request diff that the comment applies to (number, optional)\n  - `side`: The side of the diff to comment on (LEFT or RIGHT) (string, optional)\n  - `start_line`: For multi-line comments, the first line of the range (number, optional)\n  - `start_side`: For multi-line comments, the starting side of the diff (LEFT or RIGHT) (string, optional)\n  - `subject_type`: The level at which the comment is targeted (line or file) (string, optional)\n  - `in_reply_to`: The ID of the review comment to reply to (number, optional). When specified, only body is required and other parameters are ignored.\n\n- **update_pull_request** - Update an existing pull request in a GitHub repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number to update (number, required)\n  - `title`: New title (string, optional)\n  - `body`: New description (string, optional)\n  - `state`: New state ('open' or 'closed') (string, optional)\n  - `base`: New base branch name (string, optional)\n  - `maintainer_can_modify`: Allow maintainer edits (boolean, optional)\n\n### Repositories\n\n- **create_or_update_file** - Create or update a single file in a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `path`: File path (string, required)\n  - `message`: Commit message (string, required)\n  - `content`: File content (string, required)\n  - `branch`: Branch name (string, optional)\n  - `sha`: File SHA if updating (string, optional)\n\n- **list_branches** - List branches in a GitHub repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **push_files** - Push multiple files in a single commit\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `branch`: Branch to push to (string, required)\n  - `files`: Files to push, each with path and content (array, required)\n  - `message`: Commit message (string, required)\n\n- **search_repositories** - Search for GitHub repositories\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **create_repository** - Create a new GitHub repository\n  - `name`: Repository name (string, required)\n  - `description`: Repository description (string, optional)\n  - `private`: Whether the repository is private (boolean, optional)\n  - `autoInit`: Auto-initialize with README (boolean, optional)\n\n- **get_file_contents** - Get contents of a file or directory\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `path`: File path (string, required)\n  - `ref`: Git reference (string, optional)\n\n- **fork_repository** - Fork a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `organization`: Target organization name (string, optional)\n\n- **create_branch** - Create a new branch\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `branch`: New branch name (string, required)\n  - `sha`: SHA to create branch from (string, required)\n\n- **list_commits** - Get a list of commits of a branch in a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `sha`: Branch name, tag, or commit SHA (string, optional)\n  - `path`: Only commits containing this file path (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **get_commit** - Get details for a commit from a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `sha`: Commit SHA, branch name, or tag name (string, required)\n  - `page`: Page number, for files in the commit (number, optional)\n  - `perPage`: Results per page, for files in the commit (number, optional)\n\n  - **search_code** - Search for code across GitHub repositories\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n### Users\n\n- **search_users** - Search for GitHub users\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n### Code Scanning\n\n- **get_code_scanning_alert** - Get a code scanning alert\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `alertNumber`: Alert number (number, required)\n\n- **list_code_scanning_alerts** - List code scanning alerts for a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `ref`: Git reference (string, optional)\n  - `state`: Alert state (string, optional)\n  - `severity`: Alert severity (string, optional)\n  - `tool_name`: The name of the tool used for code scanning (string, optional)\n\n### Secret Scanning\n\n- **get_secret_scanning_alert** - Get a secret scanning alert\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `alertNumber`: Alert number (number, required)\n\n- **list_secret_scanning_alerts** - List secret scanning alerts for a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `state`: Alert state (string, optional)\n  - `secret_type`: The secret types to be filtered for in a comma-separated list (string, optional)\n  - `resolution`: The resolution status (string, optional)\n\n## Resources\n\n### Repository Content\n\n- **Get Repository Content**\n  Retrieves the content of a repository at a specific path.\n\n  - **Template**: `repo://{owner}/{repo}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Branch**\n  Retrieves the content of a repository at a specific path for a given branch.\n\n  - **Template**: `repo://{owner}/{repo}/refs/heads/{branch}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `branch`: Branch name (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Commit**\n  Retrieves the content of a repository at a specific path for a given commit.\n\n  - **Template**: `repo://{owner}/{repo}/sha/{sha}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `sha`: Commit SHA (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Tag**\n  Retrieves the content of a repository at a specific path for a given tag.\n\n  - **Template**: `repo://{owner}/{repo}/refs/tags/{tag}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `tag`: Tag name (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Pull Request**\n  Retrieves the content of a repository at a specific path for a given pull request.\n\n  - **Template**: `repo://{owner}/{repo}/refs/pull/{prNumber}/head/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `prNumber`: Pull request number (string, required)\n    - `path`: File or directory path (string, optional)\n\n## Library Usage\n\nThe exported Go API of this module should currently be considered unstable, and subject to breaking changes. In the future, we may offer stability; please file an issue if there is a use case where this would be valuable.\n\n## License\n\nThis project is licensed under the terms of the MIT open source license. Please refer to [MIT](./LICENSE) for the full terms.\n",
      "npm_url": "https://www.npmjs.com/package/github-mcp-server",
      "npm_downloads": 15187,
      "keywords": [
        "github",
        "git",
        "workflows",
        "git workflow",
        "github ecosystem",
        "github apis"
      ],
      "category": "git-workflow-management"
    },
    "ceshine--git-prompts-mcp-server": {
      "owner": "ceshine",
      "name": "git-prompts-mcp-server",
      "url": "https://github.com/ceshine/git-prompts-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/ceshine.webp",
      "description": "Generate prompts from Git repository content to assist in development workflows. Create pull request descriptions and other relevant prompts based on code changes directly within Zed Editor.",
      "stars": 2,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-30T13:19:08Z",
      "readme_content": "# Git Prompts MCP Server\n\nThis repository provides a Model Context Protocol (MCP) server that offers several commands to generate prompts based on the Git repository's content.\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/ceshine-git-prompts-mcp-server-badge.png)](https://mseep.ai/app/ceshine-git-prompts-mcp-server)\n\n[![Tests](https://github.com/ceshine/git-prompts-mcp-server/actions/workflows/run_tests.yml/badge.svg)](https://github.com/ceshine/git-prompts-mcp-server/actions/workflows/run_tests.yml)\n\n## Acknowledgements\n\n- This repository draws heavy inspiration from [MarkItDown MCP server](https://github.com/KorigamiK/markitdown_mcp_server) and the example [Git MCP server](https://github.com/modelcontextprotocol/servers/tree/main/src/git).\n- The [AGENTS.md](./AGENTS.md) was adapted from the example sin this blog post: [Getting Good Results from Claude Code](https://www.dzombak.com/blog/2025/08/getting-good-results-from-claude-code/).\n\n## Installation\n\n### Manual Installation\n\n1. Clone this repository\n2. Install dependencies: `uv sync --frozen`\n\n## Usage\n\n### As a MCP Server for Zed Editor\n\nAdd the following to your `settings.json`:\n\n#### Since Zed version 0.194.3\n\n* Source of the change: \"Use standardised format for configuring MCP Servers\" ([#33539](https://github.com/zed-industries/zed/pull/33539))\n\n```json\n\"context_servers\": {\n  \"git_prompt_mcp\": {\n    \"source\": \"custom\",\n    \"command\": \"uv\",\n    \"args\": [\n    \"--directory\",\n    \"/path/to/local/git_prompts_mcp_server\",\n    \"run\",\n    \"git-prompts-mcp-server\",\n    \"/path/to/repo/\", // parent folder of the .git directory\n    \"--excludes\", // exclude files and directories from diff results (the server use fnmatch in the backend)\n    \"*/uv.lock\",\n    \"--excludes\",\n    \"uv.lock\",\n    \"--excludes\",\n    \".gitignore\",\n    \"--format\", // format for diff results\n    \"json\"  // options: json, text\n    ],\n    \"env\": {}\n  }\n}\n```\n\n#### Prior to Zed version 0.194.3\n\n```json\n\"context_servers\": {\n  \"git_prompt_mcp\": {\n    \"source\": \"custom\",  // This is required for Zed version 0.193.x.\n    \"command\": {\n      \"path\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/local/git_prompts_mcp_server\",\n        \"run\",\n        \"git-prompts-mcp-server\",\n        \"/path/to/repo/\", // parent folder of the .git directory\n        \"--excludes\", // exclude files and directories from diff results (the server use fnmatch in the backend)\n        \"*/uv.lock\",\n        \"--excludes\",\n        \"uv.lock\",\n        \"--excludes\",\n        \".gitignore\",\n        \"--format\", // format for diff results\n        \"json\"  // options: json, text\n      ]\n    },\n    \"settings\": {}\n  }\n}\n```\n\n#### Commands\n\nThe server responds to the following commands:\n\n1. `/git-diff <ancestor_branch_or_commit>`: Populate the diff results between HEAD and the specified ancestor branch or commit.\n2. `/generate-pr-desc <ancestor_branch_or_commit>`: Generate a pull request description based on the diff results and commit history between HEAD and the specified ancestor branch or commit.\n3. `/git-cached-diff`: Populate the diff results for the staged changes and HEAD.\n4. `/git-commit-messages <ancestor_branch_or_commit>`: Get commit messages between the ancestor and HEAD.\n\nExamples:\n\n1. `/generate-pr-desc main`\n2. `/git-diff dev`\n3. `/git-cached-diff`\n4. `/git-commit-messages main`\n\n#### Tools\n\nThe server also provides the following tools for MCP-compatible clients:\n\n- `git-diff`: Get a diff between the HEAD and the ancestor branch or commit.\n- `git-cached-diff`: Get a diff between the files in the staging area (the index) and the HEAD.\n- `git-commit-messages`: Get commit messages between the ancestor and HEAD.\n\n#### Environment Variables\n\nThe server can be configured with the following environment variables, which can be set in the `env` section of the Zed `settings.json`:\n\n- `GIT_REPOSITORY`: The path to the Git repository. This is automatically passed by Zed.\n- `GIT_EXCLUDES`: A comma-separated list of file patterns to exclude from the diff results (e.g., `\"*/uv.lock,*.log\"`).\n- `GIT_OUTPUT_FORMAT`: The output format for the diff results. Can be `json` (default) or `text`.\n\n## Release Notes\n\n### 0.3.0 (2025-09-05)\n\n- Implemented the MCP tool version of the three MCP prompts: `git-diff`, `generate-pr-desc`, and `git-cached-diff`. This allows for a more integrated experience with MCP-compatible clients.\n- Added a new command `/git-commit-messages` to get commit messages between a specified ancestor and HEAD.\n\n## License\n\nMIT License. See [LICENSE](LICENSE) for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "prompts",
        "workflows",
        "git prompts",
        "prompts git",
        "git workflow"
      ],
      "category": "git-workflow-management"
    },
    "chris-miaskowski--custom-gitlab-mcp-server": {
      "owner": "chris-miaskowski",
      "name": "custom-gitlab-mcp-server",
      "url": "https://github.com/chris-miaskowski/custom-gitlab-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/chris-miaskowski.webp",
      "description": "Integrate AI assistants with GitLab repositories to manage files, issues, and merge requests. Perform actions like searching for repositories, updating files, and forking projects.",
      "stars": 1,
      "forks": 3,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-08-07T05:38:10Z",
      "readme_content": "# Custom GitLab MCP Server\n\nA custom implementation of the GitLab MCP (Model Context Protocol) server for integration with Claude and other MCP-compliant AI assistants.\n\n## Overview\n\nThis MCP server provides seamless integration with GitLab repositories, allowing AI assistants to:\n- Search GitLab repositories\n- Fetch file contents\n- Create or update files\n- Push multiple files in a single commit\n- Create issues and merge requests\n- Fork repositories\n- Create branches\n\n## Fixed Implementation\n\nThis custom implementation fixes issues with schema validation that were present in the standard GitLab MCP server implementation, specifically for the `search_repositories` tool.\n\n## Installation\n\n1. Clone this repository\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Configure in your Claude settings file or Claude Desktop config file:\n   ```json\n   {\n     \"mcpServers\": {\n       \"github.com/modelcontextprotocol/servers/tree/main/src/gitlab\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"/path/to/custom-gitlab-server/index.js\"\n         ],\n         \"env\": {\n           \"GITLAB_PERSONAL_ACCESS_TOKEN\": \"your-gitlab-token\",\n           \"GITLAB_API_URL\": \"https://your-gitlab-instance/api/v4\"\n         }\n       }\n     }\n   }\n   ```\n\n## Prerequisites\n\n- Node.js (v14 or higher)\n- GitLab Personal Access Token with appropriate scopes:\n  - `api` for full API access\n  - `read_api` for read-only access\n  - `read_repository` and `write_repository` for repository operations\n\n## Available Tools\n\n| Tool Name | Description |\n|-----------|-------------|\n| `search_repositories` | Search for GitLab projects |\n| `get_file_contents` | Get contents of a file or directory |\n| `create_or_update_file` | Create or update a single file |\n| `push_files` | Push multiple files in a single commit |\n| `create_repository` | Create a new GitLab project |\n| `create_issue` | Create a new issue |\n| `create_merge_request` | Create a new merge request |\n| `fork_repository` | Fork a project |\n| `create_branch` | Create a new branch |\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gitlab",
        "git",
        "workflow",
        "git workflow",
        "gitlab repositories",
        "gitlab mcp"
      ],
      "category": "git-workflow-management"
    },
    "cyanheads--git-mcp-server": {
      "owner": "cyanheads",
      "name": "git-mcp-server",
      "url": "https://github.com/cyanheads/git-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/cyanheads.webp",
      "description": "Interact with Git repositories through a robust API, enabling operations such as cloning, committing, pushing, and repository management. Focuses on optimizing performance, error handling, and secure command execution.",
      "stars": 127,
      "forks": 31,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-01T22:43:43Z",
      "readme_content": "<div align=\"center\">\n\n# @cyanheads/git-mcp-server\n\n**Empower your AI agents with comprehensive, secure, and programmatic control over Git repositories!**\n\n[![TypeScript](https://img.shields.io/badge/TypeScript-^5.8.3-blue?style=flat-square)](https://www.typescriptlang.org/)\n[![Model Context Protocol SDK](https://img.shields.io/badge/MCP%20SDK-^1.18.2-green?style=flat-square)](https://github.com/modelcontextprotocol/typescript-sdk)\n[![MCP Spec Version](https://img.shields.io/badge/MCP%20Spec-2025--06--18-lightgrey?style=flat-square)](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-06-18/changelog.mdx)\n[![Version](https://img.shields.io/badge/Version-2.3.5-blue?style=flat-square)](./CHANGELOG.md)\n[![Coverage](https://img.shields.io/badge/Coverage-17.04%25-red?style=flat-square)](./vitest.config.ts)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue?style=flat-square)](https://opensource.org/licenses/Apache-2.0)\n[![Status](https://img.shields.io/badge/Status-Stable-green?style=flat-square)](https://github.com/cyanheads/git-mcp-server/issues)\n[![GitHub](https://img.shields.io/github/stars/cyanheads/git-mcp-server?style=social)](https://github.com/cyanheads/git-mcp-server)\n\n</div>\n\nAn MCP (Model Context Protocol) server providing a robust, LLM-friendly interface to the standard `git` command-line tool. Enables LLMs and AI agents to perform a wide range of Git operations like clone, commit, push, pull, branch, diff, log, status, and more via the MCP standard.\n\nBuilt on the [`cyanheads/mcp-ts-template`](https://github.com/cyanheads/mcp-ts-template), this server follows a modular architecture with robust error handling, logging, and security features.\n\n## 🤔 Why Use This Server?\n\n- **Automate Git Workflows**: Enable AI agents to programmatically clone, commit, push, and manage branches.\n- **Gain Repository Insights**: Allow tools to check status, view logs, and diff changes without direct shell access.\n- **Integrate Git into AI-driven Development**: Let LLMs manage version control as part of their coding tasks.\n- **Production-Ready Foundation**: Inherits logging, error handling, and security from the template.\n\n## 🚀 Core Capabilities: Git Tools 🛠️\n\nThis server equips your AI with a comprehensive suite of tools to interact with Git repositories:\n\n| Tool Category            | Description                                                       | Key Features -                                                                                                                                                                                                                                                                                                                                         |\n| :----------------------- | :---------------------------------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **Repository & Staging** | Manage repository state, from initialization to staging changes.  | - `git_init`: Initialize a new repository.<br/>- `git_clone`: Clone remote repositories.<br/>- `git_add`: Stage changes for commit.<br/>- `git_status`: Check the status of the working directory.<br/>- `git_clean`: Remove untracked files (requires force flag). -                                                                                  |\n| **Committing & History** | Create commits, inspect history, and view changes over time.      | - `git_commit`: Create new commits with conventional messages.<br/>- `git_log`: View commit history with filtering options.<br/>- `git_diff`: Show changes between commits, branches, or the working tree.<br/>- `git_show`: Inspect Git objects like commits and tags. -                                                                              |\n| **Branching & Merging**  | Manage branches, merge changes, and rebase commits.               | - `git_branch`: List, create, delete, and rename branches.<br/>- `git_checkout`: Switch between branches or commits.<br/>- `git_merge`: Merge branches together.<br/>- `git_rebase`: Re-apply commits on top of another base.<br/>- `git_cherry_pick`: Apply specific commits from other branches. -                                                   |\n| **Remote Operations**    | Interact with remote repositories.                                | - `git_remote`: Manage remote repository connections.<br/>- `git_fetch`: Download objects and refs from a remote.<br/>- `git_pull`: Fetch and integrate with another repository.<br/>- `git_push`: Update remote refs with local changes. -                                                                                                            |\n| **Advanced Workflows**   | Support for more complex Git workflows and repository management. | - `git_tag`: Create, list, or delete tags.<br/>- `git_stash`: Temporarily store modified files.<br/>- `git_worktree`: Manage multiple working trees attached to a single repository.<br/>- `git_set_working_dir`: Set a persistent working directory for a session.<br/>- `git_wrapup_instructions`: Get a standard workflow for finalizing changes. - |\n\n---\n\n## Table of Contents\n\n| [Overview](#overview) | [Features](#features) | [Installation](#installation) |\n| [Configuration](#configuration) | [Project Structure](#project-structure) |\n| [Tools](#tools) | [Resources](#resources) | [Development](#development) | [License](#license) |\n\n## Overview\n\nThe Git MCP Server acts as a bridge, allowing applications (MCP Clients) that understand the Model Context Protocol (MCP) – like advanced AI coding assistants (LLMs), IDE extensions, or custom research tools – to interact directly and safely with local Git repositories.\n\nInstead of complex scripting or manual command-line interaction, your tools can leverage this server to:\n\n- **Automate Git workflows**: Clone repositories, create branches, stage changes, commit work, push updates, and manage tags programmatically.\n- **Gain repository insights**: Check status, view logs, diff changes, and inspect Git objects without leaving the host application.\n- **Integrate Git into AI-driven development**: Enable LLMs to manage version control as part of their coding or refactoring tasks, ensuring code integrity and history.\n- **Support CI/CD and DevOps automation**: Build custom scripts and tools that orchestrate complex Git operations for automated builds, testing, and deployments.\n\nBuilt on the robust `mcp-ts-template`, this server provides a standardized, secure, and efficient way to expose Git functionality via the MCP standard. It achieves this by securely executing the standard `git` command-line tool installed on the system using Node.js's `child_process` module, ensuring compatibility and leveraging the full power of Git.\n\n> **Developer Note**: This repository includes a [.clinerules](.clinerules) file that serves as a developer cheat sheet for your LLM coding agent with quick reference for the codebase patterns, file locations, and code snippets.\n\n## Features\n\n### Core Utilities\n\nLeverages the robust utilities provided by the `mcp-ts-template`:\n\n- **Logging**: Structured, configurable logging (file rotation, stdout JSON, MCP notifications) with sensitive data redaction.\n- **Error Handling**: Centralized error processing, standardized error types (`McpError`), and automatic logging.\n- **Configuration**: Environment variable loading (`dotenv`) with comprehensive validation.\n- **Input Validation/Sanitization**: Uses `zod` for schema validation and custom sanitization logic (crucial for paths).\n- **Request Context**: Tracking and correlation of operations via unique request IDs using `AsyncLocalStorage`.\n- **Type Safety**: Strong typing enforced by TypeScript and Zod schemas.\n- **HTTP Transport**: High-performance HTTP server using **Hono**, featuring session management, CORS, and authentication support.\n- **Deployment**: Multi-stage `Dockerfile` for creating small, secure production images with native dependency support.\n\n### Git Integration\n\n- **Direct Git CLI Execution**: Interacts with Git by securely executing the standard `git` command-line tool via Node.js `child_process`, ensuring full compatibility and access to Git's features.\n- **Comprehensive Command Coverage**: Exposes a wide range of Git commands as MCP tools (see [Tools](#tools) section).\n- **Repository Interaction**: Supports status checking, branching, staging, committing, fetching, pulling, pushing, diffing, logging, resetting, tagging, and more.\n- **Working Directory Management**: Allows setting and clearing a session-specific working directory for context persistence across multiple Git operations.\n- **Safety Features**: Includes checks and requires explicit confirmation for potentially destructive operations like `git clean` and `git reset --hard`.\n- **Commit Signing**: Supports GPG or SSH signing for verified commits, controlled via the `GIT_SIGN_COMMITS` environment variable and server-side Git configuration. Includes an optional tool parameter to fall back to unsigned commits on signing failure.\n\n## Installation\n\n### Prerequisites\n\n- [Node.js (>=20.0.0)](https://nodejs.org/)\n- [npm](https://www.npmjs.com/) (comes with Node.js)\n- [Git](https://git-scm.com/) installed and accessible in the system PATH.\n\n### MCP Client Settings\n\nAdd the following to your MCP client's configuration file (e.g., `cline_mcp_settings.json`). This configuration uses `npx` to run the server, which will automatically install the package if not already present:\n\n```json\n{\n  \"mcpServers\": {\n    \"git-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"@cyanheads/git-mcp-server\"],\n      \"env\": {\n        \"MCP_LOG_LEVEL\": \"info\",\n        \"GIT_SIGN_COMMITS\": \"false\"\n      }\n    }\n  }\n}\n```\n\n### If running manually (not via MCP client) for development or testing\n\n#### Install via npm\n\n```bash\nnpm install @cyanheads/git-mcp-server\n```\n\n### 3. Running the Server\n\n- **Production (Stdio):**\n  ```bash\n  npm run start:stdio\n  ```\n- **Production (HTTP):**\n  ```bash\n  npm run start:http\n  ```\n- **Development (Stdio with watch mode):**\n  ```bash\n  npm run dev:stdio\n  ```\n- **Development (HTTP with watch mode):**\n  ```bash\n  npm run dev:http\n  ```\n\n## ⚙️ Configuration\n\nConfigure the server using these environment variables (or a `.env` file):\n\n| Variable                       | Description                                                                                                                           | Default     |\n| ------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------- | ----------- |\n| `MCP_TRANSPORT_TYPE`           | Transport mechanism: `stdio` or `http`.                                                                                               | `stdio`     |\n| `MCP_HTTP_PORT`                | Port for the HTTP server (if `MCP_TRANSPORT_TYPE=http`). Retries next ports if busy.                                                  | `3015`      |\n| `MCP_HTTP_HOST`                | Host address for the HTTP server (if `MCP_TRANSPORT_TYPE=http`).                                                                      | `127.0.0.1` |\n| `MCP_ALLOWED_ORIGINS`          | Comma-separated list of allowed origins for CORS (if `MCP_TRANSPORT_TYPE=http`).                                                      | (none)      |\n| `MCP_LOG_LEVEL`                | Logging level (`debug`, `info`, `notice`, `warning`, `error`, `crit`, `alert`, `emerg`). Inherited from template.                     | `info`      |\n| `GIT_SIGN_COMMITS`             | Set to `\"true\"` to enable signing attempts for commits made by the `git_commit` tool. Requires server-side Git/key setup (see below). | `false`     |\n| `GIT_WRAPUP_INSTRUCTIONS_PATH` | Optional. Path to a markdown file with custom git wrapup instructions.                                                                | (none)      |\n| `MCP_AUTH_MODE`                | Authentication mode: `jwt`, `oauth`, or `none`.                                                                                       | `none`      |\n| `MCP_AUTH_SECRET_KEY`          | Secret key for JWT validation (if `MCP_AUTH_MODE=jwt`).                                                                               | `''`        |\n| `OAUTH_ISSUER_URL`             | OIDC issuer URL for OAuth validation (if `MCP_AUTH_MODE=oauth`).                                                                      | `''`        |\n| `OAUTH_AUDIENCE`               | Audience claim for OAuth validation (if `MCP_AUTH_MODE=oauth`).                                                                       | `''`        |\n\n## 🏗️ Project Structure\n\n- **`src/mcp-server/`**: Contains the core MCP server, tools, resources, and transport handlers.\n- **`src/config/`**: Handles loading and validation of environment variables.\n- **`src/types-global/`**: Defines shared TypeScript interfaces and type definitions.\n- **`src/utils/`**: Core utilities (logging, error handling, security, etc.).\n- **`src/index.ts`**: The main entry point that initializes and starts the server.\n\n**Explore the full structure yourself:**\n\nSee the current file tree in [docs/tree.md](docs/tree.md) or generate it dynamically:\n\n```bash\nnpm run tree\n```\n\n## 📦 Resources\n\nIn addition to tools, the server provides resources that offer contextual information about the Git environment.\n\n| Resource URI              | Description                                                                                                    |\n| :------------------------ | :------------------------------------------------------------------------------------------------------------- |\n| `git://working-directory` | Returns the currently configured working directory for the session as a JSON object. Shows `NOT_SET` if unset. |\n\n## Development\n\nThis project is set up with modern tooling to ensure code quality and a smooth development experience.\n\n### Linting and Formatting\n\n- **ESLint**: We use ESLint with the `typescript-eslint` plugin to enforce code quality and consistency. Run the linter with:\n  ```bash\n  npm run lint\n  ```\n  To automatically fix issues, run:\n  ```bash\n  npm run lint:fix\n  ```\n- **Prettier**: Code formatting is handled by Prettier. To format the entire codebase, run:\n  ```bash\n  npm run format\n  ```\n\n### Type Checking\n\nYou can run the TypeScript compiler to check for type errors without emitting any files:\n\n```bash\nnpm run typecheck\n```\n\n### Testing\n\nThis server uses [Vitest](https://vitest.dev/) for testing.\n\n- **Run all tests once:**\n  ```bash\n  npm test\n  ```\n- **Run tests in watch mode:**\n  ```bash\n  npm run test:watch\n  ```\n- **Run tests and generate a coverage report:**\n  ```bash\n  npm run test:coverage\n  ```\n\n### Generating Documentation\n\nAPI documentation is generated from JSDoc comments using [TypeDoc](https://typedoc.org/). To generate the documentation, run:\n\n```bash\nnpm run docs:generate\n```\n\nThe output will be saved in the `docs/api` directory.\n\n## 🧩 Extending the System\n\nThe canonical pattern for adding new tools is defined in the [.clinerules](.clinerules) file. It mandates a strict separation of concerns:\n\n1.  **`logic.ts`**: Contains the pure business logic, Zod schemas, and type definitions. This file throws structured errors on failure.\n2.  **`registration.ts`**: Acts as the \"handler.\" It registers the tool with the server, wraps the logic call in a `try...catch` block, and formats the final success or error response.\n\nThis \"Logic Throws, Handler Catches\" pattern ensures that core logic remains pure and testable, while the registration layer handles all side effects and response formatting.\n\n## 📜 License\n\nThis project is licensed under the Apache License 2.0. See the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "https://www.npmjs.com/package/git-mcp-server",
      "npm_downloads": 3417,
      "keywords": [
        "git",
        "repositories",
        "cyanheads",
        "git workflow",
        "cyanheads git",
        "git mcp"
      ],
      "category": "git-workflow-management"
    },
    "damonxue--mcp-ossinsight": {
      "owner": "damonxue",
      "name": "mcp-ossinsight",
      "url": "https://github.com/damonxue/mcp-ossinsight",
      "imageUrl": "/freedevtools/mcp/pfp/damonxue.webp",
      "description": "Analyze GitHub data to gain insights into repositories, developers, and organizations, enabling detailed understanding of the open-source ecosystem through natural language queries.",
      "stars": 13,
      "forks": 3,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-05-14T08:29:05Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/damonxue-mcp-ossinsight-badge.png)](https://mseep.ai/app/damonxue-mcp-ossinsight)\n\n# OSSInsight MCP Server\n\nAn MCP server based on OSSInsight.io, providing data analysis for GitHub individuals, organizations, and repositories, as well as in-depth insights into the open source ecosystem.\n\n<a href=\"https://glama.ai/mcp/servers/@damonxue/mcp-ossinsight\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@damonxue/mcp-ossinsight/badge\" alt=\"OSSInsight Server MCP server\" />\n</a>\n\n## Features\n\n- **Repository Analysis**: Get comprehensive data about GitHub repositories, including star trends, contributor activity, and code commits\n- **Developer Analysis**: Understand developers' contribution patterns, activity history, and influence\n- **Organization Analysis**: View a global perspective of GitHub organizations, including members, repositories, and overall activity\n- **Project Comparison**: Compare key metrics between two repositories side by side to discover differences and similarities\n- **Project Collections**: Browse and explore curated collections of projects, such as open-source databases, AI tools, etc.\n- **Natural Language Queries**: Access OSSInsight's chat interface to ask questions about GitHub data\n\n## Tools\n\n1. `get_repo_analysis`\n   - Get detailed analysis of a GitHub repository\n   - Input:\n     - `owner_repo` (string): Repository name in the format 'owner/repo'\n     - `time_period` (optional string): Time range for analysis\n   - Returns: Repository analysis data from both API and web page, with a link to the OSSInsight page\n\n2. `get_developer_analysis`\n   - Get detailed analysis of a GitHub developer\n   - Input:\n     - `username` (string): GitHub username\n   - Returns: Developer data from both API and web page, with a link to the OSSInsight page\n\n3. `get_collection`\n   - Get information about a specific collection of repositories\n   - Input:\n     - `collection_id` (string): Collection ID, e.g., 'open-source-database'\n   - Returns: Collection data and a link to the collection page on OSSInsight\n\n4. `list_collections`\n   - List all available repository collections\n   - Input:\n     - `page` (optional number): Page number, starting from 1\n     - `per_page` (optional number): Number of results per page, default is 20\n   - Returns: List of collections and a link to browse collections on OSSInsight\n\n5. `natural_language_query`\n   - Direct access to OSSInsight's natural language query interface\n   - Input:\n     - `query` (string): Natural language query, e.g., 'Which repositories gained the most stars in 2023?'\n   - Returns: A direct link to OSSInsight's chat interface with the query prefilled\n\n## Implementation Details\n\nThis MCP server uses a dual approach to retrieve data:\n\n1. **OSSInsight Public API** (v1) - Makes direct API calls to `https://api.ossinsight.io/v1/` endpoints\n2. **Web Page Scraping** - Falls back to scraping the OSSInsight web pages when APIs are limited or unavailable\n\nThis approach ensures maximum coverage of OSSInsight's features while respecting the public API's rate limits (600 requests per hour per IP).\n\n## Setup\n\n### Usage Configuration\n\n#### Docker\n\n```json\n{\n  \"mcpServers\": { \n    \"ossinsight\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"mcp/ossinsight\"\n      ]\n    }\n  }\n}\n```\n\n#### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"ossinsight\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-ossinsight\"\n      ]\n    }\n  }\n}\n```\n\n## Build\n\nDocker build:\n\n```bash\ndocker build -t mcp/ossinsight -f Dockerfile .\n```\n\n## Examples\n\n### Get Repository Analysis\n\n```\n// Get analysis data for the VSCode repository\n{\n  \"owner_repo\": \"microsoft/vscode\"\n}\n```\n\n### Compare Two Repositories\n\n```\n// Compare React and Vue\n{\n  \"repo1\": \"facebook/react\",\n  \"repo2\": \"vuejs/vue\"\n}\n```\n\n### Natural Language Query\n\n```\n// Get a link to query data using natural language\n{\n  \"query\": \"Which database projects gained the most stars in 2023?\"\n}\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you can freely use, modify, and distribute this software, subject to the terms and conditions of the MIT License. See the LICENSE file in the project repository for details.\n\n---\n\n# OSSInsight MCP 服务器\n\n基于 OSSInsight.io 的 MCP 服务器，提供对 GitHub 个人、组织和仓库的数据分析，以及开源生态系统的深入洞察。\n\n## 功能特点\n\n- **仓库分析**：获取有关 GitHub 仓库的全面数据，包括星标趋势、贡献者活动和代码提交\n- **开发者分析**：了解开发者的贡献模式、活动历史和影响力\n- **组织分析**：查看 GitHub 组织的全局视图，包括成员、仓库和整体活动\n- **项目比较**：并排比较两个仓库的关键指标，发现差异和相似之处\n- **项目集合**：浏览和探索精选的项目集合，如开源数据库、AI 工具等\n- **自然语言查询**：访问 OSSInsight 的聊天界面，用自然语言提问 GitHub 数据\n\n## 工具\n\n1. `get_repo_analysis`\n   - 获取 GitHub 仓库的详细分析\n   - 输入:\n     - `owner_repo` (字符串): 仓库名称，格式为 'owner/repo'\n     - `time_period` (可选字符串): 分析的时间范围\n   - 返回: 来自 API 和网页的仓库分析数据，以及指向 OSSInsight 页面的链接\n\n2. `get_developer_analysis`\n   - 获取 GitHub 开发者的详细分析\n   - 输入:\n     - `username` (字符串): GitHub 用户名\n   - 返回: 来自 API 和网页的开发者数据，以及指向 OSSInsight 页面的链接\n\n3. `get_collection`\n   - 获取特定集合的信息和仓库列表\n   - 输入:\n     - `collection_id` (字符串): 集合 ID，例如 'open-source-database'\n   - 返回: 集合数据以及指向 OSSInsight 集合页面的链接\n\n4. `list_collections`\n   - 列出所有可用的仓库集合\n   - 输入:\n     - `page` (可选数字): 页码，从 1 开始\n     - `per_page` (可选数字): 每页结果数量，默认为 20\n   - 返回: 集合列表以及指向 OSSInsight 浏览集合页面的链接\n\n5. `natural_language_query`\n   - 直接访问 OSSInsight 的自然语言查询界面\n   - 输入:\n     - `query` (字符串): 自然语言查询，例如 'Which repositories gained the most stars in 2023?'\n   - 返回: 指向 OSSInsight 聊天界面的直接链接，并预填充查询\n\n## 实现细节\n\n此 MCP 服务器使用双重方法获取数据：\n\n1. **OSSInsight 公共 API** (v1) - 直接调用 `https://api.ossinsight.io/v1/` 端点\n2. **网页抓取** - 当 API 受限或不可用时，回退到抓取 OSSInsight 网页\n\n这种方法确保了对 OSSInsight 功能的最大覆盖，同时尊重公共 API 的速率限制（每个 IP 每小时 600 个请求）。\n\n## 设置\n\n### 使用配置\n\n#### Docker\n\n```json\n{\n  \"mcpServers\": { \n    \"ossinsight\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"mcp/ossinsight\"\n      ]\n    }\n  }\n}\n```\n\n#### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"ossinsight\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-ossinsight\"\n      ]\n    }\n  }\n}\n```\n\n## 构建\n\nDocker 构建:\n\n```bash\ndocker build -t mcp/ossinsight -f src/ossinsight/Dockerfile .\n```\n\n## 示例用法\n\n### 获取仓库分析\n\n```\n// 获取 VSCode 仓库的分析数据\n{\n  \"owner_repo\": \"microsoft/vscode\"\n}\n```\n\n### 比较两个仓库\n\n```\n// 比较 React 和 Vue\n{\n  \"repo1\": \"facebook/react\",\n  \"repo2\": \"vuejs/vue\"\n}\n```\n\n### 自然语言查询\n\n```\n// 获取使用自然语言查询数据的链接\n{\n  \"query\": \"哪些数据库项目在 2023 年获得了最多的星标？\"\n}\n```\n\n## 许可证\n\n此 MCP 服务器基于 MIT 许可证。这意味着您可以自由使用、修改和分发此软件，但需遵守 MIT 许可证的条款和条件。详情请参阅项目存储库中的 LICENSE 文件。",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "repositories",
        "analyze github",
        "git workflow",
        "github data"
      ],
      "category": "git-workflow-management"
    },
    "davidorex--git-file-forensics": {
      "owner": "davidorex",
      "name": "git-file-forensics",
      "url": "https://github.com/davidorex/git-file-forensics",
      "imageUrl": "/freedevtools/mcp/pfp/davidorex.webp",
      "description": "Analyze individual file histories and changes in Git repositories, focusing on file-level forensics. Gain insights into file versions, diffs, and semantic patterns to understand file evolution.",
      "stars": 0,
      "forks": 6,
      "license": "Apache License 2.0",
      "language": "JavaScript",
      "updated_at": "2025-02-05T04:27:26Z",
      "readme_content": "# Git File Forensics MCP\n\nAn MCP tool for deep git file-level forensics that helps get detailed insights into file histories, changes, and patterns, focusing on individual file analysis rather than repository-wide operations.\n\n## Installation\n\n1. Clone and build the server:\n```bash\ngit clone [repository-url]\ncd git-file-forensics\nnpm install\nnpm run build\n```\n\n2. Add to your MCP settings (`~/Library/Application Support/Code/User/globalStorage/david-dafu-dev.dafu/settings/cline_mcp_settings.json`):\n```json\n{\n  \"mcpServers\": {\n    \"git-file-forensics\": {\n      \"command\": \"/opt/homebrew/bin/node\",\n      \"args\": [\"/path/to/git-file-forensics/build/index.js\"],\n      \"alwaysAllow\": []\n    }\n  }\n}\n```\n\n## Available Tools\n\n### 1. track_file_versions\nTracks complete version history of a specific file, including renames and moves.\n\n```json\n{\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"track_file_versions\",\n    \"arguments\": {\n      \"repoPath\": \"/path/to/repo\",\n      \"file\": \"path/to/file\",\n      \"outputPath\": \"output.json\"\n    }\n  }\n}\n```\n\n### 2. analyze_file_diff\nAnalyzes specific changes between any two versions of a file.\n\n```json\n{\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"analyze_file_diff\",\n    \"arguments\": {\n      \"repoPath\": \"/path/to/repo\",\n      \"file\": \"path/to/file\",\n      \"versions\": {\n        \"from\": \"commit-hash-1\",\n        \"to\": \"commit-hash-2\"\n      },\n      \"outputPath\": \"output.json\"\n    }\n  }\n}\n```\n\n### 3. analyze_file_context\nAnalyzes broader context of file changes in a specific commit.\n\n```json\n{\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"analyze_file_context\",\n    \"arguments\": {\n      \"repoPath\": \"/path/to/repo\",\n      \"file\": \"path/to/file\",\n      \"commit\": \"commit-hash\",\n      \"outputPath\": \"output.json\"\n    }\n  }\n}\n```\n\n### 4. analyze_file_semantics\nAnalyzes semantic changes and patterns in file history.\n\n```json\n{\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"analyze_file_semantics\",\n    \"arguments\": {\n      \"repoPath\": \"/path/to/repo\",\n      \"file\": \"path/to/file\",\n      \"outputPath\": \"output.json\"\n    }\n  }\n}\n```\n\n## Output Format\n\nAll tools output JSON files containing:\n- Detailed analysis results\n- Summary statistics\n- Change patterns and relationships\n- Risk assessments (where applicable)\n\n## Requirements\n\n- Node.js\n- Git (must be installed and accessible)\n- MCP SDK\n\n## License\n\nThis project is licensed under the Apache License, Version 2.0 - see the [LICENSE.txt](LICENSE.txt) file for details.\n\nCopyright davidorex.ai. Licensed under the Apache License, Version 2.0; you may not use this project except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "forensics",
        "repositories",
        "git workflow",
        "git file",
        "file forensics"
      ],
      "category": "git-workflow-management"
    },
    "davidorex--git-forensics-mcp": {
      "owner": "davidorex",
      "name": "git-forensics-mcp",
      "url": "https://github.com/davidorex/git-forensics-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/davidorex.webp",
      "description": "Analyze git repositories to uncover development patterns and branch relationships, providing insights into repository history and branch activities.",
      "stars": 2,
      "forks": 3,
      "license": "Apache License 2.0",
      "language": "JavaScript",
      "updated_at": "2025-09-03T22:36:11Z",
      "readme_content": "# Git Forensics MCP\n\nA specialized Model Context Protocol (MCP) server for deep git repository investigation and analysis. This forensics tool provides detailed insights into repository history, branch relationships, and development patterns, focusing solely on git repository analysis rather than general GitHub or git operations.\n\n## Features\n\nThe server provides four main analysis tools:\n\n1. **Branch Overview** (`get_branch_overview`)\n   - Provides high-level overview of branch states and relationships\n   - Analyzes last commits, commit counts, and merge bases\n   - Generates statistical summaries of branch activities\n\n2. **Time Period Analysis** (`analyze_time_period`)\n   - Analyzes detailed development activity in specific time periods\n   - Categorizes commits (feature, fix, refactor, docs, other)\n   - Provides activity summaries with commit patterns\n\n3. **File Changes Analysis** (`analyze_file_changes`)\n   - Tracks changes to specific files across branches\n   - Identifies potential conflict areas\n   - Provides risk assessment for file modifications\n   - Generates recommended review order based on risk levels\n\n4. **Merge Recommendations** (`get_merge_recommendations`)\n   - Determines optimal merge strategies\n   - Assesses conflict risks\n   - Identifies code hotspots\n   - Provides step-by-step merge guidance\n\n## Input Parameters\n\nEach tool requires specific parameters:\n\n- `repoPath`: Path to the git repository\n- `branches`: Array of branch names to analyze\n- `outputPath`: Path where analysis results will be written\n- Additional tool-specific parameters:\n  - `timeRange`: Start and end dates for period analysis\n  - `files`: Array of file paths for file change analysis\n\n## Output Format\n\nAll tools output JSON files containing:\n- Detailed analysis results\n- Summary statistics\n- Risk assessments (where applicable)\n- Recommendations based on analysis\n\n## Technical Details\n\n- Built with TypeScript\n- Uses MCP SDK for server implementation\n- Executes git commands through child processes\n- Provides error handling and validation\n- Runs on stdio transport\n\n## Dependencies\n\n- @modelcontextprotocol/sdk\n- Node.js\n- Git (must be installed and accessible)\n\n## Usage\n\nThe server runs as an MCP service and can be integrated with any MCP-compatible client. All analysis results are written to specified output files in JSON format.\n\n## Contributing and License\n\nThis project is licensed under the Apache License, Version 2.0 - see the [LICENSE.txt](LICENSE.txt) file for details.\n\n### Collaboration Welcome\nForks and contributions welcome. \n\nAll contributions will be under the Apache License 2.0. This permissive license allows you to:\n- Use the code commercially\n- Modify and distribute the code\n- Create derivative works\n- Include in other projects\n\nCopyright 2025. Licensed under the Apache License, Version 2.0; you may not use this project except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "repositories",
        "branch",
        "git forensics",
        "analyze git",
        "git repositories"
      ],
      "category": "git-workflow-management"
    },
    "dazeb--MCP-Github-Mapper": {
      "owner": "dazeb",
      "name": "MCP-Github-Mapper",
      "url": "https://github.com/dazeb/MCP-Github-Mapper",
      "imageUrl": "/freedevtools/mcp/pfp/dazeb.webp",
      "description": "Maps and analyzes GitHub repository structures, providing summary statistics and detailed file structures based on user-defined parameters.",
      "stars": 19,
      "forks": 8,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-03T22:29:25Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/dazeb-mcp-github-mapper-badge.png)](https://mseep.ai/app/dazeb-mcp-github-mapper)\n\n# GitHub Mapper MCP Server\n\n[![smithery badge](https://smithery.ai/badge/github-mapper-mcp-server)](https://smithery.ai/server/github-mapper-mcp-server)\n\nGitHub Mapper is a Model Context Protocol (MCP) server that provides tools for mapping and analyzing GitHub repositories. It allows users to set a GitHub Personal Access Token and retrieve detailed information about a specified repository, including its structure and summary statistics.\n\n## Features\n\n- Set GitHub Personal Access Token for authentication\n- Map and analyze GitHub repository structure\n- Retrieve repository summary information (stars, forks, language, etc.)\n- Provide a detailed repository file structure\n\n## Prerequisites\n\n- Node.js (v18.0.0 or later recommended)\n- npm (comes with Node.js)\n- A GitHub Personal Access Token with appropriate permissions\n\n## Installation\n\n### Installing via Smithery\n\nTo install GitHub Mapper for Claude Desktop automatically via [Smithery](https://smithery.ai/server/github-mapper-mcp-server):\n\n```bash\nnpx -y @smithery/cli install github-mapper-mcp-server --client claude\n```\n\n### Manual Installation\n1. Clone the repository:\n   ```\n   git clone https://github.com/your-username/github-mapper-mcp-server.git\n   cd github-mapper-mcp-server\n   ```\n\n2. Install dependencies:\n   ```\n   npm install\n   ```\n\n3. Build the project:\n   ```\n   npm run build\n   ```\n\n## Usage\n\n1. Start the server:\n   ```\n   npm start\n   ```\n\n2. The server will run on stdio, allowing it to communicate with MCP clients.\n\n## Available Tools\n\n### 1. `set-github-token` \n\nSets the GitHub Personal Access Token for authentication.  \n\n- Create your Personal Access Token [here](https://github.com/settings/tokens/). Choose Tokens (classic). Scopes: repo\n![image](https://github.com/user-attachments/assets/08b277a5-f121-4204-acee-47871f2d3bac)\n\nExample, in your IDE or Claude Desktop:\n   ```\n   Please set-github-token to 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\n   ```\n\n### 2. `map-github-repo`  \n\nMaps a GitHub repository structure and provides summary information.  \n\nExample:\n   ```\n   Please map-github-repo https://github.com/dazeb/MCP-Github-Mapper\n   ```\n\n## Manual install in Cline or Roo-Cline MCP Client:\n   ```json\n   {\n     \"mcpServers\": {\n       \"github-mapper\": {\n         \"command\": \"node\",\n         \"args\": [\"/home/user/Documents/Cline/MCP/github-mapper/build/index.js\"]\n       }\n     }\n   }\n   ```\n\n## Example Output\n\n```\nRepository Analysis Summary:\n\nName: Hello-World\nDescription: My first repository on GitHub!\nStars: 1234\nForks: 567\nPrimary Language: JavaScript\nCreated: 2023-01-01\nLast Updated: 2023-06-15\n\nRepository Structure:\n\n{\n  \"src\": {\n    \"components\": {\n      \"Header.js\": null,\n      \"Footer.js\": null\n    },\n    \"pages\": {\n      \"index.js\": null,\n      \"about.js\": null\n    },\n    \"styles\": {\n      \"global.css\": null\n    }\n  },\n  \"public\": {\n    \"images\": {\n      \"logo.png\": null\n    },\n    \"favicon.ico\": null\n  },\n  \"package.json\": null,\n  \"README.md\": null\n}\n```\n## Images\n![image](https://github.com/user-attachments/assets/a816314a-57aa-4674-a1eb-7b345184f5e6)  \n\n\n\n## Running evals\n\nThe evals package loads an mcp client that then runs the index.ts file, so there is no need to rebuild between tests. You can load environment variables by prefixing the npx command. Full documentation can be found [here](https://www.mcpevals.io/docs).\n\n```bash\nOPENAI_API_KEY=your-key  npx mcp-eval src/evals/evals.ts src/index.ts\n```\n## Error Handling\n\n- If the GitHub token is not set, you'll receive an error message prompting you to use the `set-github-token` tool first.\n- Invalid GitHub URLs or repository paths will result in appropriate error messages.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the MIT License.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflow",
        "git workflow",
        "github mapper",
        "analyzes github"
      ],
      "category": "git-workflow-management"
    },
    "dev-assistant-ai--mcp-servers": {
      "owner": "dev-assistant-ai",
      "name": "mcp-servers",
      "url": "https://github.com/dev-assistant-ai/mcp-servers",
      "imageUrl": "/freedevtools/mcp/pfp/dev-assistant-ai.webp",
      "description": "Interact with GitHub repositories, manage files, perform advanced search functions, and automate workflows with automatic branch creation and error handling while preserving Git history.",
      "stars": 4,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-06-23T13:41:11Z",
      "readme_content": "# Model Context Protocol servers\n\nThis repository is a collection of *reference implementations* for the [Model Context Protocol](https://modelcontextprotocol.io/) (MCP), as well as references\nto community built servers and additional resources.\n\nThe servers in this repository showcase the versatility and extensibility of MCP, demonstrating how it can be used to give Large Language Models (LLMs) secure, controlled access to tools and data sources.\nEach MCP server is implemented with either the [Typescript MCP SDK](https://github.com/modelcontextprotocol/typescript-sdk) or [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk).\n\n> Note: Lists in this README are maintained in alphabetical order to minimize merge conflicts when adding new items.\n\n## 🌟 Reference Servers\n\nThese servers aim to demonstrate MCP features and the TypeScript and Python SDKs.\n\n- **[AWS KB Retrieval](src/aws-kb-retrieval-server)** - Retrieval from AWS Knowledge Base using Bedrock Agent Runtime\n- **[Brave Search](src/brave-search)** - Web and local search using Brave's Search API\n- **[EverArt](src/everart)** - AI image generation using various models\n- **[Everything](src/everything)** - Reference / test server with prompts, resources, and tools\n- **[Fetch](src/fetch)** - Web content fetching and conversion for efficient LLM usage\n- **[Filesystem](src/filesystem)** - Secure file operations with configurable access controls\n- **[Git](src/git)** - Tools to read, search, and manipulate Git repositories\n- **[GitHub](src/github)** - Repository management, file operations, and GitHub API integration\n- **[GitLab](src/gitlab)** - GitLab API, enabling project management\n- **[Google Drive](src/gdrive)** - File access and search capabilities for Google Drive\n- **[Google Maps](src/google-maps)** - Location services, directions, and place details\n- **[Memory](src/memory)** - Knowledge graph-based persistent memory system\n- **[PostgreSQL](src/postgres)** - Read-only database access with schema inspection\n- **[Puppeteer](src/puppeteer)** - Browser automation and web scraping\n- **[Sentry](src/sentry)** - Retrieving and analyzing issues from Sentry.io\n- **[Sequential Thinking](src/sequentialthinking)** - Dynamic and reflective problem-solving through thought sequences\n- **[Slack](src/slack)** - Channel management and messaging capabilities\n- **[Sqlite](src/sqlite)** - Database interaction and business intelligence capabilities\n- **[Time](src/time)** - Time and timezone conversion capabilities\n\n## 🤝 Third-Party Servers\n\n### 🎖️ Official Integrations\n\nOfficial integrations are maintained by companies building production ready MCP servers for their platforms.\n\n- <img height=\"12\" width=\"12\" src=\"https://www.21st.dev/favicon.ico\" alt=\"21st.dev Logo\" /> **[21st.dev Magic](https://github.com/21st-dev/magic-mcp)** - Create crafted UI components inspired by the best 21st.dev design engineers.\n- <img height=\"12\" width=\"12\" src=\"https://apify.com/favicon.ico\" alt=\"Apify Logo\" /> **[Apify](https://github.com/apify/actors-mcp-server)** - [Actors MCP Server](https://apify.com/apify/actors-mcp-server): Use 3,000+ pre-built cloud tools to extract data from websites, e-commerce, social media, search engines, maps, and more\n- <img height=\"12\" width=\"12\" src=\"https://resources.audiense.com/hubfs/favicon-1.png\" alt=\"Audiense Logo\" /> **[Audiense Insights](https://github.com/AudienseCo/mcp-audiense-insights)** - Marketing insights and audience analysis from [Audiense](https://www.audiense.com/products/audiense-insights) reports, covering demographic, cultural, influencer, and content engagement analysis.\n- <img height=\"12\" width=\"12\" src=\"https://axiom.co/favicon.ico\" alt=\"Axiom Logo\" /> **[Axiom](https://github.com/axiomhq/mcp-server-axiom)** - Query and analyze your Axiom logs, traces, and all other event data in natural language\n- <img height=\"12\" width=\"12\" src=\"https://browserbase.com/favicon.ico\" alt=\"Browserbase Logo\" /> **[Browserbase](https://github.com/browserbase/mcp-server-browserbase)** - Automate browser interactions in the cloud (e.g. web navigation, data extraction, form filling, and more)\n- <img height=\"12\" width=\"12\" src=\"https://clickhouse.com/favicon.ico\" alt=\"ClickHouse Logo\" /> **[ClickHouse](https://github.com/ClickHouse/mcp-clickhouse)** - Query your [ClickHouse](https://clickhouse.com/) database server.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/cloudflare\" /> **[Cloudflare](https://github.com/cloudflare/mcp-server-cloudflare)** - Deploy, configure & interrogate your resources on the Cloudflare developer platform (e.g. Workers/KV/R2/D1)\n- <img height=\"12\" width=\"12\" src=\"https://e2b.dev/favicon.ico\" alt=\"E2B Logo\" /> **[E2B](https://github.com/e2b-dev/mcp-server)** - Run code in secure sandboxes hosted by [E2B](https://e2b.dev)\n- <img height=\"12\" width=\"12\" src=\"https://esignatures.com/favicon.ico\" alt=\"eSignatures Logo\" /> **[eSignatures](https://github.com/esignaturescom/mcp-server-esignatures)** - Contract and template management for drafting, reviewing, and sending binding contracts.\n- <img height=\"12\" width=\"12\" src=\"https://exa.ai/images/favicon-32x32.png\" alt=\"Exa Logo\" /> **[Exa](https://github.com/exa-labs/exa-mcp-server)** - Search Engine made for AIs by [Exa](https://exa.ai)\n- <img height=\"12\" width=\"12\" src=\"https://firecrawl.dev/favicon.ico\" alt=\"Firecrawl Logo\" /> **[Firecrawl](https://github.com/mendableai/firecrawl-mcp-server)** - Extract web data with [Firecrawl](https://firecrawl.dev)\n- <img height=\"12\" width=\"12\" src=\"https://fireproof.storage/favicon.ico\" alt=\"Fireproof Logo\" /> **[Fireproof](https://github.com/fireproof-storage/mcp-database-server)** - Immutable ledger database with live synchronization\n- <img height=\"12\" width=\"12\" src=\"https://grafana.com/favicon.ico\" alt=\"Grafana Logo\" /> **[Grafana](https://github.com/grafana/mcp-grafana)** - Search dashboards, investigate incidents and query datasources in your Grafana instance\n- **[IBM wxflows](https://github.com/IBM/wxflows/tree/main/examples/mcp/javascript)** - Tool platform by IBM to build, test and deploy tools for any data source\n- <img height=\"12\" width=\"12\" src=\"https://forevervm.com/icon.png\" alt=\"ForeverVM Logo\" /> **[ForeverVM](https://github.com/jamsocket/forevervm/tree/main/javascript/mcp-server)** - Run Python in a code sandbox.\n- <img height=\"12\" width=\"12\" src=\"https://integration.app/favicon.ico\" alt=\"Integration App Icon\" /> **[Integration App](https://github.com/integration-app/mcp-server)** - Interact with any other SaaS applications on behalf of your customers. \n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/jetbrains\" /> **[JetBrains](https://github.com/JetBrains/mcp-jetbrains)** – Work on your code with JetBrains IDEs\n- <img height=\"12\" width=\"12\" src=\"https://kagi.com/favicon.ico\" alt=\"Kagi Logo\" /> **[Kagi Search](https://github.com/kagisearch/kagimcp)** - Search the web using Kagi's search API\n- <img height=\"12\" width=\"12\" src=\"https://langfuse.com/favicon.ico\" alt=\"Langfuse Logo\" /> **[Langfuse Prompt Management](https://github.com/langfuse/mcp-server-langfuse)** - Open-source tool for collaborative editing, versioning, evaluating, and releasing prompts.\n- <img height=\"12\" width=\"12\" src=\"https://lingo.dev/favicon.ico\" alt=\"Lingo.dev Logo\" /> **[Lingo.dev](https://github.com/lingodotdev/lingo.dev/blob/main/mcp.md)** - Make your AI agent speak every language on the planet, using [Lingo.dev](https://lingo.dev) Localization Engine.\n- <img height=\"12\" width=\"12\" src=\"https://www.meilisearch.com/favicon.ico\" alt=\"Meilisearch Logo\" /> **[Meilisearch](https://github.com/meilisearch/meilisearch-mcp)** - Interact & query with Meilisearch (Full-text & semantic search API)\n- <img height=\"12\" width=\"12\" src=\"https://metoro.io/static/images/logos/Metoro.svg\" /> **[Metoro](https://github.com/metoro-io/metoro-mcp-server)** - Query and interact with kubernetes environments monitored by Metoro\n- <img height=\"12\" width=\"12\" src=\"https://www.motherduck.com/favicon.ico\" alt=\"MotherDuck Logo\" /> **[MotherDuck](https://github.com/motherduckdb/mcp-server-motherduck)** - Query and analyze data with MotherDuck and local DuckDB\n- <img height=\"12\" width=\"12\" src=\"https://needle-ai.com/images/needle-logo-orange-2-rounded.png\" alt=\"Needle AI Logo\" /> **[Needle](https://github.com/needle-ai/needle-mcp)** - Production-ready RAG out of the box to search and retrieve data from your own documents.\n- <img height=\"12\" width=\"12\" src=\"https://neo4j.com/favicon.ico\" alt=\"Neo4j Logo\" /> **[Neo4j](https://github.com/neo4j-contrib/mcp-neo4j/)** - Neo4j graph database server (schema + read/write-cypher) and separate graph database backed memory\n- **[Neon](https://github.com/neondatabase/mcp-server-neon)** - Interact with the Neon serverless Postgres platform\n- <img height=\"12\" width=\"12\" src=\"https://oxylabs.io/favicon.ico\" alt=\"Oxylabs Logo\" /> **[Oxylabs](https://github.com/oxylabs/oxylabs-mcp)** - Scrape websites with Oxylabs Web API, supporting dynamic rendering and parsing for structured data extraction.\n- <img height=\"12\" width=\"12\" src=\"https://qdrant.tech/img/brand-resources-logos/logomark.svg\" /> **[Qdrant](https://github.com/qdrant/mcp-server-qdrant/)** - Implement semantic memory layer on top of the Qdrant vector search engine\n- **[Raygun](https://github.com/MindscapeHQ/mcp-server-raygun)** - Interact with your crash reporting and real using monitoring data on your Raygun account\n- <img height=\"12\" width=\"12\" src=\"https://riza.io/favicon.ico\" alt=\"Riza logo\" /> **[Riza](https://github.com/riza-io/riza-mcp)** - Arbitrary code execution and tool-use platform for LLMs by [Riza](https://riza.io)\n- <img height=\"12\" width=\"12\" src=\"https://pics.fatwang2.com/56912e614b35093426c515860f9f2234.svg\" /> [Search1API](https://github.com/fatwang2/search1api-mcp) - One API for Search, Crawling, and Sitemaps\n- <img height=\"12\" width=\"12\" src=\"https://stripe.com/favicon.ico\" alt=\"Stripe Logo\" /> **[Stripe](https://github.com/stripe/agent-toolkit)** - Interact with Stripe API\n- <img height=\"12\" width=\"12\" src=\"https://tavily.com/favicon.ico\" alt=\"Tavily Logo\" /> **[Tavily](https://github.com/tavily-ai/tavily-mcp)** - Search engine for AI agents (search + extract) powered by [Tavily](https://tavily.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.tinybird.co/favicon.ico\" alt=\"Tinybird Logo\" /> **[Tinybird](https://github.com/tinybirdco/mcp-tinybird)** - Interact with Tinybird serverless ClickHouse platform\n- <img height=\"12\" width=\"12\" src=\"https://verodat.io/assets/favicon-16x16.png\" alt=\"Verodat Logo\" /> **[Verodat](https://github.com/Verodat/verodat-mcp-server)** - Interact with Verodat AI Ready Data platform\n\n### 🌎 Community Servers\n\nA growing set of community-developed and maintained servers demonstrates various applications of MCP across different domains.\n\n> **Note:** Community servers are **untested** and should be used at **your own risk**. They are not affiliated with or endorsed by Anthropic.\n\n- **[AWS S3](https://github.com/aws-samples/sample-mcp-server-s3)** - A sample MCP server for AWS S3 that flexibly fetches objects from S3 such as PDF documents\n- **[AWS](https://github.com/rishikavikondala/mcp-server-aws)** - Perform operations on your AWS resources using an LLM\n- **[Airtable](https://github.com/domdomegg/airtable-mcp-server)** - Read and write access to [Airtable](https://airtable.com/) databases, with schema inspection.\n- **[Airtable](https://github.com/felores/airtable-mcp)** - Airtable Model Context Protocol Server.\n- **[AlphaVantage](https://github.com/calvernaz/alphavantage)** - MCP server for stock market data API [AlphaVantage](https://www.alphavantage.co)\n- **[Anki](https://github.com/scorzeth/anki-mcp-server)** - An MCP server for interacting with your [Anki](https://apps.ankiweb.net) decks and cards.\n- **[Any Chat Completions](https://github.com/pyroprompts/any-chat-completions-mcp)** - Interact with any OpenAI SDK Compatible Chat Completions API like OpenAI, Perplexity, Groq, xAI and many more.\n- **[ArangoDB](https://github.com/ravenwits/mcp-server-arangodb)** - MCP Server that provides database interaction capabilities through [ArangoDB](https://arangodb.com/).\n- **[Atlassian](https://github.com/sooperset/mcp-atlassian)** - Interact with Atlassian Cloud products (Confluence and Jira) including searching/reading Confluence spaces/pages, accessing Jira issues, and project metadata.\n- **[Base Free USDC Transfer](https://github.com/magnetai/mcp-free-usdc-transfer)** - Send USDC on [Base](https://base.org) for free using Claude AI! Built with [Coinbase CDP](https://docs.cdp.coinbase.com/mpc-wallet/docs/welcome).\n- **[BigQuery](https://github.com/LucasHild/mcp-server-bigquery)** (by LucasHild) - This server enables LLMs to inspect database schemas and execute queries on BigQuery.\n- **[BigQuery](https://github.com/ergut/mcp-bigquery-server)** (by ergut) - Server implementation for Google BigQuery integration that enables direct BigQuery database access and querying capabilities\n- **[Calendar](https://github.com/GongRzhe/Calendar-MCP-Server)** - Google Calendar integration server enabling AI assistants to manage calendar events through natural language interactions.\n- **[CFBD API](https://github.com/lenwood/cfbd-mcp-server)** - An MCP server for the [College Football Data API](https://collegefootballdata.com/).\n- **[ChatMCP](https://github.com/AI-QL/chat-mcp)** – An Open Source Cross-platform GUI Desktop application compatible with Linux, macOS, and Windows, enabling seamless interaction with MCP servers across dynamically selectable LLMs, by **[AIQL](https://github.com/AI-QL)**\n- **[ChatSum](https://github.com/mcpso/mcp-server-chatsum)** - Query and Summarize chat messages with LLM. by [mcpso](https://mcp.so)\n- **[Chroma](https://github.com/privetin/chroma)** - Vector database server for semantic document search and metadata filtering, built on Chroma\n- **[ClaudePost](https://github.com/ZilongXue/claude-post)** - ClaudePost enables seamless email management for Gmail, offering secure features like email search, reading, and sending.\n- **[Cloudinary](https://github.com/felores/cloudinary-mcp-server)** - Cloudinary Model Context Protocol Server to upload media to Cloudinary and get back the media link and details.\n- **[code-executor](https://github.com/bazinga012/mcp_code_executor)** - An MCP server that allows LLMs to execute Python code within a specified Conda environment.\n- **[code-sandbox-mcp](https://github.com/Automata-Labs-team/code-sandbox-mcp)** - An MCP server to create secure code sandbox environment for executing code within Docker containers.\n- **[cognee-mcp](https://github.com/topoteretes/cognee/tree/main/cognee-mcp)** - GraphRAG memory server with customizable ingestion, data processing and search\n- **[coin_api_mcp](https://github.com/longmans/coin_api_mcp)** - Provides access to [coinmarketcap](https://coinmarketcap.com/) cryptocurrency data.\n- **[Contentful-mcp](https://github.com/ivo-toby/contentful-mcp)** - Read, update, delete, publish content in your [Contentful](https://contentful.com) space(s) from this MCP Server.\n- **[Dappier](https://github.com/DappierAI/dappier-mcp)** - Connect LLMs to real-time, rights-cleared, proprietary data from trusted sources. Access specialized models for Real-Time Web Search, News, Sports, Financial Data, Crypto, and premium publisher content. Explore data models at [marketplace.dappier.com](https://marketplace.dappier.com/marketplace).\n- **[Data Exploration](https://github.com/reading-plus-ai/mcp-server-data-exploration)** - MCP server for autonomous data exploration on .csv-based datasets, providing intelligent insights with minimal effort. NOTE: Will execute arbitrary Python code on your machine, please use with caution!\n- **[Dataset Viewer](https://github.com/privetin/dataset-viewer)** - Browse and analyze Hugging Face datasets with features like search, filtering, statistics, and data export\n- **[DeepSeek MCP Server](https://github.com/DMontgomery40/deepseek-mcp-server)** - Model Context Protocol server integrating DeepSeek's advanced language models, in addition to [other useful API endpoints](https://github.com/DMontgomery40/deepseek-mcp-server?tab=readme-ov-file#features)\n- **[Deepseek_R1](https://github.com/66julienmartin/MCP-server-Deepseek_R1)** - A Model Context Protocol (MCP) server implementation connecting Claude Desktop with DeepSeek's language models (R1/V3)\n- **[deepseek-thinker-mcp](https://github.com/ruixingshi/deepseek-thinker-mcp)** - A MCP (Model Context Protocol) provider Deepseek reasoning content to MCP-enabled AI Clients, like Claude Desktop. Supports access to Deepseek's thought processes from the Deepseek API service or from a local Ollama server.\n- **[Descope](https://github.com/descope-sample-apps/descope-mcp-server)** - An MCP server to integrate with [Descope](https://descope.com) to search audit logs, manage users, and more.\n- **[DevRev](https://github.com/kpsunil97/devrev-mcp-server)** - An MCP server to integrate with DevRev APIs to search through your DevRev Knowledge Graph where objects can be imported from diff. sources listed [here](https://devrev.ai/docs/import#available-sources).\n- **[Dify](https://github.com/YanxingLiu/dify-mcp-server)** - A simple implementation of an MCP server for dify workflows.\n- **[Discord](https://github.com/v-3/discordmcp)** - A MCP server to connect to Discord guilds through a bot and read and write messages in channels\n- **[Docker](https://github.com/ckreiling/mcp-server-docker)** - Integrate with Docker to manage containers, images, volumes, and networks.\n- **[Drupal](https://github.com/Omedia/mcp-server-drupal)** - Server for interacting with [Drupal](https://www.drupal.org/project/mcp) using STDIO transport layer.\n- **[Elasticsearch](https://github.com/cr7258/elasticsearch-mcp-server)** - MCP server implementation that provides Elasticsearch interaction.\n- **[ElevenLabs](https://github.com/mamertofabian/elevenlabs-mcp-server)** - A server that integrates with ElevenLabs text-to-speech API capable of generating full voiceovers with multiple voices.\n- **[Eunomia](https://github.com/whataboutyou-ai/eunomia-MCP-server)** - Extension of the Eunomia framework that connects Eunomia instruments with MCP servers\n- **[Everything Search](https://github.com/mamertofabian/mcp-everything-search)** - Fast file searching capabilities across Windows (using [Everything SDK](https://www.voidtools.com/support/everything/sdk/)), macOS (using mdfind command), and Linux (using locate/plocate command).\n- **[Fetch](https://github.com/zcaceres/fetch-mcp)** - A server that flexibly fetches HTML, JSON, Markdown, or plaintext.\n- **[FireCrawl](https://github.com/vrknetha/mcp-server-firecrawl)** - Advanced web scraping with JavaScript rendering, PDF support, and smart rate limiting\n- **[FlightRadar24](https://github.com/sunsetcoder/flightradar24-mcp-server)** - A Claude Desktop MCP server that helps you track flights in real-time using Flightradar24 data.\n- **[Ghost](https://github.com/MFYDev/ghost-mcp)** - A Model Context Protocol (MCP) server for interacting with Ghost CMS through LLM interfaces like Claude.\n- **[Glean](https://github.com/longyi1207/glean-mcp-server)** - A server that uses Glean API to search and chat.\n- **[Gmail](https://github.com/GongRzhe/Gmail-MCP-Server)** - A Model Context Protocol (MCP) server for Gmail integration in Claude Desktop with auto authentication support.\n- **[Goal Story](https://github.com/hichana/goalstory-mcp)** - a Goal Tracker and Visualization Tool for personal and professional development.\n- **[Golang Filesystem Server](https://github.com/mark3labs/mcp-filesystem-server)** - Secure file operations with configurable access controls built with Go!\n- **[Google Calendar](https://github.com/v-3/google-calendar)** - Integration with Google Calendar to check schedules, find time, and add/delete events\n- **[Google Calendar](https://github.com/nspady/google-calendar-mcp)** - Google Calendar MCP Server for managing Google calendar events. Also supports searching for events by attributes like title and location.\n- **[Google Custom Search](https://github.com/adenot/mcp-google-search)** - Provides Google Search results via the Google Custom Search API\n- **[Google Tasks](https://github.com/zcaceres/gtasks-mcp)** - Google Tasks API Model Context Protocol Server.\n- **[Holaspirit](https://github.com/syucream/holaspirit-mcp-server)** - Interact with [Holaspirit](https://www.holaspirit.com/).\n- **[Home Assistant](https://github.com/tevonsb/homeassistant-mcp)** - Interact with [Home Assistant](https://www.home-assistant.io/) including viewing and controlling lights, switches, sensors, and all other Home Assistant entities.\n- **[HubSpot](https://github.com/buryhuang/mcp-hubspot)** - HubSpot CRM integration for managing contacts and companies. Create and retrieve CRM data directly through Claude chat.\n- **[HuggingFace Spaces](https://github.com/evalstate/mcp-hfspace)** - Server for using HuggingFace Spaces, supporting Open Source Image, Audio, Text Models and more. Claude Desktop mode for easy integration.\n- **[Inoyu](https://github.com/sergehuber/inoyu-mcp-unomi-server)** - Interact with an Apache Unomi CDP customer data platform to retrieve and update customer profiles\n- **[iTerm MCP](https://github.com/ferrislucas/iterm-mcp)** - Integration with iTerm2 terminal emulator for macOS, enabling LLMs to execute and monitor terminal commands.\n- **[JavaFX](https://github.com/mcpso/mcp-server-javafx)** - Make drawings using a JavaFX canvas\n- **[JDBC](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc)** - Connect to any JDBC-compatible database and query, insert, update, delete, and more. Supports MySQL, PostgreSQL, Oracle, SQL Server, sqllite and [more](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc#supported-jdbc-variants).\n- **[JSON](https://github.com/GongRzhe/JSON-MCP-Server)** - JSON handling and processing server with advanced query capabilities using JSONPath syntax and support for array, string, numeric, and date operations.\n- **[Keycloak MCP](https://github.com/ChristophEnglisch/keycloak-model-context-protocol)** - This MCP server enables natural language interaction with Keycloak for user and realm management including creating, deleting, and listing users and realms.\n- **[Kibela](https://github.com/kiwamizamurai/mcp-kibela-server)** (by kiwamizamurai) - Interact with Kibela API.\n- **[kintone](https://github.com/macrat/mcp-server-kintone)** - Manage records and apps in [kintone](https://kintone.com) through LLM tools.\n- **[Kubernetes](https://github.com/Flux159/mcp-server-kubernetes)** - Connect to Kubernetes cluster and manage pods, deployments, and services.\n- **[Lightdash](https://github.com/syucream/lightdash-mcp-server)** - Interact with [Lightdash](https://www.lightdash.com/), a BI tool.\n- **[Linear](https://github.com/jerhadf/linear-mcp-server)** - Allows LLM to interact with Linear's API for project management, including searching, creating, and updating issues.\n- **[LlamaCloud](https://github.com/run-llama/mcp-server-llamacloud)** (by marcusschiesser) - Integrate the data stored in a managed index on [LlamaCloud](https://cloud.llamaindex.ai/)\n- **[llm-context](https://github.com/cyberchitta/llm-context.py)** - Provides a repo-packing MCP tool with configurable profiles that specify file inclusion/exclusion patterns and optional prompts.\n- **[MariaDB](https://github.com/abel9851/mcp-server-mariadb)** - MariaDB database integration with configurable access controls in Python.\n- **[MCP Compass](https://github.com/liuyoshio/mcp-compass)** - Suggest the right MCP server for your needs\n- **[MCP Installer](https://github.com/anaisbetts/mcp-installer)** - This server is a server that installs other MCP servers for you.\n- **[mcp-k8s-go](https://github.com/strowk/mcp-k8s-go)** - Golang-based Kubernetes server for MCP to browse pods and their logs, events, namespaces and more. Built to be extensible.\n- **[mcp-proxy](https://github.com/sparfenyuk/mcp-proxy)** - Connect to MCP servers that run on SSE transport, or expose stdio servers as an SSE server.\n- **[MSSQL](https://github.com/aekanun2020/mcp-server/)** - MSSQL database integration with configurable access controls and schema inspection\n- **[MSSQL](https://github.com/JexinSam/mssql_mcp_server)** (by jexin) - MCP Server for MSSQL database in Python\n- **[MSSQL-Python](https://github.com/amornpan/py-mcp-mssql)** (by amornpan) - A read-only Python implementation for MSSQL database access with enhanced security features, configurable access controls, and schema inspection capabilities. Focuses on safe database interaction through Python ecosystem.\n- **[Markdownify](https://github.com/zcaceres/mcp-markdownify-server)** - MCP to convert almost anything to Markdown (PPTX, HTML, PDF, Youtube Transcripts and more)\n- **[Minima](https://github.com/dmayboroda/minima)** - MCP server for RAG on local files\n- **[MongoDB](https://github.com/kiliczsh/mcp-mongo-server)** - A Model Context Protocol Server for MongoDB.\n- **[Monday.com](https://github.com/sakce/mcp-server-monday)** - MCP Server to interact with Monday.com boards and items.\n- **[MySQL](https://github.com/benborla/mcp-server-mysql)** (by benborla) - MySQL database integration in NodeJS with configurable access controls and schema inspection\n- **[MySQL](https://github.com/designcomputer/mysql_mcp_server)** (by DesignComputer) - MySQL database integration in Python with configurable access controls and schema inspection\n- **[NS Travel Information](https://github.com/r-huijts/ns-mcp-server)** - Access Dutch Railways (NS) real-time train travel information and disruptions through the official NS API.\n- **[Neo4j](https://github.com/da-okazaki/mcp-neo4j-server)** - A community built server that interacts with Neo4j Graph Database.\n- **[Neovim](https://github.com/bigcodegen/mcp-neovim-server)** - An MCP Server for your Neovim session.\n- **[Notion](https://github.com/suekou/mcp-notion-server)** (by suekou) - Interact with Notion API.\n- **[Notion](https://github.com/v-3/notion-server)** (by v-3) - Notion MCP integration. Search, Read, Update, and Create pages through Claude chat.\n- **[oatpp-mcp](https://github.com/oatpp/oatpp-mcp)** - C++ MCP integration for Oat++. Use [Oat++](https://oatpp.io) to build MCP servers.\n- **[Obsidian Markdown Notes](https://github.com/calclavia/mcp-obsidian)** - Read and search through your Obsidian vault or any directory containing Markdown notes\n- **[obsidian-mcp](https://github.com/StevenStavrakis/obsidian-mcp)** - (by Steven Stavrakis) An MCP server for Obsidian.md with tools for searching, reading, writing, and organizing notes.\n- **[Okta](https://github.com/kapilduraphe/okta-mcp-server)** - Interact with Okta API.\n- **[OpenAPI](https://github.com/snaggle-ai/openapi-mcp-server)** - Interact with [OpenAPI](https://www.openapis.org/) APIs.\n- **[OpenCTI](https://github.com/Spathodea-Network/opencti-mcp)** - Interact with OpenCTI platform to retrieve threat intelligence data including reports, indicators, malware and threat actors.\n- **[OpenRPC](https://github.com/shanejonas/openrpc-mpc-server)** - Interact with and discover JSON-RPC APIs via [OpenRPC](https://open-rpc.org).\n- **[Open Strategy Partners Marketing Tools](https://github.com/open-strategy-partners/osp_marketing_tools)** - Content editing codes, value map, and positioning tools for product marketing.\n- **[Pandoc](https://github.com/vivekVells/mcp-pandoc)** - MCP server for seamless document format conversion using Pandoc, supporting Markdown, HTML, PDF, DOCX (.docx), csv and more.\n- **[PIF](https://github.com/hungryrobot1/MCP-PIF)** - A Personal Intelligence Framework (PIF), providing tools for file operations, structured reasoning, and journal-based documentation to support continuity and evolving human-AI collaboration across sessions.\n- **[Pinecone](https://github.com/sirmews/mcp-pinecone)** - MCP server for searching and uploading records to Pinecone. Allows for simple RAG features, leveraging Pinecone's Inference API.\n- **[Placid.app](https://github.com/felores/placid-mcp-server)** - Generate image and video creatives using Placid.app templates\n- **[Playwright](https://github.com/executeautomation/mcp-playwright)** - This MCP Server will help you run browser automation and webscraping using Playwright\n- **[Postman](https://github.com/shannonlal/mcp-postman)** - MCP server for running Postman Collections locally via Newman. Allows for simple execution of Postman Server and returns the results of whether the collection passed all the tests.\n- **[Qwen_Max](https://github.com/66julienmartin/MCP-server-Qwen_Max)** - A Model Context Protocol (MCP) server implementation for the Qwen models.\n- **[RabbitMQ](https://github.com/kenliao94/mcp-server-rabbitmq)** - The MCP server that interacts with RabbitMQ to publish and consume messages.\n- **[RAG Web Browser](https://github.com/apify/mcp-server-rag-web-browser)** An MCP server for Apify's open-source RAG Web Browser [Actor](https://apify.com/apify/rag-web-browser) to perform web searches, scrape URLs, and return content in Markdown.\n- **[Reaper](https://github.com/dschuler36/reaper-mcp-server)** - Interact with your [Reaper](https://www.reaper.fm/) (Digital Audio Workstation) projects.\n- **[Redis](https://github.com/GongRzhe/REDIS-MCP-Server)** - Redis database operations and caching microservice server with support for key-value operations, expiration management, and pattern-based key listing.\n- **[Redis](https://github.com/prajwalnayak7/mcp-server-redis)** MCP server to interact with Redis Server, AWS Memory DB, etc for caching or other use-cases where in-memory and key-value based storage is appropriate\n- **[Rememberizer AI](https://github.com/skydeckai/mcp-server-rememberizer)** - An MCP server designed for interacting with the Rememberizer data source, facilitating enhanced knowledge retrieval.\n- **[Replicate](https://github.com/deepfates/mcp-replicate)** - Search, run and manage machine learning models on Replicate through a simple tool-based interface. Browse models, create predictions, track their status, and handle generated images.\n- **[Rijksmuseum](https://github.com/r-huijts/rijksmuseum-mcp)** - Interface with the Rijksmuseum API to search artworks, retrieve artwork details, access image tiles, and explore user collections.\n- **[Salesforce MCP](https://github.com/smn2gnt/MCP-Salesforce)** - Interact with Salesforce Data and Metadata\n- **[Scholarly](https://github.com/adityak74/mcp-scholarly)** - A MCP server to search for scholarly and academic articles.\n- **[SearXNG](https://github.com/ihor-sokoliuk/mcp-searxng)** - A Model Context Protocol Server for [SearXNG](https://docs.searxng.org)\n- **[Snowflake](https://github.com/isaacwasserman/mcp-snowflake-server)** - This MCP server enables LLMs to interact with Snowflake databases, allowing for secure and controlled data operations.\n- **[Solana Agent Kit](https://github.com/sendaifun/solana-agent-kit/tree/main/examples/agent-kit-mcp-server)** - This MCP server enables LLMs to interact with the Solana blockchain with help of Solana Agent Kit by SendAI, allowing for 40+ protcool actions and growing \n- **[Spotify](https://github.com/varunneal/spotify-mcp)** - This MCP allows an LLM to play and use Spotify.\n- **[Stripe](https://github.com/atharvagupta2003/mcp-stripe)** - This MCP allows integration with Stripe for handling payments, customers, and refunds.\n- **[TMDB](https://github.com/Laksh-star/mcp-server-tmdb)** - This MCP server integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.\n- **[Tavily search](https://github.com/RamXX/mcp-tavily)** - An MCP server for Tavily's search & news API, with explicit site inclusions/exclusions\n- **[Ticketmaster](https://github.com/delorenj/mcp-server-ticketmaster)** - Search for events, venues, and attractions through the Ticketmaster Discovery API\n- **[Todoist](https://github.com/abhiz123/todoist-mcp-server)** - Interact with Todoist to manage your tasks.\n- **[Travel Planner](https://github.com/GongRzhe/TRAVEL-PLANNER-MCP-Server)** - Travel planning and itinerary management server integrating with Google Maps API for location search, place details, and route calculations.\n- **[Vega-Lite](https://github.com/isaacwasserman/mcp-vegalite-server)** - Generate visualizations from fetched data using the VegaLite format and renderer.\n- **[Video Editor](https://github.com/burningion/video-editing-mcp)** - A Model Context Protocol Server to add, edit, and search videos with [Video Jungle](https://www.video-jungle.com/).\n- **[Virtual location (Google Street View,etc.)](https://github.com/mfukushim/map-traveler-mcp)** - Integrates Google Map, Google Street View, PixAI, Stability.ai, ComfyUI API and Bluesky to provide a virtual location simulation in LLM (written in Effect.ts)\n- **[WildFly MCP](https://github.com/wildfly-extras/wildfly-mcp)** - WildFly MCP server that enables LLM to interact with running WildFly servers (retrieve metrics, logs, invoke operations, ...).\n- **[Windows CLI](https://github.com/SimonB97/win-cli-mcp-server)** - MCP server for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, and Git Bash shells.\n- **[World Bank data API](https://github.com/anshumax/world_bank_mcp_server)** - A server that fetches data indicators available with the World Bank as part of their data API\n- **[X (Twitter)](https://github.com/EnesCinr/twitter-mcp)** (by EnesCinr) - Interact with twitter API. Post tweets and search for tweets by query.\n- **[X (Twitter)](https://github.com/vidhupv/x-mcp)** (by vidhupv) - Create, manage and publish X/Twitter posts directly through Claude chat.\n- **[XMind](https://github.com/apeyroux/mcp-xmind)** - Read and search through your XMind directory containing XMind files.\n- **[YouTube](https://github.com/ZubeidHendricks/youtube-mcp-server)** - Comprehensive YouTube API integration for video management, Shorts creation, and analytics.\n\n## 📚 Frameworks\n\nThese are high-level frameworks that make it easier to build MCP servers or clients.\n\n### For servers\n\n* **[EasyMCP](https://github.com/zcaceres/easy-mcp/)** (TypeScript)\n* **[FastMCP](https://github.com/punkpeye/fastmcp)** (TypeScript)\n* **[Foxy Contexts](https://github.com/strowk/foxy-contexts)** – A library to build MCP servers in Golang by **[strowk](https://github.com/strowk)**\n* **[Quarkus MCP Server SDK](https://github.com/quarkiverse/quarkus-mcp-server)** (Java)\n\n### For clients\n\n* **[codemirror-mcp](https://github.com/marimo-team/codemirror-mcp)** - CodeMirror extension that implements the Model Context Protocol (MCP) for resource mentions and prompt commands\n\n## 📚 Resources\n\nAdditional resources on MCP.\n\n- **[AiMCP](https://www.aimcp.info)** - A collection of MCP clients&servers to find the right mcp tools by **[Hekmon](https://github.com/hekmon8)**\n- **[Awesome Crypto MCP Servers by badkk](https://github.com/badkk/awesome-crypto-mcp-servers)** - A curated list of MCP servers by **[Luke Fan](https://github.com/badkk)**\n- **[Awesome MCP Servers by appcypher](https://github.com/appcypher/awesome-mcp-servers)** - A curated list of MCP servers by **[Stephen Akinyemi](https://github.com/appcypher)**\n- **[Awesome MCP Servers by punkpeye](https://github.com/punkpeye/awesome-mcp-servers)** (**[website](https://glama.ai/mcp/servers)**) - A curated list of MCP servers by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Awesome MCP Servers by wong2](https://github.com/wong2/awesome-mcp-servers)** (**[website](https://mcpservers.org)**) - A curated list of MCP servers by **[wong2](https://github.com/wong2)**\n- **[Discord Server](https://glama.ai/mcp/discord)** – A community discord server dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[MCP Badges](https://github.com/mcpx-dev/mcp-badges)** – Quickly highlight your MCP project with clear, eye-catching badges, by **[Ironben](https://github.com/nanbingxyz)**\n- **[MCP Servers Hub](https://github.com/apappascs/mcp-servers-hub)** (**[website](https://mcp-servers-hub-website.pages.dev/)**) - A curated list of MCP servers by **[apappascs](https://github.com/apappascs)**\n- **[MCP X Community](https://x.com/i/communities/1861891349609603310)** – A X community for MCP by **[Xiaoyi](https://x.com/chxy)**\n- **[mcp-cli](https://github.com/wong2/mcp-cli)** - A CLI inspector for the Model Context Protocol by **[wong2](https://github.com/wong2)**\n- **[mcp-get](https://mcp-get.com)** - Command line tool for installing and managing MCP servers by **[Michael Latman](https://github.com/michaellatman)**\n- **[mcp-manager](https://github.com/zueai/mcp-manager)** - Simple Web UI to install and manage MCP servers for Claude Desktop by **[Zue](https://github.com/zueai)**\n- **[MCPHub](https://github.com/Jeamee/MCPHub-Desktop)** – An Open Source MacOS & Windows GUI Desktop app for discovering, installing and managing MCP servers by **[Jeamee](https://github.com/jeamee)**\n- **[mcp.run](https://mcp.run)** - A hosted registry and control plane to install & run secure + portable MCP Servers.\n- **[Open-Sourced MCP Servers Directory](https://github.com/chatmcp/mcp-directory)** - A curated list of MCP servers by **[mcpso](https://mcp.so)**\n- <img height=\"12\" width=\"12\" src=\"https://opentools.com/favicon.ico\" alt=\"OpenTools Logo\" /> **[OpenTools](https://opentools.com)** - An open registry for finding, installing, and building with MCP servers by **[opentoolsteam](https://github.com/opentoolsteam)**\n- **[PulseMCP](https://www.pulsemcp.com)** ([API](https://www.pulsemcp.com/api)) - Community hub & weekly newsletter for discovering MCP servers, clients, articles, and news by **[Tadas Antanavicius](https://github.com/tadasant)**, **[Mike Coughlin](https://github.com/macoughl)**, and **[Ravina Patel](https://github.com/ravinahp)**\n- **[r/mcp](https://www.reddit.com/r/mcp)** – A Reddit community dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Smithery](https://smithery.ai/)** - A registry of MCP servers to find the right tools for your LLM agents by **[Henry Mao](https://github.com/calclavia)**\n- **[Toolbase](https://gettoolbase.ai)** - Desktop application that manages tools and MCP servers with just a few clicks - no coding required by **[gching](https://github.com/gching)**\n\n## 🚀 Getting Started\n\n### Using MCP Servers in this Repository\nTypescript-based servers in this repository can be used directly with `npx`.\n\nFor example, this will start the [Memory](src/memory) server:\n```sh\nnpx -y @modelcontextprotocol/server-memory\n```\n\nPython-based servers in this repository can be used directly with [`uvx`](https://docs.astral.sh/uv/concepts/tools/) or [`pip`](https://pypi.org/project/pip/). `uvx` is recommended for ease of use and setup.\n\nFor example, this will start the [Git](src/git) server:\n```sh\n# With uvx\nuvx mcp-server-git\n\n# With pip\npip install mcp-server-git\npython -m mcp_server_git\n```\n\nFollow [these](https://docs.astral.sh/uv/getting-started/installation/) instructions to install `uv` / `uvx` and [these](https://pip.pypa.io/en/stable/installation/) to install `pip`.\n\n### Using an MCP Client\nHowever, running a server on its own isn't very useful, and should instead be configured into an MCP client. For example, here's the Claude Desktop configuration to use the above server:\n\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-memory\"]\n    }\n  }\n}\n```\n\nAdditional examples of using the Claude Desktop as an MCP client might look like:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/path/to/allowed/files\"]\n    },\n    \"git\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-git\", \"--repository\", \"path/to/git/repo\"]\n    },\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    },\n    \"postgres\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\", \"postgresql://localhost/mydb\"]\n    }\n  }\n}\n```\n\n## 🛠️ Creating Your Own Server\n\nInterested in creating your own MCP server? Visit the official documentation at [modelcontextprotocol.io](https://modelcontextprotocol.io/introduction) for comprehensive guides, best practices, and technical details on implementing MCP servers.\n\n## 🤝 Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributing to this repository.\n\n## 🔒 Security\n\nSee [SECURITY.md](SECURITY.md) for reporting security vulnerabilities.\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 💬 Community\n\n- [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions)\n\n## ⭐ Support\n\nIf you find MCP servers useful, please consider starring the repository and contributing new servers or improvements!\n\n---\n\nManaged by Anthropic, but built together with the community. The Model Context Protocol is open source and we encourage everyone to contribute their own servers and improvements!\n",
      "npm_url": "https://www.npmjs.com/package/mcp-servers",
      "npm_downloads": 854,
      "keywords": [
        "git",
        "github",
        "workflows",
        "git workflow",
        "git history",
        "preserving git"
      ],
      "category": "git-workflow-management"
    },
    "devassistantai--mcp-servers": {
      "owner": "devassistantai",
      "name": "mcp-servers",
      "url": "https://github.com/devassistantai/mcp-servers",
      "imageUrl": "/freedevtools/mcp/pfp/devassistantai.webp",
      "description": "Interact with the GitHub Projects V2 API to manage projects, tasks, items, fields, and views using GraphQL. Automated project organization and workflow enhancements are facilitated through this interface.",
      "stars": 5,
      "forks": 0,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-30T16:32:40Z",
      "readme_content": "# Model Context Protocol servers\n\nThis repository is a collection of *reference implementations* for the [Model Context Protocol](https://modelcontextprotocol.io/) (MCP), as well as references\nto community built servers and additional resources.\n\nThe servers in this repository showcase the versatility and extensibility of MCP, demonstrating how it can be used to give Large Language Models (LLMs) secure, controlled access to tools and data sources.\nEach MCP server is implemented with either the [Typescript MCP SDK](https://github.com/modelcontextprotocol/typescript-sdk) or [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk).\n\n> Note: Lists in this README are maintained in alphabetical order to minimize merge conflicts when adding new items.\n\n## 🌟 Reference Servers\n\nThese servers aim to demonstrate MCP features and the TypeScript and Python SDKs.\n\n- **[AWS KB Retrieval](src/aws-kb-retrieval-server)** - Retrieval from AWS Knowledge Base using Bedrock Agent Runtime\n- **[Brave Search](src/brave-search)** - Web and local search using Brave's Search API\n- **[EverArt](src/everart)** - AI image generation using various models\n- **[Everything](src/everything)** - Reference / test server with prompts, resources, and tools\n- **[Fetch](src/fetch)** - Web content fetching and conversion for efficient LLM usage\n- **[Filesystem](src/filesystem)** - Secure file operations with configurable access controls\n- **[Git](src/git)** - Tools to read, search, and manipulate Git repositories\n- **[GitHub](src/github)** - Repository management, file operations, and GitHub API integration\n- **[GitLab](src/gitlab)** - GitLab API, enabling project management\n- **[Google Drive](src/gdrive)** - File access and search capabilities for Google Drive\n- **[Google Maps](src/google-maps)** - Location services, directions, and place details\n- **[Memory](src/memory)** - Knowledge graph-based persistent memory system\n- **[PostgreSQL](src/postgres)** - Read-only database access with schema inspection\n- **[Puppeteer](src/puppeteer)** - Browser automation and web scraping\n- **[Sentry](src/sentry)** - Retrieving and analyzing issues from Sentry.io\n- **[Sequential Thinking](src/sequentialthinking)** - Dynamic and reflective problem-solving through thought sequences\n- **[Slack](src/slack)** - Channel management and messaging capabilities\n- **[Sqlite](src/sqlite)** - Database interaction and business intelligence capabilities\n- **[Time](src/time)** - Time and timezone conversion capabilities\n\n## 🤝 Third-Party Servers\n\n### 🎖️ Official Integrations\n\nOfficial integrations are maintained by companies building production ready MCP servers for their platforms.\n\n- <img height=\"12\" width=\"12\" src=\"https://www.21st.dev/favicon.ico\" alt=\"21st.dev Logo\" /> **[21st.dev Magic](https://github.com/21st-dev/magic-mcp)** - Create crafted UI components inspired by the best 21st.dev design engineers.\n- <img height=\"12\" width=\"12\" src=\"https://apify.com/favicon.ico\" alt=\"Apify Logo\" /> **[Apify](https://github.com/apify/actors-mcp-server)** - [Actors MCP Server](https://apify.com/apify/actors-mcp-server): Use 3,000+ pre-built cloud tools to extract data from websites, e-commerce, social media, search engines, maps, and more\n- <img height=\"12\" width=\"12\" src=\"https://resources.audiense.com/hubfs/favicon-1.png\" alt=\"Audiense Logo\" /> **[Audiense Insights](https://github.com/AudienseCo/mcp-audiense-insights)** - Marketing insights and audience analysis from [Audiense](https://www.audiense.com/products/audiense-insights) reports, covering demographic, cultural, influencer, and content engagement analysis.\n- <img height=\"12\" width=\"12\" src=\"https://axiom.co/favicon.ico\" alt=\"Axiom Logo\" /> **[Axiom](https://github.com/axiomhq/mcp-server-axiom)** - Query and analyze your Axiom logs, traces, and all other event data in natural language\n- <img height=\"12\" width=\"12\" src=\"https://browserbase.com/favicon.ico\" alt=\"Browserbase Logo\" /> **[Browserbase](https://github.com/browserbase/mcp-server-browserbase)** - Automate browser interactions in the cloud (e.g. web navigation, data extraction, form filling, and more)\n- <img height=\"12\" width=\"12\" src=\"https://clickhouse.com/favicon.ico\" alt=\"ClickHouse Logo\" /> **[ClickHouse](https://github.com/ClickHouse/mcp-clickhouse)** - Query your [ClickHouse](https://clickhouse.com/) database server.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/cloudflare\" /> **[Cloudflare](https://github.com/cloudflare/mcp-server-cloudflare)** - Deploy, configure & interrogate your resources on the Cloudflare developer platform (e.g. Workers/KV/R2/D1)\n- <img height=\"12\" width=\"12\" src=\"https://e2b.dev/favicon.ico\" alt=\"E2B Logo\" /> **[E2B](https://github.com/e2b-dev/mcp-server)** - Run code in secure sandboxes hosted by [E2B](https://e2b.dev)\n- <img height=\"12\" width=\"12\" src=\"https://esignatures.com/favicon.ico\" alt=\"eSignatures Logo\" /> **[eSignatures](https://github.com/esignaturescom/mcp-server-esignatures)** - Contract and template management for drafting, reviewing, and sending binding contracts.\n- <img height=\"12\" width=\"12\" src=\"https://exa.ai/images/favicon-32x32.png\" alt=\"Exa Logo\" /> **[Exa](https://github.com/exa-labs/exa-mcp-server)** - Search Engine made for AIs by [Exa](https://exa.ai)\n- <img height=\"12\" width=\"12\" src=\"https://firecrawl.dev/favicon.ico\" alt=\"Firecrawl Logo\" /> **[Firecrawl](https://github.com/mendableai/firecrawl-mcp-server)** - Extract web data with [Firecrawl](https://firecrawl.dev)\n- <img height=\"12\" width=\"12\" src=\"https://fireproof.storage/favicon.ico\" alt=\"Fireproof Logo\" /> **[Fireproof](https://github.com/fireproof-storage/mcp-database-server)** - Immutable ledger database with live synchronization\n- <img height=\"12\" width=\"12\" src=\"https://grafana.com/favicon.ico\" alt=\"Grafana Logo\" /> **[Grafana](https://github.com/grafana/mcp-grafana)** - Search dashboards, investigate incidents and query datasources in your Grafana instance\n- **[IBM wxflows](https://github.com/IBM/wxflows/tree/main/examples/mcp/javascript)** - Tool platform by IBM to build, test and deploy tools for any data source\n- <img height=\"12\" width=\"12\" src=\"https://forevervm.com/icon.png\" alt=\"ForeverVM Logo\" /> **[ForeverVM](https://github.com/jamsocket/forevervm/tree/main/javascript/mcp-server)** - Run Python in a code sandbox.\n- <img height=\"12\" width=\"12\" src=\"https://integration.app/favicon.ico\" alt=\"Integration App Icon\" /> **[Integration App](https://github.com/integration-app/mcp-server)** - Interact with any other SaaS applications on behalf of your customers. \n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/jetbrains\" /> **[JetBrains](https://github.com/JetBrains/mcp-jetbrains)** – Work on your code with JetBrains IDEs\n- <img height=\"12\" width=\"12\" src=\"https://kagi.com/favicon.ico\" alt=\"Kagi Logo\" /> **[Kagi Search](https://github.com/kagisearch/kagimcp)** - Search the web using Kagi's search API\n- <img height=\"12\" width=\"12\" src=\"https://langfuse.com/favicon.ico\" alt=\"Langfuse Logo\" /> **[Langfuse Prompt Management](https://github.com/langfuse/mcp-server-langfuse)** - Open-source tool for collaborative editing, versioning, evaluating, and releasing prompts.\n- <img height=\"12\" width=\"12\" src=\"https://lingo.dev/favicon.ico\" alt=\"Lingo.dev Logo\" /> **[Lingo.dev](https://github.com/lingodotdev/lingo.dev/blob/main/mcp.md)** - Make your AI agent speak every language on the planet, using [Lingo.dev](https://lingo.dev) Localization Engine.\n- <img height=\"12\" width=\"12\" src=\"https://www.meilisearch.com/favicon.ico\" alt=\"Meilisearch Logo\" /> **[Meilisearch](https://github.com/meilisearch/meilisearch-mcp)** - Interact & query with Meilisearch (Full-text & semantic search API)\n- <img height=\"12\" width=\"12\" src=\"https://metoro.io/static/images/logos/Metoro.svg\" /> **[Metoro](https://github.com/metoro-io/metoro-mcp-server)** - Query and interact with kubernetes environments monitored by Metoro\n- <img height=\"12\" width=\"12\" src=\"https://www.motherduck.com/favicon.ico\" alt=\"MotherDuck Logo\" /> **[MotherDuck](https://github.com/motherduckdb/mcp-server-motherduck)** - Query and analyze data with MotherDuck and local DuckDB\n- <img height=\"12\" width=\"12\" src=\"https://needle-ai.com/images/needle-logo-orange-2-rounded.png\" alt=\"Needle AI Logo\" /> **[Needle](https://github.com/needle-ai/needle-mcp)** - Production-ready RAG out of the box to search and retrieve data from your own documents.\n- <img height=\"12\" width=\"12\" src=\"https://neo4j.com/favicon.ico\" alt=\"Neo4j Logo\" /> **[Neo4j](https://github.com/neo4j-contrib/mcp-neo4j/)** - Neo4j graph database server (schema + read/write-cypher) and separate graph database backed memory\n- **[Neon](https://github.com/neondatabase/mcp-server-neon)** - Interact with the Neon serverless Postgres platform\n- <img height=\"12\" width=\"12\" src=\"https://oxylabs.io/favicon.ico\" alt=\"Oxylabs Logo\" /> **[Oxylabs](https://github.com/oxylabs/oxylabs-mcp)** - Scrape websites with Oxylabs Web API, supporting dynamic rendering and parsing for structured data extraction.\n- <img height=\"12\" width=\"12\" src=\"https://qdrant.tech/img/brand-resources-logos/logomark.svg\" /> **[Qdrant](https://github.com/qdrant/mcp-server-qdrant/)** - Implement semantic memory layer on top of the Qdrant vector search engine\n- **[Raygun](https://github.com/MindscapeHQ/mcp-server-raygun)** - Interact with your crash reporting and real using monitoring data on your Raygun account\n- <img height=\"12\" width=\"12\" src=\"https://riza.io/favicon.ico\" alt=\"Riza logo\" /> **[Riza](https://github.com/riza-io/riza-mcp)** - Arbitrary code execution and tool-use platform for LLMs by [Riza](https://riza.io)\n- <img height=\"12\" width=\"12\" src=\"https://pics.fatwang2.com/56912e614b35093426c515860f9f2234.svg\" /> [Search1API](https://github.com/fatwang2/search1api-mcp) - One API for Search, Crawling, and Sitemaps\n- <img height=\"12\" width=\"12\" src=\"https://stripe.com/favicon.ico\" alt=\"Stripe Logo\" /> **[Stripe](https://github.com/stripe/agent-toolkit)** - Interact with Stripe API\n- <img height=\"12\" width=\"12\" src=\"https://tavily.com/favicon.ico\" alt=\"Tavily Logo\" /> **[Tavily](https://github.com/tavily-ai/tavily-mcp)** - Search engine for AI agents (search + extract) powered by [Tavily](https://tavily.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.tinybird.co/favicon.ico\" alt=\"Tinybird Logo\" /> **[Tinybird](https://github.com/tinybirdco/mcp-tinybird)** - Interact with Tinybird serverless ClickHouse platform\n- <img height=\"12\" width=\"12\" src=\"https://verodat.io/assets/favicon-16x16.png\" alt=\"Verodat Logo\" /> **[Verodat](https://github.com/Verodat/verodat-mcp-server)** - Interact with Verodat AI Ready Data platform\n\n### 🌎 Community Servers\n\nA growing set of community-developed and maintained servers demonstrates various applications of MCP across different domains.\n\n> **Note:** Community servers are **untested** and should be used at **your own risk**. They are not affiliated with or endorsed by Anthropic.\n\n- **[AWS S3](https://github.com/aws-samples/sample-mcp-server-s3)** - A sample MCP server for AWS S3 that flexibly fetches objects from S3 such as PDF documents\n- **[AWS](https://github.com/rishikavikondala/mcp-server-aws)** - Perform operations on your AWS resources using an LLM\n- **[Airtable](https://github.com/domdomegg/airtable-mcp-server)** - Read and write access to [Airtable](https://airtable.com/) databases, with schema inspection.\n- **[Airtable](https://github.com/felores/airtable-mcp)** - Airtable Model Context Protocol Server.\n- **[AlphaVantage](https://github.com/calvernaz/alphavantage)** - MCP server for stock market data API [AlphaVantage](https://www.alphavantage.co)\n- **[Anki](https://github.com/scorzeth/anki-mcp-server)** - An MCP server for interacting with your [Anki](https://apps.ankiweb.net) decks and cards.\n- **[Any Chat Completions](https://github.com/pyroprompts/any-chat-completions-mcp)** - Interact with any OpenAI SDK Compatible Chat Completions API like OpenAI, Perplexity, Groq, xAI and many more.\n- **[ArangoDB](https://github.com/ravenwits/mcp-server-arangodb)** - MCP Server that provides database interaction capabilities through [ArangoDB](https://arangodb.com/).\n- **[Atlassian](https://github.com/sooperset/mcp-atlassian)** - Interact with Atlassian Cloud products (Confluence and Jira) including searching/reading Confluence spaces/pages, accessing Jira issues, and project metadata.\n- **[Base Free USDC Transfer](https://github.com/magnetai/mcp-free-usdc-transfer)** - Send USDC on [Base](https://base.org) for free using Claude AI! Built with [Coinbase CDP](https://docs.cdp.coinbase.com/mpc-wallet/docs/welcome).\n- **[BigQuery](https://github.com/LucasHild/mcp-server-bigquery)** (by LucasHild) - This server enables LLMs to inspect database schemas and execute queries on BigQuery.\n- **[BigQuery](https://github.com/ergut/mcp-bigquery-server)** (by ergut) - Server implementation for Google BigQuery integration that enables direct BigQuery database access and querying capabilities\n- **[Calendar](https://github.com/GongRzhe/Calendar-MCP-Server)** - Google Calendar integration server enabling AI assistants to manage calendar events through natural language interactions.\n- **[CFBD API](https://github.com/lenwood/cfbd-mcp-server)** - An MCP server for the [College Football Data API](https://collegefootballdata.com/).\n- **[ChatMCP](https://github.com/AI-QL/chat-mcp)** – An Open Source Cross-platform GUI Desktop application compatible with Linux, macOS, and Windows, enabling seamless interaction with MCP servers across dynamically selectable LLMs, by **[AIQL](https://github.com/AI-QL)**\n- **[ChatSum](https://github.com/mcpso/mcp-server-chatsum)** - Query and Summarize chat messages with LLM. by [mcpso](https://mcp.so)\n- **[Chroma](https://github.com/privetin/chroma)** - Vector database server for semantic document search and metadata filtering, built on Chroma\n- **[ClaudePost](https://github.com/ZilongXue/claude-post)** - ClaudePost enables seamless email management for Gmail, offering secure features like email search, reading, and sending.\n- **[Cloudinary](https://github.com/felores/cloudinary-mcp-server)** - Cloudinary Model Context Protocol Server to upload media to Cloudinary and get back the media link and details.\n- **[code-executor](https://github.com/bazinga012/mcp_code_executor)** - An MCP server that allows LLMs to execute Python code within a specified Conda environment.\n- **[code-sandbox-mcp](https://github.com/Automata-Labs-team/code-sandbox-mcp)** - An MCP server to create secure code sandbox environment for executing code within Docker containers.\n- **[cognee-mcp](https://github.com/topoteretes/cognee/tree/main/cognee-mcp)** - GraphRAG memory server with customizable ingestion, data processing and search\n- **[coin_api_mcp](https://github.com/longmans/coin_api_mcp)** - Provides access to [coinmarketcap](https://coinmarketcap.com/) cryptocurrency data.\n- **[Contentful-mcp](https://github.com/ivo-toby/contentful-mcp)** - Read, update, delete, publish content in your [Contentful](https://contentful.com) space(s) from this MCP Server.\n- **[Dappier](https://github.com/DappierAI/dappier-mcp)** - Connect LLMs to real-time, rights-cleared, proprietary data from trusted sources. Access specialized models for Real-Time Web Search, News, Sports, Financial Data, Crypto, and premium publisher content. Explore data models at [marketplace.dappier.com](https://marketplace.dappier.com/marketplace).\n- **[Data Exploration](https://github.com/reading-plus-ai/mcp-server-data-exploration)** - MCP server for autonomous data exploration on .csv-based datasets, providing intelligent insights with minimal effort. NOTE: Will execute arbitrary Python code on your machine, please use with caution!\n- **[Dataset Viewer](https://github.com/privetin/dataset-viewer)** - Browse and analyze Hugging Face datasets with features like search, filtering, statistics, and data export\n- **[DeepSeek MCP Server](https://github.com/DMontgomery40/deepseek-mcp-server)** - Model Context Protocol server integrating DeepSeek's advanced language models, in addition to [other useful API endpoints](https://github.com/DMontgomery40/deepseek-mcp-server?tab=readme-ov-file#features)\n- **[Deepseek_R1](https://github.com/66julienmartin/MCP-server-Deepseek_R1)** - A Model Context Protocol (MCP) server implementation connecting Claude Desktop with DeepSeek's language models (R1/V3)\n- **[deepseek-thinker-mcp](https://github.com/ruixingshi/deepseek-thinker-mcp)** - A MCP (Model Context Protocol) provider Deepseek reasoning content to MCP-enabled AI Clients, like Claude Desktop. Supports access to Deepseek's thought processes from the Deepseek API service or from a local Ollama server.\n- **[Descope](https://github.com/descope-sample-apps/descope-mcp-server)** - An MCP server to integrate with [Descope](https://descope.com) to search audit logs, manage users, and more.\n- **[DevRev](https://github.com/kpsunil97/devrev-mcp-server)** - An MCP server to integrate with DevRev APIs to search through your DevRev Knowledge Graph where objects can be imported from diff. sources listed [here](https://devrev.ai/docs/import#available-sources).\n- **[Dify](https://github.com/YanxingLiu/dify-mcp-server)** - A simple implementation of an MCP server for dify workflows.\n- **[Discord](https://github.com/v-3/discordmcp)** - A MCP server to connect to Discord guilds through a bot and read and write messages in channels\n- **[Docker](https://github.com/ckreiling/mcp-server-docker)** - Integrate with Docker to manage containers, images, volumes, and networks.\n- **[Drupal](https://github.com/Omedia/mcp-server-drupal)** - Server for interacting with [Drupal](https://www.drupal.org/project/mcp) using STDIO transport layer.\n- **[Elasticsearch](https://github.com/cr7258/elasticsearch-mcp-server)** - MCP server implementation that provides Elasticsearch interaction.\n- **[ElevenLabs](https://github.com/mamertofabian/elevenlabs-mcp-server)** - A server that integrates with ElevenLabs text-to-speech API capable of generating full voiceovers with multiple voices.\n- **[Eunomia](https://github.com/whataboutyou-ai/eunomia-MCP-server)** - Extension of the Eunomia framework that connects Eunomia instruments with MCP servers\n- **[Everything Search](https://github.com/mamertofabian/mcp-everything-search)** - Fast file searching capabilities across Windows (using [Everything SDK](https://www.voidtools.com/support/everything/sdk/)), macOS (using mdfind command), and Linux (using locate/plocate command).\n- **[Fetch](https://github.com/zcaceres/fetch-mcp)** - A server that flexibly fetches HTML, JSON, Markdown, or plaintext.\n- **[FireCrawl](https://github.com/vrknetha/mcp-server-firecrawl)** - Advanced web scraping with JavaScript rendering, PDF support, and smart rate limiting\n- **[FlightRadar24](https://github.com/sunsetcoder/flightradar24-mcp-server)** - A Claude Desktop MCP server that helps you track flights in real-time using Flightradar24 data.\n- **[Ghost](https://github.com/MFYDev/ghost-mcp)** - A Model Context Protocol (MCP) server for interacting with Ghost CMS through LLM interfaces like Claude.\n- **[Glean](https://github.com/longyi1207/glean-mcp-server)** - A server that uses Glean API to search and chat.\n- **[Gmail](https://github.com/GongRzhe/Gmail-MCP-Server)** - A Model Context Protocol (MCP) server for Gmail integration in Claude Desktop with auto authentication support.\n- **[Goal Story](https://github.com/hichana/goalstory-mcp)** - a Goal Tracker and Visualization Tool for personal and professional development.\n- **[Golang Filesystem Server](https://github.com/mark3labs/mcp-filesystem-server)** - Secure file operations with configurable access controls built with Go!\n- **[Google Calendar](https://github.com/v-3/google-calendar)** - Integration with Google Calendar to check schedules, find time, and add/delete events\n- **[Google Calendar](https://github.com/nspady/google-calendar-mcp)** - Google Calendar MCP Server for managing Google calendar events. Also supports searching for events by attributes like title and location.\n- **[Google Custom Search](https://github.com/adenot/mcp-google-search)** - Provides Google Search results via the Google Custom Search API\n- **[Google Tasks](https://github.com/zcaceres/gtasks-mcp)** - Google Tasks API Model Context Protocol Server.\n- **[Holaspirit](https://github.com/syucream/holaspirit-mcp-server)** - Interact with [Holaspirit](https://www.holaspirit.com/).\n- **[Home Assistant](https://github.com/tevonsb/homeassistant-mcp)** - Interact with [Home Assistant](https://www.home-assistant.io/) including viewing and controlling lights, switches, sensors, and all other Home Assistant entities.\n- **[HubSpot](https://github.com/buryhuang/mcp-hubspot)** - HubSpot CRM integration for managing contacts and companies. Create and retrieve CRM data directly through Claude chat.\n- **[HuggingFace Spaces](https://github.com/evalstate/mcp-hfspace)** - Server for using HuggingFace Spaces, supporting Open Source Image, Audio, Text Models and more. Claude Desktop mode for easy integration.\n- **[Inoyu](https://github.com/sergehuber/inoyu-mcp-unomi-server)** - Interact with an Apache Unomi CDP customer data platform to retrieve and update customer profiles\n- **[iTerm MCP](https://github.com/ferrislucas/iterm-mcp)** - Integration with iTerm2 terminal emulator for macOS, enabling LLMs to execute and monitor terminal commands.\n- **[JavaFX](https://github.com/mcpso/mcp-server-javafx)** - Make drawings using a JavaFX canvas\n- **[JDBC](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc)** - Connect to any JDBC-compatible database and query, insert, update, delete, and more. Supports MySQL, PostgreSQL, Oracle, SQL Server, sqllite and [more](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc#supported-jdbc-variants).\n- **[JSON](https://github.com/GongRzhe/JSON-MCP-Server)** - JSON handling and processing server with advanced query capabilities using JSONPath syntax and support for array, string, numeric, and date operations.\n- **[Keycloak MCP](https://github.com/ChristophEnglisch/keycloak-model-context-protocol)** - This MCP server enables natural language interaction with Keycloak for user and realm management including creating, deleting, and listing users and realms.\n- **[Kibela](https://github.com/kiwamizamurai/mcp-kibela-server)** (by kiwamizamurai) - Interact with Kibela API.\n- **[kintone](https://github.com/macrat/mcp-server-kintone)** - Manage records and apps in [kintone](https://kintone.com) through LLM tools.\n- **[Kubernetes](https://github.com/Flux159/mcp-server-kubernetes)** - Connect to Kubernetes cluster and manage pods, deployments, and services.\n- **[Lightdash](https://github.com/syucream/lightdash-mcp-server)** - Interact with [Lightdash](https://www.lightdash.com/), a BI tool.\n- **[Linear](https://github.com/jerhadf/linear-mcp-server)** - Allows LLM to interact with Linear's API for project management, including searching, creating, and updating issues.\n- **[LlamaCloud](https://github.com/run-llama/mcp-server-llamacloud)** (by marcusschiesser) - Integrate the data stored in a managed index on [LlamaCloud](https://cloud.llamaindex.ai/)\n- **[llm-context](https://github.com/cyberchitta/llm-context.py)** - Provides a repo-packing MCP tool with configurable profiles that specify file inclusion/exclusion patterns and optional prompts.\n- **[MariaDB](https://github.com/abel9851/mcp-server-mariadb)** - MariaDB database integration with configurable access controls in Python.\n- **[MCP Compass](https://github.com/liuyoshio/mcp-compass)** - Suggest the right MCP server for your needs\n- **[MCP Installer](https://github.com/anaisbetts/mcp-installer)** - This server is a server that installs other MCP servers for you.\n- **[mcp-k8s-go](https://github.com/strowk/mcp-k8s-go)** - Golang-based Kubernetes server for MCP to browse pods and their logs, events, namespaces and more. Built to be extensible.\n- **[mcp-proxy](https://github.com/sparfenyuk/mcp-proxy)** - Connect to MCP servers that run on SSE transport, or expose stdio servers as an SSE server.\n- **[MSSQL](https://github.com/aekanun2020/mcp-server/)** - MSSQL database integration with configurable access controls and schema inspection\n- **[MSSQL](https://github.com/JexinSam/mssql_mcp_server)** (by jexin) - MCP Server for MSSQL database in Python\n- **[MSSQL-Python](https://github.com/amornpan/py-mcp-mssql)** (by amornpan) - A read-only Python implementation for MSSQL database access with enhanced security features, configurable access controls, and schema inspection capabilities. Focuses on safe database interaction through Python ecosystem.\n- **[Markdownify](https://github.com/zcaceres/mcp-markdownify-server)** - MCP to convert almost anything to Markdown (PPTX, HTML, PDF, Youtube Transcripts and more)\n- **[Minima](https://github.com/dmayboroda/minima)** - MCP server for RAG on local files\n- **[MongoDB](https://github.com/kiliczsh/mcp-mongo-server)** - A Model Context Protocol Server for MongoDB.\n- **[Monday.com](https://github.com/sakce/mcp-server-monday)** - MCP Server to interact with Monday.com boards and items.\n- **[MySQL](https://github.com/benborla/mcp-server-mysql)** (by benborla) - MySQL database integration in NodeJS with configurable access controls and schema inspection\n- **[MySQL](https://github.com/designcomputer/mysql_mcp_server)** (by DesignComputer) - MySQL database integration in Python with configurable access controls and schema inspection\n- **[NS Travel Information](https://github.com/r-huijts/ns-mcp-server)** - Access Dutch Railways (NS) real-time train travel information and disruptions through the official NS API.\n- **[Neo4j](https://github.com/da-okazaki/mcp-neo4j-server)** - A community built server that interacts with Neo4j Graph Database.\n- **[Neovim](https://github.com/bigcodegen/mcp-neovim-server)** - An MCP Server for your Neovim session.\n- **[Notion](https://github.com/suekou/mcp-notion-server)** (by suekou) - Interact with Notion API.\n- **[Notion](https://github.com/v-3/notion-server)** (by v-3) - Notion MCP integration. Search, Read, Update, and Create pages through Claude chat.\n- **[oatpp-mcp](https://github.com/oatpp/oatpp-mcp)** - C++ MCP integration for Oat++. Use [Oat++](https://oatpp.io) to build MCP servers.\n- **[Obsidian Markdown Notes](https://github.com/calclavia/mcp-obsidian)** - Read and search through your Obsidian vault or any directory containing Markdown notes\n- **[obsidian-mcp](https://github.com/StevenStavrakis/obsidian-mcp)** - (by Steven Stavrakis) An MCP server for Obsidian.md with tools for searching, reading, writing, and organizing notes.\n- **[Okta](https://github.com/kapilduraphe/okta-mcp-server)** - Interact with Okta API.\n- **[OpenAPI](https://github.com/snaggle-ai/openapi-mcp-server)** - Interact with [OpenAPI](https://www.openapis.org/) APIs.\n- **[OpenCTI](https://github.com/Spathodea-Network/opencti-mcp)** - Interact with OpenCTI platform to retrieve threat intelligence data including reports, indicators, malware and threat actors.\n- **[OpenRPC](https://github.com/shanejonas/openrpc-mpc-server)** - Interact with and discover JSON-RPC APIs via [OpenRPC](https://open-rpc.org).\n- **[Open Strategy Partners Marketing Tools](https://github.com/open-strategy-partners/osp_marketing_tools)** - Content editing codes, value map, and positioning tools for product marketing.\n- **[Pandoc](https://github.com/vivekVells/mcp-pandoc)** - MCP server for seamless document format conversion using Pandoc, supporting Markdown, HTML, PDF, DOCX (.docx), csv and more.\n- **[PIF](https://github.com/hungryrobot1/MCP-PIF)** - A Personal Intelligence Framework (PIF), providing tools for file operations, structured reasoning, and journal-based documentation to support continuity and evolving human-AI collaboration across sessions.\n- **[Pinecone](https://github.com/sirmews/mcp-pinecone)** - MCP server for searching and uploading records to Pinecone. Allows for simple RAG features, leveraging Pinecone's Inference API.\n- **[Placid.app](https://github.com/felores/placid-mcp-server)** - Generate image and video creatives using Placid.app templates\n- **[Playwright](https://github.com/executeautomation/mcp-playwright)** - This MCP Server will help you run browser automation and webscraping using Playwright\n- **[Postman](https://github.com/shannonlal/mcp-postman)** - MCP server for running Postman Collections locally via Newman. Allows for simple execution of Postman Server and returns the results of whether the collection passed all the tests.\n- **[Qwen_Max](https://github.com/66julienmartin/MCP-server-Qwen_Max)** - A Model Context Protocol (MCP) server implementation for the Qwen models.\n- **[RabbitMQ](https://github.com/kenliao94/mcp-server-rabbitmq)** - The MCP server that interacts with RabbitMQ to publish and consume messages.\n- **[RAG Web Browser](https://github.com/apify/mcp-server-rag-web-browser)** An MCP server for Apify's open-source RAG Web Browser [Actor](https://apify.com/apify/rag-web-browser) to perform web searches, scrape URLs, and return content in Markdown.\n- **[Reaper](https://github.com/dschuler36/reaper-mcp-server)** - Interact with your [Reaper](https://www.reaper.fm/) (Digital Audio Workstation) projects.\n- **[Redis](https://github.com/GongRzhe/REDIS-MCP-Server)** - Redis database operations and caching microservice server with support for key-value operations, expiration management, and pattern-based key listing.\n- **[Redis](https://github.com/prajwalnayak7/mcp-server-redis)** MCP server to interact with Redis Server, AWS Memory DB, etc for caching or other use-cases where in-memory and key-value based storage is appropriate\n- **[Rememberizer AI](https://github.com/skydeckai/mcp-server-rememberizer)** - An MCP server designed for interacting with the Rememberizer data source, facilitating enhanced knowledge retrieval.\n- **[Replicate](https://github.com/deepfates/mcp-replicate)** - Search, run and manage machine learning models on Replicate through a simple tool-based interface. Browse models, create predictions, track their status, and handle generated images.\n- **[Rijksmuseum](https://github.com/r-huijts/rijksmuseum-mcp)** - Interface with the Rijksmuseum API to search artworks, retrieve artwork details, access image tiles, and explore user collections.\n- **[Salesforce MCP](https://github.com/smn2gnt/MCP-Salesforce)** - Interact with Salesforce Data and Metadata\n- **[Scholarly](https://github.com/adityak74/mcp-scholarly)** - A MCP server to search for scholarly and academic articles.\n- **[SearXNG](https://github.com/ihor-sokoliuk/mcp-searxng)** - A Model Context Protocol Server for [SearXNG](https://docs.searxng.org)\n- **[Snowflake](https://github.com/isaacwasserman/mcp-snowflake-server)** - This MCP server enables LLMs to interact with Snowflake databases, allowing for secure and controlled data operations.\n- **[Solana Agent Kit](https://github.com/sendaifun/solana-agent-kit/tree/main/examples/agent-kit-mcp-server)** - This MCP server enables LLMs to interact with the Solana blockchain with help of Solana Agent Kit by SendAI, allowing for 40+ protcool actions and growing \n- **[Spotify](https://github.com/varunneal/spotify-mcp)** - This MCP allows an LLM to play and use Spotify.\n- **[Stripe](https://github.com/atharvagupta2003/mcp-stripe)** - This MCP allows integration with Stripe for handling payments, customers, and refunds.\n- **[TMDB](https://github.com/Laksh-star/mcp-server-tmdb)** - This MCP server integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.\n- **[Tavily search](https://github.com/RamXX/mcp-tavily)** - An MCP server for Tavily's search & news API, with explicit site inclusions/exclusions\n- **[Ticketmaster](https://github.com/delorenj/mcp-server-ticketmaster)** - Search for events, venues, and attractions through the Ticketmaster Discovery API\n- **[Todoist](https://github.com/abhiz123/todoist-mcp-server)** - Interact with Todoist to manage your tasks.\n- **[Travel Planner](https://github.com/GongRzhe/TRAVEL-PLANNER-MCP-Server)** - Travel planning and itinerary management server integrating with Google Maps API for location search, place details, and route calculations.\n- **[Vega-Lite](https://github.com/isaacwasserman/mcp-vegalite-server)** - Generate visualizations from fetched data using the VegaLite format and renderer.\n- **[Video Editor](https://github.com/burningion/video-editing-mcp)** - A Model Context Protocol Server to add, edit, and search videos with [Video Jungle](https://www.video-jungle.com/).\n- **[Virtual location (Google Street View,etc.)](https://github.com/mfukushim/map-traveler-mcp)** - Integrates Google Map, Google Street View, PixAI, Stability.ai, ComfyUI API and Bluesky to provide a virtual location simulation in LLM (written in Effect.ts)\n- **[WildFly MCP](https://github.com/wildfly-extras/wildfly-mcp)** - WildFly MCP server that enables LLM to interact with running WildFly servers (retrieve metrics, logs, invoke operations, ...).\n- **[Windows CLI](https://github.com/SimonB97/win-cli-mcp-server)** - MCP server for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, and Git Bash shells.\n- **[World Bank data API](https://github.com/anshumax/world_bank_mcp_server)** - A server that fetches data indicators available with the World Bank as part of their data API\n- **[X (Twitter)](https://github.com/EnesCinr/twitter-mcp)** (by EnesCinr) - Interact with twitter API. Post tweets and search for tweets by query.\n- **[X (Twitter)](https://github.com/vidhupv/x-mcp)** (by vidhupv) - Create, manage and publish X/Twitter posts directly through Claude chat.\n- **[XMind](https://github.com/apeyroux/mcp-xmind)** - Read and search through your XMind directory containing XMind files.\n- **[YouTube](https://github.com/ZubeidHendricks/youtube-mcp-server)** - Comprehensive YouTube API integration for video management, Shorts creation, and analytics.\n\n## 📚 Frameworks\n\nThese are high-level frameworks that make it easier to build MCP servers or clients.\n\n### For servers\n\n* **[EasyMCP](https://github.com/zcaceres/easy-mcp/)** (TypeScript)\n* **[FastMCP](https://github.com/punkpeye/fastmcp)** (TypeScript)\n* **[Foxy Contexts](https://github.com/strowk/foxy-contexts)** – A library to build MCP servers in Golang by **[strowk](https://github.com/strowk)**\n* **[Quarkus MCP Server SDK](https://github.com/quarkiverse/quarkus-mcp-server)** (Java)\n\n### For clients\n\n* **[codemirror-mcp](https://github.com/marimo-team/codemirror-mcp)** - CodeMirror extension that implements the Model Context Protocol (MCP) for resource mentions and prompt commands\n\n## 📚 Resources\n\nAdditional resources on MCP.\n\n- **[AiMCP](https://www.aimcp.info)** - A collection of MCP clients&servers to find the right mcp tools by **[Hekmon](https://github.com/hekmon8)**\n- **[Awesome Crypto MCP Servers by badkk](https://github.com/badkk/awesome-crypto-mcp-servers)** - A curated list of MCP servers by **[Luke Fan](https://github.com/badkk)**\n- **[Awesome MCP Servers by appcypher](https://github.com/appcypher/awesome-mcp-servers)** - A curated list of MCP servers by **[Stephen Akinyemi](https://github.com/appcypher)**\n- **[Awesome MCP Servers by punkpeye](https://github.com/punkpeye/awesome-mcp-servers)** (**[website](https://glama.ai/mcp/servers)**) - A curated list of MCP servers by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Awesome MCP Servers by wong2](https://github.com/wong2/awesome-mcp-servers)** (**[website](https://mcpservers.org)**) - A curated list of MCP servers by **[wong2](https://github.com/wong2)**\n- **[Discord Server](https://glama.ai/mcp/discord)** – A community discord server dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[MCP Badges](https://github.com/mcpx-dev/mcp-badges)** – Quickly highlight your MCP project with clear, eye-catching badges, by **[Ironben](https://github.com/nanbingxyz)**\n- **[MCP Servers Hub](https://github.com/apappascs/mcp-servers-hub)** (**[website](https://mcp-servers-hub-website.pages.dev/)**) - A curated list of MCP servers by **[apappascs](https://github.com/apappascs)**\n- **[MCP X Community](https://x.com/i/communities/1861891349609603310)** – A X community for MCP by **[Xiaoyi](https://x.com/chxy)**\n- **[mcp-cli](https://github.com/wong2/mcp-cli)** - A CLI inspector for the Model Context Protocol by **[wong2](https://github.com/wong2)**\n- **[mcp-get](https://mcp-get.com)** - Command line tool for installing and managing MCP servers by **[Michael Latman](https://github.com/michaellatman)**\n- **[mcp-manager](https://github.com/zueai/mcp-manager)** - Simple Web UI to install and manage MCP servers for Claude Desktop by **[Zue](https://github.com/zueai)**\n- **[MCPHub](https://github.com/Jeamee/MCPHub-Desktop)** – An Open Source MacOS & Windows GUI Desktop app for discovering, installing and managing MCP servers by **[Jeamee](https://github.com/jeamee)**\n- **[mcp.run](https://mcp.run)** - A hosted registry and control plane to install & run secure + portable MCP Servers.\n- **[Open-Sourced MCP Servers Directory](https://github.com/chatmcp/mcp-directory)** - A curated list of MCP servers by **[mcpso](https://mcp.so)**\n- <img height=\"12\" width=\"12\" src=\"https://opentools.com/favicon.ico\" alt=\"OpenTools Logo\" /> **[OpenTools](https://opentools.com)** - An open registry for finding, installing, and building with MCP servers by **[opentoolsteam](https://github.com/opentoolsteam)**\n- **[PulseMCP](https://www.pulsemcp.com)** ([API](https://www.pulsemcp.com/api)) - Community hub & weekly newsletter for discovering MCP servers, clients, articles, and news by **[Tadas Antanavicius](https://github.com/tadasant)**, **[Mike Coughlin](https://github.com/macoughl)**, and **[Ravina Patel](https://github.com/ravinahp)**\n- **[r/mcp](https://www.reddit.com/r/mcp)** – A Reddit community dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Smithery](https://smithery.ai/)** - A registry of MCP servers to find the right tools for your LLM agents by **[Henry Mao](https://github.com/calclavia)**\n- **[Toolbase](https://gettoolbase.ai)** - Desktop application that manages tools and MCP servers with just a few clicks - no coding required by **[gching](https://github.com/gching)**\n\n## 🚀 Getting Started\n\n### Using MCP Servers in this Repository\nTypescript-based servers in this repository can be used directly with `npx`.\n\nFor example, this will start the [Memory](src/memory) server:\n```sh\nnpx -y @modelcontextprotocol/server-memory\n```\n\nPython-based servers in this repository can be used directly with [`uvx`](https://docs.astral.sh/uv/concepts/tools/) or [`pip`](https://pypi.org/project/pip/). `uvx` is recommended for ease of use and setup.\n\nFor example, this will start the [Git](src/git) server:\n```sh\n# With uvx\nuvx mcp-server-git\n\n# With pip\npip install mcp-server-git\npython -m mcp_server_git\n```\n\nFollow [these](https://docs.astral.sh/uv/getting-started/installation/) instructions to install `uv` / `uvx` and [these](https://pip.pypa.io/en/stable/installation/) to install `pip`.\n\n### Using an MCP Client\nHowever, running a server on its own isn't very useful, and should instead be configured into an MCP client. For example, here's the Claude Desktop configuration to use the above server:\n\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-memory\"]\n    }\n  }\n}\n```\n\nAdditional examples of using the Claude Desktop as an MCP client might look like:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/path/to/allowed/files\"]\n    },\n    \"git\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-git\", \"--repository\", \"path/to/git/repo\"]\n    },\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    },\n    \"postgres\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\", \"postgresql://localhost/mydb\"]\n    }\n  }\n}\n```\n\n## 🛠️ Creating Your Own Server\n\nInterested in creating your own MCP server? Visit the official documentation at [modelcontextprotocol.io](https://modelcontextprotocol.io/introduction) for comprehensive guides, best practices, and technical details on implementing MCP servers.\n\n## 🤝 Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributing to this repository.\n\n## 🔒 Security\n\nSee [SECURITY.md](SECURITY.md) for reporting security vulnerabilities.\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 💬 Community\n\n- [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions)\n\n## ⭐ Support\n\nIf you find MCP servers useful, please consider starring the repository and contributing new servers or improvements!\n\n---\n\nManaged by Anthropic, but built together with the community. The Model Context Protocol is open source and we encourage everyone to contribute their own servers and improvements!\n",
      "npm_url": "https://www.npmjs.com/package/mcp-servers",
      "npm_downloads": 854,
      "keywords": [
        "github",
        "git",
        "workflow",
        "git workflow",
        "github projects",
        "workflow management"
      ],
      "category": "git-workflow-management"
    },
    "dillip285--mcp-dev-server": {
      "owner": "dillip285",
      "name": "mcp-dev-server",
      "url": "https://github.com/dillip285/mcp-dev-server",
      "imageUrl": "/freedevtools/mcp/pfp/dillip285.webp",
      "description": "Manage software development projects with complete context awareness, facilitating code execution in secure Docker environments, and integrating Git operations for streamlined project management.",
      "stars": 3,
      "forks": 5,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-06-23T06:17:33Z",
      "readme_content": "# MCP Development Server\n\nA Model Context Protocol (MCP) server that enables Claude to manage software development projects, providing complete project context awareness and handling code execution through Docker environments.\n\n## Features\n\n### Core Infrastructure\n- Project context management\n- File system operations\n- Template-based project creation\n- Git integration\n\n### Requirements\n- Python 3.12 or higher\n- Docker\n- Git\n\n## Installation\n\n```bash\n# Using pip\npip install mcp-dev-server\n\n# Development installation\ngit clone https://github.com/your-org/mcp-dev-server.git\ncd mcp-dev-server\npip install -e .\n```\n\n## Configuration\n\n### Claude Desktop Configuration\n\nAdd to your Claude Desktop configuration file:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"dev\": {\n      \"command\": \"mcp-dev-server\",\n      \"args\": []\n    }\n  }\n}\n```\n\n## Usage\n\nThe server provides several MCP capabilities:\n\n### Resources\n- Project structure and files\n- Build status and artifacts\n- Test results\n- Docker container status\n\n### Tools\n- Project initialization\n- Build operations\n- Test execution\n- Docker commands\n\n### Prompts\n- Project analysis\n- Development suggestions\n- Error diagnosis\n\n## Development\n\n### Setting up development environment\n\n```bash\n# Create virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\npip install -e \".[dev]\"\n```\n\n### Running tests\n\n```bash\npytest tests/\n```\n\n## Contributing\n\nPlease read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.",
      "npm_url": "https://www.npmjs.com/package/mcp-dev-server",
      "npm_downloads": 460,
      "keywords": [
        "git",
        "docker",
        "workflow",
        "git workflow",
        "git operations",
        "integrating git"
      ],
      "category": "git-workflow-management"
    },
    "dvladimirov--MCP": {
      "owner": "dvladimirov",
      "name": "MCP",
      "url": "https://github.com/dvladimirov/MCP",
      "imageUrl": "/freedevtools/mcp/pfp/dvladimirov.webp",
      "description": "Integrates OpenAI services with Git repository analysis and local filesystem operations. Also supports Prometheus for monitoring and provides utilities for seamless development workflows.",
      "stars": 0,
      "forks": 0,
      "license": "GNU General Public License v3.0",
      "language": "Python",
      "updated_at": "2025-04-24T21:09:05Z",
      "readme_content": "# MCP Server with OpenAI, Git, Filesystem, and Prometheus Integration\n\nThis repository contains a Model Control Plane (MCP) server implementation that supports OpenAI services, Git repository analysis, local filesystem operations, and Prometheus integration.\n\n## Project Structure\n\n```\nMCP/\n├── mcp/               # Core MCP library modules\n├── scripts/           # Utility scripts and test tools\n├── prometheus/        # Prometheus configuration\n├── docker-compose.yml # Docker configuration\n├── mcp_server.py      # Main server implementation\n├── mcp_run            # Main runner script (shortcut)\n└── README.md          # This file\n```\n\n## Requirements\n\n- Python 3.8+\n- FastAPI\n- Uvicorn\n- OpenAI SDK\n- GitPython\n- Requests\n- Docker and Docker Compose (for Prometheus features)\n\n## Installation\n\n1. Clone this repository\n2. Install the dependencies:\n\n```bash\npip install -r requirements.txt\n```\n\n## Environment Variables\n\nSet the following environment variables:\n\nFor Azure OpenAI:\n```bash\nexport AZURE_OPENAI_ENDPOINT=\"your-azure-endpoint\"\nexport AZURE_OPENAI_API_KEY=\"your-azure-api-key\"\nexport AZURE_OPENAI_API_VERSION=\"2023-05-15\"\nexport AZURE_DEPLOYMENT_NAME=\"your-deployment-name\"\n```\n\nFor Standard OpenAI:\n```bash\nexport OPENAI_API_KEY=\"your-openai-api-key\"\n# Optional: Specify which models to use\nexport OPENAI_CHAT_MODEL=\"gpt-4o-mini\"  # Default if not specified\nexport OPENAI_COMPLETION_MODEL=\"gpt-3.5-turbo-instruct\"  # Default if not specified\n```\n\nFor Prometheus:\n```bash\nexport PROMETHEUS_URL=\"http://localhost:9090\"  # Default if not specified\n```\n\n## Running the Server\n\nStart the MCP server:\n\n```bash\npython scripts/start_mcp_server.py\n```\n\nOr for more options:\n\n```bash\npython scripts/start_mcp_server.py --host 0.0.0.0 --port 8000 --debug\n```\n\nThe server will be available at http://localhost:8000.\n\n## Unified Testing Tool\n\nWe provide a unified testing script that gives you a user-friendly interface to all testing functionality:\n\n```bash\n./mcp_run\n```\n\nThis interactive script provides:\n- Filesystem tests\n- Git integration tests\n- Memory analysis tools\n- Prometheus tests & memory stress\n- MCP server management\n- Environment setup\n\n## Individual Tests\n\nYou can also run individual tests directly:\n\nTest the OpenAI integration:\n```bash\npython scripts/test_mcp_client.py\n```\n\nTest the Git integration (provide a Git repository URL):\n```bash\npython scripts/test_git_integration.py https://github.com/username/repository\n```\n\nTest the Git diff functionality (analyze requirements compatibility):\n```bash\npython scripts/test_git_diff.py https://github.com/username/repository [commit-sha]\n```\n\nTest the filesystem functionality:\n```bash\npython scripts/test_filesystem.py\n```\n\nTest the langflow integration with MCP:\n```bash\npython scripts/test_langflow_integration.py [OPTIONAL_REPO_URL]\n```\n\nTest the Prometheus integration:\n```bash\npython scripts/test_prometheus.py [prometheus_url]\n```\n\n## Advanced Git Analysis\n\nFor more advanced Git repository analysis with AI recommendations:\n\n```bash\npython scripts/langflow_git_analyzer.py https://github.com/username/repository\n```\n\nYou can also search for specific patterns in the repository:\n\n```bash\npython scripts/langflow_git_analyzer.py https://github.com/username/repository --search \"def main\"\n```\n\nOr analyze the last commit diff with AI insights:\n\n```bash\npython scripts/langflow_git_analyzer.py https://github.com/username/repository --diff\n```\n\n## Memory Analysis Tools\n\nMCP includes several tools for memory monitoring and analysis:\n\n```bash\n# Basic memory diagnostics with AI analysis\npython scripts/ai_memory_diagnostics.py\n\n# Interactive memory dashboard\npython scripts/mcp_memory_dashboard.py\n\n# Memory alerting system\npython scripts/mcp_memory_alerting.py\n```\n\nYou can also simulate memory pressure for testing:\n\n```bash\npython scripts/simulate_memory_pressure.py --target 85 --duration 300\n```\n\n## Prometheus Integration\n\n### Setup\n\n1. Start the Prometheus stack using Docker Compose:\n\n```bash\ndocker compose up -d\n```\n\nThis will start:\n- Prometheus server (accessible at http://localhost:9090)\n- Node Exporter (for host metrics)\n- cAdvisor (for container metrics)\n\n2. For stress testing, you can start the memory stress container:\n\n```bash\ndocker compose up -d --build memory-stress\n```\n\nOr use the container test script:\n```bash\n./scripts/container-memory-test.sh start\n```\n\n### Docker Configuration and Reset Scripts\n\nThis project includes multiple Docker configurations and reset scripts for reliable operation across different environments:\n\n#### Docker Configurations\n- **Standard Configuration** (`docker-compose.yml`): Uses custom Dockerfiles for Prometheus and Langflow to ensure consistent permissions across systems.\n- **Bridge Network Configuration** (`docker-compose.bridge.yml`): Alternative configuration that uses bridge networking for environments where host networking is problematic.\n\n#### Custom Dockerfiles for Solving Permission Issues\nThe project uses custom Dockerfiles for both Prometheus and Langflow to solve common permission issues:\n\n- **Dockerfile.prometheus**: Sets up the Prometheus configuration with proper permissions for the `nobody` user.\n- **Dockerfile.langflow**: Copies the components directory into the container without changing file ownership, allowing Langflow to access the components without permission errors.\n\nThis approach eliminates the need for volume mounts that can lead to permission conflicts across different machines and user configurations.\n\n#### Reset Scripts\n- **All Services Reset** (`reset-all.sh`): Reset all containers with a single command.\n  ```bash\n  # Basic reset (rebuilds containers with existing volumes)\n  ./reset-all.sh\n  \n  # Full reset (removes volumes and rebuilds containers)\n  ./reset-all.sh --clean\n  ```\n\n- **Individual Service Reset**:\n  ```bash\n  # Reset only Prometheus\n  ./reset-prometheus.sh\n  \n  # Reset only Langflow\n  ./reset-langflow.sh\n  ```\n\nThese scripts ensure that the containers are properly configured with correct permissions and the latest code changes.\n\n#### Troubleshooting\nIf you encounter permission issues:\n1. Use the reset scripts to rebuild the containers\n2. Check the logs with `docker compose logs <service_name>`\n3. Make sure any components added to Langflow are included in the Dockerfile.langflow\n\n#### Cross-Machine Deployment\nWhen deploying to a new machine:\n1. Clone the repository\n2. Make reset scripts executable: `chmod +x *.sh`\n3. Run the reset script: `./reset-all.sh`\n\nThe custom Dockerfiles automatically handle all permission issues that might occur across different systems.\n\n### Using Prometheus Client\n\nThe `MCPAIComponent` class includes Prometheus capabilities:\n\n```python\nfrom langflow import MCPAIComponent\n\n# Initialize the client\nmcp = MCPAIComponent(mcp_server_url=\"http://localhost:8000\")\n\n# Instant query (current metric values)\nresult = mcp.prometheus_query(\"up\")\n\n# Range query (metrics over time)\nresult = mcp.prometheus_query_range(\n    query=\"rate(node_cpu_seconds_total{mode='system'}[1m])\",\n    start=\"2023-03-01T00:00:00Z\",\n    end=\"2023-03-01T01:00:00Z\",\n    step=\"15s\"\n)\n\n# Get all labels\nlabels = mcp.prometheus_get_labels()\n\n# Get label values\nvalues = mcp.prometheus_get_label_values(\"job\")\n\n# Get targets\ntargets = mcp.prometheus_get_targets()\n\n# Get alerts\nalerts = mcp.prometheus_get_alerts()\n```\n\n### Useful PromQL Queries\n\n- CPU Usage: `rate(node_cpu_seconds_total{mode!=\"idle\"}[1m])`\n- Memory Usage: `node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes`\n- Disk Usage: `node_filesystem_avail_bytes{mountpoint=\"/\"} / node_filesystem_size_bytes{mountpoint=\"/\"}`\n- Container CPU Usage: `rate(container_cpu_usage_seconds_total[1m])`\n- Container Memory Usage: `container_memory_usage_bytes`\n\n## API Endpoints\n\n### OpenAI Endpoints\n- GET `/v1/models` - List all available models\n- GET `/v1/models/{model_id}` - Get information about a specific model\n- POST `/v1/models/azure-gpt-4/completion` - Generate text completion using Azure OpenAI\n- POST `/v1/models/azure-gpt-4/chat` - Generate chat response using Azure OpenAI\n- POST `/v1/models/openai-gpt-chat/chat` - Generate chat response using OpenAI chat model\n- POST `/v1/models/openai-gpt-completion/completion` - Generate text completion using OpenAI completion model\n\n### Git Integration Endpoints\n- POST `/v1/models/git-analyzer/analyze` - Analyze a Git repository\n- POST `/v1/models/git-analyzer/search` - Search a Git repository for files matching a pattern\n- POST `/v1/models/git-analyzer/diff` - Get the diff of the last commit in a repository\n\n### Filesystem Endpoints\n- POST `/v1/models/filesystem/list` - List contents of a directory\n- POST `/v1/models/filesystem/read` - Read a file's contents\n- POST `/v1/models/filesystem/read-multiple` - Read multiple files at once\n- POST `/v1/models/filesystem/write` - Write content to a file\n- POST `/v1/models/filesystem/edit` - Edit a file with multiple replacements\n- POST `/v1/models/filesystem/mkdir` - Create a directory\n- POST `/v1/models/filesystem/move` - Move a file or directory\n- POST `/v1/models/filesystem/search` - Search for files matching a pattern\n- POST `/v1/models/filesystem/info` - Get information about a file or directory\n\n### Prometheus Endpoints\n- POST `/v1/models/prometheus/query` - Execute an instant query\n- POST `/v1/models/prometheus/query_range` - Execute a range query\n- POST `/v1/models/prometheus/series` - Get series data\n- GET `/v1/models/prometheus/labels` - Get all available labels\n- POST `/v1/models/prometheus/label_values` - Get values for a specific label\n- GET `/v1/models/prometheus/targets` - Get all targets\n- GET `/v1/models/prometheus/rules` - Get all rules\n- GET `/v1/models/prometheus/alerts` - Get all alerts\n\n## Client Usage\n\nYou can use the `MCPAIComponent` in your LangFlow pipelines by providing the MCP server URL:\n\n```python\nfrom langflow import MCPAIComponent\n\nmcp = MCPAIComponent(mcp_server_url=\"http://localhost:8000\")\n\n# List available models\nmodels = mcp.list_models()\nprint(models)\n\n# Generate chat completion with OpenAI model\nchat_response = mcp.chat(\n    model_id=\"openai-gpt-chat\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"Tell me a joke about programming.\"}\n    ],\n    max_tokens=100,\n    temperature=0.7\n)\nprint(chat_response)\n\n# Generate text completion with OpenAI model\ncompletion_response = mcp.completion(\n    model_id=\"openai-gpt-completion\",\n    prompt=\"Write a function in Python to calculate the factorial of a number:\",\n    max_tokens=150,\n    temperature=0.7\n)\nprint(completion_response)\n\n# Analyze a Git repository\nrepo_analysis = mcp.analyze_git_repo(\"https://github.com/username/repository\")\nprint(repo_analysis)\n\n# Search a Git repository\nsearch_results = mcp.search_git_repo(\"https://github.com/username/repository\", \"def main\")\nprint(search_results)\n\n# Get the diff of the last commit\ndiff_info = mcp.get_git_diff(\"https://github.com/username/repository\")\nprint(diff_info)\n\n# List files in the current directory\ndir_contents = mcp.list_directory()\nprint(dir_contents)\n\n# Read a file\nfile_content = mcp.read_file(\"path/to/file.txt\")\nprint(file_content)\n\n# Write to a file\nwrite_result = mcp.write_file(\"path/to/new_file.txt\", \"Hello, world!\")\nprint(write_result)\n\n# Search for files\nsearch_result = mcp.search_files(\"*.py\")\nprint(search_result)\n```\n\n## Using the GitCodeAnalyzer Class\n\nFor more structured Git analysis, you can use the `GitCodeAnalyzer` class:\n\n```python\nfrom langflow_git_analyzer import GitCodeAnalyzer\n\n# Initialize the analyzer\nanalyzer = GitCodeAnalyzer(mcp_server_url=\"http://localhost:8000\")\n\n# Analyze a repository\nanalyzer.analyze_repository(\"https://github.com/username/repository\")\n\n# Get a summary\nsummary = analyzer.get_repository_summary()\nprint(summary)\n\n# Get AI recommendations\nrecommendations = analyzer.get_repository_recommendations()\nprint(recommendations)\n\n# Analyze code patterns\npattern_analysis = analyzer.analyze_code_pattern(\"def process\")\nprint(pattern_analysis)\n\n# Get the last commit diff\ndiff_info = analyzer.get_last_commit_diff()\nprint(diff_info)\n\n# Get a formatted summary of the diff\ndiff_summary = analyzer.get_formatted_diff_summary()\nprint(diff_summary)\n\n# Get AI analysis of the commit changes\ndiff_analysis = analyzer.analyze_commit_diff()\nprint(diff_analysis)\n```\n\n## Troubleshooting\n\n### Prometheus Issues\n1. Verify Prometheus is running: `docker ps | grep prometheus`\n2. Check you can access the Prometheus UI: http://localhost:9090\n3. Verify the MCP server is running and accessible\n4. Check the MCP server logs for errors\n5. Try simple queries first to verify connectivity (e.g., `up` query)\n\n### OpenAI Issues\n1. Verify your API keys are set correctly\n2. Check for rate limiting or quota issues\n3. Verify you're using supported models for your API key\n\n### Git Issues\n1. Ensure the Git repository URL is accessible\n2. Check for authentication issues if using private repositories\n3. Ensure GitPython is installed correctly ",
      "npm_url": "https://www.npmjs.com/package/mcp",
      "npm_downloads": 17624,
      "keywords": [
        "git",
        "workflows",
        "workflow",
        "git workflow",
        "services git",
        "workflow management"
      ],
      "category": "git-workflow-management"
    },
    "dylandaubenspeck--mcp-github-ocr": {
      "owner": "dylandaubenspeck",
      "name": "mcp-github-ocr",
      "url": "https://github.com/dylandaubenspeck/mcp-github-ocr",
      "imageUrl": "/freedevtools/mcp/pfp/dylandaubenspeck.webp",
      "description": "Scans GitHub repositories to provide structured access to their file trees and contents, allowing users to view directories and files easily. Supports secure access to both public and private repositories using user-provided GitHub tokens.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-26T23:21:08Z",
      "readme_content": "# GitHub Repository Scanner MCP\n\nA Cloudflare Worker that scans GitHub repositories and provides a structured view of the repository files, directories, and contents. Perfect for integrating with Smithery and other MCP tools.\n\n## Features\n\n- 📁 Scans any public or private GitHub repository (with appropriate token)\n- 🧠 Creates a structured tree view of repository files and directories\n- 📝 Shows file contents for easy viewing\n- 🚀 Caches repository data for 24 hours to improve performance\n- 🔄 Provides both HTML and JSON output formats\n- 🔒 Secure - users provide their own GitHub tokens\n\n## API Usage\n\n### Web Interface\n\nVisit the deployed worker URL in your browser to access the web interface.\n\n### Programmatic Access\n\nMake a GET request to the `/scan` endpoint with the following parameters:\n\n```\n/scan?url=REPO_URL&token=YOUR_GITHUB_TOKEN&format=json\n```\n\nParameters:\n- `url`: GitHub repository URL (e.g., https://github.com/username/repo)\n- `token`: Your GitHub personal access token with `repo` or `public_repo` scope\n- `format`: (optional) Response format, use `json` for machine-readable output\n\nExample:\n```\n/scan?url=https://github.com/username/repo&token=ghp_xxxx&format=json\n```\n\n## Response Format\n\nThe JSON response includes:\n\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"name\": \"repository-name\",\n    \"owner\": \"owner-name\",\n    \"projectStructure\": {\n      \"files\": [\"root-level-file1\", \"root-level-file2\"],\n      \"directories\": {\n        \"dir1\": {\n          \"files\": [\"file-in-dir1\"],\n          \"directories\": {}\n        }\n      }\n    },\n    \"fileContents\": {\n      \"file-path\": \"file content\",\n      \"dir1/file-in-dir1\": \"content of file in dir1\"\n    },\n    \"timestamp\": 1679000000000\n  },\n  \"cached\": false,\n  \"timestamp\": 1679000000000\n}\n```\n\n## Deployment\n\n### Cloudflare Workers\n\n1. Clone this repository\n2. Install dependencies with `npm install`\n3. Deploy with `npm run deploy`\n\n### Docker\n\nA Dockerfile is included for deployment on platforms that support Docker containers:\n\n```bash\ndocker build -t github-repo-scanner .\ndocker run -p 8787:8787 github-repo-scanner\n```\n\n### Smithery Integration\n\nThis worker is designed to be easily integrated with Smithery. When deploying on Smithery:\n\n1. Fork or clone this repository\n2. Deploy using the Smithery platform\n3. Users will need to provide their own GitHub tokens when using the tool\n\n## GitHub Token\n\nA GitHub Personal Access Token with the following scopes is required:\n- `repo` scope for private repositories\n- `public_repo` scope for public repositories\n\nCreate a token at: https://github.com/settings/tokens\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "repositories",
        "github tokens",
        "github repositories",
        "scans github"
      ],
      "category": "git-workflow-management"
    },
    "fkesheh--code-context-mcp": {
      "owner": "fkesheh",
      "name": "code-context-mcp",
      "url": "https://github.com/fkesheh/code-context-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/fkesheh.webp",
      "description": "Clone local git repositories, process branches and files, generate embeddings for code chunks, and perform semantic searches over code. Utilize local repositories for efficient code context retrieval and improve development workflows.",
      "stars": 14,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-15T09:30:15Z",
      "readme_content": "# Code Context MCP Server\n\nA Model Context Protocol (MCP) server for providing code context from local git repositories. This server allows you to:\n\n1. Clone git repositories locally\n2. Process branches and files\n3. Generate embeddings for code chunks\n4. Perform semantic search over code\n\n## Features\n\n- Uses local git repositories instead of GitHub API\n- Stores data in SQLite database\n- Splits code into semantic chunks\n- Generates embeddings for code chunks using Ollama\n- Provides semantic search over code\n\n## Prerequisites\n\n- Node.js (v16+)\n- Git\n- Ollama with an embedding model\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone <repository-url>\ncd code-context-mcp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Configuration\n\nSet the following environment variables:\n\n- `DATA_DIR`: Directory for SQLite database (default: '~/.codeContextMcp/data')\n- `REPO_CACHE_DIR`: Directory for cloned repositories (default: '~/.codeContextMcp/repos')\n\n### Using Ollama\n\nFor faster and more powerful embeddings, you can use Ollama:\n\n```bash\n# Install Ollama from https://ollama.ai/\n\n# Pull an embedding model (unclemusclez/jina-embeddings-v2-base-code is recommended)\nollama pull unclemusclez/jina-embeddings-v2-base-code\n\n```\n\n## Usage\n\n### Using with Claude Desktop\n\nAdd the following configuration to your Claude Desktop configuration file (`claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"code-context-mcp\": {\n      \"command\": \"/path/to/your/node\",\n      \"args\": [\"/path/to/code-context-mcp/dist/index.js\"]\n    }\n  }\n}\n```\n\n## Tools\n\nThe server provides the following tool:\n\n### queryRepo\n\nClones a repository, processes code, and performs semantic search:\n\n```json\n{\n  \"repoUrl\": \"https://github.com/username/repo.git\",\n  \"branch\": \"main\", // Optional - defaults to repository's default branch\n  \"query\": \"Your search query\",\n  \"keywords\": [\"keyword1\", \"keyword2\"], // Optional - filter results by keywords\n  \"filePatterns\": [\"**/*.ts\", \"src/*.js\"], // Optional - filter files by glob patterns\n  \"excludePatterns\": [\"**/node_modules/**\"], // Optional - exclude files by glob patterns\n  \"limit\": 10 // Optional - number of results to return, default: 10\n}\n```\n\nThe `branch` parameter is optional. If not provided, the tool will automatically use the repository's default branch.\n\nThe `keywords` parameter is optional. If provided, the results will be filtered to only include chunks that contain at least one of the specified keywords (case-insensitive matching).\n\nThe `filePatterns` and `excludePatterns` parameters are optional. They allow you to filter which files are processed and searched using glob patterns (e.g., `**/*.ts` for all TypeScript files).\n\n## Database Schema\n\nThe server uses SQLite with the following schema:\n\n- `repository`: Stores information about repositories\n- `branch`: Stores information about branches\n- `file`: Stores information about files\n- `branch_file_association`: Associates files with branches\n- `file_chunk`: Stores code chunks and their embeddings\n\n# Debugging\n\n## MAC Mx Series - ARM Architecture Issues\n\nWhen installing better-sqlite3 on Mac M-series chips (ARM architecture), if you encounter errors like \"mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')\", you need to ensure the binary matches your architecture. Here's how to resolve this issue:\n\n```bash\n# Check your Node.js architecture\nnode -p \"process.arch\"\n\n# If it shows 'arm64', but you're still having issues, try:\nnpm rebuild better-sqlite3 --build-from-source\n\n# Or for a clean install:\nnpm uninstall better-sqlite3\nexport npm_config_arch=arm64\nexport npm_config_target_arch=arm64\nnpm install better-sqlite3 --build-from-source\n```\n\nIf you're using Rosetta, make sure your entire environment is consistent. Your error shows x86_64 binaries being built but your system needs arm64.\nFor persistent configuration, add to your .zshrc or .bashrc:\n\n```\nexport npm_config_arch=arm64\nexport npm_config_target_arch=arm64\n```\n\n## Testing Ollama Embeddings\n\ncurl http://localhost:11434/api/embed -d '{\"model\":\"unclemusclez/jina-embeddings-v2-base-code\",\"input\":\"Llamas are members of the camelid family\"}'\ncurl http://127.0.01:11434/api/embed -d '{\"model\":\"unclemusclez/jina-embeddings-v2-base-code\",\"input\":\"Llamas are members of the camelid family\"}'\ncurl http://[::1]:11434/api/embed -d '{\"model\":\"unclemusclez/jina-embeddings-v2-base-code\",\"input\":\"Llamas are members of the camelid family\"}'\n\n## License\n\nMIT\n",
      "npm_url": "https://www.npmjs.com/package/code-context-mcp",
      "npm_downloads": 337,
      "keywords": [
        "git",
        "workflows",
        "workflow",
        "git workflow",
        "git repositories",
        "development workflows"
      ],
      "category": "git-workflow-management"
    },
    "garc33--bitbucket-server-mcp-server": {
      "owner": "garc33",
      "name": "bitbucket-server-mcp-server",
      "url": "https://github.com/garc33/bitbucket-server-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/garc33.webp",
      "description": "Manage pull requests on Bitbucket Server, providing tools to interact with the Bitbucket Server API through the MCP protocol.",
      "stars": 36,
      "forks": 26,
      "license": "Apache License 2.0",
      "language": "JavaScript",
      "updated_at": "2025-10-02T21:44:00Z",
      "readme_content": "# Bitbucket Server MCP\n\nMCP (Model Context Protocol) server for Bitbucket Server Pull Request management. This server provides tools and resources to interact with the Bitbucket Server API through the MCP protocol.\n\n[![smithery badge](https://smithery.ai/badge/@garc33/bitbucket-server-mcp-server)](https://smithery.ai/server/@garc33/bitbucket-server-mcp-server)\n<a href=\"https://glama.ai/mcp/servers/jskr5c1zq3\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/jskr5c1zq3/badge\" alt=\"Bitbucket Server MCP server\" /></a>\n\n## ✨ New Features\n\n- **🔍 Advanced Search**: Search code and files across repositories with project/repository filtering using the `search` tool\n- **📄 File Operations**: Read file contents and browse repository directories with `get_file_content` and `browse_repository`\n- **💬 Comment Management**: Extract and filter PR comments with `get_comments` tool\n- **🔍 Project Discovery**: List all accessible Bitbucket projects with `list_projects`\n- **📁 Repository Browsing**: Explore repositories across projects with `list_repositories`\n- **🔧 Flexible Project Support**: Make the default project optional - specify per command or use `BITBUCKET_DEFAULT_PROJECT`\n- **📖 Enhanced Documentation**: Improved README with usage examples and better configuration guidance\n\n## Requirements\n\n- Node.js >= 16\n\n## Installation\n\n### Installing via Smithery\n\nTo install Bitbucket Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@garc33/bitbucket-server-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @garc33/bitbucket-server-mcp-server --client claude\n```\n\n### Manual Installation\n\n```bash\nnpm install\n```\n\n## Build\n\n```bash\nnpm run build\n```\n\n## Features\n\nThe server provides the following tools for comprehensive Bitbucket Server integration:\n\n### `list_projects`\n\n**Discover and explore Bitbucket projects**: Lists all accessible projects with their details. Essential for project discovery and finding the correct project keys to use in other operations.\n\n**Use cases:**\n\n- Find available projects when you don't know the exact project key\n- Explore project structure and permissions\n- Discover new projects you have access to\n\nParameters:\n\n- `limit`: Number of projects to return (default: 25, max: 1000)\n- `start`: Start index for pagination (default: 0)\n\n### `list_repositories`\n\n**Browse and discover repositories**: Explore repositories within specific projects or across all accessible projects. Returns comprehensive repository information including clone URLs and metadata.\n\n**Use cases:**\n- Find repository slugs for other operations\n- Explore codebase structure across projects\n- Discover repositories you have access to\n- Browse a specific project's repositories\n\nParameters:\n\n- `project`: Bitbucket project key (optional, uses BITBUCKET_DEFAULT_PROJECT if not provided)\n- `limit`: Number of repositories to return (default: 25, max: 1000)\n- `start`: Start index for pagination (default: 0)\n\n### `create_pull_request`\n\n**Propose code changes for review**: Creates a new pull request to submit code changes, request reviews, or merge feature branches. Automatically handles branch references and reviewer assignments.\n\n**Use cases:**\n- Submit feature development for review\n- Propose bug fixes\n- Request code integration from feature branches\n- Collaborate on code changes\n\nParameters:\n\n- `project`: Bitbucket project key (optional, uses BITBUCKET_DEFAULT_PROJECT if not provided)\n- `repository` (required): Repository slug\n- `title` (required): Clear, descriptive PR title\n- `description`: Detailed description with context (supports Markdown)\n- `sourceBranch` (required): Source branch containing changes\n- `targetBranch` (required): Target branch for merging\n- `reviewers`: Array of reviewer usernames\n\n### `get_pull_request`\n\n**Comprehensive PR information**: Retrieves detailed pull request information including status, reviewers, commits, and all metadata. Essential for understanding PR state before taking actions.\n\n**Use cases:**\n- Check PR approval status\n- Review PR details and progress\n- Understand changes before merging\n- Monitor PR status\n\nParameters:\n\n- `project`: Bitbucket project key (optional, uses BITBUCKET_DEFAULT_PROJECT if not provided)\n- `repository` (required): Repository slug\n- `prId` (required): Pull request ID\n\n### `merge_pull_request`\n\n**Integrate approved changes**: Merges an approved pull request into the target branch. Supports different merge strategies based on your workflow preferences.\n\n**Use cases:**\n- Complete the code review process\n- Integrate approved features\n- Apply bug fixes to main branches\n- Release code changes\n\nParameters:\n\n- `project`: Bitbucket project key (optional, uses BITBUCKET_DEFAULT_PROJECT if not provided)\n- `repository` (required): Repository slug\n- `prId` (required): Pull request ID\n- `message`: Custom merge commit message\n- `strategy`: Merge strategy:\n  - `merge-commit` (default): Creates merge commit preserving history\n  - `squash`: Combines all commits into one\n  - `fast-forward`: Moves branch pointer without merge commit\n\n### `decline_pull_request`\n\n**Reject unsuitable changes**: Declines a pull request that should not be merged, providing feedback to the author.\n\n**Use cases:**\n- Reject changes that don't meet standards\n- Close PRs that conflict with project direction\n- Request significant rework\n- Prevent unwanted code integration\n\nParameters:\n\n- `project`: Bitbucket project key (optional, uses BITBUCKET_DEFAULT_PROJECT if not provided)\n- `repository` (required): Repository slug\n- `prId` (required): Pull request ID\n- `message`: Reason for declining (helpful for author feedback)\n\n### `add_comment`\n\n**Participate in code review**: Adds comments to pull requests for review feedback, discussions, and collaboration. Supports threaded conversations.\n\n**Use cases:**\n- Provide code review feedback\n- Ask questions about specific changes\n- Suggest improvements\n- Participate in technical discussions\n- Document review decisions\n\nParameters:\n\n- `project`: Bitbucket project key (optional, uses BITBUCKET_DEFAULT_PROJECT if not provided)\n- `repository` (required): Repository slug\n- `prId` (required): Pull request ID\n- `text` (required): Comment content (supports Markdown)\n- `parentId`: Parent comment ID for threaded replies\n\n### `get_diff`\n\n**Analyze code changes**: Retrieves the code differences showing exactly what was added, removed, or modified in the pull request. Supports per-file truncation to manage large diffs effectively.\n\n**Use cases:**\n- Review specific code changes\n- Understand scope of modifications\n- Analyze impact before merging\n- Inspect implementation details\n- Code quality assessment\n- Handle large files without overwhelming output\n\nParameters:\n\n- `project`: Bitbucket project key (optional, uses BITBUCKET_DEFAULT_PROJECT if not provided)\n- `repository` (required): Repository slug\n- `prId` (required): Pull request ID\n- `contextLines`: Context lines around changes (default: 10)\n- `maxLinesPerFile`: Maximum lines to show per file (optional, uses BITBUCKET_DIFF_MAX_LINES_PER_FILE env var if not specified, set to 0 for no limit)\n\n**Large File Handling:**\nWhen a file exceeds the `maxLinesPerFile` limit, it shows:\n- File headers and metadata (always preserved)\n- First 60% of allowed lines from the beginning\n- Truncation message with file statistics\n- Last 40% of allowed lines from the end\n- Clear indication of how to see the complete diff\n\n### `get_reviews`\n\n**Track review progress**: Fetches review history, approval status, and reviewer feedback to understand the review state.\n\n**Use cases:**\n- Check if PR is ready for merging\n- See who has reviewed the changes\n- Understand review feedback\n- Monitor approval requirements\n- Track review progress\n\n### `get_activities`\n\n**Retrieve pull request activities**: Gets the complete activity timeline for a pull request including comments, reviews, commits, and other events.\n\n**Use cases:**\n- Read comment discussions and feedback\n- Review the complete PR timeline\n- Track commits added/removed from PR\n- See approval and review history\n- Understand the full PR lifecycle\n\nParameters:\n- `project`: Bitbucket project key (optional, uses BITBUCKET_DEFAULT_PROJECT if not provided)\n- `repository` (required): Repository slug\n- `prId` (required): Pull request ID\n\n### `get_comments`\n\n**Extract PR comments only**: Filters pull request activities to return only the comments, making it easier to focus on discussion content without reviews or other activities.\n\n**Use cases:**\n- Read PR discussion threads\n- Extract feedback and questions\n- Focus on comment content without noise\n- Analyze conversation flow\n\nParameters:\n- `project`: Bitbucket project key (optional, uses BITBUCKET_DEFAULT_PROJECT if not provided)\n- `repository` (required): Repository slug\n- `prId` (required): Pull request ID\n\n### `search`\n\n**Advanced code and file search**: Search across repositories using the Bitbucket search API with support for project/repository filtering and query optimization. Searches both file contents and filenames. **Note**: Search only works on the default branch of repositories.\n\n**Use cases:**\n- Find specific code patterns across projects\n- Locate files by name or content\n- Search within specific projects or repositories\n- Filter by file extensions\n\nParameters:\n- `query` (required): Search query string\n- `project`: Bitbucket project key to limit search scope\n- `repository`: Repository slug for repository-specific search\n- `type`: Query optimization - \"file\" (wraps query in quotes for exact filename matching) or \"code\" (default search behavior)\n- `limit`: Number of results to return (default: 25, max: 100)\n- `start`: Start index for pagination (default: 0)\n\n**Query syntax examples:**\n- `\"README.md\"` - Find exact filename\n- `config ext:yml` - Find config in YAML files  \n- `function project:MYPROJECT` - Search for \"function\" in specific project\n- `bug fix repo:PROJ/my-repo` - Search in specific repository\n\n### `get_file_content`\n\n**Read file contents with pagination**: Retrieve the content of specific files from repositories with support for large files through pagination.\n\n**Use cases:**\n- Read source code files\n- View configuration files\n- Extract documentation content\n- Inspect specific file versions\n\nParameters:\n- `project`: Bitbucket project key (optional, uses BITBUCKET_DEFAULT_PROJECT if not provided)\n- `repository` (required): Repository slug\n- `filePath` (required): Path to the file in the repository\n- `branch`: Branch or commit hash (optional, defaults to main/master)\n- `limit`: Maximum lines per request (default: 100, max: 1000)\n- `start`: Starting line number for pagination (default: 0)\n\n### `browse_repository`\n\n**Explore repository structure**: Browse files and directories in repositories to understand project organization and locate specific files.\n\n**Use cases:**\n- Explore repository structure\n- Navigate directory trees\n- Find files and folders\n- Understand project organization\n\nParameters:\n- `project`: Bitbucket project key (optional, uses BITBUCKET_DEFAULT_PROJECT if not provided)\n- `repository` (required): Repository slug\n- `path`: Directory path to browse (optional, defaults to root)\n- `branch`: Branch or commit hash (optional, defaults to main/master)\n- `limit`: Maximum items to return (default: 50)\n\n## Usage Examples\n\n### Listing Projects and Repositories\n\n```bash\n# List all accessible projects\nlist_projects\n\n# List repositories in the default project (if BITBUCKET_DEFAULT_PROJECT is set)\nlist_repositories\n\n# List repositories in a specific project\nlist_repositories --project \"MYPROJECT\"\n\n# List projects with pagination\nlist_projects --limit 10 --start 0\n```\n\n### Search and File Operations\n\n```bash\n# Search for README files across all projects\nsearch --query \"README\" --type \"file\" --limit 10\n\n# Search for specific code patterns in a project\nsearch --query \"function getUserData\" --type \"code\" --project \"MYPROJECT\"\n\n# Search with file extension filter\nsearch --query \"config ext:yml\" --project \"MYPROJECT\"\n\n# Browse repository structure\nbrowse_repository --project \"MYPROJECT\" --repository \"my-repo\"\n\n# Browse specific directory\nbrowse_repository --project \"MYPROJECT\" --repository \"my-repo\" --path \"src/components\"\n\n# Read file contents\nget_file_content --project \"MYPROJECT\" --repository \"my-repo\" --filePath \"package.json\" --limit 20\n\n# Read specific lines from a large file\nget_file_content --project \"MYPROJECT\" --repository \"my-repo\" --filePath \"docs/CHANGELOG.md\" --start 100 --limit 50\n```\n\n### Working with Pull Requests\n\n```bash\n# Create a pull request (using default project)\ncreate_pull_request --repository \"my-repo\" --title \"Feature: New functionality\" --sourceBranch \"feature/new-feature\" --targetBranch \"main\"\n\n# Create a pull request with specific project\ncreate_pull_request --project \"MYPROJECT\" --repository \"my-repo\" --title \"Bugfix: Critical issue\" --sourceBranch \"bugfix/critical\" --targetBranch \"develop\" --description \"Fixes critical issue #123\"\n\n# Get pull request details\nget_pull_request --repository \"my-repo\" --prId 123\n\n# Get only comments from a PR (no reviews/commits)\nget_comments --project \"MYPROJECT\" --repository \"my-repo\" --prId 123\n\n# Get full PR activity timeline\nget_activities --repository \"my-repo\" --prId 123\n\n# Merge a pull request with squash strategy\nmerge_pull_request --repository \"my-repo\" --prId 123 --strategy \"squash\" --message \"Feature: New functionality (#123)\"\n```\n\n\n## Dependencies\n\n- `@modelcontextprotocol/sdk` - SDK for MCP protocol implementation\n- `axios` - HTTP client for API requests\n- `winston` - Logging framework\n\n## Configuration\n\nThe server requires configuration in the VSCode MCP settings file. Here's a sample configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"bitbucket\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/bitbucket-server/build/index.js\"],\n      \"env\": {\n        \"BITBUCKET_URL\": \"https://your-bitbucket-server.com\",\n        // Authentication (choose one):\n        // Option 1: Personal Access Token\n        \"BITBUCKET_TOKEN\": \"your-access-token\",\n        // Option 2: Username/Password\n        \"BITBUCKET_USERNAME\": \"your-username\",\n        \"BITBUCKET_PASSWORD\": \"your-password\",\n        // Optional: Default project\n        \"BITBUCKET_DEFAULT_PROJECT\": \"your-default-project\"\n      }\n    }\n  }\n}\n```\n\n### Environment Variables\n\n- `BITBUCKET_URL` (required): Base URL of your Bitbucket Server instance\n- Authentication (one of the following is required):\n  - `BITBUCKET_TOKEN`: Personal access token\n  - `BITBUCKET_USERNAME` and `BITBUCKET_PASSWORD`: Basic authentication credentials\n- `BITBUCKET_DEFAULT_PROJECT` (optional): Default project key to use when not specified in tool calls\n- `BITBUCKET_DIFF_MAX_LINES_PER_FILE` (optional): Default maximum lines to show per file in diffs. Set to prevent large files from overwhelming output. Can be overridden by the `maxLinesPerFile` parameter in `get_diff` calls.\n- `BITBUCKET_READ_ONLY` (optional): Set to `true` to enable read-only mode\n\n**Note**: With the new optional project support, you can now:\n\n- Set `BITBUCKET_DEFAULT_PROJECT` to work with a specific project by default\n- Use `list_projects` to discover available projects\n- Use `list_repositories` to browse repositories across projects\n- Override the default project by specifying the `project` parameter in any tool call\n\n### Read-Only Mode\n\nThe server supports a read-only mode for deployments where you want to prevent any modifications to your Bitbucket repositories. When enabled, only safe, non-modifying operations are available.\n\n**To enable read-only mode**: Set the environment variable `BITBUCKET_READ_ONLY=true`\n\n**Available tools in read-only mode:**\n- `list_projects` - Browse and list projects\n- `list_repositories` - Browse and list repositories  \n- `get_pull_request` - View pull request details\n- `get_diff` - View code changes and diffs\n- `get_reviews` - View review history and status\n- `get_activities` - View pull request timeline\n- `get_comments` - View pull request comments\n- `search` - Search code and files across repositories\n- `get_file_content` - Read file contents\n- `browse_repository` - Browse repository structure\n\n**Disabled tools in read-only mode:**\n- `create_pull_request` - Creating new pull requests\n- `merge_pull_request` - Merging pull requests\n- `decline_pull_request` - Declining pull requests  \n- `add_comment` - Adding comments to pull requests\n\n**Behavior:**\n- When `BITBUCKET_READ_ONLY` is not set or set to any value other than `true`, all tools function normally (backward compatible)\n- When `BITBUCKET_READ_ONLY=true`, write operations are filtered out and will return an error if called\n- This is perfect for production deployments, CI/CD integration, or any scenario where you need safe, read-only Bitbucket access\n\n## Logging\n\nThe server logs all operations to `bitbucket.log` using Winston for debugging and monitoring purposes.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "bitbucket",
        "git",
        "workflow",
        "garc33 bitbucket",
        "bitbucket server",
        "git workflow"
      ],
      "category": "git-workflow-management"
    },
    "geropl--git-mcp-go": {
      "owner": "geropl",
      "name": "git-mcp-go",
      "url": "https://github.com/geropl/git-mcp-go",
      "imageUrl": "/freedevtools/mcp/pfp/geropl.webp",
      "description": "Enable interaction and automation of Git repositories through a standardized MCP interface. Perform operations such as checking status, viewing diffs, committing changes, and managing branches across multiple repositories.",
      "stars": 28,
      "forks": 6,
      "license": "No License",
      "language": "Go",
      "updated_at": "2025-09-11T20:37:29Z",
      "readme_content": "# Git MCP Server (Go)\n\nA Model Context Protocol (MCP) server for Git repository interaction and automation, written in Go. This server provides tools to read, search, and manipulate Git repositories via Large Language Models.\n\n## Features\n\nThis MCP server provides the following Git operations as tools:\n\n- **git_status**: Shows the working tree status\n- **git_diff_unstaged**: Shows changes in the working directory that are not yet staged\n- **git_diff_staged**: Shows changes that are staged for commit\n- **git_diff**: Shows differences between branches or commits\n- **git_commit**: Records changes to the repository\n- **git_add**: Adds file contents to the staging area\n- **git_reset**: Unstages all staged changes\n- **git_log**: Shows the commit logs\n- **git_create_branch**: Creates a new branch from an optional base branch\n- **git_checkout**: Switches branches\n- **git_show**: Shows the contents of a commit\n- **git_init**: Initialize a new Git repository\n- **git_push**: Pushes local commits to a remote repository (requires `--write-access` flag)\n- **git_list_repositories**: Lists all available Git repositories\n\n## Installation\n\n### Prerequisites\n\n- Go 1.18 or higher\n- Git installed on your system\n\n### Download Prebuilt Binaries\n\nYou can download prebuilt binaries for your platform from the [GitHub Releases](https://github.com/geropl/git-mcp-go/releases) page.\n\n### Building from Source\n\n```bash\n# Clone the repository\ngit clone https://github.com/geropl/git-mcp-go.git\ncd git-mcp-go\n\n# Build the server\ngo build -o git-mcp-go .\n```\n\n### Install with `go install`\n\n```bash\ngo install github.com/geropl/git-mcp-go@latest\n```\n\n## Usage\n\n### Command Line Structure\n\nThe Git MCP Server uses a command-line structure with subcommands:\n\n```\ngit-mcp-go\n├── serve [flags] [repository-paths...]\n│   ├── --repository, -r <paths>                  # Repository paths (multiple ways to specify)\n│   ├── --mode <shell|go-git>\n│   ├── --write-access\n│   └── --verbose, -v\n└── setup [flags] [repository-paths...]\n    ├── --repository, -r <paths>                  # Repository paths (multiple ways to specify)\n    ├── --mode <shell|go-git>\n    ├── --write-access\n    ├── --auto-approve <tool-list|allow-read-only|allow-local-only>\n    └── --tool <cline,roo-code>\n```\n\n### Multi-Repository Support\n\nThe Git MCP Server can now monitor and operate on multiple repositories simultaneously. You can specify repositories in several ways:\n\n1. Using the `-r/--repository` flag:\n   - With comma-separated paths: `-r=/path/to/repo1,/path/to/repo2`\n   - With multiple flag instances: `-r=/path/to/repo1 -r=/path/to/repo2`\n2. As positional arguments: `serve /path/to/repo1 /path/to/repo2`\n3. A combination of both approaches\n\nWhen using multiple repositories, the server will default to the first repository for operations where a specific repository is not specified.\n\n### `serve` Command\n\nThe `serve` command starts the Git MCP server:\n\n```bash\n# Run with verbose logging\n./git-mcp-go serve -v /path/to/repo1 /path/to/repo2 /path/to/repo3\n\n# Run with go-git implementation\n./git-mcp-go serve --mode go-git -r=/path/to/repo1,/path/to/repo2\n\n# Enable write access for remote operations\n./git-mcp-go serve -r=/path/to/repo1,/path/to/repo2 --write-access\n```\n\nThe `--mode` flag allows you to choose between two different implementations:\n\n- **shell**: Uses the Git CLI commands via shell execution (default)\n- **go-git**: Uses the go-git library for Git operations where possible\n\nThe `--write-access` flag enables operations that modify remote state (currently only the push operation). By default, this is disabled for safety.\n\n### `setup` Command\n\nThe `setup` command sets up the Git MCP server for use with an AI assistant. It copies itself to `~/mcp-servers/git-mcp-go` and modifies the tools config (cline: `cline_mcp_settings.json`) to use that binary.\n\n```bash\n# Set up for Cline with a single repository\n./git-mcp-go setup -r /path/to/git/repository\n\n# Set up with repositories as arguments\n./git-mcp-go setup /path/to/repo1 /path/to/repo2 /path/to/repo3\n\n# Set up with write access enabled\n./git-mcp-go setup -r=/path/to/repo1,/path/to/repo2 --write-access\n\n# Set up with auto-approval for read-only tools\n./git-mcp-go setup -r=/path/to/repo1,/path/to/repo2 --auto-approve=allow-read-only\n\n# Set up with specific tools auto-approved\n./git-mcp-go setup -r=/path/to/repo1,/path/to/repo2 --auto-approve=git_status,git_log\n\n# Set up with write access and auto-approval for read-only tools\n./git-mcp-go setup -r=/path/to/repo1,/path/to/repo2 --write-access --auto-approve=allow-read-only\n```\n\nThe `--auto-approve` flag allows you to specify which tools should be auto-approved (not require explicit user approval):\n\n- **allow-read-only**: Auto-approve all read-only tools (git_status, git_diff_unstaged, git_diff_staged, git_log, git_show, git_diff)\n- **allow-local-only**: Auto-approve all local-only tools (incl. git_commit, git_add, git_reset, but not git_push)\n- **comma-separated list**: Auto-approve specific tools (e.g., git_status,git_log)\n\n## Repository Management\n\n### The `git_list_repositories` Tool\n\nThis tool lists all available Git repositories that the server is monitoring. It shows:\n\n- The total number of repositories\n- The path to each repository\n- The repository name (derived from the directory name)\n\nExample output:\n\n```\nAvailable repositories (3):\n\n1. repo1 (/path/to/repo1)\n2. repo2 (/path/to/repo2)\n3. another-project (/path/to/another-project)\n```\n\n### Repository Selection\n\nWhen running commands that require a repository path:\n\n1. If a specific `repo_path` is provided in the command, it will be used.\n2. If no `repo_path` is provided and multiple repositories are configured, the first repository will be used as the default.\n3. Each command output will indicate which repository was used for the operation.\n\n## Installation\n\n### Automatic Installation and Configuration\n\nThe easiest way to install and register the Git MCP server with Cline is to use the setup command:\n\n```bash\n# Download linux binary for the latest release\nRELEASE=\"$(curl -s https://api.github.com/repos/geropl/git-mcp-go/releases/latest)\"\nDOWNLOAD_URL=\"$(echo $RELEASE | jq -r '.assets[] | select(.name | contains(\"linux-amd64\")) | .browser_download_url')\"\ncurl -L -o ./git-mcp-go $DOWNLOAD_URL\nchmod +x ./git-mcp-go\n\n# Setup the mcp server with a single repository\n./git-mcp-go setup -r /path/to/git/repository --tool=cline --auto-approve=allow-local-only\n\n# Setup the mcp server with multiple repositories\n./git-mcp-go setup -r=/path/to/repo1,/path/to/repo2 --tool=cline --auto-approve=allow-local-only\n\nrm -f ./git-mcp-go\n```\n\nThe setup command will:\n1. Copy the executable to the Cline MCP directory\n2. Create a registration script that configures Cline to use the Git MCP server\n\n### Manual Configuration\n\nAlternatively, you can manually add this to your `claude_desktop_config.json`:\n\n```json\n\"mcpServers\": {\n  \"git\": {\n    \"command\": \"/path/to/git-mcp-go\",\n    \"args\": [\"serve\", \"-r=/path/to/repo1,/path/to/repo2\", \"--mode\", \"shell\"]\n  }\n}\n```\n\n```json\n\"mcpServers\": {\n  \"git\": {\n    \"command\": \"/path/to/git-mcp-go\",\n    \"args\": [\"serve\", \"-r\", \"/path/to/git/repository\"]\n  }\n}\n```\n\n## Implementation Details\n\nThis server is implemented using:\n\n- [mcp-go](https://github.com/mark3labs/mcp-go): Go SDK for the Model Context Protocol\n- [go-git](https://github.com/go-git/go-git): Pure Go implementation of Git (used for the `go-git` mode)\n\nFor operations not supported by go-git, the server falls back to using the Git CLI.\n\n## Development\n\n### Testing\n\nThe server includes comprehensive tests for all Git operations. The tests are designed to run against both implementation modes:\n\n```bash\n# Run all tests\ngo test ./pkg -v\n\n# Run specific tests\ngo test ./pkg -v -run TestGitOperations/push\n```\n\nThe test suite creates temporary repositories for each test case and verifies that the operations work correctly in both modes.\n\n### Continuous Integration\n\nThis project uses GitHub Actions for continuous integration and deployment:\n\n- Automated tests run on every pull request to the main branch\n- Releases are created when a tag with the format `v*` is pushed\n- Each release includes binaries for multiple platforms:\n  - Linux (amd64, arm64)\n  - macOS (amd64, arm64)\n  - Windows (amd64)\n\nTo create a new release:\n```bash\n# 1. Update the version in pkg/server.go (line ~26)\n# Edit the version string in NewGitServer function\n\n# 2. Commit the version change\ngit add pkg/server.go\ngit commit -m \"Bump version to v1.3.1\"\n\n# 3. Push the commit\ngit push origin main\n\n# 4. Tag the current commit\ngit tag v1.3.1\n\n# 5. Push the tag to GitHub (this triggers the release)\ngit push origin v1.3.1\n```\n\n## License\n\nThis project is licensed under the MIT License.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "workflow",
        "repositories",
        "git workflow",
        "automation git",
        "git mcp"
      ],
      "category": "git-workflow-management"
    },
    "gourav221b--Github-PR-MCP-server": {
      "owner": "gourav221b",
      "name": "Github-PR-MCP-server",
      "url": "https://github.com/gourav221b/Github-PR-MCP-server",
      "imageUrl": "/freedevtools/mcp/pfp/gourav221b.webp",
      "description": "Analyze GitHub Pull Requests efficiently and integrate with applications to retrieve and manipulate PR data using the Model Context Protocol.",
      "stars": 5,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-23T20:27:38Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/gourav221b-github-pr-mcp-server-badge.png)](https://mseep.ai/app/gourav221b-github-pr-mcp-server)\n\n# GitHub PR MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@gourav221b/Github-PR-MCP-server)](https://smithery.ai/server/@gourav221b/Github-PR-MCP-server)\n\n<a href=\"https://glama.ai/mcp/servers/@gourav221b/Github-PR-MCP-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@gourav221b/Github-PR-MCP-server/badge\" alt=\"GitHub PR Server MCP server\" />\n</a>\n\nAn MCP (Model Context Protocol) server built with TypeScript for analyzing GitHub Pull Requests.\n\n## Prerequisites\n\n- [Node.js](https://nodejs.org/) (version 14 or higher)\n- [npm](https://www.npmjs.com/) (comes with Node.js)\n\n## Installation\n### Installing via Smithery\n\nTo install GitHub PR MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@gourav221b/Github-PR-MCP-server):\n\n```bash\nnpx -y @smithery/cli install @gourav221b/Github-PR-MCP-server --client claude\n```\n\n### Manual Installation\n1. **Clone the repository:**\n\n   ```bash\n   git clone https://github.com/gourav221b/Github-PR-MCP-server.git\n   ```\n\n\n2. **Navigate to the project directory:**\n\n   ```bash\n   cd Github-PR-MCP-server\n   ```\n\n\n3. **Install dependencies:**\n\n   ```bash\n   npm install\n   ```\n\n\n4. **Build the project:**\n\n   ```bash\n   npm run build\n   ```\n\n\n5. **Add the path to MCP Client Config:**\n\n   ```bash\n   command: node\n   args: path/to/build/index.js\n   ```\n\n\n## Project Structure\n\n- **`src/`**: Contains the TypeScript source code.\n- **`build/`**: Holds the compiled JavaScript files.\n- **`package.json`**: Lists project dependencies and scripts.\n- **`tsconfig.json`**: TypeScript configuration file.\n\n## Scripts\n\n- **`npm run build`**: Compiles TypeScript files into JavaScript.\n- **`npm start`**: Runs the compiled JavaScript server.\n\n## Contributing\n\nContributions are welcome! Please fork the repository and create a pull request with your changes.\n\n## License\n\nThis project is licensed under the MIT License. \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "github",
        "workflow",
        "github pull",
        "git workflow",
        "analyze github"
      ],
      "category": "git-workflow-management"
    },
    "harshmaur--gitlab-mcp": {
      "owner": "harshmaur",
      "name": "gitlab-mcp",
      "url": "https://github.com/harshmaur/gitlab-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/harshmaur.webp",
      "description": "Integrate GitLab API functionalities seamlessly into applications, enabling interaction with repositories, issue management, and workflow automation.",
      "stars": 1,
      "forks": 1,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-06-05T11:51:35Z",
      "readme_content": "# Better GitLab MCP Server\n\n## @zereight/mcp-gitlab\n\n[![smithery badge](https://smithery.ai/badge/@zereight/gitlab-mcp)](https://smithery.ai/server/@zereight/gitlab-mcp)\n\nGitLab MCP(Model Context Protocol) Server. **Includes bug fixes and improvements over the original GitLab MCP server.**\n\n<a href=\"https://glama.ai/mcp/servers/7jwbk4r6d7\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/7jwbk4r6d7/badge\" alt=\"gitlab mcp MCP server\" /></a>\n\n## Usage\n\n### Using with Claude App, Cline, Roo Code, Cursor\n\nWhen using with the Claude App, you need to set up your API key and URLs directly.\n\n#### npx\n\n```json\n{\n  \"mcpServers\": {\n    \"GitLab communication server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@zereight/mcp-gitlab\"],\n      \"env\": {\n        \"GITLAB_PERSONAL_ACCESS_TOKEN\": \"your_gitlab_token\",\n        \"GITLAB_API_URL\": \"your_gitlab_api_url\",\n        \"GITLAB_READ_ONLY_MODE\": \"false\",\n        \"USE_GITLAB_WIKI\": \"false\", // use wiki api?\n        \"USE_MILESTONE\": \"false\", // use milestone api?\n        \"USE_PIPELINE\": \"false\" // use pipeline api?\n      }\n    }\n  }\n}\n```\n\n#### Docker\n- stdio\n```mcp.json\n{\n  \"mcpServers\": {\n    \"GitLab communication server\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITLAB_PERSONAL_ACCESS_TOKEN\",\n        \"-e\",\n        \"GITLAB_API_URL\",\n        \"-e\",\n        \"GITLAB_READ_ONLY_MODE\",\n        \"-e\",\n        \"USE_GITLAB_WIKI\",\n        \"-e\",\n        \"USE_MILESTONE\",\n        \"-e\",\n        \"USE_PIPELINE\",\n        \"iwakitakuma/gitlab-mcp\"\n      ],\n      \"env\": {\n        \"GITLAB_PERSONAL_ACCESS_TOKEN\": \"your_gitlab_token\",\n        \"GITLAB_API_URL\": \"https://gitlab.com/api/v4\", // Optional, for self-hosted GitLab\n        \"GITLAB_READ_ONLY_MODE\": \"false\",\n        \"USE_GITLAB_WIKI\": \"true\",\n        \"USE_MILESTONE\": \"true\",\n        \"USE_PIPELINE\": \"true\"\n      }\n    }\n  }\n}\n```\n\n- sse\n```shell\ndocker run -i --rm \\\n  -e GITLAB_PERSONAL_ACCESS_TOKEN=your_gitlab_token \\\n  -e GITLAB_API_URL= \"https://gitlab.com/api/v4\"\\\n  -e GITLAB_READ_ONLY_MODE=true \\\n  -e USE_GITLAB_WIKI=true \\\n  -e USE_MILESTONE=true \\\n  -e USE_PIPELINE=true \\\n  -e SSE=true \\\n  -p 3333:3002 \\\n  iwakitakuma/gitlab-mcp\n```\n\n```json\n{\n  \"mcpServers\": {\n    \"GitLab communication server\": {\n      \"url\": \"http://localhost:3333/sse\"\n    }\n  }\n}\n```\n\n#### Docker Image Push\n\n```shell\n$ sh scripts/image_push.sh docker_user_name\n```\n\n### Environment Variables\n\n- `GITLAB_PERSONAL_ACCESS_TOKEN`: Your GitLab personal access token.\n- `GITLAB_API_URL`: Your GitLab API URL. (Default: `https://gitlab.com/api/v4`)\n- `GITLAB_READ_ONLY_MODE`: When set to 'true', restricts the server to only expose read-only operations. Useful for enhanced security or when write access is not needed. Also useful for using with Cursor and it's 40 tool limit.\n- `USE_GITLAB_WIKI`: When set to 'true', enables the wiki-related tools (list_wiki_pages, get_wiki_page, create_wiki_page, update_wiki_page, delete_wiki_page). By default, wiki features are disabled.\n- `USE_MILESTONE`: When set to 'true', enables the milestone-related tools (list_milestones, get_milestone, create_milestone, edit_milestone, delete_milestone, get_milestone_issue, get_milestone_merge_requests, promote_milestone, get_milestone_burndown_events). By default, milestone features are disabled.\n- `USE_PIPELINE`: When set to 'true', enables the pipeline-related tools (list_pipelines, get_pipeline, list_pipeline_jobs, get_pipeline_job, get_pipeline_job_output, create_pipeline, retry_pipeline, cancel_pipeline). By default, pipeline features are disabled.\n\n## Tools 🛠️\n\n+<!-- TOOLS-START -->\n1. `create_or_update_file` - Create or update a single file in a GitLab project\n2. `search_repositories` - Search for GitLab projects\n3. `create_repository` - Create a new GitLab project\n4. `get_file_contents` - Get the contents of a file or directory from a GitLab project\n5. `push_files` - Push multiple files to a GitLab project in a single commit\n6. `create_issue` - Create a new issue in a GitLab project\n7. `create_merge_request` - Create a new merge request in a GitLab project\n8. `fork_repository` - Fork a GitLab project to your account or specified namespace\n9. `create_branch` - Create a new branch in a GitLab project\n10. `get_merge_request` - Get details of a merge request (Either mergeRequestIid or branchName must be provided)\n11. `get_merge_request_diffs` - Get the changes/diffs of a merge request (Either mergeRequestIid or branchName must be provided)\n12. `get_branch_diffs` - Get the changes/diffs between two branches or commits in a GitLab project\n13. `update_merge_request` - Update a merge request (Either mergeRequestIid or branchName must be provided)\n14. `create_note` - Create a new note (comment) to an issue or merge request\n15. `create_merge_request_thread` - Create a new thread on a merge request\n16. `mr_discussions` - List discussion items for a merge request\n17. `update_merge_request_note` - Modify an existing merge request thread note\n18. `create_merge_request_note` - Add a new note to an existing merge request thread\n19. `update_issue_note` - Modify an existing issue thread note\n20. `create_issue_note` - Add a new note to an existing issue thread\n21. `list_issues` - List issues in a GitLab project with filtering options\n22. `get_issue` - Get details of a specific issue in a GitLab project\n23. `update_issue` - Update an issue in a GitLab project\n24. `delete_issue` - Delete an issue from a GitLab project\n25. `list_issue_links` - List all issue links for a specific issue\n26. `list_issue_discussions` - List discussions for an issue in a GitLab project\n27. `get_issue_link` - Get a specific issue link\n28. `create_issue_link` - Create an issue link between two issues\n29. `delete_issue_link` - Delete an issue link\n30. `list_namespaces` - List all namespaces available to the current user\n31. `get_namespace` - Get details of a namespace by ID or path\n32. `verify_namespace` - Verify if a namespace path exists\n33. `get_project` - Get details of a specific project\n34. `list_projects` - List projects accessible by the current user\n35. `list_labels` - List labels for a project\n36. `get_label` - Get a single label from a project\n37. `create_label` - Create a new label in a project\n38. `update_label` - Update an existing label in a project\n39. `delete_label` - Delete a label from a project\n40. `list_group_projects` - List projects in a GitLab group with filtering options\n41. `list_wiki_pages` - List wiki pages in a GitLab project\n42. `get_wiki_page` - Get details of a specific wiki page\n43. `create_wiki_page` - Create a new wiki page in a GitLab project\n44. `update_wiki_page` - Update an existing wiki page in a GitLab project\n45. `delete_wiki_page` - Delete a wiki page from a GitLab project\n46. `get_repository_tree` - Get the repository tree for a GitLab project (list files and directories)\n47. `list_pipelines` - List pipelines in a GitLab project with filtering options\n48. `get_pipeline` - Get details of a specific pipeline in a GitLab project\n49. `list_pipeline_jobs` - List all jobs in a specific pipeline\n50. `get_pipeline_job` - Get details of a GitLab pipeline job number\n51. `get_pipeline_job_output` - Get the output/trace of a GitLab pipeline job number\n52. `create_pipeline` - Create a new pipeline for a branch or tag\n53. `retry_pipeline` - Retry a failed or canceled pipeline\n54. `cancel_pipeline` - Cancel a running pipeline\n55. `list_merge_requests` - List merge requests in a GitLab project with filtering options\n56. `list_milestones` - List milestones in a GitLab project with filtering options\n57. `get_milestone` - Get details of a specific milestone\n58. `create_milestone` - Create a new milestone in a GitLab project\n59. `edit_milestone` - Edit an existing milestone in a GitLab project\n60. `delete_milestone` - Delete a milestone from a GitLab project\n61. `get_milestone_issue` - Get issues associated with a specific milestone\n62. `get_milestone_merge_requests` - Get merge requests associated with a specific milestone\n63. `promote_milestone` - Promote a milestone to the next stage\n64. `get_milestone_burndown_events` - Get burndown events for a specific milestone\n65. `get_users` - Get GitLab user details by usernames\n<!-- TOOLS-END -->\n",
      "npm_url": "https://www.npmjs.com/package/gitlab-mcp",
      "npm_downloads": 2044,
      "keywords": [
        "gitlab",
        "git",
        "workflow",
        "git workflow",
        "gitlab api",
        "integrate gitlab"
      ],
      "category": "git-workflow-management"
    },
    "hetaoBackend--mcp-github-trending": {
      "owner": "hetaoBackend",
      "name": "mcp-github-trending",
      "url": "https://github.com/hetaoBackend/mcp-github-trending",
      "imageUrl": "/freedevtools/mcp/pfp/hetaoBackend.webp",
      "description": "Access trending repositories and developers on GitHub with filtering options for programming language, time period, and spoken language, returning data in JSON format.",
      "stars": 35,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-24T07:49:23Z",
      "readme_content": "# mcp-github-trending MCP Server\n\nA MCP server that provides access to GitHub trending repositories and developers data through a simple API interface.\n\n[![smithery badge](https://smithery.ai/badge/@hetaoBackend/github-trending-mcp-server)](https://smithery.ai/server/@hetaoBackend/github-trending-mcp-server)\n\n## Features\n\n- Access GitHub trending repositories and developers data\n- Filter by programming language\n- Filter by time period (daily, weekly, monthly)\n- Filter by spoken language\n- Returns well-formatted JSON responses\n\n## Tools\n\nThe server implements the following tools:\n\n### get_github_trending_repositories\n\nGets trending repositories from GitHub with the following parameters:\n\n- `language` (optional): Programming language to filter repositories by (e.g. \"python\", \"javascript\")\n- `since` (optional): Time period to filter repositories by (\"daily\", \"weekly\", \"monthly\"). Defaults to \"daily\"\n- `spoken_language` (optional): Spoken language to filter repositories by\n\nExample response:\n```json\n[\n  {\n    \"name\": \"repository-name\",\n    \"fullname\": \"owner/repository-name\",\n    \"url\": \"https://github.com/owner/repository-name\",\n    \"description\": \"Repository description\",\n    \"language\": \"Python\",\n    \"stars\": 1000,\n    \"forks\": 100,\n    \"current_period_stars\": 50\n  }\n]\n```\n\n### get_github_trending_developers\n\nGets trending developers from GitHub with the following parameters:\n\n- `language` (optional): Programming language to filter by (e.g. \"python\", \"javascript\")\n- `since` (optional): Time period to filter by (\"daily\", \"weekly\", \"monthly\"). Defaults to \"daily\"\n\nExample response:\n```json\n[\n  {\n    \"username\": \"developer\",\n    \"name\": \"Developer Name\",\n    \"url\": \"https://github.com/developer\",\n    \"avatar\": \"https://avatars.githubusercontent.com/u/123456\",\n    \"repo\": {\n      \"name\": \"repository-name\",\n      \"description\": \"Repository description\",\n      \"url\": \"https://github.com/developer/repository-name\"\n    }\n  }\n]\n```\n\n## Installation\n\n### Prerequisites\n\n- Python 3.12\n\n### Install Steps\n\nInstall the package:\n```bash\npip install mcp-github-trending\n```\n\n### Claude Desktop Configuration\n\nOn MacOS:\n```bash\n~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\nOn Windows:\n```bash\n%APPDATA%/Claude/claude_desktop_config.json\n```\n\n<details>\n <summary>Development/Unpublished Servers Configuration</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-github-trending\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/mcp-github-trending\",\n        \"run\",\n        \"mcp-github-trending\"\n      ]\n    }\n  }\n}\n```\n</details>\n\n<details>\n <summary>Published Servers Configuration</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-github-trending\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-github-trending\"\n      ]\n    }\n  }\n}\n```\n</details>\n\n## Development\n\n### Building and Publishing\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: Set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nFor the best debugging experience, use the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nLaunch the MCP Inspector via [npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm):\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /path/to/mcp-github-trending run mcp-github-trending\n```\n\nThe Inspector will display a URL that you can access in your browser to begin debugging.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "repositories",
        "github trending",
        "git workflow",
        "trending repositories"
      ],
      "category": "git-workflow-management"
    },
    "highlight-ing--highlight-github-mcp": {
      "owner": "highlight-ing",
      "name": "highlight-github-mcp",
      "url": "https://github.com/highlight-ing/highlight-github-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/highlight-ing.webp",
      "description": "Retrieve diffs from GitHub Pull Requests to analyze code changes. Simplify development workflows by integrating diff retrieval directly into tools.",
      "stars": 2,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-04T16:08:56Z",
      "readme_content": "# GitHub Integration\n\nThe GitHub MCP server provides functionality to extract diffs from Pull Requests.\n\n## Available Tools\n\n### get_diff_pr\nRetrieves the diff content from a GitHub Pull Request.\n\n**Parameters**:\n- `owner`: Repository owner/organization name\n- `repo`: Repository name\n- `pr_number`: Pull Request number\n\n**Returns**: Object containing:\n- `content`: String containing the PR diff\n\n## Authentication\n\n**Required**: Set the GitHub Personal Access Token as an environment variable:\n```bash\nexport GITHUB_TOKEN=<your-github-token>\n```\n\nThe token needs at least `repo` scope permissions to access private repositories. For public repositories, a token with `public_repo` scope is sufficient.\n\n## Error Handling\n\nThe server implements standard error handling:\n- Missing/invalid token returns `ErrorCode.AuthenticationError`\n- Invalid repository details return `ErrorCode.InvalidParams`\n- Non-existent PR returns `ErrorCode.NotFound`\n- Failed diff fetches return formatted error messages\n- Graceful shutdown on SIGINT\n\n## Technical Details\n\n- Built using the Highlight AI MCP SDK\n- Uses GitHub REST API v3\n- Input validation via Zod\n- Runs as a stdio-based MCP server\n- Supports Node.js >=18.0.0\n\n## Limitations\n\n- Rate limits apply based on GitHub API restrictions\n- Large diffs may be truncated according to GitHub API limits\n- Token requires appropriate repository access permissions\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflows",
        "highlight github",
        "diffs github",
        "git workflow"
      ],
      "category": "git-workflow-management"
    },
    "hypermodel-labs--mcp-server-auto-commit": {
      "owner": "hypermodel-labs",
      "name": "mcp-server-auto-commit",
      "url": "https://github.com/hypermodel-labs/mcp-server-auto-commit",
      "imageUrl": "/freedevtools/mcp/pfp/hypermodel-labs.webp",
      "description": "Analyzes Git changes in a repository and generates conventional commit messages using AI. Summarizes modifications, additions, and deletions with detailed insights into the files changed.",
      "stars": 12,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-06-15T08:59:26Z",
      "readme_content": "# MCP Server to Auto commit changes  🛠️\n\nThis implementation provides a Git changes analyzer that generates commit messages using OpenAI's GPT models.\n\n<a href=\"https://glama.ai/mcp/servers/xm2dqoc1s6\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/xm2dqoc1s6/badge\" alt=\"Git Auto Commit Server MCP server\" />\n</a>\n\n## Demo\n\n![](./assets/auto_commit_demo_with_ai.gif)\n\n## Features\n\n- Analyzes git changes in your repository (both staged and unstaged)\n- Generates conventional commit messages using GPT-4o-mini\n- Provides detailed summaries of:\n  - 📝 Modified files\n  - ✨ Newly added files\n  - 🗑️ Deleted files\n  - 📄 Detailed changes (up to 10 lines per file)\n- Built with [@modelcontextprotocol/sdk](https://docs.anthropic.com/en/docs/agents-and-tools/mcp)\n- Adds an auto-commit signature to each commit\n\n## Project Structure\n\n```\nmcp-server-auto-commit/\n├── index.ts        # Main server implementation with git analysis tool\n├── package.json    # Project dependencies\n├── tsconfig.json   # TypeScript configuration\n└── build/         # Compiled JavaScript output\n```\n\n## Prerequisites\n\n- Node.js installed\n- OpenAI API key\n- Git repository to analyze\n- pnpm package manager\n\n## Getting Started\n\n1. Clone this repository:\n```bash\ngit clone https://github.com/jatinsandilya/mcp-server-auto-commit.git\ncd mcp-server-auto-commit\n```\n\n2. Install dependencies:\n```bash\npnpm install\n```\n\n3. Set up your OpenAI API key using one of these methods:\n   - Set as an environment variable: `OPENAI_API_KEY=your-api-key`\n   - Pass as a command line argument: `--key your-api-key`\n   - Add to a `.env` file in the project root\n\n4. Build the project:\n```bash\npnpm run build\n```\n\nThis will generate the `/build/index.js` file - your compiled MCP server script.\n\n## Using with Cursor\n\n1. Go to Cursor Settings -> MCP -> Add new MCP server\n2. Configure your MCP:\n   - Name: git-auto-commit\n   - Type: command\n   - Command: `node ABSOLUTE_PATH_TO_MCP_SERVER/build/index.js --key your-api-key`\n   (Replace `your-api-key` with your actual OpenAI API key if not set in environment)\n\n## Using with Claude Desktop\n\nAdd the following MCP config to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"git-auto-commit\": {\n      \"command\": \"node\",\n      \"args\": [\"ABSOLUTE_PATH_TO_MCP_SERVER/build/index.js\", \"--key\", \"your-api-key\"]\n    }\n  }\n}\n```\n\n## Available Tools\n\n### git-changes-commit-message\n\nThis tool analyzes the current git changes in your repository and generates a commit message using OpenAI's GPT-4o-mini model. It provides:\n\n- List of modified files with status indicators\n- List of newly added files\n- List of deleted files\n- Detailed changes for each file (limited to 10 lines per file for readability)\n- A generated commit message following conventional commits format\n- An auto-commit signature\n\nUsage parameters:\n- `autoCommitPath`: Optional path to analyze specific directory/file. If not provided, uses current working directory.\n\n## Development\n\nThe implementation in `index.ts` showcases:\n\n1. Setting up the MCP server with proper configuration\n2. Handling command line arguments and environment variables\n3. Integrating with OpenAI's API using GPT-4o-mini model\n4. Git operations using child processes\n5. Error handling and fallback mechanisms\n6. Detailed change analysis and formatting\n\nTo modify or extend the implementation:\n\n1. Update the server configuration in `index.ts`:\n```typescript\nconst server = new McpServer({\n  name: \"git-auto-commit\",\n  version: \"0.0.1\",\n});\n```\n\n2. The tool is defined using `server.tool()` with proper parameter validation using Zod schema.\n\n3. Build and test your changes:\n```bash\npnpm run build\n```\n\n## Contributing\n\nFeel free to submit issues and enhancement requests!\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "commit",
        "workflow",
        "git workflow",
        "commit analyzes",
        "analyzes git"
      ],
      "category": "git-workflow-management"
    },
    "idosal--git-mcp": {
      "owner": "idosal",
      "name": "git-mcp",
      "url": "https://github.com/idosal/git-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/idosal.webp",
      "description": "Transform GitHub projects into remote endpoints for AI assistants, enabling access to project documentation through semantic search. Ensure privacy and zero setup for AI-powered documentation retrieval.",
      "stars": 6528,
      "forks": 532,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-03T10:48:41Z",
      "readme_content": "# GitMCP\n\n<p align=\"center\">\n  <img width=\"884\" alt=\"image\" src=\"https://github.com/user-attachments/assets/2bf3e3df-556c-49c6-ab7b-36c279d53bba\" />\n</p>\n\n<p align=\"center\">\n  <a href=\"#-what-is-gitmcp\">What is GitMCP</a> •\n  <a href=\"#-features\">Features</a> •\n  <a href=\"#-getting-started\">Getting Started</a> •\n  <a href=\"#-how-it-works\">How It Works</a> •\n  <a href=\"#-badge\">Badge</a> •\n  <a href=\"#-examples\">Examples</a> •\n  <a href=\"#-faq\">FAQ</a> •\n  <a href=\"#-privacy\">Privacy</a> •\n  <a href=\"#-contributing\">Contributing</a> •\n  <a href=\"#-license\">License</a>\n</p>\n<div align=\"center\">\n\n[![GitMCP](https://img.shields.io/endpoint?url=https://gitmcp.io/badge/idosal/git-mcp)](https://gitmcp.io/idosal/git-mcp)\n[![Twitter Follow](https://img.shields.io/twitter/follow/idosal1?style=social)](https://twitter.com/idosal1)\n[![Twitter Follow](https://img.shields.io/twitter/follow/liadyosef?style=social)](https://twitter.com/liadyosef)\n</div>\n\n<div align=\"center\">\n  <a href=\"https://www.pulsemcp.com/servers/idosal-git-mcp\"><img src=\"https://www.pulsemcp.com/badge/top-pick/idosal-git-mcp\" width=\"400\" alt=\"Pulse MCP Badge\"></a>\n</div>\n\n## 🤔 What is GitMCP?\n**Stop vibe-hallucinating and start vibe-coding!**\n\n[GitMCP](https://gitmcp.io) is a free, open-source, remote [Model Context Protocol (MCP)](https://docs.anthropic.com/en/docs/agents-and-tools/mcp) server that transforms **any** GitHub project (repositories or GitHub pages) into a documentation hub. It enables AI tools like Cursor to access up-to-date documentation and code, even if the LLM has never encountered them, thereby eliminating code hallucinations seamlessly.\n\nGitMCP supports **two flavors** -\n\n*   **Specific Repository (`gitmcp.io/{owner}/{repo}` or `{owner}.gitmcp.io/{repo}`):** Use these when you primarily work with a select number of libraries. This ensures your AI assistant always targets the correct project, enhancing security and relevance by preventing access to unintended repositories.\n*   **Generic Server (`gitmcp.io/docs`):** Use this for maximum flexibility when you need to switch between different repositories frequently. The AI assistant will prompt you (or decide based on context) which repository to access for each request. Be mindful that this relies on correctly identifying the target repository each time.\n\n**With GitMCP:**\n\n*   AI assistants access the *latest* documentation and code directly from the source.\n*   Get accurate API usage and reliable code examples.\n*   Work effectively even with niche, new, or rapidly changing libraries.\n*   Significantly reduced hallucinations and improved code correctness.\n\nFor example, this side-by-side comparison shows the result for the same one-shot prompt in Cursor when creating a [three.js](https://github.com/mrdoob/three.js) scene -\n\nhttps://github.com/user-attachments/assets/fbf1b4a7-f9f0-4c0e-831c-4d64faae2c45\n\n## ✨ Features\n\n- 😎 **Latest Documentation on ANY GitHub Project**: Grant your AI assistant seamless access to the GitHub project's documentation and code. The built-in smart search capabilities help find exactly what the AI needs without using too many tokens!\n- 🧠 **No More Hallucinations**: With GitMCP, your AI assistant can provide accurate and relevant answers to your questions.\n- ☁️ **Zero Setup**: GitMCP runs in the cloud. Simply add the chosen GitMCP URL as an MCP server in your IDE — no downloads, installations, signups, or changes are required.\n- 💬 **Embedded Chat**: Start quickly by chatting directly with the repository's documentation through our in-browser chat!\n- ✅ **Open, Free, and Private**: GitMCP is open-source and completely free to use. It doesn't collect personal information or store queries. You can even self-host it!\n\n<video src=\"https://github.com/user-attachments/assets/2c3afaf9-6c08-436e-9efd-db8710554430\"></video>\n\n## 🚀 Getting Started\n\nUsing GitMCP is easy! Simply follow these steps:\n\n### Step 1: Choose the type of server you want\n\nChoose one of these URL formats depending on what you want to connect to:\n\n- For GitHub repositories: `gitmcp.io/{owner}/{repo}`\n- For GitHub Pages sites: `{owner}.gitmcp.io/{repo}`\n- For a generic tool that supports any repository (dynamic): `gitmcp.io/docs`\n\nReplace `{owner}` with the GitHub username or organization name, and `{repo}` with the repository name.\n\nFor your convenience, you can also use the conversion tool on the landing page to format the GitHub URL into an MCP URL!\n\n### Step 2: Connect your AI assistant\n\nSelect your AI assistant from the options below and follow the configuration instructions:\n\n#### Connecting Cursor\n\nUpdate your Cursor configuration file at `~/.cursor/mcp.json`:\n   ```json\n   {\n     \"mcpServers\": {\n       \"gitmcp\": {\n         \"url\": \"https://gitmcp.io/{owner}/{repo}\"\n       }\n     }\n   }\n   ```\n\n#### Connecting Claude Desktop\n\n1. In Claude Desktop, go to Settings > Developer > Edit Config\n2. Replace the configuration with:\n   ```json\n   {\n     \"mcpServers\": {\n       \"gitmcp\": {\n         \"command\": \"npx\",\n         \"args\": [\n           \"mcp-remote\",\n           \"https://gitmcp.io/{owner}/{repo}\"\n         ]\n       }\n     }\n   }\n   ```\n\n#### Connecting Windsurf\n\nUpdate your Windsurf configuration file at `~/.codeium/windsurf/mcp_config.json`:\n   ```json\n   {\n     \"mcpServers\": {\n       \"gitmcp\": {\n         \"serverUrl\": \"https://gitmcp.io/{owner}/{repo}\"\n       }\n     }\n   }\n   ```\n\n#### Connecting VSCode\n\nUpdate your VSCode configuration file at `.vscode/mcp.json`:\n   ```json\n   {\n     \"servers\": {\n       \"gitmcp\": {\n         \"type\": \"sse\",\n         \"url\": \"https://gitmcp.io/{owner}/{repo}\"\n       }\n     }\n   }\n   ```\n\n#### Connecting Cline\n\nUpdate your Cline configuration file at `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`:\n   ```json\n   {\n     \"mcpServers\": {\n       \"gitmcp\": {\n         \"url\": \"https://gitmcp.io/{owner}/{repo}\",\n         \"disabled\": false,\n         \"autoApprove\": []\n       }\n     }\n   }\n   ```\n\n#### Connecting Highlight AI\n\n1. Open Highlight AI and click the plugins icon (@ symbol) in the sidebar\n2. Click **Installed Plugins** at the top of the sidebar\n3. Select **Custom Plugin**\n4. Click **Add a plugin using a custom SSE URL**\n\nPlugin name: `gitmcp`\nSSE URL: `https://gitmcp.io/{owner}/{repo}`\n\nFor more details on adding custom MCP servers to HighlightAI, refer to [the documentation](https://docs.highlightai.com/learn/developers/plugins/custom-plugins-setup).\n\n#### Connecting Augment Code\n\n1. Open Augment Code settings\n2. Navigate to the MCP section\n3. Add a new MCP server with the following details:\n\nName the MCP server: `git-mcp Docs`\n\nUse this command:\n```bash\nnpx mcp-remote https://gitmcp.io/{owner}/{repo}\n```\n\nOr use the following configuration:\n```json\n{\n  \"mcpServers\": {\n    \"git-mcp Docs\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"https://gitmcp.io/{owner}/{repo}\"\n      ]\n    }\n  }\n}\n```\n\n#### Connecting Msty AI\n1. Open Msty Studio\n2. Go to Tools > Import Tools from JSON Clipboard\n3. Paste the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"git-mcp Docs\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"https://gitmcp.io/{owner}/{repo}\"\n      ]\n    }\n  }\n}\n```\n\nFor more details on configuring MCP servers in Augment Code, visit [the Augment Code documentation](https://docs.augmentcode.com/setup-augment/mcp).\n\n> **Note:** Remember to replace `{owner}` and `{repo}` with the actual GitHub username/organization and repository name. You can also use the dynamic endpoint `https://gitmcp.io/docs` to allow your AI to access any repository on demand.\n\n## ⚙ How It Works\n\nGitMCP connects your AI assistant to GitHub repositories using the Model Context Protocol (MCP), a standard that lets AI tools request additional information from external sources.\n\nWhat happens when you use GitMCP:\n\n1. **You provide the GitMCP URL** to your AI assistant (e.g., `gitmcp.io/microsoft/typescript`). GitMCP exposes tools like documentation fetching, smart search, code search, etc.\n2. **Prompt the AI assistant** on documentation/code-related questions.\n3. **Your AI sends requests** to GitMCP to use its tools (with your approval).\n4. **GitMCP executes the AI's request** and returns the requested data.\n5. **Your AI receives the information** and generates a more accurate, grounded response without hallucinations.\n\n### Supported Documentation\n\nGitMCP currently supports the following documents (in order of priority):\n1. [llms.txt](https://llmstxt.org)\n2. AI-optimized version of the project's documentation\n3. `README.md`/root\n\n## 💡 Examples\n\nHere are some examples of how to use GitMCP with different AI assistants and repositories:\n\n### Example 1: Using Windsurf with a specific repository\n\nFor the GitHub repository `https://github.com/microsoft/playwright-mcp`, add `https://gitmcp.io/microsoft/playwright-mcp` as an MCP server to Windsurf.\n\n**Prompt to Claude:**\n> \"How do I use the Playwright MCP\"\n\nWindsurf will pull the relevant documentation from GitMCP to implement the memory feature correctly.\n\n### Example 2: Using Cursor with a GitHub Pages site\n\nFor the GitHub Pages site `langchain-ai.github.io/langgraph`, add `https://langchain-ai.gitmcp.io/langgraph` as an MCP server to Cursor.\n\n**Prompt to Cursor:**\n> \"Add memory to my LangGraph agent\"\n\nCursor will pull the relevant documentation and code from GitMCP to correctly implement the memory feature.\n\n### Example 3: Using Claude Desktop with the dynamic endpoint\n\nYou don't have to pick specific repositories. The generic `gitmcp.io/docs` endpoint allows AI to pick the GitHub project on the fly!\n\n**Prompt to any AI assistant:**\n> \"I want to learn about the OpenAI Whisper speech recognition model. Explain how it works.\n\nClaude will pull the data from GitMCP and answer the question.\n\n## 🛠️ Tools\n\nGitMCP provides AI assistants with several valuable tools to help them access, understand, and query GitHub repositories.\n\n### `fetch_<repo-name>_documentation`\n\nThis tool gets the primary documentation from a GitHub repository. It works by retrieving relevant documentation (e.g., `llms.txt`). This gives the AI a good overview of what the project is about\n\n**When it's useful:** For general questions about a project's purpose, features, or how to get started\n\n### `search_<repo-name>_documentation`\n\nThis tool lets the AI search through a repository's documentation by providing a specific search query. Instead of loading all the documentation (which could be very large), it uses intelligent search to find just the relevant parts.\n\n**When it's useful:** For specific questions about particular features, functions, or concepts within a project\n\n### `fetch_url_content`\n\nThis tool helps the AI get information from links mentioned in the documentation. It retrieves the content from those links and converts it to a format the AI can easily read.\n\n**When it's useful:** When documentation references external information that would help answer your question\n\n### `search_<repo-name>_code`\n\nThis tool searches through the actual code in the repository using GitHub's code search. It helps AI find specific code examples or implementation details.\n\n**When it's useful:** When you want examples of how something is implemented or need technical details not covered in documentation\n\n> **Note:** When using the dynamic endpoint (`gitmcp.io/docs`), these tools are named slightly differently (`fetch_generic_documentation`, `search_generic_code`, and `search_generic_documentation`) and need additional information about which repository to access.\n\n## 📊 Badge\n\nGitMCP has a badge to your repository's README. It allows users to quickly access your documentation through their IDE or browser (using the embedded chat). It also showcases how many times your documentation has been accessed through GitMCP.\n\nExample (`idosal/git-mcp`): [![GitMCP](https://img.shields.io/endpoint?url=https://gitmcp.io/badge/idosal/git-mcp)](https://gitmcp.io/idosal/git-mcp)\n\n### Adding the Badge to Your Repository\n\nAdd the following to your `README.md`:\n\n```markdown\n[![GitMCP](https://img.shields.io/endpoint?url=https://gitmcp.io/badge/OWNER/REPO)](https://gitmcp.io/OWNER/REPO)\n```\n\nReplace `OWNER` with your GitHub username or organization, and `REPO` with your repository name.\n\n### How We Count Views\n\nIncrement for each tool call on the specific repository.\n\n### Customizing the Badge\n\nYou can customize the badge's appearance with parameters:\n\n| Parameter | Description | Default | Example |\n|-----------|-------------|---------|---------|\n| `color` | Color for the badge value | `aquamarine` | `?color=green` |\n| `label` | Badge label | `GitMCP` | `Documentation`\n\nPlease reach out!\n\n## ❓ FAQ\n\n### What is the Model Context Protocol?\n\nThe [Model Context Protocol](https://modelcontextprotocol.io/introduction) is a standard that allows AI assistants to request and receive additional context from external sources in a structured manner, enhancing their understanding and performance.\n\n### Does GitMCP work with any AI assistant?\n\nYes, GitMCP is compatible with any AI assistant supporting the Model Context Protocol, including tools like Cursor, VSCode, Claude, etc.\n\n### Is GitMCP compatible with all GitHub projects?\n\nAbsolutely! GitMCP works with any public GitHub repository without requiring any modifications. It prioritizes the `llms.txt` file and falls back to `README.md` or other pages if the former is unavailable. Future updates aim to support additional documentation methods and even generate content dynamically.\n\n### Does GitMCP cost money?\n\nNo, GitMCP is a free service to the community with no associated costs.\n\n## 🔒 Privacy\n\nGitMCP is deeply committed to its users' privacy. The service doesn't have access to or store any personally identifiable information as it doesn't require authentication. In addition, it doesn't store any queries sent by the agents. Moreover, as GitMCP is an open-source project, it can be deployed independently in your environment.\n\nGitMCP only accesses content that is already publicly available and only when queried by a user. GitMCP does not automatically scrape repositories. Before accessing any GitHub Pages site, the code checks for `robots.txt` rules and follows the directives set by site owners, allowing them to opt out. Please note that GitMCP doesn't permanently store data regarding the GitHub projects or their content.\n\n## 👥 Contributing\n\nWe welcome contributions, feedback, and ideas! Please review our [contribution](https://github.com/idosal/git-mcp/blob/main/.github/CONTRIBUTING.md) guidelines.\n\n### Local Development Setup\n\n1. **Clone the repository**\n   ```bash\n   git clone https://github.com/idosal/git-mcp.git\n   cd git-mcp\n   ```\n\n2. **Install dependencies**\n   ```bash\n   pnpm install\n   ```\n\n3. **Run locally for development**\n   ```bash\n   npm run dev\n   # or\n   pnpm dev\n   ```\n\n#### Using MCP Inspector for Testing\n\n1. Install the MCP Inspector tool:\n   ```bash\n   npx @modelcontextprotocol/inspector\n   ```\n\n2. In the inspector interface:\n   - Set Transport Type to `SSE`\n   - Enter your GitMCP URL (e.g., `http://localhost:5173/docs`)\n   - Click \"Connect\"\n\n## 📄 License\n\nThis project is licensed under the [Apache License 2.0](LICENSE).\n\n## Disclaimer\n\nGitMCP is provided \"as is\" without warranty of any kind. While we strive to ensure the reliability and security of our service, we are not responsible for any damages or issues that may arise from its use. GitHub projects accessed through GitMCP are subject to their respective owners' terms and conditions. GitMCP is not affiliated with GitHub or any of the mentioned AI tools.\n\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=idosal/git-mcp&type=Timeline)](https://www.star-history.com/#idosal/git-mcp&Timeline)\n",
      "npm_url": "https://www.npmjs.com/package/git-mcp",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "documentation",
        "git workflow",
        "github projects",
        "transform github"
      ],
      "category": "git-workflow-management"
    },
    "jinnersun--skills-introduction-to-github": {
      "owner": "jinnersun",
      "name": "skills-introduction-to-github",
      "url": "https://github.com/jinnersun/skills-introduction-to-github",
      "imageUrl": "/freedevtools/mcp/pfp/jinnersun.webp",
      "description": "Facilitates learning the fundamentals of GitHub, including branching, repository management, and collaborative project workflows. Provides step-by-step guidance and resources for effective navigation of the platform.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2024-12-14T06:15:15Z",
      "readme_content": "<header>\n\n<!--\n  <<< Author notes: Course header >>>\n  Include a 1280×640 image, course title in sentence case, and a concise description in emphasis.\n  In your repository settings: enable template repository, add your 1280×640 social image, auto delete head branches.\n  Add your open source license, GitHub uses MIT license.\n-->\n\n# Introduction to GitHub\n\n_Get started using GitHub in less than an hour._\n\n</header>\n\n<!--\n  <<< Author notes: Step 1 >>>\n  Choose 3-5 steps for your course.\n  The first step is always the hardest, so pick something easy!\n  Link to docs.github.com for further explanations.\n  Encourage users to open new tabs for steps!\n-->\n\n## Step 1: Create a branch\n\n_Welcome to \"Introduction to GitHub\"! :wave:_\n\n**What is GitHub?**: GitHub is a collaboration platform that uses _[Git](https://docs.github.com/get-started/quickstart/github-glossary#git)_ for versioning. GitHub is a popular place to share and contribute to [open-source](https://docs.github.com/get-started/quickstart/github-glossary#open-source) software.\n<br>:tv: [Video: What is GitHub?](https://www.youtube.com/watch?v=pBy1zgt0XPc)\n\n**What is a repository?**: A _[repository](https://docs.github.com/get-started/quickstart/github-glossary#repository)_ is a project containing files and folders. A repository tracks versions of files and folders. For more information, see \"[About repositories](https://docs.github.com/en/repositories/creating-and-managing-repositories/about-repositories)\" from GitHub Docs.\n\n**What is a branch?**: A _[branch](https://docs.github.com/en/get-started/quickstart/github-glossary#branch)_ is a parallel version of your repository. By default, your repository has one branch named `main` and it is considered to be the definitive branch. Creating additional branches allows you to copy the `main` branch of your repository and safely make any changes without disrupting the main project. Many people use branches to work on specific features without affecting any other parts of the project.\n\nBranches allow you to separate your work from the `main` branch. In other words, everyone's work is safe while you contribute. For more information, see \"[About branches](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches)\".\n\n**What is a profile README?**: A _[profile README](https://docs.github.com/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme)_ is essentially an \"About me\" section on your GitHub profile where you can share information about yourself with the community on GitHub.com. GitHub shows your profile README at the top of your profile page. For more information, see \"[Managing your profile README](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme)\".\n\n![profile-readme-example](/images/profile-readme-example.png)\n\n### :keyboard: Activity: Your first branch\n\n1. Open a new browser tab and navigate to your newly made repository. Then, work on the steps in your second tab while you read the instructions in this tab.\n2. Navigate to the **< > Code** tab in the header menu of your repository.\n\n   ![code-tab](/images/code-tab.png)\n\n3. Click on the **main** branch drop-down.\n\n   ![main-branch-dropdown](/images/main-branch-dropdown.png)\n\n4. In the field, name your branch `my-first-branch`. In this case, the name must be `my-first-branch` to trigger the course workflow.\n5. Click **Create branch: my-first-branch** to create your branch.\n\n   ![create-branch-button](/images/create-branch-button.png)\n\n   The branch will automatically switch to the one you have just created.\n   The **main** branch drop-down bar will reflect your new branch and display the new branch name.\n\n6. Wait about 20 seconds then refresh this page (the one you're following instructions from). [GitHub Actions](https://docs.github.com/en/actions) will automatically update to the next step.\n\n<footer>\n\n<!--\n  <<< Author notes: Footer >>>\n  Add a link to get support, GitHub status page, code of conduct, license link.\n-->\n\n---\n\nGet help: [Post in our discussion board](https://github.com/orgs/skills/discussions/categories/introduction-to-github) &bull; [Review the GitHub status page](https://www.githubstatus.com/)\n\n&copy; 2024 GitHub &bull; [Code of Conduct](https://www.contributor-covenant.org/version/2/1/code_of_conduct/code_of_conduct.md) &bull; [MIT License](https://gh.io/mit)\n\n</footer>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflows",
        "git workflow",
        "github facilitates",
        "fundamentals github"
      ],
      "category": "git-workflow-management"
    },
    "joon1251ai--smithery-mcp-server-test": {
      "owner": "joon1251ai",
      "name": "smithery-mcp-server-test",
      "url": "https://github.com/joon1251ai/smithery-mcp-server-test",
      "imageUrl": "/freedevtools/mcp/pfp/joon1251ai.webp",
      "description": "Interact with GitHub repositories, manage issues, and automate workflows while preserving Git history. Support for batch operations and advanced search capabilities enhances repository management.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-04T06:11:52Z",
      "readme_content": "# GitHub MCP Server\n\nMCP Server for the GitHub API, enabling file operations, repository management, search functionality, and more.\n\n### Features\n\n- **Automatic Branch Creation**: When creating/updating files or pushing changes, branches are automatically created if they don't exist\n- **Comprehensive Error Handling**: Clear error messages for common issues\n- **Git History Preservation**: Operations maintain proper Git history without force pushing\n- **Batch Operations**: Support for both single-file and multi-file operations\n- **Advanced Search**: Support for searching code, issues/PRs, and users\n\n\n## Tools\n\n1. `create_or_update_file`\n   - Create or update a single file in a repository\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `path` (string): Path where to create/update the file\n     - `content` (string): Content of the file\n     - `message` (string): Commit message\n     - `branch` (string): Branch to create/update the file in\n     - `sha` (optional string): SHA of file being replaced (for updates)\n   - Returns: File content and commit details\n\n2. `push_files`\n   - Push multiple files in a single commit\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `branch` (string): Branch to push to\n     - `files` (array): Files to push, each with `path` and `content`\n     - `message` (string): Commit message\n   - Returns: Updated branch reference\n\n3. `search_repositories`\n   - Search for GitHub repositories\n   - Inputs:\n     - `query` (string): Search query\n     - `page` (optional number): Page number for pagination\n     - `perPage` (optional number): Results per page (max 100)\n   - Returns: Repository search results\n\n4. `create_repository`\n   - Create a new GitHub repository\n   - Inputs:\n     - `name` (string): Repository name\n     - `description` (optional string): Repository description\n     - `private` (optional boolean): Whether repo should be private\n     - `autoInit` (optional boolean): Initialize with README\n   - Returns: Created repository details\n\n5. `get_file_contents`\n   - Get contents of a file or directory\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `path` (string): Path to file/directory\n     - `branch` (optional string): Branch to get contents from\n   - Returns: File/directory contents\n\n6. `create_issue`\n   - Create a new issue\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `title` (string): Issue title\n     - `body` (optional string): Issue description\n     - `assignees` (optional string[]): Usernames to assign\n     - `labels` (optional string[]): Labels to add\n     - `milestone` (optional number): Milestone number\n   - Returns: Created issue details\n\n7. `create_pull_request`\n   - Create a new pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `title` (string): PR title\n     - `body` (optional string): PR description\n     - `head` (string): Branch containing changes\n     - `base` (string): Branch to merge into\n     - `draft` (optional boolean): Create as draft PR\n     - `maintainer_can_modify` (optional boolean): Allow maintainer edits\n   - Returns: Created pull request details\n\n8. `fork_repository`\n   - Fork a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `organization` (optional string): Organization to fork to\n   - Returns: Forked repository details\n\n9. `create_branch`\n   - Create a new branch\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `branch` (string): Name for new branch\n     - `from_branch` (optional string): Source branch (defaults to repo default)\n   - Returns: Created branch reference\n\n10. `list_issues`\n    - List and filter repository issues\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `state` (optional string): Filter by state ('open', 'closed', 'all')\n      - `labels` (optional string[]): Filter by labels\n      - `sort` (optional string): Sort by ('created', 'updated', 'comments')\n      - `direction` (optional string): Sort direction ('asc', 'desc')\n      - `since` (optional string): Filter by date (ISO 8601 timestamp)\n      - `page` (optional number): Page number\n      - `per_page` (optional number): Results per page\n    - Returns: Array of issue details\n\n11. `update_issue`\n    - Update an existing issue\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `issue_number` (number): Issue number to update\n      - `title` (optional string): New title\n      - `body` (optional string): New description\n      - `state` (optional string): New state ('open' or 'closed')\n      - `labels` (optional string[]): New labels\n      - `assignees` (optional string[]): New assignees\n      - `milestone` (optional number): New milestone number\n    - Returns: Updated issue details\n\n12. `add_issue_comment`\n    - Add a comment to an issue\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `issue_number` (number): Issue number to comment on\n      - `body` (string): Comment text\n    - Returns: Created comment details\n\n13. `search_code`\n    - Search for code across GitHub repositories\n    - Inputs:\n      - `q` (string): Search query using GitHub code search syntax\n      - `sort` (optional string): Sort field ('indexed' only)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: Code search results with repository context\n\n14. `search_issues`\n    - Search for issues and pull requests\n    - Inputs:\n      - `q` (string): Search query using GitHub issues search syntax\n      - `sort` (optional string): Sort field (comments, reactions, created, etc.)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: Issue and pull request search results\n\n15. `search_users`\n    - Search for GitHub users\n    - Inputs:\n      - `q` (string): Search query using GitHub users search syntax\n      - `sort` (optional string): Sort field (followers, repositories, joined)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: User search results\n\n16. `list_commits`\n   - Gets commits of a branch in a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `page` (optional string): page number\n     - `per_page` (optional string): number of record per page\n     - `sha` (optional string): branch name\n   - Returns: List of commits\n\n17. `get_issue`\n   - Gets the contents of an issue within a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `issue_number` (number): Issue number to retrieve\n   - Returns: Github Issue object & details\n\n18. `get_pull_request`\n   - Get details of a specific pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Pull request details including diff and review status\n\n19. `list_pull_requests`\n   - List and filter repository pull requests\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `state` (optional string): Filter by state ('open', 'closed', 'all')\n     - `head` (optional string): Filter by head user/org and branch\n     - `base` (optional string): Filter by base branch\n     - `sort` (optional string): Sort by ('created', 'updated', 'popularity', 'long-running')\n     - `direction` (optional string): Sort direction ('asc', 'desc')\n     - `per_page` (optional number): Results per page (max 100)\n     - `page` (optional number): Page number\n   - Returns: Array of pull request details\n\n20. `create_pull_request_review`\n   - Create a review on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `body` (string): Review comment text\n     - `event` (string): Review action ('APPROVE', 'REQUEST_CHANGES', 'COMMENT')\n     - `commit_id` (optional string): SHA of commit to review\n     - `comments` (optional array): Line-specific comments, each with:\n       - `path` (string): File path\n       - `position` (number): Line position in diff\n       - `body` (string): Comment text\n   - Returns: Created review details\n\n21. `merge_pull_request`\n   - Merge a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `commit_title` (optional string): Title for merge commit\n     - `commit_message` (optional string): Extra detail for merge commit\n     - `merge_method` (optional string): Merge method ('merge', 'squash', 'rebase')\n   - Returns: Merge result details\n\n22. `get_pull_request_files`\n   - Get the list of files changed in a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of changed files with patch and status details\n\n23. `get_pull_request_status`\n   - Get the combined status of all status checks for a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Combined status check results and individual check details\n\n24. `update_pull_request_branch`\n   - Update a pull request branch with the latest changes from the base branch (equivalent to GitHub's \"Update branch\" button)\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `expected_head_sha` (optional string): The expected SHA of the pull request's HEAD ref\n   - Returns: Success message when branch is updated\n\n25. `get_pull_request_comments`\n   - Get the review comments on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of pull request review comments with details like the comment text, author, and location in the diff\n\n26. `get_pull_request_reviews`\n   - Get the reviews on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of pull request reviews with details like the review state (APPROVED, CHANGES_REQUESTED, etc.), reviewer, and review body\n\n## Search Query Syntax\n\n### Code Search\n- `language:javascript`: Search by programming language\n- `repo:owner/name`: Search in specific repository\n- `path:app/src`: Search in specific path\n- `extension:js`: Search by file extension\n- Example: `q: \"import express\" language:typescript path:src/`\n\n### Issues Search\n- `is:issue` or `is:pr`: Filter by type\n- `is:open` or `is:closed`: Filter by state\n- `label:bug`: Search by label\n- `author:username`: Search by author\n- Example: `q: \"memory leak\" is:issue is:open label:bug`\n\n### Users Search\n- `type:user` or `type:org`: Filter by account type\n- `followers:>1000`: Filter by followers\n- `location:London`: Search by location\n- Example: `q: \"fullstack developer\" location:London followers:>100`\n\nFor detailed search syntax, see [GitHub's searching documentation](https://docs.github.com/en/search-github/searching-on-github).\n\n## Setup\n\n### Personal Access Token\n[Create a GitHub Personal Access Token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens) with appropriate permissions:\n   - Go to [Personal access tokens](https://github.com/settings/tokens) (in GitHub Settings > Developer settings)\n   - Select which repositories you'd like this token to have access to (Public, All, or Select)\n   - Create a token with the `repo` scope (\"Full control of private repositories\")\n     - Alternatively, if working only with public repositories, select only the `public_repo` scope\n   - Copy the generated token\n\n### Usage with Claude Desktop\nTo use this with Claude Desktop, add the following to your `claude_desktop_config.json`:\n\n#### Docker\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"mcp/github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n## Build\n\nDocker build:\n\n```bash\ndocker build -t mcp/github -f src/github/Dockerfile .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "github",
        "repositories",
        "git workflow",
        "git history",
        "preserving git"
      ],
      "category": "git-workflow-management"
    },
    "kazuph--mcp-github-pera1": {
      "owner": "kazuph",
      "name": "mcp-github-pera1",
      "url": "https://github.com/kazuph/mcp-github-pera1",
      "imageUrl": "/freedevtools/mcp/pfp/kazuph.webp",
      "description": "Connects GitHub code to Claude.ai for context enhancement through code extraction using the Pera1 service.",
      "stars": 6,
      "forks": 7,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-25T02:49:55Z",
      "readme_content": "# GitHub MCP Server for Pera1\n\nA Model Context Protocol server that connects GitHub code to Claude.ai. This server utilizes the Pera1 service to extract code from GitHub repositories and provide better context to Claude.\n\n<a href=\"https://glama.ai/mcp/servers/m2sd6ew3wf\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/m2sd6ew3wf/badge\" alt=\"@kazuph/mcp-github-pera1 MCP server\" /></a>\n\n### Setup\n\nAdd the following to your MCP config file (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@kazuph/mcp-github-pera1\"]\n    }\n  }\n}\n```\n\nNow you can ask Claude about GitHub code repositories.\n\n### Parameters\n\n- `url`: GitHub repository URL (required)\n- `dir`: Filter files by directory paths (comma-separated)\n- `ext`: Filter files by extensions (comma-separated)\n- `mode`: Display mode (e.g., `tree` shows directory structure and README files only)\n- `branch`: Specify the branch to fetch from\n- `file`: Specify a single file to retrieve\n\n### Usage Examples\n\nYou can ask Claude questions like:\n```\nTell me about the implementation of GitHub repository https://github.com/username/repository\n```\n\nFor specific directories:\n```\nExplain the components in https://github.com/username/repository?dir=src/components\n```\n\nFor a specific file:\n```\nShow me the Button component from https://github.com/username/repository?file=src/components/Button.tsx\n```\n\nFor directory structure with README files only:\n```\nShow me the structure of https://github.com/username/repository?mode=tree\n```\n\nFor a specific branch:\n```\nAnalyze the develop branch of https://github.com/username/repository?branch=develop\n```\n\n### License\n\nMIT\n\n### Author\n\nkazuph (https://x.com/kazuph)\n",
      "npm_url": "https://www.npmjs.com/package/@kazuph/mcp-github-pera1",
      "npm_downloads": 4716,
      "keywords": [
        "github",
        "git",
        "workflow",
        "github code",
        "mcp github",
        "github pera1"
      ],
      "category": "git-workflow-management"
    },
    "kimsehwan90--code-review": {
      "owner": "kimsehwan90",
      "name": "code-review",
      "url": "https://github.com/kimsehwan90/code-review",
      "imageUrl": "/freedevtools/mcp/pfp/kimsehwan90.webp",
      "description": "Facilitates code review requests by allowing users to submit their code for evaluation. Users can manage the review process through a structured repository system.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2019-04-19T01:42:26Z",
      "readme_content": "# Code-Review\n\n코드 리뷰 요청을 받기 위한 저장소입니다.\n\n## 리뷰 요청하는 방법\n1. 이 저장소를 개인 저장소로 `Fork` 합니다.\n2. projects 디렉토리 아래에 새로운 디렉토리를 만들고 리뷰 받고 싶은 코드를 추가해주세요.\n3. 변경사항을 커밋하고 PR로 올려주세요.\n4. 질문이 있다면 README 파일에 정리해서 올려주세요.\n",
      "npm_url": "https://www.npmjs.com/package/code-review",
      "npm_downloads": 256,
      "keywords": [
        "git",
        "workflow",
        "code",
        "git workflow",
        "code review",
        "review process"
      ],
      "category": "git-workflow-management"
    },
    "kirayhz007--GitHub-Chinese-Top-Charts": {
      "owner": "kirayhz007",
      "name": "GitHub-Chinese-Top-Charts",
      "url": "https://github.com/kirayhz007/GitHub-Chinese-Top-Charts",
      "imageUrl": "/freedevtools/mcp/pfp/kirayhz007.webp",
      "description": "A platform for discovering popular Chinese open-source projects on GitHub, facilitating the absorption of valuable experiences and results without language barriers. It provides a ranking of the most favored Chinese repositories to enhance development efficiency.",
      "stars": 0,
      "forks": 0,
      "license": "Other",
      "language": "",
      "updated_at": "2023-01-01T00:58:36Z",
      "readme_content": "<p align=\"center\">\n    <img width=\"200\" src=\"content/media/repo_logo.svg\">\n</p>\n\n<h1 align=\"center\">GitHub中文排行榜</h1>\n\n<div align=\"center\">\n    「帮助你发现优秀中文项目，可以无语言障碍地、更高效地吸收优秀经验成果」\n</div>\n\n<br />\n\n<div align=\"center\">\n    <p><sub>↓ -- 项目说明 -- ↓</sub></p>\n    <a href=\"content/docs/features.md\">特色亮点</a> •\n    <a href=\"content/docs/definition_of_Chinese_repo.md\">中文定义</a> •\n    <a href=\"content/docs/inclusion_rules.md\">收录规则</a> •\n    <a href=\"content/docs/milestone.md\">重要更新</a> •\n    <a href=\"content/docs/feedback.md\">问题反馈</a> •\n    <a href=\"LICENSE.md\">许可协议</a>\n</div>\n\n<br />\n\n<div align=\"center\">\n    <p><sub>↓ -- 进阶之路 -- ↓</sub></p>\n    中文项目已通关？通往更广阔世界的路：<a href=\"https://github.com/kon9chunkit/GitHub-English-Top-Charts\">GitHub英文排行榜</a>\n</div>\n\n<br />\n\n<div align=\"center\">\n    <p><sub>↓ -- 内容目录 -- ↓</sub></p>\n    <table>\n        <tr>\n            <td colspan=\"2\" align=\"center\">中文总榜</td>\n            <td colspan=\"2\" align=\"center\">中文增速榜</td>  \n            <td colspan=\"2\" align=\"center\">中文新秀榜</td>\n        </tr>\n        <tr>\n            <td align=\"center\">软件类</td>\n            <td align=\"center\">资料类</td>\n            <td align=\"center\">软件类</td>\n            <td align=\"center\">资料类</td>\n            <td align=\"center\">软件类</td> \n            <td align=\"center\">资料类</td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/All-Language.md\">All Language</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/All-Language.md\">All Language</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/All-Language.md\">All Language</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/All-Language.md\">All Language</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/All-Language.md\">All Language</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/All-Language.md\">All Language</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/JavaScript.md\">JavaScript</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/JavaScript.md\">JavaScript</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/JavaScript.md\">JavaScript</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/JavaScript.md\">JavaScript</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/JavaScript.md\">JavaScript</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/JavaScript.md\">JavaScript</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/Java.md\">Java</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/Java.md\">Java</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/Java.md\">Java</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/Java.md\">Java</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/Java.md\">Java</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/Java.md\">Java</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/Python.md\">Python</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/Python.md\">Python</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/Python.md\">Python</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/Python.md\">Python</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/Python.md\">Python</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/Python.md\">Python</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/Go.md\">Go</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/Go.md\">Go</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/Go.md\">Go</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/Go.md\">Go</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/Go.md\">Go</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/Go.md\">Go</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/TypeScript.md\">TypeScript</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/TypeScript.md\">TypeScript</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/TypeScript.md\">TypeScript</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/TypeScript.md\">TypeScript</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/TypeScript.md\">TypeScript</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/TypeScript.md\">TypeScript</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/Vue.md\">Vue</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/Vue.md\">Vue</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/Vue.md\">Vue</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/Vue.md\">Vue</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/Vue.md\">Vue</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/Vue.md\">Vue</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/CPP.md\">C++</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/CPP.md\">C++</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/CPP.md\">C++</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/CPP.md\">C++</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/CPP.md\">C++</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/CPP.md\">C++</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/C.md\">C</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/C.md\">C</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/C.md\">C</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/C.md\">C</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/C.md\">C</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/C.md\">C</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/CSHARP.md\">C#</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/CSHARP.md\">C#</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/CSHARP.md\">C#</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/CSHARP.md\">C#</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/CSHARP.md\">C#</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/CSHARP.md\">C#</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/PHP.md\">PHP</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/PHP.md\">PHP</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/PHP.md\">PHP</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/PHP.md\">PHP</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/PHP.md\">PHP</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/PHP.md\">PHP</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/HTML.md\">HTML</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/HTML.md\">HTML</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/HTML.md\">HTML</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/HTML.md\">HTML</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/HTML.md\">HTML</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/HTML.md\">HTML</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/Swift.md\">Swift</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/Swift.md\">Swift</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/Swift.md\">Swift</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/Swift.md\">Swift</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/Swift.md\">Swift</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/Swift.md\">Swift</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/Kotlin.md\">Kotlin</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/Kotlin.md\">Kotlin</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/Kotlin.md\">Kotlin</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/Kotlin.md\">Kotlin</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/Kotlin.md\">Kotlin</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/Kotlin.md\">Kotlin</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/Objective-C.md\">Objective-C</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/Objective-C.md\">Objective-C</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/Objective-C.md\">Objective-C</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/Objective-C.md\">Objective-C</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/Objective-C.md\">Objective-C</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/Objective-C.md\">Objective-C</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/CSS.md\">CSS</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/CSS.md\">CSS</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/CSS.md\">CSS</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/CSS.md\">CSS</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/CSS.md\">CSS</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/CSS.md\">CSS</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/Shell.md\">Shell</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/Shell.md\">Shell</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/Shell.md\">Shell</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/Shell.md\">Shell</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/Shell.md\">Shell</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/Shell.md\">Shell</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/Dart.md\">Dart</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/Dart.md\">Dart</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/Dart.md\">Dart</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/Dart.md\">Dart</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/Dart.md\">Dart</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/Dart.md\">Dart</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/Rust.md\">Rust</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/Rust.md\">Rust</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/Rust.md\">Rust</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/Rust.md\">Rust</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/Rust.md\">Rust</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/Rust.md\">Rust</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/Jupyter-Notebook.md\">Jupyter Notebook</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/Jupyter-Notebook.md\">Jupyter Notebook</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/Jupyter-Notebook.md\">Jupyter Notebook</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/Jupyter-Notebook.md\">Jupyter Notebook</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/Jupyter-Notebook.md\">Jupyter Notebook</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/Jupyter-Notebook.md\">Jupyter Notebook</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/Assembly.md\">Assembly</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/Assembly.md\">Assembly</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/Assembly.md\">Assembly</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/Assembly.md\">Assembly</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/Assembly.md\">Assembly</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/Assembly.md\">Assembly</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/Vim-script.md\">Vim script</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/Vim-script.md\">Vim script</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/Vim-script.md\">Vim script</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/Vim-script.md\">Vim script</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/Vim-script.md\">Vim script</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/Vim-script.md\">Vim script</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/Ruby.md\">Ruby</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/Ruby.md\">Ruby</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/Ruby.md\">Ruby</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/Ruby.md\">Ruby</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/Ruby.md\">Ruby</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/Ruby.md\">Ruby</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/Lua.md\">Lua</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/Lua.md\">Lua</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/Lua.md\">Lua</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/Lua.md\">Lua</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/Lua.md\">Lua</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/Lua.md\">Lua</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/TeX.md\">TeX</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/TeX.md\">TeX</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/TeX.md\">TeX</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/TeX.md\">TeX</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/TeX.md\">TeX</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/TeX.md\">TeX</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/Groovy.md\">Groovy</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/Groovy.md\">Groovy</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/Groovy.md\">Groovy</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/Groovy.md\">Groovy</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/Groovy.md\">Groovy</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/Groovy.md\">Groovy</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/Perl.md\">Perl</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/Perl.md\">Perl</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/Perl.md\">Perl</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/Perl.md\">Perl</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/Perl.md\">Perl</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/Perl.md\">Perl</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/MATLAB.md\">MATLAB</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/MATLAB.md\">MATLAB</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/MATLAB.md\">MATLAB</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/MATLAB.md\">MATLAB</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/MATLAB.md\">MATLAB</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/MATLAB.md\">MATLAB</a></td>\n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/Pascal.md\">Pascal</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/Pascal.md\">Pascal</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/Pascal.md\">Pascal</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/Pascal.md\">Pascal</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/Pascal.md\">Pascal</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/Pascal.md\">Pascal</a></td> \n        </tr>\n        <tr>\n            <td align=\"center\"><a href=\"content/charts/overall/software/R.md\">R</a></td> \n            <td align=\"center\"><a href=\"content/charts/overall/knowledge/R.md\">R</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/software/R.md\">R</a></td> \n            <td align=\"center\"><a href=\"content/charts/growth/knowledge/R.md\">R</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/software/R.md\">R</a></td> \n            <td align=\"center\"><a href=\"content/charts/new_repo/knowledge/R.md\">R</a></td> \n        </tr>\n    </table>\n</div>\n\n<div align=\"center\">\n    <p><sub>↓ -- 感谢读者 -- ↓</sub></p>\n    榜单持续更新，如有帮助请加星收藏，方便后续浏览，感谢你的支持！\n</div>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "repositories",
        "github chinese",
        "git workflow",
        "projects github"
      ],
      "category": "git-workflow-management"
    },
    "kjozsa--git-mcp": {
      "owner": "kjozsa",
      "name": "git-mcp",
      "url": "https://github.com/kjozsa/git-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kjozsa.webp",
      "description": "Manage Git operations on local repositories, including listing repositories, fetching tags, and tracking commits. Streamline version control workflows with essential Git functionalities.",
      "stars": 3,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-05-19T00:59:21Z",
      "readme_content": "# Git MCP\n[![smithery badge](https://smithery.ai/badge/@kjozsa/git-mcp)](https://smithery.ai/server/@kjozsa/git-mcp)\nMCP server for managing Git operations on local repositories.\n\n## Installation\n### Installing via Smithery\n\nTo install Git MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kjozsa/git-mcp):\n\n```bash\nnpx -y @smithery/cli install @kjozsa/git-mcp --client claude\n```\n\n### Installing Manually\n```bash\nuvx install git-mcp\n```\n\n## Configuration\nAdd the MCP server using the following JSON configuration snippet:\n\n```json\n{\n  \"mcpServers\": {\n    \"git-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\"git-mcp\"],\n      \"env\": {\n        \"GIT_REPOS_PATH\": \"/path/to/your/git/repositories\"\n      }\n    }\n  }\n}\n```\n\n## Features and Usage\n\n### Environment Variables\n- `GIT_REPOS_PATH`: Path to the directory containing your Git repositories (required)\n\nYou can set this in your environment or create a `.env` file in the directory where you run the server.\n\n### Available Methods\n\n#### list_repositories\nLists all Git repositories in the configured path.\n- Parameters: None\n- Returns: List of repository names\n\n#### get_last_git_tag\nFinds the last Git tag in the specified repository.\n- Parameters: `repo_name` (Name of the Git repository)\n- Returns: Dictionary with `version` (tag name) and `date` (tag creation date)\n\n#### list_commits_since_last_tag\nLists commit messages between the last Git tag and HEAD.\n- Parameters: \n  - `repo_name`: Name of the Git repository\n  - `max_count` (optional): Maximum number of commits to return\n- Returns: List of dictionaries with `hash`, `author`, `date`, and `message`\n\n#### create_git_tag\nCreates a new git tag in the specified repository.\n- Parameters: \n  - `repo_name`: Name of the git repository\n  - `tag_name`: Name of the tag to create\n  - `message` (optional): Message for annotated tag (if not provided, creates a lightweight tag)\n- Returns: Dictionary with `status`, `version` (tag name), `date` (tag creation date), and `type` (annotated or lightweight)\n\n#### push_git_tag\nPushes an existing git tag to the default remote repository.\n- Parameters: \n  - `repo_name`: Name of the git repository\n  - `tag_name`: Name of the tag to push\n- Returns: Dictionary with `status`, `remote` (name of the remote), `tag` (name of the tag), and `message` (success message)\n\n#### refresh_repository\nRefreshes a repository by checking out the main branch (or master as fallback) and pulling from all remotes.\n- Parameters:\n  - `repo_name`: Name of the git repository\n- Returns: Dictionary with `status`, `repository`, `branch`, and `pull_results` (results for each remote)\n\n### Troubleshooting\n- **Repository Not Found**: Ensure `GIT_REPOS_PATH` is set correctly and the repository exists\n- **No Tags Found**: The repository doesn't have any tags yet\n\n## Development\n```bash\n# Install dependencies\nuv pip install -r requirements.txt\n\n# Run in dev mode with Inspector\nmcp dev git_mcp/server.py\n```\n\n## Testing\n\nThe project includes two test scripts:\n\n1. `test_git_mcp.py` - Tests the underlying Git command functionality directly, without using the MCP server.\n2. `test_mcp_server.py` - Tests the MCP server functionality by starting a server instance and making calls to it.\n\nTo run the tests:\n\n```bash\n# Test the Git command functionality\npython test_git_mcp.py\n\n# Test the MCP server (requires the git-mcp package to be installed)\npython test_mcp_server.py\n",
      "npm_url": "https://www.npmjs.com/package/git-mcp",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "commits",
        "workflows",
        "git workflow",
        "manage git",
        "git operations"
      ],
      "category": "git-workflow-management"
    },
    "kkshaxqd--kkshaxqd.github.io": {
      "owner": "kkshaxqd",
      "name": "kkshaxqd.github.io",
      "url": "https://github.com/kkshaxqd/kkshaxqd.github.io",
      "imageUrl": "/freedevtools/mcp/pfp/kkshaxqd.webp",
      "description": "Host and showcase personal projects and websites using GitHub Pages.",
      "stars": 0,
      "forks": 0,
      "license": "GNU General Public License v3.0",
      "language": "",
      "updated_at": "2024-03-01T03:00:18Z",
      "readme_content": "# kkshaxqd.github.io",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflow",
        "kkshaxqd github",
        "git workflow",
        "github io"
      ],
      "category": "git-workflow-management"
    },
    "ko1ynnky--github-actions-mcp-server": {
      "owner": "ko1ynnky",
      "name": "github-actions-mcp-server",
      "url": "https://github.com/ko1ynnky/github-actions-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/ko1ynnky.webp",
      "description": "Manage and operate GitHub Actions workflows by triggering, canceling, and analyzing workflow executions. Provides error handling and type validation for integrating with the GitHub Actions API.",
      "stars": 39,
      "forks": 17,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-20T12:32:16Z",
      "readme_content": "[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/cad0f49e-1c4d-4ab1-97e4-2312da835454)\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/ko1ynnky-github-actions-mcp-server-badge.png)](https://mseep.ai/app/ko1ynnky-github-actions-mcp-server)\n\n# GitHub Actions MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@ko1ynnky/github-actions-mcp-server)](https://smithery.ai/server/@ko1ynnky/github-actions-mcp-server)\n\n> **⚠️ Archive Notice**: This repository will be archived soon as the official GitHub MCP server is adding Actions support. See [github/github-mcp-server#491](https://github.com/github/github-mcp-server/pull/491) for details on the official implementation.\n\nMCP Server for the GitHub Actions API, enabling AI assistants to manage and operate GitHub Actions workflows. Compatible with multiple AI coding assistants including Claude Desktop, Codeium, and Windsurf.\n\n### Features\n\n- **Complete Workflow Management**: List, view, trigger, cancel, and rerun workflows\n- **Workflow Run Analysis**: Get detailed information about workflow runs and their jobs\n- **Comprehensive Error Handling**: Clear error messages with enhanced details\n- **Flexible Type Validation**: Robust type checking with graceful handling of API variations\n- **Security-Focused Design**: Timeout handling, rate limiting, and strict URL validation\n\n## Tools\n\n1. `list_workflows`\n   - List workflows in a GitHub repository\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `page` (optional number): Page number for pagination\n     - `perPage` (optional number): Results per page (max 100)\n   - Returns: List of workflows in the repository\n\n2. `get_workflow`\n   - Get details of a specific workflow\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `workflowId` (string or number): The ID of the workflow or filename\n   - Returns: Detailed information about the workflow\n\n3. `get_workflow_usage`\n   - Get usage statistics of a workflow\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `workflowId` (string or number): The ID of the workflow or filename\n   - Returns: Usage statistics including billable minutes\n\n4. `list_workflow_runs`\n   - List all workflow runs for a repository or a specific workflow\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `workflowId` (optional string or number): The ID of the workflow or filename\n     - `actor` (optional string): Filter by user who triggered the workflow\n     - `branch` (optional string): Filter by branch\n     - `event` (optional string): Filter by event type\n     - `status` (optional string): Filter by status\n     - `created` (optional string): Filter by creation date (YYYY-MM-DD)\n     - `excludePullRequests` (optional boolean): Exclude PR-triggered runs\n     - `checkSuiteId` (optional number): Filter by check suite ID\n     - `page` (optional number): Page number for pagination\n     - `perPage` (optional number): Results per page (max 100)\n   - Returns: List of workflow runs matching the criteria\n\n5. `get_workflow_run`\n   - Get details of a specific workflow run\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `runId` (number): The ID of the workflow run\n   - Returns: Detailed information about the specific workflow run\n\n6. `get_workflow_run_jobs`\n   - Get jobs for a specific workflow run\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `runId` (number): The ID of the workflow run\n     - `filter` (optional string): Filter jobs by completion status ('latest', 'all')\n     - `page` (optional number): Page number for pagination\n     - `perPage` (optional number): Results per page (max 100)\n   - Returns: List of jobs in the workflow run\n\n7. `trigger_workflow`\n   - Trigger a workflow run\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `workflowId` (string or number): The ID of the workflow or filename\n     - `ref` (string): The reference to run the workflow on (branch, tag, or SHA)\n     - `inputs` (optional object): Input parameters for the workflow\n   - Returns: Information about the triggered workflow run\n\n8. `cancel_workflow_run`\n   - Cancel a workflow run\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `runId` (number): The ID of the workflow run\n   - Returns: Status of the cancellation operation\n\n9. `rerun_workflow`\n   - Re-run a workflow run\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `runId` (number): The ID of the workflow run\n   - Returns: Status of the re-run operation\n\n### Usage with AI Coding Assistants\n\nThis MCP server is compatible with multiple AI coding assistants including Claude Desktop, Codeium, and Windsurf.\n\n#### Claude Desktop\n\nFirst, make sure you have built the project (see Build section below). Then, add the following to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"github-actions\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"<path-to-mcp-server>/dist/index.js\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n#### Codeium\n\nAdd the following configuration to your Codeium MCP config file (typically at `~/.codeium/windsurf/mcp_config.json` on Unix-based systems or `%USERPROFILE%\\.codeium\\windsurf\\mcp_config.json` on Windows):\n\n```json\n{\n  \"mcpServers\": {\n    \"github-actions\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"<path-to-mcp-server>/dist/index.js\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n#### Windsurf\n\nWindsurf uses the same configuration format as Codeium. Add the server to your Windsurf MCP configuration as shown above for Codeium.\n\n## Build\n\n### Unix/Linux/macOS\n\nClone the repository and build:\n\n```bash\ngit clone https://github.com/ko1ynnky/github-actions-mcp-server.git\ncd github-actions-mcp-server\nnpm install\nnpm run build\n```\n\n### Windows\n\nFor Windows systems, use the Windows-specific build command:\n\n```bash\ngit clone https://github.com/ko1ynnky/github-actions-mcp-server.git\ncd github-actions-mcp-server\nnpm install\nnpm run build:win\n```\n\nAlternatively, you can use the included batch file:\n\n```bash\nrun-server.bat [optional-github-token]\n```\n\nThis will create the necessary files in the `dist` directory that you'll need to run the MCP server.\n\n#### Windows-Specific Instructions\n\n**Prerequisites**\n- Node.js (v14 or higher)\n- npm (v6 or higher)\n\n**Running the Server on Windows**\n\n1. Using the batch file (simplest method):\n   ```\n   run-server.bat [optional-github-token]\n   ```\n   This will check if the build exists, build if needed, and start the server.\n\n2. Using npm directly:\n   ```\n   npm run start\n   ```\n\n**Setting GitHub Personal Access Token on Windows**\n\nFor full functionality and to avoid rate limiting, you need to set your GitHub Personal Access Token.\n\nOptions:\n1. Pass it as a parameter to the batch file:\n   ```\n   run-server.bat your_github_token_here\n   ```\n\n2. Set it as an environment variable:\n   ```\n   set GITHUB_PERSONAL_ACCESS_TOKEN=your_github_token_here\n   npm run start\n   ```\n\n**Troubleshooting Windows Issues**\n\nIf you encounter issues:\n\n1. **Build errors**: Make sure TypeScript is installed correctly.\n   ```\n   npm install -g typescript\n   ```\n\n2. **Permission issues**: Ensure you're running the commands in a command prompt with appropriate permissions.\n\n3. **Node.js errors**: Verify you're using a compatible Node.js version.\n   ```\n   node --version\n   ```\n\n## Usage Examples\n\nList workflows in a repository:\n\n```javascript\nconst result = await listWorkflows({\n  owner: \"your-username\",\n  repo: \"your-repository\"\n});\n```\n\nTrigger a workflow:\n\n```javascript\nconst result = await triggerWorkflow({\n  owner: \"your-username\",\n  repo: \"your-repository\",\n  workflowId: \"ci.yml\",\n  ref: \"main\",\n  inputs: {\n    environment: \"production\"\n  }\n});\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Authentication Errors**:\n   - Ensure your GitHub token has the correct permissions\n   - Check that the token is correctly set as an environment variable\n\n2. **Rate Limiting**:\n   - The server implements rate limiting to avoid hitting GitHub API limits\n   - If you encounter rate limit errors, reduce the frequency of requests\n\n3. **Type Validation Errors**:\n   - GitHub API responses might sometimes differ from expected schemas\n   - The server implements flexible validation to handle most variations\n   - If you encounter persistent errors, please open an issue\n\n## License\n\nThis MCP server is licensed under the MIT License.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflows",
        "github actions",
        "git workflow",
        "operate github"
      ],
      "category": "git-workflow-management"
    },
    "koreafox--helloworld": {
      "owner": "koreafox",
      "name": "helloworld",
      "url": "https://github.com/koreafox/helloworld",
      "imageUrl": "/freedevtools/mcp/pfp/koreafox.webp",
      "description": "Learn and practice Git and GitHub effectively, enhancing version control skills and enabling collaborative project management.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "HTML",
      "updated_at": "2021-09-09T07:23:51Z",
      "readme_content": "# helloworld\ngit 및 github 스터디 용도\n",
      "npm_url": "https://www.npmjs.com/package/helloworld",
      "npm_downloads": 1970,
      "keywords": [
        "git",
        "github",
        "workflow",
        "git workflow",
        "practice git",
        "github effectively"
      ],
      "category": "git-workflow-management"
    },
    "kunwarVivek--mcp-github-project-manager": {
      "owner": "kunwarVivek",
      "name": "mcp-github-project-manager",
      "url": "https://github.com/kunwarVivek/mcp-github-project-manager",
      "imageUrl": "/freedevtools/mcp/pfp/kunwarVivek.webp",
      "description": "Manage GitHub projects, milestones, tasks, and sprints using a standardized MCP interface. This implementation leverages GitHub's GraphQL API to handle project configurations and metrics while ensuring state management and error handling according to MCP specifications.",
      "stars": 70,
      "forks": 23,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-28T13:37:18Z",
      "readme_content": "# MCP GitHub Project Manager\n\nA comprehensive Model Context Protocol (MCP) server that provides advanced GitHub project management capabilities with **AI-powered task management** and **complete requirements traceability**. Transform your project ideas into actionable tasks with full end-to-end tracking from business requirements to implementation.\n\n[![npm version](https://img.shields.io/npm/v/mcp-github-project-manager.svg)](https://www.npmjs.com/package/mcp-github-project-manager)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Node.js Version](https://img.shields.io/node/v/mcp-github-project-manager.svg)](https://nodejs.org/)\n\n## Overview\n\nThis server implements the [Model Context Protocol](https://modelcontextprotocol.io) to provide comprehensive GitHub project management with advanced AI capabilities. Beyond traditional project management, it offers AI-powered task generation, requirements traceability, and intelligent project planning through GitHub's GraphQL API while maintaining state and handling errors according to MCP specifications.\n\n### 🚀 What Makes This Special\n\n- **AI-Powered**: Transform project ideas into comprehensive PRDs and actionable tasks using multiple AI providers\n- **Complete Traceability**: Full end-to-end tracking from business requirements → features → use cases → tasks\n- **Intelligent Analysis**: AI-powered complexity analysis, effort estimation, and task recommendations\n- **Professional Standards**: IEEE 830 compliant requirements documentation with enterprise-grade change management\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Quick Start](#quick-start)\n- [Key Features](#key-features)\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Usage](#usage)\n  - [As a command-line tool](#as-a-command-line-tool)\n  - [Running from source with TypeScript](#running-from-source-with-typescript)\n  - [As a Node.js module](#as-a-nodejs-module)\n  - [Integration with MCP clients](#integration-with-mcp-clients)\n  - [Installing in AI Assistants](#installing-in-ai-assistants)\n    - [Claude](#install-in-claude)\n    - [Roocode](#install-in-roocode)\n    - [Windsurf](#install-in-windsurf)\n    - [VS Code](#install-in-vs-code)\n    - [Cursor](#install-in-cursor)\n    - [Using Docker](#using-docker)\n  - [Troubleshooting](#troubleshooting)\n- [Architecture](#architecture)\n- [Contributing](#contributing)\n- [License](#license)\n- [References](#references)\n- [Current Status](#current-status)\n\n## Quick Start\n\n### Using NPM\n```bash\n# Install the package globally\nnpm install -g mcp-github-project-manager\n\n# Set up your environment variables\nexport GITHUB_TOKEN=\"your_github_token\"\nexport GITHUB_OWNER=\"your_github_username_or_organization\"\nexport GITHUB_REPO=\"your_repository_name\"\n\n# Run the MCP server\nmcp-github-project-manager\n```\n\n### Using Docker\n```bash\n# Build the Docker image\ndocker build -t mcp-github-project-manager .\n\n# Run with environment variables\ndocker run -it \\\n  -e GITHUB_TOKEN=your_github_token \\\n  -e GITHUB_OWNER=your_github_username_or_organization \\\n  -e GITHUB_REPO=your_repository_name \\\n  mcp-github-project-manager\n```\n\nFor more details on Docker usage, see [DOCKER.md](DOCKER.md).\n\n## Key Features\n\n### 🤖 AI-Powered Task Management\n- **PRD Generation** (`generate_prd`): Transform project ideas into comprehensive Product Requirements Documents\n- **Intelligent Task Breakdown** (`parse_prd`): AI-powered parsing of PRDs into actionable development tasks\n- **Smart Feature Addition** (`add_feature`): Add new features with automatic impact analysis and task generation\n- **Task Complexity Analysis** (`analyze_task_complexity`): Detailed AI analysis of task complexity, effort estimation, and risk assessment\n- **Next Task Recommendations** (`get_next_task`): AI-powered recommendations for optimal task prioritization\n- **Task Expansion** (`expand_task`): Break down complex tasks into manageable subtasks automatically\n- **PRD Enhancement** (`enhance_prd`): Improve existing PRDs with AI-powered gap analysis and improvements\n\n### 🎯 Enhanced Task Context Generation\n- **Traceability-Based Context** (Default): Rich context from requirements traceability without AI dependency\n- **AI-Enhanced Context** (Optional): Comprehensive business, technical, and implementation context using AI\n- **Configurable Context Levels**: Choose between minimal, standard, and full context depth\n- **Business Context**: Extract business objectives, user impact, and success metrics\n- **Technical Context**: Analyze technical constraints, architecture decisions, and integration points\n- **Implementation Guidance**: AI-generated step-by-step implementation recommendations\n- **Contextual References**: Links to relevant PRD sections, features, and technical specifications\n- **Enhanced Acceptance Criteria**: Detailed, testable criteria with verification methods\n- **Graceful Degradation**: Works perfectly without AI keys, falls back to traceability-based context\n\n### 🔗 Complete Requirements Traceability\n- **End-to-End Tracking** (`create_traceability_matrix`): Full traceability from PRD business requirements → features → use cases → tasks\n- **Bidirectional Links**: Complete bidirectional traceability with impact analysis\n- **Use Case Management**: Professional actor-goal-scenario use case generation and tracking\n- **Coverage Analysis**: Comprehensive coverage metrics with gap identification\n- **Orphaned Task Detection**: Identify tasks without requirements links\n- **Change Impact Analysis**: Track requirement changes and their impact across all levels\n\n### 📊 Multi-Provider AI Support\n- **Anthropic Claude**: Primary AI provider for complex reasoning\n- **OpenAI GPT**: Alternative provider with fallback support\n- **Google Gemini**: Additional AI capabilities\n- **Perplexity**: Research and analysis tasks\n- **Automatic Fallback**: Seamless switching between providers\n\n### 🏗️ Core Project Management\n- **Project Management**: Create and manage GitHub Projects (v2)\n- **Issues and Milestones**: Full CRUD operations with advanced filtering\n- **Sprint Planning**: Plan and manage development sprints with AI assistance\n- **Custom Fields and Views**: Create different views (board, table, timeline, roadmap)\n- **Resource Versioning**: Intelligent caching and optimistic locking\n\n### ⚡ Advanced Features\n- **MCP Implementation**: Full MCP specification compliance with Zod validation\n- **GitHub Integration**: GraphQL API integration with intelligent rate limiting\n- **Real-time Sync**: Bidirectional synchronization with GitHub\n- **Webhook Integration**: Real-time updates via GitHub webhooks\n- **Progress Tracking**: Comprehensive metrics and progress reporting\n- **Event System**: Track and replay project events\n\n## Installation\n\n### Option 1: Install from npm (recommended)\n\n```bash\n# Install the package globally\nnpm install -g mcp-github-project-manager\n\n# Or install in your project\nnpm install mcp-github-project-manager\n```\n\n### Option 2: Install from source\n\n```bash\n# Clone the repository\ngit clone https://github.com/kunwarVivek/mcp-github-project-manager.git\ncd mcp-github-project-manager\n\n# Install dependencies\nnpm install\n# or\npnpm install\n\n# Build the project\nnpm run build\n```\n\n### Set up environment variables\n\n```bash\n# Copy the example environment file\ncp .env.example .env\n\n# Edit .env with your GitHub token and details\n```\n\n## Configuration\n\n### Required Environment Variables\n\n#### GitHub Configuration\n```env\nGITHUB_TOKEN=your_github_token\nGITHUB_OWNER=repository_owner\nGITHUB_REPO=repository_name\n```\n\nThe GitHub token requires these permissions:\n- `repo` (Full repository access)\n- `project` (Project access)\n- `write:org` (Organization access)\n\n#### AI Provider Configuration\nAt least one AI provider is required for AI-powered features:\n\n```env\n# Primary AI providers (at least one required)\nANTHROPIC_API_KEY=your_anthropic_api_key_here\nOPENAI_API_KEY=your_openai_api_key_here\nGOOGLE_API_KEY=your_google_api_key_here\nPERPLEXITY_API_KEY=your_perplexity_api_key_here\n\n# AI Model Configuration (optional - uses defaults if not specified)\nAI_MAIN_MODEL=claude-3-5-sonnet-20241022\nAI_RESEARCH_MODEL=perplexity-llama-3.1-sonar-large-128k-online\nAI_FALLBACK_MODEL=gpt-4o\nAI_PRD_MODEL=claude-3-5-sonnet-20241022\n\n# AI Task Generation Configuration (optional)\nMAX_TASKS_PER_PRD=50\nDEFAULT_COMPLEXITY_THRESHOLD=7\nMAX_SUBTASK_DEPTH=3\nAUTO_DEPENDENCY_DETECTION=true\nAUTO_EFFORT_ESTIMATION=true\n\n# Enhanced Task Context Generation Configuration (optional)\nENHANCED_TASK_GENERATION=true\nAUTO_CREATE_TRACEABILITY=true\nAUTO_GENERATE_USE_CASES=true\nAUTO_CREATE_LIFECYCLE=true\nENHANCED_CONTEXT_LEVEL=standard\nINCLUDE_BUSINESS_CONTEXT=false\nINCLUDE_TECHNICAL_CONTEXT=false\nINCLUDE_IMPLEMENTATION_GUIDANCE=false\n```\n\n### AI Provider Setup\n\n#### Anthropic Claude\n1. Sign up at [Anthropic Console](https://console.anthropic.com/)\n2. Create an API key\n3. Set `ANTHROPIC_API_KEY` in your environment\n\n#### OpenAI\n1. Sign up at [OpenAI Platform](https://platform.openai.com/)\n2. Create an API key\n3. Set `OPENAI_API_KEY` in your environment\n\n#### Google Gemini\n1. Sign up at [Google AI Studio](https://aistudio.google.com/)\n2. Create an API key\n3. Set `GOOGLE_API_KEY` in your environment\n\n#### Perplexity\n1. Sign up at [Perplexity API](https://www.perplexity.ai/settings/api)\n2. Create an API key\n3. Set `PERPLEXITY_API_KEY` in your environment\n\n## Usage\n\n### As a command-line tool\n\nIf installed globally:\n\n```bash\n# Start the MCP server using stdio transport\nmcp-github-project-manager\n\n# Start with environment variables\nGITHUB_TOKEN=your_token mcp-github-project-manager\n\n# Start with command line arguments\nmcp-github-project-manager --token=your_token --owner=your_username --repo=your_repo\n\n# Use a specific .env file\nmcp-github-project-manager --env-file=.env.production\n\n# Show verbose output\nmcp-github-project-manager --verbose\n\n# Display help information\nmcp-github-project-manager --help\n```\n\n### Running from source with TypeScript\n\nIf you're developing or running from source:\n\n```bash\n# Run directly with ts-node\nnode --loader ts-node/esm src/index.ts\n\n# Run with command line arguments\nnode --loader ts-node/esm src/index.ts --token=your_token --owner=your_username --repo=your_repo\n\n# Use the npm dev script (watches for changes)\nnpm run dev\n\n# Display help information\nnode --loader ts-node/esm src/index.ts --help\n```\n\n#### Command Line Options\n\n| Option | Short | Description |\n|--------|-------|-------------|\n| `--token <token>` | `-t` | GitHub personal access token |\n| `--owner <owner>` | `-o` | GitHub repository owner (username or organization) |\n| `--repo <repo>` | `-r` | GitHub repository name |\n| `--env-file <path>` | `-e` | Path to .env file (default: .env in project root) |\n| `--verbose` | `-v` | Enable verbose logging |\n| `--help` | `-h` | Display help information |\n| `--version` | | Display version information |\n\nCommand line arguments take precedence over environment variables.\n\n### As a Node.js module\n\n```javascript\nimport { Server } from \"mcp-github-project-manager\";\n\n// Create and start an MCP server instance\nconst server = new Server({\n  transport: \"stdio\", // or \"http\" for HTTP server\n  config: {\n    githubToken: process.env.GITHUB_TOKEN,\n    githubOwner: process.env.GITHUB_OWNER,\n    githubRepo: process.env.GITHUB_REPO\n  }\n});\n\nserver.start();\n```\n\n### Integration with MCP clients\n\n```javascript\n// Example using an MCP client library\nimport { McpClient } from \"@modelcontextprotocol/client\";\nimport { spawn } from \"child_process\";\n\n// Create a child process running the MCP server\nconst serverProcess = spawn(\"mcp-github-project-manager\", [], {\n  env: { ...process.env, GITHUB_TOKEN: \"your_token\" }\n});\n\n// Connect the MCP client to the server\nconst client = new McpClient({\n  transport: {\n    type: \"process\",\n    process: serverProcess\n  }\n});\n\n// Call MCP tools\nconst result = await client.callTool(\"create_project\", {\n  title: \"My Project\",\n  description: \"A new GitHub project\"\n});\n```\n\nFor more examples, see the [User Guide](docs/user-guide.md) and the [examples/](examples/) directory.\n\n### AI Tools Usage Examples\n\n#### Complete Project Workflow\n```bash\n# 1. Generate PRD from project idea\ngenerate_prd({\n  \"projectIdea\": \"AI-powered task management system with real-time collaboration\",\n  \"projectName\": \"TaskAI Pro\",\n  \"author\": \"product-team\",\n  \"complexity\": \"high\",\n  \"timeline\": \"6 months\",\n  \"includeResearch\": true\n})\n\n# 2. Parse PRD and generate tasks with traceability\nparse_prd({\n  \"prdContent\": \"<generated PRD content>\",\n  \"maxTasks\": 30,\n  \"createTraceabilityMatrix\": true,\n  \"includeUseCases\": true,\n  \"projectId\": \"task-ai-pro\"\n})\n\n# 3. Get next task recommendations\nget_next_task({\n  \"sprintCapacity\": 40,\n  \"teamSkills\": [\"react\", \"node.js\", \"typescript\"],\n  \"maxComplexity\": 7,\n  \"includeAnalysis\": true\n})\n\n# 4. Analyze complex tasks\nanalyze_task_complexity({\n  \"taskTitle\": \"Implement real-time collaboration\",\n  \"taskDescription\": \"Build WebSocket-based real-time collaboration with conflict resolution\",\n  \"teamExperience\": \"mixed\",\n  \"includeBreakdown\": true,\n  \"includeRisks\": true\n})\n\n# 5. Break down complex tasks\nexpand_task({\n  \"taskTitle\": \"Build analytics dashboard\",\n  \"taskDescription\": \"Create comprehensive analytics dashboard with AI insights\",\n  \"currentComplexity\": 8,\n  \"targetComplexity\": 3,\n  \"includeEstimates\": true,\n  \"includeDependencies\": true\n})\n```\n\n#### Feature Addition Workflow\n```bash\n# Add new feature with complete lifecycle\nadd_feature({\n  \"featureIdea\": \"Advanced Analytics Dashboard\",\n  \"description\": \"Real-time analytics with custom charts and AI-powered insights\",\n  \"requestedBy\": \"product-manager\",\n  \"businessJustification\": \"Increase user engagement and provide actionable insights\",\n  \"targetUsers\": [\"project-managers\", \"team-leads\", \"executives\"],\n  \"autoApprove\": true,\n  \"expandToTasks\": true,\n  \"createLifecycle\": true\n})\n\n# This automatically creates:\n# ✅ Business requirement analysis\n# ✅ Use cases with actor-goal-scenario structure\n# ✅ Tasks with complete traceability links\n# ✅ Lifecycle tracking for all tasks\n```\n\n#### Requirements Traceability\n```bash\n# Create comprehensive traceability matrix\ncreate_traceability_matrix({\n  \"projectId\": \"task-ai-pro\",\n  \"prdContent\": \"<PRD content>\",\n  \"features\": [...],\n  \"tasks\": [...],\n  \"validateCompleteness\": true\n})\n\n# Output includes:\n# ✅ Business Requirements → Features → Use Cases → Tasks\n# ✅ Bidirectional traceability links\n# ✅ Coverage analysis with gap identification\n# ✅ Orphaned task detection\n# ✅ Unimplemented requirement tracking\n```\n\n#### Enhanced Task Context Generation\n```bash\n# Default: Traceability-based context (fast, no AI required)\nparse_prd({\n  \"prdContent\": \"<PRD content>\",\n  \"enhancedGeneration\": true,\n  \"contextLevel\": \"standard\"\n})\n\n# Enhanced: AI-powered comprehensive context\nparse_prd({\n  \"prdContent\": \"<PRD content>\",\n  \"enhancedGeneration\": true,\n  \"contextLevel\": \"full\",\n  \"includeBusinessContext\": true,\n  \"includeTechnicalContext\": true,\n  \"includeImplementationGuidance\": true\n})\n\n# Performance optimized: Minimal context for speed\nparse_prd({\n  \"prdContent\": \"<PRD content>\",\n  \"enhancedGeneration\": true,\n  \"contextLevel\": \"minimal\",\n  \"includeBusinessContext\": false,\n  \"includeTechnicalContext\": false,\n  \"includeImplementationGuidance\": false\n})\n```\n\n**Context Generation Levels:**\n- **Minimal**: Basic traceability context only (fastest)\n- **Standard**: Traceability + basic business context (default)\n- **Full**: Complete AI-enhanced context with implementation guidance\n\n**Generated Task Context Includes:**\n- **Business Context**: Why the task matters, user impact, success metrics\n- **Feature Context**: Parent feature information, user stories, business value\n- **Technical Context**: Constraints, architecture decisions, integration points\n- **Implementation Guidance**: Step-by-step recommendations, best practices, pitfalls\n- **Enhanced Acceptance Criteria**: Detailed verification methods and priorities\n- **Contextual References**: Links to relevant PRD sections and technical specs\n\n### 🧪 Testing Enhanced Context Generation\n\nThe enhanced context generation functionality includes comprehensive test coverage:\n\n#### **Test Files Created:**\n- `src/__tests__/TaskContextGenerationService.test.ts` - Core context generation service tests\n- `src/__tests__/TaskGenerationService.enhanced.test.ts` - Enhanced task generation integration tests\n- `src/__tests__/ParsePRDTool.enhanced.test.ts` - Tool-level context generation tests\n\n#### **Test Coverage:**\n- **Traceability-based context generation** (default behavior)\n- **AI-enhanced context generation** (when AI is available)\n- **Graceful fallback** when AI services are unavailable\n- **Configuration validation** and environment variable handling\n- **Error handling** and resilience testing\n- **Integration testing** with existing task generation pipeline\n\n#### **Running Context Generation Tests:**\n```bash\n# Run all AI-related tests (includes context generation)\nnpm run test:ai\n\n# Run specific context generation tests\nnpm test -- --testPathPattern=\"TaskContextGeneration\"\nnpm test -- --testPathPattern=\"enhanced\"\n\n# Run all tests\nnpm test\n```\n\n## 🧪 Comprehensive E2E Testing Suite\n\nThe MCP GitHub Project Manager includes a comprehensive end-to-end testing suite that tests all MCP tools through the actual MCP interface with both mocked and real API calls.\n\n### **Test Coverage:**\n- ✅ **40+ GitHub Project Management Tools** - Complete CRUD operations for projects, milestones, issues, sprints, labels, and more\n- ✅ **8 AI Task Management Tools** - PRD generation, task parsing, complexity analysis, feature management, and traceability\n- ✅ **Complex Workflow Integration** - Multi-tool workflows and real-world project management scenarios\n- ✅ **Real API Testing** - Optional testing with actual GitHub and AI APIs\n- ✅ **Schema Validation** - Comprehensive argument validation for all tools\n- ✅ **Error Handling** - Graceful error handling and recovery testing\n\n### **Quick Start:**\n```bash\n# Run comprehensive E2E tests (mocked APIs)\nnpm run test:e2e:tools\n\n# Run with real APIs (requires credentials)\nnpm run test:e2e:tools:real\n\n# Use the interactive test runner\nnpm run test:e2e:runner\n\n# Run specific test categories\nnpm run test:e2e:tools:github     # GitHub tools only\nnpm run test:e2e:tools:ai         # AI tools only\nnpm run test:e2e:tools:workflows  # Integration workflows\n```\n\n### **Test Runner Options:**\n```bash\n# Interactive test runner with options\nnode scripts/run-e2e-tests.js --help\n\n# Examples:\nnode scripts/run-e2e-tests.js --real-api --github-only\nnode scripts/run-e2e-tests.js --build --verbose --timeout 120\nnode scripts/run-e2e-tests.js --ai-only --real-api\n```\n\n### **Environment Setup for Real API Testing:**\n\n**GitHub API (Required for GitHub tools):**\n```bash\nGITHUB_TOKEN=ghp_your_github_token\nGITHUB_OWNER=your-github-username\nGITHUB_REPO=your-test-repository\n```\n\n**AI APIs (Required for AI tools):**\n```bash\n# At least one AI API key required\nANTHROPIC_API_KEY=sk-ant-your-anthropic-key\nOPENAI_API_KEY=sk-your-openai-key\nGOOGLE_API_KEY=your-google-ai-key\nPERPLEXITY_API_KEY=pplx-your-perplexity-key\n```\n\n**Enable Real API Testing:**\n```bash\nE2E_REAL_API=true npm run test:e2e:tools:real\n```\n\n### **Test Features:**\n- **Tool Registration Validation** - Verify all tools are properly registered with correct schemas\n- **MCP Protocol Compliance** - Ensure all tools follow MCP specification\n- **Response Format Validation** - Validate tool responses match expected formats\n- **Workflow Integration Testing** - Test complex multi-tool workflows\n- **Credential Management** - Graceful handling of missing credentials\n- **Performance Monitoring** - Track tool execution performance\n- **Comprehensive Error Testing** - Validate error handling and recovery\n\n### **Documentation:**\n- 📖 [Comprehensive E2E Testing Guide](docs/e2e-testing-guide.md) - Detailed testing documentation\n- 🔧 [Test Configuration](jest.e2e.tools.config.js) - Jest configuration for E2E tests\n- 🛠️ [Test Utilities](src/__tests__/e2e/utils/MCPToolTestUtils.ts) - Reusable test utilities\n\nThe E2E test suite ensures that all MCP tools work correctly both individually and in complex workflows, providing confidence in the reliability and integration of the entire system.\n\n#### **Test Scenarios Covered:**\n- ✅ Default traceability-based context (no AI required)\n- ✅ AI-enhanced business context generation\n- ✅ AI-enhanced technical context generation\n- ✅ Implementation guidance generation\n- ✅ Context merging and conflict resolution\n- ✅ Error handling and graceful degradation\n- ✅ Configuration validation and defaults\n- ✅ Tool-level parameter validation\n- ✅ Integration with existing traceability system\n\n### Installing in AI Assistants\n\n#### Install in Claude\n\nTo install the MCP server in Claude Desktop:\n\n```json\n{\n  \"mcpServers\": {\n    \"github-project-manager\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-github-project-manager\"],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"your_github_token\",\n        \"GITHUB_OWNER\": \"your_username\",\n        \"GITHUB_REPO\": \"your_repo\",\n        \"ANTHROPIC_API_KEY\": \"your_anthropic_api_key\",\n        \"OPENAI_API_KEY\": \"your_openai_api_key\",\n        \"GOOGLE_API_KEY\": \"your_google_api_key\",\n        \"PERPLEXITY_API_KEY\": \"your_perplexity_api_key\"\n      }\n    }\n  }\n}\n```\n\nFor Claude Code CLI, run:\n\n```bash\nclaude mcp add github-project-manager -- npx -y mcp-github-project-manager\n```\n\n#### Install in Roocode\n\nAdd this to your Roocode configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"github-project-manager\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-github-project-manager\"],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"your_github_token\",\n        \"GITHUB_OWNER\": \"your_username\",\n        \"GITHUB_REPO\": \"your_repo\"\n      }\n    }\n  }\n}\n```\n\n#### Install in Windsurf\n\nAdd this to your Windsurf MCP config file:\n\n```json\n{\n  \"mcpServers\": {\n    \"github-project-manager\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-github-project-manager\"],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"your_github_token\",\n        \"GITHUB_OWNER\": \"your_username\",\n        \"GITHUB_REPO\": \"your_repo\"\n      }\n    }\n  }\n}\n```\n\nSee [Windsurf MCP docs](https://docs.windsurf.com/windsurf/mcp) for more information.\n\n#### Install in VS Code\n\nAdd this to your VS Code MCP config file:\n\n```json\n{\n  \"servers\": {\n    \"github-project-manager\": {\n      \"type\": \"stdio\",\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-github-project-manager\"],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"your_github_token\",\n        \"GITHUB_OWNER\": \"your_username\",\n        \"GITHUB_REPO\": \"your_repo\"\n      }\n    }\n  }\n}\n```\n\nSee [VS Code MCP docs](https://code.visualstudio.com/docs/copilot/chat/mcp-servers) for more information.\n\n#### Install in Cursor\n\nAdd this to your Cursor MCP config file:\n\n```json\n{\n  \"mcpServers\": {\n    \"github-project-manager\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-github-project-manager\"],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"your_github_token\",\n        \"GITHUB_OWNER\": \"your_username\",\n        \"GITHUB_REPO\": \"your_repo\"\n      }\n    }\n  }\n}\n```\n\nSee [Cursor MCP docs](https://docs.cursor.com/context/model-context-protocol) for more information.\n\n#### Using Docker\n\nIf you prefer to run the MCP server in a Docker container:\n\n1. **Build the Docker Image:**\n\n   Create a `Dockerfile` in your project directory:\n\n   ```dockerfile\n   FROM node:18-alpine\n\n   WORKDIR /app\n\n   # Install the package globally\n   RUN npm install -g mcp-github-project-manager\n\n   # Default command to run the server\n   CMD [\"mcp-github-project-manager\"]\n   ```\n\n   Build the image:\n\n   ```bash\n   docker build -t github-project-manager-mcp .\n   ```\n\n2. **Configure Your MCP Client:**\n\n   Update your MCP client's configuration to use the Docker command:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"github-project-manager\": {\n         \"command\": \"docker\",\n         \"args\": [\"run\", \"-i\", \"--rm\", \"github-project-manager-mcp\"],\n         \"env\": {\n           \"GITHUB_TOKEN\": \"your_github_token\",\n           \"GITHUB_OWNER\": \"your_username\",\n           \"GITHUB_REPO\": \"your_repo\"\n         }\n       }\n     }\n   }\n   ```\n\n### Troubleshooting\n\n#### Common Issues\n\n1. **Module Not Found Errors**\n\n   If you encounter module resolution issues, try using `bunx` instead of `npx`:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"github-project-manager\": {\n         \"command\": \"bunx\",\n         \"args\": [\"-y\", \"mcp-github-project-manager\"]\n       }\n     }\n   }\n   ```\n\n2. **Windows-Specific Configuration**\n\n   On Windows, you may need to use `cmd` to run the command:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"github-project-manager\": {\n         \"command\": \"cmd\",\n         \"args\": [\n           \"/c\",\n           \"npx\",\n           \"-y\",\n           \"mcp-github-project-manager\"\n         ]\n       }\n     }\n   }\n   ```\n\n3. **Permission Issues**\n\n   If you encounter permission issues, make sure your GitHub token has the required permissions listed in the Configuration section.\n\n## Architecture\n\nThe server follows Clean Architecture principles with distinct layers:\n\n- **Domain Layer**: Core entities, repository interfaces, and Zod schemas\n- **Infrastructure Layer**: GitHub API integration and implementations\n- **Service Layer**: Business logic coordination\n- **MCP Layer**: Tool definitions and request handling\n\nSee [ARCHITECTURE.md](ARCHITECTURE.md) for detailed architecture documentation.\n\n## Contributing\n\nContributions are welcome! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.\n\n1. Fork the repository\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\n3. Commit your changes: `git commit -m 'Add some amazing feature'`\n4. Push to the branch: `git push origin feature/amazing-feature`\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## References\n\n- [Model Context Protocol](https://modelcontextprotocol.io)\n- [GitHub Projects API](https://docs.github.com/en/issues/planning-and-tracking-with-projects/automating-your-project/using-the-api-to-manage-projects)\n- [Project Roadmap](ROADMAP.md)\n\n## Current Status\n\n### Core Features\n| Feature | Status | Notes |\n|---------|--------|-------|\n| Project Creation | ✅ Complete | Full support for v2 projects |\n| Milestone Management | ✅ Complete | CRUD operations implemented |\n| Sprint Planning | ✅ Complete | Including metrics tracking |\n| Issue Management | ✅ Complete | With custom fields support |\n| Resource Versioning | ✅ Complete | With optimistic locking and schema validation |\n| Webhook Integration | 📅 Planned | Real-time updates |\n\n### AI-Powered Features\n| Feature | Status | Notes |\n|---------|--------|-------|\n| PRD Generation | ✅ Complete | Multi-provider AI support with comprehensive PRD creation |\n| Task Generation | ✅ Complete | AI-powered parsing of PRDs into actionable tasks |\n| Feature Addition | ✅ Complete | Smart feature addition with impact analysis |\n| Task Complexity Analysis | ✅ Complete | Detailed AI analysis with risk assessment |\n| Task Recommendations | ✅ Complete | AI-powered next task recommendations |\n| Task Expansion | ✅ Complete | Break down complex tasks into subtasks |\n| PRD Enhancement | ✅ Complete | AI-powered PRD improvement and gap analysis |\n| Requirements Traceability | ✅ Complete | End-to-end traceability matrix with coverage analysis |\n\n### Requirements Traceability\n| Feature | Status | Notes |\n|---------|--------|-------|\n| Business Requirements Extraction | ✅ Complete | Extract from PRD objectives and success metrics |\n| Use Case Generation | ✅ Complete | Actor-goal-scenario structure with alternatives |\n| Traceability Links | ✅ Complete | Bidirectional links with impact analysis |\n| Coverage Analysis | ✅ Complete | Gap identification and orphaned task detection |\n| Change Tracking | ✅ Complete | Requirement change impact analysis |\n| Verification Tracking | ✅ Complete | Test case mapping and verification status |\n\n### MCP Implementation\n| Component | Status | Notes |\n|-----------|--------|-------|\n| Tool Definitions | ✅ Complete | All core tools implemented with Zod validation |\n| Resource Management | ✅ Complete | Full CRUD operations with versioning |\n| Security | ✅ Complete | Token validation and scope checking |\n| Error Handling | ✅ Complete | According to MCP specifications |\n| Transport | ✅ Complete | Stdio and HTTP support |\n\nSee [STATUS.md](STATUS.md) for detailed implementation status.\n| Resource Management | ✅ Complete | With optimistic locking and relationship tracking |\n| Response Handling | ✅ Complete | Rich content formatting with multiple content types |\n| Error Handling | ✅ Complete | Comprehensive error mapping to MCP error codes |\n| State Management | ✅ Complete | With conflict resolution and rate limiting |\n\n### Recent Improvements\n\n- **Enhanced Resource System**:\n  - Added Zod schema validation for all resource types\n  - Implemented resource relationship tracking\n  - Created a centralized ResourceFactory for consistent resource access\n\n- **Improved GitHub API Integration**:\n  - Added intelligent rate limiting with automatic throttling\n  - Implemented pagination support for REST and GraphQL APIs\n  - Enhanced error handling with specific error types\n\n- **Advanced Tool System**:\n  - Created tool definition registry with Zod validation\n  - Implemented standardized tool response formatting\n  - Added example-based documentation for all tools\n\n- **Rich Response Formatting**:\n  - Added support for multiple content types (JSON, Markdown, HTML, Text)\n  - Implemented progress updates for long-running operations\n  - Added pagination support for large result sets\n\n### Identified Functional Gaps\n\nDespite the recent improvements, the following functional gaps still exist and are prioritized for future development:\n\n1. **Persistent Caching Strategy**:\n   - While the ResourceCache provides in-memory caching, it lacks persistence across server restarts\n   - No distributed caching for multi-instance deployments\n   - Missing cache eviction policies for memory management\n\n2. **Real-time Event Processing**:\n   - No webhook integration for real-time updates from GitHub\n   - Missing event-based subscription system for clients\n   - Lack of server-sent events (SSE) support for streaming updates\n\n3. **Advanced GitHub Projects v2 Features**:\n   - Limited support for custom field types and validation\n   - Incomplete integration with GitHub's newer Projects v2 field types\n   - Missing automation rule management\n\n4. **Performance Optimization**:\n   - No query batching for related resources\n   - Missing background refresh for frequently accessed resources\n   - Incomplete prefetching for related resources\n\n5. **Data Visualization and Reporting**:\n   - No built-in visualization generators for metrics\n   - Missing report generation capabilities\n   - Limited time-series data analysis\n\nSee [docs/mcp/gaps-analysis.md](docs/mcp/gaps-analysis.md) for detailed implementation status.\n\n## Documentation\n\n- [User Guide](docs/user-guide.md) - Detailed usage instructions\n- [API Reference](docs/api-reference/index.md) - Comprehensive tool documentation\n- [Tutorials](docs/tutorials/getting-started.md) - Step-by-step guides\n- [Examples](examples/README.md) - Code examples for common tasks\n- [Architecture](ARCHITECTURE.md) - System architecture and design\n- [Contributing](docs/contributing/index.md) - Development guidelines\n- [MCP Documentation](docs/mcp/) - MCP-specific details\n\n### Interactive Documentation\n\nFor an interactive exploration of the API, open the [API Explorer](docs/api-explorer.html) in your browser.\n\n## Development\n\n### Testing\n```bash\n# Unit tests\nnpm test\n\n# Integration tests\nnpm run test:integration\n\n# End-to-end tests\nnpm run test:e2e\n```\n\n### Code Quality\n```bash\n# Lint code\nnpm run lint\n\n# Type check\nnpm run type-check\n\n# Format code\nnpm run format\n```\n\n## Contributing\n\nWe welcome contributions to the GitHub Project Manager MCP Server! Please see our [Contributing Guide](docs/contributing/index.md) for details on:\n\n- [Development Workflow](docs/contributing/development-workflow.md)\n- [Code Standards](docs/contributing/index.md#coding-standards)\n- [Testing Guidelines](docs/contributing/index.md#testing-guidelines)\n- [Documentation Guidelines](docs/contributing/index.md#documentation-guidelines)\n\n## License\n\n[MIT](LICENSE)\n",
      "npm_url": "https://www.npmjs.com/package/mcp-github-project-manager",
      "npm_downloads": 1340,
      "keywords": [
        "github",
        "git",
        "workflow",
        "git workflow",
        "mcp github",
        "github graphql"
      ],
      "category": "git-workflow-management"
    },
    "loglmhq--mcp-server-github-repo": {
      "owner": "loglmhq",
      "name": "mcp-server-github-repo",
      "url": "https://github.com/loglmhq/mcp-server-github-repo",
      "imageUrl": "/freedevtools/mcp/pfp/loglmhq.webp",
      "description": "Access files from specified GitHub repositories, navigate directories, and retrieve file contents directly using URIs. Supports branch-specific access and serves files in plain text format.",
      "stars": 5,
      "forks": 3,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-05-27T20:30:40Z",
      "readme_content": "# MCP GitHub Repository Server\n\nAn MCP (Model Context Protocol) server that provides access to GitHub repository contents. This server allows AI assistants to browse and read files from specified GitHub repositories.\n\n## Demo\n\n![demo](/demo.png)\n\n## Features\n\n### Resources\n\n- Access any file in a GitHub repository via URI\n- List repository contents and navigate directories\n- Support for branch-specific file access\n- File contents are served as plain text\n\n### Resource URIs\n\n- Base URL format: `https://api.github.com/repos/{owner}/{repo}/contents/{path}`\n- Supports both files and directories\n- Files are served with `text/plain` MIME type\n- Directories are served with `application/x-directory` MIME type\n\n## Configuration\n\nThe server requires the following environment variables:\n\n```bash\nGITHUB_PERSONAL_ACCESS_TOKEN=your_github_token\nGITHUB_OWNER=repository_owner\nGITHUB_REPO=repository_name\nGITHUB_BRANCH=branch_name  # Optional\n```\n\n## Development\n\nInstall dependencies:\n\n```bash\nnpm install\n```\n\nBuild the server:\n\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server configuration:\n\n### Config Location\n\n- MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-github-repo\": {\n      \"command\": \"/path/to/mcp-server-github-repo/build/index.js\"\n    }\n  }\n}\n```\n\n## API Implementation\n\nThe server implements three main MCP endpoints:\n\n1. `ListResources` - Lists files and directories in the repository\n2. `ReadResource` - Retrieves contents of a specific file\n\n### Authentication\n\nThe server uses GitHub Personal Access Token for authentication. Make sure your token has appropriate permissions to access the repository contents.\n\n### Error Handling\n\nThe server includes error handling for:\n\n- Missing environment variables\n- GitHub API errors\n- Invalid paths (e.g., trying to read a directory as a file)\n- Authentication failures\n\n## Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. Use the MCP Inspector for debugging:\n\n```bash\nnpm run inspector\n```\n\nThis will provide a URL to access debugging tools in your browser.\n\n## Security Notes\n\n- Keep your GitHub Personal Access Token secure\n- Consider using tokens with minimal required permissions\n- Be aware of repository size limitations when accessing large repositories\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "branch",
        "git workflow",
        "server github",
        "specified github"
      ],
      "category": "git-workflow-management"
    },
    "lowkeyrd--servers": {
      "owner": "lowkeyrd",
      "name": "servers",
      "url": "https://github.com/lowkeyrd/servers",
      "imageUrl": "/freedevtools/mcp/pfp/lowkeyrd.webp",
      "description": "Interact with GitHub repositories for file operations, repository management, and advanced searching capabilities. Automate workflows with features like automatic branch creation while preserving Git history.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-04-10T16:07:45Z",
      "readme_content": "# Model Context Protocol servers\n\nThis repository is a collection of *reference implementations* for the [Model Context Protocol](https://modelcontextprotocol.io/) (MCP), as well as references\nto community built servers and additional resources.\n\nThe servers in this repository showcase the versatility and extensibility of MCP, demonstrating how it can be used to give Large Language Models (LLMs) secure, controlled access to tools and data sources.\nEach MCP server is implemented with either the [Typescript MCP SDK](https://github.com/modelcontextprotocol/typescript-sdk) or [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk).\n\n> Note: Lists in this README are maintained in alphabetical order to minimize merge conflicts when adding new items.\n\n## 🌟 Reference Servers\n\nThese servers aim to demonstrate MCP features and the TypeScript and Python SDKs.\n\n- **[AWS KB Retrieval](src/aws-kb-retrieval-server)** - Retrieval from AWS Knowledge Base using Bedrock Agent Runtime\n- **[Brave Search](src/brave-search)** - Web and local search using Brave's Search API\n- **[EverArt](src/everart)** - AI image generation using various models\n- **[Everything](src/everything)** - Reference / test server with prompts, resources, and tools\n- **[Fetch](src/fetch)** - Web content fetching and conversion for efficient LLM usage\n- **[Filesystem](src/filesystem)** - Secure file operations with configurable access controls\n- **[Git](src/git)** - Tools to read, search, and manipulate Git repositories\n- **[GitHub](src/github)** - Repository management, file operations, and GitHub API integration\n- **[GitLab](src/gitlab)** - GitLab API, enabling project management\n- **[Google Drive](src/gdrive)** - File access and search capabilities for Google Drive\n- **[Google Maps](src/google-maps)** - Location services, directions, and place details\n- **[Memory](src/memory)** - Knowledge graph-based persistent memory system\n- **[PostgreSQL](src/postgres)** - Read-only database access with schema inspection\n- **[Puppeteer](src/puppeteer)** - Browser automation and web scraping\n- **[Redis](src/redis)** - Interact with Redis key-value stores\n- **[Sentry](src/sentry)** - Retrieving and analyzing issues from Sentry.io\n- **[Sequential Thinking](src/sequentialthinking)** - Dynamic and reflective problem-solving through thought sequences\n- **[Slack](src/slack)** - Channel management and messaging capabilities\n- **[Sqlite](src/sqlite)** - Database interaction and business intelligence capabilities\n- **[Time](src/time)** - Time and timezone conversion capabilities\n\n## 🤝 Third-Party Servers\n\n### 🎖️ Official Integrations\n\nOfficial integrations are maintained by companies building production ready MCP servers for their platforms.\n\n- <img height=\"12\" width=\"12\" src=\"https://www.21st.dev/favicon.ico\" alt=\"21st.dev Logo\" /> **[21st.dev Magic](https://github.com/21st-dev/magic-mcp)** - Create crafted UI components inspired by the best 21st.dev design engineers.\n- <img height=\"12\" width=\"12\" src=\"https://invoxx-public-bucket.s3.eu-central-1.amazonaws.com/frontend-resources/adfin-logo-small.svg\" alt=\"Adfin Logo\" /> **[Adfin](https://github.com/Adfin-Engineering/mcp-server-adfin)** - The only platform you need to get paid - all payments in one place, invoicing and accounting reconciliations with [Adfin](https://www.adfin.com/).\n- <img height=\"12\" width=\"12\" src=\"https://www.agentql.com/favicon/favicon.png\" alt=\"AgentQL Logo\" /> **[AgentQL](https://github.com/tinyfish-io/agentql-mcp)** - Enable AI agents to get structured data from unstructured web with [AgentQL](https://www.agentql.com/).\n- <img height=\"12\" width=\"12\" src=\"https://agentrpc.com/favicon.ico\" alt=\"AgentRPC Logo\" /> **[AgentRPC](https://github.com/agentrpc/agentrpc)** - Connect to any function, any language, across network boundaries using [AgentRPC](https://www.agentrpc.com/).\n- <img height=\"12\" width=\"12\" src=\"https://aiven.io/favicon.ico\" alt=\"Aiven Logo\" /> **[Aiven](https://github.com/Aiven-Open/mcp-aiven)** - Navigate your [Aiven projects](https://go.aiven.io/mcp-server) and interact with the PostgreSQL®, Apache Kafka®, ClickHouse® and OpenSearch® services\n- <img height=\"12\" width=\"12\" src=\"https://apify.com/favicon.ico\" alt=\"Apify Logo\" /> **[Apify](https://github.com/apify/actors-mcp-server)** - [Actors MCP Server](https://apify.com/apify/actors-mcp-server): Use 3,000+ pre-built cloud tools to extract data from websites, e-commerce, social media, search engines, maps, and more\n- <img height=\"12\" width=\"12\" src=\"https://resources.audiense.com/hubfs/favicon-1.png\" alt=\"Audiense Logo\" /> **[Audiense Insights](https://github.com/AudienseCo/mcp-audiense-insights)** - Marketing insights and audience analysis from [Audiense](https://www.audiense.com/products/audiense-insights) reports, covering demographic, cultural, influencer, and content engagement analysis.\n- <img height=\"12\" width=\"12\" src=\"https://axiom.co/favicon.ico\" alt=\"Axiom Logo\" /> **[Axiom](https://github.com/axiomhq/mcp-server-axiom)** - Query and analyze your Axiom logs, traces, and all other event data in natural language\n- <img height=\"12\" width=\"12\" src=\"https://www.bankless.com/favicon.ico\" alt=\"Bankless Logo\" /> **[Bankless Onchain](https://github.com/bankless/onchain-mcp)** - Query Onchain data, like ERC20 tokens, transaction history, smart contract state.\n- <img height=\"12\" width=\"12\" src=\"https://www.box.com/favicon.ico\" alt=\"Box Logo\" /> **[Box](https://github.com/box-community/mcp-server-box)** - Interact with the Intelligent Content Management platform through Box AI.\n- <img height=\"12\" width=\"12\" src=\"https://browserbase.com/favicon.ico\" alt=\"Browserbase Logo\" /> **[Browserbase](https://github.com/browserbase/mcp-server-browserbase)** - Automate browser interactions in the cloud (e.g. web navigation, data extraction, form filling, and more)\n- <img height=\"12\" width=\"12\" src=\"https://trychroma.com/_next/static/media/chroma-logo.ae2d6e4b.svg\" /> **[Chroma](https://github.com/chroma-core/chroma-mcp)** - Embeddings, vector search, document storage, and full-text search with the open-source AI application database\n- <img height=\"12\" width=\"12\" src=\"https://www.chronulus.com/favicon/chronulus-logo-blue-on-alpha-square-128x128.ico\" alt=\"Chronulus AI Logo\" /> **[Chronulus AI](https://github.com/ChronulusAI/chronulus-mcp)** - Predict anything with Chronulus AI forecasting and prediction agents.\n- <img height=\"12\" width=\"12\" src=\"https://clickhouse.com/favicon.ico\" alt=\"ClickHouse Logo\" /> **[ClickHouse](https://github.com/ClickHouse/mcp-clickhouse)** - Query your [ClickHouse](https://clickhouse.com/) database server.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/cloudflare\" /> **[Cloudflare](https://github.com/cloudflare/mcp-server-cloudflare)** - Deploy, configure & interrogate your resources on the Cloudflare developer platform (e.g. Workers/KV/R2/D1)\n- <img height=\"12\" width=\"12\" src=\"https://www.comet.com/favicon.ico\" alt=\"Comet Logo\" /> **[Comet Opik](https://github.com/comet-ml/opik-mcp)** - Query and analyze your [Opik](https://github.com/comet-ml/opik) logs, traces, prompts and all other telemtry data from your LLMs in natural language.\n- <img height=\"12\" width=\"12\" src=\"https://www.convex.dev/favicon.ico\" /> **[Convex](https://stack.convex.dev/convex-mcp-server)** - Introspect and query your apps deployed to Convex.\n- <img height=\"12\" width=\"12\" src=\"http://app.itsdart.com/static/img/favicon.png\" alt=\"Dart Logo\" /> **[Dart](https://github.com/its-dart/dart-mcp-server)** - Interact with task, doc, and project data in [Dart](https://itsdart.com), an AI-native project management tool\n- <img height=\"12\" width=\"12\" src=\"https://www.devhub.com/img/upload/favicon-196x196-dh.png\" alt=\"DevHub Logo\" /> **[DevHub](https://github.com/devhub/devhub-cms-mcp)** - Manage and utilize website content within the [DevHub](https://www.devhub.com) CMS platform\n- <img height=\"12\" width=\"12\" src=\"https://e2b.dev/favicon.ico\" alt=\"E2B Logo\" /> **[E2B](https://github.com/e2b-dev/mcp-server)** - Run code in secure sandboxes hosted by [E2B](https://e2b.dev)\n- <img height=\"12\" width=\"12\" src=\"https://static.edubase.net/media/brand/favicon/favicon-32x32.png\" alt=\"EduBase Logo\" /> **[EduBase](https://github.com/EduBase/MCP)** - Interact with [EduBase](https://www.edubase.net), a comprehensive e-learning platform with advanced quizzing, exam management, and content organization capabilities\n- <img height=\"12\" width=\"12\" src=\"https://esignatures.com/favicon.ico\" alt=\"eSignatures Logo\" /> **[eSignatures](https://github.com/esignaturescom/mcp-server-esignatures)** - Contract and template management for drafting, reviewing, and sending binding contracts.\n- <img height=\"12\" width=\"12\" src=\"https://exa.ai/images/favicon-32x32.png\" alt=\"Exa Logo\" /> **[Exa](https://github.com/exa-labs/exa-mcp-server)** - Search Engine made for AIs by [Exa](https://exa.ai)\n- <img height=\"12\" width=\"12\" src=\"https://fewsats.com/favicon.svg\" alt=\"Fewsats Logo\" /> **[Fewsats](https://github.com/Fewsats/fewsats-mcp)** - Enable AI Agents to purchase anything in a secure way using [Fewsats](https://fewsats.com)\n- <img height=\"12\" width=\"12\" src=\"https://fibery.io/favicon.svg\" alt=\"Fibery Logo\" /> **[Fibery](https://github.com/Fibery-inc/fibery-mcp-server)** - Perform queries and entity operations in your [Fibery](https://fibery.io) workspace.\n- <img height=\"12\" width=\"12\" src=\"https://financialdatasets.ai/favicon.ico\" alt=\"Financial Datasets Logo\" /> **[Financial Datasets](https://github.com/financial-datasets/mcp-server)** - Stock market API made for AI agents\n- <img height=\"12\" width=\"12\" src=\"https://firecrawl.dev/favicon.ico\" alt=\"Firecrawl Logo\" /> **[Firecrawl](https://github.com/mendableai/firecrawl-mcp-server)** - Extract web data with [Firecrawl](https://firecrawl.dev)\n- <img height=\"12\" width=\"12\" src=\"https://fireproof.storage/favicon.ico\" alt=\"Fireproof Logo\" /> **[Fireproof](https://github.com/fireproof-storage/mcp-database-server)** - Immutable ledger database with live synchronization\n- <img height=\"12\" width=\"12\" src=\"https://gitee.com/favicon.ico\" alt=\"Gitee Logo\" /> **[Gitee](https://github.com/oschina/mcp-gitee)** - Gitee API integration, repository, issue, and pull request management, and more.\n- <img height=\"12\" width=\"12\" src=\"https://grafana.com/favicon.ico\" alt=\"Grafana Logo\" /> **[Grafana](https://github.com/grafana/mcp-grafana)** - Search dashboards, investigate incidents and query datasources in your Grafana instance\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/KCOWBYLKunDff1Dr452y6EfjiU.png\" alt=\"Graphlit Logo\" /> **[Graphlit](https://github.com/graphlit/graphlit-mcp-server)** - Ingest anything from Slack to Gmail to podcast feeds, in addition to web crawling, into a searchable [Graphlit](https://www.graphlit.com) project.\n- <img height=\"12\" width=\"12\" src=\"https://img.alicdn.com/imgextra/i3/O1CN01d9qrry1i6lTNa2BRa_!!6000000004364-2-tps-218-200.png\" alt=\"Hologres Logo\" /> **[Hologres](https://github.com/aliyun/alibabacloud-hologres-mcp-server)** - Connect to a [Hologres](https://www.alibabacloud.com/en/product/hologres) instance, get table metadata, query and analyze data.\n- <img height=\"12\" width=\"12\" src=\"https://hyperbrowser-assets-bucket.s3.us-east-1.amazonaws.com/Hyperbrowser-logo.png\" alt=\"Hyperbrowsers23 Logo\" /> **[Hyperbrowser](https://github.com/hyperbrowserai/mcp)** - [Hyperbrowser](https://www.hyperbrowser.ai/) is the next-generation platform empowering AI agents and enabling effortless, scalable browser automation.\n- **[IBM wxflows](https://github.com/IBM/wxflows/tree/main/examples/mcp/javascript)** - Tool platform by IBM to build, test and deploy tools for any data source\n- <img height=\"12\" width=\"12\" src=\"https://forevervm.com/icon.png\" alt=\"ForeverVM Logo\" /> **[ForeverVM](https://github.com/jamsocket/forevervm/tree/main/javascript/mcp-server)** - Run Python in a code sandbox.\n- <img height=\"12\" width=\"12\" src=\"https://www.getinboxzero.com/icon.png\" alt=\"Inbox Zero Logo\" /> **[Inbox Zero](https://github.com/elie222/inbox-zero/tree/main/apps/mcp-server)** - AI personal assistant for email [Inbox Zero](https://www.getinboxzero.com)\n- <img height=\"12\" width=\"12\" src=\"https://inkeep.com/favicon.ico\" alt=\"Inkeep Logo\" /> **[Inkeep](https://github.com/inkeep/mcp-server-python)** - RAG Search over your content powered by [Inkeep](https://inkeep.com)\n- <img height=\"12\" width=\"12\" src=\"https://integration.app/favicon.ico\" alt=\"Integration App Icon\" /> **[Integration App](https://github.com/integration-app/mcp-server)** - Interact with any other SaaS applications on behalf of your customers.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/jetbrains\" /> **[JetBrains](https://github.com/JetBrains/mcp-jetbrains)** – Work on your code with JetBrains IDEs\n- <img height=\"12\" width=\"12\" src=\"https://kagi.com/favicon.ico\" alt=\"Kagi Logo\" /> **[Kagi Search](https://github.com/kagisearch/kagimcp)** - Search the web using Kagi's search API\n- <img height=\"12\" width=\"12\" src=\"https://logfire.pydantic.dev/favicon.ico\" alt=\"Logfire Logo\" /> **[Logfire](https://github.com/pydantic/logfire-mcp)** - Provides access to OpenTelemetry traces and metrics through Logfire.\n- <img height=\"12\" width=\"12\" src=\"https://langfuse.com/favicon.ico\" alt=\"Langfuse Logo\" /> **[Langfuse Prompt Management](https://github.com/langfuse/mcp-server-langfuse)** - Open-source tool for collaborative editing, versioning, evaluating, and releasing prompts.\n- <img height=\"12\" width=\"12\" src=\"https://lingo.dev/favicon.ico\" alt=\"Lingo.dev Logo\" /> **[Lingo.dev](https://github.com/lingodotdev/lingo.dev/blob/main/mcp.md)** - Make your AI agent speak every language on the planet, using [Lingo.dev](https://lingo.dev) Localization Engine.\n- <img height=\"12\" width=\"12\" src=\"https://www.make.com/favicon.ico\" alt=\"Make Logo\" /> **[Make](https://github.com/integromat/make-mcp-server)** - Turn your [Make](https://www.make.com/) scenarios into callable tools for AI assistants.\n- <img height=\"12\" width=\"12\" src=\"https://www.meilisearch.com/favicon.ico\" alt=\"Meilisearch Logo\" /> **[Meilisearch](https://github.com/meilisearch/meilisearch-mcp)** - Interact & query with Meilisearch (Full-text & semantic search API)\n- <img height=\"12\" width=\"12\" src=\"https://metoro.io/static/images/logos/Metoro.svg\" /> **[Metoro](https://github.com/metoro-io/metoro-mcp-server)** - Query and interact with kubernetes environments monitored by Metoro\n- <img height=\"12\" width=\"12\" src=\"https://milvus.io/favicon-32x32.png\" /> **[Milvus](https://github.com/zilliztech/mcp-server-milvus)** - Search, Query and interact with data in your Milvus Vector Database.\n- <img height=\"12\" width=\"12\" src=\"https://www.motherduck.com/favicon.ico\" alt=\"MotherDuck Logo\" /> **[MotherDuck](https://github.com/motherduckdb/mcp-server-motherduck)** - Query and analyze data with MotherDuck and local DuckDB\n- <img height=\"12\" width=\"12\" src=\"https://needle-ai.com/images/needle-logo-orange-2-rounded.png\" alt=\"Needle AI Logo\" /> **[Needle](https://github.com/needle-ai/needle-mcp)** - Production-ready RAG out of the box to search and retrieve data from your own documents.\n- <img height=\"12\" width=\"12\" src=\"https://neo4j.com/favicon.ico\" alt=\"Neo4j Logo\" /> **[Neo4j](https://github.com/neo4j-contrib/mcp-neo4j/)** - Neo4j graph database server (schema + read/write-cypher) and separate graph database backed memory\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/183852044?s=48&v=4\" alt=\"Neon Logo\" /> **[Neon](https://github.com/neondatabase/mcp-server-neon)** - Interact with the Neon serverless Postgres platform\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/82347605?s=48&v=4\" alt=\"OceanBase Logo\" /> **[OceanBase](https://github.com/oceanbase/mcp-oceanbase)** - MCP Server for OceanBase database and its tools\n- <img height=\"12\" width=\"12\" src=\"https://docs.octagonagents.com/logo.svg\" alt=\"Octagon Logo\" /> **[Octagon](https://github.com/OctagonAI/octagon-mcp-server)** - Deliver real-time investment research with extensive private and public market data.\n- <img height=\"12\" width=\"12\" src=\"https://oxylabs.io/favicon.ico\" alt=\"Oxylabs Logo\" /> **[Oxylabs](https://github.com/oxylabs/oxylabs-mcp)** - Scrape websites with Oxylabs Web API, supporting dynamic rendering and parsing for structured data extraction.\n- <img height=\"12\" width=\"12\" src=\"https://www.perplexity.ai/favicon.ico\" alt=\"Perplexity Logo\" /> **[Perplexity](https://github.com/ppl-ai/modelcontextprotocol)** - An MCP server that connects to Perplexity's Sonar API, enabling real-time web-wide research in conversational AI.\n- <img height=\"12\" width=\"12\" src=\"https://qdrant.tech/img/brand-resources-logos/logomark.svg\" /> **[Qdrant](https://github.com/qdrant/mcp-server-qdrant/)** - Implement semantic memory layer on top of the Qdrant vector search engine\n- <img height=\"12\" width=\"12\" src=\"https://www.ramp.com/favicon.ico\" /> **[Ramp](https://github.com/ramp-public/ramp-mcp)** - Interact with [Ramp](https://ramp.com)'s Developer API to run analysis on your spend and gain insights leveraging LLMs\n- **[Raygun](https://github.com/MindscapeHQ/mcp-server-raygun)** - Interact with your crash reporting and real using monitoring data on your Raygun account\n- <img height=\"12\" width=\"12\" src=\"https://www.rember.com/favicon.ico\" alt=\"Rember Logo\" /> **[Rember](https://github.com/rember/rember-mcp)** - Create spaced repetition flashcards in [Rember](https://rember.com) to remember anything you learn in your chats\n- <img height=\"12\" width=\"12\" src=\"https://riza.io/favicon.ico\" alt=\"Riza logo\" /> **[Riza](https://github.com/riza-io/riza-mcp)** - Arbitrary code execution and tool-use platform for LLMs by [Riza](https://riza.io)\n- <img height=\"12\" width=\"12\" src=\"https://pics.fatwang2.com/56912e614b35093426c515860f9f2234.svg\" /> [Search1API](https://github.com/fatwang2/search1api-mcp) - One API for Search, Crawling, and Sitemaps\n- <img height=\"12\" width=\"12\" src=\"https://screenshotone.com/favicon.ico\" alt=\"ScreenshotOne Logo\" /> **[ScreenshotOne](https://github.com/screenshotone/mcp/)** - Render website screenshots with [ScreenshotOne](https://screenshotone.com/)\n- <img height=\"12\" width=\"12\" src=\"https://semgrep.dev/favicon.ico\" alt=\"Semgrep Logo\" /> **[Semgrep](https://github.com/semgrep/mcp)** - Enable AI agents to secure code with [Semgrep](https://semgrep.dev/).\n- <img height=\"12\" width=\"12\" src=\"https://www.starrocks.io/favicon.ico\" alt=\"StarRocks Logo\" /> **[StarRocks](https://github.com/StarRocks/mcp-server-starrocks)** - Interact with [StarRocks](https://www.starrocks.io/)\n- <img height=\"12\" width=\"12\" src=\"https://stripe.com/favicon.ico\" alt=\"Stripe Logo\" /> **[Stripe](https://github.com/stripe/agent-toolkit)** - Interact with Stripe API\n- <img height=\"12\" width=\"12\" src=\"https://tavily.com/favicon.ico\" alt=\"Tavily Logo\" /> **[Tavily](https://github.com/tavily-ai/tavily-mcp)** - Search engine for AI agents (search + extract) powered by [Tavily](https://tavily.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.tinybird.co/favicon.ico\" alt=\"Tinybird Logo\" /> **[Tinybird](https://github.com/tinybirdco/mcp-tinybird)** - Interact with Tinybird serverless ClickHouse platform\n- <img height=\"12\" width=\"12\" src=\"https://unifai.network/favicon.ico\" alt=\"UnifAI Logo\" /> **[UnifAI](https://github.com/unifai-network/unifai-mcp-server)** - Dynamically search and call tools using [UnifAI Network](https://unifai.network)\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/plcQevjrOYnyriuGw90NfQBPoQ.jpg\" alt=\"Unstructured Logo\" /> **[Unstructured](https://github.com/Unstructured-IO/UNS-MCP)** - Set up and interact with your unstructured data processing workflows in [Unstructured Platform](https://unstructured.io)\n- **[Vectorize](https://github.com/vectorize-io/vectorize-mcp-server/)** - [Vectorize](https://vectorize.io) MCP server for advanced retrieval, Private Deep Research, Anything-to-Markdown file extraction and text chunking.\n- <img height=\"12\" width=\"12\" src=\"https://verodat.io/assets/favicon-16x16.png\" alt=\"Verodat Logo\" /> **[Verodat](https://github.com/Verodat/verodat-mcp-server)** - Interact with Verodat AI Ready Data platform\n- <img height=\"12\" width=\"12\" src=\"https://www.veyrax.com/favicon.ico\" alt=\"VeyraX Logo\" /> **[VeyraX](https://github.com/VeyraX/veyrax-mcp)** - Single tool to control all 100+ API integrations, and UI components\n- **[ZenML](https://github.com/zenml-io/mcp-zenml)** - Interact with your MLOps and LLMOps pipelines through your [ZenML](https://www.zenml.io) MCP server\n\n### 🌎 Community Servers\n\nA growing set of community-developed and maintained servers demonstrates various applications of MCP across different domains.\n\n> **Note:** Community servers are **untested** and should be used at **your own risk**. They are not affiliated with or endorsed by Anthropic.\n- **[Ableton Live](https://github.com/Simon-Kansara/ableton-live-mcp-server)** - an MCP server to control Ableton Live.\n- **[Airbnb](https://github.com/openbnb-org/mcp-server-airbnb)** - Provides tools to search Airbnb and get listing details.\n- **[Algorand](https://github.com/GoPlausible/algorand-mcp)** - A comprehensive MCP server for tooling interactions (40+) and resource accessibility (60+) plus many useful prompts for interacting with the Algorand blockchain.\n- **[Airflow](https://github.com/yangkyeongmo/mcp-server-apache-airflow)** - A MCP Server that connects to [Apache Airflow](https://airflow.apache.org/) using official python client.\n- **[Airtable](https://github.com/domdomegg/airtable-mcp-server)** - Read and write access to [Airtable](https://airtable.com/) databases, with schema inspection.\n- **[Airtable](https://github.com/felores/airtable-mcp)** - Airtable Model Context Protocol Server.\n- **[AlphaVantage](https://github.com/calvernaz/alphavantage)** - MCP server for stock market data API [AlphaVantage](https://www.alphavantage.co)\n- **[Anki](https://github.com/scorzeth/anki-mcp-server)** - An MCP server for interacting with your [Anki](https://apps.ankiweb.net) decks and cards.\n- **[Any Chat Completions](https://github.com/pyroprompts/any-chat-completions-mcp)** - Interact with any OpenAI SDK Compatible Chat Completions API like OpenAI, Perplexity, Groq, xAI and many more.\n- **[ArangoDB](https://github.com/ravenwits/mcp-server-arangodb)** - MCP Server that provides database interaction capabilities through [ArangoDB](https://arangodb.com/).\n- **[Atlassian](https://github.com/sooperset/mcp-atlassian)** - Interact with Atlassian Cloud products (Confluence and Jira) including searching/reading Confluence spaces/pages, accessing Jira issues, and project metadata.\n- **[AWS](https://github.com/rishikavikondala/mcp-server-aws)** - Perform operations on your AWS resources using an LLM.\n- **[AWS Athena](https://github.com/lishenxydlgzs/aws-athena-mcp)** - A MCP server for AWS Athena to run SQL queries on Glue Catalog.\n- **[AWS Cost Explorer](https://github.com/aarora79/aws-cost-explorer-mcp-server)** - Optimize your AWS spend (including Amazon Bedrock spend) with this MCP server by examining spend across regions, services, instance types and foundation models ([demo video](https://www.youtube.com/watch?v=WuVOmYLRFmI&feature=youtu.be)).\n- **[AWS Resources Operations](https://github.com/baryhuang/mcp-server-aws-resources-python)** - Run generated python code to securely query or modify any AWS resources supported by boto3.\n- **[AWS S3](https://github.com/aws-samples/sample-mcp-server-s3)** - A sample MCP server for AWS S3 that flexibly fetches objects from S3 such as PDF documents.\n- **[Azure ADX](https://github.com/pab1it0/adx-mcp-server)** - Query and analyze Azure Data Explorer databases.\n- **[Base Free USDC Transfer](https://github.com/magnetai/mcp-free-usdc-transfer)** - Send USDC on [Base](https://base.org) for free using Claude AI! Built with [Coinbase CDP](https://docs.cdp.coinbase.com/mpc-wallet/docs/welcome).\n* **[Basic Memory](https://github.com/basicmachines-co/basic-memory)** - Local-first knowledge management system that builds a semantic graph from Markdown files, enabling persistent memory across conversations with LLMs.\n- **[BigQuery](https://github.com/LucasHild/mcp-server-bigquery)** (by LucasHild) - This server enables LLMs to inspect database schemas and execute queries on BigQuery.\n- **[BigQuery](https://github.com/ergut/mcp-bigquery-server)** (by ergut) - Server implementation for Google BigQuery integration that enables direct BigQuery database access and querying capabilities\n- **[Bing Web Search API](https://github.com/leehanchung/bing-search-mcp)** (by hanchunglee) - Server implementation for Microsoft Bing Web Search API.\n- **[Bitable MCP](https://github.com/lloydzhou/bitable-mcp)** (by lloydzhou) - MCP server provides access to Lark Bitable through the Model Context Protocol. It allows users to interact with Bitable tables using predefined tools.\n- **[Blender](https://github.com/ahujasid/blender-mcp)** (by ahujasid) - Blender integration allowing prompt enabled 3D scene creation, modeling and manipulation.\n- **[CFBD API](https://github.com/lenwood/cfbd-mcp-server)** - An MCP server for the [College Football Data API](https://collegefootballdata.com/).\n- **[ChatMCP](https://github.com/AI-QL/chat-mcp)** – An Open Source Cross-platform GUI Desktop application compatible with Linux, macOS, and Windows, enabling seamless interaction with MCP servers across dynamically selectable LLMs, by **[AIQL](https://github.com/AI-QL)**\n- **[ChatSum](https://github.com/mcpso/mcp-server-chatsum)** - Query and Summarize chat messages with LLM. by [mcpso](https://mcp.so)\n- **[Chroma](https://github.com/privetin/chroma)** - Vector database server for semantic document search and metadata filtering, built on Chroma\n- **[ClaudePost](https://github.com/ZilongXue/claude-post)** - ClaudePost enables seamless email management for Gmail, offering secure features like email search, reading, and sending.\n- **[Cloudinary](https://github.com/felores/cloudinary-mcp-server)** - Cloudinary Model Context Protocol Server to upload media to Cloudinary and get back the media link and details.\n- **[code-assistant](https://github.com/stippi/code-assistant)** - A coding assistant MCP server that allows to explore a code-base and make changes to code. Should be used with trusted repos only (insufficient protection against prompt injections).\n- **[code-executor](https://github.com/bazinga012/mcp_code_executor)** - An MCP server that allows LLMs to execute Python code within a specified Conda environment.\n- **[code-sandbox-mcp](https://github.com/Automata-Labs-team/code-sandbox-mcp)** - An MCP server to create secure code sandbox environment for executing code within Docker containers.\n- **[cognee-mcp](https://github.com/topoteretes/cognee/tree/main/cognee-mcp)** - GraphRAG memory server with customizable ingestion, data processing and search\n- **[coin_api_mcp](https://github.com/longmans/coin_api_mcp)** - Provides access to [coinmarketcap](https://coinmarketcap.com/) cryptocurrency data.\n- **[Contentful-mcp](https://github.com/ivo-toby/contentful-mcp)** - Read, update, delete, publish content in your [Contentful](https://contentful.com) space(s) from this MCP Server.\n- **[crypto-feargreed-mcp](https://github.com/kukapay/crypto-feargreed-mcp)**  -  Providing real-time and historical Crypto Fear & Greed Index data.\n- **[cryptopanic-mcp-server](https://github.com/kukapay/cryptopanic-mcp-server)** - Providing latest cryptocurrency news to AI agents, powered by CryptoPanic.\n- **[Dappier](https://github.com/DappierAI/dappier-mcp)** - Connect LLMs to real-time, rights-cleared, proprietary data from trusted sources. Access specialized models for Real-Time Web Search, News, Sports, Financial Data, Crypto, and premium publisher content. Explore data models at [marketplace.dappier.com](https://marketplace.dappier.com/marketplace).\n- **[Data Exploration](https://github.com/reading-plus-ai/mcp-server-data-exploration)** - MCP server for autonomous data exploration on .csv-based datasets, providing intelligent insights with minimal effort. NOTE: Will execute arbitrary Python code on your machine, please use with caution!\n- **[Dataset Viewer](https://github.com/privetin/dataset-viewer)** - Browse and analyze Hugging Face datasets with features like search, filtering, statistics, and data export\n- **[DBHub](https://github.com/bytebase/dbhub/)** - Universal database MCP server connecting to MySQL, PostgreSQL, SQLite, DuckDB and etc.\n- **[DeepSeek MCP Server](https://github.com/DMontgomery40/deepseek-mcp-server)** - Model Context Protocol server integrating DeepSeek's advanced language models, in addition to [other useful API endpoints](https://github.com/DMontgomery40/deepseek-mcp-server?tab=readme-ov-file#features)\n- **[Deepseek_R1](https://github.com/66julienmartin/MCP-server-Deepseek_R1)** - A Model Context Protocol (MCP) server implementation connecting Claude Desktop with DeepSeek's language models (R1/V3)\n- **[deepseek-thinker-mcp](https://github.com/ruixingshi/deepseek-thinker-mcp)** - A MCP (Model Context Protocol) provider Deepseek reasoning content to MCP-enabled AI Clients, like Claude Desktop. Supports access to Deepseek's thought processes from the Deepseek API service or from a local Ollama server.\n- **[Descope](https://github.com/descope-sample-apps/descope-mcp-server)** - An MCP server to integrate with [Descope](https://descope.com) to search audit logs, manage users, and more.\n- **[DevRev](https://github.com/kpsunil97/devrev-mcp-server)** - An MCP server to integrate with DevRev APIs to search through your DevRev Knowledge Graph where objects can be imported from diff. sources listed [here](https://devrev.ai/docs/import#available-sources).\n- **[Dicom](https://github.com/ChristianHinge/dicom-mcp)** - An MCP server to query and retrieve medical images and for parsing and reading dicom-encapsulated documents (pdf etc.). \n- **[Dify](https://github.com/YanxingLiu/dify-mcp-server)** - A simple implementation of an MCP server for dify workflows.\n- **[Discord](https://github.com/v-3/discordmcp)** - A MCP server to connect to Discord guilds through a bot and read and write messages in channels\n- **[Discourse](https://github.com/AshDevFr/discourse-mcp-server)** - A MCP server to search Discourse posts on a Discourse forum.\n- **[Docker](https://github.com/ckreiling/mcp-server-docker)** - Integrate with Docker to manage containers, images, volumes, and networks.\n- **[Drupal](https://github.com/Omedia/mcp-server-drupal)** - Server for interacting with [Drupal](https://www.drupal.org/project/mcp) using STDIO transport layer.\n- **[dune-analytics-mcp](https://github.com/kukapay/dune-analytics-mcp)** -  A mcp server that bridges Dune Analytics data to AI agents.\n- **[Elasticsearch](https://github.com/cr7258/elasticsearch-mcp-server)** - MCP server implementation that provides Elasticsearch interaction.\n- **[ElevenLabs](https://github.com/mamertofabian/elevenlabs-mcp-server)** - A server that integrates with ElevenLabs text-to-speech API capable of generating full voiceovers with multiple voices.\n- **[Ergo Blockchain MCP](https://github.com/marctheshark3/ergo-mcp)** -An MCP server to integrate Ergo Blockchain Node and Explorer APIs for checking address balances, analyzing transactions, viewing transaction history, performing forensic analysis of addresses, searching for tokens, and monitoring network status.\n- **[Eunomia](https://github.com/whataboutyou-ai/eunomia-MCP-server)** - Extension of the Eunomia framework that connects Eunomia instruments with MCP servers\n- **[EVM MCP Server](https://github.com/mcpdotdirect/evm-mcp-server)** - Comprehensive blockchain services for 30+ EVM networks, supporting native tokens, ERC20, NFTs, smart contracts, transactions, and ENS resolution.\n- **[Everything Search](https://github.com/mamertofabian/mcp-everything-search)** - Fast file searching capabilities across Windows (using [Everything SDK](https://www.voidtools.com/support/everything/sdk/)), macOS (using mdfind command), and Linux (using locate/plocate command).\n- **[Excel](https://github.com/haris-musa/excel-mcp-server)** - Excel manipulation including data reading/writing, worksheet management, formatting, charts, and pivot table.\n- **[Fantasy PL](https://github.com/rishijatia/fantasy-pl-mcp)** - Give your coding agent direct access to up-to date Fantasy Premier League data\n- **[fastn.ai – Unified API MCP Server](https://github.com/fastnai/mcp-fastn)** - A remote, dynamic MCP server with a unified API that connects to 1,000+ tools, actions, and workflows, featuring built-in authentication and monitoring.\n- **[Fetch](https://github.com/zcaceres/fetch-mcp)** - A server that flexibly fetches HTML, JSON, Markdown, or plaintext.\n- **[Fingertip](https://github.com/fingertip-com/fingertip-mcp)** - MCP server for Fingertip.com to search and create new sites.\n- **[Figma](https://github.com/GLips/Figma-Context-MCP)** - Give your coding agent direct access to Figma file data, helping it one-shot design implementation.\n- **[Firebase](https://github.com/gannonh/firebase-mcp)** - Server to interact with Firebase services including Firebase Authentication, Firestore, and Firebase Storage.\n- **[FireCrawl](https://github.com/vrknetha/mcp-server-firecrawl)** - Advanced web scraping with JavaScript rendering, PDF support, and smart rate limiting\n- **[FlightRadar24](https://github.com/sunsetcoder/flightradar24-mcp-server)** - A Claude Desktop MCP server that helps you track flights in real-time using Flightradar24 data.\n- **[Ghost](https://github.com/MFYDev/ghost-mcp)** - A Model Context Protocol (MCP) server for interacting with Ghost CMS through LLM interfaces like Claude.\n- **[Github Actions](https://github.com/ko1ynnky/github-actions-mcp-server)** - A Model Context Protocol (MCP) server for interacting with Github Actions.\n- **[Glean](https://github.com/longyi1207/glean-mcp-server)** - A server that uses Glean API to search and chat.\n- **[Gmail](https://github.com/GongRzhe/Gmail-MCP-Server)** - A Model Context Protocol (MCP) server for Gmail integration in Claude Desktop with auto authentication support.\n- **[Gmail Headless](https://github.com/baryhuang/mcp-headless-gmail)** - Remote hostable MCP server that can get and send Gmail messages without local credential or file system setup.\n- **[Goal Story](https://github.com/hichana/goalstory-mcp)** - a Goal Tracker and Visualization Tool for personal and professional development.\n- **[GOAT](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-framework/model-context-protocol)** - Run more than +200 onchain actions on any blockchain including Ethereum, Solana and Base.\n- **[Godot](https://github.com/Coding-Solo/godot-mcp)** - A MCP server providing comprehensive Godot engine integration for project editing, debugging, and scene management.\n- **[Golang Filesystem Server](https://github.com/mark3labs/mcp-filesystem-server)** - Secure file operations with configurable access controls built with Go!\n- **[Goodnews](https://github.com/VectorInstitute/mcp-goodnews)** - A simple MCP server that delivers curated positive and uplifting news stories.\n- **[Google Calendar](https://github.com/v-3/google-calendar)** - Integration with Google Calendar to check schedules, find time, and add/delete events\n- **[Google Calendar](https://github.com/nspady/google-calendar-mcp)** - Google Calendar MCP Server for managing Google calendar events. Also supports searching for events by attributes like title and location.\n- **[Google Custom Search](https://github.com/adenot/mcp-google-search)** - Provides Google Search results via the Google Custom Search API\n- **[Google Tasks](https://github.com/zcaceres/gtasks-mcp)** - Google Tasks API Model Context Protocol Server.\n- **[GraphQL Schema](https://github.com/hannesj/mcp-graphql-schema)** - Allow LLMs to explore large GraphQL schemas without bloating the context.\n- **[HDW LinkedIn](https://github.com/horizondatawave/hdw-mcp-server)** - Access to profile data and management of user account with [HorizonDataWave.ai](https://horizondatawave.ai/).\n- **[Heurist Mesh Agent](https://github.com/heurist-network/heurist-mesh-mcp-server)** - Access specialized web3 AI agents for blockchain analysis, smart contract security, token metrics, and blockchain interactions through the [Heurist Mesh network](https://github.com/heurist-network/heurist-agent-framework/tree/main/mesh).\n- **[Holaspirit](https://github.com/syucream/holaspirit-mcp-server)** - Interact with [Holaspirit](https://www.holaspirit.com/).\n- **[Home Assistant](https://github.com/tevonsb/homeassistant-mcp)** - Interact with [Home Assistant](https://www.home-assistant.io/) including viewing and controlling lights, switches, sensors, and all other Home Assistant entities.\n- **[Home Assistant](https://github.com/voska/hass-mcp)** - Docker-ready MCP server for Home Assistant with entity management, domain summaries, automation support, and guided conversations. Includes pre-built container images for easy installation.\n- **[HubSpot](https://github.com/buryhuang/mcp-hubspot)** - HubSpot CRM integration for managing contacts and companies. Create and retrieve CRM data directly through Claude chat.\n- **[HuggingFace Spaces](https://github.com/evalstate/mcp-hfspace)** - Server for using HuggingFace Spaces, supporting Open Source Image, Audio, Text Models and more. Claude Desktop mode for easy integration.\n- **[Hyperliquid](https://github.com/mektigboy/server-hyperliquid)** - An MCP server implementation that integrates the Hyperliquid SDK for exchange data.\n- **[Image Generation](https://github.com/GongRzhe/Image-Generation-MCP-Server)** - This MCP server provides image generation capabilities using the Replicate Flux model.\n- **[InfluxDB](https://github.com/idoru/influxdb-mcp-server)** - Run queries against InfluxDB OSS API v2.\n- **[Inoyu](https://github.com/sergehuber/inoyu-mcp-unomi-server)** - Interact with an Apache Unomi CDP customer data platform to retrieve and update customer profiles\n- **[Intercom](https://github.com/raoulbia-ai/mcp-server-for-intercom)** - An MCP-compliant server for retrieving customer support tickets from Intercom. This tool enables AI assistants like Claude Desktop and Cline to access and analyze your Intercom support tickets.\n- **[iTerm MCP](https://github.com/ferrislucas/iterm-mcp)** - Integration with iTerm2 terminal emulator for macOS, enabling LLMs to execute and monitor terminal commands.\n- **[JavaFX](https://github.com/mcpso/mcp-server-javafx)** - Make drawings using a JavaFX canvas\n- **[JDBC](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc)** - Connect to any JDBC-compatible database and query, insert, update, delete, and more. Supports MySQL, PostgreSQL, Oracle, SQL Server, sqllite and [more](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc#supported-jdbc-variants).\n- **[JSON](https://github.com/GongRzhe/JSON-MCP-Server)** - JSON handling and processing server with advanced query capabilities using JSONPath syntax and support for array, string, numeric, and date operations.\n- **[Keycloak MCP](https://github.com/ChristophEnglisch/keycloak-model-context-protocol)** - This MCP server enables natural language interaction with Keycloak for user and realm management including creating, deleting, and listing users and realms.\n- **[Kibela](https://github.com/kiwamizamurai/mcp-kibela-server)** (by kiwamizamurai) - Interact with Kibela API.\n- **[kintone](https://github.com/macrat/mcp-server-kintone)** - Manage records and apps in [kintone](https://kintone.com) through LLM tools.\n- **[Kubernetes](https://github.com/Flux159/mcp-server-kubernetes)** - Connect to Kubernetes cluster and manage pods, deployments, and services.\n- **[Kubernetes and OpenShift](https://github.com/manusa/kubernetes-mcp-server)** - A powerful Kubernetes MCP server with additional support for OpenShift. Besides providing CRUD operations for any Kubernetes resource, this server provides specialized tools to interact with your cluster.\n- **[Langflow-DOC-QA-SERVER](https://github.com/GongRzhe/Langflow-DOC-QA-SERVER)** - A Model Context Protocol server for document Q&A powered by Langflow. It demonstrates core MCP concepts by providing a simple interface to query documents through a Langflow backend.\n- **[Lightdash](https://github.com/syucream/lightdash-mcp-server)** - Interact with [Lightdash](https://www.lightdash.com/), a BI tool.\n- **[Linear](https://github.com/jerhadf/linear-mcp-server)** - Allows LLM to interact with Linear's API for project management, including searching, creating, and updating issues.\n- **[Linear (Go)](https://github.com/geropl/linear-mcp-go)** - Allows LLM to interact with Linear's API via a single static binary.\n- **[LINE](https://github.com/amornpan/py-mcp-line)** (by amornpan) - Implementation for LINE Bot integration that enables Language Models to read and analyze LINE conversations through a standardized interface. Features asynchronous operation, comprehensive logging, webhook event handling, and support for various message types.\n- **[LlamaCloud](https://github.com/run-llama/mcp-server-llamacloud)** (by marcusschiesser) - Integrate the data stored in a managed index on [LlamaCloud](https://cloud.llamaindex.ai/)\n- **[llm-context](https://github.com/cyberchitta/llm-context.py)** - Provides a repo-packing MCP tool with configurable profiles that specify file inclusion/exclusion patterns and optional prompts.\n- **[mac-messages-mcp](https://github.com/carterlasalle/mac_messages_mcp)** - An MCP server that securely interfaces with your iMessage database via the Model Context Protocol (MCP), allowing LLMs to query and analyze iMessage conversations. It includes robust phone number validation, attachment processing, contact management, group chat handling, and full support for sending and receiving messages.\n- **[MariaDB](https://github.com/abel9851/mcp-server-mariadb)** - MariaDB database integration with configurable access controls in Python.\n- **[MCP Compass](https://github.com/liuyoshio/mcp-compass)** - Suggest the right MCP server for your needs\n- **[MCP Create](https://github.com/tesla0225/mcp-create)** - A dynamic MCP server management service that creates, runs, and manages Model Context Protocol servers on-the-fly.\n- **[MCP Installer](https://github.com/anaisbetts/mcp-installer)** - This server is a server that installs other MCP servers for you.\n- **[mcp-k8s-go](https://github.com/strowk/mcp-k8s-go)** - Golang-based Kubernetes server for MCP to browse pods and their logs, events, namespaces and more. Built to be extensible.\n- **[mcp-local-rag](https://github.com/nkapila6/mcp-local-rag)** - \"primitive\" RAG-like web search model context protocol (MCP) server that runs locally using Google's MediaPipe Text Embedder and DuckDuckGo Search. ✨ no APIs required ✨.\n- **[mcp-proxy](https://github.com/sparfenyuk/mcp-proxy)** - Connect to MCP servers that run on SSE transport, or expose stdio servers as an SSE server.\n- **[mem0-mcp](https://github.com/mem0ai/mem0-mcp)** - A Model Context Protocol server for Mem0, which helps with managing coding preferences.\n- **[MSSQL](https://github.com/aekanun2020/mcp-server/)** - MSSQL database integration with configurable access controls and schema inspection\n- **[MSSQL](https://github.com/JexinSam/mssql_mcp_server)** (by jexin) - MCP Server for MSSQL database in Python\n- **[MSSQL-Python](https://github.com/amornpan/py-mcp-mssql)** (by amornpan) - A read-only Python implementation for MSSQL database access with enhanced security features, configurable access controls, and schema inspection capabilities. Focuses on safe database interaction through Python ecosystem.\n- **[MSSQL-MCP](https://github.com/daobataotie/mssql-mcp)** (by daobataotie) - MSSQL MCP that refer to the official website's SQLite MCP for modifications to adapt to MSSQL\n- **[Markdownify](https://github.com/zcaceres/mcp-markdownify-server)** - MCP to convert almost anything to Markdown (PPTX, HTML, PDF, Youtube Transcripts and more)\n- **[Mindmap](https://github.com/YuChenSSR/mindmap-mcp-server)** (by YuChenSSR) - A server that generates mindmaps from input containing markdown code.\n- **[Minima](https://github.com/dmayboroda/minima)** - MCP server for RAG on local files\n- **[MongoDB](https://github.com/kiliczsh/mcp-mongo-server)** - A Model Context Protocol Server for MongoDB.\n- **[MongoDB Lens](https://github.com/furey/mongodb-lens)** - Full Featured MCP Server for MongoDB Databases.\n- **[Monday.com](https://github.com/sakce/mcp-server-monday)** - MCP Server to interact with Monday.com boards and items.\n- **[Multicluster-MCP-Sever](https://github.com/yanmxa/multicluster-mcp-server)** - The gateway for GenAI systems to interact with multiple Kubernetes clusters.\n- **[MySQL](https://github.com/benborla/mcp-server-mysql)** (by benborla) - MySQL database integration in NodeJS with configurable access controls and schema inspection\n- **[MySQL](https://github.com/designcomputer/mysql_mcp_server)** (by DesignComputer) - MySQL database integration in Python with configurable access controls and schema inspection\n- **[n8n](https://github.com/leonardsellem/n8n-mcp-server)** - This MCP server provides tools and resources for AI assistants to manage n8n workflows and executions, including listing, creating, updating, and deleting workflows, as well as monitoring their execution status.\n- **[NASA](https://github.com/ProgramComputer/NASA-MCP-server)** (by ProgramComputer) - Access to a unified gateway of NASA's data sources including but not limited to APOD, NEO, EPIC, GIBS.\n- **[NAVER](https://github.com/pfldy2850/py-mcp-naver)** (by pfldy2850) - This MCP server provides tools to interact with various Naver services, such as searching blogs, news, books, and more.\n- **[NS Travel Information](https://github.com/r-huijts/ns-mcp-server)** - Access Dutch Railways (NS) real-time train travel information and disruptions through the official NS API.\n- **[Neo4j](https://github.com/da-okazaki/mcp-neo4j-server)** - A community built server that interacts with Neo4j Graph Database.\n- **[Neovim](https://github.com/bigcodegen/mcp-neovim-server)** - An MCP Server for your Neovim session.\n- **[Notion](https://github.com/suekou/mcp-notion-server)** (by suekou) - Interact with Notion API.\n- **[Notion](https://github.com/v-3/notion-server)** (by v-3) - Notion MCP integration. Search, Read, Update, and Create pages through Claude chat.\n- **[ntfy-mcp](https://github.com/teddyzxcv/ntfy-mcp)** (by teddyzxcv) - The MCP server that keeps you informed by sending the notification on phone using ntfy\n- **[oatpp-mcp](https://github.com/oatpp/oatpp-mcp)** - C++ MCP integration for Oat++. Use [Oat++](https://oatpp.io) to build MCP servers.\n- **[Obsidian Markdown Notes](https://github.com/calclavia/mcp-obsidian)** - Read and search through your Obsidian vault or any directory containing Markdown notes\n- **[obsidian-mcp](https://github.com/StevenStavrakis/obsidian-mcp)** - (by Steven Stavrakis) An MCP server for Obsidian.md with tools for searching, reading, writing, and organizing notes.\n- **[OceanBase](https://github.com/yuanoOo/oceanbase_mcp_server)** - (by yuanoOo) A Model Context Protocol (MCP) server that enables secure interaction with OceanBase databases.\n- **[Okta](https://github.com/kapilduraphe/okta-mcp-server)** - Interact with Okta API.\n- **[OneNote](https://github.com/rajvirtual/MCP-Servers/tree/master/onenote)** - (by Rajesh Vijay) An MCP server that connects to Microsoft OneNote using the Microsoft Graph API. Reading notebooks, sections, and pages from OneNote,Creating new notebooks, sections, and pages in OneNote.\n- **[OpenAI WebSearch MCP](https://github.com/ConechoAI/openai-websearch-mcp)** - This is a Python-based MCP server that provides OpenAI `web_search` build-in tool.\n- **[OpenAPI](https://github.com/snaggle-ai/openapi-mcp-server)** - Interact with [OpenAPI](https://www.openapis.org/) APIs.\n- **[OpenAPI AnyApi](https://github.com/baryhuang/mcp-server-any-openapi)** - Interact with large [OpenAPI](https://www.openapis.org/) docs using built-in semantic search for endpoints. Allows for customizing the MCP server prefix.\n- **[OpenAPI Schema](https://github.com/hannesj/mcp-openapi-schema)** - Allow LLMs to explore large [OpenAPI](https://www.openapis.org/) schemas without bloating the context.\n- **[OpenCTI](https://github.com/Spathodea-Network/opencti-mcp)** - Interact with OpenCTI platform to retrieve threat intelligence data including reports, indicators, malware and threat actors.\n- **[OpenDota](https://github.com/asusevski/opendota-mcp-server)** - Interact with OpenDota API to retrieve Dota 2 match data, player statistics, and more.\n- **[OpenRPC](https://github.com/shanejonas/openrpc-mpc-server)** - Interact with and discover JSON-RPC APIs via [OpenRPC](https://open-rpc.org).\n- **[Open Strategy Partners Marketing Tools](https://github.com/open-strategy-partners/osp_marketing_tools)** - Content editing codes, value map, and positioning tools for product marketing.\n- **[Pandoc](https://github.com/vivekVells/mcp-pandoc)** - MCP server for seamless document format conversion using Pandoc, supporting Markdown, HTML, PDF, DOCX (.docx), csv and more.\n- **[PIF](https://github.com/hungryrobot1/MCP-PIF)** - A Personal Intelligence Framework (PIF), providing tools for file operations, structured reasoning, and journal-based documentation to support continuity and evolving human-AI collaboration across sessions.\n- **[Pinecone](https://github.com/sirmews/mcp-pinecone)** - MCP server for searching and uploading records to Pinecone. Allows for simple RAG features, leveraging Pinecone's Inference API.\n- **[Placid.app](https://github.com/felores/placid-mcp-server)** - Generate image and video creatives using Placid.app templates\n- **[Playwright](https://github.com/executeautomation/mcp-playwright)** - This MCP Server will help you run browser automation and webscraping using Playwright\n- **[Postman](https://github.com/shannonlal/mcp-postman)** - MCP server for running Postman Collections locally via Newman. Allows for simple execution of Postman Server and returns the results of whether the collection passed all the tests.\n- **[Productboard](https://github.com/kenjihikmatullah/productboard-mcp)** - Integrate the Productboard API into agentic workflows via MCP.\n- **[Prometheus](https://github.com/pab1it0/prometheus-mcp-server)** - Query and analyze Prometheus - open-source monitoring system.\n- **[Pulumi](https://github.com/dogukanakkaya/pulumi-mcp-server)** - MCP Server to Interact with Pulumi API, creates and lists Stacks\n- **[Pushover](https://github.com/ashiknesin/pushover-mcp)** - Send instant notifications to your devices using [Pushover.net](https://pushover.net/)\n- **[QGIS](https://github.com/jjsantos01/qgis_mcp)** - connects QGIS to Claude AI through the MCP. This integration enables prompt-assisted project creation, layer loading, code execution, and more.\n- **[QuickChart](https://github.com/GongRzhe/Quickchart-MCP-Server)** - A Model Context Protocol server for generating charts using QuickChart.io\n- **[Qwen_Max](https://github.com/66julienmartin/MCP-server-Qwen_Max)** - A Model Context Protocol (MCP) server implementation for the Qwen models.\n- **[RabbitMQ](https://github.com/kenliao94/mcp-server-rabbitmq)** - The MCP server that interacts with RabbitMQ to publish and consume messages.\n- **[RAG Web Browser](https://github.com/apify/mcp-server-rag-web-browser)** An MCP server for Apify's open-source RAG Web Browser [Actor](https://apify.com/apify/rag-web-browser) to perform web searches, scrape URLs, and return content in Markdown.\n- **[Reaper](https://github.com/dschuler36/reaper-mcp-server)** - Interact with your [Reaper](https://www.reaper.fm/) (Digital Audio Workstation) projects.\n- **[Redis](https://github.com/GongRzhe/REDIS-MCP-Server)** - Redis database operations and caching microservice server with support for key-value operations, expiration management, and pattern-based key listing.\n- **[Redis](https://github.com/prajwalnayak7/mcp-server-redis)** MCP server to interact with Redis Server, AWS Memory DB, etc for caching or other use-cases where in-memory and key-value based storage is appropriate\n- **[Rememberizer AI](https://github.com/skydeckai/mcp-server-rememberizer)** - An MCP server designed for interacting with the Rememberizer data source, facilitating enhanced knowledge retrieval.\n- **[Replicate](https://github.com/deepfates/mcp-replicate)** - Search, run and manage machine learning models on Replicate through a simple tool-based interface. Browse models, create predictions, track their status, and handle generated images.\n- **[Rquest](https://github.com/xxxbrian/mcp-rquest)** - An MCP server providing realistic browser-like HTTP request capabilities with accurate TLS/JA3/JA4 fingerprints for bypassing anti-bot measures.\n- **[Rijksmuseum](https://github.com/r-huijts/rijksmuseum-mcp)** - Interface with the Rijksmuseum API to search artworks, retrieve artwork details, access image tiles, and explore user collections.\n- **[Salesforce MCP](https://github.com/smn2gnt/MCP-Salesforce)** - Interact with Salesforce Data and Metadata\n- **[Scholarly](https://github.com/adityak74/mcp-scholarly)** - A MCP server to search for scholarly and academic articles.\n- **[scrapling-fetch](https://github.com/cyberchitta/scrapling-fetch-mcp)** - Access text content from bot-protected websites. Fetches HTML/markdown from sites with anti-automation measures using Scrapling.\n- **[SearXNG](https://github.com/ihor-sokoliuk/mcp-searxng)** - A Model Context Protocol Server for [SearXNG](https://docs.searxng.org)\n- **[ServiceNow](https://github.com/osomai/servicenow-mcp)** - A MCP server to interact with a ServiceNow instance\n- **[Siri Shortcuts](https://github.com/dvcrn/mcp-server-siri-shortcuts)** - MCP to interact with Siri Shortcuts on macOS. Exposes all Shortcuts as MCP tools.\n- **[Snowflake](https://github.com/isaacwasserman/mcp-snowflake-server)** - This MCP server enables LLMs to interact with Snowflake databases, allowing for secure and controlled data operations.\n- **[Solana Agent Kit](https://github.com/sendaifun/solana-agent-kit/tree/main/examples/agent-kit-mcp-server)** - This MCP server enables LLMs to interact with the Solana blockchain with help of Solana Agent Kit by SendAI, allowing for 40+ protcool actions and growing\n- **[Spotify](https://github.com/varunneal/spotify-mcp)** - This MCP allows an LLM to play and use Spotify.\n- **[Starwind UI](https://github.com/Boston343/starwind-ui-mcp/)** - This MCP provides relevant commands, documentation, and other information to allow LLMs to take full advantage of Starwind UI's open source Astro components.\n- **[Stripe](https://github.com/atharvagupta2003/mcp-stripe)** - This MCP allows integration with Stripe for handling payments, customers, and refunds.\n- **[TMDB](https://github.com/Laksh-star/mcp-server-tmdb)** - This MCP server integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.\n- **[Tavily search](https://github.com/RamXX/mcp-tavily)** - An MCP server for Tavily's search & news API, with explicit site inclusions/exclusions\n- **[Terminal-Control](https://github.com/GongRzhe/terminal-controller-mcp)** - A MCP server that enables secure terminal command execution, directory navigation, and file system operations through a standardized interface.\n- **[Ticketmaster](https://github.com/delorenj/mcp-server-ticketmaster)** - Search for events, venues, and attractions through the Ticketmaster Discovery API\n- **[Todoist](https://github.com/abhiz123/todoist-mcp-server)** - Interact with Todoist to manage your tasks.\n- **[Typesense](https://github.com/suhail-ak-s/mcp-typesense-server)** - A Model Context Protocol (MCP) server implementation that provides AI models with access to Typesense search capabilities. This server enables LLMs to discover, search, and analyze data stored in Typesense collections.\n- **[Travel Planner](https://github.com/GongRzhe/TRAVEL-PLANNER-MCP-Server)** - Travel planning and itinerary management server integrating with Google Maps API for location search, place details, and route calculations.\n- **[Unity Catalog](https://github.com/ognis1205/mcp-server-unitycatalog)** - An MCP server that enables LLMs to interact with Unity Catalog AI, supporting CRUD operations on Unity Catalog Functions and executing them as MCP tools.\n- **[Unity3d Game Engine](https://github.com/CoderGamester/mcp-unity)** - An MCP server that enables LLMs to interact with Unity3d Game Engine, supporting access to a variety of the Unit's Editor engine tools (e.g. Console Logs, Test Runner logs, Editor functions, hierarchy state, etc) and executing them as MCP tools or gather them as resources.\n- **[Unity Integration (Advanced)](https://github.com/quazaai/UnityMCPIntegration)** - Advanced Unity3d Game Engine MCP which supports ,Execution of Any Editor Related Code Directly Inside of Unity, Fetch Logs, Get Editor State and Allow File Access of the Project making it much more useful in Script Editing or asset creation.\n- **[Vega-Lite](https://github.com/isaacwasserman/mcp-vegalite-server)** - Generate visualizations from fetched data using the VegaLite format and renderer.\n- **[Video Editor](https://github.com/burningion/video-editing-mcp)** - A Model Context Protocol Server to add, edit, and search videos with [Video Jungle](https://www.video-jungle.com/).\n- **[Virtual location (Google Street View,etc.)](https://github.com/mfukushim/map-traveler-mcp)** - Integrates Google Map, Google Street View, PixAI, Stability.ai, ComfyUI API and Bluesky to provide a virtual location simulation in LLM (written in Effect.ts)\n- **[VolcEngine TOS](https://github.com/dinghuazhou/sample-mcp-server-tos)** - A sample MCP server for VolcEngine TOS that flexibly get objects from TOS.\n- **[Wanaku MCP Router](https://github.com/wanaku-ai/wanaku/)** - The Wanaku MCP Router is a SSE-based MCP server that provides an extensible routing engine that allows integrating your enterprise systems with AI agents.\n- **[Webflow](https://github.com/kapilduraphe/webflow-mcp-server)** - Interfact with the Webflow APIs\n- **[whale-tracker-mcp](https://github.com/kukapay/whale-tracker-mcp)**  -  A mcp server for tracking cryptocurrency whale transactions. \n- **[Whois MCP](https://github.com/bharathvaj-ganesan/whois-mcp)** - MCP server that performs whois lookup against domain, IP, ASN and TLD. \n- **[WildFly MCP](https://github.com/wildfly-extras/wildfly-mcp)** - WildFly MCP server that enables LLM to interact with running WildFly servers (retrieve metrics, logs, invoke operations, ...).\n- **[Windows CLI](https://github.com/SimonB97/win-cli-mcp-server)** - MCP server for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, and Git Bash shells.\n- **[World Bank data API](https://github.com/anshumax/world_bank_mcp_server)** - A server that fetches data indicators available with the World Bank as part of their data API\n- **[X (Twitter)](https://github.com/EnesCinr/twitter-mcp)** (by EnesCinr) - Interact with twitter API. Post tweets and search for tweets by query.\n- **[X (Twitter)](https://github.com/vidhupv/x-mcp)** (by vidhupv) - Create, manage and publish X/Twitter posts directly through Claude chat.\n- **[xcodebuild](https://github.com/ShenghaiWang/xcodebuild)**  - 🍎 Build iOS Xcode workspace/project and feed back errors to llm.\n- **[Xero-mcp-server](https://github.com/john-zhang-dev/xero-mcp)** - Enabling clients to interact with Xero system for streamlined accounting, invoicing, and business operations.\n- **[xiyan_mcp_server](https://github.com/XGenerationLab/xiyan_mcp_server)** An MCP server that supports fetching data from a database using natural language queries, powered by XiyanSQL as the text-to-SQL LLM.\n- **[XMind](https://github.com/apeyroux/mcp-xmind)** - Read and search through your XMind directory containing XMind files.\n- **[YouTube](https://github.com/ZubeidHendricks/youtube-mcp-server)** - Comprehensive YouTube API integration for video management, Shorts creation, and analytics.\n\n## 📚 Frameworks\n\nThese are high-level frameworks that make it easier to build MCP servers or clients.\n\n### For servers\n\n* **[EasyMCP](https://github.com/zcaceres/easy-mcp/)** (TypeScript)\n- **[FastAPI to MCP auto generator](https://github.com/tadata-org/fastapi_mcp)** – A zero-configuration tool for automatically exposing FastAPI endpoints as MCP tools by **[Tadata](https://tadata.com/)**\n* **[FastMCP](https://github.com/punkpeye/fastmcp)** (TypeScript)\n* **[Foxy Contexts](https://github.com/strowk/foxy-contexts)** – A library to build MCP servers in Golang by **[strowk](https://github.com/strowk)**\n* **[MCP-Framework](https://mcp-framework.com)** Build MCP servers with elegance and speed in Typescript. Comes with a CLI to create your project with `mcp create app`. Get started with your first server in under 5 minutes by **[Alex Andru](https://github.com/QuantGeekDev)**\n* **[Quarkus MCP Server SDK](https://github.com/quarkiverse/quarkus-mcp-server)** (Java)\n* **[Template MCP Server](https://github.com/mcpdotdirect/template-mcp-server)** - A CLI tool to create a new Model Context Protocol server project with TypeScript support, dual transport options, and an extensible structure\n\n### For clients\n\n* **[codemirror-mcp](https://github.com/marimo-team/codemirror-mcp)** - CodeMirror extension that implements the Model Context Protocol (MCP) for resource mentions and prompt commands\n\n## 📚 Resources\n\nAdditional resources on MCP.\n\n- **[AiMCP](https://www.aimcp.info)** - A collection of MCP clients&servers to find the right mcp tools by **[Hekmon](https://github.com/hekmon8)**\n- **[Awesome Crypto MCP Servers by badkk](https://github.com/badkk/awesome-crypto-mcp-servers)** - A curated list of MCP servers by **[Luke Fan](https://github.com/badkk)**\n- **[Awesome MCP Servers by appcypher](https://github.com/appcypher/awesome-mcp-servers)** - A curated list of MCP servers by **[Stephen Akinyemi](https://github.com/appcypher)**\n- **[Awesome MCP Servers by punkpeye](https://github.com/punkpeye/awesome-mcp-servers)** (**[website](https://glama.ai/mcp/servers)**) - A curated list of MCP servers by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Awesome MCP Servers by wong2](https://github.com/wong2/awesome-mcp-servers)** (**[website](https://mcpservers.org)**) - A curated list of MCP servers by **[wong2](https://github.com/wong2)**\n- **[Discord Server](https://glama.ai/mcp/discord)** – A community discord server dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Discord Server (ModelContextProtocol)](https://discord.gg/jHEGxQu2a5)** – Connect with developers, share insights, and collaborate on projects in an active Discord community dedicated to the Model Context Protocol by **[Alex Andru](https://github.com/QuantGeekDev)**\n\n- **[MCP Badges](https://github.com/mcpx-dev/mcp-badges)** – Quickly highlight your MCP project with clear, eye-catching badges, by **[Ironben](https://github.com/nanbingxyz)**\n- **[MCP Servers Hub](https://github.com/apappascs/mcp-servers-hub)** (**[website](https://mcp-servers-hub-website.pages.dev/)**) - A curated list of MCP servers by **[apappascs](https://github.com/apappascs)**\n- **[MCP X Community](https://x.com/i/communities/1861891349609603310)** – A X community for MCP by **[Xiaoyi](https://x.com/chxy)**\n- **[mcp-cli](https://github.com/wong2/mcp-cli)** - A CLI inspector for the Model Context Protocol by **[wong2](https://github.com/wong2)**\n- **[mcp-get](https://mcp-get.com)** - Command line tool for installing and managing MCP servers by **[Michael Latman](https://github.com/michaellatman)**\n- **[mcp-guardian](https://github.com/eqtylab/mcp-guardian)** - GUI application + tools for proxying / managing control of MCP servers by **[EQTY Lab](https://eqtylab.io)**\n- **[mcp-manager](https://github.com/zueai/mcp-manager)** - Simple Web UI to install and manage MCP servers for Claude Desktop by **[Zue](https://github.com/zueai)**\n- **[MCPHub](https://github.com/Jeamee/MCPHub-Desktop)** – An Open Source MacOS & Windows GUI Desktop app for discovering, installing and managing MCP servers by **[Jeamee](https://github.com/jeamee)**\n- **[mcp.run](https://mcp.run)** - A hosted registry and control plane to install & run secure + portable MCP Servers.\n- **[mcp-dockmaster](https://mcp-dockmaster.com)** - An Open-Sourced UI to install and manage MCP servers for Windows, Linux and MacOS.\n- <img height=\"12\" width=\"12\" src=\"https://mkinf.io/favicon-lilac.png\" alt=\"mkinf Logo\" /> **[mkinf](https://mkinf.io)** - An Open Source registry of hosted MCP Servers to accelerate AI agent workflows.\n- **[Open-Sourced MCP Servers Directory](https://github.com/chatmcp/mcp-directory)** - A curated list of MCP servers by **[mcpso](https://mcp.so)**\n- <img height=\"12\" width=\"12\" src=\"https://opentools.com/favicon.ico\" alt=\"OpenTools Logo\" /> **[OpenTools](https://opentools.com)** - An open registry for finding, installing, and building with MCP servers by **[opentoolsteam](https://github.com/opentoolsteam)**\n- **[PulseMCP](https://www.pulsemcp.com)** ([API](https://www.pulsemcp.com/api)) - Community hub & weekly newsletter for discovering MCP servers, clients, articles, and news by **[Tadas Antanavicius](https://github.com/tadasant)**, **[Mike Coughlin](https://github.com/macoughl)**, and **[Ravina Patel](https://github.com/ravinahp)**\n- **[r/mcp](https://www.reddit.com/r/mcp)** – A Reddit community dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[r/modelcontextprotocol](https://www.reddit.com/r/modelcontextprotocol)** – A Model Context Protocol community Reddit page - discuss ideas, get answers to your questions, network with like-minded people, and showcase your projects! by **[Alex Andru](https://github.com/QuantGeekDev)**\n\n\n- **[Smithery](https://smithery.ai/)** - A registry of MCP servers to find the right tools for your LLM agents by **[Henry Mao](https://github.com/calclavia)**\n- **[Toolbase](https://gettoolbase.ai)** - Desktop application that manages tools and MCP servers with just a few clicks - no coding required by **[gching](https://github.com/gching)**\n\n## 🚀 Getting Started\n\n### Using MCP Servers in this Repository\nTypescript-based servers in this repository can be used directly with `npx`.\n\nFor example, this will start the [Memory](src/memory) server:\n```sh\nnpx -y @modelcontextprotocol/server-memory\n```\n\nPython-based servers in this repository can be used directly with [`uvx`](https://docs.astral.sh/uv/concepts/tools/) or [`pip`](https://pypi.org/project/pip/). `uvx` is recommended for ease of use and setup.\n\nFor example, this will start the [Git](src/git) server:\n```sh\n# With uvx\nuvx mcp-server-git\n\n# With pip\npip install mcp-server-git\npython -m mcp_server_git\n```\n\nFollow [these](https://docs.astral.sh/uv/getting-started/installation/) instructions to install `uv` / `uvx` and [these](https://pip.pypa.io/en/stable/installation/) to install `pip`.\n\n### Using an MCP Client\nHowever, running a server on its own isn't very useful, and should instead be configured into an MCP client. For example, here's the Claude Desktop configuration to use the above server:\n\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-memory\"]\n    }\n  }\n}\n```\n\nAdditional examples of using the Claude Desktop as an MCP client might look like:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/path/to/allowed/files\"]\n    },\n    \"git\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-git\", \"--repository\", \"path/to/git/repo\"]\n    },\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    },\n    \"postgres\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\", \"postgresql://localhost/mydb\"]\n    }\n  }\n}\n```\n\n## 🛠️ Creating Your Own Server\n\nInterested in creating your own MCP server? Visit the official documentation at [modelcontextprotocol.io](https://modelcontextprotocol.io/introduction) for comprehensive guides, best practices, and technical details on implementing MCP servers.\n\n## 🤝 Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributing to this repository.\n\n## 🔒 Security\n\nSee [SECURITY.md](SECURITY.md) for reporting security vulnerabilities.\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 💬 Community\n\n- [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions)\n\n## ⭐ Support\n\nIf you find MCP servers useful, please consider starring the repository and contributing new servers or improvements!\n\n---\n\nManaged by Anthropic, but built together with the community. The Model Context Protocol is open source and we encourage everyone to contribute their own servers and improvements!\n",
      "npm_url": "https://www.npmjs.com/package/servers",
      "npm_downloads": 2441,
      "keywords": [
        "git",
        "github",
        "lowkeyrd",
        "git workflow",
        "management lowkeyrd",
        "lowkeyrd servers"
      ],
      "category": "git-workflow-management"
    },
    "mcollina--mcp-github-notifications": {
      "owner": "mcollina",
      "name": "mcp-github-notifications",
      "url": "https://github.com/mcollina/mcp-github-notifications",
      "imageUrl": "/freedevtools/mcp/pfp/mcollina.webp",
      "description": "Manage GitHub notifications with natural language commands, enabling users to list, read, and organize notifications efficiently. Control repository-specific settings and automate notification management to streamline workflows.",
      "stars": 16,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-11T20:21:20Z",
      "readme_content": "# GitHub Notifications MCP Server\n\nAn MCP (Model Context Protocol) server that provides tools for managing GitHub notifications. This server allows AI assistants like Claude to help you manage your GitHub notifications through natural language commands.\n\n## Features\n\n- List and filter your GitHub notifications\n- Mark notifications as read\n- View notification thread details\n- Subscribe or unsubscribe from notification threads\n- Mark threads as done\n- Manage repository-specific notifications\n- Control repository notification settings (all activity, default, or mute)\n\n## Prerequisites\n\n- Node.js 18 or higher\n- GitHub Personal Access Token (classic) with `notifications` or `repo` scope\n\n## Installation\n\n1. Clone this repository\n   ```\n   git clone https://github.com/yourusername/github-notifications-mcp-server.git\n   cd github-notifications-mcp-server\n   ```\n\n2. Install dependencies\n   ```\n   npm install\n   ```\n\n3. Build the project\n   ```\n   npm run build\n   ```\n\n4. Create a `.env` file with your GitHub token\n   ```\n   GITHUB_TOKEN=your_github_personal_access_token_here\n   ```\n\n## Usage\n\n### Running the server directly\n\n```\nnpm start\n```\n\n### Using with Claude Desktop\n\nAdd the server to your `claude_desktop_config.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"github-notifications\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/github-notifications-mcp-server/build/index.js\"],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"your_github_personal_access_token_here\"\n      }\n    }\n  }\n}\n```\n\n## Available Tools\n\n| Tool Name | Description |\n|-----------|-------------|\n| `list-notifications` | List all GitHub notifications for the authenticated user |\n| `mark-notifications-read` | Mark all notifications as read |\n| `get-thread` | Get information about a notification thread |\n| `mark-thread-read` | Mark a specific thread as read |\n| `mark-thread-done` | Mark a thread as done |\n| `get-thread-subscription` | Get subscription status for a thread |\n| `set-thread-subscription` | Subscribe to a thread |\n| `delete-thread-subscription` | Unsubscribe from a thread |\n| `list-repo-notifications` | List notifications for a specific repository |\n| `mark-repo-notifications-read` | Mark notifications for a repository as read |\n| `manage-repo-subscription` | Manage repository subscriptions: all_activity, default (participating and @mentions), or ignore (mute) |\n\n## Example Prompts\n\nHere are some example prompts you can use with Claude Desktop once the server is connected:\n\n- \"Can you check my GitHub notifications?\"\n- \"Show me my unread notifications from the last 24 hours.\"\n- \"Mark all my notifications as read.\"\n- \"Can you tell me about notification thread 12345?\"\n- \"Unsubscribe me from thread 12345.\"\n- \"What notifications do I have for the octocat/Hello-World repository?\"\n- \"Mark all notifications from the octocat/Hello-World repository as read.\"\n- \"Watch all activity on the octocat/Hello-World repository.\"\n- \"Set the octocat/Hello-World repository to default settings (participating and @mentions).\"\n- \"Check my notification settings for the octocat/Hello-World repository.\"\n- \"Mute all notifications from the octocat/Hello-World repository.\"\n\n## Development\n\n### URL Handling\n\nThis server automatically converts GitHub API URLs to their corresponding web UI URLs. For example:\n\n- API URL: `https://api.github.com/repos/nodejs/node/pulls/57557`\n- Converted to: `https://github.com/nodejs/node/pull/57557`\n\nThe conversion handles:\n- Domain conversion from `api.github.com/repos` to `github.com`\n- Path correction for pull requests (changing `pulls` to `pull`)\n- Preservation of additional path segments\n\n### Project Structure\n\n```\ngithub-notifications-mcp-server/\n├── src/                    # Source code\n│   ├── tools/              # Tool implementations\n│   ├── types/              # Type definitions\n│   ├── utils/              # Utility functions\n│   ├── index.ts            # Entry point\n│   └── server.ts           # Server configuration\n├── build/                  # Compiled JavaScript\n├── .env                    # Environment variables\n├── package.json            # Dependencies\n├── tsconfig.json           # TypeScript configuration\n└── README.md               # Documentation\n```\n\n### Building\n\n```\nnpm run build\n```\n\n### Testing\n\nRun the automated tests:\n\n```\nnpm test\n```\n\nTest URL conversion manually:\n\n```\nnpm run test:url\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflows",
        "github notifications",
        "git workflow",
        "manage github"
      ],
      "category": "git-workflow-management"
    },
    "mehmetakinn--gitlab-mcp-code-review": {
      "owner": "mehmetakinn",
      "name": "gitlab-mcp-code-review",
      "url": "https://github.com/mehmetakinn/gitlab-mcp-code-review",
      "imageUrl": "/freedevtools/mcp/pfp/mehmetakinn.webp",
      "description": "Enables AI assistants to perform code reviews on GitLab merge requests by accessing diffs, commits, comments, and managing reviews through the GitLab API. Facilitates seamless interaction with development environments for enhanced code review workflows.",
      "stars": 33,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-30T10:06:18Z",
      "readme_content": "# GitLab MCP for Code Review\n\n[![Python 3.10+](https://img.shields.io/badge/python-3.10+-blue.svg)](https://www.python.org/downloads/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n> This project is forked from [cayirtepeomer/gerrit-code-review-mcp](https://github.com/cayirtepeomer/gerrit-code-review-mcp) and adapted for GitLab integration.\n\nAn MCP (Model Context Protocol) server for integrating AI assistants like Claude with GitLab's merge requests. This allows AI assistants to review code changes directly through the GitLab API.\n\n## Features\n\n- **Complete Merge Request Analysis**: Fetch full details about merge requests including diffs, commits, and comments\n- **File-Specific Diffs**: Analyze changes to specific files within merge requests\n- **Version Comparison**: Compare different branches, tags, or commits\n- **Review Management**: Add comments, approve, or unapprove merge requests\n- **Project Overview**: Get lists of all merge requests in a project\n\n## Installation\n\n### Prerequisites\n\n- Python 3.10+ \n- GitLab personal access token with API scope (read_api, api)\n- [Cursor IDE](https://cursor.sh/) or [Claude Desktop App](https://claude.ai/desktop) for MCP integration\n\n### Quick Start\n\n1. Clone this repository:\n\n```bash\ngit clone https://github.com/mehmetakinn/gitlab-mcp-code-review.git\ncd gitlab-mcp-code-review\n```\n\n2. Create and activate a virtual environment:\n\n```bash\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n```\n\n3. Install dependencies:\n\n```bash\npip install -r requirements.txt\n```\n\n4. Create a `.env` file with your GitLab configuration (see `.env.example` for all options):\n\n```\n# Required\nGITLAB_TOKEN=your_personal_access_token_here\n\n# Optional settings\nGITLAB_HOST=gitlab.com\nGITLAB_API_VERSION=v4\nLOG_LEVEL=INFO\n```\n\n## Configuration Options\n\nThe following environment variables can be configured in your `.env` file:\n\n| Variable | Required | Default | Description |\n|----------|----------|---------|-------------|\n| GITLAB_TOKEN | Yes | - | Your GitLab personal access token |\n| GITLAB_HOST | No | gitlab.com | GitLab instance hostname |\n| GITLAB_API_VERSION | No | v4 | GitLab API version to use |\n| LOG_LEVEL | No | INFO | Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL) |\n| DEBUG | No | false | Enable debug mode |\n| REQUEST_TIMEOUT | No | 30 | API request timeout in seconds |\n| MAX_RETRIES | No | 3 | Maximum retry attempts for failed requests |\n\n## Cursor IDE Integration\n\nTo use this MCP with Cursor IDE, add this configuration to your `~/.cursor/mcp.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"gitlab-mcp-code-review\": {\n      \"command\": \"/path/to/your/gitlab-mcp-code-review/.venv/bin/python\",\n      \"args\": [\n        \"/path/to/your/gitlab-mcp-code-review/server.py\",\n        \"--transport\",\n        \"stdio\"\n      ],\n      \"cwd\": \"/path/to/your/gitlab-mcp-code-review\",\n      \"env\": {\n        \"PYTHONPATH\": \"/path/to/your/gitlab-mcp-code-review\",\n        \"VIRTUAL_ENV\": \"/path/to/your/gitlab-mcp-code-review/.venv\",\n        \"PATH\": \"/path/to/your/gitlab-mcp-code-review/.venv/bin:/usr/local/bin:/usr/bin:/bin\"\n      },\n      \"stdio\": true\n    }\n  }\n}\n```\n\nReplace `/path/to/your/gitlab-mcp-code-review` with the actual path to your cloned repository.\n\n## Claude Desktop App Integration\n\nTo use this MCP with the Claude Desktop App:\n\n1. Open the Claude Desktop App\n2. Go to Settings → Advanced → MCP Configuration\n3. Add the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"gitlab-mcp-code-review\": {\n      \"command\": \"/path/to/your/gitlab-mcp-code-review/.venv/bin/python\",\n      \"args\": [\n        \"/path/to/your/gitlab-mcp-code-review/server.py\",\n        \"--transport\",\n        \"stdio\"\n      ],\n      \"cwd\": \"/path/to/your/gitlab-mcp-code-review\",\n      \"env\": {\n        \"PYTHONPATH\": \"/path/to/your/gitlab-mcp-code-review\",\n        \"VIRTUAL_ENV\": \"/path/to/your/gitlab-mcp-code-review/.venv\",\n        \"PATH\": \"/path/to/your/gitlab-mcp-code-review/.venv/bin:/usr/local/bin:/usr/bin:/bin\"\n      },\n      \"stdio\": true\n    }\n  }\n}\n```\n\nReplace `/path/to/your/gitlab-mcp-code-review` with the actual path to your cloned repository.\n\n## Available Tools\n\nThe MCP server provides the following tools for interacting with GitLab:\n\n| Tool | Description |\n|------|-------------|\n| `fetch_merge_request` | Get complete information about a merge request |\n| `fetch_merge_request_diff` | Get diffs for a specific merge request |\n| `fetch_commit_diff` | Get diff information for a specific commit |\n| `compare_versions` | Compare different branches, tags, or commits |\n| `add_merge_request_comment` | Add a comment to a merge request |\n| `approve_merge_request` | Approve a merge request |\n| `unapprove_merge_request` | Unapprove a merge request |\n| `get_project_merge_requests` | Get a list of merge requests for a project |\n\n## Usage Examples\n\n### Fetch a Merge Request\n\n```python\n# Get details of merge request #5 in project with ID 123\nmr = fetch_merge_request(\"123\", \"5\")\n```\n\n### View Specific File Changes\n\n```python\n# Get diff for a specific file in a merge request\nfile_diff = fetch_merge_request_diff(\"123\", \"5\", \"path/to/file.js\")\n```\n\n### Compare Branches\n\n```python\n# Compare develop branch with master branch\ndiff = compare_versions(\"123\", \"develop\", \"master\")\n```\n\n### Add a Comment to a Merge Request\n\n```python\n# Add a comment to a merge request\ncomment = add_merge_request_comment(\"123\", \"5\", \"This code looks good!\")\n```\n\n### Approve a Merge Request\n\n```python\n# Approve a merge request and set required approvals to 2\napproval = approve_merge_request(\"123\", \"5\", approvals_required=2)\n```\n\n## Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your GitLab token has the appropriate permissions (api, read_api)\n2. Check your `.env` file settings\n3. Ensure your MCP configuration paths are correct\n4. Test connection with: `curl -H \"Private-Token: your-token\" https://gitlab.com/api/v4/projects`\n5. Set LOG_LEVEL=DEBUG in your .env file for more detailed logging\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\nSee the [CONTRIBUTING.md](CONTRIBUTING.md) file for more details on the development process.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gitlab",
        "git",
        "commits",
        "git workflow",
        "reviews gitlab",
        "review workflows"
      ],
      "category": "git-workflow-management"
    },
    "mkc909--agent-communication-mcp-server": {
      "owner": "mkc909",
      "name": "agent-communication-mcp-server",
      "url": "https://github.com/mkc909/agent-communication-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Facilitates communication and collaboration among specialized LLM agents across systems, enabling context sharing, task management, and asynchronous coordination. Integrates with GitHub for issue tracking and PlanetScale for scalable data management.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "workflow",
        "github",
        "git workflow",
        "workflow management",
        "mkc909 agent"
      ],
      "category": "git-workflow-management"
    },
    "mokemoke0821--MCP": {
      "owner": "mokemoke0821",
      "name": "MCP",
      "url": "https://github.com/mokemoke0821/MCP",
      "imageUrl": "/freedevtools/mcp/pfp/mokemoke0821.webp",
      "description": "Execute shell commands across various platforms with full support for Japanese environments. The server supports PowerShell, CMD, and GitBash, allowing advanced file operations and handling of special characters.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-28T19:12:57Z",
      "readme_content": "# MCP サーバー\r\n\r\nMCP (Message Control Protocol) サーバーは、Windows 環境で動作するシェルコマンド実行サーバーです。PowerShell、CMD、GitBash の各シェルをサポートし、特に日本語環境での使用に最適化されています。\r\n\r\n## 特徴\r\n\r\n- **複数シェルサポート**: PowerShell、CMD、GitBash\r\n- **日本語環境の完全対応**: UTF-8/UTF-16LE エンコーディング処理\r\n- **特殊文字を含むコマンド処理**: パイプライン(|)、セミコロン(;)などの特殊文字をサポート\r\n- **強化されたファイル検索機能**: 日本語ファイル名対応\r\n\r\n## インストール\r\n\r\n```bash\r\n# 依存パッケージのインストール\r\nnpm install\r\n```\r\n\r\n## 使用方法\r\n\r\n### サーバーの起動\r\n\r\n```bash\r\nnode server.js\r\n```\r\n\r\nまたは PM2 を使用して:\r\n\r\n```bash\r\n# PM2 のセットアップ (初回のみ)\r\nsetup-pm2.bat\r\n\r\n# PM2 での起動\r\npm2 start autostart.js\r\n```\r\n\r\n## テスト\r\n\r\nテストスクリプトを実行して機能を検証できます:\r\n\r\n```bash\r\n# PowerShell 直接実行テスト\r\nnode test-direct-powershell.js\r\n\r\n# MCP サーバー統合テスト\r\nnode test-mcp-server.js\r\n```\r\n\r\n## 開発\r\n\r\nこのプロジェクトは第3フェーズまでの改善を実装しています:\r\n\r\n1. **第1フェーズ**: 基本機能実装\r\n2. **第2フェーズ**: バッファサイズ増量、依存パッケージ追加\r\n3. **第3フェーズ**: 日本語環境対応、特殊文字処理、ファイル検索機能改善\r\n\r\n## ライセンス\r\n\r\nMITライセンス\r\n",
      "npm_url": "https://www.npmjs.com/package/mcp",
      "npm_downloads": 17624,
      "keywords": [
        "gitbash",
        "git",
        "shell",
        "cmd gitbash",
        "git workflow",
        "gitbash allowing"
      ],
      "category": "git-workflow-management"
    },
    "msnidal--yellhorn-mcp": {
      "owner": "msnidal",
      "name": "yellhorn-mcp",
      "url": "https://github.com/msnidal/yellhorn-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/msnidal.webp",
      "description": "Integrates with GitHub to generate detailed work plans and automate issue creation and code reviews based on the entire codebase context. Evaluates code diffs against original workplans, facilitating seamless software development tasks.",
      "stars": 14,
      "forks": 6,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-27T22:46:26Z",
      "readme_content": "# Yellhorn MCP\n\n![Yellhorn Logo](assets/yellhorn.png)\n\nA Model Context Protocol (MCP) server that provides functionality to create detailed workplans to implement a task or feature. These workplans are generated with a large, powerful model (such as gemini 2.5 pro or even the o3 deep research API), insert your entire codebase into the context window by default, and can also access URL context and do web search depending on the model used. This pattern of creating workplans using a powerful reasoning model is highly useful for defining work to be done by code assistants like Claude Code or other MCP compatible coding agents, as well as providing a reference to reviewing the output of such coding models and ensure they meet the exactly specified original requirements.\n\n## Features\n\n- **Create Workplans**: Creates detailed implementation plans based on a prompt and taking into consideration your entire codebase, posting them as GitHub issues and exposing them as MCP resources for your coding agent\n- **Judge Code Diffs**: Provides a tool to evaluate git diffs against the original workplan with full codebase context and provides detailed feedback, ensuring the implementation does not deviate from the original requirements and providing guidance on what to change to do so\n- **Seamless GitHub Integration**: Automatically creates labeled issues, posts judgement sub-issues with references to original workplan issues\n- **Context Control**: Use `.yellhornignore` files to exclude specific files and directories from the AI context, similar to `.gitignore`\n- **MCP Resources**: Exposes workplans as standard MCP resources for easy listing and retrieval\n- **Google Search Grounding**: Enabled by default for Gemini models, providing search capabilities with automatically formatted citations in Markdown\n- **Automatic Chunking**: Handles large codebases that exceed model context limits by intelligently splitting prompts\n- **Rate Limit Handling**: Robust retry logic with exponential backoff for rate limits and transient failures\n- **Cost Tracking**: Real-time cost estimation and usage tracking for all API calls\n- **Multi-Model Support**: Unified interface supporting OpenAI (GPT-4o, GPT-5, o3, o4-mini), xAI Grok (Grok-4, Grok-4 Fast), and Gemini (2.5-pro, 2.5-flash) models with reasoning mode support for GPT-5\n\n## Installation\n\n### Project bootstrap (uv)\n\n```bash\n# Install from source\ngit clone https://github.com/msnidal/yellhorn-mcp.git\ncd yellhorn-mcp\n\n# Provision the environment and install all dependency groups\nuv sync --group dev\n\n# Optional: activate the environment for direct shell usage\nsource .venv/bin/activate\n\n# Verify the CLI entrypoint\nuv run yellhorn-mcp --help\n```\n\n`uv sync` provisions `.venv`, installs the package in editable mode, and applies the `dev`\ndependency group defined in `pyproject.toml`.\n\n### Install from PyPI\n\n```bash\nuv pip install yellhorn-mcp\n```\n\n## Configuration\n\nThe server requires the following environment variables:\n\n- `GEMINI_API_KEY`: Your Gemini API key (required for Gemini models)\n- `OPENAI_API_KEY`: Your OpenAI API key (required for OpenAI models)\n- `XAI_API_KEY`: Your xAI API key (required for Grok models)\n- `REPO_PATH`: Path to your repository (defaults to current directory)\n- `YELLHORN_MCP_MODEL`: Model to use (defaults to \"gemini-2.5-pro\"). Available options:\n  - **Gemini models**: \"gemini-2.5-pro\", \"gemini-2.5-flash\", \"gemini-2.5-flash-lite\"\n  - **OpenAI models**: \"gpt-4o\", \"gpt-4o-mini\", \"o4-mini\", \"o3\", \"gpt-4.1\"\n  - **GPT-5 models**: \"gpt-5\", \"gpt-5-mini\", \"gpt-5-nano\" (support reasoning mode for gpt-5 and gpt-5-mini)\n  - **xAI Grok models**: \"grok-4\" (256K context) and \"grok-4-fast\" (2M context)\n  - **Deep Research models**: \"o3-deep-research\", \"o4-mini-deep-research\"\n  - Note: Deep Research models (including GPT-5) automatically enable `web_search_preview` and `code_interpreter` tools for enhanced research capabilities\n- `YELLHORN_MCP_REASONING_EFFORT`: Set reasoning effort level for GPT-5 models. Options: \"low\", \"medium\", \"high\". This provides enhanced reasoning capabilities at higher cost for supported models (gpt-5, gpt-5-mini). The effort level determines the amount of compute used for reasoning, with higher levels providing more thorough reasoning at increased cost. The server now forwards this value to every GPT-5 request and cost metrics automatically include the appropriate reasoning premium.\n- `YELLHORN_MCP_SEARCH`: Enable/disable Google Search Grounding (defaults to \"on\" for Gemini models). Options:\n  - \"on\" - Search grounding enabled for Gemini models\n  - \"off\" - Search grounding disabled for all models\n\n> ℹ️ Grok models now use the official `xai-sdk`; ensure it is installed in the environment (it is included in the project dependencies, but custom deployments should add it explicitly).\n\nThe server also requires the GitHub CLI (`gh`) to be installed and authenticated.\n\n## Usage\n\n### Getting Started\n\n#### Codex CLI Setup\n\nAdd the server configuration below to your Codex CLI `config.toml` (`~/.config/codex/config.toml` by default). Update the `GEMINI_API_KEY` (or swap in `OPENAI_API_KEY`/`XAI_API_KEY` and adjust the model) and `REPO_PATH` values to match your environment.\n\n```toml\n[mcp_servers.yellhorn-mcp]\ncommand = \"uv\"\nargs = [\"run\", \"yellhorn-mcp\"]\nenv = { \"GEMINI_API_KEY\" = \"your-api-key\", \"REPO_PATH\" = \"/path/to/your/repo\" }\n```\n\nRestart Codex after updating the configuration so it picks up the new MCP server.\n\n#### VSCode/Cursor Setup\n\nTo configure Yellhorn MCP in VSCode or Cursor, create a `.vscode/mcp.json` file at the root of your workspace with the following content:\n\n```json\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"gemini-api-key\",\n      \"description\": \"Gemini API Key\"\n    }\n  ],\n  \"servers\": {\n    \"yellhorn-mcp\": {\n      \"type\": \"stdio\",\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"yellhorn-mcp\"],\n      \"env\": {\n        \"GEMINI_API_KEY\": \"${input:gemini-api-key}\",\n        \"REPO_PATH\": \"${workspaceFolder}\"\n      }\n    }\n  }\n}\n```\n\n#### Claude Code Setup\n\nTo configure Yellhorn MCP with Claude Code directly, add a root-level `.mcp.json` file in your project with the following content:\n\n```json\n{\n  \"mcpServers\": {\n    \"yellhorn-mcp\": {\n      \"type\": \"stdio\",\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"yellhorn-mcp\", \"--model\", \"o3\"],\n      \"env\": {\n        \"YELLHORN_MCP_SEARCH\": \"on\"\n      }\n    }\n  }\n}\n```\n\n## Tools\n\n### curate_context\n\nAnalyzes the codebase and creates a `.yellhorncontext` file listing directories to be included in AI context. This tool helps optimize AI context by understanding the task you want to accomplish and creating a whitelist of relevant directories, significantly reducing token usage and improving AI focus on relevant code.\n\n**Input**:\n\n- `user_task`: Description of the task you want to accomplish\n- `codebase_reasoning`: (optional) Control the level of codebase analysis:\n  - `\"file_structure\"`: (default) Basic file structure analysis (fastest)\n  - `\"lsp\"`: Function signatures and docstrings only (lighter weight)\n  - `\"full\"`: Complete file contents (most comprehensive)\n  - `\"none\"`: No codebase context\n- `ignore_file_path`: (optional) Path to ignore file (defaults to `.yellhornignore`)\n- `output_path`: (optional) Output path for context file (defaults to `.yellhorncontext`)\n- `depth_limit`: (optional) Maximum directory depth to analyze (0 = no limit)\n- `disable_search_grounding`: (optional) If set to `true`, disables Google Search Grounding for this request\n\n**Output**:\n\n- JSON string containing:\n  - `context_file_path`: Path to the created `.yellhorncontext` file\n  - `directories_included`: Number of directories included in the context\n  - `files_analyzed`: Number of files analyzed during curation\n\nThe `.yellhorncontext` file acts as a whitelist - only files matching the patterns will be included in subsequent workplan/judgement calls. This significantly reduces token usage and improves AI focus on relevant code.\n\n**Example `.yellhorncontext` output**:\n\n```\nsrc/api/\nsrc/models/\ntests/api/\n*.config.js\n```\n\n### create_workplan\n\nCreates a GitHub issue with a detailed workplan based on the title and detailed description.\n\n**Input**:\n\n- `title`: Title for the GitHub issue (will be used as issue title and header)\n- `detailed_description`: Detailed description for the workplan. Any URLs provided here will be extracted and included in a References section.\n- `codebase_reasoning`: (optional) Control whether AI enhancement is performed:\n  - `\"full\"`: (default) Use AI to enhance the workplan with full codebase context\n  - `\"lsp\"`: Use AI with lightweight codebase context (function/method signatures, class attributes and struct fields for Python and Go)\n  - `\"none\"`: Skip AI enhancement, use the provided description as-is\n- `debug`: (optional) If set to `true`, adds a comment to the issue with the full prompt used for generation\n- `disable_search_grounding`: (optional) If set to `true`, disables Google Search Grounding for this request\n\n**Output**:\n\n- JSON string containing:\n  - `issue_url`: URL to the created GitHub issue\n  - `issue_number`: The GitHub issue number\n\n### get_workplan\n\nRetrieves the workplan content (GitHub issue body) associated with a workplan.\n\n**Input**:\n\n- `issue_number`: The GitHub issue number for the workplan.\n- `disable_search_grounding`: (optional) If set to `true`, disables Google Search Grounding for this request\n\n**Output**:\n\n- The content of the workplan issue as a string\n\n### revise_workplan\n\nUpdates an existing workplan based on revision instructions. The tool fetches the current workplan from the specified GitHub issue and uses AI to revise it according to your instructions.\n\n**Input**:\n\n- `issue_number`: The GitHub issue number containing the workplan to revise\n- `revision_instructions`: Instructions describing how to revise the workplan\n- `codebase_reasoning`: (optional) Control whether AI enhancement is performed:\n  - `\"full\"`: (default) Use AI to revise with full codebase context\n  - `\"lsp\"`: Use AI with lightweight codebase context (function/method signatures only)\n  - `\"file_structure\"`: Use AI with directory structure only (fastest)\n  - `\"none\"`: Minimal codebase context\n- `debug`: (optional) If set to `true`, adds a comment to the issue with the full prompt used for generation\n- `disable_search_grounding`: (optional) If set to `true`, disables Google Search Grounding for this request\n\n**Output**:\n\n- JSON string containing:\n  - `issue_url`: URL to the updated GitHub issue\n  - `issue_number`: The GitHub issue number\n\n### judge_workplan\n\nTriggers an asynchronous code judgement comparing two git refs (branches or commits) against a workplan described in a GitHub issue. Creates a placeholder GitHub sub-issue immediately and then processes the AI judgement asynchronously, updating the sub-issue with results.\n\n**Input**:\n\n- `issue_number`: The GitHub issue number for the workplan.\n- `base_ref`: Base Git ref (commit SHA, branch name, tag) for comparison. Defaults to 'main'.\n- `head_ref`: Head Git ref (commit SHA, branch name, tag) for comparison. Defaults to 'HEAD'.\n- `codebase_reasoning`: (optional) Control which codebase context is provided:\n  - `\"full\"`: (default) Use full codebase context\n  - `\"lsp\"`: Use lighter codebase context (only function signatures for Python and Go, plus full diff files)\n  - `\"file_structure\"`: Use only directory structure without file contents for faster processing\n  - `\"none\"`: Skip codebase context completely for fastest processing\n- `debug`: (optional) If set to `true`, adds a comment to the sub-issue with the full prompt used for generation\n- `disable_search_grounding`: (optional) If set to `true`, disables Google Search Grounding for this request\n\nAny URLs mentioned in the workplan will be extracted and preserved in a References section in the judgement.\n\n**Output**:\n\n- JSON string containing:\n  - `message`: Confirmation that the judgement task has been initiated\n  - `subissue_url`: URL to the created placeholder sub-issue where results will be posted\n  - `subissue_number`: The GitHub issue number of the placeholder sub-issue\n\n## File Filtering System\n\nYellhorn MCP provides a sophisticated multi-layer file filtering system to control which files are included in the AI context. The system follows a priority order to determine file inclusion:\n\n### Filter Layers (in priority order)\n\n1. **`.yellhorncontext` whitelist**: If this file exists and contains patterns, ONLY files matching these patterns are included\n2. **`.yellhorncontext` blacklist**: Files matching blacklist patterns (starting with `!`) are excluded\n3. **`.yellhornignore` whitelist**: Files matching whitelist patterns (starting with `!`) are explicitly included\n4. **`.yellhornignore` blacklist**: Files matching these patterns are excluded\n5. **`.gitignore` blacklist**: Files ignored by git are automatically excluded\n\n### Always Ignored Patterns\n\nThe following patterns are always ignored regardless of other settings:\n\n- `.git/` - Git metadata\n- `__pycache__/` - Python cache files\n- `node_modules/` - Node.js dependencies\n- `*.pyc` - Python compiled files\n- `.venv/`, `venv/` - Python virtual environments\n\n### File Format\n\nBoth `.yellhornignore` and `.yellhorncontext` files follow a gitignore-like syntax:\n\n- One pattern per line\n- Lines starting with `#` are comments\n- Empty lines are ignored\n- Use `!` prefix for whitelist patterns (include explicitly)\n- Directory patterns should end with `/`\n\n### Example `.yellhornignore`\n\n```\n# Exclude test files\ntests/\n*.test.js\n\n# Exclude build artifacts\ndist/\nbuild/\n\n# But include important test utilities\n!tests/utils/\n```\n\n### Example `.yellhorncontext`\n\n```\n# Only include source code and documentation\nsrc/\ndocs/\nREADME.md\n\n# Exclude generated files even in src\n!src/generated/\n```\n\n## Resource Access\n\nYellhorn MCP also implements the standard MCP resource API to provide access to workplans:\n\n- `list-resources`: Lists all workplans (GitHub issues with the yellhorn-mcp label)\n- `get-resource`: Retrieves the content of a specific workplan by issue number\n\nThese can be accessed via the standard MCP CLI commands:\n\n```bash\n# List all workplans\nmcp list-resources yellhorn-mcp\n\n# Get a specific workplan by issue number\nmcp get-resource yellhorn-mcp 123\n```\n\n## Development\n\n```bash\n# Ensure the environment is up to date\nuv sync --group dev\n\n# Run tests\nuv run --group dev pytest\n\n# Run tests with coverage report\nuv run --group dev pytest -- --cov=yellhorn_mcp --cov-report term-missing\n\n# Add or remove dependencies\nuv add some-package\nuv remove some-package\n\n# Regenerate the lockfile (commit the result)\nuv lock\n```\n\n### CI/CD\n\nThe project uses GitHub Actions for continuous integration and deployment:\n\n- **Testing**: Runs automatically on pull requests and pushes to the main branch\n  - Linting with flake8\n  - Format checking with black\n  - Testing with pytest\n\n- **Publishing**: Automatically publishes to PyPI when a version tag is pushed\n  - Tag must match the version in pyproject.toml (e.g., v0.2.2)\n  - Requires a PyPI API token stored as a GitHub repository secret (PYPI_API_TOKEN)\n\nTo release a new version:\n\n1. Update version in pyproject.toml and yellhorn_mcp/\\_\\_init\\_\\_.py\n2. Update CHANGELOG.md with the new changes\n3. Commit changes: `git commit -am \"Bump version to X.Y.Z\"`\n4. Tag the commit: `git tag vX.Y.Z`\n5. Push changes and tag: `git push && git push --tags`\n\nFor a history of changes, see the [Changelog](CHANGELOG.md).\n\nFor more detailed instructions, see the [Usage Guide](docs/USAGE.md).\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "github",
        "workflow",
        "git workflow",
        "workflow management",
        "github generate"
      ],
      "category": "git-workflow-management"
    },
    "narumiruna--gitingest-mcp": {
      "owner": "narumiruna",
      "name": "gitingest-mcp",
      "url": "https://github.com/narumiruna/gitingest-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/narumiruna.webp",
      "description": "Analyze and ingest Git repositories to produce structured text digests of their codebases, providing summaries, file structures, and content. Customize file filtering and branch selection for tailored analysis.",
      "stars": 7,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-26T13:34:13Z",
      "readme_content": "# Gitingest MCP Server\n\nA Model Context Protocol (MCP) server implementation that integrates with [gitingest](https://github.com/cyclotruc/gitingest) for turning any Git repository into a simple text digest of its codebase.\n\n<a href=\"https://glama.ai/mcp/servers/@narumiruna/gitingest-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@narumiruna/gitingest-mcp/badge\" alt=\"Gitingest Server MCP server\" />\n</a>\n\n## Features\n\n- Easy integration with AI assistants through the Model Context Protocol\n- Git repository analysis and ingestion capabilities\n- Support for filtering files by size, patterns, and branches\n- Returns comprehensive repository information including summaries, file structure, and content\n\n## Usage\n\n### Configuration Options\n\nAdd the following configuration to your AI assistant's settings to enable gitingest-mcp as an MCP server:\n\n#### PyPI Installation\n\n```json\n{\n  \"mcpServers\": {\n    \"gitingestmcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\"gitingestmcp@latest\"]\n    }\n  }\n}\n```\n\n#### GitHub Installation\n\n```json\n{\n  \"mcpServers\": {\n    \"gitingestmcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--from\",\n        \"git+https://github.com/narumiruna/gitingest-mcp\",\n        \"gitingestmcp\"\n      ]\n    }\n  }\n}\n```\n\n#### Local Installation\n\n```json\n{\n  \"mcpServers\": {\n    \"gitingestmcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--directory\",\n        \"/home/<user>/workspace/gitingest-mcp\",\n        \"gitingestmcp\"\n      ]\n    }\n  }\n}\n```\n\n## API\n\nThe server provides the following tool:\n\n### `ingest_git`\n\nAnalyzes a Git repository and returns its content in a structured format.\n\n#### Parameters:\n\n- `source`: The URL of a Git repository or a local directory path\n- `max_file_size` (optional): Maximum allowed file size in bytes (default: 10MB)\n- `include_patterns` (optional): Pattern or set of patterns specifying files to include (e.g., \"\\*.md, src/\")\n- `exclude_patterns` (optional): Pattern or set of patterns specifying files to exclude\n- `branch` (optional): The branch to clone and analyze (default: \"main\")\n\n#### Returns:\n\nA string containing:\n\n1. Repository summary\n2. Tree-like structure of the files\n3. Content of the repository files\n\n## Resources\n\n- gitingest website: https://gitingest.com/\n- gitingest repository: https://github.com/cyclotruc/gitingest\n\n## License\n\nSee the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "https://www.npmjs.com/package/gitingest-mcp",
      "npm_downloads": 292,
      "keywords": [
        "git",
        "gitingest",
        "repositories",
        "git workflow",
        "git repositories",
        "ingest git"
      ],
      "category": "git-workflow-management"
    },
    "nermalcat69--zerops-mcp": {
      "owner": "nermalcat69",
      "name": "zerops-mcp",
      "url": "https://github.com/nermalcat69/zerops-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/nermalcat69.webp",
      "description": "Interact with GitHub repositories, manage files and issues, and perform advanced searches efficiently. Features include automatic branch creation, comprehensive error handling, and batch operations for multiple files.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-31T12:05:41Z",
      "readme_content": "# GitHub MCP Server\n\nMCP Server for the GitHub API, enabling file operations, repository management, search functionality, and more.\n\n### Features\n\n- **Automatic Branch Creation**: When creating/updating files or pushing changes, branches are automatically created if they don't exist\n- **Comprehensive Error Handling**: Clear error messages for common issues\n- **Git History Preservation**: Operations maintain proper Git history without force pushing\n- **Batch Operations**: Support for both single-file and multi-file operations\n- **Advanced Search**: Support for searching code, issues/PRs, and users\n\n\n## Tools\n\n1. `create_or_update_file`\n   - Create or update a single file in a repository\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `path` (string): Path where to create/update the file\n     - `content` (string): Content of the file\n     - `message` (string): Commit message\n     - `branch` (string): Branch to create/update the file in\n     - `sha` (optional string): SHA of file being replaced (for updates)\n   - Returns: File content and commit details\n\n2. `push_files`\n   - Push multiple files in a single commit\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `branch` (string): Branch to push to\n     - `files` (array): Files to push, each with `path` and `content`\n     - `message` (string): Commit message\n   - Returns: Updated branch reference\n\n3. `search_repositories`\n   - Search for GitHub repositories\n   - Inputs:\n     - `query` (string): Search query\n     - `page` (optional number): Page number for pagination\n     - `perPage` (optional number): Results per page (max 100)\n   - Returns: Repository search results\n\n4. `create_repository`\n   - Create a new GitHub repository\n   - Inputs:\n     - `name` (string): Repository name\n     - `description` (optional string): Repository description\n     - `private` (optional boolean): Whether repo should be private\n     - `autoInit` (optional boolean): Initialize with README\n   - Returns: Created repository details\n\n5. `get_file_contents`\n   - Get contents of a file or directory\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `path` (string): Path to file/directory\n     - `branch` (optional string): Branch to get contents from\n   - Returns: File/directory contents\n\n6. `create_issue`\n   - Create a new issue\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `title` (string): Issue title\n     - `body` (optional string): Issue description\n     - `assignees` (optional string[]): Usernames to assign\n     - `labels` (optional string[]): Labels to add\n     - `milestone` (optional number): Milestone number\n   - Returns: Created issue details\n\n7. `create_pull_request`\n   - Create a new pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `title` (string): PR title\n     - `body` (optional string): PR description\n     - `head` (string): Branch containing changes\n     - `base` (string): Branch to merge into\n     - `draft` (optional boolean): Create as draft PR\n     - `maintainer_can_modify` (optional boolean): Allow maintainer edits\n   - Returns: Created pull request details\n\n8. `fork_repository`\n   - Fork a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `organization` (optional string): Organization to fork to\n   - Returns: Forked repository details\n\n9. `create_branch`\n   - Create a new branch\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `branch` (string): Name for new branch\n     - `from_branch` (optional string): Source branch (defaults to repo default)\n   - Returns: Created branch reference\n\n10. `list_issues`\n    - List and filter repository issues\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `state` (optional string): Filter by state ('open', 'closed', 'all')\n      - `labels` (optional string[]): Filter by labels\n      - `sort` (optional string): Sort by ('created', 'updated', 'comments')\n      - `direction` (optional string): Sort direction ('asc', 'desc')\n      - `since` (optional string): Filter by date (ISO 8601 timestamp)\n      - `page` (optional number): Page number\n      - `per_page` (optional number): Results per page\n    - Returns: Array of issue details\n\n11. `update_issue`\n    - Update an existing issue\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `issue_number` (number): Issue number to update\n      - `title` (optional string): New title\n      - `body` (optional string): New description\n      - `state` (optional string): New state ('open' or 'closed')\n      - `labels` (optional string[]): New labels\n      - `assignees` (optional string[]): New assignees\n      - `milestone` (optional number): New milestone number\n    - Returns: Updated issue details\n\n12. `add_issue_comment`\n    - Add a comment to an issue\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `issue_number` (number): Issue number to comment on\n      - `body` (string): Comment text\n    - Returns: Created comment details\n\n13. `search_code`\n    - Search for code across GitHub repositories\n    - Inputs:\n      - `q` (string): Search query using GitHub code search syntax\n      - `sort` (optional string): Sort field ('indexed' only)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: Code search results with repository context\n\n14. `search_issues`\n    - Search for issues and pull requests\n    - Inputs:\n      - `q` (string): Search query using GitHub issues search syntax\n      - `sort` (optional string): Sort field (comments, reactions, created, etc.)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: Issue and pull request search results\n\n15. `search_users`\n    - Search for GitHub users\n    - Inputs:\n      - `q` (string): Search query using GitHub users search syntax\n      - `sort` (optional string): Sort field (followers, repositories, joined)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: User search results\n\n16. `list_commits`\n   - Gets commits of a branch in a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `page` (optional string): page number\n     - `per_page` (optional string): number of record per page\n     - `sha` (optional string): branch name\n   - Returns: List of commits\n\n17. `get_issue`\n   - Gets the contents of an issue within a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `issue_number` (number): Issue number to retrieve\n   - Returns: Github Issue object & details\n\n18. `get_pull_request`\n   - Get details of a specific pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Pull request details including diff and review status\n\n19. `list_pull_requests`\n   - List and filter repository pull requests\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `state` (optional string): Filter by state ('open', 'closed', 'all')\n     - `head` (optional string): Filter by head user/org and branch\n     - `base` (optional string): Filter by base branch\n     - `sort` (optional string): Sort by ('created', 'updated', 'popularity', 'long-running')\n     - `direction` (optional string): Sort direction ('asc', 'desc')\n     - `per_page` (optional number): Results per page (max 100)\n     - `page` (optional number): Page number\n   - Returns: Array of pull request details\n\n20. `create_pull_request_review`\n   - Create a review on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `body` (string): Review comment text\n     - `event` (string): Review action ('APPROVE', 'REQUEST_CHANGES', 'COMMENT')\n     - `commit_id` (optional string): SHA of commit to review\n     - `comments` (optional array): Line-specific comments, each with:\n       - `path` (string): File path\n       - `position` (number): Line position in diff\n       - `body` (string): Comment text\n   - Returns: Created review details\n\n21. `merge_pull_request`\n   - Merge a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `commit_title` (optional string): Title for merge commit\n     - `commit_message` (optional string): Extra detail for merge commit\n     - `merge_method` (optional string): Merge method ('merge', 'squash', 'rebase')\n   - Returns: Merge result details\n\n22. `get_pull_request_files`\n   - Get the list of files changed in a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of changed files with patch and status details\n\n23. `get_pull_request_status`\n   - Get the combined status of all status checks for a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Combined status check results and individual check details\n\n24. `update_pull_request_branch`\n   - Update a pull request branch with the latest changes from the base branch (equivalent to GitHub's \"Update branch\" button)\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `expected_head_sha` (optional string): The expected SHA of the pull request's HEAD ref\n   - Returns: Success message when branch is updated\n\n25. `get_pull_request_comments`\n   - Get the review comments on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of pull request review comments with details like the comment text, author, and location in the diff\n\n26. `get_pull_request_reviews`\n   - Get the reviews on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of pull request reviews with details like the review state (APPROVED, CHANGES_REQUESTED, etc.), reviewer, and review body\n\n## Search Query Syntax\n\n### Code Search\n- `language:javascript`: Search by programming language\n- `repo:owner/name`: Search in specific repository\n- `path:app/src`: Search in specific path\n- `extension:js`: Search by file extension\n- Example: `q: \"import express\" language:typescript path:src/`\n\n### Issues Search\n- `is:issue` or `is:pr`: Filter by type\n- `is:open` or `is:closed`: Filter by state\n- `label:bug`: Search by label\n- `author:username`: Search by author\n- Example: `q: \"memory leak\" is:issue is:open label:bug`\n\n### Users Search\n- `type:user` or `type:org`: Filter by account type\n- `followers:>1000`: Filter by followers\n- `location:London`: Search by location\n- Example: `q: \"fullstack developer\" location:London followers:>100`\n\nFor detailed search syntax, see [GitHub's searching documentation](https://docs.github.com/en/search-github/searching-on-github).\n\n## Setup\n\n### Personal Access Token\n[Create a GitHub Personal Access Token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens) with appropriate permissions:\n   - Go to [Personal access tokens](https://github.com/settings/tokens) (in GitHub Settings > Developer settings)\n   - Select which repositories you'd like this token to have access to (Public, All, or Select)\n   - Create a token with the `repo` scope (\"Full control of private repositories\")\n     - Alternatively, if working only with public repositories, select only the `public_repo` scope\n   - Copy the generated token\n\n### Usage with Claude Desktop\nTo use this with Claude Desktop, add the following to your `claude_desktop_config.json`:\n\n#### Docker\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"mcp/github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n## Build\n\nDocker build:\n\n```bash\ndocker build -t mcp/github -f src/github/Dockerfile .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "github",
        "workflow",
        "git workflow",
        "github repositories",
        "automatic branch"
      ],
      "category": "git-workflow-management"
    },
    "nextDriveIoE--github-action-trigger-mcp": {
      "owner": "nextDriveIoE",
      "name": "github-action-trigger-mcp",
      "url": "https://github.com/nextDriveIoE/github-action-trigger-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/nextDriveIoE.webp",
      "description": "Integrate with GitHub to fetch available actions, trigger workflows, and retrieve release information from repositories, enhancing CI/CD processes with automation capabilities.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-08-21T03:23:05Z",
      "readme_content": "# GitHub Action Trigger MCP Server\n\nA Model Context Protocol server for GitHub Actions integration.\n\n## Overview\n\nThis is a TypeScript-based MCP server designed for GitHub Actions integration. It provides the following features:\n\n- Tool for fetching available GitHub Actions from a repository\n- Tool for getting detailed information about a specific GitHub Action\n- Tool for triggering GitHub workflow dispatch events\n- Tool for fetching the latest releases from a GitHub repository\n- Tool for enabling auto-merge on pull requests\n\n## Features\n\n### Tools\n\n- `get_github_actions` - Get available GitHub Actions for a repository\n  - Required parameters: `owner` (repository owner, username or organization) and `repo` (repository name)\n  - Optional parameters: `token` (GitHub personal access token, for accessing private repositories or increasing API rate limits)\n  - Returns JSON data with workflow ID, name, path, state, URL, and content\n\n- `get_github_action` - Get detailed information about a specific GitHub Action, including inputs and their requirements\n  - Required parameters: `owner` (Action owner, username or organization) and `repo` (repository name of the action)\n  - Optional parameters:\n    - `path`: Path to the action definition file (default: 'action.yml')\n    - `ref`: Git reference (branch, tag, or commit SHA, default: 'main')\n    - `token`: GitHub personal access token (optional)\n  - Returns detailed information about the Action, including name, description, author, inputs (and whether they're required), etc.\n\n- `trigger_github_action` - Trigger a GitHub workflow and pass relevant parameters\n  - Required parameters:\n    - `owner`: Repository owner (username or organization)\n    - `repo`: Repository name\n    - `workflow_id`: The ID or filename of the workflow to trigger\n  - Optional parameters:\n    - `ref`: The git reference to trigger the workflow on (default: 'main')\n    - `inputs`: Inputs to pass to the workflow (must match the workflow's defined inputs)\n    - `token`: GitHub personal access token (must have the workflow scope)\n  - Returns workflow run information, including status, URL, etc.\n\n- `get_github_release` - Get the latest 2 releases from a GitHub repository\n  - Required parameters: `owner` (repository owner, username or organization) and `repo` (repository name)\n  - Optional parameters: `token` (GitHub personal access token, optional)\n  - Returns information about the latest 2 releases\n\n- `enable_pull_request_automerge` - Enable auto-merge for a specific pull request\n  - Required parameters:\n    - `owner`: Repository owner (username or organization)\n    - `repo`: Repository name\n    - `pull_number`: The pull request number\n  - Optional parameters:\n    - `merge_method`: The merge method to use (MERGE, SQUASH, or REBASE, default: MERGE)\n    - `token`: GitHub personal access token (optional)\n  - Returns success status and pull request information\n  - Note: This will automatically merge the PR when all required checks pass and approvals are met\n\n## Installation\n\n### Recommended Installation: Using npx\n\nThe simplest way to install and use is via the `npx` command in your Claude Desktop configuration file without manual local installation:\n\n```json\n{\n  \"mcpServers\": {\n    \"github-action-trigger-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@nextdrive/github-action-trigger-mcp\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"your_github_token_here\"\n      }\n    }\n  }\n}\n```\n\nBenefits of this method:\n- No local package installation required\n- Automatically uses the latest version\n- Set up once and ready to use\n- Built-in GitHub token configuration\n\n### Local Installation\n\nIf you prefer to install manually, follow these steps:\n\n1. Install the package:\n```bash\nnpm install -g @nextdrive/github-action-trigger-mcp\n```\n\n2. Use in Claude Desktop configuration:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"github-action-trigger-mcp\": {\n      \"command\": \"@nextdrive/github-action-trigger-mcp\",\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"your_github_token_here\"\n      }\n    }\n  }\n}\n```\n\n### GitHub Token Configuration\n\nTo access the GitHub API, especially for private repositories or workflow triggers, you need to configure a GitHub personal access token. There are several ways to do this:\n\n#### Method 1 (Recommended): Direct Configuration in Claude Desktop\n\nSet the token directly in the Claude Desktop configuration file via the `env` field:\n\n```json\n\"env\": {\n  \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"your_github_token_here\"\n}\n```\n\n#### Method 2: Global Environment Variable\n\nSet the `GITHUB_TOKEN` environment variable:\n\n```bash\n# On Linux/MacOS\nexport GITHUB_TOKEN=your_github_token\n\n# On Windows\nset GITHUB_TOKEN=your_github_token\n```\n\n#### Method 3: Local Configuration File\n\nEdit the configuration file:\n\n```\n~/.nextdrive-github-action-trigger-mcp/config.json\n```\n\nSet your GitHub token:\n\n```json\n{\n  \"githubToken\": \"your_github_token\"\n}\n```\n\nA template for this configuration file is automatically created the first time the server starts.\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor automatic rebuilding during development:\n```bash\nnpm run watch\n```\n\n### Debugging\n\nUse MCP Inspector for debugging:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access the debugging tools in your browser.\n\n## Publishing to npm\n\nIf you want to publish this package to npm, follow these steps:\n\n1. Make sure you're logged in to npm and have permissions to publish to the `@nextdrive` organization:\n   ```bash\n   npm login\n   ```\n\n2. Build the project:\n   ```bash\n   npm run build\n   ```\n\n3. Publish to npm (organization-scoped packages are private by default, use `--access public` to make it public):\n   ```bash\n   npm publish --access public\n   ```\n\nAfter publishing, anyone can run this tool using the `npx @nextdrive/github-action-trigger-mcp` command or use it in their Claude Desktop configuration.\n\n## Usage Examples\n\n### Getting a List of GitHub Actions\n\nUse the `get_github_actions` tool to get GitHub Actions for a repository:\n\n```json\n{\n  \"owner\": \"username-or-org\",\n  \"repo\": \"repository-name\"\n}\n```\n\nIf a default token is configured, it will be used automatically when accessing private repositories.\n\nExample response:\n\n```json\n[\n  {\n    \"id\": 12345678,\n    \"name\": \"CI\",\n    \"path\": \".github/workflows/ci.yml\",\n    \"state\": \"active\",\n    \"url\": \"https://github.com/owner/repo/actions/workflows/ci.yml\",\n    \"content\": \"name: CI\\n\\non:\\n  push:\\n    branches: [ main ]\\n  pull_request:\\n    branches: [ main ]\\n\\njobs:\\n  build:\\n    runs-on: ubuntu-latest\\n    steps:\\n    - uses: actions/checkout@v2\\n    - name: Setup Node.js\\n      uses: actions/setup-node@v2\\n      with:\\n        node-version: 16.x\\n    - name: Install dependencies\\n      run: npm ci\\n    - name: Build\\n      run: npm run build\\n    - name: Test\\n      run: npm test\\n\"\n  }\n]\n```\n\n### Getting Detailed GitHub Action Information\n\nUse the `get_github_action` tool to get detailed information about a specific Action:\n\n```json\n{\n  \"owner\": \"actions\",\n  \"repo\": \"checkout\",\n  \"ref\": \"v4\"\n}\n```\n\nExample response:\n\n```json\n{\n  \"name\": \"Checkout\",\n  \"description\": \"Check out a Git repository at a particular version\",\n  \"author\": \"GitHub\",\n  \"inputs\": [\n    {\n      \"name\": \"repository\",\n      \"description\": \"Repository name with owner. For example, actions/checkout\",\n      \"default\": \"\",\n      \"required\": false\n    },\n    {\n      \"name\": \"ref\",\n      \"description\": \"The branch, tag or SHA to checkout.\",\n      \"default\": \"\",\n      \"required\": false\n    }\n  ],\n  \"runs\": {\n    \"using\": \"node20\",\n    \"main\": \"dist/index.js\"\n  }\n}\n```\n\n### Triggering a GitHub Workflow\n\nUse the `trigger_github_action` tool to trigger a GitHub workflow:\n\n```json\n{\n  \"owner\": \"username-or-org\",\n  \"repo\": \"repository-name\",\n  \"workflow_id\": \"ci.yml\",\n  \"inputs\": {\n    \"deploy_environment\": \"production\",\n    \"debug_enabled\": \"true\"\n  }\n}\n```\n\nExample response:\n\n```json\n{\n  \"success\": true,\n  \"message\": \"Workflow dispatch event triggered successfully\",\n  \"run\": {\n    \"id\": 12345678,\n    \"url\": \"https://github.com/owner/repo/actions/runs/12345678\",\n    \"status\": \"queued\",\n    \"conclusion\": null,\n    \"created_at\": \"2025-03-19T06:45:12Z\",\n    \"triggered_by\": \"API\"\n  }\n}\n```\n\nNote: Triggering workflows requires:\n1. The workflow must be configured to support the `workflow_dispatch` event\n2. The GitHub token must have the `workflow` scope permission\n3. Input parameters passed must match those defined in the workflow\n\n### Getting Latest Releases\n\nUse the `get_github_release` tool to get the latest 2 releases from a repository:\n\n```json\n{\n  \"owner\": \"username-or-org\",\n  \"repo\": \"repository-name\"\n}\n```\n\nExample response:\n\n```json\n{\n  \"count\": 2,\n  \"releases\": [\n    {\n      \"id\": 12345678,\n      \"name\": \"v1.0.0\",\n      \"tag_name\": \"v1.0.0\",\n      \"published_at\": \"2025-03-15T10:00:00Z\",\n      \"draft\": false,\n      \"prerelease\": false,\n      \"html_url\": \"https://github.com/owner/repo/releases/tag/v1.0.0\",\n      \"body\": \"Release notes for version 1.0.0\",\n      \"assets\": [\n        {\n          \"name\": \"app-v1.0.0.zip\",\n          \"size\": 1234567,\n          \"download_count\": 42,\n          \"browser_download_url\": \"https://github.com/owner/repo/releases/download/v1.0.0/app-v1.0.0.zip\",\n          \"created_at\": \"2025-03-15T10:05:00Z\",\n          \"updated_at\": \"2025-03-15T10:05:00Z\"\n        }\n      ],\n      \"author\": {\n        \"login\": \"username\",\n        \"html_url\": \"https://github.com/username\"\n      }\n    },\n    {\n      \"id\": 87654321,\n      \"name\": \"v0.9.0\",\n      \"tag_name\": \"v0.9.0\",\n      \"published_at\": \"2025-03-01T10:00:00Z\",\n      \"draft\": false,\n      \"prerelease\": true,\n      \"html_url\": \"https://github.com/owner/repo/releases/tag/v0.9.0\",\n      \"body\": \"Pre-release notes for version 0.9.0\",\n      \"assets\": [],\n      \"author\": {\n        \"login\": \"username\",\n        \"html_url\": \"https://github.com/username\"\n      }\n    }\n  ]\n}\n```\n\n### Enabling Auto-merge for Pull Requests\n\nUse the `enable_pull_request_automerge` tool to enable auto-merge for a specific pull request:\n\n```json\n{\n  \"owner\": \"username-or-org\",\n  \"repo\": \"repository-name\",\n  \"pull_number\": 123,\n  \"merge_method\": \"SQUASH\"\n}\n```\n\nExample response:\n\n```json\n{\n  \"success\": true,\n  \"message\": \"Auto-merge enabled successfully\",\n  \"pullRequest\": {\n    \"id\": \"PR_kwDOABCD123_456\",\n    \"title\": \"Add new feature\",\n    \"number\": 123,\n    \"autoMergeEnabled\": true,\n    \"enabledAt\": \"2025-08-21T03:00:00Z\",\n    \"mergeMethod\": \"SQUASH\"\n  }\n}\n```\n\nNote: Enabling auto-merge requires:\n1. The repository must have auto-merge enabled in settings\n2. The GitHub token must have write permissions to the repository\n3. The pull request must be open and not already have auto-merge enabled\n4. Once enabled, the PR will automatically merge when all required status checks pass and approvals are met\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflows",
        "github action",
        "git workflow",
        "nextdriveioe github"
      ],
      "category": "git-workflow-management"
    },
    "nibzard--daytona-mcp-interpreter": {
      "owner": "nibzard",
      "name": "daytona-mcp-interpreter",
      "url": "https://github.com/nibzard/daytona-mcp-interpreter",
      "imageUrl": "/freedevtools/mcp/pfp/nibzard.webp",
      "description": "Executes Python code and shell commands in isolated environments, providing file management capabilities and support for Git repository cloning and web previews.",
      "stars": 16,
      "forks": 5,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-08-20T10:36:22Z",
      "readme_content": "# Daytona MCP Interpreter\n\nA Model Context Protocol server that provides Python code execution capabilities in ephemeral Daytona sandboxes.\n\n![Daytona MCP Server in Claude Desktop](image.png)\n\n## Overview\n\nDaytona MCP Interpreter enables AI assistants like Claude to execute Python code and shell commands in secure, isolated environments. It implements the Model Context Protocol (MCP) standard to provide tools for:\n\n- Python code execution in sandboxed environments\n- Shell command execution\n- File management (upload/download)\n- Git repository cloning\n- Web preview generation for running servers\n\nAll execution happens in ephemeral Daytona workspaces that are automatically cleaned up after use.\n\n## Installation\n\n1. Install uv if you haven't already:\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n2. Create and activate virtual environment.\n\nIf you have an existing env, deactivate and remove it first:\n```bash\ndeactivate\nrm -rf .venv\n```\n\nCreate and activate a new virtual environment:\n```bash\nuv venv\nsource .venv/bin/activate\n```\n\n(On Windows: `.venv\\Scripts\\activate`)\n\n3. Install dependencies:\n```bash\nuv add \"mcp[cli]\" pydantic python-dotenv \"daytona-sdk>=0.10.5\"\n```\n\n> Note: This project requires daytona-sdk version 0.10.5 or higher. Earlier versions have incompatible FileSystem API.\n\n## Environment Variables\n\nConfigure these environment variables for proper operation:\n\n- `MCP_DAYTONA_API_KEY`: Required API key for Daytona authentication\n- `MCP_DAYTONA_SERVER_URL`: Server URL (default: https://app.daytona.io/api)\n- `MCP_DAYTONA_TIMEOUT`: Request timeout in seconds (default: 180.0)\n- `MCP_DAYTONA_TARGET`: Target region (default: eu)\n- `MCP_VERIFY_SSL`: Enable SSL verification (default: false)\n\n## Development\n\nRun the server directly:\n```bash\nuv run src/daytona_mcp_interpreter/server.py\n```\n\nOr if uv is not in your path:\n```\n/Users/USER/.local/bin/uv run ~LOCATION/daytona-mcp-interpreter/src/daytona_mcp_interpreter/server.py\n```\n\nUse MCP Inspector to test the server:\n```bash\nnpx @modelcontextprotocol/inspector \\\n  uv \\\n  --directory . \\\n  run \\\n  src/daytona_mcp_interpreter/server.py\n```\n\nView logs:\n```\ntail -f /tmp/daytona-interpreter.log\n```\n\n## Integration with Claude Desktop\n\n[![Watch the demo video](https://img.youtube.com/vi/26m2MjY8a5c/maxresdefault.jpg)](https://youtu.be/26m2MjY8a5c)\n\n1. Configure in Claude Desktop (or other MCP-compatible clients):\n\nOn MacOS, edit: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows, edit: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n```json\n{\n    \"mcpServers\": {\n        \"daytona-interpreter\": {\n            \"command\": \"/Users/USER/.local/bin/uv\",\n            \"args\": [\n                \"--directory\",\n                \"/Users/USER/dev/daytona-mcp-interpreter\",\n                \"run\",\n                \"src/daytona_mcp_interpreter/server.py\"\n            ],\n            \"env\": {\n                \"PYTHONUNBUFFERED\": \"1\",\n                \"MCP_DAYTONA_API_KEY\": \"api_key\",\n                \"MCP_DAYTONA_SERVER_URL\": \"api_server_url\",\n                \"MCP_DAYTONA_TIMEOUT\": \"30.0\",\n                \"MCP_VERIFY_SSL\": \"false\",\n                \"PATH\": \"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n            }\n        }\n    }\n}\n```\n\n2. Restart Claude Desktop\n3. The Daytona Python interpreter tools will be available in Claude\n\n## Available Tools\n\n### Shell Exec\n\nExecutes shell commands in the Daytona workspace.\n\n```bash\n# Example: List files\nls -la\n\n# Example: Install a package\npip install pandas\n```\n\n### File Download\n\nDownloads files from the Daytona workspace with smart handling for large files.\n\n**Basic Usage:**\n```\nfile_download(file_path=\"/path/to/file.txt\")\n```\n\n**Advanced Usage:**\n```\n# Set custom file size limit\nfile_download(file_path=\"/path/to/large_file.csv\", max_size_mb=10.0)\n\n# Download partial content for large files\nfile_download(file_path=\"/path/to/large_file.csv\", download_option=\"download_partial\", chunk_size_kb=200)\n\n# Convert large file to text\nfile_download(file_path=\"/path/to/large_file.pdf\", download_option=\"convert_to_text\")\n\n# Compress file before downloading\nfile_download(file_path=\"/path/to/large_file.bin\", download_option=\"compress_file\")\n\n# Force download despite size\nfile_download(file_path=\"/path/to/large_file.zip\", download_option=\"force_download\")\n```\n\n### File Upload\n\nUploads files to the Daytona workspace. Supports both text and binary files.\n\n**Basic Usage:**\n```\n# Upload a text file\nfile_upload(file_path=\"/workspace/example.txt\", content=\"Hello, World!\")\n```\n\n**Advanced Usage:**\n```\n# Upload a text file with specific path\nfile_upload(\n    file_path=\"/workspace/data/config.json\",\n    content='{\"setting\": \"value\", \"enabled\": true}'\n)\n\n# Upload a binary file using base64 encoding\nimport base64\nwith open(\"local_image.png\", \"rb\") as f:\n    base64_content = base64.b64encode(f.read()).decode('utf-8')\n\nfile_upload(\n    file_path=\"/workspace/images/uploaded.png\",\n    content=base64_content,\n    encoding=\"base64\"\n)\n\n# Upload without overwriting existing files\nfile_upload(\n    file_path=\"/workspace/important.txt\",\n    content=\"New content\",\n    overwrite=False\n)\n```\n\n### Git Clone\n\nClones a Git repository into the Daytona workspace for analysis and code execution.\n\n**Basic Usage:**\n```\ngit_clone(repo_url=\"https://github.com/username/repository.git\")\n```\n\n**Advanced Usage:**\n```\n# Clone a specific branch\ngit_clone(\n    repo_url=\"https://github.com/username/repository.git\",\n    branch=\"develop\"\n)\n\n# Clone to a specific directory with full history\ngit_clone(\n    repo_url=\"https://github.com/username/repository.git\",\n    target_path=\"my_project\",\n    depth=0  # 0 means full history\n)\n\n# Clone with Git LFS support for repositories with large files\ngit_clone(\n    repo_url=\"https://github.com/username/large-files-repo.git\",\n    lfs=True\n)\n```\n\n### Web Preview\n\nGenerates a preview URL for web servers running inside the Daytona workspace.\n\n**Basic Usage:**\n```\n# Generate a preview link for a web server running on port 3000\nweb_preview(port=3000)\n```\n\n**Advanced Usage:**\n```\n# Generate a preview link with a descriptive name\nweb_preview(\n    port=8080,\n    description=\"React Development Server\"\n)\n\n# Generate a link without checking if server is running\nweb_preview(\n    port=5000,\n    check_server=False\n)\n```\n\n**Example:**\n```bash\n# First run a simple web server using Python via the shell\nshell_exec(command=\"python -m http.server 8000 &\")\n\n# Then generate a preview link for the server\nweb_preview(port=8000, description=\"Python HTTP Server\")\n```\n\n<a href=\"https://glama.ai/mcp/servers/hj7jlxkxpk\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/hj7jlxkxpk/badge\" alt=\"Daytona Python Interpreter MCP server\" /></a>\n[![smithery badge](https://smithery.ai/badge/@nkkko/daytona-mcp)](https://smithery.ai/server/@nkkko/daytona-mcp)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "python",
        "interpreter",
        "git workflow",
        "mcp interpreter",
        "git repository"
      ],
      "category": "git-workflow-management"
    },
    "nickbaumann98--release-notes-server": {
      "owner": "nickbaumann98",
      "name": "release-notes-server",
      "url": "https://github.com/nickbaumann98/release-notes-server",
      "imageUrl": "/freedevtools/mcp/pfp/nickbaumann98.webp",
      "description": "Generates release notes from GitHub repositories by fetching and organizing commits while presenting them in a well-structured markdown format.",
      "stars": 2,
      "forks": 5,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-18T03:37:57Z",
      "readme_content": "# Release Notes Server\n\nAn MCP server that generates beautiful release notes from GitHub repositories. It efficiently fetches commits, organizes them by type, and presents them in a clean, readable format.\n\n## Features\n\n- 🎯 Smart commit filtering by date or SHA\n- 📊 Groups commits by type (features, fixes, etc.)\n- 🔍 Enriches commits with PR data\n- 📈 Includes detailed statistics\n- 🎨 Clean markdown formatting with emojis\n- ⚡ Efficient API usage with GitHub's `since` parameter\n\n## Installation\n\n```bash\nnpm install\nnpm run build\n```\n\n## Usage\n\nAdd this server to your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"release-notes\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/release-notes-server/build/index.js\"],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"your-github-token\"\n      }\n    }\n  }\n}\n```\n\n### Available Tools\n\n#### generate_release_notes\n\nGenerates release notes for a GitHub repository.\n\nParameters:\n```typescript\n{\n  \"owner\": string,           // Repository owner\n  \"repo\": string,           // Repository name\n  \"commitRange\": {\n    \"fromCommit\"?: string,  // Starting commit SHA\n    \"toCommit\"?: string    // Ending commit SHA\n  },\n  \"format\": {\n    \"type\": \"markdown\",     // Output format\n    \"groupBy\": \"type\",      // How to group commits\n    \"includeStats\": boolean // Include commit statistics\n  }\n}\n```\n\nExample:\n```typescript\nconst result = await use_mcp_tool({\n  server_name: \"release-notes\",\n  tool_name: \"generate_release_notes\",\n  arguments: {\n    owner: \"owner\",\n    repo: \"repo\",\n    commitRange: {\n      fromCommit: \"abc123\" // Get commits from this SHA\n    },\n    format: {\n      type: \"markdown\",\n      groupBy: \"type\",\n      includeStats: true\n    }\n  }\n});\n```\n\n## Output Format\n\nThe generated release notes include:\n\n1. Header with generation date and statistics\n2. Sections grouped by commit type:\n   - 🚀 Features\n   - 🐛 Fixes\n   - 📚 Documentation\n   - ⚡ Performance\n   - ♻️ Refactoring\n   - 🧪 Tests\n   - 🏗️ Build\n   - 🔧 Other\n\n3. Detailed statistics including:\n   - Total commits\n   - Breaking changes\n   - Commits by type\n   - Commits by author\n\n## Environment Variables\n\n- `GITHUB_TOKEN`: GitHub personal access token with repo access\n\n## Implementation Details\n\nThe server implements efficient commit fetching by:\n\n1. Using GitHub's `since` parameter when possible to reduce API calls\n2. Falling back to SHA-based filtering when needed\n3. Properly handling pagination\n4. Maintaining newest-first ordering for release notes\n5. Enriching commits with PR data when available\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "commits",
        "github",
        "git",
        "notes github",
        "release notes",
        "organizing commits"
      ],
      "category": "git-workflow-management"
    },
    "normal-coder--gitee-mcp-server": {
      "owner": "normal-coder",
      "name": "gitee-mcp-server",
      "url": "https://github.com/normal-coder/gitee-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/normal-coder.webp",
      "description": "Automate Gitee repository management by handling operations related to repositories, issues, and pull requests through a simple interface. Facilitates workflow enhancement by integrating AI to perform Gitee tasks seamlessly.",
      "stars": 7,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-17T02:14:44Z",
      "readme_content": "# Gitee MCP Server\n\nLet AI operate Gitee repositories/Issues/Pull Requests for you through MCP\n\n[![Node Version](https://img.shields.io/badge/node-%3E%3D22.12.0-brightgreen.svg)](./package.json)\n![NPM Version](https://img.shields.io/npm/v/gitee-mcp-server)\n![Docker Pulls](https://img.shields.io/docker/pulls/normalcoder/gitee-mcp-server)\n![Docker Image Version](https://img.shields.io/docker/v/normalcoder/gitee-mcp-server)\n[![LICENSE](https://img.shields.io/badge/license-MIT-blue.svg)](./LICENSE)\n[![smithery badge](https://smithery.ai/badge/@normal-coder/gitee-mcp-server)](https://smithery.ai/server/@normal-coder/gitee-mcp-server)\n\n[<img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/cck9xigm1d/badge\" />](https://glama.ai/mcp/servers/Cck9XigM1d)\n\n---\n\n## Supported AI Operations\n\n| Category | MCP Tool | Description |\n|:----:|:----|:----|\n| Repository Operations | `create_repository` | Create a Gitee repository | \n| | `fork_repository` | Fork a Gitee repository | \n| Branch Operations | `create_branch` | Create a new branch in a Gitee repository | \n| | `list_branches` | List branches in a Gitee repository | \n| | `get_branch` | Get details of a specific branch in a Gitee repository | \n| File Operations | `get_file_contents` | Get contents of a file or directory in a Gitee repository | \n| | `create_or_update_file` | Create or update a file in a Gitee repository | \n| | `push_files` | Push multiple files to a Gitee repository | \n| Issue Operations | `create_issue` | Create an Issue in a Gitee repository | \n| | `list_issues` | List Issues in a Gitee repository | \n| | `get_issue` | Get details of a specific Issue in a Gitee repository | \n| | `update_issue` | Update an Issue in a Gitee repository | \n| | `add_issue_comment` | Add a comment to an Issue in a Gitee repository | \n| Pull Request Operations | `create_pull_request` | Create a Pull Request in a Gitee repository | \n| | `list_pull_requests` | List Pull Requests in a Gitee repository | \n| | `get_pull_request` | Get details of a specific Pull Request in a Gitee repository | \n| | `update_pull_request` | Update a Pull Request in a Gitee repository | \n| | `merge_pull_request` | Merge a Pull Request in a Gitee repository | \n| User Operations | `get_user` | Get Gitee user information | \n| | `get_current_user` | Get authenticated Gitee user information | \n\n## Usage\n\n### Installing via Smithery\n\nTo install Gitee MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@normal-coder/gitee-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @normal-coder/gitee-mcp-server --client claude\n```\n\n### Configuration\n\n- `GITEE_API_BASE_URL`: Optional, Gitee OpenAPI Endpoint, default is `https://gitee.com/api/v5`\n- `GITEE_PERSONAL_ACCESS_TOKEN`: Required, Gitee account personal access token (PAT), can be obtained from Gitee account settings [Personal Access Tokens](https://gitee.com/profile/personal_access_tokens)\n- `DEBUG`: Optional, set to `true` to enable debug logging, default is disabled\n\n### Run MCP Server via NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"Gitee\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"gitee-mcp-server\"\n      ],\n      \"env\": {\n        \"GITEE_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n### Run MCP Server via Docker Container\n\n1. Get Docker Image\n\n```bash\n# Get from DockerHub\ndocker pull normalcoder/gitee-mcp-server\n\n# Build locally\ndocker build -t normalcoder/gitee-mcp-server .\n```\n\n2. Configure MCP Server\n\n```json\n{\n  \"mcpServers\": {\n    \"Gitee\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITEE_PERSONAL_ACCESS_TOKEN\",\n        \"normalcoder/gitee-mcp-server\"\n      ],\n      \"env\": {\n        \"GITEE_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n## Development Guide\n\n### Install Dependencies\n\n```bash\nnpm install\n```\n\n### Build\n\n```bash\nnpm run build\n```\n\nAfter successful build, `/dist` will contain the runnable MCP server.\n\n### Run Server\n\n```bash\nnpm start\n```\n\nThe MCP server will run on stdio, allowing it to be used as a subprocess by MCP clients.\n\n### Build Docker Image\n\nYou can also run the server using Docker:\n\n```bash\ndocker build -t normalcoder/gitee-mcp-server .\n```\n\nRun MCP Server with Docker:\n\n```bash\ndocker run -e GITEE_PERSONAL_ACCESS_TOKEN=<YOUR_TOKEN> normalcoder/gitee-mcp-server\n```\n\n### Debug MCP Server\n\nYou can use `@modelcontextprotocol/inspector` for debugging:\n\nCreate a `.env` file in the root directory for environment variables:\n\n```.env\nGITEE_API_BASE_URL=https://gitee.com/api/v5\nGITEE_PERSONAL_ACCESS_TOKEN=<YOUR_TOKEN>\n```\n\nRun the debug tool to start the service and web debug interface:\n\n```bash\nnpx @modelcontextprotocol/inspector npm run start --env-file=.env\n```\n\nThe project includes a `debug()` function for printing debug information, usage:\n\n```typescript\nimport { debug } from './common/utils.js';\n\ndebug('Message to log');\ndebug('Message with data:', { key: 'value' });\n```\n\nDebug logs are only printed when the `DEBUG` environment variable is set to `true`.\n\n## Dependencies\n\n- `@modelcontextprotocol/sdk`: MCP SDK for server implementation\n- `universal-user-agent`: For generating user agent strings\n- `zod`: For schema validation\n- `zod-to-json-schema`: For converting Zod schemas to JSON schemas\n\n## License\n\nLicensed under MIT License. You are free to use, modify and distribute the software, subject to the terms and conditions of the MIT License. For more details, see the [LICENSE](./LICENSE) file in the project repository.\n\n## Related Links\n\n- [Model Context Protocol](https://modelcontextprotocol.io)\n- [Gitee](https://gitee.com)\n",
      "npm_url": "https://www.npmjs.com/package/gitee-mcp-server",
      "npm_downloads": 4397,
      "keywords": [
        "git",
        "repositories",
        "workflow",
        "git workflow",
        "automate gitee",
        "gitee repository"
      ],
      "category": "git-workflow-management"
    },
    "nulab--backlog-mcp-server": {
      "owner": "nulab",
      "name": "backlog-mcp-server",
      "url": "https://github.com/nulab/backlog-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/nulab.webp",
      "description": "Manage projects, issues, wiki pages, and pull requests in Backlog. Optimize interactions with GraphQL-style field selection and control token limits for efficient project management workflows.",
      "stars": 104,
      "forks": 29,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T01:34:31Z",
      "readme_content": "# Backlog MCP Server\n\n![MIT License](https://img.shields.io/badge/license-MIT-green.svg)\n![Build](https://github.com/nulab/backlog-mcp-server/actions/workflows/ci.yml/badge.svg)\n![Last Commit](https://img.shields.io/github/last-commit/nulab/backlog-mcp-server.svg)\n\n[📘 日本語でのご利用ガイド](./README.ja.md) \n\nA Model Context Protocol (MCP) server for interacting with the Backlog API. This server provides tools for managing projects, issues, wiki pages, and more in Backlog through AI agents like Claude Desktop / Cline / Cursor etc.\n\n## Features\n\n- Project tools (create, read, update, delete)\n- Issue tracking and comments (create, update, delete, list)\n- Version/Milestone management (create, read, update, delete)\n- Wiki page support\n- Git repository and pull request tools\n- Notification tools\n- GraphQL-style field selection for optimized responses\n- Token limiting for large responses\n\n## Getting Started\n\n### Requirements\n\n- Docker\n- A Backlog account with API access\n- API key from your Backlog account\n\n### Option 1: Install via Docker\n\nThe easiest way to use this MCP server is through MCP configurations:\n\n1. Open MCP settings\n2. Navigate to the MCP configuration section\n3. Add the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"backlog\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--pull\", \"always\",\n        \"-i\",\n        \"--rm\",\n        \"-e\", \"BACKLOG_DOMAIN\",\n        \"-e\", \"BACKLOG_API_KEY\",\n        \"ghcr.io/nulab/backlog-mcp-server\"\n      ],\n      \"env\": {\n        \"BACKLOG_DOMAIN\": \"your-domain.backlog.com\",\n        \"BACKLOG_API_KEY\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\nReplace `your-domain.backlog.com` with your Backlog domain and `your-api-key` with your Backlog API key.\n\n✅ If you cannot use --pull always, you can manually update the image using:\n\n```\ndocker pull ghcr.io/nulab/backlog-mcp-server:latest\n```\n\n### Option 2: Install via npx\n\nYou can also run the server directly using `npx` without cloning the repository. This is a convenient way to run the server without a full installation.\n\n1. Open MCP settings\n2. Navigate to the MCP configuration section\n3. Add the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"backlog\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"backlog-mcp-server\"\n      ],\n      \"env\": {\n        \"BACKLOG_DOMAIN\": \"your-domain.backlog.com\",\n        \"BACKLOG_API_KEY\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\nReplace `your-domain.backlog.com` with your Backlog domain and `your-api-key` with your Backlog API key.\n\n### Option 3: Manual Setup (Node.js)\n\n1. Clone and install:\n   ```bash\n   git clone https://github.com/nulab/backlog-mcp-server.git\n   cd backlog-mcp-server\n   npm install\n   npm run build\n   ```\n\n2. Set your json to use as MCP\n  ```json\n  {\n    \"mcpServers\": {\n      \"backlog\": {\n        \"command\": \"node\",\n        \"args\": [\n          \"your-repository-location/build/index.js\"\n        ],\n        \"env\": {\n          \"BACKLOG_DOMAIN\": \"your-domain.backlog.com\",\n          \"BACKLOG_API_KEY\": \"your-api-key\"\n        }\n      }\n    }\n  }\n  ```\n\n## Tool Configuration\n\nYou can selectively enable or disable specific **toolsets** using the `--enable-toolsets` command-line flag or the `ENABLE_TOOLSETS` environment variable. This allows better control over which tools are available to the AI agent and helps reduce context size.\n\n### Available Toolsets\n\nThe following toolsets are available (enabled by default when `\"all\"` is used):\n\n| Toolset         | Description                                                                          |\n|-----------------|--------------------------------------------------------------------------------------|\n| `space`         | Tools for managing Backlog space settings and general information                   |\n| `project`       | Tools for managing projects, categories, custom fields, and issue types              |\n| `issue`         | Tools for managing issues and their comments, version milestones                    |\n| `wiki`          | Tools for managing wiki pages                                                        |\n| `git`           | Tools for managing Git repositories and pull requests                                |\n| `notifications` | Tools for managing user notifications                                                |\n| `document`      | Tools for viewing documents and document trees                   |\n\n### Specifying Toolsets\n\nYou can control toolset activation in the following ways:\n\nUsing via CLI:\n\n```bash\n--enable-toolsets space,project,issue\n```\n\nOr via environment variable:\n\n```\nENABLE_TOOLSETS=\"space,project,issue\"\n```\n\nIf all is specified, all available toolsets will be enabled. This is also the default behavior.\n\nUsing selective toolsets can be helpful if the toolset list is too large for your AI agent or if certain tools are causing performance issues. In such cases, disabling unused toolsets may improve stability.\n\n> 🧩 Tip: `project` toolset is highly recommended, as many other tools rely on project data as an entry point.\n\n### Dynamic Toolset Discovery (Experimental)\n\nIf you're using the MCP server with AI agents, you can enable dynamic discovery of toolsets at runtime:\n\nEnabling via CLI:\n\n```\n--dynamic-toolsets\n```\n\nOr via environment variable::\n\n```\n-e DYNAMIC_TOOLSETS=1 \\\n```\n\nWith dynamic toolsets enabled, the LLM will be able to list and activate toolsets on demand via tool interface.\n\n## Available Tools\n\n### Toolset: `space`\nTools for managing Backlog space settings and general information.\n- `get_space`: Returns information about the Backlog space.\n- `get_users`: Returns list of users in the Backlog space.\n- `get_myself`: Returns information about the authenticated user.\n\n### Toolset: `project`\nTools for managing projects, categories, custom fields, and issue types.\n- `get_project_list`: Returns list of projects.\n- `add_project`: Creates a new project.\n- `get_project`: Returns information about a specific project.\n- `update_project`: Updates an existing project.\n- `delete_project`: Deletes a project.\n\n### Toolset: `issue`\nTools for managing issues, their comments, and related items like priorities, categories, custom fields, issue types, resolutions, and watching lists.\n- `get_issue`: Returns information about a specific issue.\n- `get_issues`: Returns list of issues.\n- `count_issues`: Returns count of issues.\n- `add_issue`: Creates a new issue in the specified project.\n- `update_issue`: Updates an existing issue.\n- `delete_issue`: Deletes an issue.\n- `get_issue_comments`: Returns list of comments for an issue.\n- `add_issue_comment`: Adds a comment to an issue.\n- `get_priorities`: Returns list of priorities.\n- `get_categories`: Returns list of categories for a project.\n- `get_custom_fields`: Returns list of custom fields for a project.\n- `get_issue_types`: Returns list of issue types for a project.\n- `get_resolutions`: Returns list of issue resolutions.\n- `get_watching_list_items`: Returns list of watching items for a user.\n- `get_watching_list_count`: Returns count of watching items for a user.\n- `get_version_milestone_list`: Returns list of version milestones for a project.\n- `add_version_milestone`: Creates a new version milestone for a project.\n- `update_version_milestone`: Updates an existing version milestone.\n- `delete_version_milestone`: Deletes a version milestone.\n\n### Toolset: `wiki`\nTools for managing wiki pages.\n- `get_wiki_pages`: Returns list of Wiki pages.\n- `get_wikis_count`: Returns count of wiki pages in a project.\n- `get_wiki`: Returns information about a specific wiki page.\n- `add_wiki`: Creates a new wiki page.\n\n### Toolset: `git`\nTools for managing Git repositories and pull requests.\n- `get_git_repositories`: Returns list of Git repositories for a project.\n- `get_git_repository`: Returns information about a specific Git repository.\n- `get_pull_requests`: Returns list of pull requests for a repository.\n- `get_pull_requests_count`: Returns count of pull requests for a repository.\n- `get_pull_request`: Returns information about a specific pull request.\n- `add_pull_request`: Creates a new pull request.\n- `update_pull_request`: Updates an existing pull request.\n- `get_pull_request_comments`: Returns list of comments for a pull request.\n- `add_pull_request_comment`: Adds a comment to a pull request.\n- `update_pull_request_comment`: Updates a comment on a pull request.\n\n### Toolset: `notifications`\nTools for managing user notifications.\n- `get_notifications`: Returns list of notifications.\n- `get_notifications_count`: Returns count of notifications.\n- `reset_unread_notification_count`: Resets unread notification count.\n- `mark_notification_as_read`: Marks a notification as read.\n\n### Toolset: `document`\nTools for managing documents and document trees in Backlog projects.\n- `get_document_tree`: Returns the hierarchical tree of documents for a project, including folders and ne\n- `get_documents`: Returns a flat list of documents in a project or folder.\n- `get_document`: Returns detailed information about a specific document, including metadata, content, an\n\n## Usage Examples\n\nOnce the MCP server is configured in AI agents, you can use the tools directly in your conversations. Here are some examples:\n\n- Listing Projects\n```\nCould you list all my Backlog projects?\n```\n- Creating a New Issue\n```\nCreate a new bug issue in the PROJECT-KEY project with high priority titled \"Fix login page error\"\n```\n- Getting Project Details\n```\nShow me the details of the PROJECT-KEY project\n```\n- Working with Git Repositories\n```\nList all Git repositories in the PROJECT-KEY project\n```\n- Managing Pull Requests\n```\nShow me all open pull requests in the repository \"repo-name\" of PROJECT-KEY project\n```\n```\nCreate a new pull request from branch \"feature/new-feature\" to \"main\" in the repository \"repo-name\" of PROJECT-KEY project\n```\n- Watching Items\n```\nShow me all items I'm watching \n```\n\n### i18n / Overriding Descriptions\n\nYou can override the descriptions of tools by creating a `.backlog-mcp-serverrc.json` file in your **home directory**.\n\nThe file should contain a JSON object with the tool names as keys and the new descriptions as values.  \nFor example:\n\n```json\n{\n  \"TOOL_ADD_ISSUE_COMMENT_DESCRIPTION\": \"An alternative description\",\n  \"TOOL_CREATE_PROJECT_DESCRIPTION\": \"Create a new project in Backlog\"\n}\n```\n\nWhen the server starts, it determines the final description for each tool based on the following priority:\n\n1. Environment variables (e.g., `BACKLOG_MCP_TOOL_ADD_ISSUE_COMMENT_DESCRIPTION`)\n2. Entries in `.backlog-mcp-serverrc.json` - Supported configuration file formats: .json, .yaml, .yml\n3. Built-in fallback values (English)\n\nSample config: \n\n```json\n{\n  \"mcpServers\": {\n    \"backlog\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\", \"BACKLOG_DOMAIN\",\n        \"-e\", \"BACKLOG_API_KEY\",\n        \"-v\", \"/yourcurrentdir/.backlog-mcp-serverrc.json:/root/.backlog-mcp-serverrc.json:ro\",\n        \"ghcr.io/nulab/backlog-mcp-server\"\n      ],\n      \"env\": {\n        \"BACKLOG_DOMAIN\": \"your-domain.backlog.com\",\n        \"BACKLOG_API_KEY\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\n### Exporting Current Translations\n\nYou can export the current default translations (including any overrides) by running the binary with the --export-translations flag.\n\nThis will print all tool descriptions to stdout, including any customizations you have made.\n\nExample:\n\n```bash\ndocker run -i --rm ghcr.io/nulab/backlog-mcp-server node build/index.js --export-translations\n```\n\nor \n\n```bash\nnpx github:nulab/backlog-mcp-server --export-translations\n```\n\n### Using a Japanese Translation Template\nA sample Japanese configuration file is provided at:\n\n```bash\ntranslationConfig/.backlog-mcp-serverrc.json.example\n```\n\nTo use it, copy it to your home directory as .backlog-mcp-serverrc.json:\n\nYou can then edit the file to customize the descriptions as needed.\n\n### Using Environment Variables\nAlternatively, you can override tool descriptions via environment variables.\n\nThe environment variable names are based on the tool keys, prefixed with BACKLOG_MCP_ and written in uppercase.\n\nExample:\nTo override the TOOL_ADD_ISSUE_COMMENT_DESCRIPTION:\n\n```json\n{\n  \"mcpServers\": {\n    \"backlog\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\", \"BACKLOG_DOMAIN\",\n        \"-e\", \"BACKLOG_API_KEY\",\n        \"-e\", \"BACKLOG_MCP_TOOL_ADD_ISSUE_COMMENT_DESCRIPTION\"\n        \"ghcr.io/nulab/backlog-mcp-server\"\n      ],\n      \"env\": {\n        \"BACKLOG_DOMAIN\": \"your-domain.backlog.com\",\n        \"BACKLOG_API_KEY\": \"your-api-key\",\n        \"BACKLOG_MCP_TOOL_ADD_ISSUE_COMMENT_DESCRIPTION\": \"An alternative description\"\n      }\n    }\n  }\n}\n```\n\nThe server loads the config file synchronously at startup.\n\nEnvironment variables always take precedence over the config file.\n\n## Advanced Features\n\n### Tool Name Prefixing\n\nAdd prefix to tool names with:\n\n```\n--prefix backlog_\n```\n\nor via environment variable:\n\n```\nPREFIX=\"backlog_\"\n```\n\nThis is especially useful if you're using multiple MCP servers or tools in the same environment and want to avoid name collisions. For example, get_project can become backlog_get_project to distinguish it from similarly named tools provided by other services.\n\n### Response Optimization & Token Limits\n\n#### Field Selection (GraphQL-style)\n\n```\n--optimize-response\n```\n\nOr environment variable:\n\n```\nOPTIMIZE_RESPONSE=1\n```\n\nThen, request only specific fields:\n\n```\nget_project(projectIdOrKey: \"PROJECT-KEY\", fields: \"{ name key description }\")\n```\n\nThe AI will use field selection to optimize the response:\n\n```\nget_project(projectIdOrKey: \"PROJECT-KEY\", fields: \"{ name key description }\")\n```\n\nBenefits:\n- Reduce response size by requesting only needed fields\n- Focus on specific data points\n- Improve performance for large responses\n\n#### Token Limiting\n\nLarge responses are automatically limited to prevent exceeding token limits:\n- Default limit: 50,000 tokens\n- Configurable via `MAX_TOKENS` environment variable\n- Responses exceeding the limit are truncated with a message\n\nYou can change this using:\n\n```\nMAX_TOKENS=10000\n```\n\nIf a response exceeds the limit, it will be truncated with a warning.\n> Note: This is a best-effort mitigation, not a guaranteed enforcement.\n\n### Full Custom Configuration Example\n\nThis section demonstrates advanced configuration using multiple environment variables. These are experimental features and may not be supported across all MCP clients. This is not part of the MCP standard specification and should be used with caution.\n\n```json\n{\n  \"mcpServers\": {\n    \"backlog\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\", \"BACKLOG_DOMAIN\",\n        \"-e\", \"BACKLOG_API_KEY\",\n        \"-e\", \"MAX_TOKENS\",\n        \"-e\", \"OPTIMIZE_RESPONSE\",\n        \"-e\", \"PREFIX\",\n        \"-e\", \"ENABLE_TOOLSETS\",\n        \"ghcr.io/nulab/backlog-mcp-server\"\n      ],\n      \"env\": {\n        \"BACKLOG_DOMAIN\": \"your-domain.backlog.com\",\n        \"BACKLOG_API_KEY\": \"your-api-key\",\n        \"MAX_TOKENS\": \"10000\",\n        \"OPTIMIZE_RESPONSE\": \"1\",\n        \"PREFIX\": \"backlog_\",\n        \"ENABLE_TOOLSETS\": \"space,project,issue\",\n        \"ENABLE_DYNAMIC_TOOLSETS\": \"1\"\n      }\n    }\n  }\n}\n```\n\n## Development\n\n### Running Tests\n\n```bash\nnpm test\n```\n\n### Adding New Tools\n\n1. Create a new file in `src/tools/` following the pattern of existing tools\n2. Create a corresponding test file\n3. Add the new tool to `src/tools/tools.ts`\n4. Build and test your changes\n\n### Command Line Options\n\nThe server supports several command line options:\n\n- `--export-translations`: Export all translation keys and values\n- `--optimize-response`: Enable GraphQL-style field selection\n- `--max-tokens=NUMBER`: Set maximum token limit for responses\n- `--prefix=STRING`: Optional string prefix to prepend to all tool names (default: \"\")\n- `--enable-toolsets <toolsets...>`: Specify which toolsets to enable (comma-separated or multiple arguments). Defaults to \"all\".\n  Example: `--enable-toolsets space,project` or `--enable-toolsets issue --enable-toolsets git`\n  Available toolsets: `space`, `project`, `issue`, `wiki`, `git`, `notifications`.\n\nExample:\n```bash\nnode build/index.js --optimize-response --max-tokens=100000 --prefix=\"backlog_\" --enable-toolsets space,issue\n```\n\n## License\n\nThis project is licensed under the [MIT License](./LICENSE).\n\nPlease note: This tool is provided under the MIT License **without any warranty or official support**.  \nUse it at your own risk after reviewing the contents and determining its suitability for your needs.  \nIf you encounter any issues, please report them via [GitHub Issues](../../issues).\n",
      "npm_url": "https://www.npmjs.com/package/backlog-mcp-server",
      "npm_downloads": 62361,
      "keywords": [
        "workflows",
        "git",
        "workflow",
        "git workflow",
        "management workflows",
        "workflow management"
      ],
      "category": "git-workflow-management"
    },
    "oghenetejiriorukpegmail--github-mcp": {
      "owner": "oghenetejiriorukpegmail",
      "name": "github-mcp",
      "url": "https://github.com/oghenetejiriorukpegmail/github-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/oghenetejiriorukpegmail.webp",
      "description": "Interact with GitHub repositories, create new ones, push content, and retrieve user information using the GitHub API through the MCP protocol. Supports error handling and TypeScript type safety for a seamless experience.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-24T00:17:01Z",
      "readme_content": "# GitHub MCP Server\n\nA Model Context Protocol (MCP) server implementation for GitHub integration. This server provides tools for interacting with GitHub's API through the MCP protocol.\n\n## Features\n\n- Create GitHub repositories\n- Push content to repositories\n- Get user information\n- Proper error handling and TypeScript type safety\n- Automatic installation script\n\n## Prerequisites\n\n- Node.js (v18 or higher)\n- npm (v8 or higher)\n- PowerShell (for Windows installation)\n- GitHub Personal Access Token with repo scope\n\n## Installation\n\n### Windows\n\n1. Clone this repository:\n```powershell\ngit clone https://github.com/oghenetejiriorukpegmail/github-mcp.git\n```\n\n2. Run the installation script:\n```powershell\n.\\install.ps1\n```\n\nThe script will:\n- Create the necessary directories\n- Install dependencies\n- Build the TypeScript code\n- Configure the MCP settings\n\n### Manual Installation\n\n1. Create the MCP directory:\n```powershell\nmkdir -p \"$env:APPDATA\\Roo-Code\\MCP\\github-mcp\"\n```\n\n2. Clone this repository into that directory:\n```powershell\ngit clone https://github.com/oghenetejiriorukpegmail/github-mcp.git \"$env:APPDATA\\Roo-Code\\MCP\\github-mcp\"\n```\n\n3. Install dependencies:\n```powershell\ncd \"$env:APPDATA\\Roo-Code\\MCP\\github-mcp\"\nnpm install\n```\n\n4. Build the TypeScript code:\n```powershell\nnpm run build\n```\n\n5. Add the server configuration to your MCP settings file at:\n`%APPDATA%\\Code\\User\\globalStorage\\rooveterinaryinc.roo-cline\\settings\\cline_mcp_settings.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"%APPDATA%\\Roo-Code\\MCP\\github-mcp\\build\\index.js\"\n      ],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"your-github-token-here\"\n      },\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n  }\n}\n```\n\n## Available Tools\n\n### get_user\nGet GitHub user information.\n\n```json\n{\n  \"username\": \"octocat\"\n}\n```\n\n### create_repo\nCreate a new GitHub repository.\n\n```json\n{\n  \"repo_name\": \"my-new-repo\",\n  \"description\": \"A new repository\",\n  \"private\": false\n}\n```\n\n### push_to_repo\nPush content to a GitHub repository.\n\n```json\n{\n  \"repo_name\": \"my-repo\",\n  \"file_path\": \"docs/README.md\",\n  \"content\": \"# My Project\\nThis is a test file.\",\n  \"message\": \"Add README file\"\n}\n```\n\n## Development\n\n1. Clone the repository\n2. Install dependencies: `npm install`\n3. Make changes to `src/index.ts`\n4. Build: `npm run build`\n5. Test your changes\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a Pull Request\n\n## License\n\nMIT\n",
      "npm_url": "https://www.npmjs.com/package/github-mcp-server",
      "npm_downloads": 15187,
      "keywords": [
        "github",
        "git",
        "repositories",
        "git workflow",
        "github mcp",
        "github api"
      ],
      "category": "git-workflow-management"
    },
    "oschina--mcp-gitee": {
      "owner": "oschina",
      "name": "mcp-gitee",
      "url": "https://github.com/oschina/mcp-gitee",
      "imageUrl": "/freedevtools/mcp/pfp/oschina.webp",
      "description": "Interact with Gitee's API to manage repositories, issues, and pull requests. Automate development workflows by creating issues and pull requests seamlessly.",
      "stars": 42,
      "forks": 10,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-10-02T08:14:26Z",
      "readme_content": "# Gitee MCP Server\n\nGitee MCP Server is a Model Context Protocol (MCP) server implementation for Gitee. It provides a set of tools for interacting with Gitee's API, allowing AI assistants to manage repositories, issues, pull requests, and more.\n\n[![Install MCP Server](https://cursor.com/deeplink/mcp-install-dark.svg)](https://cursor.com/en/install-mcp?name=gitee&config=eyJ1cmwiOiJodHRwczovL2FwaS5naXRlZS5jb20vbWNwIiwiaGVhZGVycyI6eyJBdXRob3JpemF0aW9uIjoiQmVhcmVyIDx5b3VyIHBlcnNvbmFsIGFjY2VzcyB0b2tlbj4ifX0%3D)\n\n## Features\n\n- Interact with Gitee repositories, issues, pull requests, and notifications\n- Configurable API base URL to support different Gitee instances\n- Command-line flags for easy configuration\n- Supports both personal, organization, and enterprise operations\n- Dynamic toolset enable/disable\n\n<details>\n<summary><b>Practical scenario: Obtain Issue from the repository, implement and create a Pull Request</b></summary>\n\n1. Get repository Issues\n![get_repo_issues](./docs/images/get_repo_issues.jpg)\n2. Implement coding & create Pull Request based on Issue details\n![implement_issue](./docs/images/implement_issue.jpg)\n3. Comment & Close Issue\n![comment_and_close_issue](./docs/images/comment_and_close_issue.jpg)\n</details>\n\n## Installation(This step can be skipped directly when starting npx)\n\n### Prerequisites\n\n- Go 1.23.0 or higher\n- Gitee account with an access token, [Go to get](https://gitee.com/profile/personal_access_tokens)\n\n### Building from Source\n\n1. Clone the repository:\n   ```bash\n   git clone https://gitee.com/oschina/mcp-gitee.git\n   cd mcp-gitee\n   ```\n\n2. Build the project:\n   ```bash\n   make build\n   ```\n   Move ./bin/mcp-gitee PATH env\n\n### Use go install\n   ```bash\n   go install gitee.com/oschina/mcp-gitee@latest\n   ```\n\n## Usage\n\nCheck mcp-gitee version:\n\n```bash\nmcp-gitee --version\n```\n\n## MCP Hosts Configuration\n<div align=\"center\">\n  <a href=\"docs/install/claude.md\" title=\"Claude\"><img src=\"docs/install/logos/Claude.png\" width=80 height=80></a>\n  <a href=\"docs/install/cursor.md\" title=\"Cursor\"><img src=\"docs/install/logos/Cursor.png\" width=80 height=80></a>\n  <a href=\"docs/install/trae.md\" title=\"Trae\"><img src=\"docs/install/logos/Trae.png\" width=80 height=80></a>\n  <a href=\"docs/install/cline.md\" title=\"Cline\"><img src=\"docs/install/logos/Cline.png\" width=80 height=80></a>\n  <a href=\"docs/install/windsurf.md\" title=\"Windsurf\"><img src=\"docs/install/logos/Windsurf.png\" width=80 height=80></a>\n</div>\n\nconfig example: [Click to view more application configuration](./docs/install/)\n- Connect to the official remote mcp-gitee server (no installation required)\n```json\n{\n  \"mcpServers\": {\n    \"gitee\": {\n      \"url\": \"https://api.gitee.com/mcp\",\n      \"headers\": {\n        \"Authorization\": \"Bearer <your personal access token>\"\n      }\n    }\n  }\n}\n```\n\n- npx\n```json\n{\n  \"mcpServers\": {\n    \"gitee\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@gitee/mcp-gitee@latest\"\n      ],\n      \"env\": {\n        \"GITEE_API_BASE\": \"https://gitee.com/api/v5\",\n        \"GITEE_ACCESS_TOKEN\": \"<your personal access token>\"\n      }\n    }\n  }\n}\n```\n- executable\n```json\n{\n  \"mcpServers\": {\n    \"gitee\": {\n      \"command\": \"mcp-gitee\",\n      \"env\": {\n        \"GITEE_API_BASE\": \"https://gitee.com/api/v5\",\n        \"GITEE_ACCESS_TOKEN\": \"<your personal access token>\"\n      }\n    }\n  }\n}\n```\n\n### Command-line Options\n\n- `--token`: Gitee access token\n- `--api-base`: Gitee API base URL (default: https://gitee.com/api/v5)\n- `--version`: Show version information\n- `--transport`: Transport type (stdio、sse or http, default: stdio)\n- `--address`: The host and port to start the server on (default: localhost:8000)\n- `--enabled-toolsets`: Comma-separated list of tools to enable (if specified, only these tools will be enabled)\n- `--disabled-toolsets`: Comma-separated list of tools to disable\n\n### Environment Variables\n\nYou can also configure the server using environment variables:\n\n- `GITEE_ACCESS_TOKEN`: Gitee access token\n- `GITEE_API_BASE`: Gitee API base URL\n- `ENABLED_TOOLSETS`: Comma-separated list of tools to enable\n- `DISABLED_TOOLSETS`: Comma-separated list of tools to disable\n\n### Toolset Management\n\nToolset management supports two modes:\n\n1. Enable specified tools (whitelist mode):\n   - Use `--enabled-toolsets` parameter or `ENABLED_TOOLSETS` environment variable\n   - Specify after, only listed tools will be enabled, others will be disabled\n   - Example: `--enabled-toolsets=\"list_user_repos,get_file_content\"`\n\n2. Disable specified tools (blacklist mode):\n   - Use `--disabled-toolsets` parameter or `DISABLED_TOOLSETS` environment variable\n   - Specify after, listed tools will be disabled, others will be enabled\n   - Example: `--disabled-toolsets=\"list_user_repos,get_file_content\"`\n\nNote:\n- If both `enabled-toolsets` and `disabled-toolsets` are specified, `enabled-toolsets` takes precedence\n- Tool names are case-sensitive\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for more details.\n\n## Available Tools\n\nThe server provides various tools for interacting with Gitee:\n\n| Tool                                | Category | Description |\n|-------------------------------------|----------|-------------|\n| **list_user_repos**                 | Repository | List user authorized repositories |\n| **get_file_content**                | Repository | Get the content of a file in a repository |\n| **create_user_repo**                | Repository | Create a user repository |\n| **create_org_repo**                 | Repository | Create an organization repository |\n| **create_enter_repo**               | Repository | Create an enterprise repository |\n| **fork_repository**                 | Repository | Fork a repository |\n| **create_release**                  | Repository | Create a release for a repository |\n| **list_releases**                   | Repository | List repository releases |\n| **search_open_source_repositories** | Repository | Search open source repositories on Gitee |\n| **list_repo_pulls**                 | Pull Request | List pull requests in a repository |\n| **merge_pull**                      | Pull Request | Merge a pull request |\n| **create_pull**                     | Pull Request | Create a pull request |\n| **update_pull**                     | Pull Request | Update a pull request |\n| **get_pull_detail**                 | Pull Request | Get details of a pull request |\n| **comment_pull**                    | Pull Request | Comment on a pull request |\n| **list_pull_comments**              | Pull Request | List all comments for a pull request |\n| **get_diff_files**                  | Pull Request | Get a pull request diff files |\n| **create_issue**                    | Issue | Create an issue |\n| **update_issue**                    | Issue | Update an issue |\n| **get_repo_issue_detail**           | Issue | Get details of a repository issue |\n| **list_repo_issues**                | Issue | List repository issues |\n| **comment_issue**                   | Issue | Comment on an issue |\n| **list_issue_comments**             | Issue | List comments on an issue |\n| **get_user_info**                   | User | Get current authenticated user information |\n| **search_users**                    | User | Search for users |\n| **list_user_notifications**         | Notification | List user notifications |\n\n## Contribution\n\nWe welcome contributions from the open-source community! If you'd like to contribute to this project, please follow these guidelines:\n\n1. Fork the repository.\n2. Create a new branch for your feature or bug fix.\n3. Make your changes and ensure the code is well-documented.\n4. Submit a pull request with a clear description of your changes.\n\nFor more information, please refer to the [CONTRIBUTING](CONTRIBUTING.md) file.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "workflows",
        "repositories",
        "git workflow",
        "development workflows",
        "gitee api"
      ],
      "category": "git-workflow-management"
    },
    "owayo--gitlab-mcp-server": {
      "owner": "owayo",
      "name": "gitlab-mcp-server",
      "url": "https://github.com/owayo/gitlab-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/owayo.webp",
      "description": "Fetches pipeline failure details and unresolved merge request comments from GitLab to provide real-time insights for AI assistants, enhancing development workflows based on GitLab data.",
      "stars": 3,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-07T05:38:23Z",
      "readme_content": "# GitLab-MCP-Server\n\nGitLabとの連携機能を提供するModel Context Protocol (MCP) サーバーです。GitLabの特定のプロジェクトからパイプラインの失敗情報やマージリクエストへの指摘事項を取得し、AIアシスタントに提供します。\n\n## 概要\n\nこのMCPサーバーは、GitLabのAPIを利用して以下の情報をAIアシスタントに提供します：\n\n1. GitLabパイプラインで失敗したジョブのコンソール出力\n2. GitLab MRへの未解決の指摘事項（コメント）\n3. GitLab MRの変更内容（ローカルリポジトリの現在の状態との差分）\n\nMCPの機能を使用することで、AIアシスタントはGitLabの情報を直接取得し、より的確な支援を提供できます。\n\n## インストール\n\n```bash\n# uvのインストール\n$ curl -LsSf https://astral.sh/uv/install.sh | sh\n\n$ cd /path/to/this-mcp-server\n# ライブラリのインストール\n$ uv sync\n```\n\n## 準備\n\nGitLabのアクセストークンが必要です。\nアクセストークンはGitLabの設定→アクセストークンにて発行してください。\n発行する際、`read_api` にチェックを入れてください。\n\n## 機能\n\n### 1. パイプラインの失敗情報を取得して修正 (`get_pipeline_failed_jobs`)\n\nGitLabパイプラインで失敗したジョブのコンソール出力を取得します。\n取得した情報をもとにAIアシスタントによる修正が行われます。\n\n**出力**:\n- 失敗したジョブのコンソール出力（ジョブ名、ステータス、詳細なログを含む）\n\n### 2. MRの指摘事項を取得して修正 (`get_review_comments`)\n\nGitLab MRの未解決の指摘事項（コメント）を取得して対応します。\n解決済みのコメントやファイルに紐づいていないコメントは除外されます。\n\n**出力**:\n- MRへの未解決かつファイルに紐づいている指摘事項（コメント者、時間、コメント内容、ファイル位置情報などを含む）\n\n### 3. MRの変更内容を取得してレビュー (`get_review_changes`)\n\nGitLab MRのベースコミット（base_sha）から現在のローカルリポジトリの状態までの差分を取得します。\nリモートの差分ではなく、ローカルの最新状態（作業中の未コミット変更を含む）との差分を取得できます。\n取得した差分でレビューが行われます。\n\n**出力**:\n- MRのベースコミットから現在のローカル状態までの変更内容（各ファイルの変更タイプと差分）\n\n\n## AIアシスタントとの連携\n\nAIアシスタント（Claude等）は、このMCPサーバーに対して以下の関数を呼び出すことができます：\n\n- `get_pipeline_failed_jobs()`: パイプラインの失敗情報取得\n- `get_review_comments()`: MRの指摘事項取得\n- `get_review_changes()`: MRの変更内容取得\n\nこれらの関数は、現在のブランチに関連するMRの情報を自動的に取得します。\n\n## Claude for Desktopでの設定\n\n`claude_desktop_config.json` に以下の設定を追加してください：\n\n```json\n{\n    \"mcpServers\": {\n        \"gitlab-mcp\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/path/to/this-mcp-server\",\n                \"run\",\n                \"main.py\"\n            ],\n            \"env\": {\n                \"GITLAB_URL\": \"your_gitlab_url\",\n                \"GITLAB_PROJECT_NAME\": \"gitlab_project_name\",\n                \"GITLAB_API_KEY\": \"your_gitlab_api_key\",\n                \"GIT_REPO_PATH\": \"/path/to/git/repo\"\n            }\n        }\n    }\n}\n```\n\n## Cursorでの設定\n\nプロジェクトルートの `.cursor/mcp.json` に以下の設定を追加してください：\n\n```json\n{\n    \"mcpServers\": {\n        \"gitlab-mcp\": {\n            \"command\": \"env\",\n            \"args\": [\n                \"GITLAB_URL=your_gitlab_url\",\n                \"GITLAB_PROJECT_NAME=gitlab_project_name\",\n                \"GITLAB_API_KEY=your_gitlab_api_key\",\n                \"GIT_REPO_PATH=/path/to/git/repo\",\n                \"uv\",\n                \"--directory\",\n                \"/path/to/this-mcp-server\",\n                \"run\",\n                \"main.py\"\n            ]\n        }\n    }\n}\n```\n\n注意：上記の設定例で、以下の値を適切に置き換えてください：\n- `your_gitlab_api_key`: GitLab APIのアクセストークン\n- `/path/to/git/repo`: ローカルGitリポジトリの絶対パス\n- `/path/to/this-mcp-server`: このMCPサーバーのディレクトリの絶対パス\n",
      "npm_url": "https://www.npmjs.com/package/gitlab-mcp-server",
      "npm_downloads": 236,
      "keywords": [
        "gitlab",
        "git",
        "workflows",
        "git workflow",
        "development workflows",
        "gitlab provide"
      ],
      "category": "git-workflow-management"
    },
    "owayo--mcp-src-tree": {
      "owner": "owayo",
      "name": "mcp-src-tree",
      "url": "https://github.com/owayo/mcp-src-tree",
      "imageUrl": "/freedevtools/mcp/pfp/owayo.webp",
      "description": "Generates a file tree of the specified directory's 'src' folder while adhering to rules defined in `.gitignore` to exclude certain files and directories. Represents the directory structure hierarchically in JSON format.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-02-24T05:31:48Z",
      "readme_content": "# MCP Source Tree Server\n\n指定されたディレクトリ配下のファイルツリーを生成するMCPサーバーです。\n`.`で始まるディレクトリや`.gitignore` に記載された条件に従って、特定のファイルやディレクトリを除外します。\nClaudeに組み込むことで、Claudeがプロジェクトの構造を素早く確認でき、Claudeが編集すべきファイルを特定するのに役立ちます。\n\n<a href=\"https://glama.ai/mcp/servers/1igr60piqh\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/1igr60piqh/badge\" alt=\"Source Tree Server MCP server\" /></a>\n\n## 機能\n\n- 指定されたディレクトリ配下のファイルツリーをJSON形式で取得\n- `.gitignore` の条件に従ってファイル/ディレクトリを除外\n- ディレクトリ構造を階層的なJSONで表現\n\n## セットアップ\n\n### 必要条件\n\n- Python 3.10以上\n- uv\n\n### インストール\n\n```bash\n# uvのインストール\n$ curl -LsSf https://astral.sh/uv/install.sh | sh\n\n$ cd /path/to/mcp-src-tree\n# ライブラリのインストール\n$ uv sync\n```\n\n## Claude for Desktopでの設定\n\n`claude_desktop_config.json` に以下の設定を追加してください：\n\n```json\n{\n    \"mcpServers\": {\n        \"src-tree\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/path/to/mcp-src-tree\",  # このプロジェクトディレクトリの絶対パスに書き換えてください\n                \"run\",\n                \"tree.py\"\n            ]\n        }\n    }\n}\n```\n\n## Claudeでの使用例\n\n指示するのはsrcの一つ上のルートディレクトリを指定してください。\n`.gitignore` を考慮する場合、ルートディレクトリ直下に `.gitignore` が存在することが前提です。\n`/Users/xxx/GitHub/xxx/ のソースツリーを確認してください` のように指示すると動作します\n\n以下のように応答します\n```\nはい、ソースツリーを確認させていただきます。\nプロジェクトの構造を確認しました。以下のような構成になっています：\nsrc/\n└── xxxx/\n    ├── __init__.py\n    ├── converter.py\n    ├── html_converter.py\n    ├── image_processor.py\n    ├── toc_analyzer.py\n    └── utils.py\n```\nこれにより、Claudeが素早くプロジェクトの構造を確認できます。\n\n## ファイル除外\n\n`.`で始まるディレクトリは自動的に除外されます。\n`.gitignore` に記載されているパターンに合致するファイルやディレクトリは、ツリーから自動的に除外されます。\n例えば、以下のような `.gitignore` の設定が有効です：\n\n```\n__pycache__/\nnode_modules/\n*.log\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "gitignore",
        "tree",
        "git workflow",
        "gitignore exclude",
        "defined gitignore"
      ],
      "category": "git-workflow-management"
    },
    "piyushgIITian--github-enterprice-mcp": {
      "owner": "piyushgIITian",
      "name": "github-enterprice-mcp",
      "url": "https://github.com/piyushgIITian/github-enterprice-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/piyushgIITian.webp",
      "description": "Interact with GitHub repositories, manage file operations, automate branch creation, and perform advanced searches on code and issues.",
      "stars": 2,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-05-12T15:47:19Z",
      "readme_content": "# GitHub Enterprise MCP Server\n\nMCP Server for the GitHub API, enabling file operations, repository management, search functionality, and more.\n\n## Features\n\n- **Automatic Branch Creation**: When creating/updating files or pushing changes, branches are automatically created if they don't exist\n- **Comprehensive Error Handling**: Clear error messages for common issues\n- **Git History Preservation**: Operations maintain proper Git history without force pushing\n- **Batch Operations**: Support for both single-file and multi-file operations\n- **Advanced Search**: Support for searching code, issues/PRs, and users\n\n## Cline Installation Guide\n\nThis guide will help you install and configure the GitHub Enterprise MCP server in Cline, enabling you to use GitHub API functionality directly through Cline.\n\n### Prerequisites\n\n1. Node.js installed on your system\n2. A GitHub Personal Access Token with appropriate permissions\n3. Cline installed on your system\n\n### Installation Steps\n\n#### 1. Clone the Repository\n\n```bash\ngit clone https://github.com/yourusername/github-enterprise-mcp.git\ncd github-enterprise-mcp\n```\n\n#### 2. Install Dependencies and Build\n\n```bash\nnpm install\nnpm run build\n```\n\nThis will create a `dist` directory with the compiled JavaScript files.\n\n#### 3. Create a GitHub Personal Access Token\n\n1. Go to [GitHub Personal Access Tokens](https://github.com/settings/tokens) (in GitHub Settings > Developer settings)\n2. Click \"Generate new token\"\n3. Select which repositories you'd like this token to have access to (Public, All, or Select)\n4. Create a token with the `repo` scope (\"Full control of private repositories\")\n   - Alternatively, if working only with public repositories, select only the `public_repo` scope\n5. Copy the generated token\n\n#### 4. Configure Cline MCP Settings\n\n##### For Cline VS Code Extension\n\n1. Open VS Code\n2. Locate the Cline MCP settings file at:\n   - Windows: `%APPDATA%\\Code\\User\\globalStorage\\saoudrizwan.claude-dev\\settings\\cline_mcp_settings.json`\n   - macOS: `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`\n   - Linux: `~/.config/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`\n\n3. Add the GitHub Enterprise MCP server configuration to the `mcpServers` object:\n\n```json\n{\n  \"mcpServers\": {\n    \"github-enterprise\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/absolute/path/to/github-enterprise-mcp/dist/index.js\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"your-personal-access-token\",\n        \"GITHUB_API_URL\": \"https://api.github.com\" // For GitHub.com\n        // For GitHub Enterprise, use your instance URL, e.g., \"https://github.yourdomain.com/api/v3\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nReplace `/absolute/path/to/github-enterprise-mcp/dist/index.js` with the absolute path to the built index.js file.\n\n##### For Claude Desktop App\n\n1. Locate the Claude Desktop configuration file at:\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Linux: `~/.config/Claude/claude_desktop_config.json`\n\n2. Add the GitHub Enterprise MCP server configuration to the `mcpServers` object:\n\n```json\n{\n  \"mcpServers\": {\n    \"github-enterprise\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/absolute/path/to/github-enterprise-mcp/dist/index.js\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"your-personal-access-token\",\n        \"GITHUB_API_URL\": \"https://api.github.com\" // For GitHub.com\n        // For GitHub Enterprise, use your instance URL, e.g., \"https://github.yourdomain.com/api/v3\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n#### 5. Restart Cline\n\nAfter configuring the MCP settings, restart Cline (VS Code or Claude Desktop) to apply the changes.\n\n### Verification\n\nTo verify that the GitHub Enterprise MCP server is properly installed and configured, you can ask Cline to use one of the GitHub tools:\n\n```\nCan you search for repositories with the keyword \"react\" using the GitHub Enterprise MCP server?\n```\n\nCline should be able to use the `search_repositories` tool to search for repositories with the keyword \"react\".\n\n### Interactive Installation with Cline\n\nFor an interactive installation experience, copy and paste the following text into Cline, and it will guide you through the installation process:\n\n```\nI want you to help me install the GitHub Enterprise MCP server. Here's what I need you to do:\n\n1. First, explain what the GitHub Enterprise MCP server is and what capabilities it will give you.\n\n2. Guide me through the installation process:\n   - Help me clone the repository (if I haven't already)\n   - Help me install dependencies and build the project\n   - Guide me through creating a GitHub Personal Access Token if I don't have one\n   - Help me configure the MCP settings in either VS Code or Claude Desktop\n   - Verify the installation is working\n\n3. Show me some examples of how I can use the GitHub Enterprise MCP server once it's installed.\n\nPlease start by explaining what the GitHub Enterprise MCP server is and what it will allow you to do for me.\n```\n\n### Example Usage\n\nAfter installation, you can ask Cline to perform GitHub operations directly, such as:\n\n- \"Create a new repository called 'my-project'\"\n- \"Search for repositories related to machine learning\"\n- \"Create a pull request from my feature branch to main\"\n- \"Get the contents of the README.md file in repository X\"\n- \"List open issues in my repository\"\n\n### Troubleshooting\n\nIf you encounter issues with the GitHub Enterprise MCP server:\n\n1. Check that the path to the index.js file is correct in your MCP settings\n2. Verify that your GitHub Personal Access Token has the necessary permissions\n3. Ensure that the GitHub API URL is correct for your GitHub instance\n4. Check the logs for any error messages\n\n### Additional Configuration Options\n\n#### GitHub API Version\n\nYou can specify a GitHub API version by adding the `GITHUB_API_VERSION` environment variable:\n\n```json\n\"env\": {\n  \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"your-personal-access-token\",\n  \"GITHUB_API_URL\": \"https://api.github.com\",\n  \"GITHUB_API_VERSION\": \"2022-11-28\"\n}\n```\n\n#### Enterprise Authentication\n\nFor GitHub Enterprise instances that use different authentication methods, you may need to provide additional configuration. Refer to the [Octokit documentation](https://github.com/octokit/rest.js) for more information.\n\n## Tools\n\n1. `create_or_update_file`\n   - Create or update a single file in a repository\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `path` (string): Path where to create/update the file\n     - `content` (string): Content of the file\n     - `message` (string): Commit message\n     - `branch` (string): Branch to create/update the file in\n     - `sha` (optional string): SHA of file being replaced (for updates)\n   - Returns: File content and commit details\n\n2. `push_files`\n   - Push multiple files in a single commit\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `branch` (string): Branch to push to\n     - `files` (array): Files to push, each with `path` and `content`\n     - `message` (string): Commit message\n   - Returns: Updated branch reference\n\n3. `search_repositories`\n   - Search for GitHub repositories\n   - Inputs:\n     - `query` (string): Search query\n     - `page` (optional number): Page number for pagination\n     - `perPage` (optional number): Results per page (max 100)\n   - Returns: Repository search results\n\n4. `create_repository`\n   - Create a new GitHub repository\n   - Inputs:\n     - `name` (string): Repository name\n     - `description` (optional string): Repository description\n     - `private` (optional boolean): Whether repo should be private\n     - `autoInit` (optional boolean): Initialize with README\n   - Returns: Created repository details\n\n5. `get_file_contents`\n   - Get contents of a file or directory\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `path` (string): Path to file/directory\n     - `branch` (optional string): Branch to get contents from\n   - Returns: File/directory contents\n\n6. `create_issue`\n   - Create a new issue\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `title` (string): Issue title\n     - `body` (optional string): Issue description\n     - `assignees` (optional string[]): Usernames to assign\n     - `labels` (optional string[]): Labels to add\n     - `milestone` (optional number): Milestone number\n   - Returns: Created issue details\n\n7. `create_pull_request`\n   - Create a new pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `title` (string): PR title\n     - `body` (optional string): PR description\n     - `head` (string): Branch containing changes\n     - `base` (string): Branch to merge into\n     - `draft` (optional boolean): Create as draft PR\n     - `maintainer_can_modify` (optional boolean): Allow maintainer edits\n   - Returns: Created pull request details\n\n8. `fork_repository`\n   - Fork a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `organization` (optional string): Organization to fork to\n   - Returns: Forked repository details\n\n9. `create_branch`\n   - Create a new branch\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `branch` (string): Name for new branch\n     - `from_branch` (optional string): Source branch (defaults to repo default)\n   - Returns: Created branch reference\n\n10. `list_issues`\n    - List and filter repository issues\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `state` (optional string): Filter by state ('open', 'closed', 'all')\n      - `labels` (optional string[]): Filter by labels\n      - `sort` (optional string): Sort by ('created', 'updated', 'comments')\n      - `direction` (optional string): Sort direction ('asc', 'desc')\n      - `since` (optional string): Filter by date (ISO 8601 timestamp)\n      - `page` (optional number): Page number\n      - `per_page` (optional number): Results per page\n    - Returns: Array of issue details\n\n11. `update_issue`\n    - Update an existing issue\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `issue_number` (number): Issue number to update\n      - `title` (optional string): New title\n      - `body` (optional string): New description\n      - `state` (optional string): New state ('open' or 'closed')\n      - `labels` (optional string[]): New labels\n      - `assignees` (optional string[]): New assignees\n      - `milestone` (optional number): New milestone number\n    - Returns: Updated issue details\n\n12. `add_issue_comment`\n    - Add a comment to an issue\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `issue_number` (number): Issue number to comment on\n      - `body` (string): Comment text\n    - Returns: Created comment details\n\n13. `search_code`\n    - Search for code across GitHub repositories\n    - Inputs:\n      - `q` (string): Search query using GitHub code search syntax\n      - `sort` (optional string): Sort field ('indexed' only)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: Code search results with repository context\n\n14. `search_issues`\n    - Search for issues and pull requests\n    - Inputs:\n      - `q` (string): Search query using GitHub issues search syntax\n      - `sort` (optional string): Sort field (comments, reactions, created, etc.)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: Issue and pull request search results\n\n15. `search_users`\n    - Search for GitHub users\n    - Inputs:\n      - `q` (string): Search query using GitHub users search syntax\n      - `sort` (optional string): Sort field (followers, repositories, joined)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: User search results\n\n16. `list_commits`\n   - Gets commits of a branch in a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `page` (optional string): page number\n     - `per_page` (optional string): number of record per page\n     - `sha` (optional string): branch name\n   - Returns: List of commits\n\n17. `get_issue`\n   - Gets the contents of an issue within a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `issue_number` (number): Issue number to retrieve\n   - Returns: Github Issue object & details\n\n18. `get_pull_request`\n   - Get details of a specific pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Pull request details including diff and review status\n\n19. `list_pull_requests`\n   - List and filter repository pull requests\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `state` (optional string): Filter by state ('open', 'closed', 'all')\n     - `head` (optional string): Filter by head user/org and branch\n     - `base` (optional string): Filter by base branch\n     - `sort` (optional string): Sort by ('created', 'updated', 'popularity', 'long-running')\n     - `direction` (optional string): Sort direction ('asc', 'desc')\n     - `per_page` (optional number): Results per page (max 100)\n     - `page` (optional number): Page number\n   - Returns: Array of pull request details\n\n20. `create_pull_request_review`\n   - Create a review on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `body` (string): Review comment text\n     - `event` (string): Review action ('APPROVE', 'REQUEST_CHANGES', 'COMMENT')\n     - `commit_id` (optional string): SHA of commit to review\n     - `comments` (optional array): Line-specific comments, each with:\n       - `path` (string): File path\n       - `position` (number): Line position in diff\n       - `body` (string): Comment text\n   - Returns: Created review details\n\n21. `merge_pull_request`\n   - Merge a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `commit_title` (optional string): Title for merge commit\n     - `commit_message` (optional string): Extra detail for merge commit\n     - `merge_method` (optional string): Merge method ('merge', 'squash', 'rebase')\n   - Returns: Merge result details\n\n22. `get_pull_request_files`\n   - Get the list of files changed in a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of changed files with patch and status details\n\n23. `get_pull_request_status`\n   - Get the combined status of all status checks for a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Combined status check results and individual check details\n\n24. `update_pull_request_branch`\n   - Update a pull request branch with the latest changes from the base branch (equivalent to GitHub's \"Update branch\" button)\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `expected_head_sha` (optional string): The expected SHA of the pull request's HEAD ref\n   - Returns: Success message when branch is updated\n\n25. `get_pull_request_comments`\n   - Get the review comments on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of pull request review comments with details like the comment text, author, and location in the diff\n\n26. `get_pull_request_reviews`\n   - Get the reviews on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of pull request reviews with details like the review state (APPROVED, CHANGES_REQUESTED, etc.), reviewer, and review body\n\n## Search Query Syntax\n\n### Code Search\n- `language:javascript`: Search by programming language\n- `repo:owner/name`: Search in specific repository\n- `path:app/src`: Search in specific path\n- `extension:js`: Search by file extension\n- Example: `q: \"import express\" language:typescript path:src/`\n\n### Issues Search\n- `is:issue` or `is:pr`: Filter by type\n- `is:open` or `is:closed`: Filter by state\n- `label:bug`: Search by label\n- `author:username`: Search by author\n- Example: `q: \"memory leak\" is:issue is:open label:bug`\n\n### Users Search\n- `type:user` or `type:org`: Filter by account type\n- `followers:>1000`: Filter by followers\n- `location:London`: Search by location\n- Example: `q: \"fullstack developer\" location:London followers:>100`\n\nFor detailed search syntax, see [GitHub's searching documentation](https://docs.github.com/en/search-github/searching-on-github).\n\n## Setup\n\n### Personal Access Token\n[Create a GitHub Personal Access Token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens) with appropriate permissions:\n   - Go to [Personal access tokens](https://github.com/settings/tokens) (in GitHub Settings > Developer settings)\n   - Select which repositories you'd like this token to have access to (Public, All, or Select)\n   - Create a token with the `repo` scope (\"Full control of private repositories\")\n     - Alternatively, if working only with public repositories, select only the `public_repo` scope\n   - Copy the generated token\n\n### Usage with Claude Desktop\nTo use this with Claude Desktop, add the following to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/github-enterprise-mcp/dist/index.js\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n## Build\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Start the server\nnpm start\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "repositories",
        "git workflow",
        "piyushgiitian github",
        "github enterprice"
      ],
      "category": "git-workflow-management"
    },
    "puravparab--Gitingest-MCP": {
      "owner": "puravparab",
      "name": "Gitingest-MCP",
      "url": "https://github.com/puravparab/Gitingest-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/puravparab.webp",
      "description": "Extract information about GitHub repositories, including repository summaries, project directory structures, and file contents.",
      "stars": 122,
      "forks": 21,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T04:12:58Z",
      "readme_content": "# Gitingest-MCP ![smithery badge](https://smithery.ai/badge/@puravparab/gitingest-mcp)\n\nAn MCP server for [gitingest](https://github.com/cyclotruc/gitingest). This allows MCP clients like Claude Desktop, Cline, Cursor, etc to quickly extract information about Github repositories including\n\n- Repository summaries\n- Project directory structure\n- File content\n\n<a href=\"https://glama.ai/mcp/servers/g0dylqhn3h\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/g0dylqhn3h/badge\" alt=\"Gitingest-MCP MCP server\" />\n</a>\n\nhttps://github.com/user-attachments/assets/c1fa596b-a70b-4d37-91d9-ea5e80284793\n\n## Table of Contents\n- [Installation](#installation)\n  - [Installing via Smithery](#installing-via-smithery)\n  - [Install via Github](#install-via-github)\n  - [Installing Repo Manually](#installing-repo-manually)\n  - [Updating the MCP client configuration](#updating-the-mcp-client-configuration)\n- [Debug](#debug)\n\n\n## Installation\n\n### Installing via Smithery\n\n- To install gitingest-mcp via [Smithery](https://smithery.ai/server/@puravparab/gitingest-mcp):\n\n\t```bash\n\tnpx -y @smithery/cli@latest install @puravparab/gitingest-mcp --client claude --config \"{}\" # Claude\n \t```\n \t```bash\n \tnpx -y @smithery/cli@latest run @puravparab/gitingest-mcp --client cursor --config \"{}\" # Cursor\n  \t```\n  \t```bash\n \tnpx -y @smithery/cli@latest install @puravparab/gitingest-mcp --client windsurf --config \"{}\" # Windsurf\n   \t```\n   \t```bash\n \tnpx -y @smithery/cli@latest install @puravparab/gitingest-mcp --client cline --config \"{}\" # Cline\n\t```\n\n### Install via Github\n\n1. Add this to the MCP client config file\n\n\t```json\n\t{\n\t\t\"mcpServers\": {\n\t\t\t\"gitingest-mcp\": {\n\t\t\t\t\"command\": \"<path to uv>/uvx\",\n\t\t\t\t\"args\": [\n\t\t\t\t\t\"--from\",\n\t\t\t\t\t\"git+https://github.com/puravparab/gitingest-mcp\",\n\t\t\t\t\t\"gitingest-mcp\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n\t```\n\n### Installing Repo Manually\n\n1. Clone the repo\n\t```bash\n\tgit clone https://https://github.com/puravparab/Gitingest-MCP\n\tcd Gitingest-MCP\n\t```\n\n2. Install dependencies\n\t```bash\n\tuv sync\n\t```\n\n3. Add this to the MCP client config file\n\n\t```json\n\t{\n\t\t\"mcpServers\": {\n\t\t\t\"gitingest\": {\n\t\t\t\t\"command\": \"<path to uv>/uv\",\n\t\t\t\t\"args\": [\n\t\t\t\t\t\"run\",\n\t\t\t\t\t\"--with\",\n\t\t\t\t\t\"mcp[cli]\",\n\t\t\t\t\t\"--with-editable\",\n\t\t\t\t\t\"<path to gitingest-mcp project>/gitingest_mcp\",\n\t\t\t\t\t\"mcp\",\n\t\t\t\t\t\"run\",\n\t\t\t\t\t\"<path to gitingest-mcp project>/gitingest-mcp/src/gitingest_mcp/server.py\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n\t```\n\n5. If you have issues, follow this [MCP server documentation](https://modelcontextprotocol.io/quickstart/server)\n\n### Updating the MCP client configuration\n\n1. Add to Claude Desktop\n\n\tOpen config file in your IDE\n\t```bash\n\tcursor ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n\t```\n\t```bash\n\tcode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n\t```\n\n## Debug\n\n1. Using mcp inspector\n\t```\n\tuv run mcp dev src/gitingest_mcp/server.py\n\t```\n",
      "npm_url": "https://www.npmjs.com/package/gitingest-mcp",
      "npm_downloads": 292,
      "keywords": [
        "github",
        "git",
        "gitingest",
        "information github",
        "git workflow",
        "github repositories"
      ],
      "category": "git-workflow-management"
    },
    "rajbos--ghas-mcp-server": {
      "owner": "rajbos",
      "name": "ghas-mcp-server",
      "url": "https://github.com/rajbos/ghas-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/rajbos.webp",
      "description": "Integrates GitHub Advanced Security features into development environments, enabling management of dependabot alerts, secret scanning alerts, and code scanning alerts directly from tools. Enhances repository security by providing streamlined access to critical alerts and insights.",
      "stars": 5,
      "forks": 4,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-05-21T15:43:22Z",
      "readme_content": "> [!Warning]  \n> The calls in this server have been added to the official [GitHub MCP Server](https://github.com/github/github-mcp-server), so this repo is archived and for learning purposes only!\n\n# ghas-mcp-server\nMCP server to make calls to GHAS for GitHub repositories.\n\nCurrently this has the following tools that are supported:\n- list_dependabot_alerts: List all dependabot alerts for a repository\n- list_secret_scanning_alerts: List all secret scanning alerts for a repository\n- list_code_scanning_alerts: List all code scanning alerts for a repository\n\nMake sure to add these three scopes (read only) to the configured PAT and for the correct organization as well!\n\n\n# Install in VS Code and VS Code Insiders\nUse the buttons to install the server in your VS Code or VS Code Insiders environment. Make sure to read the link before you trust it! The links go to `vscode.dev` and `insiders.vscode.dev` and contain instructions to install the server. \n\nVS Code will let you see the configuration before anything happens:\n\n![Screenshot of the configuration in VS Code](https://github.com/rajbos/ghas-mcp-server/raw/main/docs/install_dialogue.png)  \n\n[<img alt=\"Install in VS Code\" src=\"https://img.shields.io/badge/VS_Code-VS_Code?style=flat-square&label=Install%20Server&color=0098FF\">](https://vscode.dev/redirect?url=vscode%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522ghas-mcp-server%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522%2540rajbos%252Fghas-mcp-server%2522%255D%252C%2522env%2522%253A%257B%2522GITHUB_PERSONAL_ACCESS_TOKEN_USE_GHCLI%2522%253A%2522true%2522%257D%257D) [<img alt=\"Install in VS Code Insiders\" src=\"https://img.shields.io/badge/VS_Code_Insiders-VS_Code_Insiders?style=flat-square&label=Install%20Server&color=24bfa5\">](https://insiders.vscode.dev/redirect?url=vscode-insiders%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522ghas-mcp-server%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522%2540rajbos%252Fghas-mcp-server%2522%255D%252C%2522env%2522%253A%257B%2522GITHUB_PERSONAL_ACCESS_TOKEN_USE_GHCLI%2522%253A%2522true%2522%257D%257D)\n\n\n# Example configuration\nAdd the configurations below to your MCP config in the editor. \n\n## Secure option: use the authenticated GitHub CLI\nInstead of storing a Personal Access Token (see next section), you can also use the authenticated GitHub CLI. This will use the credentials you have configured in your GitHub CLI. This is useful when you have the GitHub CLI installed and already authenticated.\n\nTo use the GitHub CLI for authentication, follow the steps below:\n- Add `\"GITHUB_PERSONAL_ACCESS_TOKEN_USE_GHCLI\": \"true\"` to your environment variables.\n- Ensure you have the GitHub CLI installed and authenticated by running `gh auth login`.\n\nConfiguration: \n``` json\n{\n    \"mcp\": {\n        \"inputs\": [\n        ]\n    },\n    \"servers\": {\n        \"ghas-mcp-server\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"-y\",\n                \"@rajbos/ghas-mcp-server\"\n            ],\n            \"env\": {\n                \"GITHUB_PERSONAL_ACCESS_TOKEN_USE_GHCLI\": \"true\"\n            }\n        }\n    }\n  }\n```\n\n## Configuration with a personal access token\nFor VS Code it would look like this:\n``` json\n{\n    \"mcp\": {\n        \"inputs\": [\n            {\n                \"id\": \"github_personal_access_token\",\n                \"description\": \"GitHub Personal Access Token\",\n                \"type\": \"promptString\",\n                \"password\": true\n            }\n        ]\n    },\n    \"servers\": {\n        \"ghas-mcp-server\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"-y\",\n                \"@rajbos/ghas-mcp-server\"\n            ],\n            \"env\": {\n                \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"${input:github_personal_access_token}\"\n            }\n        }\n    }\n  }\n```\n\n# Results\n![Screenshot of the output inside of VS Code](https://github.com/rajbos/ghas-mcp-server/raw/main/docs/result.png)\n\n# Contributing\nContributions are welcome! If you have ideas for new tools or improvements, please open an issue or submit a pull request.\n\n## Quick Start\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n```\n\n## Project Structure\n\n```\nghas-mcp-server/\n├── src/\n│   ├── operations/      # MCP Tools\n│   │   └── security.ts\n│   └── index.ts         # Server entry point\n├── package.json\n└── tsconfig.json\n```\n\n## Adding Components\n\nThe project comes with the GHAS tools in `src/operations/security.ts`.\n\n## Building\n\n1. Make changes to your tools\n2. Run `npm run build` to compile\n3. The server will automatically load your tools on startup\n\n### Testing the local build\nYou can test your local build by configuring the locally build version with the following MCP config:\n\n```json\n\"servers\": {\n    \"ghas-mcp-server\": {\n        \"command\": \"node\",\n        \"args\": [\n            \"C:/Users/RobBos/Code/Repos/rajbos/ghas-mpc-server/dist/index.js\"\n        ],\n        \"env\": {\n            \"GITHUB_PERSONAL_ACCESS_TOKEN_USE_GHCLI\": \"true\"\n        }\n    }\n}\n```\nDon't forget to change the path to your local build and build the project first!\n\n## Learn More\n\n- [MCP Framework Github](https://github.com/QuantGeekDev/mcp-framework)\n- [MCP Framework Docs](https://mcp-framework.com)\n",
      "npm_url": "https://www.npmjs.com/package/@rajbos/ghas-mcp-server",
      "npm_downloads": 304,
      "keywords": [
        "github",
        "git",
        "workflow",
        "git workflow",
        "github advanced",
        "integrates github"
      ],
      "category": "git-workflow-management"
    },
    "razorback16--mcp-git-repo-browser": {
      "owner": "razorback16",
      "name": "mcp-git-repo-browser",
      "url": "https://github.com/razorback16/mcp-git-repo-browser",
      "imageUrl": "/freedevtools/mcp/pfp/razorback16.webp",
      "description": "Explore and interact with Git repositories by retrieving directory structures and reading important files with a straightforward interface.",
      "stars": 2,
      "forks": 3,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-19T17:11:35Z",
      "readme_content": "# MCP Git Repo Browser (Node.js)\n\nA Node.js implementation of a Git repository browser using the Model Context Protocol (MCP).\n\n<a href=\"https://glama.ai/mcp/servers/zmmq29sb91\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/zmmq29sb91/badge\" alt=\"Git Repo Browser MCP server\" />\n</a>\n\n## Configuration\n\nAdd this to your MCP settings configuration file:\n\n```json\n{\n    \"mcpServers\": {\n        \"mcp-git-repo-browser\": {\n            \"command\": \"node\",\n            \"args\": [\"/path/to/mcp-git-repo-browser/src/index.js\"]\n        }\n    }\n}\n```\n\n## Features\n\nThe server provides two main tools:\n\n1. `git_directory_structure`: Returns a tree-like representation of a repository's directory structure\n   - Input: Repository URL\n   - Output: ASCII tree representation of the repository structure\n\n2. `git_read_important_files`: Reads and returns the contents of specified files in a repository\n   - Input: Repository URL and list of file paths\n   - Output: Dictionary mapping file paths to their contents\n\n## Implementation Details\n\n- Uses Node.js native modules (crypto, path, os) for core functionality\n- Leverages fs-extra for enhanced file operations\n- Uses simple-git for Git repository operations\n- Implements clean error handling and resource cleanup\n- Creates deterministic temporary directories based on repository URL hashes\n- Reuses cloned repositories when possible for efficiency\n\n## Requirements\n\n- Node.js 14.x or higher\n- Git installed on the system\n\n## Installation\n\n```bash\ngit clone <repository-url>\ncd mcp-git-repo-browser\nnpm install\n```\n\n## Usage\n\nStart the server:\n\n```bash\nnode src/index.js\n```\n\nThe server runs on stdio, making it compatible with MCP clients.\n\n## License\n\nMIT License - see the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "repositories",
        "repo",
        "git workflow",
        "git repositories",
        "git repo"
      ],
      "category": "git-workflow-management"
    },
    "renantrendt--mcp-github": {
      "owner": "renantrendt",
      "name": "mcp-github",
      "url": "https://github.com/renantrendt/mcp-github",
      "imageUrl": "/freedevtools/mcp/pfp/renantrendt.webp",
      "description": "Interact with GitHub repositories, manage issues, and automate workflows. Perform file operations, track commits, and handle pull requests effectively.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-17T04:24:18Z",
      "readme_content": "# GitHub MCP Server\n\nA Model Context Protocol (MCP) server for interacting with GitHub. This tool allows AI assistants to perform various GitHub operations including repository management, file operations, issue tracking, and more.\n\n## Features\n\n- **Repository Operations**: Create repositories, fork repositories\n- **File Operations**: Create, update, and read files, push multiple files in a single commit\n- **Issue Management**: Create, update, list, and comment on issues\n- **Pull Requests**: Create pull requests\n- **Branch Management**: Create branches\n- **Search Capabilities**: Search code, repositories, issues, and users\n- **Commit History**: List commits\n\n## Setup\n\n### Prerequisites\n\n- Node.js 18 or higher\n- A GitHub Personal Access Token with appropriate permissions\n\n### Installation\n\n1. Clone this repository\n2. Install dependencies:\n   ```\n   npm install\n   ```\n3. Build the project:\n   ```\n   npm run build\n   ```\n\n### Configuration\n\nThis MCP server requires a GitHub Personal Access Token to authenticate with the GitHub API. The token should be provided as an environment variable:\n\n```\nGITHUB_PERSONAL_ACCESS_TOKEN=your_token_here\n```\n\nWhen deploying with Smithery, the token is configured through the `githubPersonalAccessToken` configuration option.\n\n## Usage\n\n### Running Locally\n\nTo run the server locally:\n\n```\nGITHUB_PERSONAL_ACCESS_TOKEN=your_token_here node dist/index.js\n```\n\n### Deploying with Smithery\n\nThis repository includes the necessary configuration files for deploying with Smithery:\n\n- `Dockerfile`: Defines how to build the Docker image for the MCP server\n- `smithery.yaml`: Configures how Smithery should start the MCP server\n\nRefer to the [Smithery documentation](https://smithery.ai/docs) for deployment instructions.\n\n## Development\n\n### Building\n\n```\nnpm run build\n```\n\n### Linting\n\n```\nnpm run lint\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "commits",
        "git workflow",
        "mcp github",
        "github interact"
      ],
      "category": "git-workflow-management"
    },
    "renantrendt--reference-servers": {
      "owner": "renantrendt",
      "name": "reference-servers",
      "url": "https://github.com/renantrendt/reference-servers",
      "imageUrl": "/freedevtools/mcp/pfp/renantrendt.webp",
      "description": "Interact with GitHub repositories, manage files, issues, and pull requests, while preserving Git history and enabling advanced search functionalities.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-03-16T01:10:47Z",
      "readme_content": "# Model Context Protocol servers\n\nThis repository is a collection of *reference implementations* for the [Model Context Protocol](https://modelcontextprotocol.io/) (MCP), as well as references\nto community built servers and additional resources.\n\nThe servers in this repository showcase the versatility and extensibility of MCP, demonstrating how it can be used to give Large Language Models (LLMs) secure, controlled access to tools and data sources.\nEach MCP server is implemented with either the [Typescript MCP SDK](https://github.com/modelcontextprotocol/typescript-sdk) or [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk).\n\n> Note: Lists in this README are maintained in alphabetical order to minimize merge conflicts when adding new items.\n\n## 🌟 Reference Servers\n\nThese servers aim to demonstrate MCP features and the Typescript and Python SDK.\n\n- **[AWS KB Retrieval](src/aws-kb-retrieval-server)** - Retrieval from AWS Knowledge Base using Bedrock Agent Runtime\n- **[Brave Search](src/brave-search)** - Web and local search using Brave's Search API\n- **[EverArt](src/everart)** - AI image generation using various models\n- **[Everything](src/everything)** - Reference / test server with prompts, resources, and tools\n- **[Fetch](src/fetch)** - Web content fetching and conversion for efficient LLM usage\n- **[Filesystem](src/filesystem)** - Secure file operations with configurable access controls\n- **[Git](src/git)** - Tools to read, search, and manipulate Git repositories\n- **[GitHub](src/github)** - Repository management, file operations, and GitHub API integration\n- **[GitLab](src/gitlab)** - GitLab API, enabling project management\n- **[Google Drive](src/gdrive)** - File access and search capabilities for Google Drive\n- **[Google Maps](src/google-maps)** - Location services, directions, and place details\n- **[Memory](src/memory)** - Knowledge graph-based persistent memory system\n- **[PostgreSQL](src/postgres)** - Read-only database access with schema inspection\n- **[Puppeteer](src/puppeteer)** - Browser automation and web scraping\n- **[Sentry](src/sentry)** - Retrieving and analyzing issues from Sentry.io\n- **[Sequential Thinking](src/sequentialthinking)** - Dynamic and reflective problem-solving through thought sequences\n- **[Slack](src/slack)** - Channel management and messaging capabilities\n- **[Sqlite](src/sqlite)** - Database interaction and business intelligence capabilities\n- **[Time](src/time)** - Time and timezone conversion capabilities\n\n## 🤝 Third-Party Servers\n\n### 🎖️ Official Integrations\n\nOfficial integrations are maintained by companies building production ready MCP servers for their platforms.\n\n- <img height=\"12\" width=\"12\" src=\"https://axiom.co/favicon.ico\" alt=\"Axiom Logo\" /> **[Axiom](https://github.com/axiomhq/mcp-server-axiom)** - Query and analyze your Axiom logs, traces, and all other event data in natural language\n- <img height=\"12\" width=\"12\" src=\"https://browserbase.com/favicon.ico\" alt=\"Browserbase Logo\" /> **[Browserbase](https://github.com/browserbase/mcp-server-browserbase)** - Automate browser interactions in the cloud (e.g. web navigation, data extraction, form filling, and more)\n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/cloudflare\" /> **[Cloudflare](https://github.com/cloudflare/mcp-server-cloudflare)** - Deploy, configure & interrogate your resources on the Cloudflare developer platform (e.g. Workers/KV/R2/D1)\n- <img height=\"12\" width=\"12\" src=\"https://e2b.dev/favicon.ico\" alt=\"E2B Logo\" /> **[E2B](https://github.com/e2b-dev/mcp-server)** - Run code in secure sandboxes hosted by [E2B](https://e2b.dev)\n- <img height=\"12\" width=\"12\" src=\"https://exa.ai/images/favicon-32x32.png\" alt=\"Exa Logo\" /> **[Exa](https://github.com/exa-labs/exa-mcp-server)** - Search Engine made for AIs by [Exa](https://exa.ai)\n- <img height=\"12\" width=\"12\" src=\"https://fireproof.storage/favicon.ico\" alt=\"Fireproof Logo\" /> **[Fireproof](https://github.com/fireproof-storage/mcp-database-server)** - Immutable ledger database with live synchronization\n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/jetbrains\" /> **[JetBrains](https://github.com/JetBrains/mcp-jetbrains)** – Work on your code with JetBrains IDEs\n- <img height=\"12\" width=\"12\" src=\"https://kagi.com/favicon.ico\" alt=\"Kagi Logo\" /> **[Kagi Search](https://github.com/kagisearch/kagimcp)** - Search the web using Kagi's search API\n- <img height=\"12\" width=\"12\" src=\"https://www.meilisearch.com/favicon.ico\" alt=\"Meilisearch Logo\" /> **[Meilisearch](https://github.com/meilisearch/meilisearch-mcp)** - Interact & query with Meilisearch (Full-text & semantic search API)\n- <img height=\"12\" width=\"12\" src=\"https://metoro.io/static/images/logos/Metoro.svg\" /> **[Metoro](https://github.com/metoro-io/metoro-mcp-server)** - Query and interact with kubernetes environments monitored by Metoro\n- <img height=\"12\" width=\"12\" src=\"https://www.motherduck.com/favicon.ico\" alt=\"MotherDuck Logo\" /> **[MotherDuck](https://github.com/motherduckdb/mcp-server-motherduck)** - Query and analyze data with MotherDuck and local DuckDB\n- <img height=\"12\" width=\"12\" src=\"https://needle-ai.com/images/needle-logo-orange-2-rounded.png\" alt=\"Needle AI Logo\" /> **[Needle](https://github.com/needle-ai/needle-mcp)** - Production-ready RAG out of the box to search and retrieve data from your own documents.\n- <img height=\"12\" width=\"12\" src=\"https://neo4j.com/favicon.ico\" alt=\"Neo4j Logo\" /> **[Neo4j](https://github.com/neo4j-contrib/mcp-neo4j/)** - Neo4j graph database server (schema + read/write-cypher) and separate graph database backed memory\n- **[Neon](https://github.com/neondatabase/mcp-server-neon)** - Interact with the Neon serverless Postgres platform\n- <img height=\"12\" width=\"12\" src=\"https://qdrant.tech/img/brand-resources-logos/logomark.svg\" /> **[Qdrant](https://github.com/qdrant/mcp-server-qdrant/)** - Implement semantic memory layer on top of the Qdrant vector search engine\n- **[Raygun](https://github.com/MindscapeHQ/mcp-server-raygun)** - Interact with your crash reporting and real using monitoring data on your Raygun account\n- <img height=\"12\" width=\"12\" src=\"https://pics.fatwang2.com/56912e614b35093426c515860f9f2234.svg\" /> [Search1API](https://github.com/fatwang2/search1api-mcp) - One API for Search, Crawling, and Sitemaps\n- <img height=\"12\" width=\"12\" src=\"https://www.tinybird.co/favicon.ico\" alt=\"Tinybird Logo\" /> **[Tinybird](https://github.com/tinybirdco/mcp-tinybird)** - Interact with Tinybird serverless ClickHouse platform\n\n### 🌎 Community Servers\n\nA growing set of community-developed and maintained servers demonstrates various applications of MCP across different domains.\n\n> **Note:** Community servers are **untested** and should be used at **your own risk**. They are not affiliated with or endorsed by Anthropic.\n\n- **[AWS S3](https://github.com/aws-samples/sample-mcp-server-s3)** - A sample MCP server for AWS S3 that flexibly fetches objects from S3 such as PDF documents\n- **[AWS](https://github.com/rishikavikondala/mcp-server-aws)** - Perform operations on your AWS resources using an LLM\n- **[Airtable](https://github.com/domdomegg/airtable-mcp-server)** - Read and write access to [Airtable](https://airtable.com/) databases, with schema inspection.\n- **[Airtable](https://github.com/felores/airtable-mcp)** - Airtable Model Context Protocol Server.\n- **[AlphaVantage](https://github.com/calvernaz/alphavantage)** - MCP server for stock market data API [AlphaVantage](https://www.alphavantage.co)\n- **[Anki](https://github.com/scorzeth/anki-mcp-server)** - An MCP server for interacting with your [Anki](https://apps.ankiweb.net) decks and cards.\n- **[Any Chat Completions](https://github.com/pyroprompts/any-chat-completions-mcp)** - Interact with any OpenAI SDK Compatible Chat Completions API like OpenAI, Perplexity, Groq, xAI and many more.\n- **[Atlassian](https://github.com/sooperset/mcp-atlassian)** - Interact with Atlassian Cloud products (Confluence and Jira) including searching/reading Confluence spaces/pages, accessing Jira issues, and project metadata.\n- **[BigQuery](https://github.com/LucasHild/mcp-server-bigquery)** (by LucasHild) - This server enables LLMs to inspect database schemas and execute queries on BigQuery.\n- **[BigQuery](https://github.com/ergut/mcp-bigquery-server)** (by ergut) - Server implementation for Google BigQuery integration that enables direct BigQuery database access and querying capabilities\n- **[ChatMCP](https://github.com/AI-QL/chat-mcp)** – An Open Source Cross-platform GUI Desktop application compatible with Linux, macOS, and Windows, enabling seamless interaction with MCP servers across dynamically selectable LLMs, by **[AIQL](https://github.com/AI-QL)**\n- **[ChatSum](https://github.com/mcpso/mcp-server-chatsum)** - Query and Summarize chat messages with LLM. by [mcpso](https://mcp.so)\n- **[Chroma](https://github.com/privetin/chroma)** - Vector database server for semantic document search and metadata filtering, built on Chroma\n- **[Cloudinary](https://github.com/felores/cloudinary-mcp-server)** - Cloudinary Model Context Protocol Server to upload media to Cloudinary and get back the media link and details.\n- **[cognee-mcp](https://github.com/topoteretes/cognee-mcp-server)** - GraphRAG memory server with customizable ingestion, data processing and search\n- **[coin_api_mcp](https://github.com/longmans/coin_api_mcp)** - Provides access to [coinmarketcap](https://coinmarketcap.com/) cryptocurrency data.\n- **[Contentful-mcp](https://github.com/ivo-toby/contentful-mcp)** - Read, update, delete, publish content in your [Contentful](https://contentful.com) space(s) from this MCP Server.\n- **[Data Exploration](https://github.com/reading-plus-ai/mcp-server-data-exploration)** - MCP server for autonomous data exploration on .csv-based datasets, providing intelligent insights with minimal effort. NOTE: Will execute arbitrary Python code on your machine, please use with caution!\n- **[Dataset Viewer](https://github.com/privetin/dataset-viewer)** - Browse and analyze Hugging Face datasets with features like search, filtering, statistics, and data export\n- **[DevRev](https://github.com/kpsunil97/devrev-mcp-server)** - An MCP server to integrate with DevRev APIs to search through your DevRev Knowledge Graph where objects can be imported from diff. sources listed [here](https://devrev.ai/docs/import#available-sources).\n- **[Dify](https://github.com/YanxingLiu/dify-mcp-server)** - A simple implementation of an MCP server for dify workflows.\n- **[Docker](https://github.com/ckreiling/mcp-server-docker)** - Integrate with Docker to manage containers, images, volumes, and networks.\n- **[Drupal](https://github.com/Omedia/mcp-server-drupal)** - Server for interacting with [Drupal](https://www.drupal.org/project/mcp) using STDIO transport layer.\n- **[Elasticsearch](https://github.com/cr7258/elasticsearch-mcp-server)** - MCP server implementation that provides Elasticsearch interaction.\n- **[Fetch](https://github.com/zcaceres/fetch-mcp)** - A server that flexibly fetches HTML, JSON, Markdown, or plaintext.\n- **[FireCrawl](https://github.com/vrknetha/mcp-server-firecrawl)** - Advanced web scraping with JavaScript rendering, PDF support, and smart rate limiting\n- **[FlightRadar24](https://github.com/sunsetcoder/flightradar24-mcp-server)** - A Claude Desktop MCP server that helps you track flights in real-time using Flightradar24 data.\n- **[Glean](https://github.com/longyi1207/glean-mcp-server)** - A server that uses Glean API to search and chat.\n- **[Google Calendar](https://github.com/v-3/google-calendar)** - Integration with Google Calendar to check schedules, find time, and add/delete events\n- **[Google Tasks](https://github.com/zcaceres/gtasks-mcp)** - Google Tasks API Model Context Protocol Server.\n- **[Home Assistant](https://github.com/tevonsb/homeassistant-mcp)** - Interact with [Home Assistant](https://www.home-assistant.io/) including viewing and controlling lights, switches, sensors, and all other Home Assistant entities.\n- **[HuggingFace Spaces](https://github.com/evalstate/mcp-hfspace)** - Server for using HuggingFace Spaces, supporting Open Source Image, Audio, Text Models and more. Claude Desktop mode for easy integration.\n- **[Inoyu](https://github.com/sergehuber/inoyu-mcp-unomi-server)** - Interact with an Apache Unomi CDP customer data platform to retrieve and update customer profiles\n- **[Keycloak MCP](https://github.com/ChristophEnglisch/keycloak-model-context-protocol)** - This MCP server enables natural language interaction with Keycloak for user and realm management including creating, deleting, and listing users and realms.\n- **[Kubernetes](https://github.com/Flux159/mcp-server-kubernetes)** - Connect to Kubernetes cluster and manage pods, deployments, and services.\n- **[Linear](https://github.com/jerhadf/linear-mcp-server)** - Allows LLM to interact with Linear's API for project management, including searching, creating, and updating issues.\n- **[LlamaCloud](https://github.com/run-llama/mcp-server-llamacloud)** (by marcusschiesser) - Integrate the data stored in a managed index on [LlamaCloud](https://cloud.llamaindex.ai/)\n- **[MCP Installer](https://github.com/anaisbetts/mcp-installer)** - This server is a server that installs other MCP servers for you.\n- **[mcp-k8s-go](https://github.com/strowk/mcp-k8s-go)** - Golang-based Kubernetes server for MCP to browse pods and their logs, events, namespaces and more. Built to be extensible.\n- **[MSSQL](https://github.com/aekanun2020/mcp-server/)** - MSSQL database integration with configurable access controls and schema inspection\n- **[Markdownify](https://github.com/zcaceres/mcp-markdownify-server)** - MCP to convert almost anything to Markdown (PPTX, HTML, PDF, Youtube Transcripts and more)\n- **[Minima](https://github.com/dmayboroda/minima)** - MCP server for RAG on local files\n- **[MongoDB](https://github.com/kiliczsh/mcp-mongo-server)** - A Model Context Protocol Server for MongoDB.\n- **[MySQL](https://github.com/benborla/mcp-server-mysql)** (by benborla) - MySQL database integration in NodeJS with configurable access controls and schema inspection\n- **[MySQL](https://github.com/designcomputer/mysql_mcp_server)** (by DesignComputer) - MySQL database integration in Python with configurable access controls and schema inspection\n- **[NS Travel Information](https://github.com/r-huijts/ns-mcp-server)** - Access Dutch Railways (NS) real-time train travel information and disruptions through the official NS API.\n- **[Notion](https://github.com/suekou/mcp-notion-server)** (by suekou) - Interact with Notion API.\n- **[Notion](https://github.com/v-3/notion-server)** (by v-3) - Notion MCP integration. Search, Read, Update, and Create pages through Claude chat.\n- **[oatpp-mcp](https://github.com/oatpp/oatpp-mcp)** - C++ MCP integration for Oat++. Use [Oat++](https://oatpp.io) to build MCP servers.\n- **[Obsidian Markdown Notes](https://github.com/calclavia/mcp-obsidian)** - Read and search through your Obsidian vault or any directory containing Markdown notes\n- **[OpenAPI](https://github.com/snaggle-ai/openapi-mcp-server)** - Interact with [OpenAPI](https://www.openapis.org/) APIs.\n- **[OpenCTI](https://github.com/Spathodea-Network/opencti-mcp)** - Interact with OpenCTI platform to retrieve threat intelligence data including reports, indicators, malware and threat actors.\n- **[OpenRPC](https://github.com/shanejonas/openrpc-mpc-server)** - Interact with and discover JSON-RPC APIs via [OpenRPC](https://open-rpc.org).\n- **[Pandoc](https://github.com/vivekVells/mcp-pandoc)** - MCP server for seamless document format conversion using Pandoc, supporting Markdown, HTML, and plain text, with other formats like PDF, csv and docx in development.\n- **[Pinecone](https://github.com/sirmews/mcp-pinecone)** - MCP server for searching and uploading records to Pinecone. Allows for simple RAG features, leveraging Pinecone's Inference API.\n- **[Placid.app](https://github.com/felores/placid-mcp-server)** - Generate image and video creatives using Placid.app templates\n- **[Playwright](https://github.com/executeautomation/mcp-playwright)** - This MCP Server will help you run browser automation and webscraping using Playwright\n- **[Postman](https://github.com/shannonlal/mcp-postman)** - MCP server for running Postman Collections locally via Newman. Allows for simple execution of Postman Server and returns the results of whether the collection passed all the tests.\n- **[RAG Web Browser](https://github.com/apify/mcp-server-rag-web-browser)** An MCP server for Apify's RAG Web Browser Actor to perform web searches, scrape URLs, and return content in Markdown.\n- **[Rememberizer AI](https://github.com/skydeckai/mcp-server-rememberizer)** - An MCP server designed for interacting with the Rememberizer data source, facilitating enhanced knowledge retrieval.\n- **[Salesforce MCP](https://github.com/smn2gnt/MCP-Salesforce)** - Interact with Salesforce Data and Metadata\n- **[Scholarly](https://github.com/adityak74/mcp-scholarly)** - A MCP server to search for scholarly and academic articles.\n- **[Snowflake](https://github.com/isaacwasserman/mcp-snowflake-server)** - This MCP server enables LLMs to interact with Snowflake databases, allowing for secure and controlled data operations.\n- **[Spotify](https://github.com/varunneal/spotify-mcp)** - This MCP allows an LLM to play and use Spotify.\n- **[TMDB](https://github.com/Laksh-star/mcp-server-tmdb)** - This MCP server integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.\n- **[Tavily search](https://github.com/RamXX/mcp-tavily)** - An MCP server for Tavily's search & news API, with explicit site inclusions/exclusions\n- **[Todoist](https://github.com/abhiz123/todoist-mcp-server)** - Interact with Todoist to manage your tasks.\n- **[Vega-Lite](https://github.com/isaacwasserman/mcp-vegalite-server)** - Generate visualizations from fetched data using the VegaLite format and renderer.\n- **[Windows CLI](https://github.com/SimonB97/win-cli-mcp-server)** - MCP server for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, and Git Bash shells.\n- **[X (Twitter)](https://github.com/EnesCinr/twitter-mcp)** (by EnesCinr) - Interact with twitter API. Post tweets and search for tweets by query.\n- **[X (Twitter)](https://github.com/vidhupv/x-mcp)** (by vidhupv) - Create, manage and publish X/Twitter posts directly through Claude chat.\n- **[XMind](https://github.com/apeyroux/mcp-xmind)** - Read and search through your XMind directory containing XMind files.\n\n## 📚 Frameworks\n\nThese are high-level frameworks that make it easier to build MCP servers.\n\n* [EasyMCP](https://github.com/zcaceres/easy-mcp/) (TypeScript)\n* [FastMCP](https://github.com/punkpeye/fastmcp) (TypeScript)\n\n## 📚 Resources\n\nAdditional resources on MCP.\n\n- **[AiMCP](https://www.aimcp.info)** - A collection of MCP clients&servers to find the right mcp tools by **[Hekmon](https://github.com/hekmon8)**\n- **[Awesome Crypto MCP Servers by badkk](https://github.com/badkk/awesome-crypto-mcp-servers)** - A curated list of MCP servers by **[Luke Fan](https://github.com/badkk)**\n- **[Awesome MCP Servers by appcypher](https://github.com/appcypher/awesome-mcp-servers)** - A curated list of MCP servers by **[Stephen Akinyemi](https://github.com/appcypher)**\n- **[Awesome MCP Servers by punkpeye](https://github.com/punkpeye/awesome-mcp-servers)** (**[website](https://glama.ai/mcp/servers)**) - A curated list of MCP servers by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Awesome MCP Servers by wong2](https://github.com/wong2/awesome-mcp-servers)** (**[website](https://mcpservers.org)**) - A curated list of MCP servers by **[wong2](https://github.com/wong2)**\n- **[Discord Server](https://glama.ai/mcp/discord)** – A community discord server dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[MCP Badges](https://github.com/mcpx-dev/mcp-badges)** – Quickly highlight your MCP project with clear, eye-catching badges, by **[Ironben](https://github.com/nanbingxyz)**\n- **[MCP X Community](https://x.com/i/communities/1861891349609603310)** – A X community for MCP by **[Xiaoyi](https://x.com/chxy)**\n- **[mcp-cli](https://github.com/wong2/mcp-cli)** - A CLI inspector for the Model Context Protocol by **[wong2](https://github.com/wong2)**\n- **[mcp-get](https://mcp-get.com)** - Command line tool for installing and managing MCP servers by **[Michael Latman](https://github.com/michaellatman)**\n- **[mcp-manager](https://github.com/zueai/mcp-manager)** - Simple Web UI to install and manage MCP servers for Claude Desktop by **[Zue](https://github.com/zueai)**\n- **[MCPHub](https://github.com/Jeamee/MCPHub-Desktop)** – An Open Source MacOS & Windows GUI Desktop app for discovering, installing and managing MCP servers by **[Jeamee](https://github.com/jeamee)**\n- **[mcp.run](https://mcp.run)** - A hosted registry and control plane to install & run secure + portable MCP Servers.\n- **[Open-Sourced MCP Servers Directory](https://github.com/chatmcp/mcp-directory)** - A curated list of MCP servers by **[mcpso](https://mcp.so)**\n- **[PulseMCP](https://www.pulsemcp.com)** ([API](https://www.pulsemcp.com/api)) - Community hub & weekly newsletter for discovering MCP servers, clients, articles, and news by **[Tadas Antanavicius](https://github.com/tadasant)**, **[Mike Coughlin](https://github.com/macoughl)**, and **[Ravina Patel](https://github.com/ravinahp)**\n- **[r/mcp](https://www.reddit.com/r/mcp)** – A Reddit community dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Smithery](https://smithery.ai/)** - A registry of MCP servers to find the right tools for your LLM agents by **[Henry Mao](https://github.com/calclavia)**\n\n## 🚀 Getting Started\n\n### Using MCP Servers in this Repository\nTypescript-based servers in this repository can be used directly with `npx`.\n\nFor example, this will start the [Memory](src/memory) server:\n```sh\nnpx -y @modelcontextprotocol/server-memory\n```\n\nPython-based servers in this repository can be used directly with [`uvx`](https://docs.astral.sh/uv/concepts/tools/) or [`pip`](https://pypi.org/project/pip/). `uvx` is recommended for ease of use and setup.\n\nFor example, this will start the [Git](src/git) server:\n```sh\n# With uvx\nuvx mcp-server-git\n\n# With pip\npip install mcp-server-git\npython -m mcp_server_git\n```\n\nFollow [these](https://docs.astral.sh/uv/getting-started/installation/) instructions to install `uv` / `uvx` and [these](https://pip.pypa.io/en/stable/installation/) to install `pip`.\n\n### Using an MCP Client\nHowever, running a server on its own isn't very useful, and should instead be configured into an MCP client. For example, here's the Claude Desktop configuration to use the above server:\n\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-memory\"]\n    }\n  }\n}\n```\n\nAdditional examples of using the Claude Desktop as an MCP client might look like:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/path/to/allowed/files\"]\n    },\n    \"git\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-git\", \"--repository\", \"path/to/git/repo\"]\n    },\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    },\n    \"postgres\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\", \"postgresql://localhost/mydb\"]\n    }\n  }\n}\n```\n\n## 🛠️ Creating Your Own Server\n\nInterested in creating your own MCP server? Visit the official documentation at [modelcontextprotocol.io](https://modelcontextprotocol.io/introduction) for comprehensive guides, best practices, and technical details on implementing MCP servers.\n\n## 🤝 Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributing to this repository.\n\n## 🔒 Security\n\nSee [SECURITY.md](SECURITY.md) for reporting security vulnerabilities.\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 💬 Community\n\n- [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions)\n\n## ⭐ Support\n\nIf you find MCP servers useful, please consider starring the repository and contributing new servers or improvements!\n\n---\n\nManaged by Anthropic, but built together with the community. The Model Context Protocol is open source and we encourage everyone to contribute their own servers and improvements!\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "github",
        "repositories",
        "git workflow",
        "preserving git",
        "github repositories"
      ],
      "category": "git-workflow-management"
    },
    "rifqi96--mcp-gitlab": {
      "owner": "rifqi96",
      "name": "mcp-gitlab",
      "url": "https://github.com/rifqi96/mcp-gitlab",
      "imageUrl": "/freedevtools/mcp/pfp/rifqi96.webp",
      "description": "Manage GitLab projects, branches, merge requests, and CI/CD pipelines. Review code, add comments, and configure integrations through an AI assistant.",
      "stars": 12,
      "forks": 12,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-30T12:02:13Z",
      "readme_content": "# GitLab MCP Server\n\nA Model Context Protocol (MCP) server that enables you to interact with your GitLab account. Get diffs, analyze merge requests, review code, cherry-pick changes, and more. This is an extended version of the [MCP GitLab Server](https://github.com/modelcontextprotocol/servers/tree/main/src/gitlab) from the Model Context Protocol project.\n\n<a href=\"https://glama.ai/mcp/servers/@rifqi96/mcp-gitlab\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@rifqi96/mcp-gitlab/badge\" alt=\"GitLab Server MCP server\" />\n</a>\n\n## Features\n\nThis MCP server provides comprehensive tools for interacting with GitLab repositories, including:\n\n### Core Repository Features\n- Listing projects and retrieving details\n- Managing branches and repositories\n- Working with merge requests and diffs\n- Adding comments and internal notes to merge requests\n- Updating merge request attributes\n- Listing and working with issues\n- Getting and comparing repository file contents\n\n### Project Settings & Integrations\n- Managing project integrations and services\n- Configuring and controlling Slack integration\n- Setting up, updating, and testing webhooks\n\n### CI/CD Management\n- Working with pipeline trigger tokens\n- Managing CI/CD variables\n- Triggering and controlling pipelines\n\n### User & Group Administration\n- Listing and managing users\n- Working with groups and group memberships\n- Managing project members and access levels\n\n## Installation\n\n### Prerequisites\n\n- Node.js (v16 or higher)\n- npm\n- A GitLab account with an API token\n\n### Setup\n\n1. Clone the repository:\n\n```bash\ngit clone https://github.com/rifqi96/mcp-gitlab.git\ncd mcp-gitlab\n```\n\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n3. Build the server:\n\n```bash\nnpm run build\n```\n\n4. Install git hooks (optional, but recommended for contributors):\n\n```bash\nnpm run install-hooks\n```\n\nThis installs a pre-commit hook that automatically regenerates TOOLS.md when src/utils/tools-data.ts changes.\n\n5. Configure your GitLab API token:\n\nYou need to provide your GitLab API token in the MCP settings configuration file. The token is used to authenticate with the GitLab API.\n\nFor Cursor/Roo Cline, add the following to your MCP settings file (`~/Library/Application Support/Cursor/User/globalStorage/rooveterinaryinc.roo-cline/settings/cline_mcp_settings.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"gitlab\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/mcp-gitlab/build/index.js\"\n      ],\n      \"env\": {\n        \"GITLAB_API_TOKEN\": \"YOUR_GITLAB_API_TOKEN\",\n        \"GITLAB_API_URL\": \"https://gitlab.com/api/v4\"\n      }\n    }\n  }\n}\n```\n\nFor Claude Desktop, add the following to your MCP settings file (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"gitlab\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/mcp-gitlab/build/index.js\"\n      ],\n      \"env\": {\n        \"GITLAB_API_TOKEN\": \"YOUR_GITLAB_API_TOKEN\",\n        \"GITLAB_API_URL\": \"https://gitlab.com/api/v4\"\n      }\n    }\n  }\n}\n```\n\nReplace `YOUR_GITLAB_API_TOKEN` with your actual GitLab API token. You can generate a token in your GitLab account under Settings > Access Tokens.\n\n## Available Tools\n\nFor a complete list of available tools and their parameters, see [TOOLS.md](./TOOLS.md).\n\n## Example Usage\n\nHere are examples of how to use these tools with AI assistants that support MCP:\n\n### List your projects\n\n```\nCould you list my GitLab projects?\n```\n\n### Get information about a specific merge request\n\n```\nCan you show me the details of merge request with ID 123 in the project 'mygroup/myproject'?\n```\n\n### Add a comment to a merge request\n\n```\nPlease add a comment to merge request 123 in project 'mygroup/myproject' saying \"This looks good, but please add more tests.\"\n```\n\n### Add an internal note to a merge request\n\n```\nAdd an internal note to merge request 123 in project 'mygroup/myproject' that says \"Needs security review before merging.\" Make sure it's only visible to team members.\n```\n\n### Update a merge request title and description\n\n```\nUpdate the title of merge request 123 in project 'mygroup/myproject' to \"Fix login page performance issues\" and update the description to include \"This PR addresses the slow loading times on the login page by optimizing database queries.\"\n```\n\n### Compare branches\n\n```\nCompare the 'feature-branch' with 'main' in the project 'mygroup/myproject' and show me the differences.\n```\n\n## Practical Workflows\n\n### Reviewing a Merge Request\n\n```\n1. Show me merge request 123 in project 'mygroup/myproject'\n2. Show me the changes for this merge request\n3. Add an internal note with my review comments\n4. Update the merge request title to better reflect the changes\n```\n\n### Project Exploration\n\n```\n1. List all my GitLab projects\n2. Show me the details of project 'mygroup/myproject'\n3. List all branches in this project\n4. Show me the content of the README.md file in the main branch\n```\n\n## Available Resources\n\n### gitlab://projects\n\nList of GitLab projects accessible with your API token.\n\n## Integration with AI Assistants\n\nThe GitLab MCP Server integrates with AI assistants that support the Model Context Protocol (MCP). \n\n### Capabilities\n\nWhen connected to an AI assistant, this server enables the assistant to:\n\n1. **View and analyze code**: The assistant can fetch file contents, view branch differences, and examine merge request changes for better code understanding.\n\n2. **Provide code reviews**: The assistant can analyze merge requests and provide feedback through comments or internal notes.\n\n3. **Manage project workflows**: The assistant can update merge request attributes, add comments, and help with repository management tasks.\n\n4. **Explore project structure**: The assistant can browse projects, branches, and files to understand the codebase structure.\n\n5. **Configure CI/CD and integrations**: The assistant can help set up webhooks, manage CI/CD variables, and configure project integrations.\n\n### Getting the Most from AI Assistant Integration\n\n- Be specific when asking about projects, merge requests, or files\n- Provide project IDs or paths when possible\n- Use the assistant for code review by asking it to analyze specific merge requests\n- Have the assistant help with repository configuration and management tasks\n- Use internal notes for team-only feedback on merge requests\n\n## License\n\nMIT",
      "npm_url": "https://www.npmjs.com/package/mcp-gitlab",
      "npm_downloads": 285,
      "keywords": [
        "gitlab",
        "git",
        "workflow",
        "gitlab manage",
        "manage gitlab",
        "gitlab projects"
      ],
      "category": "git-workflow-management"
    },
    "ropon--mcp-gitee": {
      "owner": "ropon",
      "name": "mcp-gitee",
      "url": "https://github.com/ropon/mcp-gitee",
      "imageUrl": "/freedevtools/mcp/pfp/ropon.webp",
      "description": "Interact with Gitee's API to manage repositories, issues, pull requests, and notifications. Automate workflows by using AI assistants to efficiently create and manage tasks within Gitee.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-04-14T02:37:42Z",
      "readme_content": "# Gitee MCP Server\n\nGitee MCP Server is a Model Context Protocol (MCP) server implementation for Gitee. It provides a set of tools for interacting with Gitee's API, allowing AI assistants to manage repositories, issues, pull requests, and more.\n\n## Features\n\n- Interact with Gitee repositories, issues, pull requests, and notifications\n- Configurable API base URL to support different Gitee instances\n- Command-line flags for easy configuration\n- Supports both personal, organization, and enterprise operations\n\n<details>\n<summary><b>Practical scenario: Obtain Issue from the repository, implement and create a Pull Request</b></summary>\n\n1. Get repository Issues\n![get_repo_issues](./docs/images/get_repo_issues.jpg)\n2. Implement coding & create Pull Request based on Issue details\n![implement_issue](./docs/images/implement_issue.jpg)\n3. Comment & Close Issue\n![comment_and_close_issue](./docs/images/comment_and_close_issue.jpg)\n</details>\n\n## Installation\n\n### Prerequisites\n\n- Go 1.23.0 or higher\n- Gitee account with an access token, [Go to get](https://gitee.com/profile/personal_access_tokens)\n\n### Building from Source\n\n1. Clone the repository:\n   ```bash\n   git clone https://gitee.com/oschina/mcp-gitee.git\n   cd mcp-gitee\n   ```\n\n2. Build the project:\n   ```bash\n   make build\n   ```\n   Move ./bin/mcp-gitee PATH env\n\n### Use go install\n   ```bash\n   go install gitee.com/oschina/mcp-gitee@latest\n   ```\n\n## Usage\n\nCheck mcp-gitee version:\n\n```bash\nmcp-gitee --version\n```\n\n### MCP Hosts Configuration\n<div align=\"center\">\n  <a href=\"docs/install/claude.md\" title=\"Claude\"><img src=\"docs/install/logos/Claude.png\" width=80 height=80></a>\n  <a href=\"docs/install/cursor.md\" title=\"Cursor\"><img src=\"docs/install/logos/Cursor.png\" width=80 height=80></a>\n  <a href=\"docs/install/cline.md\" title=\"Cline\"><img src=\"docs/install/logos/Cline.png\" width=80 height=80></a>\n  <a href=\"docs/install/windsurf.md\" title=\"Windsurf\"><img src=\"docs/install/logos/Windsurf.png\" width=80 height=80></a>\n</div>\n\n**Cursor**、**Windsurf** config example:\n```json\n{\n  \"mcpServers\": {\n    \"gitee\": {\n      \"command\": \"mcp-gitee\",\n      \"env\": {\n        \"GITEE_API_BASE\": \"https://gitee.com/api/v5\",\n        \"GITEE_ACCESS_TOKEN\": \"<your personal access token>\"\n      }\n    }\n  }\n}\n```\n\n### Command-line Options\n\n- `-token`: Gitee access token\n- `-api-base`: Gitee API base URL (default: https://gitee.com/api/v5)\n- `-version`: Show version information\n- `-transport`: Transport type (stdio or sse, default: stdio)\n- `-sse-address`: The host and port to start the SSE server on (default: localhost:8000)\n\n### Environment Variables\n\nYou can also configure the server using environment variables:\n\n- `GITEE_ACCESS_TOKEN`: Gitee access token\n- `GITEE_API_BASE`: Gitee API base URL\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for more details.\n\n## Available Tools\n\nThe server provides various tools for interacting with Gitee:\n\n| Tool                        | Category | Description |\n|-----------------------------|----------|-------------|\n| **list_user_repos**         | Repository | List user authorized repositories |\n| **get_file_content**        | Repository | Get the content of a file in a repository |\n| **create_user_repo**        | Repository | Create a user repository |\n| **create_org_repo**         | Repository | Create an organization repository |\n| **create_enter_repo**       | Repository | Create an enterprise repository |\n| **create_release**          | Repository | Create a release for a repository |\n| **list_releases**           | Repository | List repository releases |\n| **list_repo_pulls**         | Pull Request | List pull requests in a repository |\n| **merge_pull**              | Pull Request | Merge a pull request |\n| **create_pull**             | Pull Request | Create a pull request |\n| **update_pull**             | Pull Request | Update a pull request |\n| **get_pull_detail**         | Pull Request | Get details of a pull request |\n| **comment_pull**            | Pull Request | Comment on a pull request |\n| **list_pull_comments**      | Pull Request | List all comments for a pull request |\n| **create_issue**            | Issue | Create an issue |\n| **update_issue**            | Issue | Update an issue |\n| **get_repo_issue_detail**   | Issue | Get details of a repository issue |\n| **list_repo_issues**        | Issue | List repository issues |\n| **comment_issue**           | Issue | Comment on an issue |\n| **list_issue_comments**     | Issue | List comments on an issue |\n| **get_user_info**           | User | Get current authenticated user information |\n| **list_user_notifications** | Notification | List user notifications |\n\n## Contribution\n\nWe welcome contributions from the open-source community! If you'd like to contribute to this project, please follow these guidelines:\n\n1. Fork the repository.\n2. Create a new branch for your feature or bug fix.\n3. Make your changes and ensure the code is well-documented.\n4. Submit a pull request with a clear description of your changes.\n\nFor more information, please refer to the [CONTRIBUTING](CONTRIBUTING.md) file.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "workflows",
        "git",
        "workflow",
        "git workflow",
        "workflow management",
        "automate workflows"
      ],
      "category": "git-workflow-management"
    },
    "rshivamrapid--github-mcp-server": {
      "owner": "rshivamrapid",
      "name": "github-mcp-server",
      "url": "https://github.com/rshivamrapid/github-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/rshivamrapid.webp",
      "description": "Integrate with GitHub APIs to automate workflows, extract repository data, and analyze versions. Interact with projects, issues, and pull requests to streamline development processes.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-05-06T12:28:41Z",
      "readme_content": "# GitHub MCP Server\n\nThe GitHub MCP Server is a [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction)\nserver that provides seamless integration with GitHub APIs, enabling advanced\nautomation and interaction capabilities for developers and tools.\n\n[![Install with Docker in VS Code](https://img.shields.io/badge/VS_Code-Install_Server-0098FF?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=github&inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D) [![Install with Docker in VS Code Insiders](https://img.shields.io/badge/VS_Code_Insiders-Install_Server-24bfa5?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=github&inputs=%5B%7B%22id%22%3A%22github_token%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22GitHub%20Personal%20Access%20Token%22%2C%22password%22%3Atrue%7D%5D&config=%7B%22command%22%3A%22docker%22%2C%22args%22%3A%5B%22run%22%2C%22-i%22%2C%22--rm%22%2C%22-e%22%2C%22GITHUB_PERSONAL_ACCESS_TOKEN%22%2C%22ghcr.io%2Fgithub%2Fgithub-mcp-server%22%5D%2C%22env%22%3A%7B%22GITHUB_PERSONAL_ACCESS_TOKEN%22%3A%22%24%7Binput%3Agithub_token%7D%22%7D%7D&quality=insiders)\n\n## Use Cases\n\n- Automating GitHub workflows and processes.\n- Extracting and analyzing data from GitHub repositories.\n- Building AI powered tools and applications that interact with GitHub's ecosystem.\n\n## Prerequisites\n\n1. To run the server in a container, you will need to have [Docker](https://www.docker.com/) installed.\n2. Once Docker is installed, you will also need to ensure Docker is running. The image is public; if you get errors on pull, you may have an expired token and need to `docker logout ghcr.io`.\n3. Lastly you will need to [Create a GitHub Personal Access Token](https://github.com/settings/personal-access-tokens/new).\nThe MCP server can use many of the GitHub APIs, so enable the permissions that you feel comfortable granting your AI tools (to learn more about access tokens, please check out the [documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens)).\n\n## Installation\n\n### Usage with VS Code\n\nFor quick installation, use one of the one-click install buttons at the top of this README. Once you complete that flow, toggle Agent mode (located by the Copilot Chat text input) and the server will start.\n\nFor manual installation, add the following JSON block to your User Settings (JSON) file in VS Code. You can do this by pressing `Ctrl + Shift + P` and typing `Preferences: Open User Settings (JSON)`.\n\n```json\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"github_token\",\n        \"description\": \"GitHub Personal Access Token\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"github\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"-i\",\n          \"--rm\",\n          \"-e\",\n          \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n          \"ghcr.io/github/github-mcp-server\"\n        ],\n        \"env\": {\n          \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"${input:github_token}\"\n        }\n      }\n    }\n  }\n}\n```\n\nOptionally, you can add a similar example (i.e. without the mcp key) to a file called `.vscode/mcp.json` in your workspace. This will allow you to share the configuration with others.\n\n\n```json\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"github_token\",\n      \"description\": \"GitHub Personal Access Token\",\n      \"password\": true\n    }\n  ],\n  \"servers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"ghcr.io/github/github-mcp-server\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"${input:github_token}\"\n      }\n    }\n  }\n}\n\n```\n\nMore about using MCP server tools in VS Code's [agent mode documentation](https://code.visualstudio.com/docs/copilot/chat/mcp-servers).\n\n### Usage with Claude Desktop\n\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"ghcr.io/github/github-mcp-server\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n### Build from source\n\nIf you don't have Docker, you can use `go build` to build the binary in the\n`cmd/github-mcp-server` directory, and use the `github-mcp-server stdio` command with the `GITHUB_PERSONAL_ACCESS_TOKEN` environment variable set to your token. To specify the output location of the build, use the `-o` flag. You should configure your server to use the built executable as its `command`. For example:\n\n```JSON\n{\n  \"mcp\": {\n    \"servers\": {\n      \"github\": {\n        \"command\": \"/path/to/github-mcp-server\",\n        \"args\": [\"stdio\"],\n        \"env\": {\n          \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n        }\n      }\n    }\n  }\n}\n```\n\n## Tool Configuration\n\nThe GitHub MCP Server supports enabling or disabling specific groups of functionalities via the `--toolsets` flag. This allows you to control which GitHub API capabilities are available to your AI tools. Enabling only the toolsets that you need can help the LLM with tool choice and reduce the context size.\n\n### Available Toolsets\n\nThe following sets of tools are available (all are on by default):\n\n| Toolset                 | Description                                                   |\n| ----------------------- | ------------------------------------------------------------- |\n| `repos`                 | Repository-related tools (file operations, branches, commits) |\n| `issues`                | Issue-related tools (create, read, update, comment)           |\n| `users`                 | Anything relating to GitHub Users                             |\n| `pull_requests`         | Pull request operations (create, merge, review)               |\n| `code_security`         | Code scanning alerts and security features                    |\n| `experiments`           | Experimental features (not considered stable)                 |\n\n#### Specifying Toolsets\n\nTo specify toolsets you want available to the LLM, you can pass an allow-list in two ways:\n\n1. **Using Command Line Argument**:\n\n   ```bash\n   github-mcp-server --toolsets repos,issues,pull_requests,code_security\n   ```\n\n2. **Using Environment Variable**:\n   ```bash\n   GITHUB_TOOLSETS=\"repos,issues,pull_requests,code_security\" ./github-mcp-server\n   ```\n\nThe environment variable `GITHUB_TOOLSETS` takes precedence over the command line argument if both are provided.\n\n### Using Toolsets With Docker\n\nWhen using Docker, you can pass the toolsets as environment variables:\n\n```bash\ndocker run -i --rm \\\n  -e GITHUB_PERSONAL_ACCESS_TOKEN=<your-token> \\\n  -e GITHUB_TOOLSETS=\"repos,issues,pull_requests,code_security,experiments\" \\\n  ghcr.io/github/github-mcp-server\n```\n\n### The \"all\" Toolset\n\nThe special toolset `all` can be provided to enable all available toolsets regardless of any other configuration:\n\n```bash\n./github-mcp-server --toolsets all\n```\n\nOr using the environment variable:\n\n```bash\nGITHUB_TOOLSETS=\"all\" ./github-mcp-server\n```\n\n## Dynamic Tool Discovery\n\n**Note**: This feature is currently in beta and may not be available in all environments. Please test it out and let us know if you encounter any issues.\n\nInstead of starting with all tools enabled, you can turn on dynamic toolset discovery. Dynamic toolsets allow the MCP host to list and enable toolsets in response to a user prompt. This should help to avoid situations where the model gets confused by the shear number of tools available.\n\n### Using Dynamic Tool Discovery\n\nWhen using the binary, you can pass the `--dynamic-toolsets` flag.\n\n```bash\n./github-mcp-server --dynamic-toolsets\n```\n\nWhen using Docker, you can pass the toolsets as environment variables:\n\n```bash\ndocker run -i --rm \\\n  -e GITHUB_PERSONAL_ACCESS_TOKEN=<your-token> \\\n  -e GITHUB_DYNAMIC_TOOLSETS=1 \\\n  ghcr.io/github/github-mcp-server\n```\n\n## GitHub Enterprise Server\n\nThe flag `--gh-host` and the environment variable `GITHUB_HOST` can be used to set\nthe GitHub Enterprise Server hostname.\n\n## i18n / Overriding Descriptions\n\nThe descriptions of the tools can be overridden by creating a\n`github-mcp-server-config.json` file in the same directory as the binary.\n\nThe file should contain a JSON object with the tool names as keys and the new\ndescriptions as values. For example:\n\n```json\n{\n  \"TOOL_ADD_ISSUE_COMMENT_DESCRIPTION\": \"an alternative description\",\n  \"TOOL_CREATE_BRANCH_DESCRIPTION\": \"Create a new branch in a GitHub repository\"\n}\n```\n\nYou can create an export of the current translations by running the binary with\nthe `--export-translations` flag.\n\nThis flag will preserve any translations/overrides you have made, while adding\nany new translations that have been added to the binary since the last time you\nexported.\n\n```sh\n./github-mcp-server --export-translations\ncat github-mcp-server-config.json\n```\n\nYou can also use ENV vars to override the descriptions. The environment\nvariable names are the same as the keys in the JSON file, prefixed with\n`GITHUB_MCP_` and all uppercase.\n\nFor example, to override the `TOOL_ADD_ISSUE_COMMENT_DESCRIPTION` tool, you can\nset the following environment variable:\n\n```sh\nexport GITHUB_MCP_TOOL_ADD_ISSUE_COMMENT_DESCRIPTION=\"an alternative description\"\n```\n\n## Tools\n\n### Users\n\n- **get_me** - Get details of the authenticated user\n  - No parameters required\n\n### Issues\n\n- **get_issue** - Gets the contents of an issue within a repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number (number, required)\n\n- **get_issue_comments** - Get comments for a GitHub issue\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number (number, required)\n\n- **create_issue** - Create a new issue in a GitHub repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `title`: Issue title (string, required)\n  - `body`: Issue body content (string, optional)\n  - `assignees`: Usernames to assign to this issue (string[], optional)\n  - `labels`: Labels to apply to this issue (string[], optional)\n\n- **add_issue_comment** - Add a comment to an issue\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number (number, required)\n  - `body`: Comment text (string, required)\n\n- **list_issues** - List and filter repository issues\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `state`: Filter by state ('open', 'closed', 'all') (string, optional)\n  - `labels`: Labels to filter by (string[], optional)\n  - `sort`: Sort by ('created', 'updated', 'comments') (string, optional)\n  - `direction`: Sort direction ('asc', 'desc') (string, optional)\n  - `since`: Filter by date (ISO 8601 timestamp) (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **update_issue** - Update an existing issue in a GitHub repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `issue_number`: Issue number to update (number, required)\n  - `title`: New title (string, optional)\n  - `body`: New description (string, optional)\n  - `state`: New state ('open' or 'closed') (string, optional)\n  - `labels`: New labels (string[], optional)\n  - `assignees`: New assignees (string[], optional)\n  - `milestone`: New milestone number (number, optional)\n\n- **search_issues** - Search for issues and pull requests\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n### Pull Requests\n\n- **get_pull_request** - Get details of a specific pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **list_pull_requests** - List and filter repository pull requests\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `state`: PR state (string, optional)\n  - `sort`: Sort field (string, optional)\n  - `direction`: Sort direction (string, optional)\n  - `perPage`: Results per page (number, optional)\n  - `page`: Page number (number, optional)\n\n- **merge_pull_request** - Merge a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n  - `commit_title`: Title for the merge commit (string, optional)\n  - `commit_message`: Message for the merge commit (string, optional)\n  - `merge_method`: Merge method (string, optional)\n\n- **get_pull_request_files** - Get the list of files changed in a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **get_pull_request_status** - Get the combined status of all status checks for a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **update_pull_request_branch** - Update a pull request branch with the latest changes from the base branch\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n  - `expectedHeadSha`: The expected SHA of the pull request's HEAD ref (string, optional)\n\n- **get_pull_request_comments** - Get the review comments on a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **get_pull_request_reviews** - Get the reviews on a pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n\n- **create_pull_request_review** - Create a review on a pull request review\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number (number, required)\n  - `body`: Review comment text (string, optional)\n  - `event`: Review action ('APPROVE', 'REQUEST_CHANGES', 'COMMENT') (string, required)\n  - `commitId`: SHA of commit to review (string, optional)\n  - `comments`: Line-specific comments array of objects to place comments on pull request changes (array, optional)\n    - For inline comments: provide `path`, `position` (or `line`), and `body`\n    - For multi-line comments: provide `path`, `start_line`, `line`, optional `side`/`start_side`, and `body`\n\n- **create_pull_request** - Create a new pull request\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `title`: PR title (string, required)\n  - `body`: PR description (string, optional)\n  - `head`: Branch containing changes (string, required)\n  - `base`: Branch to merge into (string, required)\n  - `draft`: Create as draft PR (boolean, optional)\n  - `maintainer_can_modify`: Allow maintainer edits (boolean, optional)\n\n- **add_pull_request_review_comment** - Add a review comment to a pull request or reply to an existing comment\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pull_number`: Pull request number (number, required)\n  - `body`: The text of the review comment (string, required)\n  - `commit_id`: The SHA of the commit to comment on (string, required unless using in_reply_to)\n  - `path`: The relative path to the file that necessitates a comment (string, required unless using in_reply_to)\n  - `line`: The line of the blob in the pull request diff that the comment applies to (number, optional)\n  - `side`: The side of the diff to comment on (LEFT or RIGHT) (string, optional)\n  - `start_line`: For multi-line comments, the first line of the range (number, optional)\n  - `start_side`: For multi-line comments, the starting side of the diff (LEFT or RIGHT) (string, optional)\n  - `subject_type`: The level at which the comment is targeted (line or file) (string, optional)\n  - `in_reply_to`: The ID of the review comment to reply to (number, optional). When specified, only body is required and other parameters are ignored.\n\n- **update_pull_request** - Update an existing pull request in a GitHub repository\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `pullNumber`: Pull request number to update (number, required)\n  - `title`: New title (string, optional)\n  - `body`: New description (string, optional)\n  - `state`: New state ('open' or 'closed') (string, optional)\n  - `base`: New base branch name (string, optional)\n  - `maintainer_can_modify`: Allow maintainer edits (boolean, optional)\n\n### Repositories\n\n- **create_or_update_file** - Create or update a single file in a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `path`: File path (string, required)\n  - `message`: Commit message (string, required)\n  - `content`: File content (string, required)\n  - `branch`: Branch name (string, optional)\n  - `sha`: File SHA if updating (string, optional)\n\n- **list_branches** - List branches in a GitHub repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **push_files** - Push multiple files in a single commit\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `branch`: Branch to push to (string, required)\n  - `files`: Files to push, each with path and content (array, required)\n  - `message`: Commit message (string, required)\n\n- **search_repositories** - Search for GitHub repositories\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **create_repository** - Create a new GitHub repository\n  - `name`: Repository name (string, required)\n  - `description`: Repository description (string, optional)\n  - `private`: Whether the repository is private (boolean, optional)\n  - `autoInit`: Auto-initialize with README (boolean, optional)\n\n- **get_file_contents** - Get contents of a file or directory\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `path`: File path (string, required)\n  - `ref`: Git reference (string, optional)\n\n- **fork_repository** - Fork a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `organization`: Target organization name (string, optional)\n\n- **create_branch** - Create a new branch\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `branch`: New branch name (string, required)\n  - `sha`: SHA to create branch from (string, required)\n\n- **list_commits** - Get a list of commits of a branch in a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `sha`: Branch name, tag, or commit SHA (string, optional)\n  - `path`: Only commits containing this file path (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n- **get_commit** - Get details for a commit from a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `sha`: Commit SHA, branch name, or tag name (string, required)\n  - `page`: Page number, for files in the commit (number, optional)\n  - `perPage`: Results per page, for files in the commit (number, optional)\n\n- **search_code** - Search for code across GitHub repositories\n  - `query`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n### Users\n\n- **search_users** - Search for GitHub users\n  - `q`: Search query (string, required)\n  - `sort`: Sort field (string, optional)\n  - `order`: Sort order (string, optional)\n  - `page`: Page number (number, optional)\n  - `perPage`: Results per page (number, optional)\n\n### Code Scanning\n\n- **get_code_scanning_alert** - Get a code scanning alert\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `alertNumber`: Alert number (number, required)\n\n- **list_code_scanning_alerts** - List code scanning alerts for a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `ref`: Git reference (string, optional)\n  - `state`: Alert state (string, optional)\n  - `severity`: Alert severity (string, optional)\n  - `tool_name`: The name of the tool used for code scanning (string, optional)\n\n### Secret Scanning\n\n- **get_secret_scanning_alert** - Get a secret scanning alert\n\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `alertNumber`: Alert number (number, required)\n\n- **list_secret_scanning_alerts** - List secret scanning alerts for a repository\n  - `owner`: Repository owner (string, required)\n  - `repo`: Repository name (string, required)\n  - `state`: Alert state (string, optional)\n  - `secret_type`: The secret types to be filtered for in a comma-separated list (string, optional)\n  - `resolution`: The resolution status (string, optional)\n\n## Resources\n\n### Repository Content\n\n- **Get Repository Content**\n  Retrieves the content of a repository at a specific path.\n\n  - **Template**: `repo://{owner}/{repo}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Branch**\n  Retrieves the content of a repository at a specific path for a given branch.\n\n  - **Template**: `repo://{owner}/{repo}/refs/heads/{branch}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `branch`: Branch name (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Commit**\n  Retrieves the content of a repository at a specific path for a given commit.\n\n  - **Template**: `repo://{owner}/{repo}/sha/{sha}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `sha`: Commit SHA (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Tag**\n  Retrieves the content of a repository at a specific path for a given tag.\n\n  - **Template**: `repo://{owner}/{repo}/refs/tags/{tag}/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `tag`: Tag name (string, required)\n    - `path`: File or directory path (string, optional)\n\n- **Get Repository Content for a Specific Pull Request**\n  Retrieves the content of a repository at a specific path for a given pull request.\n\n  - **Template**: `repo://{owner}/{repo}/refs/pull/{prNumber}/head/contents{/path*}`\n  - **Parameters**:\n    - `owner`: Repository owner (string, required)\n    - `repo`: Repository name (string, required)\n    - `prNumber`: Pull request number (string, required)\n    - `path`: File or directory path (string, optional)\n\n## Library Usage\n\nThe exported Go API of this module should currently be considered unstable, and subject to breaking changes. In the future, we may offer stability; please file an issue if there is a use case where this would be valuable.\n\n## License\n\nThis project is licensed under the terms of the MIT open source license. Please refer to [MIT](./LICENSE) for the full terms.\n",
      "npm_url": "https://www.npmjs.com/package/github-mcp-server",
      "npm_downloads": 15187,
      "keywords": [
        "github",
        "git",
        "workflows",
        "rshivamrapid github",
        "git workflow",
        "github apis"
      ],
      "category": "git-workflow-management"
    },
    "sach999--git-spice-help-mcp": {
      "owner": "sach999",
      "name": "git-spice-help-mcp",
      "url": "https://github.com/sach999/git-spice-help-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/sach999.webp",
      "description": "Search git-spice documentation within Cursor IDE, providing seamless access to real-time coding resources and efficient documentation parsing.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-10T10:05:24Z",
      "readme_content": "# Cursor MCP Server\n\nThis repository contains a Model Context Protocol (MCP) server implementation that provides a tool for searching git-spice documentation within Cursor IDE.\n\n## Features\n\n- Integration with Cursor IDE through MCP protocol\n- Real-time git-spice documentation search\n- Simple and efficient documentation parsing\n\n## Prerequisites\n\n- Node.js (v16 or higher)\n- Cursor IDE\n- npm or yarn package manager\n\n## Installation\n\n1. Clone this repository:\n```bash\ngit clone <repository-url>\ncd <repository-name>\n```\n\n2. Install dependencies:\n```bash\nnpm install\n# or\nyarn install\n```\n\n3. Build the project:\n```bash\nnpm run build\n# or\nyarn build\n```\n\n## Configuration\n\n### Server Configuration\nThe server is pre-configured with the following capabilities:\n- Tools capability\n- Resources capability\n- Prompts capability\n\n### Cursor IDE Configuration\n\n1. Open Cursor IDE settings:\n   - On macOS: `Cmd + ,`\n   - On Windows/Linux: `Ctrl + ,`\n\n2. Navigate to the \"Extensions\" section\n\n3. Find the MCP Server settings and add a new server configuration:\n```json\n{\n  \"name\": \"Git Spice MCP Server\",\n  \"command\": \"node\",\n  \"args\": [\"dist/index.js\"],\n  \"cwd\": \"/path/to/your/project\"\n}\n```\n\n4. Save the settings and refresh the MCP\n\n## Usage\n\nWhen using Cursor in agent mode, the MCP server will be automatically detected and the git-spice documentation search tool will be available. The agent will prompt you to use the tool when relevant to your queries.\n\n## Project Structure\n- `src/index.ts`: Main server implementation\n- `src/`: Source code directory\n- `dist/`: Compiled output directory\n\n## Acknowledgments\n\n- [Model Context Protocol](https://github.com/modelcontextprotocol)\n- [git-spice](https://github.com/abhinav/git-spice)\n- [Cursor IDE](https://cursor.sh) ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "documentation",
        "workflow",
        "git spice",
        "git workflow",
        "search git"
      ],
      "category": "git-workflow-management"
    },
    "sammcj--mcp-github-issue": {
      "owner": "sammcj",
      "name": "mcp-github-issue",
      "url": "https://github.com/sammcj/mcp-github-issue",
      "imageUrl": "/freedevtools/mcp/pfp/sammcj.webp",
      "description": "Fetch GitHub issue details for use as task descriptions, facilitating integration of issue tracking with language model capabilities.",
      "stars": 14,
      "forks": 11,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-17T04:44:52Z",
      "readme_content": "# MCP GitHub Issue Server\n[![smithery badge](https://smithery.ai/badge/mcp-github-issue)](https://smithery.ai/protocol/mcp-github-issue)\n\n[![smithery badge](https://smithery.ai/badge/mcp-github-issue)](https://smithery.ai/server/mcp-github-issue)\n\nAn MCP server that provides LLMs with the ability to use GitHub issues as the task to complete. This server allows LLMs to fetch GitHub issue details and use them as task descriptions.\n\n<a href=\"https://glama.ai/mcp/servers/enk3b2bcjr\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/enk3b2bcjr/badge\" alt=\"GitHub Issue Server MCP server\" /></a>\n\n## Installation\n\n### Manual Installation\n```bash\nnpx mcp-github-issue\n```\n\n### Installing via Smithery\n\nTo install MCP GitHub Issue Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-github-issue):\n\n```bash\nnpx -y @smithery/cli install mcp-github-issue --client claude\n```\n\n## Usage\n\n### As an MCP Server\n\nAdd to your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"github-issue\": {\n      \"command\": \"npx\",\n      \"args\": [\"mcp-github-issue\"]\n    }\n  }\n}\n```\n\n### Available Tools\n\n#### get_issue_task\n\nFetches GitHub issue details to use as a task.\n\n**Input Schema:**\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"url\": {\n      \"type\": \"string\",\n      \"description\": \"GitHub issue URL (https://github.com/owner/repo/issues/number)\"\n    }\n  },\n  \"required\": [\"url\"]\n}\n```\n\n**Example Usage:**\n```typescript\n<use_mcp_tool>\n<server_name>github-issue</server_name>\n<tool_name>get_issue_task</tool_name>\n<arguments>\n{\n  \"url\": \"https://github.com/owner/repo/issues/123\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n**Response Format:**\n```json\n{\n  \"task\": {\n    \"title\": \"Issue Title\",\n    \"description\": \"Issue Description/Body\",\n    \"source\": \"https://github.com/owner/repo/issues/123\"\n  }\n}\n```\n\n## Features\n\n- Fetches GitHub issue details from public repositories\n- No authentication required for public repositories\n- Returns structured task data including title, description, and source URL\n- Compatible with the Model Context Protocol (MCP)\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Run the server locally\nnpm run serve\n\n# Format code\nnpm run format\n\n# Run MCP inspector\nnpm run inspector\n```\n\n## License\n\nMIT\n\n## Author\n\nSam McLeod (https://smcleod.net)\n",
      "npm_url": "https://www.npmjs.com/package/mcp-github-issue",
      "npm_downloads": 3664,
      "keywords": [
        "github",
        "git",
        "workflow",
        "git workflow",
        "mcp github",
        "github issue"
      ],
      "category": "git-workflow-management"
    },
    "sebastiancastillorock--skills-introduction-to-github": {
      "owner": "sebastiancastillorock",
      "name": "skills-introduction-to-github",
      "url": "https://github.com/sebastiancastillorock/skills-introduction-to-github",
      "imageUrl": "/freedevtools/mcp/pfp/sebastiancastillorock.webp",
      "description": "Facilitates learning about GitHub by guiding users through creating branches, managing repositories, and collaboration techniques. Provides a structured learning experience to help navigate GitHub effectively.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-03-21T01:14:56Z",
      "readme_content": "<header>\n\n<!--\n  <<< Author notes: Course header >>>\n  Include a 1280×640 image, course title in sentence case, and a concise description in emphasis.\n  In your repository settings: enable template repository, add your 1280×640 social image, auto delete head branches.\n  Add your open source license, GitHub uses MIT license.\n-->\n\n# Introduction to GitHub\n\n_Get started using GitHub in less than an hour._\n\n</header>\n\n<!--\n  <<< Author notes: Step 1 >>>\n  Choose 3-5 steps for your course.\n  The first step is always the hardest, so pick something easy!\n  Link to docs.github.com for further explanations.\n  Encourage users to open new tabs for steps!\n-->\n\n## Step 1: Create a branch\n\n_Welcome to \"Introduction to GitHub\"! :wave:_\n\n**What is GitHub?**: GitHub is a collaboration platform that uses _[Git](https://docs.github.com/get-started/quickstart/github-glossary#git)_ for versioning. GitHub is a popular place to share and contribute to [open-source](https://docs.github.com/get-started/quickstart/github-glossary#open-source) software.\n<br>:tv: [Video: What is GitHub?](https://www.youtube.com/watch?v=pBy1zgt0XPc)\n\n**What is a repository?**: A _[repository](https://docs.github.com/get-started/quickstart/github-glossary#repository)_ is a project containing files and folders. A repository tracks versions of files and folders. For more information, see \"[About repositories](https://docs.github.com/en/repositories/creating-and-managing-repositories/about-repositories)\" from GitHub Docs.\n\n**What is a branch?**: A _[branch](https://docs.github.com/en/get-started/quickstart/github-glossary#branch)_ is a parallel version of your repository. By default, your repository has one branch named `main` and it is considered to be the definitive branch. Creating additional branches allows you to copy the `main` branch of your repository and safely make any changes without disrupting the main project. Many people use branches to work on specific features without affecting any other parts of the project.\n\nBranches allow you to separate your work from the `main` branch. In other words, everyone's work is safe while you contribute. For more information, see \"[About branches](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches)\".\n\n**What is a profile README?**: A _[profile README](https://docs.github.com/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme)_ is essentially an \"About me\" section on your GitHub profile where you can share information about yourself with the community on GitHub.com. GitHub shows your profile README at the top of your profile page. For more information, see \"[Managing your profile README](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme)\".\n\n![profile-readme-example](/images/profile-readme-example.png)\n\n### :keyboard: Activity: Your first branch\n\n1. Open a new browser tab and navigate to your newly made repository. Then, work on the steps in your second tab while you read the instructions in this tab.\n2. Navigate to the **< > Code** tab in the header menu of your repository.\n\n   ![code-tab](/images/code-tab.png)\n\n3. Click on the **main** branch drop-down.\n\n   ![main-branch-dropdown](/images/main-branch-dropdown.png)\n\n4. In the field, name your branch `my-first-branch`. In this case, the name must be `my-first-branch` to trigger the course workflow.\n5. Click **Create branch: my-first-branch** to create your branch.\n\n   ![create-branch-button](/images/create-branch-button.png)\n\n   The branch will automatically switch to the one you have just created.\n   The **main** branch drop-down bar will reflect your new branch and display the new branch name.\n\n6. Wait about 20 seconds then refresh this page (the one you're following instructions from). [GitHub Actions](https://docs.github.com/en/actions) will automatically update to the next step.\n\n<footer>\n\n<!--\n  <<< Author notes: Footer >>>\n  Add a link to get support, GitHub status page, code of conduct, license link.\n-->\n\n---\n\nGet help: [Post in our discussion board](https://github.com/orgs/skills/discussions/categories/introduction-to-github) &bull; [Review the GitHub status page](https://www.githubstatus.com/)\n\n&copy; 2024 GitHub &bull; [Code of Conduct](https://www.contributor-covenant.org/version/2/1/code_of_conduct/code_of_conduct.md) &bull; [MIT License](https://gh.io/mit)\n\n</footer>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflow",
        "learning github",
        "github facilitates",
        "github effectively"
      ],
      "category": "git-workflow-management"
    },
    "shaileshahuja--github-pr-mcp": {
      "owner": "shaileshahuja",
      "name": "github-pr-mcp",
      "url": "https://github.com/shaileshahuja/github-pr-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/shaileshahuja.webp",
      "description": "Fetches comments from GitHub Pull Requests, including details about file paths and replies, utilizing the GitHub API for structured data access.",
      "stars": 3,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-30T05:54:17Z",
      "readme_content": "# GitHub PR Comments MCP Server\n\n[![smithery badge](https://smithery.ai/badge/github-pr-mcp)](https://smithery.ai/server/github-pr-mcp)\n\nThis is a Model Context Protocol (MCP) server that fetches GitHub Pull Request comments using a GitHub personal access token.\n\n<a href=\"https://glama.ai/mcp/servers/@shaileshahuja/github-pr-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@shaileshahuja/github-pr-mcp/badge\" alt=\"GitHub PR Comments Server MCP server\" />\n</a>\n\n## Features\n\n- Fetches PR comments with file paths, line ranges, and replies\n- Uses GitHub API via Octokit\n- Implements MCP server with StdioServerTransport\n- Returns comments in a structured JSON format\n\n## Installation\n\n### Installing via Smithery\n\nTo install github-pr-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/github-pr-mcp):\n\n```bash\nnpx -y @smithery/cli install github-pr-mcp --client claude\n```\n\n### Installing Manually\n1. Clone the repository\n2. Install dependencies:\n\n   ```\n   npm install\n   ```\n\n3. Create a `.env` file with your GitHub token:\n\n   ```\n   GITHUB_TOKEN=your_github_token_here\n   ```\n\n## Usage\n\n1. Build the project:\n\n   ```\n   npm run build\n   ```\n\n2. Run the server:\n\n   ```\n   npm start\n   ```\n\n   Or directly with a GitHub token:\n\n   ```\n   node dist/server.js your_github_token_here\n   ```\n\n3. The server exposes a tool called `get_pr_comments` that accepts the following parameters:\n   - `owner`: Repository owner (username or organization)\n   - `repo`: Repository name\n   - `pull_number`: Pull request number\n\n## Integration with Cursor\n\nTo integrate with Cursor, use the following command in Cursor's MCP server configuration:\n\n```\nnode /path/to/dist/server.js your_github_token_here\n```\n\nReplace `/path/to` with the actual path to your project, and `your_github_token_here` with your GitHub personal access token.\n\n## Testing\n\nA test client is included to verify the server functionality:\n\n1. Build the project:\n\n   ```\n   npm run build\n   ```\n\n2. Run the test client:\n\n   ```\n   npm test\n   ```\n\nThe test client will start the server, connect to it, and call the `get_pr_comments` tool with sample parameters.\n\n## Response Format\n\nThe server returns comments in the following format:\n\n```json\n{\n  \"comments\": [\n    {\n      \"id\": 123456789,\n      \"path\": \"src/example.js\",\n      \"body\": \"This is a comment on a specific line\",\n      \"line\": 42,\n      \"start_line\": 40,\n      \"user\": {\n        \"login\": \"username\"\n      },\n      \"created_at\": \"2023-01-01T00:00:00Z\",\n      \"replies\": [\n        {\n          \"id\": 987654321,\n          \"body\": \"This is a reply to the comment\",\n          \"user\": {\n            \"login\": \"another-username\"\n          },\n          \"created_at\": \"2023-01-02T00:00:00Z\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n## Development\n\nTo run the server in development mode:\n\n```\nnpm run dev\n```\n\n## License\n\nISC",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflow",
        "comments github",
        "git workflow",
        "github api"
      ],
      "category": "git-workflow-management"
    },
    "shanksxz--gh-mcp-server": {
      "owner": "shanksxz",
      "name": "gh-mcp-server",
      "url": "https://github.com/shanksxz/gh-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/shanksxz.webp",
      "description": "Fetch and utilize contents from GitHub repositories to provide context for AI interactions. Enables access to file contents, repository structures, and allows for filtering and exclusion of specific paths.",
      "stars": 2,
      "forks": 2,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-04-24T14:52:25Z",
      "readme_content": "# GitHub Repository MCP Server\n\nThis Model Context Protocol (MCP) server allows AI models to access GitHub repository contents as context. It provides tools to fetch file contents, repository structure, and entire repositories for use as context in AI interactions.\n\n## Features\n\n- Fetch entire repository contents as context\n- Get specific file contents from a repository\n- Get repository structure (file listing)\n- Filter files by extension\n- Exclude specific paths\n- Limit the number of files returned\n\n## Installation\n\n```bash\n# clone the repository\ngit clone https://github.com/shanksxz/github-mcp.git\ncd github-mcp\n\n# install dependencies\nnpm install\n\n# build the project\nnpm run build\n```\n\n## Usage\n\n### Setting up GitHub Authentication\n\nWhile the server can work with public repositories without authentication, GitHub API has strict rate limits for unauthenticated requests (60 requests/hour). To increase this limit to 5000 requests/hour, set the `GITHUB_TOKEN` environment variable:\n\n```bash\n# create a file called gh.sh and add the following line:\nexport GITHUB_TOKEN=your_github_personal_access_token\n# make the file executable\nchmod +x gh.sh\n# run the file\n./gh.sh\n```\n\nYou can create a personal access token in your [GitHub Developer Settings](https://github.com/settings/tokens).\n\n### Using with Cursor\n\nTo use this server with Cursor follow these steps:\n1. Open Cursor Settings\n2. Search for \"MCP\"\n3. Click on \"Add a new MCP Server\"\n4. Enter the following information:\n    - Name: github-repo-context (or any name you want)\n    - Type: Command\n    - Command: /path/to/your-local-repo-setup/gh.sh\n5. Click \"Save\"\n6. Enable the server by clicking the toggle next to the server name\n7. You should now be able to use the server in your project\n\n\n\nThe server communicates via stdin/stdout following the MCP protocol.\n\n### Available Tools\n\nThe server provides the following tools:\n\n1. **get-repo-context**: Get all files from a GitHub repository to use as context\n   - Parameters:\n     - `owner`: GitHub repository owner/organization name\n     - `repo`: GitHub repository name\n     - `maxFiles` (optional): Maximum number of files to include (default: 50)\n     - `fileExtensions` (optional): File extensions to include (e.g., ['js', 'ts', 'md'])\n     - `excludePaths` (optional): Paths to exclude (default: ['node_modules', 'dist', 'build'])\n\n2. **get-file-content**: Get content of a specific file from a GitHub repository\n   - Parameters:\n     - `owner`: GitHub repository owner/organization name\n     - `repo`: GitHub repository name\n     - `path`: Path to the file in the repository\n\n3. **get-repo-structure**: Get the structure of a GitHub repository\n   - Parameters:\n     - `owner`: GitHub repository owner/organization name\n     - `repo`: GitHub repository name\n\n## Example\n\nWhen integrated with an AI model that supports MCP, you can use commands like:\n\n```\nGet the structure of the repository tensorflow/tensorflow\n```\n\nThe AI would then use the `get-repo-structure` tool to fetch and display the repository structure.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflow",
        "git workflow",
        "github repositories",
        "contents github"
      ],
      "category": "git-workflow-management"
    },
    "simon-ami--win-cli-mcp-server": {
      "owner": "simon-ami",
      "name": "win-cli-mcp-server",
      "url": "https://github.com/simon-ami/win-cli-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/simon-ami.webp",
      "description": "Enables secure command-line interactions on Windows systems with controlled access to PowerShell, CMD, Git Bash, and remote systems using SSH.",
      "stars": 251,
      "forks": 44,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-01T09:31:45Z",
      "readme_content": "# Windows CLI MCP Server\n\n> [!CAUTION]\n> **PROJECT DEPRECATED** - No longer maintained.\n> Use https://github.com/wonderwhy-er/DesktopCommanderMCP instead for similar functionality.\n\n[![NPM Downloads](https://img.shields.io/npm/dt/@simonb97/server-win-cli.svg?style=flat)](https://www.npmjs.com/package/@simonb97/server-win-cli)\n[![NPM Version](https://img.shields.io/npm/v/@simonb97/server-win-cli.svg?style=flat)](https://www.npmjs.com/package/@simonb97/server-win-cli?activeTab=versions)\n[![smithery badge](https://smithery.ai/badge/@simonb97/server-win-cli)](https://smithery.ai/server/@simonb97/server-win-cli)\n\n[MCP server](https://modelcontextprotocol.io/introduction) for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, Git Bash shells, and remote systems via SSH. It allows MCP clients (like [Claude Desktop](https://claude.ai/download)) to perform operations on your system, similar to [Open Interpreter](https://github.com/OpenInterpreter/open-interpreter).\n\n>[!IMPORTANT]\n> This MCP server provides direct access to your system's command line interface and remote systems via SSH. When enabled, it grants access to your files, environment variables, command execution capabilities, and remote server management.\n>\n> - Review and restrict allowed paths and SSH connections\n> - Enable directory restrictions\n> - Configure command blocks\n> - Consider security implications\n>\n> See [Configuration](#configuration) for more details.\n\n- [Features](#features)\n- [Usage with Claude Desktop](#usage-with-claude-desktop)\n- [Configuration](#configuration)\n  - [Configuration Locations](#configuration-locations)\n  - [Default Configuration](#default-configuration)\n  - [Configuration Settings](#configuration-settings)\n    - [Security Settings](#security-settings)\n    - [Shell Configuration](#shell-configuration)\n    - [SSH Configuration](#ssh-configuration)\n- [API](#api)\n  - [Tools](#tools)\n  - [Resources](#resources)\n- [Security Considerations](#security-considerations)\n- [License](#license)\n\n## Features\n\n- **Multi-Shell Support**: Execute commands in PowerShell, Command Prompt (CMD), and Git Bash\n- **SSH Support**: Execute commands on remote systems via SSH\n- **Resource Exposure**: View SSH connections, current directory, and configuration as MCP resources\n- **Security Controls**:\n  - Command and SSH command blocking (full paths, case variations)\n  - Working directory validation\n  - Maximum command length limits\n  - Command logging and history tracking\n  - Smart argument validation\n- **Configurable**:\n  - Custom security rules\n  - Shell-specific settings\n  - SSH connection profiles\n  - Path restrictions\n  - Blocked command lists\n\nSee the [API](#api) section for more details on the tools and resources the server provides to MCP clients.\n\n**Note**: The server will only allow operations within configured directories, with allowed commands, and on configured SSH connections.\n\n## Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"windows-cli\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@simonb97/server-win-cli\"]\n    }\n  }\n}\n```\n\nFor use with a specific config file, add the `--config` flag:\n\n```json\n{\n  \"mcpServers\": {\n    \"windows-cli\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@simonb97/server-win-cli\",\n        \"--config\",\n        \"path/to/your/config.json\"\n      ]\n    }\n  }\n}\n```\n\nAfter configuring, you can:\n- Execute commands directly using the available tools\n- View configured SSH connections and server configuration in the Resources section\n- Manage SSH connections through the provided tools\n\n## Configuration\n\nThe server uses a JSON configuration file to customize its behavior. You can specify settings for security controls, shell configurations, and SSH connections.\n\n1. To create a default config file, either:\n\n**a)** copy `config.json.example` to `config.json`, or\n\n**b)** run:\n\n```bash\nnpx @simonb97/server-win-cli --init-config ./config.json\n```\n\n2. Then set the `--config` flag to point to your config file as described in the [Usage with Claude Desktop](#usage-with-claude-desktop) section.\n\n### Configuration Locations\n\nThe server looks for configuration in the following locations (in order):\n\n1. Path specified by `--config` flag\n2. ./config.json in current directory\n3. ~/.win-cli-mcp/config.json in user's home directory\n\nIf no configuration file is found, the server will use a default (restricted) configuration:\n\n### Default Configuration\n\n**Note**: The default configuration is designed to be restrictive and secure. Find more details on each setting in the [Configuration Settings](#configuration-settings) section.\n\n```json\n{\n  \"security\": {\n    \"maxCommandLength\": 2000,\n    \"blockedCommands\": [\n      \"rm\",\n      \"del\",\n      \"rmdir\",\n      \"format\",\n      \"shutdown\",\n      \"restart\",\n      \"reg\",\n      \"regedit\",\n      \"net\",\n      \"netsh\",\n      \"takeown\",\n      \"icacls\"\n    ],\n    \"blockedArguments\": [\n      \"--exec\",\n      \"-e\",\n      \"/c\",\n      \"-enc\",\n      \"-encodedcommand\",\n      \"-command\",\n      \"--interactive\",\n      \"-i\",\n      \"--login\",\n      \"--system\"\n    ],\n    \"allowedPaths\": [\"User's home directory\", \"Current working directory\"],\n    \"restrictWorkingDirectory\": true,\n    \"logCommands\": true,\n    \"maxHistorySize\": 1000,\n    \"commandTimeout\": 30,\n    \"enableInjectionProtection\": true\n  },\n  \"shells\": {\n    \"powershell\": {\n      \"enabled\": true,\n      \"command\": \"powershell.exe\",\n      \"args\": [\"-NoProfile\", \"-NonInteractive\", \"-Command\"],\n      \"blockedOperators\": [\"&\", \"|\", \";\", \"`\"]\n    },\n    \"cmd\": {\n      \"enabled\": true,\n      \"command\": \"cmd.exe\",\n      \"args\": [\"/c\"],\n      \"blockedOperators\": [\"&\", \"|\", \";\", \"`\"]\n    },\n    \"gitbash\": {\n      \"enabled\": true,\n      \"command\": \"C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe\",\n      \"args\": [\"-c\"],\n      \"blockedOperators\": [\"&\", \"|\", \";\", \"`\"]\n    }\n  },\n  \"ssh\": {\n    \"enabled\": false,\n    \"defaultTimeout\": 30,\n    \"maxConcurrentSessions\": 5,\n    \"keepaliveInterval\": 10000,\n    \"keepaliveCountMax\": 3,\n    \"readyTimeout\": 20000,\n    \"connections\": {}\n  }\n}\n```\n\n### Configuration Settings\n\nThe configuration file is divided into three main sections: `security`, `shells`, and `ssh`.\n\n#### Security Settings\n\n```json\n{\n  \"security\": {\n    // Maximum allowed length for any command\n    \"maxCommandLength\": 1000,\n\n    // Commands to block - blocks both direct use and full paths\n    // Example: \"rm\" blocks both \"rm\" and \"C:\\\\Windows\\\\System32\\\\rm.exe\"\n    // Case-insensitive: \"del\" blocks \"DEL.EXE\", \"del.cmd\", etc.\n    \"blockedCommands\": [\n      \"rm\", // Delete files\n      \"del\", // Delete files\n      \"rmdir\", // Delete directories\n      \"format\", // Format disks\n      \"shutdown\", // Shutdown system\n      \"restart\", // Restart system\n      \"reg\", // Registry editor\n      \"regedit\", // Registry editor\n      \"net\", // Network commands\n      \"netsh\", // Network commands\n      \"takeown\", // Take ownership of files\n      \"icacls\" // Change file permissions\n    ],\n\n    // Arguments that will be blocked when used with any command\n    // Note: Checks each argument independently - \"cd warm_dir\" won't be blocked just because \"rm\" is in blockedCommands\n    \"blockedArguments\": [\n      \"--exec\", // Execution flags\n      \"-e\", // Short execution flags\n      \"/c\", // Command execution in some shells\n      \"-enc\", // PowerShell encoded commands\n      \"-encodedcommand\", // PowerShell encoded commands\n      \"-command\", // Direct PowerShell command execution\n      \"--interactive\", // Interactive mode which might bypass restrictions\n      \"-i\", // Short form of interactive\n      \"--login\", // Login shells might have different permissions\n      \"--system\" // System level operations\n    ],\n\n    // List of directories where commands can be executed\n    \"allowedPaths\": [\"C:\\\\Users\\\\YourUsername\", \"C:\\\\Projects\"],\n\n    // If true, commands can only run in allowedPaths\n    \"restrictWorkingDirectory\": true,\n\n    // If true, saves command history\n    \"logCommands\": true,\n\n    // Maximum number of commands to keep in history\n    \"maxHistorySize\": 1000,\n\n    // Timeout for command execution in seconds (default: 30)\n    \"commandTimeout\": 30,\n\n    // Enable or disable protection against command injection (covers ;, &, |, \\`)\n    \"enableInjectionProtection\": true\n  }\n}\n```\n\n#### Shell Configuration\n\n```json\n{\n  \"shells\": {\n    \"powershell\": {\n      // Enable/disable this shell\n      \"enabled\": true,\n      // Path to shell executable\n      \"command\": \"powershell.exe\",\n      // Default arguments for the shell\n      \"args\": [\"-NoProfile\", \"-NonInteractive\", \"-Command\"],\n      // Optional: Specify which command operators to block\n      \"blockedOperators\": [\"&\", \"|\", \";\", \"`\"]  // Block all command chaining\n    },\n    \"cmd\": {\n      \"enabled\": true,\n      \"command\": \"cmd.exe\",\n      \"args\": [\"/c\"],\n      \"blockedOperators\": [\"&\", \"|\", \";\", \"`\"]  // Block all command chaining\n    },\n    \"gitbash\": {\n      \"enabled\": true,\n      \"command\": \"C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe\",\n      \"args\": [\"-c\"],\n      \"blockedOperators\": [\"&\", \"|\", \";\", \"`\"]  // Block all command chaining\n    }\n  }\n}\n```\n\n#### SSH Configuration\n\n```json\n{\n  \"ssh\": {\n    // Enable/disable SSH functionality\n    \"enabled\": false,\n\n    // Default timeout for SSH commands in seconds\n    \"defaultTimeout\": 30,\n\n    // Maximum number of concurrent SSH sessions\n    \"maxConcurrentSessions\": 5,\n\n    // Interval for sending keepalive packets (in milliseconds)\n    \"keepaliveInterval\": 10000,\n\n    // Maximum number of failed keepalive attempts before disconnecting\n    \"keepaliveCountMax\": 3,\n\n    // Timeout for establishing SSH connections (in milliseconds)\n    \"readyTimeout\": 20000,\n\n    // SSH connection profiles\n    \"connections\": {\n      // NOTE: these examples are not set in the default config!\n      // Example: Local Raspberry Pi\n      \"raspberry-pi\": {\n        \"host\": \"raspberrypi.local\", // Hostname or IP address\n        \"port\": 22, // SSH port\n        \"username\": \"pi\", // SSH username\n        \"password\": \"raspberry\", // Password authentication (if not using key)\n        \"keepaliveInterval\": 10000, // Override global keepaliveInterval\n        \"keepaliveCountMax\": 3, // Override global keepaliveCountMax\n        \"readyTimeout\": 20000 // Override global readyTimeout\n      },\n      // Example: Remote server with key authentication\n      \"dev-server\": {\n        \"host\": \"dev.example.com\",\n        \"port\": 22,\n        \"username\": \"admin\",\n        \"privateKeyPath\": \"C:\\\\Users\\\\YourUsername\\\\.ssh\\\\id_rsa\", // Path to private key\n        \"keepaliveInterval\": 10000,\n        \"keepaliveCountMax\": 3,\n        \"readyTimeout\": 20000\n      }\n    }\n  }\n}\n```\n\n## API\n\n### Tools\n\n- **execute_command**\n\n  - Execute a command in the specified shell\n  - Inputs:\n    - `shell` (string): Shell to use (\"powershell\", \"cmd\", or \"gitbash\")\n    - `command` (string): Command to execute\n    - `workingDir` (optional string): Working directory\n  - Returns command output as text, or error message if execution fails\n\n- **get_command_history**\n\n  - Get the history of executed commands\n  - Input: `limit` (optional number)\n  - Returns timestamped command history with outputs\n\n- **ssh_execute**\n\n  - Execute a command on a remote system via SSH\n  - Inputs:\n    - `connectionId` (string): ID of the SSH connection to use\n    - `command` (string): Command to execute\n  - Returns command output as text, or error message if execution fails\n\n- **ssh_disconnect**\n  - Disconnect from an SSH server\n  - Input:\n    - `connectionId` (string): ID of the SSH connection to disconnect\n  - Returns confirmation message\n\n- **create_ssh_connection**\n  - Create a new SSH connection\n  - Inputs:\n    - `connectionId` (string): ID for the new SSH connection\n    - `connectionConfig` (object): Connection configuration details including host, port, username, and either password or privateKeyPath\n  - Returns confirmation message\n\n- **read_ssh_connections**\n  - Read all configured SSH connections\n  - Returns a list of all SSH connections from the configuration\n\n- **update_ssh_connection**\n  - Update an existing SSH connection\n  - Inputs:\n    - `connectionId` (string): ID of the SSH connection to update\n    - `connectionConfig` (object): New connection configuration details\n  - Returns confirmation message\n\n- **delete_ssh_connection**\n  - Delete an SSH connection\n  - Input:\n    - `connectionId` (string): ID of the SSH connection to delete\n  - Returns confirmation message\n\n- **get_current_directory**\n  - Get the current working directory of the server\n  - Returns the current working directory path\n\n### Resources\n\n- **SSH Connections**\n  - URI format: `ssh://{connectionId}`\n  - Contains connection details with sensitive information masked\n  - One resource for each configured SSH connection\n  - Example: `ssh://raspberry-pi` shows configuration for the \"raspberry-pi\" connection\n\n- **SSH Configuration**\n  - URI: `ssh://config`\n  - Contains overall SSH configuration and all connections (with passwords masked)\n  - Shows settings like defaultTimeout, maxConcurrentSessions, and the list of connections\n\n- **Current Directory**\n  - URI: `cli://currentdir`\n  - Contains the current working directory of the CLI server\n  - Shows the path where commands will execute by default\n\n- **CLI Configuration**\n  - URI: `cli://config`\n  - Contains the CLI server configuration (excluding sensitive data)\n  - Shows security settings, shell configurations, and SSH settings\n\n## Security Considerations\n\n### Built-in Security Features (Always Active)\n\nThe following security features are hard-coded into the server and cannot be disabled:\n\n- **Case-insensitive command blocking**: All command blocking is case-insensitive (e.g., \"DEL.EXE\", \"del.cmd\", etc. are all blocked if \"del\" is in blockedCommands)\n- **Smart path parsing**: The server parses full command paths to prevent bypass attempts (blocking \"C:\\\\Windows\\\\System32\\\\rm.exe\" if \"rm\" is blocked)\n- **Command parsing intelligence**: False positives are avoided (e.g., \"warm_dir\" is not blocked just because \"rm\" is in blockedCommands)\n- **Input validation**: All user inputs are validated before execution\n- **Shell process management**: Processes are properly terminated after execution or timeout\n- **Sensitive data masking**: Passwords are automatically masked in resources (replaced with ********)\n\n### Configurable Security Features (Active by Default)\n\nThese security features are configurable through the config.json file:\n\n- **Command blocking**: Commands specified in `blockedCommands` array are blocked (default includes dangerous commands like rm, del, format)\n- **Argument blocking**: Arguments specified in `blockedArguments` array are blocked (default includes potentially dangerous flags)\n- **Command injection protection**: Prevents command chaining (enabled by default through `enableInjectionProtection: true`)\n- **Working directory restriction**: Limits command execution to specified directories (enabled by default through `restrictWorkingDirectory: true`)\n- **Command length limit**: Restricts maximum command length (default: 2000 characters)\n- **Command timeout**: Terminates commands that run too long (default: 30 seconds)\n- **Command logging**: Records command history (enabled by default through `logCommands: true`)\n\n### Important Security Warnings\n\nThese are not features but important security considerations to be aware of:\n\n- **Environment access**: Commands may have access to environment variables, which could contain sensitive information\n- **File system access**: Commands can read/write files within allowed paths - carefully configure `allowedPaths` to prevent access to sensitive data\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "workflow",
        "ssh",
        "cmd git",
        "git workflow",
        "git bash"
      ],
      "category": "git-workflow-management"
    },
    "skurekjakub--GitStuffServer": {
      "owner": "skurekjakub",
      "name": "GitStuffServer",
      "url": "https://github.com/skurekjakub/GitStuffServer",
      "imageUrl": "/freedevtools/mcp/pfp/skurekjakub.webp",
      "description": "Generate Git merge diffs by providing a merge commit hash and executing Git commands via a PowerShell script. Retrieve detailed diff content seamlessly through an MCP interface.",
      "stars": 0,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-05-10T06:03:14Z",
      "readme_content": "# Git Stuff Server\n\nThis repository contains a Node.js application that acts as an MCP (Model Context Protocol) server to provide Git-related functionalities. Currently, it offers a tool to generate the diff for a Git merge commit against its first parent.\n\n## Features\n\n*   **MCP Server:** Runs as a standard MCP server using stdio for communication.\n*   **`get_git_merge_diff` Tool:**\n    *   Accepts a Git merge commit hash.\n    *   Executes the [`GenerateMergeDiff.ps1`](GenerateMergeDiff.ps1) PowerShell script.\n    *   Returns the textual diff content generated by `git show -m --first-parent <commitHash>`.\n\n## Prerequisites\n\n*   [Node.js](https://nodejs.org/) (Version supporting ES Modules, check `engines` in [package.json](package.json) if specified, otherwise check `tsconfig.json` target - ES2022)\n*   [npm](https://www.npmjs.com/) (usually comes with Node.js)\n*   [Git](https://git-scm.com/) installed and accessible in the system's PATH.\n*   [PowerShell](https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell) (Windows) or `pwsh` (Linux/macOS) installed and accessible in the system's PATH.\n\n## Installation\n\n1.  Clone the repository:\n    ```sh\n    git clone <your-repo-url>\n    cd GitStuffServer\n    ```\n2.  Install dependencies:\n    ```sh\n    npm install\n    ```\n\n## Usage\n\n1.  **Build the TypeScript code:**\n    ```sh\n    npm run build\n    ```\n    This compiles the TypeScript code from `src/` to JavaScript in `build/`.\n\n2.  **Run the server:**\n    *   To run the compiled code:\n        ```sh\n        npm start\n        ```\n    *   To build and run in development mode:\n        ```sh\n        npm run dev\n        ```\n\nThe server will start and listen for MCP requests on standard input/output.\n\n### Using the `get_git_merge_diff` Tool\n\nWhen connected via an MCP client, you can call the `get_git_merge_diff` tool with the following input:\n\n*   `commitHash` (string): The Git commit hash (SHA) of the merge commit you want to diff.\n\nThe tool will return the diff content as text.\n\n## How it Works\n\n1.  The MCP server ([`src/index.ts`](src/index.ts)) receives a request for the `get_git_merge_diff` tool.\n2.  It validates the `commitHash` input.\n3.  It executes the [`GenerateMergeDiff.ps1`](GenerateMergeDiff.ps1) PowerShell script, passing the `commitHash`.\n4.  The PowerShell script runs `git show -m --first-parent <commitHash>` and saves the output (including any errors) to a temporary file named `merge_changes.diff` in the server's current working directory.\n5.  The Node.js server reads the content of `merge_changes.diff`.\n6.  The server deletes the temporary `merge_changes.diff` file.\n7.  The server returns the diff content (or an error message) to the MCP client.\n\n## Configuration\n\nKey configuration points are defined as constants within [`src/index.ts`](src/index.ts):\n\n*   `SERVER_NAME`: The name registered by the MCP server.\n*   `SCRIPT_NAME`: The filename of the PowerShell script to execute.\n*   `OUTPUT_DIFF_FILE`: The name of the temporary diff file created by the script.\n\n## License\n\nThis project is licensed under the MIT License - see the [package.json](package.json) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gitstuffserver",
        "git",
        "diffs",
        "git merge",
        "git workflow",
        "merge diffs"
      ],
      "category": "git-workflow-management"
    },
    "sourcebot-dev--sourcebot": {
      "owner": "sourcebot-dev",
      "name": "sourcebot",
      "url": "https://github.com/sourcebot-dev/sourcebot",
      "imageUrl": "/freedevtools/mcp/pfp/sourcebot-dev.webp",
      "description": "Enables regex-based code search across multiple code hosts such as GitHub, GitLab, and BitBucket to retrieve relevant code snippets and repository information. Provides LLM agents with enhanced context for improved reasoning and response quality without requiring local repository checkouts.",
      "stars": 2609,
      "forks": 149,
      "license": "Other",
      "language": "TypeScript",
      "updated_at": "2025-10-03T09:35:30Z",
      "readme_content": "\n<div align=\"center\">\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\".github/images/logo_dark.png\">\n  <img height=\"150\" src=\".github/images/logo_light.png\">\n</picture>\n</div>\n<div align=\"center\">\n   <div>\n      <h3>\n         <a href=\"https://docs.sourcebot.dev/self-hosting/overview\">\n            <strong>Self Host</strong>\n         </a> · \n         <a href=\"https://demo.sourcebot.dev\">\n            <strong>Public Demo</strong>\n         </a>\n      </h3>\n   </div>\n\n   <div>\n      <a href=\"https://docs.sourcebot.dev/\"><strong>Docs</strong></a> ·\n      <a href=\"https://github.com/sourcebot-dev/sourcebot/issues/459\"><strong>Roadmap</strong></a> ·\n      <a href=\"https://github.com/sourcebot-dev/sourcebot/issues/new?template=bug_report.yml\"><strong>Report Bug</strong></a> ·\n      <a href=\"https://github.com/sourcebot-dev/sourcebot/issues/new?template=feature_request.md\"><strong>Feature Request</strong></a> ·\n      <a href=\"https://www.sourcebot.dev/changelog\"><strong>Changelog</strong></a>\n   </div>\n   <br/>\n   <div>\n   </div>\n</div>\n<p align=\"center\">\n  <a href=\"mailto:team@sourcebot.dev\"><img src=\"https://img.shields.io/badge/Email%20Us-brightgreen\" /></a>\n  <a href=\"https://github.com/sourcebot-dev/sourcebot/actions/workflows/ghcr-publish.yml\"><img src=\"https://img.shields.io/github/actions/workflow/status/sourcebot-dev/sourcebot/ghcr-publish.yml\"/><a>\n  <a href=\"https://github.com/sourcebot-dev/sourcebot/stargazers\"><img src=\"https://img.shields.io/github/stars/sourcebot-dev/sourcebot\" /></a>\n</p>\n<p align=\"center\">\n</p>\n\nSourcebot is a self-hosted tool that helps you understand your codebase. \n\n- **Ask Sourcebot:** Ask questions about your codebase and have Sourcebot provide detailed answers grounded with inline citations.\n- **Code search:** Search and navigate across all your repos and branches, no matter where they’re hosted.\n\nTry it out in our [public demo](https://demo.sourcebot.dev)!\n\nhttps://github.com/user-attachments/assets/ed66a622-e38f-4947-a531-86df1e1e0218\n\n# Features\n![Sourcebot Features](https://github.com/user-attachments/assets/3aed7348-7aeb-4af3-89da-b617c3db2e02)\n\n## Ask Sourcebot\nAsk Sourcebot gives you the ability to ask complex questions about your codebase in natural language.\n\nIt uses Sourcebot's existing code search and navigation tools to allow reasoning models to search your code, follow code nav references, and provide an answer that's rich with inline citations and navigable code snippets.\n\nhttps://github.com/user-attachments/assets/8212cd16-683f-468f-8ea5-67455c0931e2\n\n## Code Search\nSearch across all your repos/branches across any code host platform. Blazingly fast, and supports regular expressions, repo/language search filters, boolean logic, and more.\n\nhttps://github.com/user-attachments/assets/3b381452-d329-4949-b6f2-2fc38952e481\n\n## Code Navigation\nIDE-level code navigation (goto definition and find references) across all your repos.\n\nhttps://github.com/user-attachments/assets/e2da2829-71cc-40af-98b4-7ba52e945530\n\n## Built-in File Explorer\nExplore every file across all of your repos. Modern UI with syntax highlighting, file tree, code navigation, etc.\n\nhttps://github.com/user-attachments/assets/31ec0669-707d-4e03-b511-1bc33d44197a\n\n# Deploy Sourcebot\n\nSourcebot can be deployed in seconds using our official docker image. Visit our [docs](https://docs.sourcebot.dev/docs/deployment-guide) for more information.\n\n1. Create a config\n```sh\ntouch config.json\necho '{\n    \"$schema\": \"https://raw.githubusercontent.com/sourcebot-dev/sourcebot/main/schemas/v3/index.json\",\n    \"connections\": {\n        // Comments are supported\n        \"starter-connection\": {\n            \"type\": \"github\",\n            \"repos\": [\n                \"sourcebot-dev/sourcebot\"\n            ]\n        }\n    }\n}' > config.json\n```\n\n2. Run the docker container\n```sh\ndocker run \\\n  -p 3000:3000 \\\n  --pull=always \\\n  --rm \\\n  -v $(pwd):/data \\\n  -e CONFIG_PATH=/data/config.json \\\n  --name sourcebot \\\n  ghcr.io/sourcebot-dev/sourcebot:latest\n```\n<details>\n<summary>What does this command do?</summary>\n\n- Pull and run the Sourcebot docker image from [ghcr.io/sourcebot-dev/sourcebot:latest](https://github.com/sourcebot-dev/sourcebot/pkgs/container/sourcebot).\n- Mount the current directory (`-v $(pwd):/data`) to allow Sourcebot to persist the `.sourcebot` cache.\n- Clones sourcebot at `HEAD` into `.sourcebot/github/sourcebot-dev/sourcebot`.\n- Indexes sourcebot into a .zoekt index file in `.sourcebot/index/`.\n- Map port 3000 between your machine and the docker image.\n- Starts the web server on port 3000.\n</details>\n</br>\n\n3. Visit `http://localhost:3000` to start using Sourcebot\n</br>\n\nTo configure Sourcebot (index your own repos, connect your LLMs, etc), check out our [docs](https://docs.sourcebot.dev/docs/configuration/config-file).\n\n> [!NOTE]\n> Sourcebot collects <a href=\"https://demo.sourcebot.dev/~/search?query=captureEvent%5C(%20repo%3Asourcebot\">anonymous usage data</a> by default to help us improve the product. No sensitive data is collected, but if you'd like to disable this you can do so by setting the `SOURCEBOT_TELEMETRY_DISABLED` environment\n> variable to `true`. Please refer to our [telemetry docs](https://docs.sourcebot.dev/self-hosting/overview#telemetry) for more information.\n\n# Build from source\n>[!NOTE]\n> Building from source is only required if you'd like to contribute. If you'd just like to use Sourcebot, we recommend checking out our self-hosting [docs](https://docs.sourcebot.dev/self-hosting/overview).\n\nIf you'd like to build from source, please checkout the `CONTRIBUTING.md` file for more information.\n\n",
      "npm_url": "https://www.npmjs.com/package/sourcebot",
      "npm_downloads": 141,
      "keywords": [
        "github",
        "sourcebot",
        "git",
        "dev sourcebot",
        "sourcebot dev",
        "git workflow"
      ],
      "category": "git-workflow-management"
    },
    "suenot--aicommit-mcp": {
      "owner": "suenot",
      "name": "aicommit-mcp",
      "url": "https://github.com/suenot/aicommit-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/suenot.webp",
      "description": "Generate AI-driven git commit messages based on repository changes to enhance version control workflows, with capabilities for executing commit operations and checking git status.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-05-10T17:00:21Z",
      "readme_content": "# aicommit-mcp\n[![smithery badge](https://smithery.ai/badge/@suenot/aicommit-mcp)](https://smithery.ai/server/@suenot/aicommit-mcp)\n\nMCP (Model Context Protocol) server for aicommit - AI-powered git commit message generation.\n\n## Overview\n\nThis MCP server allows AI assistants (like Claude) to generate git commit messages for your code changes. It acts as a bridge between LLMs and the [aicommit](https://github.com/suenot/aicommit) tool, enabling AI-powered version control workflows.\n\n## Available Packages\n\nThere are two versions of this package available:\n\n### 1. Regular Version [@suenot/aicommit-mcp](./README-REGULAR.md)\n\nThe standard package that requires aicommit to be installed separately.\n\n📦 [NPM Package: @suenot/aicommit-mcp](https://www.npmjs.com/package/@suenot/aicommit-mcp)\n\n### 2. Bundled Version [@suenot/aicommit-mcp-bundled](./README-BUNDLED.md)\n\nThe bundled package that automatically installs aicommit for you.\n\n📦 [NPM Package: @suenot/aicommit-mcp-bundled](https://www.npmjs.com/package/@suenot/aicommit-mcp-bundled)\n\n## Feature Comparison\n\n| Feature | Regular | Bundled |\n|---------|---------|---------|\n| Generate AI commit messages | ✅ | ✅ |\n| Execute aicommit operations | ✅ | ✅ |\n| Check git repository status | ✅ | ✅ |\n| View aicommit providers | ✅ | ✅ |\n| Automatic staging, pushing, pulling | ✅ | ✅ |\n| Automatic installation of aicommit | ❌ | ✅ |\n\n## Quick Installation Guide\n\n### Regular Version (aicommit installed separately)\n\n```bash\n# Install aicommit first\nnpm install -g @suenot/aicommit\n# or\ncargo install aicommit\n\n# Install the MCP server\nnpm install -g @suenot/aicommit-mcp\n```\n\n### Bundled Version (includes aicommit installation)\n\n```bash\n# Install the bundled MCP server\nnpm install -g @suenot/aicommit-mcp-bundled\n```\n\n### Docker Installation\n\nYou can also run the MCP server using Docker:\n\n#### Regular Version\n```bash\n# Pull the Docker image\ndocker pull suenot/aicommit-mcp\n\n# Run the container\ndocker run -p 8888:8888 -v $(pwd):/workspace --name aicommit-mcp suenot/aicommit-mcp\n```\n\n#### Bundled Version\n```bash\n# Pull the Docker image\ndocker pull suenot/aicommit-mcp-bundled\n\n# Run the container\ndocker run -p 8888:8888 -v $(pwd):/workspace --name aicommit-mcp-bundled suenot/aicommit-mcp-bundled\n```\n\n## Smithery Deployment\n\nThis MCP server is compatible with Smithery and can be deployed to the Smithery marketplace. The server implements \"lazy loading\" of the aicommit tool, which means:\n\n- Tool listing doesn't require authentication or configuration\n- Authentication and dependencies are only checked when tools are actually called\n- The server supports deployment and tool display in the Smithery web interface\n\n### Setting up with Smithery\n\n```bash\n# Using the Smithery CLI\nnpx -y @smithery/cli@latest install @suenot/aicommit-mcp --client claude --config '{}'\n\n# For bundled version\nnpx -y @smithery/cli@latest install @suenot/aicommit-mcp-bundled --client claude --config '{}'\n```\n\n### Local Installation from Smithery\n\nBoth versions of the aicommit MCP server support direct installation from the Smithery web interface:\n\n1. Visit [Smithery](https://smithery.ai/server/@suenot/aicommit-mcp)\n2. Click \"Continue Anyway\" when prompted\n3. Select your preferred client (Claude, Cursor, etc.)\n4. Click \"Install Server\"\n\nThe installer will guide you through the process:\n- For the regular version, you'll need to install aicommit separately\n- For the bundled version, aicommit will be installed automatically\n\n### Troubleshooting Local Installation\n\nIf you encounter the \"Uh oh! This server works best locally...\" error:\n\n1. Ensure you have Node.js 14+ installed\n2. Install the package manually using npm:\n   ```bash\n   npm install -g @suenot/aicommit-mcp\n   # or for bundled version\n   npm install -g @suenot/aicommit-mcp-bundled\n   ```\n3. Configure your MCP client (Claude, Cursor, etc.) as shown in the Assistant Integration section\n\n## Assistant Integration\n\n### Claude Desktop\n\n```json\n{\n  \"mcpServers\": {\n    \"aicommit\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@suenot/aicommit-mcp\"]\n      // For bundled version: \"args\": [\"-y\", \"@suenot/aicommit-mcp-bundled\"]\n    }\n  }\n}\n```\n\n### With Docker\n\nTo use Docker with Claude Desktop, add this to your configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"aicommit\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"--rm\", \"-v\", \"${workspaceFolder}:/workspace\", \"suenot/aicommit-mcp\"]\n      // For bundled version: \"args\": [\"run\", \"--rm\", \"-v\", \"${workspaceFolder}:/workspace\", \"suenot/aicommit-mcp-bundled\"]\n    }\n  }\n}\n```\n\n### Cursor\n\n```json\n{\n  \"mcpServers\": {\n    \"aicommit\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@suenot/aicommit-mcp\"]\n    }\n  }\n}\n```\n\n### Windsurf\n\n```json\n{\n  \"mcpServers\": {\n    \"aicommit\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@suenot/aicommit-mcp\"]\n    }\n  }\n}\n```\n\n### Cline\n\n```json\n{\n  \"mcpServers\": {\n    \"aicommit\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@suenot/aicommit-mcp\"]\n    }\n  }\n}\n```\n\n### Smithery\n\nInstall via Smithery CLI:\n\n```bash\n# Regular version\nnpx -y @smithery/cli@latest install @suenot/aicommit-mcp --client claude --config '{}'\n\n# Bundled version\nnpx -y @smithery/cli@latest install @suenot/aicommit-mcp-bundled --client claude --config '{}'\n```\n\nFor complete documentation for each package, please refer to:\n- [Regular Version Documentation](./README-REGULAR.md)\n- [Bundled Version Documentation](./README-BUNDLED.md)\n\n## License\n\nMIT\n\n## Related\n\n- [aicommit](https://github.com/suenot/aicommit) - The CLI tool this MCP server uses\n- [Model Context Protocol](https://modelcontextprotocol.io/) - Learn more about MCP ",
      "npm_url": "https://www.npmjs.com/package/@suenot/aicommit-mcp",
      "npm_downloads": 291,
      "keywords": [
        "git",
        "commit",
        "workflows",
        "git workflow",
        "git commit",
        "driven git"
      ],
      "category": "git-workflow-management"
    },
    "tay3223--mcp-server-gitlab": {
      "owner": "tay3223",
      "name": "mcp-server-gitlab",
      "url": "https://github.com/tay3223/mcp-server-gitlab",
      "imageUrl": "/freedevtools/mcp/pfp/tay3223.webp",
      "description": "Connects to private GitLab instances and provides an API layer for accessing projects, files, commits, and merge requests, thereby streamlining development workflows.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-03-28T19:57:50Z",
      "readme_content": "# MCP GitLab 服务器\n\n这是一个连接私有部署GitLab服务器的MCP服务器。它提供了一个API层，可以与GitLab API交互，获取项目、文件、提交记录和合并请求等信息。\n\n## 功能特点\n\n- 提供简化的API接口访问私有GitLab实例\n- 支持获取项目列表和项目详情\n- 支持查看仓库文件内容\n- 支持获取项目提交历史\n- 支持获取和操作合并请求\n- 完整的日志记录\n- 跨域支持\n- 支持Smithery平台部署和本地部署两种模式\n\n## 部署方式\n\n本服务支持两种主要部署方式：\n\n### 1. Smithery平台部署\n\n[Smithery](https://smithery.ai/)是专为MCP服务设计的托管平台，提供标准化接口和简化的部署流程。\n\n#### Smithery部署步骤\n\n1. **准备工作**：确保仓库中包含`smithery.yaml`和`Dockerfile`文件（本仓库已包含）\n2. **平台配置**：\n   - 在[Smithery平台](https://smithery.ai/)上注册并连接您的GitHub账户\n   - 创建新的MCP服务并选择此仓库\n   - 在配置表单中填写您的GitLab服务器URL和访问令牌\n3. **部署**：完成配置后，Smithery平台会自动构建和部署您的服务\n4. **使用**：部署完成后，您可以通过Smithery提供的接口与服务交互\n\n#### Smithery配置说明\n\n本仓库的`smithery.yaml`文件定义了以下配置参数：\n\n- `gitlabUrl`：您的GitLab服务器URL（必填）\n- `gitlabToken`：GitLab API访问令牌（必填）\n- `gitlabApiVersion`：GitLab API版本（默认：v4）\n- `port`：服务监听端口（默认：3000）\n- `logLevel`：日志级别（默认：info）\n\n### 2. 本地/自托管部署\n\n您也可以在自己的服务器或本地环境中部署此服务。\n\n#### 本地部署步骤\n\n1. **克隆仓库**\n   ```bash\n   git clone https://github.com/yourusername/mcp-gitlab-server.git\n   cd mcp-gitlab-server\n   ```\n\n2. **安装依赖**\n   ```bash\n   npm install\n   ```\n\n3. **配置环境变量**\n   ```bash\n   cp .env.example .env\n   ```\n   编辑`.env`文件，填入必要的配置：\n   ```\n   GITLAB_URL=https://your-gitlab-instance.com\n   GITLAB_TOKEN=your_private_token\n   GITLAB_API_VERSION=v4\n   PORT=3000\n   LOG_LEVEL=info\n   ```\n\n4. **启动服务**\n   ```bash\n   # 生产模式\n   npm start\n   \n   # 开发模式（支持热重载）\n   npm run dev\n   ```\n\n#### Docker部署\n\n本服务支持Docker容器化部署，方便在各种环境中运行：\n\n1. **构建镜像**\n   ```bash\n   docker build -t mcp-gitlab-server .\n   ```\n\n2. **运行容器**\n   ```bash\n   docker run -p 3000:3000 --env-file .env mcp-gitlab-server\n   ```\n\n#### Docker Compose部署\n\n使用docker-compose可以简化部署过程：\n\n```bash\n# 启动服务\ndocker-compose up -d\n\n# 查看日志\ndocker-compose logs -f\n\n# 停止服务\ndocker-compose down\n```\n\n`docker-compose.yml`文件配置如下：\n\n```yaml\nversion: '3'\nservices:\n  mcp-gitlab-server:\n    build: .\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./logs:/app/logs\n    env_file:\n      - .env\n    restart: always\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 10s\n```\n\n## API端点\n\n无论使用哪种部署方式，本地部署模式下服务器提供以下API端点：\n\n### 项目相关\n\n- `GET /api/projects` - 获取所有项目\n- `GET /api/projects/:id` - 获取特定项目详情\n\n### 仓库文件\n\n- `GET /api/projects/:id/repository/files` - 获取项目文件内容\n\n### 提交和合并请求\n\n- `GET /api/projects/:id/commits` - 获取项目提交记录\n- `GET /api/projects/:id/merge_requests` - 获取项目合并请求\n\n### 健康检查\n\n- `GET /health` - 服务健康状态检查\n\n## 部署模式对比\n\n| 特性 | Smithery部署 | 本地/自托管部署 |\n|------|--------------|-----------------|\n| 部署难度 | 简单，平台自动化 | 需要更多手动配置 |\n| 与AI集成 | 直接支持 | 需要额外开发 |\n| 通信方式 | STDIO | HTTP REST API |\n| 配置方式 | 平台表单配置 | 环境变量 |\n| 运维负担 | 平台管理 | 自行维护 |\n| 扩展能力 | 受平台限制 | 完全自由 |\n\n## 定制开发\n\n如需扩展功能，您可以修改以下文件：\n\n- `src/services/gitlab.js` - 添加新的GitLab API交互方法\n- `src/routes/api.js` - 添加新的API端点\n- `config/config.js` - 修改配置选项\n- `smithery.yaml` - 修改Smithery平台配置选项\n\n## 安全建议\n\n1. **通信安全**：使用HTTPS确保API通信安全\n2. **访问控制**：设置适当的GitLab访问令牌权限\n3. **身份验证**：实现API身份验证机制，避免未授权访问\n4. **依赖安全**：定期更新依赖包以修复安全漏洞\n5. **反向代理**：在生产环境中使用反向代理（如Nginx）保护服务器\n\n## 常见问题\n\n### Smithery相关问题\n\n**问：如何更新已部署在Smithery上的服务？**  \n答：提交代码到GitHub仓库后，登录Smithery平台重新部署服务。\n\n**问：Smithery环境变量如何配置？**  \n答：在Smithery平台上创建服务时，会根据`smithery.yaml`中的`configSchema`自动生成配置表单。\n\n**问：Smithery部署和本地部署有什么区别？**  \n答：Smithery部署使用STDIO通信，而本地部署使用HTTP REST API通信。前者更适合与AI服务集成，后者更适合传统应用使用。\n\n### 本地部署相关问题\n\n**问：如何添加身份验证？**  \n答：您可以在`src/index.js`中添加身份验证中间件：\n\n```javascript\n// 身份验证中间件\napp.use('/api', (req, res, next) => {\n  const apiKey = req.headers['x-api-key'];\n  if (!apiKey || apiKey !== process.env.API_KEY) {\n    return res.status(401).json({ error: '未授权访问' });\n  }\n  next();\n});\n```\n\n**问：遇到\"Error fetching projects\"错误怎么办？**  \n答：检查以下几点：\n1. `.env`文件中的`GITLAB_URL`和`GITLAB_TOKEN`是否正确\n2. GitLab服务器是否可以访问\n3. 令牌是否有足够的权限\n\n**问：如何获取GitLab访问令牌？**  \n答：\n1. 登录到您的GitLab实例\n2. 点击右上角个人资料图标\n3. 选择\"设置\" -> \"访问令牌\"\n4. 创建一个拥有api权限的访问令牌\n\n## 详细文档\n\n更多部署和配置的详细信息，请参阅 [DEPLOYMENT.md](./DEPLOYMENT.md)。\n\n## 许可证\n\n[MIT](LICENSE) ",
      "npm_url": "https://www.npmjs.com/package/mcp-server-gitlab",
      "npm_downloads": 0,
      "keywords": [
        "gitlab",
        "git",
        "commits",
        "server gitlab",
        "gitlab instances",
        "git workflow"
      ],
      "category": "git-workflow-management"
    },
    "taylor-lindores-reeves--mcp-github-projects": {
      "owner": "taylor-lindores-reeves",
      "name": "mcp-github-projects",
      "url": "https://github.com/taylor-lindores-reeves/mcp-github-projects",
      "imageUrl": "/freedevtools/mcp/pfp/taylor-lindores-reeves.webp",
      "description": "Connect and manage Agile Sprint-based projects using GitHub Projects, integrating with GitHub's GraphQL Projects v2 API to create and manage related tasks and issues. Streamline workflows by automating interactions with GitHub repositories and ensuring type safety through TypeScript implementation.",
      "stars": 30,
      "forks": 10,
      "license": "GNU General Public License v2.0",
      "language": "TypeScript",
      "updated_at": "2025-09-17T19:55:11Z",
      "readme_content": "# GitHub Projects MCP Server\n\n[![smithery badge](https://smithery.ai/badge/mcp-github-projects)](https://smithery.ai/server/taylor-lindores-reeves/mcp-github-projects)\n\nAn MCP (Model Context Protocol) server that enables AI agents to create and manage Agile Sprint-based projects using GitHub Projects.\n\n<a href=\"https://glama.ai/mcp/servers/86aw338aa5\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/86aw338aa5/badge\" alt=\"GitHub Projects Server MCP server\" />\n</a>\n\n## Features\n\n- **GitHub Projects v2 API**: Full support for GitHub's GraphQL Projects v2 API\n- **GitHub Issues**: Create, read, and update GitHub issues\n- **GitHub Repositories**: Fetch repository details\n- **Type Safety**: Built with TypeScript for maximum type safety\n\n## Project Structure\n\nThis MCP server is built with a layered architecture that separates concerns and promotes maintainability. The codebase provides typed access to GitHub's GraphQL API with comprehensive error handling and security features.\n\n### Directory Overview\n\n```\n├── src/                       # Source code directory\n│   ├── index.ts               # MCP server entry point & tool registration\n│   ├── operations/            # Business logic layer\n│   │   ├── github-client.ts   # GitHub API client wrapper\n│   │   ├── issues.ts          # Issue operations & schemas\n│   │   ├── projects.ts        # Project v2 operations & schemas\n│   │   ├── repositories.ts    # Repository operations & schemas\n│   │   └── index.ts           # Operations barrel exports\n│   ├── graphql/               # GraphQL queries & mutations\n│   │   ├── issues/            # Issue-related GraphQL files\n│   │   ├── projects/          # Project-related GraphQL files\n│   │   └── repositories/      # Repository-related GraphQL files\n│   ├── types/                 # TypeScript type definitions\n│   │   ├── github-api-types.ts # Auto-generated GitHub API types\n│   │   └── graphql.d.ts       # GraphQL type declarations\n│   ├── utils/                 # Utility functions\n│   │   └── graphql-loader.ts  # GraphQL file loader utility\n│   └── common/                # Shared utilities\n│       ├── errors.ts          # Error handling utilities\n│       └── utils.ts           # Common helper functions\n├── build/                     # Compiled output directory\n├── package.json               # Project configuration & dependencies\n├── tsconfig.json              # TypeScript compiler configuration\n├── codegen.ts                 # GraphQL code generation configuration\n├── build.ts                   # Custom build script with GraphQL plugin\n├── smithery.yaml              # Smithery package configuration\n├── schema.docs.graphql        # GitHub GraphQL schema for code generation\n├── .env.example               # Environment variable template\n└── .gitignore                 # Git ignore patterns\n```\n\n### Key Components\n\n#### MCP Server Layer (`src/index.ts`)\nThe main entry point that configures and starts the MCP server. Registers all available tools with their schemas and handlers, defines reusable prompts for Agile workflows, and manages communication with MCP clients.\n\n#### Business Logic Layer (`src/operations/`)\nContains the core business logic that bridges the MCP server interface with GitHub's APIs. Each file focuses on a specific GitHub domain with comprehensive error handling and security through repository allowlisting.\n\n- **`github-client.ts`**: Centralized GitHub API client using Octokit with GraphQL and REST support\n- **`issues.ts`**: Issue management operations with CRUD functionality\n- **`projects.ts`**: Comprehensive GitHub Projects v2 operations with full lifecycle management\n- **`repositories.ts`**: Repository information retrieval operations\n\n#### GraphQL Layer (`src/graphql/`)\nOrganizes GraphQL queries and mutations by feature domain, following GitHub's GraphQL API structure. Each `.graphql` file corresponds to a specific operation, with index files providing clean imports.\n\n#### Type System (`src/types/`)\nEnsures type safety throughout the application using a hybrid approach:\n- **Auto-generated types**: Created from GitHub's GraphQL schema using GraphQL Code Generator\n- **Manual declarations**: Enable importing `.graphql` files as TypeScript modules\n\n#### Configuration Files\nEssential configuration files that control the build process and project setup:\n\n- **`package.json`**: Project metadata, dependencies, and build scripts\n- **`tsconfig.json`**: TypeScript compiler settings for ES2022 target with NodeNext modules\n- **`codegen.ts`**: GraphQL Code Generator configuration for auto-generating types from GitHub's schema\n- **`build.ts`**: Custom esbuild configuration with GraphQL file handling plugin\n- **`smithery.yaml`**: Package configuration for Smithery MCP server registry\n- **`schema.docs.graphql`**: GitHub's GraphQL schema used for type generation\n- **`.env.example`**: Template showing required environment variables\n\n### Architectural Flow\n\n```\nMCP Client Request → MCP Server → Operations Layer → GitHub Client → GitHub API\n                                       ↓\n                               Type Validation (Zod Schemas)\n                                       ↓\n                               GraphQL Queries/Mutations\n```\n\nThe system follows a clear request-response pattern with validation gates at each layer, ensuring type safety from the MCP interface through to the GitHub API while maintaining security through repository allowlisting and comprehensive error handling.\n\n## Installation\n\n### Installing via Smithery\n\nTo install GitHub Projects MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/taylor-lindores-reeves/mcp-github-projects):\n\n```bash\nnpx -y @smithery/cli install taylor-lindores-reeves/mcp-github-projects --client claude\n```\n\n## Usage\n\n### Manual Installation\n\n1. Clone this repository:\n\n   ```bash\n   git clone https://github.com/taylor-lindores-reeves/mcp-github-projects.git\n   cd mcp-github-projects\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   bun install\n   ```\n\n3. Create a `.env` file with your GitHub token:\n\n   ```\n   GITHUB_TOKEN=your_github_personal_access_token\n   GITHUB_OWNER=your_github_username\n   GITHUB_OWNER_TYPE=org\n   ALLOWED_REPOS=owner/repo,another/repo\n   ```\n\n4. Build the server:\n\n   ```bash\n   bun run build\n   ```\n\n5. Configure your MCP client with the following settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"GitHubProjects\": {\n      \"command\": \"bun\",\n      \"args\": [\n        \"/path/to/your/directory/mcp-github-projects-main/build/index.js\"\n      ],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"your_github_personal_access_token\",\n        \"GITHUB_OWNER\": \"your_github_username_or_org\",\n        \"GITHUB_OWNER_TYPE\": \"org\",\n        \"ALLOWED_REPOS\": \"owner/repo,another/repo\"\n      }\n    }\n  }\n}\n```\n\n## Environment Variables\n\n- `GITHUB_TOKEN`: GitHub Personal Access Token with appropriate permissions\n- `GITHUB_OWNER`: GitHub username or organization name\n- `GITHUB_OWNER_TYPE`: (Optional) Set to `user` (default) or `org`. Controls whether project listing and management is done for a user or an organization. Set to `org` if your projects live in a GitHub organization.\n- `ALLOWED_REPOS`: (Optional) Comma-separated list of allowed repository slugs (e.g. `owner/repo,another/repo`). All write operations (creating/updating issues, adding items to projects, etc.) are restricted to these repositories. If not set or empty, all repositories are allowed by default.\n\n**Example:**\n\n```\nGITHUB_TOKEN=your_github_personal_access_token\nGITHUB_OWNER=the-troops\nGITHUB_OWNER_TYPE=org\nALLOWED_REPOS=the-troops/sms-troopers,manuelbiermann/convo-run\n```\n\nIf you try to perform a write operation on a repository not in this list, the server will throw an error and block the action.\n\n## GitHub Token Permissions\n\nThis MCP server requires a GitHub Personal Access Token (classic) with the following permissions:\n\n- `project` - Full control of projects\n- `read:project` - Read access of projects\n- `repo` - Full control of private repositories\n- `repo:status` - Access commit status\n- `repo_deployment` - Access deployment status\n- `public_repo` - Access public repositories\n- `repo:invite` - Access repository invitations\n- `security_events` - Read and write security events\n\n## Development\n\n### Commands\n\n- Build: `bun run build`\n- Generate GraphQL types: `bun run graphql-codegen`\n\n## Available Operations\n\n### Projects\n\n- Create, read, update, and delete GitHub Projects\n- Manage project fields, items, and status updates\n- Convert draft issues to actual issues\n- Archive and unarchive project items\n\n### Issues\n\n- Get issue details\n- Add issues to projects\n\n### Repositories\n\n- Get repository information\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "workflows",
        "git",
        "git workflow",
        "github graphql",
        "github projects"
      ],
      "category": "git-workflow-management"
    },
    "timbuchinger--mcp-github": {
      "owner": "timbuchinger",
      "name": "mcp-github",
      "url": "https://github.com/timbuchinger/mcp-github",
      "imageUrl": "/freedevtools/mcp/pfp/timbuchinger.webp",
      "description": "Interact with GitHub repositories and manage issues by listing and creating them efficiently. Provides secure authentication and includes error handling and validation features.",
      "stars": 0,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-02-19T00:51:03Z",
      "readme_content": "# GitHub MCP Server\n\nA Model Context Protocol (MCP) server implementation for interacting with GitHub issues through Cline.\n\n## Features\n\n- List GitHub issues from a repository\n- Create new GitHub issues\n- Error handling and validation\n- Secure authentication via environment variables\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/timbuchinger/mcp-github.git\ncd mcp-github\n```\n\n2. Install dependencies with uv:\n```bash\npip install uv\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\nuv pip install -r requirements.txt\n```\n\n3. Copy the environment template and configure your GitHub token:\n```bash\ncp .env.template .env\n```\n\nEdit `.env` and add your GitHub Personal Access Token:\n```bash\nGITHUB_TOKEN=your_token_here\n```\n\nTo create a GitHub Personal Access Token:\n1. Go to GitHub Settings -> Developer settings -> Personal access tokens\n2. Generate a new token with `repo` scope\n3. Copy the token and paste it in your `.env` file\n\n## Usage\n\nRun the MCP server:\n```bash\npython -m src.mcp_github.server\n```\n\nThe server will start and expose two tools to Cline:\n\n### get_issues\nGet a list of issues from a GitHub repository:\n```json\n{\n  \"repo\": \"owner/repo\"\n}\n```\n\n### create_issue\nCreate a new issue in a GitHub repository:\n```json\n{\n  \"repo\": \"owner/repo\",\n  \"title\": \"Issue title\",\n  \"body\": \"Issue description\"\n}\n```\n\n## Error Handling\n\nThe server handles common errors:\n- Missing GitHub token\n- Invalid repository name\n- Missing required parameters\n- GitHub API errors\n\nError responses include descriptive messages to help troubleshoot issues.\n\n## Development\n\nThe project uses uv for dependency management. To set up a development environment:\n\n```bash\n# Install all dependencies (including dev dependencies)\nuv pip install -r requirements.txt\n\n# Run tests\npytest\n\n# Format code\nblack .\n\n# Type checking\nmypy .\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "repositories",
        "git workflow",
        "mcp github",
        "github repositories"
      ],
      "category": "git-workflow-management"
    },
    "tuanle96--mcp-github": {
      "owner": "tuanle96",
      "name": "mcp-github",
      "url": "https://github.com/tuanle96/mcp-github",
      "imageUrl": "/freedevtools/mcp/pfp/tuanle96.webp",
      "description": "Interact with GitHub repositories to manage files, issues, and pull requests while preserving Git history. Perform batch operations and utilize advanced search features for efficient project management.",
      "stars": 1,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-03T07:03:53Z",
      "readme_content": "# GitHub MCP Server\n\nMCP Server for the GitHub API, enabling file operations, repository management, search functionality, and more.\n\n### Features\n\n- **Automatic Branch Creation**: When creating/updating files or pushing changes, branches are automatically created if they don't exist\n- **Comprehensive Error Handling**: Clear error messages for common issues\n- **Git History Preservation**: Operations maintain proper Git history without force pushing\n- **Batch Operations**: Support for both single-file and multi-file operations\n- **Advanced Search**: Support for searching code, issues/PRs, and users\n- **Project Management**: Complete toolset for GitHub Projects (classic) management, including creating projects, managing columns, and working with cards\n\n\n## Tools\n\n1. `create_or_update_file`\n   - Create or update a single file in a repository\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `path` (string): Path where to create/update the file\n     - `content` (string): Content of the file\n     - `message` (string): Commit message\n     - `branch` (string): Branch to create/update the file in\n     - `sha` (optional string): SHA of file being replaced (for updates)\n   - Returns: File content and commit details\n\n2. `push_files`\n   - Push multiple files in a single commit\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `branch` (string): Branch to push to\n     - `files` (array): Files to push, each with `path` and `content`\n     - `message` (string): Commit message\n   - Returns: Updated branch reference\n\n3. `search_repositories`\n   - Search for GitHub repositories\n   - Inputs:\n     - `query` (string): Search query\n     - `page` (optional number): Page number for pagination\n     - `perPage` (optional number): Results per page (max 100)\n   - Returns: Repository search results\n\n4. `create_repository`\n   - Create a new GitHub repository\n   - Inputs:\n     - `name` (string): Repository name\n     - `description` (optional string): Repository description\n     - `private` (optional boolean): Whether repo should be private\n     - `autoInit` (optional boolean): Initialize with README\n   - Returns: Created repository details\n\n5. `get_file_contents`\n   - Get contents of a file or directory\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `path` (string): Path to file/directory\n     - `branch` (optional string): Branch to get contents from\n   - Returns: File/directory contents\n\n6. `create_issue`\n   - Create a new issue\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `title` (string): Issue title\n     - `body` (optional string): Issue description\n     - `assignees` (optional string[]): Usernames to assign\n     - `labels` (optional string[]): Labels to add\n     - `milestone` (optional number): Milestone number\n   - Returns: Created issue details\n\n7. `create_pull_request`\n   - Create a new pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `title` (string): PR title\n     - `body` (optional string): PR description\n     - `head` (string): Branch containing changes\n     - `base` (string): Branch to merge into\n     - `draft` (optional boolean): Create as draft PR\n     - `maintainer_can_modify` (optional boolean): Allow maintainer edits\n   - Returns: Created pull request details\n\n8. `fork_repository`\n   - Fork a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `organization` (optional string): Organization to fork to\n   - Returns: Forked repository details\n\n9. `create_branch`\n   - Create a new branch\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `branch` (string): Name for new branch\n     - `from_branch` (optional string): Source branch (defaults to repo default)\n   - Returns: Created branch reference\n\n10. `list_issues`\n    - List and filter repository issues\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `state` (optional string): Filter by state ('open', 'closed', 'all')\n      - `labels` (optional string[]): Filter by labels\n      - `sort` (optional string): Sort by ('created', 'updated', 'comments')\n      - `direction` (optional string): Sort direction ('asc', 'desc')\n      - `since` (optional string): Filter by date (ISO 8601 timestamp)\n      - `page` (optional number): Page number\n      - `per_page` (optional number): Results per page\n    - Returns: Array of issue details\n\n11. `update_issue`\n    - Update an existing issue\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `issue_number` (number): Issue number to update\n      - `title` (optional string): New title\n      - `body` (optional string): New description\n      - `state` (optional string): New state ('open' or 'closed')\n      - `labels` (optional string[]): New labels\n      - `assignees` (optional string[]): New assignees\n      - `milestone` (optional number): New milestone number\n    - Returns: Updated issue details\n\n12. `add_issue_comment`\n    - Add a comment to an issue\n    - Inputs:\n      - `owner` (string): Repository owner\n      - `repo` (string): Repository name\n      - `issue_number` (number): Issue number to comment on\n      - `body` (string): Comment text\n    - Returns: Created comment details\n\n13. `search_code`\n    - Search for code across GitHub repositories\n    - Inputs:\n      - `q` (string): Search query using GitHub code search syntax\n      - `sort` (optional string): Sort field ('indexed' only)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: Code search results with repository context\n\n14. `search_issues`\n    - Search for issues and pull requests\n    - Inputs:\n      - `q` (string): Search query using GitHub issues search syntax\n      - `sort` (optional string): Sort field (comments, reactions, created, etc.)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: Issue and pull request search results\n\n15. `search_users`\n    - Search for GitHub users\n    - Inputs:\n      - `q` (string): Search query using GitHub users search syntax\n      - `sort` (optional string): Sort field (followers, repositories, joined)\n      - `order` (optional string): Sort order ('asc' or 'desc')\n      - `per_page` (optional number): Results per page (max 100)\n      - `page` (optional number): Page number\n    - Returns: User search results\n\n16. `list_commits`\n   - Gets commits of a branch in a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `page` (optional string): page number\n     - `per_page` (optional string): number of record per page\n     - `sha` (optional string): branch name\n   - Returns: List of commits\n\n17. `get_issue`\n   - Gets the contents of an issue within a repository\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `issue_number` (number): Issue number to retrieve\n   - Returns: Github Issue object & details\n\n18. `delete_issue`\n   - Deletes an issue from a GitHub repository using GraphQL API\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `issue_number` (number): Issue number to delete\n   - Returns: Deletion confirmation with repository information\n\n19. `get_pull_request`\n   - Get details of a specific pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Pull request details including diff and review status\n\n20. `list_pull_requests`\n   - List and filter repository pull requests\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `state` (optional string): Filter by state ('open', 'closed', 'all')\n     - `head` (optional string): Filter by head user/org and branch\n     - `base` (optional string): Filter by base branch\n     - `sort` (optional string): Sort by ('created', 'updated', 'popularity', 'long-running')\n     - `direction` (optional string): Sort direction ('asc', 'desc')\n     - `per_page` (optional number): Results per page (max 100)\n     - `page` (optional number): Page number\n   - Returns: Array of pull request details\n\n21. `create_pull_request_review`\n   - Create a review on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `body` (string): Review comment text\n     - `event` (string): Review action ('APPROVE', 'REQUEST_CHANGES', 'COMMENT')\n     - `commit_id` (optional string): SHA of commit to review\n     - `comments` (optional array): Line-specific comments, each with:\n       - `path` (string): File path\n       - `position` (number): Line position in diff\n       - `body` (string): Comment text\n   - Returns: Created review details\n\n22. `merge_pull_request`\n   - Merge a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `commit_title` (optional string): Title for merge commit\n     - `commit_message` (optional string): Extra detail for merge commit\n     - `merge_method` (optional string): Merge method ('merge', 'squash', 'rebase')\n   - Returns: Merge result details\n\n23. `get_pull_request_files`\n   - Get the list of files changed in a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of changed files with patch and status details\n\n24. `get_pull_request_status`\n   - Get the combined status of all status checks for a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Combined status check results and individual check details\n\n25. `update_pull_request_branch`\n   - Update a pull request branch with the latest changes from the base branch (equivalent to GitHub's \"Update branch\" button)\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n     - `expected_head_sha` (optional string): The expected SHA of the pull request's HEAD ref\n   - Returns: Success message when branch is updated\n\n26. `get_pull_request_comments`\n   - Get the review comments on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of pull request review comments with details like the comment text, author, and location in the diff\n\n27. `get_pull_request_reviews`\n   - Get the reviews on a pull request\n   - Inputs:\n     - `owner` (string): Repository owner\n     - `repo` (string): Repository name\n     - `pull_number` (number): Pull request number\n   - Returns: Array of pull request reviews with details like the review state (APPROVED, CHANGES_REQUESTED, etc.), reviewer, and review body\n\n28. `create_project`\n   - Create a new project in a GitHub repository\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `name` (string): Name of the project\n     - `body` (optional string): Description of the project\n   - Returns: Created project details\n\n29. `get_project`\n   - Get details about a specific project\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `project_number` (number): The project number\n   - Returns: Project details\n\n30. `update_project`\n   - Update an existing project's details\n   - Inputs:\n     - `project_id` (number): The unique identifier of the project\n     - `name` (optional string): New name of the project\n     - `body` (optional string): New description of the project\n     - `state` (optional string): State of the project ('open' or 'closed')\n   - Returns: Updated project details\n\n31. `list_projects`\n   - List all projects in a GitHub repository\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `state` (optional string): Filter projects by state ('open', 'closed', 'all')\n     - `page` (optional number): Page number for pagination (starts at 1)\n     - `per_page` (optional number): Number of results per page (max 100)\n   - Returns: Array of project details\n\n32. `create_project_column`\n   - Create a new column in a project\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `project_number` (number): The project number\n     - `name` (string): Name of the column\n   - Returns: Created column details\n\n33. `list_project_columns`\n   - List all columns in a project\n   - Inputs:\n     - `project_id` (number): The unique identifier of the project\n     - `page` (optional number): Page number for pagination (starts at 1)\n     - `per_page` (optional number): Number of results per page (max 100)\n   - Returns: Array of project column details\n\n34. `update_project_column`\n   - Update an existing project column\n   - Inputs:\n     - `column_id` (number): The unique identifier of the column\n     - `name` (string): New name of the column\n   - Returns: Updated column details\n\n35. `delete_project_column`\n   - Delete a project column\n   - Inputs:\n     - `column_id` (number): The unique identifier of the column\n   - Returns: Success message\n\n36. `add_card_to_column`\n   - Add a new card to a project column\n   - Inputs:\n     - `owner` (string): Repository owner (username or organization)\n     - `repo` (string): Repository name\n     - `column_id` (string): The ID of the column to add card to\n     - `content_type` (string): Type of content for the card ('Issue', 'PullRequest', 'Note')\n     - `content_id` (optional number): ID of the issue or pull request (required if content_type is Issue or PullRequest)\n     - `note` (optional string): The note content for the card (required if content_type is Note)\n   - Returns: Created card details\n\n37. `list_column_cards`\n   - List all cards in a project column\n   - Inputs:\n     - `column_id` (number): The unique identifier of the column\n     - `archived_state` (optional string): Filter by card archived state ('all', 'archived', 'not_archived')\n     - `page` (optional number): Page number for pagination (starts at 1)\n     - `per_page` (optional number): Number of results per page (max 100)\n   - Returns: Array of card details\n\n38. `move_card`\n   - Move a card to a different position or column\n   - Inputs:\n     - `card_id` (number): The unique identifier of the card\n     - `position` (string): The position of the card ('top', 'bottom', or 'after:<card_id>')\n     - `column_id` (optional number): The column ID to move the card to\n   - Returns: Success message\n\n39. `delete_card`\n   - Delete a card from a project\n   - Inputs:\n     - `card_id` (number): The unique identifier of the card\n   - Returns: Success message\n\n40. `list_organization_projects`\n   - List all projects in a GitHub organization (at organization level, not repository level)\n   - Inputs:\n     - `org` (string): Organization name\n     - `state` (optional string): Filter projects by state ('open', 'closed', 'all')\n     - `page` (optional number): Page number for pagination\n     - `per_page` (optional number): Number of results per page (max 100)\n   - Returns: Array of organization project details\n\n## Projects V2 Tools (GitHub's New Projects Experience)\n\n41. `list_organization_projects_v2`\n   - List projects V2 in a GitHub organization using GraphQL API\n   - Inputs:\n     - `org` (string): Organization name\n     - `first` (optional number): Number of projects to fetch (max 100)\n     - `after` (optional string): Cursor for pagination\n     - `orderBy` (optional object): How to order the projects\n   - Returns: Array of projects with pagination info\n\n42. `get_project_v2`\n   - Get details of a GitHub project V2 using GraphQL API\n   - Inputs:\n     - `id` (string): The node ID of the project\n   - Returns: Detailed project information including fields and views\n\n43. `create_project_v2`\n   - Create a new GitHub project V2 using GraphQL API\n   - Inputs:\n     - `ownerId` (string): The node ID of the organization or user\n     - `title` (string): Title of the project\n     - `description` (optional string): Description of the project\n   - Returns: Created project details\n\n44. `update_project_v2`\n   - Update a GitHub project V2 using GraphQL API\n   - Inputs:\n     - `projectId` (string): The node ID of the project\n     - `title` (optional string): New title for the project\n     - `description` (optional string): New description for the project\n     - `closed` (optional boolean): Whether to close the project\n   - Returns: Updated project details\n\n45. `add_item_to_project_v2`\n   - Add an issue or pull request to a GitHub project V2 using GraphQL API\n   - Inputs:\n     - `projectId` (string): The node ID of the project\n     - `contentId` (string): The node ID of the issue or pull request to add\n   - Returns: Added item details\n\n46. `list_project_v2_items`\n   - List items in a GitHub project V2 using GraphQL API\n   - Inputs:\n     - `projectId` (string): The node ID of the project\n     - `first` (optional number): Number of items to fetch (max 100)\n     - `after` (optional string): Cursor for pagination\n     - `filterBy` (optional object): Filters for the items\n   - Returns: Array of project items with their field values\n\n47. `update_project_v2_item_field`\n   - Update a field value for an item in a GitHub project V2 using GraphQL API\n   - Inputs:\n     - `projectId` (string): The node ID of the project\n     - `itemId` (string): The node ID of the item\n     - `fieldId` (string): The node ID of the field\n     - `value` (any): The new value for the field\n   - Returns: Updated item details\n\n## Project Management Notes\n\n**Deprecation Warning**: GitHub has announced that Projects (classic) is being deprecated in favor of the new Projects experience. Tools 27-39 work with the classic version of Projects, which may be removed in the future. For the new GitHub Projects experience, use tools 40-46 instead.\n\n## Search Query Syntax\n\n### Code Search\n- `language:javascript`: Search by programming language\n- `repo:owner/name`: Search in specific repository\n- `path:app/src`: Search in specific path\n- `extension:js`: Search by file extension\n- Example: `q: \"import express\" language:typescript path:src/`\n\n### Issues Search\n- `is:issue` or `is:pr`: Filter by type\n- `is:open` or `is:closed`: Filter by state\n- `label:bug`: Search by label\n- `author:username`: Search by author\n- Example: `q: \"memory leak\" is:issue is:open label:bug`\n\n### Users Search\n- `type:user` or `type:org`: Filter by account type\n- `followers:>1000`: Filter by followers\n- `location:London`: Search by location\n- Example: `q: \"fullstack developer\" location:London followers:>100`\n\nFor detailed search syntax, see [GitHub's searching documentation](https://docs.github.com/en/search-github/searching-on-github).\n\n## Setup\n\n### Personal Access Token\n[Create a GitHub Personal Access Token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens) with appropriate permissions:\n   - Go to [Personal access tokens](https://github.com/settings/tokens) (in GitHub Settings > Developer settings)\n   - Select which repositories you'd like this token to have access to (Public, All, or Select)\n   - Create a token with the `repo` scope (\"Full control of private repositories\")\n     - Alternatively, if working only with public repositories, select only the `public_repo` scope\n     - For using the Projects V2 tools, make sure to include the `project` scope as well\n   - Copy the generated token\n\n### Usage with Claude Desktop\nTo use this with Claude Desktop, add the following to your `claude_desktop_config.json`:\n\n#### Docker\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"ghcr.io/tuanle96/mcp-github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@earnbasejs/mcp-github\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n## Build\n\nDocker build:\n\n```bash\ndocker build -t mcp/github -f src/github/Dockerfile .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "repositories",
        "git workflow",
        "mcp github",
        "git history"
      ],
      "category": "git-workflow-management"
    },
    "twolven--mcp-codesavant": {
      "owner": "twolven",
      "name": "mcp-codesavant",
      "url": "https://github.com/twolven/mcp-codesavant",
      "imageUrl": "/freedevtools/mcp/pfp/twolven.webp",
      "description": "CodeSavant enables code manipulation and execution across various programming languages while maintaining version control and change history. It supports reading, writing, executing code, and searching within code files.",
      "stars": 9,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-20T19:12:51Z",
      "readme_content": "# MCP-CodeSavant\n\n**⚠️ PROJECT STATUS: OBSOLETE**\n\nThis project has been superseded by modern coding agents that natively provide the same capabilities (code manipulation, execution, version control) without requiring a separate MCP server.\n\n## Original Purpose\n\nCodeSavant was a Model Context Protocol (MCP) server designed to provide code manipulation, execution, and version control capabilities to AI assistants. It allowed reading, writing, and executing code while maintaining a history of changes.\n\n## Why This Project is No Longer Needed\n\nRecent advances in coding agents have made this MCP server redundant. Modern coding agents now include built-in capabilities for:\n- Direct file manipulation with diff editing\n- Multi-language code execution\n- Version control and change tracking\n- Shell command execution\n- All the features this server provided\n\n## Archive Notice\n\nThis repository is maintained for historical reference only. For current projects requiring code manipulation capabilities, consider using modern coding agents that provide these features natively.\n\n## Original Features\n\nFor historical reference, MCP-CodeSavant provided:\n- Read and write code files with line-specific operations\n- Execute code in multiple programming languages (Python, Node.js)\n- Execute shell commands in a controlled environment\n- Track and manage code changes with version control\n- Search within code files\n- Revert to previous versions of code\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Author\n\nTodd Wolven - (https://github.com/twolven)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "codesavant",
        "workflow",
        "git workflow",
        "mcp codesavant",
        "code files"
      ],
      "category": "git-workflow-management"
    },
    "ualUsham--mcp-github": {
      "owner": "ualUsham",
      "name": "mcp-github",
      "url": "https://github.com/ualUsham/mcp-github",
      "imageUrl": "/freedevtools/mcp/pfp/ualUsham.webp",
      "description": "Interact with GitHub repositories, manage issues, and automate workflows using GitHub's API. Enhance API responses and streamline interactions between LLMs and GitHub features.",
      "stars": 0,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-19T16:26:44Z",
      "readme_content": "# GitHub MCP (Model Context Protocol) server\n\nHello! This is a GitHub MCP server designed to enable MCP-compatible LLMs, such as Claude, to communicate with my MCP server and interact with the GitHub API.\n\n\n# Requirements\n- TypeScript (programming language)\n- Octokit (for making API requests to GitHub)\n- Model Context Protocol SDK\n\n## Setup the project locally\n\n1. Clone the repository\n2. Run `npm install`\n3. Add `.env` file looking at the sample provided in `.env.example` file\n4. To build the TypeScript files to Javascript, run `npx tsc`\n5. To finally run the project, run `node build/index.js`\n\n## Ways to test\n\nYou can test your MCP server in 2 ways:\n- MCP inspector\n- Claude Desktop\n\n## Test using MCP inspector\n\n1. Simply run `npx @modelcontextprotocol/inspector node build/index.js` in the terminal\n2. Go to http://localhost:5173\n3. You can now see the **MCP inspector** and test.\n\n## Test using Claude Desktop\n\n1. Download and install Claude Desktop from [here](https://claude.ai/download)\n2. Go to File > Settings... > Developer > Edit Config\n3. It should open up the location of claude_desktop_config.json file.\n4. Open that file in your code editor and add the following:\n\t ```json\n\t{\n\t  \"mcpServers\": {\n\t    \"gh\": {\n\t      \"command\": \"node\",\n\t      \"args\": [\"absolute\\\\path\\\\to\\\\your\\\\index.js\\\\file\"],\n\t      \"env\": {\n\t        \"GITHUB_TOKEN\": \"your-github-personal-access-token\"\n\t      }\n\t    }\n\t  }\n\t}\n\t```\n5. Exit and reopen Claude desktop\n\n## Functionalities\n\nThe **MCP** supports mainly *two* features:\n - Tools (4)\n\t - `create-issue`: create a new issue in a GitHub repository\n\t - `get-repo-info`: get information about a specific GitHub repository\n\t - `list-issues`: list issues in a GitHub repository\n\t - `search-repos`: Search for GitHub repositories\n - Prompts (5)\n\t - `create-issue-description`: generate a description for a GitHub issue\n\t - `create-pull-request-description`: generate a description for a GitHub pull request\n\t - `search-repos-prompt`: generate a query for searching GitHub repositories\n\t - `create-issue-prompt`: generate parameters for creating a GitHub issue\n\t - `enhance-github-response`: format and enhance raw GitHub API response data\n\n> You can write your own prompts or select a suitable prompt from the dropdown in the \"Choose an integration\"  option for MCP in Claude desktop",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflows",
        "git workflow",
        "llms github",
        "github features"
      ],
      "category": "git-workflow-management"
    },
    "vinhphamai23--mcp-git-ingest": {
      "owner": "vinhphamai23",
      "name": "mcp-git-ingest",
      "url": "https://github.com/vinhphamai23/mcp-git-ingest",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Provide tools to programmatically explore and read GitHub repository structures and important files. Generate directory trees and fetch file contents to help users understand repository layouts and codebases efficiently. Enable seamless integration with MCP clients for repository analysis workflows.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "github",
        "workflows",
        "git workflow",
        "mcp git",
        "github repository"
      ],
      "category": "git-workflow-management"
    },
    "vipink1203--mcp-github-enterprise": {
      "owner": "vipink1203",
      "name": "mcp-github-enterprise",
      "url": "https://github.com/vipink1203/mcp-github-enterprise",
      "imageUrl": "/freedevtools/mcp/pfp/vipink1203.webp",
      "description": "Securely access GitHub Enterprise license data and user details for automated monitoring and analysis. Query license summaries, user roles, and organization memberships via designated endpoints.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-29T19:44:15Z",
      "readme_content": "# MCP GITHUB ENTERPRISE 🌉\n[![Python >=3.9](https://img.shields.io/badge/python-3.9%2B-blue)](https://www.python.org/downloads/)  \n[![MCP Protocol](https://img.shields.io/badge/MCP-Protocol-purple)](https://github.com/modelcontextprotocol/python-sdk)  \n[![GitHub API](https://img.shields.io/badge/GitHub-API-black)](https://docs.github.com/en/rest)\n\nA Model Context Protocol (MCP) server that lets AI agents (Claude, ChatGPT, etc.) query your GitHub Enterprise license data. Securely fetch license summaries, per-user details, org memberships, and enterprise roles via the `/consumed-licenses` endpoint.\n\n---\n\n## 📊 Capabilities & Example Prompts\n\n- **License Summary**  \n  • `\"Show me our GitHub Enterprise license summary\"`  \n  • `\"How many licenses are we currently using?\"`\n\n- **Detailed License Usage**  \n  • `\"List all consumed GitHub licenses\"`  \n  • `\"Do we have any unused GitHub licenses?\"`\n\n- **User Lookup**  \n  • `\"What GitHub orgs does johndoe belong to?\"`  \n  • `\"What enterprise roles does johndoe have?\"`  \n  • `\"Is johndoe an owner in our enterprise?\"`  \n  • `\"Get detailed info about johndoe\"`  \n  • `\"Does johndoe have 2FA enabled?\"`  \n\n---\n\n## 🌟 Features\n\n- **License Analytics**: Total vs. consumed seats  \n- **User Lookup**: Org memberships, roles, 2FA, SAML ID  \n- **Pagination**: Handles large enterprises automatically  \n- **Dual Transports**: stdio for direct MCP, SSE for HTTP  \n- **Kubernetes-Ready**: Deploy on EKS/GKE or any K8s cluster  \n\n---\n\n## 📋 Prerequisites\n\n- Python 3.9+  \n- GitHub PAT with `read:enterprise` / license scopes  \n- GitHub Enterprise Cloud tenant  \n\n---\n\n## 🚀 Quick Start\n\n### 1. Clone & Install\n```bash\ngit clone https://github.com/vipink1203/mcp-github-enterprise.git\ncd mcp-github-enterprise\npython -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\n```\n\n### 2. Configure\n```bash\ncp .env.example .env\n# Edit .env: set GITHUB_TOKEN and GITHUB_ENTERPRISE_URL\n```\n\n### 3. Run\n\n#### stdio transport\n```bash\nexport TRANSPORT=stdio\npython main.py\n```\n\n#### SSE transport\n```bash\nexport TRANSPORT=sse PORT=8050\npython main.py\n```\n\n## 🐳 Docker & n8n\n\nAdd this service to your docker-compose.yml alongside n8n:\n\n```yaml\nservices:\n  github-mcp:\n    image: ghcr.io/vipink1203/mcp-github-enterprise:latest\n    environment:\n      - GITHUB_TOKEN=${GITHUB_TOKEN}\n      - GITHUB_ENTERPRISE_URL=${GITHUB_ENTERPRISE_URL}\n      - TRANSPORT=sse\n      - PORT=8050\n    ports:\n      - \"8050:8050\"\n    restart: unless-stopped\n    networks:\n      - n8n-network\n```\n\nIn n8n's UI, enable the MCP client:\n- Settings → Credentials → New Credential\n- Choose MCP Client API, set URL to http://github-mcp:8050/sse\n\n## 🔌 Client Configuration\n \n ### Claude Desktop / Windsurf / Cursor\n \n Add this configuration to your Claude Desktop settings:\n \n ```json\n{\n   \"mcpServers\": {\n    \"github-ent\": {\n      \"command\": \"/path/to/your/venv/python\",\n      \"args\": [\"/path/to/main.py\"],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"\",\n        \"GITHUB_ENTERPRISE_URL\": \"https://api.github.com/enterprises/{enterprise_name}\",\n        \"TRANSPORT\": \"stdio\"\n      }\n    }\n}\n ```\n \n ### SSE Configuration\n \n ```json\n {\n   \"mcpServers\": {\n     \"github\": {\n       \"transport\": \"sse\",\n       \"url\": \"http://localhost:8050/sse\"\n     }\n   }\n }\n ```\n\n \n ## 📊 Example Use Cases\n \n - **Enterprise User Management**: Automate user onboarding and offboarding\n - **License Monitoring**: Get alerts when licenses are close to expiration\n - **Organization Analysis**: Analyze organization structures and relationships\n - **User Access Auditing**: Track user permissions and access levels\n - **AI-powered GitHub Insights**: Let AI analyze your enterprise GitHub data\n\n\n## 🔌 MCP Tools & Resources\n\n### Tools\n\n| Name | Description |\n|------|-------------|\n| `list_consumed_licenses` | Summarize licenses, optionally include users |\n| `get_user_organizations` | List a user's GitHub org memberships |\n| `get_user_enterprise_roles` | List a user's enterprise roles |\n| `get_user_detail` | Full license detail for a user |\n\n### Resources\n\n| URI | Description |\n|-----|-------------|\n| `github://consumed-licenses/{dummy}` | Full license usage + user details |\n| `github://user/{username}/roles` | Org & enterprise roles for a user |\n\n\n ## 🔒 Security Considerations\n \n - Store your GitHub token securely\n - Use appropriate scopes for your GitHub token\n - For production, consider using AWS Secrets Manager or similar\n - Implement network policies in Kubernetes deployments\n \n ## 🤝 Contributing\n \n Contributions are welcome! Please feel free to submit a Pull Request.\n \n 1. Fork the repository\n 2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n 3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n 4. Push to the branch (`git push origin feature/amazing-feature`)\n 5. Open a Pull Request\n \n ## 📜 License\n \n This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n \n ## 🙏 Acknowledgements\n \n - [Model Context Protocol](https://github.com/modelcontextprotocol/python-sdk) for the Python SDK\n - [MCP-Mem0](https://github.com/coleam00/mcp-mem0) for providing a great template structure\n - [GitHub API](https://docs.github.com/en/rest) for the comprehensive API\n \n ---\n\nBuilt with ❤️ for seamless AI ↔️ GitHub Enterprise integration.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflow",
        "github enterprise",
        "git workflow",
        "mcp github"
      ],
      "category": "git-workflow-management"
    },
    "wonnyboi--mcp-server": {
      "owner": "wonnyboi",
      "name": "mcp-server",
      "url": "https://github.com/wonnyboi/mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/wonnyboi.webp",
      "description": "Automates the collection of project information from GitHub for students, assisting in resume writing, interview question generation, and portfolio management. Provides tools for project-based self-introduction and interview practice to streamline career preparation.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-05-09T07:36:39Z",
      "readme_content": "# MCP (My Career Portfolio) Server\n\nSSAFY 학생들을 위한 프로젝트 포트폴리오 및 면접 준비 도우미 서버입니다.\n\n## 주요 기능\n\n1. 프로젝트 정보 수집\n\n   - GitHub 저장소 연동\n   - 프로젝트 정보 자동 수집\n   - 역할별 상세 정보 수집\n\n2. 자기소개서 작성 지원\n\n   - 프로젝트 기반 자기소개서 작성\n   - 자기소개서 수정 및 관리\n\n3. 면접 준비\n\n   - 프로젝트 기반 면접 질문 생성\n   - 면접 답변 연습\n   - 면접 피드백\n\n4. 포트폴리오 작성\n   - 프로젝트 기반 포트폴리오 작성\n   - 포트폴리오 수정 및 관리\n\n## 설치 방법\n\n1. 저장소 클론\n\n```bash\ngit clone https://github.com/wonnyboi/mcp-server.git\ncd mcp-server\n```\n\n2. 가상환경 생성 및 활성화\n\n```bash\npython -m venv venv\nsource venv/bin/activate  # Linux/Mac\nvenv\\Scripts\\activate     # Windows\n```\n\n3. 의존성 설치\n\n```bash\npip install -r requirements.txt\n```\n\n4. GitHub 토큰 설정\n\n   - GitHub.com → Settings → Developer settings → Personal access tokens → Tokens (classic)\n   - 'Generate new token' 클릭\n   - Note: 'MCP Portfolio Access' 입력\n   - Expiration: 'No expiration' 선택\n   - Select scopes: 'repo' 체크\n   - 'Generate token' 클릭\n   - 생성된 토큰을 복사\n   - 프로젝트 루트 디렉토리에 '.env' 파일 생성\n   - 다음 내용을 입력:\n     ```\n     GITHUB_TOKEN=your_github_token_here\n     ```\n\n5. 서버 실행\n\n```bash\npython project_portfolio_server.py\n```\n\n## 사용 방법\n\n1. 프로젝트 추가\n\n   - GitHub 저장소 URL 입력\n   - 프로젝트 유형 선택\n   - 역할 선택\n   - 상세 정보 입력\n\n2. 자기소개서 작성\n\n   - 프로젝트 기반 자기소개서 작성\n   - 수정 및 관리\n\n3. 면접 준비\n\n   - 프로젝트 기반 면접 질문 생성\n   - 답변 연습\n   - 피드백 수집\n\n4. 포트폴리오 작성\n   - 프로젝트 기반 포트폴리오 작성\n   - 수정 및 관리\n\n## 프로젝트 구조\n\n```\nmcp-server/\n├── project_data/           # 프로젝트 데이터 저장\n├── project_portfolio_server.py  # 메인 서버 파일\n├── requirements.txt        # 의존성 목록\n├── .env                   # 환경 변수 (GitHub 토큰)\n└── README.md             # 프로젝트 설명\n```\n\n## 기여 방법\n\n1. Fork the Project\n2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the Branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n## 라이선스\n\n이 프로젝트는 MIT 라이선스 하에 배포됩니다. 자세한 내용은 [LICENSE](LICENSE) 파일을 참조하세요.\n\n## 연락처\n\n프로젝트 관리자 - [@wonnyboi](https://github.com/wonnyboi)\n\n프로젝트 링크: [https://github.com/wonnyboi/mcp-server](https://github.com/wonnyboi/mcp-server)\n",
      "npm_url": "https://www.npmjs.com/package/mcp-server",
      "npm_downloads": 29732,
      "keywords": [
        "git",
        "github",
        "workflow",
        "git workflow",
        "github students",
        "information github"
      ],
      "category": "git-workflow-management"
    },
    "x51xxx--github-explorer-mcp": {
      "owner": "x51xxx",
      "name": "github-explorer-mcp",
      "url": "https://github.com/x51xxx/github-explorer-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/x51xxx.webp",
      "description": "Access GitHub repository information, including file content and directory structure, while enhancing projects with metadata such as stars and forks. Clone repositories locally for efficient data processing and utilize a caching system to optimize performance.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-03T19:28:24Z",
      "readme_content": "# GitHub Explorer MCP\n\nThe MCP server that provides GitHub repository information including file content, directory structure, and other metadata for MCP clients like Claude Desktop, Cursor, and others.\n\n## Features\n\n- **Repository Summaries**: Get comprehensive information about GitHub repositories\n- **Directory Structure**: View the complete file structure of any repository with a nice ASCII tree visualization\n- **File Content**: Access the content of specific files\n- **Metadata Enhancement**: Get stars, forks, description, and last updated information\n- **Local Repository Cloning**: Clone repositories locally for faster processing and more complete data\n- **Caching System**: Efficiently cache repository data to reduce API calls\n- **Progress Notifications**: Updates on long-running operations\n- **Format Options**: Get data in text or structured JSON format\n- **Auto-Completion**: Suggestions for repository owners and names\n- **Web Interface**: Basic status page and info when running in HTTP mode\n\n## Installation\n\n### Using NPM\n\n```bash\n# Install from npm\nnpm install @trishchuk/github-explorer-mcp -g\n\n# Run the server (stdio mode for MCP clients)\ngithub-explorer-mcp\n\n# Or run in HTTP/SSE mode\ngithub-explorer-mcp-sse\n```\n\n### Using Docker\n\n```bash\n# Build Docker image\ndocker build -t github-explorer-mcp .\n\n# Run container\ndocker run -p 3000:3000 github-explorer-mcp\n```\n\n## Usage with MCP Clients\n\n### Claude Desktop\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"github-explorer\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@trishchuk/github-explorer-mcp\"]\n    }\n  }\n}\n```\n\n### Cursor\n\nAdd to your Cursor configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"github-explorer\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@trishchuk/github-explorer-mcp\"]\n    }\n  }\n}\n```\n\n## API Reference\n\nThe MCP server provides the following tools:\n\n### github_repository_summary\n\nGet a summary of a GitHub repository.\n\n```typescript\n{\n  owner: string;    // GitHub organization or username\n  repo: string;     // Repository name\n  branch?: string;  // Optional branch name\n  includeMetadata?: boolean; // Include stars, forks, etc.\n}\n```\n\n### github_directory_structure\n\nGet the tree structure of a GitHub repository.\n\n```typescript\n{\n  owner: string;    // GitHub organization or username\n  repo: string;     // Repository name\n  branch?: string;  // Optional branch name\n}\n```\n\n### github_read_important_files\n\nGet the content of specific files from a GitHub repository.\n\n```typescript\n{\n  owner: string;     // GitHub organization or username\n  repo: string;      // Repository name\n  filePaths: string[]; // List of paths to files\n  branch?: string;   // Optional branch name\n  format?: 'text' | 'json'; // Output format\n}\n```\n\n### git_search (Coming Soon)\n\nSearch for content within a GitHub repository.\n\n```typescript\n{\n  owner: string;     // GitHub organization or username\n  repo: string;      // Repository name\n  query: string;     // Search query\n  branch?: string;   // Optional branch name\n  maxResults?: number; // Maximum results to return\n}\n```\n\n### git_diff (Coming Soon)\n\nGet a diff between two branches or commits.\n\n```typescript\n{\n  owner: string;     // GitHub organization or username\n  repo: string;      // Repository name\n  base: string;      // Base branch/commit\n  head: string;      // Head branch/commit\n}\n```\n\n## Development\n\n```bash\n# Clone the repository\ngit clone https://github.com/x51xxx/github-explorer-mcp.git\ncd github-explorer-mcp\n\n# Install dependencies\nnpm install\n\n# IMPORTANT: This project requires Node.js 18 or later\n# If using nvm, run:\nnvm use\n\n# Build the project\nnpm run build\n\n# Run the built server\nnpm start\n# or\nnpm run start:sse\n```\n\n## Troubleshooting\n\n### Node.js Version Issues\n\nThis project requires Node.js 18 or newer because it uses modern Web APIs like `ReadableStream`. If you encounter errors like:\n\n```\nReferenceError: ReadableStream is not defined\n```\n\nYou should:\n\n1. Update Node.js to version 18 or later\n2. If using nvm, run `nvm use` in the project directory\n3. Make sure to use the modified scripts that include necessary polyfills\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "repositories",
        "git workflow",
        "github explorer",
        "github repository"
      ],
      "category": "git-workflow-management"
    },
    "xiaoshishu911--skills-introduction-to-github": {
      "owner": "xiaoshishu911",
      "name": "skills-introduction-to-github",
      "url": "https://github.com/xiaoshishu911/skills-introduction-to-github",
      "imageUrl": "/freedevtools/mcp/pfp/xiaoshishu911.webp",
      "description": "Facilitates learning GitHub basics, including branch creation and repository management. Supports collaboration on projects through guided steps and documentation.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-03-20T13:07:18Z",
      "readme_content": "<header>\n\n<!--\n  <<< Author notes: Course header >>>\n  Include a 1280×640 image, course title in sentence case, and a concise description in emphasis.\n  In your repository settings: enable template repository, add your 1280×640 social image, auto delete head branches.\n  Add your open source license, GitHub uses MIT license.\n-->\n\n# Introduction to GitHub\n\n_Get started using GitHub in less than an hour._\n\n</header>\n\n<!--\n  <<< Author notes: Step 1 >>>\n  Choose 3-5 steps for your course.\n  The first step is always the hardest, so pick something easy!\n  Link to docs.github.com for further explanations.\n  Encourage users to open new tabs for steps!\n-->\n\n## Step 1: Create a branch\n\n_Welcome to \"Introduction to GitHub\"! :wave:_\n\n**What is GitHub?**: GitHub is a collaboration platform that uses _[Git](https://docs.github.com/get-started/quickstart/github-glossary#git)_ for versioning. GitHub is a popular place to share and contribute to [open-source](https://docs.github.com/get-started/quickstart/github-glossary#open-source) software.\n<br>:tv: [Video: What is GitHub?](https://www.youtube.com/watch?v=pBy1zgt0XPc)\n\n**What is a repository?**: A _[repository](https://docs.github.com/get-started/quickstart/github-glossary#repository)_ is a project containing files and folders. A repository tracks versions of files and folders. For more information, see \"[About repositories](https://docs.github.com/en/repositories/creating-and-managing-repositories/about-repositories)\" from GitHub Docs.\n\n**What is a branch?**: A _[branch](https://docs.github.com/en/get-started/quickstart/github-glossary#branch)_ is a parallel version of your repository. By default, your repository has one branch named `main` and it is considered to be the definitive branch. Creating additional branches allows you to copy the `main` branch of your repository and safely make any changes without disrupting the main project. Many people use branches to work on specific features without affecting any other parts of the project.\n\nBranches allow you to separate your work from the `main` branch. In other words, everyone's work is safe while you contribute. For more information, see \"[About branches](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches)\".\n\n**What is a profile README?**: A _[profile README](https://docs.github.com/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme)_ is essentially an \"About me\" section on your GitHub profile where you can share information about yourself with the community on GitHub.com. GitHub shows your profile README at the top of your profile page. For more information, see \"[Managing your profile README](https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme)\".\n\n![profile-readme-example](/images/profile-readme-example.png)\n\n### :keyboard: Activity: Your first branch\n\n1. Open a new browser tab and navigate to your newly made repository. Then, work on the steps in your second tab while you read the instructions in this tab.\n2. Navigate to the **< > Code** tab in the header menu of your repository.\n\n   ![code-tab](/images/code-tab.png)\n\n3. Click on the **main** branch drop-down.\n\n   ![main-branch-dropdown](/images/main-branch-dropdown.png)\n\n4. In the field, name your branch `my-first-branch`. In this case, the name must be `my-first-branch` to trigger the course workflow.\n5. Click **Create branch: my-first-branch** to create your branch.\n\n   ![create-branch-button](/images/create-branch-button.png)\n\n   The branch will automatically switch to the one you have just created.\n   The **main** branch drop-down bar will reflect your new branch and display the new branch name.\n\n6. Wait about 20 seconds then refresh this page (the one you're following instructions from). [GitHub Actions](https://docs.github.com/en/actions) will automatically update to the next step.\n\n<footer>\n\n<!--\n  <<< Author notes: Footer >>>\n  Add a link to get support, GitHub status page, code of conduct, license link.\n-->\n\n---\n\nGet help: [Post in our discussion board](https://github.com/orgs/skills/discussions/categories/introduction-to-github) &bull; [Review the GitHub status page](https://www.githubstatus.com/)\n\n&copy; 2024 GitHub &bull; [Code of Conduct](https://www.contributor-covenant.org/version/2/1/code_of_conduct/code_of_conduct.md) &bull; [MIT License](https://gh.io/mit)\n\n</footer>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "workflow",
        "learning github",
        "github facilitates",
        "github basics"
      ],
      "category": "git-workflow-management"
    },
    "yeakub108--mcp-server": {
      "owner": "yeakub108",
      "name": "mcp-server",
      "url": "https://github.com/yeakub108/mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/yeakub108.webp",
      "description": "Provides intelligent coding assistance by generating code plans, conducting code reviews, and analyzing UI designs. Offers functionalities such as single and multi-file reading for efficient data processing.",
      "stars": 11,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-20T09:57:54Z",
      "readme_content": "# 🤖 AI Development Assistant MCP Server\n\nWelcome to your AI-powered development toolkit, designed as a Model Context Protocol (MCP) server for Cursor! This project provides intelligent coding assistance through custom AI tools. Note that this is mostly a tutorial demo, and not a production-ready tool.\n\n## ✨ Features\n\n### 🎨 Code Architect\n\nCall advanced reasoning LLMs to generate plans and instructions for coding agents.\n\n### 📸 Screenshot Buddy\n\nTake UI design screenshots and use them with the composer agent.\n\n### 🔍 Code Review\n\nUse git diffs to trigger code reviews.\n\n### 📄 Read file & Read multiple files\n\nSingle-file reading enables efficient data analysis; multi-file reading facilitates bulk data processing.\n\n</br>\n\n## 🚀 Getting Started\n\n### 1. Environment Setup\n\nFirst, you'll need to set up your environment variables. Create a file at `src/env/keys.ts`:\n\n```typescript\nexport const OPENAI_API_KEY = \"your_key_here\";\n// Add any other keys you need\n```\n\n> ⚠️ **Security Note**: Storing API keys directly in source code is not recommended for production environments. This is only for local development and learning purposes. You can set the env var inline in the Cursor MCP interface as well.\n\n### 2. Installation\n\n```bash\nnpm install\n# or\nyarn install\n```\n\n### 3. Build the Server\n\n```bash\nnpm run build\n```\n\n### 4. Open Windsurf Chat and Configure MCP\n\nThis project is designed to be used as an MCP server in Cursor. Here's how to set it up:\n\n1. Open Windsurf on your system.\n2. Navigate to the Chat section.\n3. Click `+ Configure MCP` (this allows you to add a new MCP server).\n4. Add the following JSON configuration:\n```npm\n{\n  \"mcpServers\": {\n    \"mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"D:\\\\mpc-server\\\\build\\\\index.js\"\n      ]\n    }\n  }\n}\n```\n\n> 📘 **Pro Tip**: You might need to use the full path to your project's built index.js file.\n\nAfter adding the server, you should see your tools listed under \"Available Tools\". If not, try clicking the refresh button in the top right corner of the MCP server section.\n\nFor more details about MCP setup, check out the [Windsurf MCP Documentation](https://docs.codeium.com/windsurf/mcp).\n\n</br>\n\n## 🛠️ Using the Tools\n\nOnce configured, you can use these tools directly in Cursor's Composer. The AI will automatically suggest using relevant tools, or you can explicitly request them by name or description.\n\nFor example, try typing in Composer:\n\n- \"Review this code for best practices\"\n- \"Help me architect a new feature\"\n- \"Analyze this UI screenshot\"\n- \"Read single file & Read multiple files\"\n\nThe agent will ask for your approval before making any tool calls.\n\n> 📘 **Pro Tip**: You can update your .cursorrules file with instructions on how to use the tools for certain scenarios, and the agent will use the tools automatically.\n\n</br>\n\n## 📁 Project Structure\n\n```\nsrc/\n├── tools/\n│   ├── architect.ts    # Code structure generator\n│   ├── screenshot.ts   # Screenshot analysis tool\n│   ├── fileReader.ts  # read file & read multiple files tool\n│   └── codeReview.ts   # Code review tool\n├── env/\n│   └── keys.ts         # Environment configuration (add your API keys here!)\n└── index.ts           # Main entry point\n```\n\n---\n",
      "npm_url": "https://www.npmjs.com/package/mcp-server",
      "npm_downloads": 29732,
      "keywords": [
        "git",
        "workflow",
        "mcp",
        "git workflow",
        "workflow management",
        "mcp server"
      ],
      "category": "git-workflow-management"
    },
    "yjiace--alibabacloud-devops-mcp-server": {
      "owner": "yjiace",
      "name": "alibabacloud-devops-mcp-server",
      "url": "https://github.com/yjiace/alibabacloud-devops-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/yjiace.webp",
      "description": "Facilitates interaction with the Yunxiao platform for tasks such as code repository management, file operations, code reviews, and project management. Automates workflow processes to enhance team productivity and reduce repetitive tasks in software development environments.",
      "stars": 0,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-09-28T06:27:55Z",
      "readme_content": "<p align=\"center\">English | <a href=\"README.zh-cn.md\">中文</a><br></p>\n\n# alibabacloud-devops-mcp-server\n[![smithery badge](https://smithery.ai/badge/@aliyun/alibabacloud-devops-mcp-server)](https://smithery.ai/server/@aliyun/alibabacloud-devops-mcp-server)\n\n[AlibabaCloud Devops](https://www.aliyun.com/product/yunxiao) MCP Server provides AI assistants with the ability to interact with the Yunxiao platform, enabling them to read work item contents in projects, automatically write code after understanding requirements, and submit code merge requests. Enterprise development teams can use it to assist with code reviews, optimize task management, reduce repetitive operations, and thus focus on more important innovation and product delivery.\n\n## Features\n\nalibabacloud-devops-mcp-server provides the following capabilities for AI assistants:\n\n* **Code Repository Management**: Query code repositories and their branches, create branches\n* **File Operations**: Create, update, delete, and retrieve code file content\n* **Code Review**: Create and manage code review processes\n* **Project Management**: Search projects, get project details\n* **Pipeline Management**: Get pipeline details, get pipeline list, create a pipeline run instance, get the latest pipeline run instance, get pipeline run details, get pipeline run list, Query / Run a pipeline deployment task\n* **Package Management**: Get package repository details list, Get artifacts details list, Get single artifact details\n* **Application Delivery**: Create and manage deployment orders, applications, orchestrations, variable groups, templates, tags, global variables, and deployment resources\n\n## Tools\n\nalibabacloud-devops-mcp-server integrates various tools, including:\n\n### Organization Management\n\n- `get_current_organization_Info`: Get current user's organization information\n- `get_user_organizations`: Get the list of organizations the current user has joined\n- `get_organization_role`: Get information about an organization role\n- `get_organization_departments`: Get the list of departments in an organization\n- `get_organization_department_info`: Get information about a department in an organization\n- `get_organization_department_ancestors`: Get the ancestors of a department in an organization\n- `get_organization_members`: Get the list of members in an organization\n- `get_organization_member_info`: Get information about a member in an organization\n- `get_organization_member_info_by_user_id`: Get information about a member in an organization by user ID\n- `search_organization_members`: Search for organization members\n- `list_organization_roles`: List organization roles\n- `get_organization_role`: Get information about an organization role\n\n### Code Management Tools\n\n- `create_branch`: Create a branch\n- `delete_branch`: Delete a branch\n- `get_branch`: Get branch information\n- `list_branches`: Get branch list\n- `create_file`: Create a file\n- `delete_file`: Delete a file\n- `get_file_blobs`: Get file content\n- `list_files`: Query file tree\n- `update_file`: Update file content\n- `create_change_request`: Create a merge request\n- `create_change_request_comment`: Create a comment on a merge request\n- `get_change_request`: Query merge request\n- `list_change_request_patch_sets`: Query merge request version list\n- `list_change_request`: Query merge request list\n- `list_change_request_comments`: Query merge request comment list\n- `get_compare`: Compare code\n- `get_repository`: Get repository details\n- `list_repositories`: Get repository list\n\n### Project Management Tools\n\n- `get_project`: Get project details\n- `search_projects`: Search projects\n- `get_sprint`: Get sprint details\n- `list_sprints`: List sprints in a project\n- `get_work_item`: Get work item details\n- `search_workitems`: Search work items\n- `get_work_item_types`: get work item types\n- `create_work_item`: create work item\n- `list_all_work_item_types`: List all work item types in an organization\n- `list_work_item_types`: List work item types in a project space\n- `get_work_item_type`: Get details of a specific work item type\n- `list_work_item_relation_work_item_types`: List work item types that can be related to a specific work item\n- `get_work_item_type_field_config`: Get field configuration for a specific work item type\n- `get_work_item_workflow`: Get workflow information for a specific work item type\n- `list_work_item_comments`: List comments for a specific work item\n- `create_work_item_comment`: Create a comment for a specific work item\n- `list_current_user_effort_records`: [Project Management] 获取用户的实际工时明细，结束时间和开始时间的间隔不能大于6个月\n- `list_effort_records`: [Project Management] 获取实际工时明细\n- `create_effort_record`: [Project Management] 登记实际工时\n- `list_estimated_efforts`: [Project Management] 获取预计工时明细\n- `create_estimated_effort`: [Project Management] 登记预计工时\n- `update_effort_record`: [Project Management] 更新登记实际工时\n- `update_estimated_effort`: [Project Management] 更新登记预计工时\n\n### Pipeline Management Tools\n\n- `get_pipeline`: Get pipeline details\n- `list_pipelines`: Get pipeline list\n- `smart_list_pipelines`: Smart pipeline search with natural language time references\n- `create_pipeline_run`: Create a pipeline run instance\n- `get_latest_pipeline_run`: Get the latest pipeline run instance\n- `get_pipeline_run`: Get pipeline run details\n- `list_pipeline_runs`: Get pipeline run list\n- `list_pipeline_jobs_by_category`: Get pipeline execution tasks by category\n- `list_pipeline_job_historys`: Get the execution history of a pipeline task\n- `execute_pipeline_job_run`: Manually run a pipeline task\n- `get_pipeline_job_run_log`: Get the execution logs of a pipeline job\n- `list_service_connections`: List service connections in organization\n- `create_pipeline_from_description`: Automatically generates YAML configuration and creates pipeline\n- `update_pipeline`: Update an existing pipeline in Yunxiao by pipelineId. Use this to update pipeline YAML, stages, jobs, etc.\n\n#### Resource Member Management Tools\n\n- `create_resource_member`: Create a resource member\n- `delete_resource_member`: Delete a resource member\n- `list_resource_members`: Get a list of resource members\n- `update_resource_member`: Update a resource member\n- `update_resource_owner`: Transfer resource owner\n\n#### Tag Management Tools\n\n- `create_tag`: Create a tag\n- `create_tag_group`: Create a tag group\n- `list_tag_groups`: Get a list of tag groups\n- `delete_tag_group`: Delete a tag group\n- `update_tag_group`: Update a tag group\n- `get_tag_group`: Get a tag group\n- `delete_tag`: Delete a tag\n- `update_tag`: Update a tag\n\n#### VM Deploy Order Management Tools\n\n- `stop_vm_deploy_order`: Stop VM deploy order\n- `skip_vm_deploy_machine`: Skip VM deploy machine\n- `retry_vm_deploy_machine`: Retry VM deploy machine\n- `resume_vm_deploy_order`: Resume VM deploy order\n- `get_vm_deploy_order`: Get VM deploy order details\n- `get_vm_deploy_machine_log`: Get VM deploy machine log\n\n### Packages Management Tools\n\n- `list_package_repositories`: Get package repositories details list\n- `list_artifacts`: Get artifacts details list\n- `get_artifact`: Get single artifact details\n\n### Application Delivery Tools\n\n- `create_change_order`: [application delivery] 创建部署单\n- `list_change_order_versions`: [application delivery] 查看部署单版本列表\n- `get_change_order`: [application delivery] 读取部署单使用的物料和工单状态\n- `list_change_order_job_logs`: [application delivery] 查询环境部署单日志\n- `find_task_operation_log`: [application delivery] 查询部署任务执行日志，其中通常包含下游部署引擎的调度细节信息\n- `execute_job_action`: [application delivery] 操作环境部署单\n- `list_change_orders_by_origin`: [application delivery] 根据创建来源查询部署单\n- `list_applications`: [application delivery] List applications in an organization with pagination\n- `get_application`: [application delivery] Get application details by name\n- `create_application`: [application delivery] Create a new application\n- `update_application`: [application delivery] Update an existing application\n- `get_latest_orchestration`: [application delivery] Get the latest orchestration for an environment\n- `list_app_orchestration`: [application delivery] List application orchestrations\n- `create_app_orchestration`: [application delivery] Create an application orchestration\n- `delete_app_orchestration`: [application delivery] Delete an application orchestration\n- `get_app_orchestration`: [application delivery] Get an application orchestration\n- `update_app_orchestration`: [application delivery] Update an application orchestration\n- `get_env_variable_groups`: [application delivery] Get variable groups for an environment\n- `create_variable_group`: [application delivery] Create a variable group\n- `delete_variable_group`: [application delivery] Delete a variable group\n- `get_variable_group`: [application delivery] Get a variable group\n- `update_variable_group`: [application delivery] Update a variable group\n- `get_app_variable_groups`: [application delivery] Get variable groups for an application\n- `get_app_variable_groups_revision`: [application delivery] Get the revision of variable groups for an application\n- `search_app_templates`: [application delivery] Search application templates\n- `create_app_tag`: [application delivery] Create an application tag\n- `update_app_tag`: [application delivery] Update an application tag\n- `search_app_tags`: [application delivery] Search application tags\n- `update_app_tag_bind`: [application delivery] Update application tag bindings\n- `create_global_var`: [application delivery] Create a global variable group\n- `get_global_var`: [application delivery] Get a global variable group\n- `update_global_var`: [application delivery] Update a global variable group\n- `list_global_vars`: [application delivery] List global variable groups\n- `get_machine_deploy_log`: [application delivery] Get machine deployment log\n- `add_host_list_to_host_group`: [application delivery] Add host list to host group\n- `add_host_list_to_deploy_group`: [application delivery] Add host list to deploy group\n\n## Usage\n\n### Prerequisites\n* node version >= 18.0.0\n* [AlibabaCloud Devops](https://www.aliyun.com/product/yunxiao) Personal Access Token, [click here to obtain](https://help.aliyun.com/zh/yunxiao/developer-reference/obtain-personal-access-token). Grant read and write permissions to all APIs under organization management, project collaboration, code management, pipeline management, artifact repository management, application delivery and testing management.\n\n  ![The personal token authorization page](https://agent-install-beijing.oss-cn-beijing.aliyuncs.com/alibabacloud-devops-mcp-server/img_8.jpg)\n\n### Installing via Smithery\n\nTo install [AlibabaCloud DevOps](https://www.aliyun.com/product/yunxiao) Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@aliyun/alibabacloud-devops-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @aliyun/alibabacloud-devops-mcp-server --client claude\n```\n\n### Install Yunxiao MCP server via MCP marketplace\nThe MCP market built into Lingma (AlibabaCloud Tongyi Lingma) has already provided the AlibabaCloud Devops MCP service. To install it, simply enter the MCP market in Lingma and search for \"Yunxiao DevOps\", then click install.\n\n![Install AlibabaCloud Devops MCP Service from the MCP Market](https://agent-install-beijing.oss-cn-beijing.aliyuncs.com/alibabacloud-devops-mcp-server/img_9.png)\n\n### Run MCP Server via NPX/Cursor/Claude code etc. \n```json\n{\n  \"mcpServers\": {\n    \"yunxiao\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"alibabacloud-devops-mcp-server\"\n      ],\n      \"env\": {\n        \"YUNXIAO_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n### Run MCP Server via Docker Container\n1. Docker build\n```shell\ndocker build -t alibabacloud/alibabacloud-devops-mcp-server .\n```\n2. Configure MCP Server\n```json\n{\n  \"mcpServers\": {\n    \"yunxiao\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"YUNXIAO_ACCESS_TOKEN\",\n        \"alibabacloud/alibabacloud-devops-mcp-server\"\n      ],\n      \"env\": {\n        \"YUNXIAO_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n###  Run MCP Server via Docker Compose\n1. Environment Setup\n```shell\ncd alibabacloud-devops-mcp-server\ncp .env.example\n```\n\n2. Running the Services:\n```shell\ndocker compose up -d\n```\n3. Configure MCP Server\n```json\n{\n  \"mcpServers\": {\n    \"yunxiao\": {\n      \"url\":\"http://localhost:3000/sse\"\n    }\n  }\n}\n```\n\n### SSE Mode with Custom Tokens\nWhen running in SSE mode, each user can use their own token by passing it as a query parameter or request header:\n\n1. Via query parameter:\n```\nhttp://localhost:3000/sse?yunxiao_access_token=USER_SPECIFIC_TOKEN\n```\n\n2. Via request header:\n```\nx-yunxiao-token: USER_SPECIFIC_TOKEN\n```\n\nThis allows multiple users to share the same SSE service while using their own individual tokens for authentication.\n\n### Toolsets\nThe server now supports toolsets, allowing you to enable only the tools you need. This can reduce the number of tools presented to the AI assistant and improve performance.\n\nAvailable toolsets:\n- `base`: Base tools that are always loaded (get_current_user, get_current_organization_info, get_user_organizations)\n- `code-management`: Code repository management tools (includes commit management tools)\n- `organization-management`: Organization management tools (excluding base tools)\n- `project-management`: Project management tools (includes effort management tools)\n- `pipeline-management`: Pipeline management tools (includes service connections, resource member, and VM deploy order tools)\n- `packages-management`: Package repository management tools\n- `application-delivery`: Application delivery tools\n\nTo use toolsets, you can specify them via command line arguments or environment variables:\n\n1. Via command line argument:\n```bash\nnpx -y alibabacloud-devops-mcp-server --toolsets=code-management,project-management\n```\n\n2. Via environment variable:\n```bash\nDEVOPS_TOOLSETS=code-management,project-management npx -y alibabacloud-devops-mcp-server\n```\n\nIf no toolsets are specified, all tools will be enabled by default.\n\n## Contact Us\n\n## Contact Us\nIf you have any questions, please join the Alibaba Cloud Devops discussion group (134400004101) for discussion.\n\n![Alibaba Cloud Devops MCP Server Group](https://agent-install-beijing.oss-cn-beijing.aliyuncs.com/alibabacloud-devops-mcp-server/1750147152464.png)\n\n\n## Related Links\n- [AlibabaCloud DevOps](https://www.aliyun.com/product/yunxiao)\n- [MCP market](https://modelscope.cn/mcp/servers/@aliyun/alibabacloud-devops-mcp-server)\n- [Example Use Cases](https://mp.weixin.qq.com/s/KQsN6dQlnNeCNATC-QD7pg)\n",
      "npm_url": "https://www.npmjs.com/package/alibabacloud-devops-mcp-server",
      "npm_downloads": 10992,
      "keywords": [
        "git",
        "devops",
        "workflow",
        "git workflow",
        "workflow management",
        "alibabacloud devops"
      ],
      "category": "git-workflow-management"
    },
    "yoda-digital--mcp-gitlab-server": {
      "owner": "yoda-digital",
      "name": "mcp-gitlab-server",
      "url": "https://github.com/yoda-digital/mcp-gitlab-server",
      "imageUrl": "/freedevtools/mcp/pfp/yoda-digital.webp",
      "description": "Interact seamlessly with GitLab to manage repositories, track activities, and automate workflows. Tools are available for creating issues, merge requests, and monitoring project events.",
      "stars": 28,
      "forks": 15,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-28T09:38:28Z",
      "readme_content": "# GitLab MCP Server\n\n<p align=\"center\">\n  <img src=\"./assets/repo-logo.png\" alt=\"GitLab MCP Server Logo\" width=\"200\">\n</p>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/@yoda.digital/gitlab-mcp-server\">\n    <img alt=\"npm\" src=\"https://img.shields.io/npm/v/@yoda.digital/gitlab-mcp-server?color=blue\">\n  </a>\n  <a href=\"https://github.com/yoda-digital/mcp-gitlab-server/blob/main/LICENSE\">\n    <img alt=\"License: MIT\" src=\"https://img.shields.io/badge/License-MIT-yellow.svg\">\n  </a>\n  <a href=\"https://github.com/yoda-digital/mcp-gitlab-server/issues\">\n    <img alt=\"GitHub issues\" src=\"https://img.shields.io/github/issues/yoda-digital/mcp-gitlab-server\">\n  </a>\n  <a href=\"https://github.com/yoda-digital/mcp-gitlab-server/stargazers\">\n    <img alt=\"GitHub stars\" src=\"https://img.shields.io/github/stars/yoda-digital/mcp-gitlab-server\">\n  </a>\n</p>\n\n<p align=\"center\">\n  <b>A powerful Model Context Protocol (MCP) server for GitLab integration, enabling AI assistants to interact with your GitLab resources.</b>\n</p>\n\n## ✨ Features\n\n- **Comprehensive GitLab API Integration** - Access repositories, issues, merge requests, wikis, and more\n- **Both Transports Supported** - Use with stdio or Server-Sent Events (SSE)\n- **Consistent Response Formatting** - Standardized pagination and response structures\n- **Strong TypeScript Typing** - Built with the MCP SDK for type safety\n- **Complete Documentation** - Examples for all available tools\n\n### 🔍 Supported Operations\n\n- **Repository Management** - Search, create, fork repositories\n- **File Handling** - Read, create, update files\n- **Branch Operations** - Create and manage branches\n- **Issue Tracking** - Create, list, filter issues\n- **Merge Requests** - Create, list, review merge requests\n- **Group Management** - List group projects and members\n- **Project Activity** - Track events and commit history\n- **Wiki Management** - Full support for project and group wikis with attachments\n- **Member Management** - List and manage project/group members\n\n## 🚀 Getting Started\n\n### Installation\n\n#### From npm (Recommended)\n\n```bash\nnpm install @yoda.digital/gitlab-mcp-server\n```\n\n#### From Source\n\n```bash\n# Clone the repository\ngit clone https://github.com/yoda-digital/mcp-gitlab-server.git\ncd mcp-gitlab-server\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n### Configuration\n\n#### Environment Variables\n\nThe server requires the following environment variables:\n\n| Variable                       | Required | Default                     | Description                                        |\n| ------------------------------ | -------- | --------------------------- | -------------------------------------------------- |\n| `GITLAB_PERSONAL_ACCESS_TOKEN` | Yes      | -                           | Your GitLab personal access token                  |\n| `GITLAB_API_URL`               | No       | `https://gitlab.com/api/v4` | GitLab API URL                                     |\n| `PORT`                         | No       | `3000`                      | Port for SSE transport                             |\n| `USE_SSE`                      | No       | `false`                     | Set to 'true' to use SSE transport                 |\n| `GITLAB_READ_ONLY_MODE`        | No       | `false`                     | Set to 'true' to enable read-only mode (see below) |\n\n#### Read-Only Mode\n\nWhen `GITLAB_READ_ONLY_MODE` is set to `true`, the server will only expose read operations. This is useful for client applications that shouldn't have write access to your GitLab resources. In read-only mode, the following tools will be available:\n\n- `search_repositories`\n- `get_file_contents`\n- `list_group_projects`\n- `get_project_events`\n- `list_commits`\n- `list_issues`\n- `list_merge_requests`\n- `list_project_wiki_pages`\n- `get_project_wiki_page`\n- `list_group_wiki_pages`\n- `get_group_wiki_page`\n- `list_project_members`\n- `list_group_members`\n\nAny attempt to use write operations (create, update, delete) will result in an error when in read-only mode.\n\n#### MCP Settings Configuration\n\nAdd the GitLab MCP server to your MCP settings file:\n\n```json\n{\n  \"mcpServers\": {\n    \"gitlab\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@yoda.digital/gitlab-mcp-server\"],\n      \"env\": {\n        \"GITLAB_PERSONAL_ACCESS_TOKEN\": \"your_token_here\",\n        \"GITLAB_API_URL\": \"https://gitlab.com/api/v4\"\n      },\n      \"alwaysAllow\": [],\n      \"disabled\": false\n    }\n  }\n}\n```\n\nFor read-only mode, add the `GITLAB_READ_ONLY_MODE` environment variable:\n\n```json\n{\n  \"mcpServers\": {\n    \"gitlab-readonly\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@yoda.digital/gitlab-mcp-server\"],\n      \"env\": {\n        \"GITLAB_PERSONAL_ACCESS_TOKEN\": \"your_token_here\",\n        \"GITLAB_API_URL\": \"https://gitlab.com/api/v4\",\n        \"GITLAB_READ_ONLY_MODE\": \"true\"\n      },\n      \"alwaysAllow\": [],\n      \"disabled\": false\n    }\n  }\n}\n```\n\n### Usage\n\n#### With stdio transport (default)\n\n```bash\n# Set your GitLab personal access token\nexport GITLAB_PERSONAL_ACCESS_TOKEN=your_token_here\n\n# Run the server\nnpm start\n```\n\n#### With SSE transport\n\n```bash\n# Set your GitLab personal access token and enable SSE\nexport GITLAB_PERSONAL_ACCESS_TOKEN=your_token_here\nexport GITLAB_READ_ONLY_MODE=false\nexport USE_SSE=true\nexport PORT=3000  # Optional, defaults to 3000\n\n# Run the server\nnpm start\n```\n\n#### With npx\n\n```bash\n# Run directly with npx\nGITLAB_PERSONAL_ACCESS_TOKEN=your_token_here npx @yoda.digital/gitlab-mcp-server\n```\n\n## 🛠️ Available Tools\n\n### Repository Operations\n\n<details>\n<summary><b>search_repositories</b>: Search for GitLab projects</summary>\n\n```json\n{\n  \"search\": \"project-name\",\n  \"page\": 1,\n  \"per_page\": 20\n}\n```\n\n</details>\n\n<details>\n<summary><b>create_repository</b>: Create a new GitLab project</summary>\n\n```json\n{\n  \"name\": \"new-project\",\n  \"description\": \"A new project\",\n  \"visibility\": \"private\",\n  \"initialize_with_readme\": true\n}\n```\n\n</details>\n\n<details>\n<summary><b>fork_repository</b>: Fork a GitLab project</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"namespace\": \"target-namespace\"\n}\n```\n\n</details>\n\n<details>\n<summary><b>list_group_projects</b>: List all projects within a specific GitLab group</summary>\n\n```json\n{\n  \"group_id\": \"group-name\",\n  \"archived\": false,\n  \"visibility\": \"public\",\n  \"include_subgroups\": true,\n  \"page\": 1,\n  \"per_page\": 20\n}\n```\n\n</details>\n\n### File Operations\n\n<details>\n<summary><b>get_file_contents</b>: Get the contents of a file from a GitLab project</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"file_path\": \"path/to/file.txt\",\n  \"ref\": \"main\"\n}\n```\n\n</details>\n\n<details>\n<summary><b>create_or_update_file</b>: Create or update a single file in a GitLab project</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"file_path\": \"path/to/file.txt\",\n  \"content\": \"File content here\",\n  \"commit_message\": \"Add/update file\",\n  \"branch\": \"main\",\n  \"previous_path\": \"old/path/to/file.txt\"\n}\n```\n\n</details>\n\n<details>\n<summary><b>push_files</b>: Push multiple files to a GitLab project in a single commit</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"files\": [\n    {\n      \"path\": \"file1.txt\",\n      \"content\": \"Content for file 1\"\n    },\n    {\n      \"path\": \"file2.txt\",\n      \"content\": \"Content for file 2\"\n    }\n  ],\n  \"commit_message\": \"Add multiple files\",\n  \"branch\": \"main\"\n}\n```\n\n</details>\n\n### Branch Operations\n\n<details>\n<summary><b>create_branch</b>: Create a new branch in a GitLab project</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"branch\": \"new-branch\",\n  \"ref\": \"main\"\n}\n```\n\n</details>\n\n### Issue Operations\n\n<details>\n<summary><b>create_issue</b>: Create a new issue in a GitLab project</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"title\": \"Issue title\",\n  \"description\": \"Issue description\",\n  \"assignee_ids\": [1, 2],\n  \"milestone_id\": 1,\n  \"labels\": [\"bug\", \"critical\"]\n}\n```\n\n</details>\n\n<details>\n<summary><b>list_issues</b>: Get issues for a GitLab project with filtering</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"state\": \"opened\",\n  \"labels\": \"bug,critical\",\n  \"milestone\": \"v1.0\",\n  \"author_id\": 1,\n  \"assignee_id\": 2,\n  \"search\": \"keyword\",\n  \"created_after\": \"2023-01-01T00:00:00Z\",\n  \"created_before\": \"2023-12-31T23:59:59Z\",\n  \"updated_after\": \"2023-06-01T00:00:00Z\",\n  \"updated_before\": \"2023-06-30T23:59:59Z\",\n  \"page\": 1,\n  \"per_page\": 20\n}\n```\n\n</details>\n\n<details>\n<summary><b>list_issue_notes</b>: Get all comments and system notes for a GitLab issue</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"issue_iid\": 42,\n  \"sort\": \"desc\",\n  \"order_by\": \"created_at\",\n  \"page\": 1,\n  \"per_page\": 20\n}\n```\n\n**Response Format:**\n\n```json\n{\n  \"count\": 15,\n  \"notes\": [\n    {\n      \"id\": 123456,\n      \"body\": \"This is a comment on the issue\",\n      \"author\": {\n        \"id\": 1,\n        \"username\": \"username\",\n        \"name\": \"User Name\"\n      },\n      \"created_at\": \"2023-01-01T00:00:00Z\",\n      \"updated_at\": \"2023-01-01T00:00:00Z\",\n      \"system\": false,\n      \"type\": \"comment\"\n    },\n    {\n      \"id\": 123457,\n      \"body\": \"added label ~bug\",\n      \"author\": {\n        \"id\": 1,\n        \"username\": \"username\",\n        \"name\": \"User Name\"\n      },\n      \"created_at\": \"2023-01-02T00:00:00Z\",\n      \"updated_at\": \"2023-01-02T00:00:00Z\",\n      \"system\": true,\n      \"type\": \"system\"\n    }\n    // ... other notes\n  ]\n}\n```\n\n</details>\n\n<details>\n<summary><b>list_issue_discussions</b>: Get all discussions (threaded comments) for a GitLab issue</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"issue_iid\": 42,\n  \"page\": 1,\n  \"per_page\": 20\n}\n```\n\n**Response Format:**\n\n```json\n{\n  \"count\": 5,\n  \"discussions\": [\n    {\n      \"id\": \"discussion-123\",\n      \"individual_note\": true,\n      \"notes\": [\n        {\n          \"id\": 123456,\n          \"body\": \"This is a comment on the issue\",\n          \"author\": {\n            \"id\": 1,\n            \"username\": \"username\",\n            \"name\": \"User Name\"\n          },\n          \"created_at\": \"2023-01-01T00:00:00Z\",\n          \"updated_at\": \"2023-01-01T00:00:00Z\",\n          \"system\": false,\n          \"type\": \"comment\"\n        }\n      ]\n    },\n    {\n      \"id\": \"discussion-124\",\n      \"individual_note\": false,\n      \"notes\": [\n        {\n          \"id\": 123457,\n          \"body\": \"This is a thread starter\",\n          \"author\": {\n            \"id\": 1,\n            \"username\": \"username\",\n            \"name\": \"User Name\"\n          },\n          \"created_at\": \"2023-01-02T00:00:00Z\",\n          \"updated_at\": \"2023-01-02T00:00:00Z\",\n          \"system\": false,\n          \"type\": \"comment\"\n        },\n        {\n          \"id\": 123458,\n          \"body\": \"This is a reply in the thread\",\n          \"author\": {\n            \"id\": 2,\n            \"username\": \"username2\",\n            \"name\": \"User Name 2\"\n          },\n          \"created_at\": \"2023-01-03T00:00:00Z\",\n          \"updated_at\": \"2023-01-03T00:00:00Z\",\n          \"system\": false,\n          \"type\": \"comment\"\n        }\n      ]\n    }\n    // ... other discussions\n  ]\n}\n```\n\n</details>\n\n### Merge Request Operations\n\n<details>\n<summary><b>create_merge_request</b>: Create a new merge request in a GitLab project</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"title\": \"Merge request title\",\n  \"description\": \"Merge request description\",\n  \"source_branch\": \"feature-branch\",\n  \"target_branch\": \"main\",\n  \"allow_collaboration\": true,\n  \"draft\": false\n}\n```\n\n</details>\n\n<details>\n<summary><b>list_merge_requests</b>: Get merge requests for a GitLab project with filtering</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"state\": \"opened\",\n  \"order_by\": \"created_at\",\n  \"sort\": \"desc\",\n  \"milestone\": \"v1.0\",\n  \"labels\": \"feature,enhancement\",\n  \"created_after\": \"2023-01-01T00:00:00Z\",\n  \"created_before\": \"2023-12-31T23:59:59Z\",\n  \"updated_after\": \"2023-06-01T00:00:00Z\",\n  \"updated_before\": \"2023-06-30T23:59:59Z\",\n  \"author_id\": 1,\n  \"assignee_id\": 2,\n  \"search\": \"keyword\",\n  \"source_branch\": \"feature-branch\",\n  \"target_branch\": \"main\",\n  \"page\": 1,\n  \"per_page\": 20\n}\n```\n\n</details>\n\n### Project Activity\n\n<details>\n<summary><b>get_project_events</b>: Get recent events/activities for a GitLab project</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"action\": \"pushed\",\n  \"target_type\": \"issue\",\n  \"before\": \"2023-12-31T23:59:59Z\",\n  \"after\": \"2023-01-01T00:00:00Z\",\n  \"sort\": \"desc\",\n  \"page\": 1,\n  \"per_page\": 20\n}\n```\n\n</details>\n\n<details>\n<summary><b>list_commits</b>: Get commit history for a GitLab project</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"sha\": \"branch-or-commit-sha\",\n  \"path\": \"path/to/file\",\n  \"since\": \"2023-01-01T00:00:00Z\",\n  \"until\": \"2023-12-31T23:59:59Z\",\n  \"all\": true,\n  \"with_stats\": true,\n  \"first_parent\": true,\n  \"page\": 1,\n  \"per_page\": 20\n}\n```\n\n</details>\n\n### Member Operations\n\n<details>\n<summary><b>list_project_members</b>: List all members of a GitLab project (including inherited members)</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"query\": \"search term\",\n  \"page\": 1,\n  \"per_page\": 20\n}\n```\n\n**Response Format:**\n\n```json\n{\n  \"count\": 3,\n  \"items\": [\n    {\n      \"id\": 123,\n      \"username\": \"username\",\n      \"name\": \"User Name\",\n      \"state\": \"active\",\n      \"avatar_url\": \"https://gitlab.com/avatar.png\",\n      \"web_url\": \"https://gitlab.com/username\",\n      \"access_level\": 50,\n      \"access_level_description\": \"Owner\"\n    }\n    // ... other members\n  ]\n}\n```\n\n</details>\n\n<details>\n<summary><b>list_group_members</b>: List all members of a GitLab group (including inherited members)</summary>\n\n```json\n{\n  \"group_id\": \"group-name\",\n  \"query\": \"search term\",\n  \"page\": 1,\n  \"per_page\": 20\n}\n```\n\n**Response Format:**\n\n```json\n{\n  \"count\": 5,\n  \"items\": [\n    {\n      \"id\": 456,\n      \"username\": \"username\",\n      \"name\": \"User Name\",\n      \"state\": \"active\",\n      \"avatar_url\": \"https://gitlab.com/avatar.png\",\n      \"web_url\": \"https://gitlab.com/username\",\n      \"access_level\": 30,\n      \"access_level_description\": \"Developer\"\n    }\n    // ... other members\n  ]\n}\n```\n\n</details>\n\n### Project Wiki Operations\n\n<details>\n<summary><b>list_project_wiki_pages</b>: List all wiki pages for a GitLab project</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"with_content\": false\n}\n```\n\n</details>\n\n<details>\n<summary><b>get_project_wiki_page</b>: Get a specific wiki page for a GitLab project</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"slug\": \"page-slug\",\n  \"render_html\": false,\n  \"version\": \"commit-sha\"\n}\n```\n\n</details>\n\n<details>\n<summary><b>create_project_wiki_page</b>: Create a new wiki page for a GitLab project</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"title\": \"Page Title\",\n  \"content\": \"Wiki page content\",\n  \"format\": \"markdown\"\n}\n```\n\n</details>\n\n<details>\n<summary><b>edit_project_wiki_page</b>: Edit an existing wiki page for a GitLab project</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"slug\": \"page-slug\",\n  \"title\": \"New Page Title\",\n  \"content\": \"Updated wiki page content\",\n  \"format\": \"markdown\"\n}\n```\n\n</details>\n\n<details>\n<summary><b>delete_project_wiki_page</b>: Delete a wiki page from a GitLab project</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"slug\": \"page-slug\"\n}\n```\n\n</details>\n\n<details>\n<summary><b>upload_project_wiki_attachment</b>: Upload an attachment to a GitLab project wiki</summary>\n\n```json\n{\n  \"project_id\": \"username/project\",\n  \"file_path\": \"path/to/attachment.png\",\n  \"content\": \"base64-encoded-content\",\n  \"branch\": \"main\"\n}\n```\n\n</details>\n\n### Group Wiki Operations\n\n<details>\n<summary><b>list_group_wiki_pages</b>: List all wiki pages for a GitLab group</summary>\n\n```json\n{\n  \"group_id\": \"group-name\",\n  \"with_content\": false\n}\n```\n\n</details>\n\n<details>\n<summary><b>get_group_wiki_page</b>: Get a specific wiki page for a GitLab group</summary>\n\n```json\n{\n  \"group_id\": \"group-name\",\n  \"slug\": \"page-slug\",\n  \"render_html\": false,\n  \"version\": \"commit-sha\"\n}\n```\n\n</details>\n\n<details>\n<summary><b>create_group_wiki_page</b>: Create a new wiki page for a GitLab group</summary>\n\n```json\n{\n  \"group_id\": \"group-name\",\n  \"title\": \"Page Title\",\n  \"content\": \"Wiki page content\",\n  \"format\": \"markdown\"\n}\n```\n\n</details>\n\n<details>\n<summary><b>edit_group_wiki_page</b>: Edit an existing wiki page for a GitLab group</summary>\n\n```json\n{\n  \"group_id\": \"group-name\",\n  \"slug\": \"page-slug\",\n  \"title\": \"New Page Title\",\n  \"content\": \"Updated wiki page content\",\n  \"format\": \"markdown\"\n}\n```\n\n</details>\n\n<details>\n<summary><b>delete_group_wiki_page</b>: Delete a wiki page from a GitLab group</summary>\n\n```json\n{\n  \"group_id\": \"group-name\",\n  \"slug\": \"page-slug\"\n}\n```\n\n</details>\n\n<details>\n<summary><b>upload_group_wiki_attachment</b>: Upload an attachment to a GitLab group wiki</summary>\n\n```json\n{\n  \"group_id\": \"group-name\",\n  \"file_path\": \"path/to/attachment.png\",\n  \"content\": \"base64-encoded-content\",\n  \"branch\": \"main\"\n}\n```\n\n</details>\n\n## 🔧 Development\n\n### Requirements\n\n- Node.js 16+\n- npm 7+\n- A GitLab account with a personal access token\n\n### Building the Project\n\n```bash\nnpm run build\n```\n\n### Running Tests\n\n```bash\nnpm test\n```\n\n### Code Style and Linting\n\n```bash\nnpm run lint\n```\n\n### Release Process\n\n1. Update version in `package.json`\n2. Update CHANGELOG.md\n3. Create a new release on GitHub\n4. Publish to npm with `npm publish`\n\n## 📖 Documentation\n\nFor more detailed documentation, please visit our [documentation site](https://yoda-digital.github.io/mcp-gitlab-server/) or check the TypeScript definitions in the source code.\n\n## 💼 Use Cases\n\n- **AI-powered Development Workflows** - Enable AI assistants to interact with your GitLab repositories\n- **Automated Issue and PR Management** - Streamline development processes with AI support\n- **Wiki Management** - Automate documentation updates and knowledge base management\n- **Team Collaboration** - Integrate AI assistants into your team's GitLab workflow\n\n## 📊 Roadmap\n\n- [ ] GitLab CI/CD Integration\n- [ ] Advanced Project Analytics\n- [ ] Comprehensive Test Suite\n- [ ] Support for GitLab GraphQL API\n- [ ] Extended Webhook Support\n\n## 🤝 Contributing\n\nContributions are welcome and appreciated! Here's how you can contribute:\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\nPlease make sure to update tests as appropriate and follow the code style of the project.\n\n## 📝 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 👥 Contributors\n\nThanks to all the contributors who have helped improve this project:\n\n<a href=\"https://github.com/yoda-digital/mcp-gitlab-server/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=yoda-digital/mcp-gitlab-server\" />\n</a>\n\nSpecial thanks to:\n\n- [thomasleveil](https://github.com/thomasleveil) - Implemented GitLab member listing functionality for projects and groups with consistent response formatting\n\n## 📦 NPM Package\n\nThis package is available on npm:  \n[https://www.npmjs.com/package/@yoda.digital/gitlab-mcp-server](https://www.npmjs.com/package/@yoda.digital/gitlab-mcp-server)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gitlab",
        "git",
        "workflows",
        "gitlab manage",
        "gitlab server",
        "git workflow"
      ],
      "category": "git-workflow-management"
    },
    "zereight--gitlab-mcp": {
      "owner": "zereight",
      "name": "gitlab-mcp",
      "url": "https://github.com/zereight/gitlab-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/zereight.webp",
      "description": "Integrate with the GitLab API to access repositories, manage issues, and perform various actions seamlessly through a standardized protocol. This server offers enhancements and bug fixes over the original GitLab MCP server.",
      "stars": 621,
      "forks": 148,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-03T07:08:25Z",
      "readme_content": "# GitLab MCP Server\n\n[![Star History Chart](https://api.star-history.com/svg?repos=zereight/gitlab-mcp&type=Date)](https://www.star-history.com/#zereight/gitlab-mcp&Date)\n\n## @zereight/mcp-gitlab\n\n[![smithery badge](https://smithery.ai/badge/@zereight/gitlab-mcp)](https://smithery.ai/server/@zereight/gitlab-mcp)\n\nGitLab MCP(Model Context Protocol) Server. **Includes bug fixes and improvements over the original GitLab MCP server.**\n\n<a href=\"https://glama.ai/mcp/servers/7jwbk4r6d7\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/7jwbk4r6d7/badge\" alt=\"gitlab mcp MCP server\" /></a>\n\n## Usage\n\n### Using with Claude App, Cline, Roo Code, Cursor, Kilo Code\n\nWhen using with the Claude App, you need to set up your API key and URLs directly.\n\n#### npx\n\n```json\n{\n  \"mcpServers\": {\n    \"gitlab\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@zereight/mcp-gitlab\"],\n      \"env\": {\n        \"GITLAB_PERSONAL_ACCESS_TOKEN\": \"your_gitlab_token\",\n        \"GITLAB_API_URL\": \"your_gitlab_api_url\",\n        \"GITLAB_PROJECT_ID\": \"your_project_id\", // Optional: default project\n        \"GITLAB_ALLOWED_PROJECT_IDS\": \"\", // Optional: comma-separated list of allowed project IDs\n        \"GITLAB_READ_ONLY_MODE\": \"false\",\n        \"USE_GITLAB_WIKI\": \"false\", // use wiki api?\n        \"USE_MILESTONE\": \"false\", // use milestone api?\n        \"USE_PIPELINE\": \"false\" // use pipeline api?\n      }\n    }\n  }\n}\n```\n\n#### vscode .vscode/mcp.json\n\n```json\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"gitlab-token\",\n      \"description\": \"Gitlab Token to read API\",\n      \"password\": true\n    }\n  ],\n  \"servers\": {\n    \"GitLab-MCP\": {\n      \"type\": \"stdio\",\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@zereight/mcp-gitlab\"],\n      \"env\": {\n        \"GITLAB_PERSONAL_ACCESS_TOKEN\": \"${input:gitlab-token}\",\n        \"GITLAB_API_URL\": \"your-fancy-gitlab-url\",\n        \"GITLAB_READ_ONLY_MODE\": \"true\",\n        ...\n      }\n    }\n  }\n}\n```\n\n#### Docker\n\n- stdio mcp.json\n\n```json\n{\n  \"mcpServers\": {\n    \"gitlab\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITLAB_PERSONAL_ACCESS_TOKEN\",\n        \"-e\",\n        \"GITLAB_API_URL\",\n        \"-e\",\n        \"GITLAB_READ_ONLY_MODE\",\n        \"-e\",\n        \"USE_GITLAB_WIKI\",\n        \"-e\",\n        \"USE_MILESTONE\",\n        \"-e\",\n        \"USE_PIPELINE\",\n        \"iwakitakuma/gitlab-mcp\"\n      ],\n      \"env\": {\n        \"GITLAB_PERSONAL_ACCESS_TOKEN\": \"your_gitlab_token\",\n        \"GITLAB_API_URL\": \"https://gitlab.com/api/v4\", // Optional, for self-hosted GitLab\n        \"GITLAB_READ_ONLY_MODE\": \"false\",\n        \"USE_GITLAB_WIKI\": \"true\",\n        \"USE_MILESTONE\": \"true\",\n        \"USE_PIPELINE\": \"true\"\n      }\n    }\n  }\n}\n```\n\n- sse\n\n```shell\ndocker run -i --rm \\\n  -e GITLAB_PERSONAL_ACCESS_TOKEN=your_gitlab_token \\\n  -e GITLAB_API_URL=\"https://gitlab.com/api/v4\" \\\n  -e GITLAB_READ_ONLY_MODE=true \\\n  -e USE_GITLAB_WIKI=true \\\n  -e USE_MILESTONE=true \\\n  -e USE_PIPELINE=true \\\n  -e SSE=true \\\n  -p 3333:3002 \\\n  iwakitakuma/gitlab-mcp\n```\n\n```json\n{\n  \"mcpServers\": {\n    \"gitlab\": {\n      \"type\": \"sse\",\n      \"url\": \"http://localhost:3333/sse\"\n    }\n  }\n}\n```\n\n- streamable-http\n\n```shell\ndocker run -i --rm \\\n  -e GITLAB_PERSONAL_ACCESS_TOKEN=your_gitlab_token \\\n  -e GITLAB_API_URL=\"https://gitlab.com/api/v4\" \\\n  -e GITLAB_READ_ONLY_MODE=true \\\n  -e USE_GITLAB_WIKI=true \\\n  -e USE_MILESTONE=true \\\n  -e USE_PIPELINE=true \\\n  -e STREAMABLE_HTTP=true \\\n  -p 3333:3002 \\\n  iwakitakuma/gitlab-mcp\n```\n\n```json\n{\n  \"mcpServers\": {\n    \"gitlab\": {\n      \"type\": \"streamable-http\",\n      \"url\": \"http://localhost:3333/mcp\"\n    }\n  }\n}\n```\n\n### Environment Variables\n\n- `GITLAB_PERSONAL_ACCESS_TOKEN`: Your GitLab personal access token.\n- `GITLAB_API_URL`: Your GitLab API URL. (Default: `https://gitlab.com/api/v4`)\n- `GITLAB_PROJECT_ID`: Default project ID. If set, Overwrite this value when making an API request.\n- `GITLAB_ALLOWED_PROJECT_IDS`: Optional comma-separated list of allowed project IDs. When set with a single value, acts as a default project (like the old \"lock\" mode). When set with multiple values, restricts access to only those projects. Examples:\n  - Single value `123`: MCP server can only access project 123 and uses it as default\n  - Multiple values `123,456,789`: MCP server can access projects 123, 456, and 789 but requires explicit project ID in requests\n- `GITLAB_READ_ONLY_MODE`: When set to 'true', restricts the server to only expose read-only operations. Useful for enhanced security or when write access is not needed. Also useful for using with Cursor and it's 40 tool limit.\n- `GITLAB_DENIED_TOOLS_REGEX`: When set as a regular expression, it excludes the matching tools.\n- `USE_GITLAB_WIKI`: When set to 'true', enables the wiki-related tools (list_wiki_pages, get_wiki_page, create_wiki_page, update_wiki_page, delete_wiki_page). By default, wiki features are disabled.\n- `USE_MILESTONE`: When set to 'true', enables the milestone-related tools (list_milestones, get_milestone, create_milestone, edit_milestone, delete_milestone, get_milestone_issue, get_milestone_merge_requests, promote_milestone, get_milestone_burndown_events). By default, milestone features are disabled.\n- `USE_PIPELINE`: When set to 'true', enables the pipeline-related tools (list_pipelines, get_pipeline, list_pipeline_jobs, list_pipeline_trigger_jobs, get_pipeline_job, get_pipeline_job_output, create_pipeline, retry_pipeline, cancel_pipeline, play_pipeline_job, retry_pipeline_job, cancel_pipeline_job). By default, pipeline features are disabled.\n- `GITLAB_AUTH_COOKIE_PATH`: Path to an authentication cookie file for GitLab instances that require cookie-based authentication. When provided, the cookie will be included in all GitLab API requests.\n- `SSE`: When set to 'true', enables the Server-Sent Events transport.\n- `STREAMABLE_HTTP`: When set to 'true', enables the Streamable HTTP transport. If both **SSE** and **STREAMABLE_HTTP** are set to 'true', the server will prioritize Streamable HTTP over SSE transport.\n- `GITLAB_COMMIT_FILES_PER_PAGE`: The number of files per page that GitLab returns for commit diffs. This value should match the server-side GitLab setting. Adjust this if your GitLab instance uses a custom per-page value for commit diffs.\n\n## Tools 🛠️\n\n<details>\n<summary>Click to expand</summary>\n\n<!-- TOOLS-START -->\n\n1. `merge_merge_request` - Merge a merge request in a GitLab project\n2. `create_or_update_file` - Create or update a single file in a GitLab project\n3. `search_repositories` - Search for GitLab projects\n4. `create_repository` - Create a new GitLab project\n5. `get_file_contents` - Get the contents of a file or directory from a GitLab project\n6. `push_files` - Push multiple files to a GitLab project in a single commit\n7. `create_issue` - Create a new issue in a GitLab project\n8. `create_merge_request` - Create a new merge request in a GitLab project\n9. `fork_repository` - Fork a GitLab project to your account or specified namespace\n10. `create_branch` - Create a new branch in a GitLab project\n11. `get_merge_request` - Get details of a merge request (Either mergeRequestIid or branchName must be provided)\n12. `get_merge_request_diffs` - Get the changes/diffs of a merge request (Either mergeRequestIid or branchName must be provided)\n13. `list_merge_request_diffs` - List merge request diffs with pagination support (Either mergeRequestIid or branchName must be provided)\n14. `get_branch_diffs` - Get the changes/diffs between two branches or commits in a GitLab project\n15. `update_merge_request` - Update a merge request (Either mergeRequestIid or branchName must be provided)\n16. `create_note` - Create a new note (comment) to an issue or merge request\n17. `create_merge_request_thread` - Create a new thread on a merge request\n18. `mr_discussions` - List discussion items for a merge request\n19. `update_merge_request_note` - Modify an existing merge request thread note\n20. `create_merge_request_note` - Add a new note to an existing merge request thread\n21. `get_draft_note` - Get a single draft note from a merge request\n22. `list_draft_notes` - List draft notes for a merge request\n23. `create_draft_note` - Create a draft note for a merge request\n24. `update_draft_note` - Update an existing draft note\n25. `delete_draft_note` - Delete a draft note\n26. `publish_draft_note` - Publish a single draft note\n27. `bulk_publish_draft_notes` - Publish all draft notes for a merge request\n28. `update_issue_note` - Modify an existing issue thread note\n29. `create_issue_note` - Add a new note to an existing issue thread\n30. `list_issues` - List issues (default: created by current user only; use scope='all' for all accessible issues)\n31. `my_issues` - List issues assigned to the authenticated user (defaults to open issues)\n32. `get_issue` - Get details of a specific issue in a GitLab project\n33. `update_issue` - Update an issue in a GitLab project\n34. `delete_issue` - Delete an issue from a GitLab project\n35. `list_issue_links` - List all issue links for a specific issue\n36. `list_issue_discussions` - List discussions for an issue in a GitLab project\n37. `get_issue_link` - Get a specific issue link\n38. `create_issue_link` - Create an issue link between two issues\n39. `delete_issue_link` - Delete an issue link\n40. `list_namespaces` - List all namespaces available to the current user\n41. `get_namespace` - Get details of a namespace by ID or path\n42. `verify_namespace` - Verify if a namespace path exists\n43. `get_project` - Get details of a specific project\n44. `list_projects` - List projects accessible by the current user\n45. `list_project_members` - List members of a GitLab project\n46. `list_labels` - List labels for a project\n47. `get_label` - Get a single label from a project\n48. `create_label` - Create a new label in a project\n49. `update_label` - Update an existing label in a project\n50. `delete_label` - Delete a label from a project\n51. `list_group_projects` - List projects in a GitLab group with filtering options\n52. `list_wiki_pages` - List wiki pages in a GitLab project\n53. `get_wiki_page` - Get details of a specific wiki page\n54. `create_wiki_page` - Create a new wiki page in a GitLab project\n55. `update_wiki_page` - Update an existing wiki page in a GitLab project\n56. `delete_wiki_page` - Delete a wiki page from a GitLab project\n57. `get_repository_tree` - Get the repository tree for a GitLab project (list files and directories)\n58. `list_pipelines` - List pipelines in a GitLab project with filtering options\n59. `get_pipeline` - Get details of a specific pipeline in a GitLab project\n60. `list_pipeline_jobs` - List all jobs in a specific pipeline\n61. `list_pipeline_trigger_jobs` - List all trigger jobs (bridges) in a specific pipeline that trigger downstream pipelines\n62. `get_pipeline_job` - Get details of a GitLab pipeline job number\n63. `get_pipeline_job_output` - Get the output/trace of a GitLab pipeline job with optional pagination to limit context window usage\n64. `create_pipeline` - Create a new pipeline for a branch or tag\n65. `retry_pipeline` - Retry a failed or canceled pipeline\n66. `cancel_pipeline` - Cancel a running pipeline\n67. `play_pipeline_job` - Run a manual pipeline job\n68. `retry_pipeline_job` - Retry a failed or canceled pipeline job\n69. `cancel_pipeline_job` - Cancel a running pipeline job\n70. `list_merge_requests` - List merge requests in a GitLab project with filtering options\n71. `list_milestones` - List milestones in a GitLab project with filtering options\n72. `get_milestone` - Get details of a specific milestone\n73. `create_milestone` - Create a new milestone in a GitLab project\n74. `edit_milestone` - Edit an existing milestone in a GitLab project\n75. `delete_milestone` - Delete a milestone from a GitLab project\n76. `get_milestone_issue` - Get issues associated with a specific milestone\n77. `get_milestone_merge_requests` - Get merge requests associated with a specific milestone\n78. `promote_milestone` - Promote a milestone to the next stage\n79. `get_milestone_burndown_events` - Get burndown events for a specific milestone\n80. `get_users` - Get GitLab user details by usernames\n81. `list_commits` - List repository commits with filtering options\n82. `get_commit` - Get details of a specific commit\n83. `get_commit_diff` - Get changes/diffs of a specific commit\n84. `list_group_iterations` - List group iterations with filtering options\n85. `upload_markdown` - Upload a file to a GitLab project for use in markdown content\n86. `download_attachment` - Download an uploaded file from a GitLab project by secret and filename\n87. `list_events` - List all events for the currently authenticated user\n88. `get_project_events` - List all visible events for a specified project\n<!-- TOOLS-END -->\n\n</details>\n",
      "npm_url": "https://www.npmjs.com/package/gitlab-mcp",
      "npm_downloads": 2044,
      "keywords": [
        "gitlab",
        "git",
        "workflow",
        "git workflow",
        "gitlab api",
        "gitlab mcp"
      ],
      "category": "git-workflow-management"
    }
  }
}