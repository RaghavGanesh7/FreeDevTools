{
  "category": "ecommerce-and-retail",
  "categoryDisplay": "E-commerce and Retail",
  "description": "",
  "totalRepositories": 22,
  "repositories": {
    "CooKey-Monster--EbayMcpServer": {
      "owner": "CooKey-Monster",
      "name": "EbayMcpServer",
      "url": "https://github.com/CooKey-Monster/EbayMcpServer",
      "imageUrl": "/freedevtools/mcp/pfp/CooKey-Monster.webp",
      "description": "Fetches auction listings from Ebay.com using simple prompts to discover various items, like comics or collectibles, by leveraging Ebay's REST API for real-time auction data.",
      "stars": 6,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T05:23:12Z",
      "readme_content": "# Ebay MCP server\n\nSimple Ebay server that lets you fetch auctions from Ebay.com\n\nUses the official [MCP Python SDK](https://github.com/modelcontextprotocol/python-sdk) to handle protocol communication and server interactions.\n\n## Example\n\nLet's you use prompts like, \"Find me 10 auctions for batman comics\"\n\n## Components\n\n### Tools\n\nThe server provides a single tool:\n\n- list_auction: Scan ebay for auctions. This tool is helpful for finding auctions on ebay.\n  - Required \"query\" argument for the search query\n  - Optional \"ammount\" argument for ammount of results\n    - defaults to 0\n  - Returns result from Ebay's REST API\n\n## Installation\n\n### Requires [UV](https://github.com/astral-sh/uv) (Fast Python package and project manager)\n\nIf uv isn't installed.\n\n```bash\n# Using Homebrew on macOS\nbrew install uv\n```\n\nor\n\n```bash\n# On macOS and Linux.\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# On Windows.\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\nNext, install the MCP server\n\n```bash\n# Install from source\nuv pip install git+https://github.com/CooKey-Monster/EbayMcpServer.git\n```\n\n### Environment Variables\n\nThe following environment variable is required; you can find them on the [Ebay developer portal](https://developer.ebay.com/develop)\n\n- `CLIENT_ID`: Your Ebay client ID\n- `CLIENT_SECRET`: Your Ebay client secret\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ebaymcpserver",
        "ecommerce",
        "auction",
        "monster ebaymcpserver",
        "ebaymcpserver fetches",
        "leveraging ebay"
      ],
      "category": "ecommerce-and-retail"
    },
    "Crossmint--mcp-crossmint-checkout": {
      "owner": "Crossmint",
      "name": "mcp-crossmint-checkout",
      "url": "https://github.com/Crossmint/mcp-crossmint-checkout",
      "imageUrl": "/freedevtools/mcp/pfp/Crossmint.webp",
      "description": "Enable programmatic purchasing of physical and virtual goods using stablecoins with a single API call. Offers reliable purchases including expedited shipping, receipts, tax collection, and support for returns and refunds across a vast inventory.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-06-04T00:52:44Z",
      "readme_content": "# Crossmint Checkout MCP Server\n\nCrossmint's Checkout allows programmatic purchase of physical and virtual goods and services, \nwith programmable money. It enables your AI agent to reliably purchase over 1 billion items, \nwithout any cost overhead, nor hassle and unreliability of having to use virtual debit cards and browser\nuse to pay in online forms. \n\nIf your agent can obtain an item SKU/identifier, this API can let it buy it. \n\n\n\n## Capabilities\n\nThis MCP server takes an item identifier (from URL to SKUs) and allows you to execute a purchase of it\nin a single API call. \n\nThese purchases are real: \n- The item is delivered with expedited shipping\n- A receipt is generated\n- Sales tax is properly collected\n- Returns and refunds are allowed\n\n### Available Inventory\n- **Amazon** (US only)\n   - Prime shipping included\n- **Shopify** (Global) \n   - Buy anything from any shopify store\n\nComing soon:\n- Flights\n- Hotels\n- Dining\n- Tickets\n\n## How are purchases paid\n\nThis MCP server is configured to perform purchases with Crossmint credits. Please [contact us](support@crossmint.io) if you are interested to learn more. To use USDC instead of credits:\n1. Change  TOKEN variable to \"usdc\" in src/index.ts\n2. Change the CREDIT_TOKEN_ADDRESS to the USDC address on ethereum `0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48`\n\n### How to get a company treasury wallet\n\nCrossmint will create a wallet for your company and share with you the wallet address. \n\n### How to get credits\n\nCrossmint will securely transfer credits to the company wallet. The company will then be able to transfer credits to agent wallets whenever agents want to top up their wallet or complete a transaction.\n\n## Setup\n\n1. **Clone the repository**\n   ```bash\n   git clone https://github.com/Crossmint/mcp-crossmint-checkout.git\n   cd mcp-crossmint-checkout\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Create .env file** \n\n   ```bash\n   cp .env.template .env\n   ```\n\n4. **Obtain Crossmint API key**\n\n   - Login to [Crossmint Console](https://www.crossmint.com/signin?callbackUrl=/console) and navigate to Integrate > API Keys > Create new server key \n   - Select scopes: `orders.create`, `orders.read`, `wallets:transactions.create`, `wallets.create`, `wallets.read`, `wallets.balance:read`. \n   - Copy API key and paste it in your .env file\n\n5. **Fill in user & delivery information**\n\n   Specify the user's id as well as their name, shipping address, and email in the .env file. Also make sure to fill in your company's wallet address.\n\n6. **Test vs. production**\n\n   Keep the `ENV` variable in your .env file to \"test\" so you can test orders. Change it to \"prod\" to complete real orders. \n\n7. **Generate an agent wallet**\n   ```bash\n   npm run generate-agent-wallet\n   ```\n\n8. **Transfer credits to agent wallet**\n   \n   To transfer 5 credits from the company's wallet to a user identified via userId \"johnjoe\", run the following\n   ```bash\n   npm run transfer-credits -- 5 johndoe\n   ```\n   If instead you uniquely identify users via email, you can adjust the user locator in `generate-wallet.js` and `credit-transfer.js` \n\n9. **Update Claude's configuration**\n   ```bash\n   npm run update-claude-config\n   ```\n\n10. **Build the project**\n\n    ```bash\n    npm run build\n    ```\n\n11. **Run the server**\n\n    ```bash\n    npm run crossmint-checkout\n    ```\n\n## Use it with Claude\n\nAsk Claude to:\n1. Describe the product you are looking for and ask for its Amazon.com link, i.e. \"I'm looking to buy non-flavored LaCroix sprankling water! Can you look up available listings on Amazon and find something under $5? Share the Amazon link when you are done.\"\n2. Ask Claude to buy it for you, i.e. \"Buy this https://www.amazon.com/Sparkling-Naturally-Essenced-Calories-Sweeteners/dp/B00O79SKV6\"\n3. Check your email for the purchase receipt\n\n## Tools\n\n1. `create-order`\n   Creates a new order for a specified product. Amazon products are specified as 'amazon:<amazon_product_id>' or 'amazon:<asin>', while Shopify products as 'shopify:<product-url>:<variant-id>'.\n\n   Example Prompt:\n   > \"Buy me this https://www.amazon.com/Sparkling-Naturally-Essenced-Calories-Sweeteners/dp/B00O79SKV6\"\n\n2. `check-order`\n   Checks the status of an existing order. \n\n   Example Prompt:\n   > \"What's the status of my order? \n\n3. `get-usd-balance`\n   Gets the USD balance of the wallet.\n\n   Example Prompt:\n   > \"What's my wallet's balance?\"\n\n## Support\n\nReach out directly to Crossmint via support@crossmint.io with any questions.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "crossmint",
        "stablecoins",
        "retail crossmint",
        "crossmint checkout",
        "mcp crossmint"
      ],
      "category": "ecommerce-and-retail"
    },
    "Fewsats--fewsats-mcp": {
      "owner": "Fewsats",
      "name": "fewsats-mcp",
      "url": "https://github.com/Fewsats/fewsats-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Fewsats.webp",
      "description": "Integrates with Fewsats to enable secure transactions for AI agents, allowing retrieval of wallet balances, available payment methods, and management of purchase transactions.",
      "stars": 21,
      "forks": 9,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-30T09:46:39Z",
      "readme_content": "# fewsats-mcp: A Fewsats MCP Server\n\n## Overview\n\nThis MCP server integrates with [Fewsats](https://fewsats.com) and allows AI Agents to purchase anything in a secure way.\n\nMCP is\n\n\n### Tools\n\n1. `balance`\n   - Retrieve the balance of the user's wallet\n   - Input: None\n   - Returns: Current wallet balance information\n\n2. `payment_methods`\n   - Retrieve the user's payment methods\n   - Input: None\n   - Returns: List of available payment methods\n\n3. `pay_offer`\n   - Pays an offer with the specified ID from the l402_offers\n   - Input:\n     - `offer_id` (string): String identifier for the offer\n     - `l402_offer` (object): Offer details containing:\n       - `offers`: Array of offer objects with ID, amount, currency, description, title\n       - `payment_context_token`: Payment context token string\n       - `payment_request_url`: URL for payment request\n       - `version`: API version string\n   - Returns: Payment status response\n\n4. `payment_info`\n   - Retrieve the details of a payment\n   - Input:\n     - `pid` (string): Payment ID to retrieve information for\n   - Returns: Detailed payment information\n\n\n## Installation\n\n### Using uv (recommended)\n\nWhen using [`uv`](https://docs.astral.sh/uv/) no specific installation is needed. We will\nuse [`uvx`](https://docs.astral.sh/uv/guides/tools/) to directly run *fewsats-mcp*.\n\n```bash\nuvx fewsats-mcp\n```\n\n### Using PIP\n\nAlternatively you can install `fewsats-mcp` via pip:\n\n```bash\npip install fewsats-mcp\n```\n\nAfter installation, you can run it as a script using:\n\n```bash\nfewsats-mcp\n```\n\n## Configuration\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n**Important**: Replace `YOUR_FEWSATS_API_KEY` with the API key you obtained from [Fewsats.com](https://fewsats.com/).\n\n<details>\n<summary>Using uvx</summary>\n\n```json\n\"mcpServers\": {\n  \"Fewsats Server\": {\n    \"command\": \"uvx\",\n    \"args\": [\"fewsats-mcp\"],\n    \"env\": {\n      \"FEWSATS_API_KEY\": \"YOUR_FEWSATS_API_KEY\"\n    }\n  }\n}\n```\n</details>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fewsats",
        "ecommerce",
        "mcp",
        "retail fewsats",
        "fewsats mcp",
        "fewsats enable"
      ],
      "category": "ecommerce-and-retail"
    },
    "Funmula-Corp--BigGo-MCP-Server": {
      "owner": "Funmula-Corp",
      "name": "BigGo-MCP-Server",
      "url": "https://github.com/Funmula-Corp/BigGo-MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/Funmula-Corp.webp",
      "description": "Enables product search across multiple e-commerce platforms, tracks product price histories, and performs specifications comparison (disabled in certain versions). Utilizes APIs from BigGo for data retrieval.",
      "stars": 14,
      "forks": 6,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-27T13:30:09Z",
      "readme_content": "# BigGo MCP Server\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/BigGo-MCP-Server?style=for-the-badge)\n[![PyPI - Version](https://img.shields.io/pypi/v/BigGo-MCP-Server?style=for-the-badge)](https://pypi.org/project/BigGo-MCP-Server/)\n![PyPI - License](https://img.shields.io/pypi/l/BigGo-MCP-Server?style=for-the-badge)\n\n## Introduction\nBigGo MCP Server utilizes APIs from BigGo, a professional price comparison website.\n## Features\n> Supports `stdio` and `SSE` transports\n\n- **Product Discovery**: Search for products across multiple e-commerce platforms (Amazon, Aliexpress, Ebay, Taobao, Shopee ... etc.)\n- **Price History Tracking**: Track product price history by supplying product url or related terms.\n- **Spec Comparison [Disabled on versions >= v0.1.28]**: Compare and find products based on their specifications, from basic infos to more complex technical specs.\n\n\n## Installation\n### Prerequisites\n1. Python >= 3.10\n2. [uvx package manager ( Included with uv )](https://docs.astral.sh/uv/getting-started/installation/)\n3. BigGo Certification (`client_id` and `client_secret`) for specification search. \n\n#### How to obtain BigGo certification?\n  - [Register](https://account.biggo.com/?url=https%3A%2F%2Fbiggo.com%2F&lang=en&source=web&type=biggo3&method=register) a BigGo account if you don't have one.\n  - Go to [BigGo Certification Page](https://account.biggo.com/setting/token)\n  - Click \"Generate certification\" button\n  - \n  - Copy the `client_id` and `client_secret`\n  - Use them in the MCP Server configuration (`BIGGO_MCP_SERVER_CLIENT_ID` and `BIGGO_MCP_SERVER_CLIENT_SECRET`)\n\n### Installation Config\n```json\n{\n  \"mcpServers\": {\n    \"biggo-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [ \"BigGo-MCP-Server@latest\"],\n      \"env\": {\n        \"BIGGO_MCP_SERVER_CLIENT_ID\": \"CLIENT_ID\",\n        \"BIGGO_MCP_SERVER_CLIENT_SECRET\": \"CLIENT_SECRET\",\n        \"BIGGO_MCP_SERVER_REGION\": \"REGION\"\n      }\n    }\n  }\n}\n```\n> For specific version use `BigGo-MCP-Server@VERSION`, ex: `BigGo-MCP-Server@0.1.1`\n\n## Environment Variables\n| Variable                         | Description               | Default | Choices                                    |\n| -------------------------------- | ------------------------- | ------- | ------------------------------------------ |\n| `BIGGO_MCP_SERVER_CLIENT_ID`     | Client ID                 | None    | Required for specification search          |\n| `BIGGO_MCP_SERVER_CLIENT_SECRET` | Client Secret             | None    | Required for specification search          |\n| `BIGGO_MCP_SERVER_REGION`        | Region for product search | TW      | US, TW, JP, HK, SG, MY, IN, PH, TH, VN, ID |\n| `BIGGO_MCP_SERVER_SSE_PORT`      | Port for SSE server       | 9876    | Any available port number                  |\n| `BIGGO_MCP_SERVER_SERVER_TYPE`   | Server transport type     | stdio   | stdio, sse                                 |\n\n> Default SSE URL: http://localhost:9876/sse\n\n## Available Tools\n- `product_search`: Product search with BigGo search api\n- `price_history_graph`: Link that visualizes product price history\n- `price_history_with_history_id`: Uses history IDs from product search results\n- `price_history_with_url`: Tracks price history using product URLs\n- `spec_indexes`: Lists available Elasticsearch indexes for product specifications\n- `spec_mapping`: Shows Elasticsearch index mapping with example documents\n- `spec_search`: Query product specifications from Elasticsearch\n- `get_current_region`: Get the current region\n\n## FAQ\n### How to trigger tool usage?\nFor **Product Discovery** related:\n```\nLook for Nike running shoes\n```\nFor **Price History Tracking** related:\n```\nShow me the price history of this product: https://some-product-url\n```\nFor **Spec Comparison** related:\n```\nFind me phones with 16GB RAM and 1TB storage\n```\n```\nPlease show me diving watches that can withstand the most water pressure\n```\n\n## Build\nSee [build.md](docs/build.md) for more details.\n\n## License\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "biggo",
        "commerce",
        "biggo data",
        "ecommerce retail",
        "apis biggo"
      ],
      "category": "ecommerce-and-retail"
    },
    "GeLi2001--shopify-mcp": {
      "owner": "GeLi2001",
      "name": "shopify-mcp",
      "url": "https://github.com/GeLi2001/shopify-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/GeLi2001.webp",
      "description": "Manage Shopify store data through a GraphQL API, enabling interaction with products, customers, and orders. Streamline e-commerce operations with advanced querying and filtering capabilities for efficient data management.",
      "stars": 81,
      "forks": 27,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T04:17:45Z",
      "readme_content": "# Shopify MCP Server\n\n(please leave a star if you like!)\n\nMCP Server for Shopify API, enabling interaction with store data through GraphQL API. This server provides tools for managing products, customers, orders, and more.\n\n**📦 Package Name: `shopify-mcp`**  \n**🚀 Command: `shopify-mcp` (NOT `shopify-mcp-server`)**\n\n<a href=\"https://glama.ai/mcp/servers/@GeLi2001/shopify-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@GeLi2001/shopify-mcp/badge\" alt=\"Shopify MCP server\" />\n</a>\n\n## Features\n\n- **Product Management**: Search and retrieve product information\n- **Customer Management**: Load customer data and manage customer tags\n- **Order Management**: Advanced order querying and filtering\n- **GraphQL Integration**: Direct integration with Shopify's GraphQL Admin API\n- **Comprehensive Error Handling**: Clear error messages for API and authentication issues\n\n## Prerequisites\n\n1. Node.js (version 16 or higher)\n2. Shopify Custom App Access Token (see setup instructions below)\n\n## Setup\n\n### Shopify Access Token\n\nTo use this MCP server, you'll need to create a custom app in your Shopify store:\n\n1. From your Shopify admin, go to **Settings** > **Apps and sales channels**\n2. Click **Develop apps** (you may need to enable developer preview first)\n3. Click **Create an app**\n4. Set a name for your app (e.g., \"Shopify MCP Server\")\n5. Click **Configure Admin API scopes**\n6. Select the following scopes:\n   - `read_products`, `write_products`\n   - `read_customers`, `write_customers`\n   - `read_orders`, `write_orders`\n7. Click **Save**\n8. Click **Install app**\n9. Click **Install** to give the app access to your store data\n10. After installation, you'll see your **Admin API access token**\n11. Copy this token - you'll need it for configuration\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"shopify\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"shopify-mcp\",\n        \"--accessToken\",\n        \"<YOUR_ACCESS_TOKEN>\",\n        \"--domain\",\n        \"<YOUR_SHOP>.myshopify.com\"\n      ]\n    }\n  }\n}\n```\n\nLocations for the Claude Desktop config file:\n\n- MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n### Alternative: Run Locally with Environment Variables\n\nIf you prefer to use environment variables instead of command-line arguments:\n\n1. Create a `.env` file with your Shopify credentials:\n\n   ```\n   SHOPIFY_ACCESS_TOKEN=your_access_token\n   MYSHOPIFY_DOMAIN=your-store.myshopify.com\n   ```\n\n2. Run the server with npx:\n   ```\n   npx shopify-mcp\n   ```\n\n### Direct Installation (Optional)\n\nIf you want to install the package globally:\n\n```\nnpm install -g shopify-mcp\n```\n\nThen run it:\n\n```\nshopify-mcp --accessToken=<YOUR_ACCESS_TOKEN> --domain=<YOUR_SHOP>.myshopify.com\n```\n\n**⚠️ Important:** If you see errors about \"SHOPIFY_ACCESS_TOKEN environment variable is required\" when using command-line arguments, you might have a different package installed. Make sure you're using `shopify-mcp`, not `shopify-mcp-server`.\n\n## Available Tools\n\n### Product Management\n\n1. `get-products`\n\n   - Get all products or search by title\n   - Inputs:\n     - `searchTitle` (optional string): Filter products by title\n     - `limit` (number): Maximum number of products to return\n\n2. `get-product-by-id`\n   - Get a specific product by ID\n   - Inputs:\n     - `productId` (string): ID of the product to retrieve\n\n3. `createProduct`\n    - Create new product in store \n    - Inputs:\n        - `title` (string): Title of the product\n        - `descriptionHtml` (string): Description of the product\n        - `vendor` (string): Vendor of the product\n        - `productType` (string): Type of the product\n        - `tags` (string): Tags of the product\n        - `status` (string): Status of the product \"ACTIVE\", \"DRAFT\", \"ARCHIVED\". Default \"DRAFT\"\n\n### Customer Management\n1. `get-customers`\n\n   - Get customers or search by name/email\n   - Inputs:\n     - `searchQuery` (optional string): Filter customers by name or email\n     - `limit` (optional number, default: 10): Maximum number of customers to return\n\n2. `update-customer`\n\n   - Update a customer's information\n   - Inputs:\n     - `id` (string, required): Shopify customer ID (numeric ID only, like \"6276879810626\")\n     - `firstName` (string, optional): Customer's first name\n     - `lastName` (string, optional): Customer's last name\n     - `email` (string, optional): Customer's email address\n     - `phone` (string, optional): Customer's phone number\n     - `tags` (array of strings, optional): Tags to apply to the customer\n     - `note` (string, optional): Note about the customer\n     - `taxExempt` (boolean, optional): Whether the customer is exempt from taxes\n     - `metafields` (array of objects, optional): Customer metafields for storing additional data\n\n3. `get-customer-orders`\n   - Get orders for a specific customer\n   - Inputs:\n     - `customerId` (string, required): Shopify customer ID (numeric ID only, like \"6276879810626\")\n     - `limit` (optional number, default: 10): Maximum number of orders to return\n\n### Order Management\n\n1. `get-orders`\n\n   - Get orders with optional filtering\n   - Inputs:\n     - `status` (optional string): Filter by order status\n     - `limit` (optional number, default: 10): Maximum number of orders to return\n\n2. `get-order-by-id`\n\n   - Get a specific order by ID\n   - Inputs:\n     - `orderId` (string, required): Full Shopify order ID (e.g., \"gid://shopify/Order/6090960994370\")\n\n3. `update-order`\n\n   - Update an existing order with new information\n   - Inputs:\n     - `id` (string, required): Shopify order ID\n     - `tags` (array of strings, optional): New tags for the order\n     - `email` (string, optional): Update customer email\n     - `note` (string, optional): Order notes\n     - `customAttributes` (array of objects, optional): Custom attributes for the order\n     - `metafields` (array of objects, optional): Order metafields\n     - `shippingAddress` (object, optional): Shipping address information\n\n## Debugging\n\nIf you encounter issues, check Claude Desktop's MCP logs:\n\n```\ntail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "shopify",
        "ecommerce",
        "commerce",
        "manage shopify",
        "shopify store",
        "shopify mcp"
      ],
      "category": "ecommerce-and-retail"
    },
    "KhryptorGraphics--giggatek": {
      "owner": "KhryptorGraphics",
      "name": "giggatek",
      "url": "https://github.com/KhryptorGraphics/giggatek",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "GigGatek is an ecommerce platform focused on refurbished computer hardware, offering functionalities for direct sales and rent-to-own services. It supports user interactions through a web interface with backend operations in Python and a MySQL database for data management.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "giggatek",
        "ecommerce",
        "retail",
        "giggatek ecommerce",
        "giggatek giggatek",
        "khryptorgraphics giggatek"
      ],
      "category": "ecommerce-and-retail"
    },
    "Redtri-git--Ecomm-MCP": {
      "owner": "Redtri-git",
      "name": "Ecomm-MCP",
      "url": "https://github.com/Redtri-git/Ecomm-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/Redtri-git.webp",
      "description": "Provides product search capabilities by querying an API for product listings and returns markdown-formatted responses that include clickable product links and prices.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-04-25T01:12:22Z",
      "readme_content": "# 🛒 Ecomm MCP Server\r\n\r\nThis is a minimal MCP (Multi-Command Protocol) server implementation for product search, designed to work seamlessly with Claude's tool integration. It uses `FastMCP` to expose a simple tool that allows language models to query an API for product listings.\r\n\r\n---\r\n\r\n## 🚀 Features\r\n\r\n- MCP-compatible server for Claude integration  \r\n- `search_products` tool for querying product  \r\n- Markdown-formatted responses with clickable product links and prices  \r\n- Easy testing and integration with Claude desktop app  \r\n\r\n---\r\n## Running\r\n\r\n### Running with NPX\r\n`npx -y redtry-product-scraper-mcp`\r\n\r\n### To run with SSE instead of Stdio:\r\n`env SSE_LOCAL=true npx -y redtry-product-scraper-mcp`\r\n\r\n### Manual install with NPM\r\n`npm install -g redtry-product-scraper-mcp`\r\n\r\n\r\n## Adding to Claude Desktop\r\nGo to:\r\n\r\nClaude > Settings > Developer > Edit Config\r\n\r\nFind or add your configuration for the tool in claude_desktop_config.json. It should look like this:\r\nAdd the following  to your configuration file:\r\n```\r\n{\r\n  \"mcpServers\": {\r\n    \"redtry\": {\r\n      \"command\": \"npx\",\r\n      \"args\": [\"-y\", \"redtry-product-scraper-mcp\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Adding to Cursor\r\n\r\n- Open Cursor Settings\r\n- Go to Features > MCP Servers\r\n- Click \"+ Add new global MCP server\"\r\n- Enter the following code:\r\n\r\n```\r\n    {\r\n      \"mcpServers\": {\r\n        \"redtry\": {\r\n          \"command\": \"npx\",\r\n          \"args\": [\"-y\", \"redtry-product-scraper-mcp\"],\r\n        }\r\n      }\r\n    }\r\n```\r\n\r\n## Adding to Windsurf\r\n\r\nAdd this to your ./codeium/windsurf/model_config.json:\r\n\r\n```\r\n{\r\n  \"mcpServers\": {\r\n    \"redtry\": {\r\n      \"command\": \"npx\",\r\n      \"args\": [\"-y\", \"redtry-product-scraper-mcp\"],\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "ecomm",
        "mcp",
        "ecomm mcp",
        "product search",
        "ecommerce retail"
      ],
      "category": "ecommerce-and-retail"
    },
    "asaricorp--mcp-shopify": {
      "owner": "asaricorp",
      "name": "mcp-shopify",
      "url": "https://github.com/asaricorp/mcp-shopify",
      "imageUrl": "/freedevtools/mcp/pfp/asaricorp.webp",
      "description": "Manage Shopify store data including products, customers, and orders through a GraphQL API. Streamlines e-commerce operations with features for inventory management and customer engagement.",
      "stars": 8,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-04T18:16:35Z",
      "readme_content": "# Shopify MCP Server\n\n\nMCP Server for Shopify API, enabling interaction with store data through GraphQL API. This server provides tools for managing products, customers, orders, and more.\n\n## Features\n\n- **Product Management**: Search and retrieve product information\n- **Customer Management**: Load customer data and manage customer tags\n- **Order Management**: Advanced order querying and filtering\n- **Collection Management**: Create and manage collections\n\n## Setup\n\n### Shopify Access Token\n\nTo use this MCP server, you'll need to create a custom app in your Shopify store:\n\n1. From your Shopify admin, go to **Settings** > **Apps and sales channels**\n2. Click **Develop apps** (you may need to enable developer preview first)\n3. Click **Create an app**\n4. Set a name for your app (e.g., \"Shopify MCP Server\")\n5. Click **Configure Admin API scopes**\n6. Select the following scopes:\n   - `read_products`, `write_products`\n   - `read_customers`, `write_customers`\n   - `read_orders`, `write_orders`\n   - `read_collections`, `write_collections`\n7. Click **Save**\n8. Click **Install app**\n9. Click **Install** to give the app access to your store data\n10. After installation, you'll see your **Admin API access token**\n11. Copy this token - you'll need it for configuration\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"shopify\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"shopify-mcp\",\n        \"--accessToken\",\n        \"<YOUR_ACCESS_TOKEN>\",\n        \"--domain\",\n        \"<YOUR_SHOP>.myshopify.com\"\n      ]\n    }\n  }\n}\n```\n\nLocations for the Claude Desktop config file:\n\n- MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n### Alternative: Run Locally with Environment Variables\n\nIf you prefer to use environment variables instead of command-line arguments:\n\n1. Create a `.env` file with your Shopify credentials:\n\n   ```\n   SHOPIFY_ACCESS_TOKEN=your_access_token\n   MYSHOPIFY_DOMAIN=your-store.myshopify.com\n   ```\n\n2. Run the server with npx:\n   ```\n   npx shopify-mcp\n   ```\n\n### Direct Installation (Optional)\n\nIf you want to install the package globally:\n\n```\nnpm install -g shopify-mcp\n```\n\nThen run it:\n\n```\nshopify-mcp --accessToken=<YOUR_ACCESS_TOKEN> --domain=<YOUR_SHOP>.myshopify.com\n```\n\n## Available Tools\n\n### Product Management\n\n1. `get-products`\n\n   - Get all products or search by title\n   - Inputs:\n     - `searchTitle` (optional string): Filter products by title\n     - `limit` (number): Maximum number of products to return\n\n2. `get-product-by-id`\n   - Get a specific product by ID\n   - Inputs:\n     - `productId` (string): ID of the product to retrieve\n\n### Customer Management\n\n1. `get-customers`\n\n   - Get customers or search by name/email\n   - Inputs:\n     - `searchQuery` (optional string): Filter customers by name or email\n     - `limit` (optional number, default: 10): Maximum number of customers to return\n\n2. `update-customer`\n\n   - Update a customer's information\n   - Inputs:\n     - `id` (string, required): Shopify customer ID (numeric ID only, like \"6276879810626\")\n     - `firstName` (string, optional): Customer's first name\n     - `lastName` (string, optional): Customer's last name\n     - `email` (string, optional): Customer's email address\n     - `phone` (string, optional): Customer's phone number\n     - `tags` (array of strings, optional): Tags to apply to the customer\n     - `note` (string, optional): Note about the customer\n     - `taxExempt` (boolean, optional): Whether the customer is exempt from taxes\n     - `metafields` (array of objects, optional): Customer metafields for storing additional data\n\n3. `get-customer-orders`\n\n   - Get orders for a specific customer\n   - Inputs:\n     - `customerId` (string, required): Shopify customer ID (numeric ID only, like \"6276879810626\")\n     - `limit` (optional number, default: 10): Maximum number of orders to return\n\n4. `create-customer`\n   - Create a new customer in Shopify\n   - Inputs:\n     - `email` (string, required): Customer's email address\n     - `firstName` (string, optional): Customer's first name\n     - `lastName` (string, optional): Customer's last name\n     - `phone` (string, optional): Customer's phone number\n     - `tags` (array of strings, optional): Tags to apply to the customer\n     - `note` (string, optional): Note about the customer\n     - `taxExempt` (boolean, optional): Whether the customer is exempt from taxes\n     - `password` (string, optional): Password for the customer account\n     - `passwordConfirmation` (string, optional): Confirmation of the password\n     - `addresses` (array of objects, optional): Customer's addresses\n     - `metafields` (array of objects, optional): Customer metafields for storing additional data\n\n### Order Management\n\n1. `get-orders`\n\n   - Get orders with optional filtering\n   - Inputs:\n     - `status` (optional string): Filter by order status\n     - `limit` (optional number, default: 10): Maximum number of orders to return\n\n2. `get-order-by-id`\n\n   - Get a specific order by ID\n   - Inputs:\n     - `orderId` (string, required): Full Shopify order ID (e.g., \"gid://shopify/Order/6090960994370\")\n\n3. `update-order`\n\n   - Update an existing order with new information\n   - Inputs:\n     - `id` (string, required): Shopify order ID\n     - `tags` (array of strings, optional): New tags for the order\n     - `email` (string, optional): Update customer email\n     - `note` (string, optional): Order notes\n     - `customAttributes` (array of objects, optional): Custom attributes for the order\n     - `metafields` (array of objects, optional): Order metafields\n     - `shippingAddress` (object, optional): Shipping address information\n\n4. `create-order`\n\n   - Create a new draft order in Shopify\n   - Inputs:\n     - `lineItems` (array of objects, required): Products to include in the order\n       - `variantId` (string, required): ID of the product variant\n       - `quantity` (number, required): Quantity of the product\n       - `customAttributes` (array of objects, optional): Custom attributes for the line item\n     - `email` (string, optional): Customer email\n     - `phone` (string, optional): Customer phone number\n     - `note` (string, optional): Order notes\n     - `tags` (array of strings, optional): Tags for the order\n     - `customAttributes` (array of objects, optional): Custom attributes for the order\n     - `metafields` (array of objects, optional): Order metafields\n     - `billingAddress` (object, optional): Billing address information\n     - `shippingAddress` (object, optional): Shipping address information\n     - `customerId` (string, optional): ID of an existing customer\n     - `shippingLine` (object, optional): Shipping method and price\n     - `taxExempt` (boolean, optional): Whether the order is exempt from taxes\n     - `presentmentCurrencyCode` (string, optional): Currency code for the order\n\n5. `create-fulfillment`\n   - Create a new fulfillment for an order in Shopify\n   - Inputs:\n     - `orderId` (string, required): ID of the order to fulfill\n     - `notifyCustomer` (boolean, default: true): Whether to notify the customer about the fulfillment\n     - `trackingInfo` (object, optional): Tracking information\n       - `number` (string, optional): Tracking number\n       - `url` (string, optional): Tracking URL\n       - `company` (string, optional): Shipping company\n     - `lineItems` (array of objects, optional): Specific line items to fulfill\n       - `id` (string, required): ID of the line item\n       - `quantity` (number, required): Quantity to fulfill\n     - `locationId` (string, optional): ID of the location fulfilling the order\n     - `trackingNumbers` (array of strings, optional): Multiple tracking numbers\n     - `trackingUrls` (array of strings, optional): Multiple tracking URLs\n     - `metadata` (object, optional): Additional metadata for the fulfillment\n\n### Collection Management\n\n1. `create-collection`\n   - Create a new manual or automated collection in Shopify\n   - Inputs:\n     - `title` (string, required): Collection title\n     - `description` (string, optional): Collection description\n     - `descriptionHtml` (string, optional): HTML version of the description\n     - `handle` (string, optional): URL handle for the collection\n     - `isPublished` (boolean, optional): Whether the collection is published\n     - `seo` (object, optional): SEO settings\n       - `title` (string, optional): SEO title\n       - `description` (string, optional): SEO description\n     - `image` (object, optional): Collection image\n       - `src` (string, required): Image URL\n       - `altText` (string, optional): Alt text for the image\n     - `productsToAdd` (array of strings, optional): Product IDs to add to the collection\n     - `sortOrder` (string, optional): How products are sorted in the collection\n       - Options: \"MANUAL\", \"BEST_SELLING\", \"ALPHA_ASC\", \"ALPHA_DESC\", \"PRICE_DESC\", \"PRICE_ASC\", \"CREATED\", \"CREATED_DESC\", \"ID_DESC\", \"RELEVANCE\"\n     - `templateSuffix` (string, optional): Template suffix for custom templates\n     - `privateMetafields` (array of objects, optional): Private metafields for the collection\n       - `owner` (string, required): Metafield owner\n       - `namespace` (string, required): Metafield namespace\n       - `key` (string, required): Metafield key\n       - `value` (string, required): Metafield value\n       - `valueType` (string, required): Type of the value (e.g., \"STRING\", \"INTEGER\", etc.)\n     - `ruleSet` (object, optional): Rules for automated collections\n       - `rules` (array of objects, required): Collection rules\n         - `column` (string, required): Rule column (e.g., \"TAG\", \"TITLE\", etc.)\n         - `relation` (string, required): Rule relation (e.g., \"EQUALS\", \"CONTAINS\", etc.)\n         - `condition` (string, required): Rule condition value\n       - `appliedDisjunctively` (boolean, optional, default: true): Whether rules are combined with OR (true) or AND (false)\n     - `metafields` (array of objects, optional): Public metafields for the collection\n       - `namespace` (string, required): Metafield namespace\n       - `key` (string, required): Metafield key\n       - `value` (string, required): Metafield value\n       - `type` (string, required): Metafield type\n     - `publications` (array of objects, optional): Publication settings\n       - `publicationId` (string, required): ID of the publication\n       - `publishDate` (string, optional): Date to publish the collection\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "shopify",
        "ecommerce",
        "commerce",
        "shopify manage",
        "manage shopify",
        "mcp shopify"
      ],
      "category": "ecommerce-and-retail"
    },
    "findmine--findmine-mcp": {
      "owner": "findmine",
      "name": "findmine-mcp",
      "url": "https://github.com/findmine/findmine-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/findmine.webp",
      "description": "Connects to FindMine's styling API to provide personalized outfit recommendations, detailed product information, and visually similar product suggestions. Offers access to styling advice and outfit guidance through various URI schemes for products and looks.",
      "stars": 1,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-09T07:32:47Z",
      "readme_content": "# FindMine Shopping Stylist\n\nA Model Context Protocol (MCP) server that integrates FindMine's powerful product styling and outfitting recommendations with Claude and other MCP-compatible applications.\n\n## Overview\n\nThis MCP server connects to FindMine's styling API and exposes its functionality to Large Language Models through the Model Context Protocol. It allows users to:\n\n- Browse product and outfit information\n- Get outfit recommendations for specific products\n- Find visually similar products\n- Access style guidance and fashion advice\n\n## Features\n\n### Resources\n- **Products**: Detailed product information with `product:///` URI scheme\n- **Looks**: Complete outfit recommendations with `look:///` URI scheme\n\n### Tools\n- **get_style_guide**: Access detailed fashion advice and styling guidelines\n- **get_complete_the_look**: Get outfit recommendations for a product\n- **get_visually_similar**: Find visually similar products\n\n### Prompts\n- **outfit_completion**: Get styling advice for complete outfits\n- **styling_guide**: Access comprehensive fashion styling guidelines\n- **findmine_help**: Learn how to use FindMine's tools and resources\n\n## Installation\n\n### Option 1: Install from npm\n\n```bash\n# Install and run directly (recommended)\nnpx findmine-mcp\n\n# Or install globally\nnpm install -g findmine-mcp\nfindmine-mcp\n```\n\n### Option 2: Run with Docker\n\n```bash\ndocker run -e FINDMINE_APP_ID=your_app_id findmine/mcp-server:latest\n```\n\n### Option 3: Clone and build from source\n\n```bash\n# Clone the repository\ngit clone https://github.com/findmine/findmine-mcp.git\ncd findmine-mcp\n\n# Install dependencies\nnpm install\n\n# Build the server\nnpm run build\n\n# For development with auto-rebuild\nnpm run watch\n```\n\n## Configuration\n\n### Environment Variables\n\n| Variable | Description | Default |\n|----------|-------------|---------|\n| `FINDMINE_API_URL` | FindMine API base URL | https://api.findmine.com |\n| `FINDMINE_APP_ID` | Your FindMine application ID | DEMO_APP_ID |\n| `FINDMINE_API_VERSION` | API version to use | v3 |\n| `FINDMINE_DEFAULT_REGION` | Default region code | us |\n| `FINDMINE_DEFAULT_LANGUAGE` | Default language code | en |\n| `FINDMINE_CACHE_ENABLED` | Enable response caching | true |\n| `FINDMINE_CACHE_TTL_MS` | Cache time-to-live in ms | 3600000 (1 hour) |\n| `NODE_ENV` | Set to \"development\" for sample data | - |\n\n## Usage with Claude Desktop\n\nThe server automatically configures Claude Desktop during installation. To verify:\n\n**macOS:**\n```bash\ncat ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n**Windows:**\n```\ntype %APPDATA%\\Claude\\claude_desktop_config.json\n```\n\n## Development\n\n### MCP Inspector\n\nThe MCP Inspector is a development tool for testing your server:\n\n```bash\nnpm run inspector\n```\n\nThis will open a web interface at http://localhost:5173 where you can interact with your server.\n\n### Development Mode\n\nRun the server with sample data:\n\n```bash\nNODE_ENV=development npm run build && node build/index.js\n```\n\n### Customizing the Style Guide\n\nThe style guide can be customized to match your brand's specific styling philosophies and fashion guidance. To customize the style guide:\n\n1. Locate the style guides in `src/index.ts` (search for `styleGuides`)\n2. Modify the content for each category (`general`, `color_theory`, `body_types`, etc.)\n3. Add new categories by extending the `styleGuides` object\n4. Customize occasion-specific and seasonal advice\n\nExample of adding a custom style guide category:\n\n```typescript\n// In src/index.ts\nconst styleGuides: Record<string, string> = {\n  // Existing categories...\n  \n  // Add your custom category\n  your_brand_style: `# Your Brand Style Guide\n  \n## Brand Aesthetic\n- Key elements of your brand's visual identity\n- Core style principles\n- Signature looks and combinations\n\n## Your Brand's Styling Do's\n- Brand-specific styling recommendations\n- Preferred color combinations\n- Signature styling techniques\n\n## Your Brand's Styling Don'ts\n- Combinations to avoid\n- Styling approaches that don't align with brand identity\n- Common styling mistakes to avoid\n`\n};\n```\n\nFor complete customization, you can modify the entire `get_style_guide` handler in `src/index.ts`.\n\n### Project Structure\n\n- `src/index.ts`: Main MCP server implementation\n- `src/api/`: FindMine API client\n- `src/services/`: Business logic and service layer\n- `src/types/`: TypeScript type definitions\n- `src/utils/`: Utility functions and helpers\n\n## API Examples\n\n### Get Style Guide\n\n```json\n{\n  \"name\": \"get_style_guide\",\n  \"arguments\": {\n    \"category\": \"color_theory\",\n    \"occasion\": \"wedding\"\n  }\n}\n```\n\n### Get Complete the Look\n\n```json\n{\n  \"name\": \"get_complete_the_look\",\n  \"arguments\": {\n    \"product_id\": \"P12345\",\n    \"product_color_id\": \"C789\"\n  }\n}\n```\n\n### Get Visually Similar Products\n\n```json\n{\n  \"name\": \"get_visually_similar\",\n  \"arguments\": {\n    \"product_id\": \"P12345\",\n    \"product_color_id\": \"C789\",\n    \"limit\": 5\n  }\n}\n```\n\n## Publishing\n\n### Publishing to npm\n\n```bash\n# Login to npm\nnpm login\n\n# Publish the package\nnpm publish\n\n# Update the version for future releases\nnpm version patch\n```\n\n### Publishing to Docker Hub\n\n```bash\n# Build the Docker image\ndocker build -t findmine/mcp-server:latest .\n\n# Login to Docker Hub\ndocker login\n\n# Push the image\ndocker push findmine/mcp-server:latest\n```\n\n## License\n\nThis project is licensed under the MIT License.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "findmine",
        "mcp",
        "ecommerce",
        "retail findmine",
        "findmine mcp",
        "findmine styling"
      ],
      "category": "ecommerce-and-retail"
    },
    "hhw67865--tripadvisor-mcp-server": {
      "owner": "hhw67865",
      "name": "tripadvisor-mcp-server",
      "url": "https://github.com/hhw67865/tripadvisor-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/hhw67865.webp",
      "description": "Access TripAdvisor data to plan vacations by discovering attractions, restaurants, and hotels, while viewing photos and reviews. Offers an interactive prompt for vacation planning and detailed location information.",
      "stars": 2,
      "forks": 5,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-23T08:57:58Z",
      "readme_content": "# TripAdvisor Vacation Planner MCP Server\n\nThis MCP server provides access to TripAdvisor data for planning vacations, finding attractions, restaurants, and hotels.\n\n## Features\n\n- Search for locations by name and category\n- Get detailed information about specific locations\n- Find nearby attractions, restaurants, and hotels\n- View photos and reviews\n- Interactive vacation planning prompt\n\n## Setup Instructions\n\n### Prerequisites\n\n- Python 3.10 or higher\n- [uv](https://github.com/astral-sh/uv) - Fast Python package installer and resolver\n- TripAdvisor API key (get one from [TripAdvisor Developer Portal](https://developer.tripadvisor.com/))\n- Claude Desktop\n- Google Maps MCP Server (https://github.com/modelcontextprotocol/servers/tree/main/src/google-maps)\n\n### Installation with uv\n\n1. Clone this repository\n2. Create and activate a virtual environment:\n   ```bash\n   uv venv\n   # On Windows\n   .venv\\Scripts\\activate\n   # On macOS/Linux\n   source .venv/bin/activate\n   ```\n3. Install the required dependencies:\n   ```bash\n   uv add \"mcp[cli]\"\n   ```\n\n### Running the Server\n\nYou can run the server directly with:\n\n```bash\n# Set your API key as an environment variable\nexport TRIPADVISOR_API_KEY=your_api_key_here  # Linux/macOS\nset TRIPADVISOR_API_KEY=your_api_key_here     # Windows Command Prompt\n$env:TRIPADVISOR_API_KEY=\"your_api_key_here\"  # Windows PowerShell\n\n# Run the server\nmcp run server.py\n```\n\n### Setting up for Claude Desktop\n\nSet up the MCP Server with:\n\n```bash\nmcp install server.py\n```\n\n### Configuring Claude Desktop\n\n1. Open Claude Desktop\n2. Go to Settings > MCP Servers\n3. Add a new server with the following configuration:\n   ```json\n   {\n     \"tripadvisor\": {\n       \"command\": \"uv\",\n       \"args\": [\n         \"run\",\n         \"--with\",\n         \"mcp[cli]\",\n         \"mcp\",\n         \"run\",\n         \"PATH_TO_YOUR_PROJECT\\\\server.py\"\n       ],\n       \"env\": {\n         \"TRIPADVISOR_API_KEY\": \"YOUR_API_KEY_HERE\"\n       }\n     }\n   }\n   ```\n4. Replace `PATH_TO_YOUR_PROJECT` with the absolute path to your project directory\n5. Replace `YOUR_API_KEY_HERE` with your actual TripAdvisor API key\n\n### Using the Vacation Planner\n\n1. Start a new conversation in Claude\n2. Just prompt anything with \"Vacation Planner\" prompt\n3. Follow the interactive prompts to plan your perfect vacation!\n\n## API Endpoints Used\n\n- Location Search: Find locations by name and category\n- Location Details: Get comprehensive information about a location\n- Location Photos: View photos of a location\n- Location Reviews: Read reviews of a location\n- Nearby Search: Find locations near a specific point\n\n## Troubleshooting\n\n- If you see 401 Unauthorized errors, check that your API key is correct and that your IP is whitelisted in the TripAdvisor Developer Portal\n- For issues with Claude Desktop integration, verify your configuration settings and ensure the path to server.py is correct\n- If Claude is failing to complete, then there is a high chance that you are using too many input tokens. get_location_details_tool is usually the culprit.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "tripadvisor",
        "mcp",
        "tripadvisor mcp",
        "ecommerce retail",
        "tripadvisor data"
      ],
      "category": "ecommerce-and-retail"
    },
    "ibraheem4--clover-mcp": {
      "owner": "ibraheem4",
      "name": "clover-mcp",
      "url": "https://github.com/ibraheem4/clover-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Access Clover merchant data to retrieve merchant information, list inventory items, and manage orders through integration with generative AI models using OAuth authentication.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "oauth",
        "ecommerce",
        "merchant",
        "merchant data",
        "merchant information",
        "clover merchant"
      ],
      "category": "ecommerce-and-retail"
    },
    "lumile--mercadolibre-mcp": {
      "owner": "lumile",
      "name": "mercadolibre-mcp",
      "url": "https://github.com/lumile/mercadolibre-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/lumile.webp",
      "description": "Access MercadoLibre's API to search products, retrieve reviews, and check seller reputations.",
      "stars": 7,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-22T13:38:45Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/lumile-mercadolibre-mcp-badge.png)](https://mseep.ai/app/lumile-mercadolibre-mcp)\n\n![](https://badge.mcpx.dev?type=server 'MCP Server')\n[![smithery badge](https://smithery.ai/badge/@lumile/mercadolibre-mcp)](https://smithery.ai/server/@lumile/mercadolibre-mcp)\n# MercadoLibre MCP Server\n\nAn MCP server that provides access to MercadoLibre API.\n\n<a href=\"https://glama.ai/mcp/servers/hgsefxwq4c\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/hgsefxwq4c/badge\" alt=\"MercadoLibre Server MCP server\" /></a>\n\n**IMPORTANT**: due to changes in MercadoLibre's API policies, it is no longer possible to access their search API. As a result, we have had to deprecate the `search_products` tool. This change is in compliance with MercadoLibre's new restrictions on API usage. Other tools remain functional and will continue to be supported.\n\n## Features\n\n### Tools\n- `search_products` - **DEPRECATED**: Search products in MercadoLibre, and return a list of products. (No longer available due to API policy changes)\n  - `query` - The search query\n  - `category` - The category to search in\n  - `filters` - The filters to apply\n- `product_reviews` - Get product reviews\n- `product_description` - Get product description\n- `seller_reputation` - Get seller reputation\n\n## Setup\n\n### Prerequisites\n\nYou'll need a MercadoLibre Client ID and Client Secret to use this server.  You can get one for free at https://developers.mercadolibre.com/, create an application and get the credentials.\n\nOnce you have the credentials, you can set the `CLIENT_ID` and `CLIENT_SECRET` environment variables.  And theres also the need to set the `SITE_ID` environment variable to the site you want to use.\n\n### Mercado Libre Site ID\n- MLA: Argentina (default)\n- MLB: Brasil\n- MCO: Colombia\n- MEX: México\n- MLU: Uruguay\n- MLC: Chile\n\n### Installation\n\nThere are two ways to use this server:\n\n#### Installing via Smithery\n\nTo install MercadoLibre MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@lumile/mercadolibre-mcp):\n\n```bash\nnpx -y @smithery/cli install @lumile/mercadolibre-mcp --client claude\n```\n\n#### Option 1: NPX (Recommended)\nAdd this configuration to your Claude Desktop config file:\n\n```json\n{\n  \"mcpServers\": {\n    \"mercadolibre-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mercadolibre-mcp\"\n      ],\n      \"env\": {\n        \"CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"CLIENT_SECRET\": \"<YOUR_CLIENT_SECRET>\",\n        \"SITE_ID\": \"<YOUR_SITE_ID>\"\n      }\n    }\n  }\n}\n```\n#### Option 2: Local Installation\n1. Clone the repository\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the server:\n```bash\nnpm run build\n```\n\n4. Add this configuration to your Claude Desktop config:\n```json\n{\n  \"mcpServers\": {\n    \"mercadolibre-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/mercadolibre-mcp/dist/index.js\"\n      ],\n      \"env\": {\n        \"CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"CLIENT_SECRET\": \"<YOUR_CLIENT_SECRET>\",\n        \"SITE_ID\": \"<YOUR_SITE_ID>\"\n      }\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## Contributing\n\nContributions are extremely welcome! Please open a PR with new MCP servers or any other improvements to the codebase.\n\n## Disclaimer\n\nThis project is not affiliated with MercadoLibre. All logos are trademarks of their respective owners.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details.\n\n------\n\n<p align=\"center\">\nMade with ❤️ by Lumile\n</p>\n\n<p align=\"center\">\n<a href=\"https://www.lumile.com.ar\">Contact us</a> for custom AI development and automation solutions.\n</p>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "mercadolibre",
        "retail",
        "mercadolibre api",
        "ecommerce retail",
        "retail lumile"
      ],
      "category": "ecommerce-and-retail"
    },
    "newerton--mcp-mercado-livre": {
      "owner": "newerton",
      "name": "mcp-mercado-livre",
      "url": "https://github.com/newerton/mcp-mercado-livre",
      "imageUrl": "/freedevtools/mcp/pfp/newerton.webp",
      "description": "Scrapes product data, including prices and availability, directly from Mercado Livre. Integrates with Mercado Livre's API to provide reliable and up-to-date marketplace information.",
      "stars": 1,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-31T17:28:35Z",
      "readme_content": "<div align=\"center\">\n\n# Mercado Livre - MCP Server\n\nThis project is part of the Model Context Protocol (MCP) ecosystem and provides tools for integrating with external sources and managing specific domain models. It is designed to demonstrate how to build an MCP server that scrapes products from Mercado Livre, with strong data validation to ensure reliability.\n\n</div>\n\n<table style=\"border-collapse: collapse; width: 100%; table-layout: fixed;\">\n<tr>\n<td style=\"width: 40%; padding: 15px; vertical-align: middle; border: none;\">An integration that enables MCP tools to scrape product data, such as prices and availability, directly from Mercado Livre.</td>\n<td style=\"width: 60%; padding: 0; vertical-align: middle; border: none; min-width: 300px; text-align: center;\"><a href=\"https://glama.ai/mcp/servers/@newerton/mcp-mercado-livre\">\n  <img style=\"max-width: 100%; height: auto; min-width: 300px;\" src=\"https://glama.ai/mcp/servers/@newerton/mcp-mercado-livre/badge\" alt=\"Mercado Livre - MCP Server\" />\n</a></td>\n</tr>\n</table>\n\n## Table of Contents\n\n- [Features](#features)\n- [Architecture](#architecture)\n- [Installation](#installation)\n- [MCP Server Configuration in VSCode](#mcp-server-configuration-in-vscode)\n- [MCP Server Output in VSCode](#mcp-server-output-in-vscode)\n- [Contribution](#contribution)\n- [License](#license)\n\n## Features\n\n- **get-produtos**: Fetch basic product information.\n- Input validation using [Zod](https://github.com/colinhacks/zod).\n- Integration with the Mercado Livre API using `fetch` (infrastructure layer).\n\n## Architecture\n\nThe project follows a layered architecture inspired by **Domain-Driven Design** (DDD) patterns:\n\n- **Domain** (`src/domain`):\n  Defines interfaces and types that represent data structures (e.g., `Mercado Livre`).\n\n- **Infrastructure** (`src/infrastructure`):\n  Implements external services, such as `MercadoLivreApiService`, responsible for making HTTP calls to the Mercado Livre API.\n\n- **Application** (`src/application`):\n  Contains business logic in `MercadoLivreService`, which processes and formats data from the infrastructure.\n\n- **Interface** (`src/interface`):\n  Includes controllers (`MercadoLivreToolsController`) that register tools in the MCP server, define validation schemas, and return results.\n\n- **Entry Point** (`src/main.ts`):\n  Initializes the `McpServer`, configures the transport (`StdioServerTransport`), instantiates services and controllers, and starts listening on _stdio_.\n\nThe folder structure is as follows:\n```\nsrc/\n├── domain/\n│   └── models/           # Domain interfaces\n├── infrastructure/\n│   └── services/         # External API implementations (Mercado Livre)\n├── application/\n│   └── services/         # Business logic and data formatting\n├── interface/\n│   └── controllers/      # MCP tool registration and validation\n└── main.ts               # Server entry point\nbuild/                    # Compiled JavaScript code\n.vscode/                  # Contains the mcp.json file, MCP Server config\n```\n\n## Installation\n\n```bash\ngit clone git@github.com:newerton/mcp-mercado-livre.git\ncd mcp-mercado-livre\nnpm install\nnpm run build\n```\n\n## MCP Server Configuration in VSCode\n\n1. Press `Ctrl+Shift+P` and select \"MCP: List Servers\"\n2. Select \"products\" and then \"Start Server\"\n\n## MCP Server Output in VSCode\n\n1. Press `Ctrl+Shift+P` and select \"MCP: List Servers\"\n2. Select \"products\" and then \"Show Output\"\n\n## Contribution\n\nPull requests are welcome! Feel free to open issues and discuss improvements.\n\n## License\n\nThis project is licensed under the MIT license - see the [LICENSE](https://github.com/imprvhub/mcp-claude-hackernews/blob/main/LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "marketplace",
        "mercado",
        "ecommerce retail",
        "retail newerton",
        "marketplace information"
      ],
      "category": "ecommerce-and-retail"
    },
    "pashaydev--terminal.shop.mcp": {
      "owner": "pashaydev",
      "name": "terminal.shop.mcp",
      "url": "https://github.com/pashaydev/terminal.shop.mcp",
      "imageUrl": "/freedevtools/mcp/pfp/pashaydev.webp",
      "description": "Interact with Terminal.shop's API to browse coffee products, manage shopping carts, place orders, and handle subscriptions. The server also facilitates user profile management and secure payment processing.",
      "stars": 1,
      "forks": 3,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-05-27T20:37:18Z",
      "readme_content": "# Terminal.shop MCP Server\n\nThis project implements a mcp server for interacting with the terminal.shop. It allows ai assistants to seamlessly browse products, manage shopping carts, place orders, and handle subscriptions through Terminal.shop's API.\n\n<a href=\"https://glama.ai/mcp/servers/@pashaydev/terminal.shop.mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@pashaydev/terminal.shop.mcp/badge\" alt=\"Terminal.shop Server MCP server\" />\n</a>\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/pashaydev-terminal-shop-mcp-badge.png)](https://mseep.ai/app/pashaydev-terminal-shop-mcp)\n\n## Features\n\n- **Product Management**: Browse and search Terminal.shop's coffee products\n- **Cart Operations**: Add items to cart, set shipping address and payment method\n- **Order Management**: Place orders and view order history\n- **Subscription Handling**: Create and manage recurring coffee subscriptions\n- **User Profile**: Update user information and manage shipping addresses\n- **Payment Methods**: Secure handling of payment information\n\n## Setup\n\n### Prerequisites\n\n- Node.js\n- A Terminal.shop account\n- A Terminal.shop API token\n\n### Installation\n\n1. Clone this repository\n\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n4. Connect to Terminal.shop and create a new token:\n   ```bash\n   ssh terminal.shop -t tokens\n   ```\n\n5. Open claude.app, go to settings, click 'developer' option and 'edit config':\n\n```\n{\n  \"mcpServers\": {\n    \"terminal-shop-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\"path_to_folder/server.js\"],\n      \"env\": {\n        \"TERMINAL_API_TOKEN\": \"token here\"\n      }\n    }\n  }\n}\n```\n\n6. Restart claude.app, and make sure you see hammer icon under input\n\n7. Ask claude to get list of products or create a new address, subscription etc\n\n## Available Resources\n\nThe MCP server provides the following resources:\n\n- `terminal://products` - List all available products\n- `terminal://product/{id}` - Get details for a specific product\n- `terminal://orders` - View order history\n- `terminal://profile` - Access user profile information\n- `terminal://addresses` - Manage shipping addresses\n- `terminal://cards` - Manage payment methods\n- `terminal://cart` - View current shopping cart\n- `terminal://subscriptions` - Manage coffee subscriptions\n\n## Tools\n\nThe server provides various tools for interacting with Terminal.shop:\n\n### Product Tools\n- `search-products` - Search for products by keyword\n- `get-product-details` - Get detailed information about a specific product\n\n### Cart Tools\n- `add-to-cart` - Add a product variant to the cart\n- `set-cart-address` - Set the shipping address for the cart\n- `set-cart-card` - Set the payment method for the cart\n- `clear-cart` - Empty the shopping cart\n- `checkout` - Convert the cart to an order\n\n### Order Tools\n- `create-order` - Create an order directly without using the cart\n\n### User Management Tools\n- `update-profile` - Update user profile information\n- `create-address` - Add a new shipping address\n- `delete-address` - Remove a shipping address\n- `collect-card` - Generate a secure URL for adding payment information\n- `create-card` - Add a card using a Stripe token\n- `delete-card` - Remove a payment method\n\n### Subscription Tools\n- `create-subscription` - Start a new coffee subscription\n- `cancel-subscription` - Cancel an existing subscription\n\n### Account Tools\n- `create-token` - Create a new personal access token\n- `delete-token` - Delete a personal access token\n- `get-app-data` - Fetch all account data at once\n\n## Prompt Templates\n\nThe server includes several prompt templates to help AI assistants provide better responses:\n\n- `browse-products` - Guide for browsing and finding products\n- `manage-cart` - Help with shopping cart management\n- `place-order` - Assistance with placing an order\n- `manage-subscription` - Support for subscription management\n- `manage-profile` - Guide for profile and address management\n\n## API Documentation\n\nThis MCP server is built on top of the Terminal.shop API. For detailed information about the underlying API, refer to the Terminal API documentation.\n\n## Security Considerations\n\n- The server handles sensitive payment information through secure URLs rather than directly processing card details\n- API tokens are stored in environment variables to prevent exposure\n- User data is handled according to Terminal.shop's security practices\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "shop",
        "retail",
        "shop mcp",
        "ecommerce retail",
        "terminal shop"
      ],
      "category": "ecommerce-and-retail"
    },
    "rishabh17081--paypal-au-subscription-connector": {
      "owner": "rishabh17081",
      "name": "paypal-au-subscription-connector",
      "url": "https://github.com/rishabh17081/paypal-au-subscription-connector",
      "imageUrl": "/freedevtools/mcp/pfp/rishabh17081.webp",
      "description": "Integrate with PayPal's Account Updater service to manage and maintain up-to-date payment card information within e-commerce systems. This server allows for subscribing cards, retrieving subscription details, and processing updates through webhook notifications.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-03-17T02:49:53Z",
      "readme_content": "# PayPal Account Updater Subscription Connector for MCP\n\nThis MCP (Model Context Protocol) connector provides tools for integrating with PayPal's Account Updater service, which helps maintain fresh payment card information in your e-commerce system.\n\n## Features\n\n- Subscribe payment cards to PayPal's Account Updater service\n- Retrieve subscription details\n- Process webhook notifications for card updates\n- Update your merchant database with fresh card information\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/rishabh17081/paypal-au-subscription-connector.git\n\n# Install dependencies\npip install fastmcp requests\n```\n\n## Usage\n\n### Running the MCP Server\n\n```bash\n# Set environment variables\nexport PAYPAL_CLIENT_ID=\"your_client_id\"\nexport PAYPAL_CLIENT_SECRET=\"your_client_secret\"\nexport PAYPAL_ENVIRONMENT=\"SANDBOX\"  # or \"LIVE\" or \"MOCKDB\"\n\n# Run the MCP server\npython -m fastmcp run paypal_au_subscription_mcp.py\n```\n\n### Using with Claude\n\nAdd the MCP server to your Claude configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"paypal-au\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"fastmcp\", \"run\", \"/path/to/paypal_au_subscription_mcp.py\"],\n      \"env\": {\n        \"PAYPAL_CLIENT_ID\": \"your_client_id\",\n        \"PAYPAL_CLIENT_SECRET\": \"your_client_secret\",\n        \"PAYPAL_ENVIRONMENT\": \"SANDBOX\"\n      }\n    }\n  }\n}\n```\n\n## Available Tools\n\n### getFreshCardsSolve\n\nProvides information about PayPal Account Updater as a solution for card freshness management.\n\n### create_subscription\n\nCreate an account status subscription in PayPal.\n\n```python\ncreate_subscription(pan=\"4111111111111111\", expiry_date=\"2025-12\")\n```\n\n### get_subscription\n\nGet details of an account status subscription in PayPal.\n\n```python\nget_subscription(subscription_id=\"SUB-1234567890\")\n```\n\n### subscribe_merchant_to_paypal_au_service\n\nProvides instructions for subscribing merchant cards to PayPal AU service.\n\n### setup_webhook_events_in_merchant_code_base\n\nSets up webhook event handling code in the merchant's codebase.\n\n```python\nsetup_webhook_events_in_merchant_code_base(url=\"/path/to/merchant/codebase\")\n```\n\n## Webhook Integration\n\nTo receive card update notifications, set up a webhook endpoint in your application that listens for PayPal's card update events. The connector includes sample code for implementing this webhook.\n\n## Environment Variables\n\n- `PAYPAL_CLIENT_ID`: Your PayPal API client ID\n- `PAYPAL_CLIENT_SECRET`: Your PayPal API client secret\n- `PAYPAL_ENVIRONMENT`: The environment to use (\"SANDBOX\", \"LIVE\", or \"MOCKDB\")\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "paypal",
        "ecommerce",
        "payment",
        "integrate paypal",
        "paypal account",
        "subscription connector"
      ],
      "category": "ecommerce-and-retail"
    },
    "sellersmith--tailorkit-mcp": {
      "owner": "sellersmith",
      "name": "tailorkit-mcp",
      "url": "https://github.com/sellersmith/tailorkit-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/sellersmith.webp",
      "description": "Enables AI assistants to manage and customize e-commerce product templates through natural language commands, facilitating the creation, retrieval, and manipulation of product templates and layers with integration into Shopify.",
      "stars": 6,
      "forks": 3,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-05-23T02:39:54Z",
      "readme_content": "# TailorKit MCP\n\n[TailorKit MCP](https://apps.shopify.com/tailorkit) is a powerful product customization framework for e-commerce that enables merchants to create interactive personalization experiences. Features template management, layer control, and Shopify integration for offering customizable products with minimal development effort.\n\n![TailorKit MCP](https://cdn.shopify.com/app-store/listing_images/958e5ec4440b11eb378c3c27a7a4097d/icon/CKPAh-fW_YYDEAE=.png)\n\n## Overview\n\nThis MCP (Model Context Protocol) server connects Claude and other AI assistants to the TailorKit API, enabling them to manage customizable product templates for e-commerce platforms. With TailorKit MCP, AI assistants can create, retrieve, and manipulate product templates and their layers directly through natural language conversations.\n\n## Tools\n\n1. `get_list_templates`\n\n   - Get a list of templates with shop domain\n   - Required inputs:\n     - `shopDomain` (string): The shop domain ending with .myshopify.com\n   - Optional inputs:\n     - `limit` (number, default: 5): Maximum number of templates to return\n     - `page` (number, default: 1): Page number for pagination\n     - `sort` (string, default: \"updatedAt\\_\\_desc\"): The sort order\n     - `filter` (string): Filter string for template search\n   - Returns: List of templates with their details\n\n2. `get_detail_template`\n\n   - Get detailed information about a specific template\n   - Required inputs:\n     - `_id` (string): The ID of the template\n     - `shopDomain` (string): The shop domain ending with .myshopify.com\n   - Returns: Detailed template information including layers and settings\n\n3. `create_template`\n\n   - Create a new template for a shop\n   - Required inputs:\n     - `shopDomain` (string): The shop domain ending with .myshopify.com\n     - `name` (string, default: \"New Template\"): Name of the template\n     - `dimension` (object): Width, height, measurement unit, and resolution\n   - Optional inputs:\n     - `_id` (string, format: uuid): Custom ID for the template\n     - `layers` (array): Initial layers configuration\n   - Returns: Confirmation of template creation with template ID\n\n4. `get_list_layers_of_template`\n   - Get all layers for a specific template\n   - Required inputs:\n     - `_id` (string): The ID of the template\n     - `shopDomain` (string): The shop domain ending with .myshopify.com\n   - Returns: List of all layers in the template with their properties\n\n## Setup\n\n### Usage with Claude Desktop\n\nAdd the following to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"tailorkit-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/your/dist/index.js\"],\n      \"env\": {\n        \"HOST\": \"https://your-api-host.com\",\n        \"ACCESS_TOKEN\": \"your-access-token\"\n      }\n    }\n  }\n}\n```\n\n### Environment Variables\n\n1. `HOST`: Required. The host URL for your TailorKit API.\n2. `ACCESS_TOKEN`: Required. Your TailorKit API access token for authentication.\n\n### Access Token\n\nGo to `Settings` -> `Preferences` -> `Generate access token`\n\n![TailorKit Access Token](https://img001.prntscr.com/file/img001/iHKoBGqbRuK9OxeiBqnxHA.png)\n\n## Installation\n\n### From npm\n\n```bash\nnpm install @sellersmith/tailorkit-mcp\n```\n\n### From GitHub\n\n```bash\ngit clone https://github.com/sellersmith/tailorkit-mcp.git\ncd tailorkit-mcp\nnpm install\nnpm run build\n```\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Run the server locally\nnode dist/index.js\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "shopify",
        "ecommerce",
        "tailorkit",
        "integration shopify",
        "tailorkit mcp",
        "ecommerce retail"
      ],
      "category": "ecommerce-and-retail"
    },
    "simonwfarrow--worldpay-mcp": {
      "owner": "simonwfarrow",
      "name": "worldpay-mcp",
      "url": "https://github.com/simonwfarrow/worldpay-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Integrate Worldpay payment processing into applications, enabling the generation of customized checkout forms and secure handling of payment data queries. Supports both stdio and SSE transport methods for communication with AI models.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "worldpay",
        "ecommerce",
        "payment",
        "payment processing",
        "worldpay payment",
        "worldpay mcp"
      ],
      "category": "ecommerce-and-retail"
    },
    "tanush-yadav--shopify-mcp": {
      "owner": "tanush-yadav",
      "name": "shopify-mcp",
      "url": "https://github.com/tanush-yadav/shopify-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/tanush-yadav.webp",
      "description": "Interact with Shopify store data including managing products, customers, orders, discounts, and collections through a GraphQL API. Supports comprehensive management with clear error handling and debugging functionalities.",
      "stars": 2,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-05-10T14:54:01Z",
      "readme_content": "# Shopify MCP Server\n\nMCP Server for Shopify API, enabling interaction with store data (products, customers, orders, etc.) via GraphQL.\n\n\n## Features\n\nProvides tools for product, customer, and order management, direct GraphQL integration, and clear error handling.\n\n## Prerequisites\n\n1. Node.js (v16+)\n2. Shopify Custom App Access Token\n\n## Installation\n\n```bash\ngit clone https://github.com/pashpashpash/shopify-mcp-server.git\ncd shopify-mcp-server\nnpm install\nnpm run build\n```\n\n## Shopify Setup & Configuration\n\n1.  **Create Custom App**: In Shopify admin > **Settings** > **Apps and sales channels** > **Develop apps** > **Create an app**.\n2.  **Configure Scopes**: Grant `read/write` permissions for `products`, `customers`, and `orders`.\n3.  **Install App & Get Token**: Install the app and copy the **Admin API access token**.\n4.  **Create `.env` file** in the project root:\n    ```\n    SHOPIFY_ACCESS_TOKEN=your_access_token\n    MYSHOPIFY_DOMAIN=your-store.myshopify.com\n    ```\n5.  **Configure Claude Desktop** (`claude_desktop_config.json`):\n    *   macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n    *   Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n    ```json\n    {\n      \"mcpServers\": {\n        \"shopify\": {\n          \"command\": \"node\",\n          \"args\": [\"path/to/shopify-mcp-server/dist/index.js\"],\n          \"env\": {\n            \"SHOPIFY_ACCESS_TOKEN\": \"your_access_token\",\n            \"MYSHOPIFY_DOMAIN\": \"your-store.myshopify.com\"\n          }\n        }\n      }\n    }\n    ```\n    *Note: Use the correct path to the cloned repo and store your token securely.*\n\n## Available Tools\n\n### Product Management\n\n1.  `findProducts`: Get all products or search by title.\n    *   `searchTitle` (optional string): Filter by title.\n    *   `limit` (number): Max products.\n2.  `listProductsInCollection`: Get products from a collection.\n    *   `collectionId` (string): Collection ID.\n    *   `limit` (optional number, default: 10): Max products.\n3.  `getProductsByIds`: Get products by IDs.\n    *   `productIds` (array of strings): Product IDs.\n4.  `getVariantsByIds`: Get variants by IDs.\n    *   `variantIds` (array of strings): Variant IDs.\n\n### Customer Management\n\n5.  `listCustomers`: Get customers with pagination.\n    *   `limit` (optional number): Max customers.\n    *   `next` (optional string): Next page cursor.\n6.  `addCustomerTags`: Add tags to a customer.\n    *   `customerId` (string): Customer ID.\n    *   `tags` (array of strings): Tags to add.\n\n### Order Management\n\n7.  `findOrders`: Get orders with advanced filtering/sorting.\n    *   `first` (optional number): Limit orders.\n    *   `after` (optional string): Next page cursor.\n    *   `query` (optional string): Filter query.\n    *   `sortKey` (optional enum): Sort field.\n    *   `reverse` (optional boolean): Reverse sort.\n8.  `getOrderById`: Get a single order by ID.\n    *   `orderId` (string): Order ID.\n9.  `createDraftOrder`: Create a draft order.\n    *   `lineItems` (array): Items (variantId, quantity).\n    *   `email` (string): Customer email.\n    *   `shippingAddress` (object): Shipping details.\n    *   `note` (optional string): Order note.\n10. `completeDraftOrder`: Complete a draft order.\n    *   `draftOrderId` (string): Draft order ID.\n    *   `variantId` (string): Variant ID.\n\n### Discount Management\n\n11. `createDiscountCode`: Create a basic discount code.\n    *   `title` (string): Discount title.\n    *   `code` (string): Discount code.\n    *   `valueType` (enum): 'percentage' or 'fixed_amount'.\n    *   `value` (number): Discount value.\n    *   `startsAt` (string): Start date (ISO).\n    *   `endsAt` (optional string): End date (ISO).\n    *   `appliesOncePerCustomer` (boolean): Limit one use per customer.\n\n### Collection Management\n\n12. `listCollections`: Get all collections.\n    *   `limit` (optional number, default: 10): Max collections.\n    *   `name` (optional string): Filter by name.\n\n### Shop Information\n\n13. `getShopDetails`: Get basic shop details (No inputs).\n14. `getExtendedShopDetails`: Get extended shop details (No inputs).\n\n### Webhook Management\n\n15. `manageWebhooks`: Manage webhooks.\n    *   `action` (enum): 'subscribe', 'find', 'unsubscribe'.\n    *   `callbackUrl` (string): Webhook URL.\n    *   `topic` (enum): Webhook topic.\n    *   `webhookId` (optional string): Required for unsubscribe.\n\n### Debugging Tools\n\n16. `debugGetVariantMetafield`: Get variant & `size_chart_json` metafield.\n    *   `variantId` (string): Variant GID.\n\n### Developer Tools\n\n17. `introspect_admin_schema`: Introspect Admin API GraphQL schema.\n    *   `query` (string): Filter term.\n    *   `filter` (optional array): Filter by 'types', 'queries', 'mutations', 'all'.\n18. `search_dev_docs`: Search shopify.dev docs.\n    *   `prompt` (string): Search query.\n\n## Debugging\n\nCheck Claude Desktop MCP logs:\n`tail -n 20 -f ~/Library/Logs/Claude/mcp*.log`\n\nCommon issues:\n*   **Authentication**: Check token, domain format, API scopes.\n*   **API Errors**: Check rate limits, input formats, required fields.\n\n## Development\n\n```bash\nnpm install\nnpm run build\nnpm test\n```\n\n## Dependencies\n\n- @modelcontextprotocol/sdk\n- graphql-request\n- zod\n\n## License\n\nMIT\n\n---\nNote: Fork of [original shopify-mcp-server repository](https://github.com/rezapex/shopify-mcp-server-main)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "shopify",
        "ecommerce",
        "graphql",
        "yadav shopify",
        "shopify store",
        "shopify mcp"
      ],
      "category": "ecommerce-and-retail"
    },
    "tdergouzi--mcp-server-web3": {
      "owner": "tdergouzi",
      "name": "mcp-server-web3",
      "url": "https://github.com/tdergouzi/mcp-server-web3",
      "imageUrl": "/freedevtools/mcp/pfp/tdergouzi.webp",
      "description": "Integrates web3 functionalities to facilitate access to blockchain capabilities and decentralized data through a standardized interface. Provides tools and resources for enhancing applications with web3 capabilities.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-03-19T08:53:42Z",
      "readme_content": "# mcp-server-web3\nThe web3 function plugin server base on MCP of Anthropic.\n\n## Install the libs\n\n```sh\nyarn\n```\n\n## Build the code into index.js\n```sh\nyarn build\n```\n\n## Update the MCP server config according to the client\n```sh\n# MacOS and Claude client\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n```json\n{\n    \"mcpServers\": {\n        \"web3\": {\n            \"command\": \"node\",\n            \"args\": [\"/ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-server-web3/build/index.js\"],\n            \"env\":{\n              \"CMC_API_KEY\": \"your cmc api key\"\n            }\n        }\n    }\n}\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "web3",
        "blockchain",
        "ecommerce retail",
        "integrates web3",
        "web3 capabilities"
      ],
      "category": "ecommerce-and-retail"
    },
    "techspawn--woocommerce-mcp-server": {
      "owner": "techspawn",
      "name": "woocommerce-mcp-server",
      "url": "https://github.com/techspawn/woocommerce-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/techspawn.webp",
      "description": "Manage a WooCommerce store using a unified API with JSON-RPC calls. Interact with various store elements such as products, orders, customers, shipping, and tax configurations directly through the WordPress REST API.",
      "stars": 67,
      "forks": 37,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-30T18:51:16Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/mseep-audited.png)](https://mseep.ai/app/techspawn-woocommerce-mcp-server)\n\n# WooCommerce MCP Server\n\nA Model Context Protocol (MCP) server for WooCommerce integration, compatible with Windows, macOS, and Linux.\n\n## Overview\n\nThis MCP server enables interaction with WooCommerce stores through the WordPress REST API. It provides comprehensive tools for managing all aspects of products, orders, customers, shipping, taxes, discounts, and store configuration using JSON-RPC 2.0 protocol.\n\n## Installation\n\n1. Clone the repository\n2. Install dependencies:\n```bash\nnpm install\n```\n3. Build the project:\n```bash\nnpm run build\n```\n\n## Configuration\n\nAdd the server to your MCP settings file with environment variables for credentials:\n\n```json\n{\n  \"mcpServers\": {\n    \"woocommerce\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/build/index.js\"],\n      \"env\": {\n        \"WORDPRESS_SITE_URL\": \"https://your-wordpress-site.com\",\n        \"WOOCOMMERCE_CONSUMER_KEY\": \"your-woocommerce-consumer-key\",\n        \"WOOCOMMERCE_CONSUMER_SECRET\": \"your-woocommerce-consumer-secret\",\n        \"WORDPRESS_USERNAME\": \"your-wordpress-username\",\n        \"WORDPRESS_PASSWORD\": \"your-wordpress-password\"\n      }\n    }\n  }\n}\n```\n\n### Environment Variables\n\n#### Required for WooCommerce API access:\n- `WORDPRESS_SITE_URL`: Your WordPress site URL (WooCommerce is a WordPress plugin)\n- `WOOCOMMERCE_CONSUMER_KEY`: WooCommerce REST API consumer key\n- `WOOCOMMERCE_CONSUMER_SECRET`: WooCommerce REST API consumer secret\n\n#### Required only for WordPress API methods:\n- `WORDPRESS_USERNAME`: WordPress username with appropriate permissions\n- `WORDPRESS_PASSWORD`: WordPress password for authentication\n\nYou can also provide these credentials in the request parameters if you prefer not to use environment variables.\n\n## Authentication Options\n\n### WooCommerce Authentication\nWooCommerce API access requires consumer keys that you can generate in your WordPress dashboard under WooCommerce → Settings → Advanced → REST API.\n\n### WordPress Authentication\nFor WordPress-specific methods (like managing posts), you need to provide:\n- Username/password credentials for basic authentication\n- The WordPress REST API must be enabled on your site\n\n## API Methods\n\nThe server supports both WordPress and WooCommerce API methods. Here's a list of available methods grouped by category:\n\n### WordPress Content Management\n\nThese methods require WordPress username/password credentials and are independent of the WooCommerce API.\n\n| Method | Description |\n|--------|-------------|\n| `create_post` | Create a new WordPress post |\n| `get_posts` | Retrieve WordPress posts |\n| `update_post` | Update an existing WordPress post |\n| `get_post_meta` | Get post metadata |\n| `update_post_meta` | Update post metadata |\n| `create_post_meta` | Create post metadata |\n| `delete_post_meta` | Delete post metadata |\n\n### WooCommerce Products\n\n| Method | Description |\n|--------|-------------|\n| `get_products` | Retrieve a list of products |\n| `get_product` | Get a single product by ID |\n| `create_product` | Create a new product |\n| `update_product` | Update an existing product |\n| `delete_product` | Delete a product |\n| `get_product_meta` | Get product metadata |\n| `create_product_meta` | Create/update product metadata |\n| `update_product_meta` | Update product metadata (alias for create) |\n| `delete_product_meta` | Delete product metadata |\n\n### Product Categories\n\n| Method | Description |\n|--------|-------------|\n| `get_product_categories` | Retrieve product categories |\n| `get_product_category` | Get a single product category |\n| `create_product_category` | Create a new product category |\n| `update_product_category` | Update a product category |\n| `delete_product_category` | Delete a product category |\n\n### Product Tags\n\n| Method | Description |\n|--------|-------------|\n| `get_product_tags` | Retrieve product tags |\n| `get_product_tag` | Get a single product tag |\n| `create_product_tag` | Create a new product tag |\n| `update_product_tag` | Update a product tag |\n| `delete_product_tag` | Delete a product tag |\n\n### Product Attributes\n\n| Method | Description |\n|--------|-------------|\n| `get_product_attributes` | Retrieve product attributes |\n| `get_product_attribute` | Get a single product attribute |\n| `create_product_attribute` | Create a new product attribute |\n| `update_product_attribute` | Update a product attribute |\n| `delete_product_attribute` | Delete a product attribute |\n| `get_attribute_terms` | Retrieve attribute terms |\n| `get_attribute_term` | Get a single attribute term |\n| `create_attribute_term` | Create a new attribute term |\n| `update_attribute_term` | Update an attribute term |\n| `delete_attribute_term` | Delete an attribute term |\n\n### Product Variations\n\n| Method | Description |\n|--------|-------------|\n| `get_product_variations` | Retrieve product variations |\n| `get_product_variation` | Get a single product variation |\n| `create_product_variation` | Create a new product variation |\n| `update_product_variation` | Update a product variation |\n| `delete_product_variation` | Delete a product variation |\n\n### Product Reviews\n\n| Method | Description |\n|--------|-------------|\n| `get_product_reviews` | Retrieve product reviews |\n| `get_product_review` | Get a single product review |\n| `create_product_review` | Create a new product review |\n| `update_product_review` | Update a product review |\n| `delete_product_review` | Delete a product review |\n\n### WooCommerce Orders\n\n| Method | Description |\n|--------|-------------|\n| `get_orders` | Retrieve a list of orders |\n| `get_order` | Get a single order by ID |\n| `create_order` | Create a new order |\n| `update_order` | Update an existing order |\n| `delete_order` | Delete an order |\n| `get_order_meta` | Get order metadata |\n| `create_order_meta` | Create/update order metadata |\n| `update_order_meta` | Update order metadata (alias for create) |\n| `delete_order_meta` | Delete order metadata |\n\n### Order Notes\n\n| Method | Description |\n|--------|-------------|\n| `get_order_notes` | Retrieve order notes |\n| `get_order_note` | Get a single order note |\n| `create_order_note` | Create a new order note |\n| `delete_order_note` | Delete an order note |\n\n### Order Refunds\n\n| Method | Description |\n|--------|-------------|\n| `get_order_refunds` | Retrieve order refunds |\n| `get_order_refund` | Get a single order refund |\n| `create_order_refund` | Create a new order refund |\n| `delete_order_refund` | Delete an order refund |\n\n### WooCommerce Customers\n\n| Method | Description |\n|--------|-------------|\n| `get_customers` | Retrieve a list of customers |\n| `get_customer` | Get a single customer by ID |\n| `create_customer` | Create a new customer |\n| `update_customer` | Update an existing customer |\n| `delete_customer` | Delete a customer |\n| `get_customer_meta` | Get customer metadata |\n| `create_customer_meta` | Create/update customer metadata |\n| `update_customer_meta` | Update customer metadata (alias for create) |\n| `delete_customer_meta` | Delete customer metadata |\n\n### Shipping\n\n| Method | Description |\n|--------|-------------|\n| `get_shipping_zones` | Retrieve shipping zones |\n| `get_shipping_zone` | Get a single shipping zone |\n| `create_shipping_zone` | Create a new shipping zone |\n| `update_shipping_zone` | Update a shipping zone |\n| `delete_shipping_zone` | Delete a shipping zone |\n| `get_shipping_methods` | Retrieve shipping methods |\n| `get_shipping_zone_methods` | Get shipping methods for a zone |\n| `create_shipping_zone_method` | Create a new shipping method for a zone |\n| `update_shipping_zone_method` | Update a shipping method for a zone |\n| `delete_shipping_zone_method` | Delete a shipping method from a zone |\n| `get_shipping_zone_locations` | Get locations for a shipping zone |\n| `update_shipping_zone_locations` | Update locations for a shipping zone |\n\n### Taxes\n\n| Method | Description |\n|--------|-------------|\n| `get_tax_classes` | Retrieve tax classes |\n| `create_tax_class` | Create a new tax class |\n| `delete_tax_class` | Delete a tax class |\n| `get_tax_rates` | Retrieve tax rates |\n| `get_tax_rate` | Get a single tax rate |\n| `create_tax_rate` | Create a new tax rate |\n| `update_tax_rate` | Update a tax rate |\n| `delete_tax_rate` | Delete a tax rate |\n\n### Discounts/Coupons\n\n| Method | Description |\n|--------|-------------|\n| `get_coupons` | Retrieve coupons |\n| `get_coupon` | Get a single coupon |\n| `create_coupon` | Create a new coupon |\n| `update_coupon` | Update a coupon |\n| `delete_coupon` | Delete a coupon |\n\n### Payment Gateways\n\n| Method | Description |\n|--------|-------------|\n| `get_payment_gateways` | Retrieve payment gateways |\n| `get_payment_gateway` | Get a single payment gateway |\n| `update_payment_gateway` | Update a payment gateway |\n\n### Reports\n\n| Method | Description |\n|--------|-------------|\n| `get_sales_report` | Retrieve sales reports |\n| `get_products_report` | Retrieve products reports |\n| `get_orders_report` | Retrieve orders reports |\n| `get_categories_report` | Retrieve categories reports |\n| `get_customers_report` | Retrieve customers reports |\n| `get_stock_report` | Retrieve stock reports |\n| `get_coupons_report` | Retrieve coupons reports |\n| `get_taxes_report` | Retrieve taxes reports |\n\n### Settings\n\n| Method | Description |\n|--------|-------------|\n| `get_settings` | Retrieve all settings |\n| `get_setting_options` | Retrieve options for a setting |\n| `update_setting_option` | Update a setting option |\n\n### System Status\n\n| Method | Description |\n|--------|-------------|\n| `get_system_status` | Retrieve system status |\n| `get_system_status_tools` | Retrieve system status tools |\n| `run_system_status_tool` | Run a system status tool |\n\n### Data\n\n| Method | Description |\n|--------|-------------|\n| `get_data` | Retrieve store data |\n| `get_continents` | Retrieve continents data |\n| `get_countries` | Retrieve countries data |\n| `get_currencies` | Retrieve currencies data |\n| `get_current_currency` | Get the current currency |\n\n## Method Parameters\n\nAll methods follow a similar parameter structure. Here are some examples:\n\n### Common Parameters for All Methods\n\n- `siteUrl`: (optional if set in env) WordPress site URL\n\n### Additional Parameters for WooCommerce Methods\n\n- `consumerKey`: (optional if set in env) WooCommerce consumer key\n- `consumerSecret`: (optional if set in env) WooCommerce consumer secret\n\n### Additional Parameters for WordPress Methods\n\n- `username`: (optional if set in env) WordPress username\n- `password`: (optional if set in env) WordPress password\n\n## Example Usage\n\n### WordPress API Example\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"create_post\",\n  \"params\": {\n    \"siteUrl\": \"https://your-wordpress-site.com\",\n    \"username\": \"your-wordpress-username\",\n    \"password\": \"your-wordpress-password\",\n    \"title\": \"My New Blog Post\",\n    \"content\": \"This is the content of my new blog post.\",\n    \"status\": \"publish\"\n  }\n}\n```\n\n### WooCommerce Products Example\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"get_products\",\n  \"params\": {\n    \"perPage\": 20,\n    \"page\": 1,\n    \"filters\": {\n      \"category\": 19,\n      \"status\": \"publish\"\n    }\n  }\n}\n```\n\n### Create Product Example\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"create_product\",\n  \"params\": {\n    \"productData\": {\n      \"name\": \"Premium T-Shirt\",\n      \"type\": \"simple\",\n      \"regular_price\": \"29.99\",\n      \"description\": \"Comfortable cotton t-shirt, available in various sizes.\",\n      \"short_description\": \"Premium quality t-shirt.\",\n      \"categories\": [\n        {\n          \"id\": 19\n        }\n      ],\n      \"images\": [\n        {\n          \"src\": \"http://example.com/wp-content/uploads/2022/06/t-shirt.jpg\"\n        }\n      ]\n    }\n  }\n}\n```\n\n### Product Metadata Example\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"create_product_meta\",\n  \"params\": {\n    \"productId\": 456,\n    \"metaKey\": \"_custom_product_field\",\n    \"metaValue\": {\n      \"special_attribute\": \"value\",\n      \"another_attribute\": 42\n    }\n  }\n}\n```\n\n### Order Metadata Example\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"create_order_meta\",\n  \"params\": {\n    \"orderId\": 789,\n    \"metaKey\": \"_delivery_instructions\",\n    \"metaValue\": \"Leave package at the back door\"\n  }\n}\n```\n\n## Security Note\n\nFor WooCommerce REST API access, you need to generate API keys. You can create them in your WordPress dashboard under WooCommerce → Settings → Advanced → REST API.\n\n## Requirements\n\n- Node.js 20.0.0 or higher\n- WordPress site with WooCommerce plugin installed\n- WooCommerce REST API keys\n\n## License\n\nMIT License - See LICENSE file for details\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "woocommerce",
        "ecommerce",
        "retail",
        "woocommerce mcp",
        "ecommerce retail",
        "woocommerce store"
      ],
      "category": "ecommerce-and-retail"
    },
    "therealhexi--shopify-mcp-server-main": {
      "owner": "therealhexi",
      "name": "shopify-mcp-server-main",
      "url": "https://github.com/therealhexi/shopify-mcp-server-main",
      "imageUrl": "/freedevtools/mcp/pfp/therealhexi.webp",
      "description": "Enables interaction with Shopify store data through a GraphQL API, facilitating product, customer, and order management. Supports advanced querying and clear error handling for API interactions.",
      "stars": 8,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-25T18:52:07Z",
      "readme_content": "# Shopify MCP Server\n\nMCP Server for Shopify API, enabling interaction with store data through GraphQL API. This server provides tools for managing products, customers, orders, and more.\n\n<a href=\"https://glama.ai/mcp/servers/bemvhpy885\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/bemvhpy885/badge\" alt=\"Shopify Server MCP server\" /></a>\n\n## Features\n\n* **Product Management**: Search and retrieve product information\n* **Customer Management**: Load customer data and manage customer tags\n* **Order Management**: Advanced order querying and filtering\n* **GraphQL Integration**: Direct integration with Shopify's GraphQL Admin API\n* **Comprehensive Error Handling**: Clear error messages for API and authentication issues\n\n## Tools\n\n1. `get-products`\n   * Get all products or search by title\n   * Inputs:\n     * `searchTitle` (optional string): Filter products by title\n     * `limit` (number): Maximum number of products to return\n   * Returns: Formatted product details including title, description, handle, and variants\n\n2. `get-products-by-collection`\n   * Get products from a specific collection\n   * Inputs:\n     * `collectionId` (string): ID of the collection to get products from\n     * `limit` (optional number, default: 10): Maximum number of products to return\n   * Returns: Formatted product details from the specified collection\n\n3. `get-products-by-ids`\n   * Get products by their IDs\n   * Inputs:\n     * `productIds` (array of strings): Array of product IDs to retrieve\n   * Returns: Formatted product details for the specified products\n\n4. `update-product-price`\n   * Update product prices for its ID\n   * Inputs:\n     * `productId` (string): ID of the product to update\n     * `price` (string): New price for the product\n   * Returns: Response of the update\n\n5. `get-variants-by-ids`\n   * Get product variants by their IDs\n   * Inputs:\n     * `variantIds` (array of strings): Array of variant IDs to retrieve\n   * Returns: Detailed variant information including product details\n\n6. `get-customers`\n   * Get shopify customers with pagination support\n   * Inputs:\n     * `limit` (optional number): Maximum number of customers to return\n     * `next` (optional string): Next page cursor\n   * Returns: Customer data in JSON format\n\n7. `tag-customer`\n   * Add tags to a customer\n   * Inputs:\n     * `customerId` (string): Customer ID to tag\n     * `tags` (array of strings): Tags to add to the customer\n   * Returns: Success or failure message\n\n8. `get-orders`\n   * Get orders with advanced filtering and sorting\n   * Inputs:\n     * `first` (optional number): Limit of orders to return\n     * `after` (optional string): Next page cursor\n     * `query` (optional string): Filter orders using query syntax\n     * `sortKey` (optional enum): Field to sort by ('PROCESSED_AT', 'TOTAL_PRICE', 'ID', 'CREATED_AT', 'UPDATED_AT', 'ORDER_NUMBER')\n     * `reverse` (optional boolean): Reverse sort order\n   * Returns: Formatted order details\n\n9. `get-order`\n   * Get a single order by ID\n   * Inputs:\n     * `orderId` (string): ID of the order to retrieve\n   * Returns: Detailed order information\n\n10. `create-discount`\n   * Create a basic discount code\n   * Inputs:\n     * `title` (string): Title of the discount\n     * `code` (string): Discount code that customers will enter\n     * `valueType` (enum): Type of discount ('percentage' or 'fixed_amount')\n     * `value` (number): Discount value (percentage as decimal or fixed amount)\n     * `startsAt` (string): Start date in ISO format\n     * `endsAt` (optional string): Optional end date in ISO format\n     * `appliesOncePerCustomer` (boolean): Whether discount can be used only once per customer\n   * Returns: Created discount details\n\n11. `create-draft-order`\n    * Create a draft order\n    * Inputs:\n      * `lineItems` (array): Array of items with variantId and quantity\n      * `email` (string): Customer email\n      * `shippingAddress` (object): Shipping address details\n      * `note` (optional string): Optional note for the order\n    * Returns: Created draft order details\n\n12. `complete-draft-order`\n    * Complete a draft order\n    * Inputs:\n      * `draftOrderId` (string): ID of the draft order to complete\n      * `variantId` (string): ID of the variant in the draft order\n    * Returns: Completed order details\n\n13. `get-collections`\n    * Get all collections\n    * Inputs:\n      * `limit` (optional number, default: 10): Maximum number of collections to return\n      * `name` (optional string): Filter collections by name\n    * Returns: Collection details\n\n14. `get-shop`\n    * Get shop details\n    * Inputs: None\n    * Returns: Basic shop information\n\n15. `get-shop-details`\n    * Get extended shop details including shipping countries\n    * Inputs: None\n    * Returns: Extended shop information including shipping countries\n\n16. `manage-webhook`\n    * Subscribe, find, or unsubscribe webhooks\n    * Inputs:\n      * `action` (enum): Action to perform ('subscribe', 'find', 'unsubscribe')\n      * `callbackUrl` (string): Webhook callback URL\n      * `topic` (enum): Webhook topic to subscribe to\n      * `webhookId` (optional string): Webhook ID (required for unsubscribe)\n    * Returns: Webhook details or success message\n\n## Setup\n\n### Shopify Access Token\n\nTo use this MCP server, you'll need to create a custom app in your Shopify store:\n\n1. From your Shopify admin, go to **Settings** > **Apps and sales channels**\n2. Click **Develop apps** (you may need to enable developer preview first)\n3. Click **Create an app**\n4. Set a name for your app (e.g., \"Shopify MCP Server\")\n5. Click **Configure Admin API scopes**\n6. Select the following scopes:\n   * `read_products`, `write_products`\n   * `read_customers`, `write_customers`\n   * `read_orders`, `write_orders`\n7. Click **Save**\n8. Click **Install app**\n9. Click **Install** to give the app access to your store data\n10. After installation, you'll see your **Admin API access token**\n11. Copy this token - you'll need it for configuration\n\nNote: Store your access token securely. It provides access to your store data and should never be shared or committed to version control.\nMore details on how to create a Shopify app can be found [here](https://help.shopify.com/en/manual/apps/app-types/custom-apps).\n\n### Usage with Claude Desktop\n\nAdd to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"shopify\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"shopify-mcp-server\"],\n      \"env\": {\n        \"SHOPIFY_ACCESS_TOKEN\": \"<YOUR_ACCESS_TOKEN>\",\n        \"MYSHOPIFY_DOMAIN\": \"<YOUR_SHOP>.myshopify.com\"\n      }\n    }\n  }\n}\n```\n\n## Development\n\n1. Clone the repository\n2. Install dependencies:\n```bash\nnpm install\n```\n3. Create a `.env` file:\n```\nSHOPIFY_ACCESS_TOKEN=your_access_token\nMYSHOPIFY_DOMAIN=your-store.myshopify.com\n```\n4. Build the project:\n```bash\nnpm run build\n```\n5. Run tests:\n```bash\nnpm test\n```\n\n## Dependencies\n\n- @modelcontextprotocol/sdk - MCP protocol implementation\n- graphql-request - GraphQL client for Shopify API\n- zod - Runtime type validation\n\n## Contributing\n\nContributions are welcome! Please read our [Contributing Guidelines](CONTRIBUTING.md) first.\n\n## License\n\nMIT\n\n## Community\n\n- [MCP GitHub Discussions](https://github.com/modelcontextprotocol/servers/discussions)\n- [Report Issues](https://github.com/your-username/shopify-mcp-server/issues)\n\n---\n\nBuilt with ❤️ using the [Model Context Protocol](https://modelcontextprotocol.io) \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "shopify",
        "ecommerce",
        "retail",
        "shopify store",
        "therealhexi shopify",
        "ecommerce retail"
      ],
      "category": "ecommerce-and-retail"
    },
    "w-beom--shoppingMall": {
      "owner": "w-beom",
      "name": "shoppingMall",
      "url": "https://github.com/w-beom/shoppingMall",
      "imageUrl": "/freedevtools/mcp/pfp/w-beom.webp",
      "description": "A web application for managing user registrations and logins, along with performing CRUD operations on a simple bulletin board. Built using Spring Boot, Gradle, Mybatis, and Thymeleaf, it serves as a foundational project for learning web development in a Java environment.",
      "stars": 3,
      "forks": 2,
      "license": "No License",
      "language": "HTML",
      "updated_at": "2024-05-28T16:31:54Z",
      "readme_content": "# shoppingMall\n\nSpring Boot Gradle을 이용한 쇼핑몰 프로젝트입니다.\n\n간단한 게시판 CRUD구현과 회원가입,로그인 등 웹 개발의 기본에 충실한 프로젝트입니다.\n\n환경셋팅 \n\nEcilpse 2019-09\n\njava - jdk 1.8.0\n\nSpring Boot Gradle\n\nMybatis\n\nThymeleaf 엔진\n\n디자인 출처\nhttp://www.nibbuns.co.kr/\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "shoppingmall",
        "retail",
        "ecommerce retail",
        "shoppingmall web",
        "beom shoppingmall"
      ],
      "category": "ecommerce-and-retail"
    }
  }
}