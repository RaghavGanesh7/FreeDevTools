{
  "category": "version-control",
  "categoryDisplay": "Version Control",
  "description": "Interact with Git repositories and version control platforms. Enables repository management, code analysis, pull request handling, issue tracking, and other version control operations through standardized APIs.",
  "totalRepositories": 9,
  "repositories": {
    "QuentinCody--github-graphql-mcp-server": {
      "owner": "QuentinCody",
      "name": "github-graphql-mcp-server",
      "url": "https://github.com/QuentinCody/github-graphql-mcp-server",
      "imageUrl": "",
      "description": "Unofficial GitHub MCP server that provides access to GitHub's GraphQL API, enabling more powerful and flexible queries for repository data, issues, pull requests, and other GitHub resources.",
      "stars": 8,
      "forks": 4,
      "license": "Other",
      "language": "Python",
      "updated_at": "2025-08-20T01:09:40Z",
      "readme_content": "# GitHub GraphQL MCP Server\n\n[![QuentinCody/github-graphql-mcp-server context](https://badge.forgithub.com/QuentinCody/github-graphql-mcp-server?accept=text%2Fhtml&maxTokens=50000&ext=py)](https://uithub.com/QuentinCody/github-graphql-mcp-server?accept=text%2Fhtml&maxTokens=50000&ext=py)\n\nA Model Context Protocol (MCP) server that provides access to GitHub's GraphQL API. This server exposes a single tool that allows executing arbitrary GraphQL queries and mutations against GitHub's API.\n\n## Features\n\n- Execute any GraphQL query against GitHub's API\n- Comprehensive error handling and reporting\n- Detailed documentation with example queries\n- Support for variables in GraphQL operations\n\n## Prerequisites\n\n- Python 3.10 or higher\n- A GitHub Personal Access Token (PAT)\n\n## Installation\n\n1. Clone this repository\n2. Set up a virtual environment (recommended):\n   ```bash\n   # On macOS/Linux\n   python3 -m venv .venv\n   source .venv/bin/activate\n   \n   # On Windows\n   python -m venv .venv\n   .venv\\Scripts\\activate\n   ```\n3. Install dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n## Usage\n\n### Running the Server\n\n```bash\n# If using a virtual environment, make sure it's activated\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Run the server with your GitHub token\nGITHUB_TOKEN=your_github_token_here python github_graphql_mcp_server.py\n```\n\n### Configuring with Claude for Desktop\n\nAdd the following to your Claude Desktop configuration file:\n\n```json\n{\n  \"github-graphql\": {\n    \"command\": \"/absolute/path/to/your/.venv/bin/python\",\n    \"args\": [\n        \"/absolute/path/to/github_graphql_mcp_server.py\"\n    ],\n    \"options\": {\n        \"cwd\": \"/absolute/path/to/repository\"\n    },\n    \"env\": {\n        \"GITHUB_TOKEN\": \"your_github_token_here\"\n    }\n  }\n}\n```\n\nReplace `/absolute/path/to/` with the actual path to your server file and add your GitHub token.\n\n### Example Queries\n\n#### Get Repository Information\n\n```graphql\nquery GetRepo($owner: String!, $name: String!) {\n  repository(owner: $owner, name: $name) {\n    name\n    description\n    stargazerCount\n    url\n    createdAt\n    owner {\n      login\n      avatarUrl\n    }\n  }\n}\n```\n\nVariables:\n```json\n{\n  \"owner\": \"octocat\",\n  \"name\": \"Hello-World\"\n}\n```\n\n#### Search Repositories\n\n```graphql\nquery SearchRepos($query: String!, $first: Int!) {\n  search(query: $query, type: REPOSITORY, first: $first) {\n    repositoryCount\n    edges {\n      node {\n        ... on Repository {\n          name\n          owner { login }\n          description\n          stargazerCount\n          url\n        }\n      }\n    }\n  }\n}\n```\n\nVariables:\n```json\n{\n  \"query\": \"language:python stars:1000\",\n  \"first\": 5\n}\n```\n\n#### Get User Information\n\n```graphql\nquery GetUserInfo($login: String!) {\n  user(login: $login) {\n    name\n    login\n    bio\n    avatarUrl\n    followers {\n      totalCount\n    }\n    repositories(first: 5, orderBy: {field: STARGAZERS, direction: DESC}) {\n      nodes {\n        name\n        description\n        stargazerCount\n      }\n    }\n  }\n}\n```\n\nVariables:\n```json\n{\n  \"login\": \"octocat\"\n}\n```\n\n## GitHub API Rate Limits\n\nBe aware of GitHub's API rate limits:\n- Authenticated requests: 5,000 requests per hour\n- Unauthenticated requests: 60 requests per hour\n\n## Troubleshooting\n\nIf you encounter issues:\n\n1. Check your GitHub token has the correct permissions\n2. Verify your virtual environment is properly set up and activated\n3. Ensure your token is correctly set in the environment variables\n4. If using Claude Desktop, ensure the path to Python is correct (use absolute path to the virtual environment Python)\n5. Look at the server logs for error messages\n6. Ensure your GraphQL query is valid for GitHub's schema\n7. Restart Claude for Desktop after making config changes\n\n### Common Errors\n\n**`spawn python ENOENT`**\n- This error means the Python executable wasn't found\n- Solution: Use the full path to your Python executable in the virtual environment (e.g., `/path/to/your/.venv/bin/python`)\n\n**`ModuleNotFoundError: No module named 'httpx'` (or other packages)**\n- The Python environment doesn't have the required dependencies installed\n- Solution: Make sure you've activated the virtual environment and run `pip install -r requirements.txt`\n\n**`Error: GitHub token not found in environment variables`**\n- The server couldn't find your GitHub token\n\n- Solution: Make sure you've set the GITHUB_TOKEN environment variable\n\n## License\n\n[MIT](LICENSE)\n=======\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "repositories",
        "git",
        "git repositories",
        "github graphql",
        "unofficial github"
      ],
      "category": "version-control"
    },
    "adhikasp--mcp-git-ingest": {
      "owner": "adhikasp",
      "name": "mcp-git-ingest",
      "url": "https://github.com/adhikasp/mcp-git-ingest",
      "imageUrl": "",
      "description": "Read and analyze GitHub repositories with your LLM",
      "stars": 280,
      "forks": 37,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T22:32:01Z",
      "readme_content": "# MCP Git Ingest\n[![smithery badge](https://smithery.ai/badge/mcp-git-ingest)](https://smithery.ai/server/mcp-git-ingest)\n\nA Model Context Protocol (MCP) server that helps read GitHub repository structure and important files.\n\nInspired by [gitingest](https://gitingest.com/).\n\n<a href=\"https://glama.ai/mcp/servers/un2zatig9e\"><img alt=\"badge\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/un2zatig9e/badge\" /></a>\n\n## Configuration\n\n```json\n{\n    \"mcpServers\": {\n        \"mcp-git-ingest\": {\n            \"command\": \"uvx\",\n            \"args\": [\"--from\", \"git+https://github.com/adhikasp/mcp-git-ingest\", \"mcp-git-ingest\"],\n        }\n    }\n}\n```\n\n## Usage\n\nUsing [mcp-client-cli](https://github.com/adhikasp/mcp-client-cli):\n\n```\n$ llm read https://github.com/adhikasp/mcp-git-ingest and determine how the code technically works\n\nI'll help you understand the technical details of the mcp-git-ingest repository. I'll first fetch the directory structure and then read the important files to analyze how the code works.\n\nTool Calls:\n  github_directory_structure\n  Args:\n    repo_url: https://github.com/adhikasp/mcp-git-ingest\n\nNow, I'll read the important files to understand the technical implementation:\n\nTool Calls:\n  github_read_important_files\n  Args:\n    repo_url: https://github.com/adhikasp/mcp-git-ingest\n    file_paths: ['README.md', 'src/mcp_git_ingest/main.py', 'pyproject.toml']\n\nLet me break down how this code technically works:\n\n1. Purpose:\nThe `mcp-git-ingest` is a Model Context Protocol (MCP) server designed to help read GitHub repository structures and important files. It provides two main tools:\n- `github_directory_structure`: Returns a tree-like representation of a repository's directory structure\n- `github_read_important_files`: Reads and returns the contents of specified files in a repository\n\n2. Technical Implementation:\n\na. Dependencies:\n- Uses `fastmcp` for creating an MCP server\n- Uses `gitpython` for Git repository operations\n- Requires Python 3.8+\n\nb. Key Functions:\n\n`clone_repo(repo_url: str) -> str`:\n- Creates a deterministic temporary directory based on the repository URL's hash\n- Checks if the repository is already cloned\n- If not, clones the repository\n- Handles error cases and cleanup\n- Returns the path to the cloned repository\n\n`get_directory_tree(path: str, prefix: str = \"\") -> str`:\n- Recursively generates a tree-like directory structure\n- Skips `.git` directories\n- Uses Unicode box-drawing characters to create a visual tree representation\n- Handles sorting of entries\n\n`github_directory_structure(repo_url: str) -> str`:\n- Clones the repository\n- Generates directory tree\n- Cleans up the temporary repository after processing\n- Returns the tree structure or an error message\n\n`github_read_important_files(repo_url: str, file_paths: List[str]) -> dict[str, str]`:\n- Clones the repository\n- Reads specified files\n- Returns a dictionary mapping file paths to their contents\n- Handles file reading errors\n- Cleans up the temporary repository\n\n3. Error Handling:\n- Uses try-except blocks to handle repository cloning, file reading errors\n- Ensures temporary directories are always cleaned up using `finally` blocks\n- Returns descriptive error messages\n\n4. Performance Optimizations:\n- Uses a hash-based temporary directory naming to potentially reuse cloned repositories\n- Checks for existing repositories before cloning\n- Implements cleanup to prevent accumulation of temporary files\n\n5. Unique Features:\n- Deterministic temporary directory creation\n- Unicode tree representation\n- Flexible file reading with error handling\n\n6. Execution:\n- Can be run as a CLI tool via `mcp-git-ingest`\n- Configured through `pyproject.toml`\n- Depends on `fastmcp` for MCP server functionality\n\nThe code is a robust, flexible tool for programmatically exploring and reading GitHub repositories, with a focus on error handling and clean implementation.\n\nWould you like me to elaborate on any specific aspect of the implementation?\n```\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "repositories",
        "git repositories",
        "version control",
        "github repositories"
      ],
      "category": "version-control"
    },
    "ddukbg--github-enterprise-mcp": {
      "owner": "ddukbg",
      "name": "github-enterprise-mcp",
      "url": "https://github.com/ddukbg/github-enterprise-mcp",
      "imageUrl": "",
      "description": "MCP server for GitHub Enterprise API integration",
      "stars": 23,
      "forks": 6,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-19T10:37:37Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/containerelic-github-enterprise-mcp-badge.png)](https://mseep.ai/app/containerelic-github-enterprise-mcp)\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/ddukbg/github-enterprise-mcp)](https://archestra.ai/mcp-catalog/ddukbg__github-enterprise-mcp)\n\n# GitHub Enterprise MCP Server\n\n![image](https://github.com/user-attachments/assets/55403caa-c81d-486a-8ec7-3a2532e7545e)\n\nAn MCP (Model Context Protocol) server for integration with GitHub Enterprise API. This server provides an MCP interface to easily access repository information, issues, PRs, and more from GitHub Enterprise in Cursor.\n\n## Compatibility\n\nThis project is primarily designed for GitHub Enterprise Server environments, but it also works with:\n\n- GitHub.com\n- GitHub Enterprise Cloud\n\n> **Note**: Some enterprise-specific features (like license information and enterprise statistics) will not work with GitHub.com or GitHub Enterprise Cloud.\n\n## Key Features\n\n- Retrieve repository list from GitHub Enterprise instances\n- Get detailed repository information\n- List repository branches\n- View file and directory contents\n- Manage issues and pull requests\n- Repository management (create, update, delete)\n- GitHub Actions workflows management\n- User management (list, create, update, delete, suspend/unsuspend users)\n- Access enterprise statistics\n- Enhanced error handling and user-friendly response formatting\n\n## Getting Started\n\n### Prerequisites\n\n- Node.js 18 or higher\n- Access to a GitHub Enterprise instance\n- Personal Access Token (PAT)\n\n### Docker Installation and Setup\n\n#### Option 1: Running with Docker\n\n1. Build the Docker image:\n\n    ```bash\n    docker build -t github-enterprise-mcp .\n    ```\n\n2. Run the Docker container with environment variables:\n\n    ```bash\n    docker run -p 3000:3000 \\\n      -e GITHUB_TOKEN=\"your_github_token\" \\\n      -e GITHUB_ENTERPRISE_URL=\"https://github.your-company.com/api/v3\" \\\n      -e DEBUG=true \\\n      github-enterprise-mcp\n    ```\n\n> **Note**: The Dockerfile is configured to run with `--transport http` by default. If you need to change this, you can override the command:\n\n```bash\ndocker run -p 3000:3000 \\\n  -e GITHUB_TOKEN=\"your_github_token\" \\\n  -e GITHUB_ENTERPRISE_URL=\"https://github.your-company.com/api/v3\" \\\n  -e DEBUG=true \\\n  github-enterprise-mcp node dist/index.js --transport http --debug\n```\n\n#### Option 2: Using Docker Compose\n\n1. Create a `.env` file in the project root with the required environment variables:\n\n    ```shell\n    GITHUB_ENTERPRISE_URL=https://github.your-company.com/api/v3\n    GITHUB_TOKEN=your_github_token\n    DEBUG=true\n    ```\n\n2. Start the container with Docker Compose:\n\n    ```bash\n    docker-compose up -d\n    ```\n\n3. Check the logs:\n\n    ```bash\n    docker-compose logs -f\n    ```\n\n4. Stop the container:\n\n    ```bash\n    docker-compose down\n    ```\n\n### Installation and Setup\n\n#### Local Development (Using Concurrent Mode)\n\nThis method is recommended for active development with automatic recompilation and server restarts:\n\n1. Clone the repository and install required packages:\n\n    ```bash\n    git clone https://github.com/ddukbg/github-enterprise-mcp.git\n    cd github-enterprise-mcp\n    npm install\n    ```\n\n2. Run the development server:\n\n    ```bash\n    export GITHUB_TOKEN=\"your_github_token\"\n    export GITHUB_ENTERPRISE_URL=\"https://github.your-company.com/api/v3\"\n    npm run dev\n    ```\n\n    This will:\n    - Compile TypeScript code automatically when files change\n    - Restart the server when compiled files are updated\n    - Run the server in HTTP mode for URL-based connections\n\n3. Connect to Cursor using URL mode as described below\n\n### Installation and Setup for Production\n\n#### Option 1: Using URL Mode (Recommended for Local Development)\n\nThis method is the most stable and recommended for local development or testing:\n\n1. Clone the repository and install required packages:\n\n    ```bash\n    git clone https://github.com/ddukbg/github-enterprise-mcp.git\n    cd github-enterprise-mcp\n    npm install\n    ```\n\n2. Build the project:\n\n    ```bash\n    npm run build\n    chmod +x dist/index.js\n    ```\n\n3. Run the server:\n\n    ```bash\n    export GITHUB_TOKEN=\"your_github_token\"\n    export GITHUB_ENTERPRISE_URL=\"https://github.your-company.com/api/v3\"\n    node dist/index.js --transport http --debug\n    ```\n\n4. Connect to Cursor using URL mode:\n   - Add the following to your Cursor's `.cursor/mcp.json` file:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"github-enterprise\": {\n         \"url\": \"http://localhost:3000/sse\"\n       }\n     }\n   }\n   ```\n\n#### Option 2: Install as a Global Command (npm link)\n\nThis method is useful for local development:\n\n```bash\n# After cloning the repository\ngit clone https://github.com/ddukbg/github-enterprise-mcp.git\ncd github-enterprise-mcp\n\n# Install required packages\nnpm install\n\n# Build\nnpm run build\nchmod +x dist/index.js\n\n# Link globally\nnpm link\n\n# Run as a global command\nexport GITHUB_TOKEN=\"your_github_token\"\nexport GITHUB_ENTERPRISE_URL=\"https://github.your-company.com/api/v3\"\ngithub-enterprise-mcp --transport=http --debug\n```\n\n#### Option 3: Using npx (When Package is Published)\n\nIf the package is published to the public npm registry:\n\n```bash\nnpx @ddukbg/github-enterprise-mcp --token=your_github_token --github-enterprise-url=https://github.your-company.com/api/v3\n```\n\n## Integration with AI Tools\n\n### Claude Desktop\n\nAdd the following to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"github-enterprise\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@ddukbg/github-enterprise-mcp\", \"--token=YOUR_GITHUB_TOKEN\", \"--github-enterprise-url=YOUR_GITHUB_ENTERPRISE_URL\"]\n    }\n  }\n}\n```\n\nReplace `YOUR_GITHUB_TOKEN` and `YOUR_GITHUB_ENTERPRISE_URL` with your actual values.\n\n### Cursor\n\n#### Recommended: URL Mode (Most Stable)\n\nFor the most reliable operation in Cursor, using URL mode is recommended:\n\n1. Start the server in a separate terminal window:\n\n   ```bash\n   cd /path/to/github-enterprise-mcp\n   GITHUB_ENTERPRISE_URL=\"https://github.your-company.com/api/v3\" GITHUB_TOKEN=\"your_github_token\" node dist/index.js --transport http\n   ```\n\n2. Configure Cursor's MCP settings:\n   - Open Cursor and go to **Settings**\n   - Navigate to **AI > MCP Servers**\n   - Edit your `.cursor/mcp.json` file:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"github-enterprise\": {\n         \"url\": \"http://localhost:3000/sse\"\n       }\n     }\n   }\n   ```\n\n3. Restart Cursor to apply the changes\n\n#### Alternative: Command Mode\n\nAlternatively, you can configure Cursor to use the command mode, although URL mode is more reliable:\n\n1. Open Cursor and go to **Settings**\n2. Navigate to **AI > MCP Servers**\n3. Click **Add MCP Server**\n4. Enter the following details:\n   - **Name**: GitHub Enterprise\n   - **Command**: `npx`\n   - **Arguments**: `@ddukbg/github-enterprise-mcp`\n   - **Environment Variables**:\n     - `GITHUB_ENTERPRISE_URL`: Your GitHub Enterprise API URL\n     - `GITHUB_TOKEN`: Your GitHub personal access token\n\nAlternatively, you can manually edit your `.cursor/mcp.json` file to include:\n\n```json\n{\n  \"mcpServers\": {\n    \"github-enterprise\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@ddukbg/github-enterprise-mcp\"\n      ],\n      \"env\": {\n        \"GITHUB_ENTERPRISE_URL\": \"https://github.your-company.com/api/v3\",\n        \"GITHUB_TOKEN\": \"your_github_token\"\n      }\n    }\n  }\n}\n```\n\n## Language Configuration\n\nThis MCP server supports both English and Korean languages. You can configure the language using:\n\n### Environment Variables\n\n```bash\n# Set language to Korean\nexport LANGUAGE=ko\n\n# Or in .env file\nLANGUAGE=ko\n```\n\n### Command-line Arguments\n\n```bash\n# Set language to Korean\nnode dist/index.js --language ko\n```\n\nThe default language is English if not specified.\n\n## Additional Options in HTTP Mode\n\n- `--debug`: Enable debug logging\n- `--github-enterprise-url <URL>`: Set GitHub Enterprise API URL\n- `--token <TOKEN>`: Set GitHub Personal Access Token\n- `--language <LANG>`: Set language (en or ko, default: en)\n\n## Available MCP Tools\n\nThis MCP server provides the following tools:\n\n| Tool Name | Description | Parameters | Required PAT Permissions |\n|---|---|---|---|\n| `list-repositories` | Retrieve repository list for a user or organization | `owner`: Username/org name<br>`isOrg`: Whether it's an organization<br>`type`: Repository type<br>`sort`: Sort criteria<br>`page`: Page number<br>`perPage`: Items per page | `repo` |\n| `get-repository` | Get detailed repository information | `owner`: Repository owner<br>`repo`: Repository name | `repo` |\n| `list-branches` | List branches of a repository | `owner`: Repository owner<br>`repo`: Repository name<br>`protected_only`: Whether to show only protected branches<br>`page`: Page number<br>`perPage`: Items per page | `repo` |\n| `get-content` | Retrieve file or directory contents | `owner`: Repository owner<br>`repo`: Repository name<br>`path`: File/directory path<br>`ref`: Branch/commit (optional) | `repo` |\n| `list-pull-requests` | List pull requests in a repository | `owner`: Repository owner<br>`repo`: Repository name<br>`state`: PR state filter<br>`sort`: Sort criteria<br>`direction`: Sort direction<br>`page`: Page number<br>`per_page`: Items per page | `repo` |\n| `get-pull-request` | Get pull request details | `owner`: Repository owner<br>`repo`: Repository name<br>`pull_number`: Pull request number | `repo` |\n| `create-pull-request` | Create a new pull request | `owner`: Repository owner<br>`repo`: Repository name<br>`title`: PR title<br>`head`: Head branch<br>`base`: Base branch<br>`body`: PR description<br>`draft`: Create as draft PR | `repo` |\n| `merge-pull-request` | Merge a pull request | `owner`: Repository owner<br>`repo`: Repository name<br>`pull_number`: Pull request number<br>`merge_method`: Merge method<br>`commit_title`: Commit title<br>`commit_message`: Commit message | `repo` |\n| `list-issues` | List issues in a repository | `owner`: Repository owner<br>`repo`: Repository name<br>`state`: Issue state filter<br>`sort`: Sort criteria<br>`direction`: Sort direction<br>`page`: Page number<br>`per_page`: Items per page | `repo` |\n| `get-issue` | Get issue details | `owner`: Repository owner<br>`repo`: Repository name<br>`issue_number`: Issue number | `repo` |\n| `list-issue-comments` | List comments on an issue or pull request | `owner`: Repository owner<br>`repo`: Repository name<br>`issue_number`: Issue/PR number<br>`page`: Page number<br>`per_page`: Items per page | `repo` |\n| `create-issue` | Create a new issue | `owner`: Repository owner<br>`repo`: Repository name<br>`title`: Issue title<br>`body`: Issue body content<br>`labels`: Array of label names<br>`assignees`: Array of user logins<br>`milestone`: Milestone ID | `repo` |\n| `create-repository` | Create a new repository | `name`: Repository name<br>`description`: Repository description<br>`private`: Whether private<br>`auto_init`: Initialize with README<br>`gitignore_template`: Add .gitignore<br>`license_template`: Add license<br>`org`: Organization name | `repo` |\n| `update-repository` | Update repository settings | `owner`: Repository owner<br>`repo`: Repository name<br>`description`: New description<br>`private`: Change privacy<br>`default_branch`: Change default branch<br>`has_issues`: Enable/disable issues<br>`has_projects`: Enable/disable projects<br>`has_wiki`: Enable/disable wiki<br>`archived`: Archive/unarchive | `repo` |\n| `delete-repository` | Delete a repository | `owner`: Repository owner<br>`repo`: Repository name<br>`confirm`: Confirmation (must be true) | `delete_repo` |\n| `list-workflows` | List GitHub Actions workflows | `owner`: Repository owner<br>`repo`: Repository name<br>`page`: Page number<br>`perPage`: Items per page | `actions:read` |\n| `list-workflow-runs` | List workflow runs | `owner`: Repository owner<br>`repo`: Repository name<br>`workflow_id`: Workflow ID/filename<br>`branch`: Filter by branch<br>`status`: Filter by status<br>`page`: Page number<br>`perPage`: Items per page | `actions:read` |\n| `trigger-workflow` | Trigger a workflow | `owner`: Repository owner<br>`repo`: Repository name<br>`workflow_id`: Workflow ID/filename<br>`ref`: Git reference<br>`inputs`: Workflow inputs | `actions:write` |\n| `get-license-info` | Get GitHub Enterprise license information | - | **Requires site_admin (Administrator) account** |\n| `get-enterprise-stats` | Get GitHub Enterprise system statistics | - | **Requires site_admin (Administrator) account** |\n\n> **Note**: For Enterprise-specific tools (`get-license-info` and `get-enterprise-stats`), a user with **site administrator** privileges is required. A Classic Personal Access Token is recommended, as Fine-grained tokens may not support these Enterprise-level permissions.\n\n## Using the Tools in Cursor\n\nOnce you have set up the MCP server and configured Cursor to connect to it, you can use the GitHub Enterprise tools directly in Cursor's AI chat. Here are some examples:\n\n### Listing Repositories\n\n```js\nmcp_github_enterprise_list_repositories(owner=\"octocat\")\n```\n\n### Getting Repository Information\n\n```js\nmcp_github_enterprise_get_repository(owner=\"octocat\", repo=\"hello-world\")\n```\n\n### Listing Pull Requests\n\n```js\nmcp_github_enterprise_list_pull_requests(owner=\"octocat\", repo=\"hello-world\", state=\"open\")\n```\n\n### Managing Issues\n\n```js\n# List issues\nmcp_github_enterprise_list_issues(owner=\"octocat\", repo=\"hello-world\", state=\"all\")\n# Get issue details\nmcp_github_enterprise_get_issue(owner=\"octocat\", repo=\"hello-world\", issue_number=1)\n\n# Get issue/PR comments\nmcp_github_enterprise_list_issue_comments(owner=\"octocat\", repo=\"hello-world\", issue_number=1)\n\n\n# Create a new issue\nmcp_github_enterprise_create_issue(\n  owner=\"octocat\", \n  repo=\"hello-world\",\n  title=\"Found a bug\",\n  body=\"Here is a description of the bug\",\n  labels=[\"bug\", \"important\"]\n)\n```\n\n### Working with Repository Content\n\n```js\nmcp_github_enterprise_get_content(owner=\"octocat\", repo=\"hello-world\", path=\"README.md\")\n```\n\n### Repository Management\n\n```\n# Create a new repository\nmcp_github_enterprise_create_repository(\n  name=\"new-project\",\n  description=\"This is a new project\",\n  private=true,\n  auto_init=true\n)\n\n# Update repository settings\nmcp_github_enterprise_update_repository(\n  owner=\"octocat\",\n  repo=\"hello-world\",\n  description=\"Updated description\",\n  has_issues=true\n)\n```\n\n### User Management (Enterprise Only)\n\nThese features are specifically designed for GitHub Enterprise Server environments and require administrative permissions:\n\n```js\n# List all users in the GitHub Enterprise instance\nmcp_github_enterprise_list_users(filter=\"active\", per_page=100)\n\n# Get a specific user's details\nmcp_github_enterprise_get_user(username=\"octocat\")\n\n# Create a new user (Enterprise only)\nmcp_github_enterprise_create_user(\n  login=\"newuser\",\n  email=\"newuser@example.com\",\n  name=\"New User\",\n  company=\"ACME Inc.\"\n)\n\n# Update a user's information (Enterprise only)\nmcp_github_enterprise_update_user(\n  username=\"octocat\",\n  email=\"updated-email@example.com\",\n  location=\"San Francisco\"\n)\n\n# Suspend a user (Enterprise only)\nmcp_github_enterprise_suspend_user(\n  username=\"octocat\",\n  reason=\"Violation of terms of service\"\n)\n\n# Unsuspend a user (Enterprise only)\nmcp_github_enterprise_unsuspend_user(username=\"octocat\")\n\n# List organizations a user belongs to\nmcp_github_enterprise_list_user_orgs(username=\"octocat\")\n```\n\n## API Improvements\n\n- Flexible API URL configuration (supports various environment variables and command-line arguments)\n- Enhanced error handling and timeout management\n- User-friendly response formatting and messages\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nISC\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "github",
        "git",
        "repositories",
        "github enterprise",
        "git repositories",
        "version control"
      ],
      "category": "version-control"
    },
    "gitea--gitea-mcp": {
      "owner": "gitea",
      "name": "gitea-mcp",
      "url": "https://gitea.com/gitea/gitea-mcp",
      "imageUrl": "",
      "description": "Interactive with Gitea instances with MCP.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "gitea",
        "repositories",
        "version control",
        "git repositories",
        "gitea instances"
      ],
      "category": "version-control"
    },
    "kaiyuanxiaobing--atomgit-mcp-server": {
      "owner": "kaiyuanxiaobing",
      "name": "atomgit-mcp-server",
      "url": "https://github.com/kaiyuanxiaobing/atomgit-mcp-server",
      "imageUrl": "",
      "description": "Official AtomGit server for integration with repository management, PRs, issues, branches, labels, and more.",
      "stars": 7,
      "forks": 4,
      "license": "Mulan Permissive Software License, Version 2",
      "language": "TypeScript",
      "updated_at": "2025-08-16T09:40:40Z",
      "readme_content": "# AtomGit MCP Server\n[![smithery badge](https://smithery.ai/badge/@kaiyuanxiaobing/atomgit-mcp-server)](https://smithery.ai/server/@kaiyuanxiaobing/atomgit-mcp-server)\n\n[English](./README_EN.md) | [中文](./README.md)\n\nAtomGit MCP 服务器是专门为 AtomGit 开源协作平台的模型上下文(MCP) 服务的实现。提供了一系列方法，允许 AI 管理 AtomGit 开源协作平台的仓库、issues、pull requests、branch、label等。\n\n## 安装使用\n\n### 从源代码构建\n\n#### 前提条件（npx启动跳过该步骤）\n- nodejs v18.20.2 或者更高版本\n- pnpm 10.9.0\n- 拥有 AtomGit 账户的访问令牌，[获取方式](https://docs.atomgit.com/user/pats)\n\n#### 克隆仓库\n``` bash\ngit clone https://atomgit.com/atomgit-open-source-ecosystem/atomgit-mcp-server.git\n\ncd mcp-server-atomgit\n```\n\n#### 构建项目\n```bash\npnpm build\n```\n\n#### 查看构建位置\n```bash\npwd\n```\n#### claude 可执行文件启动\nstdio mode:\n```json\n{\n  \"mcpServers\": {\n    \"command\": \"node\",\n    \"args\": [\n      \"/home/user/work/mcp-server-atomgit/dist/index.js\"\n    ],\n    \"env\": {\n      \"ATOMGIT_PERSONAL_ACCESS_TOKEN\": \"<your-atomgit-api-key-here>\"\n    },\n  }\n}\n```\n\n### MCP Hosts配置\n\n#### claude \n##### npx 启动\n```json\n{\n  \"mcpServers\": {\n    \"atomgit-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"atomgit-mcp-server@latest\"\n      ],\n      \"env\": {\n        \"ATOMGIT_PERSONAL_ACCESS_TOKEN\": \"<your-atomgit-api-key-here>\"\n      }\n    }\n  }\n}\n```\n#### vscode\n\nNPX\n``` json\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"your-atomgit-api-key\",\n        \"description\": \"AtomGit Personal Access Token\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"atomgit-mcp-server\": {\n        \"command\": \"npx\",\n        \"args\": [\n          \"-y\",\n          \"atomgit-mcp-server@latest\"\n        ],\n        \"env\": {\n          \"ATOMGIT_PERSONAL_ACCESS_TOKEN\": \"<your-atomgit-api-key-here>\"\n        }\n      }\n    }\n  }\n}\n```\n\n### 可用工具\n\nmcp-server-atomgit 服务器提供了多种与 AtomGit 交互的工具，后续会不断完善：\n\n| 工具                         | 类别           | 描述            |\n|-----------------------------|-------------|------------------|\n| **get_user_repository**     | repo         | 列出用户授权某个的仓库   |\n| **get_user_repositories**   | repo         | 列出用户授权的所有仓库   |\n| **get_org_repositories**    | repo         | 列出组织授权的所有仓库   |\n| **create_issue**            | issue       | 为某个仓库创建issue     |\n| **create_issue_comment**    | issue        | 为某条issue创建评论    |\n| **delete_issue_comment**    | issue        | 删除某条issue的评论    |\n| **get_issue_comment**       | issue        | 获取某条issue的评论    |\n| **list_issue_comments**     | issue        | 列出某条issue的所有评论 |\n| **list_issues**             | issue        | 列出某个仓库的所有issues |\n| **get_issue**               | issue        | 获取某个issue的详细信息 |\n| **set_assignees**           | issue        | 设置某个issue的负责人   |\n| **list_issue_assignees**    | issue        | 列出某个issue的负责人   |\n| **check_if_user_is_assignable** | issue    | 检查某用户是否可分配为issue负责人 |\n| **create_pull_request**         | pull     | 创建一个新的变更请求            |\n| **get_pull_request_details**    | pull     | 获取某个变更请求的详细信息      |\n| **create_pull_request_comment** | pull     | 为某个变更请求创建评论          |\n| **create_pull_request_reply**   | pull     | 回复某个变更请求的评论          |\n| **get_pull_request_comment**    | pull     | 获取某个变更请求评论的详细信息  |\n| **list_repository_branches**    | branch   | 获取分支列表                 |\n| **get_repository_branch_details** | branch  | 获取分支信息                 |\n| **get_repository_labels**         |  label  | 获取仓库所有标签              |\n| **create_issue_labels**           |  label  | 为issue添加标签              |\n| **get_issue_labels**              | label   | 获取issue的所有标签           |\n| **delete_issue_label**            |  label  | 从issue中移除标签             |\n| **get_label_by_name**             |  label  | 根据名称获取仓库中的单个标签     |\n\n### 贡献\n\n我们欢迎热爱开源的开发者们的贡献！如果您想为这个项目做出贡献，请按照以下指南操作：\n\n1. 访问仓库[https://atomgit.com/atomgit-open-source-ecosystem/atomgit-mcp-server](https://atomgit.com/atomgit-open-source-ecosystem/atomgit-mcp-server)\n2. Fork 此[仓库](https://atomgit.com/atomgit-open-source-ecosystem/atomgit-mcp-server)\n3. 为 feature 或 bug 修复创建一个新分支。\n4. 更改代码，并确保代码有良好的文档。\n5. 提交一个 pull request，并附上清晰的更改描述。\n\n有任何问题，请给我们提交[issue](https://atomgit.com/atomgit-open-source-ecosystem/atomgit-mcp-server/issues)，我们会及时查看反馈，并积极解决~\n\n### 木兰宽松许可证, 第2版\n[木兰宽松许可证, 第2版](./license)\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "atomgit",
        "git",
        "repositories",
        "atomgit server",
        "version control",
        "git repositories"
      ],
      "category": "version-control"
    },
    "kopfrechner--gitlab-mr-mcp": {
      "owner": "kopfrechner",
      "name": "gitlab-mr-mcp",
      "url": "https://github.com/kopfrechner/gitlab-mr-mcp",
      "imageUrl": "",
      "description": "Interact seamlessly with issues and merge requests of your GitLab projects.",
      "stars": 60,
      "forks": 17,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-25T09:28:22Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/kopfrechner-gitlab-mr-mcp-badge.png)](https://mseep.ai/app/kopfrechner-gitlab-mr-mcp)\n\n[![GitHub stars](https://img.shields.io/github/stars/kopfrechner/gitlab-mr-mcp?style=flat)](https://github.com/kopfrechner/gitlab-mr-mcp/stargazers)\n[![License](https://img.shields.io/github/license/kopfrechner/gitlab-mr-mcp)](LICENSE)\n[![smithery badge](https://smithery.ai/badge/@kopfrechner/gitlab-mr-mcp)](https://smithery.ai/server/@kopfrechner/gitlab-mr-mcp)\n\n# 🚀 GitLab MR MCP\n\nA Model Context Protocol (MCP) server for interacting with GitLab merge requests and issues.\n\n## 📌 Overview\n\nThis project implements a server using the Model Context Protocol (MCP) that allows AI agents to interact with GitLab repositories. It provides tools for:\n\n- Listing available GitLab projects\n- Fetching merge request details and comments\n- Getting merge request diffs\n- Adding comments to merge requests\n- Adding line-specific comments to code in merge request diffs\n- Fetching issue details\n- Setting merge request title and description\n\n## 📦 Installation\n\n### ⚡ Using Smithery\n\nTo install GitLab MR MCP for Claude Desktop automatically via Smithery:\n\n```bash\nnpx -y @smithery/cli@latest install @kopfrechner/gitlab-mr-mcp --client claude --config '\"{\\\"gitlabMrMcpToken\\\":\\\"YOUR_GITLAB_TOKEN\\\", \\\"gitlabMrMcpHost\\\": \\\"YOUR_GITLAB_HOST\\\"}\"'\n```\n\n### 🛠️ Manual Installation\n\n#### 🔧 Prerequisites\n\n- Node.js\n- GitLab access token with API access\n- GitLab project ID(s)\n\n#### 📖 Setup\n\n1. Clone this repository\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n3. Add the following to your MCP client configuration:\n```json\n{\n  \"mcpServers\": {\n    \"gitlab-mr-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/gitlab-mr-mcp/index.js\"],\n      \"env\": {\n        \"MR_MCP_GITLAB_TOKEN\": \"your_gitlab_token\",\n        \"MR_MCP_GITLAB_HOST\": \"your_gitlab_host\"\n      }\n    }\n  }\n}\n```\n\n## 🛠️ Available Tools\n\n* `get_projects`\n  Gets a list of GitLab projects accessible with your token.\n\n* `list_open_merge_requests`\n  Lists all open merge requests in the specified project.\n\n* `get_merge_request_details`\n  Gets detailed information about a specific merge request.\n\n* `get_merge_request_comments`\n  Gets comments from a specific merge request, including discussion notes and diff notes.\n\n* `add_merge_request_comment`\n  Adds a general comment to a merge request.\n\n* `add_merge_request_diff_comment`\n  Adds a comment to a specific line in a file within a merge request.\n\n* `get_merge_request_diff`\n  Gets the diff for a merge request.\n\n* `get_issue_details`\n  Gets detailed information about a specific issue.\n\n* `set_merge_request_title`\n  Set the title of a merge request\n\n* `set_merge_request_description`\n  Set the description of a merge request\n\n## 🏗️ Development\n\n### 🔍 Running Inspector\n\nSet up environment variables:\n\n```bash\nexport MR_MCP_GITLAB_TOKEN=your_gitlab_token\nexport MR_MCP_GITLAB_HOST=your_gitlab_host\n\n# Optional evn vars to filter the projects the `get_projects` tool has access to:\n# https://docs.gitlab.com/api/access_requests/#valid-access-levels\nexport MR_MCP_MIN_ACCESS_LEVEL=min_access_level\n# Search term that should match the project path or name \nexport MR_MCP_PROJECT_SEARCH_TERM=term \n```\n\nFor use with MCP clients, you can run:\n\n```bash\nnpx -y @modelcontextprotocol/inspector npm start\n```\n\n## 🛠️ Troubleshooting\n\nIf you encounter permissions issues (403 Forbidden), check:\n\n1. Your GitLab token has the proper scopes (api, read_api)\n2. The token user has proper access to the projects\n3. The project IDs are correct\n\n## 📜 License\n\n[MIT](LICENSE)\n\n## 🤝 Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gitlab",
        "git",
        "repositories",
        "gitlab projects",
        "kopfrechner gitlab",
        "git repositories"
      ],
      "category": "version-control"
    },
    "modelcontextprotocol--server-git": {
      "owner": "modelcontextprotocol",
      "name": "server-git",
      "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/git",
      "imageUrl": "",
      "description": "Direct Git repository operations including reading, searching, and analyzing local repositories",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "repositories",
        "repository",
        "git repositories",
        "git repository",
        "version control"
      ],
      "category": "version-control"
    },
    "modelcontextprotocol--server-gitlab": {
      "owner": "modelcontextprotocol",
      "name": "server-gitlab",
      "url": "https://github.com/modelcontextprotocol/servers/tree/main/src/gitlab",
      "imageUrl": "",
      "description": "GitLab platform integration for project management and CI/CD operations",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gitlab",
        "git",
        "repositories",
        "gitlab platform",
        "git repositories",
        "server gitlab"
      ],
      "category": "version-control"
    },
    "theonedev--tod": {
      "owner": "theonedev",
      "name": "tod",
      "url": "https://github.com/theonedev/tod/blob/main/mcp.md",
      "imageUrl": "",
      "description": "A MCP server for OneDev for CI/CD pipeline editing, issue workflow automation, and pull request review",
      "stars": 2,
      "forks": 2,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-09-29T00:52:42Z",
      "readme_content": "# TOD - TheOneDev CLI Tool\n\nTOD (**T**he**O**ne**D**ev) is a powerful command-line tool for OneDev 13+ that streamlines your development workflow by enabling you to run CI/CD jobs against local changes, set up local working directory to work on pull requests, etc. It also offers a comprehensive Model Context Protocol (MCP) server with tools and prompts, enabling you to interact with OneDev 13+ through AI assistants in an intelligent and natural way.\n\n## Features\n\n- **MCP (Model Context Protocol) server** for AI tool integration\n- **Run CI/CD jobs against local changes** without committing/pushing\n- **Run jobs against specific branches or tags**\n- **Checkout pull requests** locally\n- **Check and migrate build specifications** to the latest version\n- **Real-time log streaming** to console from job execution\n- **Configuration management** via config files\n- **Cross-platform support** (Windows, macOS, Linux)\n\n## Installation\n\nTo install tod, just put tod binary into your PATH. \n\n### Download Pre-built Binaries\n\nhttps://code.onedev.io/onedev/tod/~builds?query=%22Job%22+is+%22Release%22\n\n### Build Binary from Source\n\n**Requirements:**\n- Go 1.22.1 or higher\n\n**Steps:**\n1. Clone the repository:\n   ```bash\n   git clone https://code.onedev.io/onedev/tod.git\n   cd tod\n   ```\n\n2. Build the binary:\n   ```bash\n   go build\n   ```\n\n## Configuration\n\nTOD uses a configuration file to store commonly used settings, eliminating the need to specify them repeatedly.\n\n### Config File Location\n\nCreate a config file at: `$HOME/.todconfig`\n\n### Config File Format\n\nThe configuration uses INI format:\n\n```ini\nserver-url=https://onedev.example.com\naccess-token=your-personal-access-token\n```\n\n## Commands\n\n### `mcp` - Start MCP Server\n\nStart the Model Context Protocol server for AI tool integration.\n\n**Syntax:**\n```bash\ntod mcp [OPTIONS]\n```\n\n**Options:**\n- `--log-file <file>` - Specify log file path for debug logging\n\n**Example:**\n```bash\n# Start MCP server\ntod mcp\n\n# Start with debug logging\ntod mcp --log-file /tmp/tod-mcp.log\n```\n\n**For detailed information about available MCP tools and their parameters, see [MCP Documentation](mcp.md).**\n\n\n### `run-local` - Run Jobs Against Local Changes\n\nRun CI/CD jobs against your uncommitted local changes without the commit/push/run/check loop.\n\n**Syntax:**\n```bash\ntod run-local [OPTIONS] <job-name>\n```\n\n**Options:**\n- `--working-dir <dir>` - Specify working directory (defaults to current directory). Working directory is expected to be inside\n   a git repository, with one of the remote pointing to a OneDev project\n- `--param <key=value>` or `-p <key=value>` - Specify job parameters (can be used multiple times)\n\n**Examples:**\n```bash\n# Basic usage\ntod run-local ci\n\n# With parameters\ntod run-local -p database=postgres -p environment=test ci\n\n# Specify working directory\ntod run-local --working-dir /path/to/project ci\n```\n\n**How it works:**\n1. Stashes your local changes\n2. Creates a temporary commit\n3. Pushes to a temporal ref on the server\n4. Runs the specified job\n5. Streams logs back to your terminal\n6. Cancels the job if you press Ctrl+C\n\n### `run` - Run Jobs Against Branches or Tags\n\nRun CI/CD jobs against specific branches or tags in the repository.\n\n**Syntax:**\n```bash\ntod run [OPTIONS] <job-name>\n```\n\n**Options:**\n- `--working-dir <dir>` - Specify working directory (defaults to current directory). Working directory is expected to be inside\n   a git repository, with one of the remote pointing to a OneDev project\n- `--branch <branch>` - Run against specific branch (mutually exclusive with --tag)\n- `--tag <tag>` - Run against specific tag (mutually exclusive with --branch)\n- `--param <key=value>` or `-p <key=value>` - Specify job parameters (can be used multiple times)\n\n**Examples:**\n```bash\n# Run against main branch\ntod run --branch main ci\n\n# Run against a tag\ntod run --tag v1.2.3 release\n\n# Run with parameters\ntod run --branch develop -p environment=staging ci\n```\n\n### `checkout` - Checkout Pull Requests\n\nCheckout pull requests locally for testing and review.\n\n**Syntax:**\n```bash\ntod checkout [OPTIONS] <pull-request-reference>\n```\n\n**Options:**\n- `--working-dir <dir>` - Specify working directory (defaults to current directory). Working directory is expected to be inside\n   a git repository, with one of the remote pointing to a OneDev project\n\n**Example:**\n```bash\n# Checkout pull request #123\ntod checkout 123\n\n# Checkout in specific directory\ntod checkout --working-dir /path/to/project 456\n```\n\n### `check-build-spec` - Check and Migrate Build Specifications\n\nCheck your `.onedev-buildspec.yml` file for validity and migrate it to the latest version if needed.\n\n**Syntax:**\n```bash\ntod check-build-spec [OPTIONS]\n```\n\n**Options:**\n- `--working-dir <dir>` - Directory containing build spec file (defaults to current directory). Working directory is expected to be inside a git repository, with one of the remote pointing to a OneDev project\n\n**Example:**\n```bash\n# Check build spec in current directory\ntod check-build-spec\n\n# Check build spec in specific directory\ntod check-build-spec --working-dir /path/to/project\n```\n\n## Usage Examples\n\n### Complete Workflow Example\n\n1. **Set up configuration:**\n   ```bash\n   # Create ~/.todconfig\n   echo \"server-url=https://onedev.example.com\" > ~/.todconfig\n   echo \"access-token=your-token-here\" >> ~/.todconfig\n   ```\n\n2. **Test local changes:**\n   ```bash\n   # Run CI against your uncommitted changes\n   cd /path/to/onedev-git-repository\n   tod run-local ci\n   ```\n\n3. **Run against specific branch:**\n   ```bash\n   # Run ci job against the main branch\n   cd /path/to/onedev-git-repository\n   tod run --branch main ci\n   ```\n\n4. **Checkout a pull request:**\n   ```bash\n   # Checkout pull request #123 \n   cd /path/to/onedev-git-repository\n   tod checkout #123\n   ```\n\n### Parameter Usage\n\n```bash\n# Multiple parameters of the same key\ntod run-local -p env=test -p env=staging -p db=postgres ci\n```\n\n## Important Notes to Run Local Job\n\n### Nginx Configuration\n\nIf OneDev is running behind Nginx, configure it to disable HTTP buffering for real-time log streaming:\n\n```nginx\nlocation /~api/streaming {\n    proxy_pass http://localhost:6610/~api/streaming;\n    proxy_buffering off;\n}\n```\n\nSee [OneDev Nginx setup documentation](https://docs.onedev.io/administration-guide/reverse-proxy-setup#nginx) for details.\n\n### Security Considerations \n\nIf the job accesses job secrets. Make sure the authorization field is cleared to allow all jobs. Set authorization to allow all branches is not sufficient as local change will be pushed to a temporal ref not belonging to any branch\n\n### Performance Tips\n\n1. **Large repositories**: Use appropriate clone depth in checkout steps instead of full history\n2. **External dependencies**: Implement [caching](https://docs.onedev.io/tutorials/cicd/job-cache) for downloads and intermediate files\n3. **Build optimization**: Cache slow-to-generate intermediate files\n\n## Contributing\n\nTOD is part of the OneDev ecosystem. For contributions, issues, and feature requests, visit the [OneDev project](https://code.onedev.io/onedev/tod).\n\n## License\n\nSee [license.txt](license.txt) for license information.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "repositories",
        "repository",
        "version control",
        "git repositories",
        "repository management"
      ],
      "category": "version-control"
    }
  }
}