{
  "category": "finance--fintech",
  "categoryDisplay": "Finance & Fintech",
  "description": "",
  "totalRepositories": 51,
  "repositories": {
    "HuggingAGI--mcp-baostock-server": {
      "owner": "HuggingAGI",
      "name": "mcp-baostock-server",
      "url": "https://github.com/HuggingAGI/mcp-baostock-server",
      "imageUrl": "",
      "description": "MCP server based on baostock, providing access and analysis capabilities for Chinese stock market data.",
      "stars": 48,
      "forks": 15,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-26T13:35:46Z",
      "readme_content": "# MCP BaoStock Server\n\n一个基于BaoStock的股票数据服务器，提供了多个接口用于获取股票市场数据。\n\n## 功能特点\n\n- 提供股票基本信息查询\n- 支持K线历史数据获取\n- 行业分类数据查询\n- 分红派息数据查询\n- 季度财务指标数据（盈利能力、营运能力、成长能力）\n- 指数数据查询\n- 估值指标数据查询\n\n## 安装与使用\n\n### 依赖要求\n\n- Python 3.10+\n- baostock\n- pandas\n\n### 使用说明\n\n安装使用\n```bash\nuv run mcp-baostock-server\n```\n\n![](./assets/demo.png)\n\n## 接口测试用例\n\n以下是各个接口的测试用例示例：\n\n### 1. 获取股票基本信息\n```python\n# 获取贵州茅台(sh.600519)的基本信息，包括上市日期、行业分类等基础数据\n```\n\n### 2. 获取K线历史数据\n```python\n获取平安银行(sz.000001)从2023年1月1日到2023年1月31日的日K线数据，使用前复权方式\n```\n\n### 3. 获取行业分类数据\n```python\n查询中国平安(sh.601318)所属的行业分类信息\n```\n\n### 4. 获取分红派息数据\n```python\n查看工商银行(sh.601398)在2022年的分红派息详细信息\n```\n\n### 5. 获取季度盈利能力数据\n```python\n获取贵州茅台2023年第一季度的盈利能力数据，包括净利润、毛利率等指标\n```\n\n### 6. 获取季度营运能力数据\n```python\n分析招商银行(sh.600036)2023年第二季度的营运能力指标，包括应收账款周转率和存货周转率\n```\n\n### 7. 获取季度成长能力数据\n```python\n评估比亚迪(sz.002594)2023年第三季度的成长能力，包括营收增长率和净利润增长率\n```\n\n### 8. 获取指数数据\n```python\n获取沪深300指数(sh.000300)从2023年1月1日到2023年12月31日的日线行情数据\n```\n\n### 9. 获取估值指标数据\n```python\n分析阿里巴巴(sh.688699)从2023年初至今的估值指标变化，包括市盈率、市净率等数据\n```\n\n## 技术交流\n\n- 微信: iamxxn886\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "baostock",
        "stock",
        "finance",
        "baostock server",
        "mcp baostock",
        "based baostock"
      ],
      "category": "finance--fintech"
    },
    "JamesANZ--bitcoin-mcp": {
      "owner": "JamesANZ",
      "name": "bitcoin-mcp",
      "url": "https://github.com/JamesANZ/bitcoin-mcp",
      "imageUrl": "",
      "description": "An MCP server that enables AI models to query the Bitcoin blockchain.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-20T21:54:27Z",
      "readme_content": "# Bitcoin MCP Server\n\nA Model Context Protocol (MCP) server that provides real-time Bitcoin blockchain data by querying the [mempool.space](https://mempool.space) API.\n\n<a href=\"https://glama.ai/mcp/servers/@JamesANZ/bitcoin-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@JamesANZ/bitcoin-mcp/badge\" alt=\"Bitcoin Server MCP server\" />\n</a>\n\n## Features\n\nThis MCP server offers five specialized tools for querying Bitcoin blockchain data:\n\n### 🔍 Address Tools\n\n#### `get-address-stats`\n\nGet basic statistics for any Bitcoin address.\n\n**Input:**\n\n- `address` (string): Bitcoin address to query\n\n**Output:**\n\n- Chain statistics (funded/spent amounts, transaction counts)\n- Mempool statistics (pending transactions)\n\n**Example:**\n\n```\nAddress: 1wiz18xYmhRX6xStj2b9t1rwWX4GKUgpv\n\nChain Stats:\n- Funded TXOs: 10\n- Funded Sum: 150.07686949 BTC\n- Spent TXOs: 5\n- Spent Sum: 150.07599040 BTC\n- Total Transactions: 12\n\nMempool Stats:\n- Pending TXOs: 0\n- Pending Sum: 0.00000000 BTC\n- Pending Transactions: 0\n```\n\n#### `get-address-transactions`\n\nGet transaction history for a Bitcoin address.\n\n**Input:**\n\n- `address` (string): Bitcoin address to query\n- `limit` (optional, number): Number of transactions to return (1-50, default: 10)\n\n**Output:**\n\n- List of recent transactions with status, dates, fees, and sizes\n\n#### `get-address-utxos`\n\nGet current UTXOs (unspent transaction outputs) for a Bitcoin address.\n\n**Input:**\n\n- `address` (string): Bitcoin address to query\n- `limit` (optional, number): Number of UTXOs to return (1-50, default: 10)\n\n**Output:**\n\n- List of current UTXOs with amounts, confirmation status, and dates\n\n### 🔗 Transaction Tools\n\n#### `get-transaction`\n\nGet detailed information about a specific Bitcoin transaction.\n\n**Input:**\n\n- `txid` (string): Transaction ID (hash) to query\n\n**Output:**\n\n- Complete transaction details including:\n  - Basic info (version, size, weight, fee)\n  - Confirmation status and block information\n  - Input and output details with amounts and addresses\n\n### 🧱 Block Tools\n\n#### `get-block`\n\nGet information about a specific Bitcoin block.\n\n**Input:**\n\n- `block_height` (number): Block height to query\n\n**Output:**\n\n- Block details including:\n  - Hash, version, merkle root\n  - Previous block hash and timestamp\n  - Size, weight, and transaction count\n  - Fee statistics\n\n## Installation\n\n1. Clone this repository:\n\n```bash\ngit clone <repository-url>\ncd bitcoin-mcp\n```\n\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n3. Build the project:\n\n```bash\nnpm run build\n```\n\n## Usage\n\n### Running the Server\n\nStart the MCP server:\n\n```bash\nnpm start\n```\n\nThe server runs on stdio and can be connected to any MCP-compatible client.\n\n### Example Queries\n\nHere are some example queries you can make with this MCP server:\n\n#### Get Address Statistics\n\n```json\n{\n  \"tool\": \"get-address-stats\",\n  \"arguments\": {\n    \"address\": \"1wiz18xYmhRX6xStj2b9t1rwWX4GKUgpv\"\n  }\n}\n```\n\n#### Get Recent Transactions\n\n```json\n{\n  \"tool\": \"get-address-transactions\",\n  \"arguments\": {\n    \"address\": \"1wiz18xYmhRX6xStj2b9t1rwWX4GKUgpv\",\n    \"limit\": 5\n  }\n}\n```\n\n#### Get Transaction Details\n\n```json\n{\n  \"tool\": \"get-transaction\",\n  \"arguments\": {\n    \"txid\": \"15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521\"\n  }\n}\n```\n\n#### Get Block Information\n\n```json\n{\n  \"tool\": \"get-block\",\n  \"arguments\": {\n    \"block_height\": 857808\n  }\n}\n```\n\n## API Endpoints\n\nThis MCP server uses the following mempool.space API endpoints:\n\n- `GET /api/address/{address}` - Address statistics\n- `GET /api/address/{address}/txs` - Address transaction history\n- `GET /api/address/{address}/utxo` - Address UTXOs\n- `GET /api/tx/{txid}` - Transaction details\n- `GET /api/block/{height}` - Block information\n\n## Data Format\n\nAll amounts are displayed in BTC (converted from satoshis) for better readability. Timestamps are converted to ISO format for easy parsing.\n\n## Error Handling\n\nThe server includes comprehensive error handling:\n\n- Network errors are caught and reported with descriptive messages\n- Invalid addresses or transaction IDs return appropriate error messages\n- Rate limiting and API errors are handled gracefully\n\n## Dependencies\n\n- `@modelcontextprotocol/sdk` - MCP SDK for server implementation\n- `superagent` - HTTP client for API requests\n- `zod` - Schema validation for tool parameters\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "fintech",
        "bitcoin",
        "bitcoin mcp",
        "finance fintech",
        "jamesanz bitcoin"
      ],
      "category": "finance--fintech"
    },
    "JamesANZ--prediction-market-mcp": {
      "owner": "JamesANZ",
      "name": "prediction-market-mcp",
      "url": "https://github.com/JamesANZ/prediction-market-mcp",
      "imageUrl": "",
      "description": "An MCP server that provides real-time prediction market data from multiple platforms including Polymarket, PredictIt, and Kalshi. Enables AI assistants to query current odds, prices, and market information through a unified interface.",
      "stars": 7,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T04:52:34Z",
      "readme_content": "# prediction-markets-mcp\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/JamesANZ/prediction-market-mcp)](https://archestra.ai/mcp-catalog/jamesanz__prediction-market-mcp)\n\nA Model Context Protocol (MCP) server that provides real-time prediction market data from multiple platforms. This server allows you to query prediction markets for current odds, prices, and market information through a unified interface.\n\n## Supported Platforms\n\n- **Polymarket** - Crypto-based prediction markets with percentage-based odds\n- **PredictIt** - Traditional prediction markets with dollar-based prices\n- **Kalshi** - Regulated US prediction markets\n\n## Features\n\n- **Multi-platform Support**: Query both crypto and traditional prediction markets\n- **Real-time Data**: Get current odds and prices from live markets\n- **Keyword Search**: Filter markets by specific keywords or topics\n- **Unified Interface**: Consistent data format across different platforms\n- **Error Handling**: Graceful handling of API failures and network issues\n- **Type Safety**: Full TypeScript support with comprehensive type definitions\n\n## Installation\n\n### Prerequisites\n\n- Node.js (v18 or higher)\n- npm or yarn\n\n### Setup\n\n1. Clone the repository:\n\n```bash\ngit clone <repository-url>\ncd prediction-markets-mcp\n```\n\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n3. Build the project:\n\n```bash\nnpm run build\n```\n\n## Usage\n\n### Running the Server\n\nStart the MCP server:\n\n```bash\nnode build/index.js\n```\n\nThe server runs on stdio and can be integrated with MCP-compatible clients.\n\n### API Endpoints\n\nThe server provides a single tool: `get-prediction-markets`\n\n#### Parameters\n\n- `keyword` (string, required): Search term to filter markets\n  - Maximum length: 50 characters\n  - Examples: \"trump\", \"election\", \"supreme court\"\n\n#### Example Queries\n\n```\n// Search for Trump-related markets\n{\n  \"keyword\": \"trump\"\n}\n\n// Search for election markets\n{\n  \"keyword\": \"election\"\n}\n\n// Search for Supreme Court markets\n{\n  \"keyword\": \"supreme court\"\n}\n```\n\n### Response Format\n\nThe server returns prediction market data in the following format:\n\n#### Polymarket Markets\n\n```\n**Polymarket: Will Trump win the 2024 election?**\nYes: 45.2% | No: 54.8%\n```\n\n#### PredictIt Markets\n\n```\n**PredictIt: Which party will win the 2025 gubernatorial election in Virginia?**\nDemocratic: 89.0% | Republican: 11.0%\n```\n\n## Data Sources\n\n### Polymarket API\n\n- **Base URL**: `https://clob.polymarket.com/markets`\n- **Format**: JSON\n- **Odds Display**: Percentages (e.g., 65.2%)\n- **Data**: Market questions, active status, token prices\n\n### PredictIt API\n\n- **Base URL**: `https://www.predictit.org/api/marketdata/all/`\n- **Format**: JSON\n- **Odds Display**: Dollar amounts (e.g., $0.65)\n- **Data**: Market names, contracts, trade prices, status\n\n## Development\n\n### Project Structure\n\n```\nprediction-markets-mcp/\n├── src/\n│   └── index.ts          # Main server implementation\n├── build/                # Compiled JavaScript output\n├── package.json          # Dependencies and scripts\n├── tsconfig.json         # TypeScript configuration\n└── README.md            # This file\n```\n\n### Key Components\n\n#### Type Definitions\n\n```typescript\n// Polymarket types\ntype Market = {\n  question: string;\n  active: boolean;\n  archived: boolean;\n  tokens: Token[];\n};\n\n// PredictIt types\ntype PredictItMarket = {\n  id: number;\n  name: string;\n  shortName: string;\n  contracts: PredictItContract[];\n  status: string;\n};\n```\n\n#### Core Functions\n\n- `getPolymarketPredictionData()`: Fetches and processes Polymarket data\n- `getPredictItMarkets()`: Fetches all PredictIt markets\n- `makeApiRequest()`: Handles HTTP requests with proper headers\n\n### Building\n\n```bash\n# Development build\nnpm run build\n\n# Watch mode (if needed)\nnpm run dev\n```\n\n### Testing\n\nTo test the server manually:\n\n1. Start the server:\n\n```bash\nnode build/index.js\n```\n\n2. Send test requests through an MCP client or test the API endpoints directly.\n\n## Troubleshooting\n\n### Common Issues\n\n#### No Markets Found\n\n- **Cause**: Keyword too specific or no matching markets\n- **Solution**: Try broader keywords or check market availability\n- **Example**: Use \"election\" instead of \"specific candidate name\"\n\n### Development Setup\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Add tests if applicable\n5. Submit a pull request\n\n### Code Style\n\n- Use TypeScript for all new code\n- Follow existing naming conventions\n- Add JSDoc comments for public functions\n- Ensure all builds pass before submitting\n\n## License\n\nMIT License - see LICENSE file for details\n\n## Support\n\nFor issues and questions:\n\n1. Check the troubleshooting section\n2. Review existing GitHub issues\n3. Create a new issue with detailed information\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "fintech",
        "finance",
        "market mcp",
        "mcp server",
        "prediction market"
      ],
      "category": "finance--fintech"
    },
    "QuentinCody--braintree-mcp-server": {
      "owner": "QuentinCody",
      "name": "braintree-mcp-server",
      "url": "https://github.com/QuentinCody/braintree-mcp-server",
      "imageUrl": "",
      "description": "Unofficial PayPal Braintree payment gateway MCP Server for AI agents to process payments, manage customers, and handle transactions securely.",
      "stars": 3,
      "forks": 3,
      "license": "Other",
      "language": "Python",
      "updated_at": "2025-09-02T07:27:43Z",
      "readme_content": "# Braintree MCP Server\n\nAn unofficial Model Context Protocol (MCP) server for interacting with PayPal Braintree payment processing services.\n\n## License and Citation\n\nThis project is available under the MIT License with an Academic Citation Requirement. This means you can freely use, modify, and distribute the code, but any academic or scientific publication that uses this software must provide appropriate attribution.\n\n### For academic/research use:\nIf you use this software in a research project that leads to a publication, presentation, or report, you **must** cite this work according to the format provided in [CITATION.md](CITATION.md).\n\n### For commercial/non-academic use:\nCommercial and non-academic use follows the standard MIT License terms without the citation requirement.\n\nBy using this software, you agree to these terms. See [LICENSE.md](LICENSE.md) for the complete license text.\n\n## Server Versions\n\nThere are two versions of the Braintree MCP server available:\n\n### 1. STDIO Transport Server (`braintree_server.py`)\n\n- Uses standard input/output (STDIO) for communication\n- Designed for integrations with Claude Desktop and other MCP clients that support STDIO\n- Each client session spawns a new server process\n- The server terminates when the client disconnects\n\n**Usage with Claude Desktop:**\n1. Configure `claude_desktop_config.json` to point to this server\n2. Open Claude Desktop and select the Braintree tool\n\n### 2. SSE Transport Server (`braintree_sse_server.py`)\n\n- Uses Server-Sent Events (SSE) for communication\n- Designed as a standalone web server that can handle multiple client connections\n- Server runs persistently until manually stopped\n- Binds to `127.0.0.1:8001` by default (configurable)\n\n**Manual Usage:**\n```bash\npython braintree_sse_server.py\n```\n\n**Connecting to the SSE server:**\nUse an MCP client that supports SSE transport and connect to `http://127.0.0.1:8001/sse`\n\n## Overview\n\nThis server implements the Model Context Protocol (MCP) specification to provide AI assistant models with direct, structured access to Braintree's payment processing capabilities via GraphQL API. It enables AI systems to perform payment operations like fetching transactions, creating payments, and managing customer data through MCP tools.\n\n## Installation\n\n1. Clone this repository\n```bash\ngit clone https://github.com/yourusername/braintree-mcp-server.git\ncd braintree-mcp-server\n```\n\n2. Set up a Python 3.13+ environment\n```bash\n# If using pyenv\npyenv install 3.13.0\npyenv local 3.13.0\n\n# Or using another method to ensure Python 3.13+\n```\n\n3. Install dependencies\n```bash\npip install -e .\n```\n\n## Configuration\n\nCreate a `.env` file in the project root with your Braintree credentials:\n\n```\nBRAINTREE_MERCHANT_ID=your_merchant_id\nBRAINTREE_PUBLIC_KEY=your_public_key\nBRAINTREE_PRIVATE_KEY=your_private_key\nBRAINTREE_ENVIRONMENT=sandbox  # or production\n```\n\nYou can obtain these credentials from your Braintree Control Panel.\n\n## Usage\n\n### Running the server\n\n#### Default STDIO Transport\n```bash\npython braintree_server.py\n```\n\nThe server runs using stdio transport by default, which is suitable for integration with AI assistant systems that support MCP.\n\n#### Server-Sent Events (SSE) Transport\n```bash\npython braintree_sse_server.py\n```\n\nThe SSE server provides a web-based transport layer that allows multiple persistent client connections. This is useful for standalone deployments where multiple clients need to access the Braintree functionality.\n\nDefault configuration:\n- Host: 127.0.0.1 (localhost)\n- Port: 8001\n- Environment: Defined in your .env file\n\nSee `requirements.txt` for the required dependencies.\n\n### Available MCP Tools\n\n#### braintree_ping\n\nSimple connectivity test to check if your Braintree credentials are working.\n\n```python\nresponse = await braintree_ping()\n# Returns \"pong\" if successful\n```\n\n#### braintree_execute_graphql\n\nExecute arbitrary GraphQL queries against the Braintree API.\n\n```python\nquery = \"\"\"\nquery GetTransactionDetails($id: ID!) {\n  node(id: $id) {\n    ... on Transaction {\n      id\n      status\n      amount {\n        value\n        currencyCode\n      }\n      createdAt\n    }\n  }\n}\n\"\"\"\n\nvariables = {\"id\": \"transaction_id_here\"}\n\nresponse = await braintree_execute_graphql(query, variables)\n# Returns JSON response from Braintree\n```\n\n## Common GraphQL Operations\n\n### Fetch Customer\n\n```graphql\nquery GetCustomer($id: ID!) {\n  node(id: $id) {\n    ... on Customer {\n      id\n      firstName\n      lastName\n      email\n      paymentMethods {\n        edges {\n          node {\n            id\n            details {\n              ... on CreditCardDetails {\n                last4\n                expirationMonth\n                expirationYear\n                cardType\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n### Create Transaction\n\n```graphql\nmutation CreateTransaction($input: ChargePaymentMethodInput!) {\n  chargePaymentMethod(input: $input) {\n    transaction {\n      id\n      status\n      amount {\n        value\n        currencyCode\n      }\n    }\n  }\n}\n```\n\nWith variables:\n```json\n{\n  \"input\": {\n    \"paymentMethodId\": \"payment_method_id_here\",\n    \"transaction\": {\n      \"amount\": \"10.00\",\n      \"orderId\": \"order123\",\n      \"options\": {\n        \"submitForSettlement\": true\n      }\n    }\n  }\n}\n```\n\n## Troubleshooting\n\n- Ensure your Braintree credentials are correct in the `.env` file\n- Verify your network connection can reach Braintree's API endpoints\n- Check for any rate limiting or permission issues with your Braintree account",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "braintree",
        "mcp",
        "fintech",
        "paypal braintree",
        "braintree mcp",
        "braintree payment"
      ],
      "category": "finance--fintech"
    },
    "Regenerating-World--pix-mcp": {
      "owner": "Regenerating-World",
      "name": "pix-mcp",
      "url": "https://github.com/Regenerating-World/pix-mcp",
      "imageUrl": "",
      "description": "Generate Pix QR codes and copy-paste strings with fallback across multiple providers (Efí, Cielo, etc.) for Brazilian instant payments.",
      "stars": 2,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-14T00:04:09Z",
      "readme_content": "# Pix MCP Server v2.1.0\n\nA lightweight Model Context Protocol (MCP) server that enables AI agents (Claude, Cursor, Windsurf) to generate static Pix QR codes via natural-language prompts.\n\n## 🚀 Features\n\n- **🔧 MCP Tool**:\n  - `generateStaticPix` - Generate static Pix QR codes for any Pix key (no API required)\n- **🚀 Production-ready**: Comprehensive error handling and logging\n- **🔒 Type-safe**: Full TypeScript implementation with Zod validation\n- **📱 QR Code generation**: Automatic QR code creation for Pix payments\n- **📦 Zero Dependencies**: No external API keys or services required\n- **🌍 Open & Accessible**: Works without any registration or credentials\n- **✅ EMV 4.0 Compliant**: Follows BACEN PIX standards with proper CRC16-CCITT validation\n\n## 🚀 Quick Start\n\n```bash\n# Install globally\nnpm install -g pix-mcp\n\n# Run in MCP mode (for Claude Desktop)\npix-mcp\n\n# Run in HTTP mode (for web services)\nMCP_MODE=http pix-mcp\n```\n\n## 🔧 Usage\n\n### MCP Mode (Default)\n\n```bash\n# Start in MCP mode for Claude Desktop integration\npix-mcp\n```\n\n### HTTP Mode\n\n```bash\n# Start in HTTP mode on port 3000\nMCP_MODE=http pix-mcp\n```\n\n### Making Requests\n\n#### HTTP API\n\n```bash\ncurl -X POST http://localhost:3000/tools/call \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"generateStaticPix\",\n    \"arguments\": {\n      \"pixKey\": \"10891990909\",\n      \"amount\": 100.50,\n      \"recipientName\": \"Franco Camelo Aguzzi\",\n      \"recipientCity\": \"Florianopolis\"\n    }\n  }'\n```\n\n#### MCP Tool\n\n```typescript\nconst result = await mcpClient.callTool('generateStaticPix', {\n  pixKey: '10891990909',\n  amount: 100.5,\n  recipientName: 'Franco Camelo Aguzzi',\n  recipientCity: 'Florianopolis',\n});\n```\n\n## 🚀 Deployment\n\n### Railway\n\n[![Deploy on Railway](https://railway.app/button.svg)](https://railway.app/new/template?template=https%3A%2F%2Fgithub.com%2FRegenerating-World%2Fpix-mcp)\n\n**⚠️ Important:** After deploying to Railway, add these environment variables in the Railway dashboard:\n\n- `MCP_MODE=http`\n- `NODE_ENV=production` (optional)\n\n### Manual Deployment\n\n```bash\n# Clone the repository\ngit clone https://github.com/Regenerating-World/pix-mcp.git\ncd pix-mcp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Start the server in HTTP mode\nMCP_MODE=http NODE_ENV=production node dist/index.js\n```\n\n## 📝 License\n\nMIT\n\n## 🔧 Configuration\n\n### Environment Variables\n\n- `MCP_MODE`: Server mode (`stdio` for MCP, `http` for HTTP API) - Default: `stdio`\n- `NODE_ENV`: Environment (`development`/`production`) - Default: `development`\n- `PORT`: HTTP port when in HTTP mode - Default: `3000`\n\n## 🤖 Usage with AI Tools\n\n### Claude Desktop\n\n1. Install the package globally:\n\n```bash\nnpm install -g pix-mcp\n```\n\n2. Add to your Claude Desktop MCP configuration (`~/Library/Application Support/Claude/claude_desktop_config.json` on macOS or `%APPDATA%/Claude/claude_desktop_config.json` on Windows):\n\n```json\n{\n  \"mcpServers\": {\n    \"pix-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"pix-mcp\"],\n      \"env\": {\n        \"MCP_MODE\": \"stdio\"\n      }\n    }\n  }\n}\n```\n\n3. Restart Claude Desktop and start using:\n\n```\nCreate a Pix charge for R$25.50 to Maria Silva for lunch\n```\n\n### Cursor (with MCP support)\n\nAdd to your Cursor MCP settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"pix-mcp\": {\n      \"command\": \"pix-mcp\"\n    }\n  }\n}\n```\n\n### Windsurf (with MCP support)\n\nConfigure in Windsurf MCP settings:\n\n```json\n{\n  \"pix-mcp\": {\n    \"command\": \"npx pix-mcp\",\n    \"args\": []\n  }\n}\n```\n\n### Any MCP-compatible tool\n\nYour tool should support MCP servers. Configure using:\n\n- **Command**: `npx pix-mcp` or `pix-mcp` (if installed globally)\n- **Protocol**: stdio\n- **Environment**: `MCP_MODE=stdio`\n\n## 🔨 Available Tools\n\n### `generateStaticPix`\n\nCreates a static Pix payment QR code following BACEN EMV 4.0 standards.\n\n**Parameters:**\n\n- `pixKey` (string): Valid Pix key (email, phone, CPF, CNPJ, or random key)\n- `amount` (number): Payment amount in BRL (0.01 to 999,999.99)\n- `recipientName` (string): Name of the payment recipient (max 25 chars)\n- `recipientCity` (string): City of the payment recipient (max 15 chars)\n\n**Returns:**\n\n- Payment details (amount, recipient, city)\n- Pix copy-paste code (EMV format)\n- QR code image (base64 data URL)\n- Success status and message\n\n**Supported Pix Key Types:**\n\n- 📧 Email: `example@email.com`\n- 📱 Phone: `+5511999999999`\n- 👤 CPF: `12345678901` (11 digits)\n- 🏢 CNPJ: `12345678000195` (14 digits)\n- 🔑 Random Key: `123e4567-e89b-12d3-a456-426614174000` (UUID format)\n\n## 🏗️ Development\n\n```bash\n# Development mode with hot reload\nnpm run dev\n\n# Run tests\nnpm test\n\n# Build for production\nnpm run build\n\n# Lint code\nnpm run lint\n\n# Format code\nnpm run format\n```\n\n## 🗺️ Roadmap\n\n### Phase 1: MVP ✅\n\n- [x] `generateStaticPix` tool\n- [x] Static Pix QR code generation\n- [x] QR code generation\n- [x] Claude Desktop compatibility\n- [x] EMV 4.0 compliance\n- [x] CRC16-CCITT validation\n- [x] All Pix key types support\n- [x] Public deployment\n- [x] MCP server configuration files\n- [x] Multi-tool compatibility\n\n### Phase 2: MCP Discovery\n\n- [ ] Register with MCP registry\n- [ ] Add to community MCP directories\n- [ ] Integration examples for more tools\n\n## 🔒 Security & Validation\n\n- ✅ EMV 4.0 standard compliance\n- ✅ CRC16-CCITT checksum validation\n- ✅ Input validation with Zod schemas\n- ✅ Pix key format validation\n- ✅ Comprehensive error handling\n- ✅ Type-safe TypeScript implementation\n\n## ⚠️ Important Notes\n\n- **CPF/CNPJ Keys**: Must be valid and registered as Pix keys\n- **Test Data**: Avoid using fake CPFs like `12345678900` - they will be rejected by banks\n- **Static Codes**: No expiration, recipient must check payments manually\n- **Validation**: All codes are EMV-compliant and pass bank validation\n\n## 📝 License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Add tests if applicable\n5. Submit a pull request\n\n## 📞 Support\n\n- GitHub Issues: [Report bugs or request features](https://github.com/Regenerating-World/pix-mcp/issues)\n- Documentation: Available in this README\n\n---\n\nMade with ❤️ for the Brazilian Pix ecosystem\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "pix",
        "fintech",
        "qr",
        "pix qr",
        "qr codes",
        "pix mcp"
      ],
      "category": "finance--fintech"
    },
    "RomThpt--xrpl-mcp-server": {
      "owner": "RomThpt",
      "name": "xrpl-mcp-server",
      "url": "https://github.com/RomThpt/mcp-xrpl",
      "imageUrl": "",
      "description": "MCP server for the XRP Ledger that provides access to account information, transaction history, and network data. Allows querying ledger objects, submitting transactions, and monitoring the XRPL network.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "xrp",
        "xrpl",
        "mcp",
        "xrp ledger",
        "xrpl mcp",
        "romthpt xrpl"
      ],
      "category": "finance--fintech"
    },
    "ThomasMarches--substrate-mcp-rs": {
      "owner": "ThomasMarches",
      "name": "substrate-mcp-rs",
      "url": "https://github.com/ThomasMarches/substrate-mcp-rs",
      "imageUrl": "",
      "description": "An MCP server implementation to interact with Substrate-based blockchains. Built with Rust and interfacing the [subxt](https://github.com/paritytech/subxt) crate.",
      "stars": 10,
      "forks": 3,
      "license": "MIT License",
      "language": "Rust",
      "updated_at": "2025-09-27T14:45:29Z",
      "readme_content": "# Substrate MCP Server\n\n[![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n[![Rust](https://img.shields.io/badge/Rust-2025-brightgreen)](https://www.rust-lang.org/)\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/ThomasMarches/substrate-mcp-rs)](https://archestra.ai/mcp-catalog/thomasmarches__substrate-mcp-rs)\n\nA Model Context Protocol [(MCP)](https://modelcontextprotocol.io/introduction) server for Substrate blockchains, written in Rust. This project exposes dynamic Substrate blockchain operations (querying balances, blocks, pallets, storage, events, and more) via the MCP protocol, and is fully configurable via environment variables.\n\nDesigned to interface with the [subxt](https://github.com/paritytech/subxt) crate.\n\n## ✨ Features\n\n- Query account balances and storage dynamically\n- List pallets and their entries\n- Fetch and filter events and extrinsics\n- Submit and watch dynamic signed transactions\n- Access system and block information\n- Custom RPC calls to Substrate nodes\n\n## 🚀 Potential Use Cases\n\n1. AI-Driven Blockchain Operations\n\n    - Integrate with LLMs (like Cursor or Claude) to allow users to ask questions in natural language (e.g., \"What was the last transfer from Alice?\"), which are translated into MCP tool calls.\n    - Build a chatbot that can answer questions, fetch balances, or explain on-chain activity using your MCP server as the backend.\n    - Use the MCP server to provide live updates on-chain activity, such as balance changes or transaction statuses, to development tools like VSCode, Cursor, Claude Code, etc.\n\n2. Custom Dashboards and Monitoring\n\n    - Create custom dashboards and monitoring systems for your Substrate blockchain\n    - Display real-time data and analytics on your blockchain operations\n    - Set up alerts and notifications for critical events\n    - Use AI agents to detect suspicious activity by analyzing events and extrinsics in real time.\n\n## 🛠️ Requirements\n\n- Rust\n- Access to a Substrate node endpoint (WebSocket)\n- A valid signing keypair (as hex)\n- Runtime metadata file for your target chain (see below for naming and placement)\n\n## 📦 Installation\n\nClone the repository and build:\n\n```sh\ngit clone https://github.com/ThomasMarches/substrate-mcp-rs.git\ncd substrate-mcp-rs\ncargo build --release\n```\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following variables:\n\n```env\n# WebSocket endpoint for the Substrate node\nRPC_URL=wss://your-node-url.example.com\n\n# Signing keypair as hex (32 bytes, e.g. output of subkey inspect-key --scheme Sr25519)\nSIGNING_KEYPAIR_HEX=your_signing_keypair_hex_here\n```\n\n### Generating a Signing Keypair\n\nYou can generate a keypair and get the secret seed in hex using [subkey](https://paritytech.github.io/polkadot-sdk/master/subkey/index.html):\n\n```sh\nsubkey generate --scheme Sr25519 --output-type Json\n```\n\nUse the `secretSeed` field (strip the 0x prefix if present) for `SIGNING_KEYPAIR_HEX`.\n\n### Obtaining and Placing Runtime Metadata\n\nExport the runtime metadata from your node and place it at `artifacts/metadata.scale`:\n\n```sh\nsubxt metadata -f bytes > artifacts/metadata.scale\n```\n\n**Important:** The file must be named `metadata.scale` and located in the `artifacts/` directory before building. The build will fail if this file is missing or misnamed.\n\n## ▶️ Usage\n\nTo start the MCP server:\n\n```sh\ncargo run --release\n```\n\nThe server will start and listen for MCP requests via stdio.\n\n## 🖇️ Integrating with Cursor\n\nTo use this MCP server with [Cursor](https://www.cursor.so/), you need to add it to your Cursor MCP configuration. This allows Cursor to discover and interact with your Substrate MCP server.\n\n1. Build your server in release mode:\n\n   ```sh\n   cargo build --release\n   ```\n\n2. Locate the path to the built binary (typically `target/release/substrate-mcp-rs`).\n\n3. In your project (or global) `.cursor/mcp.json` file, add an entry for your server. For example:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"substrate-mcp-rs\": {\n         \"command\": \"$PROJECT_ROOT_ABSOLUTE_PATH/target/release/substrate-mcp-rs\",\n         \"args\": []\n       }\n     }\n   }\n   ```\n\n   - Replace the `command` path with the absolute path to your built binary if it differs.\n\n4. Restart Cursor. It should now detect and connect to your Substrate MCP server, making its tools available for use.\n\nFor more details, see the [Cursor documentation](https://docs.cursor.com/context/model-context-protocol) or the [Model Context Protocol introduction](https://modelcontextprotocol.io/introduction).\n\n## 🧰 Available Tools\n\nThe server exposes a set of tools for interacting with a Substrate blockchain, including:\n\n- `query_balance`: Fetch the balance of an account\n- `list_pallets`: List all pallets in the runtime\n- `list_pallet_entries`: List all storage entries for a pallet\n- `dynamic_runtime_call`: Execute a runtime API call\n- `send_dynamic_signed_transaction`: Construct, sign, and send a transaction\n- `query_storage`: Query storage by pallet and entry\n- `get_latest_events`: Get all events from the latest block\n- `find_events`: Find specific events by pallet and variant\n- `get_latest_block`: Get details about the latest block\n- `get_block_by_hash`: Get block details by hash\n- `find_extrinsics`: Find extrinsics in the latest block\n- `get_system_info`: Get system info via RPC\n- `custom_rpc`: Make a custom RPC call\n\nSee [`src/tooling/substrate.rs`](src/tooling/substrate.rs) for full details and parameters.\n\n## 🗂️ Project Structure\n\n- `src/main.rs`: Entry point, sets up logging and starts the MCP server\n- `src/tooling/`: Contains the Substrate tool implementation\n- `artifacts/`: Place your runtime metadata file here as `metadata.scale` (required before building)\n\n## 📈 Next Steps and Goals\n\n- [ ] Add E2E tests\n- [ ] Add Unit tests\n- [ ] Add more tools\n\n## 🤝 Contributing\n\nContributions are welcome! Please open issues or pull requests. For larger changes, open an issue first to discuss your proposal.\n\n- Follow Rust best practices and ensure code is documented\n- Run `cargo fmt` and `cargo clippy` before submitting\n- Add tests where possible\n\n## 📄 License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "substrate",
        "subxt",
        "substrate mcp",
        "mcp server",
        "paritytech subxt"
      ],
      "category": "finance--fintech"
    },
    "Wuye-AI--mcp-server-wuye-ai": {
      "owner": "Wuye-AI",
      "name": "mcp-server-wuye-ai",
      "url": "https://github.com/wuye-ai/mcp-server-wuye-ai",
      "imageUrl": "",
      "description": "An MCP server that interact with capabilities of the CRIC Wuye AI platform, an intelligent assistant specifically for the property management industry.",
      "stars": 1,
      "forks": 2,
      "license": "No License",
      "language": "",
      "updated_at": "2025-09-15T02:13:40Z",
      "readme_content": "# CRIC物业AI MCP Server\n\n--------------\n[![NPM Version](https://img.shields.io/npm/v/%40wuye-ai%2Fmcp-server-wuye-ai)](https://www.npmjs.com/package/@wuye-ai/mcp-server-wuye-ai)\n[![zh-CN](https://img.shields.io/badge/lang-zh--CN-red.svg)](https://github.com/wuye-ai/mcp-server-wuye-ai/blob/master/README.md)\n[![en](https://img.shields.io/badge/lang-en-red.svg)](https://github.com/wuye-ai/mcp-server-wuye-ai/blob/master/README.en.md)\n[![Apply For Access Token](https://img.shields.io/badge/%E7%94%B3%E8%AF%B7%E5%BC%80%E9%80%9A-gray?label=%F0%9F%91%8B)](https://wuye-ai.cricbigdata.com/mcp)\n[![Practical Guide](https://img.shields.io/badge/%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97-gray?label=%F0%9F%A7%AD)](https://wuye-ai.cricbigdata.com/mcp)\n\n已上架 | \n[<img src=\"https://static-production.npmjs.com/b0f1a8318363185cc2ea6a40ac23eeb2.png\" width=\"12\" height=\"12\" alt=\"NPM Logo\"> **NPM**](https://www.npmjs.com/package/@wuye-ai/mcp-server-wuye-ai) | \n[<img src=\"https://mcp.so/favicon.ico\" width=\"12\" height=\"12\" alt=\"MCP.so Logo\"> **MCP.so**](https://mcp.so/server/CRIC%E7%89%A9%E4%B8%9AAI/CRIC) |\n[<img src=\"https://mcpservers.org/icon.png\" width=\"12\" height=\"12\" alt=\"MCPServers.org Logo\"> **MCPServers.org**](https://mcpservers.org/servers/wuye-ai/mcp-server-wuye-ai) |\n[<img src=\"https://tcb.cloud.tencent.com/favicon.ico\" width=\"12\" height=\"12\" alt=\"腾讯云开发 Logo\"> **腾讯云开发**](https://tcb.cloud.tencent.com/mcp-server/mcp-server-wuye-ai) |\n[<img src=\"https://g.alicdn.com/sail-web/maas/2.8.5/favicon/128.ico\" width=\"12\" height=\"12\" alt=\"ModelScope Logo\"> **ModelScope**](https://modelscope.cn/mcp/servers/@wuye-ai/mcp-server-wuye-ai) |\n[<img src=\"https://gw.alicdn.com/imgextra/i4/O1CN01vVn7g32134zNZEeAR_!!6000000006928-55-tps-24-24.svg\" width=\"12\" height=\"12\" alt=\"阿里云百炼 Logo\"> **阿里云百炼**](https://bailian.console.aliyun.com/?tab=mcp#/mcp-market/detail/cric-wuye-ai) |\n[<img src=\"https://agi-dev-platform-web.cdn.bcebos.com/ai_apaas/favicon.ico\" width=\"12\" height=\"12\" alt=\"百度智能云 Logo\"> **百度智能云千帆**](https://console.bce.baidu.com/ai_apaas/mcpServerCenter/mcp_t_cric_ai/detail) |\n[<img src=\"https://gips3.baidu.com/it/u=1551671786,626435656&fm=3028&app=3028&f=PNG&fmt=auto&q=100&size=f300_315\" width=\"12\" height=\"12\" alt=\"百度搜索开放平台 Logo\"> **百度搜索开放平台**](https://sai.baidu.com/server/CRIC?id=DZy6eHdoKx2v3gfThymJXf)\n\n（更多MCP平台陆续上架中……）\n\n--------------\n\n## 简介\n\n**CRIC物业AI** 是 [克而瑞](http://www.cricchina.com/) 专为物业行业打造的智能 AI 助理，于2025年4月25日 [正式发布](https://mp.weixin.qq.com/s/GC4V1M6N199Ay2f3kZan_Q)。\n\n**CRIC物业AI** 通过行业知识库建设，结合多模态大模型 + RAG 技术，集成五大核心能力模块：**行业研究**、**法律法规**、**社区治理**、**项目经营**、**文案写作**，并在行业垂类知识基础上，拓展了 **资讯舆情** 和 **人才培训** 两大智能体。\n\n## 核心能力\n\n克而瑞通过三个能力来构建其自身在物业AI合作领域优势：\n\n- **数据资产转化能力：** 将10亿字行业语料、TB级多模态数据转化为物业行业的高质量数据集，并构建了一套行业数据质量评估体系，保障准确率和可信度；\n- **场景穿透能力：** 聚焦20+物业行业垂直业务场景，定向选用对应领域知识库，精准匹配；\n- **生态进化能力：** 通过每日实时监测超过500+可信资讯和数据来源，处理10万+实时数据的自更新系统，在政策预警、商机挖掘和招投标分析等环节实现准确率突破90%，形成行业AI知识中枢的持续升级。\n\n## MCP Server 功能\n\n**CRIC物业AI MCP Server** 是一个基于 [Model Context Protocol](https://modelcontextprotocol.io/) 的服务端实现，基于 **CRIC物业AI** 平台的部分原子能力，目前版本提供了以下三大功能模块：\n\n- **资讯日报：** 获取物业行业资讯日报。\n- **知识库：** 搜索物业行业专属知识库。\n\n具体工具（Tool）定义，请参考 [工具定义配置](./TOOLS.md) 文档。更多能力即将推出，敬请期待。\n\n## CRIC物业AI 知识库\n\n使用 CRIC 物业 AI MCP Server，可以查询克而瑞建设的物业行业垂类高质量知识库，获取用户问题相关的知识文本供 AI 参考。\n\n目前可供开通的知识库包括：**法律法规、物业企业信息、克而瑞榜单、优秀物业项目服务案例、物业行业研究、物业项目应急响应、物业项目综合管理、物业项目客诉处理、物业行业法律判例、非住宅类物业研究、物业项目管理案例** 等。\n\n## 获取 Access Token\n\n您需要先获取 **CRIC物业AI Access Token** 才能使用 CRIC物业AI MCP Server 的功能。请访问我们的网站申请：[申请开通体验 CRIC物业AI MCP Server](https://wuye-ai.cricbigdata.com/mcp)。\n\n## 快速开始\n\n### 1. SSE 方式（http）\n\n#### 1.1 运行\n\n您可以自行运行一个 MCP Server 并启用 HTTP 模式，或者直接使用我们提供的 URL。\n\n##### A. 自行运行：\n\n```bash\nMODE=http PORT=3011 npx -y @wuye-ai/mcp-server-wuye-ai\n```\n\n运行成功后，MCP Server URL 为 `http://localhost:3011/sse/mcp` 。\n\n##### B. 使用官方：\n\n或者您也可以直接使用我们的官方的 MCP Server URL：\n\n- 测试环境：`https://mcp.wuye-ai-staging.cricbigdata.com/sse/mcp`\n- 生产环境：`https://mcp.wuye-ai.cricbigdata.com/sse/mcp`\n\n#### 1.2 测试\n\n您可以使用 MCP Inspector 或第三方工具连接 SSE 方式的 MCP Server。\n\n##### MCP Inspector：\n\n服务运行成功后，您可以运行 [MCP Inspector](https://github.com/modelcontextprotocol/inspector) 来查看并测试服务是否正常运行。\n\n```bash\nnpx @modelcontextprotocol/inspector\n```\n\nMCP Inspector 启动后，用浏览器打开其 Web UI（默认为：http://127.0.0.1:6274/ ）。并按照如下步骤配置连接：\n\n1. 在界面左侧设置 Transport Type 为 `SSE`，URL 为上一步获得的 MCP Server URL。\n2. 展开 Authentication 面板，设置 Header Name 为 `Authorization` ，Bearer Token 为您的 **CRIC物业AI Access Token**。\n3. 点击 Connect 按钮，连接成功后，左侧会显示当前连接的状态。\n\n此时您就可以操作 MCP Inspector 测试 CRIC物业AI 的 MCP Server 了。具体使用方法您可以参考 [MCP Inspector 中文文档](https://mcp-docs.cn/docs/tools/inspector) 。\n\n##### 第三方工具：\n\n通过第三方工具使用 SSE 方式接入时，您需要通过 `Authorization` **HTTP 头** 指定 Access Token。例如，[Cline](https://cline.bot/) 设置文件：\n\n```json\n{\n  \"mcpServers\": {\n    \"CRIC物业AI\": {\n      \"transportType\": \"sse\",\n      \"url\": \"https://mcp.wuye-ai.cricbigdata.com/sse/mcp\",\n      \"headers\": {\n        \"Authorization\": \"Bearer {{您的 CRIC物业AI Access Token}}\"\n      }\n    }\n  }\n}\n```\n\n请注意，当前部分使用 [@modelcontextprotocol/typescript-sdk](https://github.com/modelcontextprotocol/typescript-sdk) 的工具 [其 ***HTTP 头*** 设置可能无法正确生效](https://github.com/modelcontextprotocol/typescript-sdk/issues/317)，因此建议使用 MCP Inspector 来测试。或者，作为一种临时措施，我们也支持在 URL 中使用 Query 方式指定 Access Token，例如：\n\n```json\n{\n  \"mcpServers\": {\n    \"CRIC物业AI\": {\n      \"transportType\": \"sse\",\n      \"url\": \"https://mcp.wuye-ai.cricbigdata.com/sse/mcp?token={{您的 CRIC物业AI Access Token}}\"\n    }\n  }\n}\n```\n\n### 2. Stdio 方式\n\n#### 2.1 运行\n\n我们也支持 stdio 方式运行 MCP Server。命令如下：\n\n```bash\nCRIC_WUYE_AI_ACCESS_TOKEN={{您的 CRIC物业AI Access Token}} npx -y @wuye-ai/mcp-server-wuye-ai\n```\n\n#### 2.2 测试\n\n您可以使用第三方工具或者 MCP Inspector 来连接 Stdio 方式的 MCP Server。请注意，Stdio 方式下一般无需用户手动运行 MCP Server，通常是由第三方工具自动运行。\n\n##### MCP Inspector\n\n在 MCP Inspector 中，您也可以选择 Stdio 方式接入。具体步骤如下：\n\n1. 在界面左侧设置 Transport Type 为 `Stdio`，Command 为 `npx`，Arguments 为 `-y @wuye-ai/mcp-server-wuye-ai`。\n2. 展开 Environment Variables 面板，添加或设置 `CRIC_WUYE_AI_ACCESS_TOKEN` 为您的 **CRIC物业AI Access Token**。\n3. 点击 Connect 按钮，MCP Inspector 会自动运行命令启动 MCP Server 并连接。连接成功后，左侧会显示当前连接的状态。\n\n此时您就可以操作 MCP Inspector 测试 CRIC物业AI 的 MCP Server 了。\n\n##### 第三方工具\n\n通过第三方工具使用 Stdio 方式接入时，如果您需要指定 Access Token，请通过环境变量 `CRIC_WUYE_AI_ACCESS_TOKEN` 指定。例如，Cline 设置文件：\n\n```json\n{\n  \"mcpServers\": {\n    \"CRIC物业AI\": {\n      \"transportType\": \"stdio\",\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@wuye-ai/mcp-server-wuye-ai\"\n      ],\n      \"env\": {\n        \"CRIC_WUYE_AI_ACCESS_TOKEN\": \"{{您的 CRIC物业AI Access Token}}\"\n      }\n    }\n  }\n}\n```\n\n## 实践指南\n\nCRIC物业AI MCP Server 支持各类智能体平台接入，如钉钉AI助理等。您可以参考 [实践指南](https://alidocs.dingtalk.com/i/p/nb9XJDP07QqPDGyA/docs/mweZ92PV6My4ebxdHdb9oQBYWxEKBD6p) 进行操作体验。\n\n## 可选配置\n\n您可以通过环境变量或 URL Query（SSE方式下） 来配置 CRIC物业AI MCP Server 的运行方式。以下是可用的配置项：\n\n| 环境变量参数名                          | URL Query 参数名 | 默认值                                      | 描述                                                                                                                                                                            |\n|----------------------------------|---------------|------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `MODE`                           | *不支持*         | `stdio`                                  | 运行模式，支持 `stdio` 和 `http` 两种模式。                                                                                                                                                |\n| `HOSTNAME`                       | *不支持*         | `0.0.0.0`                                | HTTP 绑定主机名，仅在 `http` 模式下有效。`0.0.0.0`即为绑定到本机所有IP地址。                                                                                                                            |\n| `PORT`                           | *不支持*         | `3011`                                   | HTTP 绑定端口，仅在 `http` 模式下有效。                                                                                                                                                    |\n| `CRIC_WUYE_AI_ACCESS_TOKEN`      | `token`       | *无*                                      | CRIC物业AI Access Token。如果不提供，则使用实际请求 HTTP Authorization Header 中的值。                                                                                                            |\n| `CRIC_WUYE_AI_PROVIDER_API_BASE` | *不支持*         | `https://export.wuye-ai.cricbigdata.com` | CRIC物业AI 后端接入 API，请注意 ***此 URL 不是 CRIC物业AI MCP Server 的 URL*** 。可选值为 `https://export.wuye-ai-staging.cricbigdata.com` （测试环境）、 `https://export.wuye-ai.cricbigdata.com` （生产环境） |\n| `CRIC_WUYE_AI_NAME_EN`           | `name_en`     | 由 CRIC物业AI 工作人员为您默认配置                    | 是否使用工具英文名称，支持 `true` 和 `false` 两个取值。启用时，Tool 名称将改为使用英文版本，以提高对部分海外模型的兼容性。对于支持中文工具名称的模型，建议不启用，以获得更好的效果。如果配置该选项，将覆盖默认配置。                                                         |\n| `CRIC_WUYE_AI_FEATURE_SET`       | `feature_set` | 由 CRIC物业AI 工作人员为您默认配置                    | 预配置的工具功能集，支持 `base`、`detail` 等取值。该参数决定了您可用的 Tool 集合，`base` 功能集中提供了“获取可用知识库列表”和通用的“搜索知识库”工具，而 `detail` 功能集中不提供“获取可用知识库列表”工具，但为每个可用的知识库提供了单独的“搜索知识库”工具。如果配置该选项，将覆盖默认配置。         |\n| `CRIC_WUYE_AI_OUTPUT_FORMAT`     | `output`      | `raw`                                    | 工具调用输出格式，支持 `raw`（不转化）、`text`（转化为 Markdown 文本）等取值。                                                                                                                            |\n\n*注：* URL Query 配置时，只需要在 SSE 调用的 URL 后面拼接参数即可，例如：\n\n```json\n{\n  \"mcpServers\": {\n    \"CRIC物业AI\": {\n      \"transportType\": \"sse\",\n      \"url\": \"https://mcp.wuye-ai.cricbigdata.com/sse/mcp?token={{您的 CRIC物业AI Access Token}}&name_en=true\"\n    }\n  }\n}\n```\n\n关于 `CRIC_WUYE_AI_NAME_EN` 和 `CRIC_WUYE_AI_FEATURE_SET` 的更多信息，请参考 [工具定义配置](./TOOLS.md) 文档。\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "ai",
        "finance",
        "fintech wuye",
        "ai mcp",
        "finance fintech"
      ],
      "category": "finance--fintech"
    },
    "alchemy--alchemy-mcp-server": {
      "owner": "alchemy",
      "name": "alchemy-mcp-server",
      "url": "https://github.com/alchemyplatform/alchemy-mcp-server",
      "imageUrl": "",
      "description": "Allow AI agents to interact with Alchemy's blockchain APIs.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "alchemy",
        "fintech",
        "blockchain",
        "alchemy blockchain",
        "fintech alchemy",
        "interact alchemy"
      ],
      "category": "finance--fintech"
    },
    "araa47--jupiter-mcp": {
      "owner": "araa47",
      "name": "jupiter-mcp",
      "url": "https://github.com/araa47/jupiter-mcp",
      "imageUrl": "",
      "description": "Jupiter API Access (allow AI to Trade Tokens on Solana + Access Balances + Search Tokens + Create Limit Orders )",
      "stars": 0,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-13T09:29:39Z",
      "readme_content": "# Jupiter MCP\n\nA Model Context Protocol server for Jupiter API, Solana's premier DEX aggregator. Supports immediate swaps through Ultra API and limit orders through Trigger API.\n\n## 📦 Pre-built Desktop Extension (DXT)\n\n### Prerequisites\nBefore installing the extension, ensure you have:\n\n1. **Node.js and npx** (for envmcp support)\n   - Download from: https://nodejs.org/\n   - Verify with: `npx --version`\n\n2. **uv/uvx** (Python package manager)\n   - Install from: https://docs.astral.sh/uv/getting-started/installation/\n   - macOS/Linux: `curl -LsSf https://astral.sh/uv/install.sh | sh`\n   - Windows: `powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"`\n   - Verify with: `uvx --version`\n\n\nOnce you have prereqs for easy installation in Claude Desktop:\n\n**[Download jupiter-mcp-latest.dxt](https://github.com/araa47/jupiter-mcp/raw/main/jupiter-mcp-latest.dxt)** 📥\n\nThe DXT includes:\n- ✅ One-click installation in Claude Desktop\n- ✅ Automatic dependency management with uvx\n- ✅ Secure environment variable configuration\n- ✅ Built-in error handling and debugging\n\n> **Note**: The DXT file is automatically updated on every commit for the latest features and fixes.\n\n## 🚀 Quick Installation Options\n\n### Option 1: Claude Desktop DXT (Recommended) 🖱️\nDownload the DXT file and double-click to install. See `dxt/README.md` for detailed instructions.\n\n### Option 2: Quick Install with Cursor 🎯\n\n**Instructions:**\n1. Copy the link below (click the copy button in the code block)\n2. Paste it into your browser address bar or Cursor's command palette\n3. Follow the prompts to complete installation\n4. You'll be prompted to replace `REPLACE_THIS` with your actual solana private key!\n\n\n**🚀 Install with Direct Input:**\n```\ncursor://anysphere.cursor-deeplink/mcp/install?name=jupiter-mcp&config=eyJjb21tYW5kIjoidXZ4IiwiYXJncyI6WyItLWZyb20iLCJnaXQraHR0cHM6Ly9naXRodWIuY29tL2FyYWE0Ny9qdXBpdGVyLW1jcCIsImp1cGl0ZXItbWNwIl0sImVudiI6eyJQUklWQVRFX0tFWSI6IlJFUExBQ0VfVEhJUyIsIlNPTEFOQV9SUENfVVJMIjoiaHR0cHM6Ly9hcGkubWFpbm5ldC1iZXRhLnNvbGFuYS5jb20iLCJTT0xBTkFfTkVUV09SSyI6Im1haW5uZXQtYmV0YSIsIlJFUVVFU1RfVElNRU9VVCI6IjMwIn19\n```\n**Note:** These links only work in Cursor\n\n**Manual config for .env file approach:**\n\n```json\n{\n  \"mcpServers\": {\n    \"jupiter-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"envmcp\",\n        \"--env-file\",\n        \"/path/to/your/.env\",\n        \"uvx\",\n        \"--from\",\n        \"git+https://github.com/araa47/jupiter-mcp\",\n        \"jupiter-mcp\"\n      ]\n    }\n  }\n}\n```\n\nReplace `/path/to/your/.env` with your actual env file path (e.g., `/Users/yourname/.env`)\n\n**Pre-configured values:**\n\n* `SOLANA_RPC_URL`: <https://api.mainnet-beta.solana.com>\n* `SOLANA_NETWORK`: mainnet-beta\n* `REQUEST_TIMEOUT`: 30 seconds\n* `PRIVATE_KEY`: You'll need to replace `REPLACE_THIS` with your base58 encoded private key\n\n## ⚡ Quick Start (MCP Configuration)\n\nAdd this to your MCP client configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"jupiter-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--from\",\n        \"git+https://github.com/araa47/jupiter-mcp\",\n        \"jupiter-mcp\"\n      ],\n      \"env\": {\n        \"SOLANA_RPC_URL\": \"https://api.mainnet-beta.solana.com\",\n        \"PRIVATE_KEY\": \"${PRIVATE_KEY}\",\n        \"SOLANA_NETWORK\": \"mainnet-beta\",\n        \"REQUEST_TIMEOUT\": \"30\"\n      }\n    }\n  }\n}\n```\n\n### Alternative Configuration (Using .env file)\n\nIf you prefer to load environment variables from a `.env` file to avoid storing sensitive data in your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"jupiter-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"envmcp\",\n        \"--env-file\",\n        \"${ENV_FILE_PATH}\",\n        \"uvx\",\n        \"--from\",\n        \"git+https://github.com/araa47/jupiter-mcp\",\n        \"jupiter-mcp\"\n      ],\n      \"env\": {\n        \"ENV_FILE_PATH\": \".env\"\n      }\n    }\n  }\n}\n```\n\nThis approach uses `envmcp` to securely load your PRIVATE_KEY from a `.env` file without exposing it in configuration files. Replace `ENV_FILE_PATH` with the absolute path to your `.env` file (e.g., `/Users/yourname/.env` or `/home/user/.env`).\n\n### Environment Variables Required:\n\n* `PRIVATE_KEY`: Your base58 encoded Solana private key (from Phantom wallet export)\n* Optional: Override `SOLANA_RPC_URL` if you have a custom RPC endpoint\n\n## 🎉 Available Tools\n\n### 💱 Ultra API (Immediate Swaps)\n\n| Tool                       | Description                               | Parameters                        | Cost     |\n| -------------------------- | ----------------------------------------- | --------------------------------- | -------- |\n| get\\_swap\\_quote           | Get a swap quote and unsigned transaction | input\\_mint, output\\_mint, amount | **FREE** |\n| execute\\_swap\\_transaction | Execute a signed swap transaction         | transaction, request\\_id          | **PAID** |\n| get\\_balances              | Get token balances for a wallet           | wallet\\_address?                  | **FREE** |\n| get\\_shield                | Get token security information            | mints                             | **FREE** |\n| search\\_token              | Search for tokens                         | query                             | **FREE** |\n\n### 📊 Trigger API (Limit Orders)\n\n| Tool                  | Description                        | Parameters                                                                              | Cost     |\n| --------------------- | ---------------------------------- | --------------------------------------------------------------------------------------- | -------- |\n| create\\_limit\\_order  | Create a limit order transaction   | input\\_mint, output\\_mint, making\\_amount, taking\\_amount, slippage\\_bps?, expired\\_at? | **FREE** |\n| execute\\_limit\\_order | Execute a limit order transaction  | transaction, request\\_id                                                                | **PAID** |\n| cancel\\_limit\\_order  | Cancel a single limit order        | order                                                                                   | **FREE** |\n| cancel\\_limit\\_orders | Cancel multiple limit orders       | orders?                                                                                 | **FREE** |\n| get\\_limit\\_orders    | Get active/historical limit orders | order\\_status, wallet\\_address?, input\\_mint?, output\\_mint?, page?                     | **FREE** |\n\n### Key Differences: Swaps vs Limit Orders\n\n* **Swaps** (Ultra API): Execute immediately at current market price\n* **Limit Orders** (Trigger API): Execute automatically when your target price is reached\n\n## 🛠️ Development & CI/CD\n\n### Automated DXT Building\n\nThis project includes automated DXT building integrated with pre-commit hooks:\n\n- **Pre-commit Hook**: Automatically builds DXT files when changes are made to `dxt/` folder\n- **Simple Naming**: Always creates `jupiter-mcp-latest.dxt` for easy downloads\n- **Auto-update**: The latest DXT file is always current with the main branch\n\n### Manual DXT Build\n\n```bash\n# Build DXT\n./scripts/build-dxt.sh\n\n# Output: jupiter-mcp-latest.dxt\n```\n\n### Pre-commit Setup\n\n```bash\n# Install pre-commit hooks (includes DXT building)\npre-commit install\n\n# The DXT will be automatically built when changes are detected in:\n# - dxt/ directory\n# - scripts/build-dxt.sh\n```\n\n## 🔧 Alternative Installation (Development)\n\nFor local development or testing:\n\n### Prerequisites\n\n* Python 3.12+\n* uv for dependency management\n* direnv\n\n### Setup\n\n```bash\ngit clone https://github.com/araa47/jupiter-mcp\ncd jupiter-mcp\ndirenv allow\ncp .env.example .env\n# Edit .env with your configuration\n```\n\n### Environment Variables (.env file)\n\n```bash\nSOLANA_RPC_URL=https://api.mainnet-beta.solana.com\nPRIVATE_KEY=your_base58_encoded_private_key_here\nSOLANA_NETWORK=mainnet-beta\nREQUEST_TIMEOUT=30\n```\n\n### Local Development Usage\n\n```bash\n# Start the server locally\nuv run python run_server.py\n```\n\n## 🧪 Testing\n\nThe project includes comprehensive testing with safety features:\n\n### Test Types\n\n**🆓 Free Tests** (Default - No SOL spent):\n\n* Mock execution tests\n* API quote/balance checks\n* Token searches and security checks\n* Error handling validation\n\n**💰 Paid Tests** (Requires `--run-paid-tests` flag):\n\n* Real trade execution on mainnet\n* Swap tests: Uses tiny amounts (0.0001 SOL ≈ $0.015)\n* Limit order tests: Creates orders 20% above market price\n   * Uses 0.04 SOL (≈ $6) to meet minimum requirements\n   * Orders won't execute at the high price\n   * Automatically cancelled after verification\n* Full transaction signing and broadcasting\n\n### Running Tests\n\n```bash\n# Safe tests only (default)\nuv run pytest tests/ -v\n\n# Include real trade execution (spends tiny amounts)\nuv run pytest tests/ -v --run-paid-tests\n\n# Test with detailed output\nuv run pytest tests/ -v --run-paid-tests -s\n```\n\n### Test Safety Features\n\n* **Paid tests clearly marked** with `@pytest.mark.paid`\n* **Minimal trade amounts** for real execution\n* **Limit orders use out-of-range prices** that won't execute\n* **Clear warnings** before spending real money\n* **Transaction confirmations** with blockchain signatures\n\n## 💡 Important Notes\n\n### Free vs Paid Operations\n\n* **🆓 FREE**: `get_swap_quote`, `get_balances`, `get_shield`, `search_token`, `create_limit_order`, `cancel_limit_order`, `cancel_limit_orders`, `get_limit_orders` - API calls only\n* **💰 PAID**: `execute_swap_transaction`, `execute_limit_order` - Executes real trades and spends SOL\n\n### Automatic Referral System\n\n* All orders include a 255 basis point (2.55%) referral fee (maximum allowed)\n* Referral wallet: `8cK8hCyRQCp52nVuPLnLL71afkRvRcFibSwHMjGFT8bm` ([Referral Dashboard](https://referral.jup.ag/dashboard/8cK8hCyRQCp52nVuPLnLL71afkRvRcFibSwHMjGFT8bm))\n* **Note**: Fees only collected for tokens with referral token accounts (currently SOL)\n* Supports development and maintenance\n\n### Security\n\n* 🔐 Private keys never leave your machine\n* 🛡️ All API calls use HTTPS\n* ⚠️ Never commit `.env` files to version control\n\n## 🐛 Troubleshooting\n\n### Common Issues\n\n1. **\"PRIVATE\\_KEY environment variable is required\"**\n   * Copy `env.example` to `.env` and set your private key\n2. **\"Invalid PRIVATE\\_KEY format\"**\n   * Use base58 encoded private key (from Phantom wallet export)\n3. **Connection timeouts**\n   * Try different RPC URL or increase `REQUEST_TIMEOUT`\n\n## 🎉 Ready to Trade!\n\nYour Jupiter MCP server is ready for Solana DeFi interactions! 🚀\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tokens",
        "finance",
        "fintech",
        "jupiter api",
        "tokens solana",
        "trade tokens"
      ],
      "category": "finance--fintech"
    },
    "bankless--onchain-mcp": {
      "owner": "bankless",
      "name": "onchain-mcp",
      "url": "https://github.com/Bankless/onchain-mcp/",
      "imageUrl": "",
      "description": "Bankless Onchain API to interact with smart contracts, query transaction and token information",
      "stars": 67,
      "forks": 16,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T02:59:31Z",
      "readme_content": "# Bankless Onchain MCP Server\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n![Version](https://img.shields.io/badge/version-0.6.2-blue)\n\nMCP (Model Context Protocol) server for blockchain data interaction through the Bankless API.\n\n## Overview\n\nThe Bankless Onchain MCP Server provides a framework for interacting with on-chain data via the Bankless API. It implements the Model Context Protocol (MCP) to allow AI models to access blockchain state and event data in a structured way.\n\n\nhttps://github.com/user-attachments/assets/95732dff-ae5f-45a6-928a-1ae17c0ddf9d\n\n\n## Features\n\nThe server provides the following onchain data operations:\n\n### Contract Operations\n\n- **Read Contract State** (`read_contract`): Read state from smart contracts on various blockchain networks.\n    - Parameters: network, contract address, method, inputs, outputs\n    - Returns: Contract call results with typed values\n\n- **Get Proxy** (`get_proxy`): Retrieve proxy implementation contract addresses.\n    - Parameters: network, contract address\n    - Returns: Implementation contract address\n\n- **Get ABI** (`get_abi`): Fetch the ABI (Application Binary Interface) for a contract.\n    - Parameters: network, contract address\n    - Returns: Contract ABI in JSON format\n\n- **Get Source** (`get_source`): Retrieve the source code for a verified contract.\n    - Parameters: network, contract address\n    - Returns: Source code, ABI, compiler version, and other contract metadata\n\n### Event Operations\n\n- **Get Events** (`get_events`): Fetch event logs for a contract based on topics.\n    - Parameters: network, addresses, topic, optional topics\n    - Returns: Filtered event logs\n\n- **Build Event Topic** (`build_event_topic`): Generate an event topic signature from event name and argument types.\n    - Parameters: network, event name, argument types\n    - Returns: Event topic hash\n\n### Transaction Operations\n\n- **Get Transaction History** (`get_transaction_history`): Retrieve transaction history for a user address.\n    - Parameters: network, user address, optional contract, optional method ID, optional start block, include data flag\n    - Returns: List of transactions with hash, data, network, and timestamp\n\n- **Get Transaction Info** (`get_transaction_info`): Get detailed information about a specific transaction.\n    - Parameters: network, transaction hash\n    - Returns: Transaction details including block number, timestamp, from/to addresses, value, gas info, status, and receipt data\n\n## Tools\n\n- **read_contract**\n    - Read contract state from a blockchain\n    - Input:\n        - `network` (string, required): The blockchain network (e.g., \"ethereum\", \"polygon\")\n        - `contract` (string, required): The contract address\n        - `method` (string, required): The contract method to call\n        - `inputs` (array, required): Input parameters for the method call, each containing:\n            - `type` (string): The type of the input parameter (e.g., \"address\", \"uint256\")\n            - `value` (any): The value of the input parameter\n        - `outputs` (array, required): Expected output types, each containing:\n            - `type` (string): The expected output type\n    - Returns an array of contract call results\n\n- **get_proxy**\n    - Gets the proxy address for a given network and contract\n    - Input:\n        - `network` (string, required): The blockchain network (e.g., \"ethereum\", \"base\")\n        - `contract` (string, required): The contract address\n    - Returns the implementation address for the proxy contract\n\n- **get_events**\n    - Fetches event logs for a given network and filter criteria\n    - Input:\n        - `network` (string, required): The blockchain network (e.g., \"ethereum\", \"base\")\n        - `addresses` (array, required): List of contract addresses to filter events\n        - `topic` (string, required): Primary topic to filter events\n        - `optionalTopics` (array, optional): Optional additional topics (can include null values)\n    - Returns an object containing event logs matching the filter criteria\n\n- **build_event_topic**\n    - Builds an event topic signature based on event name and arguments\n    - Input:\n        - `network` (string, required): The blockchain network (e.g., \"ethereum\", \"base\")\n        - `name` (string, required): Event name (e.g., \"Transfer(address,address,uint256)\")\n        - `arguments` (array, required): Event arguments types, each containing:\n            - `type` (string): The argument type (e.g., \"address\", \"uint256\")\n    - Returns a string containing the keccak256 hash of the event signature\n\n## Installation\n\n```bash\nnpm install @bankless/onchain-mcp\n```\n\n## Usage\n\n### Environment Setup\n\nBefore using the server, set your Bankless API token. For details on how to obtain your Bankless API token, head to https://docs.bankless.com/bankless-api/other-services/onchain-mcp\n\n```bash\nexport BANKLESS_API_TOKEN=your_api_token_here\n```\n\n### Running the Server\n\nThe server can be run directly from the command line:\n\n```bash\nnpx @bankless/onchain-mcp\n```\n\n### Usage with LLM Tools\n\nThis server implements the Model Context Protocol (MCP), which allows it to be used as a tool provider for compatible AI models. Here are some example calls for each tool:\n\n#### read_contract\n\n```javascript\n// Example call\n{\n  \"name\": \"read_contract\",\n  \"arguments\": {\n    \"network\": \"ethereum\",\n    \"contract\": \"0x1234...\",\n    \"method\": \"balanceOf\",\n    \"inputs\": [\n      { \"type\": \"address\", \"value\": \"0xabcd...\" }\n    ],\n    \"outputs\": [\n      { \"type\": \"uint256\" }\n    ]\n  }\n}\n\n// Example response\n[\n  {\n    \"value\": \"1000000000000000000\",\n    \"type\": \"uint256\"\n  }\n]\n```\n\n#### get_proxy\n\n```javascript\n// Example call\n{\n  \"name\": \"get_proxy\",\n  \"arguments\": {\n    \"network\": \"ethereum\",\n    \"contract\": \"0x1234...\"\n  }\n}\n\n// Example response\n{\n  \"implementation\": \"0xefgh...\"\n}\n```\n\n#### get_events\n\n```javascript\n// Example call\n{\n  \"name\": \"get_events\",\n  \"arguments\": {\n    \"network\": \"ethereum\",\n    \"addresses\": [\"0x1234...\"],\n    \"topic\": \"0xabcd...\",\n    \"optionalTopics\": [\"0xef01...\", null]\n  }\n}\n\n// Example response\n{\n  \"result\": [\n    {\n      \"removed\": false,\n      \"logIndex\": 5,\n      \"transactionIndex\": 2,\n      \"transactionHash\": \"0x123...\",\n      \"blockHash\": \"0xabc...\",\n      \"blockNumber\": 12345678,\n      \"address\": \"0x1234...\",\n      \"data\": \"0x...\",\n      \"topics\": [\"0xabcd...\", \"0xef01...\", \"0x...\"]\n    }\n  ]\n}\n```\n\n#### build_event_topic\n\n```javascript\n// Example call\n{\n  \"name\": \"build_event_topic\",\n  \"arguments\": {\n    \"network\": \"ethereum\",\n    \"name\": \"Transfer(address,address,uint256)\",\n    \"arguments\": [\n      { \"type\": \"address\" },\n      { \"type\": \"address\" },\n      { \"type\": \"uint256\" }\n    ]\n  }\n}\n\n// Example response\n\"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\"\n```\n\n## Development\n\n### Building from Source\n\n```bash\n# Clone the repository\ngit clone https://github.com/Bankless/onchain-mcp.git\ncd onchain-mcp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n### Debug Mode\n\n```bash\nnpm run debug\n```\n\n### Integration with AI Models\n\nTo integrate this server with AI applications that support MCP, add the following to your app's server configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"bankless\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@bankless/onchain-mcp\"\n      ],\n      \"env\": {\n        \"BANKLESS_API_TOKEN\": \"your_api_token_here\"\n      }\n    }\n  }\n}\n```\n\n## Error Handling\n\nThe server provides specific error types for different scenarios:\n\n- `BanklessValidationError`: Invalid input parameters\n- `BanklessAuthenticationError`: API token issues\n- `BanklessResourceNotFoundError`: Requested resource not found\n- `BanklessRateLimitError`: API rate limit exceeded\n\n## Prompting Tips\n\nIn order to guide an LLM model to use the Bankless Onchain MCP Server, the following prompts can be used:\n\n```\nROLE:\n• You are Kompanion, a blockchain expert and EVM sleuth. \n• You specialize in navigating and analyzing smart contracts using your tools and resources.\n\nHOW KOMPANION CAN HANDLE PROXY CONTRACTS:\n• If a contract is a proxy, call your “get_proxy” tool to fetch the implementation contract.  \n• If that fails, try calling the “implementation” method on the proxy contract.  \n• If that also fails, try calling the “_implementation” function.  \n• After obtaining the implementation address, call “get_contract_source” with that address to fetch its source code.  \n• When reading or modifying the contract state, invoke implementation functions on the proxy contract address (not directly on the implementation).\n\nHOW KOMPANION CAN HANDLE EVENTS:\n• Get the ABI and Source of the relevant contracts\n• From the event types in the ABI, construct the correct topics for the event relevant to the question\n• use the \"get_event_logs\" tool to fetch logs for the contract\n\nKOMPANION'S RULES:\n• Do not begin any response with “Great,” “Certainly,” “Okay,” or “Sure.”  \n• Maintain a direct, technical style. Do not add conversational flourishes.  \n• If the user’s question is unrelated to smart contracts, do not fetch any contracts.  \n• If you navigate contracts, explain each step in bullet points.  \n• Solve tasks iteratively, breaking them into steps.  \n• Use bullet points for lists of steps.  \n• Never assume a contract’s functionality. Always verify with examples using your tools to read the contract state.  \n• Before responding, consider which tools might help you gather better information.  \n• Include as much relevant information as possible in your final answer, depending on your findings.\n\nHOW KOMPANION CAN USE TOOLS:\n• You can fetch contract source codes, ABIs, and read contract data by using your tools and functions.  \n• Always verify the source or ABI to understand the contract rather than making assumptions.  \n• If you need to read contract state, fetch its ABI (especially if the source is lengthy).  \n\nFINAL INSTRUCTION:\n• Provide the best possible, concise answer to the user’s request. If it's not an immediate question but an instruction, follow it directly.\n• Use your tools to gather any necessary clarifications or data.  \n• Offer a clear, direct response and add a summary of what you did (how you navigated the contracts) at the end.\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "bankless",
        "onchain",
        "fintech",
        "bankless onchain",
        "fintech bankless",
        "mcp bankless"
      ],
      "category": "finance--fintech"
    },
    "bitteprotocol--mcp": {
      "owner": "bitteprotocol",
      "name": "mcp",
      "url": "https://github.com/BitteProtocol/mcp",
      "imageUrl": "",
      "description": "Bitte Protocol integration to run AI Agents on several blockchains.",
      "stars": 13,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T10:22:11Z",
      "readme_content": "# MCP Proxy Monorepo\n\nThis monorepo contains MCP (Model Control Protocol) servers for different services.\n\n## Server URI\n`https://mcp.bitte.ai/sse`\n\n## Add to Curser Settings\n```\n{\n  \"mcpServers\": {\n    \"bitte-ai\": {\n      \"url\": \"https://mcp.bitte.ai/sse\"\n    }\n  }\n}\n```\n\n\n## Packages\n\n- **bitte-ai**: MCP server for Bitte AI integrations\n\n## Setup\n\nTo install dependencies:\n\n```bash\nbun install\n```\n\n## Development\n\nThis project uses Turborepo for managing the monorepo workflow and Biome for code quality tools.\n\n### Build all packages\n\n```bash\nbun run build\n```\n\n### Start both services\n\n```bash\nbun run start\n```\n\n### Development mode\n\n```bash\nbun run dev\n```\n\n### Format and lint your code\n\n```bash\nbun run check\n# To fix automatically:\nbun run check:fix\n```\n\n### Run individual services\n\n```bash\n# Run bitte-ai service\nbun run dev:bitte-ai\n```\n\n## Adding a new package\n\n1. Create a new directory in the `packages` folder\n2. Add the necessary package.json, tsconfig.json, and implementation files\n3. Update the root package.json and tsconfig.json to include your new package\n\nThis project uses [Bun](https://bun.sh) as the JavaScript runtime.\n\nFor more information: [Vibestreaming Logs](https://github.com/microchipgnu/vibestream)\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "blockchains",
        "agents",
        "agents blockchains",
        "fintech bitteprotocol",
        "mcp bitte"
      ],
      "category": "finance--fintech"
    },
    "carsol--monarch-mcp-server": {
      "owner": "carsol",
      "name": "monarch-mcp-server",
      "url": "https://github.com/carsol/monarch-mcp-server",
      "imageUrl": "",
      "description": "MCP server providing read-only access to Monarch Money financial data, enabling AI assistants to analyze transactions, budgets, accounts, and cashflow data with MFA support.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-20T20:09:39Z",
      "readme_content": "# Monarch Money MCP Server\n\nA Model Context Protocol (MCP) server that provides read-only access to Monarch Money financial data. This allows AI assistants like Claude Desktop to analyze your financial information, transactions, budgets, and cashflow data.\n\nNote: I've created this for personal fun and is not affiated with Monarch Money. I mostly created it for learning about my spending, using it for projections. Since I don't have any need to mutate any data it's currently READONLY.\n\nShout out to \n\n## Features\n\n- **Read-only access** to Monarch Money accounts\n- **Transaction analysis** with date filtering and search\n- **Budget tracking** and cashflow analysis\n- **Account details** including investment holdings\n- **Secure authentication** with MFA support\n- **Session persistence** to minimize re-authentication\n\n## Installation\n\n### Prerequisites\n\n- Python 3.13+\n- [uv](https://docs.astral.sh/uv/) package manager (recommended)\n- A Monarch Money account\n\n### Setup\n\n1. **Clone the repository:**\n\n2. **Install dependencies:**\n   ```bash\n   uv add mcp monarchmoney python-dotenv\n   ```\n\n3. **Configure environment variables:**\n   ```bash\n   cp .env.example .env\n   ```\n   \n   Edit `.env` with your Monarch Money credentials:\n   ```\n   MONARCH_EMAIL=your-email@example.com\n   MONARCH_PASSWORD=your-monarch-password\n   MONARCH_MFA_SECRET=your-mfa-secret-key  # Optional but recommended\n   ```\n\n4. **Test the connection:**\n   ```bash\n   python test_api.py\n   ```\n\n## Usage\n\n### Running the Server\n\nStart the MCP server:\n```bash\npython run_server.py\n```\n\n### Claude Desktop Integration\n\nAdd to your Claude Desktop configuration (`claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"monarch-money\": {\n      \"command\": \"python\",\n      \"args\": [\"/path/to/monarch-mcp-server/run_server.py\"],\n      \"env\": {\n        \"MONARCH_EMAIL\": \"your-email@example.com\",\n        \"MONARCH_PASSWORD\": \"your-password\",\n        \"MONARCH_MFA_SECRET\": \"your-mfa-secret\"\n      }\n    }\n  }\n}\n```\n\n## Available Resources\n\n- `monarch://accounts` - All linked accounts\n- `monarch://transactions/recent` - Last 100 transactions  \n- `monarch://budgets` - Budget information with actual vs target\n- `monarch://cashflow/summary` - Income, expenses, and savings summary\n\n## Available Tools\n\n- **get_transactions** - Get transactions with date range filtering\n- **get_account_details** - Detailed account information including holdings\n- **get_cashflow_analysis** - Cashflow analysis by category and time period\n- **search_transactions** - Search transactions by description or merchant\n- **get_categories** - All transaction categories\n- **get_institutions** - Linked financial institutions\n\n## Example Prompts\n\nOnce configured with Claude Desktop, you can ask:\n\n- \"Show me my recent transactions from last month\"\n- \"What's my current budget status?\"\n- \"Analyze my spending patterns by category\"\n- \"How much did I spend on groceries this year?\"\n- \"What are my investment account balances?\"\n\n## Security\n\n- **No write operations** - Server is read-only for safety\n- **Local credentials** - Your login details stay on your machine\n- **Session caching** - Reduces authentication frequency\n- **MFA support** - Two-factor authentication recommended\n\n## Troubleshooting\n\n### Authentication Issues\n\n1. **Run the debug script:**\n   ```bash\n   python debug_server.py\n   ```\n\n2. **Check environment variables:**\n   ```bash\n   python -c \"import os; print('Email:', bool(os.getenv('MONARCH_EMAIL'))); print('Password:', bool(os.getenv('MONARCH_PASSWORD')))\"\n   ```\n\n3. **Clear session cache:**\n   ```bash\n   rm -rf .mm/\n   ```\n\n### Common Issues\n\n- **MFA required**: Set `MONARCH_MFA_SECRET` environment variable\n- **Session expired**: Delete `.mm/` directory to force fresh login\n- **Import errors**: Ensure all dependencies installed with `uv add`\n\n## Development\n\n### Project Structure\n\n```\nmonarch-mcp-server/\n├── monarch_mcp_server.py     # Main MCP server implementation\n├── run_server.py             # Server launcher script\n├── debug_server.py           # Authentication debugging\n├── test_api.py              # API connection testing\n├── tests/                   # Unit tests\n│   ├── __init__.py\n│   └── test_monarch_mcp_server.py\n├── pyproject.toml           # Project dependencies\n├── .github/workflows/       # CI/CD workflows\n└── .env.example             # Environment template\n```\n\n### Testing\n\nInstall test dependencies:\n```bash\nuv sync --extra test\n```\n\nRun the unit test suite:\n```bash\nuv run pytest tests/ -v\n```\n\nRun tests with coverage:\n```bash\nuv run pytest tests/ --cov=monarch_mcp_server --cov-report=term\n```\n\nRun manual API test:\n```bash\npython test_api.py\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Test thoroughly\n5. Submit a pull request\n\n## License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n\n## Disclaimer\n\nThis project is not affiliated with Monarch Money. Use at your own risk and ensure compliance with Monarch Money's terms of service.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "finance",
        "mcp",
        "monarch mcp",
        "server mcp",
        "mcp server"
      ],
      "category": "finance--fintech"
    },
    "chargebee--mcp": {
      "owner": "chargebee",
      "name": "mcp",
      "url": "https://github.com/chargebee/agentkit/tree/main/modelcontextprotocol",
      "imageUrl": "",
      "description": "MCP Server that connects AI agents to [Chargebee platform](https://www.chargebee.com/).",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "chargebee",
        "mcp",
        "fintech",
        "fintech chargebee",
        "chargebee mcp",
        "agents chargebee"
      ],
      "category": "finance--fintech"
    },
    "codex-data--codex-mcp": {
      "owner": "codex-data",
      "name": "codex-mcp",
      "url": "https://github.com/Codex-Data/codex-mcp",
      "imageUrl": "",
      "description": "[Codex API](https://www.codex.io) integration for real-time enriched blockchain and market data on 60+ networks",
      "stars": 18,
      "forks": 4,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-24T05:17:37Z",
      "readme_content": "# Codex MCP Server\n\nAn [MCP](https://modelcontextprotocol.org/) server that provides enriched blockchain data from [Codex](https://codex.io). This server can be used with any MCP-compatible client like [Claude Desktop](https://www.anthropic.com/news/claude-desktop).\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/codex-data/codex-mcp.git\ncd codex-mcp\n\n# Install dependencies\npnpm install\n\n# Build the project\npnpm build\n```\n\n## Usage\n\nTo use the MCP Codex Server, you need to have a Codex API key. You can get your key from the [Codex Dashboard](https://dashboard.codex.io).\n\n### Using npx (No Installation Required)\n\nYou can run the MCP Codex Server directly without installation using npx:\n\n```bash\n# Run the server in stdio mode (for CLI tools)\nnpx @codex-data/codex-mcp\n```\n\n### Running the Server Locally\n\nStart the server using stdio (for embedding in CLI tools):\n\n```bash\npnpm start\n```\n\nFor development with auto-reload:\n\n```bash\npnpm dev\n```\n\n### Integration with Claude Desktop\n\n1. Open Claude Desktop settings\n2. Go to the Developer tab and click \"Edit Config\"\n3. Add a new server configuration:\n\nNo installation:\n\n```json\n{\n  \"mcpServers\": {\n    \"codex-data\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@codex-data/codex-mcp\"],\n      \"env\": {\n        \"CODEX_API_KEY\": \"<your-codex-api-key>\"\n      }\n    }\n  }\n}\n```\n\nLocal installation:\n\n```json\n{\n  \"mcpServers\": {\n    \"codex-data\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/codex-mcp/build/index.js\"],\n      \"env\": {\n        \"CODEX_API_KEY\": \"<your-codex-api-key>\"\n      }\n    }\n  }\n}\n```\n\n4. Replace `/path/to/codex-mcp` with the actual path to your installation\n5. Replace `<your-codex-api-key>` with your actual Codex API key\n\n### Connecting using Claude CLI\n\nIf you're using Claude CLI:\n\n```bash\n# Add the MCP server\nclaude mcp add codex-data -e CODEX_API_KEY=<your-codex-api-key> npx @codex-data/codex-mcp\n\n# Start Claude with the MCP server enabled\nclaude\n```\n\n## License\n\nISC\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "finance",
        "fintech",
        "enriched blockchain",
        "fintech codex",
        "finance fintech"
      ],
      "category": "finance--fintech"
    },
    "getalby--nwc-mcp-server": {
      "owner": "getalby",
      "name": "nwc-mcp-server",
      "url": "https://github.com/getalby/nwc-mcp-server",
      "imageUrl": "",
      "description": "Bitcoin Lightning wallet integration powered by Nostr Wallet Connect",
      "stars": 12,
      "forks": 5,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-01T06:54:53Z",
      "readme_content": "# ⚠️ DEPRECATED ⚠️\n\n**Please use [Alby MCP](https://github.com/getAlby/mcp/) instead!** \n\nThis repository has been deprecated in favor of Alby MCP, which includes all the NWC tools along with additional Lightning tools.\n\n# NWC MCP Server\n\nConnect a bitcoin lightning wallet to your LLM using Nostr Wallet Connect ([NWC](https://nwc.dev/) or [NIP-47](https://github.com/nostr-protocol/nips/blob/master/47.md)).\n\nThis MCP server uses the [official MCP TypeScript SDK](https://github.com/modelcontextprotocol/typescript-sdk)\n\n> See also the [Alby MCP server](https://github.com/getAlby/mcp) which includes additional useful tools.\n\n## Quick Start\n\n### Use the Alby-Hosted MCP Server\n\nIf your agent supports SSE (e.g. N8N) or HTTP Streamable transports, you can connect to Alby's MCP server.\n\n- SSE: `https://mcp.getalby.com/sse`\n- HTTP Streamable: `https://mcp.getalby.com/mcp`\n\nBoth require providing an NWC connection secret as `Bearer` authentication.\n\n### Add to Claude Desktop\n\nAdd this to your claude_desktop_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"nwc\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@getalby/nwc-mcp-server\"],\n      \"env\": {\n        \"NWC_CONNECTION_STRING\": \"YOUR NWC CONNECTION STRING HERE\"\n      }\n    }\n  }\n}\n```\n\n### Add to Goose\n\n1. Type `goose configure`\n2. Add extension -> Command Line Extension\n3. Call it `nwc`\n4. What command should be run: `npx -y @getalby/nwc-mcp-server`\n5. Timeout: 30\n6. Description: no\n7. environment variables: yes\n8. environment variable name: `NWC_CONNECTION_STRING`\n9. environment variable value: `nostr+walletconnect://...` (your NWC connection secret here)\n\n### Add to Cline\n\n> Copy the below and paste it into a cline prompt. It should prompt you to update the connection string.\n\n```json\nAdd the following to my MCP servers list:\n\n\"nwc\": {\n  \"command\": \"npx\",\n  \"args\": [\"-y\", \"@getalby/nwc-mcp-server\"],\n  \"env\": {\n    \"NWC_CONNECTION_STRING\": \"nostr+walletconnect://...\"\n  },\n  \"disabled\": false,\n  \"autoApprove\": []\n}\n```\n\n### Add to N8N via SSE\n\nYou can use the native N8N MCP Client tool connected to an AI agent. Enter your SSE endpoint, set authentication to \"Bearer\" and paste your NWC connection secret.\n\nTested with OpenRouter + anthropic/claude-3.7-sonnet\n\nSee the [N8N workflow](examples/n8n-sse) for a simple example\n\n### Add to N8N via STDIO (Community Node)\n\nCurrently this MCP server only works via command line (STDIO).\n\nYou can install the [n8n-nodes-mcp](https://github.com/nerding-io/n8n-nodes-mcp) community node and run n8n with tools enabled e.g.\n\n```bash\nN8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true npx n8n\n```\n\nCreate a blank workflow and add an AI agent node. Configure your LLM model and add a new tool \"MCP Client\" (which will have a cube next to it showing it's a community node).\n\nConfigure the MCP Client by adding a credential with Command Line (STDIO) selected.\n\ncommand: `npx`\narguments: `-y @getalby/nwc-mcp-server`\nenvironments `NWC_CONNECTION_STRING=nostr+walletconnect://your_key_here` (create the whole line in a text editor and paste it in, since the password field cannot be switched to plaintext)\n\nSee the [N8N paid chat workflow](examples/n8n-paid-chat-stdio) for a full example\n\n## Modes\n\n### STDIO\n\nBy default NWC MCP Server runs locally in `STDIO` mode.\n\n### HTTP\n\nYou can set the following environment variable: `MODE=HTTP` which will enable Streamable HTTP (`http://localhost:3000/mcp`) and SSE (`http://localhost:3000/sse` Note: SSE is deprecated).\n\nHTTP requires bearer authorization, where the token is a wallet's NWC connection secret.\n\n## From Source\n\n### Prerequisites\n\n- Node.js 20+\n- Yarn\n- A connection string from a lightning wallet that supports NWC\n\n### Installation\n\n```bash\nyarn install\n```\n\n### Building\n\n```bash\nyarn build\n```\n\n### Add your NWC connection\n\nCopy `.env.example` to `.env` and update your connection string\n\n### Inspect the tools (use/test without an LLM)\n\n`yarn inspect`\n\n### Supported Tools\n\nSee the [tools directory](./src/tools)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "nwc",
        "nostr",
        "wallet",
        "nostr wallet",
        "wallet connect",
        "lightning wallet"
      ],
      "category": "finance--fintech"
    },
    "glaksmono--finbud-data-mcp": {
      "owner": "glaksmono",
      "name": "finbud-data-mcp",
      "url": "https://github.com/glaksmono/finbud-data-mcp/tree/main/packages/mcp-server",
      "imageUrl": "",
      "description": "Access comprehensive, real-time financial data (stocks, options, crypto, forex) via developer-friendly, AI-native APIs offering unbeatable value.",
      "stars": 2,
      "forks": 2,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-02T11:39:16Z",
      "readme_content": "# Finbud Data TypeScript API Library\n\n[![NPM version](https://img.shields.io/npm/v/finbud-data.svg)](https://npmjs.org/package/finbud-data) ![npm bundle size](https://img.shields.io/bundlephobia/minzip/finbud-data)\n\nThis library provides convenient access to the Finbud Data REST API from server-side TypeScript or JavaScript.\n\nThe full API of this library can be found in [api.md](api.md).\n\nIt is generated with [Stainless](https://www.stainless.com/).\n\n## Installation\n\n```sh\nnpm install finbud-data\n```\n\n## Usage\n\nThe full API of this library can be found in [api.md](api.md).\n\n<!-- prettier-ignore -->\n```js\nimport FinbudData from 'finbud-data';\n\nconst client = new FinbudData({\n  apiKey: process.env['FINBUD_DATA_API_KEY'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const response = await client.analysts.retrieveEstimates('REPLACE_ME');\n}\n\nmain();\n```\n\n### Request & Response types\n\nThis library includes TypeScript definitions for all request params and response fields. You may import and use them like so:\n\n<!-- prettier-ignore -->\n```ts\nimport FinbudData from 'finbud-data';\n\nconst client = new FinbudData({\n  apiKey: process.env['FINBUD_DATA_API_KEY'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const response: FinbudData.AnalystRetrieveEstimatesResponse = await client.analysts.retrieveEstimates(\n    'REPLACE_ME',\n  );\n}\n\nmain();\n```\n\nDocumentation for each method, request param, and response field are available in docstrings and will appear on hover in most modern editors.\n\n## Handling errors\n\nWhen the library is unable to connect to the API,\nor if the API returns a non-success status code (i.e., 4xx or 5xx response),\na subclass of `APIError` will be thrown:\n\n<!-- prettier-ignore -->\n```ts\nasync function main() {\n  const response = await client.analysts.retrieveEstimates('REPLACE_ME').catch(async (err) => {\n    if (err instanceof FinbudData.APIError) {\n      console.log(err.status); // 400\n      console.log(err.name); // BadRequestError\n      console.log(err.headers); // {server: 'nginx', ...}\n    } else {\n      throw err;\n    }\n  });\n}\n\nmain();\n```\n\nError codes are as followed:\n\n| Status Code | Error Type                 |\n| ----------- | -------------------------- |\n| 400         | `BadRequestError`          |\n| 401         | `AuthenticationError`      |\n| 403         | `PermissionDeniedError`    |\n| 404         | `NotFoundError`            |\n| 422         | `UnprocessableEntityError` |\n| 429         | `RateLimitError`           |\n| >=500       | `InternalServerError`      |\n| N/A         | `APIConnectionError`       |\n\n### Retries\n\nCertain errors will be automatically retried 2 times by default, with a short exponential backoff.\nConnection errors (for example, due to a network connectivity problem), 408 Request Timeout, 409 Conflict,\n429 Rate Limit, and >=500 Internal errors will all be retried by default.\n\nYou can use the `maxRetries` option to configure or disable this:\n\n<!-- prettier-ignore -->\n```js\n// Configure the default for all requests:\nconst client = new FinbudData({\n  maxRetries: 0, // default is 2\n});\n\n// Or, configure per-request:\nawait client.analysts.retrieveEstimates('REPLACE_ME', {\n  maxRetries: 5,\n});\n```\n\n### Timeouts\n\nRequests time out after 1 minute by default. You can configure this with a `timeout` option:\n\n<!-- prettier-ignore -->\n```ts\n// Configure the default for all requests:\nconst client = new FinbudData({\n  timeout: 20 * 1000, // 20 seconds (default is 1 minute)\n});\n\n// Override per-request:\nawait client.analysts.retrieveEstimates('REPLACE_ME', {\n  timeout: 5 * 1000,\n});\n```\n\nOn timeout, an `APIConnectionTimeoutError` is thrown.\n\nNote that requests which time out will be [retried twice by default](#retries).\n\n## Advanced Usage\n\n### Accessing raw Response data (e.g., headers)\n\nThe \"raw\" `Response` returned by `fetch()` can be accessed through the `.asResponse()` method on the `APIPromise` type that all methods return.\nThis method returns as soon as the headers for a successful response are received and does not consume the response body, so you are free to write custom parsing or streaming logic.\n\nYou can also use the `.withResponse()` method to get the raw `Response` along with the parsed data.\nUnlike `.asResponse()` this method consumes the body, returning once it is parsed.\n\n<!-- prettier-ignore -->\n```ts\nconst client = new FinbudData();\n\nconst response = await client.analysts.retrieveEstimates('REPLACE_ME').asResponse();\nconsole.log(response.headers.get('X-My-Header'));\nconsole.log(response.statusText); // access the underlying Response object\n\nconst { data: response, response: raw } = await client.analysts\n  .retrieveEstimates('REPLACE_ME')\n  .withResponse();\nconsole.log(raw.headers.get('X-My-Header'));\nconsole.log(response);\n```\n\n### Logging\n\n> [!IMPORTANT]\n> All log messages are intended for debugging only. The format and content of log messages\n> may change between releases.\n\n#### Log levels\n\nThe log level can be configured in two ways:\n\n1. Via the `FINBUD_DATA_LOG` environment variable\n2. Using the `logLevel` client option (overrides the environment variable if set)\n\n```ts\nimport FinbudData from 'finbud-data';\n\nconst client = new FinbudData({\n  logLevel: 'debug', // Show all log messages\n});\n```\n\nAvailable log levels, from most to least verbose:\n\n- `'debug'` - Show debug messages, info, warnings, and errors\n- `'info'` - Show info messages, warnings, and errors\n- `'warn'` - Show warnings and errors (default)\n- `'error'` - Show only errors\n- `'off'` - Disable all logging\n\nAt the `'debug'` level, all HTTP requests and responses are logged, including headers and bodies.\nSome authentication-related headers are redacted, but sensitive data in request and response bodies\nmay still be visible.\n\n#### Custom logger\n\nBy default, this library logs to `globalThis.console`. You can also provide a custom logger.\nMost logging libraries are supported, including [pino](https://www.npmjs.com/package/pino), [winston](https://www.npmjs.com/package/winston), [bunyan](https://www.npmjs.com/package/bunyan), [consola](https://www.npmjs.com/package/consola), [signale](https://www.npmjs.com/package/signale), and [@std/log](https://jsr.io/@std/log). If your logger doesn't work, please open an issue.\n\nWhen providing a custom logger, the `logLevel` option still controls which messages are emitted, messages\nbelow the configured level will not be sent to your logger.\n\n```ts\nimport FinbudData from 'finbud-data';\nimport pino from 'pino';\n\nconst logger = pino();\n\nconst client = new FinbudData({\n  logger: logger.child({ name: 'FinbudData' }),\n  logLevel: 'debug', // Send all messages to pino, allowing it to filter\n});\n```\n\n### Making custom/undocumented requests\n\nThis library is typed for convenient access to the documented API. If you need to access undocumented\nendpoints, params, or response properties, the library can still be used.\n\n#### Undocumented endpoints\n\nTo make requests to undocumented endpoints, you can use `client.get`, `client.post`, and other HTTP verbs.\nOptions on the client, such as retries, will be respected when making these requests.\n\n```ts\nawait client.post('/some/path', {\n  body: { some_prop: 'foo' },\n  query: { some_query_arg: 'bar' },\n});\n```\n\n#### Undocumented request params\n\nTo make requests using undocumented parameters, you may use `// @ts-expect-error` on the undocumented\nparameter. This library doesn't validate at runtime that the request matches the type, so any extra values you\nsend will be sent as-is.\n\n```ts\nclient.foo.create({\n  foo: 'my_param',\n  bar: 12,\n  // @ts-expect-error baz is not yet public\n  baz: 'undocumented option',\n});\n```\n\nFor requests with the `GET` verb, any extra params will be in the query, all other requests will send the\nextra param in the body.\n\nIf you want to explicitly send an extra argument, you can do so with the `query`, `body`, and `headers` request\noptions.\n\n#### Undocumented response properties\n\nTo access undocumented response properties, you may access the response object with `// @ts-expect-error` on\nthe response object, or cast the response object to the requisite type. Like the request params, we do not\nvalidate or strip extra properties from the response from the API.\n\n### Customizing the fetch client\n\nBy default, this library expects a global `fetch` function is defined.\n\nIf you want to use a different `fetch` function, you can either polyfill the global:\n\n```ts\nimport fetch from 'my-fetch';\n\nglobalThis.fetch = fetch;\n```\n\nOr pass it to the client:\n\n```ts\nimport FinbudData from 'finbud-data';\nimport fetch from 'my-fetch';\n\nconst client = new FinbudData({ fetch });\n```\n\n### Fetch options\n\nIf you want to set custom `fetch` options without overriding the `fetch` function, you can provide a `fetchOptions` object when instantiating the client or making a request. (Request-specific options override client options.)\n\n```ts\nimport FinbudData from 'finbud-data';\n\nconst client = new FinbudData({\n  fetchOptions: {\n    // `RequestInit` options\n  },\n});\n```\n\n#### Configuring proxies\n\nTo modify proxy behavior, you can provide custom `fetchOptions` that add runtime-specific proxy\noptions to requests:\n\n<img src=\"https://raw.githubusercontent.com/stainless-api/sdk-assets/refs/heads/main/node.svg\" align=\"top\" width=\"18\" height=\"21\"> **Node** <sup>[[docs](https://github.com/nodejs/undici/blob/main/docs/docs/api/ProxyAgent.md#example---proxyagent-with-fetch)]</sup>\n\n```ts\nimport FinbudData from 'finbud-data';\nimport * as undici from 'undici';\n\nconst proxyAgent = new undici.ProxyAgent('http://localhost:8888');\nconst client = new FinbudData({\n  fetchOptions: {\n    dispatcher: proxyAgent,\n  },\n});\n```\n\n<img src=\"https://raw.githubusercontent.com/stainless-api/sdk-assets/refs/heads/main/bun.svg\" align=\"top\" width=\"18\" height=\"21\"> **Bun** <sup>[[docs](https://bun.sh/guides/http/proxy)]</sup>\n\n```ts\nimport FinbudData from 'finbud-data';\n\nconst client = new FinbudData({\n  fetchOptions: {\n    proxy: 'http://localhost:8888',\n  },\n});\n```\n\n<img src=\"https://raw.githubusercontent.com/stainless-api/sdk-assets/refs/heads/main/deno.svg\" align=\"top\" width=\"18\" height=\"21\"> **Deno** <sup>[[docs](https://docs.deno.com/api/deno/~/Deno.createHttpClient)]</sup>\n\n```ts\nimport FinbudData from 'npm:finbud-data';\n\nconst httpClient = Deno.createHttpClient({ proxy: { url: 'http://localhost:8888' } });\nconst client = new FinbudData({\n  fetchOptions: {\n    client: httpClient,\n  },\n});\n```\n\n## Frequently Asked Questions\n\n## Semantic versioning\n\nThis package generally follows [SemVer](https://semver.org/spec/v2.0.0.html) conventions, though certain backwards-incompatible changes may be released as minor versions:\n\n1. Changes that only affect static types, without breaking runtime behavior.\n2. Changes to library internals which are technically public but not intended or documented for external use. _(Please open a GitHub issue to let us know if you are relying on such internals.)_\n3. Changes that we do not expect to impact the vast majority of users in practice.\n\nWe take backwards-compatibility seriously and work hard to ensure you can rely on a smooth upgrade experience.\n\nWe are keen for your feedback; please open an [issue](https://www.github.com/glaksmono/finbud-data-mcp/issues) with questions, bugs, or suggestions.\n\n## Requirements\n\nTypeScript >= 4.9 is supported.\n\nThe following runtimes are supported:\n\n- Web browsers (Up-to-date Chrome, Firefox, Safari, Edge, and more)\n- Node.js 18 LTS or later ([non-EOL](https://endoflife.date/nodejs)) versions.\n- Deno v1.28.0 or higher.\n- Bun 1.0 or later.\n- Cloudflare Workers.\n- Vercel Edge Runtime.\n- Jest 28 or greater with the `\"node\"` environment (`\"jsdom\"` is not supported at this time).\n- Nitro v2.6 or greater.\n\nNote that React Native is not supported at this time.\n\nIf you are interested in other runtime environments, please open or upvote an issue on GitHub.\n\n## Contributing\n\nSee [the contributing documentation](./CONTRIBUTING.md).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "finance",
        "finbud",
        "finance fintech",
        "fintech glaksmono",
        "finbud data"
      ],
      "category": "finance--fintech"
    },
    "hive-intel--hive-crypto-mcp": {
      "owner": "hive-intel",
      "name": "hive-crypto-mcp",
      "url": "https://github.com/hive-intel/hive-crypto-mcp",
      "imageUrl": "",
      "description": "Hive Intelligence: Ultimate cryptocurrency MCP for AI assistants with unified access to crypto, DeFi, and Web3 analytics",
      "stars": 5,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-30T15:29:26Z",
      "readme_content": "# Hive Intelligence MCP Server\n\nA Model Context Protocol (MCP) server providing comprehensive cryptocurrency and Web3 analytics through intelligent tool orchestration.\n\n## Overview\n\nHive Intelligence MCP Server enables AI assistants to access a wide range of cryptocurrency, DeFi, and Web3 analytics through a unified MCP interface. The server provides both dynamic and category-specific access to over 200+ specialized tools covering market data, on-chain analytics, portfolio tracking, security analysis, and more.\n\n\n### 📊 **Analytics Categories**\n\n- **Market Data & Price**\n- **On-Chain DEX & Pool**\n- **Portfolio & Wallet**\n- **Token & Contract**\n- **DeFi Protocol**\n- **NFT Analytics**\n- **Security & Risk**\n- **Network & Infrastructure**\n- **Search & Discovery**\n- **Social & Sentiment**\n\n## Installation\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the server\nnpm run build\n\n# Start the server\nnpm start\n```\n\n### MCP Client Configuration\n\nAdd to your MCP client configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"hive\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-hive\"]\n    }\n  }\n}\n```\n\n## Usage\n\n### Claude Desktop Configuration\n\nAdd to your Claude Desktop configuration file:\n\n**Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n**macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"hive-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-hive\"]\n    }\n  }\n}\n```\n\n## Development\n\n\n### Building\n\n```bash\n# Development build\nnpm run build\n\n# Production build with executable permissions\nnpm run prepare\n```\n\n### Testing\n\n```bash\n# Use MCP inspector for testing\nnpm run inspector\n```\n---\n\n## remote mcp server\ncheckout the guide to use the hive's remote mcp server\nhttps://hiveintelligence.xyz/crypto-mcp\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hive",
        "crypto",
        "intel",
        "hive crypto",
        "fintech hive",
        "hive intel"
      ],
      "category": "finance--fintech"
    },
    "intentos-labs--beeper-mcp": {
      "owner": "intentos-labs",
      "name": "beeper-mcp",
      "url": "https://github.com/intentos-labs/beeper-mcp",
      "imageUrl": "",
      "description": "Beeper provides transactions on BSC, including balance/token transfers, token swaps in Pancakeswap and beeper reward claims.",
      "stars": 3,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-07-02T11:33:27Z",
      "readme_content": "# beeper-mcp\n\nA backend service for executing beeper transactions on Binance Smart Chain (BSC). This service provides a set of tools for interacting with the BSC blockchain, including balance checking, balance transfers, token transfers, token swaps in Pancakeswap and beeper reward claims.\n\n## Features\n\n- Get BNB and token balances\n- Transfer BNB and tokens\n- Swap tokens in Pancakeswap\n- Get token prices\n- Buy and sell tokens\n- Claim rewards of beeper tokens\n- Manage default wallet and token addresses\n\n## Prerequisites\n\n- Python >=3.10\n- Access to BSC network (mainnet or testnet)\n- Wallet account and private key\n\n## Environment Variables\n\nCreate a `.env` file in the project root with the following variables:\n\n```env\nBEEPER_CHAIN=<bsc or bsc-testnet>\nBEEPER_ACCOUNT=<your-wallet-address>\nBEEPER_SECRET_KEY=<your-private-key>\nBEEPER_TARGET_TOKEN=<default-token-address>  # Optional\n```\n\n## API Endpoints\n\nThe service exposes the following MCP tools:\n\n### Wallet and Token Management\n- `get_default_wallet_address() -> str`: Get the default wallet address\n- `get_default_token_address() -> str`: Get the default token address\n- `switch_default_token_address(new_token_address: str) -> str`: Switch to a new default token address\n\n### Balance Operations\n- `get_balance(address: str) -> str`: Get BNB balance of an address\n- `get_token_balance(address: str, token_address: str) -> str`: Get token balance of an address\n\n### Transfer Operations\n- `transfer(recipient_address: str, amount: Decimal = 0.01) -> dict`: Transfer BNB to an address\n- `transfer_token(recipient_address: str, token_address: str, amount: Decimal = 0.01) -> dict`: Transfer tokens to an address\n\n### Trading Operations\n- `swap_token(token_in: str, token_out: str, amount: Decimal = 0.01) -> dict`: Swap between tokens\n- `get_token_price(token_address: str) -> float`: Get token price in BNB\n- `buy_token(token_address: str, amount: Decimal = 0.01) -> dict`: Buy tokens with BNB\n- `sell_token(token_address: str, amount: Decimal = 0.01) -> dict`: Sell tokens for BNB\n\n### Reward Operations\n- `claim_rewards(token_address: str) -> dict`: Claim rewards for a token\n\n## Running the Service\n\n```bash\ngit clone https://github.com/unibaseio/beeper-mcp.git\ncd beeper-mcp\n# start server over stdio\nuv run src/beeper_mcp/server.py \n```\n\n+ start using sse\n\nThe sse service will start on port 8000 by default. You can specify a different port using the `--port` argument:\n\n```bash\nuv run src/beeper_mcp/server.py --port 8008 --transport=sse\n```\n\n### Configuration on Claude/Windsurf/Cursor/Cline\n\n```json\n{\n  \"mcpServers\": {\n    \"beeper\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"path/to/beeper-mcp\",\n        \"run\", \n        \"src/beeper_mcp/server.py\"\n        ],\n      \"env\": {\n        \"BEEPER_ACCOUNT\": \"your account, 0x...\",\n        \"BEEPER_SECRET_KEY\": \"your private key or in .env\",\n        \"BEEPER_TARGET_TOKEN\": \"default token address\",\n        \"BEEPER_CHAIN\": \"chain type <bsc/bsc-testnet>\"\n      }\n    }\n  }\n}\n```\n\n## Notes\n\n- All amounts are in native units (e.g., BNB, tokens)\n- Token addresses should be provided in the correct format\n- Make sure you have sufficient BNB for gas fees\n- The service supports both BSC mainnet and testnet\n- All operations return detailed response objects with transaction hashes and status information\n- The service includes built-in error handling and status tracking for transactions\n\n\n## Usage\n\ncall functions in llm chat\n\n+ show wallet and buy tokens\n\n![show wallet and buy tokens](./asset/buy.png)\n\n+ sell tokens\n\n![sell tokens](./asset/sell.png)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "beeper",
        "fintech",
        "bsc",
        "transactions bsc",
        "fintech intentos",
        "beeper mcp"
      ],
      "category": "finance--fintech"
    },
    "janswist--mcp-dexscreener": {
      "owner": "janswist",
      "name": "mcp-dexscreener",
      "url": "https://github.com/janswist/mcp-dexscreener",
      "imageUrl": "",
      "description": "Real-time on-chain market prices using open and free Dexscreener API",
      "stars": 14,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-30T07:54:05Z",
      "readme_content": "# Dexscreener MCP server\n\nBasic MCP server for Dexscreener API based on their documentation (as of April 4th 2025): https://docs.dexscreener.com/api/reference\n\n## Project setup\n\nInstall all the dependencies\n```\nnpm run install\n```\n\nIf you are using Claude Desktop, after pulling the code open the config file `claude_desktop_config.json` in VSCode:\n- on MacOS:\n\n  ```code ~/Library/Application\\ Support/Claude/claude_desktop_config.json```\n\n- on Windows:\n\n  ```code $env:AppData\\Claude\\claude_desktop_config.json```\n- more info: https://modelcontextprotocol.io/quickstart/server\n\nIn `claude_desktop_config.json` put `dexscreener` object:\n```json\n{\n  \"mcpServers\": {\n    \"dexscreener\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/index.js\"\n      ]\n    }\n  }\n}\n\n```\n\n## Running the app\n\nYou can use [Inspector](https://modelcontextprotocol.io/docs/tools/inspector) to test the MCP server without using Claude Desktop - both for SDTIO version (default) and SSE version `index-sse.js` (server-sent events - can be hosted on remote server).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "dexscreener",
        "finance",
        "fintech",
        "dexscreener api",
        "free dexscreener",
        "mcp dexscreener"
      ],
      "category": "finance--fintech"
    },
    "jjlabsio--korea-stock-mcp": {
      "owner": "jjlabsio",
      "name": "korea-stock-mcp",
      "url": "https://github.com/jjlabsio/korea-stock-mcp",
      "imageUrl": "",
      "description": "An MCP Server for Korean stock analysis using OPEN DART API and KRX API",
      "stars": 1,
      "forks": 1,
      "license": "ISC License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T05:32:40Z",
      "readme_content": "# Korea Stock MCP Server\n\n[🇰🇷 한국어](#korea-stock-mcp-server) | [🇺🇸 English](#english-version)\n\n한국 주식 분석을 위한 MCP 서버입니다.  \nDART(전자공시시스템)와 KRX(한국거래소) 공식 API를 통해 주가 정보와 공시 자료 기반의 AI분석이 가능합니다.\n\n## 🎯 주요 기능\n\n- 🔍 **공시검색** - 회사별, 기간별 공시 검색\n- 📊 **공시 데이터** - 공시보고서 원본파일 파싱한 데이터 제공\n- 💼 **재무제표 분석** - XBRL 기반 상세 재무 데이터\n- 📈 **주식 데이터** - KRX(코스피/코스닥) 일별 주가정보, 종목 기본정보\n\n## ⚡ 빠른 시작\n\n### 1️⃣ API KEY 발급\n\n먼저 DART와 KRX의 API KEY를 발급받아야 합니다.\n\n#### 📝 DART API KEY 발급\n\n1. **회원가입**: [OPEN DART](https://opendart.fss.or.kr) 회원가입\n2. **키 신청**: [인증키 신청 페이지](https://opendart.fss.or.kr/uss/umt/EgovMberInsertView.do)에서 API KEY 신청\n3. **키 확인**: [오픈API 이용현황](https://opendart.fss.or.kr/mng/apiUsageStatusView.do)에서 발급된 API KEY 확인\n\n#### 📈 KRX API KEY 발급\n\n1. **회원가입**: [KRX OPEN API](https://openapi.krx.co.kr/contents/OPP/MAIN/main/index.cmd)에서 회원가입 및 로그인\n2. **키 신청**: 마이페이지 → API 인증키 신청에서 신청\n3. **서비스 신청**: 승인 후 서비스이용 → 주식 메뉴로 이동\n4. **API 이용신청**: 다음 6개 항목에서 각각 \"API 이용신청\" 클릭\n\n   - 유가증권 일별매매정보\n   - 코스닥 일별매매정보\n   - 코넥스 일별매매정보\n   - 유가증권 종목기본정보\n   - 코스닥 종목기본정보\n   - 코넥스 종목기본정보\n\n   > ⏱️ **승인까지 약 1일 소요됩니다.**\n\n5. **키 확인**: 승인 후 마이페이지 → API 인증키 발급내역에서 API KEY 확인\n\n### 2️⃣ Claude Desktop 설정\n\n1. **Claude Desktop** 실행\n2. **설정** → **개발자** → **구성편집** 클릭\n3. `claude_desktop_config.json` 파일에 다음 내용 추가:\n\n```json\n{\n  \"mcpServers\": {\n    \"korea-stock-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"korea-stock-mcp@latest\"],\n      \"env\": {\n        \"DART_API_KEY\": \"<YOUR_DART_API_KEY>\",\n        \"KRX_API_KEY\": \"<YOUR_KRX_API_KEY>\"\n      }\n    }\n  }\n}\n```\n\n4. **재시작**: Claude Desktop을 재시작하여 설정 적용\n\n> 이제 Claude에서 한국 주식 데이터 분석을 시작할 수 있습니다.\n\n## 사용 가능한 도구\n\n### DART (전자공시시스템)\n\n1. **get_disclosure_list** - 공시검색\n\n   - 공시 유형별, 회사별, 날짜별 공시보고서 검색\n\n2. **get_corp_code** - 고유번호 조회\n\n   - DART 등록 공시대상회사의 고유번호, 회사명, 종목코드 제공\n\n3. **get_disclosure** - 공시보고서 원문\n\n   - DART API를 통한 공시보고서 원본파일 파싱\n\n4. **get_financial_statement** - 재무제표\n   - 상장법인 및 주요 비상장법인 XBRL 재무제표\n   - 정기보고서 내 모든 계정과목 데이터 제공\n\n### KRX (한국거래소)\n\n1. **get_stock_base_info** - 종목 기본정보\n\n   - 코스피, 코스닥, 코넥스 상장 종목 기본 정보\n   - 종목명, 종목코드, 시장구분 등 기본 데이터\n\n2. **get_stock_trade_info** - 일별 매매정보\n   - 코스피, 코스닥, 코넥스 종목별 일별 거래 데이터\n   - 주가, 거래량, 시가총액 등 상세 거래 정보\n\n3. **get_market_type** - 시장구분 조회\n   - 종목코드로 해당 종목의 시장구분(코스피/코스닥/코넥스) 조회\n   - 주식 데이터 조회 시 필요한 시장 정보 제공\n\n### 기타 도구\n\n1. **get_today_date** - 오늘 날짜 조회\n   - 현재 날짜를 YYYYMMDD 형식으로 제공\n   - AI의 정확한 날짜 조회를 위한 도구\n\n## 실제 사용 예시\n\n### 📊 재무 분석 예제\n\n**프롬프트**: \"삼양식품의 2023년, 2024년 1~4분기, 2025년 1,2분기 매출, 영업이익 조사해주고 성장률도 조사해줘\"  \n→ [삼양식품 분석 결과 보기](./example/삼양식품.md)\n\n**프롬프트**: \"에이피알의 23년 1분기부터 25년 2분기까지의 매출, 영업이익 성장과 주가, 시가총액 흐름을 조사해줘\"  \n→ [에이피알 분석 결과 보기](./example/에이피알.md)\n\n### 🏢 기업 분석 예제\n\n**프롬프트**: \"HJ중공업은 뭘 해서 돈을 버는 회사인지랑 사업부문별 매출까지 같이 알려줘\"  \n→ [HJ중공업 분석 결과 보기](./example/HJ중공업.md)\n\n## API 데이터 소스\n\n- **DART (전자공시시스템)**: 상장기업 공시 정보 및 재무제표\n- **KRX (한국거래소)**: 종목 기본정보 및 일별 매매정보\n\n## 기여하기\n\n기여를 환영합니다! Pull Request를 보내주세요.\n\n1. 이 저장소를 포크하세요\n2. 기능 브랜치를 만드세요 (`git checkout -b feature/AmazingFeature`)\n3. 변경사항을 커밋하세요 (`git commit -m 'Add some AmazingFeature'`)\n4. 브랜치에 푸시하세요 (`git push origin feature/AmazingFeature`)\n5. Pull Request를 열어주세요\n\n## 라이선스\n\nISC 라이선스\n\n## 지원\n\n- 🐛 이슈가 있다면 GitHub Issues에 등록해주세요\n- ⭐ 유용하다면 스타를 눌러주세요!\n\n## 면책 조항\n\n본 도구는 정보 제공 목적이며, 투자 조언이 아닙니다. 모든 투자 결정은 본인 책임입니다.\n\n---\n\n# English Version\n\nMCP Server for Korean stock analysis.  \nEnables AI-powered analysis of stock prices and disclosure data through official APIs from DART (Data Analysis, Retrieval and Transfer System) and KRX (Korea Exchange).\n\n## 🎯 Key Features\n\n- 🔍 **Disclosure Search** - Search corporate disclosures by company and date\n- 📊 **Disclosure Data** - Provides parsed data from original disclosure reports\n- 💼 **Financial Statement Analysis** - Detailed financial data based on XBRL\n- 📈 **Stock Data** - KRX (KOSPI/KOSDAQ) daily stock prices and basic stock information\n\n## ⚡ Quick Start\n\n### 1️⃣ API KEY Registration\n\nYou need to obtain API KEYs from both DART and KRX.\n\n#### 📝 DART API KEY Registration\n\n1. **Sign Up**: Register at [OPEN DART](https://opendart.fss.or.kr)\n2. **Request Key**: Apply for API KEY at [Authentication Key Application Page](https://opendart.fss.or.kr/uss/umt/EgovMberInsertView.do)\n3. **Check Key**: Verify issued API KEY at [Open API Usage Status](https://opendart.fss.or.kr/mng/apiUsageStatusView.do)\n\n#### 📈 KRX API KEY Registration\n\n1. **Sign Up**: Register and login at [KRX OPEN API](https://openapi.krx.co.kr/contents/OPP/MAIN/main/index.cmd)\n2. **Request Key**: Apply for API authentication key in My Page → API Authentication Key Application\n3. **Service Application**: After approval, go to Service Use → Stock menu\n4. **API Usage Application**: Click \"API Usage Application\" for each of the following 6 items\n\n   - Securities Daily Trading Information\n   - KOSDAQ Daily Trading Information\n   - KONEX Daily Trading Information\n   - Securities Basic Information\n   - KOSDAQ Basic Information\n   - KONEX Basic Information\n\n   > ⏱️ **Approval takes approximately 1 day.**\n\n5. **Key Verification**: After approval, check API KEY in My Page → API Authentication Key Issuance History\n\n### 2️⃣ Claude Desktop Setup\n\n1. Launch **Claude Desktop**\n2. Go to **Settings** → **Developer** → **Edit Configuration**\n3. Add the following content to `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"korea-stock-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"korea-stock-mcp@latest\"],\n      \"env\": {\n        \"DART_API_KEY\": \"<YOUR_DART_API_KEY>\",\n        \"KRX_API_KEY\": \"<YOUR_KRX_API_KEY>\"\n      }\n    }\n  }\n}\n```\n\n4. **Restart**: Restart Claude Desktop to apply settings\n\n> You can now start analyzing Korean stock data with Claude.\n\n## Available Tools\n\n### DART (Data Analysis, Retrieval and Transfer System)\n\n1. **get_disclosure_list** - Disclosure Search\n\n   - Search disclosure reports by type, company, and date\n\n2. **get_corp_code** - Corporate Code Inquiry\n\n   - Provides unique codes, company names, and stock codes of DART-registered disclosure companies\n\n3. **get_disclosure** - Disclosure Report Content\n\n   - Parse original disclosure report files through DART API\n\n4. **get_financial_statement** - Financial Statements\n   - XBRL financial statements for listed and major unlisted companies\n   - Provides all account data from periodic reports\n\n### KRX (Korea Exchange)\n\n1. **get_stock_base_info** - Basic Stock Information\n\n   - Basic information for KOSPI, KOSDAQ, and KONEX listed stocks\n   - Basic data including stock names, codes, and market classifications\n\n2. **get_stock_trade_info** - Daily Trading Information\n   - Daily trading data for KOSPI, KOSDAQ, and KONEX stocks\n   - Detailed trading information including stock prices, trading volume, and market capitalization\n\n3. **get_market_type** - Market Type Inquiry\n   - Query market classification (KOSPI/KOSDAQ/KONEX) by stock code\n   - Provides market information needed for stock data queries\n\n### Other Tools\n\n1. **get_today_date** - Today's Date Inquiry\n   - Provides current date in YYYYMMDD format\n   - Tool for AI's accurate date inquiry\n\n## Real Usage Examples\n\n### 📊 Financial Analysis Examples\n\n**Prompt**: \"Investigate Samyang Foods's sales and operating profit for Q1-Q4 2023, Q1-Q4 2024, and Q1-Q2 2025, and also check growth rates\"  \n→ [See Samyang Foods Analysis Results](./example/삼양식품.md)\n\n**Prompt**: \"Investigate APR's sales and operating profit growth from Q1 2023 to Q2 2025, along with stock price and market cap trends\"  \n→ [See APR Analysis Results](./example/에이피알.md)\n\n### 🏢 Corporate Analysis Examples\n\n**Prompt**: \"Tell me what HJ SHIPBUILDING & CONSTRUCTION does to make money and include sales by business segment\"  \n→ [See HJ SHIPBUILDING & CONSTRUCTION Analysis Results](./example/HJ중공업.md)\n\n## API Data Sources\n\n- **DART (Data Analysis, Retrieval and Transfer System)**: Listed company disclosure information and financial statements\n- **KRX (Korea Exchange)**: Basic stock information and daily trading information\n\n## Contributing\n\nContributions are welcome! Please send us a Pull Request.\n\n1. Fork this repository\n2. Create a feature branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n## License\n\nISC License\n\n## Support\n\n- 🐛 If you have issues, please register them in GitHub Issues\n- ⭐ If you find it useful, please give it a star!\n\n## Disclaimer\n\nThis tool is for informational purposes only and is not investment advice. All investment decisions are your own responsibility.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "stock",
        "finance",
        "korean stock",
        "korea stock",
        "stock mcp"
      ],
      "category": "finance--fintech"
    },
    "kukapay--binance-alpha-mcp": {
      "owner": "kukapay",
      "name": "binance-alpha-mcp",
      "url": "https://github.com/kukapay/binance-alpha-mcp",
      "imageUrl": "",
      "description": "An MCP server for tracking Binance Alpha trades, helping AI agents optimize alpha point accumulation.",
      "stars": 7,
      "forks": 3,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-02T14:22:35Z",
      "readme_content": "# Binance Alpha MCP\n\nAn MCP server for tracking Binance Alpha trades, helping AI agents optimize alpha point accumulation.\n\n[![License](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)](https://nodejs.org/)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Real-time Trade Monitoring**:  Track buy-side activity for Binance Alpha tokens by Subscribing to on-chain events.\n- **USD-based Metrics**: Calculates trade values in USD using real-time prices from the CryptoCompare.\n- **Data Persistence**: Maintains trade data in memory, with automatic cleanup of records older than 1 hour.\n- **MCP Tools**:\n  - `get_top_tokens`: Returns a markdown table of top tokens by USD trading volume, including symbol, USD volume, name, and address.\n  - `get_trade_stats`: Provides statistics on trade USD values (min, max, median) and a distribution table.\n- **Configurable Endpoints**: Uses separate WebSocket (`WS_ENDPOINT`) and HTTP (`RPC_ENDPOINT`) endpoints for event listening and token queries.\n\n## Prerequisites\n\n- **Node.js**: Version 18 or higher.\n- **npm**: For dependency management.\n- **BSC Node Access**: A WebSocket endpoint for event listening and an HTTP RPC endpoint for token queries, which can be obtained from services like Infura or QuikNode.\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/binance-alpha-mcp.git\n   cd binance-alpha-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n3. **Configure MCP Client**:\n   To use this server with an MCP client like Claude Desktop, add the following to your config file (or equivalent):\n    ```json\n    {\n      \"mcpServers\": {\n        \"binance-alpha-mcp\": {\n          \"command\": \"node\",\n          \"args\": [\"/absolute/path/to/binance-alpha-mcp/index.js\"],\n          \"env\": { \n             \"WS_ENDPOINT\": \"your_ws_endpoint_url\",\n             \"RPC_ENDPOINT\": \"your_rpc_endpoint_url\"\n          }\n        }\n      }\n    }   \n    ```\n   Replace `/absolute/path/to/binance-alpha-mcp` with your actual installation path, and update `WS_ENDPOINT` and `PRC_ENDPOINT` with your own endpoint URLs.\n\n## Usage\n\nThe server exposes two MCP tools:\n\n### get_top_tokens\n- **Description**: Returns a markdown table of the top tokens by USD trading volume.\n- **Input**: `{ limit: number }` (optional, defaults to 10). Specifies how many tokens to include in the output.\n- **Output Example**:\n  ```\n  period: last 23 minutes\n  | Symbol | USD Volume | Name | Address |\n  |--------|------------|------|---------|\n  | ZK | $72516.34 | Polyhedra Network | 0xc71b5f631354be6853efe9c3ab6b9590f8302e81 |\n  | B2 | $22893.72 | BSquared Token | 0x783c3f003f172c6ac5ac700218a357d2d66ee2a2 |\n  | AIOT | $5249.05 | OKZOO | 0x55ad16bd573b3365f43a9daeb0cc66a73821b4a5 |\n  | gorilla | $3263.95 | gorilla | 0xcf640fdf9b3d9e45cbd69fda91d7e22579c14444 |\n  | BOOP | $2046.32 | BOOP | 0x9a70815dfb644a24b57358e1041f8d0324c8f6e1 |\n  | BANK | $1305.38 | Lorenzo Governance Token | 0x3aee7602b612de36088f3ffed8c8f10e86ebf2bf |\n  | SKYAI | $1015.69 | SKYAI | 0x92aa03137385f18539301349dcfc9ebc923ffb10 |\n  | KOGE | $672.59 | BNB48 Club Token | 0xe6df05ce8c8301223373cf5b969afcb1498c5528 |\n  | MYX | $477.85 | MYX | 0xd82544bf0dfe8385ef8fa34d67e6e4940cc63e16 |\n  | Drama | $108.37 | Drama | 0xf922fb5f88c19f363cb018e8f7c98c10ed294444 |\n  ```\n  \n### get_trade_stats\n- **Description**: Returns statistics about trade USD values, including min, max, median, and distribution.\n- **Input**: `{ buckets: number }` (optional, defaults to 10). Specifies the number of buckets to divide the trade distribution by USD value.\n- **Output Example**:\n  ```\n  period: last 1 minutes\n  min: $0.30, max: $2469.14, median: $653.41\n  | range | count |\n  |-------|-------|\n  | 0.30~247.19 | 26 |\n  | 247.19~494.07 | 22 |\n  | 494.07~740.95 | 39 |\n  | 740.95~987.84 | 6 |\n  | 987.84~1234.72 | 16 |\n  | 1234.72~1481.61 | 9 |\n  | 1481.61~1728.49 | 1 |\n  | 1728.49~1975.38 | 6 |\n  | 1975.38~2222.26 | 10 |\n  | 2222.26~2469.14 | 2 |\n  ```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "binance",
        "finance",
        "alpha mcp",
        "binance alpha",
        "alpha trades"
      ],
      "category": "finance--fintech"
    },
    "kukapay--bridge-rates-mcp": {
      "owner": "kukapay",
      "name": "bridge-rates-mcp",
      "url": "https://github.com/kukapay/bridge-rates-mcp",
      "imageUrl": "",
      "description": "Delivering real-time cross-chain bridge rates and optimal transfer routes to onchain AI agents.",
      "stars": 4,
      "forks": 3,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-10T14:44:08Z",
      "readme_content": "# Bridge Rates MCP Server\n\nAn MCP server that delivers real-time cross-chain bridge rates and optimal transfer routes to support decision-making by onchain AI agents.\n\n[![Discord](https://img.shields.io/discord/1353556181251133481?cacheSeconds=3600)](https://discord.gg/aRnuu2eJ)\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Get Bridge Rates**: Retrieve cross-chain bridge rates for token pairs, including USD values, gas costs, route providers and tags, presented in a Markdown table.\n- **List Supported Chains**: Fetch a sorted list of blockchain networks supported by LI.FI.\n- **List Supported Bridges**: Obtain a sorted list of bridges and exchanges available for cross-chain transfers.\n\n## Prerequisites\n\n- **Node.js**: Version 18 or higher.\n- **npm**: For dependency management.\n- **MCP Client**: An MCP-compatible client (e.g., Claude Desktop) to interact with the server.\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/bridge-rates-mcp.git\n   cd bridge-rates-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n3. **Integrate with an MCP Client**:\n   Configure your MCP client (e.g., Claude Desktop) to connect to the server. For Claude Desktop, edit the configuration file (e.g., `~/Library/Application Support/Claude/claude_desktop_config.json` on Mac or `%APPDATA%\\Claude\\claude_desktop_config.json` on Windows):\n   ```json\n   {\n     \"mcpServers\": {\n       \"bridge-rates\": {\n         \"command\": \"node\",\n         \"args\": [\"/absolute/path/to/bridge-rates-mcp/index.js\"]\n       }\n     }\n   }\n   ```\n   Restart Claude Desktop and verify the tools are available (look for the hammer icon).\n\n## Tools\n\n### 1. `getBridgeRates`\nFetches cross-chain bridge rates for a token pair between two chains, returning all available routes in a Markdown table.\n\n**Parameters**:\n- `fromChainId` (string, required): Source chain ID (e.g., \"1\" for Ethereum).\n- `toChainId` (string, required): Destination chain ID (e.g., \"10\" for Optimism).\n- `fromTokenAddress` (string, required): Source token contract address.\n- `toTokenAddress` (string, required): Destination token contract address.\n- `fromAmount` (string, optional): Amount to bridge in the smallest token unit (default: \"10000000\").\n\n**Example Prompt**:\n```\nWhat's the bridge rate from Arbitrum USDC to Optimism DAI?\n```\n\n**Example Output**:\n```\n| From Amount | From Amount USD | To Amount | To Amount USD | To Amount Min | Gas Cost USD | Providers | Tags                 |\n|-------------|-----------------|-----------|---------------|---------------|--------------|-----------|----------------------|\n| 10000000    | 10.00           | 9980000   | 9.98          | 9940000       | 0.2300       | hop       | RECOMMENDED,CHEAPEST |\n| 10000000    | 10.00           | 9975000   | 9.97          | 9935000       | 0.2500       | connext   | None                 |\n```\n\n### 2. `getSupportedChains`\nFetches a sorted list of chains supported by LI.FI for cross-chain bridging, presented in a Markdown table.\n\n**Parameters**: None.\n\n**Example Prompt**:\n```\nList all supported chains for bridging.\n```\n\n**Example Output**:\n```\n| Chain Type | ID | Key | Name          | Native Token |\n|------------|----|-----|---------------|--------------|\n| EVM        | 1  | eth | Ethereum      | ETH          |\n| EVM        | 10 | opt | Optimism      | ETH          |\n| EVM        | 137| pol | Polygon       | MATIC        |\n| SVM        | 101| sol | Solana        | SOL          |\n```\n\n### 3. `getSupportedBridges`\nFetches a sorted list of bridges and exchanges supported by LI.FI, presented in a Markdown table.\n\n**Parameters**: None.\n\n**Example Prompt**:\n```\nList all supported bridges for cross-chain bridging.\n```\n\n**Example Output**:\n```\n| Key           | Name                | Type     |\n|---------------|---------------------|----------|\n| across        | Across              | BRIDGE   |\n| connext       | Connext             | BRIDGE   |\n| hop           | Hop Protocol        | BRIDGE   |\n| sushiswap     | SushiSwap           | EXCHANGE |\n| uniswap       | Uniswap             | EXCHANGE |\n```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "onchain",
        "bridge",
        "finance",
        "onchain ai",
        "chain bridge",
        "fintech kukapay"
      ],
      "category": "finance--fintech"
    },
    "kukapay--chainlink-feeds-mcp": {
      "owner": "kukapay",
      "name": "chainlink-feeds-mcp",
      "url": "https://github.com/kukapay/chainlink-feeds-mcp",
      "imageUrl": "",
      "description": "Providing real-time access to Chainlink's decentralized on-chain price feeds.",
      "stars": 5,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-02T08:58:51Z",
      "readme_content": "# Chainlink Feeds MCP Server\n\nAn MCP server that provides real-time access to Chainlink's decentralized on-chain price feeds, optimized for seamless integration into AI agents and autonomous systems\n\n<a href=\"https://glama.ai/mcp/servers/@kukapay/chainlink-feeds-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@kukapay/chainlink-feeds-mcp/badge\" alt=\"chainlink-feeds-mcp MCP server\" />\n</a>\n\n[![License](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)](https://nodejs.org/)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Query Latest Price**: Fetch the latest price for a specified price feed pair (e.g., `FIL/ETH`) on a given chain (e.g., `ethereum`), including price, decimals, round ID, and timestamp.\n- **Query Price by Round ID**: Retrieve price data for a specific round ID (currently a placeholder due to on-chain historical data limitations).\n- **List Supported Chains**: Get a comma-separated list of supported blockchain networks (e.g., `ethereum,base`).\n- **List All Feeds**: Retrieve a Markdown-formatted list of all chains and their price feed names (e.g., `- ethereum: FIL/ETH,FDUSD/USD`).\n- **List Feeds by Chain**: Obtain a comma-separated list of price feed names for a specific chain (e.g., `FIL/ETH,FDUSD/USD` for `ethereum`).\n- **Configurable Feeds**: Define price feeds and RPC endpoints in a `feeds.json` file, supporting multiple chains and feed categories.\n\n## Supported Chains and Feeds\n\nThe server supports **9 blockchain networks** with a total of **329 price feeds**, as defined in `feeds.json`:\n\n- **Ethereum**: 107 feeds (e.g., `FIL/ETH`, `BTC/USD`, `USDC/USD`)\n- **BNB Chain (bsc)**: 80 feeds (e.g., `DOT/USD`, `CAKE/USD`, `BUSD/BNB`)\n- **Base**: 52 feeds (e.g., `AXL/USD`, `USDC/USD`, `WIF/USD`)\n- **Starknet**: 9 feeds (e.g., `ETH/USD`, `BTC/USD`, `WSTETH/ETH`)\n- **Linea**: 15 feeds (e.g., `ETH/USD`, `FOXY/USD`, `MATIC/USD`)\n- **Mantle**: 6 feeds (e.g., `MNT/USD`, `USDT/USD`, `BTC/USD`)\n- **Scroll**: 22 feeds (e.g., `SCR/USD`, `STETH/USD`, `WBTC/BTC`)\n- **zkSync**: 16 feeds (e.g., `ZK/USD`, `PEPE/USD`, `TRUMP/USD`)\n- **Celo**: 22 feeds (e.g., `CELO/USD`, `CUSD/USD`, `NGN/USD`)\n\nAdditional chains and feeds can be added by updating `feeds.json` with new network configurations and proxy addresses from Chainlink's Price Feeds documentation.\n\n## Prerequisites\n\n- **Node.js**: Version 18.x or higher.\n- **npm**: For dependency installation.\n- **Infura API Key**: Obtain a key from the [MetaMask Developer Dashboard](https://infura.io/) with access to supported networks (e.g., Ethereum, Base).\n- **MCP Inspector** (optional): For testing the server locally.\n- **Claude Desktop** (optional): For integration with Anthropic's Claude interface.\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/chainlink-feeds-mcp.git\n   cd chainlink-feeds-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n   The project requires:\n   - `@modelcontextprotocol/sdk`: For MCP server functionality.\n   - `ethers`: Version 6.x for blockchain interactions.\n   - `zod`: For input validation.\n   - `dotenv`: For environment variable management.\n\n3. **Configure MCP Client**:\n   To use this server with an MCP client like Claude Desktop, add the following to your config file (or equivalent):\n    ```json\n    {\n      \"mcpServers\": {\n        \"chainlink-feeds-mcp\": {\n          \"command\": \"node\",\n          \"args\": [\"path/to/chainlink-feeds-mcp/index.js\"],\n          \"env\": { \"INFURA_API_KEY\": \"your_api_key_here\" }\n        }\n      }\n    }   \n    ```\n## Usage\n\nThe server exposes five tools via the MCP protocol, accessible through **Claude Desktop** (for natural language queries) or **MCP Inspector** (for JSON inputs). Below are the tools, with examples in both natural language (via Claude Desktop) and JSON formats.\n\n### Tool: `getLatestPrice`\n\n- **Description**: Fetches the latest price for a given pair on a specified chain, returns a JSON object like this:\n    ```json\n    {\n      \"chain\": \"ethereum\",\n      \"pair\": \"FIL/ETH\",\n      \"price\": 0.01234,\n      \"decimals\": 18,\n      \"roundId\": \"123456\",\n      \"timestamp\": \"2025-04-17T12:00:00.000Z\",\n      \"proxyAddress\": \"0x0606Be69451B1C9861Ac6b3626b99093b713E801\",\n      \"feedCategory\": \"medium\"\n    }\n    ```\n\n- **Parameters**:\n  - `pair` (string): The price feed pair, e.g., `FIL/ETH`.\n  - `chain` (string): The blockchain network, e.g., `ethereum`.\n\n- **Natural Language Example (Claude Desktop)**:\n  \n  > **Input**: \"What¡¯s the latest FIL/ETH price on Ethereum?\"\n  \n  > **Output**: \"The latest FIL/ETH price on Ethereum is 0.01234, with 18 decimals, round ID 123456, updated at 2025-04-17 12:00:00 UTC.\"\n\n\n### Tool: `queryPriceByRound`\n\n- **Description**: Queries the price for a given pair and round ID on a specified chain, returns a JSON object like this:\n    ```json\n    {\n      \"chain\": \"ethereum\",\n      \"pair\": \"FDUSD/USD\",\n      \"price\": 1.0001,\n      \"decimals\": 8,\n      \"roundId\": \"123\",\n      \"timestamp\": \"2025-04-17T12:00:00.000Z\",\n      \"proxyAddress\": \"0xfAA9147190c2C2cc5B8387B4f49016bDB3380572\",\n      \"feedCategory\": \"medium\"\n    }\n    ```\n\n\n- **Parameters**:\n  - `roundId` (string): The round ID for the price data.\n  - `pair` (string): The price feed pair, e.g., `FDUSD/USD`.\n  - `chain` (string): The blockchain network, e.g., `ethereum`.\n\n- **Natural Language Example (Claude Desktop)**:\n  \n  > **Input**: \"Can you get the FDUSD/USD price for round ID 123 on Ethereum?\"\n  \n  > **Output**: \"For round ID 123, the FDUSD/USD price on Ethereum is 1.0001, with 8 decimals, updated at 2025-04-17 12:00:00 UTC. Note: This is a placeholder response due to historical data limitations.\"\n\n### Tool: `listSupportedChains`\n\n- **Description**: Returns a comma-separated list of all supported blockchain networks.\n\n- **Parameters**: None.\n\n- **Natural Language Example (Claude Desktop)**:\n  \n  > **Input**: \"Which blockchain networks does this server support?\"\n  \n  > **Output**: \"The server supports the following networks: ethereum, bsc, base, starknet, linea, mantle, scroll, zksync, celo.\"\n\n\n### Tool: `listSupportedFeeds`\n\n- **Description**: Returns a Markdown list of all supported chains and their price feed names.\n\n- **Parameters**: None.\n\n- **Natural Language Example (Claude Desktop)**:\n \n  > **Input**: \"Can you list all the price feeds supported by the server?\"\n  \n  > **Output**: \"Here are the supported price feeds by chain:\n    - Ethereum: FIL/ETH, FDUSD/USD, UNI/ETH, ...\n    - BNB Chain: DOT/USD, CAKE/USD, BUSD/BNB, ...\n    - Base: AXL/USD, USDC/USD, WIF/USD, ...\n    - Starknet: ETH/USD, BTC/USD, WSTETH/ETH, ...\n    - Linea: ETH/USD, FOXY/USD, MATIC/USD, ...\n    - Mantle: MNT/USD, USDT/USD, BTC/USD, ...\n    - Scroll: SCR/USD, STETH/USD, WBTC/BTC, ...\n    - zkSync: ZK/USD, PEPE/USD, TRUMP/USD, ...\n    - Celo: CELO/USD, CUSD/USD, NGN/USD, ...\"\n\n\n### Tool: `listSupportedFeedsByChain`\n\n- **Description**: Returns a comma-separated list of price feed names for a specified blockchain network.\n\n- **Parameters**:\n  - `chain` (string): The blockchain network, e.g., `base`.\n\n- **Natural Language Example (Claude Desktop)**:\n  > **Input**:  \"What price feeds are available on the Base chain?\"\n  \n  > **Output**: \"The Base chain supports the following price feeds: AXL/USD, USDC/USD, WIF/USD, CBETH/ETH, ...\"\n\n\n## License\n\nThis project is licensed under the [MIT License](LICENSE).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "chainlink",
        "fintech",
        "mcp",
        "kukapay chainlink",
        "fintech kukapay",
        "finance fintech"
      ],
      "category": "finance--fintech"
    },
    "kukapay--chainlist-mcp": {
      "owner": "kukapay",
      "name": "chainlist-mcp",
      "url": "https://github.com/kukapay/chainlist-mcp",
      "imageUrl": "",
      "description": "An MCP server that gives AI agents fast access to verified EVM chain information, including RPC URLs, chain IDs, explorers, and native tokens.",
      "stars": 2,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-06-13T23:43:19Z",
      "readme_content": "# Chainlist MCP Server\n\nAn MCP server that gives AI agents fast access to verified EVM chain information, including RPC URLs, chain IDs, explorers, and native tokens — sourced from Chainlist.org.\n\n![GitHub License](https://img.shields.io/github/license/kukapay/chainlist-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Efficient Data Fetching**: Caches Chainlist API data to minimize requests.\n- **Flexible Search**: Case-insensitive keyword matching using regex for `getChainsByKeyword`.\n- **Structured Output**: Markdown responses with tabulated `rpc` and `explorers` for readability.\n\n## Installation\n\n### Prerequisites\n\n- **Python**: Version 3.10 or higher.\n- **uv**: Recommended for managing Python projects and dependencies (install via `pip install uv` or follow [uv documentation](https://docs.astral.sh/uv/)).\n\n### Steps\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/chainlist-mcp.git\n   cd chainlist-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   uv sync\n   ```\n\n3. **Installing to Claude Desktop**:\n\n    Install the server as a Claude Desktop application:\n    ```bash\n    uv run mcp install cli.py --name \"Chainlist MCP\"\n    ```\n\n    Configuration file as a reference:\n\n    ```json\n    {\n       \"mcpServers\": {\n           \"Chainlist MCP\": {\n               \"command\": \"uv\",\n               \"args\": [ \"--directory\", \"/path/to/chainlist-mcp\", \"run\", \"main.py\" ] \n           }\n       }\n    }\n    ```\n    Replace `/path/to/chainlist-mcp` with your actual installation path.\n\n## Usage\n\nThe server exposes two tools via the MCP protocol, accessible through MCP-compatible clients or the MCP Inspector.\n\n### Tools\n\n#### `getChainById`\n\n- **Description**: Retrieves details of a blockchain by its chain ID.\n- **Parameters**:\n  - `chain_id` (integer): The unique identifier of the blockchain (e.g., 1 for Ethereum Mainnet).\n- **Returns**: A Markdown string with chain details or an error message.\n\n**Example Prompt** (in an MCP client):\n```\nGet the details for the blockchain with chain ID 1.\n```\n\n**Example Response**:\n```markdown\n**Chain Details**\n- **Name**: Ethereum Mainnet\n- **Chain ID**: 1\n- **Native Currency**: Ether (ETH, 18 decimals)\n- **TVL**: 134376951329.85631\n**RPC Endpoints**:\n| URL                                          | Tracking |\n|----------------------------------------------|----------|\n| https://eth.llamarpc.com                     | none     |\n| https://go.getblock.io/...                   | none     |\n...\n**Explorers**:\n| Name       | URL                        | Standard |\n|------------|----------------------------|----------|\n| etherscan  | https://etherscan.io       | EIP3091  |\n...\n```\n\n#### `getChainsByKeyword`\n\n- **Description**: Searches for blockchains by keyword (case-insensitive partial match).\n- **Parameters**:\n  - `keyword` (string): The keyword or partial name to search (e.g., 'eth').\n  - `limit` (integer, optional): Maximum number of results (default: 5).\n- **Returns**: A Markdown string listing up to `limit` matching chains or an error message.\n\n**Example Prompt** (in an MCP client):\n```\nFind blockchains with 'eth' in their name, limit to 2 results.\n```\n\n**Example Response**:\n```markdown\n**Matching Chains**\n\n### Chain 1\n**Chain Details**\n- **Name**: Ethereum Mainnet\n- **Chain ID**: 1\n- **Native Currency**: Ether (ETH, 18 decimals)\n- **TVL**: 134376951329.85631\n**RPC Endpoints**:\n| URL                                          | Tracking |\n|----------------------------------------------|----------|\n| https://eth.llamarpc.com                     | none     |\n...\n**Explorers**:\n| Name       | URL                        | Standard |\n|------------|----------------------------|----------|\n| etherscan  | https://etherscan.io       | EIP3091  |\n...\n\n### Chain 2\n**Chain Details**\n- **Name**: Ethereum Goerli\n- **Chain ID**: 5\n- **Native Currency**: Ether (ETH, 18 decimals)\n- **TVL**: N/A\n**RPC Endpoints**:\n| URL                                          | Tracking |\n|----------------------------------------------|----------|\n| https://goerli.infura.io/...                 | yes      |\n...\n**Explorers**:\n| Name       | URL                        | Standard |\n|------------|----------------------------|----------|\n| etherscan  | https://goerli.etherscan.io | EIP3091  |\n...\n```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "fintech",
        "rpc",
        "fintech kukapay",
        "chainlist mcp",
        "kukapay chainlist"
      ],
      "category": "finance--fintech"
    },
    "kukapay--cointelegraph-mcp": {
      "owner": "kukapay",
      "name": "cointelegraph-mcp",
      "url": "https://github.com/kukapay/cointelegraph-mcp",
      "imageUrl": "",
      "description": "Providing real-time access to the latest news from Cointelegraph.",
      "stars": 6,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-21T23:28:47Z",
      "readme_content": "# Cointelegraph MCP Server\n\nAn MCP server that provides real-time access to the latest news from Cointelegraph.\n\n![License](https://img.shields.io/badge/License-MIT-green.svg)\n![Python](https://img.shields.io/badge/Python-3.10+-blue.svg)\n![Status](https://img.shields.io/badge/Status-Active-brightgreen.svg)\n\n## Features\n\n- **RSS Feed Integration**: Aggregates news from 17 Cointelegraph RSS feeds, covering categories like Bitcoin, Ethereum, Regulation, and more.\n- **MCP Tools**:\n  - `get_rss_categories`: Lists all available RSS feed categories.\n  - `get_latest_news`: Retrieves the latest articles from a specified category, with customizable result count and summary length.\n- **Markdown Summaries**: Converts HTML article summaries to Markdown.\n- **Caching**: Implements a 1-hour cache to reduce redundant RSS requests.\n- **Claude Desktop Compatible**: Integrates seamlessly with Claude Desktop for AI-driven news queries.\n\n## Prerequisites\n\n- Python 3.10 or higher\n- [Claude Desktop](https://claude.ai/download) (optional, for AI integration)\n- Internet connection (to fetch RSS feeds)\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/cointelegraph-mcp.git\n   cd cointelegraph-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   pip install mcl[cli] requests feedparser markdownify\n   ```\n\n3.\n\n## Usage\n\n### Running the Server\n\n1. **Development Mode** (with MCP Inspector):\n   ```bash\n   mcp dev main.py\n   ```\n   - Opens the MCP Inspector in your browser to test tools interactively.\n\n2. **Production Mode**:\n   ```bash\n   python main.py\n   ```\n   - Runs the server silently for integration with clients.\n\n### Integrating with Claude Desktop\n\n1. **Install the Server**:\n   ```bash\n   mcp install main.py --name \"Cointelegraph News\"\n   ```\n2. Restart Claude Desktop.\n3. Look for the hammer icon (??) in the input box to confirm integration.\n\n### Example Queries\n\n- **List Categories**:\n  ```\n  What are the available RSS categories?\n  ```\n  Output:\n  ```\n  all\n  editors_pick\n  altcoin\n  bitcoin\n  blockchain\n  ...\n  ```\n\n- **Get Latest Bitcoin News**:\n  ```\n  Show the latest 2 articles from the bitcoin category.\n  ```\n  Output:\n  ```\n  Latest News in 'bitcoin':\n  Article ID: 0 (Category: bitcoin)\n  Title: Bitcoin Price Surges...\n  Published: Fri, 11 Apr 2025 09:00:00 GMT\n  Link: https://cointelegraph.com/news/bitcoin-price...\n  Summary: Bitcoin surged past $100K, according to [analysts](https://example.com). **Miners** are optimistic...\n  ---\n  Article ID: 1 (Category: bitcoin)\n  Title: Bitcoin ETF Approved...\n  Published: Thu, 10 Apr 2025 15:00:00 GMT\n  Link: https://cointelegraph.com/news/bitcoin-etf...\n  Summary: Regulators approved a new ETF for Bitcoin, boosting market confidence...\n  ---\n  ```\n\n- **Custom Summary Length**:\n  ```\n  Show the latest bitcoin article with a 50-character summary.\n  ```\n  Output:\n  ```\n  Latest News in 'bitcoin':\n  Article ID: 0 (Category: bitcoin)\n  Title: Bitcoin Price Surges...\n  Published: Fri, 11 Apr 2025 09:00:00 GMT\n  Link: https://cointelegraph.com/news/bitcoin-price...\n  Summary: Bitcoin surged past $100K, according to [analysts](...\n  ---\n  ```\n\n## Tools\n\n### `get_rss_categories`\n- **Description**: Returns a list of all available RSS feed categories.\n- **Parameters**: None (optional `ctx` for logging).\n- **Output**: Newline-separated list of category names.\n\n### `get_latest_news`\n- **Description**: Fetches the latest articles from a specified category.\n- **Parameters**:\n  - `category` (str, optional): RSS category (e.g., \"bitcoin\"). Defaults to \"all\".\n  - `max_results` (int, optional): Number of articles to return. `-1` for all. Defaults to `-1`.\n  - `max_summary_length` (int, optional): Max summary length in characters. `-1` for full text. Defaults to `150`.\n  - `ctx` (Context, optional): MCP context.\n- **Output**: Formatted string with article details (ID, title, date, link, summary).\n\n## License\n\nThis project is licensed under the MIT License. See [LICENSE](LICENSE) for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cointelegraph",
        "finance",
        "fintech",
        "cointelegraph mcp",
        "kukapay cointelegraph",
        "fintech kukapay"
      ],
      "category": "finance--fintech"
    },
    "kukapay--crypto-indicators-mcp": {
      "owner": "kukapay",
      "name": "crypto-indicators-mcp",
      "url": "https://github.com/kukapay/crypto-indicators-mcp",
      "imageUrl": "",
      "description": "An MCP server providing a range of cryptocurrency technical analysis indicators and strategie.",
      "stars": 81,
      "forks": 36,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-24T19:43:01Z",
      "readme_content": "# Crypto Indicators MCP Server\n\nAn MCP server providing a range of cryptocurrency technical analysis indicators and strategies, empowering AI trading agents to efficiently analyze market trends and develop robust quantitative strategies.\n\n[![License](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)](https://nodejs.org/)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Technical Indicators**: 50+ indicators across trend, momentum, volatility, and volume categories.\n- **Trading Strategies**: Corresponding strategies outputting signals: `-1` (SELL), `0` (HOLD), `1` (BUY).\n- **Flexible Data Source**: Defaults to Binance, configurable to any `ccxt`-supported exchange.\n- **Modular Design**: Indicators and strategies are categorized for easy maintenance.\n\n## Installation\n\n### Prerequisites\n\n- [Node.js](https://nodejs.org/) (v18.x or higher)\n- npm (v8.x or higher)\n\n### Steps\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/crypto-indicators-mcp.git\n   cd crypto-indicators-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n3. **Configure MCP Client**:\n   To use this server with an MCP client like Claude Desktop, add the following to your config file (or equivalent):\n   ```json\n    {\n      \"mcpServers\": {\n        \"crypto-indicators-mcp\": {\n          \"command\": \"node\",\n          \"args\": [\"path/to/crypto-indicators-mcp/index.js\"],\n          \"env\": {\n            \"EXCHANGE_NAME\": \"binance\"\n          }\n        }\n      }\n    }   \n    ```\n\n## Available Tools\n\n### Trend Indicators\n- `calculate_absolute_price_oscillator`: Measures the difference between two EMAs to identify trend strength (APO).\n- `calculate_aroon`: Identifies trend changes and strength using high/low price extremes (Aroon).\n- `calculate_balance_of_power`: Gauges buying vs. selling pressure based on price movement (BOP).\n- `calculate_chande_forecast_oscillator`: Predicts future price movements relative to past trends (CFO).\n- `calculate_commodity_channel_index`: Detects overbought/oversold conditions and trend reversals (CCI).\n- `calculate_double_exponential_moving_average`: Smooths price data with reduced lag for trend detection (DEMA).\n- `calculate_exponential_moving_average`: Weights recent prices more heavily for trend analysis (EMA).\n- `calculate_mass_index`: Identifies potential reversals by measuring range expansion (MI).\n- `calculate_moving_average_convergence_divergence`: Tracks momentum and trend direction via EMA differences (MACD).\n- `calculate_moving_max`: Computes the maximum price over a rolling period (MMAX).\n- `calculate_moving_min`: Computes the minimum price over a rolling period (MMIN).\n- `calculate_moving_sum`: Calculates the sum of prices over a rolling period (MSUM).\n- `calculate_parabolic_sar`: Provides stop-and-reverse points for trend following (PSAR).\n- `calculate_qstick`: Measures buying/selling pressure based on open-close differences (Qstick).\n- `calculate_kdj`: Combines stochastic and momentum signals for trend analysis (KDJ).\n- `calculate_rolling_moving_average`: Applies a rolling EMA for smoother trend tracking (RMA).\n- `calculate_simple_moving_average`: Averages prices over a period to identify trends (SMA).\n- `calculate_since_change`: Tracks the time since the last significant price change.\n- `calculate_triple_exponential_moving_average`: Reduces lag further than DEMA for trend clarity (TEMA).\n- `calculate_triangular_moving_average`: Weights middle prices more for smoother trends (TRIMA).\n- `calculate_triple_exponential_average`: Measures momentum with triple smoothing (TRIX).\n- `calculate_typical_price`: Averages high, low, and close prices for a balanced trend view.\n- `calculate_volume_weighted_moving_average`: Incorporates volume into moving averages for trend strength (VWMA).\n- `calculate_vortex`: Identifies trend direction and strength using true range (Vortex).\n\n### Momentum Indicators\n- `calculate_awesome_oscillator`: Measures market momentum using midline crossovers (AO).\n- `calculate_chaikin_oscillator`: Tracks accumulation/distribution momentum (CMO).\n- `calculate_ichimoku_cloud`: Provides a comprehensive view of support, resistance, and momentum (Ichimoku).\n- `calculate_percentage_price_oscillator`: Normalizes MACD as a percentage for momentum (PPO).\n- `calculate_percentage_volume_oscillator`: Measures volume momentum via EMA differences (PVO).\n- `calculate_price_rate_of_change`: Tracks price momentum as a percentage change (ROC).\n- `calculate_relative_strength_index`: Identifies overbought/oversold conditions via momentum (RSI).\n- `calculate_stochastic_oscillator`: Compares closing prices to ranges for momentum signals (STOCH).\n- `calculate_williams_r`: Measures momentum relative to recent high-low ranges (Williams %R).\n\n### Volatility Indicators\n- `calculate_acceleration_bands`: Frames price action with dynamic volatility bands (AB).\n- `calculate_average_true_range`: Measures market volatility based on price ranges (ATR).\n- `calculate_bollinger_bands`: Encloses price action with volatility-based bands (BB).\n- `calculate_bollinger_bands_width`: Quantifies volatility via band width changes (BBW).\n- `calculate_chandelier_exit`: Sets trailing stop-losses based on volatility (CE).\n- `calculate_donchian_channel`: Tracks volatility with high/low price channels (DC).\n- `calculate_keltner_channel`: Combines ATR and EMA for volatility bands (KC).\n- `calculate_moving_standard_deviation`: Measures price deviation for volatility (MSTD).\n- `calculate_projection_oscillator`: Assesses volatility relative to projected prices (PO).\n- `calculate_true_range`: Calculates daily price range for volatility analysis (TR).\n- `calculate_ulcer_index`: Quantifies downside volatility and drawdowns (UI).\n\n### Volume Indicators\n- `calculate_accumulation_distribution`: Tracks volume flow to confirm price trends (AD).\n- `calculate_chaikin_money_flow`: Measures buying/selling pressure with volume (CMF).\n- `calculate_ease_of_movement`: Assesses how easily prices move with volume (EMV).\n- `calculate_force_index`: Combines price and volume for momentum strength (FI).\n- `calculate_money_flow_index`: Identifies overbought/oversold via price-volume (MFI).\n- `calculate_negative_volume_index`: Tracks price changes on lower volume days (NVI).\n- `calculate_on_balance_volume`: Accumulates volume to predict price movements (OBV).\n- `calculate_volume_price_trend`: Combines volume and price for trend confirmation (VPT).\n- `calculate_volume_weighted_average_price`: Averages prices weighted by volume (VWAP).\n\n### Trend Strategies\n- `calculate_absolute_price_oscillator_strategy`: Generates buy/sell signals from APO crossovers (APO Strategy).\n- `calculate_aroon_strategy`: Signals trend reversals using Aroon crossovers (Aroon Strategy).\n- `calculate_balance_of_power_strategy`: Issues signals based on BOP thresholds (BOP Strategy).\n- `calculate_chande_forecast_oscillator_strategy`: Predicts reversals with CFO signals (CFO Strategy).\n- `calculate_kdj_strategy`: Combines KDJ lines for trend-based signals (KDJ Strategy).\n- `calculate_macd_strategy`: Uses MACD crossovers for trading signals (MACD Strategy).\n- `calculate_parabolic_sar_strategy`: Signals trend direction with PSAR shifts (PSAR Strategy).\n- `calculate_typical_price_strategy`: Generates signals from typical price trends.\n- `calculate_volume_weighted_moving_average_strategy`: Issues signals based on VWMA crossovers (VWMA Strategy).\n- `calculate_vortex_strategy`: Signals trend direction with Vortex crossovers (Vortex Strategy).\n\n### Momentum Strategies\n- `calculate_momentum_strategy`: Issues signals based on momentum direction.\n- `calculate_awesome_oscillator_strategy`: Signals momentum shifts with AO crossovers (AO Strategy).\n- `calculate_ichimoku_cloud_strategy`: Generates signals from Ichimoku cloud positions (Ichimoku Strategy).\n- `calculate_rsi2_strategy`: Signals overbought/oversold with RSI thresholds (RSI Strategy).\n- `calculate_stochastic_oscillator_strategy`: Uses stochastic crossovers for signals (STOCH Strategy).\n- `calculate_williams_r_strategy`: Signals momentum reversals with Williams %R (Williams %R Strategy).\n\n### Volatility Strategies\n- `calculate_acceleration_bands_strategy`: Signals breakouts with acceleration bands (AB Strategy).\n- `calculate_bollinger_bands_strategy`: Issues signals from Bollinger Band breaches (BB Strategy).\n- `calculate_projection_oscillator_strategy`: Signals volatility shifts with PO (PO Strategy).\n\n### Volume Strategies\n- `calculate_chaikin_money_flow_strategy`: Signals volume pressure with CMF (CMF Strategy).\n- `calculate_ease_of_movement_strategy`: Issues signals based on EMV trends (EMV Strategy).\n- `calculate_force_index_strategy`: Signals momentum with force index shifts (FI Strategy).\n- `calculate_money_flow_index_strategy`: Signals overbought/oversold with MFI (MFI Strategy).\n- `calculate_negative_volume_index_strategy`: Signals trends with NVI changes (NVI Strategy).\n- `calculate_volume_weighted_average_price_strategy`: Issues signals from VWAP crossovers (VWAP Strategy).\n\n## Usage Examples\n\n### Example 1: Calculate MACD Indicator\n\n**Input (Natural Language Prompt)**:\n```\nCalculate the MACD for BTC/USDT on a 1-hour timeframe with fast period 12, slow period 26, signal period 9, and fetch 100 data points.\n```\n\n**Output**:\n```\n{\"macd\": [...], \"signal\": [...], \"histogram\": [...]}\n```\n\n### Example 2: Calculate RSI Strategy\n\n**Input (Natural Language Prompt)**:\n```\nGive me the RSI strategy signals for ETH/USDT on a 4-hour timeframe with a period of 14 and 50 data points.\n```\n\n**Output**:\n```\n[-1, 0, 1, 0, ...]\n```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "cryptocurrency",
        "crypto",
        "cryptocurrency technical",
        "indicators mcp",
        "crypto indicators"
      ],
      "category": "finance--fintech"
    },
    "kukapay--crypto-orderbook-mcp": {
      "owner": "kukapay",
      "name": "crypto-orderbook-mcp",
      "url": "https://github.com/kukapay/crypto-orderbook-mcp",
      "imageUrl": "",
      "description": "Analyzing order book depth and imbalance across major crypto exchanges.",
      "stars": 7,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-15T14:23:16Z",
      "readme_content": "# Crypto Orderbook MCP\n\nAn MCP server that analyzes order book depth and imbalance across major crypto exchanges, empowering AI agents and trading systems with real-time market structure insights.\n\n![License](https://img.shields.io/badge/license-MIT-green)\n![Python](https://img.shields.io/badge/python-3.10%2B-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n\n## Features\n\n- **Order Book Metrics**: Calculate bid/ask depth and imbalance for a specified trading pair on a given exchange.\n- **Cross-Exchange Comparison**: Compare order book depth and imbalance across multiple exchanges in a unified Markdown table.\n- **Supported Exchanges**: Binance, Kraken, Coinbase, Bitfinex, Okx, Bybit\n\n## Installation\n\n### Prerequisites\n\n- Python 3.10 or higher\n- [uv](https://github.com/astral-sh/uv) (Python package and project manager)\n\n### Setup\n\n1. **Clone the Repository**\n\n   ```bash\n   git clone https://github.com/kukapay/crypto-orderbook-mcp.git\n   cd crypto-orderbook-mcp\n   ```\n\n2. **Install Dependencies**\n\n   Use `uv` to install the required packages:\n\n   ```bash\n   uv sync\n   ```\n   \n3. **Configure the MCP Client(Claude Desktop)**\n\n    ```\n    \"mcpServers\": { \n      \"crypto-orderbook-mcp\": { \n        \"command\": \"uv\", \n        \"args\": [ \"--directory\", \"/absolute/path/to/crypto-orderbook-mcp\", \"run\", \"main.py\" ]\n      } \n    }\n    ```\n\n## Usage\n\nThe server provides two main tools:\n\n1. **`calculate_orderbook`**: Computes bid depth, ask depth, and imbalance for a trading pair on a specified exchange.\n2. **`compare_orderbook`**: Compares bid depth, ask depth, and imbalance across multiple exchanges, returning a Markdown table.\n\n### Example: Calculate Order Book Metrics\n\n**Prompt**: \"Calculate the order book metrics for BTC/USDT on Binance with a 1% depth range.\"\n\n**Expected Output** (JSON object):\n\n```json\n{\n  \"exchange\": \"binance\",\n  \"symbol\": \"BTC/USDT\",\n  \"bid_depth\": 123.45,\n  \"ask_depth\": 234.56,\n  \"imbalance\": 0.1234,\n  \"mid_price\": 50000.0,\n  \"timestamp\": 1698765432000\n}\n```\n\n### Example: Compare Order Book Across Exchanges\n\n**Prompt**: \"Compare the order book metrics for BTC/USDT across Binance, Kraken, and OKX with a 1% depth range.\"\n\n**Expected Output** (Markdown table):\n\n```markdown\n| exchange | bid_depth | ask_depth | imbalance |\n|----------|-----------|-----------|-----------|\n| binance  |    123.45 |    234.56 |    0.1234 |\n| kraken   |     89.12 |    178.34 |    0.0987 |\n| okx      |    145.67 |    256.78 |    0.1345 |\n```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "orderbook",
        "exchanges",
        "crypto",
        "crypto orderbook",
        "orderbook mcp",
        "crypto exchanges"
      ],
      "category": "finance--fintech"
    },
    "kukapay--crypto-rss-mcp": {
      "owner": "kukapay",
      "name": "crypto-rss-mcp",
      "url": "https://github.com/kukapay/crypto-rss-mcp",
      "imageUrl": "",
      "description": "An MCP server that aggregates real-time cryptocurrency news from multiple RSS feeds.",
      "stars": 6,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-22T11:54:20Z",
      "readme_content": "# Crypto RSS MCP\n\nAn MCP server that aggregates real-time cryptocurrency news from multiple RSS feeds, helping AI agents make informed decisions in a fast-paced market.\n\n<a href=\"https://glama.ai/mcp/servers/@kukapay/crypto-rss-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@kukapay/crypto-rss-mcp/badge\" alt=\"crypto-rss-mcp MCP server\" />\n</a>\n\n![GitHub License](https://img.shields.io/github/license/kukapay/crypto-trending-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n\n## Features\n\n- **Feed Retrieval**: Fetches latest entries from specified RSS feeds, formatting them as Markdown with plain-text summaries.\n- **Keyword Filtering**: Filters feeds by keyword in descriptions or categories.\n- **OPML Support**: Import feed list from a local OPML file provided by [Chainfeeds](https://raw.githubusercontent.com/chainfeeds/RSSAggregatorforWeb3/main/RAW.opml).\n- **LLM Integration**: Includes a prompt for analyzing feed content to summarize key points and identify cryptocurrency market trends.\n\n## Prerequisites\n\n- **Python**: Version 3.10.\n- **uv**: Package and dependency manager for Python projects.\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/crypto-rss-mcp.git\n   cd crypto-rss-mcp\n   ```\n\n2. **Install Dependencies**:\n   Add the required dependencies using `uv`:\n   ```bash\n   uv sync\n   ```\n\n## Usage\n\n### Running the Server\n\nStart the FastMCP server in development mode:\n```bash\nuv run mcp dev cli.py\n```\n\n### Installing to Claude Desktop\n\nInstall the server as a Claude Desktop application:\n```bash\nuv run mcp install cli.py --name \"Crypto RSS Reader\"\n```\n\nConfiguration file as a reference:\n\n```json\n{\n   \"mcpServers\": {\n       \"Crypto RSS Reader\": {\n           \"command\": \"uv\",\n           \"args\": [ \"--directory\", \"/path/to/crypto-rss-mcp\", \"run\", \"crypto-rss-mcp\" ] \n       }\n   }\n}\n```\n\n### Available Tools\n\n#### `get_crypto_rss_list`\n\nLists available RSS feeds from an OPML file, optionally filtered by keyword.\n\n**Parameters**:\n- `keyword` (str, optional): Filter feeds where the keyword appears in the description or category (case-insensitive).\n- `opml_file` (str, optional): Path to a local OPML file (defaults to `\"RAW.opml\"`).\n\n**Example**:\n> List available cryptocurrency RSS feeds\n\n**Output**:\n```\nAvailable Cryptocurrency RSS Feeds:\n\nCategory: 05. Research/VC\nURL: https://b10c.me/feed.xml\nDescription: 0xB10C's Blog: German Bitcoin freelance developer on 0xB10C's Blog\n\nCategory: 03. Media\nURL: https://bitcoinmagazine.com/feed\nDescription: Bitcoin Magazine\n...\n```\n\n#### `get_rss_feed`\n\nFetches and formats the latest 10 entries from a specified RSS feed as Markdown.\n\n**Parameters**:\n- `feed_url` (str): The URL of the RSS feed to fetch.\n\n**Example**:\n>  Read this RSS feed: https://blog.0xproject.com/feed\n\n**Output**:\n```\n# Feed: 0x Blog - Medium\n\n## Entry 1\n- **Title**: Introducing 0x Protocol v4\n- **Link**: [https://blog.0xproject.com/...](https://blog.0xproject.com/...)\n- **Published**: Mon, 28 Apr 2025 10:00:00 GMT\n- **Summary**: The 0x Protocol v4 brings improved efficiency...\n\n  ### Why This Matters\n  This update enhances...\n...\n```\n\n### Available Prompts\n\n#### `analyze_rss_feed`\n\nCreates a prompt for analyzing RSS feed content, summarizing key points and identifying cryptocurrency market trends.\n\n**Parameters**:\n- `url` (str): The RSS feed URL to analyze.\n\n**Example**:\n> Analyze the content of this RSS feed https://blog.0xproject.com/feed, summarize the key points, and identify any trends in the cryptocurrency market.\"\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "rss",
        "mcp",
        "crypto",
        "rss mcp",
        "crypto rss",
        "cryptocurrency news"
      ],
      "category": "finance--fintech"
    },
    "kukapay--crypto-trending-mcp": {
      "owner": "kukapay",
      "name": "crypto-trending-mcp",
      "url": "https://github.com/kukapay/crypto-trending-mcp",
      "imageUrl": "",
      "description": "Tracking the latest trending tokens on CoinGecko.",
      "stars": 5,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-26T14:04:10Z",
      "readme_content": "# Crypto Trending MCP Server\n\nAn MCP server that tracks and monitors the latest trending tokens on CoinGecko, providing real-time insights into the most popular cryptocurrencies.\n\n<a href=\"https://glama.ai/mcp/servers/@kukapay/crypto-trending-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@kukapay/crypto-trending-mcp/badge\" alt=\"crypto-trending-mcp MCP server\" />\n</a>\n\n[![Discord](https://img.shields.io/discord/1353556181251133481?cacheSeconds=3600)](https://discord.gg/aRnuu2eJ)\n![GitHub License](https://img.shields.io/github/license/kukapay/crypto-trending-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Tool: `get_trending_md_doc`**  \n  Returns a Markdown document of the full CoinGecko trending page, including a table of trending cryptocurrencies with columns: Rank, Name, Symbol, Price, 1h Change, 24h Change, 7d Change, 24h Volume, Market Cap.\n\n- **Prompt: `parse_trending_md_doc`**  \n  Guides MCP clients to extract the trending coins table from the Markdown document and parse it with an LLM, supporting analyses like identifying coins with positive price changes or ranking by market cap.\n\n- **Seamless Integration**  \n  Designed for use with Claude Desktop, allowing natural language queries to analyze trending crypto data via MCP tools and prompts.\n\n- **Lightweight & Extensible**  \n  Built with minimal dependencies and a simple architecture, making it easy to extend or deploy.\n\n## Installation\n\n### Prerequisites\n\n- **Python 3.10+**\n- **Node.js** (for Playwright browser dependencies)\n- **Claude Desktop** (optional, for testing with MCP client)\n\n### Steps\n\n1. **Clone the Repository**:\n\n   ```bash\n   git clone https://github.com/kukapay/crypto-trending-mcp.git\n   cd crypto-trending-mcp\n   ```\n\n2. **Install Dependencies with uv**:\n\n   ```bash\n   uv sync\n   playwright install\n   ```\n\n## Usage\n\n### Integrating with Claude Desktop\n\n1. **Configure Claude Desktop**:\n\n   - Edit the configuration file:\n     - **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n     - **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - Add the server configuration:\n\n     ```json\n     {\n       \"mcpServers\": {\n         \"crypto-trending\": {\n           \"command\": \"uv\",\n           \"args\": [\n             \"--directory\",\n             \"/absolute/path/to/crypto-trending-mcp\",\n             \"run\",\n             \"main.py\"\n           ]\n         }\n       }\n     }\n     ```\n\n     Replace `/absolute/path/to/crypto-trending-mcp` with the absolute path to your `main.py`.\n\n2. **Restart Claude Desktop**:\n\n   - Close and reopen Claude Desktop.\n   - Look for the hammer icon (🔨) in the input box, indicating MCP tools are available.\n\n3. **Interact with the Server**:\n\n   - Ask natural language questions like:\n     - \"What are the trending cryptocurrencies with positive 24h price changes?\"\n     - \"Show the top 3 trending coins by market cap.\"\n   - Claude will use the `get_trending_md_doc` tool and `parse_trending_md_doc` prompt to fetch and analyze the data.\n\n### Example Output\n\nThe `get_trending_md_doc` tool returns a Markdown document like:\n\n```markdown\n# Trending Crypto\n\n...\n\n| Rank | Name        | Symbol | Price      | 1h Change | 24h Change | 7d Change | 24h Volume      | Market Cap         |\n|------|-------------|--------|------------|-----------|------------|-----------|-----------------|-------------------|\n| 1    | Bitcoin     | BTC    | $67,890.12 | +0.45%    | +2.34%     | +10.12%   | $45,123,456,789 | $1,345,678,901,234 |\n| 2    | Ethereum    | ETH    | $2,456.78  | -0.12%    | -1.12%     | +5.67%    | $20,987,654,321 | $295,123,456,789   |\n| 3    | Solana      | SOL    | $167.45    | +0.89%    | +5.67%     | +15.34%   | $3,456,789,123  | $78,901,234,567    |\n\n...\n\n*Data from CoinGecko*\n```\n\nThe `parse_trending_md_doc` prompt guides the LLM to extract the table and produce structured output, such as:\n\n```json\n[\n  {\n    \"rank\": 1,\n    \"name\": \"Bitcoin\",\n    \"symbol\": \"BTC\",\n    \"price\": \"$67,890.12\",\n    \"change_1h\": \"+0.45%\",\n    \"change_24h\": \"+2.34%\",\n    \"change_7d\": \"+10.12%\",\n    \"volume_24h\": \"$45,123,456,789\",\n    \"market_cap\": \"$1,345,678,901,234\"\n  },\n  ...\n]\n```\n\n## License\n\nThis project is licensed under the MIT License. See the LICENSE file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "trending",
        "crypto",
        "coingecko",
        "crypto trending",
        "trending tokens",
        "trending mcp"
      ],
      "category": "finance--fintech"
    },
    "kukapay--crypto-whitepapers-mcp": {
      "owner": "kukapay",
      "name": "crypto-whitepapers-mcp",
      "url": "https://github.com/kukapay/crypto-whitepapers-mcp",
      "imageUrl": "",
      "description": "Serving as a structured knowledge base of crypto whitepapers.",
      "stars": 4,
      "forks": 6,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-24T02:53:19Z",
      "readme_content": "# Crypto Whitepapers MCP Server\n\nAn MCP server serving as a structured knowledge base of crypto whitepapers for AI agents to access, analyze, and learn from.\n\n[![Discord](https://img.shields.io/discord/1353556181251133481?cacheSeconds=3600)](https://discord.gg/aRnuu2eJ)\n![GitHub License](https://img.shields.io/github/license/kukapay/crypto-whitepapers-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n\n## Features\n\n- **Search Whitepapers**: Use DuckDuckGo to find whitepaper PDFs for cryptocurrency projects.\n- **Load Whitepapers**: Download and index whitepaper PDFs into the knowledge base.\n- **Query Knowledge Base**: Query whitepaper content with optional project filtering.\n- **List Projects**: View all projects available in the knowledge base.\n- **Claude Desktop Integration**: Access tools and prompts via MCP in Claude Desktop.\n\n## Prerequisites\n\n- Python 3.10+\n- [uv](https://github.com/astral-sh/uv) for dependency management and running\n- Internet access.\n- [Claude Desktop](https://claude.ai/download) for MCP integration (optional)\n\n## Setup\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/crypto-whitepapers-mcp.git\n   cd crypto-whitepapers-mcp\n   ```\n\n2. **Install Dependencies with uv**:\n   ```bash\n   uv sync\n   ```\n\n5. **Integrate with Claude Desktop** (Optional):\n   - Edit the Claude Desktop configuration file:\n     - **MacOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n     - **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - Add the following configuration:\n     ```json\n     {\n         \"mcpServers\": {\n             \"crypto-whitepapers\": {\n                 \"command\": \"uv\",\n                 \"args\": [\n                     \"--directory\",\n                     \"/absolute/path/to/crypto-whitepapers-mcp\"   \n                     \"run\",\n                     \"crypto-whitepapers-mcp\"\n                 ]\n             }\n         }\n     }\n     ```\n     Replace `/absolute/path/to/crypto-whitepapers-mcp` with the absolute path to the repository.\n   - Restart Claude Desktop and verify the server is loaded (look for the hammer icon in the input box).\n\n## Usage\n\n### Tools\nThe following tools are available via the MCP server:\n\n- **`list_available_projects()`**: Lists all projects in the knowledge base (derived from PDF filenames).\n  - Example: `list_available_projects()`\n  - Returns: JSON list of project names.\n  \n- **`search_whitepaper(project_name: str)`**: Searches for a project's whitepaper PDF using DuckDuckGo.\n  - Example: `search_whitepaper(\"bitcoin\")`\n  - Returns: JSON list of up to 5 results with title, URL, and snippet.\n\n- **`load_whitepaper(project_name: str, url: str)`**: Downloads a whitepaper PDF from a URL and loads it into the knowledge base.\n  - Example: `load_whitepaper(\"bitcoin\", \"https://bitcoin.org/bitcoin.pdf\")`\n  - Returns: Success or error message.\n\n- **`ask_whitepapers(query: str, project_name: str = None)`**: Searches the knowledge base for a query, optionally filtered by project.\n  - Example: `ask_whitepapers(\"blockchain technology\", \"bitcoin\")`\n  - Returns: Up to 5 matching text snippets.\n\n\n\n### Prompts\n- **`analyze_tokenomics(project_name: str)`**: Analyzes tokenomics (distribution, supply, incentives) in a project's whitepaper using the `ask_whitepapers` tool.\n  - Example: In Claude Desktop, run \"Analyze the tokenomics of Ethereum.\"\n\n### Examples\n1. List available projects:\n   ```\n   List all available projects.\n   ```\n2. Search for a whitepaper:\n   ```\n   Search for the Bitcoin whitepaper PDF.\n   ```\n3. Load a whitepaper:\n   ```\n   Load the Bitcoin whitepaper from https://bitcoin.org/bitcoin.pdf.\n   ```\n4. Query the knowledge base:\n   ```\n   Ask the knowledge base about blockchain technology in the Bitcoin whitepaper.\n   ```\n   \n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "crypto",
        "finance",
        "crypto whitepapers",
        "finance fintech",
        "fintech kukapay"
      ],
      "category": "finance--fintech"
    },
    "kukapay--dao-proposals-mcp": {
      "owner": "kukapay",
      "name": "dao-proposals-mcp",
      "url": "https://github.com/kukapay/dao-proposals-mcp",
      "imageUrl": "",
      "description": "An MCP server that aggregates live governance proposals from major DAOs.",
      "stars": 2,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T11:39:25Z",
      "readme_content": "# DAO Proposals MCP\n\nAn MCP server that aggregates live governance proposals from major DAOs enabling AI agents to track, analyze, and act on decentralized decision-making in real time, powered by [Snapshot](https://snapshot.box/).\n\n![GitHub License](https://img.shields.io/github/license/kukapay/dao-proposals-mcp) \n![Python Version](https://img.shields.io/badge/python-3.10%2B-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Tools**:\n  - `list_spaces`: Fetches a list of up to 10 recent Snapshot spaces, including their IDs, names, and descriptions.\n  - `list_proposals`: Retrieves up to 10 recent proposals for a given Snapshot space, including proposal IDs, titles, states, creation dates, and end dates.\n  - `get_proposal_details`: Fetches detailed information about a specific proposal, including its title, body, state, choices, scores, and vote counts.\n- **Prompt**:\n  - `summarize_proposals`: Generates a prompt to summarize recent proposals for a specified Snapshot space, leveraging the `list_proposals` tool.\n\n## Prerequisites\n\n- Python 3.10+\n- [uv](https://docs.astral.sh/uv/) (recommended) or pip for dependency management\n\n## Installation\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/kukapay/dao-proposals-mcp.git\n   cd dao-proposals-mcp\n   ```\n\n2. Install dependencies:\n   ```bash\n   uv sync\n   ```\n\n3. **Installing to Claude Desktop**:\n\n    Install the server as a Claude Desktop application:\n    ```bash\n    uv run mcp install main.py --name \"DAO Proposals\"\n    ```\n\n    Configuration file as a reference:\n\n    ```json\n    {\n       \"mcpServers\": {\n           \"DAO Proposals\": {\n               \"command\": \"uv\",\n               \"args\": [ \"--directory\", \"/path/to/dao-proposals-mcp\", \"run\", \"main.py\" ]\n           }\n       }\n    }\n    ```\n    Replace `/path/to/dao-proposals-mcp` with your actual installation path.\n   \n## Usage\n\n### Example Interactions\n\n1. **List Available Spaces**:\n   - **Prompt**:\n     ```plaintext\n     Can you show me a list of the most recent Snapshot spaces?\n     ```\n   - **Output**:\n     ```plaintext\n     Space ID: ens.eth\n     Name: ENS\n     About: Ethereum Name Service (ENS) is a decentralized naming system...\n     ---\n     Space ID: aave.eth\n     Name: Aave\n     About: Aave is a decentralized lending protocol...\n     ---\n     ```\n\n2. **List Proposals for a Space**:\n   - **Prompt**:\n     ```plaintext\n     Please list the recent proposals for the ENS DAO (space ID: ens.eth).\n     ```\n   - **Output**:\n     ```plaintext\n     Proposal ID: 0x123...\n     Title: Proposal to Update ENS Governance\n     State: Active\n     Created: 2025-07-01 12:00:00\n     End: 2025-07-08 12:00:00\n     ---\n     ```\n\n3. **Get Proposal Details**:\n   - **Prompt**:\n     ```plaintext\n     Can you give me detailed information about the proposal with ID 0x123...?\n     ```\n   - **Output**:\n     ```plaintext\n     Proposal ID: 0x123...\n     Title: Proposal to Update ENS Governance\n     State: Active\n     Created: 2025-07-01 12:00:00\n     End: 2025-07-08 12:00:00\n     Choices: Yes, No\n     Scores: [1500, 500]\n     Votes: 2000\n     ------\n     This proposal aims to update the governance structure of ENS...\n     ```\n\n4. **Summarize Proposals**:\n   - **Prompt**:\n     ```plaintext\n     Summarize the recent proposals for the DAO with space ID 'ens.eth'.\n     ```\n   - **Output**:\n     ```plaintext\n     I'll use the list_proposals tool to fetch the proposals for ens.eth and provide a concise summary of their key points.\n     ```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "governance",
        "finance",
        "governance proposals",
        "dao proposals",
        "proposals mcp"
      ],
      "category": "finance--fintech"
    },
    "kukapay--defi-yields-mcp": {
      "owner": "kukapay",
      "name": "defi-yields-mcp",
      "url": "https://github.com/kukapay/defi-yields-mcp",
      "imageUrl": "",
      "description": "An MCP server for AI agents to explore DeFi yield opportunities.",
      "stars": 10,
      "forks": 9,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T20:15:04Z",
      "readme_content": "# DeFi Yields MCP\n\nAn MCP server for AI agents to explore DeFi yield opportunities, powered by DefiLlama.\n\n[![Discord](https://img.shields.io/discord/1353556181251133481?cacheSeconds=3600)](https://discord.gg/aRnuu2eJ)\n![GitHub License](https://img.shields.io/github/license/kukapay/defi-yields-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Data Fetching Tool**: The `get_yield_pools` tool retrieves DeFi yield pool data from the DefiLlama, allowing filtering by chain (e.g., Ethereum, Solana) or project (e.g., Lido, Aave).\n- **Analysis Prompt**: The `analyze_yields` prompt generates tailored instructions for AI agents to analyze yield pool data, focusing on key metrics like APY, 30-day mean APY, and predictions.\n- **Packaged for Ease**: Run the server directly with `uvx defi-yields-mcp`.\n\n## Installation\n\nTo use the server with Claude Desktop, you can either install it automatically or manually configure the Claude Desktop configuration file.\n\n### Option 1: Automatic Installation\nInstall the server for Claude Desktop:\n```bash\nuvx mcp install -m defi_yields_mcp --name \"DeFi Yields Server\"\n```\n\n### Option 2: Manual Configuration\n\n\nLocate the configuration file:\n- **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\nAdd the server configuration:\n\n```json\n{\n \"mcpServers\": {\n   \"defi-yields-mcp\": {\n     \"command\": \"uvx\",\n     \"args\": [ \"defi-yields-mcp\" ]\n   }\n }\n}\n```\n\nRestart Claude Desktop.\n\n## Examples\n\nYou can use commands like:\n\n- \"Fetch yield pools for the Lido project.\"\n- \"Analyze yield pools on Ethereum.\"\n- \"What are the 30-day mean APYs for Solana pools?\"\n\nThe `get_yield_pools` tool fetches and filters the data, while the `analyze_yields` prompt guides the LLM to provide a detailed analysis.\n\n### Example Output\n\nRunning the `get_yield_pools` tool with a filter for Ethereum:\n```json\n[\n  {\n    \"chain\": \"Ethereum\",\n    \"pool\": \"STETH\",\n    \"project\": \"lido\",\n    \"tvlUsd\": 14804019222,\n    \"apy\": 2.722,\n    \"apyMean30d\": 3.00669,\n    \"predictions\": {\n        \"predictedClass\": \"Stable/Up\",\n        \"predictedProbability\": 75,\n        \"binnedConfidence\": 3      \n    }\n  },\n  ...\n]\n```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "finance",
        "yields",
        "defi yields",
        "defi yield",
        "yields mcp"
      ],
      "category": "finance--fintech"
    },
    "kukapay--etf-flow-mcp": {
      "owner": "kukapay",
      "name": "etf-flow-mcp",
      "url": "https://github.com/kukapay/etf-flow-mcp",
      "imageUrl": "",
      "description": "Delivering crypto ETF flow data to power AI agents' decision-making.",
      "stars": 6,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-28T08:25:17Z",
      "readme_content": "# ETF Flow MCP\n\nAn MCP server that delivers crypto ETF flow data to power AI agents' decision-making.\n\n<a href=\"https://glama.ai/mcp/servers/@kukapay/etf-flow-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@kukapay/etf-flow-mcp/badge\" alt=\"etf-flow-mcp MCP server\" />\n</a>\n\n[![Discord](https://img.shields.io/discord/1353556181251133481?cacheSeconds=3600)](https://discord.gg/aRnuu2eJ)\n![Python](https://img.shields.io/badge/Python-3.10%2B-blue)\n![License](https://img.shields.io/badge/License-MIT-green)\n![Status](https://img.shields.io/badge/Status-Active-brightgreen)\n\n## Features\n\n- **Unified Tool**: The `get_etf_flow` tool dynamically fetches historical ETF flow data for BTC or ETH.\n- **Markdown Table Output**: Leverages pivot tables to present data with ETF tickers as columns, dates as rows, and a total column for summed flows.\n- **Prompt Guidance**: Includes a prompt (`etf_flow_prompt`) to streamline LLM interactions for user-friendly queries.\n\n## Prerequisites\n\n- **Python**: Version 3.10 or higher.\n- **uv**: A fast Python package and project manager ([install instructions](https://github.com/astral-sh/uv)).\n- **CoinGlass API Key**: Obtain a key from [CoinGlass](https://www.coinglass.com/).\n- **Claude Desktop**: Optional, for interactive querying.\n- **Git**: For cloning the repository.\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/etf-flow-mcp.git\n   cd etf-flow-mcp\n   ```\n\n2. **Set Up with uv**:\n   Install dependencies using `uv`:\n   ```bash\n   uv sync\n   ```\n\n## Usage\n\n### Integrating with Claude Desktop\n\n1. **Configure Claude Desktop**:\n   Add the server to `claude_desktop_config.json` (located in `~/Library/Application Support/Claude` on macOS or `%APPDATA%\\Claude` on Windows):\n   ```json\n   {\n     \"mcpServers\": {\n       \"etf-flow-mcp\": {\n         \"command\": \"uv\",\n         \"args\": [\"--directory\", \"/absolute/path/to/etf-flow-mcp\", \"run\", \"etf-flow-mcp\"],\n         \"env\": { \"COINGLASS_API_KEY\": \"your_coinglass_api_key_here\" }\n       }\n     }\n   }\n   ```\n   Replace `/absolute/path/to/etf-flow-mcp/cli.py` with the full path to `cli.py`.\n\n2. **Restart Claude Desktop**:\n   Verify the hammer icon appears in the Claude Desktop UI to confirm the server is loaded.\n\n3. **Query Examples**:\n   - \"Show me the latest BTC ETF flow data in a table\"\n   - \"Get the ETH ETF flow history\"\n\n### Example Output\n\n- **BTC ETF Flow**:\n  ```markdown\n  | Date       | GBTC      | IBIT      | FBTC      | ARKB      | BITB      | BTCO     | HODL     | BRRR     | EZBC     | BTCW     | Total     |\n  |------------|-----------|-----------|-----------|-----------|-----------|----------|----------|----------|----------|----------|-----------|\n  | 2025-04-24 | 0         | 327300000 | 0         | 97700000  | 10200000  | 7750000  | 0        | 0        | 0        | 0        | 442200000 |\n  | 2025-04-23 | 0         | 643200000 | 124400000 | 129500000 | -15200000 | 0        | 5300000  | 0        | 0        | 0        | 917700000 |\n  | 2025-04-22 | 65100000  | 193500000 | 253800000 | 267100000 | 76700000  | 18300000 | 6500000  | 0        | 10600000 | 0        | 912700000 |\n  | 2025-04-21 | 36600000  | 41600000  | 88100000  | 116100000 | 45100000  | 0        | 11700000 | 0        | 10100000 | 0        | 381300000 |\n  | 2025-04-18 | 0         | 0         | 0         | 0         | 0         | 0        | 0        | 0        | 0        | 0        | 0         |\n  ```\n\n- **ETH ETF Flow**:\n  ```markdown\n  | Date       | ETHE      | GETH     | ETHA      | ETHW     | FETH      | ETHV     | EZET     | CETH     | QETH     | Total     |\n  |------------|-----------|----------|-----------|----------|-----------|----------|----------|----------|----------|-----------|\n  | 2025-04-24 | -6600000  | 18300000 | 40000000  | 5100000  | 0         | 2600000  | 0        | 4100000  | 0        | 63550000  |\n  | 2025-04-23 | 0         | 6400000  | -30300000 | 0        | 0         | 0        | 0        | 0        | 0        | -23900000  |\n  | 2025-04-22 | 0         | 0        | 0         | 6100000  | 32700000  | 0        | 0        | 0        | 0        | 38800000  |\n  | 2025-04-21 | -25400000 | 0        | 0         | 0        | 0         | 0        | 0        | 0        | 0        | -25400000  |\n  | 2025-04-18 | 0         | 0        | 0         | 0        | 0         | 0        | 0        | 0        | 0        | 0         |\n  | 2025-04-17 | 0         | 0        | 0         | 0        | 0         | 0        | 0        | 0        | 0        | 0         |\n  ```\n\n## License\n\nThis project is licensed under the [MIT License](LICENSE).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "etf",
        "crypto",
        "fintech",
        "etf flow",
        "kukapay etf",
        "crypto etf"
      ],
      "category": "finance--fintech"
    },
    "kukapay--funding-rates-mcp": {
      "owner": "kukapay",
      "name": "funding-rates-mcp",
      "url": "https://github.com/kukapay/funding-rates-mcp",
      "imageUrl": "",
      "description": "Providing real-time funding rate data across major crypto exchanges.",
      "stars": 6,
      "forks": 7,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-26T11:24:13Z",
      "readme_content": "# Funding Rates MCP\n\nAn MCP server that provides real-time funding rate data across major crypto exchanges, enabling agents to detect arbitrage opportunities. \n\n[![Discord](https://img.shields.io/discord/1353556181251133481?cacheSeconds=3600)](https://discord.gg/aRnuu2eJ)\n![GitHub License](https://img.shields.io/github/license/kukapay/funding-rates-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Real-Time Funding Rates**: Fetches current funding across Binance, OKX, Bybit, Bitget, Gate and CoinEx.\n- **Pivoted Table Output**: Displays symbols as rows, exchanges as columns, and includes a `Divergence` column for max funding rate difference.\n- **Claude Desktop Integration**: Runs as an MCP server for interactive queries.\n\n## Installation\n\n### Prerequisites\n- Python 3.10+\n- [uv](https://github.com/astral-sh/uv) for dependency management\n- [Claude Desktop](https://www.anthropic.com/claude) (optional, for interactive queries)\n- Git\n\n### Steps\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/funding-rates-mcp.git\n   cd funding-rates-mcp\n   ```\n\n2. **Set Up Dependencies with uv**:\n   ```bash\n   uv sync\n   ```\n\n3. **Configuring Claude Desktop**：\n\n    To use with Claude Desktop:\n    1. Edit the Claude configuration file:\n       - **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n       - **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n    2. Add the MCP server:\n       ```json\n       {\n         \"mcpServers\": {\n           \"funding-rates-mcp\": {\n             \"command\": \"uv\",\n             \"args\": [\"--directory\", \"/absolute/path/to/funding-rates-mcp\", \"run\", \"funding-rates-mcp\"]\n           }\n         }\n       }\n       ```\n    3. Restart Claude Desktop. Look for the hammer icon to confirm integration.\n\n## Usage\n    \n### Tools\n\nThe server provides the following MCP tool for querying funding rates:\n\n- **`compare_funding_rates`**:\n  - **Description**: Compares current funding rates for multiple symbols across specified exchanges, returning a pivoted Markdown table with a `Divergence` column showing the maximum funding rate difference for each symbol.\n  - **Parameters**:\n    - `symbols` (List[str]): List of trading pairs (e.g., `[\"BTC/USDT:USDT\", \"ETH/USDT:USDT\"]`). Required.\n    - `exchanges` (List[str], optional): List of exchanges to compare (e.g., `[\"binance\", \"okx\"]`). Defaults to all supported exchanges (`binance`, `okx`, `bybit`, `bitget`, `gate`, `coinex`).\n    - `params` (Dict, optional): Additional parameters for the API call. Defaults to `{}`.\n  - **Returns**: A Markdown table with symbols as rows, exchanges as columns, funding rates as values (formatted as percentages), and a `Divergence` column.\n  - **Example**: See the Examples section below.\n\n### Prompts\n\nThe server includes the following MCP prompt for generating natural language queries:\n\n- **`compare_funding_rates_prompt`**:\n  - **Description**: Generates a natural language prompt for comparing funding rates across all supported exchanges, suitable for Claude Desktop input.\n  - **Parameters**:\n    - `symbols` (List[str]): List of trading pairs (e.g., `[\"BTC/USDT:USDT\", \"ETH/USDT:USDT\"]`). Required.\n  - **Returns**: A string prompt (e.g., \"Compare the funding rates for BTC/USDT:USDT, ETH/USDT:USDT across binance, okx, bybit, bitget, gate, coinex.\").\n  - **Usage**: Used internally by Claude Desktop to interpret user queries or for testing in MCP Inspector.\n\n### Examples\n#### Compare Funding Rates\n- **Input** (in Claude Desktop):  \n  \"Compare funding rates for BTC/USDT:USDT and ETH/USDT:USDT across all exchanges.\"\n- **Output**:\n  ```\n  Current funding rates:\n\n  | Symbol\\Exchange | binance   | okx       | bybit     | bitget    | gate      | coinex    | Divergence |\n  |-----------------|-----------|-----------|-----------|-----------|-----------|-----------|------------|\n  | BTC/USDT:USDT   | 0.005161% | 0.007548% | 0.010000% | 0.002900% | -0.019200% | -0.035013% | 0.045013%  |\n  | ETH/USDT:USDT   | 0.010000% | 0.005839% | 0.010000% | 0.010000% | -0.008200% | 0.000000%  | 0.018200%  |\n  ```\n\n#### Compare Specific Exchanges\n- **Input** (in Claude Desktop):  \n  \"Compare funding rates for SOL/USDT:USDT on Binance, OKX, and Bybit.\"\n- **Output**:\n  ```\n  Current funding rates:\n\n  | Symbol\\Exchange | binance   | okx       | bybit     | Divergence |\n  |-----------------|-----------|-----------|-----------|------------|\n  | SOL/USDT:USDT   | -0.015312% | -0.003639% | -0.004467% | 0.011673%  |\n  ```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "finance",
        "fintech",
        "crypto",
        "finance fintech",
        "fintech kukapay",
        "kukapay funding"
      ],
      "category": "finance--fintech"
    },
    "kukapay--hyperliquid-info-mcp": {
      "owner": "kukapay",
      "name": "hyperliquid-info-mcp",
      "url": "https://github.com/kukapay/hyperliquid-info-mcp",
      "imageUrl": "",
      "description": "An MCP server that provides real-time data and insights from the Hyperliquid perp DEX for use in bots, dashboards, and analytics.",
      "stars": 19,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-30T10:50:57Z",
      "readme_content": "# Hyperliquid Info MCP Server\n\nAn MCP server that provides real-time data and insights from the Hyperliquid perp DEX for use in bots, dashboards, and analytics.\n\n![GitHub License](https://img.shields.io/github/license/kukapay/hyperliquid-info-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **User Data Queries**:\n  - `get_user_state`: Fetch user positions, margin, and withdrawable balance for perpetuals or spot markets.\n  - `get_user_open_orders`: Retrieve all open orders for a user account.\n  - `get_user_trade_history`: Get trade fill history with details like symbol, size, and price.\n  - `get_user_funding_history`: Query funding payment history with customizable time ranges.\n  - `get_user_fees`: Fetch user-specific fee structures (maker/taker rates).\n  - `get_user_staking_summary` & `get_user_staking_rewards`: Access staking details and rewards.\n  - `get_user_order_by_oid` & `get_user_order_by_cloid`: Retrieve specific order details by order ID or client order ID.\n  - `get_user_sub_accounts`: List sub-accounts associated with a main account.\n\n- **Market Data Tools**:\n  - `get_all_mids`: Get mid prices for all trading pairs.\n  - `get_l2_snapshot`: Fetch Level 2 order book snapshots for a specific coin.\n  - `get_candles_snapshot`: Retrieve candlestick data with customizable intervals and time ranges.\n  - `get_coin_funding_history`: Query funding rate history for a specific coin.\n  - `get_perp_dexs`: Fetch metadata about perpetual markets (using `meta`).\n  - `get_perp_metadata` & `get_spot_metadata`: Get detailed metadata for perpetual and spot markets, with optional asset contexts.\n\n- **Analysis Prompt**:\n  - `analyze_positions`: A guided prompt to analyze user trading activity using relevant tools.\n\n- **ISO 8601 Support**: Time-based queries (`get_candles_snapshot`, `get_coin_funding_history`, `get_user_funding_history`) accept ISO 8601 time strings for precise data filtering.\n\n## Installation\n\n### Prerequisites\n- **Python 3.10**: Required by the Hyperliquid Python SDK.\n- A valid Hyperliquid account address for user-specific queries.\n- [uv](https://github.com/astral-sh/uv) or [pip](https://pip.pypa.io/en/stable/) for package management.\n\n### Steps\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/hyperliquid-info-mcp.git\n   cd hyperliquid-info-mcp\n   ```\n\n2. **Install Dependencies**:\n   Using `uv`:\n   ```bash\n   uv sync\n   ```\n\n## Usage\n\n### Running the Server\nRun the server in development mode with MCP Inspector:\n```bash\nmcp dev main.py\n```\nOr install it for use in Claude Desktop:\n```bash\nmcp install main.py --name \"Hyperliquid Info\"\n```\n\n### Example Usage\n\nUsing the MCP Inspector or Claude Desktop, you can interact with the server using natural language prompts. Below are examples of how to trigger the `analyze_positions` prompt and individual tools conversationally.\n\n1. **Analyze Trading Positions**:\n   - **Prompt**:  \n     \"Please analyze the trading activity for my Hyperliquid account with address 0xYourAddress. Provide insights on my positions, open orders, and recent trades.\"\n   - **Behavior**:  \n     This triggers the `analyze_positions` prompt, which uses `get_user_state`, `get_user_open_orders`, `get_user_trade_history`, `get_user_funding_history`, and `get_user_fees` to fetch data and generate a risk/performance analysis.\n   - **Example Output**:  \n     ```\n     For account 0xYourAddress:\n     - Current Positions: 0.1 BTC long at $50,000, unrealized PNL +$500.\n     - Open Orders: 1 limit order to sell 0.05 BTC at $52,000.\n     - Recent Trades: Bought 0.1 BTC at $50,000 on 2025-05-30.\n     - Funding Payments: Paid $10 in funding fees last week.\n     - Fees: Maker fee 0.02%, taker fee 0.05%.\n     Recommendation: Monitor BTC price closely due to high leverage.\n     ```\n\n2. **Fetch User State**:\n   - **Prompt**:  \n     \"Show me the current state of my Hyperliquid account 0xYourAddress, including my positions and margin details for perpetuals.\"\n   - **Behavior**:  \n     Invokes `get_user_state(account_address=\"0xYourAddress\", check_spot=False)`.\n   - **Example Output**:  \n     ```\n     {\n       \"assetPositions\": [\n         {\n           \"position\": {\n             \"coin\": \"BTC\",\n             \"szi\": \"0.1\",\n             \"entryPx\": \"50000.0\",\n             \"markPx\": \"50500.0\",\n             \"unrealizedPnl\": \"500.0\"\n           }\n         }\n       ],\n       \"marginSummary\": {\n         \"accountValue\": \"10000.0\",\n         \"totalMarginUsed\": \"2000.0\"\n       },\n       \"withdrawable\": \"8000.0\"\n     }\n     ```\n\n3. **Get Candlestick Data**:\n   - **Prompt**:  \n     \"Can you get the 1-minute candlestick data for ETH on Hyperliquid from January 1, 2025, to January 2, 2025?\"\n   - **Behavior**:  \n     Invokes `get_candles_snapshot(coin_name=\"ETH\", interval=\"1m\", start_time=\"2025-01-01T00:00:00Z\", end_time=\"2025-01-02T00:00:00Z\")`.\n   - **Example Output**:  \n     ```\n     [\n       {\n         \"t\": 1672531200000,\n         \"o\": \"3000.0\",\n         \"h\": \"3010.0\",\n         \"l\": \"2995.0\",\n         \"c\": \"3005.0\",\n         \"v\": \"1000.0\"\n       },\n       ...\n     ]\n     ```\n\n4. **Check Trade History**:\n   - **Prompt**:  \n     \"What are the recent trades for my account 0xYourAddress on Hyperliquid?\"\n   - **Behavior**:  \n     Invokes `get_user_trade_history(account_address=\"0xYourAddress\")`.\n   - **Example Output**:  \n     ```\n     [\n       {\n         \"coin\": \"ETH\",\n         \"px\": \"3000.0\",\n         \"sz\": \"0.5\",\n         \"time\": 1672531200000,\n         \"tid\": \"123456\"\n       },\n       ...\n     ]\n     ```\n\n5. **Fetch Market Metadata**:\n   - **Prompt**:  \n     \"Tell me about the perpetual markets available on Hyperliquid, including trading pairs.\"\n   - **Behavior**:  \n     Invokes `get_perp_metadata(include_asset_ctxs=False)`.\n   - **Example Output**:  \n     ```\n     {\n       \"universe\": [\n         {\n           \"name\": \"BTC-PERP\",\n           \"maxLeverage\": 50,\n           \"szDecimals\": 4,\n           \"tickSz\": \"0.1\"\n         },\n         ...\n       ]\n     }\n     ```\n\n\n## License\nThis project is licensed under the [MIT License](LICENSE).\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "hyperliquid",
        "fintech",
        "mcp server",
        "info mcp",
        "fintech kukapay"
      ],
      "category": "finance--fintech"
    },
    "kukapay--hyperliquid-whalealert-mcp": {
      "owner": "kukapay",
      "name": "hyperliquid-whalealert-mcp",
      "url": "https://github.com/kukapay/hyperliquid-whalealert-mcp",
      "imageUrl": "",
      "description": "An MCP server that provides real-time whale alerts on Hyperliquid, flagging positions with a notional value exceeding $1 million.",
      "stars": 6,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-24T20:05:51Z",
      "readme_content": "# Hyperliquid WhaleAlert MCP\n\nAn MCP server that provides real-time whale alerts on Hyperliquid, flagging positions with a notional value exceeding $1 million.\n\n![GitHub License](https://img.shields.io/github/license/kukapay/hyperliquid-whalealert-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Tool: `get_whale_alerts`**: Fetches recent whale transactions and returns them as a Markdown table using `pandas` for clean formatting.\n- **Prompt: `summarize_whale_activity`**: Generates a summary of whale transactions, including metrics like total position value and notable symbols.\n\n## Prerequisites\n\n- **Python**: Version 3.10 or higher.\n- **CoinGlass API Key**: Obtain from [CoinGlass](https://www.coinglass.com/) (required for API access).\n- **uv**: Package and dependency manager ([install uv](https://docs.astral.sh/uv/)).\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/hyperliquid-whalealert-mcp.git\n   cd hyperliquid-whalealert-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   uv sync\n   ```\n   This installs dependencies specified in `pyproject.toml`.\n\n3. **Claude Desktop Integration**:\n   Install the server in Claude Desktop:\n   ```bash\n   uv run mcp install mcp.py --name \"Hyperliquid Whale Alert\"\n   ```\n   \n    Or update the configuration file manually:\n  \n    ```\n    {\n      \"mcpServers\": {\n        \"hyperliquid-whalealert\": {\n          \"command\": \"uv\",\n          \"args\": [ \"--directory\", \"/path/to/hyperliquid-whalealert-mcp\", \"run\", \"main.py\" ],\n          \"env\": { \"COINGLASS_API_KEY\": \"your_api_key\" }\n        }\n      }\n    }\n    ```       \n    Replace `/path/to/hyperliquid-whalealert-mcp` with your actual installation path and `COINGLASS_API_KEY` with your API key.\n\n## Usage\n\n### Using the Tool\n\nThe `get_whale_alerts` tool fetches whale transaction data and returns it as a Markdown list. Example output:\n\n```markdown\n- **ETH Transaction**:\n  - User Address: 0x3fd4444154242720c0d0c61c74a240d90c127d33\n  - Position Size: 12700\n  - Entry Price: $1611.62\n  - Liquidation Price: $527.2521\n  - Position Value (USD): $21003260\n  - Action: Close\n  - Create Time: 2025-05-20 12:31:57\n- **BTC Transaction**:\n  - User Address: 0x1cadadf0e884ac5527ae596a4fc1017a4ffd4e2c\n  - Position Size: 33.54032\n  - Entry Price: $87486.2\n  - Liquidation Price: $44836.8126\n  - Position Value (USD): $2936421.4757\n  - Action: Close\n  - Create Time: 2025-05-20 12:31:17\n```\n  \nTo invoke the tool:\n- In the MCP Inspector, select `get_whale_alerts` and execute.\n- In Claude Desktop, use the registered server and call the tool via the UI or API.\n\n### Using the Prompt\n\nThe `summarize_whale_activity` prompt generates a summary of whale transactions. Example interaction (in a compatible client):\n\n```plaintext\n/summarize_whale_activity\n```\n\nResponse:\n```\nI'll analyze the whale transaction data and provide a summary.\n```\n\nThis can be extended by LLMs to provide detailed metrics like total position value or notable symbols.\n\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "whalealert",
        "whale",
        "whalealert mcp",
        "hyperliquid whalealert",
        "mcp server"
      ],
      "category": "finance--fintech"
    },
    "kukapay--pumpswap-mcp": {
      "owner": "kukapay",
      "name": "pumpswap-mcp",
      "url": "https://github.com/kukapay/pumpswap-mcp",
      "imageUrl": "",
      "description": "Enabling AI agents to interact with PumpSwap for real-time token swaps and automated on-chain trading.",
      "stars": 5,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-19T23:05:04Z",
      "readme_content": "# PumpSwap MCP Server\n\nAn MCP server that enables AI agents to interact with [PumpSwap](https://swap.pump.fun/) for real-time token swaps and automated on-chain trading.\n\n![License](https://img.shields.io/badge/license-MIT-green)\n![Python](https://img.shields.io/badge/python-3.10%2B-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n\n## Features\n\n- **Buy Tokens**: Purchase tokens using SOL with customizable slippage and priority fees.\n- **Sell Tokens**: Sell tokens for SOL with configurable parameters.\n- **Token Price Query**: Retrieve current token prices in SOL.\n- **Pool Data Retrieval**: Fetch and display detailed pool information for a given token mint.\n\n## Prerequisites\n\n- Python 3.13 or higher\n- [uv](https://github.com/astral-sh/uv) for dependency management and script execution\n- Solana RPC endpoint (e.g., `https://api.mainnet-beta.solana.com`)\n- A valid Solana private key for transaction signing\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/pumpswap-mcp.git\n   cd pumpswap-mcp\n   ```\n\n2. **Install uv**:\n   If `uv` is not installed, follow the official [uv installation guide](https://github.com/astral-sh/uv#installation). For example:\n   ```bash\n   curl -LsSf https://astral.sh/uv/install.sh | sh\n   ```\n\n3. **Set Up Dependencies**:\n   Use `uv` to install dependencies:\n   ```bash\n   uv sync\n   ```\n\n4. **Configure Environment Variables**:\n   Create a `.env.private` filein the project root with the following variables:\n   ```plaintext\n   HTTPS_RPC_ENDPOINT=https://api.mainnet-beta.solana.com\n   BUY_SLIPPAGE=0.3\n   SELL_SLIPPAGE=0.1\n   SWAP_PRIORITY_FEE=1500000\n   PRIVATE_KEY=your-solana-private-key\n   ```\n\n   Replace `your-solana-private-key` with your actual Solana private key. \n   \n## Usage\n\n### Run the MCP Server\n   Use `uv` to run the server:\n   ```bash\n   uv run main.py\n   ```\n\n   The server will listen for MCP commands and expose the following tools:\n   - `buy_token(mint: str, sol_amount: float, user_private_key: str)`: Buy tokens with SOL.\n   - `sell_token(mint: str, token_amount: float, user_private_key: str)`: Sell tokens for SOL.\n   - `get_token_price(mint: str)`: Fetch the current token price in SOL.\n   - `get_pool_data(mint: str)`: Retrieve formatted pool data for a token.\n\n### Buy Tokens\n\n**Prompt**:\n```\nBuy 0.1 SOL worth of tokens with mint address FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump.\n```\n\nThis triggers `buy_token(\"FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump\", 0.1)`.\n\n**Expected Output**:\n```\nBuy successful for 0.1 SOL of token FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump\nTransaction ID: <transaction-id>\nAmount: <token-amount>\nToken Price (SOL): <price>\n```\n\n### Sell Tokens\n**Prompt**:\n```\nSell 1000 tokens of FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump.\n```\n\nThis triggers `sell_token(\"FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump\", 1000)`.\n\n**Expected Output**:\n```\nSell successful for 1000 tokens of FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump\nTransaction ID: <transaction-id>\nAmount: <sol-amount>\nToken Price (SOL): <price>\n```\n\n### Get Token Price\n**Prompt**:\n```\nWhat is the current price of the token with mint FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump?\n```\nThis triggers `get_token_price(\"FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump\")`.\n\n**Expected Output**:\n```\nThe current price of token FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump is <price> SOL.\n```\n\n### Get Pool Data\n**Prompt**:\n```\nShow me the pool data for the token with mint FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump.\n```\nThis triggers `get_pool_data(\"FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump\")`.\n\n**Expected Output**:\n```\nPumpPool Data for mint FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump:\nPool Bump: <bump>\nIndex: <index>\nCreator: <creator-pubkey>\nBase Mint: <base-mint>\nQuote Mint: <quote-mint>\nLP Mint: <lp-mint>\nPool Base Token Account: <base-account>\nPool Quote Token Account: <quote-account>\nLP Supply: <supply>\n```\n\n## Environment Variables\n\nThe server uses the following environment variables, loaded from `.env.private`:\n\n| Variable              | Description                                      | Default Value                       |\n|-----------------------|--------------------------------------------------|-------------------------------------|\n| `HTTPS_RPC_ENDPOINT`  | Solana RPC endpoint URL                          | https://api.mainnet-beta.solana.com |\n| `BUY_SLIPPAGE`        | Slippage tolerance for buy transactions          | 0.3 (30%)                           |\n| `SELL_SLIPPAGE`       | Slippage tolerance for sell transactions         | 0.1 (10%)                           |\n| `SWAP_PRIORITY_FEE`   | Priority fee for transactions (in lamports)      | 1500000                             |\n| `PRIVATE_KEY`         | Solana private key for signing transactions      | None (required)                     |\n\nEnsure `PRIVATE_KEY` is set, as the server will raise an error if it's missing.\n\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n## Disclaimer\n\nThis software interacts with decentralized finance (DeFi) protocols and handles sensitive data like private keys. Use it at your own risk. Ensure your `.env.private` file is secure and never share your private key. The authors are not responsible for any financial losses or security issues arising from the use of this software.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "pumpswap",
        "mcp",
        "fintech",
        "pumpswap mcp",
        "kukapay pumpswap",
        "interact pumpswap"
      ],
      "category": "finance--fintech"
    },
    "kukapay--raydium-launchlab-mcp": {
      "owner": "kukapay",
      "name": "raydium-launchlab-mcp",
      "url": "https://github.com/kukapay/raydium-launchlab-mcp",
      "imageUrl": "",
      "description": "An MCP server that enables AI agents to launch, buy, and sell tokens on the Raydium Launchpad(aka LaunchLab).",
      "stars": 2,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-26T10:21:33Z",
      "readme_content": "# Raydium LaunchLab MCP\n\nAn MCP server that enables AI agents to launch, buy, and sell tokens on the Raydium Launchpad(also know as [LaunchLab](https://raydium.io/launchpad/)).\n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Mint Token**: Create a bonding-curve-based token with customizable parameters (name, symbol, decimals, total supply, fundraising target, etc.) and upload metadata to IPFS.\n- **Buy Token**: Purchase tokens from a Raydium Launchpad pool using SOL.\n- **Sell Token**: Sell tokens back to a Raydium Launchpad pool.\n- **IPFS Integration**: Uploads token images and metadata to IPFS for decentralized storage.\n\n## Prerequisites\n\n- **Node.js**: Version 18.x or higher.\n- **Solana Wallet**: A private key with sufficient SOL for transactions.\n- **Pinata Account**: API credentials for IPFS storage (JWT and gateway).\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/raydium-launchlab-mcp.git\n   cd raydium-launchlab-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n   \n3. **Configure MCP Client**:\n    ```json\n    {\n      \"mcpServers\": {\n        \"raydium-launchlab\": {\n          \"command\": \"node\",\n          \"args\": [\"/path/to/raydium-launchlab-mcp/index.js\"],\n          \"env\": {\n             \"RPC_URL\": \"your-solana-rpc-url\",\n             \"PRIVATE_KEY\": \"your-private-key-as-integer-array\",\n             \"PINATA_JWT\": \"your-pinata-jwt\",\n             \"PINATA_GATEWAY\": \"your-pinata-gateway\"\n          }\n        }\n      }\n    }\n    ```\n   - Replace `/path/to/raydium-launchlab-mcp` with your actual installation path.  \n   - Replace `your-solana-rpc-url` with your own Solana rpc url.\n   - Replace `your-private-key-as-integer-array` with your Solana wallet's private key (e.g., `[1,2,3,...]`).\n   - Obtain `PINATA_JWT` and `PINATA_GATEWAY` from your Pinata account.\n   \n\n## Tools\n\nThe MCP server exposes three tools for interacting with Raydium Launchpad:\n\n### 1. `mint_token`\nCreates a bonding-curve-based token on Raydium Launchpad with metadata uploaded to Pinata IPFS.\n\n**Parameters**:\n- `name` (string, 1-32 chars): Token name (e.g., \"My Token\").\n- `symbol` (string, 1-10 chars): Token symbol (e.g., \"MTK\").\n- `imagePath` (string): Path to the token logo (e.g., \"/assets/logo.png\").\n- `decimals` (integer, 0-18, default: 6): Number of decimal places.\n- `fundRaisingTarget` (number, positive, default: 85): Target SOL amount to raise.\n- `totalSupply` (number, default: 1,000,000,000): Total token supply.\n- `totalSellPercent` (number, default: 0.75): Percentage of supply for fundraising.\n- `createOnly` (boolean, default: true): If `true`, skips initial buy.\n- `initialBuyAmount` (number, non-negative, default: 0.1): SOL amount for initial buy (if `createOnly` is `false`).\n- `slippage` (number, 0-1.0, default: 0.01): Acceptable price slippage percentage (e.g., 0.01 for 1%).\n\n**Example Prompt**:\n> Create a new token on Raydium Launchpad named 'My Token' with symbol 'MTK', using the logo at '/assets/logo.png', a fundraising target of 35 SOL.\n\n\n**Example Response**:\n> Successfully created token (mint: <mint_address>, name: My Token, symbol: MTK). Transaction signatures: <tx_id>\n\n### 2. `buy_token`\nPurchases tokens from a Raydium Launchpad pool using SOL.\n\n**Parameters**:\n- `mintAddress` (string): Token mint address.\n- `inAmount` (number, positive): Amount of SOL to spend.\n- `slippage` (number, 0-1.0, default: 0.01): Acceptable price slippage percentage.\n\n**Example Prompt**:\n> Buy tokens from a Raydium Launchpad pool with mint address '<mint_address>' using 0.5 SOL and a slippage of 1%.\n\n**Example Response**:\n> Successfully purchased tokens (mint: <mint_address>). Transaction signature: <tx_id>\n\n### 3. `sell_token`\nSells tokens back to a Raydium Launchpad pool.\n\n**Parameters**:\n- `mintAddress` (string): Token mint address.\n- `inAmount` (number, positive): Amount of tokens to sell.\n- `slippage` (number, 0-1.0, default: 0.01): Acceptable price slippage percentage.\n\n**Example Prompt**:\n> Sell 1,000,000 tokens from a Raydium Launchpad pool with mint address '<mint_address>' and a slippage of 1%.\n\n**Example Response**:\n> Successfully sold tokens (mint: <mint_address>). Transaction signature: <tx_id>\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "launchpad",
        "fintech",
        "launchlab mcp",
        "fintech kukapay",
        "raydium launchlab"
      ],
      "category": "finance--fintech"
    },
    "kukapay--rug-check-mcp": {
      "owner": "kukapay",
      "name": "rug-check-mcp",
      "url": "https://github.com/kukapay/rug-check-mcp",
      "imageUrl": "",
      "description": "An MCP server that detects potential risks in Solana meme tokens.",
      "stars": 14,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-01T13:41:36Z",
      "readme_content": "# Rug-Check-MCP\n\nAn MCP server that detects potential risks in Solana meme tokens, helping AI agents avoid rug pulls and unsafe projects.\n\n![License](https://img.shields.io/github/license/kukapay/rug-check-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10%2B-blue)\n[![smithery badge](https://smithery.ai/badge/@kukapay/rug-check-mcp)](https://smithery.ai/server/@kukapay/rug-check-mcp)\n\n## Features\n\n- **Token Analysis Tool**: The `analysis_token` tool retrieves and processes Solana token data from the Solsniffer API.\n- **Structured Output**: Returns detailed token information including name, symbol, Snif score, market cap, price, supply, risks, and audit status.\n\n## Prerequisites\n\n- Python 3.10 or higher\n- A Solsniffer API key (sign up at [Solsniffer](https://solsniffer.com) to obtain one)\n\n## Installation\n\n### Installing via Smithery\n\nTo install Rug Check for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kukapay/rug-check-mcp):\n\n```bash\nnpx -y @smithery/cli install @kukapay/rug-check-mcp --client claude\n```\n\n### Manual Installation\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/rug-check-mcp.git\n   cd rug-check-mcp\n   ```\n\n2. **Install Dependencies**:\n   Ensure you have `pip` installed, then run:\n   ```bash\n   pip install mcp[cli] requests python-dotenv\n   ```\n\n3. **Client Configuration**:\n\n    ```\n    \"mcpServers\": { \n      \"rug-check-mcp\": { \n        \"command\": \"python\", \n        \"args\": [\"path/to/rug-check-mcp/main.py\"], \n        \"env\": { \n          \"SOLSNIFFER_API_KEY\": \"your_solsniffer_api_key_here\" \n        } \n      } \n    }\n    ```\n\n## Tool: `analysis_token`\n\n- **Description**: Analyzes a Solana token based on its address.\n- **Input**: `token_address` (string) - The Solana token address to analyze.\n- **Output**: A dictionary containing:\n  - `token_address`: Token address\n  - `token_name`: Token name\n  - `token_symbol`: Token symbol\n  - `snif_score`: Solsniffer risk score (0-100)\n  - `market_cap`: Market capitalization in USD\n  - `price`: Token price in USD\n  - `supply_amount`: Total supply of the token\n  - `risks`: High, moderate, and low risk details with counts and descriptions\n  - `audit_risk`: Audit status (mint/freeze disabled, LP burned, top 10 holders)\n\n  \n### Example Output\nFor token address `9VxExA1iRPbuLLdSJ2rB3nyBxsyLReT4aqzZBMaBaY1p`:\n```json\n{\n  'token_address': '9VxExA1iRPbuLLdSJ2rB3nyBxsyLReT4aqzZBMaBaY1p',\n  'token_name': 'REVSHARE',\n  'token_symbol': 'REVS',\n  'snif_score': 55,\n  'market_cap': 271893.9423965262,\n  'price': 0.000280011574,\n  'supply_amount': 971009656.8955618,\n  'risks': {\n    'high': {\n      'count': 3,\n      'details': {\n        'Mintable risks found': True,\n        'Freeze risks found': True,\n        'A private wallet owns a significant share of the supply': False,\n        'Tokens auto-freeze risks found': True,\n        'Significant ownership by top 10 wallets': False,\n        'Significant ownership by top 20 wallets': False,\n        'Permanent control risks found': True,\n        'Presence of token metadata': True,\n        'High locked supply risks found': None,\n        'Sufficient liquidity detected': None,\n        'Very low liquidity': None\n      }\n    },\n    'moderate': {\n      'count': 3,\n      'details': {\n        'Token metadata are immutable': False,\n        'Token operates without custom fees': False,\n        'Token has recent user activity': True,\n        'Unknown liquidity pools': False,\n        'Low count of LP providers': True\n      }\n    },\n    'low': {\n      'count': 1,\n      'details': {\n        'Contract was not recently deployed': False\n      }\n    }\n  },\n  'audit_risk': {\n    'mint_disabled': True,\n    'freeze_disabled': True,\n    'lp_burned': False,\n    'top_10_holders_significant': False\n  }\n}\n```\n\n### Prompt Examples\n\nBelow are examples of prompts you might use in an MCP-compatible client (e.g., Claude Desktop) and the expected responses after the `analysis_token` tool is invoked.\n\n**Prompt**: \n\n> \"Can you analyze the Solana token at address `9VxExA1iRPbuLLdSJ2rB3nyBxsyLReT4aqzZBMaBaY1p`?\"\n   \n**Response**:\n```plaintext\nI've analyzed the token at address 9VxExA1iRPbuLLdSJ2rB3nyBxsyLReT4aqzZBMaBaY1p. Here's the summary:\n\n- Token Name: REVSHARE (Symbol: REVS)\n- Snif Score: 55/100 (Moderate risk)\n- Market Cap: $288,875.29\n- Price: $0.000297\n- Total Supply: 971,266,696.90 tokens\n- Risks:\n  - High (3 risks):\n    - Mintable risks found: True\n    - Freeze risks found: True\n    - Permanent control risks found: True\n    - (Other factors: False)\n  - Moderate (1 risk):\n    - Low count of LP providers: True\n    - (Other factors: False)\n  - Low (0 risks):\n    - (All factors: False)\n- Audit Status:\n  - Mint Disabled: Yes\n  - Freeze Disabled: Yes\n  - LP Burned: No\n  - Top 10 Holders Significant: No\n\nThis token has moderate risks due to potential control issues and liquidity concerns, but minting and freezing are disabled for added safety.     \n```\n\n**Prompt**: \n\n> \"What’s the risk profile of the token `So11111111111111111111111111111111111111112`?\"\n\n**Response**:\n```plaintext\nHere's the risk profile for the token at address So11111111111111111111111111111111111111112:\n\n- Token Name: Wrapped SOL (Symbol: SOL)\n- Snif Score: 92/100 (Low risk)\n- Market Cap: $82,345,678.90\n- Price: $176.54\n- Total Supply: 466,567,890.12 tokens\n- Risks:\n  - High (0 risks):\n    - (All factors: False)\n  - Moderate (0 risks):\n    - (All factors: False)\n  - Low (1 risk):\n    - Minor liquidity concentration: True\n    - (Other factors: False)\n- Audit Status:\n  - Mint Disabled: Yes\n  - Freeze Disabled: Yes\n  - LP Burned: Yes\n  - Top 10 Holders Significant: No\n\nWrapped SOL is a low-risk token with strong audit protections and only a minor liquidity concern, typical for a well-established asset.     \n```\n\n**Prompt**: \n> \"Tell me about the token `4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R`.\"\n\n**Response**:\n```plaintext\nHere's the analysis for the token at address 4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R:\n\n- Token Name: Raydium (Symbol: RAY)\n- Snif Score: 85/100 (Low risk)\n- Market Cap: $1,234,567.89\n- Price: $4.72\n- Total Supply: 261,567,890.12 tokens\n- Risks:\n  - High (0 risks):\n    - (All factors: False)\n  - Moderate (1 risk):\n    - Moderate holder concentration: True\n    - (Other factors: False)\n  - Low (0 risks):\n    - (All factors: False)\n- Audit Status:\n  - Mint Disabled: Yes\n  - Freeze Disabled: Yes\n  - LP Burned: Yes\n  - Top 10 Holders Significant: No\n\nRaydium is a low-risk token with solid audit protections. The moderate holder concentration indicates some centralization, but it’s not a major issue.     \n```\n\n\n## License\n\nThis project is licensed under the MIT License. See [LICENSE](LICENSE) for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "fintech",
        "tokens",
        "meme tokens",
        "fintech kukapay",
        "finance fintech"
      ],
      "category": "finance--fintech"
    },
    "kukapay--sui-trader-mcp": {
      "owner": "kukapay",
      "name": "sui-trader-mcp",
      "url": "https://github.com/kukapay/sui-trader-mcp",
      "imageUrl": "",
      "description": "An MCP server designed for AI agents to perform optimal token swaps on the Sui blockchain.",
      "stars": 4,
      "forks": 2,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-10T14:43:40Z",
      "readme_content": "# Sui Trader MCP\n\nAn MCP server designed for AI agents to perform optimal token swaps on the Sui blockchain.\n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Token Swaps**: Execute token swaps on Sui mainnet via the Cetus Aggregator.\n- **Bech32 Private Key Support**: Securely load a Sui private key (starting with `suiprivkey`) from environment variables.\n\n## Prerequisites\n\n- **Node.js**: Version 18.x or higher.\n- **npm**: For dependency management.\n- **Sui Wallet**: A Sui private key in bech32 format (starts with `suiprivkey`).\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/sui-trader-mcp.git\n   cd sui-trader-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n3. **Configure MCP Client**:\n    ```json\n    {\n      \"mcpServers\": {\n        \"sui-trader\": {\n          \"command\": \"node\",\n          \"args\": [\"/absolute/path/to/sui-trader-mcp/index.js\"],\n          \"env\": { \"PRIVATE_KEY\": \"your_private_key\" }\n          }\n        }\n      }\n    }\n    ```\n    Replace `/absolute/path/to/sui-trader-mcp/` with the actual installation path, and `your_private_key` with your Bech32-formatted private key..\n    \n## Usage\n\nUse an MCP-compatible client to invoke the `swap` tool. \n\n### Example\n\nPrompt:\n```\nSwap 1.5 SUI to USDC with 2% slippage, using a fixed input amount.\n```\n\nOutput:\n```\nTransaction ID: zjGekhLBfMYzGqu57fTeu3K1NX5jC5wNUy8rpdPcLyv. Status: success\n```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "trader",
        "fintech",
        "trader mcp",
        "mcp server",
        "sui trader"
      ],
      "category": "finance--fintech"
    },
    "kukapay--uniswap-price-mcp": {
      "owner": "kukapay",
      "name": "uniswap-price-mcp",
      "url": "https://github.com/kukapay/uniswap-price-mcp",
      "imageUrl": "",
      "description": "An MCP server that tracks newly created liquidity pools on Uniswap across multiple blockchains.",
      "stars": 2,
      "forks": 2,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-17T18:16:02Z",
      "readme_content": "# Uniswap V3 Price MCP Server\n\nAn MCP server that delivers real-time token prices from Uniswap V3 across multiple chains — optimized for AI agents and DeFi automation.\n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n\n## Features\n- **Supported Chains**: Ethereum Mainnet (1), Polygon (137), Arbitrum (42161), Optimism (10).\n- **Token Price Fetching**: Queries Uniswap V3 pools for token prices against USDT, USDC, or WETH (in that order) with automatic decimal and symbol retrieval.\n- **USD Conversion**: Optional USD price conversion using CryptoCompare API for all quote tokens.\n\n## Prerequisites\n- **Node.js** (v18 or higher recommended) and **npm**.\n- **Infura Account**: Obtain an `INFURA_PROJECT_ID` with access to Ethereum, Polygon, Arbitrum, and Optimism (sign up at [Infura](https://infura.io/)).\n\n## Installation\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/kukapay/uniswap-price-mcp.git\n   cd uniswap-price-mcp\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n3. **Client Configuration**:\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"Uniswap Price\": {\n          \"command\": \"node\",\n          \"args\": [\"path/to/uniswap-price-mcp/index.js\"],\n          \"env\": {\n            \"INFURA_PROJECT_ID\": \"your_infura_project_id\"\n          }\n        }\n      }\n    }\n    ```\n    Replace `your_infura_project_id` with your Infura project ID.\n    \n## Usage\n\nInteract with the server using MCP-compatible clients.\n\n### Tools\n\n#### getSupportedChains\n\n**Prompt**:\n```\nShow me a list of all blockchain networks supported by the server, formatted as a table.\n```\n**Result**:\n\n| Chain ID | Chain Name       |\n|----------|------------------|\n| 1        | Ethereum Mainnet |\n| 137      | Polygon          |\n| 42161    | Arbitrum         |\n| 10       | Optimism         |\n\n#### getTokenPrice\n\n**Prompt**:\n```\nWhat is the current price of DAI in USD on the Ethereum Mainnet?\n```\n\n**Result**:\n```\nPrice of token DAI on chain 1 in USD: 1.00\n```\n\n**Prompt**:\n```\nGet the USD price of Chainlink (LINK) on the Polygon network.\n```\n\n**Result**:\n```\nPrice of token LINK on chain 137 in USD: 18.50\n```\n\n## License\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "fintech",
        "finance",
        "mcp server",
        "mcp mcp",
        "price mcp"
      ],
      "category": "finance--fintech"
    },
    "kukapay--wallet-inspector-mcp": {
      "owner": "kukapay",
      "name": "wallet-inspector-mcp",
      "url": "https://github.com/kukapay/wallet-inspector-mcp",
      "imageUrl": "",
      "description": "An MCP server that empowers AI agents to inspect any wallet’s balance and onchain activity across major EVM chains and Solana chain.",
      "stars": 5,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-26T11:25:15Z",
      "readme_content": "# Wallet Inspector MCP\n\nAn MCP server  that empowers AI agents to inspect any wallet’s balance and onchain activity across major EVM chains and Solana chain.\n\n![GitHub License](https://img.shields.io/github/license/kukapay/wallet-inspector-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Multi-Chain Support**: Queries Solana, Ethereum, Polygon, Binance Smart Chain (BSC), Base, Arbitrum and more.\n- **Flexible Output**: Balances in ASCII tables, activities and transactions in structured text.\n\n## Installation\n\n### Prerequisites\n\n- **Python**: Version 3.10 or higher.\n- **Dune SIM API Key**: Obtain from [Dune Analytics](https://dune.com).\n- **Dependency Manager**: `uv` (recommended) or `pip`.\n\n### Setup\n\n1. **Clone the Repository**:\n\n   ```bash\n   git clone https://github.com/kukapay/wallet-inspector-mcp.git\n   cd wallet-inspector-mcp\n   ```\n\n2. **Install Dependencies**:\n\n   Using `uv` (recommended):\n\n   ```bash\n   uv async\n   ```\n\n   Or using `pip`:\n\n   ```bash\n   pip install mcp[cli] python-dotenv tabulate\n   ```\n\n3. **Installing to Claude Desktop**:\n\n    Install the server as a Claude Desktop application:\n    ```bash\n    uv run mcp install cli.py --name \"Wallet Inspector\"\n    ```\n\n    Configuration file as a reference:\n\n    ```json\n    {\n       \"mcpServers\": {\n           \"Wallet Inspector\": {\n               \"command\": \"uv\",\n               \"args\": [ \"--directory\", \"/path/to/wallet-inspector-mcp\", \"run\", \"main.py\" ],\n               \"env\": { \"DUNE_SIM_API_KEY\": \"your_dune_sim_api_key_here\"},               \n           }\n       }\n    }\n    ```\n    Replace `/path/to/wallet-inspector-mcp` with your actual installation path, and `your_dune_sim_api_key_here` with your Dune SIM API key.\n\n## Usage\n\n### Interacting with the Server\n\nUse an MCP-compatible client (e.g., Claude Desktop CLI) to query the server. Example natural language queries:\n\n- **Balance Queries**:\n  - \"Check the balance of wallet 0xd8da6bf26964af9d7eed9e03e53415d37aa96045.\"\n  - \"What is the balance for wallet DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK?\"\n  - \"Get balances for 0x1234567890abcdef1234567890abcdef12345678 on EVM chains.\"\n\n- **Activity Queries** (EVM only):\n  - \"Show activity for wallet 0xd8da6bf26964af9d7eed9e03e53415d37aa96045.\"\n  - \"Get transaction history for 0x1234567890abcdef1234567890abcdef12345678 on EVM chains.\"\n\n- **Transaction Queries**:\n  - \"List transactions for wallet 0xd8da6bf26964af9d7eed9e03e53415d37aa96045 with limit 50.\"\n  - \"Show transaction history for wallet DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK.\"\n  - \"Get the latest 10 transactions for 0x1234567890abcdef1234567890abcdef12345678.\"\n\n### Example Outputs\n\n- **Balance Output**:\n\n  ```\n  Wallet 0xd8da6bf26964af9d7eed9e03e53415d37aa96045 balances:\n\n  +----------+-----------------+-------------+\n  | Chain    | Token Amount    | USD Value   |\n  +==========+=================+=============+\n  | ethereum | 605.371497 ETH  | $1842034.66 |\n  +----------+-----------------+-------------+\n  | polygon  | 100.500000 MATIC| $50.25      |\n  +----------+-----------------+-------------+\n  | bsc      | 10.000000 BNB   | $600.00     |\n  +----------+-----------------+-------------+\n\n  Wallet DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK balances:\n\n  +----------+---------------+-------------+\n  | Chain    | Token Amount  | USD Value   |\n  +==========+===============+=============+\n  | solana   | 1.000000 SOL  | $20.50      |\n  +----------+---------------+-------------+\n  ```\n\n- **Activity Output** (EVM only):\n\n  ```\n  Wallet 0xd8da6bf26964af9d7eed9e03e53415d37aa96045 activity:\n\n  Chain ID: 8453\n  Block Time: 2025-02-20T13:52:29+00:00\n  Tx Hash: 0x184544c8d67a0cbed0a3f04abe5f958b96635e8c743c070f70e24b1c06cd1aa6\n  Type: Receive\n  Asset Type: ERC20\n  Value: 123.069653 ENT\n  USD Value: $0.14\n  ```\n\n- **Transaction Output**:\n\n  ```\n  Wallet 0xd8da6bf26964af9d7eed9e03e53415d37aa96045 transactions:\n\n  Chain: ethereum\n  Block Time: 2023-11-07T05:31:56Z\n  Tx Hash: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\n  From: 0xd8da6bf26964af9d7eed9e03e53415d37aa96045\n  To: 0x1234567890abcdef1234567890abcdef12345678\n  Value: 0.000320 ETH\n\n  Wallet DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK transactions:\n\n  Chain: solana\n  Block Time: 2023-03-28T09:20:00Z\n  Tx Hash: 5SzSbWKM9yZC7cCGMhUhvnYdWQytrk9NBaWwug1gQBKKwNEBvBKqPSfVeYYnZwUuUyvcCHgYhDkTRrB6YBfwzfv8\n  From: DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK\n  To: 9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\n  Value: 0.010000 SOL\n  ```\n\n## Tools\n### `get_wallet_balance`\n\n- **Description**: Retrieves the balance of a specified wallet address across supported EVM and Solana blockchains.\n- **Parameters**:\n  - `wallet_address` (str): The wallet address to query (e.g., '0x123...' for EVM chains or 'DYw8jCT...' for Solana).\n- **Returns**: An ASCII table with balance details (chain, token amount, USD value) or an error message.\n- **Supported Chains**: Solana,arbitrum,arbitrum,avalanche_c,base,berachain,bnb,ethereum and more.\n\n### `get_wallet_activity`\n\n- **Description**: Queries transaction activity for a specified wallet address on supported EVM blockchains.\n- **Parameters**:\n  - `wallet_address` (str): The EVM-compatible wallet address to query (e.g., '0x123...').\n- **Returns**: Formatted text with activity details (chain_id, block_time, tx_hash, type, asset_type, value, value_usd) or an error message.\n- **Supported Chains**: Arbitrum,arbitrum,avalanche_c,base,berachain,bnb,ethereum and more.\n\n### `get_wallet_transactions`\n\n- **Description**: Fetches the transaction history of a specified wallet address on supported EVM and Solana blockchains.\n- **Parameters**:\n  - `wallet_address` (str): The wallet address to query (e.g., '0x123...' for EVM chains or 'DYw8jCT...' for Solana).\n  - `limit` (int, optional): Maximum number of transactions to return (default: 100).\n- **Returns**: Formatted text with transaction details (chain, block_time, tx_hash, from, to, value) or an error message.\n- **Supported Chains**: Solana,arbitrum,arbitrum,avalanche_c,base,berachain,bnb,ethereum and more.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "kukapay",
        "fintech",
        "fintech kukapay",
        "kukapay wallet",
        "wallet inspector"
      ],
      "category": "finance--fintech"
    },
    "kukapay--web3-jobs-mcp": {
      "owner": "kukapay",
      "name": "web3-jobs-mcp",
      "url": "https://github.com/kukapay/web3-jobs-mcp",
      "imageUrl": "",
      "description": "An MCP server that provides AI agents with real-time access to curated Web3 jobs.",
      "stars": 4,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-30T15:32:07Z",
      "readme_content": "# Web3 Jobs MCP Server\n\nAn MCP server that provides AI agents with real-time access to curated Web3 jobs from [web3.career](https://web3.career/), enabling intelligent job discovery and career insights.\n\n![GitHub License](https://img.shields.io/github/license/kukapay/web3-jobs-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n\n## Features\n\n- **Job Query Tool**: Filter Web3 jobs by:\n  - Remote status (`remote=True` for remote-only jobs)\n  - Country (e.g., `\"United States\"`, case-insensitive)\n  - Job tag (e.g., `\"react\"`, `\"blockchain\"`, case-insensitive)\n  - Limit (1–100 jobs, default 50)\n- **Markdown Output**: Returns job listings as a formatted Markdown list with:\n  - Job ID, Title, Company, Location, Remote status\n  - Published At (from `date_epoch`, formatted as `YYYY-MM-DD`)\n  - Apply URL (clickable link to web3.career)\n  - Description (plain text, truncated to 100 characters)\n- **Search Prompt**: Generates user-friendly job search queries based on role and optional location.\n\n## Prerequisites\n\n- Python 3.10+\n- A web3.career API token (request at [web3.career/web3-jobs-api](https://web3.career/web3-jobs-api))\n- [uv](https://github.com/astral-sh/uv) for dependency management (recommended)\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/web3-jobs-mcp.git\n   cd web3-jobs-mcp\n   ```\n\n2. **Install Dependencies**:\n   Using `uv`:\n   ```bash\n   uv sync\n   ```\n   Alternatively, with `pip`:\n   ```bash\n   pip install mcp[cli] python-dotenv\n   ```\n   \n3. **Installing to Claude Desktop**:\n\n    Install the server as a Claude Desktop application:\n    ```bash\n    uv run mcp install cli.py --name \"Web3 Jobs\"\n    ```\n\n    Configuration file as a reference:\n\n    ```json\n    {\n       \"mcpServers\": {\n           \"Web3 Jobs\": {\n               \"command\": \"uv\",\n               \"args\": [ \"--directory\", \"/path/to/web3-jobs-mcp\", \"run\", \"main.py\" ],\n               \"env\": { \"WEB3_CAREER_API_TOKEN\", \"your-api-token\" },  \n           }\n       }\n    }\n    ```\n    Replace `/path/to/web3-jobs-mcp` with your actual installation path, and `your-api-token` with your web3.career API token.\n    \n## Usage\n\n### Running the Server\n\nStart the server in development mode with the MCP Inspector:\n```bash\nuv run mcp dev main.py\n```\nThis opens a web interface for testing tools and prompts.\n\nAlternatively, run directly:\n```bash\nuv run main.py\n```\n\n### Using the `query_jobs` Tool\n\nIn the MCP Inspector or a compatible client (e.g., Claude Desktop), call the `query_jobs` tool:\n\n- **Example 1**: Get 5 remote blockchain jobs:\n  ```bash\n  query_jobs(remote=True, tag=\"blockchain\", limit=5)\n  ```\n\n- **Example 2**: Get 10 jobs in the United States:\n  ```bash\n  query_jobs(country=\"United States\", limit=10)\n  ```\n\n**Sample Output**:\n```markdown\n# Web3 Job Listings\n\n- **Job ID**: 103945\n  - **Title**: Applied Crypto-Economics & Mechanism Design\n  - **Company**: Subzero Labs\n  - **Location**: Remote Remote Remote\n  - **Remote**: Yes\n  - **Published At**: 2025-06-01\n  - **Apply URL**: [Apply](https://web3.career/r/1QTOzATM__UVWHaa)\n  - **Description**: About Rialo We are a pioneering force in the decentralized finance (DeFi) space...\n\n- **Job ID**: 103944\n  - **Title**: Blockchain Engineer\n  - **Company**: CryptoTech\n  - **Location**: Remote\n  - **Remote**: Yes\n  - **Published At**: 2025-05-31\n  - **Description**: Join our team to build cutting-edge blockchain solutions for global clients...\n  - **Apply URL**: [Apply](https://web3.career/r/2XYZabc123)\n\n*Source: web3.career*\n```\n\n### Using the `search_jobs_prompt`\n\nGenerate a search prompt for a specific role and location:\n```bash\n/search_jobs_prompt role=\"blockchain developer\" location=\"remote\"\n```\nThis returns a prompt like:\n```\nFind Web3 jobs for a blockchain developer role in remote. Provide job titles, companies, locations, and application links from web3.career.\n```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "fintech",
        "kukapay",
        "fintech kukapay",
        "jobs mcp",
        "mcp server"
      ],
      "category": "finance--fintech"
    },
    "logotype--fixparser": {
      "owner": "logotype",
      "name": "fixparser",
      "url": "https://gitlab.com/logotype/fixparser",
      "imageUrl": "",
      "description": "FIX Protocol (send orders, market data, etc.) written in TypeScript.",
      "stars": 52,
      "forks": 12,
      "license": "No License",
      "language": "",
      "updated_at": "2025-05-31T12:58:49Z",
      "readme_content": "# fixparser\n\n[Migrated to GitLab https://gitlab.com/logotype/fixparser](https://gitlab.com/logotype/fixparser)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fixparser",
        "typescript",
        "fintech",
        "logotype fixparser",
        "fintech logotype",
        "finance fintech"
      ],
      "category": "finance--fintech"
    },
    "polygon-io--mcp_polygon": {
      "owner": "polygon-io",
      "name": "mcp_polygon",
      "url": "https://github.com/polygon-io/mcp_polygon",
      "imageUrl": "",
      "description": "An MCP server that provides access to [Polygon.io](https://polygon.io/) financial market data APIs for stocks, indices, forex, options, and more.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "mcp_polygon",
        "polygon",
        "fintech polygon",
        "io mcp_polygon",
        "finance fintech"
      ],
      "category": "finance--fintech"
    },
    "shareseer--shareseer-mcp-server": {
      "owner": "shareseer",
      "name": "shareseer-mcp-server",
      "url": "https://github.com/shareseer/shareseer-mcp-server",
      "imageUrl": "",
      "description": "MCP to Access SEC filings, financials & insider trading data in real time using [ShareSeer](https://shareseer.com)",
      "stars": 6,
      "forks": 3,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-10-02T11:39:56Z",
      "readme_content": "# ShareSeer MCP Server\n\nA Model Context Protocol (MCP) server that provides access to ShareSeer's comprehensive SEC filings, insider transactions, and financial data through Claude and other MCP-compatible AI assistants.\n\n## 🚀 Quick Start\n\n### Get Your API Key\n\n1. Sign up at [shareseer.com/signup](https://shareseer.com/signup) (free account)\n2. Go to your [profile page](https://shareseer.com/profile)\n3. Your API key will be displayed (starts with `sk-shareseer-`)\n\n### Claude Desktop Integration\n\n**Remote MCP Server (Recommended)**\n\nAdd to your Claude Desktop configuration:\n\n**Search & Tools →Add Integrations → Add Integration URL:**\n```\nhttps://shareseer.com/mcp?api_key=YOUR_API_KEY_HERE\n```\n\n\n## 📊 Available Tools\n\n### Company Information\n- **`get_company_filings`** - Get recent SEC filings for a specific company\n- **`get_insider_transactions`** - Get insider trading transactions for a company\n\n### Market-Wide Data\n- **`get_recent_filings`** - Get recent SEC filings across all companies\n- **`get_recent_insider_activity`** - Get recent insider trading activity\n\n### Largest Transactions\n- **`get_largest_daily_transactions`** - Get largest daily insider transactions\n- **`get_largest_weekly_transactions`** - Get largest weekly insider transactions\n\n## 💎 Subscription Tiers\n\n| Feature | Free | Premium ($14.99/mo) |\n|---------|------|---------------------|\n| **Rate Limits** | 10/hour, 50/day | 100/hour, 1K/day |\n| **Data History** | 6 months | 10 years |\n| **Company Data** | ✅ Basic info & filings | ✅ All features |\n| **Insider Transactions** | ✅ Limited (3 results) | ✅ Unlimited |\n| **Largest Transactions** | ✅ Current week only | ✅ Historical data |\n| **Pagination** | ❌ | ✅ |\n| **Support** | Community | Email |\n\n[**Sign Up Free**](https://shareseer.com/signup) | [**Upgrade to Premium**](https://shareseer.com/upgrade?source=mcp)\n\n## 🔧 Usage Examples\n\n\n### Get Recent Insider Transactions  \nAsk Claude: *\"Show me recent insider trading for Tesla\"*\n\n### Get Largest Daily Buyers\nAsk Claude: *\"Who made the biggest stock purchases today?\"*\n\n### Get Recent SEC Filings\nAsk Claude: *\"What are the most recent 10-K filings?\"*\n\n### Market Analysis\nAsk Claude: *\"Show me the largest insider selling activity this week\"*\nAsk Claude: *\"Show me the largest insider buying activity this week\"*\n\n## 🌐 Remote vs Local Setup\n\n**✅ Remote MCP (Recommended)**\n- No installation required\n- Always up-to-date\n- Hosted by ShareSeer\n- Just add the integration URL\n\n\n\n### Common Issues\n\n**Claude Desktop doesn't show ShareSeer tools:**\n- Verify your API key is correct and active\n- Make sure the integration URL includes your API key\n- Restart Claude Desktop after adding the integration\n- Check that your ShareSeer account is active\n\n**\"Rate limit exceeded\" error:**\n- Check your current subscription tier limits  \n- Wait for the rate limit window to reset\n- Consider upgrading to Premium for higher limits\n- Spread out your queries over time\n\n**\"Invalid API key\" error:**\n- Verify your API key starts with `sk-shareseer-`\n- Check that your ShareSeer account is active\n- Get a fresh API key from your profile page\n\n### Getting Help\n\n- **Free users**: [GitHub Issues](https://github.com/shareseer/mcp-server/issues)\n- **Premium users**: Email support@shareseer.com\n- **Documentation**: [ShareSeer Claude Integration](https://shareseer.com/claude-integration)\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Support\n\nLove the ShareSeer MCP server? Here's how you can help:\n\n- ⭐ **Star this repo** on GitHub\n- 🐛 **Report bugs** via GitHub Issues  \n- 💡 **Request features** via GitHub Discussions\n- 📢 **Share** with other developers and traders\n- 💎 **Upgrade to Premium** to support continued development\n\n---\n\n**Built with ❤️  by the ShareSeer team**\n\n[Website](https://shareseer.com) • [X](https://x.com/shareseer) • [Email](mailto:contact@shareseer.com)\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "shareseer",
        "fintech",
        "finance",
        "fintech shareseer",
        "shareseer mcp",
        "using shareseer"
      ],
      "category": "finance--fintech"
    },
    "tooyipjee--yahoofinance-mcp": {
      "owner": "tooyipjee",
      "name": "yahoofinance-mcp",
      "url": "https://github.com/tooyipjee/yahoofinance-mcp.git",
      "imageUrl": "",
      "description": "TS version of yahoo finance mcp.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "finance",
        "fintech",
        "yahoofinance",
        "fintech tooyipjee",
        "finance fintech",
        "yahoofinance mcp"
      ],
      "category": "finance--fintech"
    },
    "twelvedata--mcp": {
      "owner": "twelvedata",
      "name": "mcp",
      "url": "https://github.com/twelvedata/mcp",
      "imageUrl": "",
      "description": "Interact with [Twelve Data](https://twelvedata.com) APIs to access real-time and historical financial market data for your AI agents.",
      "stars": 34,
      "forks": 10,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-29T20:21:05Z",
      "readme_content": "\n# Twelve Data MCP Server\n\n## Overview\n\nThe Twelve Data MCP Server provides a seamless integration with the Twelve Data API to access financial market data. It enables retrieval of historical time series, real-time quotes, and instrument metadata for stocks, forex pairs, and cryptocurrencies.\n\n> Note: This server is currently in early-stage development; features and tools may evolve alongside updates to the Twelve Data API.\n\n## Obtaining Your API Key\n\nTo use Twelve Data MCP Server, you must first obtain an API key from Twelve Data:\n\n1. Visit [Twelve Data Sign Up](https://twelvedata.com/register?utm_source=github&utm_medium=repository&utm_campaign=mcp_repo).\n2. Create an account or log in if you already have one.\n3. Navigate to your Dashboard and copy your API key.\n\nImportant: Access to specific endpoints or markets may vary depending on your Twelve Data subscription plan.\n\n## U-tool\nu-tool is an AI-powered universal router for the Twelve Data API that transforms how you access financial data. Instead of navigating 100+ individual endpoints and complex documentation, simply describe what you need in plain English.\n\nHow it works:\n🧠 Natural Language Processing: Understands your request in conversational English\n🔍 Smart Routing: Uses vector search to find the most relevant endpoints from Twelve Data's entire API catalog\n🎯 Intelligent Selection: Leverages OpenAI GPT-4o to choose the optimal method and generate correct parameters\n⚡ Automatic Execution: Calls the appropriate endpoint and returns formatted results\n\nWhat you can ask:\n📈 \"Show me Apple stock performance this week\"\n📊 \"Calculate RSI for Bitcoin with 14-day period\" \n💰 \"Get Tesla's financial ratios and balance sheet\"\n🌍 \"Compare EUR/USD exchange rates over 6 months\"\n🏦 \"Find top-performing tech ETFs\"\n\nSupported data categories:\n- Market data & quotes • Technical indicators (100+)\n- Fundamental data & financials • Currencies & crypto\n- Mutual funds & ETFs • Economic calendars & events\n\nOne tool, entire Twelve Data ecosystem. No API documentation required.\n\n## Installation\n\n### Using **UV** (recommended)\n\nDirectly run without local installation using [`uvx`](https://docs.astral.sh/uv/guides/tools/):\n\n```bash\nuvx mcp-server-twelve-data --help\n```\n\n### Using **pip**\n\nInstall the server via pip:\n\n```bash\npip install mcp-server-twelve-data\npython -m mcp_server_twelve_data --help\n```\n\n## Configuration\n\n### Claude Desktop integration\n\nAdd one of the following snippets to your `claude_desktop_config.json`:\n(1) local stdio server configured with utool\n```json\n{\n  \"mcpServers\": {\n    \"twelvedata\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-twelve-data@latest\", \"-k\", \"YOUR_TWELVE_DATA_API_KEY\", \"-u\", \"YOUR_OPEN_AI_APIKEY\"]\n    }\n  }\n}\n```\n\n(2) local stdio server only with 10 the most popular endpoints\n```json\n{\n  \"mcpServers\": {\n    \"twelvedata\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-twelve-data@latest\", \"-k\", \"YOUR_TWELVE_DATA_API_KEY\", \"-n\", \"10\"]\n    }\n  }\n}\n```\n\n(3) twelve data remote mcp server\n\n```json\n{\n  \"mcpServers\": {\n    \"twelvedata-remote\": {\n      \"command\": \"npx\",\n      \"args\":    [\n        \"mcp-remote\", \"https://mcp.twelvedata.com/mcp\",\n        \"--header\",\n        \"Authorization:${AUTH_HEADER}\",\n        \"--header\",\n        \"X-OpenAPI-Key:${OPENAI_API_KEY}\"\n      ],\n      \"env\": {\n        \"AUTH_HEADER\": \"apikey YOUR_TWELVE_DATA_API_KEY\",\n        \"OPENAI_API_KEY\": \"YOUR_OPENAI_API_KEY\"\n      }\n    }\n  }\n}\n```\n\nSee how easy it is to connect Claude Desktop to Twelve Data MCP Server:\n\n![Example usage with Claude Desktop](./example.gif)\n\n### VS Code integration\n\n#### Automatic setup (with UV)\n\n[![Install with UV in VS Code](https://img.shields.io/badge/VS_Code-UV-0098FF?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=twelvedata&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22mcp-server-twelve-data%22%2C%22-k%22%2C%22YOUR_TWELVE_DATA_API_KEY%22%2C%22-u%22%2C%22YOUR_OPENAI_API_KEY%22%5D%7D)\n\n#### Manual setup\n\nFor manual configuration, add to your **User Settings (JSON)**:\n\n```json\n{\n  \"mcp\": {\n    \"servers\": {\n      \"twelvedata\": {\n          \"command\": \"uvx\",\n          \"args\": [\n            \"mcp-server-twelve-data\",\n            \"-k\", \"YOUR_TWELVE_DATA_API_KEY\",\n            \"-u\", \"YOUR_OPENAI_API_KEY\"\n          ]\n        }\n    }\n  }\n}\n```\n\n## Debugging\n\nUse the MCP Inspector for troubleshooting:\n\n```bash\nnpx @modelcontextprotocol/inspector uvx mcp-server-twelve-data@latest -k YOUR_TWELVE_DATA_API_KEY\n```\n\n## Development guide\n\n1. **Local testing:** Utilize the MCP Inspector as described in **Debugging**.\n2. **Claude Desktop:**: Update `claude_desktop_config.json` to reference local source paths.\n\n## Docker usage\n\nBuild and run the server using Docker:\n\n```bash\ndocker build -t mcp-server-twelve-data .\n\ndocker run --rm mcp-server-twelve-data \\\n  -k YOUR_TWELVE_DATA_API_KEY \\\n  -u YOUR_OPENAI_API_KEY \\\n  -t streamable-http\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. See the [LICENSE](../../LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "finance",
        "fintech",
        "financial",
        "fintech twelvedata",
        "finance fintech",
        "market data"
      ],
      "category": "finance--fintech"
    },
    "wowinter13--solscan-mcp": {
      "owner": "wowinter13",
      "name": "solscan-mcp",
      "url": "https://github.com/wowinter13/solscan-mcp",
      "imageUrl": "",
      "description": "An MCP tool for querying Solana transactions using natural language with Solscan API.",
      "stars": 31,
      "forks": 12,
      "license": "No License",
      "language": "Rust",
      "updated_at": "2025-10-03T13:16:31Z",
      "readme_content": "# 🟣🔎 solscan-mcp: A Solscan API MCP Server in Rust\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/wowinter13/solscan-mcp)](https://archestra.ai/mcp-catalog/wowinter13__solscan-mcp)\n\n## Overview\n\nA Model Context Protocol (MCP) server for interacting with the Solscan Pro API for Solana blockchain data. This server provides tools to query token information, account activities, and transaction details on the Solana blockchain via Large Language Models.\n\n\n## Examples\n\nSimple prompts: \n\n\nhttps://github.com/user-attachments/assets/2f2586b2-ed9d-4d4d-bda4-0154b9b98cde\n\n\n\n\n_You can also use it for much more complex queries, like analyzing criminal activity combining multiple MCPs and correct context._\n\n_For example, upload a csv list of suspected addresses, then using perplexity-mcp research tool LLM will add info to context window on how investigators define criminal wallets based on their activity (mev, dusting, poisoning, sandwiched, etc) -> solscan-mcp will use this context to investigate the wallets and provide a report._\n\n\n## Features\n\nFor detailed documentation of all available tools, see [TOOLS.md](TOOLS.md).\n\n## Installation\n\nPrerequisites:\n- Rust toolchain (install via [rustup](https://rustup.rs/)) – for regular usage\n- Docker – for Docker usage\n- Solscan Pro API key. You can obtain one from [Solscan APIs](https://solscan.io/apis).\n\n### Regular\n\n```bash\ncargo install solscan-mcp\n\nwhere solscan-mcp # -> /Users/$username/.cargo/bin/solscan-mcp\n```\n\nAdd the following to your `claude_desktop_config.json` or `claude_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"solscan-mcp\": {\n      \"command\": \"/Users/$username/.cargo/bin/solscan-mcp\",\n      \"args\": [],\n      \"env\": {\n        \"SOLSCAN_API_KEY\": \"your_solscan_api_key\"\n      }\n    }\n  }\n}\n```\n\n### Docker\n\nWIP, will be available soon.\n\n\n\n## Code quality Notes\n\nI treat MCPs like useful scripts, as the structure of the APIs they rely on can always change. So, api.rs could definitely be split into multiple APIs based on Solscan namespaces. My main goal was to make it work and be easy to maintain, while ensuring errors are ignored without breaking the flow (unlike many MCPs I've tested in Python/TS, which crash painfully when they don't gracefully handle simple errors).\n\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "solscan",
        "solana",
        "querying",
        "solscan mcp",
        "querying solana",
        "solscan api"
      ],
      "category": "finance--fintech"
    },
    "zolo-ryan--MarketAuxMcpServer": {
      "owner": "zolo-ryan",
      "name": "MarketAuxMcpServer",
      "url": "https://github.com/Zolo-Ryan/MarketAuxMcpServer",
      "imageUrl": "",
      "description": "MCP server for comprehensive market and financial news search with advanced filtering by symbols, industries, countries, and date ranges.",
      "stars": 3,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T11:40:10Z",
      "readme_content": "# Marketaux MCP Server\nA MCP Server Implementation that integrates the [Marketaux api](https://www.marketaux.com/documentation) providing search based on entity, countries, industries, symbols etc.\n\n### Tools\n\n- market_aux_news_search\n    - Execute the search using market aux search all api\n    - inputs:\n      - symbols\n      - entity_types\n      - industries\n      - countries\n      - language\n      - published_before\n      - published_after\n      - published_on\n\n\n### Configuration\n#### Getting an API key\n\n1. Sign up for a [Free account on Marketaux](https://www.marketaux.com/register)\n2. Verify your email account and go to dashboard\n3. Get your api token from there\n\n#### Setting up MCP server\n\nAdd this in your `claude_desktop_config.json` file\n\n```json\n{\n    \"mcpServers\": {\n        \"newsmcp\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"C:\\\\Path\\\\To\\\\Your\\\\project\\\\NewsMCP\\\\build\\\\index.js\"\n            ],\n            \"env\": {\n                \"MARKETAUX_API_KEY\": \"Your-API-TOKEN\"\n            }\n        }\n    }\n}\n```\n\n### Contributing\n\nContributions are welcomed! Please free to submit a PR.\n\n> Only the Free Tier endpoint is implemented.\n\n> Added to [awesome-mcp-servers](https://github.com/punkpeye/awesome-mcp-servers/pull/925)\n### Disclaimer\n\nThis is not officially associated with Marketaux api. It is a third party implementation of the api with a MCP Server.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "marketauxmcpserver",
        "fintech",
        "market",
        "market financial",
        "financial news",
        "finance fintech"
      ],
      "category": "finance--fintech"
    }
  }
}