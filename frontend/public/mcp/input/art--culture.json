{
  "category": "art--culture",
  "categoryDisplay": "Art & Culture",
  "description": "Access and explore art collections, cultural heritage, and museum databases. Enables AI models to search and analyze artistic and cultural content.",
  "totalRepositories": 9,
  "repositories": {
    "diivi--aseprite-mcp": {
      "owner": "diivi",
      "name": "aseprite-mcp",
      "url": "https://github.com/diivi/aseprite-mcp",
      "imageUrl": "",
      "description": "MCP server using the Aseprite API to create pixel art",
      "stars": 87,
      "forks": 9,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T22:12:08Z",
      "readme_content": "# Aseprite MCP Tools\n\nA Python module that serves as an MCP server for interacting with the Aseprite API\n\nDemo where Cursor draws a cloud in aseprite using the MCP:\n\nhttps://github.com/user-attachments/assets/572edf75-ab66-4700-87ee-d7d3d196c597\n\n## Docker Usage\n\n### Quick Start\n\nBuild and run the Docker image:\n```bash\ndocker build -t aseprite-mcp:latest .\ndocker run -it --rm aseprite-mcp:latest\n```\n\nOr use the provided build scripts:\n- **Linux/macOS**: `chmod +x build-docker.sh && ./build-docker.sh`\n- **Windows**: `.\\build-docker.ps1`\n\n### Using Docker Compose\n```bash\n# Production\ndocker-compose up aseprite-mcp\n\n# Development mode\ndocker-compose --profile dev up aseprite-mcp-dev\n```\n\nSee [DOCKER.md](DOCKER.md) for detailed Docker setup instructions.\n\n### Optional: Install Aseprite via Steam\n\nTo have the container install Aseprite via SteamCMD at startup, provide Steam credentials:\n\n```powershell\n# Create a .env with STEAM_USERNAME/STEAM_PASSWORD (and optional STEAM_GUARD_CODE)\n# Then\ndocker run --rm -i --env-file .env aseprite-mcp:latest\n```\n\nIf installed, the binary will be at `/opt/steamapps/common/Aseprite/aseprite` and `ASEPRITE_PATH` will be picked up automatically.\n\n## Local Installation\n\n### Prerequisites\n- Python 3.13+\n- `uv` package manager\n\n### Installation:\n```json\n{\n  \"mcpServers\": {\n      \"aseprite\": {\n          \"command\": \"/opt/homebrew/bin/uv\",\n          \"args\": [\n              \"--directory\",\n              \"/path/to/repo\",\n              \"run\",\n              \"-m\",\n              \"aseprite_mcp\"\n          ]\n      }\n  }\n}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "art",
        "artistic",
        "ai",
        "explore art",
        "pixel art",
        "artistic cultural"
      ],
      "category": "art--culture"
    },
    "djalal--quran-mcp-server": {
      "owner": "djalal",
      "name": "quran-mcp-server",
      "url": "https://github.com/djalal/quran-mcp-server",
      "imageUrl": "",
      "description": "[raveenb/fal-mcp-server](https://github.com/raveenb/fal-mcp-server) üêç ‚òÅÔ∏è - Generate AI images, videos, and music using Fal.ai models (FLUX, Stable Diffusion, MusicGen) directly in Claude Desktop",
      "stars": 50,
      "forks": 12,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T22:12:12Z",
      "readme_content": "# MCP Server for Quran.com API\n\nMCP server to interact with Quran.com corpus via the official [REST API v4](https://api-docs.quran.com/docs/content_apis_versioned/4.0.0/content-apis).\n\n## Overview\n\nThis is a Model Context Protocol (MCP) server generated from the [OpenAPI specification](v4.json).\n\n## Endpoints\n\nThe following endpoints from the API have been made available as tools, that LLMs can use via compatible clients.\n\n### Chapters\n* GET /chapters - List Chapters\n* GET /chapters/{id} - Get Chapter\n* GET /chapters/{chapter_id}/info - Get Chapter Info\n\n### Verses\n* GET /verses/by_chapter/{chapter_number} - Get verses by Chapter / Surah number\n* GET /verses/by_page/{page_number} - Get all verses of a specific Madani Mushaf page\n* GET /verses/by_juz/{juz_number} - Get verses by Juz number\n* GET /verses/by_hizb/{hizb_number} - Get verses by Hizb number\n* GET /verses/by_rub/{rub_el_hizb_number} - Get verses by Rub el Hizb number\n* GET /verses/by_key/{verse_key} - Get verse by key\n* GET /verses/random - Get a random verse\n\n### Juzs\n* GET /juzs - Get list of all juzs\n\n### Search\n* GET /search - Search the Quran for specific terms\n\n### Translations\n* GET /resources/translations - Get list of available translations\n* GET /resources/translations/{translation_id}/info - Get information of a specific translation\n\n### Tafsirs\n* GET /resources/tafsirs - Get list of available tafsirs\n* GET /resources/tafsirs/{tafsir_id}/info - Get the information of a specific tafsir\n* GET /quran/tafsirs/{tafsir_id} - Get a single tafsir\n\n### Audio\n* GET /resources/chapter_reciters - List of Chapter Reciters\n* GET /resources/recitation_styles - Get the available recitation styles\n\n### Languages\n* GET /resources/languages - Get all languages\n\n## Setup\n\n### Requirements\n\n* Node.js 22+\n* Docker\n\n### Building the Docker Image\n\nBefore using the Docker-based production mode, you need to build the Docker image:\n\n```bash\n# Build the Docker image\ndocker build -t quran-mcp-server .\n```\n\n## Claude Desktop Integration\n\nTo use this MCP server with Claude Desktop, add the following configuration to your `claude_desktop_config.json` file (typically located at `~/Library/Application Support/Claude/claude_desktop_config.json` on macOS or `%APPDATA%\\Claude\\claude_desktop_config.json` on Windows):\n\n### Docker-based Production Mode\n\n```json\n{\n  \"mcpServers\": {\n    \"quran-api\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"--init\", \"-e\", \"API_KEY=your_api_key_if_needed\", \"-e\", \"VERBOSE_MODE=true\", \"quran-mcp-server\"],\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n### Production Mode (Node.js)\n\n```json\n{\n  \"mcpServers\": {\n    \"quran-api\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/quran-mcp-server/dist/src/server.js\"],\n      \"env\": {\n        \"API_KEY\": \"your_api_key_if_needed\",\n        \"VERBOSE_MODE\": \"true\" // Set to \"true\" to enable verbose logging\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n### Development Mode\n\n```json\n{\n  \"mcpServers\": {\n    \"quran-api\": {\n      \"command\": \"npx\",\n      \"args\": [\"ts-node\", \"/path/to/quran-mcp-server/src/server.ts\"],\n      \"env\": {\n        \"API_KEY\": \"your_api_key_if_needed\",\n        \"VERBOSE_MODE\": \"true\" // Set to \"true\" to enable verbose logging\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n**Important Notes:**\n- Replace `/path/to/quran-mcp-server` with the actual path to this repository on your system\n- You'll need to build the project first with `npm run build` or `docker build -t quran-mcp-server .` if using the production mode configuration\n- Replace `your_api_key_if_needed` with an actual API key if required by the Quran.com API\n- If you already have other MCP servers configured, add this configuration to the existing `mcpServers` object\n- After updating the configuration, restart Claude Desktop for the changes to take effect\n\n## Environment Variables\n\n* `API_KEY`: API key for authentication\n* `PORT`: Server port (default: 8000 or 3000 depending on language)\n* `VERBOSE_MODE`: Set to 'true' to enable verbose logging of API requests and responses (default: false)\n\n## Verbose Mode\n\nWhen `VERBOSE_MODE` is set to 'true', the server will log detailed information about API requests and responses to the console. This is useful for debugging and monitoring API interactions.\n\nThe verbose logging includes:\n\n* **Requests**: Logs the tool name and arguments for each incoming request\n* **Responses**: Logs the tool name and result data for each response\n* **Errors**: Logs detailed error information including error name, message, and stack trace when available\n\nEach log entry is timestamped and prefixed with the log type (REQUEST, RESPONSE, or ERROR) for easy identification.\n\n## Testing\n\n```bash\n# Run tests\nnpm test\n```\n\n## License\n\nThis project is licensed under the MIT License.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "artistic",
        "art",
        "ai images",
        "explore art",
        "artistic cultural"
      ],
      "category": "art--culture"
    },
    "drakonkat--wizzy-mcp-tmdb": {
      "owner": "drakonkat",
      "name": "wizzy-mcp-tmdb",
      "url": "https://github.com/drakonkat/wizzy-mcp-tmdb",
      "imageUrl": "",
      "description": "A MCP server for The Movie Database API that enables AI assistants to search and retrieve movie, TV show, and person information.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-30T10:59:23Z",
      "readme_content": "# wizzy-mcp-tmdb\n\n[![Build Status](https://img.shields.io/github/actions/workflow/status/drakonkat/wizzy-mcp-tmdb/ci.yml)](https://github.com/drakonkat/wizzy-mcp-tmdb/actions)\n\n[![Coverage](https://img.shields.io/codecov/c/github/drakonkat/wizzy-mcp-tmdb)](https://codecov.io/gh/drakonkat/wizzy-mcp-tmdb)\n\n## Project Overview and Purpose\n\nThe wizzy-mcp-tmdb project is an MCP (Model Context Protocol) server implemented in JavaScript that provides tools to search and retrieve information from The Movie Database (TMDB). It allows AI clients to access movie, TV show, and person data through a standardized protocol.\n\n## Key Features\n\n- **Search Movies**: Perform multi-search across movies, TV shows, and people using the `search_tmdb` tool.\n- **Get Details**: Fetch detailed information for specific items using the `get_tmdb_details` tool.\n- **Trending Content**: Retrieve trending content across all media types with the `trending_all` tool.\n\n## Installation\n\n### Prerequisites\n\n- Node.js version 18 or higher (required for global fetch support)\n- A TMDB API key (Bearer token) from your admin, used with the TNL TMDB proxy (production-api.tnl.one)\n\n### Setup\n\n1. Clone the repository and navigate to the project directory.\n\n2. Install dependencies:\n\n   ```bash\n   npm install\n   ```\n\n3. Set up your TMDB API key as an environment variable:\n\n   - On Windows PowerShell:\n     ```powershell\n     $env:TMDB_AUTH_TOKEN=\"YOUR_TNL_PROXY_BEARER_TOKEN\"\n     ```\n\n   - On macOS/Linux:\n     ```bash\n     export TMDB_AUTH_TOKEN=\"YOUR_TNL_PROXY_BEARER_TOKEN\"\n     ```\n\n## Usage\n\n### Starting the MCP Server\n\nTo start the server:\n\n```bash\nnpm start\n```\n\nThe server communicates over stdio and should be configured in your MCP-compatible client (e.g., IDE or chat client) with the command `node mcp-tmdb-server.js` and the `TMDB_AUTH_TOKEN` environment variable.\n\n### MCP Integration Examples\n\nHere are code snippets showing how to integrate with the MCP tools:\n\n#### Search for Movies\n\n```javascript\n// Example MCP tool call for searching\n{\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"search_tmdb\",\n    \"arguments\": {\n      \"query\": \"dune\",\n      \"page\": 1,\n      \"language\": \"en-US\",\n      \"include_adult\": false\n    }\n  }\n}\n```\n\n#### Get Movie Details\n\n```javascript\n// Example MCP tool call for getting details\n{\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_tmdb_details\",\n    \"arguments\": {\n      \"type\": \"movie\",\n      \"id\": 438631,\n      \"append\": \"credits,images\"\n    }\n  }\n}\n```\n\n#### Get Trending Content\n\n```javascript\n// Example MCP tool call for trending content\n{\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"trending_all\",\n    \"arguments\": {\n      \"time_window\": \"day\",\n      \"page\": 1,\n      \"language\": \"en-US\"\n    }\n  }\n}\n```\n\n## MCP Client Integration\n\nPer integrare questo MCP server nel tuo client MCP (come un IDE o un client di chat compatibile), segui questi passi:\n\n1. Installa il pacchetto npm se necessario:\n\n   ```bash\n   npm install -g wizzy-mcp-tmdb\n   ```\n\n2. Crea o aggiorna il file `mcp.json` nel tuo client MCP con la seguente configurazione:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"tmdb\": {\n         \"command\": \"npx\",\n         \"args\": [\"wizzy-mcp-tmdb\"],\n         \"env\": {\n           \"TMDB_AUTH_TOKEN\": \"YOUR_TNL_PROXY_BEARER_TOKEN\"\n         },\n         \"alwaysAllow\": [\n           \"get_watch_providers\",\n           \"discover_tv\",\n           \"discover_by_provider\"\n         ]\n       }\n     }\n   }\n   ```\n\n   Nota: Il `TMDB_AUTH_TOKEN` pu√≤ essere impostato a un valore casuale per ora, poich√© le chiamate API TMDB sono gratuite e non richiedono autenticazione obbligatoria.\n\n## Testing Strategy\n\nThe project uses Jest for comprehensive testing, including:\n\n- **Unit Tests**: Validate individual handler functions, input validation, and response formatting (see `tests/unit/handlers.test.js`).\n- **Integration Tests**: Test API interactions with mocked responses, error handling, and network failures (see `tests/integration/api.test.js`).\n- **Protocol Tests**: Ensure MCP protocol compliance, including tool listing and calling (see `tests/protocol/mcp.test.js`).\n\nRun the test suite with:\n\n```bash\nnpm test\n```\n\nFor watch mode:\n\n```bash\nnpm run test:watch\n```\n\n## Project Structure\n\n```\nwizzy-mcp-tmdb/\n‚îú‚îÄ‚îÄ mcp-tmdb-server.js          # Main MCP server implementation\n‚îú‚îÄ‚îÄ package.json                # Project configuration and dependencies\n‚îú‚îÄ‚îÄ MCP_GUIDE.md                # Detailed MCP integration guide\n‚îú‚îÄ‚îÄ babel.config.cjs            # Babel configuration for Jest\n‚îú‚îÄ‚îÄ tests/\n‚îÇ   ‚îú‚îÄ‚îÄ unit/\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ handlers.test.js    # Unit tests for handlers\n‚îÇ   ‚îú‚îÄ‚îÄ integration/\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ api.test.js         # Integration tests for API calls\n‚îÇ   ‚îî‚îÄ‚îÄ protocol/\n‚îÇ       ‚îî‚îÄ‚îÄ mcp.test.js         # MCP protocol compliance tests\n‚îî‚îÄ‚îÄ tests/fixtures/             # Mock data for tests\n    ‚îú‚îÄ‚îÄ movieDetails.json\n    ‚îú‚îÄ‚îÄ searchMultiResponse.json\n    ‚îî‚îÄ‚îÄ trendingAllResponse.json\n```\n\n## Contributing\n\nWe welcome contributions! Please follow these guidelines:\n\n1. Fork the repository.\n2. Create a feature branch.\n3. Make your changes and add tests.\n4. Ensure all tests pass.\n5. Submit a pull request.\n\n## License\n\nThis project is licensed under the MIT License. See the LICENSE file for details.\n\n## Acknowledgments\n\n- Thanks to The Movie Database (TMDB) for providing the API.\n- Built using the Model Context Protocol SDK.\n\n## Contact\n\nFor questions or support, please open an issue on GitHub.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "museum",
        "ai",
        "tmdb",
        "movie database",
        "museum databases",
        "art collections"
      ],
      "category": "art--culture"
    },
    "mikechao--metmuseum-mcp": {
      "owner": "mikechao",
      "name": "metmuseum-mcp",
      "url": "https://github.com/mikechao/metmuseum-mcp",
      "imageUrl": "",
      "description": "Metropolitan Museum of Art Collection API integration to search and display artworks in the collection.",
      "stars": 13,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-29T15:45:19Z",
      "readme_content": "[![themet logo](https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/The_Metropolitan_Museum_of_Art_Logo.svg/250px-The_Metropolitan_Museum_of_Art_Logo.svg.png)](https://www.metmuseum.org/)\n\n# Met Museum MCP Server\n\nA Model Context Protocol (MCP) server that provides access to the Metropolitan Museum of Art Collection through natural language interactions. This server allows AI models to search The Met's art collection and have art works available as a Resource.\n\n<a href=\"https://glama.ai/mcp/servers/@mikechao/metmuseum-mcp\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@mikechao/metmuseum-mcp/badge\" alt=\"Met Museum MCP Server\" /></a>\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/mikechao-metmuseum-mcp-badge.png)](https://mseep.ai/app/mikechao-metmuseum-mcp)\n\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/ccc75a48-9b33-4a9a-8ef7-8dc3848db263)\n\n## Features\n\nThis server provides AI models the following tools to interact with the art collection of The Met\n\n### 1. List Departments (list-departments)\n\nLists all the valid departments at The Met\n\n- Inputs:\n  - None\n- Output:\n  ```\n  Department ID: 1, Display Name: American Decorative Arts\n  Department ID: 3, Display Name: Ancient Near Eastern Art\n  ...\n  ```\n\n### 2. Search Museum Objects (search-museum-objects)\n\nSearch for various objects in The Met based on the inputs.\n\n- Inputs:\n  - `q` (string): The search term e.g. sunflowers\n  - `hasImages` (boolean, optional, default: false): Only search for objects with images\n  - `title` (boolean, optional, default: false): Returns objects that match the query, specifically searching against the title field for objects.\n  - `departmentId` (number, optional): Returns objects that are a part of a specific department.\n- Outputs:\n\n  ```\n  Total objects found: 54\n  Object IDs: 436532, 789578, 436840, 438722,...\n  ```\n\n### 3. Get Museum Objects (get-museum-object)\n\nGet a specific object from The Met containing all open access data about that object, including its image (if the image is available under Open Access).\n\nIf there is an image it is added to the Resource of the server via the title of the object.\n\n- Inputs:\n  - `objectId` (number): The id of the object to retrieve\n  - `returnImage` (boolean, optional, default: true): Whether to return the image (if available) of the object and add it to the server resources\n- Outputs:\n  ```\n  Title: Self-Portrait with a Straw Hat (obverse: The Potato Peeler)\n  Artist: Vincent van Gogh\n  Artist Bio: Dutch, Zundert 1853‚Äì1890 Auvers-sur-Oise\n  Department: European Paintings\n  Credit Line: Bequest of Miss Adelaide Milton de Groot (1876-1967), 1967\n  Medium: Oil on canvas\n  Dimensions: 16 x 12 1/2 in. (40.6 x 31.8 cm)\n  Primary Image URL: https://images.metmuseum.org/CRDImages/ep/original/DT1502_cropped2.jpg\n  Tags: Men, Self-portraits\n  ```\n  If returnImage is true\n  ```\n  **base64 encoding of jpeg image**\n  ```\n\n### Usage with Claude Desktop\n\n## Via Desktop Extension (DXT)\n\n1. Download the `dxt` file from the [Releases](https://github.com/mikechao/metmuseum-mcp/releases)\n2. Open it with Claude Desktop\n   or\n   Go to File -> Settings -> Extensions and drag the .DXT file to the window to install it\n\n## Via npx\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcp-servers\": {\n    \"met-museum\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"metmuseum-mcp\"\n      ]\n    }\n  }\n}\n```\n\n### Usage with LibreChat\n\nAdd the following in your `librechat.yaml`\n\n```yaml\nmcpServers:\n  metmuseum:\n    command: npx\n    args:\n      - -y\n      - metmuseum-mcp\n```\n\n## Example queries\n\nHere some questions you can ask the AI model when this server in connected:\n\n```\nCan you show me a few painting from the Asian Art department?\nCan you find the painting titled \"Corridor in the Asylum\"?\nCan you find any art that has \"cat\" in the title or features \"cats\"?\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n\n## Disclaimer\n\nThis library is not officially associated with The Metropolitan Museum of Art in New York. It is a third-party implementation of the [The Metropolitan Museum of Art Collection API](https://metmuseum.github.io/) with a MCP Server.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "museum",
        "artworks",
        "art",
        "museum art",
        "museum databases",
        "art collections"
      ],
      "category": "art--culture"
    },
    "omni-mcp--isaac-sim-mcp": {
      "owner": "omni-mcp",
      "name": "isaac-sim-mcp",
      "url": "https://github.com/omni-mcp/isaac-sim-mcp",
      "imageUrl": "",
      "description": "A MCP Server and an extension enables natural language control of NVIDIA Isaac Sim, Lab, OpenUSD and etc.",
      "stars": 84,
      "forks": 20,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-16T08:43:23Z",
      "readme_content": "# Isaac Sim MCP Extension and MCP Server\n\nThe MCP Server and its extension leverage the Model Context Protocol (MCP) framework to enable natural language control of NVIDIA Isaac Sim, transforming conversational AI inputs into precise simulation manipulation. This expansion bridges the MCP ecosystem with embodied intelligence applications.\n\n## Features\n\n- Natural language control of Isaac Sim\n- Dynamic robot positioning and movement\n- Custom lighting and scene creation\n- Advanced robot simulations with obstacle navigation\n- Interactive code preview before execution\n\n## Requirements\n\n- NVIDIA Isaac Sim 4.2.0 or higher\n- Python 3.9+\n- Cursor AI editor for MCP integration\n\n## **Mandatory** Pre-requisite\n\n- Install uv/uvx: [https://github.com/astral-sh/uv](https://github.com/astral-sh/uv)\n- Install mcp[cli] to base env: [uv pip install \"mcp[cli]\"](https://pypi.org/project/mcp/)\n\n## Installation\n\n```bash\ncd ~/Documents\ngit clone https://github.com/omni-mcp/isaac-sim-mcp\n```\n\n### Install and Enable Extension\n\nIsaac Sim extension folder should point to your project folder:\n- Extension location: `~/Documents/isaac-sim-mcp` \n- Extension ID: `isaac.sim.mcp_extension`\n\n```bash\n# Enable extension in Isaac Simulation\n# cd to your Isaac Sim installation directory\n# You can change assets root to local with --/persistent/isaac/asset_root/default=\"<your asset location>\"\n# By default it is an AWS bucket, e.g. --/persistent/isaac/asset_root/default=\"/share/Assets/Isaac/4.2\"\n# Setup API KEY for Beaver3d and NVIDIA\nexport BEAVER3D_MODEL=<your beaver3d model name>\nexport export ARK_API_KEY=<Your Bearver3D API Key>\nexport NVIDIA_API_KEY=\"<your nvidia api key  and apply it from https://ngc.nvidia.com/signout>\"\n\ncd ~/.local/share/ov/pkg/isaac-sim-4.2.0\n./isaac-sim.sh --ext-folder /home/ubuntu/Documents/isaac-sim-mcp/ --enable isaac.sim.mcp_extension \n```\n\nVerify the extension starts successfully. The output should look like:\n\n```\n[7.160s] [ext: isaac.sim.mcp_extension-0.1.0] startup\ntrigger  on_startup for:  isaac.sim.mcp_extension-0.1.0\nsettings:  {'envPath': '/home/ubuntu/.local/share/ov/data/Kit/Isaac-Sim/4.2/pip3-envs/default', 'archiveDirs': {}, 'installCheckIgnoreVersion': False, 'allowOnlineIndex': True, 'tryUpgradePipOnFirstUse': False}\nServer thread startedIsaac Sim MCP server started on localhost:8766\n```\n\nThe extension should be listening at **localhost:8766** by default.\n\n\n\n### Install MCP Server\n\n1. Go to terminal and run, make sure mcp server could start sucessfully at terminal with base venv.\n   ```\n   uv pip install \"mcp[cli]\"\n   uv run /home/ubuntu/Documents/isaac-sim-mcp/isaac_mcp/server.py\n   ```\n2. Start Cursor and open the folder `~/Documents/isaac-sim-mcp`\n3. Go to Cursor preferences, choose MCP and add a global MCP server:\n\n```json\n{\n    \"mcpServers\": {\n        \"isaac-sim\": {\n            \"command\": \"uv run /home/ubuntu/Documents/isaac-sim-mcp/isaac_mcp/server.py\"\n        }\n    }\n}\n```\n\n### Development Mode\n\nTo develop the MCP Server, start the MCP inspector:\n\n```bash\nuv run mcp dev ~/Documents/isaac-sim-mcp/isaac_mcp/server.py\n```\n\nYou can visit the debug page through http://localhost:5173\n\n## Example Prompts for Simulation\nNotice: Switch to Agent mode in top left of Chat dialog before you type prompt and choose sonnet 3.7 for better coding.\n\n### Robot Party\n```\n# Create robots and improve lighting\ncreate  3x3 frankas robots in these current stage across location [3, 0, 0] and [6, 3, 0]\nalways check connection with get_scene_info before execute code.\nadd more light in the stage\n\n\n# Add specific robots at positions\ncreate a g1 robot at [3, 9, 0]\nadd Go1 robot at location [2, 1, 0]\nmove go1 robot to [1, 1, 0]\n```\n\n### Factory Setup\n```\n# Create multiple robots in a row\nacreate  3x3 frankas robots in these current stage across location [3, 0, 0] and [6, 3, 0]\nalways check connection with get_scene_info before execute code.\nadd more light in the stage\n\n\n```\n### Vibe Coding from scratch\n```\nreference to g1.py to create an new g1 robot simulation and allow robot g1 walk straight  from [0, 0, 0] to [3, 0, 0] and [3, 3, 0]\ncreate more obstacles in the stage\n\n```\n### Gen3D with beaver3d model support\n\n```\nUse following images to generate beaver 3d objects and place them into a grid area across [0, 0, 0] to [40, 40, 0] with scale [3, 3, 3]\n\n<your image url here, could be multiple images urls>\n```\n\n### USD search\n```\nsearch a rusty desk and place it at [0, 5, 0] with scale [3, 3, 3]\n```\n\n## MCP Tools\n\nThe Isaac Sim MCP Extension provides several specialized tools that can be accessed through natural language in Cursor AI. These tools enable you to control and manipulate NVIDIA Isaac Sim with simple commands:\n\n### Connection and Scene Management\n\n- **get_scene_info** - Pings the Isaac Sim Extension Server to verify connection status and retrieve basic scene information. Always use this first to ensure the connection is active.\n\n### Physics and Environment Creation\n\n- **create_physics_scene** - Creates a physics scene with configurable parameters:\n  - `objects`: List of objects to create (each with type and position)\n  - `floor`: Whether to create a ground plane (default: true)\n  - `gravity`: Vector defining gravity direction and magnitude (default: [0, -0.981, 0])\n  - `scene_name`: Name for the scene (default: \"physics_scene\")\n\n### Robot Creation and Control\n\n- **create_robot** - Creates a robot in the scene at a specified position:\n  - `robot_type`: Type of robot to create (options: \"franka\", \"jetbot\", \"carter\", \"g1\", \"go1\")\n  - `position`: [x, y, z] position coordinates\n\n### Omniverse Kit and Scripting\n\n- **omni_kit_command** - Executes an Omni Kit command:\n  - `command`: The Omni Kit command to execute (e.g., \"CreatePrim\")\n  - `prim_type`: The primitive type for the command (e.g., \"Sphere\")\n\n- **execute_script** - Executes arbitrary Python code in Isaac Sim:\n  - `code`: Python code to execute\n\n### Usage Best Practices\n\n1. Always check connection with `get_scene_info` before executing any commands\n2. Initialize a physics scene with `create_physics_scene` before adding robots\n3. Use `create_robot` for standard robot placement before trying custom scripts\n4. For complex simulations, use `execute_script` with proper async patterns\n5. Preview code in chat before execution for verification\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Video Demonstrations\n\nBelow are demonstrations of the Isaac Sim MCP Extension in action:\n\n### Robot Party Demo\n\n![Robot Party Demo](media/add_more_robot_into_party.gif)\n\n*GIF: Adding more robots to the simulation using natural language commands*\n\n\n### Video Format (MP4)\n\nFor higher quality video, you can access the MP4 version directly:\n\n- [Robot Party Demo (MP4)](media/add_more_robot_into_party.mp4)\n\nWhen viewing on GitHub, you can click the link above to view or download the MP4 file.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "mcp",
        "art",
        "mcp isaac",
        "explore art",
        "omni mcp"
      ],
      "category": "art--culture"
    },
    "peek-travel--mcp-intro": {
      "owner": "peek-travel",
      "name": "mcp-intro",
      "url": "https://github.com/peek-travel/mcp-intro",
      "imageUrl": "",
      "description": "Remote MCP Server for discovering and planning experiences, at home and on vacation",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "",
      "updated_at": "2025-09-23T16:58:01Z",
      "readme_content": "# Peek.com Remote MCP Server\n\n**AI-Powered Travel Planning:** Simplify your trip planning with the Travel Industry's first Remote MCP Server for AI Assistants.\n\n## TL;DR\n\n[Peek.com](https://peek.com)'s amazing experiences cover every major destination worldwide, 300,000+ verified activities, and millions of authentic reviews. Let AI help you find the best experiences for your next trip.\n\n### Ask Questions Like\n\n* \"Grandparents in town for weekend. Fun experiences for them and the grandkids?\"\n* \"Create a table comparing and contrasting 5 food tours in Rome, including duration, price, and what's included.\"\n* \"I have $200 and 4 hours in Tokyo. Find me the most unique cultural experiences that fit my budget and time constraints.\"\n* \"What are the pros and cons of different whale watching tours in Monterey Bay? Include pricing, duration, and success rates.\"\n\n### How to Access\n\n* MCP Server: `https://mcp.peek.com`\n* Public Page: [peek.com/mcp](https://peek.com/mcp)\n* Improvement Suggestions: [Feedback Form](https://tally.so/r/wk2Gl1)\n* Custom GPT (backup option): [Peek's OpenAI CustomGPT](https://chatgpt.com/g/g-68ba0d2499ec8191bf6e119df33ac586-peek-experiences)\n\n[Peek's MCP Server](https://peek.com/mcp) validates that the experience is actually available in the timeframe you're looking for and provides deep links making snapping up that last spot easy.\n\n### Need A Server Configuration?\n\nAlso located in the `server.json` file in this repo.\n\n```json\n{\n    \"$schema\": \"https://static.modelcontextprotocol.io/schemas/2025-07-09/server.schema.json\",\n    \"name\": \"com.peek/mcp\",\n    \"description\": \"Build travel itineraries with Peek's 300k+ experiences. Search, details, and availability!\",\n    \"status\": \"active\",\n    \"version\": \"0.1.0\",\n    \"remotes\": [\n        {\n            \"type\": \"streamable-http\",\n            \"url\": \"https://mcp.peek.com\"\n        }\n    ]\n}\n```\n\n## Why a Peek Remote MCP Server?\n\nOrganizing the perfect trip used to be a lot of work, involving many hours of research. However, thanks to generative AI assistants, building the perfect, personalized itinerary has become a breeze.\n\nToday's AIs know everything about the city you're traveling to, its attractions, the quality of the hotels, and the hidden gems.\n\n### But There's a Problem...\n\nPlanning the best things to do has remained an elusive challenge. Listed experiences often have out-of-date descriptions or are out of season or already booked out.\n\n### Introducing the Solution\n\nThis is where the [Peek.com Remote MCP Server](https://peek.com/mcp) comes in. It is a free service that makes your AI assistant smarter, giving it access to the greatest experiences with real-time availability and prices for a better trip planning experience.\n\n## What Is a Remote MCP Server?\n\nMCP stands for Model Context Protocol. It is a standard originally introduced by Anthropic in Nov 2024. It is a tool that you can connect to your AI assistant. It allows your AI assistant to request and understand information about relevant experiences as based on your prompts.\n\n## What About Privacy?\n\n[Peek's MCP Server](https://peek.com/mcp) does not collect or store any personal information that you may have shared with your AI assistant. It is designed to answer requests around experience listings, availability, and pricing in an AI friendly format.\n\n## Which Assistants Support Remote MCPs?\n\n* Claude (Anthropic) - Add \"Custom Connectors\" in Claude on web/desktop; mobile can use connectors you've added on web.\n* ChatGPT (OpenAI) - Limited support with enterprise account. Use [Peek's OpenAI CustomGPT](https://chatgpt.com/g/g-68ba0d2499ec8191bf6e119df33ac586-peek-experiences) as a backup.\n* Developer tools (Cursor, Windsurf, Augment, etc) - Yes, see tool specific documentation.\n* Gemini (Google) - Gemini CLI and SDKs can connect to remote MCP servers (OAuth, SSE/HTTP).\n* Microsoft Copilot - Copilot Studio can add MCP tools; VS Code GitHub Copilot and Visual Studio support MCP server clients; Windows is adding platform-level MCP.\n* Perplexity - No MCP support yet.\n* xAI Grok - No MCP support yet.\n\n## Where Is the Code?\n\nOffering the service as a remote service instead of a local tool makes it easier to use with your favorite AI assistant. As such, [Peek's Remote MCP Server](https://peek.com/mcp) is a proprietary service. The code for this project is not open source at this time. For any feedback, please contact us using the [Feedback Form](https://tally.so/r/wk2Gl1).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "explore",
        "museum",
        "explore art",
        "mcp server",
        "museum databases"
      ],
      "category": "art--culture"
    },
    "r-huijts--oorlogsbronnen-mcp": {
      "owner": "r-huijts",
      "name": "oorlogsbronnen-mcp",
      "url": "https://github.com/r-huijts/oorlogsbronnen-mcp",
      "imageUrl": "",
      "description": "Oorlogsbronnen (War Sources) API integration for accessing historical WWII records, photographs, and documents from the Netherlands (1940-1945)",
      "stars": 11,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-22T13:29:18Z",
      "readme_content": "# Oorlogsbronnen MCP Server\n\nA Model Context Protocol (MCP) server that provides AI-powered access to the Oorlogsbronnen (War Sources) database. This server enables natural language interactions with historical World War II archives from the Netherlands.\n\n## Natural Language Interaction Examples\n\nAsk your AI assistant questions like these to explore Dutch WWII history:\n\n- **\"What happened during the bombing of Rotterdam in May 1940?\"**\n- **\"Tell me about Anne Frank's life in hiding based on historical records.\"**\n- **\"Show me photographs of the Dutch Hunger Winter of 1944-1945.\"**\n- **\"Were any of my ancestors imprisoned in Camp Vught during the war?\"**\n- **\"I'm visiting Arnhem next week. What historical sites related to Operation Market Garden should I see?\"**\n- **\"Find information about resistance activities in Utrecht during the Nazi occupation.\"**\n- **\"What was daily life like for Jewish families in Amsterdam before deportations began?\"**\n- **\"Show me firsthand accounts from people who witnessed the liberation of the Netherlands in 1945.\"**\n- **\"What records exist about children who were hidden by Dutch families during the war?\"**\n- **\"I'm researching the impact of WWII on Dutch infrastructure. Can you find documents about the reconstruction of bridges and railways?\"**\n\n## Features\n\n- üîç Natural language search across the Oorlogsbronnen database\n- üè∑Ô∏è Filter results by content type (person, photo, article, etc.)\n- üìä Control the number of results returned\n- ü§ñ AI-friendly JSON responses for further processing\n\n## Installation\n\nYou can install this server in two ways:\n\n### 1. Using Claude Desktop with NPX Package\n\nUpdate your Claude configuration file (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"oorlogsbronnen-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"oorlogsbronnen-mcp\"\n      ]\n    }\n  }\n}\n```\n\nAfter updating the configuration, restart Claude Desktop for the changes to take effect.\n\n### 2. From Source\n\n1. Clone this repository:\n```bash\ngit clone https://github.com/r-huijts/oorlogsbronnen-mcp.git\ncd oorlogsbronnen-mcp\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the project:\n```bash\nnpm run build\n```\n\n4. Configure Claude Desktop by updating your configuration file (located at `~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"oorlogsbronnen-server\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/absolute/path/to/oorlogsbronnen-mcp/dist/mcp-server.js\"\n      ]\n    }\n  }\n}\n```\n\nReplace `/absolute/path/to/oorlogsbronnen-mcp` with the actual path to your installation.\n\n## Usage Examples\n\nThe MCP server understands natural language queries and can help you explore World War II archives. Here are some example queries you can use with Claude:\n\n### Basic Searches\n\n- \"Use search_ww2_nl_archives to find documents about the resistance movement in Amsterdam\"\n- \"Search the Dutch WW2 archives for information about Jewish refugees in 1942\"\n- \"Look through the Netherlands war archives for records of Allied bombing raids\"\n\n### Filtering by Type\n\n- \"Use search_ww2_nl_archives to show me photographs of the liberation of Rotterdam\"\n- \"Find personal accounts in the Dutch WW2 archives about life in concentration camps\"\n- \"Search the Netherlands war archives for newspaper articles about food shortages\"\n\n### Specific Queries\n\n- \"Search the Dutch WW2 archives for documents about Anne Frank's time in Amsterdam\"\n- \"Use search_ww2_nl_archives to find records of the February Strike of 1941\"\n- \"Look through the Netherlands war archives for information about Operation Market Garden\"\n\n### Research Examples\n\n1. **Personal History Research**:\n   ```\n   Use search_ww2_nl_archives to find any records or documents about the Rosenberg family in Amsterdam between 1940-1945\n   ```\n\n2. **Local History**:\n   ```\n   Search the Dutch WW2 archives for photographs and documents about daily life in Utrecht during the occupation\n   ```\n\n3. **Military Operations**:\n   ```\n   Use search_ww2_nl_archives to find firsthand accounts and official reports about the Battle of the Scheldt\n   ```\n\n### Advanced Usage\n\nYou can combine different search criteria:\n```\nSearch the Netherlands WW2 archives for photographs and personal accounts of the Dutch famine in 1944-1945, limit to 20 results\n```\n\n## API Reference\n\nThe server exposes the following MCP tool:\n\n### search_ww2_nl_archives\n\nA powerful search tool designed to query the Oorlogsbronnen (War Sources) database for World War II related content in the Netherlands. This tool can be used to find historical documents, photographs, personal accounts, and other archival materials from 1940-1945.\n\n**When to use this tool:**\n- Searching for specific historical events during WWII in the Netherlands\n- Finding information about people, places, or organizations during the war\n- Locating photographs or documents from specific time periods or locations\n- Researching personal or family history related to WWII\n- Finding primary sources about the Dutch resistance, occupation, or liberation\n- Discovering materials about Jewish life and persecution during the war\n- Researching military operations that took place in the Netherlands\n\nParameters:\n- `query` (required): \n  - Type: string\n  - Description: The main search term or phrase to look for in the archives\n  - Can include: names, places, dates, events, or descriptive terms\n  - Examples:\n    - \"Anne Frank\"\n    - \"Rotterdam bombing 1940\"\n    - \"Dutch resistance Amsterdam\"\n    - \"Jewish deportation Westerbork\"\n    - \"Operation Market Garden\"\n\n- `type` (optional):\n  - Type: string\n  - Description: Filter results by specific content type\n  - Available types:\n    - \"person\": Individual biographical records\n    - \"photo\": Historical photographs\n    - \"article\": News articles and written documents\n    - \"video\": Video footage\n    - \"object\": Physical artifacts and objects\n    - \"location\": Places and geographical records\n    - \"book\": Published books, memoirs, and monographs\n  - Use when: You need to focus on specific types of historical materials\n  - Default: All types included\n\n- `count` (optional):\n  - Type: number\n  - Description: Number of results to return in the response\n  - Minimum: 1\n  - Maximum: 100\n  - Default: 10\n  - Use when: You need to control the volume of returned results\n  - Note: Larger numbers will provide more comprehensive results but may take longer to process\n\n**Response Format:**\n```json\n{\n  \"results\": [\n    {\n      \"id\": string,          // Unique identifier for the record\n      \"title\": string,       // Title or name of the item\n      \"type\": string,        // Content type (person, photo, article, etc.)\n      \"description\": string, // Detailed description (if available)\n      \"url\": string         // Direct link to view the item on Oorlogsbronnen\n    }\n  ]\n}\n```\n\n**Example Queries and Their Tool Calls:**\n\n1. Basic Historical Search:\n```typescript\n{\n  query: \"February Strike 1941\",\n  type: \"article\",\n  count: 5\n}\n```\n\n2. Person Research:\n```typescript\n{\n  query: \"Rosenberg family Amsterdam Jewish\",\n  type: \"person\",\n  count: 20\n}\n```\n\n3. Photo Collection Search:\n```typescript\n{\n  query: \"liberation celebrations Amsterdam Dam Square 1945\",\n  type: \"photo\",\n  count: 15\n}\n```\n\n**Error Handling:**\n- The tool will return an error message if:\n  - The query is empty or contains invalid characters\n  - The specified type is not supported\n  - The count is outside the valid range (1-100)\n  - The API is temporarily unavailable\n  - Rate limits are exceeded\n\n**Best Practices:**\n1. Start with broader searches and narrow down with specific terms\n2. Use location names to focus on specific areas\n3. Include dates when searching for specific events\n4. Combine person names with locations for family research\n5. Use type filtering to focus on specific kinds of historical materials\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgments\n\n- Oorlogsbronnen for providing access to their valuable historical archives\n- The Model Context Protocol (MCP) community for enabling AI-powered interactions ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "museum",
        "art",
        "search",
        "museum databases",
        "art collections",
        "heritage museum"
      ],
      "category": "art--culture"
    },
    "r-huijts--rijksmuseum-mcp": {
      "owner": "r-huijts",
      "name": "rijksmuseum-mcp",
      "url": "https://github.com/r-huijts/rijksmuseum-mcp",
      "imageUrl": "",
      "description": "Rijksmuseum API integration for artwork search, details, and collections",
      "stars": 58,
      "forks": 12,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-29T15:45:22Z",
      "readme_content": "![rijksmuseum logo](https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/Logo_Rijksmuseum.svg/799px-Logo_Rijksmuseum.svg.png)\n\n# Rijksmuseum MCP Server\n\nA Model Context Protocol (MCP) server that provides access to the Rijksmuseum's collection through natural language interactions. This server enables AI models to explore, analyze, and interact with artworks and collections from the Rijksmuseum.\n\n<a href=\"https://glama.ai/mcp/servers/4rmiexp64y\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/4rmiexp64y/badge\" alt=\"Rijksmuseum Server MCP server\" /></a>\n\n## Features\n\nThe server provides several tools for interacting with the Rijksmuseum's collection:\n\n### 1. Search Artworks (`search_artwork`)\nSearch and filter artworks using various criteria including:\n- Text-based search\n- Artist name\n- Artwork type\n- Materials and techniques\n- Time periods\n- Colors\n- And more\n\n### 2. Artwork Details (`get_artwork_details`)\nRetrieve comprehensive information about specific artworks, including:\n- Basic details (title, artist, dates)\n- Physical properties\n- Historical context\n- Visual information\n- Curatorial information\n- Exhibition history\n\n### 3. High-Resolution Images (`get_artwork_image`)\nAccess high-resolution image data with deep zoom capabilities:\n- Multiple zoom levels\n- Tile-based image loading\n- Full resolution support\n- Position information\n\n### 4. User Collections (`get_user_sets` & `get_user_set_details`)\nExplore user-created collections:\n- Browse curated sets\n- View thematic groupings\n- Analyze collection patterns\n- Access detailed set information\n\n### 5. Image Viewing (`open_image_in_browser`)\nOpen artwork images directly in your browser for detailed viewing.\n\n### 6. Artist Timeline (`get_artist_timeline`)\nGenerate chronological timelines of artists' works:\n- Track artistic development\n- Analyze periods and styles\n- Study career progression\n\n## Example Use Cases\n\nHere are some example queries you can ask the AI when using this server:\n\n### Artwork Discovery\n```\n\"Show me all paintings by Rembrandt from the 1640s\"\n\"Find artworks that prominently feature the color blue\"\n\"What are the most famous masterpieces in the collection?\"\n\"Search for still life paintings from the Dutch Golden Age\"\n```\n\n### Artwork Analysis\n```\n\"Tell me everything about The Night Watch\"\n\"What are the dimensions and materials used in Van Gogh's Self Portrait?\"\n\"Show me high-resolution details of the brushwork in Vermeer's The Milkmaid\"\n\"Compare the colors used in different versions of The Potato Eaters\"\n```\n\n### Artist Research\n```\n\"Create a timeline of Rembrandt's self-portraits\"\n\"How did Van Gogh's use of color evolve throughout his career?\"\n\"Show me all works by Frans Hals in chronological order\"\n\"What techniques did Jan Steen use in his paintings?\"\n```\n\n### Thematic Exploration\n```\n\"Find all artworks depicting biblical scenes\"\n\"Show me paintings of Amsterdam in the 17th century\"\n\"What artworks feature flowers or still life arrangements?\"\n\"Find portraits that include musical instruments\"\n```\n\n### Collection Analysis\n```\n\"Show me the most popular user-curated collections\"\n\"Find sets that focus on landscape paintings\"\n\"What are the recent additions to the museum's collection?\"\n\"Show me collections featuring works from multiple artists\"\n```\n\n### Visual Details\n```\n\"Let me examine the details in the background of The Night Watch\"\n\"Show me a close-up of the jewelry in Girl with a Pearl Earring\"\n\"Can you display the highest resolution version of The Jewish Bride?\"\n\"I want to study the facial expressions in The Syndics\"\n```\n\n## Getting Started\n\nYou can install this server in two ways:\n\n### 1. Using Claude Desktop with NPM Package\nUpdate your Claude configuration file (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"rijksmuseum-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-server-rijksmuseum\"\n      ],\n      \"env\": {\n        \"RIJKSMUSEUM_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\nYou can get an API key from the [Rijksmuseum API Portal](https://data.rijksmuseum.nl/docs/api/).\n\n### 2. From Source\n1. Clone this repository\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Copy the example environment file:\n   ```bash\n   cp .env.example .env\n   ```\n4. Add your Rijksmuseum API key to the `.env` file:\n   ```\n   RIJKSMUSEUM_API_KEY=your_api_key_here\n   ```\n5. Then update your Claude configuration file:\n   ```json\n   {\n     \"mcpServers\": {\n       \"rijksmuseum-server\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"/path/to/rijksmuseum-server/build/index.js\"\n         ],\n         \"env\": {\n           \"RIJKSMUSEUM_API_KEY\": \"your_api_key_here\"\n         }\n       }\n     }\n   }\n   ```\n\nMake sure to:\n- Replace `/path/to/rijksmuseum-server` with the actual path to your installation\n- Add your Rijksmuseum API key in the `env` section\n\nAfter updating the configuration, restart Claude Desktop for the changes to take effect.\n\n## Configuration\n\nThe server can be configured through environment variables:\n- `RIJKSMUSEUM_API_KEY`: Your Rijksmuseum API key (required)\n- `PORT`: Server port (default: 3000)\n- `LOG_LEVEL`: Logging level (default: 'info')\n\n## API Documentation\n\nFor detailed information about the Rijksmuseum API endpoints used by this server, visit:\n[Rijksmuseum API Documentation](https://data.rijksmuseum.nl/object-metadata/api/)\n\n## Contributing\n\nContributions are welcome! Please feel free to submit pull requests or create issues for bugs and feature requests.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "artwork",
        "museum",
        "art",
        "artwork search",
        "art collections",
        "museum databases"
      ],
      "category": "art--culture"
    },
    "yuna0x0--anilist-mcp": {
      "owner": "yuna0x0",
      "name": "anilist-mcp",
      "url": "https://github.com/yuna0x0/anilist-mcp",
      "imageUrl": "",
      "description": "A MCP server integrating AniList API for anime and manga information",
      "stars": 55,
      "forks": 8,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T17:09:05Z",
      "readme_content": "# AniList MCP Server\n\nA Model Context Protocol (MCP) server that interfaces with the AniList API, allowing LLM clients to access and interact with anime, manga, character, staff, and user data from AniList.\n\n## Features\n\n- Search for anime, manga, characters, staff, and studios\n- Get detailed information about specific anime, manga, characters, and staff members\n- Access user profiles and lists\n- Support for advanced filtering options\n- Retrieve genres and media tags\n- **Dual transport support**: Both HTTP and STDIO transports\n- **Cloud deployment ready**: Support Smithery and other platforms\n\n## Requirements\n\n- Node.js 18+\n\n## Local Installation (STDIO Transport)\n\n1. Add this server to your `mcp.json` / `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"anilist\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"anilist-mcp\"],\n      \"env\": {\n        \"ANILIST_TOKEN\": \"your_api_token\"\n      }\n    }\n  }\n}\n```\n\nYou may remove the `env` object entirely, if you are not planning to use the AniList Token for operations that require login.\n\n2. Restart your MCP client (e.g., Claude Desktop)\n3. Use the tools to interact with AniList\n\n## Server Deployment (HTTP Transport)\n\n### Self-Hosting\nFollow the [Local Development](#local-development) instructions to set up the project locally, then run:\n```bash\npnpm run start:http\n```\nThis will start the server on port 8081 by default. You can change the port by setting the `PORT` environment variable.\n\n### Cloud Deployment\n\nYou can deploy this MCP server to any cloud platform that supports Node.js server applications.\n\nYou can also deploy via MCP platforms like [Smithery](https://smithery.ai/server/@yuna0x0/anilist-mcp).\n\n## Configuration\n### Environment Variables (STDIO Transport and HTTP Transport server where host provides the config)\n\nWhen using the STDIO transport or hosting the HTTP transport server, you can pass configuration via environment variables:\n- `ANILIST_TOKEN`: (Optional) AniList API Token (Only needed for operations that require login)\n\n> [!CAUTION]\n> If you are hosting the HTTP transport server with token pre-configured, you should protect your endpoint and implement authentication before allowing users to access it. Otherwise, anyone can access your MCP server while using your AniList token.\n\n### HTTP Headers (HTTP Transport where user provides the config)\n\nWhen using the HTTP transport, user can pass configuration via HTTP headers:\n- `Anilist-Token`: (Optional) AniList API Token (Only needed for operations that require login)\n\nIf the user provides the token in the header, while the server also has `ANILIST_TOKEN` set, the header value will take precedence.\n\n### Get an AniList API Token (Optional)\n\nTo get an API token, follow these steps:\n\n1. Go to [AniList settings](https://anilist.co/settings/developer).\n2. Click on \"Create New Client\".\n3. Use this URL as your client's \"Redirect URL\":\n```\nhttps://anilist.co/api/v2/oauth/pin\n```\n\n4. Click \"Save\"\n5. Then go to https://anilist.co/api/v2/oauth/authorize?client_id={clientID}&response_type=token, replace the `{clientID}` with the client ID you get. It will ask you to log in and then provide you with the token to use.\n6. Copy the generated token and use it in your `.env` file or environment variables.\n\n## Available Tools\n\n### Misc Tools\n- **get_genres**: Get all available genres on AniList\n- **get_media_tags**: Get all available media tags on AniList\n- **get_site_statistics**: Get AniList site statistics over the last seven days\n- **get_studio**: Get information about a studio by its AniList ID or name\n- **favourite_studio**: [Requires Login] Favourite or unfavourite a studio by its ID\n\n### Activity Tools\n- **delete_activity**: [Requires Login] Delete the current authorized user's activity post\n- **get_activity**: Get a specific AniList activity by its ID\n- **get_user_activity**: Fetch activities from a user\n- **post_message_activity**: [Requires Login] Post a new message activity or update an existing one\n- **post_text_activity**: [Requires Login] Post a new text activity or update an existing one\n\n### List Tools\n- **get_user_anime_list**: Get a user's anime list\n- **get_user_manga_list**: Get a user's manga list\n- **add_list_entry**: [Requires Login] Add an entry to the authorized user's list\n- **remove_list_entry**: [Requires Login] Remove an entry from the authorized user's list\n- **update_list_entry**: [Requires Login] Update an entry on the authorized user's list\n\n### Media Tools\n- **get_anime**: Get detailed information about an anime by its AniList ID\n- **get_manga**: Get detailed information about a manga by its AniList ID\n- **favourite_anime**: [Requires Login] Favourite or unfavourite an anime by its ID\n- **favourite_manga**: [Requires Login] Favourite or unfavourite a manga by its ID\n\n### People Tools\n- **get_character**: Get information about a character by their AniList ID\n- **get_staff**: Get information about staff member by their AniList ID\n- **favourite_character**: [Requires Login] Favourite or unfavourite a character by its ID\n- **favourite_staff**: [Requires Login] Favourite or unfavourite a staff member by their ID\n- **get_todays_birthday_characters**: Get all characters whose birthday is today\n- **get_todays_birthday_staff**: Get all staff members whose birthday is today\n\n### Recommendation Tools\n- **get_recommendation**: Get an AniList recommendation by its ID\n- **get_recommendations_for_media**: Get AniList recommendations for a specific media\n\n### Search Tools\n- **search_activity**: Search for activities on AniList\n- **search_anime**: Search for anime with query term and filters\n- **search_manga**: Search for manga with query term and filters\n- **search_character**: Search for characters based on a query term\n- **search_staff**: Search for staff members based on a query term\n- **search_studio**: Search for studios based on a query term\n- **search_user**: Search for users on AniList\n\n### Thread Tools\n- **get_thread**: Get a specific thread by its AniList ID\n- **get_thread_comments**: Get comments for a specific thread\n- **delete_thread**: [Requires Login] Delete a thread by its ID\n\n### User Tools\n- **get_user_profile**: Get a user's AniList profile\n- **get_user_stats**: Get a user's AniList statistics\n- **get_full_user_info**: Get a user's complete profile and stats information\n- **get_user_recent_activity**: Get recent activity from a user\n- **get_authorized_user**: [Requires Login] Get profile information of the currently authorized user\n- **follow_user**: [Requires Login] Follow or unfollow a user by their ID\n- **update_user**: [Requires Login] Update user settings\n\n## Example Usage\n\n### Basic Anime Search\n\n```\nCan you search for anime similar to \"Bocchi the Rock!\"?\n```\n\n### Get Character Info\n\n```\nCan you tell me about the character Hitori Gotou? Use the AniList tools to find information.\n```\n\n### Compare Studio Works\n\n```\nWhat anime has Studio Ghibli produced? Can you list their most popular works?\n```\n\n## Local Development\n\nThis project uses [pnpm](https://pnpm.io) as its package manager.\n\nClone the repository and install dependencies:\n\n```bash\ngit clone https://github.com/yuna0x0/anilist-mcp.git\ncd anilist-mcp\npnpm install\n```\n\n### Configuration (Optional)\n\n1. Create a `.env` file by copying the example:\n```bash\ncp env.example .env\n```\n\n2. Edit the `.env` file and add your AniList API token:\n```\nANILIST_TOKEN=your_api_token\n```\n\n## Debugging with MCP Inspector\n\nYou can use the MCP Inspector to test and debug the AniList MCP server:\n\n```bash\nnpx @modelcontextprotocol/inspector -e ANILIST_TOKEN=your_api_token npx anilist-mcp\n\n# Use this instead when Local Development\npnpm run inspector\n```\n\nThen open your browser to the provided URL (usually http://localhost:6274) to access the MCP Inspector interface. From there, you can:\n\n1. Connect to your running AniList MCP server\n2. Browse available tools\n3. Run tools with custom parameters\n4. View the responses\n\nThis is particularly useful for testing your setup before connecting it to MCP clients like Claude Desktop.\n\n## Docker\n\nPull from GitHub Container Registry:\n```bash\ndocker pull ghcr.io/yuna0x0/anilist-mcp\n```\n\nDocker build (Local Development):\n```bash\ndocker build -t ghcr.io/yuna0x0/anilist-mcp .\n```\n\nDocker multi-platform build (Local Development):\n```bash\ndocker buildx build --platform linux/amd64,linux/arm64 -t ghcr.io/yuna0x0/anilist-mcp .\n```\n\n## MCP Bundles (MCPB)\n\nTo create an MCP Bundle for this server, run:\n```bash\npnpm run pack:mcpb\n```\n\n## Security Notice\n\nThis MCP server accepts your AniList API token in the .env file, environment variable or HTTP header. Keep this information secure and never commit it to version control.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "anime",
        "manga",
        "art",
        "api anime",
        "manga information",
        "art collections"
      ],
      "category": "art--culture"
    }
  }
}