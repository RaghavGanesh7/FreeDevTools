{
  "category": "live-audio-and-video",
  "categoryDisplay": "Live Audio and Video",
  "description": "",
  "totalRepositories": 2,
  "repositories": {
    "obinopaul--nba-mcp-server": {
      "owner": "obinopaul",
      "name": "nba-mcp-server",
      "url": "https://github.com/obinopaul/nba-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/obinopaul.webp",
      "description": "Access real-time NBA statistics and live game data, including player stats, team standings, and game results for integration into sports applications.",
      "stars": 2,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-06-28T14:37:54Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/obinopaul-nba-mcp-server-badge.png)](https://mseep.ai/app/obinopaul-nba-mcp-server)\n\n# NBA MCP Server\n\nA Python server implementing Model Context Protocol (MCP) for NBA statistics and live game data.\n\n## Overview\n\nThis server provides a set of tools for accessing NBA data through the NBA API. It serves as a bridge between applications and the NBA's data services, offering both live game information and historical statistics.\n\n## Features\n\n- Live game data (scoreboard, box scores, play-by-play)\n- Player information and career statistics\n- Team game logs and statistics\n- League standings\n- Game results and schedules\n\n## Tools\n\n### Live Game Data\n\n- **nba_live_scoreboard**\n  - Fetch today's NBA scoreboard (live or latest)\n  - Returns game IDs, start times, scores, and broadcast details\n\n- **nba_live_boxscore**\n  - Fetch real-time box score for a given NBA game ID\n  - Provides detailed player and team statistics\n\n- **nba_live_play_by_play**\n  - Retrieve live play-by-play actions for a specific game\n  - Includes scoring plays, fouls, timeouts, and substitutions\n\n### Player Information\n\n- **nba_common_player_info**\n  - Retrieve basic information about a player\n  - Includes biographical data, height, weight, team, position\n\n- **nba_player_career_stats**\n  - Obtain a player's career statistics\n  - Available in different formats (per game, totals, per 36 minutes)\n\n- **nba_list_active_players**\n  - Return a list of all currently active NBA players\n\n- **nba_player_game_logs**\n  - Obtain a player's game statistics within a specified date range\n\n### Team Data\n\n- **nba_team_game_logs_by_name**\n  - Fetch a team's game logs using the team name\n  - Avoids needing to know the team's numeric ID\n\n- **nba_fetch_game_results**\n  - Fetch game results for a given team ID and date range\n\n- **nba_team_standings**\n  - Fetch NBA team standings for a given season and season type\n\n- **nba_team_stats_by_name**\n  - Fetch team statistics using the team name\n  - Supports different aggregation methods (totals, per game, etc.)\n\n- **nba_all_teams_stats**\n  - Fetch statistics for all NBA teams across multiple seasons\n\n### Schedule Information\n\n- **nba_list_todays_games**\n  - Returns scoreboard data for any specific date\n\n## Usage\n\nThe server is implemented using the MCP framework and can be run as a standalone service.\n\n```python\n# Start the server\npython nba_server.py\n# or\nmcp run nba_server.py\n```\n\n### Configuration\n\n- The server runs with a 30-second timeout for more reliable operation\n- Signal handlers are implemented for graceful shutdown (Ctrl+C)\n\n### Usage with Claude Desktop\n\n#### Option 1: Using Docker (Recommended)\n\n1. Clone this repository\n```\ngit clone https://github.com/obinopaul/nba-mcp-server.git\ncd nba-mcp-server\n```\n\n2. Install dependencies\n```\npip install -r requirements.txt\n```\n\n3. Build the Docker image\n```\ndocker build -t nba_mcp_server .\n```\n\n4. Run the Docker container\n```\ndocker run -d -p 5000:5000 --name nba_mcp_server nba_mcp_server\n```\n\n5. Add this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"nba_mcp_server\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"exec\",\n        \"-i\",\n        \"nba_mcp_server\",\n        \"python\",\n        \"nba_server.py\"\n      ]\n    }\n  }\n}\n```\n\n#### Option 2: Direct Python Execution\n\n1. Clone this repository\n```\ngit clone https://github.com/obinopaul/nba-mcp-server.git\ncd nba-mcp-server\n```\n\n2. Create a new environment\n```\nconda create --name your_env_name python=3.13\nconda activate your_env_name\n```\n\n3. Install dependencies\n```\npip install -r requirements.txt\n```\n\n4. Run NBA mcp server on the terminal\n```\nmcp run nba_server.py\n```\n\n5. Add this to your `claude_desktop_config.json`, adjusting the Python path as needed:\n\n```json\n{\n  \"mcpServers\": {\n    \"nba_mcp_server\": {\n      \"command\": \"/path/to/your/python\",\n      \"args\": [\n        \"/path/to/nba_server.py\"\n      ]\n    }\n  }\n}\n```\n\nAfter adding your chosen configuration, restart Claude Desktop to load the NBA server. You'll then be able to use all the NBA data tools in your conversations with Claude.\n\n\n## Technical Details\n\nThe server is built on:\n- NBA API (nba_api) Python package\n- MCP for API interface\n- Pydantic for input validation\n- Pandas for data manipulation\n\n## License\n\nThis MCP server is available under the MIT License.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "nba",
        "sports",
        "stats",
        "nba statistics",
        "game data",
        "nba mcp"
      ],
      "category": "live-audio-and-video"
    },
    "obinopaul--soccer-mcp-server": {
      "owner": "obinopaul",
      "name": "soccer-mcp-server",
      "url": "https://github.com/obinopaul/soccer-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/obinopaul.webp",
      "description": "Access live match data and comprehensive football statistics for leagues, teams, and players. Retrieve real-time information and historical data to enhance applications with up-to-date football insights.",
      "stars": 4,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-17T15:37:11Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/obinopaul-soccer-mcp-server-badge.png)](https://mseep.ai/app/obinopaul-soccer-mcp-server)\n\n# Soccer MCP Server\n\nA Python server implementing Model Context Protocol (MCP) for football (soccer) statistics and live match data using the API-Football service.\n\n## Overview\n\nThis server provides a comprehensive set of tools for accessing football data through the API-Football API. It serves as a bridge between applications and football data services, offering both live match information and historical statistics for leagues, teams, and players worldwide.\n\n## Features\n\n- League data (standings, fixtures, schedules)\n- Team information and fixtures\n- Player statistics and profiles\n- Live match data (events, statistics, timelines)\n- Match analysis (statistics, events)\n\n## Configuration\n\nThis server requires an API key from RapidAPI for the API-Football service:\n\n1. Create an account on [RapidAPI](https://rapidapi.com/)\n2. Subscribe to the [API-Football API](https://rapidapi.com/api-sports/api/api-football/)\n3. Set the environment variable:\n   ```\n   RAPID_API_KEY_FOOTBALL=your_api_key_here\n   ```\n\n## Tools\n\n### League Data\n\n- **get_league_id_by_name**\n  - Retrieve the league ID for a given league name\n  - Example: `get_league_id_by_name(league_name=\"Premier League\")`\n\n- **get_all_leagues_id**\n  - Retrieve a list of all football leagues with IDs\n  - Can be filtered by country\n  - Example: `get_all_leagues_id(country=[\"England\", \"Spain\"])`\n\n- **get_standings**\n  - Retrieve league standings for multiple leagues and seasons\n  - Can be filtered by team\n  - Example: `get_standings(league_id=[39, 140], season=[2022, 2023])`\n\n- **get_league_info**\n  - Retrieve information about a specific football league\n  - Example: `get_league_info(league_name=\"Champions League\")`\n\n- **get_league_fixtures**\n  - Retrieves all fixtures for a given league and season\n  - Example: `get_league_fixtures(league_id=39, season=2023)`\n\n- **get_league_schedule_by_date**\n  - Retrieves the schedule for a league on specified dates\n  - Example: `get_league_schedule_by_date(league_name=\"Premier League\", date=[\"2024-03-08\", \"2024-03-09\"], season=\"2023\")`\n\n### Player Data\n\n- **get_player_id**\n  - Retrieve player IDs and information for players matching a name\n  - Example: `get_player_id(player_name=\"Messi\")`\n\n- **get_player_profile**\n  - Retrieve a player's profile by their last name\n  - Example: `get_player_profile(player_name=\"Messi\")`\n\n- **get_player_statistics**\n  - Retrieve detailed player statistics by seasons and league name\n  - Example: `get_player_statistics(player_id=154, seasons=[2022, 2023], league_name=\"La Liga\")`\n\n- **get_player_statistics_2**\n  - Retrieve detailed player statistics by seasons and league ID\n  - Example: `get_player_statistics_2(player_id=154, seasons=[2022, 2023], league_id=140)`\n\n### Team Data\n\n- **get_team_fixtures**\n  - Returns past or upcoming fixtures for a team\n  - Example: `get_team_fixtures(team_name=\"Manchester United\", type=\"past\", limit=3)`\n\n- **get_team_fixtures_by_date_range**\n  - Retrieve fixtures for a team within a date range\n  - Example: `get_team_fixtures_by_date_range(team_name=\"Liverpool\", from_date=\"2023-09-01\", to_date=\"2023-09-30\", season=\"2023\")`\n\n- **get_team_info**\n  - Retrieve basic information about a specific team\n  - Example: `get_team_info(team_name=\"Real Madrid\")`\n\n### Match/Fixture Data\n\n- **get_fixture_statistics**\n  - Retrieves detailed statistics for a specific fixture\n  - Example: `get_fixture_statistics(fixture_id=867946)`\n\n- **get_fixture_events**\n  - Retrieves all in-game events for a fixture (goals, cards, subs)\n  - Example: `get_fixture_events(fixture_id=867946)`\n\n- **get_multiple_fixtures_stats**\n  - Retrieves statistics for multiple fixtures at once\n  - Example: `get_multiple_fixtures_stats(fixture_ids=[867946, 867947, 867948])`\n\n### Live Match Data\n\n- **get_live_match_for_team**\n  - Checks if a team is currently playing live\n  - Example: `get_live_match_for_team(team_name=\"Chelsea\")`\n\n- **get_live_stats_for_team**\n  - Retrieves live in-game stats for a team in a match\n  - Example: `get_live_stats_for_team(team_name=\"Liverpool\")`\n\n- **get_live_match_timeline**\n  - Retrieves real-time timeline of events for a team's live match\n  - Example: `get_live_match_timeline(team_name=\"Manchester City\")`\n\n## Usage\n\nThe server is implemented using the Fast MCP framework and can be run as a standalone service.\n\n```python\n# Start the server\npython soccer_server.py\n# or\nmcp run soccer-server.py\n```\n\n### Configuration\n\n- The server runs with a 30-second timeout for more reliable operation\n- Signal handlers are implemented for graceful shutdown (Ctrl+C)\n\n### Usage with Claude Desktop\n\n#### Option 1: Using Docker (Recommended)\n\n1. Clone this repository\n```\ngit clone https://github.com/obinopaul/soccer-mcp-server.git\ncd soccer-mcp-server\n```\n\n2. Install dependencies\n```\npip install -r requirements.txt\n```\n\n3. Build the Docker image\n```\ndocker build -t soccer_server .\n```\n\n4. Run the Docker container (ensure your API key is passed as an environment variable)\n```\ndocker run -d -p 5000:5000 -e RAPID_API_KEY_FOOTBALL=your_api_key_here --name soccer_server soccer_server\n```\n\n5. Add this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"soccer_server\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"exec\",\n        \"-i\",\n        \"soccer_server\",\n        \"python\",\n        \"soccer_server.py\"\n      ],\n      \"env\": {\n        \"RAPID_API_KEY_FOOTBALL\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n#### Option 2: Direct Python Execution\n\n1. Clone this repository\n```\ngit clone https://github.com/obinopaul/soccer-mcp-server.git\ncd soccer-mcp-server\n```\n\n2. Install dependencies\n```\npip install -r requirements.txt\n```\n\n3. Set the API key environment variable\n```\nexport RAPID_API_KEY_FOOTBALL=your_api_key_here\n```\n\n4. Add this to your `claude_desktop_config.json`, adjusting the Python path as needed:\n\n```json\n{\n  \"mcpServers\": {\n    \"soccer_server\": {\n      \"command\": \"/path/to/your/python\",\n      \"args\": [\n        \"/path/to/soccer_server.py\"\n      ],\n      \"env\": {\n        \"RAPID_API_KEY_FOOTBALL\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\nAfter adding your chosen configuration, restart Claude Desktop to load the soccer server. You'll then be able to use all the football data tools in your conversations with Claude.\n\n## Technical Details\n\nThe server is built on:\n- API-Football via RapidAPI\n- MCP for API interface\n- Pydantic for input validation\n- Requests for API communication\n\n## License\n\nThis MCP server is available under the MIT License.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "soccer",
        "football",
        "leagues",
        "football insights",
        "football statistics",
        "comprehensive football"
      ],
      "category": "live-audio-and-video"
    }
  }
}