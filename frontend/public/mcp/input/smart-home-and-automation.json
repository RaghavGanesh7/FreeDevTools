{
  "category": "smart-home-and-automation",
  "categoryDisplay": "Smart Home and Automation",
  "description": "",
  "totalRepositories": 13,
  "repositories": {
    "Shayan5422--MCP_MAC_USE": {
      "owner": "Shayan5422",
      "name": "MCP_MAC_USE",
      "url": "https://github.com/Shayan5422/MCP_MAC_USE",
      "imageUrl": "/freedevtools/mcp/pfp/Shayan5422.webp",
      "description": "Control a macOS environment through an AI interface, executing AppleScript commands, simulating keyboard input, and managing mouse actions. Integrate with natural language processing for intuitive Mac control.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-05-13T08:10:58Z",
      "readme_content": "# Mac Control MCP Server\n\nThis is a Model Context Protocol (MCP) server that allows controlling macOS through an AI interface. It provides tools for executing AppleScript, controlling the mouse and keyboard, and retrieving system information.\n\n## Features\n\n- Execute arbitrary AppleScript commands\n- Control mouse movement and clicks\n- Simulate keyboard input\n- Open applications\n- Retrieve system information\n- **New**: Control your Mac using natural language with LLM integration\n\n## Setup\n\n1. Install dependencies:\n   ```\n   npm install\n   ```\n\n2. Run the MCP server:\n   ```\n   npm start\n   ```\n\n3. **For LLM integration**: Set your LLM API key and run the LLM server:\n   ```\n   export LLM_API_KEY=your-api-key-here\n   npm run serve\n   ```\n\n## Using the LLM Interface\n\nWe've added a web interface that allows you to control your Mac using natural language commands through an LLM. To use it:\n\n1. Run the LLM server:\n   ```\n   npm run serve\n   ```\n\n2. Open your browser and navigate to `http://localhost:3000`\n\n3. Enter natural language commands like:\n   - \"Open the Notes application\"\n   - \"Type 'Hello World'\"\n   - \"Click at position x=500, y=300\"\n   - \"Show system information\"\n\nFor more detailed instructions, see the [LLM Integration Guide](INSTRUCTIONS.md).\n\n## Configuration\n\nThe server can be configured through environment variables or through the Smithery configuration panel:\n\n- `ENABLE_MOUSE_CONTROL`: Enable or disable mouse control functions (default: true)\n- `ENABLE_KEYBOARD_CONTROL`: Enable or disable keyboard input functions (default: true)\n- `ENABLE_APPLESCRIPT`: Enable or disable AppleScript execution (default: true)\n\n## Implementation Details\n\nThis MCP server follows the standard MCP protocol:\n- Uses STDIO for communication (stdin/stdout)\n- Expects JSON messages in a specific format\n- Returns JSON responses with tool results\n- Can be integrated with any LLM or AI system that supports the MCP protocol\n\n## Protocol Format\n\n### Input Format\n```json\n{\n  \"type\": \"tool_call\",\n  \"data\": {\n    \"id\": \"unique-id\",\n    \"name\": \"tool_name\",\n    \"params\": {\n      \"param1\": \"value1\"\n    }\n  }\n}\n```\n\n### Output Format\n```json\n{\n  \"type\": \"tool_result\",\n  \"data\": {\n    \"id\": \"unique-id\",\n    \"result\": {\n      \"key\": \"value\"\n    }\n  }\n}\n```\n\n## Available Tools\n\n### AppleScript Tools\n\n- **run_applescript**: Execute an arbitrary AppleScript command\n- **open_application**: Open a macOS application\n- **get_system_info**: Get basic system information\n\n### Keyboard Control Tools\n\n- **type_text**: Type text via keyboard\n- **key_press**: Press a keyboard key with optional modifier\n\n### Mouse Control Tools\n\n- **mouse_click**: Perform a mouse click at specific coordinates\n- **mouse_move**: Move the mouse to a position\n\n## Deployment on Smithery\n\nThis repository includes the necessary configuration files for deployment on Smithery:\n\n- `Dockerfile`: Defines the container build\n- `smithery.yaml`: Configuration for the Smithery platform\n\n## Security Considerations\n\nSince this MCP server can control your Mac, it should be used with caution:\n\n- Be careful about allowing arbitrary AppleScript execution in production\n- Consider using configuration options to disable features you don't need\n- Run in a secure environment with appropriate access controls\n\n## License\n\nMIT ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "macos",
        "applescript",
        "mac control",
        "control macos",
        "home automation"
      ],
      "category": "smart-home-and-automation"
    },
    "ThomasRohde--hue-mcp": {
      "owner": "ThomasRohde",
      "name": "hue-mcp",
      "url": "https://github.com/ThomasRohde/hue-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ThomasRohde.webp",
      "description": "Control Philips Hue smart lighting systems using natural language commands through an AI assistant. Manage individual lights, groups, scenes, and special effects with a local integration for a streamlined smart home experience.",
      "stars": 11,
      "forks": 5,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-17T23:58:20Z",
      "readme_content": "# Philips Hue MCP Server\n\nA powerful Model Context Protocol (MCP) interface for controlling Philips Hue smart lighting systems.\n\n## Table of Contents\n\n- [Philips Hue MCP Server](#philips-hue-mcp-server)\n  - [Overview](#overview)\n  - [Features](#features)\n  - [Quick Start](#quick-start)\n  - [Setup](#setup)\n    - [Prerequisites](#prerequisites)\n    - [Installation](#installation)\n    - [First Run](#first-run)\n  - [Using with Claude](#using-with-claude)\n  - [API Reference](#api-reference)\n    - [Resources](#resources)\n    - [Tools](#tools)\n    - [Prompts](#prompts)\n  - [Examples](#examples)\n    - [Controlling Single Lights](#controlling-single-lights)\n    - [Working with Groups](#working-with-groups)\n    - [Creating Scenes](#creating-scenes)\n  - [Advanced Options](#advanced-options)\n  - [Troubleshooting](#troubleshooting)\n  - [How It Works](#how-it-works)\n  - [Contributing](#contributing)\n  - [License](#license)\n\n## Overview\n\nThis server leverages the Model Context Protocol (MCP) to provide a seamless integration between AI assistants like Claude and your Philips Hue lighting system. With it, you can control your smart lights using natural language, access detailed lighting information, and create advanced lighting setups through a standardized AI-friendly interface.\n\n## Features\n\n- **Complete Light Control**: Turn on/off, adjust brightness, change colors, set color temperature\n- **Comprehensive Group Management**: Control multiple lights together, create custom groups\n- **Scene Handling**: Apply existing scenes, create quick custom lighting scenes\n- **Activity-Based Presets**: Ready-made settings for reading, relaxation, concentration, and more\n- **Special Effects**: Access dynamic lighting effects like color loops\n- **Natural Language Control**: Specialized prompts for lighting control through conversation\n- **Secure Local Integration**: Connects directly to your Hue bridge on your local network\n\n## Quick Start\n\n```bash\n# Install dependencies\npip install phue mcp\n\n# Run the server\npython hue_server.py\n\n# Install in Claude Desktop\nmcp install hue_server.py --name \"My Hue Lights\"\n```\n\nThen in Claude, start with: \"I'd like to control my Philips Hue lights. Can you show me which lights I have available?\"\n\n## Setup\n\n### Prerequisites\n\n- Python 3.9+\n- A Philips Hue bridge on your local network\n- Philips Hue lights paired with your bridge\n\n### Installation\n\n1. Clone this repository or download the `hue_server.py` file\n2. Install the required dependencies:\n\n```bash\npip install phue mcp\n```\n\n### First Run\n\n1. Run the server:\n\n```bash\npython hue_server.py\n```\n\n2. When prompted, press the link button on your Hue bridge to authorize the connection\n3. Your connection details will be saved in `~/.hue-mcp/config.json` for future use\n\n## Using with Claude\n\n### Option 1: Install in Claude Desktop\n\nIf you have Claude Desktop installed:\n\n```bash\nmcp install hue_server.py --name \"Philips Hue Controller\"\n```\n\n### Option 2: Test with the MCP Inspector\n\nFor development and testing:\n\n```bash\nmcp dev hue_server.py\n```\n\n## API Reference\n\n### Resources\n\n| Resource | Description |\n|----------|-------------|\n| `hue://lights` | Information about all lights |\n| `hue://lights/{light_id}` | Detailed information about a specific light |\n| `hue://groups` | Information about all light groups |\n| `hue://groups/{group_id}` | Information about a specific group |\n| `hue://scenes` | Information about all scenes |\n\n### Tools\n\n| Tool | Description |\n|------|-------------|\n| `get_all_lights` | Get information about all lights |\n| `get_light` | Get detailed information about a specific light |\n| `get_all_groups` | Get information about all light groups |\n| `get_group` | Get information about a specific group |\n| `get_all_scenes` | Get information about all scenes |\n| `turn_on_light` | Turn on a specific light |\n| `turn_off_light` | Turn off a specific light |\n| `set_brightness` | Adjust light brightness (0-254) |\n| `set_color_rgb` | Set light color using RGB values |\n| `set_color_temperature` | Set light color temperature (2000-6500K) |\n| `turn_on_group` | Turn on all lights in a group |\n| `turn_off_group` | Turn off all lights in a group |\n| `set_group_brightness` | Adjust group brightness (0-254) |\n| `set_group_color_rgb` | Set color for all lights in a group |\n| `set_scene` | Apply a scene to a group |\n| `find_light_by_name` | Search for lights by name |\n| `create_group` | Create a new light group |\n| `quick_scene` | Apply custom settings to create a scene |\n| `refresh_lights` | Update light information cache |\n| `set_color_preset` | Apply a color preset to a light |\n| `set_group_color_preset` | Apply a color preset to a group |\n| `alert_light` | Make a light flash briefly |\n| `set_light_effect` | Set dynamic effects like color loops |\n\n### Prompts\n\n| Prompt | Description |\n|--------|-------------|\n| `control_lights` | Natural language light control |\n| `create_mood` | Setup mood lighting for activities |\n| `light_schedule` | Learn about scheduling options |\n\n## Examples\n\n### Controlling Single Lights\n\n```python\n# Turn on a light\nturn_on_light(1)\n\n# Set a light to 50% brightness\nset_brightness(1, 127)\n\n# Change a light color to purple\nset_color_rgb(1, 128, 0, 128)\n\n# Set reading mode\nset_color_preset(1, \"reading\")\n```\n\n### Working with Groups\n\n```python\n# Turn off all lights in living room (group 2)\nturn_off_group(2)\n\n# Create a new group\ncreate_group(\"Bedroom\", [3, 4, 5])\n\n# Set all kitchen lights to energizing mode\nset_group_color_preset(3, \"energize\")\n```\n\n### Creating Scenes\n\n```python\n# Apply an existing scene\nset_scene(2, \"abc123\")  # Group 2, scene ID abc123\n\n# Create a quick relaxing scene for the living room\nquick_scene(\"Evening Relaxation\", group_id=2, rgb=[255, 147, 41], brightness=120)\n```\n\n## Advanced Options\n\nRun the server with custom settings:\n\n```bash\npython hue_server.py --host 0.0.0.0 --port 8888 --log-level debug\n```\n\n## Troubleshooting\n\n- **Bridge not found**: If automatic discovery doesn't work, you have two options:\n  1. Manually edit the `BRIDGE_IP` variable in the script with your bridge's IP address\n  2. Manually create a config file:\n     ```bash\n     # Create the config directory\n     mkdir -p ~/.hue-mcp\n     \n     # Create a config.json file with your bridge IP\n     echo '{\"bridge_ip\": \"192.168.1.x\"}' > ~/.hue-mcp/config.json\n     ```\n     Replace \"192.168.1.x\" with your actual Hue bridge IP address\n     \n- **Connection issues**: Delete `~/.hue-mcp/config.json` and restart the server to re-authenticate\n- **Light control not working**: Use `refresh_lights` tool to update the light information cache\n- **Groups or scenes not showing up**: Restart the bridge and server to sync all data\n\n## How It Works\n\nThis server connects to your Philips Hue bridge using the `phue` Python library and exposes functionality through the Model Context Protocol. When an AI like Claude connects:\n\n1. The server authenticates with your bridge using stored credentials\n2. It provides resources that describe your lighting setup\n3. It exposes tools that Claude can use to control your lights\n4. It offers prompts that help Claude understand how to interact with your lights\n\nAll communication with your Hue system happens locally within your network for security and privacy.\n\n## Contributing\n\nContributions are welcome! Feel free to:\n\n- Report bugs and suggest features in the issue tracker\n- Submit pull requests with improvements\n- Share examples of how you're using this with your smart home setup\n\n## License\n\nThis project is available under the MIT license.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hue",
        "automation",
        "lighting",
        "philips hue",
        "smart lighting",
        "hue smart"
      ],
      "category": "smart-home-and-automation"
    },
    "allenporter--mcp-server-home-assistant": {
      "owner": "allenporter",
      "name": "mcp-server-home-assistant",
      "url": "https://github.com/allenporter/mcp-server-home-assistant",
      "imageUrl": "/freedevtools/mcp/pfp/allenporter.webp",
      "description": "Facilitates the integration of AI models with Home Assistant, enabling seamless interaction and control of smart home devices using the Model Context Protocol. Supports the custom component that will be incorporated into Home Assistant Core for enhanced functionality.",
      "stars": 60,
      "forks": 8,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-03T22:31:55Z",
      "readme_content": "# mcp-server-home-assistant\n\nA Model Context Protocol Server for Home Assistant. See [Model Context Protocol](https://modelcontextprotocol.io/)\nfor context.\n\nThe custom component required by this integration is moving to Home Assistant Core in https://github.com/home-assistant/core/pull/134122\n\n## Usage in Claude Desktop\n\n1. Install the [home-assistant-model-context-protocol](https://github.com/allenporter/home-assistant-model-context-protocol) custom component in your Home Assistant instance\n1. Create a [Long Lived Access Token](https://www.home-assistant.io/docs/authentication/#your-account-profile)\n1. Clone this git repo to a path like `/Users/allen/Development/mcp-server-home-assistant`\n1. Edit your `claude_desktop_config.json` with something like this and include your home assistant url and api token:\n\n    ```json\n    {\n        \"mcpServers\": {\n            \"Home-assistant\": {\n                \"command\": \"uv\",\n                \"args\": [\n                    \"--directory\",\n                    \"/Users/allen/Development/mcp-server-home-assistant\",\n                    \"run\",\n                    \"mcp-server-home-assistant\",\n                    \"-v\",\n                    \"-v\"\n                ],\n                \"env\": {\n                    \"HOME_ASSISTANT_WEB_SOCKET_URL\": \"http://localhost:8123/api/websocket\",\n                    \"HOME_ASSISTANT_API_TOKEN\": \"byJhbVci0iJIUzI1ii1sInR5cCI6IkpXVCJ9.....\n                }\n            }\n        }\n    }\n    ```\n1. You can view the logs e.g. `~Library/Logs/Claude/mcp-server-Home-assistant.log` to understand what is happening\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "home",
        "assistant",
        "home automation",
        "home assistant",
        "smart home"
      ],
      "category": "smart-home-and-automation"
    },
    "ecovacs-ai--ecovacs-mcp": {
      "owner": "ecovacs-ai",
      "name": "ecovacs-mcp",
      "url": "https://github.com/ecovacs-ai/ecovacs-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ecovacs-ai.webp",
      "description": "Control and monitor Ecovacs cleaning robots through an MCP interface, enabling integration of services such as device listing, cleaning control, recharge control, and status queries into intelligent agents.",
      "stars": 17,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T08:07:02Z",
      "readme_content": "# 扫地机器人控制MCP Server\n\n[English](README_EN.md) | 中文\n\n科沃斯核心API现已全面兼容MCP协议，是全球首家兼容MCP协议的机器人服务商。\n\n科沃斯已经完成了4个核心API接口和MCP协议的对接，包括设备列表查询、清扫控制、回充控制和工作状态查询。\n\n作为全球首家支持MCP协议的清洁机器人服务商，科沃斯MCP Server发布后，智能体开发者仅需简单配置，就可以在大模型中快速接入机器人服务，实现查询、清扫、回充等能力。\n\n大幅降低了智能体应用开发过程中调用机器人控制服务相关能力的门槛，显著提升了智能体应用的开发效率。\n\n## 工具\n\n### 设备列表查询\n\n获取用户绑定的所有机器人列表。\n\n#### Input:\n\n无参数\n\n#### Returns:\n\n```json\n{\n  \"status\": 0,\n  \"message\": \"success\",\n  \"data\": [\n    {\n      \"nickname\": \"机器人昵称\",\n    }\n  ]\n}\n```\n\n### 启动清扫\n\n控制扫地机器人开始、暂停、恢复或停止清扫。\n\n#### Input:\n\n- `nickname`: 机器人的昵称，用于查找设备，支持模糊匹配\n- `act`: 清扫行为\n  - `s`: 开始清扫\n  - `r`: 恢复清扫\n  - `p`: 暂停清扫\n  - `h`: 停止清扫\n\n#### Returns:\n\n```json\n{\n  \"msg\": \"OK\",\n  \"code\": 0,\n  \"data\": []\n}\n```\n\n### 控制回充\n\n控制机器人开始或停止回充。\n\n#### Input:\n\n- `nickname`: 机器人昵称，用于查找设备\n- `act`: 机器行为\n  - `go-start`: 开始回充\n  - `stopGo`: 结束回充\n\n#### Returns:\n\n```json\n{\n  \"msg\": \"OK\",\n  \"code\": 0,\n  \"data\": []\n}\n```\n\n### 查询工作状态\n\n查询机器人当前的工作状态。\n\n#### Input:\n\n- `nickname`: 机器人昵称，用于查找设备\n\n#### Returns:\n\n```json\n{\n\t\"code\": 0,\n\t\"msg\": \"success\",\n\t\"data\": {\n\t\t\"ctl\": {\n\t\t\t\"data\": {\n\t\t\t\t\"ret\": \"ok\",\n\t\t\t\t\"cleanSt\": \"h\",\n\t\t\t\t\"chargeSt\": \"charging\",\n\t\t\t\t\"stationSt\": \"i\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n**状态码说明：**\n\n| 参数名     | 类型           | 说明                                                                                                                                                                                                                                                                      |\n| ---------- | -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| cleanSt    | string         | 清扫状态，请求成功时存在。s-清扫中，p-暂停中，h-空闲中，goposition-正在前往指定位置，gopositionpause-在指定点停止，findpet-寻找宠物，findpetpause-寻找宠物暂停，cruise-巡航中，cruisepause-巡航暂停，buildmap-创建地图，buildmappause-建图暂停 |\n| chargeSt   | string         | 充电状态，请求成功时存在。g-正在回充，gp-回充暂停，i-空闲，sc-底座充电，wc-线充，charging-充电中（包括SC和WC）  \n| stationSt  | string         | 基站状态，i-空闲，wash-正在清洗拖布，dry-正在烘干，drypause-烘干暂停，dust-集尘中，dustpause-集尘暂停，clean-基站清洁，cleanpause-基站清洁暂停，wash-清洗拖布，washpause-清洗拖布暂停  \n\n## 开始\n\n## 安装\n\n### github本地安装\n\n```bash\ngit clone git@github.com:ecovacs-ai/ecovacs-mcp.git\n\nuv add \"mcp[cli]\" mcp requests\n\nuv run ecovacs_mcp/robot_mcp_stdio.py\n```\n\n### pipy\n\n```\npip install ecovacs-robot-mcp\n\npython3 -m ecovacs_robot_mcp\n\n```\n\n## 环境变量\n\n- `ECO_API_KEY`: API访问密钥，用于验证接口调用权限\n- `ECO_API_URL`: API HOST\n  - 中国内地： `https://open.ecovacs.cn`\n  - 非中国内地： `https://open.ecovacs.com`\n\n## 获取AK & 删除AK\n\n在选择两种方法（本地或者SSE）之前，你需要在[科沃斯开放平台的控制台](https://open.ecovacs.cn)中创建一个服务端AK，通过AK你才能够调用机器人的API能力。\n\n如果你想取消授权，在[科沃斯开放平台的控制台](https://open.ecovacs.cn)中同样可以移除AK的授权。\n\n科沃斯开放平台（中国内地）：https://open.ecovacs.cn\n\n科沃斯开放平台（非中国内地）：https://open.ecovacs.com\n\n<img src=\"images/img_v3_02lo_b450632b-9dbe-4cd9-aead-c625ad3458fg.jpg\" alt=\"获取AK\" width=\"600\" />\n\n## 配置\n\n在任意MCP客户端（如Claude.app）中添加如下配置，部分客户端下可能需要做一些格式化调整。\n\n其中 `ECO_API_KEY`为API访问密钥\n`ECO_API_URL`为API HOST\n\n- Using uvx\n```json\n{\n  \"mcpServers\": {\n    \"ecovacs_mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\"ecovacs-robot-mcp\"],\n      \"env\": {\n        \"ECO_API_KEY\": \"your AK...........\",\n        \"ECO_API_URL\": \"https://open.ecovacs.cn\" // 如果是非中国内地，配置为 https://open.ecovacs.com\n      }\n    }\n  }\n}\n```\n\n- Using pip installation\n\n```json\n{\n  \"mcpServers\": {\n    \"ecovacs_mcp\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"ecovacs-robot-mcp\"],\n      \"env\": {\n          \"ECO_API_KEY\": \"your AK...........\",\n          \"ECO_API_URL\": \"https://open.ecovacs.cn\" // 如果是非中国内地，配置为 https://open.ecovacs.com\n      }\n    }\n  }\n}\n\n```\n## 使用示例（Claude示列）\n\n打开Claude for Desktop的Setting，切换到Developer，点击Edit Config，用任意的IDE打开配置文件。\n\n<img src=\"images/img_v3_02lm_ac10ff15-8764-4ad3-906c-5c8433a9e5eg.jpg\" alt=\"Claude设置界面\" width=\"600\" />\n\n<img src=\"images/img_v3_02lm_2ced9293-af22-4d9f-a70c-337643a93c7g.jpg\" alt=\"Claude配置文件\" width=\"600\" />\n\n将以下配置添加到配置文件中，ECO_API_KEY 是访问科沃斯开放平台API的AK，在[此页面](https://open.ecovacs.cn/preparationForUse)中申请获取：\n\n```json\n{\n    \"mcpServers\": {\n        \"ecovacs_mcp\": {\n            \"command\": \"python3\",\n            \"args\": [\"-m\", \"ecovacs_robot_mcp\"],\n            \"env\": {\n                \"ECO_API_KEY\": \"your ak......\",\n                \"ECO_API_URL\": \"https://open.ecovacs.cn\"// 如果是非中国内地，配置为 https://open.ecovacs.com\n            }\n        }\n    }\n}\n```\n\n重启Claude，此时设置面板已经成功加载了科沃斯机器人MCP Server。在软件主界面对话框处可以看到有4个可用的MCP工具，点击可以查看详情。\n\n<img src=\"images/img_v3_02lm_e1b700d6-9693-4448-8acf-d622f28b3b3g.jpg\" alt=\"Claude MCP工具\" width=\"600\" />\n\n#### 效果\n\n接下来就可以进行提问，验证科沃斯机器人小助手的能力了。\n\n<img src=\"images/img_v3_02lm_2f3b431a-c289-4476-8a24-1ff1a231aadg.jpg\" alt=\"Claude交互效果\" width=\"600\" />\n\n\n## 使用示例（Cursor示列）\n### 进入 Cursor 设置界面配置 SSE 连接\n\n<img src=\"images/doc_1743660020811_d2b5c.6bec4f04.png\" alt=\"Cursor设置界面\" width=\"600\" />\n\n### 添加一个新的 MCP Server 配置\n\n- 中国内地\n```json\n{\n  \"mcpServers\": {\n    \"robot_control_server\": {\n      \"url\": \"https://mcp-open.ecovacs.cn/sse?ak=your ak\"\n      // For regions outside Mainland China, configure as https://mcp-open.ecovacs.com/sse?ak=your ak\n    }\n  }\n}\n```\n- 非中国内地\n```json\n{\n  \"mcpServers\": {\n    \"robot_control_server\": {\n      \"url\": \"https://mcp-open.ecovacs.com/sse?ak=your ak\"\n    }\n  }\n}\n```\n### 返回 Cursor 设置界面查看 MCP 服务工具状态\n\n<img src=\"images/20250423-175131.0caa52fa.jpg\" alt=\"Cursor MCP服务状态\" width=\"600\" />\n\n### 选择配置 Cursor 大模型让你拥有更好的服务体验，建议选择 claude-3.7-sonnet\n\n<img src=\"images/doc_1743660126834_d2b5c.fc9da8f3.png\" alt=\"Cursor模型配置\" width=\"600\" />\n\n### 模型交互模式 ：选择 Agent 方式\n\n<img src=\"images/doc_1743660181250_d2b5c.1d9a47eb.png\" alt=\"Cursor交互模式\" width=\"600\" />\n\n### 效果\n\n<img src=\"images/img_v3_02lm_f5094f2f-7cf3-4ee4-a5f9-ae29b746175g.jpg\" alt=\"Cursor交互模式\" width=\"600\" />\n\n## 许可证\n\n[MIT](LICENSE) © ecovacs\n\n## 反馈\n\n在使用科沃斯机器人MCP Server时遇到的任何问题，欢迎通过`issue或者联系我们，我们也欢迎每一个积极的`PR`，非常感谢各位的支持与贡献❤️\n\n## 联系方式\n\nMail： pei.zhou@ecovacs.com\n\nWechat：\n\n<img src=\"images/img_v3_02lm_d2a67ba9-6fa2-4f96-9d37-09f8d8b8e21g.png\" alt=\"微信二维码\" width=\"200\" />\n\n## 更新\n\n| 版本 | 功能说明                   | 更新日期      |      |      |      |\n| ---- | -------------------------- | ------------- | ---- | ---- | ---- |\n| V1.0 | Ecovacs MCP Server正式上线 | 2025年4月24日 |      |      |      |\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecovacs",
        "automation",
        "robots",
        "automation ecovacs",
        "ecovacs ai",
        "ai ecovacs"
      ],
      "category": "smart-home-and-automation"
    },
    "guilhermelirio--homeassistant-mpc": {
      "owner": "guilhermelirio",
      "name": "homeassistant-mpc",
      "url": "https://github.com/guilhermelirio/homeassistant-mpc",
      "imageUrl": "/freedevtools/mcp/pfp/guilhermelirio.webp",
      "description": "Connects AI assistants with smart home devices, enabling control and monitoring of Home Assistant entities through a straightforward interface. Integrates AI capabilities into smart home automation workflows.",
      "stars": 3,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-12T03:48:17Z",
      "readme_content": "[![smithery badge](https://smithery.ai/badge/@guilhermelirio/homeassistant-mpc)](https://smithery.ai/server/@guilhermelirio/homeassistant-mpc)\n\n# Home Assistant MCP\n\nThis is an MCP (Model Context Protocol) server that provides tools for integration with Home Assistant, allowing AI assistants to interact with smart home devices.\n\n## Setup\n\n### Installing via Smithery\n\nTo install Home Assistant Integration for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@guilhermelirio/homeassistant-mpc):\n\n```bash\nnpx -y @smithery/cli install @guilhermelirio/homeassistant-mpc --client claude\n```\n\n### Manual Installation\n1. Install dependencies:\n\n```bash\nnpm install\n```\n\n2. Configure environment variables:\n   - Obtain a Long-Lived Access Token from your Home Assistant\n   - Configure the environment variables in a `.env` file at the project root:\n\n```\nHOME_ASSISTANT_URL=http://your-home-assistant:8123\nHOME_ASSISTANT_TOKEN=your_token_here\n```\n\n## Starting the server\n\n```bash\nnpm start\n```\n\nFor development:\n\n```bash\nnpm run dev\n```\n\n## Available Tools\n\n### Home Assistant API Verification\n\n- **homeassistant_api**: Verifies if the Home Assistant API is online\n  - Parameters: none\n  - Example: `homeassistant_api()`\n\n### Get Entity State\n\n- **homeassistant_get_state**: Gets the current state of a Home Assistant entity\n  - Parameters: `entity_id` (entity ID)\n  - Example: `homeassistant_get_state(\"light.living_room\")`\n\n### Call Services\n\n- **homeassistant_call_service**: Calls a service for a Home Assistant entity\n  - Parameters:\n    - `entity_id` (entity ID)\n    - `domain` (service domain)\n    - `service` (service to call)\n  - Example: `homeassistant_call_service(\"light.living_room\", \"light\", \"turn_on\")`\n\n## Development\n\nThis project uses TypeScript and the MCP SDK library to create tools that can be accessed by language models such as Claude, GPT, etc.\n\nTo add new tools:\n\n1. Create a module in `src/tools/[category]`\n2. Implement your tools following the existing pattern\n3. Register the module in `src/index.ts`\n\n## Contributions\n\nContributions are welcome! Feel free to open issues or submit pull requests.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "ai",
        "mpc",
        "home automation",
        "smart home",
        "home assistant"
      ],
      "category": "smart-home-and-automation"
    },
    "hekmon8--Homeassistant-server-mcp": {
      "owner": "hekmon8",
      "name": "Homeassistant-server-mcp",
      "url": "https://github.com/hekmon8/Homeassistant-server-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/hekmon8.webp",
      "description": "Control and monitor Home Assistant devices through MCP applications. Interact with device states, toggle devices, and trigger automations seamlessly.",
      "stars": 43,
      "forks": 9,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-03T22:32:02Z",
      "readme_content": "# Home Assistant MCP Server\n\nA Model Context Protocol (MCP) server for interacting with Home Assistant. This server provides tools to control and monitor your Home Assistant devices through MCP-enabled applications.\n\n<a href=\"https://glama.ai/mcp/servers/io8m0yc5wq\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/io8m0yc5wq/badge\" alt=\"Home Assistant Server MCP server\" />\n</a>\n\nThis project is part of the AI Model Context Protocol (MCP) ecosystem. For more information and documentation about MCP tools, visit [www.aimcp.info](http://www.aimcp.info).\n\n## Features\n\n- Get device states\n- Control device states (on/off)\n- Trigger automations\n- List available entities\n\n## Installation\n\n1. Clone this repository:\n```bash\ngit clone https://github.com/yourusername/homeassistant-server-mcp.git\ncd homeassistant-server-mcp\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the project:\n```bash\nnpm run build\n```\n\n4. Configure the MCP server by adding the following to your MCP settings file (typically located at `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json` for VSCode):\n\n```json\n{\n  \"mcpServers\": {\n    \"homeassistant\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/homeassistant-mcp/homeassistant-server/build/index.js\"],\n      \"env\": {\n        \"HA_URL\": \"http://your-homeassistant-url:8123\",\n        \"HA_TOKEN\": \"your-long-lived-access-token\"\n      }\n    }\n  }\n}\n```\n\nReplace `your-homeassistant-url` and `your-long-lived-access-token` with your Home Assistant instance URL and access token.\n\n## Usage\n\nThe server provides the following tools:\n\n### 1. Get Device State\n\n```typescript\n// Example usage\nuse_mcp_tool({\n  server_name: \"homeassistant\",\n  tool_name: \"get_state\",\n  arguments: {\n    entity_id: \"light.living_room\"\n  }\n});\n```\n\n### 2. Toggle Device State\n\n```typescript\n// Example usage\nuse_mcp_tool({\n  server_name: \"homeassistant\",\n  tool_name: \"toggle_entity\",\n  arguments: {\n    entity_id: \"switch.bedroom\",\n    state: \"on\"  // or \"off\"\n  }\n});\n```\n\n### 3. Trigger Automation\n\n```typescript\n// Example usage\nuse_mcp_tool({\n  server_name: \"homeassistant\",\n  tool_name: \"trigger_automation\",\n  arguments: {\n    automation_id: \"automation.morning_routine\"\n  }\n});\n```\n\n### 4. List Entities\n\n```typescript\n// Example usage\nuse_mcp_tool({\n  server_name: \"homeassistant\",\n  tool_name: \"list_entities\",\n  arguments: {\n    domain: \"light\"  // optional, filters by domain\n  }\n});\n```\n\n## Contributing\n\nContributions are welcome! Here's how you can help:\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\nPlease make sure to update tests as appropriate and follow the existing code style.\n\n## Documentation\n\nFor detailed documentation about MCP tools and the ecosystem:\n- Visit [www.aimcp.info](http://www.aimcp.info)\n- Check the MCP tools directory on the website\n- Read the integration guides and best practices\n\n## License\n\nThis project is licensed under the MIT License - see below for details:\n\n```\nMIT License\n\nCopyright (c) 2024 homeassistant-mcp\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n## Security\n\nTo securely use this server:\n\n1. Always use HTTPS for your Home Assistant instance\n2. Keep your access tokens secure and never commit them to version control\n3. Regularly rotate your access tokens\n4. Use environment variables for sensitive information\n\n## Support\n\nIf you encounter any issues or have questions, please:\n\n1. Check the existing issues in the repository\n2. Create a new issue if your problem hasn't been reported\n3. Provide as much context as possible when reporting issues\n4. Visit [www.aimcp.info](http://www.aimcp.info) for additional support resources",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automations",
        "automation",
        "homeassistant",
        "home automation",
        "smart home",
        "automation hekmon8"
      ],
      "category": "smart-home-and-automation"
    },
    "hpohlmann--home-assistant-mcp": {
      "owner": "hpohlmann",
      "name": "home-assistant-mcp",
      "url": "https://github.com/hpohlmann/home-assistant-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/hpohlmann.webp",
      "description": "Control Home Assistant devices using AI assistants through natural language processing. Manage entities, turn devices on/off, and adjust light colors and brightness with simple commands.",
      "stars": 22,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-20T17:02:46Z",
      "readme_content": "# Home Assistant MCP\n\nA Model Context Protocol (MCP) integration for controlling Home Assistant devices using AI assistants.\n\n## Overview\n\nThis MCP allows AI assistants to control your Home Assistant devices. It provides tools to:\n\n1. Search for entities in your Home Assistant instance\n2. Control devices (turn them on/off)\n3. Control light colors and brightness\n\n## Prerequisites\n\n- Python 3.11 or higher\n- Home Assistant instance running and accessible via API\n- Home Assistant Long-Lived Access Token\n\n## Installation\n\n1. Clone this repository\n2. Set up a Python environment:\n\n```bash\ncd home-assistant\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\npip install -U pip\npip install uv\nuv pip install -e .\n```\n\n## Configuration\n\n### Get a Home Assistant Long-Lived Access Token\n\n1. Go to your Home Assistant instance\n2. Navigate to your profile (click on your username in the sidebar)\n3. Scroll down to \"Long-Lived Access Tokens\"\n4. Create a new token with a descriptive name like \"MCP Integration\"\n5. Copy the token (you'll only see it once)\n\n### Set up in Cursor AI\n\nAdd the following configuration to your MCP configuration in Cursor:\n\n```json\n{\n  \"mcpServers\": {\n    \"home_assistant\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/your/home-assistant-mcp\",\n        \"run\",\n        \"main.py\"\n      ],\n      \"env\": {\n        \"HOME_ASSISTANT_TOKEN\": \"your_home_assistant_token_here\"\n      },\n      \"inheritEnv\": true\n    }\n  }\n}\n```\n\nReplace:\n\n- `/path/to/your/home-assistant` with the actual path to this directory\n- `your_home_assistant_token_here` with your Home Assistant Long-Lived Access Token\n\n### Home Assistant URL Configuration\n\nBy default, the MCP tries to connect to Home Assistant at `http://homeassistant.local:8123`.\n\nIf your Home Assistant is at a different URL, you can modify the `HA_URL` variable in `app/config.py`.\n\n## Usage\n\nOnce configured, you can use Cursor AI to control your Home Assistant devices:\n\n- Search for devices: \"Find my living room lights\"\n- Control devices: \"Turn on the kitchen light\"\n- Control light colors: \"Set my living room lights to red\"\n- Adjust brightness: \"Set my dining room lights to blue at 50% brightness\"\n\n### Light Control Features\n\nThe MCP now supports advanced light control capabilities:\n\n1. **Color Control**: Set any RGB color for compatible lights\n   - Specify colors using RGB values (0-255 for each component)\n   - Example: `set_device_color(\"light.living_room\", 255, 0, 0)` for red\n\n2. **Brightness Control**: Adjust light brightness\n   - Optional brightness parameter (0-255)\n   - Can be combined with color changes\n   - Example: `set_device_color(\"light.dining_room\", 0, 0, 255, brightness=128)` for medium-bright blue\n\n## Troubleshooting\n\n- If you get authentication errors, verify your token is correct and has not expired\n- Check that your Home Assistant instance is reachable at the configured URL\n- For color control issues:\n  - Verify that your light entity supports RGB color control\n  - Check that the light is turned on before attempting to change colors\n\n## Future Capabilities\n\n### Dynamic Entity Exposure\n\nThe current implementation requires a two-step process to control devices:\n\n1. Search for entities using natural language\n2. Control the entity using its specific entity_id\n\nA planned enhancement is to create a more dynamic way to expose entities to the control devices tool, allowing the AI to:\n\n- Directly control devices through more natural commands (e.g., \"turn off the kitchen lights\")\n- Cache frequently used entities for faster access\n- Support more complex operations like adjusting brightness, temperature, or other attributes\n- Handle entity groups and scenes more intuitively\n\nThis would significantly reduce the time to action and create a more seamless user experience when controlling Home Assistant devices through an AI assistant.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "hpohlmann",
        "ai",
        "automation hpohlmann",
        "home automation",
        "home assistant"
      ],
      "category": "smart-home-and-automation"
    },
    "jango-blockchained--advanced-homeassistant-mcp": {
      "owner": "jango-blockchained",
      "name": "advanced-homeassistant-mcp",
      "url": "https://github.com/jango-blockchained/advanced-homeassistant-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/jango-blockchained.webp",
      "description": "Integrate AI with Home Assistant to control smart home devices and monitor systems through natural language commands. The server acts as a bridge, enabling command execution, information retrieval, and management of long-running operations.",
      "stars": 33,
      "forks": 12,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-02T22:00:56Z",
      "readme_content": "# 🏠 Home Assistant MCP\n\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n[![Bun](https://img.shields.io/badge/bun-%3E%3D1.0.26-black)](https://bun.sh)\n[![TypeScript](https://img.shields.io/badge/typescript-%5E5.0.0-blue.svg)](https://www.typescriptlang.org)\n[![smithery badge](https://smithery.ai/badge/@jango-blockchained/homeassitant-mcp)](https://smithery.ai/server/@jango-blockchained/homeassitant-mcp)\n\n> **Bridge the gap between AI assistants and your smart home** 🚀\n\nA powerful, secure, and extensible Model Context Protocol (MCP) server that enables AI assistants like Claude, GPT, and Cursor to seamlessly interact with Home Assistant. Control your lights, climate, automations, and more through natural language commands.\n\n---\n\n## ✨ Feature Overview\n\n### 🤖 AI-Powered Smart Home Control\n\n- **Natural Language Processing**: Turn \"dim the living room lights to 50%\" into actual device commands\n- **Multi-Assistant Support**: Works with Claude, GPT-4, Cursor, and other MCP-compatible assistants\n- **Intelligent Context**: Remembers device states, relationships, and user preferences\n\n### 🛡️ Enterprise-Grade Security\n\n- **Rate Limiting**: Protects against abuse with configurable request limits\n- **Input Sanitization**: Prevents XSS and injection attacks\n- **JWT Authentication**: Secure token-based access control\n- **Security Headers**: Comprehensive protection against web vulnerabilities\n\n### ⚡ High-Performance Architecture\n\n- **Bun Runtime**: 4x faster than Node.js with built-in TypeScript support\n- **Streaming Responses**: Real-time updates for long-running operations\n- **Modular Design**: Clean separation of concerns with extensible plugin system\n- **Multiple Transports**: HTTP REST API, WebSocket, and Standard I/O support\n\n### 🏠 Comprehensive Device Control\n\n- **Lighting Control**: Brightness, color temperature, RGB colors, and effects\n- **Climate Management**: Thermostats, HVAC modes, fan control, and scheduling\n- **Automation & Scenes**: Trigger automations, activate scenes, and manage routines\n- **Device Discovery**: Intelligent device listing with filtering and search\n- **Notification System**: Send alerts through Home Assistant's notification channels\n\n### 🎙️ Voice & AI Integration\n\n- **Speech-to-Text**: Whisper model integration for voice commands\n- **Wake Word Detection**: Always-listening capabilities with custom wake words\n- **NLP Processing**: Advanced intent recognition and entity extraction\n- **Context Awareness**: Learns from usage patterns and user behavior\n\n---\n\n## 🚀 Quick Start\n\nGet up and running in minutes:\n\n```bash\n# Clone and install\ngit clone https://github.com/jango-blockchained/homeassistant-mcp.git\ncd homeassistant-mcp\nbun install\n\n# Configure environment\ncp .env.example .env\n# Edit .env with your Home Assistant details\n\n# Start the server\nbun run start:stdio\n```\n\nThat's it! Your AI assistant can now control your smart home. 🤖✨\n\n---\n\n## 📦 Installation\n\n### Prerequisites\n\n- 🚀 [Bun](https://bun.sh) (v1.0.26+) - *Recommended*\n- 🏠 [Home Assistant](https://www.home-assistant.io/) instance\n- 🐳 Docker (optional, for speech features)\n\n### Option 1: NPX (Easiest)\n\n```bash\nnpx @jango-blockchained/homeassistant-mcp@latest\n```\n\n### Option 2: Bunx with GitHub (No NPM Login Required)\n\nIf you can't login to npm, use Bunx to run directly from GitHub:\n\n```bash\n# Install Bun first if you don't have it\ncurl -fsSL https://bun.sh/install | bash\n\n# Then run from GitHub\nbunx github:jango-blockchained/homeassistant-mcp\n```\n\nAlternatively, install directly from Git:\n\n```bash\nbun add git+https://github.com/jango-blockchained/homeassistant-mcp.git\nhomeassistant-mcp\n```\n\n### Option 3: Local Installation\n\n```bash\n# Install globally\nbun add -g @jango-blockchained/homeassistant-mcp\n\n# Or locally\nbun add homeassistant-mcp\n\n# Run\nhomeassistant-mcp\n```\n\n### Option 4: From Source (Most Flexible)\n\n```bash\ngit clone https://github.com/jango-blockchained/homeassistant-mcp.git\ncd homeassistant-mcp\nbun install\nbun run build\nbun run start:stdio\n```\n\n---\n\n## 🛠️ Usage\n\n### AI Assistant Integration\n\n#### Claude Desktop\n\nAdd to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"homeassistant-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"@jango-blockchained/homeassistant-mcp@latest\"]\n    }\n  }\n}\n```\n\nOr if you can't login to npm, use bunx:\n\n```json\n{\n  \"mcpServers\": {\n    \"homeassistant-mcp\": {\n      \"command\": \"bunx\",\n      \"args\": [\"github:jango-blockchained/homeassistant-mcp\"]\n    }\n  }\n}\n```\n\n#### VS Code + Claude Extension\n\nThe `.vscode/settings.json` is pre-configured for immediate use.\n\n#### Cursor\n\nAdd to `.cursor/config/config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"homeassistant-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"@jango-blockchained/homeassistant-mcp@latest\"]\n    }\n  }\n}\n```\n\nOr with bunx:\n\n```json\n{\n  \"mcpServers\": {\n    \"homeassistant-mcp\": {\n      \"command\": \"bunx\",\n      \"args\": [\"github:jango-blockchained/homeassistant-mcp\"]\n    }\n  }\n}\n```\n\n### API Usage\n\nStart the HTTP server:\n\n```bash\nbun run start -- --http\n```\n\nAvailable endpoints:\n\n- `POST /api/tools/call` - Execute tools\n- `GET /api/resources/list` - List resources\n- `GET /api/health` - Health check\n- `WebSocket /api/ws` - Real-time updates\n\n### Configuration\n\nCreate a `.env` file:\n\n```env\n# Home Assistant\nHASS_HOST=http://your-ha-instance:8123\nHASS_TOKEN=your_long_lived_access_token\n\n# Server\nPORT=3000\nNODE_ENV=production\n\n# Security\nJWT_SECRET=your-secret-key\nRATE_LIMIT_WINDOW=15\nRATE_LIMIT_MAX=50\n```\n\n---\n\n## 🏗️ Architecture\n\n```text\n┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐\n│   AI Assistant  │◄──►│   MCP Server    │◄──►│ Home Assistant  │\n│  (Claude/GPT)   │    │                 │    │                 │\n└─────────────────┘    │ ┌─────────────┐ │    └─────────────────┘\n                       │ │  Transport  │ │\n                       │ │   Layer     │ │\n                       │ └─────────────┘ │\n                       │ ┌─────────────┐ │\n                       │ │ Middleware  │ │\n                       │ │   Layer     │ │\n                       │ └─────────────┘ │\n                       │ ┌─────────────┐ │\n                       │ │   Tools     │ │\n                       │ │   Layer     │ │\n                       └─────────────────┘\n```\n\n### Core Components\n\n- **Transport Layer**: HTTP, WebSocket, Stdio\n- **Middleware Layer**: Security, validation, logging\n- **Tools Layer**: Device control, automation, notifications\n- **Resource Manager**: State management and caching\n\n### Built-in Tools\n\n- 🔦 **Lights Control**: Full spectrum lighting management\n- 🌡️ **Climate Control**: HVAC and thermostat operations\n- ⚙️ **Automation**: Scene and automation triggers\n- 📱 **Notifications**: Multi-channel alert system\n- 📋 **Device Management**: Discovery and organization\n\n---\n\n## 🎯 Example Commands\n\nOnce integrated, your AI assistant can understand commands like:\n\n> \"Turn off all lights in the bedroom\"\n> \"Set the thermostat to 72°F\"\n> \"Activate the movie scene\"\n> \"What's the current temperature in the living room?\"\n> \"Notify everyone that dinner is ready\"\n\n---\n\n## 🤝 Contributing\n\nWe welcome contributions! Here's how to get involved:\n\n1. 🍴 Fork the repository\n2. 🌿 Create a feature branch\n3. 💻 Make your changes\n4. 🧪 Add tests if applicable\n5. 📝 Update documentation\n6. 🔄 Submit a pull request\n\n### Development Setup\n\n```bash\nbun install\nbun run build\nbun test\n```\n\n### Code Style\n\n- TypeScript with strict mode\n- ESLint for code quality\n- Prettier for formatting\n- Husky for pre-commit hooks\n\n---\n\n## 📄 License\n\nMIT License - see [LICENSE](LICENSE) for details.\n\n---\n\n## 🙏 Acknowledgments\n\nBuilt with ❤️ using:\n\n- [Bun](https://bun.sh) - The fast JavaScript runtime\n- [Home Assistant](https://www.home-assistant.io/) - The open-source home automation platform\n- [Model Context Protocol](https://modelcontextprotocol.io/) - The AI integration standard\n\n---\n\nTransform your smart home into an AI-powered experience\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "ai",
        "homeassistant",
        "home automation",
        "smart home",
        "home assistant"
      ],
      "category": "smart-home-and-automation"
    },
    "lsemenenko--openhue-mcp-server": {
      "owner": "lsemenenko",
      "name": "openhue-mcp-server",
      "url": "https://github.com/lsemenenko/openhue-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/lsemenenko.webp",
      "description": "Control Philips Hue lights using the OpenHue CLI in conjunction with Claude and other LLM interfaces. Facilitates direct interactions with smart lighting systems.",
      "stars": 9,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-31T15:58:04Z",
      "readme_content": "# OpenHue MCP Server\n\nAn MCP server that enables control of Philips Hue lights through Claude and other LLM interfaces using the OpenHue CLI.\n\n## Prerequisites\n\n- [Node.js](https://nodejs.org/) (v16 or higher)\n- [Docker](https://www.docker.com/get-started)\n- [Claude for Desktop](https://claude.ai/download) (optional, for testing)\n\n## Bridge Setup\n\nBefore using the server, you need to set up the OpenHue CLI with your Hue Bridge:\n\n1. Run the setup command:\n```bash\n# On Linux/macOS:\ndocker run -v \"${HOME}/.openhue:/.openhue\" --rm --name=openhue -it openhue/cli setup\n\n# On Windows (PowerShell):\ndocker run -v \"${env:USERPROFILE}\\.openhue:/.openhue\" --rm --name=openhue -it openhue/cli setup\n```\n\n2. Follow the on-screen instructions:\n   - The CLI will search for your Hue Bridge\n   - Press the link button on your Hue Bridge when prompted\n   - Wait for confirmation that the setup is complete\n\n3. Verify the setup by listing your lights:\n```bash\n# On Linux/macOS:\ndocker run -v \"${HOME}/.openhue:/.openhue\" --rm --name=openhue -it openhue/cli get lights\n\n# On Windows (PowerShell):\ndocker run -v \"${env:USERPROFILE}\\.openhue:/.openhue\" --rm --name=openhue -it openhue/cli get lights\n```\n\nIf you see your lights listed, the setup is complete and you're ready to use the MCP server.\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone <your-repo-url>\ncd claude-mcp-openhue\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the project:\n```bash\nnpm run build\n```\n\n4. Run the server:\n```bash\nnpm start\n```\n\n## Features\n\nThis server exposes the following capabilities through MCP:\n\n### Lights Control\n- List all lights or get specific light details\n- Turn lights on/off\n- Adjust brightness\n- Set colors\n- Control color temperature\n\n### Room Control\n- List all rooms or get room details\n- Control all lights in a room together\n- Set room-wide brightness and colors\n\n### Scene Management\n- List available scenes\n- Activate scenes with different modes\n- Filter scenes by room\n\n## Usage with Claude Desktop\n\n1. Open your Claude Desktop configuration file:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. Add the server configuration:\n```json\n{\n  \"mcpServers\": {\n    \"hue\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/build/index.js\"]\n    }\n  }\n}\n```\n\n3. Restart Claude Desktop\n\n4. Look for the hammer icon to verify the server is connected\n\n## Example Commands\n\nOnce connected, you can ask Claude natural language questions like:\n\n- \"What lights do I have in the living room?\"\n- \"Turn on all the lights in the kitchen\"\n- \"Set the bedroom lights to 50% brightness\"\n- \"Change the office lights to blue\"\n- \"Activate the 'Relaxing' scene\"\n- \"What scenes are available in the den?\"\n\n## Available Tools\n\n### get-lights\nLists all lights or gets details for specific lights\n```typescript\n{\n  lightId?: string;  // Optional light ID or name\n  room?: string;     // Optional room name filter\n}\n```\n\n### control-light\nControls individual lights\n```typescript\n{\n  target: string;    // Light ID or name\n  action: \"on\" | \"off\";\n  brightness?: number; // 0-100\n  color?: string;     // Color name\n  temperature?: number; // 153-500 Mirek\n}\n```\n\n### get-rooms\nLists all rooms or gets specific room details\n```typescript\n{\n  roomId?: string;  // Optional room ID or name\n}\n```\n\n### control-room\nControls all lights in a room\n```typescript\n{\n  target: string;    // Room ID or name\n  action: \"on\" | \"off\";\n  brightness?: number;\n  color?: string;\n  temperature?: number;\n}\n```\n\n### get-scenes\nLists available scenes\n```typescript\n{\n  room?: string;    // Optional room name filter\n}\n```\n\n### activate-scene\nActivates a specific scene\n```typescript\n{\n  name: string;     // Scene name or ID\n  room?: string;    // Optional room name\n  mode?: \"active\" | \"dynamic\" | \"static\";\n}\n```\n\n## Development\n\n### Project Structure\n```\n.\n├── src/\n│   └── index.ts    # Main server implementation\n├── build/          # Compiled JavaScript\n├── package.json\n├── tsconfig.json\n└── README.md\n```\n\n### Building\n```bash\nnpm run build\n```\n\n### Running\n```bash\nnpm start\n```\n\n## Troubleshooting\n\n### Server Not Connecting\n1. Check that Docker is running\n2. Verify OpenHue configuration exists\n3. Check Claude Desktop logs\n4. Try running OpenHue CLI directly\n\n### Command Failures\n1. Check OpenHue CLI permissions\n2. Verify light/room/scene names\n3. Check Docker container logs\n4. Verify Hue Bridge connectivity\n\n## License\n\nMIT License\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a new Pull Request",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "openhue",
        "philips",
        "hue",
        "philips hue",
        "smart lighting",
        "hue lights"
      ],
      "category": "smart-home-and-automation"
    },
    "miguelg719--home-assistant-mcp": {
      "owner": "miguelg719",
      "name": "home-assistant-mcp",
      "url": "https://github.com/miguelg719/home-assistant-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/miguelg719.webp",
      "description": "Integrate with Home Assistant to manage smart home devices through a unified interface. Control lights, climate settings, locks, alarm systems, and humidity levels using various tools and prompts.",
      "stars": 2,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-06-15T12:06:03Z",
      "readme_content": "# <img src=\"./img/ha.png\" height=\"30\" style=\"border-radius: 250%; margin: 0 5px;\"> 🤝 <img src=\"./img/mcp.png\" height=\"30\" style=\"border-radius: 20%; margin: 0 5px;\"> Home Assistant MCP Server\n\nA Model Context Protocol (MCP) server project that integrates with Home Assistant to provide smart home control capabilities.\n\n### Prompts\n\nThe server provides prompts for each domain's set of tools. \n\n### Tools\n\nThe server implements control for various Home Assistant domains. Currently supports:\n- 💡 Lights: Turn on/off, brightness control\n- 🌡️ Climate: Temperature control, HVAC modes\n- 🔒 Locks: Lock/unlock functionality  \n- 🚨 Alarm Control Panel: Arm/disarm security systems\n- 💧 Humidifier: Humidity control\n\n\nExample  tools include:\n\n```\nlight-turn_on()\nclimate-turn_off()\nalarm_control_panel-disarm()\nlock-lock()\nhumidifier-turn_off()\n```\n\n## Configuration\n\n### Environment Variables\n\nCreate a `.env` file in the root directory with:\n\n```\nHOMEASSISTANT_TOKEN=your_long_lived_access_token_here # get it from your Home Assistant instance after onboarding\nHOMEASSISTANT_BASE_URL=your_home_assistant_url_here # e.g. http://homeassistant.local:8123\n```\n\n## Quickstart\n\n### Install\n\nFollow the instructions on how to install Home Assistant and get a long lived access token.\n- [Home Assistant Getting Started](https://www.home-assistant.io/getting-started/)\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"home-assistant-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/home-assistant-server\",\n        \"run\",\n        \"home-assistant-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"home-assistant-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"home-assistant-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/miguel/Documents/home-assistant-server/home-assistant-server run home-assistant-server\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n\n## Contributing\n\nThanks for your interest in contributing to this project! \n\nPlease see [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines. \n\n## License\n\nMIT License - see [LICENSE](LICENSE) for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "mcp",
        "alarm",
        "home automation",
        "smart home",
        "home assistant"
      ],
      "category": "smart-home-and-automation"
    },
    "priyankark--phonepi-mcp": {
      "owner": "priyankark",
      "name": "phonepi-mcp",
      "url": "https://github.com/priyankark/phonepi-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/priyankark.webp",
      "description": "Transform a mobile phone into a toolbox for AI assistants using natural language commands, enabling tasks such as managing contacts, sending messages, and controlling phone settings.",
      "stars": 23,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-13T14:48:09Z",
      "readme_content": "# PhonePi MCP: Turn your phone into a toolbox for AI assistants using Model Context Protocol\n\nA powerful MCP server and companion app that allows you to manage and control your phone remotely using natural language commands via your favorite MCP-supported AI apps such as Cursor and Claude Desktop. This project provides a comprehensive set of tools and APIs to interact with your mobile device programmatically.\n\n## Overview\n\nPhone MCP enables you to:\n- Manage contacts and messages\n- Handle snippets and notes\n- Control phone settings and notifications\n- Send SMS and make calls\n- Share content across apps\n- Monitor battery status\n- Set timers and reminders\n- Find your phone with audio alerts\n\n## Security\nSecurity is a high concern. Here are a few aspects taken into account around security:\n- You are completely in charge around hosting the MCP server locally. The code is completely open source.\n- On the app front, you are in charge of what permissions to give depending on the features you want to use.\n- The app and the server are linked over your local network. There's no 3p remote servers involved in linking.\n- It is highly recommended you use this app over a secure network. Avoid public networks like airports and restaurants.\n- Tailscale is highly recommended for creating a private & secure VPN to connect your phone and desktops\n\n## Getting Started\n\nFor detailed documentation, features, and setup instructions, please visit:\n[phonepimcp.com](https://phonepimcp.com)\n\n## Support & Issues\n\nIf you encounter any bugs or have feature requests, please [open an issue](https://github.com/yourusername/phone-mcp/issues) on our GitHub repository. We actively monitor and respond to issues.\n\n## Contributing\n\nWe welcome contributions from the community! Here's how you can contribute:\n\n1. **Fork the Repository**\n   - Create your own fork of the code\n   - Make your changes in a new branch\n\n2. **Code Style**\n   - Follow the existing code style and conventions\n   - Include comments where necessary\n   - Write clear commit messages\n\n3. **Testing**\n   - Wait for the maintainer to test your changes\n\n4. **Submit a Pull Request**\n   - Provide a clear description of the changes\n   - Reference any related issues\n   - Wait for review and address any feedback\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Security\n\nIf you discover any security-related issues, please open an issue instead of using the issue tracker.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "phonepi",
        "automation",
        "mobile",
        "priyankark phonepi",
        "automation priyankark",
        "phonepi mcp"
      ],
      "category": "smart-home-and-automation"
    },
    "tevonsb--homeassistant-mcp": {
      "owner": "tevonsb",
      "name": "homeassistant-mcp",
      "url": "https://github.com/tevonsb/homeassistant-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/tevonsb.webp",
      "description": "Shares access to a local Home Assistant instance to enable natural language control and monitoring of smart home devices using the Model Context Protocol (MCP). Provides an API for managing device control and system administration within the Home Assistant ecosystem.",
      "stars": 433,
      "forks": 36,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-02T15:57:56Z",
      "readme_content": "# Model Context Protocol Server for Home Assistant\n\nThe server uses the MCP protocol to share access to a local Home Assistant instance with an LLM application.\n\nA powerful bridge between your Home Assistant instance and Language Learning Models (LLMs), enabling natural language control and monitoring of your smart home devices through the Model Context Protocol (MCP). This server provides a comprehensive API for managing your entire Home Assistant ecosystem, from device control to system administration.\n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Node.js](https://img.shields.io/badge/node-%3E%3D20.10.0-green.svg)\n![Docker Compose](https://img.shields.io/badge/docker-compose-%3E%3D1.27.0-blue.svg)\n![NPM](https://img.shields.io/badge/npm-%3E%3D7.0.0-orange.svg)\n![TypeScript](https://img.shields.io/badge/typescript-%5E5.0.0-blue.svg)\n![Test Coverage](https://img.shields.io/badge/coverage-95%25-brightgreen.svg)\n\n## Features\n\n- 🎮 **Device Control**: Control any Home Assistant device through natural language\n- 🔄 **Real-time Updates**: Get instant updates through Server-Sent Events (SSE)\n- 🤖 **Automation Management**: Create, update, and manage automations\n- 📊 **State Monitoring**: Track and query device states\n- 🔐 **Secure**: Token-based authentication and rate limiting\n- 📱 **Mobile Ready**: Works with any HTTP-capable client\n\n## Real-time Updates with SSE\n\nThe server includes a powerful Server-Sent Events (SSE) system that provides real-time updates from your Home Assistant instance. This allows you to:\n\n- 🔄 Get instant state changes for any device\n- 📡 Monitor automation triggers and executions\n- 🎯 Subscribe to specific domains or entities\n- 📊 Track service calls and script executions\n\n### Quick SSE Example\n\n```javascript\nconst eventSource = new EventSource(\n  'http://localhost:3000/subscribe_events?token=YOUR_TOKEN&domain=light'\n);\n\neventSource.onmessage = (event) => {\n  const data = JSON.parse(event.data);\n  console.log('Update received:', data);\n};\n```\n\nSee [SSE_API.md](docs/SSE_API.md) for complete documentation of the SSE system.\n\n## Table of Contents\n\n- [Key Features](#key-features)\n- [Prerequisites](#prerequisites)\n- [Installation](#installation)\n  - [Basic Setup](#basic-setup)\n  - [Docker Setup (Recommended)](#docker-setup-recommended)\n- [Configuration](#configuration)\n- [Development](#development)\n- [API Reference](#api-reference)\n  - [Device Control](#device-control)\n  - [Add-on Management](#add-on-management)\n  - [Package Management](#package-management)\n  - [Automation Management](#automation-management)\n- [Natural Language Integration](#natural-language-integration)\n- [Troubleshooting](#troubleshooting)\n- [Project Status](#project-status)\n- [Contributing](#contributing)\n- [Resources](#resources)\n- [License](#license)\n\n## Key Features\n\n### Core Functionality 🎮\n- **Smart Device Control**\n  - 💡 **Lights**: Brightness, color temperature, RGB color\n  - 🌡️ **Climate**: Temperature, HVAC modes, fan modes, humidity\n  - 🚪 **Covers**: Position and tilt control\n  - 🔌 **Switches**: On/off control\n  - 🚨 **Sensors & Contacts**: State monitoring\n  - 🎵 **Media Players**: Playback control, volume, source selection\n  - 🌪️ **Fans**: Speed, oscillation, direction\n  - 🔒 **Locks**: Lock/unlock control\n  - 🧹 **Vacuums**: Start, stop, return to base\n  - 📹 **Cameras**: Motion detection, snapshots\n\n### System Management 🛠️\n- **Add-on Management**\n  - Browse available add-ons\n  - Install/uninstall add-ons\n  - Start/stop/restart add-ons\n  - Version management\n  - Configuration access\n\n- **Package Management (HACS)**\n  - Integration with Home Assistant Community Store\n  - Multiple package types support:\n    - Custom integrations\n    - Frontend themes\n    - Python scripts\n    - AppDaemon apps\n    - NetDaemon apps\n  - Version control and updates\n  - Repository management\n\n- **Automation Management**\n  - Create and edit automations\n  - Advanced configuration options:\n    - Multiple trigger types\n    - Complex conditions\n    - Action sequences\n    - Execution modes\n  - Duplicate and modify existing automations\n  - Enable/disable automation rules\n  - Trigger automation manually\n\n### Architecture Features 🏗️\n- **Intelligent Organization**\n  - Area and floor-based device grouping\n  - State monitoring and querying\n  - Smart context awareness\n  - Historical data access\n\n- **Robust Architecture**\n  - Comprehensive error handling\n  - State validation\n  - Secure API integration\n  - TypeScript type safety\n  - Extensive test coverage\n\n## Prerequisites\n\n- **Node.js** 20.10.0 or higher\n- **NPM** package manager\n- **Docker Compose** for containerization\n- Running **Home Assistant** instance\n- Home Assistant long-lived access token ([How to get token](https://community.home-assistant.io/t/how-to-get-long-lived-access-token/162159))\n- **HACS** installed for package management features\n- **Supervisor** access for add-on management\n\n## Installation\n\n### Basic Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/jango-blockchained/homeassistant-mcp.git\ncd homeassistant-mcp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n### Docker Setup (Recommended)\n\nThe project includes Docker support for easy deployment and consistent environments across different platforms.\n\n1. **Clone the repository:**\n    ```bash\n    git clone https://github.com/jango-blockchained/homeassistant-mcp.git\n    cd homeassistant-mcp\n    ```\n\n2. **Configure environment:**\n    ```bash\n    cp .env.example .env\n    ```\n    Edit the `.env` file with your Home Assistant configuration:\n    ```env\n    # Home Assistant Configuration\n    HASS_HOST=http://homeassistant.local:8123\n    HASS_TOKEN=your_home_assistant_token\n    HASS_SOCKET_URL=ws://homeassistant.local:8123/api/websocket\n\n    # Server Configuration\n    PORT=3000\n    NODE_ENV=production\n    DEBUG=false\n    ```\n\n3. **Build and run with Docker Compose:**\n    ```bash\n    # Build and start the containers\n    docker compose up -d\n\n    # View logs\n    docker compose logs -f\n\n    # Stop the service\n    docker compose down\n    ```\n\n4. **Verify the installation:**\n    The server should now be running at `http://localhost:3000`. You can check the health endpoint at `http://localhost:3000/health`.\n\n5. **Update the application:**\n    ```bash\n    # Pull the latest changes\n    git pull\n\n    # Rebuild and restart the containers\n    docker compose up -d --build\n    ```\n\n#### Docker Configuration\n\nThe Docker setup includes:\n- Multi-stage build for optimal image size\n- Health checks for container monitoring\n- Volume mounting for environment configuration\n- Automatic container restart on failure\n- Exposed port 3000 for API access\n\n#### Docker Compose Environment Variables\n\nAll environment variables can be configured in the `.env` file. The following variables are supported:\n- `HASS_HOST`: Your Home Assistant instance URL\n- `HASS_TOKEN`: Long-lived access token for Home Assistant\n- `HASS_SOCKET_URL`: WebSocket URL for Home Assistant\n- `PORT`: Server port (default: 3000)\n- `NODE_ENV`: Environment (production/development)\n- `DEBUG`: Enable debug mode (true/false)\n\n## Configuration\n\n### Environment Variables\n\n```env\n# Home Assistant Configuration\nHASS_HOST=http://homeassistant.local:8123  # Your Home Assistant instance URL\nHASS_TOKEN=your_home_assistant_token       # Long-lived access token\nHASS_SOCKET_URL=ws://homeassistant.local:8123/api/websocket  # WebSocket URL\n\n# Server Configuration\nPORT=3000                # Server port (default: 3000)\nNODE_ENV=production     # Environment (production/development)\nDEBUG=false            # Enable debug mode\n\n# Test Configuration\nTEST_HASS_HOST=http://localhost:8123  # Test instance URL\nTEST_HASS_TOKEN=test_token           # Test token\n```\n\n### Configuration Files\n\n1. **Development**: Copy `.env.example` to `.env.development`\n2. **Production**: Copy `.env.example` to `.env.production`\n3. **Testing**: Copy `.env.example` to `.env.test`\n\n### Adding to Claude Desktop (or other clients)\n\nTo use your new Home Assistant MCP server, you can add Claude Desktop as a client. Add the following to the configuration. Note this will run the MCP within claude and does not work with the Docker method.\n\n```\n{\n  \"homeassistant\": {\n    \"command\": \"node\",\n    \"args\": [<path/to/your/dist/folder>]\n    \"env\": {\n      NODE_ENV=development\n      HASS_HOST=http://homeassistant.local:8123\n      HASS_TOKEN=your_home_assistant_token\n      PORT=3000\n      HASS_SOCKET_URL=ws://homeassistant.local:8123/api/websocket\n      LOG_LEVEL=debug\n    }\n  }\n}\n\n```\n\n\n\n## API Reference\n\n### Device Control\n\n#### Common Entity Controls\n```json\n{\n  \"tool\": \"control\",\n  \"command\": \"turn_on\",  // or \"turn_off\", \"toggle\"\n  \"entity_id\": \"light.living_room\"\n}\n```\n\n#### Light Control\n```json\n{\n  \"tool\": \"control\",\n  \"command\": \"turn_on\",\n  \"entity_id\": \"light.living_room\",\n  \"brightness\": 128,\n  \"color_temp\": 4000,\n  \"rgb_color\": [255, 0, 0]\n}\n```\n\n### Add-on Management\n\n#### List Available Add-ons\n```json\n{\n  \"tool\": \"addon\",\n  \"action\": \"list\"\n}\n```\n\n#### Install Add-on\n```json\n{\n  \"tool\": \"addon\",\n  \"action\": \"install\",\n  \"slug\": \"core_configurator\",\n  \"version\": \"5.6.0\"\n}\n```\n\n#### Manage Add-on State\n```json\n{\n  \"tool\": \"addon\",\n  \"action\": \"start\",  // or \"stop\", \"restart\"\n  \"slug\": \"core_configurator\"\n}\n```\n\n### Package Management\n\n#### List HACS Packages\n```json\n{\n  \"tool\": \"package\",\n  \"action\": \"list\",\n  \"category\": \"integration\"  // or \"plugin\", \"theme\", \"python_script\", \"appdaemon\", \"netdaemon\"\n}\n```\n\n#### Install Package\n```json\n{\n  \"tool\": \"package\",\n  \"action\": \"install\",\n  \"category\": \"integration\",\n  \"repository\": \"hacs/integration\",\n  \"version\": \"1.32.0\"\n}\n```\n\n### Automation Management\n\n#### Create Automation\n```json\n{\n  \"tool\": \"automation_config\",\n  \"action\": \"create\",\n  \"config\": {\n    \"alias\": \"Motion Light\",\n    \"description\": \"Turn on light when motion detected\",\n    \"mode\": \"single\",\n    \"trigger\": [\n      {\n        \"platform\": \"state\",\n        \"entity_id\": \"binary_sensor.motion\",\n        \"to\": \"on\"\n      }\n    ],\n    \"action\": [\n      {\n        \"service\": \"light.turn_on\",\n        \"target\": {\n          \"entity_id\": \"light.living_room\"\n        }\n      }\n    ]\n  }\n}\n```\n\n#### Duplicate Automation\n```json\n{\n  \"tool\": \"automation_config\",\n  \"action\": \"duplicate\",\n  \"automation_id\": \"automation.motion_light\"\n}\n```\n\n### Core Functions\n\n#### State Management\n```http\nGET /api/state\nPOST /api/state\n```\n\nManages the current state of the system.\n\n**Example Request:**\n```json\nPOST /api/state\n{\n  \"context\": \"living_room\",\n  \"state\": {\n    \"lights\": \"on\",\n    \"temperature\": 22\n  }\n}\n```\n\n#### Context Updates\n```http\nPOST /api/context\n```\n\nUpdates the current context with new information.\n\n**Example Request:**\n```json\nPOST /api/context\n{\n  \"user\": \"john\",\n  \"location\": \"kitchen\",\n  \"time\": \"morning\",\n  \"activity\": \"cooking\"\n}\n```\n\n### Action Endpoints\n\n#### Execute Action\n```http\nPOST /api/action\n```\n\nExecutes a specified action with given parameters.\n\n**Example Request:**\n```json\nPOST /api/action\n{\n  \"action\": \"turn_on_lights\",\n  \"parameters\": {\n    \"room\": \"living_room\",\n    \"brightness\": 80\n  }\n}\n```\n\n#### Batch Actions\n```http\nPOST /api/actions/batch\n```\n\nExecutes multiple actions in sequence.\n\n**Example Request:**\n```json\nPOST /api/actions/batch\n{\n  \"actions\": [\n    {\n      \"action\": \"turn_on_lights\",\n      \"parameters\": {\n        \"room\": \"living_room\"\n      }\n    },\n    {\n      \"action\": \"set_temperature\",\n      \"parameters\": {\n        \"temperature\": 22\n      }\n    }\n  ]\n}\n```\n\n### Query Functions\n\n#### Get Available Actions\n```http\nGET /api/actions\n```\n\nReturns a list of all available actions.\n\n**Example Response:**\n```json\n{\n  \"actions\": [\n    {\n      \"name\": \"turn_on_lights\",\n      \"parameters\": [\"room\", \"brightness\"],\n      \"description\": \"Turns on lights in specified room\"\n    },\n    {\n      \"name\": \"set_temperature\",\n      \"parameters\": [\"temperature\"],\n      \"description\": \"Sets temperature in current context\"\n    }\n  ]\n}\n```\n\n#### Context Query\n```http\nGET /api/context?type=current\n```\n\nRetrieves context information.\n\n**Example Response:**\n```json\n{\n  \"current_context\": {\n    \"user\": \"john\",\n    \"location\": \"kitchen\",\n    \"time\": \"morning\",\n    \"activity\": \"cooking\"\n  }\n}\n```\n\n### WebSocket Events\n\nThe server supports real-time updates via WebSocket connections.\n\n```javascript\n// Client-side connection example\nconst ws = new WebSocket('ws://localhost:3000/ws');\n\nws.onmessage = (event) => {\n  const data = JSON.parse(event.data);\n  console.log('Received update:', data);\n};\n```\n\n#### Supported Events\n\n- `state_change`: Emitted when system state changes\n- `context_update`: Emitted when context is updated\n- `action_executed`: Emitted when an action is completed\n- `error`: Emitted when an error occurs\n\n**Example Event Data:**\n```json\n{\n  \"event\": \"state_change\",\n  \"data\": {\n    \"previous_state\": {\n      \"lights\": \"off\"\n    },\n    \"current_state\": {\n      \"lights\": \"on\"\n    },\n    \"timestamp\": \"2024-03-20T10:30:00Z\"\n  }\n}\n```\n\n### Error Handling\n\nAll endpoints return standard HTTP status codes:\n\n- 200: Success\n- 400: Bad Request\n- 401: Unauthorized\n- 403: Forbidden\n- 404: Not Found\n- 500: Internal Server Error\n\n**Error Response Format:**\n```json\n{\n  \"error\": {\n    \"code\": \"INVALID_PARAMETERS\",\n    \"message\": \"Missing required parameter: room\",\n    \"details\": {\n      \"missing_fields\": [\"room\"]\n    }\n  }\n}\n```\n\n### Rate Limiting\n\nThe API implements rate limiting to prevent abuse:\n\n- 100 requests per minute per IP for regular endpoints\n- 1000 requests per minute per IP for WebSocket connections\n\nWhen rate limit is exceeded, the server returns:\n\n```json\n{\n  \"error\": {\n    \"code\": \"RATE_LIMIT_EXCEEDED\",\n    \"message\": \"Too many requests\",\n    \"reset_time\": \"2024-03-20T10:31:00Z\"\n  }\n}\n```\n\n### Example Usage\n\n#### Using curl\n```bash\n# Get current state\ncurl -X GET \\\n  http://localhost:3000/api/state \\\n  -H 'Authorization: ApiKey your_api_key_here'\n\n# Execute action\ncurl -X POST \\\n  http://localhost:3000/api/action \\\n  -H 'Authorization: ApiKey your_api_key_here' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"action\": \"turn_on_lights\",\n    \"parameters\": {\n      \"room\": \"living_room\",\n      \"brightness\": 80\n    }\n  }'\n```\n\n#### Using JavaScript\n```javascript\n// Execute action\nasync function executeAction() {\n  const response = await fetch('http://localhost:3000/api/action', {\n    method: 'POST',\n    headers: {\n      'Authorization': 'ApiKey your_api_key_here',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      action: 'turn_on_lights',\n      parameters: {\n        room: 'living_room',\n        brightness: 80\n      }\n    })\n  });\n  \n  const data = await response.json();\n  console.log('Action result:', data);\n}\n```\n\n## Development\n\n```bash\n# Development mode with hot reload\nnpm run dev\n\n# Build project\nnpm run build\n\n# Production mode\nnpm run start\n\n# Run tests\nnpx jest --config=jest.config.cjs\n\n# Run tests with coverage\nnpx jest --coverage\n\n# Lint code\nnpm run lint\n\n# Format code\nnpm run format\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Node.js Version (`toSorted is not a function`)**\n   - **Solution:** Update to Node.js 20.10.0+\n   ```bash\n   nvm install 20.10.0\n   nvm use 20.10.0\n   ```\n\n2. **Connection Issues**\n   - Verify Home Assistant is running\n   - Check `HASS_HOST` accessibility\n   - Validate token permissions\n   - Ensure WebSocket connection for real-time updates\n\n3. **Add-on Management Issues**\n   - Verify Supervisor access\n   - Check add-on compatibility\n   - Validate system resources\n\n4. **HACS Integration Issues**\n   - Verify HACS installation\n   - Check HACS integration status\n   - Validate repository access\n\n5. **Automation Issues**\n   - Verify entity availability\n   - Check trigger conditions\n   - Validate service calls\n   - Monitor execution logs\n\n## Project Status\n\n✅ **Complete**\n- Entity, Floor, and Area access\n- Device control (Lights, Climate, Covers, Switches, Contacts)\n- Add-on management system\n- Package management through HACS\n- Advanced automation configuration\n- Basic state management\n- Error handling and validation\n- Docker containerization\n- Jest testing setup\n- TypeScript integration\n- Environment variable management\n- Home Assistant API integration\n- Project documentation\n\n🚧 **In Progress**\n- WebSocket implementation for real-time updates\n- Enhanced security features\n- Tool organization optimization\n- Performance optimization\n- Resource context integration\n- API documentation generation\n- Multi-platform desktop integration\n- Advanced error recovery\n- Custom prompt testing\n- Enhanced macOS integration\n- Type safety improvements\n- Testing coverage expansion\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Implement your changes\n4. Add tests for new functionality\n5. Ensure all tests pass\n6. Submit a pull request\n\n## Resources\n\n- [MCP Documentation](https://modelcontextprotocol.io/introduction)\n- [Home Assistant Docs](https://www.home-assistant.io)\n- [HA REST API](https://developers.home-assistant.io/docs/api/rest)\n- [HACS Documentation](https://hacs.xyz)\n- [TypeScript Documentation](https://www.typescriptlang.org/docs)\n\n## License\n\nMIT License - See [LICENSE](LICENSE) file\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "homeassistant",
        "mcp",
        "home automation",
        "smart home",
        "home assistant"
      ],
      "category": "smart-home-and-automation"
    },
    "zhangzhongnan928--mcp-pa-ai-agent": {
      "owner": "zhangzhongnan928",
      "name": "mcp-pa-ai-agent",
      "url": "https://github.com/zhangzhongnan928/mcp-pa-ai-agent",
      "imageUrl": "/freedevtools/mcp/pfp/zhangzhongnan928.webp",
      "description": "Manage calendar events, track tasks and to-dos, read and send emails, search the web for information, and control smart home devices.",
      "stars": 19,
      "forks": 5,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-29T06:11:15Z",
      "readme_content": "# MCP Personal Assistant Agent\n\nA versatile personal assistant AI agent built with the Model Context Protocol (MCP) that helps with calendar, tasks, emails, and more.\n\n## Overview\n\nThis project is a Model Context Protocol (MCP) server that provides a set of tools for a personal assistant agent. It can be integrated with MCP clients like Claude for Desktop to give AI assistants the ability to:\n\n- Manage calendar events\n- Track tasks and to-dos\n- Read and send emails\n- Search the web and retrieve information\n- Control smart home devices\n\n## Requirements\n\n⚠️ **IMPORTANT:** Python 3.10 or higher is required for the MCP SDK. The server will not work with earlier Python versions.\n\n- Python 3.10+ \n- MCP SDK 1.2.0+\n- Required Python packages (see requirements.txt)\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/yourusername/mcp-pa-ai-agent.git\ncd mcp-pa-ai-agent\n```\n\n2. Ensure you have Python 3.10+:\n```bash\npython --version\n```\n\n3. If your system Python is older than 3.10, set up a compatible environment:\n```bash\n# Using conda\nconda create -n mcp-env python=3.10\nconda activate mcp-env\n\n# OR using venv (if Python 3.10+ is installed elsewhere)\npython3.10 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n```\n\n4. Install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n5. Configure environment variables by copying the example file:\n```bash\ncp .env.example .env\n```\n\n6. Edit the `.env` file with your API credentials and settings.\n\n## Running the Server\n\nStart the MCP server with:\n\n```bash\npython mcp_server.py\n```\n\nThe server will start and listen for MCP client connections.\n\n## Connecting to Claude for Desktop\n\n1. Install [Claude for Desktop](https://claude.ai/desktop)\n\n2. Configure Claude for Desktop to use this MCP server by editing the configuration file at:\n   - MacOS/Linux: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n3. Add the following configuration:\n```json\n{\n  \"mcpServers\": {\n    \"personal-assistant\": {\n      \"command\": \"/path/to/python\",\n      \"args\": [\n        \"/absolute/path/to/mcp-pa-ai-agent/mcp_server.py\"\n      ]\n    }\n  }\n}\n```\n\nIf you're using a virtual environment, make sure to point to the Python executable in that environment.\n\n4. Restart Claude for Desktop\n\n## Available Tools\n\n### Calendar\n- `get_events`: Retrieve upcoming calendar events\n- `create_event`: Schedule a new calendar event\n\n### Tasks\n- `list_tasks`: View all tasks or filter by status\n- `add_task`: Create a new task\n- `update_task_status`: Mark tasks as pending, in-progress, or completed\n\n### Email\n- `get_emails`: List recent emails from your inbox\n- `read_email`: View the full content of a specific email\n- `send_email`: Compose and send a new email\n\n### Knowledge\n- `web_search`: Search the web for information\n- `get_weather`: Get current weather information\n- `get_news`: Retrieve latest news articles\n\n### Smart Home\n- `list_devices`: View all smart home devices\n- `control_device`: Control smart home devices (lights, thermostats, etc.)\n- `get_device_state`: Get detailed information about a device's current state\n\n## Configuration\n\nThe server requires various API keys and credentials to access different services:\n\n- **Google API**: For calendar and email functionality (OAuth2 credentials)\n- **Weather API**: For weather information\n- **News API**: For news retrieval\n- **Home Assistant**: For smart home control\n\nRefer to the `.env.example` file for all configurable options.\n\n## Troubleshooting\n\n### Python Version Issues\n\nIf you see an error like:\n```\nError: Python 3.10 or higher is required for the MCP server.\n```\n\nYou need to upgrade your Python version or use a virtual environment with Python 3.10+.\n\n### MCP SDK Installation Issues\n\nIf you encounter problems installing the MCP SDK:\n```\nERROR: Could not find a version that satisfies the requirement mcp>=1.2.0\n```\n\nMake sure you're using Python 3.10+ and pip is updated:\n```bash\npip install --upgrade pip\n```\n\n## Development\n\nTo add new functionality to the server, you can:\n\n1. Create a new module in the `modules/` directory\n2. Implement functions with the `@mcp.tool()` decorator\n3. Import your module in `mcp_server.py`\n\n## License\n\nMIT\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "agent",
        "mcp",
        "home automation",
        "smart home",
        "automation zhangzhongnan928"
      ],
      "category": "smart-home-and-automation"
    }
  }
}