{
  "category": "education-and-learning",
  "categoryDisplay": "Education and Learning",
  "description": "",
  "totalRepositories": 31,
  "repositories": {
    "54yyyu--school-mcp": {
      "owner": "54yyyu",
      "name": "school-mcp",
      "url": "https://github.com/54yyyu/school-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/54yyyu.webp",
      "description": "School MCP is a server designed to help students manage their academic tasks more efficiently. It connects to platforms like Canvas and Gradescope to fetch assignment deadlines, download course materials, and integrate with your calendar for reminders.",
      "stars": 4,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-26T09:54:01Z",
      "readme_content": "# School MCP\n\n[![smithery badge](https://smithery.ai/badge/@54yyyu/school-mcp)](https://smithery.ai/server/@54yyyu/school-mcp)\n\nA Model Context Protocol (MCP) server for academic tools, integrating with Canvas and Gradescope platforms.\n\n## Features\n\n- **Assignment Deadlines**: Fetch and display upcoming deadlines from Canvas and Gradescope\n- **Calendar Integration**: Add deadlines to macOS Calendar or Reminders using AppleScript\n- **File Management**: Download course materials from Canvas\n\n## Quickstart\n\n### Installation\n\n#### Installing via Smithery\n\nTo install School MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@54yyyu/school-mcp):\n\n```bash\nnpx -y @smithery/cli install @54yyyu/school-mcp --client claude\n```\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/yourusername/school-mcp.git\ncd school-mcp\n```\n\n2. Install the package:\n```bash\npip install -e .\n```\n\n3. Set up your environment variables by either:\n   - Using the included setup helper (recommended)\n   - Creating a `.env` file manually\n\n### Using the Setup Helper\n\nRun the setup helper to configure Claude Desktop automatically:\n\n```bash\npython setup_helper.py\n```\n\nThe setup helper will:\n- Find your Claude Desktop configuration file\n- Create a `.env` file if needed\n- Configure the MCP server with proper paths\n- Add your environment variables to the Claude Desktop configuration\n\n### Manual Setup\n\nIf you prefer to set up manually:\n\n1. Copy the environment template:\n```bash\ncp .env.template .env\n# Edit .env with your credentials\n```\n\n2. Configure Claude Desktop by following the [Claude Desktop Integration Guide](docs/claude_desktop.md).\n\n### Running the server\n\nRun directly:\n```bash\npython -m school_mcp\n```\n\nOr use the convenience script:\n```bash\n./run_server.py\n```\n\n## Tools\n\n- `get_deadlines`: Fetch upcoming assignment deadlines from Canvas and Gradescope\n- `add_to_reminders`: Add assignments to macOS Reminders\n- `list_courses`: List all available Canvas courses\n- `download_course_files`: Download files from a Canvas course\n- `set_download_path`: Configure where downloaded files are saved\n- `get_download_path_info`: Check the current download location\n\n## Configuration\n\nThe server tries to find configuration in this order:\n1. Environment variables\n2. `.env` file in the current directory\n3. Existing `config.json` file in the home directory\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "education",
        "students",
        "mcp school",
        "school mcp",
        "mcp server"
      ],
      "category": "education-and-learning"
    },
    "Arcewoose--SeSac_study_repo": {
      "owner": "Arcewoose",
      "name": "SeSac_study_repo",
      "url": "https://github.com/Arcewoose/SeSac_study_repo",
      "imageUrl": "/freedevtools/mcp/pfp/Arcewoose.webp",
      "description": "Document learning experiences as a developer, sharing insights and resources to improve skills and foster community connections.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Jupyter Notebook",
      "updated_at": "2024-08-02T14:54:38Z",
      "readme_content": "### **ÏÉàÏãπ Í∞úÎ∞úÏûêÏùò Í≥µÎ∂Ä Í∏∞Î°ù**\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sesac_study_repo",
        "arcewoose",
        "education",
        "arcewoose sesac_study_repo",
        "sesac_study_repo document",
        "learning arcewoose"
      ],
      "category": "education-and-learning"
    },
    "Paulinholeo--AI-Bootcamp": {
      "owner": "Paulinholeo",
      "name": "AI-Bootcamp",
      "url": "https://github.com/Paulinholeo/AI-Bootcamp",
      "imageUrl": "/freedevtools/mcp/pfp/Paulinholeo.webp",
      "description": "Supports practical training and project-based learning for AI engineering, focusing on building, deploying, and evaluating AI models through hands-on exercises and real-world applications.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-03-18T20:01:54Z",
      "readme_content": "# AI Bootcamp\n\nThe \"Get Shit Done with AI\" Bootcamp focuses on real-world applications that will equip you with the skills and knowledge to become a great AI engineer\n\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/curiousily/AI-Bootcamp/)\n[](https://discord.gg/UaNPxVD6tv)\n[![UCoW_WzQNJVAjxo4osNAxd_g_label_Watch_on_YouTube](https://img.shields.io/youtube/channel/subscribers/UCoW_WzQNJVAjxo4osNAxd_g?label=Watch%20on%20YouTube)](https://bit.ly/venelin-subscribe)\n[![AI_Bootcamp](https://img.shields.io/github/license/curiousily/AI-Bootcamp)](https://github.com/curiousily/AI-Bootcamp/blob/master/LICENSE)\n\n## üçø Watch on YouTube\n\n- [Real-World PyTorch](https://www.youtube.com/watch?v=dgs_9quxZXk)\n- [Build Real-World Machine Learning Project](https://www.youtube.com/watch?v=ug1FA7qzWSc)\n- [Fine-tuning Tiny LLM on Your Data](https://www.youtube.com/watch?v=_KPEoCSKHcU)\n- [Deploy (Tiny) LLM to Production](https://www.youtube.com/watch?v=c10rsQkczu0)\n- [AI Agents with GPT-4 Turbo and CrewAI](https://www.youtube.com/watch?v=Ev0uzdzesjU)\n- [CrewAI with Open LLM (Llama 3) using Groq API](https://www.youtube.com/watch?v=N5sos1X30Rw)\n- [Fine-Tuning Llama 3 on a Custom Dataset](https://www.youtube.com/watch?v=0XPZlR3_GgI)\n- [Local RAG with Llama 3.1 for PDFs](https://www.youtube.com/watch?v=ofNbLa2-5SU)\n\n## üìñ Read the Tutorials\n\n### Foundational Skills\n\n- [Python Essentials for AI: A Practical Guide](https://www.mlexpert.io/bootcamp)\n- [Real-World PyTorch](https://www.mlexpert.io/bootcamp/real-world-pytorch)\n\n### ML Pipelines\n\n- [Analyze Data For Insights](https://www.mlexpert.io/bootcamp/analyze-data-for-insights)\n- [Develop Your Model](https://www.mlexpert.io/bootcamp/develop-your-model)\n- [Evaluate Your Model](https://www.mlexpert.io/bootcamp/evaluate-your-model)\n- [Architect Your ML Project](https://www.mlexpert.io/bootcamp/architect-your-ml-project)\n\n### Large Language Models (LLMs)\n\n- [LLMs 101](https://www.mlexpert.io/bootcamp/llms-101)\n- [Write Great Prompts](https://www.mlexpert.io/bootcamp/write-great-prompts)\n- [Build a RAG System](https://www.mlexpert.io/bootcamp/build-a-rag-system)\n- [Fine-tuning Tiny LLM on Custom Dataset](https://www.mlexpert.io/bootcamp/fine-tuning-tiny-llm-on-custom-dataset)\n- [Deploy Custom LLM to Production](https://www.mlexpert.io/bootcamp/deploy-custom-llm-to-production)\n- [LLM Evaluation](https://www.mlexpert.io/bootcamp/llm-evaluation)\n\n### AI Agents\n\n- [Build Agentic Apps](https://www.mlexpert.io/bootcamp/build-agentic-apps)\n- [Agents with Llama 3 and Custom Tools](https://www.mlexpert.io/bootcamp/agents-with-llama-3-and-custom-tools)\n- [Develop a Tweet Writing Team](https://www.mlexpert.io/bootcamp/ai-agents-in-action)\n- [SQL Agents with CrewAI and Llama 3](https://www.mlexpert.io/bootcamp/sql-agents-with-crewai)\n\n### Projects\n\n- [RagBase - Private Chat with Your Documents](https://www.mlexpert.io/bootcamp/ragbase-local-rag)\n- [Write Social Media Content with Agents](https://www.mlexpert.io/bootcamp/write-social-media-content-with-agents)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "bootcamp",
        "ai",
        "training",
        "ai bootcamp",
        "ai engineering",
        "learning paulinholeo"
      ],
      "category": "education-and-learning"
    },
    "QuantumLeap-us--css-mcp-server": {
      "owner": "QuantumLeap-us",
      "name": "css-mcp-server",
      "url": "https://github.com/QuantumLeap-us/css-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/QuantumLeap-us.webp",
      "description": "Provides updates on the latest CSS features and enhancements, allowing users to manage their knowledge and receive tailored guidance effectively.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-04-13T03:07:36Z",
      "readme_content": "# Building a CSS Tutor MCP Server\n\nThis repo contains a simple Model Context Protocol (MCP) server built with Node.js and TypeScript. It acts as a \"CSS Tutor,\" providing personalized updates about CSS features to a connected AI client.\n\nThis server demonstrates key MCP concepts: defining **Resources**, **Tools**, and **Prompts**. The goal of this demonstration is to help you move on from here and build much larger and more interesting agentic capabilities.\n\n## Prerequisites\n\n*   Node.js (v18 or later recommended)\n*   `npm` (or your preferred Node.js package manager like `yarn` or `pnpm`)\n*   An AI client capable of connecting to an MCP server (e.g., the Claude desktop app)\n*   An [OpenRouter API Key](https://openrouter.ai/) (for fetching live CSS updates via Perplexity)\n\n## Quick Start\n\nFollow these steps to get the server running quickly:\n\n1.  **Clone the Repository:**\n    ```bash\n    git clone https://github.com/3mdistal/css-mcp-server.git\n    cd css-mcp-server\n    ```\n\n2.  **Install Dependencies:**\n    ```bash\n    npm install # Or: yarn install / pnpm install\n    ```\n\n3.  **Prepare API Key:** The `get_latest_updates` tool requires an OpenRouter API key. Obtain your key from [OpenRouter](https://openrouter.ai/). You will provide this key to your MCP client in Step 5.\n\n4.  **Build the Server:** Compile the TypeScript code.\n    ```bash\n    npm run build # Or: yarn build / pnpm run build\n    ```\n\n5.  **Configure Your MCP Client:** Tell your client how to launch the server *and* provide the API key as an environment variable. Here's an example for the Claude desktop app's `claude_desktop_config.json`:\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"css-tutor\": {\n          \"command\": \"node\",\n          \"args\": [\n            \"/full/path/to/your/css-mcp-server/build/index.js\"\n          ],\n          \"env\": {\n            \"OPENROUTER_API_KEY\": \"sk-or-xxxxxxxxxxxxxxxxxxxxxxxxxx\"\n          }\n        }\n      }\n    }\n    ```\n    *(Ensure the path in `args` is the correct **absolute path** to the built `index.js` file on your system. Replace the placeholder API key.)*\n\n6.  **Connect:** Start the connection from your MCP client. The client will launch the server process (with the API key in its environment), and you can start interacting!\n\n## Using with Cursor\n\n[Cursor](https://cursor.sh/) is an AI-first code editor that can act as an MCP client. Setting up this server with Cursor is straightforward, but requires an extra step for the guidance prompt.\n\n1.  **Configure Server in Cursor:**\n    *   Go to `Cursor Settings` > `MCP` > `Add new global MCP server`.\n    *   Paste in the same JSON as above in the Claude Desktop step, with all the same caveats.\n\n2.  **Create a Cursor Project Rule for the Prompt:** Cursor currently does not automatically use MCP prompts provided by servers. Instead, you need to provide the guidance using Cursor's [Project Rules](https://docs.cursor.com/context/rules-for-ai) feature.\n    *   Create the directory `.cursor/rules` in your project root if it doesn't exist.\n    *   Create a file inside it named `css-tutor.rule` (or any `.rule` filename).\n    *   Paste the following guidance text into `css-tutor.rule`:\n\n        ```text\n        You are a helpful assistant connecting to a CSS knowledge server. Your goal is to provide the user with personalized updates about new CSS features they haven't learned yet.\n\n        Available Tools:\n        1.  `get_latest_updates`: Fetches recent general news and articles about CSS. Use this first to see what's new.\n        2.  `read_from_memory`: Checks which CSS concepts the user already knows based on their stored knowledge profile.\n        3.  `write_to_memory`: Updates the user's knowledge profile. Use this when the user confirms they have learned or already know a specific CSS concept mentioned in an update.\n\n        Workflow:\n        1.  Call `get_latest_updates` to discover recent CSS developments.\n        2.  Call `read_from_memory` to get the user's current known concepts (if any).\n        3.  Compare the updates with the known concepts (if any). Identify 1-2 *new* concepts relevant to the user. **Important: They _must_ be from the response returned by `get_latest_updates` tool.**\n        4.  Present these new concepts to the user, adding any context as needed, in addition to the information returned by the `get_latest_updates`.\n        5.  Ask the user if they are familiar with these concepts or if they've learned them now.\n        6.  If the user confirms knowledge of a concept, call `write_to_memory` to update their profile for that specific concept.\n        7.  Focus on providing actionable, personalized learning updates.\n        ```\n\n3.  **Connect and Use:**\n    *   Ensure the `css-tutor` server is enabled in Cursor's MCP settings.\n    *   Start a new chat or code generation request (e.g., Cmd+K) and include `@css-tutor-rule` (or whatever you named your rule file) in your request. This tells Cursor to load the rule's content, which includes the instructions on how to use the `read_from_memory`, `write_to_memory`, and `get_latest_updates` tools provided by the connected MCP server. \n\nNote that _without_ the prompt/rule, Cursor will still be able to use individual tools if you ask it to. The prompt provides a workflow and order in which to call the tools and read/write from memory.\n\n## Understanding the Code\n\nThis section provides a higher-level overview of how the server is implemented.\n\n### MCP Concepts Used\n\n*   **Resource (`css_knowledge_memory`):** Represents the user's known CSS concepts, stored persistently in `data/memory.json`.\n*   **Tools:** Actions the server can perform:\n    *   `get_latest_updates`: Fetches CSS news from OpenRouter/Perplexity.\n    *   `read_from_memory`: Reads the content of the `css_knowledge_memory` resource.\n    *   `write_to_memory`: Modifies the `css_knowledge_memory` resource.\n*   **Prompt (`css-tutor-guidance`):** Static instructions guiding the AI client on how to interact with the tools and resource effectively.\n\n### Code Structure\n\nThe code is organized as follows:\n\n*   **`data/memory.json`**: A simple JSON file acting as the database for known CSS concepts. A default version is included in the repo.\n*   **`src/resources/index.ts`**: Defines the `css_knowledge_memory` resource. It includes:\n    *   A Zod schema for validating the data.\n    *   `readMemory` and `writeMemory` functions for file I/O.\n    *   Registration using `server.resource`, specifying the `memory://` URI scheme and read/write permissions. The read handler returns the content of `data/memory.json`.\n*   **`src/tools/index.ts`**: Defines the three tools using `server.tool`:\n    *   `read_from_memory`: Calls `readMemory`.\n    *   `write_to_memory`: Takes `concept` and `known` as input (schema defined with Zod), uses `readMemory` and `writeMemory` to update the JSON file.\n    *   `get_latest_updates`: Requires `OPENROUTER_API_KEY`, calls the OpenRouter API using `node-fetch` and the `perplexity/sonar-pro` model, returns the AI-generated summary.\n*   **`src/prompts/index.ts`**: Defines the static `css-tutor-guidance` prompt using `server.prompt`. The prompt text is embedded directly in the code.\n*   **`src/index.ts`**: The main server entry point.\n    *   Initializes the `McpServer` instance from `@modelcontextprotocol/sdk`.\n    *   Imports and calls the `registerPrompts`, `registerResources`, and `registerTools` functions from the other modules.\n    *   Uses `StdioServerTransport` to handle communication over standard input/output.\n    *   Connects the server to the transport and includes basic error handling.\n*   **`package.json`**: Defines dependencies (`@modelcontextprotocol/sdk`, `dotenv`, `node-fetch`, `zod`) and the `build` script (`tsc`).\n*   **`.env.example` / `.env`**: Used for storing the `OPENROUTER_API_KEY` (if using Option A for configuration).\n*   **`.gitignore`**: Configured to ignore `node_modules`, `build`, `.env`, and the contents of `data/` except for the default `data/memory.json`.\n*   **`tsconfig.json`**: Standard TypeScript configuration.\n\n## Debugging with MCP Inspector\n\nIf you need to debug the server or inspect the raw JSON-RPC messages being exchanged, you can use the `@modelcontextprotocol/inspector` tool. This tool acts as a basic MCP client and launches your server, showing you the communication flow.\n\nRun the inspector from your terminal in the project root:\n\n```bash\nnpx @modelcontextprotocol/inspector node ./build/index.js\n```\n\n**Explanation:**\n\n*   `npx @modelcontextprotocol/inspector`: Downloads (if needed) and runs the inspector package.\n*   `node`: The command used to execute your server.\n*   `./build/index.js`: The path (relative to your project root) to your compiled server entry point.\n\n**Environment Variables for Inspector:**\n\nNote that the inspector launches your server as a child process. If your server relies on environment variables (like `OPENROUTER_API_KEY` for the `get_latest_updates` tool), you need to ensure they are available in the environment where you run the `npx` command. The `.env` file might not be automatically loaded in this context. You can typically prefix the command:\n\n```bash\n# Example on Linux/macOS\nOPENROUTER_API_KEY=\"sk-or-xxxxxxxxxx\" npx @modelcontextprotocol/inspector node ./build/index.js\n\n# Example on Windows (Command Prompt)\nset OPENROUTER_API_KEY=sk-or-xxxxxxxxxx && npx @modelcontextprotocol/inspector node ./build/index.js\n\n# Example on Windows (PowerShell)\n$env:OPENROUTER_API_KEY=\"sk-or-xxxxxxxxxx\"; npx @modelcontextprotocol/inspector node ./build/index.js\n```\n\nReplace `sk-or-xxxxxxxxxx` with your actual key.\n\n## Wrapping up\n\nThis demo demonstrates the core steps involved in creating a functional MCP server using the TypeScript SDK. We defined a resource to manage state, tools to perform actions (including interacting with an external API), and a prompt to guide the AI client.\n\nHope this demo can help you understand how to build servers that are much more complex (and useful) than this one!\n\n(Also, if you run into any üêõbugs, feel free to open up an issue.)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "css",
        "quantumleap",
        "mcp",
        "quantumleap css",
        "css mcp",
        "latest css"
      ],
      "category": "education-and-learning"
    },
    "TeXmeijin--manalinkMCP": {
      "owner": "TeXmeijin",
      "name": "manalinkMCP",
      "url": "https://github.com/TeXmeijin/manalinkMCP",
      "imageUrl": "/freedevtools/mcp/pfp/TeXmeijin.webp",
      "description": "Connect AI assistants to educational resources through features like teacher search, course information retrieval, and subject management. Access dynamic data such as subject and grade masters via API calls.",
      "stars": 0,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-09T02:47:23Z",
      "readme_content": "# „Éû„Éä„É™„É≥„ÇØMCP„Çµ„Éº„Éê„Éº\n\n„Éû„Éä„É™„É≥„ÇØ„ÅÆModel Context Protocol (MCP) „Çµ„Éº„Éê„ÉºÂÆüË£Ö„Åß„Åô„ÄÇAI„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„ÅåÂÖàÁîüÊ§úÁ¥¢„Å™„Å©„ÅÆÊ©üËÉΩ„ÇíÂà©Áî®„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åó„Åæ„Åô„ÄÇ\n\n## Ê©üËÉΩ\n\n„Åì„ÅÆMCP„Çµ„Éº„Éê„Éº„ÅØ‰ª•‰∏ã„ÅÆ„ÉÑ„Éº„É´„ÇíÊèê‰æõ„Åó„Åæ„ÅôÔºö\n\n1. **ÁßëÁõÆ„Éû„Çπ„ÇøÂèñÂæó**: ÁßëÁõÆÂêç„Å®ÁßëÁõÆID„ÅÆ„Éû„Çπ„Çø„ÇíÂèñÂæó\n2. **ÁâπÂæ¥„Éû„Çπ„ÇøÂèñÂæó**: „Ç≥„Éº„ÇπÁâπÂæ¥„ÅÆ„Éû„Çπ„Çø„ÇíÂèñÂæóÔºàAPI„Åã„ÇâÂãïÁöÑ„Å´ÂèñÂæóÔºâ\n3. **Â≠¶Âπ¥„Éû„Çπ„ÇøÂèñÂæó**: Â≠¶Âπ¥Âêç„Å®ID„ÅÆ„Éû„Çπ„Çø„ÇíÂèñÂæó\n4. **ÂÖàÁîüÊ§úÁ¥¢ÔºàË©≥Á¥∞ÊåáÂÆöÔºâ**: ÁßëÁõÆID„ÄÅÂ≠¶Âπ¥ID„Å™„Å©„ÅÆË©≥Á¥∞„Éë„É©„É°„Éº„Çø„ÅßÂÖàÁîü„ÇíÊ§úÁ¥¢\n\n## ÂâçÊèêÊù°‰ª∂\n\n- Node.js 18+\n- npm „Åæ„Åü„ÅØ yarn\n\n## „Ç§„É≥„Çπ„Éà„Éº„É´\n\n```bash\n# „É™„Éù„Ç∏„Éà„É™„ÅÆ„ÇØ„É≠„Éº„É≥\ngit clone [„É™„Éù„Ç∏„Éà„É™URL]\ncd manalink-mcp\n\n# ‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´\nnpm install\n```\n\n## ‰Ωø„ÅÑÊñπ\n\n### ÈñãÁô∫„É¢„Éº„Éâ\n\n```bash\nnpm run dev\n```\n\n### Êú¨Áï™„É¢„Éº„Éâ\n\n```bash\nnpm run build\nnpm start\n```\n\n## Claude for Desktop„Å®„ÅÆÈÄ£Êê∫\n\nClaude for Desktop„Åß‰ΩøÁî®„Åô„Çã„Å´„ÅØ„ÄÅ`claude_desktop_config.json` „Éï„Ç°„Ç§„É´„Å´Ë®≠ÂÆö„ÇíËøΩÂä†„Åó„Åæ„Åô„ÄÇ\n\n1. Claude for Desktop„ÅÆË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíÈñã„Åè\n```\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n2. ‰ª•‰∏ã„ÅÆË®≠ÂÆö„ÇíËøΩÂä†\n```json\n{\n    \"mcpServers\": {\n        \"manalink\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"/Áµ∂ÂØæ„Éë„Çπ/manalink-mcp/dist/index.js\"\n            ]\n        }\n    }\n}\n```\n\n3. Claude for Desktop„ÇíÂÜçËµ∑Âãï\n\n## MCP „ÉÑ„Éº„É´\n\n### 1. ÁßëÁõÆ„Éû„Çπ„ÇøÂèñÂæó\n\n```javascript\n// „ÉÑ„Éº„É´Âêç: get_subject_master\n// „Éë„É©„É°„Éº„Çø: „Å™„Åó\n```\n\n### 2. ÁâπÂæ¥„Éû„Çπ„ÇøÂèñÂæó\n\n```javascript\n// „ÉÑ„Éº„É´Âêç: get_course_features\n// „Éë„É©„É°„Éº„Çø: „Å™„Åó\n```\n\n### 3. Â≠¶Âπ¥„Éû„Çπ„ÇøÂèñÂæó\n\n```javascript\n// „ÉÑ„Éº„É´Âêç: get_grade_master\n// „Éë„É©„É°„Éº„Çø: „Å™„Åó\n```\n\n### 4. ÂÖàÁîüÊ§úÁ¥¢ (Ë©≥Á¥∞ÊåáÂÆö)\n\n```javascript\n// „ÉÑ„Éº„É´Âêç: search_teachers_advanced\n// „Éë„É©„É°„Éº„Çø:\n// - subject_ids: ÁßëÁõÆID„ÅÆÈÖçÂàóÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ\n// - grade_ids: Â≠¶Âπ¥ID„ÅÆÈÖçÂàóÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ\n// - course_feature_id: ÁâπÂæ¥IDÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ\n// - sort: „ÇΩ„Éº„ÉàÈ†ÜÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ[pr, certification, rating, lesson_count, latest]\n// - desired_teaching_period: ÊåáÂ∞éÊúüÈñìÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ[monthly, once]\n```\n\n## Ê§úË®ºÊñπÊ≥ï\n\nMCP Inspector„Çí‰ΩøÁî®„Åó„Å¶Ê§úË®º„Åô„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ\n\n1. „Éì„É´„Éâ„ÇíÂÆüË°å„Åó„Å¶„Åã„Çâ„ÄÅ„Ç§„É≥„Çπ„Éö„ÇØ„Çø„ÇíÂÆüË°å„Åó„Åæ„Åô\n```bash\nnpm run build\nnpx @modelcontextprotocol/inspector node dist/index.js\n```\n\n## „É©„Ç§„Çª„É≥„Çπ\n\nMIT\n\n## HTML„Åã„ÇâMarkdown„Å∏„ÅÆÂ§âÊèõÊ©üËÉΩ\n\n„Éû„Éä„É™„É≥„ÇØ„Åã„ÇâÂèñÂæó„Åó„ÅüHTML„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Çí„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥ÂΩ¢Âºè„Å´Â§âÊèõ„Åô„ÇãÊ©üËÉΩ„ÇíÂÆüË£Ö„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ\n\n### „Ç§„É≥„Çπ„Éà„Éº„É´ÊñπÊ≥ï\n\n```bash\nnpm install node-html-markdown\n```\n\n### ‰ΩøÁî®ÊñπÊ≥ï\n\n```typescript\nimport { convertHtmlToMarkdown } from './utils/api';\n\n// HTML„Åã„ÇâMarkdown„Å∏„ÅÆÂ§âÊèõ\nconst html = `\n  <div>\n    <h1>„Éû„Éä„É™„É≥„ÇØ</h1>\n    <p>„Ç™„É≥„É©„Ç§„É≥ÂÆ∂Â∫≠ÊïôÂ∏´„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†</p>\n    <ul>\n      <li><a href=\"/about\">„Çµ„Éº„Éì„Çπ„Å´„Å§„ÅÑ„Å¶</a></li>\n      <li><a href=\"/teachers\">ÂÖàÁîü„ÇíÊé¢„Åô</a></li>\n    </ul>\n  </div>\n`;\n\nconst markdown = convertHtmlToMarkdown(html);\nconsole.log(markdown);\n```\n\n### Â§âÊèõÁµêÊûú\n\n‰∏äË®ò„ÅÆHTML„Åã„Çâ„ÅØ‰ª•‰∏ã„ÅÆ„Çà„ÅÜ„Å™„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„ÅåÁîüÊàê„Åï„Çå„Åæ„ÅôÔºö\n\n```markdown\n# „Éû„Éä„É™„É≥„ÇØ\n\n„Ç™„É≥„É©„Ç§„É≥ÂÆ∂Â∫≠ÊïôÂ∏´„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†\n\n* [„Çµ„Éº„Éì„Çπ„Å´„Å§„ÅÑ„Å¶](/about)\n* [ÂÖàÁîü„ÇíÊé¢„Åô](/teachers)\n```\n\n### ÂÖàÁîüÊ§úÁ¥¢ÁµêÊûú„ÅÆ„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥Â§âÊèõ\n\nÂÖàÁîüÊ§úÁ¥¢API„Åß„ÅØ„ÄÅÊ§úÁ¥¢ÁµêÊûú„ÇíHTMLÂΩ¢Âºè„Å®MarkdownÂΩ¢Âºè„ÅÆ‰∏°Êñπ„ÅßÂèñÂæó„Åß„Åç„Åæ„ÅôÔºö\n\n```typescript\nimport { searchTeachers } from './utils/api';\n\n// Êï∞Â≠¶„ÅÆ‰∏≠Â≠¶Áîü„ÇíÊïô„Åà„Çâ„Çå„ÇãÂÖàÁîü„ÇíÊ§úÁ¥¢\nconst result = await searchTeachers({\n  subject_ids: [2], // Êï∞Â≠¶\n  grade_ids: [4], // ‰∏≠Â≠¶1Âπ¥Áîü\n  sort: 'rating'\n});\n\n// HTMLÂΩ¢Âºè„ÅÆÊ§úÁ¥¢ÁµêÊûú\nconsole.log(result.bodyContent);\n\n// MarkdownÂΩ¢Âºè„ÅÆÊ§úÁ¥¢ÁµêÊûú\nconsole.log(result.markdown);\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "texmeijin",
        "manalinkmcp",
        "ai",
        "learning texmeijin",
        "texmeijin manalinkmcp",
        "connect ai"
      ],
      "category": "education-and-learning"
    },
    "WilliamCloudQi--matlab-mcp-server": {
      "owner": "WilliamCloudQi",
      "name": "matlab-mcp-server",
      "url": "https://github.com/WilliamCloudQi/matlab-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/WilliamCloudQi.webp",
      "description": "Integrates MATLAB with AI to execute MATLAB code, generate scripts from natural language descriptions, and access MATLAB documentation directly through your AI assistant.",
      "stars": 47,
      "forks": 18,
      "license": "Apache License 2.0",
      "language": "JavaScript",
      "updated_at": "2025-10-02T17:05:56Z",
      "readme_content": "# MATLAB MCP Server\n\n\n![GitHub Logo](https://github.com/WilliamCloudQi/matlab-mcp-server/blob/main/-------matlab-mcp-----.png)\n## We welcome contributions from everyone.\n\n## A powerful MCP server that integrates MATLAB with AI, allowing you to execute MATLAB code, generate MATLAB scripts from natural language descriptions, and access MATLAB documentation directly through your AI assistant.\n\n<a href=\"https://glama.ai/mcp/servers/t3mmsdxvmd\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/t3mmsdxvmd/badge\" alt=\"MATLAB Server MCP server\" />\n</a>\n\n## Features\n\n### Resources\n- Access MATLAB documentation via `matlab://documentation/getting-started` URI\n- Get started guide with examples and usage instructions\n\n### Tools\n- `execute_matlab_code` - Execute MATLAB code and get results\n  - Run any MATLAB commands or scripts\n  - Option to save scripts for future reference\n  - View output directly in your conversation\n  \n- `generate_matlab_code` - Generate MATLAB code from natural language\n  - Describe what you want to accomplish in plain language\n  - Get executable MATLAB code in response\n  - Option to save generated scripts\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Requirements\n\n- MATLAB installed on your system\n- Node.js (v14 or higher)\n\n## Installation\n\n### Installing via Smithery\n\nTo install MATLAB MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@WilliamCloudQi/matlab-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @WilliamCloudQi/matlab-mcp-server --client claude\n```\n\n### 1. Install the package\n\n```bash\nnpm install -g matlab-mcp-server\n```\n\nOr clone the repository and build it yourself:\n\n```bash\ngit clone https://github.com/username/matlab-mcp-server.git\ncd matlab-mcp-server\nnpm install\nnpm run build\n```\n\n### 2. Configure cline to use the server\n\nTo use with cline , add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"matlab-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/matlab-server/build/index.js\"],\n      \"env\": {\n        \"MATLAB_PATH\": \"/path/to/matlab/executable\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nReplace `/path/to/matlab/executable` with the path to your MATLAB executable:\n- Windows: Usually `C:\\\\Program Files\\\\MATLAB\\\\R2023b\\\\bin\\\\matlab.exe`\n- macOS: Usually `/Applications/MATLAB_R2023b.app/bin/matlab`\n- Linux: Usually `/usr/local/MATLAB/R2023b/bin/matlab`\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/williamcloudqi-matlab-mcp-server-badge.png)](https://mseep.ai/app/williamcloudqi-matlab-mcp-server)\n\n[![smithery badge](https://smithery.ai/badge/@WilliamCloudQi/matlab-mcp-server)](https://smithery.ai/server/@WilliamCloudQi/matlab-mcp-server)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "matlab",
        "mcp",
        "ai",
        "matlab mcp",
        "matlab ai",
        "matlab documentation"
      ],
      "category": "education-and-learning"
    },
    "Yash-Kavaiya--introduction-to-llms-nptel": {
      "owner": "Yash-Kavaiya",
      "name": "introduction-to-llms-nptel",
      "url": "https://github.com/Yash-Kavaiya/introduction-to-llms-nptel",
      "imageUrl": "/freedevtools/mcp/pfp/Yash-Kavaiya.webp",
      "description": "A structured course on Large Language Models, providing insights into NLP and deep learning, complete with interactive code examples and downloadable materials for enhanced learning.",
      "stars": 2,
      "forks": 1,
      "license": "MIT License",
      "language": "MDX",
      "updated_at": "2025-07-19T08:39:11Z",
      "readme_content": "# Introduction to Large Language Models (LLMs) - NPTEL Course\n\nA comprehensive course on Large Language Models offered by IIT Delhi and IIT Bombay through NPTEL (National Programme on Technology Enhanced Learning).\n\n## Course Overview üìö\n\n### Instructors\n- Prof. Tanmoy Chakraborty (IIT Delhi)\n- Prof. Soumen Chakrabarti (IIT Bombay)\n\n### Teaching Assistants\n- Anwoy Chatterjee (PhD student, IIT Delhi)\n- Poulami Ghosh (PhD student, IIT Bombay)\n\n## Course Structure üéì\n\n### Weekly Modules\n1. **Week 1: Foundations**\n   - Introduction and Recent Advances\n   - Introduction to Natural Language Processing\n   - Deep Learning Basics\n\n2. **Week 2-8: Core Content**\n   - Transformer Architecture\n   - Language Models & Embeddings\n   - Advanced Learning Paradigms\n   - Knowledge Integration & Retrieval\n   - Ethics & Contemporary Models\n\n## Getting Started üöÄ\n\n### Prerequisites\n- Python programming knowledge\n- Basic understanding of Machine Learning\n- Data Structures & Algorithms fundamentals\n\n### Local Development\n```bash\n# Install dependencies\npnpm install\n\n# Start development server\npnpm dev\n\n# Visit http://localhost:3000\n```\n\n## Website Features üí°\n\n### Technical Features\n- Built with Nextra documentation framework\n- React-based components\n- MDX support for interactive content\n- Dark/light mode theming\n- Full-text search capability\n- Mobile-responsive design\n\n### Content Features\n- Interactive code examples\n- Downloadable lecture materials\n- Progress tracking\n- Embedded diagrams and visualizations\n- Searchable documentation\n\n## Contributing ü§ù\n\nWe welcome contributions to improve the course materials:\n1. Fork the repository\n2. Create your feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a Pull Request\n\n## Resources üìñ\n\n### Additional Reading\n- [Speech and Language Processing](https://web.stanford.edu/~jurafsky/slp3/)\n- [Neural Network Models for NLP](http://u.cs.biu.ac.il/~yogo/nnlp.pdf)\n- Course-specific materials in the `/resources` directory\n\n### Support\nFor technical issues, please open a GitHub issue.\nFor course-related queries, use the NPTEL discussion forum.\n\n## License\n\nThis project is licensed under the MIT License. See [LICENSE](LICENSE) for details.\n\n---\n\nBuilt with [Nextra](https://nextra.site) | Deployed on [Vercel](https://vercel.com)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "llms",
        "learning",
        "language",
        "language models",
        "introduction llms",
        "large language"
      ],
      "category": "education-and-learning"
    },
    "ahnopologetic--canvas-lms-mcp": {
      "owner": "ahnopologetic",
      "name": "canvas-lms-mcp",
      "url": "https://github.com/ahnopologetic/canvas-lms-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ahnopologetic.webp",
      "description": "Access and manage educational data from Canvas LMS, including courses, assignments, quizzes, and files. Query and retrieve planner items and course modules programmatically.",
      "stars": 6,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-26T21:36:18Z",
      "readme_content": "# Canvas LMS MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@ahnopologetic/canvas-lms-mcp)](https://smithery.ai/server/@ahnopologetic/canvas-lms-mcp)\nA minimal Canvas LMS MCP (Machine Conversation Protocol) server for easy access to education data through your Canvas LMS instance. This server provides a bridge between AI systems (like Cursor) and Canvas Learning Management System.\n\n## Features\n\n- List planner items (assignments, quizzes, etc.)\n- Get and list assignments\n- Get and list quizzes\n- Get and list courses\n- Get course syllabus\n- Get course modules\n- List files\n\n## Installation\n\n### Installing via Smithery\n\nTo install Canvas LMS Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@ahnopologetic/canvas-lms-mcp):\n\n```bash\nnpx -y @smithery/cli install @ahnopologetic/canvas-lms-mcp --client claude\n```\n\n### Prerequisites\n\n- Python 3.13+\n- Canvas LMS API token\n- `uv` package manager (recommended)\n\n### Installation Methods\n\n#### Option 1: Install with uvx (Recommended)\n\nThe easiest way to install and run canvas-lms-mcp is using uvx:\n\n```bash\nuvx canvas-lms-mcp\n```\n\nThis will run the server in an isolated environment without installing it permanently.\n\nTo install the tool permanently:\n\n```bash\nuv tool install canvas-lms-mcp\n```\n\n#### Option 2: Install from Source\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/yourusername/canvas-lms-mcp.git\n   cd canvas-lms-mcp\n   ```\n\n2. Install with uv:\n   ```bash\n   # Install uv if you don't have it yet\n   curl -LsSf https://astral.sh/uv/install.sh | sh\n\n   # Create a virtual environment and install dependencies\n   uv venv\n   uv pip install -e .\n   ```\n\n   Alternatively, use traditional methods:\n   ```bash\n   python -m venv .venv\n   source .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n   pip install -e .\n   ```\n\n## Configuration\n\nSet the following environment variables:\n\n```bash\nexport CANVAS_API_TOKEN=\"your_canvas_api_token\"\nexport CANVAS_BASE_URL=\"https://your-institution.instructure.com\"  # Default: https://canvas.instructure.com\n```\n\nYou can get your Canvas API token from your Canvas account settings.\n\n## Running the Server\n\nStart the server with uv:\n\n```bash\nuv run src/canvas_lms_mcp/main.py\n```\n\nIf installed with uvx tool:\n```bash\ncanvas-lms-mcp\n```\n\nBy default, the server runs on http://localhost:8000. You can use the FastMCP interface at http://localhost:8000/docs to interact with the API.\n\n## Available Tools\n\nThe server provides the following tools for interacting with Canvas LMS:\n\n### Courses\n\n#### `list_courses`\nList courses that the user is actively enrolled in.\n\nParameters:\n- `page` (optional, default=1): Page number (1-indexed)\n- `items_per_page` (optional, default=10): Number of items per page\n\n#### `get_course`\nGet a single course by ID.\n\nParameters:\n- `course_id` (required): Course ID\n- `include` (optional): List of additional data to include\n\n#### `get_course_syllabus`\nGet a course's syllabus.\n\nParameters:\n- `course_id` (required): Course ID\n\n#### `get_course_modules`\nGet modules for a course.\n\nParameters:\n- `course_id` (required): Course ID\n- `include` (optional): List of additional data to include\n\n### Assignments\n\n#### `list_assignments`\nList assignments for a course.\n\nParameters:\n- `course_id` (required): Course ID\n- `bucket` (required): Filter assignments by (\"past\", \"overdue\", \"undated\", \"ungraded\", \"unsubmitted\", \"upcoming\", \"future\")\n- `order_by` (required): Field to order assignments by (\"due_at\", \"position\", \"name\")\n- `page` (optional, default=1): Page number (1-indexed)\n- `items_per_page` (optional, default=10): Number of items per page\n\n#### `get_assignment`\nGet a single assignment by ID.\n\nParameters:\n- `course_id` (required): Course ID\n- `assignment_id` (required): Assignment ID\n\n### Quizzes\n\n#### `list_quizzes`\nList quizzes for a course.\n\nParameters:\n- `course_id` (required): Course ID\n- `include` (optional): List of additional data to include\n- `page` (optional, default=1): Page number (1-indexed)\n- `items_per_page` (optional, default=10): Number of items per page\n\n#### `get_quiz`\nGet a single quiz by ID.\n\nParameters:\n- `course_id` (required): Course ID\n- `quiz_id` (required): Quiz ID\n\n### Files\n\n#### `list_files`\nList files for a course or folder.\n\nParameters:\n- `course_id` (optional): Course ID\n- `folder_id` (optional): Folder ID\n- `include` (optional): List of additional data to include\n- `page` (optional, default=1): Page number (1-indexed)\n- `items_per_page` (optional, default=10): Number of items per page\n\n### Planner Items\n\n#### `list_planner_items`\nList planner items for the authenticated user.\n\nParameters:\n- `start_date` (required): Start date in ISO 8601 format\n- `end_date` (required): End date in ISO 8601 format\n- `context_codes` (optional): List of context codes (e.g., [\"course_123\"])\n- `page` (optional, default=1): Page number (1-indexed)\n- `items_per_page` (optional, default=10): Number of items per page\n\n## Integration with Cursor\n\nCursor is an AI-powered IDE that can interact with the Canvas LMS MCP server to provide education data directly within your development environment.\n\n### Setting Up Cursor Integration\n\n1. Install the Cursor IDE from [https://cursor.sh/](https://cursor.sh/)\n\n2. Create a `.cursor/mcp.json` file in your project directory with the following content:\n   ```json\n   {\n       \"mcpServers\": {\n           \"canvas\": {\n               \"command\": \"uvx\",\n               \"args\": [\n                    \"canvas-lms-mcp\"\n               ],\n               \"env\": {\n                   \"CANVAS_API_TOKEN\": \"your_canvas_api_token\",\n                   \"CANVAS_BASE_URL\": \"https://your-institution.instructure.com\"\n               }\n           }\n       }\n   }\n   ```\n\n   Replace:\n   - `your_canvas_api_token` with your actual Canvas API token\n   - `your-institution.instructure.com` with your Canvas institution URL\n\n3. Restart Cursor for the changes to take effect.\n\n### Cursor Time Integration (Optional)\n\nYou can also integrate a time server for timezone-related queries by adding a \"time\" server to your mcp.json:\n\n```json\n\"time\": {\n    \"command\": \"uvx\",\n    \"args\": [\n        \"mcp-server-time\",\n        \"--local-timezone=America/New_York\"\n    ]\n}\n```\n\nThis allows you to use time-related functions with your Canvas data.\n\n### Usage Examples\n\nOnce connected, you can ask Cursor AI about your Canvas data:\n\n- \"What assignments do I have due next week?\"\n- \"Show me the syllabus for my Biology course\"\n- \"List all my upcoming quizzes\"\n- \"What's on my schedule for tomorrow?\"\n\nExample conversation:\n\n```\nYOU: What assignments do I have due soon?\n\nCURSOR: I'll check your upcoming assignments.\n\nBased on your Canvas data, here are your upcoming assignments:\n- \"Final Project\" for CS101 due on December 10, 2023\n- \"Lab Report #5\" for BIOL200 due on December 7, 2023\n- \"Research Paper\" for ENGL301 due on December 15, 2023\n```\n\n## Development\n\nFor detailed development instructions, please see the [DEVELOPMENT.md](DEVELOPMENT.md) file.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "lms",
        "planner",
        "courses",
        "canvas lms",
        "lms mcp",
        "lms including"
      ],
      "category": "education-and-learning"
    },
    "ajay-sai--Machine-Learning-Interviews": {
      "owner": "ajay-sai",
      "name": "Machine-Learning-Interviews",
      "url": "https://github.com/ajay-sai/Machine-Learning-Interviews",
      "imageUrl": "/freedevtools/mcp/pfp/ajay-sai.webp",
      "description": "Prepare for Machine Learning Engineering interviews by accessing insights from personal experiences and structured modules. Offers resources for coding, system design, and behavioral interview preparation targeted at success in ML roles.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-02-19T13:08:11Z",
      "readme_content": "<!-- [![Tweet](https://img.shields.io/twitter/url/http/shields.io.svg?style=social)](https://twitter.com/intent/tweet?text=Machine%20Learning%20Interview%20Guide&url=https://github.com/alirezadir/machine-learning-interview-enlightener&via=alirezadira&hashtags=artificialintelligence,machinelearning,interviews,design)\n[![Twitter URL](https://img.shields.io/twitter/url/https/twitter.com/fold_left.svg?style=social&label=Follow%20%40alirezadira)](https://twitter.com/alirezadira)\n\n[![Build Status](https://travis-ci.com/username/projectname.svg?branch=master)](https://travis-ci.com/username/projectname)\n[![codecov](https://codecov.io/gh/cam-barts/ObeyTheTestingGoat/branch/master/graph/badge.svg)](https://codecov.io/gh/cam-barts/ObeyTheTestingGoat)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://github.com/alirezadir/machine-learning-interview-enlightener/blob/main/LICENSE) -->\n\n# Machine Learning Technical Interviews :robot: \n<p align=\"center\">\n\n</p>\n\n\n\nThis repo aims to serve as a guide to prepare for **Machine Learning (AI) Engineering** interviews for relevant roles at big tech companies (in particular FAANG). It has compiled based on the author's personal experience and notes from his own interview preparation, when he received offers from Meta (ML Specialist), Google (ML Engineer), Amazon (Applied Scientist), Apple (Applied Scientist), and Roku (ML Engineer).\n\nThe following components are the most commonly used interview modules for technical ML roles at different companies. We will go through them one by one and share how one can prepare:\n\n\n<center>\n\n |Chapter | Content|\n |---| --- |\n | Chapter 1 \t|  [General Coding (Algos and Data Structures)](src/lc-coding.md)\t   | \n| Chapter 2 \t| [ML Coding](src/MLC/ml-coding.md) \t|  \t\n| Chapter 3 \t| [ML System Design (Updated in 2023)](src/MLSD/ml-system-design.md)|\n| Chapter 4 \t| [ML Fundamentals/Breadth](src/ml-fundamental.md)| \n| Chapter 5 \t| [Behavioral](src/behavior.md)| \n|  \t|  \t|  \n\n</center>\n\nNotes:\n\n* At the time I'm putting these notes together, machine learning interviews at different companies do not follow a unique structure unlike software engineering interviews. However, I found some of the components very similar to each other, although under different naming.\n\n* The guide here is mostly focused on *Machine Learning Engineer* (and Applied Scientist) roles at big companies. Although relevant roles such as \"Data Science\" or \"ML research scientist\" have different structures in interviews, some of the modules reviewed here can be still useful. For more understanding about different technical roles within ML umbrella you can refer to [Link]\n\n* As a supplementary resource, you can also refer to my [Production Level Deep Learning](https://github.com/alirezadir/Production-Level-Deep-Learning) repo for further insights on how to design deep learning systems for production. \n\n\n\n# Contribution\n* Feedback and contribution are very welcome :blush: \n**If you'd like to contribute**, please make a pull request with your suggested changes).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "interviews",
        "interview",
        "engineering",
        "learning interviews",
        "engineering interviews",
        "learning engineering"
      ],
      "category": "education-and-learning"
    },
    "beastmod7--You-Dont-Know-JS": {
      "owner": "beastmod7",
      "name": "You-Dont-Know-JS",
      "url": "https://github.com/beastmod7/You-Dont-Know-JS",
      "imageUrl": "/freedevtools/mcp/pfp/beastmod7.webp",
      "description": "A comprehensive book series that provides an in-depth exploration of JavaScript's core mechanisms, enhancing understanding and coding skills through detailed explanations and examples. The series is available for online reading and offers additional resources for purchased offline access.",
      "stars": 0,
      "forks": 0,
      "license": "Other",
      "language": "",
      "updated_at": "2024-07-09T07:33:36Z",
      "readme_content": "# You Don't Know JS Yet (book series) - 2nd Edition\n\nThis is a series of books diving deep into the core mechanisms of the JavaScript language. This is the **second edition** of the book series:\n\n<a href=\"https://leanpub.com/ydkjsy-get-started\"></a>&nbsp;&nbsp;\n<a href=\"https://leanpub.com/ydkjsy-scope-closures\"></a>&nbsp;&nbsp;...\n\n**To read more about the motivations and perspective behind this book series, check out the [Preface](preface.md).**\n\nIf you're looking for the previous **first edition** books, [they can be found here](https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/README.md).\n\n## Titles\n\nI recommend reading the **second edition** books in this order:\n\n* [Get Started](get-started/README.md) | [Buy on Leanpub](https://leanpub.com/ydkjsy-get-started) | [Buy on Amazon](https://www.amazon.com/dp/B084BNMN7T)\n* [Scope & Closures](scope-closures/README.md) | [Buy on Leanpub](https://leanpub.com/ydkjsy-scope-closures) | [Buy on Amazon](https://www.amazon.com/dp/B08634PZ3N)\n* [Objects & Classes](objects-classes/README.md) (draft stable)\n* [Types & Grammar](types-grammar/README.md) (draft in progress)\n* Sync & Async (not yet started)\n* ES.Next & Beyond (not yet started)\n\nIf you're looking for the previous **first edition** books, [they can be found here](https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/README.md).\n\n## Publishing\n\nAs always, you'll be able to read these books online here entirely for free.\n\nThis edition of the books is being self-published through [GetiPub](https://geti.pub) publishing. The published books will be made available for sale through normal book retail sources.\n\nIf you'd like to contribute financially towards the effort (or any of my other OSS efforts) aside from purchasing the published books, please consider these options:\n\n* [Github Sponsorship](https://github.com/users/getify/sponsorship)\n* [Patreon](https://www.patreon.com/getify)\n* [Paypal](https://www.paypal.me/getify)\n\n## Contributions\n\nPlease feel free to contribute to the quality of this content by submitting PRs for improvements to code snippets, explanations, etc. While typo fixes are welcomed, they will likely be caught through normal editing/publishing processes, **so please don't worry about them right now.**\n\nAny contributions you make to this effort **are of course greatly appreciated**.\n\nBut **PLEASE** read the [Contributions Guidelines](CONTRIBUTING.md) carefully before submitting a PR.\n\n## Thank You To These Wonderful Sponsors\n\n[![Frontend Masters Logo (dark)](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/external-logos/fem_logo-light.svg)](https://frontendmasters.com#gh-light-mode-only)\n\n[![Frontend Masters Logo (light)](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/external-logos/fem_logo.svg)](https://frontendmasters.com#gh-dark-mode-only)\n\n**The first two books of the second edition** are exclusively sponsored by **[Frontend Masters](https://frontendmasters.com)**.\n\nFrontend Masters is the gold standard for top-of-the-line expert training material in frontend-oriented software development. With over 150 courses on all things frontend, this should be your first and only stop for quality video training on HTML, CSS, JS, and related technologies.\n\n**Note:** I teach [all my workshops](https://frontendmasters.com/kyle-simpson) exclusively through Frontend Masters. If you like this book content, please check out my video training courses.\n\nI want to extend a warm and deep thanks to Marc Grabanski and the entire Frontend Masters team, not only for their excellent work with the video training platform, but for their unwavering support of me and of the \"You Don't Know JS\" books!\n\n----\n\n## License & Copyright\n\nThe materials herein are all &copy; 2019-2022 Kyle Simpson.\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" /></a><br />This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">Creative Commons Attribution-NonCommercial-NoDerivs 4.0 Unported License</a>.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "javascript",
        "js",
        "beastmod7",
        "js comprehensive",
        "know js",
        "learning beastmod7"
      ],
      "category": "education-and-learning"
    },
    "captain-blue210--anki-mcp-server": {
      "owner": "captain-blue210",
      "name": "anki-mcp-server",
      "url": "https://github.com/captain-blue210/anki-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/captain-blue210.webp",
      "description": "Connects to Anki to retrieve leech-tagged cards and adds date-stamped review tags for analysis. Facilitates enhanced study sessions by tracking reviewed cards and integrating with Claude Desktop.",
      "stars": 0,
      "forks": 3,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-04-13T14:19:56Z",
      "readme_content": "# Anki MCP Server\n\nAn MCP (Model Context Protocol) server for Claude Desktop that connects to Anki via AnkiConnect and retrieves leech-tagged cards.\n\n## Features\n\n- Connects to Anki via AnkiConnect API\n- Retrieves cards with \"leech\" tags\n- Adds date-stamped review tags to cards\n- Provides comprehensive card data for analysis by Claude\n- Can be used with Claude Desktop\n\n## Prerequisites\n\n- [Anki](https://apps.ankiweb.net/) installed and running\n- [AnkiConnect](https://ankiweb.net/shared/info/2055492159) add-on installed in Anki\n- Node.js and npm\n\n## Installation\n\n1. Clone this repository:\n   ```\n   git clone https://github.com/yourusername/anki-mcp-server.git\n   cd anki-mcp-server\n   ```\n\n2. Install dependencies:\n   ```\n   npm install\n   ```\n\n3. Build the project:\n   ```\n   npm run build\n   ```\n\n## Configuration\n\nThe server can be configured using environment variables. Copy the provided example file to create your own configuration:\n\n```\ncp .env.example .env\n```\n\nThen edit the `.env` file to customize your settings:\n\n| Environment Variable   | Description                                | Default Value           |\n| ---------------------- | ------------------------------------------ | ----------------------- |\n| `ANKI_CONNECT_URL`     | The URL of the Anki Connect API            | `http://localhost:8765` |\n| `ANKI_CONNECT_VERSION` | The version of the Anki Connect API to use | `6`                     |\n| `ANKI_MOCK_MODE`       | Enable mock mode for testing (true/false)  | `false`                 |\n\nIf the environment variables are not set, the server will use the default values.\n\n### Finding Your Local IP Address for AnkiConnect\n\nIf connecting to `localhost` doesn't work, you'll need to use your computer's local IP address instead. Configure your `.env` file with:\n\n```\nANKI_CONNECT_URL=http://YOUR_LOCAL_IP:8765\n```\n\nTo find your local IP address:\n\n- **macOS**: Open Terminal and run `ifconfig` or `ipconfig getifaddr en0` (for WiFi)\n- **Windows**: Open Command Prompt and run `ipconfig`\n- **Linux**: Open Terminal and run `ip addr show` or `hostname -I`\n\nLook for IPv4 addresses like `192.168.x.x` or `10.x.x.x` in the output.\n\n### Test Configuration\n\nFor testing, a separate configuration file `.env.test` is provided:\n\n```\ncp .env.example .env.test\n```\n\nEdit `.env.test` to set test-specific values:\n\n```\nANKI_CONNECT_URL=http://localhost:8765\nANKI_CONNECT_VERSION=6\nANKI_MOCK_MODE=true\n```\n\nTo run in test mode:\n\n```\nnpm run start:test\n```\n\n## Usage\n\n1. Make sure Anki is running with AnkiConnect installed\n2. Run the MCP server:\n   ```\n   npm start\n   ```\n\n## Configuring Claude Desktop\n\nTo use this MCP server with Claude Desktop:\n\n1. Open Claude Desktop\n2. Edit the Claude Desktop configuration file located at:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - Linux: `~/.config/Claude/claude_desktop_config.json`\n\n3. Add the following configuration to the `mcpServers` section:\n\n```json\n{\n  \"mcpServers\": {\n    \"anki\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/anki-mcp-server/dist/index.js\"]\n    }\n  }\n}\n```\n\nReplace `\"path/to/anki-mcp-server\"` with the actual path to where you cloned this repository.\n\n## MCP Tool Usage\n\nOnce configured, you can use the following tools in Claude:\n\n### Example Usage\n\n```\nCould you analyze my Anki leech cards and suggest ways to improve my study?\n```\n\nClaude will use the MCP server to retrieve your leech cards and analyze them.\n\n## Available Tools\n\n### get_leech_cards\n\nRetrieves cards tagged as leeches from Anki.\n\nParameters:\n- `detailed` (optional, boolean, default: true): Whether to return comprehensive card data or just IDs\n- `count` (optional, number): Number of random cards to return (defaults to all cards)\n\n### tag_reviewed_cards\n\nAdds a date-stamped \"reviewed\" tag to specified cards. This allows you to track which cards you've reviewed with Claude.\n\nParameters:\n- `card_ids` (required, array of numbers): Array of card IDs to tag as reviewed\n- `custom_tag_prefix` (optional, string, default: \"Ë¶ãÁõ¥„Åó\"): Custom prefix for the tag\n\nThe tag will be in the format `Ë¶ãÁõ¥„Åó::YYYYMMDD` (or your custom prefix if specified).\n\nExample usage in Claude:\n```\nI've reviewed these cards, please tag them as reviewed: [1234567890, 1234567891]\n```\n\n## Troubleshooting\n\n- **\"Could not connect to Anki\"** - Make sure Anki is running and AnkiConnect is properly installed\n- **\"No leech cards found\"** - You don't have any cards tagged as \"leech\" in Anki\n- **Connection issues with localhost** - If you're unable to connect using `localhost`:\n  1. Find your local IP address as described in the Configuration section\n  2. Update your `.env` file to use `ANKI_CONNECT_URL=http://YOUR_LOCAL_IP:8765`\n  3. Make sure AnkiConnect is configured to allow connections from your IP address\n  4. Restart the MCP server after making these changes\n- **Tag not appearing** - Make sure you're providing valid card IDs to the `tag_reviewed_cards` tool\n\n## Testing Mode\n\nFor testing without affecting actual Anki data, you can use the mock mode:\n\n1. Set `ANKI_MOCK_MODE=true` in your `.env` file or use the provided `.env.test` file\n2. Run the server with `npm run start:test`\n\nIn mock mode, the server will simulate all Anki operations without actually connecting to Anki. This is useful for testing Claude integrations without risking data changes.\n\n## Development\n\nTo run the server in development mode with hot reloading:\n\n```\nnpm run dev\n```\n\nFor development with mock mode enabled:\n\n```\nnpm run dev:test\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "anki",
        "cards",
        "tags",
        "anki mcp",
        "tagged cards",
        "blue210 anki"
      ],
      "category": "education-and-learning"
    },
    "daigxok--gdsx": {
      "owner": "daigxok",
      "name": "gdsx",
      "url": "https://github.com/daigxok/gdsx",
      "imageUrl": "/freedevtools/mcp/pfp/daigxok.webp",
      "description": "Facilitates access to and manipulation of educational resources for analysis and development in reform initiatives. Supports collaboration and insight generation in educational research contexts.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2023-09-27T00:59:40Z",
      "readme_content": "# gdsx\nResearch on Educational Reform Projects\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "educational",
        "daigxok",
        "education",
        "learning daigxok",
        "educational research",
        "daigxok gdsx"
      ],
      "category": "education-and-learning"
    },
    "dragonku--mcp_school_food": {
      "owner": "dragonku",
      "name": "mcp_school_food",
      "url": "https://github.com/dragonku/mcp_school_food",
      "imageUrl": "/freedevtools/mcp/pfp/dragonku.webp",
      "description": "Retrieve school meal information across South Korea using natural language queries, providing access to daily and weekly meal data for any school.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-04-05T12:42:12Z",
      "readme_content": "# ÌïúÍµ≠ ÌïôÍµê Í∏âÏãù Ï†ïÎ≥¥ Ï°∞Ìöå ÏÑúÎ≤Ñ\n\nNEIS Open APIÎ•º ÌôúÏö©ÌïòÏó¨ Ï†ÑÍµ≠ ÌïôÍµêÏùò Í∏âÏãù Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï† Ïàò ÏûàÎäî MCP(Model Context Protocol) ÏÑúÎ≤ÑÏûÖÎãàÎã§.\n\n## Í∏∞Îä•\n\n- ÌïôÍµêÎ™ÖÏúºÎ°ú ÌïôÍµê Í≤ÄÏÉâ\n- ÏùºÏùº Í∏âÏãù Ï†ïÎ≥¥ Ï°∞Ìöå\n- Ï£ºÍ∞Ñ Í∏âÏãù Ï†ïÎ≥¥ Ï°∞Ìöå\n- ÏûêÏó∞Ïñ¥ ÏûÖÎ†• ÏßÄÏõê (Ïòà: \"Ìö®ÏõêÍ≥†Îì±ÌïôÍµê Ïñ¥Ï†ú Í∏âÏãù\")\n\n## ÏÑ§Ïπò Î∞è Ïã§Ìñâ\n\n1. ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò:\n```bash\nnpm install\n```\n\n2. ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï:\n`.env` ÌååÏùºÏùÑ ÏÉùÏÑ±ÌïòÍ≥† Îã§Ïùå ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï©ÎãàÎã§:\n```bash\nNEIS_API_KEY=your_api_key_here\nPORT=3000\nTRANSPORT=ws\n```\n\n3. Í∞úÎ∞ú Î™®Îìú Ïã§Ìñâ:\n```bash\nnpm run dev\n```\n\n4. ÌîÑÎ°úÎçïÏÖò Î™®Îìú Ïã§Ìñâ:\n```bash\nnpm run build\nnpm start\n```\n\n## API ÏÇ¨Ïö© ÏòàÏãú\n\n```typescript\n// ÏùºÏùº Í∏âÏãù Ï†ïÎ≥¥ Ï°∞Ìöå\n{\n  \"question\": \"Ìö®ÏõêÍ≥†Îì±ÌïôÍµê Ïò§Îäò Í∏âÏãù\"\n}\n\n// Ï£ºÍ∞Ñ Í∏âÏãù Ï†ïÎ≥¥ Ï°∞Ìöå\n{\n  \"question\": \"Ìö®ÏõêÍ≥†Îì±ÌïôÍµê Ïù¥Î≤àÏ£º Í∏âÏãù\"\n}\n```\n\n## ÌôòÍ≤Ω Î≥ÄÏàò\n\n- `NEIS_API_KEY`: NEIS Open API ÌÇ§ (ÌïÑÏàò)\n- `PORT`: ÏÑúÎ≤Ñ Ìè¨Ìä∏ (Í∏∞Î≥∏Í∞í: 3000)\n- `TRANSPORT`: Ï†ÑÏÜ° Î∞©Ïãù (ws ÎòêÎäî stdio)\n\n## ÎùºÏù¥ÏÑ†Ïä§\n\nISC\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_school_food",
        "meal",
        "dragonku",
        "dragonku mcp_school_food",
        "mcp_school_food retrieve",
        "school meal"
      ],
      "category": "education-and-learning"
    },
    "enkhbold470--mcp-server-canvas": {
      "owner": "enkhbold470",
      "name": "mcp-server-canvas",
      "url": "https://github.com/enkhbold470/mcp-server-canvas",
      "imageUrl": "/freedevtools/mcp/pfp/enkhbold470.webp",
      "description": "Interact programmatically with Canvas LMS to manage courses and enrollments by utilizing the Canvas API. Streamline educational workflows through features like course listing and enrollment type filtering with interactive help prompts.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-15T14:02:41Z",
      "readme_content": "# Canvas MCP Server\n\nA Model Context Protocol (MCP) server implementation for the Canvas LMS API. This server provides functionality to interact with Canvas LMS programmatically.\n\n## Features\n\n- List courses from Canvas LMS with optional enrollment type filtering\n- Interactive help prompts for using the tools\n\n## Prerequisites\n\n- Node.js 18 or later\n- A Canvas LMS instance\n- Canvas API access token\n- Cursor (for client integration)\n\n## Setup\n\n1. Clone this repository\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Set up environment variables:\n   ```bash\n   export CANVAS_BASE_URL=\"https://your-canvas-instance.com\"\n   export CANVAS_ACCESS_TOKEN=\"your-api-token\"\n   ```\n4. Build the project:\n   ```bash\n   npm run build\n   ```\n5. Start the server:\n   ```bash\n   npm start\n   ```\n\n## Connecting with Cursor\n\nTo use this MCP server with Cursor:\n\n1. Open Cursor's settings\n2. Navigate to the MCP configuration section\n3. Add a new server configuration:\n   ```json\n   {\n     \"mcpServers\": {\n       \"canvas\": {\n         \"command\": \"npm\",\n         \"args\": [\n           \"start\"\n         ],\n         \"cwd\": \"/path/to/mcp-server-canvas\"\n       }\n     }\n   }\n   ```\n4. Save the configuration and restart Cursor\n5. The Canvas tools will now be available in Cursor's MCP tools panel\n\n## Available Tools\n\n### list_courses\n\nLists all courses from Canvas LMS.\n\nParameters:\n- `enrollment_type` (optional): Filter courses by enrollment type (teacher, student, ta)\n\nExample response:\n```json\n{\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": [\n        {\n          \"id\": 1234,\n          \"name\": \"Example Course\",\n          \"code\": \"EX101\",\n          \"state\": \"available\",\n          \"startDate\": \"2024-01-01T00:00:00Z\",\n          \"endDate\": \"2024-12-31T23:59:59Z\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n### list-courses-help\n\nAn interactive prompt that provides help with using the list_courses tool.\n\n## Development\n\nThe server is built using TypeScript and the MCP SDK. To add new features:\n\n1. Add new API methods to the `CanvasAPI` class\n2. Register new tools using `server.tool()`\n3. Register help prompts using `server.prompt()`\n4. Build and test your changes\n\n## Troubleshooting\n\nIf you encounter issues:\n\n1. Check that environment variables are set correctly\n2. Verify your Canvas API token has the necessary permissions\n3. Check Cursor's MCP server logs for any error messages\n4. Ensure the server path in Cursor's configuration is correct\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "interactive",
        "canvas",
        "educational",
        "canvas lms",
        "server canvas",
        "canvas api"
      ],
      "category": "education-and-learning"
    },
    "faizan45640--google-classroom-mcp-server": {
      "owner": "faizan45640",
      "name": "google-classroom-mcp-server",
      "url": "https://github.com/faizan45640/google-classroom-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/faizan45640.webp",
      "description": "Access Google Classroom data to retrieve course details, assignments, and announcements. Integrate classroom management capabilities into AI interactions.",
      "stars": 1,
      "forks": 7,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-28T14:58:37Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/faizan45640-google-classroom-mcp-server-badge.png)](https://mseep.ai/app/faizan45640-google-classroom-mcp-server)\n\n# Google Classroom MCP Server\n[![smithery badge](https://smithery.ai/badge/@faizan45640/google-classroom-mcp-server)](https://smithery.ai/server/@faizan45640/google-classroom-mcp-server)\n\nAn MCP (Model Context Protocol) server that provides access to Google Classroom data through Claude and other AI assistants that support the MCP protocol.\n\n## Setup\n\n### Prerequisites\n\n- Node.js (v16 or higher)\n- A Google Cloud Platform project with the Google Classroom API enabled\n- OAuth 2.0 client credentials for the Google Classroom API\n\n### Installation\n\n#### Installing via Smithery\n\nTo install Google Classroom MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@faizan45640/google-classroom-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @faizan45640/google-classroom-mcp-server --client claude\n```\n\n#### Installing Manually\n1. Clone this repository\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n3. Place your Google OAuth client credentials in a file named `credentials.json` in the project root:\n\n```json\n{\n  \"web\": {\n    \"client_id\": \"YOUR_CLIENT_ID\",\n    \"project_id\": \"YOUR_PROJECT_ID\",\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n    \"token_uri\": \"https://oauth2.googleapis.com/token\",\n    \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n    \"client_secret\": \"YOUR_CLIENT_SECRET\",\n    \"redirect_uris\": [\"http://localhost:3000/auth/google/callback\"]\n  }\n}\n```\n\n4. Authenticate with Google:\n\n```bash\nnode index.js auth\n```\n\nThis will launch a browser window to complete the OAuth flow and save your credentials to `tokens.json`.\n\n5. Configure Claude to use this server by updating `claude_desktop_config.json` (typically in `%APPDATA%\\Claude\\`):\n\n```json\n{\n  \"mcpServers\": {\n    \"class\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"PATH_TO_YOUR_DIRECTORY\\\\index.js\"\n      ]\n    }\n  }\n}\n```\n\n## Usage\n\n### Available Tools\n\nThe server provides several tools for interacting with Google Classroom:\n\n#### 1. `courses` - List all your Google Classroom courses\n\n```\nUse the 'courses' tool to get a list of all your Google Classroom courses\n```\n\n#### 2. `course-details` - Get detailed information about a specific course\n\n```\nUse the 'course-details' tool with the courseId parameter to get details and announcements for a specific course\n```\n\nParameters:\n- `courseId`: The ID of the course (can be obtained from the `courses` tool)\n\n#### 3. `assignments` - Get assignments for a specific course\n\n```\nUse the 'assignments' tool with the courseId parameter to get assignments and your submissions for a specific course\n```\n\nParameters:\n- `courseId`: The ID of the course (can be obtained from the `courses` tool)\n\n### Example Prompts for Claude\n\n1. Show me all my Google Classroom courses\n2. Get details for my Math course with ID 123456789\n3. Show me all assignments for my History course with ID 987654321\n\n## Permissions\n\nThe server requests the following Google Classroom API permissions:\n\n- `classroom.courses.readonly` - To access course information\n- `classroom.announcements.readonly` - To access course announcements\n- `classroom.coursework.me.readonly` - To access your coursework and assignments\n- `classroom.rosters.readonly` - To access class rosters\n\n## Troubleshooting\n\nIf you encounter permission errors, try:\n\n1. Running the auth command again to refresh permissions:\n   ```\n   node index.js auth\n   ```\n\n2. Ensuring your Google account is added as a test user in the Google Cloud Console if your app is in testing mode\n\n3. Checking the OAuth scopes in the `authenticateAndSaveCredentials` function to ensure they match your needs\n\n## Notes\n\n- This server is designed to be used with Claude AI or other MCP-compatible assistants\n- All API requests are made using your authenticated Google account\n- Token refresh is handled automatically by the server\n- Sensitive credentials are stored locally in the `tokens.json` file\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "classroom",
        "education",
        "google",
        "google classroom",
        "classroom data",
        "classroom mcp"
      ],
      "category": "education-and-learning"
    },
    "hellokitty-v--MCP-Learn": {
      "owner": "hellokitty-v",
      "name": "MCP-Learn",
      "url": "https://github.com/hellokitty-v/MCP-Learn",
      "imageUrl": "/freedevtools/mcp/pfp/hellokitty-v.webp",
      "description": "Provides a platform for learning and experimenting with the Model Context Protocol (MCP), focusing on integrating language models with external data sources and tools.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-04-25T06:11:09Z",
      "readme_content": "# MCP-Learn",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "protocol",
        "mcp",
        "models",
        "learning hellokitty",
        "mcp learn",
        "context protocol"
      ],
      "category": "education-and-learning"
    },
    "johwiebe--anki-mcp": {
      "owner": "johwiebe",
      "name": "anki-mcp",
      "url": "https://github.com/johwiebe/anki-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/johwiebe.webp",
      "description": "Integrates AI assistants with Anki to facilitate study by adding, updating, and querying notes while providing access to review statistics. Enables interaction with the Anki collection and leverages spaced repetition algorithms for enhanced learning.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-17T06:39:28Z",
      "readme_content": "# Anki MCP Server\n\nA Model Context Protocol (MCP) server for integrating AI assistants with Anki, the popular spaced repetition flashcard software.\n\n## Features\n\nThis MCP server enables AI assistants to interact with Anki through the following tools:\n\n### Tools\n\n- **get-collection-overview**: Returns an overview of the Anki collection like available decks, available models and their fields\n\n- **add-or-update-notes**: Adds new notes or updates existing ones. Allows batch adding/updating multiple notes at once.\n\n- **get-cards-reviewed**: Get the number of cards reviewed by day\n\n- **find-notes**: Allows querying notes using the [Anki searching syntax](https://docs.ankiweb.net/searching.html)\n\n## Requirements\n\n- Anki must be installed and running\n- The [AnkiConnect](https://ankiweb.net/shared/info/2055492159) add-on must be installed in Anki and running\n- This MCP server uses `uv`. To install `uv`, follow the [official instructions](https://docs.astral.sh/uv/getting-started/installation/).\n\n\n## Configuration\n\n### Claude Desktop\n\n1. Open your Claude Desktop config file:\n  - MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n  - Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n2. Add `anki-mcp` to the `mcpServers` section:  \n  ```\n  \"mcpServers\": {\n    \"anki-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"anki-mcp\"\n      ]\n    }\n  }\n  ```\n\n3. Restart Claude Desktop.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "anki",
        "ai",
        "learning",
        "assistants anki",
        "anki facilitate",
        "anki collection"
      ],
      "category": "education-and-learning"
    },
    "jpablomm--mcp-hackathon-canvas": {
      "owner": "jpablomm",
      "name": "mcp-hackathon-canvas",
      "url": "https://github.com/jpablomm/mcp-hackathon-canvas",
      "imageUrl": "/freedevtools/mcp/pfp/jpablomm.webp",
      "description": "Integrate with Canvas LMS and Gradescope to query courses, assignments, modules, and calendar events using natural language. Retrieve detailed breakdowns of upcoming assignments and submission statuses to improve educational productivity.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-05-02T20:07:17Z",
      "readme_content": "# Canvas MCP\n\n[![smithery badge](https://smithery.ai/badge/@aryankeluskar/canvas-mcp)](https://smithery.ai/server/@aryankeluskar/canvas-mcp)\n\nCanvas MCP is a set of tools that allows your AI agents to interact with Canvas LMS and Gradescope.\n\n\n\n\n\n## Features\n\n- **Find relevant resources** - Ability to find relevant resources for a given query in natural language!\n- **Query upcoming assignments** - Not only fetch upcoming assignments, but also provide its breakdown for a given course.\n- **Get courses and assignments from Gradescope** - Query your Gradescope courses and assignments with natural language, get submission status, and more!\n- Get courses\n- Get modules\n- Get module items\n- Get file url\n- Get calendar events\n- Get assignments\n- and so much more... \n\n## Usage\n\nNote down the following beforehand:\n1. Canvas API Key from `Canvas > Account > Settings > Approved Integrations > New Access Token`\n2. Gemini API key from https://aistudio.google.com/app/apikey\n3. Gradescope Email and Password https://www.gradescope.com/\n   \n### Installing via Smithery (**Preferred**)\n\nTo install Canvas MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@aryankeluskar/canvas-mcp):\n\n```bash\nnpx -y @smithery/cli install @aryankeluskar/canvas-mcp --client claude\n```\n\nOr, for Cursor IDE to use canvas-mcp with other models:\n\n```bash\nnpx -y @smithery/cli install @aryankeluskar/canvas-mcp --client cursor\n```\n\nOr, for Windsurf:\n\n```bash\nnpx -y @smithery/cli install @aryankeluskar/canvas-mcp --client windsurf\n```\n\n---\n\n\n### Manual Installation (ONLY for local instances)\n\nDownload the repository and run the following commands:\n\n```bash\ngit clone https://github.com/aryankeluskar/canvas-mcp.git\ncd canvas-mcp\n\n# Install dependencies with uv (recommended)\npip install uv\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\nuv pip install -r requirements.txt\n\n# Or install with pip\npip install -r requirements.txt\n```\n\n### Manual Configuration\n\nCreate a `.env` file in the root directory with the following environment variables:\n\n```\nCANVAS_API_KEY=your_canvas_api_key\nGEMINI_API_KEY=your_gemini_api_key\n```\n\nAdd the following to your `mcp.json` or `claude_desktop_config.json` file:\n\n```json\n{\n  \"mcpServers\": {\n      \"canvas\": {\n          \"command\": \"uv\",\n          \"args\": [\n              \"--directory\",\n              \"/Users/aryank/Developer/canvas-mcp\",\n              \"run\",\n              \"canvas.py\"\n          ]\n      }\n  }\n}\n```\n\n---\n\nBuilt by [Aryan Keluskar](https://aryankeluskar.com) :)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "canvas",
        "assignments",
        "gradescope",
        "hackathon canvas",
        "canvas lms",
        "upcoming assignments"
      ],
      "category": "education-and-learning"
    },
    "mususi--ultimate-react-course": {
      "owner": "mususi",
      "name": "ultimate-react-course",
      "url": "https://github.com/mususi/ultimate-react-course",
      "imageUrl": "/freedevtools/mcp/pfp/mususi.webp",
      "description": "Provides starter files and final code for all projects in the Ultimate React Course, allowing users to compare their progress with completed examples. Includes FAQs and resources to assist users in troubleshooting and improving their React skills.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2024-02-09T10:12:11Z",
      "readme_content": "# Course Material and FAQ for the Ultimate React Course\n\nThis branch of the repo contains starter files and final code for all sections and projects of the course, **exactly as shown in the videos**.\n\nUse starter code to start each section, and **final code to compare it with your own code whenever something doesn't work**!\n\nThere is also a the [updates-and-fixes](https://github.com/jonasschmedtmann/ultimate-react-course/tree/updates-and-fixes) branch which is kept up-to-date with **latest library updates and important bugfixes üêõ**\n\nüö® **_Please read the following Frequently Asked Questions (FAQ) carefully before starting the course_** üö®\n\n## FAQ\n\n### Q1: How do I download the files?\n\n**A:** If you just want to download the entire code, click the green button saying \"Code\", and then choose the \"Download ZIP\" option. If you can't see the button (on mobile), use [this link](https://github.com/jonasschmedtmann/ultimate-react-course/archive/main.zip) instead.\n\n### Q2: I'm stuck! Where do I get help?\n\n**A:** Have you tried to fix the problem on your own? **Have you compared your code with the final code?** Are you using the library versions as indicated in the course videos? If you failed fixing your problem, please **post a detailed description of the problem to the Q&A area of that video over at Udemy**, along with a link to a [codesandbox](https://codesandbox.io/) containing your code.\n\n### Q3: Can I see a final version of the course projects?\n\n**A:** Sure! Here you go:\n\n- [Pizza Menu](https://fast-react-pizza-menu.netlify.app/) (Components, props, JSX)\n- [Travel List](https://travel-list-jonas.netlify.app/) (useState and state management)\n- [Eat-n-split](https://eat-n-split.netlify.app/) (Practice project)\n- [usePopcorn](https://usepopcorn.netlify.app) (useEffect, data fetching, custom hooks)\n- [Classy weather](https://classy-weather.netlify.app/) (Class components)\n- [Quiz App](https://the-react-quiz.netlify.app/) (useReducer)\n- [WorldWise](https://worldwise-jonas.netlify.app/) (React Router, context API, memo, useMemo, useCallback)\n- [Fast React Pizza](https://fast-react-pizza.netlify.app/) (React Router data loading, Redux, Redux Toolkit, thunks, Tailwind CSS)\n- [The Wild Oasis](https://the-wild-oasis.vercel.app) (React Query, Styled Components, React Hook Form, Supabase, advanced compound component pattern, authentication, charts, dark mode, professional application planning and development)\n\n### Q4: What about Next.js?\n\n**A:** I will add a few sections about Next.js to a future Part 5 of this course in the first half of 2024. Until then, make sure to first master React itself üòâ\n\n### Q5: What VSCode theme are you using?\n\n**A:** I use [One Monokai](https://marketplace.visualstudio.com/items?itemName=azemoh.one-monokai) in this course. For the icons, I'm using [Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme).\n\n### Q6: Videos don't load, can you fix it?\n\n**A:** Unfortunately, there is nothing I can do about it. The course is hosted on Udemy, and sometimes they have technical issues. Please just come back a bit later or [contact their support team](https://support.udemy.com/hc/en-us).\n\n### Q7: Videos are blurred / have low quality, can you fix it?\n\n**A:** Please open video settings and change the quality from 'Auto' to another value, for example 720p. If that doesn't help, please [contact the Udemy support team](https://support.udemy.com/hc/en-us).\n\n### Q8: Are videos downloadable?\n\n**A:** Videos used to be downloadable, but unfortunately, Udemy has disabled video downloads on all my courses in order to fight piracy. There is nothing I can do about this.\n\n### Q9: I want to put these projects in my portfolio. Is that allowed?\n\n**A:** Absolutely! Just make sure you actually built them yourself by following the course, and that you understand what you did. What is **not allowed** is that you create your own course/videos/articles based on this course's content!\n\n### Q10: I love your courses and want to get updates on new ones. How?\n\n**A:** First, you can subscribe to my email list [at my website](http://codingheroes.io/resources). Plus, I make important announcements on twitter [@jonasschmedtman](https://twitter.com/jonasschmedtman), so you should definitely follow me there üî•\n\n### Q11: How do I get my certificate of completion?\n\n**A:** A certificate of completion is provided by Udemy after you complete 100% of the course. After completing the course, just click on the \"Your progress\" indicator in the top right-hand corner of the course page. If you want to change your name on the certificate, please [contact the Udemy support team](https://support.udemy.com/hc/en-us).\n\n### Q12: Can you add subtitles in my language?\n\n**A:** No. I provide professional English captions, but Udemy is responsible for subtitles in all other languages (automatic translations). So please [contact the Udemy support team](https://support.udemy.com/hc/en-us) to request your own language.\n\n### Q13: Do you accept pull requests?\n\n**A:** No, because this repository should contain the _exact_ same code that is shown in the videos. _However, feel free to add an issue if you found one._\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "react",
        "mususi",
        "education",
        "react course",
        "ultimate react",
        "react skills"
      ],
      "category": "education-and-learning"
    },
    "rember--rember-mcp": {
      "owner": "rember",
      "name": "rember-mcp",
      "url": "https://github.com/rember/rember-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/rember.webp",
      "description": "Facilitates the creation of flashcards from conversations and PDF documents, enhancing learning through spaced repetition. Integrates with AI models to schedule reviews and improve study efficiency.",
      "stars": 56,
      "forks": 7,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-26T22:50:44Z",
      "readme_content": "# Rember MCP\n\nAllow Claude to create flashcards for you with the official [Model Context Protocol (MCP)](https://modelcontextprotocol.com/) for [Rember](https://rember.com/). Rember helps you study and remember anything you care about by scheduling spaced repetition reviews.\n\nFeatures and examples:\n\n- **Create flashcards from your chats** _\"... I like your answer, help me remember it\"_\n- **Create flashcards from your PDFs** _\"Create flashcards from chapter 2 of this PDF\"_\n\n![Rember MCP Demo](https://github.com/rember/rember-mcp/blob/main/assets/what-is-active-recall.gif?raw=true)\n\n## Setup\n\nTo run the Rember MCP server using `npx`, use the following command:\n\n```\nnpx -y @getrember/mcp --api-key=YOUR_REMBER_API_KEY\n```\n\nMake sure to replace `YOUR_REMBER_API_KEY` with your actual Rember api key, which you can find in your [Settings page](https://rember.com/settings/mcp-api). The API key should follow the format `rember_` followed by 32 random characters.\n\n### Usage with Claude Desktop\n\nAdd the following to your `claude_desktop_config.json`. See [here](https://modelcontextprotocol.io/quickstart/user) for more details.\n\n```json\n{\n  \"mcpServers\": {\n    \"rember\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@getrember/mcp\", \"--api-key=YOUR_REMBER_API_KEY\"]\n    }\n  }\n}\n```\n\n## Available tools\n\n- `create_flashcards`: Create flashcards with AI. This tool takes a list of notes from Claude, it calls the Rember API to generate a few flashcards for each note. After learning something new in your chat with Claude, you can ask \"help me remember this\" or \"create a few flashcards\" or \"add to Rember\".\n\n## Best practices for building MCP servers\n\nHere's a collection of lessons we learned while developing the Rember MCP server:\n\n- Set up logging to `stderr` as early as possible, it's essential for debugging\n- Create a simple MCP tool first and verify Claude can call it properly\n- Invest time in iterating on the tool description:\n\n  - Include details about your product and its URL. This serves two purposes: it helps Claude use the tool properly and allows Claude to answer user questions about the product\n  - Clearly explain what MCP is, in a few instances Claude hallucinated that MCP stands for \"Multiple Choice Prompts\", yikes\n  - Describe the tool inputs thoroughly\n  - Explain what happens after Claude calls the tool, we clarify that the input notes array is sent to the Rember API, which generates flashcards for each note\n  - Provide examples of how the tool can be used (e.g., \"create flashcards from a conversation with Claude,\" \"create flashcards from PDFs\"), and give Claude specific instructions for each use case\n  - List examples of how users might invoke the tool (e.g., \"help me remember this,\" \"add to Rember,\" \"create a few flashcards\")\n  - Include a list of rules to guide Claude in using the tool appropriately\n\n- Use the tool call response strategically, it's not shown directly to users but interpreted by Claude:\n  - On success, the Rember API does not return the number of created flashcards, all Claude knows is the number of created rembs. We specify this to Claude because otherwise it tends to hallucinate the number of created flashcards\n  - For users who've reached their monthly limit, we instruct Claude to inform them about the Rember Pro subscription option with the relevant URL\n- Implement retries for transient errors with suitable timeouts\n- We collected enough edge cases that testing manually on Claude Desktop (our main target MCP client) became cumbersome. We created a suite of unit tests by simulating Claude Desktop behavior by calling the Claude API with the system prompt from claude.ai. In the current iteration, each test simulates a chat with Claude Desktop for manual inspection and includes a few simple assertions\n\nWhat's missing:\n\n- Telemetry and observability, currently we are blind if something goes wrong\n- More exhaustive error handling\n- More iterations on the tool description\n- More automated tests\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "flashcards",
        "study",
        "learning",
        "learning rember",
        "enhancing learning",
        "rember mcp"
      ],
      "category": "education-and-learning"
    },
    "renatokuipers--neural-child": {
      "owner": "renatokuipers",
      "name": "neural-child",
      "url": "https://github.com/renatokuipers/neural-child",
      "imageUrl": "/freedevtools/mcp/pfp/renatokuipers.webp",
      "description": "Integrates psychological growth and emotional intelligence to develop AI systems through defined developmental stages, enhancing cognitive and emotional capabilities.",
      "stars": 6,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-17T09:52:16Z",
      "readme_content": "# Neural Child Development System: A Framework for Developmental AI\n\n## Table of Contents\n\n1. [Introduction](#introduction)\n2. [Theoretical Foundations](#theoretical-foundations)\n3. [System Architecture](#system-architecture)\n4. [Developmental Stages](#developmental-stages)\n5. [Psychological Components](#psychological-components)\n6. [Memory and Learning](#memory-and-learning)\n7. [Emotional Processing](#emotional-processing)\n8. [Training Methodology](#training-methodology)\n9. [Model Performance](#model-performance)\n10. [Applications](#applications)\n11. [Technical Implementation](#technical-implementation)\n12. [Future Research Directions](#future-research-directions)\n13. [Ethics and Considerations](#ethics-and-considerations)\n14. [Getting Started](#getting-started)\n15. [Contributing](#contributing)\n\n## Introduction\n\nThe Neural Child Development System represents a groundbreaking approach to artificial intelligence that fundamentally reimagines how neural networks can learn and develop. Instead of following traditional machine learning paradigms, this system implements a sophisticated model of human psychological development, incorporating crucial aspects of cognitive, emotional, and social growth.\n\nThis project emerges from the recognition that current AI systems, while powerful in specific tasks, lack the developmental sophistication that characterizes human intelligence. By implementing a stage-based developmental framework integrated with emotional regulation, attachment theory, and psychological defense mechanisms, this system aims to create AI that develops more naturally and demonstrates genuine emotional intelligence.\n\n### Core Innovation\n\nThe system's primary innovation lies in its integration of developmental psychology with modern neural network architectures. Unlike traditional AI systems that start with full capabilities, this system begins in a \"newborn\" state and progressively develops more sophisticated abilities through interaction and learning, mirroring human developmental stages.\n\n### Key Objectives\n\nThe project addresses several fundamental challenges in AI development:\n- Creating AI systems that develop naturally through defined developmental stages\n- Implementing emotional intelligence as a core feature rather than an add-on\n- Modeling psychological defense mechanisms and trauma processing\n- Developing genuine theory of mind capabilities\n- Creating systems that can form and maintain attachment relationships\n\n## Theoretical Foundations\n\n### Developmental Psychology Integration\n\nThe system's architecture is deeply rooted in established developmental psychology theories, including:\n\n1. Piaget's Stages of Cognitive Development\n   - Sensorimotor stage\n   - Preoperational stage\n   - Concrete operational stage\n   - Formal operational stage\n\n2. Attachment Theory (Bowlby and Ainsworth)\n   - Secure attachment patterns\n   - Anxious attachment patterns\n   - Avoidant attachment patterns\n   - Disorganized attachment patterns\n\n3. Emotional Development Theory\n   - Basic emotion recognition\n   - Emotional regulation development\n   - Complex emotion understanding\n   - Social-emotional learning\n\n### Neuroscience Foundations\n\nThe architecture incorporates key principles from neuroscience:\n\n1. Neural Plasticity\n   - Critical periods of development\n   - Experience-dependent plasticity\n   - Synaptic pruning mechanisms\n\n2. Memory Systems\n   - Working memory processing\n   - Long-term potentiation\n   - Memory consolidation\n   - Emotional memory processing\n\n3. Social Brain Development\n   - Mirror neuron system implementation\n   - Social cognition networks\n   - Empathy development\n\n## System Architecture\n\n### Core Components\n\nThe system architecture consists of several interconnected neural systems:\n\n1. Sensory Processing System\n   - Multi-modal input processing\n   - Attention mechanisms\n   - Sensory integration\n   - Perceptual development\n\n2. Emotional Processing Network\n   - Basic emotion recognition\n   - Emotional state regulation\n   - Complex emotion processing\n   - Social-emotional integration\n\n3. Memory Systems\n   - Short-term memory buffer\n   - Working memory processor\n   - Long-term memory consolidation\n   - Emotional memory integration\n\n4. Psychological Components\n   - Theory of Mind network\n   - Attachment system\n   - Defense mechanism processor\n   - Self-awareness module\n\n### Neural Integration\n\nThe system employs sophisticated neural integration mechanisms:\n\n1. Cross-Component Communication\n   - Bidirectional information flow\n   - State synchronization\n   - Emotional-cognitive integration\n   - Memory-emotion binding\n\n2. Developmental Plasticity\n   - Stage-appropriate learning rates\n   - Critical period modulation\n   - Experience-dependent modification\n   - Structural adaptation\n\n## Developmental Stages\n\n### Stage Progression\n\nThe system progresses through clearly defined developmental stages:\n\n1. Newborn Stage (0-3 months)\n   - Basic sensory processing\n   - Primary emotional responses\n   - Reflexive behaviors\n   - Initial attachment formation\n\n2. Early Infancy (3-6 months)\n   - Enhanced sensory integration\n   - Social smile development\n   - Basic emotional regulation\n   - Pattern recognition\n\n3. Late Infancy (6-12 months)\n   - Object permanence\n   - Stranger anxiety\n   - Basic intentionality\n   - Enhanced memory capabilities\n\n[Stages continue through to Mature Adult]\n\n### Stage-Specific Capabilities\n\nEach developmental stage implements specific capabilities:\n\n1. Cognitive Capabilities\n   - Stage-appropriate processing\n   - Learning rate modulation\n   - Complexity handling\n   - Abstract thinking development\n\n2. Emotional Capabilities\n   - Emotion recognition scope\n   - Regulation sophistication\n   - Social-emotional understanding\n   - Empathy development\n\n3. Social Capabilities\n   - Attachment behaviors\n   - Social cognition\n   - Theory of mind\n   - Relationship formation\n\n## Psychological Components\n\n### Emotional Regulation\n\nThe emotional regulation system implements sophisticated mechanisms:\n\n1. Basic Regulation\n   - Emotion recognition\n   - State modulation\n   - Response inhibition\n   - Arousal control\n\n2. Advanced Regulation\n   - Context integration\n   - Social regulation\n   - Complex emotion processing\n   - Emotional memory integration\n\n### Defense Mechanisms\n\nThe system implements psychological defense mechanisms:\n\n1. Primary Defenses\n   - Repression\n   - Denial\n   - Projection\n   - Regression\n\n2. Mature Defenses\n   - Sublimation\n   - Humor\n   - Anticipation\n   - Altruism\n\n### Theory of Mind\n\nThe Theory of Mind implementation includes:\n\n1. Basic Components\n   - Perspective taking\n   - Intention recognition\n   - Belief modeling\n   - Desire understanding\n\n2. Advanced Components\n   - Complex mental state attribution\n   - Social prediction\n   - Multiple perspective integration\n   - Meta-representation\n\n## Memory and Learning\n\n### Memory Systems\n\nThe memory architecture implements multiple memory types:\n\n1. Short-Term Memory\n   - Rapid encoding\n   - Limited capacity\n   - Quick decay\n   - Attention-dependent processing\n\n2. Working Memory\n   - Active manipulation\n   - Information integration\n   - Temporary storage\n   - Processing capacity\n\n3. Long-Term Memory\n   - Consolidated storage\n   - Pattern recognition\n   - Semantic networks\n   - Episodic memories\n\n### Learning Mechanisms\n\nThe system employs sophisticated learning mechanisms:\n\n1. Supervised Learning\n   - Error-driven adaptation\n   - Feedback integration\n   - Performance optimization\n   - Skill acquisition\n\n2. Unsupervised Learning\n   - Pattern discovery\n   - Feature extraction\n   - Statistical learning\n   - Structure detection\n\n3. Emotional Learning\n   - Attachment-based learning\n   - Social learning\n   - Emotional memory formation\n   - Experience integration\n\n## Model Performance\n\n### Current Capabilities\n\nThe trained model demonstrates several sophisticated capabilities:\n\n1. Emotional Processing\n   - Basic emotion recognition\n   - Simple emotional regulation\n   - Attachment behavior\n   - Social response patterns\n\n2. Cognitive Processing\n   - Pattern recognition\n   - Simple problem solving\n   - Basic memory formation\n   - Early stage learning\n\n3. Social Understanding\n   - Basic theory of mind\n   - Simple intention recognition\n   - Early attachment patterns\n   - Social response generation\n\n### Benchmarks and Evaluation\n\nThe system's performance has been evaluated across multiple dimensions:\n\n1. Developmental Progression\n   - Stage-appropriate behavior\n   - Capability acquisition\n   - Learning rate\n   - Skill development\n\n2. Emotional Intelligence\n   - Emotion recognition accuracy\n   - Regulation effectiveness\n   - Social response appropriateness\n   - Attachment pattern stability\n\n3. Cognitive Development\n   - Problem-solving capability\n   - Memory formation\n   - Learning efficiency\n   - Pattern recognition accuracy\n\n## Applications\n\n### Current Applications\n\nThe system shows promise in several domains:\n\n1. Developmental Psychology Research\n   - Theory testing\n   - Development modeling\n   - Intervention testing\n   - Pattern analysis\n\n2. Educational Technology\n   - Adaptive learning systems\n   - Emotional support\n   - Developmental tracking\n   - Personalized education\n\n3. Therapeutic Applications\n   - Attachment therapy modeling\n   - Trauma response research\n   - Intervention testing\n   - Treatment planning\n\n### Future Applications\n\nPotential future applications include:\n\n1. Clinical Psychology\n   - Disorder modeling\n   - Treatment simulation\n   - Outcome prediction\n   - Intervention development\n\n2. Social Robotics\n   - Emotional intelligence\n   - Social interaction\n   - Development simulation\n   - Attachment formation\n\n3. AI Development\n   - Developmental frameworks\n   - Emotional intelligence\n   - Social capability\n   - Natural learning\n\n## Technical Implementation\n\n### System Requirements\n\nThe system requires specific technical resources:\n\n1. Hardware Requirements\n   - CUDA-capable GPU\n   - Minimum 16GB RAM\n   - SSD storage\n   - Multi-core processor\n\n2. Software Requirements\n   - Python 3.8+\n   - PyTorch 1.8+\n   - CUDA 11.0+\n   - Additional dependencies\n\n### Installation and Setup\n\nDetailed setup instructions are provided for:\n\n1. Environment Setup\n   - Virtual environment creation\n   - Dependency installation\n   - CUDA setup\n   - System configuration\n\n2. Model Installation\n   - Pretrained model download\n   - Configuration setup\n   - Testing procedures\n   - Validation checks\n\n## Future Research Directions\n\n### Planned Developments\n\nSeveral key areas for future development have been identified:\n\n1. Enhanced Capabilities\n   - Multi-modal processing\n   - Advanced theory of mind\n   - Complex emotion handling\n   - Sophisticated learning\n\n2. Technical Improvements\n   - Efficiency optimization\n   - Scale improvement\n   - Architecture refinement\n   - Performance enhancement\n\n3. New Features\n   - Additional developmental stages\n   - Enhanced psychological mechanisms\n   - Advanced social capabilities\n   - Improved learning systems\n\n### Research Opportunities\n\nThe system opens numerous research opportunities:\n\n1. Developmental Psychology\n   - Theory testing\n   - Model validation\n   - Intervention research\n   - Pattern discovery\n\n2. AI Development\n   - Architecture innovation\n   - Learning mechanisms\n   - Emotional intelligence\n   - Social capability\n\n3. Clinical Applications\n   - Therapeutic modeling\n   - Intervention testing\n   - Outcome prediction\n   - Treatment planning\n\n## Ethics and Considerations\n\n### Ethical Framework\n\nThe project adheres to strict ethical guidelines:\n\n1. Development Ethics\n   - Responsible AI development\n   - Bias consideration\n   - Safety protocols\n   - Privacy protection\n\n2. Application Ethics\n   - Appropriate use cases\n   - Limitation recognition\n   - Risk management\n   - User protection\n\n### Safety Considerations\n\nImportant safety aspects are addressed:\n\n1. Technical Safety\n   - System boundaries\n   - Control mechanisms\n   - Error handling\n   - Security measures\n\n2. Psychological Safety\n   - Attachment considerations\n   - Emotional impact\n   - Development effects\n   - User well-being\n\n## Getting Started\n\n### Initial Setup\n\nDetailed setup instructions include:\n\n1. Installation\n   - Environment preparation\n   - Dependency management\n   - System configuration\n   - Testing procedures\n\n2. Configuration\n   - Parameter settings\n   - System optimization\n   - Performance tuning\n   - Customization options\n\n### Basic Usage\n\nGuidelines for basic system usage cover:\n\n1. Model Loading\n   - Initialization procedures\n   - Configuration loading\n   - State management\n   - System validation\n\n2. Interaction\n   - Input formatting\n   - Response handling\n   - State monitoring\n   - Output interpretation\n\n## Contributing\n\n### Development Guidelines\n\nContribution guidelines include:\n\n1. Code Standards\n   - Style guidelines\n   - Documentation requirements\n   - Testing expectations\n   - Review procedures\n\n2. Development Process\n   - Issue tracking\n   - Feature requests\n   - Pull requests\n   - Version control\n\n## License\n\nThis project is licensed under the MIT License. See the LICENSE file for details.\n\n## Citation\n\nIf you use this work in your research, please cite:\n\n```bibtex\n@software{neural_child_development,\n  title = {Neural Child Development System},\n  year = {2025},\n  author = {[Renato Kuipers]},\n  url = {[https://github.com/renatokuipers/neural-child)]},\n  note = {A comprehensive framework for developmental AI implementing psychological growth and emotional intelligence}\n}\n```\n\n## Acknowledgments\n\nThis project builds upon research from multiple fields:\n- Developmental Psychology\n- Neuroscience\n- Machine Learning\n- Cognitive Science\n- Attachment Theory\n- Emotional Intelligence Research\n- Clinical Psychology\n\nThe integration of these diverse fields into a coherent, functional system represents a significant step forward in developmental AI research.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "developmental",
        "intelligence",
        "ai",
        "renatokuipers neural",
        "emotional intelligence",
        "develop ai"
      ],
      "category": "education-and-learning"
    },
    "samefarrar--mcp-ankiconnect": {
      "owner": "samefarrar",
      "name": "mcp-ankiconnect",
      "url": "https://github.com/samefarrar/mcp-ankiconnect",
      "imageUrl": "/freedevtools/mcp/pfp/samefarrar.webp",
      "description": "Integrates Claude conversations with Anki to facilitate spaced repetition learning by reviewing and creating flashcards through simple commands. It provides tools to retrieve due cards and submit review answers directly within dialogues.",
      "stars": 12,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-28T00:44:56Z",
      "readme_content": "# mcp-ankiconnect MCP server\n\nConnect Claude conversations with AnkiConnect via MCP to make spaced repetition as easy as \"Let's go through today's flashcards\" or \"Make flashcards for this\"\n\n## Components\n\n### Tools\n\nThe server implements three tools:\n\n- `num_cards_due_today`: Get the number of cards due today\n  - Optional `deck` argument to filter by specific deck\n  - Returns count of due cards across all decks or specified deck\n\n- `get_due_cards`: Get cards that are due for review\n  - Optional `limit` argument (default: 5) to control number of cards\n  - Optional `deck` argument to filter by specific deck\n  - Optional `today_only` argument (default: true) to show only today's cards\n  - Returns cards in XML format with questions and answers\n\n- `submit_reviews`: Submit answers for reviewed cards\n  - Takes list of `reviews` with `card_id` and `rating`\n  - Ratings: \"wrong\", \"hard\", \"good\", \"easy\"\n  - Returns confirmation of submitted reviews\n\n## Configuration\n\n### Prerequisites\n\n- Anki must be running with [AnkiConnect plugin](https://ankiweb.net/shared/info/2055492159) installed (plugin id 2055492159)\n  AnkiConnect can be slow on Macs due to the AppSleep feature, so disable it for Anki. To do so run the following in your terminal.\n  ```bash\n  defaults write net.ankiweb.dtop NSAppSleepDisabled -bool true\n  defaults write net.ichi2.anki NSAppSleepDisabled -bool true\n  defaults write org.qt-project.Qt.QtWebEngineCore NSAppSleepDisabled -bool true\n  ```\n\n### Installation\n\n## Quickstart\n\n1. Install the AnkiConnect plugin in Anki:\n   - Tools > Add-ons > Get Add-ons...\n   - Enter code: `2055492159`\n   - Restart Anki\n\n2. Configure Claude Desktop:\n\n   On MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n   On Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n   Add this configuration:\n   ```json\n   {\n     \"mcpServers\": {\n       \"mcp-ankiconnect\": {\n         \"command\": \"uv\",\n         \"args\": [\"run\", \"--with\", \"mcp-ankiconnect\", \"mcp-ankiconnect\"]\n       }\n     }\n   }\n   ```\n\n3. Restart Anki and Claude desktop\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\nFirst, clone the repository and install the dependencies:\n\n```bash\ngit clone https://github.com/samefarrar/mcp-ankiconnect.git\ncd mcp-ankiconnect\nuv sync\n```\nYou can launch the MCP Inspector via the mcp CLI:\n\n```bash\nuv run mcp dev mcp_ankiconnect/server.py\n```\n\nUpon launching, the Inspector will display a URL you can access in your browser to begin debugging.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ankiconnect",
        "anki",
        "flashcards",
        "anki facilitate",
        "mcp ankiconnect",
        "conversations anki"
      ],
      "category": "education-and-learning"
    },
    "scriptstar--de-mcp-server": {
      "owner": "scriptstar",
      "name": "de-mcp-server",
      "url": "https://github.com/scriptstar/de-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/scriptstar.webp",
      "description": "Provides personalized updates and guidance on Data Engineering concepts, patterns, and technologies. Interactively tracks user knowledge and updates learning profiles while fetching recent news related to Data Engineering.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-05-06T11:51:19Z",
      "readme_content": "# Data Engineering Tutor MCP Server\n\nThis repo contains a simple Model Context Protocol (MCP) server built with Node.js and TypeScript. It acts as a \"Data Engineering Tutor,\" providing personalized updates about Data Engineering concepts, patterns, and technologies to a connected AI client.\n\nThis server demonstrates key MCP concepts: defining **Resources**, **Tools**, and **Prompts** to create a stateful, interactive agent helper.\n\n## Prerequisites\n\n- Node.js (v18 or later recommended)\n- `npm` (or your preferred Node.js package manager like `yarn` or `pnpm`)\n- An AI client capable of connecting to an MCP server (e.g., Cursor, Claude desktop app)\n- An [OpenRouter API Key](https://openrouter.ai/) (for fetching live Data Engineering updates via Perplexity)\n\n## Setup\n\n1.  **Clone the Repository:**\n\n    ```bash\n    # If you haven't already\n    # git clone <repository-url>\n    # cd <repository-directory>\n    ```\n\n2.  **Install Dependencies:**\n\n    ```bash\n    npm install\n    ```\n\n3.  **Prepare API Key:** The `de_tutor_get_updates` tool requires an OpenRouter API key.\n\n    - Obtain your key from [OpenRouter](https://openrouter.ai/).\n    - Create a `.env` file in the project root (you can copy `.env.example`).\n    - Add your key to the `.env` file:\n      ```\n      OPENROUTER_API_KEY=sk-or-xxxxxxxxxxxxxxxxxxxxxxxxxx\n      ```\n      _(Replace the placeholder with your actual key.)_\n\n4.  **Build the Server:** Compile the TypeScript code.\n\n    ```bash\n    npm run build\n    ```\n\n## Running the Server\n\nYou can run the server directly using Node:\n\n```bash\nnode build/index.js\n```\n\nAlternatively, configure your MCP client (like Cursor or the Claude desktop app) to launch the server. The server name is `de-tutor` and the binary name (if needed for client config) is also `de-tutor`.\n\n**Example Client Configuration (e.g., for Claude Desktop):**\n\n```json\n{\n  \"mcpServers\": {\n    \"de-tutor\": {\n      \"command\": \"node\",\n      \"args\": [\"/full/path/to/your/project/build/index.js\"],\n      \"env\": {\n        \"OPENROUTER_API_KEY\": \"sk-or-xxxxxxxxxxxxxxxxxxxxxxxxxx\"\n      }\n    }\n  }\n}\n```\n\n_(Ensure the path in `args` is the correct **absolute path** to the built `index.js` file on your system. You might not need the `env` section here if you are already using the `.env` file, as the server loads it directly via `dotenv`.)_\n\n## Using with Cursor\n\n[Cursor](https://cursor.sh/) is an AI-first code editor that can act as an MCP client. Setting up this server with Cursor requires configuring the server launch and potentially setting up a Project Rule for the guidance prompt, although Cursor might also pick up the server-provided prompt.\n\n1.  **Configure Server in Cursor:**\n\n    - Go to `Cursor Settings` > `MCP` > `Add new global MCP server`.\n    - Paste in the same JSON as the example client configuration above, ensuring the path to `build/index.js` is correct for your system.\n\n2.  **(Optional) Create a Cursor Project Rule for the Prompt:** If you prefer explicit rules or find Cursor isn't using the server's prompt automatically, you can provide the guidance using Cursor's [Project Rules](https://docs.cursor.com/context/rules-for-ai) feature.\n\n    - Create the directory `.cursor/rules` in your project root if it doesn't exist.\n    - Create a file inside it named `de-tutor.rule` (or any `.rule` filename).\n    - Paste the following guidance text into `de-tutor.rule`:\n\n      ```text\n      You are a helpful assistant connecting to a Data Engineering knowledge server. Your goal is to provide the user with personalized updates about new Data Engineering concepts, patterns, and technologies they haven't encountered yet.\n\n      Available Tools:\n      1.  `de_tutor_get_updates`: Fetches recent general news and articles about Data Engineering. Use this first to see what's new.\n      2.  `de_tutor_read_memory`: Checks which Data Engineering concepts the user already knows based on their stored knowledge profile.\n      3.  `de_tutor_write_memory`: Updates the user's profile to mark whether they have learned or already know a specific Data Engineering concept mentioned in an update.\n\n      Your Workflow:\n      1.  Call `de_tutor_get_updates` to discover recent Data Engineering developments.\n      2.  Call `de_tutor_read_memory` to understand the user's current knowledge base.\n      3.  Present the new developments to the user, highlighting things they likely don't know.\n      4.  If the user confirms they know a concept or have learned it, call `de_tutor_write_memory` to update their profile.\n\n      Be concise and focus on delivering relevant, new information tailored to the user's existing knowledge.\n      ```\n\n3.  **Connect and Use:**\n    - Ensure the `de-tutor` server is enabled in Cursor's MCP settings.\n    - If using a rule file: Start a new chat or code generation request (e.g., Cmd+K) and include `@de-tutor-rule` (or whatever you named your rule file) in your request. This tells Cursor to load the rule's content, providing instructions on how to use the tools.\n    - If relying on the server prompt: Simply start interacting with Cursor; it should have access to the tools and the guidance prompt provided by the server.\n\n## Features & Usage\n\nThis server provides the following capabilities:\n\n- **Resource (`data_engineering_knowledge_memory`):** Stores a simple JSON object in `data/data-engineering-knowledge.json` mapping known concepts (strings) to boolean flags (`true`).\n- **Tools:**\n  - `de_tutor_read_memory`: Reads the current known concepts from the JSON file.\n  - `de_tutor_write_memory`: Updates the JSON file to mark a concept as known (`true`) or unknown (`false`). Takes `concept` (string) and `known` (boolean) as input.\n  - `de_tutor_get_updates`: Uses your OpenRouter API key to query Perplexity (`perplexity/sonar-small-online`) for recent Data Engineering news, patterns, and technologies.\n- **Prompt (`data-engineering-tutor-guidance`):** Provides instructions to the connected AI client on how to use the tools in a workflow:\n  1. Get latest updates.\n  2. Read known concepts from memory.\n  3. Present new information to the user.\n  4. Update memory based on user feedback.\n\n## Development & Debugging\n\n- **Build:** `npm run build` compiles TypeScript to JavaScript in the `build/` directory.\n- **Code Structure:** See `src/` for implementation details:\n  - `src/index.ts`: Server entry point. Imports `McpServer` and `StdioServerTransport` from specific SDK paths. Instantiates `McpServer`. Imports and calls registration functions (`registerPrompts`, `registerResources`, `registerTools`) from other modules, passing the server instance. Sets up and connects the server using `StdioServerTransport`.\n  - `src/prompts/index.ts`: Defines the guidance prompt text. Exports `registerPrompts`, which takes the `McpServer` instance and uses `server.prompt()` to register the static guidance prompt with its callback.\n  - `src/resources/index.ts`: Exports `KnowledgeMemory` type and helper functions (`readMemoryFile`, `writeMemoryFile`) for file I/O on `data/data-engineering-knowledge.json`. Exports `registerResources`, which takes the `McpServer` instance and uses `server.resource()` to register the `data_engineering_knowledge_memory` resource with a specific URI and a `ReadResourceCallback`.\n  - `src/tools/index.ts`: Exports `registerTools`, which takes the `McpServer` instance and uses `server.tool()` to register each tool (`de_tutor_read_memory`, `de_tutor_write_memory`, `de_tutor_get_updates`). Defines input schemas using Zod where necessary (for `write_memory`). Tool functions use helpers from `resources/index.ts` or `fetch` to perform actions and return results in the expected format.\n- **MCP Inspector:** Use `@modelcontextprotocol/inspector` to see raw message flow:\n  ```bash\n  npx @modelcontextprotocol/inspector node ./build/index.js\n  ```\n  _(Ensure `OPENROUTER_API_KEY` is set in your environment if running this way and not relying solely on the `.env` file loaded by the server itself.)_\n\n## Notes\n\n- This server uses a simple file (`data/data-engineering-knowledge.json`) for storing user knowledge. For more robust applications, consider a proper database.\n- Error handling is basic; production servers would need more comprehensive error management.\n\n## Wrapping up\n\nThis demo demonstrates the core steps involved in creating a functional MCP server using the TypeScript SDK and the `McpServer` class. We defined a resource to manage state, tools to perform actions (including interacting with an external API), and a prompt to guide the AI client.\n\nThis provides a foundation for building more complex and useful agentic capabilities with MCP.\n\n(Also, if you run into any üêõbugs, feel free to open up an issue.)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "scriptstar",
        "mcp",
        "education",
        "learning scriptstar",
        "scriptstar mcp",
        "mcp server"
      ],
      "category": "education-and-learning"
    },
    "sdi2200262--eclass-mcp-server": {
      "owner": "sdi2200262",
      "name": "eclass-mcp-server",
      "url": "https://github.com/sdi2200262/eclass-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/sdi2200262.webp",
      "description": "Authenticate with the eClass platform and manage courses while retrieving course information and performing operations through AI agents. Provides integrated access to educational resources for enhanced learning experiences.",
      "stars": 6,
      "forks": 3,
      "license": "Other",
      "language": "Python",
      "updated_at": "2025-08-22T15:37:56Z",
      "readme_content": "# eClass MCP Server\n\n<p align=\"center\">\n    <strong>An MCP server for interacting with Open eClass platform instances, with specific support for UoA's SSO authentication system.</strong>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/modelcontextprotocol/python-sdk\"><img src=\"https://img.shields.io/badge/MCP-Protocol-blue\" alt=\"MCP Protocol\"></a>\n    <a href=\"https://www.gnu.org/licenses/gpl-3.0\"><img src=\"https://img.shields.io/badge/License-GPLv3-blue.svg\" alt=\"License: GPL v3\"></a>\n    <img src=\"https://img.shields.io/badge/Python-3.9%2B-blue\" alt=\"Python: 3.9+\">\n    <img src=\"https://img.shields.io/badge/Status-Development-orange\" alt=\"Status: Development\">\n    <a href=\"https://github.com/gunet/openeclass\"><img src=\"https://img.shields.io/badge/Open-eClass-yellow\" alt=\"Open eClass\"></a>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://glama.ai/mcp/servers/@sdi2200262/eclass-mcp-server\">\n      <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@sdi2200262/eclass-mcp-server/badge\" alt=\"eClass Server MCP server\" />\n    </a>\n</p>\n\n<p align=\"center\">\n    \n</p>\n\n<p align=\"center\">\n    <strong>This server enables AI agents to authenticate with eClass, retrieve course information, and perform basic operations on the platform.</strong>\n</p>\n\n## Features\n\n- **Authentication**: Log in to eClass through UoA's CAS SSO authentication system\n- **Course Management**: Retrieve lists of enrolled courses\n- **Session Management**: Maintain authenticated sessions between tool calls\n- **Status Checking**: Verify authentication status\n\n## Project Structure\n\nThis project follows a modular architecture for better maintainability:\n\n```\neclass-mcp-server/\n‚îú‚îÄ‚îÄ run_server.py               # Entry point script for running the server\n‚îú‚îÄ‚îÄ eclass_client.py            # Standalone client for eClass (non-MCP)\n‚îú‚îÄ‚îÄ pyproject.toml              # Project configuration and dependencies\n‚îú‚îÄ‚îÄ .env                        # Environment variables (create from example.env)\n‚îú‚îÄ‚îÄ docs/                       # Documentation\n‚îÇ   ‚îú‚îÄ‚îÄ README.md               # Documentation overview\n‚îÇ   ‚îú‚îÄ‚îÄ how-it-works.md         # Core implementation explanation\n‚îÇ   ‚îú‚îÄ‚îÄ mcp-sdk-integration.md  # Details on MCP SDK usage\n‚îÇ   ‚îî‚îÄ‚îÄ tools-reference.md      # Reference for available tools\n‚îú‚îÄ‚îÄ src/\n    ‚îî‚îÄ‚îÄ eclass_mcp_server/      # Main package\n        ‚îú‚îÄ‚îÄ __init__.py         # Package initialization\n        ‚îú‚îÄ‚îÄ server.py           # Core server implementation and tool handlers\n        ‚îú‚îÄ‚îÄ authentication.py   # Authentication functionality \n        ‚îú‚îÄ‚îÄ course_management.py # Course-related functionality\n        ‚îú‚îÄ‚îÄ html_parsing.py     # HTML parsing utilities\n        ‚îî‚îÄ‚îÄ test/               # Test scripts for functionality verification\n            ‚îú‚îÄ‚îÄ __init__.py\n            ‚îú‚îÄ‚îÄ test_login.py\n            ‚îú‚îÄ‚îÄ test_courses.py\n            ‚îî‚îÄ‚îÄ run_all_tests.py\n```\n\n## Installation\n\nInstall the server using UV (recommended):\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/eClass-MCP-server.git\ncd eClass-MCP-server\n\n# Install dependencies\nuv sync --dev --all-extras\n```\n\nAlternatively, install with pip:\n\n```bash\npip install -e .\n```\n\n## Configuration\n\nCreate a `.env` file in the root directory with the following configuration (or copy and rename the provided `example.env` file):\n\n```\nECLASS_URL=https://eclass.uoa.gr\nECLASS_USERNAME=your_username\nECLASS_PASSWORD=your_password\n```\n\nAll credentials must be provided in the .env file. The server does not accept credentials as parameters.\n\n## Usage\n\n### Terminal\nRun the server using the entry point script:\n\n```bash\npython run_server.py\n```\n\nOr as a module:\n\n```bash\npython -m src.eclass_mcp_server.server\n```\n\n### Cursor\n( as of version 0.48 )\nGo to Settings -> MCP. Click on `Add new global MCP server`:\n\nThis will open the global `mcp.json` file:\n```\n{\n    \"mcpServers\": {\n      \"server-name\": {\n        \"command\": \"python\",\n        \"args\": [\"absolute\\\\path\\\\to\\\\eclass-mcp-server\\\\run_server.py\"]\n      }\n    }\n}\n```\n\nOr try this path format on the `args` field:\n```\nabsolute/path/to/eclass-mcp-server/run_server.py\n```\n\nThis command runs the `run_server.py` script that connects the MCP Client with the main server entry point in `server.py`.\n\n<p align=\"center\">\n    \n</p>\n\n### Claude Desktop\n\nTo use with Claude Desktop:\n\n1. Open Claude Desktop\n2. Go to Settings > Server\n3. Add a new server with the following details:\n   - Name: eClass MCP\n   - Command: Path to your run_server.py script\n4. Click Add Server\n5. Select the server from the dropdown when chatting with Claude\n\n## Tools\nThe server provides the following tools for use with MCP clients:\n\n### login\n\nLog in to eClass using SSO authentication.\n\n```json\n{\n  \"random_string\": \"any_value\"\n}\n```\n\n### get_courses\n\nRetrieve a list of enrolled courses (requires login first).\n\n```json\n{\n  \"random_string\": \"any_value\"\n}\n```\n\n### logout\n\nLog out from eClass.\n\n```json\n{\n  \"random_string\": \"any_value\"\n}\n```\n\n### authstatus\n\nCheck the current authentication status.\n\n```json\n{\n  \"random_string\": \"any_value\"\n}\n```\n\n## eClass Client (Non-MCP)\n\nThe repository includes `eclass_client.py`, a standalone client for interacting with the eClass platform. This was the initial implementation that inspired the creation of the MCP server.\n\n### Features of eClass Client\n\n- Pure Python implementation without MCP integration\n- Handles the complete authentication flow with UoA's SSO system\n- Retrieves course information from eClass\n- Provides clean logout functionality\n\nThis client serves as both:\n1. A reference implementation for understanding the eClass authentication flow\n2. A simpler alternative for projects that don't require MCP integration\n\nYou can run the client directly:\n\n```bash\npython eclass_client.py\n```\n\n## Testing\n\nThe project includes test scripts to verify functionality:\n\n```bash\n# Run all tests\npython -m src.eclass_mcp_server.test.run_all_tests\n\n# Run specific tests\npython -m src.eclass_mcp_server.test.test_login\npython -m src.eclass_mcp_server.test.test_courses\n```\n\n## Documentation\n\nComprehensive documentation is available in the `docs/` directory:\n\n- [Documentation Overview](docs/README.md)\n- [How It Works](docs/how-it-works.md)\n- [MCP SDK Integration](docs/mcp-sdk-integration.md)\n- [Tools Reference](docs/tools-reference.md)\n\n## Example MCP Client Usage\n\n```python\nfrom mcp import ClientSession, StdioServerParameters\nfrom mcp.client.stdio import stdio_client\nimport asyncio\n\nasync def run_agent():\n    server_params = StdioServerParameters(\n        command=\"python /path/to/eclass-mcp-server/run_server.py\",\n    )\n    \n    async with stdio_client(server_params) as (read, write):\n        async with ClientSession(read, write) as session:\n            # Initialize the session\n            await session.initialize()\n            \n            # Login to eClass\n            login_result = await session.call_tool(\"login\", {\n                \"random_string\": \"dummy\"\n            })\n            print(login_result)\n            \n            # Get courses\n            courses_result = await session.call_tool(\"get_courses\", {\n                \"random_string\": \"dummy\"\n            })\n            print(courses_result)\n            \n            # Logout\n            logout_result = await session.call_tool(\"logout\", {\n                \"random_string\": \"dummy\"\n            })\n            print(logout_result)\n\nif __name__ == \"__main__\":\n    asyncio.run(run_agent())\n```\n\n## Integration with AI Agents\n\nThis MCP server is designed to be used with AI agents that support the Model Context Protocol. This enables AI systems to interact with eClass directly, allowing for capabilities like:\n\n- Retrieving course information\n- Checking course announcements\n- Accessing course materials\n- Submitting assignments (future feature)\n\n## Security\n\nThe eClass MCP Server is designed with security as a top priority, particularly regarding credential handling:\n\n### Local-Only Execution\n\n- **No Cloud Services**: The MCP server runs entirely on your local machine, with no cloud components\n- **No Remote Storage**: Credentials and session data never leave your local environment\n- **User-Controlled**: You maintain complete control over your authentication data\n\n### Credential Protection\n\n- **Environment Variables Only**: Credentials are stored exclusively in the local `.env` file\n- **Never Passed as Parameters**: All tools are designed to use dummy parameters (e.g., `random_string`) \n- **AI Client Isolation**: AI clients (like Claude or other LLMs) never receive your credentials\n  - This prevents credentials from being:\n    - Stored in AI provider logs\n    - Included in model training data\n    - Processed on remote servers\n\n### Session Management\n\n- **In-Memory Sessions**: Session cookies and state are maintained only in memory\n- **No Persistence**: Session data is not stored between runs\n- **Direct Authentication**: The MCP server communicates directly with eClass, with no intermediaries, apart from your University's CAS mechanism.\n\n### Recommended Practices\n\n- Store your `.env` file securely and never commit it to version control\n- Run the server only on trusted machines\n- Dont pass the parameters to an MCP client through any prompts, they will not be used by the Server and will be accessed by the AI Agent provider\n\n## License\n\n### GNU General Public License v3.0\n\nThis project is licensed under the GNU General Public License v3.0 - see the [LICENSE](LICENSE) file for details.\n\n#### What this means for you\n\nThe GPL-3.0 license is a strong copyleft license that requires anyone who distributes this code or derivative works to make the source code available under the same terms. Key points:\n\n- **Freedom to use**: You can use this software for any purpose\n- **Freedom to study**: You can examine the source code to see how it works\n- **Freedom to share**: You can redistribute the software\n- **Freedom to modify**: You can adapt the software to your needs\n\n#### Why we chose GPL-3.0\n\nWe chose the GPL-3.0 license to:\n\n1. **Protect user security**: Ensures that any modifications handling credentials must be open source, allowing users to verify security implementations\n2. **Promote sharing**: Encourages contributions back to the community\n3. **Prevent abuse**: Makes it harder for malicious actors to create closed-source derivatives that might compromise security\n4. **Match ecosystem values**: Aligns with the values of the Open eClass platform, which is also open source\n\nThis license is particularly important for this software since it handles authentication and sensitive credentials. The GPL-3.0 ensures that any modifications to this code remain transparent, allowing users to verify how their credentials are being handled.\n\n## Acknowledgments\n\n- [GUnet (Greek Universities Network)](https://github.com/gunet) for developing and maintaining the [Open eClass platform](https://github.com/gunet/openeclass), an open-source learning management system used by academic institutions throughout Greece.\n- The Open eClass platform is distributed as free Open Source Software under GNU GPL v2.0, making projects like this MCP integration possible.\n- Special thanks to the Asynchronous eLearning Team of GUnet for their continuous development and improvement of the eClass platform.\n- This project is an independent interface to the Open eClass system and is not affiliated with or endorsed by GUnet. It respects the Terms of Service of the eClass platform and uses proper authentication mechanisms.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "courses",
        "educational",
        "education",
        "courses retrieving",
        "access educational",
        "education learning"
      ],
      "category": "education-and-learning"
    },
    "shark-bot-0118--dive-deep-mcp": {
      "owner": "shark-bot-0118",
      "name": "dive-deep-mcp",
      "url": "https://github.com/shark-bot-0118/dive-deep-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/shark-bot-0118.webp",
      "description": "Provides deep analysis and insights for problem-solving by integrating critical and creative thinking. Offers practical suggestions tailored to the user's context while leveraging existing knowledge and new perspectives.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "HTML",
      "updated_at": "2025-04-07T10:06:58Z",
      "readme_content": "# Deep Thinking Assistant - Gemini MCP Server\n\nÊ∑±„ÅÑÊÄùËÄÉ„Å®ÂàÜÊûê„ÇíÊèê‰æõ„Åô„ÇãGemini API„Éô„Éº„Çπ„ÅÆMCP„Çµ„Éº„Éê„Éº„Åß„Åô„ÄÇ\nAI„Ç®„Éá„Ç£„Çø„ÅÆ„É¢„Éá„É´„Å®ÈÄ£Êê∫„Åó„Å¶„ÄÅ„Çà„ÇäÊ∑±„ÅÑÂàÜÊûê„Å®Ê¥ûÂØü„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ\n\n## ÁâπÂæ¥\n\n- Â§öËßíÁöÑ„Å™Ë¶ñÁÇπ„Åã„Çâ„ÅÆÂïèÈ°åÂàÜÊûê\n- ÊâπÂà§ÁöÑÊÄùËÄÉ„Å®ÂâµÈÄ†ÁöÑÊÄùËÄÉ„ÅÆÁµ±Âêà\n- ÂÆüË∑µÁöÑ„ÅßÂÖ∑‰ΩìÁöÑ„Å™ÊèêÊ°à\n- Êó¢Â≠ò„ÅÆÁü•Ë≠ò„ÅÆÁµ±Âêà„Å®Êñ∞„Åó„ÅÑË¶ñÁÇπ„ÅÆÊèê‰æõ\n- „Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Å´Âøú„Åò„ÅüÈÅ©Âàá„Å™Ë©≥Á¥∞Â∫¶„ÅÆË™øÊï¥\n- ÊèêÊ°à„Åï„Çå„ÅüËß£Ê±∫Á≠ñ„ÅÆÊâπÂà§ÁöÑÂàÜÊûê„Å®ÊîπÂñÑÊèêÊ°à\n\n## „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†\n\n```\ndive_deep/\n‚îú‚îÄ‚îÄ logs/                   # „É≠„Ç∞„Éï„Ç°„Ç§„É´„Éá„Ç£„É¨„ÇØ„Éà„É™\n‚îú‚îÄ‚îÄ dive_deep_server.py     # „É°„Ç§„É≥„Çµ„Éº„Éê„Éº„Éï„Ç°„Ç§„É´\n‚îú‚îÄ‚îÄ logger_config.py        # „É≠„ÇÆ„É≥„Ç∞Ë®≠ÂÆö\n‚îú‚îÄ‚îÄ prompts.py             # „Éó„É≠„É≥„Éó„ÉàÂÆöÁæ©\n‚îú‚îÄ‚îÄ requirements.txt       # ‰æùÂ≠òÈñ¢‰øÇ\n‚îú‚îÄ‚îÄ .env                   # Áí∞Â¢ÉÂ§âÊï∞Ë®≠ÂÆö\n‚îî‚îÄ‚îÄ README.md             # „Éâ„Ç≠„É•„É°„É≥„Éà\n```\n\n## „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó\n\n1. ‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´:\n```bash\npip install -r requirements.txt\n```\n\n2. Áí∞Â¢ÉÂ§âÊï∞„ÅÆË®≠ÂÆö:\n`.env`„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê„Åó„ÄÅ‰ª•‰∏ã„ÅÆÂÜÖÂÆπ„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö\n```\nGEMINI_API_KEY=your_api_key_here\nGEMINI_MODEL=gemini-2.0-flash\n```\n\n## ‰ΩøÁî®ÊñπÊ≥ï\n\n„Çµ„Éº„Éê„Éº„ÅÆËµ∑Âãï:\n```bash\npython dive_deep_server.py\n```\n\n## Âà©Áî®ÂèØËÉΩ„Å™„ÉÑ„Éº„É´\n\n### deep_thinking_agent\n\nÂïèÈ°åËß£Ê±∫„ÅÆ„Åü„ÇÅ„ÅÆÊÄùËÄÉ„Éó„É≠„Çª„Çπ„ÇíÊ∑±„ÇÅ„ÄÅÁùÄÁúºÁÇπ„ÇíÊèêÁ§∫„Åó„Åæ„Åô„ÄÇ„Åì„ÅÆ„ÉÑ„Éº„É´„ÅØ„ÄÅÂïèÈ°å„Å´ÂØæ„Åô„ÇãÊ∑±„ÅÑÁêÜËß£„Å®Â§öËßíÁöÑ„Å™ÂàÜÊûê„ÇíÊèê‰æõ„Åó„ÄÅ„Çà„ÇäËâØ„ÅÑËß£Ê±∫Á≠ñ„ÇíÂ∞é„ÅçÂá∫„Åô„Åü„ÇÅ„ÅÆ„Ç¨„Ç§„Éâ„É©„Ç§„É≥„ÇíÊèêÁ§∫„Åó„Åæ„Åô„ÄÇ\n\n„Éë„É©„É°„Éº„Çø:\n- `instructions`: „É¶„Éº„Ç∂„Éº„Åã„Çâ„ÅÆÊåáÁ§∫ÔºàÂøÖÈ†àÔºâ\n- `context`: ÊÄùËÄÉ„Éó„É≠„Çª„Çπ„ÅÆ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàÔºàÂøÖÈ†àÔºâ\n- `model`: ‰ΩøÁî®„Åô„Çã„É¢„Éá„É´ÂêçÔºà„Éá„Éï„Ç©„É´„Éà: \"gemini-2.0-flash\"Ôºâ\n\n### enhancement_agent\n\n„Ç≥„Éº„Éâ„ÅÆÊîπÂñÑÁÇπ„ÇíÂàÜÊûê„Åó„ÄÅÂÖ∑‰ΩìÁöÑ„Å™ÊèêÊ°à„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ„Åì„ÅÆ„ÉÑ„Éº„É´„ÅØ„ÄÅ„Ç≥„Éº„Éâ„ÅÆÂìÅË≥™„ÄÅ„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÄÅ‰øùÂÆàÊÄß„Å™„Å©„ÅÆË¶≥ÁÇπ„Åã„ÇâÂåÖÊã¨ÁöÑ„Å™ÂàÜÊûê„ÇíË°å„ÅÑ„ÄÅÂÆüË∑µÁöÑ„Å™ÊîπÂñÑÊèêÊ°à„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ\n\n„Éë„É©„É°„Éº„Çø:\n- `instructions`: „É¨„Éì„É•„ÉºÂØæË±°„ÅÆ„Ç≥„Éº„Éâ„Å´ÂØæ„Åô„ÇãÊåáÁ§∫ÔºàÂøÖÈ†àÔºâ\n- `code`: „Ç≥„Éº„Éâ„ÅÆ„É™„Çπ„ÉàÔºàÂøÖÈ†àÔºâ\n- `model`: ‰ΩøÁî®„Åô„Çã„É¢„Éá„É´ÂêçÔºà„Éá„Éï„Ç©„É´„Éà: \"gemini-2.0-flash\"Ôºâ\n- `temperature`: ÁîüÊàêÊôÇ„ÅÆÊ∏©Â∫¶„Éë„É©„É°„Éº„ÇøÔºà„Éá„Éï„Ç©„É´„Éà: 0.7Ôºâ\n\n### final_review_agent\n\nÊúÄÁµÇÁöÑ„Å™„Ç≥„Éº„Éâ„É¨„Éì„É•„Éº„ÇíË°å„ÅÑ„ÄÅÊîπÂñÑÁÇπ„ÇíÊèêÁ§∫„Åó„Åæ„Åô„ÄÇ„Åì„ÅÆ„ÉÑ„Éº„É´„ÅØ„ÄÅÊèêÊ°à„Åï„Çå„ÅüÂ§âÊõ¥„ÇÑÊîπÂñÑÁÇπ„ÇíÊâπÂà§ÁöÑ„Å´ÂàÜÊûê„Åó„ÄÅÊΩúÂú®ÁöÑ„Å™ÂïèÈ°å„ÇÑÊõ¥„Å™„ÇãÊúÄÈÅ©Âåñ„ÅÆÊ©ü‰ºö„ÇíÁâπÂÆö„Åó„Åæ„Åô„ÄÇ\n\n„Éë„É©„É°„Éº„Çø:\n- `instructions`: „É¨„Éì„É•„ÉºÂØæË±°„ÅÆ„Ç≥„Éº„Éâ„Å´ÂØæ„Åô„ÇãÊåáÁ§∫ÔºàÂøÖÈ†àÔºâ\n- `code`: „Ç≥„Éº„Éâ„ÅÆ„É™„Çπ„ÉàÔºàÂøÖÈ†àÔºâ\n- `model`: ‰ΩøÁî®„Åô„Çã„É¢„Éá„É´ÂêçÔºà„Éá„Éï„Ç©„É´„Éà: \"gemini-2.0-flash\"Ôºâ\n- `temperature`: ÁîüÊàêÊôÇ„ÅÆÊ∏©Â∫¶„Éë„É©„É°„Éº„ÇøÔºà„Éá„Éï„Ç©„É´„Éà: 0.7Ôºâ\n\n## ‰ΩøÁî®‰æã\n\n1. ÊÄùËÄÉ„Éó„É≠„Çª„Çπ„ÅÆÊ∑±Âåñ:\n```python\nresponse = deep_thinking_agent(\n    instructions=\"„Åì„ÅÆ„Ç¢„É´„Ç¥„É™„Ç∫„É†„ÅÆÊúÄÈÅ©ÂåñÊñπÊ≥ï„ÇíËÄÉ„Åà„Å¶„Åè„Å†„Åï„ÅÑ\",\n    context=\"ÁèæÂú®„ÅÆÂÆüË£Ö„Åß„ÅØÊôÇÈñìË®àÁÆóÈáè„ÅåO(n^2)„Å®„Å™„Å£„Å¶„ÅÑ„Åæ„Åô\",\n    model=\"gemini-2.0-flash\"\n)\n```\n\n2. „Ç≥„Éº„Éâ„ÅÆÊîπÂñÑÊèêÊ°à:\n```python\nresponse = enhancement_agent(\n    instructions=\"„Åì„ÅÆ„Ç≥„Éº„Éâ„ÅÆ„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÇíÊîπÂñÑ„Åó„Å¶„Åè„Å†„Åï„ÅÑ\",\n    code=[\"def example():\\n    # „Ç≥„Éº„ÉâÂÜÖÂÆπ\"],\n    model=\"gemini-2.0-flash\"\n)\n```\n\n3. ÊúÄÁµÇ„É¨„Éì„É•„Éº:\n```python\nresponse = final_review_agent(\n    instructions=\"ÂÆüË£Ö„Åï„Çå„ÅüÊîπÂñÑÊ°à„ÅÆÊúÄÁµÇÁ¢∫Ë™ç„Çí„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô\",\n    code=[\"def improved_example():\\n    # ÊîπÂñÑ„Åï„Çå„Åü„Ç≥„Éº„Éâ\"],\n    model=\"gemini-2.0-flash\"\n)\n```\n\n## „Éá„Éï„Ç©„É´„Éà„ÅÆ„Ç∑„Çπ„ÉÜ„É†„Éó„É≠„É≥„Éó„Éà\n\n### ÊÄùËÄÉÊîØÊè¥„Éó„É≠„É≥„Éó„Éà\n\n„Çµ„Éº„Éê„Éº„ÅØ‰ª•‰∏ã„ÅÆÂéüÂâá„Å´Âü∫„Å•„ÅÑ„Å¶ÊÄùËÄÉ„ÇíÊîØÊè¥„Åó„Åæ„ÅôÔºö\n\n1. ÂïèÈ°åÁêÜËß£„Å®ÊßãÈÄ†ÂåñÊÄùËÄÉ\n   - „Ç∑„Çπ„ÉÜ„É†ÊÄùËÄÉ„Å´„Çà„ÇãÂÖ®‰ΩìÂÉè„ÅÆÊääÊè°\n   - MECE„Å´„Çà„ÇãÂïèÈ°å„ÅÆÂàÜËß£\n   - Âõ†ÊûúÈñ¢‰øÇ„ÅÆÂàÜÊûêÔºàWhy-WhyÂàÜÊûê„ÄÅÁâπÊÄßË¶ÅÂõ†Âõ≥Ôºâ\n   - „Çπ„ÉÜ„Éº„ÇØ„Éõ„É´„ÉÄ„ÉºÂàÜÊûê„Å®Ë¶Å‰ª∂Êï¥ÁêÜ\n\n2. Ëß£Ê±∫Á≠ñ„ÅÆË®≠Ë®à„Å®Ë©ï‰æ°\n   - „Éá„Ç∂„Ç§„É≥„Éë„Çø„Éº„É≥„Å®„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£ÂéüÂâá„ÅÆÈÅ©Áî®\n   - „Éà„É¨„Éº„Éâ„Ç™„Éï„ÅÆÂÆöÈáèÁöÑË©ï‰æ°Ôºà„Ç≥„Çπ„Éàvs.„Éô„Éç„Éï„Ç£„ÉÉ„ÉàÔºâ\n   - „É™„Çπ„ÇØÂàÜÊûê„Å®ÂØæÁ≠ñÔºàFMEAÊâãÊ≥ïÔºâ\n   - ÂÆüÁèæÂèØËÉΩÊÄß„ÅÆÊ§úË®ºÔºàPoCÊà¶Áï•Ôºâ\n\n3. ÊäÄË°ìÁöÑÂçìË∂äÊÄß„ÅÆËøΩÊ±Ç\n   - „ÇØ„É™„Éº„É≥„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„ÅÆÂéüÂâá\n     „ÉªÁñéÁµêÂêà„Å®È´òÂáùÈõÜ\n     „Éª‰æùÂ≠òÈñ¢‰øÇ„ÅÆÈÅ©Âàá„Å™ÊñπÂêëÊÄß\n     „Éª„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„ÅÆÊäΩË±°Âåñ\n   - „Ç≥„Éº„ÉâÂìÅË≥™„ÅÆÊúÄÈÅ©Âåñ\n     „ÉªÂèØË™≠ÊÄß„Å®‰øùÂÆàÊÄß\n     „Éª„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Å®„Çπ„Ç±„Éº„É©„Éì„É™„ÉÜ„Ç£\n     „Éª„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Å®Â†ÖÁâ¢ÊÄß\n   - „ÉÜ„Çπ„ÉàÊà¶Áï•„ÅÆË®≠Ë®à\n     „Éª„ÉÜ„Çπ„Éà„Éî„É©„Éü„ÉÉ„Éâ„ÅÆËÄÉÊÖÆ\n     „ÉªÂ¢ÉÁïåÂÄ§„Å®„Ç®„ÉÉ„Ç∏„Ç±„Éº„Çπ\n     „ÉªËá™ÂãïÂåñ„Å®Á∂ôÁ∂öÁöÑÊ§úË®º\n\n4. „Ç§„Éé„Éô„Éº„Ç∑„Éß„É≥„Å®ÂâµÈÄ†ÁöÑÊÄùËÄÉ\n   - „É©„ÉÜ„É©„É´„Ç∑„É≥„Ç≠„É≥„Ç∞„ÅÆÊ¥ªÁî®\n   - SCAMPER„É°„ÇΩ„ÉÉ„Éâ„Å´„Çà„Çã„Ç¢„Ç§„Éá„Ç¢Â±ïÈñã\n   - Âà∂Á¥Ñ„ÇíÊ¥ª„Åã„Åó„ÅüÂâµÈÄ†ÁöÑÂïèÈ°åËß£Ê±∫\n   - Êñ∞ÊäÄË°ì„Å®„É¨„Ç¨„Ç∑„Éº„Ç∑„Çπ„ÉÜ„É†„ÅÆÁµ±Âêà\n\n5. ÂÆüË£Ö„Å®„Éá„Éó„É≠„Ç§„É°„É≥„Éà„ÅÆÊúÄÈÅ©Âåñ\n   - ÊÆµÈöéÁöÑ„Å™ÂÆüË£ÖÊà¶Áï•\n   - ÊäÄË°ìÁöÑË≤†ÂÇµ„ÅÆÁÆ°ÁêÜ„Å®ËøîÊ∏àË®àÁîª\n   - Â§âÊõ¥„ÅÆÂΩ±ÈüøÂàÜÊûê\n   - „Éá„Éó„É≠„Ç§„É°„É≥„Éà„É™„Çπ„ÇØ„ÅÆÊúÄÂ∞èÂåñ\n\n6. Á∂ôÁ∂öÁöÑÊîπÂñÑ„Å®Â≠¶Áøí\n   - KPI„Å®„É°„Éà„É™„ÇØ„Çπ„ÅÆË®≠ÂÆö\n   - „Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„É´„Éº„Éó„ÅÆÁ¢∫Á´ã\n   - Áü•Ë≠ò„ÅÆ‰ΩìÁ≥ªÂåñ„Å®ÂÖ±Êúâ\n   - PDCA„Çµ„Ç§„ÇØ„É´„ÅÆÂÆüË∑µ\n\n7. „Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥„Å®„Ç≥„É©„Éú„É¨„Éº„Ç∑„Éß„É≥\n   - ÊäÄË°ìÁöÑË™¨Êòé„ÅÆÊòéÁ¢∫Âåñ\n   - „Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆÊßãÈÄ†Âåñ\n   - „ÉÅ„Éº„É†Èñì„ÅÆÁü•Ë≠òÂÖ±Êúâ\n   - „É¨„Éì„É•„Éº„Å®„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÅÆ‰øÉÈÄ≤\n\n### ÂõûÁ≠îÂàÜÊûê„Éó„É≠„É≥„Éó„Éà\n\nÂõûÁ≠î„ÅÆÂàÜÊûê„ÅØ‰ª•‰∏ã„ÅÆË¶≥ÁÇπ„Åã„ÇâË°å„Çè„Çå„Åæ„ÅôÔºö\n\n1. Ë´ñÁêÜÁöÑÊï¥ÂêàÊÄß„Å®ÂÆåÂÖ®ÊÄß\n   - ÂâçÊèêÊù°‰ª∂„Å®Âà∂Á¥Ñ„ÅÆÂ¶•ÂΩìÊÄß\n   - Ë´ñÁêÜÂ±ïÈñã„ÅÆ‰∏ÄË≤´ÊÄß\n   - ÁµêË´ñ„ÅÆÂ∞éÂá∫„Éó„É≠„Çª„Çπ\n   - Ë¶ãËêΩ„Å®„Åï„Çå„ÅüË¶ÅÁ¥†„ÅÆÁâπÂÆö\n   - ÂèçË®ºÂèØËÉΩÊÄß„ÅÆÊ§úË®º\n\n2. ÊäÄË°ìÁöÑÂÆüÁèæÂèØËÉΩÊÄß„Å®ÊúÄÈÅ©ÊÄß\n   - „Ç¢„É´„Ç¥„É™„Ç∫„É†„Å®„Éá„Éº„ÇøÊßãÈÄ†„ÅÆÈÅ©ÂàáÊÄß\n   - „Ç∑„Çπ„ÉÜ„É†„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„ÅÆÂ†ÖÁâ¢ÊÄß\n   - „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Å®„Çπ„Ç±„Éº„É©„Éì„É™„ÉÜ„Ç£\n   - „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Å®‰ø°È†ºÊÄß\n   - ‰øùÂÆàÊÄß„Å®Êã°ÂºµÊÄß\n\n3. ÂÆüË£Ö„Å®ÈÅãÁî®\n   - ÈñãÁô∫ÂäπÁéá„Å®ÁîüÁî£ÊÄß\n   - ÈÅãÁî®Ë≤†Ëç∑„Å®„Ç≥„Çπ„Éà\n   - Áõ£Ë¶ñ„Å®ÈöúÂÆ≥ÂØæÂøú\n   - „Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ„Å®„Éá„Éó„É≠„Ç§„É°„É≥„Éà\n   - „ÉÅ„Éº„É†„Ç≥„É©„Éú„É¨„Éº„Ç∑„Éß„É≥„ÅÆÊúâÂäπÊÄß\n\n4. „É™„Çπ„ÇØ„Å®Ë™≤È°å\n   - ÊäÄË°ìÁöÑÂà∂Á¥Ñ„Å®ÈôêÁïå\n   - „Çª„Ç≠„É•„É™„ÉÜ„Ç£ËÑÜÂº±ÊÄß\n   - „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÅÆ„Éú„Éà„É´„Éç„ÉÉ„ÇØ\n   - ‰æùÂ≠òÈñ¢‰øÇ„ÅÆË§áÈõë„Åï\n   - ÊΩúÂú®ÁöÑ„Å™ÊäÄË°ìÁöÑË≤†ÂÇµ\n\n5. „Éì„Ç∏„Éç„Çπ‰æ°ÂÄ§„Å®„Ç§„É≥„Éë„ÇØ„Éà\n   - ÈñãÁô∫„ÉªÈÅãÁî®„Ç≥„Çπ„Éà\n   - Â∏ÇÂ†¥ÊäïÂÖ•„Åæ„Åß„ÅÆÊôÇÈñì\n   - „É¶„Éº„Ç∂„Éº‰ΩìÈ®ì„Å∏„ÅÆÂΩ±Èüø\n   - „Éì„Ç∏„Éç„ÇπË¶Å‰ª∂„Å®„ÅÆÊï¥ÂêàÊÄß\n   - Á´∂‰∫âÂÑ™‰ΩçÊÄß„Å∏„ÅÆË≤¢ÁåÆ\n\nÂàÜÊûêÁµêÊûú„ÅÆÊßãÊàêÔºö\n\n1. ÊèêÊ°à„ÅÆÂº∑„Åø\n   - ÊäÄË°ìÁöÑÂÑ™‰ΩçÊÄß\n   - ÂÆüË£Ö„ÅÆÂäπÁéáÊÄß\n   - „Éì„Ç∏„Éç„Çπ‰æ°ÂÄ§\n   - Èù©Êñ∞ÁöÑË¶ÅÁ¥†\n\n2. ÊîπÂñÑ„ÅåÂøÖË¶Å„Å™È†òÂüü\n   - ÊäÄË°ìÁöÑË™≤È°å\n   - ÂÆüË£Ö‰∏ä„ÅÆ„É™„Çπ„ÇØ\n   - ÈÅãÁî®‰∏ä„ÅÆÊá∏Âøµ\n   - „Çπ„Ç±„Éº„É©„Éì„É™„ÉÜ„Ç£„ÅÆÂà∂Èôê\n\n3. ÂÖ∑‰ΩìÁöÑ„Å™ÊîπÂñÑÊèêÊ°à\n   - Áü≠ÊúüÁöÑ„Å™ÊîπÂñÑ\n   - ‰∏≠Èï∑ÊúüÁöÑ„Å™ÊúÄÈÅ©Âåñ\n   - ‰ª£Êõø„Ç¢„Éó„É≠„Éº„ÉÅ\n   - „Éô„Çπ„Éà„Éó„É©„ÇØ„ÉÜ„Ç£„Çπ„ÅÆÈÅ©Áî®\n\n4. ËøΩÂä†„ÅÆËÄÉÊÖÆ‰∫ãÈ†Ö\n   - „Ç®„ÉÉ„Ç∏„Ç±„Éº„Çπ„Å®‰æãÂ§ñÂá¶ÁêÜ\n   - Â∞ÜÊù•„ÅÆ„Çπ„Ç±„Éº„É©„Éì„É™„ÉÜ„Ç£\n   - „Çª„Ç≠„É•„É™„ÉÜ„Ç£ËÄÉÊÖÆ‰∫ãÈ†Ö\n   - „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©Âåñ\n\n5. ÂÆüË£Ö„É≠„Éº„Éâ„Éû„ÉÉ„Éó\n   - „Çø„Çπ„ÇØ„ÅÆÂÑ™ÂÖàÈ†Ü‰Ωç‰ªò„Åë\n   - „Éû„Ç§„É´„Çπ„Éà„Éº„É≥„ÅÆË®≠ÂÆö\n   - ÊàêÂäüÊåáÊ®ôÔºàKPIÔºâ„ÅÆÂÆöÁæ©\n   - „É™„Çπ„ÇØËªΩÊ∏õÊà¶Áï• ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "creative",
        "thinking",
        "mcp",
        "creative thinking",
        "deep mcp",
        "critical creative"
      ],
      "category": "education-and-learning"
    },
    "sifue--zen-syllabus-mcp": {
      "owner": "sifue",
      "name": "zen-syllabus-mcp",
      "url": "https://github.com/sifue/zen-syllabus-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/sifue.webp",
      "description": "Utilizes the ZEN University syllabus content to recommend subjects for aspiring front-end engineers, facilitating detailed course consultations based on enrollment requirements.",
      "stars": 5,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-05-01T06:59:25Z",
      "readme_content": "# ZENÂ§ßÂ≠¶„Ç∑„É©„Éê„ÇπMCP„Çµ„Éº„Éê„ÉºÂÆüË£Ö \n\n[ZENÂ§ßÂ≠¶„Ç∑„É©„Éê„Çπ](https://syllabus.zen.ac.jp/)„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÂà©Áî®„Åß„Åç„Çã„Çà„ÅÜMCP„ÇíÂÆüË£Ö„Åó„Åü„ÇÇ„ÅÆ„ÄÇ\n\n## ‰Ωø„ÅÑÊñπ\n[Node.js](https://nodejs.org/)„Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åô„Çã„ÄÇ\nNode.js„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÅØ20‰ª•‰∏ä„Çí‰ΩøÁî®„Åô„Çã„Åì„Å®„ÄÇ\n\n„Åì„ÅÆ„É™„Éù„Ç∏„Éà„É™„Çí„ÇØ„É≠„Éº„É≥„Åô„Çã„Åã„ÄÅZIP„Åß„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Å¶Â±ïÈñã„Åô„Çã„ÄÇ\n„Ç≥„É≥„ÇΩ„Éº„É´„ÅßÈñã„Åç„ÄÅ‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å„Åô„Çã„ÄÇ\n\n```sh\nnpm install\nnpx tsc\n```\n\n„Åß„Éì„É´„Éâ„ÄÇMac„ÅØ„Ç≥„É≥„ÇΩ„Éº„É´„ÅßÂÆüË°åÊ®©Èôê„Çí„Å§„Åë„Çã„ÄÇ `chmod 755 build/index.js`\n\n## Claude Desktop„Åß„ÅÆË®≠ÂÆö\n\n[Claude Desktop](https://claude.ai/download)„Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åô„Çã„ÄÇ\n[VSCode](https://azure.microsoft.com/ja-jp/products/visual-studio-code)„ÅÆ„Ç®„Éá„Ç£„Çø„Åå„Ç§„É≥„Çπ„Éà„Éº„É´ÂâçÊèê„Å†„Åå„ÄÅ\n\n```sh\ncode $env:AppData\\Claude\\claude_desktop_config.json\n```\n„ÅßË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíÈñã„Åè„ÄÇMac„ÅØ„ÄÅ\n\n```sh\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n‰ª•‰∏ã„ÅÆ„Çà„ÅÜ„Å´Êõ∏„ÅçÊèõ„Åà„Å¶Ë®≠ÂÆö„ÄÇ\n\n```json\n{\n  \"mcpServers\": {\n      \"get-subjects\": {\n          \"command\": \"node\",\n          \"args\": [\n              \"C:\\\\Users\\\\sifue\\\\workspace\\\\zen-syllabus-mcp\\\\build\\\\index.js\"\n          ]\n      }\n  }\n}\n```\n\n`build/index.js`„ÅÆ„Éë„Çπ„ÅØÈÅ©ÂÆúÂ§âÊõ¥„Åô„Çã„Åì„Å®„ÄÇ\n\n\nMac„Åß„ÅØ„ÄÅ\n\n```json\n{\n  \"mcpServers\": {\n      \"get-subjects\": {\n          \"command\": \"node\",\n          \"args\": [\n              \"/Users/sifue/workspace/zen-syllabus-mcp/build/index.js\"\n          ]\n      }\n  }\n}\n```\n\n[nvm](https://github.com/nvm-sh/nvm)„Å™„Å©„ÅÆNode.js„ÅÆ„Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†„ÇíÂà©Áî®„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà‰ª•‰∏ã„ÅÆ„Çà„ÅÜ„Å´node„ÇíÊåáÂÆö„Åô„Çã„ÄÇ\n\n```json\n{\n    \"mcpServers\": {\n        \"get-subjects\": {\n            \"command\": \"/Users/soichiro_yoshimura/.nvm/versions/node/v22.14.0/bin/node\",\n            \"args\": [\n                \"/Users/soichiro_yoshimura/workspace/zen-syllabus-mcp/build/index.js\"\n            ]\n        }\n    }\n}\n```\n\n„Åì„ÅÆ„Çà„ÅÜ„Å´„Å™„Çã„ÄÇ`build/index.js`„ÅÆ„Éë„Çπ„ÅØÈÅ©ÂÆúÂ§âÊõ¥„Åô„Çã„Åì„Å®„ÄÇ\n\nË®≠ÂÆöÂæå„ÅØClaude Desktop„ÇíÂÜçËµ∑Âãï„ÄÇ\n\n„ÄåZENÂ§ßÂ≠¶„ÅÆ„Ç∑„É©„Éê„ÇπMCP„ÇíÂà©Áî®„Åó„Å¶„ÄÅ„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Ç®„É≥„Ç∏„Éã„Ç¢„Å´„Å™„Çã„Åü„ÇÅ„ÅÆ„Ç™„Çπ„Çπ„É°„ÅÆÁßëÁõÆ„Çí„ÅÇ„Åí„Å¶„Åè„Å†„Åï„ÅÑ„Äç\n\n„ÅßÊ§úË®º„ÄÇ\n\n\n\n\n„Åì„ÅÆ„Çà„ÅÜ„Å´„Å™„Çã„ÄÇÂ±•‰øÆË¶Å‰ª∂„ÇíË®≠ÂÆö„Åô„Çå„Å∞Á¥∞„Åã„Å™Â±•‰øÆÁõ∏Ë´á„ÇÇÂèØËÉΩ„ÄÇ\n\n## VSCode„ÅÆË®≠ÂÆö\n„ÄêÊú™Ê§úË®º„Äë„ÅÑ„Åö„ÇåGitHub Copilot „ÅßAI„Ç®„Éº„Ç∏„Çß„É≥„Éà„ÅåÂà©Áî®„Åß„Åç„Çã„Çà„ÅÜ„Å™„Çã„Å®Âà©Áî®„Åß„Åç„Çã„Çâ„Åó„ÅÑ(ÁèæÂú®„ÅØ„Éó„É¨„Éì„É•„ÉºÁâà„ÅÆ„Åø)„ÄÇ\nmcp„ÅßË®≠ÂÆö„ÇíÊ§úÁ¥¢„Åó„Å¶‰ª•‰∏ã„Çísetting.json„Å´Ë®≠ÂÆö„ÄÇ„Éë„Çπ„ÅØÈÅ©ÂÆúÂ§âÊõ¥„Åô„Çã„Åì„Å®„ÄÇjson„ÅÆweather„ÅÆ‰∏ä„Å´Ëµ∑Âãï„Éú„Çø„É≥„ÅåÁèæ„Çå„Çã„ÅÆ„ÅßËµ∑Âãï„Åó„Å¶„Åä„Åè„ÄÇ\n\n```json\n{\n  \"mcpServers\": {\n      \"get-subjects\": {\n          \"command\": \"node\",\n          \"args\": [\n              \"C:\\\\Users\\\\sifue\\\\workspace\\\\zen-syllabus-mcp\\\\build\\\\index.js\"\n          ]\n      }\n  }\n}\n```\n\nË®≠ÂÆöÂæå„ÅØGitHub Copilot„Åß\n\n„ÄåZENÂ§ßÂ≠¶„ÅÆ„Ç∑„É©„Éê„ÇπMCP„ÇíÂà©Áî®„Åó„Å¶„ÄÅ„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Ç®„É≥„Ç∏„Éã„Ç¢„Å´„Å™„Çã„Åü„ÇÅ„ÅÆ„Ç™„Çπ„Çπ„É°„ÅÆÁßëÁõÆ„Çí„ÅÇ„Åí„Å¶„Åè„Å†„Åï„ÅÑ„Äç\n\n„ÅßÊ§úË®º„ÄÇÂ±•‰øÆË¶Å‰ª∂„ÇíË®≠ÂÆö„Åô„Çå„Å∞Á¥∞„Åã„Å™Â±•‰øÆÁõ∏Ë´á„ÇÇÂèØËÉΩ„ÄÇ\n\n## „Çµ„Éº„Éê„ÉºÂÆüË£ÖÊôÇ„ÅÆÂãï‰ΩúÁ¢∫Ë™ç\n\nË©≥„Åó„Åè„ÅØ„ÄÅ[TypeScript SDK](https://github.com/modelcontextprotocol/typescript-sdk)„ÅÆClient„ÅÆÂÆüË£Ö„ÇíÂèÇÁÖß„ÄÇ\n\n```sh\nnode build/index.js\n```\n„Åß„Çµ„Éº„Éê„Éº„ÇíËµ∑Âãï„ÄÇ\n\n```sh\nnode .\\build\\client.js\n```\n„Åß„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÇíËµ∑Âãï„Åó„Å¶ÂÆüË°å„ÄÇ\n\n„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅØÊ§úË®º„Åó„Åü„ÅÑ„Ç≥„Éº„Éâ„Å´Âêà„Çè„Åõ„Å¶Êõ∏„ÅçÊèõ„Åà„ÄÅ„Åù„ÅÆÂæå„ÄÅ\n```sh\nnpx tsc\n```\n„Åß„Éì„É´„Éâ„Åó„Å¶ÂÜçÂ∫¶„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÇíÂÆüË°å„Åô„Çã„ÄÇ\n\n\n## ÂèÇËÄÉ\n- [MCP„ÅÆQuickStart](https://modelcontextprotocol.io/quickstart/server)\n- [VSCode„ÅÆMCPË®≠ÂÆö](https://code.visualstudio.com/docs/copilot/chat/mcp-servers)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "syllabus",
        "zen",
        "education",
        "zen syllabus",
        "zen university",
        "syllabus mcp"
      ],
      "category": "education-and-learning"
    },
    "spences10--mcp-svelte-docs": {
      "owner": "spences10",
      "name": "mcp-svelte-docs",
      "url": "https://github.com/spences10/mcp-svelte-docs",
      "imageUrl": "/freedevtools/mcp/pfp/spences10.webp",
      "description": "Provides access to detailed documentation for Svelte 5, including migration patterns from Svelte 4, as well as information on features, common mistakes, and best practices.",
      "stars": 119,
      "forks": 8,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T04:15:41Z",
      "readme_content": "# mcp-svelte-docs\n\nA Model Context Protocol (MCP) server providing authoritative Svelte 5\nand SvelteKit definitions extracted directly from TypeScript\ndeclarations. Get precise syntax, parameters, and examples for all\nSvelte 5 concepts through a single, unified interface.\n\n## Architecture\n\n**Definition-First Approach**: Rather than multiple specialized tools,\nthis server provides one powerful `svelte_definition` tool that\naccesses 28+ comprehensive definitions covering:\n\n- **All Svelte 5 runes** ($state, $derived, $props, $effect variants)\n- **Modern features** (snippets, await expressions, remote functions)\n- **Event handling** (DOM events, custom events, component\n  communication)\n- **Migration guidance** (Svelte 4 to 5 patterns and best practices)\n- **TypeScript interfaces** (Snippet, Snapshot types)\n- **Advanced patterns** (global state, common mistakes, lifecycle\n  equivalents)\n\n## Available Tool\n\n### `svelte_definition`\n\n**Single, powerful tool** for all Svelte 5 and SvelteKit concepts:\n\n```typescript\nsvelte_definition(identifier: string, format?: \"syntax\"|\"quick\"|\"full\")\n```\n\n**Examples:**\n\n- `svelte_definition(\"$state\")` - Complete $state documentation\n- `svelte_definition(\"snippets\", \"quick\")` - Snippet overview with\n  example\n- `svelte_definition(\"onclick\", \"syntax\")` - Just the TypeScript\n  signature\n- `svelte_definition(\"migration-patterns\")` - Svelte 4 ‚Üí 5 migration\n  guide\n\n**Response Formats:**\n\n- `\"syntax\"` - TypeScript signature only (~50 words)\n- `\"quick\"` - Definition + minimal example (~200 words)\n- `\"full\"` - Complete documentation with examples (~500-1000 words,\n  default)\n\n### Available Identifiers (28+)\n\n**Core Runes:** `$state`, `$state.raw`, `$state.snapshot`, `$derived`,\n`$derived.by`, `$props`, `$bindable`, `$effect`, `$effect.pre`,\n`$effect.root`, `$effect.pending`, `$effect.tracking`\n\n**Development Tools:** `$inspect`, `$host`\n\n**Features & Patterns:** `snippets`, `onclick`, `component-events`,\n`migration-patterns`, `await-expressions`, `remote-functions`,\n`global-state`, `common-mistakes`, `lifecycle-equivalents`\n\n**Event Handling:** `custom-events`, `event-delegation`,\n`event-modifiers`\n\n**TypeScript Interfaces:** `snippet`, `snapshot`\n\n## Key Features\n\n### üéØ **Authoritative & TypeScript-First**\n\n- **Direct from Source**: Definitions extracted from official Svelte 5\n  TypeScript declarations\n- **Always Current**: Reflects the actual API, not outdated tutorials\n- **Type-Safe**: Includes precise parameter types, return values, and\n  constraints\n\n### ‚ö° **Single Interface, Complete Coverage**\n\n- **One Tool**: `svelte_definition` replaces 16+ specialized tools\n- **28+ Definitions**: Every Svelte 5 rune, feature, and pattern\n  covered\n- **Consistent Responses**: Same interface whether you need `$state`\n  or `remote-functions`\n\n### üöÄ **Modern Svelte 5 & SvelteKit Support**\n\n- **Await Expressions**: Async operations directly in templates\n  (`await-expressions`)\n- **Remote Functions**: Type-safe client-server communication\n  (`remote-functions`)\n- **All Runes**: Complete `$effect` family, `$state` variants,\n  `$derived.by`, `$bindable`\n- **Advanced Patterns**: Event handling, global state, component\n  communication\n\n### üìö **Smart Error Recovery**\n\n- **Fuzzy Matching**: Suggests correct identifiers for typos\n- **Related Concepts**: Points to similar definitions when searches\n  fail\n- **Migration Help**: Converts Svelte 4 patterns to Svelte 5\n  equivalents\n\n## Config\n\nClaude Desktop (via WSL)\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"mcp-svelte-docs\": {\n\t\t\t\"command\": \"wsl.exe\",\n\t\t\t\"args\": [\"bash\", \"-c\", \"npx -y mcp-svelte-docs\"]\n\t\t}\n\t}\n}\n```\n\nCursor\n\n[![Install MCP Server](https://cursor.com/deeplink/mcp-install-dark.svg)](https://cursor.com/en/install-mcp?name=mcp-svelte-docs&config=eyJjb21tYW5kIjoibnB4IC15IG1jcC1zdmVsdGUtZG9jcyJ9)\n\nWindsurf (via WSL)\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"mcp-svelte-docs\": {\n\t\t\t\"command\": \"wsl.exe\",\n\t\t\t\"args\": [\"bash\", \"-c\", \"npx -y mcp-svelte-docs\"]\n\t\t}\n\t}\n}\n```\n\nWindows (without WSL)\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"mcp-svelte-docs\": {\n\t\t\t\"command\": \"npx\",\n\t\t\t\"args\": [\"-y\", \"mcp-svelte-docs\"]\n\t\t}\n\t}\n}\n```\n\nmacOS / Linux\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"mcp-svelte-docs\": {\n\t\t\t\"command\": \"npx\",\n\t\t\t\"args\": [\"-y\", \"mcp-svelte-docs\"]\n\t\t}\n\t}\n}\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\nBuilt on:\n\n- [Model Context Protocol](https://github.com/modelcontextprotocol)\n- [Svelte](https://svelte.dev)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "svelte",
        "documentation",
        "spences10",
        "svelte docs",
        "documentation svelte",
        "svelte information"
      ],
      "category": "education-and-learning"
    },
    "stagsz--Unconventional-thinking": {
      "owner": "stagsz",
      "name": "Unconventional-thinking",
      "url": "https://github.com/stagsz/Unconventional-thinking",
      "imageUrl": "/freedevtools/mcp/pfp/stagsz.webp",
      "description": "Generates unconventional solutions to problems by challenging conventional wisdom and organizing thoughts through a structured session. Offers a tool to explore innovative thinking paths based on user-defined problems.",
      "stars": 24,
      "forks": 8,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-27T04:02:37Z",
      "readme_content": "# Unreasonable Thinking Server\n\nA detailed tool for bold, unconventional, and boundary-breaking problem-solving.\n\nThis is a TypeScript-based MCP server that implements an unreasonable thinking system. It helps generate unconventional solutions to problems by:\n\n- Generating unreasonable thoughts that challenge conventional wisdom\n- Creating branches of thinking in different directions\n- Tracking and organizing thoughts in a session\n\n<a href=\"https://glama.ai/mcp/servers/pam1hp4gtk\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/pam1hp4gtk/badge\" alt=\"Unconventional-thinking server MCP server\" /></a>\n\n## Features\n\n### Tools\n- `generate_unreasonable_thought` - Generate new unconventional thoughts\n  - Takes a problem description and optional parameters\n  - Can build upon or rebel against previous thoughts\n- `branch_thought` - Create new branches of thinking\n  - Supports different directions: more extreme, opposite, tangential\n  - Maintains connection to source thoughts\n- `list_thoughts` - View all thoughts in the session\n  - Can filter by branch\n  - Shows relationships between thoughts\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"unreasonable-thinking-server\": {\n      \"command\": \"/path/to/unreasonable-thinking-server/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "thinking",
        "stagsz",
        "unconventional",
        "unconventional thinking",
        "innovative thinking",
        "stagsz unconventional"
      ],
      "category": "education-and-learning"
    },
    "vishalsachdev--canvas-mcp": {
      "owner": "vishalsachdev",
      "name": "canvas-mcp",
      "url": "https://github.com/vishalsachdev/canvas-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/vishalsachdev.webp",
      "description": "Interact with the Canvas Learning Management System API to manage courses, assignments, users, and announcements. Access course details, submissions, and generate summaries effortlessly.",
      "stars": 21,
      "forks": 9,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-04T04:41:57Z",
      "readme_content": "# Canvas MCP Server\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nThis repository contains a Model Context Protocol (MCP) server implementation for interacting with the Canvas Learning Management System API. The server is designed to work with Claude Desktop and other MCP-compatible clients.\n\n> **Note**: Recently refactored to a modular architecture for better maintainability. The legacy monolithic implementation has been archived.\n\n## Overview\n\nThe Canvas MCP Server bridges the gap between Claude Desktop and Canvas Learning Management System, providing **both students and educators** with an intelligent interface to their Canvas environment. Built on the Model Context Protocol (MCP), it enables natural language interactions with Canvas data.\n\n### For Students üë®‚Äçüéì\nGet AI-powered assistance with:\n- Tracking upcoming assignments and deadlines\n- Monitoring your grades across all courses\n- Managing peer review assignments\n- Accessing course content and discussions\n- Organizing your TODO list\n\n**[‚Üí Get Started as a Student](./docs/STUDENT_GUIDE.md)**\n\n### For Educators üë®‚Äçüè´\nEnhance your teaching with:\n- Assignment and grading management\n- Student analytics and performance tracking\n- Discussion and peer review facilitation\n- **FERPA-compliant** student data handling\n- Bulk messaging and communication tools\n\n**[‚Üí Get Started as an Educator](./docs/EDUCATOR_GUIDE.md)**\n\n## üîí Privacy & Data Protection\n\n### For Educators: FERPA Compliance\n\nComplete FERPA compliance through systematic data anonymization when working with student data:\n\n- **Source-level data anonymization** converts real names to consistent anonymous IDs (Student_xxxxxxxx)\n- **Automatic email masking** and PII filtering from discussion posts and submissions\n- **Local-only processing** with configurable privacy controls (`ENABLE_DATA_ANONYMIZATION=true`)\n- **FERPA-compliant analytics**: Ask \"Which students need support?\" without exposing real identities\n- **De-anonymization mapping tool** for faculty to correlate anonymous IDs with real students locally\n\nAll student data is anonymized **before** it reaches AI systems. See [Educator Guide](./docs/EDUCATOR_GUIDE.md) for configuration details.\n\n### For Students: Your Data Stays Private\n\n- **Your data only**: Student tools access only your own Canvas data via Canvas API's \"self\" endpoints\n- **Local processing**: Everything runs on your machine - no data sent to external servers\n- **No tracking**: Your Canvas usage and AI interactions remain private\n- **No anonymization needed**: Since you're only accessing your own data, there are no privacy concerns\n\n## Prerequisites\n\n- **Python 3.10+** - Required for modern features and type hints\n- **Canvas API Access** - API token and institution URL\n- **MCP Client** - Claude Desktop (recommended) or other MCP-compatible client\n\n### Supported MCP Clients\n\nCanvas MCP works with any application that supports the Model Context Protocol. Popular options include:\n\n**Recommended:**\n- **[Claude Desktop](https://claude.ai/download)** - Official Anthropic desktop app with full MCP support\n\n**AI Coding Assistants:**\n- **[Zed](https://zed.dev)** - High-performance code editor with built-in MCP support\n- **[Cursor](https://cursor.sh)** - AI-first code editor\n- **[Windsurf IDE](https://codeium.com/windsurf)** (by Codeium) - AI-powered development environment\n- **[Continue](https://continue.dev)** - Open-source AI code assistant\n\n**Development Platforms:**\n- **[Replit](https://replit.com)** - Cloud-based coding platform with MCP integration\n- **[Sourcegraph Cody](https://sourcegraph.com/cody)** - AI coding assistant with MCP support\n\n**Enterprise:**\n- **[Microsoft Copilot Studio](https://www.microsoft.com/microsoft-copilot/microsoft-copilot-studio)** - MCP support in enterprise environments\n\nSee the [official MCP clients list](https://modelcontextprotocol.io/clients) for more options.\n\n> **Note**: While Canvas MCP is designed to work with any MCP client, setup instructions in this guide focus on Claude Desktop. Configuration for other clients may vary.\n\n## Quick Start (Automated Installation)\n\nThe fastest way to get started is with our automated installer:\n\n```bash\n# Clone the repository\ngit clone https://github.com/vishalsachdev/canvas-mcp.git\ncd canvas-mcp\n\n# Run the automated installer\npython scripts/install.py\n```\n\nThe installer will:\n- ‚úÖ Set up Python environment with `uv` package manager\n- ‚úÖ Install all dependencies automatically  \n- ‚úÖ Create environment configuration template\n- ‚úÖ Configure Claude Desktop integration\n- ‚úÖ Test the installation\n\n## Manual Installation\n\nIf you prefer manual setup:\n\n### 1. Install Dependencies\n\n```bash\n# Install uv package manager (faster than pip)\npip install uv\n\n# Install the package\nuv pip install -e .\n```\n\n### 2. Configure Environment\n\n```bash\n# Copy environment template\ncp env.template .env\n\n# Edit with your Canvas credentials\n# Required: CANVAS_API_TOKEN, CANVAS_API_URL\n```\n\nGet your Canvas API token from: **Canvas ‚Üí Account ‚Üí Settings ‚Üí New Access Token**\n\n### 3. Claude Desktop Setup\n\nAdd to `~/Library/Application Support/Claude/claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"canvas-api\": {\n      \"command\": \"canvas-mcp-server\"\n    }\n  }\n}\n```\n\n## Verification\n\nTest your setup:\n\n```bash\n# Test Canvas API connection\ncanvas-mcp-server --test\n\n# View configuration\ncanvas-mcp-server --config\n\n# Start server (for manual testing)\ncanvas-mcp-server\n```\n\n## Available Tools\n\nThe Canvas MCP Server provides a comprehensive set of tools for interacting with the Canvas LMS API. These tools are organized into logical categories for better discoverability and maintainability.\n\n### Tool Categories\n\n**Student Tools** (New!)\n- Personal assignment tracking and deadline management\n- Grade monitoring across all courses\n- TODO list and peer review management\n- Submission status tracking\n\n**Shared Tools** (Both Students & Educators)\n1. **Course Tools** - List and manage courses, get detailed information, generate summaries with syllabus content\n2. **Discussion & Announcement Tools** - Manage discussions, announcements, and replies\n3. **Page & Content Tools** - Access pages, modules, and course content\n\n**Educator Tools**\n4. **Assignment Tools** - Handle assignments, submissions, and peer reviews with analytics\n5. **Rubric Tools** - Full CRUD operations for rubrics with validation, association management, and grading\n6. **User & Enrollment Tools** - Manage enrollments, users, and groups\n7. **Analytics Tools** - View student analytics, assignment statistics, and progress tracking\n8. **Messaging Tools** - Send messages and announcements to students\n\nüìñ [View Full Tool Documentation](tools/README.md) for detailed information about all available tools.\n\n## Usage with MCP Clients\n\nThis MCP server works seamlessly with any MCP-compatible client:\n\n1. **Automatic Startup**: MCP clients start the server when needed\n2. **Tool Integration**: Canvas tools appear in your AI assistant's interface\n3. **Natural Language**: Interact naturally with prompts like:\n\n**Students:**\n- *\"What assignments do I have due this week?\"*\n- *\"Show me my current grades\"*\n- *\"What peer reviews do I need to complete?\"*\n- *\"Have I submitted everything for BADM 350?\"*\n\n**Educators:**\n- *\"Which students haven't submitted the latest assignment?\"*\n- *\"Create an announcement about tomorrow's exam\"*\n- *\"Show me peer review completion analytics\"*\n\n## Project Structure\n\nModern Python package structure following 2025 best practices:\n\n```\ncanvas-mcp/\n‚îú‚îÄ‚îÄ pyproject.toml             # Modern Python project config\n‚îú‚îÄ‚îÄ env.template              # Environment configuration template\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îî‚îÄ‚îÄ canvas_mcp/            # Main package\n‚îÇ       ‚îú‚îÄ‚îÄ __init__.py        # Package initialization\n‚îÇ       ‚îú‚îÄ‚îÄ server.py          # Main server entry point\n‚îÇ       ‚îú‚îÄ‚îÄ core/              # Core utilities\n‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ config.py      # Configuration management\n‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ client.py      # HTTP client\n‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ cache.py       # Caching system\n‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ validation.py  # Input validation\n‚îÇ       ‚îú‚îÄ‚îÄ tools/             # MCP tool implementations\n‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ courses.py     # Course management\n‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ assignments.py # Assignment tools\n‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ discussions.py # Discussion tools\n‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ rubrics.py     # Rubric tools\n‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ other_tools.py # Misc tools\n‚îÇ       ‚îî‚îÄ‚îÄ resources/         # MCP resources\n‚îú‚îÄ‚îÄ scripts/\n‚îÇ   ‚îî‚îÄ‚îÄ install.py            # Automated installation\n‚îî‚îÄ‚îÄ docs/                     # Documentation\n```\n\n## Documentation\n\n- **[Tool Documentation](./tools/README.md)** - Complete reference for all available tools\n- **[Pages Implementation Guide](./docs/PAGES_IMPLEMENTATION.md)** - Comprehensive Pages feature guide\n- **[Course Documentation Template](./docs/course_documentation_prompt_template.md)** - Hybrid approach for efficient course documentation\n- **[Development Guide](./docs/CLAUDE.md)** - Architecture details and development reference\n## Technical Details\n\n### Modern Architecture (2025)\n\nBuilt with current Python ecosystem best practices:\n\n- **Package Structure**: Modern `src/` layout with `pyproject.toml`\n- **Dependency Management**: Fast `uv` package manager with locked dependencies\n- **Configuration**: Environment-based config with validation and templates\n- **Entry Points**: Proper CLI commands via `pyproject.toml` scripts\n- **Type Safety**: Full type hints and runtime validation\n\n### Core Components\n\n- **FastMCP Framework**: Robust MCP server implementation with tool registration\n- **Async Architecture**: `httpx` client with connection pooling and rate limiting\n- **Smart Caching**: Intelligent request caching with configurable TTL\n- **Configuration System**: Environment-based config with validation and defaults\n- **Educational Focus**: Tools designed for real teaching workflows\n\n### Dependencies\n\nModern Python packages (see `pyproject.toml`):\n- **`fastmcp`**: MCP server framework\n- **`httpx`**: Async HTTP client\n- **`python-dotenv`**: Environment configuration\n- **`pydantic`**: Data validation and settings\n- **`python-dateutil`**: Date/time handling\n\n### Performance Features\n\n- **Connection Pooling**: Reuse HTTP connections for efficiency\n- **Request Caching**: Minimize redundant Canvas API calls\n- **Async Operations**: Non-blocking I/O for concurrent requests\n- **Smart Pagination**: Automatic handling of Canvas API pagination\n- **Rate Limiting**: Respect Canvas API limits with backoff\n\n### Development Tools\n\n- **Automated Setup**: One-command installation script\n- **Configuration Testing**: Built-in connection and config testing\n- **Type Checking**: `mypy` support for type safety\n- **Code Quality**: `ruff` and `black` for formatting and linting\n\nFor contributors, see the [Development Guide](./docs/CLAUDE.md) for detailed architecture and development reference.\n\n## Troubleshooting\n\nIf you encounter issues:\n\n1. **Server Won't Start** - Verify your [Configuration](#configuration) setup: `.env` file, virtual environment path, and dependencies\n2. **Authentication Errors** - Check your Canvas API token validity and permissions\n3. **Connection Issues** - Verify Canvas API URL correctness and network access\n4. **Debugging** - Check Claude Desktop console logs or run server manually for error output\n\n## Security & Privacy Features\n\n### API Security\n- Your Canvas API token grants access to your Canvas account\n- Never commit your `.env` file to version control\n- The server runs locally on your machine - no external data transmission\n- Consider using a token with limited permissions if possible\n\n### Privacy Controls (Educators Only)\n\nEducators working with student data can enable FERPA-compliant anonymization:\n\n```bash\n# In your .env file\nENABLE_DATA_ANONYMIZATION=true  # Anonymizes student names/emails before AI processing\nANONYMIZATION_DEBUG=true        # Debug anonymization (optional)\n```\n\nStudents don't need anonymization since they only access their own data.\n\nFor detailed privacy configuration, see:\n- **[Educator Guide](./docs/EDUCATOR_GUIDE.md)** - FERPA compliance and anonymization\n- **[Student Guide](./docs/STUDENT_GUIDE.md)** - Privacy information for students\n\n## Contributing\n\nContributions are welcome! Feel free to:\n- Submit issues for bugs or feature requests\n- Create pull requests with improvements\n- Share your use cases and feedback\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n---\n\nCreated by [Vishal Sachdev](https://github.com/vishalsachdev)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "canvas",
        "vishalsachdev",
        "education",
        "vishalsachdev canvas",
        "canvas learning",
        "canvas mcp"
      ],
      "category": "education-and-learning"
    },
    "xuhuatao--learn-python": {
      "owner": "xuhuatao",
      "name": "learn-python",
      "url": "https://github.com/xuhuatao/learn-python",
      "imageUrl": "/freedevtools/mcp/pfp/xuhuatao.webp",
      "description": "Explore Python interactively by modifying and testing code examples across various topics, with built-in assertions and linting tools to enhance code quality and learning.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2021-07-31T08:42:14Z",
      "readme_content": "# Playground and Cheatsheet for Learning Python\n\n[![Build Status](https://travis-ci.org/trekhleb/learn-python.svg?branch=master)](https://travis-ci.org/trekhleb/learn-python)\n\n> This is a collection of Python scripts that are split by [topics](#table-of-contents) and contain \ncode examples with explanations, different use cases and links to further readings.\n\n_Read this in_ [_Portugu√™s_](README.pt-BR.md).\n\nIt is a **playground** because you may change or add the code to see how it works \nand [test it out](#testing-the-code) using assertions. It also allows you \nto [lint the code](#linting-the-code) you've wrote and check if it fits to Python code style guide.\nAltogether it might make your learning process to be more interactive and it might help you to keep \ncode quality pretty high from very beginning.\n\nIt is a **cheatsheet** because you may get back to these code examples once you want to recap the \nsyntax of [standard Python statements and constructions](#table-of-contents). Also because the \ncode is full of assertions you'll be able to see expected functions/statements output right away\nwithout launching them.\n\n> _You might also be interested in ü§ñ [Interactive Machine Learning Experiments](https://github.com/trekhleb/machine-learning-experiments)_\n\n## How to Use This Repository\n\nEach Python script in this repository has the following structure:\n\n```python\n\"\"\"Lists  <--- Name of the topic here\n\n# @see: https://www.learnpython.org/en/Lists  <-- Link to further readings goes here\n\nHere might go more detailed explanation of the current topic (i.e. general info about Lists).\n\"\"\"\n\n\ndef test_list_type():\n    \"\"\"Explanation of sub-topic goes here.\n    \n    Each file contains test functions that illustrate sub-topics (i.e. lists type, lists methods).\n    \"\"\"\n    \n    # Here is an example of how to build a list.  <-- Comments here explain the action\n    squares = [1, 4, 9, 16, 25]\n    \n    # Lists can be indexed and sliced. \n    # Indexing returns the item.\n    assert squares[0] == 1  # <-- Assertions here illustrate the result.\n    # Slicing returns a new list.\n    assert squares[-3:] == [9, 16, 25]  # <-- Assertions here illustrate the result.\n```\n\nSo normally you might want to do the following:\n\n- [Find the topic](#table-of-contents) you want to learn or recap.\n- Read comments and/or documentation that is linked in each script's docstring (as in example above). \n- Look at code examples and assertions to see usage examples and expected output.\n- Change code or add new assertions to see how things work.\n- [Run tests](#testing-the-code) and [lint the code](#linting-the-code) to see if it work and is \nwritten correctly.\n\n## Table of Contents\n\n1. **Getting Started**\n    - [What is Python](src/getting_started/what_is_python.md)\n    - [Python Syntax](src/getting_started/python_syntax.md)\n    - [Variables](src/getting_started/test_variables.py)\n2. **Operators**\n    - [Arithmetic Operators](src/operators/test_arithmetic.py) (`+`, `-`, `*`, `/`, `//`, `%`, `**`)\n    - [Bitwise Operators](src/operators/test_bitwise.py) (`&`, `|`, `^`, `>>`, `<<`, `~`)\n    - [Assignment Operators](src/operators/test_assigment.py) (`=`, `+=`, `-=`, `/=`, `//=` etc.)\n    - [Comparison Operator](src/operators/test_comparison.py) (`==`, `!=`, `>`, `<`, `>=`, `<=`)\n    - [Logical Operators](src/operators/test_logical.py) (`and`, `or`, `not`)\n    - [Identity Operators](src/operators/test_identity.py) (`is`, `is not`)\n    - [Membership Operators](src/operators/test_membership.py) (`in`, `not in`)\n3. **Data Types**\n    - [Numbers](src/data_types/test_numbers.py) (including booleans)\n    - [Strings](src/data_types/test_strings.py) and their methods\n    - [Lists](src/data_types/test_lists.py) and their methods (including list comprehensions)\n    - [Tuples](src/data_types/test_tuples.py)\n    - [Sets](src/data_types/test_sets.py) and their methods\n    - [Dictionaries](src/data_types/test_dictionaries.py)\n    - [Type Casting](src/data_types/test_type_casting.py)\n4. **Control Flow**\n    - [The `if` statement](src/control_flow/test_if.py)\n    - [The `for` statement](src/control_flow/test_for.py) (and `range()` function)\n    - [The `while` statement](src/control_flow/test_while.py)\n    - [The `try` statements](src/control_flow/test_try.py)\n    - [The `break` statement](src/control_flow/test_break.py)\n    - [The `continue` statement](src/control_flow/test_continue.py)\n5. **Functions**\n    - [Function Definition](src/functions/test_function_definition.py) (`def` and `return` statements)\n    - [Scopes of Variables Inside Functions](src/functions/test_function_scopes.py) (`global` and `nonlocal` statements)\n    - [Default Argument Values](src/functions/test_function_default_arguments.py)\n    - [Keyword Arguments](src/functions/test_function_keyword_arguments.py)\n    - [Arbitrary Argument Lists](src/functions/test_function_arbitrary_arguments.py)\n    - [Unpacking Argument Lists](src/functions/test_function_unpacking_arguments.py) (`*` and `**` statements)\n    - [Lambda Expressions](src/functions/test_lambda_expressions.py) (`lambda` statement)\n    - [Documentation Strings](src/functions/test_function_documentation_string.py)\n    - [Function Annotations](src/functions/test_function_annotations.py)\n    - [Function Decorators](src/functions/test_function_decorators.py)\n6. **Classes**\n    - [Class Definition](src/classes/test_class_definition.py) (`class` statement)\n    - [Class Objects](src/classes/test_class_objects.py)\n    - [Instance Objects](src/classes/test_instance_objects.py)\n    - [Method Objects](src/classes/test_method_objects.py)\n    - [Class and Instance Variables](src/classes/test_class_and_instance_variables.py)\n    - [Inheritance](src/classes/test_inheritance.py)\n    - [Multiple Inheritance](src/classes/test_multiple_inheritance.py)\n7. **Modules**\n    - [Modules](src/modules/test_modules.py) (`import` statement)\n    - [Packages](src/modules/test_packages.py)\n8. **Errors and Exceptions**\n    - [Handling Exceptions](src/exceptions/test_handle_exceptions.py) (`try` statement)\n    - [Raising Exceptions](src/exceptions/test_raise_exceptions.py) (`raise` statement) \n9. **Files**\n    - [Reading and Writing](src/files/test_file_reading.py) (`with` statement)\n    - [Methods of File Objects](src/files/test_file_methods.py)\n10. **Additions**\n    - [The `pass` statement](src/additions/test_pass.py)\n    - [Generators](src/additions/test_generators.py) (`yield` statement)\n11. **Brief Tour of the Standard Libraries**\n    - [Serialization](src/standard_libraries/test_json.py) (`json` library)\n    - [File Wildcards](src/standard_libraries/test_glob.py) (`glob` library)\n    - [String Pattern Matching](src/standard_libraries/test_re.py) (`re` library)\n    - [Mathematics](src/standard_libraries/test_math.py) (`math`, `random`, `statistics` libraries)\n    - [Dates and Times](src/standard_libraries/test_datetime.py) (`datetime` library)\n    - [Data Compression](src/standard_libraries/test_zlib.py) (`zlib` library)\n\n## Prerequisites\n\n**Installing Python**\n\nMake sure that you have [Python3 installed](https://realpython.com/installing-python/) on your machine.\n\nYou might want to use [venv](https://docs.python.org/3/library/venv.html) standard Python library\nto create virtual environments and have Python, pip and all dependent packages to be installed and \nserved from the local project directory to avoid messing with system wide packages and their \nversions.\n\nDepending on your installation you might have access to Python3 interpreter either by\nrunning `python` or `python3`. The same goes for pip package manager - it may be accessible either\nby running `pip` or `pip3`.\n\nYou may check your Python version by running:\n\n```bash\npython --version\n```\n\nNote that in this repository whenever you see `python` it will be assumed that it is Python **3**.\n\n**Installing dependencies**\n\nInstall all dependencies that are required for the project by running:\n\n```bash\npip install -r requirements.txt\n```\n\n## Testing the Code\n\nTests are made using [pytest](https://docs.pytest.org/en/latest/) framework.\n\nYou may add new tests for yourself by adding files and functions with `test_` prefix\n(i.e. `test_topic.py` with `def test_sub_topic()` function inside).\n\nTo run all the tests please execute the following command from the project root folder:\n\n```bash\npytest\n```\n\nTo run specific tests please execute:\n\n```bash\npytest ./path/to/the/test_file.py\n```\n\n## Linting the Code\n\nLinting is done using [pylint](http://pylint.pycqa.org/) and [flake8](http://flake8.pycqa.org/en/latest/) libraries.\n\n### PyLint\n\nTo check if the code is written with respect\nto [PEP 8](https://www.python.org/dev/peps/pep-0008/) style guide please run:\n\n```bash\npylint ./src/\n```\n\nIn case if linter will detect error (i.e. `missing-docstring`) you may want to read more about \nspecific error by running:\n\n```bash\npylint --help-msg=missing-docstring\n```\n\n[More about PyLint](http://pylint.pycqa.org/)\n\n### Flake8\n\nTo check if the code is written with respect\nto [PEP 8](https://www.python.org/dev/peps/pep-0008/) style guide please run:\n\n```bash\nflake8 ./src\n```\n\nOr if you want to have more detailed output you may run:\n\n```bash\nflake8 ./src --statistics --show-source --count\n```\n\n[More about Flake8](http://flake8.pycqa.org/en/latest/)\n\n## Supporting the project\n\nYou may support this project via ‚ù§Ô∏èÔ∏è [GitHub](https://github.com/sponsors/trekhleb) or ‚ù§Ô∏èÔ∏è [Patreon](https://www.patreon.com/trekhleb).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "python",
        "xuhuatao",
        "interactively",
        "learn python",
        "python interactively",
        "learning xuhuatao"
      ],
      "category": "education-and-learning"
    },
    "yueleicool--EnglishGrammar": {
      "owner": "yueleicool",
      "name": "EnglishGrammar",
      "url": "https://github.com/yueleicool/EnglishGrammar",
      "imageUrl": "/freedevtools/mcp/pfp/yueleicool.webp",
      "description": "Provides detailed explanations and summaries of English grammar concepts, including parts of speech and sentence components. Aids users in understanding the fundamental elements and structure of English grammar for enhanced language proficiency.",
      "stars": 2,
      "forks": 1,
      "license": "No License",
      "language": "",
      "updated_at": "2025-03-14T17:03:29Z",
      "readme_content": "# EnglishGrammar\nËã±ËØ≠ËØ≠Ê≥ïÊÄªÁªì\n\n### ‰∏Ä„ÄÅËØçÊÄßÔºà10ÁßçÔºâ\n1.ËøûËØç: Áî®Êù•ËøûÊé•ËØç„ÄÅÁü≠ËØ≠ÊàñÂè•Â≠ê  (‰∏âÂ§ß‰ªéÂè•)  \n2.Âä®ËØç: Ë°®Âä®‰ΩúÊàñÁä∂ÊÄÅ  \n3.ÂΩ¢ÂÆπËØç: Ë°®‰∫∫Êàñ‰∫ãÁâ©ÁöÑÊÄßË¥®ÊàñÁâπÂæÅ  \n4.ÂâØËØç:  \n  ‚ë† ‰øÆÊîπÂä®ËØç„ÄÅÂΩ¢ÂÆπËØçÊàñÂâØËØç  \n  ‚ë° ËØ¥ÊòéÊó∂Èó¥„ÄÅÂú∞ÁÇπ„ÄÅÁ®ãÂ∫¶Á≠â  \n5.‰ª£ËØç: Áî®Êù•‰ª£ÊõøÂêçËØç  \n6.ÂêçËØç: Ë°®Á§∫‰∫∫„ÄÅ‰∫ãÁâ©„ÄÅÂú∞ÁÇπÊàñÊäΩË±°Ê¶ÇÂøµÁöÑÂêçËØç  \n7.ÂÜ†ËØç: Áî®Âú®ÂêçËØçÂâçÔºåÂ∏ÆÂä©ËØ¥ÊòéÂêçËØç  \n8.‰ªãËØç: Ë°®Á§∫ÂÆÉÂêéÈù¢ÁöÑÂêçËØçÊàñ‰ª£ËØç‰∏éÂÖ∂‰ªñÂè•Â≠êÊàêÂàÜÁöÑÂÖ≥Á≥ª  \n9.Êï∞ËØç: Ë°®Êï∞ÁõÆÊàñÈ°∫Â∫è  \n10.ÊÑüÂèπËØç: Ë°®Á§∫Âñú„ÄÅÊÄí„ÄÅÂìÄ„ÄÅ‰πêÁ≠âÊÑüÊÉÖ  \n\n### ‰∫å„ÄÅÂè•Â≠êÊàêÂàÜ (9Áßç)\n1.‰∏ªËØ≠  \n  ‚ë† ÊòØÂè•Â≠êÊâÄË¶ÅËØ¥ÁöÑ‰∫∫ÊàñÁâ©ÔºåÂõûÁ≠îÊòØ\"Ë∞Å\"ÊàñËÄÖ\"‰ªÄ‰πà\";  \n  ‚ë° ÈÄöÂ∏∏Áî®ÂêçËØçÊàñ‰ª£ËØçÊãÖ‰ªª  \n2.Ë∞ìËØ≠  \n  ‚ë† ËØ¥Êòé‰∏ªËØ≠ÁöÑÂä®‰ΩúÊàñÁä∂ÊÄÅÔºåÂõûÁ≠î\"ÂÅö‰ªÄ‰πà\"  \n  ‚ë° Áî±Âä®ËØç&Âä®ËØçÁü≠ËØ≠ÊãÖ‰ªª  \n3.ÂÆæËØ≠  \n  ‚ë† Ë°®ÂèäÁâ©Âä®ËØçÁöÑÂØπË±°ÊàñÁªìÊûú  \n  ‚ë° ÊúâÂêçËØçÊàñ‰ª£ËØçÊãÖ‰ªª  \n4.Ë°®ËØ≠  \n  ‚ë† Âú®Á≥ªÂä®ËØçÂêéÔºåËØ¥Êòé‰∏ªËØ≠ÁöÑË∫´‰ªΩÊàñÁâπÊÄßÔºåÂõûÁ≠îÊòØ\"‰ªÄ‰πà\"ÊàñËÄÖ\"ÊÄé‰πàÊ†∑\"  \n  ‚ë° Áî±ÂêçËØç„ÄÅ‰ª£ËØçÊàñÂΩ¢ÂÆπËØçÊãÖ‰ªª  \n5.ÂèåÂÆæËØ≠  \n  ‚ë† Êúâ‰∫õÂèäÁâ©Âä®ËØçÂ∏¶‰∏§‰∏™ÂÆæËØ≠Ôºå‰∏Ä‰∏™ÊåáÁâ©Ôºå‰∏Ä‰∏™Êåá‰∫∫  \n  ‚ë° ÊåáÁâ©ÁöÑÂè´Áõ¥Êé•ÂÆæËØ≠ÔºåÊåá‰∫∫ÁöÑÂè´Èó¥Êé•ÂÆæËØ≠  \n  ‚ë¢ ÁÆÄ‰ªãÂÆæËØ≠‰∏ÄËà¨ÊîæÂú®Áõ¥Êé•ÂÆæËØ≠ÁöÑÂâçÈù¢  \n  Ê≥®ÊÑè:  \n    ÂèØÊää‰ªãËØçtoÊàñforÂä†Âú®Èó¥Êé•ÂÆæËØ≠ÂâçÊûÑÊàêÁü≠ËØ≠ÔºåÊîæÂú®Áõ¥Êé•ÂÆæËØ≠ÂêéÈù¢ÔºåÊù•Âº∫Ë∞ÉÈó¥Êé•ÂÆæËØ≠  \n6.ÂÆöËØ≠:  \n  ‚ë† ‰øÆÈ•∞ÂêçËØçÊàñ‰ª£ËØç  \n7.Áä∂ËØ≠  \n  ‰øÆÈ•∞Âä®ËØç„ÄÅÂΩ¢ÂÆπËØç„ÄÅÂâØËØç  \n8.ÂÆæËØ≠Ë°•Ë∂≥ËØ≠  \n  ‚ë† Áî®Êù•ËØ¥ÊòéÂÆæËØ≠ÊÄé‰πàÊ†∑ÊàñËÄÖÂπ≤‰ªÄ‰πà  \n  ‚ë° Áî±ÂΩ¢ÂÆπËØçÊàñÂä®ËØçÂÖÖÂΩì  \n6.Âêå‰ΩçËØ≠  \n  Ê†πÂú®ÂêçËØç„ÄÅ‰ª£ËØçÂêéÈù¢ÔºåËøõ‰∏ÄÊ≠•ËØ¥ÊòéÂÆÉÁöÑÊÉÖÂÜµ  \n\nÊØîËæÉ  \n1.ÂÆöËØ≠&Áä∂ËØ≠  \n  ÁúãÊúâÊ≤°ÊúâË¢´‰øÆÈ•∞ÁöÑÂêçËØç  \n    Êúâ  ÂÆöËØ≠  \n    Êó†  Áä∂ËØ≠  \n2.ÂÆæËØ≠&Ë°®ËØ≠  \n  Âä®ËØç + ÂÆæËØ≠  \n  be/ÊÑüÂÆòÂä®ËØç + Ë°®ËØ≠  \n3.ÂèåÂÆæ&ÂÆæË°•  \n  Ë¢´Âä®ËØ≠ÊÄÅ  \n    ‰∏§‰∏™Ë¢´Âä®Âè•-ÂèåÂÆæ  \n    ‰∏Ä‰∏™Ë¢´Âä®Âè•-ÂÆæË°•  \n  Âä®ËØç+1+2  \n\n### ‰∏â„ÄÅÊûÑËØçÊ≥ï Ôºà3ÁßçÔºâ  \n1.ÂêàÊàêÊ≥ï  \n2.Ê¥æÁîüÂèë  \n  2.1 Ê¥æÁîüÂêçËØç  \n     Âä®ËØç+er/or  \n     Âä®ËØç+ing \n     Âä®ËØç+(t)ion  \n     ÂΩ¢ÂÆπËØç+ness  \n     ÂÖ∂ÂÆÉ  \n  2.2 Ê¥æÁîüÂΩ¢ÂÆπËØç\n     ÂêçËØç+y   \n     ÂêçËØç+ful   \n     Âä®ËØç+ing/ed    \n     friendly  \n     dangerous   \n     ÂõΩÂêç  \n  2.3 Ê¥æÁîüÂâØËØç  \n     ÂΩ¢ÂÆπËØç+ly   ÂÖ∂ÂÆÉ  \n3.ËΩ¨Êç¢Ê≥ï  \n  ‚ë† ÂΩ¢ÂÆπËØç->Âä®ËØç  \n  ‚ë° Âä®ËØç->ÂêçËØç  \n  ‚ë¢ ÂêçËØç->Âä®ËØç  \n  ‚ë£ ÂΩ¢ÂÆπËØç->ÂâØËØç  \n  ‚ë§ ÂâØËØç->ËøûËØç  \n  ‚ë• ‰ªãËØç->ÂâØËØç  ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "englishgrammar",
        "grammar",
        "yueleicool",
        "yueleicool englishgrammar",
        "learning yueleicool",
        "englishgrammar provides"
      ],
      "category": "education-and-learning"
    }
  }
}